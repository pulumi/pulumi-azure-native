// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180601

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Activity dependency information.
type ActivityDependency struct {
	// Activity name.
	Activity string `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions []string `pulumi:"dependencyConditions"`
}

// ActivityDependencyInput is an input type that accepts ActivityDependencyArgs and ActivityDependencyOutput values.
// You can construct a concrete instance of `ActivityDependencyInput` via:
//
//          ActivityDependencyArgs{...}
type ActivityDependencyInput interface {
	pulumi.Input

	ToActivityDependencyOutput() ActivityDependencyOutput
	ToActivityDependencyOutputWithContext(context.Context) ActivityDependencyOutput
}

// Activity dependency information.
type ActivityDependencyArgs struct {
	// Activity name.
	Activity pulumi.StringInput `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions pulumi.StringArrayInput `pulumi:"dependencyConditions"`
}

func (ActivityDependencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependency)(nil)).Elem()
}

func (i ActivityDependencyArgs) ToActivityDependencyOutput() ActivityDependencyOutput {
	return i.ToActivityDependencyOutputWithContext(context.Background())
}

func (i ActivityDependencyArgs) ToActivityDependencyOutputWithContext(ctx context.Context) ActivityDependencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyOutput)
}

// ActivityDependencyArrayInput is an input type that accepts ActivityDependencyArray and ActivityDependencyArrayOutput values.
// You can construct a concrete instance of `ActivityDependencyArrayInput` via:
//
//          ActivityDependencyArray{ ActivityDependencyArgs{...} }
type ActivityDependencyArrayInput interface {
	pulumi.Input

	ToActivityDependencyArrayOutput() ActivityDependencyArrayOutput
	ToActivityDependencyArrayOutputWithContext(context.Context) ActivityDependencyArrayOutput
}

type ActivityDependencyArray []ActivityDependencyInput

func (ActivityDependencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependency)(nil)).Elem()
}

func (i ActivityDependencyArray) ToActivityDependencyArrayOutput() ActivityDependencyArrayOutput {
	return i.ToActivityDependencyArrayOutputWithContext(context.Background())
}

func (i ActivityDependencyArray) ToActivityDependencyArrayOutputWithContext(ctx context.Context) ActivityDependencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyArrayOutput)
}

// Activity dependency information.
type ActivityDependencyOutput struct{ *pulumi.OutputState }

func (ActivityDependencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependency)(nil)).Elem()
}

func (o ActivityDependencyOutput) ToActivityDependencyOutput() ActivityDependencyOutput {
	return o
}

func (o ActivityDependencyOutput) ToActivityDependencyOutputWithContext(ctx context.Context) ActivityDependencyOutput {
	return o
}

// Activity name.
func (o ActivityDependencyOutput) Activity() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityDependency) string { return v.Activity }).(pulumi.StringOutput)
}

// Match-Condition for the dependency.
func (o ActivityDependencyOutput) DependencyConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityDependency) []string { return v.DependencyConditions }).(pulumi.StringArrayOutput)
}

type ActivityDependencyArrayOutput struct{ *pulumi.OutputState }

func (ActivityDependencyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependency)(nil)).Elem()
}

func (o ActivityDependencyArrayOutput) ToActivityDependencyArrayOutput() ActivityDependencyArrayOutput {
	return o
}

func (o ActivityDependencyArrayOutput) ToActivityDependencyArrayOutputWithContext(ctx context.Context) ActivityDependencyArrayOutput {
	return o
}

func (o ActivityDependencyArrayOutput) Index(i pulumi.IntInput) ActivityDependencyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityDependency {
		return vs[0].([]ActivityDependency)[vs[1].(int)]
	}).(ActivityDependencyOutput)
}

// Activity dependency information.
type ActivityDependencyResponse struct {
	// Activity name.
	Activity string `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions []string `pulumi:"dependencyConditions"`
}

// ActivityDependencyResponseInput is an input type that accepts ActivityDependencyResponseArgs and ActivityDependencyResponseOutput values.
// You can construct a concrete instance of `ActivityDependencyResponseInput` via:
//
//          ActivityDependencyResponseArgs{...}
type ActivityDependencyResponseInput interface {
	pulumi.Input

	ToActivityDependencyResponseOutput() ActivityDependencyResponseOutput
	ToActivityDependencyResponseOutputWithContext(context.Context) ActivityDependencyResponseOutput
}

// Activity dependency information.
type ActivityDependencyResponseArgs struct {
	// Activity name.
	Activity pulumi.StringInput `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions pulumi.StringArrayInput `pulumi:"dependencyConditions"`
}

func (ActivityDependencyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependencyResponse)(nil)).Elem()
}

func (i ActivityDependencyResponseArgs) ToActivityDependencyResponseOutput() ActivityDependencyResponseOutput {
	return i.ToActivityDependencyResponseOutputWithContext(context.Background())
}

func (i ActivityDependencyResponseArgs) ToActivityDependencyResponseOutputWithContext(ctx context.Context) ActivityDependencyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyResponseOutput)
}

// ActivityDependencyResponseArrayInput is an input type that accepts ActivityDependencyResponseArray and ActivityDependencyResponseArrayOutput values.
// You can construct a concrete instance of `ActivityDependencyResponseArrayInput` via:
//
//          ActivityDependencyResponseArray{ ActivityDependencyResponseArgs{...} }
type ActivityDependencyResponseArrayInput interface {
	pulumi.Input

	ToActivityDependencyResponseArrayOutput() ActivityDependencyResponseArrayOutput
	ToActivityDependencyResponseArrayOutputWithContext(context.Context) ActivityDependencyResponseArrayOutput
}

type ActivityDependencyResponseArray []ActivityDependencyResponseInput

func (ActivityDependencyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependencyResponse)(nil)).Elem()
}

func (i ActivityDependencyResponseArray) ToActivityDependencyResponseArrayOutput() ActivityDependencyResponseArrayOutput {
	return i.ToActivityDependencyResponseArrayOutputWithContext(context.Background())
}

func (i ActivityDependencyResponseArray) ToActivityDependencyResponseArrayOutputWithContext(ctx context.Context) ActivityDependencyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyResponseArrayOutput)
}

// Activity dependency information.
type ActivityDependencyResponseOutput struct{ *pulumi.OutputState }

func (ActivityDependencyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependencyResponse)(nil)).Elem()
}

func (o ActivityDependencyResponseOutput) ToActivityDependencyResponseOutput() ActivityDependencyResponseOutput {
	return o
}

func (o ActivityDependencyResponseOutput) ToActivityDependencyResponseOutputWithContext(ctx context.Context) ActivityDependencyResponseOutput {
	return o
}

// Activity name.
func (o ActivityDependencyResponseOutput) Activity() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityDependencyResponse) string { return v.Activity }).(pulumi.StringOutput)
}

// Match-Condition for the dependency.
func (o ActivityDependencyResponseOutput) DependencyConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityDependencyResponse) []string { return v.DependencyConditions }).(pulumi.StringArrayOutput)
}

type ActivityDependencyResponseArrayOutput struct{ *pulumi.OutputState }

func (ActivityDependencyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependencyResponse)(nil)).Elem()
}

func (o ActivityDependencyResponseArrayOutput) ToActivityDependencyResponseArrayOutput() ActivityDependencyResponseArrayOutput {
	return o
}

func (o ActivityDependencyResponseArrayOutput) ToActivityDependencyResponseArrayOutputWithContext(ctx context.Context) ActivityDependencyResponseArrayOutput {
	return o
}

func (o ActivityDependencyResponseArrayOutput) Index(i pulumi.IntInput) ActivityDependencyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityDependencyResponse {
		return vs[0].([]ActivityDependencyResponse)[vs[1].(int)]
	}).(ActivityDependencyResponseOutput)
}

// Execution policy for an activity.
type ActivityPolicy struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Retry interface{} `pulumi:"retry"`
	// Interval between each retry attempt (in seconds). The default is 30 sec.
	RetryIntervalInSeconds *int `pulumi:"retryIntervalInSeconds"`
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput *bool `pulumi:"secureInput"`
	// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
	SecureOutput *bool `pulumi:"secureOutput"`
	// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout interface{} `pulumi:"timeout"`
}

// ActivityPolicyInput is an input type that accepts ActivityPolicyArgs and ActivityPolicyOutput values.
// You can construct a concrete instance of `ActivityPolicyInput` via:
//
//          ActivityPolicyArgs{...}
type ActivityPolicyInput interface {
	pulumi.Input

	ToActivityPolicyOutput() ActivityPolicyOutput
	ToActivityPolicyOutputWithContext(context.Context) ActivityPolicyOutput
}

// Execution policy for an activity.
type ActivityPolicyArgs struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Retry pulumi.Input `pulumi:"retry"`
	// Interval between each retry attempt (in seconds). The default is 30 sec.
	RetryIntervalInSeconds pulumi.IntPtrInput `pulumi:"retryIntervalInSeconds"`
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput pulumi.BoolPtrInput `pulumi:"secureInput"`
	// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
	SecureOutput pulumi.BoolPtrInput `pulumi:"secureOutput"`
	// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout pulumi.Input `pulumi:"timeout"`
}

func (ActivityPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityPolicy)(nil)).Elem()
}

func (i ActivityPolicyArgs) ToActivityPolicyOutput() ActivityPolicyOutput {
	return i.ToActivityPolicyOutputWithContext(context.Background())
}

func (i ActivityPolicyArgs) ToActivityPolicyOutputWithContext(ctx context.Context) ActivityPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityPolicyOutput)
}

func (i ActivityPolicyArgs) ToActivityPolicyPtrOutput() ActivityPolicyPtrOutput {
	return i.ToActivityPolicyPtrOutputWithContext(context.Background())
}

func (i ActivityPolicyArgs) ToActivityPolicyPtrOutputWithContext(ctx context.Context) ActivityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityPolicyOutput).ToActivityPolicyPtrOutputWithContext(ctx)
}

// ActivityPolicyPtrInput is an input type that accepts ActivityPolicyArgs, ActivityPolicyPtr and ActivityPolicyPtrOutput values.
// You can construct a concrete instance of `ActivityPolicyPtrInput` via:
//
//          ActivityPolicyArgs{...}
//
//  or:
//
//          nil
type ActivityPolicyPtrInput interface {
	pulumi.Input

	ToActivityPolicyPtrOutput() ActivityPolicyPtrOutput
	ToActivityPolicyPtrOutputWithContext(context.Context) ActivityPolicyPtrOutput
}

type activityPolicyPtrType ActivityPolicyArgs

func ActivityPolicyPtr(v *ActivityPolicyArgs) ActivityPolicyPtrInput {
	return (*activityPolicyPtrType)(v)
}

func (*activityPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivityPolicy)(nil)).Elem()
}

func (i *activityPolicyPtrType) ToActivityPolicyPtrOutput() ActivityPolicyPtrOutput {
	return i.ToActivityPolicyPtrOutputWithContext(context.Background())
}

func (i *activityPolicyPtrType) ToActivityPolicyPtrOutputWithContext(ctx context.Context) ActivityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityPolicyPtrOutput)
}

// Execution policy for an activity.
type ActivityPolicyOutput struct{ *pulumi.OutputState }

func (ActivityPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityPolicy)(nil)).Elem()
}

func (o ActivityPolicyOutput) ToActivityPolicyOutput() ActivityPolicyOutput {
	return o
}

func (o ActivityPolicyOutput) ToActivityPolicyOutputWithContext(ctx context.Context) ActivityPolicyOutput {
	return o
}

func (o ActivityPolicyOutput) ToActivityPolicyPtrOutput() ActivityPolicyPtrOutput {
	return o.ToActivityPolicyPtrOutputWithContext(context.Background())
}

func (o ActivityPolicyOutput) ToActivityPolicyPtrOutputWithContext(ctx context.Context) ActivityPolicyPtrOutput {
	return o.ApplyT(func(v ActivityPolicy) *ActivityPolicy {
		return &v
	}).(ActivityPolicyPtrOutput)
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o ActivityPolicyOutput) Retry() pulumi.AnyOutput {
	return o.ApplyT(func(v ActivityPolicy) interface{} { return v.Retry }).(pulumi.AnyOutput)
}

// Interval between each retry attempt (in seconds). The default is 30 sec.
func (o ActivityPolicyOutput) RetryIntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ActivityPolicy) *int { return v.RetryIntervalInSeconds }).(pulumi.IntPtrOutput)
}

// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
func (o ActivityPolicyOutput) SecureInput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActivityPolicy) *bool { return v.SecureInput }).(pulumi.BoolPtrOutput)
}

// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
func (o ActivityPolicyOutput) SecureOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActivityPolicy) *bool { return v.SecureOutput }).(pulumi.BoolPtrOutput)
}

// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ActivityPolicyOutput) Timeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ActivityPolicy) interface{} { return v.Timeout }).(pulumi.AnyOutput)
}

type ActivityPolicyPtrOutput struct{ *pulumi.OutputState }

func (ActivityPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivityPolicy)(nil)).Elem()
}

func (o ActivityPolicyPtrOutput) ToActivityPolicyPtrOutput() ActivityPolicyPtrOutput {
	return o
}

func (o ActivityPolicyPtrOutput) ToActivityPolicyPtrOutputWithContext(ctx context.Context) ActivityPolicyPtrOutput {
	return o
}

func (o ActivityPolicyPtrOutput) Elem() ActivityPolicyOutput {
	return o.ApplyT(func(v *ActivityPolicy) ActivityPolicy { return *v }).(ActivityPolicyOutput)
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o ActivityPolicyPtrOutput) Retry() pulumi.AnyOutput {
	return o.ApplyT(func(v *ActivityPolicy) interface{} {
		if v == nil {
			return nil
		}
		return v.Retry
	}).(pulumi.AnyOutput)
}

// Interval between each retry attempt (in seconds). The default is 30 sec.
func (o ActivityPolicyPtrOutput) RetryIntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ActivityPolicy) *int {
		if v == nil {
			return nil
		}
		return v.RetryIntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
func (o ActivityPolicyPtrOutput) SecureInput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActivityPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.SecureInput
	}).(pulumi.BoolPtrOutput)
}

// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
func (o ActivityPolicyPtrOutput) SecureOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActivityPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.SecureOutput
	}).(pulumi.BoolPtrOutput)
}

// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ActivityPolicyPtrOutput) Timeout() pulumi.AnyOutput {
	return o.ApplyT(func(v *ActivityPolicy) interface{} {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.AnyOutput)
}

// Execution policy for an activity.
type ActivityPolicyResponse struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Retry interface{} `pulumi:"retry"`
	// Interval between each retry attempt (in seconds). The default is 30 sec.
	RetryIntervalInSeconds *int `pulumi:"retryIntervalInSeconds"`
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput *bool `pulumi:"secureInput"`
	// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
	SecureOutput *bool `pulumi:"secureOutput"`
	// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout interface{} `pulumi:"timeout"`
}

// ActivityPolicyResponseInput is an input type that accepts ActivityPolicyResponseArgs and ActivityPolicyResponseOutput values.
// You can construct a concrete instance of `ActivityPolicyResponseInput` via:
//
//          ActivityPolicyResponseArgs{...}
type ActivityPolicyResponseInput interface {
	pulumi.Input

	ToActivityPolicyResponseOutput() ActivityPolicyResponseOutput
	ToActivityPolicyResponseOutputWithContext(context.Context) ActivityPolicyResponseOutput
}

// Execution policy for an activity.
type ActivityPolicyResponseArgs struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Retry pulumi.Input `pulumi:"retry"`
	// Interval between each retry attempt (in seconds). The default is 30 sec.
	RetryIntervalInSeconds pulumi.IntPtrInput `pulumi:"retryIntervalInSeconds"`
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput pulumi.BoolPtrInput `pulumi:"secureInput"`
	// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
	SecureOutput pulumi.BoolPtrInput `pulumi:"secureOutput"`
	// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout pulumi.Input `pulumi:"timeout"`
}

func (ActivityPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityPolicyResponse)(nil)).Elem()
}

func (i ActivityPolicyResponseArgs) ToActivityPolicyResponseOutput() ActivityPolicyResponseOutput {
	return i.ToActivityPolicyResponseOutputWithContext(context.Background())
}

func (i ActivityPolicyResponseArgs) ToActivityPolicyResponseOutputWithContext(ctx context.Context) ActivityPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityPolicyResponseOutput)
}

func (i ActivityPolicyResponseArgs) ToActivityPolicyResponsePtrOutput() ActivityPolicyResponsePtrOutput {
	return i.ToActivityPolicyResponsePtrOutputWithContext(context.Background())
}

func (i ActivityPolicyResponseArgs) ToActivityPolicyResponsePtrOutputWithContext(ctx context.Context) ActivityPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityPolicyResponseOutput).ToActivityPolicyResponsePtrOutputWithContext(ctx)
}

// ActivityPolicyResponsePtrInput is an input type that accepts ActivityPolicyResponseArgs, ActivityPolicyResponsePtr and ActivityPolicyResponsePtrOutput values.
// You can construct a concrete instance of `ActivityPolicyResponsePtrInput` via:
//
//          ActivityPolicyResponseArgs{...}
//
//  or:
//
//          nil
type ActivityPolicyResponsePtrInput interface {
	pulumi.Input

	ToActivityPolicyResponsePtrOutput() ActivityPolicyResponsePtrOutput
	ToActivityPolicyResponsePtrOutputWithContext(context.Context) ActivityPolicyResponsePtrOutput
}

type activityPolicyResponsePtrType ActivityPolicyResponseArgs

func ActivityPolicyResponsePtr(v *ActivityPolicyResponseArgs) ActivityPolicyResponsePtrInput {
	return (*activityPolicyResponsePtrType)(v)
}

func (*activityPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivityPolicyResponse)(nil)).Elem()
}

func (i *activityPolicyResponsePtrType) ToActivityPolicyResponsePtrOutput() ActivityPolicyResponsePtrOutput {
	return i.ToActivityPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *activityPolicyResponsePtrType) ToActivityPolicyResponsePtrOutputWithContext(ctx context.Context) ActivityPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityPolicyResponsePtrOutput)
}

// Execution policy for an activity.
type ActivityPolicyResponseOutput struct{ *pulumi.OutputState }

func (ActivityPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityPolicyResponse)(nil)).Elem()
}

func (o ActivityPolicyResponseOutput) ToActivityPolicyResponseOutput() ActivityPolicyResponseOutput {
	return o
}

func (o ActivityPolicyResponseOutput) ToActivityPolicyResponseOutputWithContext(ctx context.Context) ActivityPolicyResponseOutput {
	return o
}

func (o ActivityPolicyResponseOutput) ToActivityPolicyResponsePtrOutput() ActivityPolicyResponsePtrOutput {
	return o.ToActivityPolicyResponsePtrOutputWithContext(context.Background())
}

func (o ActivityPolicyResponseOutput) ToActivityPolicyResponsePtrOutputWithContext(ctx context.Context) ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v ActivityPolicyResponse) *ActivityPolicyResponse {
		return &v
	}).(ActivityPolicyResponsePtrOutput)
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o ActivityPolicyResponseOutput) Retry() pulumi.AnyOutput {
	return o.ApplyT(func(v ActivityPolicyResponse) interface{} { return v.Retry }).(pulumi.AnyOutput)
}

// Interval between each retry attempt (in seconds). The default is 30 sec.
func (o ActivityPolicyResponseOutput) RetryIntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ActivityPolicyResponse) *int { return v.RetryIntervalInSeconds }).(pulumi.IntPtrOutput)
}

// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
func (o ActivityPolicyResponseOutput) SecureInput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActivityPolicyResponse) *bool { return v.SecureInput }).(pulumi.BoolPtrOutput)
}

// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
func (o ActivityPolicyResponseOutput) SecureOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActivityPolicyResponse) *bool { return v.SecureOutput }).(pulumi.BoolPtrOutput)
}

// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ActivityPolicyResponseOutput) Timeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ActivityPolicyResponse) interface{} { return v.Timeout }).(pulumi.AnyOutput)
}

type ActivityPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ActivityPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivityPolicyResponse)(nil)).Elem()
}

func (o ActivityPolicyResponsePtrOutput) ToActivityPolicyResponsePtrOutput() ActivityPolicyResponsePtrOutput {
	return o
}

func (o ActivityPolicyResponsePtrOutput) ToActivityPolicyResponsePtrOutputWithContext(ctx context.Context) ActivityPolicyResponsePtrOutput {
	return o
}

func (o ActivityPolicyResponsePtrOutput) Elem() ActivityPolicyResponseOutput {
	return o.ApplyT(func(v *ActivityPolicyResponse) ActivityPolicyResponse { return *v }).(ActivityPolicyResponseOutput)
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o ActivityPolicyResponsePtrOutput) Retry() pulumi.AnyOutput {
	return o.ApplyT(func(v *ActivityPolicyResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Retry
	}).(pulumi.AnyOutput)
}

// Interval between each retry attempt (in seconds). The default is 30 sec.
func (o ActivityPolicyResponsePtrOutput) RetryIntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ActivityPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.RetryIntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
func (o ActivityPolicyResponsePtrOutput) SecureInput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActivityPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SecureInput
	}).(pulumi.BoolPtrOutput)
}

// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
func (o ActivityPolicyResponsePtrOutput) SecureOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActivityPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SecureOutput
	}).(pulumi.BoolPtrOutput)
}

// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ActivityPolicyResponsePtrOutput) Timeout() pulumi.AnyOutput {
	return o.ApplyT(func(v *ActivityPolicyResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.AnyOutput)
}

// Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedService struct {
	// The access key id used to access data.
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
	MarketplaceID interface{} `pulumi:"marketplaceID"`
	// The Amazon MWS authentication token.
	MwsAuthToken interface{} `pulumi:"mwsAuthToken"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret key used to access data.
	SecretKey interface{} `pulumi:"secretKey"`
	// The Amazon seller ID.
	SellerID interface{} `pulumi:"sellerID"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// AmazonMWSLinkedServiceInput is an input type that accepts AmazonMWSLinkedServiceArgs and AmazonMWSLinkedServiceOutput values.
// You can construct a concrete instance of `AmazonMWSLinkedServiceInput` via:
//
//          AmazonMWSLinkedServiceArgs{...}
type AmazonMWSLinkedServiceInput interface {
	pulumi.Input

	ToAmazonMWSLinkedServiceOutput() AmazonMWSLinkedServiceOutput
	ToAmazonMWSLinkedServiceOutputWithContext(context.Context) AmazonMWSLinkedServiceOutput
}

// Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedServiceArgs struct {
	// The access key id used to access data.
	AccessKeyId pulumi.Input `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
	MarketplaceID pulumi.Input `pulumi:"marketplaceID"`
	// The Amazon MWS authentication token.
	MwsAuthToken pulumi.Input `pulumi:"mwsAuthToken"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The secret key used to access data.
	SecretKey pulumi.Input `pulumi:"secretKey"`
	// The Amazon seller ID.
	SellerID pulumi.Input `pulumi:"sellerID"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (AmazonMWSLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSLinkedService)(nil)).Elem()
}

func (i AmazonMWSLinkedServiceArgs) ToAmazonMWSLinkedServiceOutput() AmazonMWSLinkedServiceOutput {
	return i.ToAmazonMWSLinkedServiceOutputWithContext(context.Background())
}

func (i AmazonMWSLinkedServiceArgs) ToAmazonMWSLinkedServiceOutputWithContext(ctx context.Context) AmazonMWSLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonMWSLinkedServiceOutput)
}

// Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedServiceOutput struct{ *pulumi.OutputState }

func (AmazonMWSLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSLinkedService)(nil)).Elem()
}

func (o AmazonMWSLinkedServiceOutput) ToAmazonMWSLinkedServiceOutput() AmazonMWSLinkedServiceOutput {
	return o
}

func (o AmazonMWSLinkedServiceOutput) ToAmazonMWSLinkedServiceOutputWithContext(ctx context.Context) AmazonMWSLinkedServiceOutput {
	return o
}

// The access key id used to access data.
func (o AmazonMWSLinkedServiceOutput) AccessKeyId() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) interface{} { return v.AccessKeyId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AmazonMWSLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AmazonMWSLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AmazonMWSLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AmazonMWSLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
func (o AmazonMWSLinkedServiceOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
func (o AmazonMWSLinkedServiceOutput) MarketplaceID() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) interface{} { return v.MarketplaceID }).(pulumi.AnyOutput)
}

// The Amazon MWS authentication token.
func (o AmazonMWSLinkedServiceOutput) MwsAuthToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) interface{} { return v.MwsAuthToken }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AmazonMWSLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The secret key used to access data.
func (o AmazonMWSLinkedServiceOutput) SecretKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) interface{} { return v.SecretKey }).(pulumi.AnyOutput)
}

// The Amazon seller ID.
func (o AmazonMWSLinkedServiceOutput) SellerID() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) interface{} { return v.SellerID }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AmazonMWSLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o AmazonMWSLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o AmazonMWSLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o AmazonMWSLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedServiceResponse struct {
	// The access key id used to access data.
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
	MarketplaceID interface{} `pulumi:"marketplaceID"`
	// The Amazon MWS authentication token.
	MwsAuthToken interface{} `pulumi:"mwsAuthToken"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret key used to access data.
	SecretKey interface{} `pulumi:"secretKey"`
	// The Amazon seller ID.
	SellerID interface{} `pulumi:"sellerID"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// AmazonMWSLinkedServiceResponseInput is an input type that accepts AmazonMWSLinkedServiceResponseArgs and AmazonMWSLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AmazonMWSLinkedServiceResponseInput` via:
//
//          AmazonMWSLinkedServiceResponseArgs{...}
type AmazonMWSLinkedServiceResponseInput interface {
	pulumi.Input

	ToAmazonMWSLinkedServiceResponseOutput() AmazonMWSLinkedServiceResponseOutput
	ToAmazonMWSLinkedServiceResponseOutputWithContext(context.Context) AmazonMWSLinkedServiceResponseOutput
}

// Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedServiceResponseArgs struct {
	// The access key id used to access data.
	AccessKeyId pulumi.Input `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
	MarketplaceID pulumi.Input `pulumi:"marketplaceID"`
	// The Amazon MWS authentication token.
	MwsAuthToken pulumi.Input `pulumi:"mwsAuthToken"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The secret key used to access data.
	SecretKey pulumi.Input `pulumi:"secretKey"`
	// The Amazon seller ID.
	SellerID pulumi.Input `pulumi:"sellerID"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (AmazonMWSLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSLinkedServiceResponse)(nil)).Elem()
}

func (i AmazonMWSLinkedServiceResponseArgs) ToAmazonMWSLinkedServiceResponseOutput() AmazonMWSLinkedServiceResponseOutput {
	return i.ToAmazonMWSLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AmazonMWSLinkedServiceResponseArgs) ToAmazonMWSLinkedServiceResponseOutputWithContext(ctx context.Context) AmazonMWSLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonMWSLinkedServiceResponseOutput)
}

// Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AmazonMWSLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSLinkedServiceResponse)(nil)).Elem()
}

func (o AmazonMWSLinkedServiceResponseOutput) ToAmazonMWSLinkedServiceResponseOutput() AmazonMWSLinkedServiceResponseOutput {
	return o
}

func (o AmazonMWSLinkedServiceResponseOutput) ToAmazonMWSLinkedServiceResponseOutputWithContext(ctx context.Context) AmazonMWSLinkedServiceResponseOutput {
	return o
}

// The access key id used to access data.
func (o AmazonMWSLinkedServiceResponseOutput) AccessKeyId() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.AccessKeyId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AmazonMWSLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AmazonMWSLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AmazonMWSLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AmazonMWSLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
func (o AmazonMWSLinkedServiceResponseOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
func (o AmazonMWSLinkedServiceResponseOutput) MarketplaceID() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.MarketplaceID }).(pulumi.AnyOutput)
}

// The Amazon MWS authentication token.
func (o AmazonMWSLinkedServiceResponseOutput) MwsAuthToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.MwsAuthToken }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AmazonMWSLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The secret key used to access data.
func (o AmazonMWSLinkedServiceResponseOutput) SecretKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.SecretKey }).(pulumi.AnyOutput)
}

// The Amazon seller ID.
func (o AmazonMWSLinkedServiceResponseOutput) SellerID() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.SellerID }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AmazonMWSLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o AmazonMWSLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o AmazonMWSLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o AmazonMWSLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AmazonMWSObjectDatasetInput is an input type that accepts AmazonMWSObjectDatasetArgs and AmazonMWSObjectDatasetOutput values.
// You can construct a concrete instance of `AmazonMWSObjectDatasetInput` via:
//
//          AmazonMWSObjectDatasetArgs{...}
type AmazonMWSObjectDatasetInput interface {
	pulumi.Input

	ToAmazonMWSObjectDatasetOutput() AmazonMWSObjectDatasetOutput
	ToAmazonMWSObjectDatasetOutputWithContext(context.Context) AmazonMWSObjectDatasetOutput
}

// Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AmazonMWSObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSObjectDataset)(nil)).Elem()
}

func (i AmazonMWSObjectDatasetArgs) ToAmazonMWSObjectDatasetOutput() AmazonMWSObjectDatasetOutput {
	return i.ToAmazonMWSObjectDatasetOutputWithContext(context.Background())
}

func (i AmazonMWSObjectDatasetArgs) ToAmazonMWSObjectDatasetOutputWithContext(ctx context.Context) AmazonMWSObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonMWSObjectDatasetOutput)
}

// Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDatasetOutput struct{ *pulumi.OutputState }

func (AmazonMWSObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSObjectDataset)(nil)).Elem()
}

func (o AmazonMWSObjectDatasetOutput) ToAmazonMWSObjectDatasetOutput() AmazonMWSObjectDatasetOutput {
	return o
}

func (o AmazonMWSObjectDatasetOutput) ToAmazonMWSObjectDatasetOutputWithContext(ctx context.Context) AmazonMWSObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AmazonMWSObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonMWSObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AmazonMWSObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonMWSObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AmazonMWSObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AmazonMWSObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AmazonMWSObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AmazonMWSObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AmazonMWSObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AmazonMWSObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AmazonMWSObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AmazonMWSObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o AmazonMWSObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AmazonMWSObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonMWSObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AmazonMWSObjectDatasetResponseInput is an input type that accepts AmazonMWSObjectDatasetResponseArgs and AmazonMWSObjectDatasetResponseOutput values.
// You can construct a concrete instance of `AmazonMWSObjectDatasetResponseInput` via:
//
//          AmazonMWSObjectDatasetResponseArgs{...}
type AmazonMWSObjectDatasetResponseInput interface {
	pulumi.Input

	ToAmazonMWSObjectDatasetResponseOutput() AmazonMWSObjectDatasetResponseOutput
	ToAmazonMWSObjectDatasetResponseOutputWithContext(context.Context) AmazonMWSObjectDatasetResponseOutput
}

// Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AmazonMWSObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSObjectDatasetResponse)(nil)).Elem()
}

func (i AmazonMWSObjectDatasetResponseArgs) ToAmazonMWSObjectDatasetResponseOutput() AmazonMWSObjectDatasetResponseOutput {
	return i.ToAmazonMWSObjectDatasetResponseOutputWithContext(context.Background())
}

func (i AmazonMWSObjectDatasetResponseArgs) ToAmazonMWSObjectDatasetResponseOutputWithContext(ctx context.Context) AmazonMWSObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonMWSObjectDatasetResponseOutput)
}

// Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (AmazonMWSObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSObjectDatasetResponse)(nil)).Elem()
}

func (o AmazonMWSObjectDatasetResponseOutput) ToAmazonMWSObjectDatasetResponseOutput() AmazonMWSObjectDatasetResponseOutput {
	return o
}

func (o AmazonMWSObjectDatasetResponseOutput) ToAmazonMWSObjectDatasetResponseOutputWithContext(ctx context.Context) AmazonMWSObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AmazonMWSObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AmazonMWSObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AmazonMWSObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AmazonMWSObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AmazonMWSObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AmazonMWSObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AmazonMWSObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o AmazonMWSObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AmazonMWSObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Amazon Redshift.
type AmazonRedshiftLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password of the Amazon Redshift source.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
	Port interface{} `pulumi:"port"`
	// The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// AmazonRedshiftLinkedServiceInput is an input type that accepts AmazonRedshiftLinkedServiceArgs and AmazonRedshiftLinkedServiceOutput values.
// You can construct a concrete instance of `AmazonRedshiftLinkedServiceInput` via:
//
//          AmazonRedshiftLinkedServiceArgs{...}
type AmazonRedshiftLinkedServiceInput interface {
	pulumi.Input

	ToAmazonRedshiftLinkedServiceOutput() AmazonRedshiftLinkedServiceOutput
	ToAmazonRedshiftLinkedServiceOutputWithContext(context.Context) AmazonRedshiftLinkedServiceOutput
}

// Linked service for Amazon Redshift.
type AmazonRedshiftLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password of the Amazon Redshift source.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
	Port pulumi.Input `pulumi:"port"`
	// The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (AmazonRedshiftLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRedshiftLinkedService)(nil)).Elem()
}

func (i AmazonRedshiftLinkedServiceArgs) ToAmazonRedshiftLinkedServiceOutput() AmazonRedshiftLinkedServiceOutput {
	return i.ToAmazonRedshiftLinkedServiceOutputWithContext(context.Background())
}

func (i AmazonRedshiftLinkedServiceArgs) ToAmazonRedshiftLinkedServiceOutputWithContext(ctx context.Context) AmazonRedshiftLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonRedshiftLinkedServiceOutput)
}

// Linked service for Amazon Redshift.
type AmazonRedshiftLinkedServiceOutput struct{ *pulumi.OutputState }

func (AmazonRedshiftLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRedshiftLinkedService)(nil)).Elem()
}

func (o AmazonRedshiftLinkedServiceOutput) ToAmazonRedshiftLinkedServiceOutput() AmazonRedshiftLinkedServiceOutput {
	return o
}

func (o AmazonRedshiftLinkedServiceOutput) ToAmazonRedshiftLinkedServiceOutputWithContext(ctx context.Context) AmazonRedshiftLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AmazonRedshiftLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AmazonRedshiftLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
func (o AmazonRedshiftLinkedServiceOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AmazonRedshiftLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AmazonRedshiftLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AmazonRedshiftLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password of the Amazon Redshift source.
func (o AmazonRedshiftLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
func (o AmazonRedshiftLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
func (o AmazonRedshiftLinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AmazonRedshiftLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
func (o AmazonRedshiftLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for Amazon Redshift.
type AmazonRedshiftLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password of the Amazon Redshift source.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
	Port interface{} `pulumi:"port"`
	// The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// AmazonRedshiftLinkedServiceResponseInput is an input type that accepts AmazonRedshiftLinkedServiceResponseArgs and AmazonRedshiftLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AmazonRedshiftLinkedServiceResponseInput` via:
//
//          AmazonRedshiftLinkedServiceResponseArgs{...}
type AmazonRedshiftLinkedServiceResponseInput interface {
	pulumi.Input

	ToAmazonRedshiftLinkedServiceResponseOutput() AmazonRedshiftLinkedServiceResponseOutput
	ToAmazonRedshiftLinkedServiceResponseOutputWithContext(context.Context) AmazonRedshiftLinkedServiceResponseOutput
}

// Linked service for Amazon Redshift.
type AmazonRedshiftLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The password of the Amazon Redshift source.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
	Port pulumi.Input `pulumi:"port"`
	// The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (AmazonRedshiftLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRedshiftLinkedServiceResponse)(nil)).Elem()
}

func (i AmazonRedshiftLinkedServiceResponseArgs) ToAmazonRedshiftLinkedServiceResponseOutput() AmazonRedshiftLinkedServiceResponseOutput {
	return i.ToAmazonRedshiftLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AmazonRedshiftLinkedServiceResponseArgs) ToAmazonRedshiftLinkedServiceResponseOutputWithContext(ctx context.Context) AmazonRedshiftLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonRedshiftLinkedServiceResponseOutput)
}

// Linked service for Amazon Redshift.
type AmazonRedshiftLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AmazonRedshiftLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRedshiftLinkedServiceResponse)(nil)).Elem()
}

func (o AmazonRedshiftLinkedServiceResponseOutput) ToAmazonRedshiftLinkedServiceResponseOutput() AmazonRedshiftLinkedServiceResponseOutput {
	return o
}

func (o AmazonRedshiftLinkedServiceResponseOutput) ToAmazonRedshiftLinkedServiceResponseOutputWithContext(ctx context.Context) AmazonRedshiftLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AmazonRedshiftLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AmazonRedshiftLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
func (o AmazonRedshiftLinkedServiceResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AmazonRedshiftLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AmazonRedshiftLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AmazonRedshiftLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The password of the Amazon Redshift source.
func (o AmazonRedshiftLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
func (o AmazonRedshiftLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
func (o AmazonRedshiftLinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AmazonRedshiftLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
func (o AmazonRedshiftLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// The Amazon Redshift table dataset.
type AmazonRedshiftTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Amazon Redshift table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AmazonRedshiftTableDatasetInput is an input type that accepts AmazonRedshiftTableDatasetArgs and AmazonRedshiftTableDatasetOutput values.
// You can construct a concrete instance of `AmazonRedshiftTableDatasetInput` via:
//
//          AmazonRedshiftTableDatasetArgs{...}
type AmazonRedshiftTableDatasetInput interface {
	pulumi.Input

	ToAmazonRedshiftTableDatasetOutput() AmazonRedshiftTableDatasetOutput
	ToAmazonRedshiftTableDatasetOutputWithContext(context.Context) AmazonRedshiftTableDatasetOutput
}

// The Amazon Redshift table dataset.
type AmazonRedshiftTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The Amazon Redshift table name. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AmazonRedshiftTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRedshiftTableDataset)(nil)).Elem()
}

func (i AmazonRedshiftTableDatasetArgs) ToAmazonRedshiftTableDatasetOutput() AmazonRedshiftTableDatasetOutput {
	return i.ToAmazonRedshiftTableDatasetOutputWithContext(context.Background())
}

func (i AmazonRedshiftTableDatasetArgs) ToAmazonRedshiftTableDatasetOutputWithContext(ctx context.Context) AmazonRedshiftTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonRedshiftTableDatasetOutput)
}

// The Amazon Redshift table dataset.
type AmazonRedshiftTableDatasetOutput struct{ *pulumi.OutputState }

func (AmazonRedshiftTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRedshiftTableDataset)(nil)).Elem()
}

func (o AmazonRedshiftTableDatasetOutput) ToAmazonRedshiftTableDatasetOutput() AmazonRedshiftTableDatasetOutput {
	return o
}

func (o AmazonRedshiftTableDatasetOutput) ToAmazonRedshiftTableDatasetOutputWithContext(ctx context.Context) AmazonRedshiftTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AmazonRedshiftTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AmazonRedshiftTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AmazonRedshiftTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AmazonRedshiftTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AmazonRedshiftTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AmazonRedshiftTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AmazonRedshiftTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Amazon Redshift table name. Type: string (or Expression with resultType string).
func (o AmazonRedshiftTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o AmazonRedshiftTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AmazonRedshiftTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Amazon Redshift table dataset.
type AmazonRedshiftTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Amazon Redshift table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AmazonRedshiftTableDatasetResponseInput is an input type that accepts AmazonRedshiftTableDatasetResponseArgs and AmazonRedshiftTableDatasetResponseOutput values.
// You can construct a concrete instance of `AmazonRedshiftTableDatasetResponseInput` via:
//
//          AmazonRedshiftTableDatasetResponseArgs{...}
type AmazonRedshiftTableDatasetResponseInput interface {
	pulumi.Input

	ToAmazonRedshiftTableDatasetResponseOutput() AmazonRedshiftTableDatasetResponseOutput
	ToAmazonRedshiftTableDatasetResponseOutputWithContext(context.Context) AmazonRedshiftTableDatasetResponseOutput
}

// The Amazon Redshift table dataset.
type AmazonRedshiftTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The Amazon Redshift table name. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AmazonRedshiftTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRedshiftTableDatasetResponse)(nil)).Elem()
}

func (i AmazonRedshiftTableDatasetResponseArgs) ToAmazonRedshiftTableDatasetResponseOutput() AmazonRedshiftTableDatasetResponseOutput {
	return i.ToAmazonRedshiftTableDatasetResponseOutputWithContext(context.Background())
}

func (i AmazonRedshiftTableDatasetResponseArgs) ToAmazonRedshiftTableDatasetResponseOutputWithContext(ctx context.Context) AmazonRedshiftTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonRedshiftTableDatasetResponseOutput)
}

// The Amazon Redshift table dataset.
type AmazonRedshiftTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AmazonRedshiftTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRedshiftTableDatasetResponse)(nil)).Elem()
}

func (o AmazonRedshiftTableDatasetResponseOutput) ToAmazonRedshiftTableDatasetResponseOutput() AmazonRedshiftTableDatasetResponseOutput {
	return o
}

func (o AmazonRedshiftTableDatasetResponseOutput) ToAmazonRedshiftTableDatasetResponseOutputWithContext(ctx context.Context) AmazonRedshiftTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AmazonRedshiftTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AmazonRedshiftTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AmazonRedshiftTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AmazonRedshiftTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AmazonRedshiftTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AmazonRedshiftTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AmazonRedshiftTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Amazon Redshift table name. Type: string (or Expression with resultType string).
func (o AmazonRedshiftTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o AmazonRedshiftTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AmazonRedshiftTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3Dataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
	BucketName interface{} `pulumi:"bucketName"`
	// The data compression method used for the Amazon S3 object.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
	Key interface{} `pulumi:"key"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The end of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
	// The version for the S3 object. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// AmazonS3DatasetInput is an input type that accepts AmazonS3DatasetArgs and AmazonS3DatasetOutput values.
// You can construct a concrete instance of `AmazonS3DatasetInput` via:
//
//          AmazonS3DatasetArgs{...}
type AmazonS3DatasetInput interface {
	pulumi.Input

	ToAmazonS3DatasetOutput() AmazonS3DatasetOutput
	ToAmazonS3DatasetOutputWithContext(context.Context) AmazonS3DatasetOutput
}

// A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3DatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
	BucketName pulumi.Input `pulumi:"bucketName"`
	// The data compression method used for the Amazon S3 object.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// The format of files.
	Format pulumi.Input `pulumi:"format"`
	// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
	Key pulumi.Input `pulumi:"key"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The end of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix pulumi.Input `pulumi:"prefix"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
	// The version for the S3 object. Type: string (or Expression with resultType string).
	Version pulumi.Input `pulumi:"version"`
}

func (AmazonS3DatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3Dataset)(nil)).Elem()
}

func (i AmazonS3DatasetArgs) ToAmazonS3DatasetOutput() AmazonS3DatasetOutput {
	return i.ToAmazonS3DatasetOutputWithContext(context.Background())
}

func (i AmazonS3DatasetArgs) ToAmazonS3DatasetOutputWithContext(ctx context.Context) AmazonS3DatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonS3DatasetOutput)
}

// A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3DatasetOutput struct{ *pulumi.OutputState }

func (AmazonS3DatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3Dataset)(nil)).Elem()
}

func (o AmazonS3DatasetOutput) ToAmazonS3DatasetOutput() AmazonS3DatasetOutput {
	return o
}

func (o AmazonS3DatasetOutput) ToAmazonS3DatasetOutputWithContext(ctx context.Context) AmazonS3DatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AmazonS3DatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonS3Dataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Dataset) interface{} { return v.BucketName }).(pulumi.AnyOutput)
}

// The data compression method used for the Amazon S3 object.
func (o AmazonS3DatasetOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Dataset) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o AmazonS3DatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonS3Dataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AmazonS3DatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AmazonS3Dataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// The format of files.
func (o AmazonS3DatasetOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Dataset) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetOutput) Key() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Dataset) interface{} { return v.Key }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AmazonS3DatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AmazonS3Dataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The end of S3 object's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Dataset) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of S3 object's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Dataset) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o AmazonS3DatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AmazonS3Dataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Dataset) interface{} { return v.Prefix }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AmazonS3DatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Dataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AmazonS3DatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Dataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AmazonS3DatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3Dataset) string { return v.Type }).(pulumi.StringOutput)
}

// The version for the S3 object. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Dataset) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3DatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
	BucketName interface{} `pulumi:"bucketName"`
	// The data compression method used for the Amazon S3 object.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
	Key interface{} `pulumi:"key"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The end of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
	// The version for the S3 object. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// AmazonS3DatasetResponseInput is an input type that accepts AmazonS3DatasetResponseArgs and AmazonS3DatasetResponseOutput values.
// You can construct a concrete instance of `AmazonS3DatasetResponseInput` via:
//
//          AmazonS3DatasetResponseArgs{...}
type AmazonS3DatasetResponseInput interface {
	pulumi.Input

	ToAmazonS3DatasetResponseOutput() AmazonS3DatasetResponseOutput
	ToAmazonS3DatasetResponseOutputWithContext(context.Context) AmazonS3DatasetResponseOutput
}

// A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3DatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
	BucketName pulumi.Input `pulumi:"bucketName"`
	// The data compression method used for the Amazon S3 object.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// The format of files.
	Format pulumi.Input `pulumi:"format"`
	// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
	Key pulumi.Input `pulumi:"key"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// The end of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix pulumi.Input `pulumi:"prefix"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
	// The version for the S3 object. Type: string (or Expression with resultType string).
	Version pulumi.Input `pulumi:"version"`
}

func (AmazonS3DatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3DatasetResponse)(nil)).Elem()
}

func (i AmazonS3DatasetResponseArgs) ToAmazonS3DatasetResponseOutput() AmazonS3DatasetResponseOutput {
	return i.ToAmazonS3DatasetResponseOutputWithContext(context.Background())
}

func (i AmazonS3DatasetResponseArgs) ToAmazonS3DatasetResponseOutputWithContext(ctx context.Context) AmazonS3DatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonS3DatasetResponseOutput)
}

// A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3DatasetResponseOutput struct{ *pulumi.OutputState }

func (AmazonS3DatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3DatasetResponse)(nil)).Elem()
}

func (o AmazonS3DatasetResponseOutput) ToAmazonS3DatasetResponseOutput() AmazonS3DatasetResponseOutput {
	return o
}

func (o AmazonS3DatasetResponseOutput) ToAmazonS3DatasetResponseOutputWithContext(ctx context.Context) AmazonS3DatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AmazonS3DatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetResponseOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.BucketName }).(pulumi.AnyOutput)
}

// The data compression method used for the Amazon S3 object.
func (o AmazonS3DatasetResponseOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o AmazonS3DatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AmazonS3DatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// The format of files.
func (o AmazonS3DatasetResponseOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetResponseOutput) Key() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.Key }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AmazonS3DatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The end of S3 object's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetResponseOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of S3 object's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetResponseOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o AmazonS3DatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetResponseOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.Prefix }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AmazonS3DatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AmazonS3DatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AmazonS3DatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The version for the S3 object. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetResponseOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// Linked service for Amazon S3.
type AmazonS3LinkedService struct {
	// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type of S3. Allowed value: AccessKey (default) or TemporarySecurityCredentials. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the S3 Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// The session token for the S3 temporary security credential.
	SessionToken interface{} `pulumi:"sessionToken"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AmazonS3LinkedServiceInput is an input type that accepts AmazonS3LinkedServiceArgs and AmazonS3LinkedServiceOutput values.
// You can construct a concrete instance of `AmazonS3LinkedServiceInput` via:
//
//          AmazonS3LinkedServiceArgs{...}
type AmazonS3LinkedServiceInput interface {
	pulumi.Input

	ToAmazonS3LinkedServiceOutput() AmazonS3LinkedServiceOutput
	ToAmazonS3LinkedServiceOutputWithContext(context.Context) AmazonS3LinkedServiceOutput
}

// Linked service for Amazon S3.
type AmazonS3LinkedServiceArgs struct {
	// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId pulumi.Input `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type of S3. Allowed value: AccessKey (default) or TemporarySecurityCredentials. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
	SecretAccessKey pulumi.Input `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the S3 Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl pulumi.Input `pulumi:"serviceUrl"`
	// The session token for the S3 temporary security credential.
	SessionToken pulumi.Input `pulumi:"sessionToken"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AmazonS3LinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3LinkedService)(nil)).Elem()
}

func (i AmazonS3LinkedServiceArgs) ToAmazonS3LinkedServiceOutput() AmazonS3LinkedServiceOutput {
	return i.ToAmazonS3LinkedServiceOutputWithContext(context.Background())
}

func (i AmazonS3LinkedServiceArgs) ToAmazonS3LinkedServiceOutputWithContext(ctx context.Context) AmazonS3LinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonS3LinkedServiceOutput)
}

// Linked service for Amazon S3.
type AmazonS3LinkedServiceOutput struct{ *pulumi.OutputState }

func (AmazonS3LinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3LinkedService)(nil)).Elem()
}

func (o AmazonS3LinkedServiceOutput) ToAmazonS3LinkedServiceOutput() AmazonS3LinkedServiceOutput {
	return o
}

func (o AmazonS3LinkedServiceOutput) ToAmazonS3LinkedServiceOutputWithContext(ctx context.Context) AmazonS3LinkedServiceOutput {
	return o
}

// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
func (o AmazonS3LinkedServiceOutput) AccessKeyId() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) interface{} { return v.AccessKeyId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AmazonS3LinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type of S3. Allowed value: AccessKey (default) or TemporarySecurityCredentials. Type: string (or Expression with resultType string).
func (o AmazonS3LinkedServiceOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AmazonS3LinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AmazonS3LinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AmazonS3LinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AmazonS3LinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
func (o AmazonS3LinkedServiceOutput) SecretAccessKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) interface{} { return v.SecretAccessKey }).(pulumi.AnyOutput)
}

// This value specifies the endpoint to access with the S3 Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
func (o AmazonS3LinkedServiceOutput) ServiceUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) interface{} { return v.ServiceUrl }).(pulumi.AnyOutput)
}

// The session token for the S3 temporary security credential.
func (o AmazonS3LinkedServiceOutput) SessionToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) interface{} { return v.SessionToken }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AmazonS3LinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Amazon S3.
type AmazonS3LinkedServiceResponse struct {
	// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type of S3. Allowed value: AccessKey (default) or TemporarySecurityCredentials. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the S3 Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// The session token for the S3 temporary security credential.
	SessionToken interface{} `pulumi:"sessionToken"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AmazonS3LinkedServiceResponseInput is an input type that accepts AmazonS3LinkedServiceResponseArgs and AmazonS3LinkedServiceResponseOutput values.
// You can construct a concrete instance of `AmazonS3LinkedServiceResponseInput` via:
//
//          AmazonS3LinkedServiceResponseArgs{...}
type AmazonS3LinkedServiceResponseInput interface {
	pulumi.Input

	ToAmazonS3LinkedServiceResponseOutput() AmazonS3LinkedServiceResponseOutput
	ToAmazonS3LinkedServiceResponseOutputWithContext(context.Context) AmazonS3LinkedServiceResponseOutput
}

// Linked service for Amazon S3.
type AmazonS3LinkedServiceResponseArgs struct {
	// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId pulumi.Input `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type of S3. Allowed value: AccessKey (default) or TemporarySecurityCredentials. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
	SecretAccessKey pulumi.Input `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the S3 Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl pulumi.Input `pulumi:"serviceUrl"`
	// The session token for the S3 temporary security credential.
	SessionToken pulumi.Input `pulumi:"sessionToken"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AmazonS3LinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3LinkedServiceResponse)(nil)).Elem()
}

func (i AmazonS3LinkedServiceResponseArgs) ToAmazonS3LinkedServiceResponseOutput() AmazonS3LinkedServiceResponseOutput {
	return i.ToAmazonS3LinkedServiceResponseOutputWithContext(context.Background())
}

func (i AmazonS3LinkedServiceResponseArgs) ToAmazonS3LinkedServiceResponseOutputWithContext(ctx context.Context) AmazonS3LinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonS3LinkedServiceResponseOutput)
}

// Linked service for Amazon S3.
type AmazonS3LinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AmazonS3LinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3LinkedServiceResponse)(nil)).Elem()
}

func (o AmazonS3LinkedServiceResponseOutput) ToAmazonS3LinkedServiceResponseOutput() AmazonS3LinkedServiceResponseOutput {
	return o
}

func (o AmazonS3LinkedServiceResponseOutput) ToAmazonS3LinkedServiceResponseOutputWithContext(ctx context.Context) AmazonS3LinkedServiceResponseOutput {
	return o
}

// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
func (o AmazonS3LinkedServiceResponseOutput) AccessKeyId() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) interface{} { return v.AccessKeyId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AmazonS3LinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type of S3. Allowed value: AccessKey (default) or TemporarySecurityCredentials. Type: string (or Expression with resultType string).
func (o AmazonS3LinkedServiceResponseOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AmazonS3LinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AmazonS3LinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AmazonS3LinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AmazonS3LinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
func (o AmazonS3LinkedServiceResponseOutput) SecretAccessKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) interface{} { return v.SecretAccessKey }).(pulumi.AnyOutput)
}

// This value specifies the endpoint to access with the S3 Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
func (o AmazonS3LinkedServiceResponseOutput) ServiceUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) interface{} { return v.ServiceUrl }).(pulumi.AnyOutput)
}

// The session token for the S3 temporary security credential.
func (o AmazonS3LinkedServiceResponseOutput) SessionToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) interface{} { return v.SessionToken }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AmazonS3LinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The location of amazon S3 dataset.
type AmazonS3Location struct {
	// Specify the bucketName of amazon S3. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
	// Specify the version of amazon S3. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// AmazonS3LocationInput is an input type that accepts AmazonS3LocationArgs and AmazonS3LocationOutput values.
// You can construct a concrete instance of `AmazonS3LocationInput` via:
//
//          AmazonS3LocationArgs{...}
type AmazonS3LocationInput interface {
	pulumi.Input

	ToAmazonS3LocationOutput() AmazonS3LocationOutput
	ToAmazonS3LocationOutputWithContext(context.Context) AmazonS3LocationOutput
}

// The location of amazon S3 dataset.
type AmazonS3LocationArgs struct {
	// Specify the bucketName of amazon S3. Type: string (or Expression with resultType string)
	BucketName pulumi.Input `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
	// Specify the version of amazon S3. Type: string (or Expression with resultType string).
	Version pulumi.Input `pulumi:"version"`
}

func (AmazonS3LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3Location)(nil)).Elem()
}

func (i AmazonS3LocationArgs) ToAmazonS3LocationOutput() AmazonS3LocationOutput {
	return i.ToAmazonS3LocationOutputWithContext(context.Background())
}

func (i AmazonS3LocationArgs) ToAmazonS3LocationOutputWithContext(ctx context.Context) AmazonS3LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonS3LocationOutput)
}

// The location of amazon S3 dataset.
type AmazonS3LocationOutput struct{ *pulumi.OutputState }

func (AmazonS3LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3Location)(nil)).Elem()
}

func (o AmazonS3LocationOutput) ToAmazonS3LocationOutput() AmazonS3LocationOutput {
	return o
}

func (o AmazonS3LocationOutput) ToAmazonS3LocationOutputWithContext(ctx context.Context) AmazonS3LocationOutput {
	return o
}

// Specify the bucketName of amazon S3. Type: string (or Expression with resultType string)
func (o AmazonS3LocationOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Location) interface{} { return v.BucketName }).(pulumi.AnyOutput)
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AmazonS3LocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Location) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AmazonS3LocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Location) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o AmazonS3LocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3Location) string { return v.Type }).(pulumi.StringOutput)
}

// Specify the version of amazon S3. Type: string (or Expression with resultType string).
func (o AmazonS3LocationOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Location) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// The location of amazon S3 dataset.
type AmazonS3LocationResponse struct {
	// Specify the bucketName of amazon S3. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
	// Specify the version of amazon S3. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// AmazonS3LocationResponseInput is an input type that accepts AmazonS3LocationResponseArgs and AmazonS3LocationResponseOutput values.
// You can construct a concrete instance of `AmazonS3LocationResponseInput` via:
//
//          AmazonS3LocationResponseArgs{...}
type AmazonS3LocationResponseInput interface {
	pulumi.Input

	ToAmazonS3LocationResponseOutput() AmazonS3LocationResponseOutput
	ToAmazonS3LocationResponseOutputWithContext(context.Context) AmazonS3LocationResponseOutput
}

// The location of amazon S3 dataset.
type AmazonS3LocationResponseArgs struct {
	// Specify the bucketName of amazon S3. Type: string (or Expression with resultType string)
	BucketName pulumi.Input `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
	// Specify the version of amazon S3. Type: string (or Expression with resultType string).
	Version pulumi.Input `pulumi:"version"`
}

func (AmazonS3LocationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3LocationResponse)(nil)).Elem()
}

func (i AmazonS3LocationResponseArgs) ToAmazonS3LocationResponseOutput() AmazonS3LocationResponseOutput {
	return i.ToAmazonS3LocationResponseOutputWithContext(context.Background())
}

func (i AmazonS3LocationResponseArgs) ToAmazonS3LocationResponseOutputWithContext(ctx context.Context) AmazonS3LocationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonS3LocationResponseOutput)
}

// The location of amazon S3 dataset.
type AmazonS3LocationResponseOutput struct{ *pulumi.OutputState }

func (AmazonS3LocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3LocationResponse)(nil)).Elem()
}

func (o AmazonS3LocationResponseOutput) ToAmazonS3LocationResponseOutput() AmazonS3LocationResponseOutput {
	return o
}

func (o AmazonS3LocationResponseOutput) ToAmazonS3LocationResponseOutputWithContext(ctx context.Context) AmazonS3LocationResponseOutput {
	return o
}

// Specify the bucketName of amazon S3. Type: string (or Expression with resultType string)
func (o AmazonS3LocationResponseOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LocationResponse) interface{} { return v.BucketName }).(pulumi.AnyOutput)
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AmazonS3LocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AmazonS3LocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o AmazonS3LocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3LocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specify the version of amazon S3. Type: string (or Expression with resultType string).
func (o AmazonS3LocationResponseOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LocationResponse) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// Avro dataset.
type AvroDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations          []interface{} `pulumi:"annotations"`
	AvroCompressionCodec *string       `pulumi:"avroCompressionCodec"`
	AvroCompressionLevel *int          `pulumi:"avroCompressionLevel"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the avro storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AvroDatasetInput is an input type that accepts AvroDatasetArgs and AvroDatasetOutput values.
// You can construct a concrete instance of `AvroDatasetInput` via:
//
//          AvroDatasetArgs{...}
type AvroDatasetInput interface {
	pulumi.Input

	ToAvroDatasetOutput() AvroDatasetOutput
	ToAvroDatasetOutputWithContext(context.Context) AvroDatasetOutput
}

// Avro dataset.
type AvroDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations          pulumi.ArrayInput     `pulumi:"annotations"`
	AvroCompressionCodec pulumi.StringPtrInput `pulumi:"avroCompressionCodec"`
	AvroCompressionLevel pulumi.IntPtrInput    `pulumi:"avroCompressionLevel"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The location of the avro storage.
	Location pulumi.Input `pulumi:"location"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AvroDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroDataset)(nil)).Elem()
}

func (i AvroDatasetArgs) ToAvroDatasetOutput() AvroDatasetOutput {
	return i.ToAvroDatasetOutputWithContext(context.Background())
}

func (i AvroDatasetArgs) ToAvroDatasetOutputWithContext(ctx context.Context) AvroDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroDatasetOutput)
}

// Avro dataset.
type AvroDatasetOutput struct{ *pulumi.OutputState }

func (AvroDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroDataset)(nil)).Elem()
}

func (o AvroDatasetOutput) ToAvroDatasetOutput() AvroDatasetOutput {
	return o
}

func (o AvroDatasetOutput) ToAvroDatasetOutputWithContext(ctx context.Context) AvroDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AvroDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AvroDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

func (o AvroDatasetOutput) AvroCompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AvroDataset) *string { return v.AvroCompressionCodec }).(pulumi.StringPtrOutput)
}

func (o AvroDatasetOutput) AvroCompressionLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AvroDataset) *int { return v.AvroCompressionLevel }).(pulumi.IntPtrOutput)
}

// Dataset description.
func (o AvroDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AvroDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AvroDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AvroDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AvroDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AvroDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The location of the avro storage.
func (o AvroDatasetOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroDataset) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o AvroDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AvroDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AvroDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AvroDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AvroDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AvroDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Avro dataset.
type AvroDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations          []interface{} `pulumi:"annotations"`
	AvroCompressionCodec *string       `pulumi:"avroCompressionCodec"`
	AvroCompressionLevel *int          `pulumi:"avroCompressionLevel"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the avro storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AvroDatasetResponseInput is an input type that accepts AvroDatasetResponseArgs and AvroDatasetResponseOutput values.
// You can construct a concrete instance of `AvroDatasetResponseInput` via:
//
//          AvroDatasetResponseArgs{...}
type AvroDatasetResponseInput interface {
	pulumi.Input

	ToAvroDatasetResponseOutput() AvroDatasetResponseOutput
	ToAvroDatasetResponseOutputWithContext(context.Context) AvroDatasetResponseOutput
}

// Avro dataset.
type AvroDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations          pulumi.ArrayInput     `pulumi:"annotations"`
	AvroCompressionCodec pulumi.StringPtrInput `pulumi:"avroCompressionCodec"`
	AvroCompressionLevel pulumi.IntPtrInput    `pulumi:"avroCompressionLevel"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// The location of the avro storage.
	Location pulumi.Input `pulumi:"location"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AvroDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroDatasetResponse)(nil)).Elem()
}

func (i AvroDatasetResponseArgs) ToAvroDatasetResponseOutput() AvroDatasetResponseOutput {
	return i.ToAvroDatasetResponseOutputWithContext(context.Background())
}

func (i AvroDatasetResponseArgs) ToAvroDatasetResponseOutputWithContext(ctx context.Context) AvroDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroDatasetResponseOutput)
}

// Avro dataset.
type AvroDatasetResponseOutput struct{ *pulumi.OutputState }

func (AvroDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroDatasetResponse)(nil)).Elem()
}

func (o AvroDatasetResponseOutput) ToAvroDatasetResponseOutput() AvroDatasetResponseOutput {
	return o
}

func (o AvroDatasetResponseOutput) ToAvroDatasetResponseOutputWithContext(ctx context.Context) AvroDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AvroDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AvroDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

func (o AvroDatasetResponseOutput) AvroCompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AvroDatasetResponse) *string { return v.AvroCompressionCodec }).(pulumi.StringPtrOutput)
}

func (o AvroDatasetResponseOutput) AvroCompressionLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AvroDatasetResponse) *int { return v.AvroCompressionLevel }).(pulumi.IntPtrOutput)
}

// Dataset description.
func (o AvroDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AvroDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AvroDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AvroDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AvroDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AvroDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The location of the avro storage.
func (o AvroDatasetResponseOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroDatasetResponse) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o AvroDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AvroDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AvroDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AvroDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AvroDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AvroDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The data stored in Avro format.
type AvroFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// AvroFormatInput is an input type that accepts AvroFormatArgs and AvroFormatOutput values.
// You can construct a concrete instance of `AvroFormatInput` via:
//
//          AvroFormatArgs{...}
type AvroFormatInput interface {
	pulumi.Input

	ToAvroFormatOutput() AvroFormatOutput
	ToAvroFormatOutputWithContext(context.Context) AvroFormatOutput
}

// The data stored in Avro format.
type AvroFormatArgs struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.Input `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.Input `pulumi:"serializer"`
	// Type of dataset storage format.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AvroFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroFormat)(nil)).Elem()
}

func (i AvroFormatArgs) ToAvroFormatOutput() AvroFormatOutput {
	return i.ToAvroFormatOutputWithContext(context.Background())
}

func (i AvroFormatArgs) ToAvroFormatOutputWithContext(ctx context.Context) AvroFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroFormatOutput)
}

// The data stored in Avro format.
type AvroFormatOutput struct{ *pulumi.OutputState }

func (AvroFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroFormat)(nil)).Elem()
}

func (o AvroFormatOutput) ToAvroFormatOutput() AvroFormatOutput {
	return o
}

func (o AvroFormatOutput) ToAvroFormatOutputWithContext(ctx context.Context) AvroFormatOutput {
	return o
}

// Deserializer. Type: string (or Expression with resultType string).
func (o AvroFormatOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroFormat) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o AvroFormatOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroFormat) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
func (o AvroFormatOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AvroFormat) string { return v.Type }).(pulumi.StringOutput)
}

// The data stored in Avro format.
type AvroFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// AvroFormatResponseInput is an input type that accepts AvroFormatResponseArgs and AvroFormatResponseOutput values.
// You can construct a concrete instance of `AvroFormatResponseInput` via:
//
//          AvroFormatResponseArgs{...}
type AvroFormatResponseInput interface {
	pulumi.Input

	ToAvroFormatResponseOutput() AvroFormatResponseOutput
	ToAvroFormatResponseOutputWithContext(context.Context) AvroFormatResponseOutput
}

// The data stored in Avro format.
type AvroFormatResponseArgs struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.Input `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.Input `pulumi:"serializer"`
	// Type of dataset storage format.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AvroFormatResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroFormatResponse)(nil)).Elem()
}

func (i AvroFormatResponseArgs) ToAvroFormatResponseOutput() AvroFormatResponseOutput {
	return i.ToAvroFormatResponseOutputWithContext(context.Background())
}

func (i AvroFormatResponseArgs) ToAvroFormatResponseOutputWithContext(ctx context.Context) AvroFormatResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroFormatResponseOutput)
}

// The data stored in Avro format.
type AvroFormatResponseOutput struct{ *pulumi.OutputState }

func (AvroFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroFormatResponse)(nil)).Elem()
}

func (o AvroFormatResponseOutput) ToAvroFormatResponseOutput() AvroFormatResponseOutput {
	return o
}

func (o AvroFormatResponseOutput) ToAvroFormatResponseOutputWithContext(ctx context.Context) AvroFormatResponseOutput {
	return o
}

// Deserializer. Type: string (or Expression with resultType string).
func (o AvroFormatResponseOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroFormatResponse) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o AvroFormatResponseOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroFormatResponse) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
func (o AvroFormatResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AvroFormatResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The express custom setup of installing Azure PowerShell.
type AzPowerShellSetup struct {
	// The type of custom setup.
	Type string `pulumi:"type"`
	// The required version of Azure PowerShell to install.
	Version string `pulumi:"version"`
}

// AzPowerShellSetupInput is an input type that accepts AzPowerShellSetupArgs and AzPowerShellSetupOutput values.
// You can construct a concrete instance of `AzPowerShellSetupInput` via:
//
//          AzPowerShellSetupArgs{...}
type AzPowerShellSetupInput interface {
	pulumi.Input

	ToAzPowerShellSetupOutput() AzPowerShellSetupOutput
	ToAzPowerShellSetupOutputWithContext(context.Context) AzPowerShellSetupOutput
}

// The express custom setup of installing Azure PowerShell.
type AzPowerShellSetupArgs struct {
	// The type of custom setup.
	Type pulumi.StringInput `pulumi:"type"`
	// The required version of Azure PowerShell to install.
	Version pulumi.StringInput `pulumi:"version"`
}

func (AzPowerShellSetupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzPowerShellSetup)(nil)).Elem()
}

func (i AzPowerShellSetupArgs) ToAzPowerShellSetupOutput() AzPowerShellSetupOutput {
	return i.ToAzPowerShellSetupOutputWithContext(context.Background())
}

func (i AzPowerShellSetupArgs) ToAzPowerShellSetupOutputWithContext(ctx context.Context) AzPowerShellSetupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzPowerShellSetupOutput)
}

// The express custom setup of installing Azure PowerShell.
type AzPowerShellSetupOutput struct{ *pulumi.OutputState }

func (AzPowerShellSetupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzPowerShellSetup)(nil)).Elem()
}

func (o AzPowerShellSetupOutput) ToAzPowerShellSetupOutput() AzPowerShellSetupOutput {
	return o
}

func (o AzPowerShellSetupOutput) ToAzPowerShellSetupOutputWithContext(ctx context.Context) AzPowerShellSetupOutput {
	return o
}

// The type of custom setup.
func (o AzPowerShellSetupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzPowerShellSetup) string { return v.Type }).(pulumi.StringOutput)
}

// The required version of Azure PowerShell to install.
func (o AzPowerShellSetupOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v AzPowerShellSetup) string { return v.Version }).(pulumi.StringOutput)
}

// The express custom setup of installing Azure PowerShell.
type AzPowerShellSetupResponse struct {
	// The type of custom setup.
	Type string `pulumi:"type"`
	// The required version of Azure PowerShell to install.
	Version string `pulumi:"version"`
}

// AzPowerShellSetupResponseInput is an input type that accepts AzPowerShellSetupResponseArgs and AzPowerShellSetupResponseOutput values.
// You can construct a concrete instance of `AzPowerShellSetupResponseInput` via:
//
//          AzPowerShellSetupResponseArgs{...}
type AzPowerShellSetupResponseInput interface {
	pulumi.Input

	ToAzPowerShellSetupResponseOutput() AzPowerShellSetupResponseOutput
	ToAzPowerShellSetupResponseOutputWithContext(context.Context) AzPowerShellSetupResponseOutput
}

// The express custom setup of installing Azure PowerShell.
type AzPowerShellSetupResponseArgs struct {
	// The type of custom setup.
	Type pulumi.StringInput `pulumi:"type"`
	// The required version of Azure PowerShell to install.
	Version pulumi.StringInput `pulumi:"version"`
}

func (AzPowerShellSetupResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzPowerShellSetupResponse)(nil)).Elem()
}

func (i AzPowerShellSetupResponseArgs) ToAzPowerShellSetupResponseOutput() AzPowerShellSetupResponseOutput {
	return i.ToAzPowerShellSetupResponseOutputWithContext(context.Background())
}

func (i AzPowerShellSetupResponseArgs) ToAzPowerShellSetupResponseOutputWithContext(ctx context.Context) AzPowerShellSetupResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzPowerShellSetupResponseOutput)
}

// The express custom setup of installing Azure PowerShell.
type AzPowerShellSetupResponseOutput struct{ *pulumi.OutputState }

func (AzPowerShellSetupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzPowerShellSetupResponse)(nil)).Elem()
}

func (o AzPowerShellSetupResponseOutput) ToAzPowerShellSetupResponseOutput() AzPowerShellSetupResponseOutput {
	return o
}

func (o AzPowerShellSetupResponseOutput) ToAzPowerShellSetupResponseOutputWithContext(ctx context.Context) AzPowerShellSetupResponseOutput {
	return o
}

// The type of custom setup.
func (o AzPowerShellSetupResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzPowerShellSetupResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The required version of Azure PowerShell to install.
func (o AzPowerShellSetupResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v AzPowerShellSetupResponse) string { return v.Version }).(pulumi.StringOutput)
}

// Azure Batch linked service.
type AzureBatchLinkedService struct {
	// The Azure Batch account access key.
	AccessKey interface{} `pulumi:"accessKey"`
	// The Azure Batch account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Azure Batch URI. Type: string (or Expression with resultType string).
	BatchUri interface{} `pulumi:"batchUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The Azure Storage linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure Batch pool name. Type: string (or Expression with resultType string).
	PoolName interface{} `pulumi:"poolName"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureBatchLinkedServiceInput is an input type that accepts AzureBatchLinkedServiceArgs and AzureBatchLinkedServiceOutput values.
// You can construct a concrete instance of `AzureBatchLinkedServiceInput` via:
//
//          AzureBatchLinkedServiceArgs{...}
type AzureBatchLinkedServiceInput interface {
	pulumi.Input

	ToAzureBatchLinkedServiceOutput() AzureBatchLinkedServiceOutput
	ToAzureBatchLinkedServiceOutputWithContext(context.Context) AzureBatchLinkedServiceOutput
}

// Azure Batch linked service.
type AzureBatchLinkedServiceArgs struct {
	// The Azure Batch account access key.
	AccessKey pulumi.Input `pulumi:"accessKey"`
	// The Azure Batch account name. Type: string (or Expression with resultType string).
	AccountName pulumi.Input `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The Azure Batch URI. Type: string (or Expression with resultType string).
	BatchUri pulumi.Input `pulumi:"batchUri"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The Azure Storage linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure Batch pool name. Type: string (or Expression with resultType string).
	PoolName pulumi.Input `pulumi:"poolName"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBatchLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBatchLinkedService)(nil)).Elem()
}

func (i AzureBatchLinkedServiceArgs) ToAzureBatchLinkedServiceOutput() AzureBatchLinkedServiceOutput {
	return i.ToAzureBatchLinkedServiceOutputWithContext(context.Background())
}

func (i AzureBatchLinkedServiceArgs) ToAzureBatchLinkedServiceOutputWithContext(ctx context.Context) AzureBatchLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBatchLinkedServiceOutput)
}

// Azure Batch linked service.
type AzureBatchLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureBatchLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBatchLinkedService)(nil)).Elem()
}

func (o AzureBatchLinkedServiceOutput) ToAzureBatchLinkedServiceOutput() AzureBatchLinkedServiceOutput {
	return o
}

func (o AzureBatchLinkedServiceOutput) ToAzureBatchLinkedServiceOutputWithContext(ctx context.Context) AzureBatchLinkedServiceOutput {
	return o
}

// The Azure Batch account access key.
func (o AzureBatchLinkedServiceOutput) AccessKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) interface{} { return v.AccessKey }).(pulumi.AnyOutput)
}

// The Azure Batch account name. Type: string (or Expression with resultType string).
func (o AzureBatchLinkedServiceOutput) AccountName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) interface{} { return v.AccountName }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureBatchLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The Azure Batch URI. Type: string (or Expression with resultType string).
func (o AzureBatchLinkedServiceOutput) BatchUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) interface{} { return v.BatchUri }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureBatchLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AzureBatchLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureBatchLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The Azure Storage linked service reference.
func (o AzureBatchLinkedServiceOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for linked service.
func (o AzureBatchLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure Batch pool name. Type: string (or Expression with resultType string).
func (o AzureBatchLinkedServiceOutput) PoolName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) interface{} { return v.PoolName }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureBatchLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Batch linked service.
type AzureBatchLinkedServiceResponse struct {
	// The Azure Batch account access key.
	AccessKey interface{} `pulumi:"accessKey"`
	// The Azure Batch account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Azure Batch URI. Type: string (or Expression with resultType string).
	BatchUri interface{} `pulumi:"batchUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The Azure Storage linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure Batch pool name. Type: string (or Expression with resultType string).
	PoolName interface{} `pulumi:"poolName"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureBatchLinkedServiceResponseInput is an input type that accepts AzureBatchLinkedServiceResponseArgs and AzureBatchLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureBatchLinkedServiceResponseInput` via:
//
//          AzureBatchLinkedServiceResponseArgs{...}
type AzureBatchLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureBatchLinkedServiceResponseOutput() AzureBatchLinkedServiceResponseOutput
	ToAzureBatchLinkedServiceResponseOutputWithContext(context.Context) AzureBatchLinkedServiceResponseOutput
}

// Azure Batch linked service.
type AzureBatchLinkedServiceResponseArgs struct {
	// The Azure Batch account access key.
	AccessKey pulumi.Input `pulumi:"accessKey"`
	// The Azure Batch account name. Type: string (or Expression with resultType string).
	AccountName pulumi.Input `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The Azure Batch URI. Type: string (or Expression with resultType string).
	BatchUri pulumi.Input `pulumi:"batchUri"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The Azure Storage linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The Azure Batch pool name. Type: string (or Expression with resultType string).
	PoolName pulumi.Input `pulumi:"poolName"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBatchLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBatchLinkedServiceResponse)(nil)).Elem()
}

func (i AzureBatchLinkedServiceResponseArgs) ToAzureBatchLinkedServiceResponseOutput() AzureBatchLinkedServiceResponseOutput {
	return i.ToAzureBatchLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureBatchLinkedServiceResponseArgs) ToAzureBatchLinkedServiceResponseOutputWithContext(ctx context.Context) AzureBatchLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBatchLinkedServiceResponseOutput)
}

// Azure Batch linked service.
type AzureBatchLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureBatchLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBatchLinkedServiceResponse)(nil)).Elem()
}

func (o AzureBatchLinkedServiceResponseOutput) ToAzureBatchLinkedServiceResponseOutput() AzureBatchLinkedServiceResponseOutput {
	return o
}

func (o AzureBatchLinkedServiceResponseOutput) ToAzureBatchLinkedServiceResponseOutputWithContext(ctx context.Context) AzureBatchLinkedServiceResponseOutput {
	return o
}

// The Azure Batch account access key.
func (o AzureBatchLinkedServiceResponseOutput) AccessKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) interface{} { return v.AccessKey }).(pulumi.AnyOutput)
}

// The Azure Batch account name. Type: string (or Expression with resultType string).
func (o AzureBatchLinkedServiceResponseOutput) AccountName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) interface{} { return v.AccountName }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureBatchLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The Azure Batch URI. Type: string (or Expression with resultType string).
func (o AzureBatchLinkedServiceResponseOutput) BatchUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) interface{} { return v.BatchUri }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureBatchLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureBatchLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureBatchLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The Azure Storage linked service reference.
func (o AzureBatchLinkedServiceResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for linked service.
func (o AzureBatchLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure Batch pool name. Type: string (or Expression with resultType string).
func (o AzureBatchLinkedServiceResponseOutput) PoolName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) interface{} { return v.PoolName }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureBatchLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Blob storage.
type AzureBlobDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Blob. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Azure Blob storage.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The end of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The root of blob path. Type: string (or Expression with resultType string).
	TableRootLocation interface{} `pulumi:"tableRootLocation"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureBlobDatasetInput is an input type that accepts AzureBlobDatasetArgs and AzureBlobDatasetOutput values.
// You can construct a concrete instance of `AzureBlobDatasetInput` via:
//
//          AzureBlobDatasetArgs{...}
type AzureBlobDatasetInput interface {
	pulumi.Input

	ToAzureBlobDatasetOutput() AzureBlobDatasetOutput
	ToAzureBlobDatasetOutputWithContext(context.Context) AzureBlobDatasetOutput
}

// The Azure Blob storage.
type AzureBlobDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the Azure Blob. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// The format of the Azure Blob storage.
	Format pulumi.Input `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The end of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The root of blob path. Type: string (or Expression with resultType string).
	TableRootLocation pulumi.Input `pulumi:"tableRootLocation"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBlobDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDataset)(nil)).Elem()
}

func (i AzureBlobDatasetArgs) ToAzureBlobDatasetOutput() AzureBlobDatasetOutput {
	return i.ToAzureBlobDatasetOutputWithContext(context.Background())
}

func (i AzureBlobDatasetArgs) ToAzureBlobDatasetOutputWithContext(ctx context.Context) AzureBlobDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobDatasetOutput)
}

// The Azure Blob storage.
type AzureBlobDatasetOutput struct{ *pulumi.OutputState }

func (AzureBlobDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDataset)(nil)).Elem()
}

func (o AzureBlobDatasetOutput) ToAzureBlobDatasetOutput() AzureBlobDatasetOutput {
	return o
}

func (o AzureBlobDatasetOutput) ToAzureBlobDatasetOutputWithContext(ctx context.Context) AzureBlobDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureBlobDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBlobDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the blob storage.
func (o AzureBlobDatasetOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDataset) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o AzureBlobDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Azure Blob. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDataset) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureBlobDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureBlobDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDataset) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// The format of the Azure Blob storage.
func (o AzureBlobDatasetOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDataset) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureBlobDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureBlobDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The end of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDataset) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDataset) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o AzureBlobDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureBlobDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureBlobDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureBlobDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The root of blob path. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetOutput) TableRootLocation() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDataset) interface{} { return v.TableRootLocation }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureBlobDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Blob storage.
type AzureBlobDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Blob. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Azure Blob storage.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The end of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The root of blob path. Type: string (or Expression with resultType string).
	TableRootLocation interface{} `pulumi:"tableRootLocation"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureBlobDatasetResponseInput is an input type that accepts AzureBlobDatasetResponseArgs and AzureBlobDatasetResponseOutput values.
// You can construct a concrete instance of `AzureBlobDatasetResponseInput` via:
//
//          AzureBlobDatasetResponseArgs{...}
type AzureBlobDatasetResponseInput interface {
	pulumi.Input

	ToAzureBlobDatasetResponseOutput() AzureBlobDatasetResponseOutput
	ToAzureBlobDatasetResponseOutputWithContext(context.Context) AzureBlobDatasetResponseOutput
}

// The Azure Blob storage.
type AzureBlobDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the Azure Blob. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// The format of the Azure Blob storage.
	Format pulumi.Input `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// The end of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The root of blob path. Type: string (or Expression with resultType string).
	TableRootLocation pulumi.Input `pulumi:"tableRootLocation"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBlobDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDatasetResponse)(nil)).Elem()
}

func (i AzureBlobDatasetResponseArgs) ToAzureBlobDatasetResponseOutput() AzureBlobDatasetResponseOutput {
	return i.ToAzureBlobDatasetResponseOutputWithContext(context.Background())
}

func (i AzureBlobDatasetResponseArgs) ToAzureBlobDatasetResponseOutputWithContext(ctx context.Context) AzureBlobDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobDatasetResponseOutput)
}

// The Azure Blob storage.
type AzureBlobDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDatasetResponse)(nil)).Elem()
}

func (o AzureBlobDatasetResponseOutput) ToAzureBlobDatasetResponseOutput() AzureBlobDatasetResponseOutput {
	return o
}

func (o AzureBlobDatasetResponseOutput) ToAzureBlobDatasetResponseOutputWithContext(ctx context.Context) AzureBlobDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureBlobDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the blob storage.
func (o AzureBlobDatasetResponseOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o AzureBlobDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Azure Blob. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureBlobDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// The format of the Azure Blob storage.
func (o AzureBlobDatasetResponseOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureBlobDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The end of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetResponseOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetResponseOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o AzureBlobDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureBlobDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureBlobDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The root of blob path. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetResponseOutput) TableRootLocation() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) interface{} { return v.TableRootLocation }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureBlobDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Data Lake Storage Gen2 storage.
type AzureBlobFSDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Azure Data Lake Storage Gen2 storage.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureBlobFSDatasetInput is an input type that accepts AzureBlobFSDatasetArgs and AzureBlobFSDatasetOutput values.
// You can construct a concrete instance of `AzureBlobFSDatasetInput` via:
//
//          AzureBlobFSDatasetArgs{...}
type AzureBlobFSDatasetInput interface {
	pulumi.Input

	ToAzureBlobFSDatasetOutput() AzureBlobFSDatasetOutput
	ToAzureBlobFSDatasetOutputWithContext(context.Context) AzureBlobFSDatasetOutput
}

// The Azure Data Lake Storage Gen2 storage.
type AzureBlobFSDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with resultType string).
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// The format of the Azure Data Lake Storage Gen2 storage.
	Format pulumi.Input `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBlobFSDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSDataset)(nil)).Elem()
}

func (i AzureBlobFSDatasetArgs) ToAzureBlobFSDatasetOutput() AzureBlobFSDatasetOutput {
	return i.ToAzureBlobFSDatasetOutputWithContext(context.Background())
}

func (i AzureBlobFSDatasetArgs) ToAzureBlobFSDatasetOutputWithContext(ctx context.Context) AzureBlobFSDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFSDatasetOutput)
}

// The Azure Data Lake Storage Gen2 storage.
type AzureBlobFSDatasetOutput struct{ *pulumi.OutputState }

func (AzureBlobFSDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSDataset)(nil)).Elem()
}

func (o AzureBlobFSDatasetOutput) ToAzureBlobFSDatasetOutput() AzureBlobFSDatasetOutput {
	return o
}

func (o AzureBlobFSDatasetOutput) ToAzureBlobFSDatasetOutputWithContext(ctx context.Context) AzureBlobFSDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureBlobFSDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the blob storage.
func (o AzureBlobFSDatasetOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o AzureBlobFSDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType string).
func (o AzureBlobFSDatasetOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureBlobFSDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with resultType string).
func (o AzureBlobFSDatasetOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// The format of the Azure Data Lake Storage Gen2 storage.
func (o AzureBlobFSDatasetOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureBlobFSDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureBlobFSDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureBlobFSDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureBlobFSDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureBlobFSDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Data Lake Storage Gen2 storage.
type AzureBlobFSDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Azure Data Lake Storage Gen2 storage.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureBlobFSDatasetResponseInput is an input type that accepts AzureBlobFSDatasetResponseArgs and AzureBlobFSDatasetResponseOutput values.
// You can construct a concrete instance of `AzureBlobFSDatasetResponseInput` via:
//
//          AzureBlobFSDatasetResponseArgs{...}
type AzureBlobFSDatasetResponseInput interface {
	pulumi.Input

	ToAzureBlobFSDatasetResponseOutput() AzureBlobFSDatasetResponseOutput
	ToAzureBlobFSDatasetResponseOutputWithContext(context.Context) AzureBlobFSDatasetResponseOutput
}

// The Azure Data Lake Storage Gen2 storage.
type AzureBlobFSDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with resultType string).
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// The format of the Azure Data Lake Storage Gen2 storage.
	Format pulumi.Input `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBlobFSDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSDatasetResponse)(nil)).Elem()
}

func (i AzureBlobFSDatasetResponseArgs) ToAzureBlobFSDatasetResponseOutput() AzureBlobFSDatasetResponseOutput {
	return i.ToAzureBlobFSDatasetResponseOutputWithContext(context.Background())
}

func (i AzureBlobFSDatasetResponseArgs) ToAzureBlobFSDatasetResponseOutputWithContext(ctx context.Context) AzureBlobFSDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFSDatasetResponseOutput)
}

// The Azure Data Lake Storage Gen2 storage.
type AzureBlobFSDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobFSDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSDatasetResponse)(nil)).Elem()
}

func (o AzureBlobFSDatasetResponseOutput) ToAzureBlobFSDatasetResponseOutput() AzureBlobFSDatasetResponseOutput {
	return o
}

func (o AzureBlobFSDatasetResponseOutput) ToAzureBlobFSDatasetResponseOutputWithContext(ctx context.Context) AzureBlobFSDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureBlobFSDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the blob storage.
func (o AzureBlobFSDatasetResponseOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o AzureBlobFSDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType string).
func (o AzureBlobFSDatasetResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureBlobFSDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with resultType string).
func (o AzureBlobFSDatasetResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// The format of the Azure Data Lake Storage Gen2 storage.
func (o AzureBlobFSDatasetResponseOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureBlobFSDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureBlobFSDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureBlobFSDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureBlobFSDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureBlobFSDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Lake Storage Gen2 linked service.
type AzureBlobFSLinkedService struct {
	// Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	AccountKey interface{} `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The ID of the application used to authenticate against the Azure Data Lake Storage Gen2 account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Storage Gen2 account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// AzureBlobFSLinkedServiceInput is an input type that accepts AzureBlobFSLinkedServiceArgs and AzureBlobFSLinkedServiceOutput values.
// You can construct a concrete instance of `AzureBlobFSLinkedServiceInput` via:
//
//          AzureBlobFSLinkedServiceArgs{...}
type AzureBlobFSLinkedServiceInput interface {
	pulumi.Input

	ToAzureBlobFSLinkedServiceOutput() AzureBlobFSLinkedServiceOutput
	ToAzureBlobFSLinkedServiceOutputWithContext(context.Context) AzureBlobFSLinkedServiceOutput
}

// Azure Data Lake Storage Gen2 linked service.
type AzureBlobFSLinkedServiceArgs struct {
	// Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	AccountKey pulumi.Input `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The ID of the application used to authenticate against the Azure Data Lake Storage Gen2 account. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Storage Gen2 account.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
}

func (AzureBlobFSLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSLinkedService)(nil)).Elem()
}

func (i AzureBlobFSLinkedServiceArgs) ToAzureBlobFSLinkedServiceOutput() AzureBlobFSLinkedServiceOutput {
	return i.ToAzureBlobFSLinkedServiceOutputWithContext(context.Background())
}

func (i AzureBlobFSLinkedServiceArgs) ToAzureBlobFSLinkedServiceOutputWithContext(ctx context.Context) AzureBlobFSLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFSLinkedServiceOutput)
}

// Azure Data Lake Storage Gen2 linked service.
type AzureBlobFSLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureBlobFSLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSLinkedService)(nil)).Elem()
}

func (o AzureBlobFSLinkedServiceOutput) ToAzureBlobFSLinkedServiceOutput() AzureBlobFSLinkedServiceOutput {
	return o
}

func (o AzureBlobFSLinkedServiceOutput) ToAzureBlobFSLinkedServiceOutputWithContext(ctx context.Context) AzureBlobFSLinkedServiceOutput {
	return o
}

// Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceOutput) AccountKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) interface{} { return v.AccountKey }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureBlobFSLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureBlobFSLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AzureBlobFSLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureBlobFSLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The ID of the application used to authenticate against the Azure Data Lake Storage Gen2 account. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The Key of the application used to authenticate against the Azure Data Lake Storage Gen2 account.
func (o AzureBlobFSLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureBlobFSLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// Azure Data Lake Storage Gen2 linked service.
type AzureBlobFSLinkedServiceResponse struct {
	// Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	AccountKey interface{} `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The ID of the application used to authenticate against the Azure Data Lake Storage Gen2 account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Storage Gen2 account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// AzureBlobFSLinkedServiceResponseInput is an input type that accepts AzureBlobFSLinkedServiceResponseArgs and AzureBlobFSLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureBlobFSLinkedServiceResponseInput` via:
//
//          AzureBlobFSLinkedServiceResponseArgs{...}
type AzureBlobFSLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureBlobFSLinkedServiceResponseOutput() AzureBlobFSLinkedServiceResponseOutput
	ToAzureBlobFSLinkedServiceResponseOutputWithContext(context.Context) AzureBlobFSLinkedServiceResponseOutput
}

// Azure Data Lake Storage Gen2 linked service.
type AzureBlobFSLinkedServiceResponseArgs struct {
	// Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	AccountKey pulumi.Input `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The ID of the application used to authenticate against the Azure Data Lake Storage Gen2 account. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Storage Gen2 account.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
}

func (AzureBlobFSLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSLinkedServiceResponse)(nil)).Elem()
}

func (i AzureBlobFSLinkedServiceResponseArgs) ToAzureBlobFSLinkedServiceResponseOutput() AzureBlobFSLinkedServiceResponseOutput {
	return i.ToAzureBlobFSLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureBlobFSLinkedServiceResponseArgs) ToAzureBlobFSLinkedServiceResponseOutputWithContext(ctx context.Context) AzureBlobFSLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFSLinkedServiceResponseOutput)
}

// Azure Data Lake Storage Gen2 linked service.
type AzureBlobFSLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobFSLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSLinkedServiceResponse)(nil)).Elem()
}

func (o AzureBlobFSLinkedServiceResponseOutput) ToAzureBlobFSLinkedServiceResponseOutput() AzureBlobFSLinkedServiceResponseOutput {
	return o
}

func (o AzureBlobFSLinkedServiceResponseOutput) ToAzureBlobFSLinkedServiceResponseOutputWithContext(ctx context.Context) AzureBlobFSLinkedServiceResponseOutput {
	return o
}

// Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceResponseOutput) AccountKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) interface{} { return v.AccountKey }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureBlobFSLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceResponseOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureBlobFSLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureBlobFSLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureBlobFSLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The ID of the application used to authenticate against the Azure Data Lake Storage Gen2 account. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The Key of the application used to authenticate against the Azure Data Lake Storage Gen2 account.
func (o AzureBlobFSLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureBlobFSLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The location of azure blobFS dataset.
type AzureBlobFSLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the fileSystem of azure blobFS. Type: string (or Expression with resultType string).
	FileSystem interface{} `pulumi:"fileSystem"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
}

// AzureBlobFSLocationInput is an input type that accepts AzureBlobFSLocationArgs and AzureBlobFSLocationOutput values.
// You can construct a concrete instance of `AzureBlobFSLocationInput` via:
//
//          AzureBlobFSLocationArgs{...}
type AzureBlobFSLocationInput interface {
	pulumi.Input

	ToAzureBlobFSLocationOutput() AzureBlobFSLocationOutput
	ToAzureBlobFSLocationOutputWithContext(context.Context) AzureBlobFSLocationOutput
}

// The location of azure blobFS dataset.
type AzureBlobFSLocationArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the fileSystem of azure blobFS. Type: string (or Expression with resultType string).
	FileSystem pulumi.Input `pulumi:"fileSystem"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBlobFSLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSLocation)(nil)).Elem()
}

func (i AzureBlobFSLocationArgs) ToAzureBlobFSLocationOutput() AzureBlobFSLocationOutput {
	return i.ToAzureBlobFSLocationOutputWithContext(context.Background())
}

func (i AzureBlobFSLocationArgs) ToAzureBlobFSLocationOutputWithContext(ctx context.Context) AzureBlobFSLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFSLocationOutput)
}

// The location of azure blobFS dataset.
type AzureBlobFSLocationOutput struct{ *pulumi.OutputState }

func (AzureBlobFSLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSLocation)(nil)).Elem()
}

func (o AzureBlobFSLocationOutput) ToAzureBlobFSLocationOutput() AzureBlobFSLocationOutput {
	return o
}

func (o AzureBlobFSLocationOutput) ToAzureBlobFSLocationOutputWithContext(ctx context.Context) AzureBlobFSLocationOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AzureBlobFSLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the fileSystem of azure blobFS. Type: string (or Expression with resultType string).
func (o AzureBlobFSLocationOutput) FileSystem() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLocation) interface{} { return v.FileSystem }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AzureBlobFSLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o AzureBlobFSLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The location of azure blobFS dataset.
type AzureBlobFSLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the fileSystem of azure blobFS. Type: string (or Expression with resultType string).
	FileSystem interface{} `pulumi:"fileSystem"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
}

// AzureBlobFSLocationResponseInput is an input type that accepts AzureBlobFSLocationResponseArgs and AzureBlobFSLocationResponseOutput values.
// You can construct a concrete instance of `AzureBlobFSLocationResponseInput` via:
//
//          AzureBlobFSLocationResponseArgs{...}
type AzureBlobFSLocationResponseInput interface {
	pulumi.Input

	ToAzureBlobFSLocationResponseOutput() AzureBlobFSLocationResponseOutput
	ToAzureBlobFSLocationResponseOutputWithContext(context.Context) AzureBlobFSLocationResponseOutput
}

// The location of azure blobFS dataset.
type AzureBlobFSLocationResponseArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the fileSystem of azure blobFS. Type: string (or Expression with resultType string).
	FileSystem pulumi.Input `pulumi:"fileSystem"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBlobFSLocationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSLocationResponse)(nil)).Elem()
}

func (i AzureBlobFSLocationResponseArgs) ToAzureBlobFSLocationResponseOutput() AzureBlobFSLocationResponseOutput {
	return i.ToAzureBlobFSLocationResponseOutputWithContext(context.Background())
}

func (i AzureBlobFSLocationResponseArgs) ToAzureBlobFSLocationResponseOutputWithContext(ctx context.Context) AzureBlobFSLocationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFSLocationResponseOutput)
}

// The location of azure blobFS dataset.
type AzureBlobFSLocationResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobFSLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSLocationResponse)(nil)).Elem()
}

func (o AzureBlobFSLocationResponseOutput) ToAzureBlobFSLocationResponseOutput() AzureBlobFSLocationResponseOutput {
	return o
}

func (o AzureBlobFSLocationResponseOutput) ToAzureBlobFSLocationResponseOutputWithContext(ctx context.Context) AzureBlobFSLocationResponseOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AzureBlobFSLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the fileSystem of azure blobFS. Type: string (or Expression with resultType string).
func (o AzureBlobFSLocationResponseOutput) FileSystem() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLocationResponse) interface{} { return v.FileSystem }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AzureBlobFSLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o AzureBlobFSLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The azure blob storage linked service.
type AzureBlobStorageLinkedService struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReference `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReference `pulumi:"sasToken"`
	// SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Blob service endpoint of the Azure Blob Storage resource. It is mutually exclusive with connectionString, sasUri property.
	ServiceEndpoint *string `pulumi:"serviceEndpoint"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureBlobStorageLinkedServiceInput is an input type that accepts AzureBlobStorageLinkedServiceArgs and AzureBlobStorageLinkedServiceOutput values.
// You can construct a concrete instance of `AzureBlobStorageLinkedServiceInput` via:
//
//          AzureBlobStorageLinkedServiceArgs{...}
type AzureBlobStorageLinkedServiceInput interface {
	pulumi.Input

	ToAzureBlobStorageLinkedServiceOutput() AzureBlobStorageLinkedServiceOutput
	ToAzureBlobStorageLinkedServiceOutputWithContext(context.Context) AzureBlobStorageLinkedServiceOutput
}

// The azure blob storage linked service.
type AzureBlobStorageLinkedServiceArgs struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey AzureKeyVaultSecretReferencePtrInput `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken AzureKeyVaultSecretReferencePtrInput `pulumi:"sasToken"`
	// SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri pulumi.Input `pulumi:"sasUri"`
	// Blob service endpoint of the Azure Blob Storage resource. It is mutually exclusive with connectionString, sasUri property.
	ServiceEndpoint pulumi.StringPtrInput `pulumi:"serviceEndpoint"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBlobStorageLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageLinkedService)(nil)).Elem()
}

func (i AzureBlobStorageLinkedServiceArgs) ToAzureBlobStorageLinkedServiceOutput() AzureBlobStorageLinkedServiceOutput {
	return i.ToAzureBlobStorageLinkedServiceOutputWithContext(context.Background())
}

func (i AzureBlobStorageLinkedServiceArgs) ToAzureBlobStorageLinkedServiceOutputWithContext(ctx context.Context) AzureBlobStorageLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobStorageLinkedServiceOutput)
}

// The azure blob storage linked service.
type AzureBlobStorageLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureBlobStorageLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageLinkedService)(nil)).Elem()
}

func (o AzureBlobStorageLinkedServiceOutput) ToAzureBlobStorageLinkedServiceOutput() AzureBlobStorageLinkedServiceOutput {
	return o
}

func (o AzureBlobStorageLinkedServiceOutput) ToAzureBlobStorageLinkedServiceOutputWithContext(ctx context.Context) AzureBlobStorageLinkedServiceOutput {
	return o
}

// The Azure key vault secret reference of accountKey in connection string.
func (o AzureBlobStorageLinkedServiceOutput) AccountKey() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) *AzureKeyVaultSecretReference { return v.AccountKey }).(AzureKeyVaultSecretReferencePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureBlobStorageLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLinkedServiceOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureBlobStorageLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. It is mutually exclusive with sasUri, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureBlobStorageLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureBlobStorageLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureBlobStorageLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of sasToken in sas uri.
func (o AzureBlobStorageLinkedServiceOutput) SasToken() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) *AzureKeyVaultSecretReference { return v.SasToken }).(AzureKeyVaultSecretReferencePtrOutput)
}

// SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureBlobStorageLinkedServiceOutput) SasUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) interface{} { return v.SasUri }).(pulumi.AnyOutput)
}

// Blob service endpoint of the Azure Blob Storage resource. It is mutually exclusive with connectionString, sasUri property.
func (o AzureBlobStorageLinkedServiceOutput) ServiceEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) *string { return v.ServiceEndpoint }).(pulumi.StringPtrOutput)
}

// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
func (o AzureBlobStorageLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureBlobStorageLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The azure blob storage linked service.
type AzureBlobStorageLinkedServiceResponse struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReferenceResponse `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReferenceResponse `pulumi:"sasToken"`
	// SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Blob service endpoint of the Azure Blob Storage resource. It is mutually exclusive with connectionString, sasUri property.
	ServiceEndpoint *string `pulumi:"serviceEndpoint"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureBlobStorageLinkedServiceResponseInput is an input type that accepts AzureBlobStorageLinkedServiceResponseArgs and AzureBlobStorageLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureBlobStorageLinkedServiceResponseInput` via:
//
//          AzureBlobStorageLinkedServiceResponseArgs{...}
type AzureBlobStorageLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureBlobStorageLinkedServiceResponseOutput() AzureBlobStorageLinkedServiceResponseOutput
	ToAzureBlobStorageLinkedServiceResponseOutputWithContext(context.Context) AzureBlobStorageLinkedServiceResponseOutput
}

// The azure blob storage linked service.
type AzureBlobStorageLinkedServiceResponseArgs struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"sasToken"`
	// SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri pulumi.Input `pulumi:"sasUri"`
	// Blob service endpoint of the Azure Blob Storage resource. It is mutually exclusive with connectionString, sasUri property.
	ServiceEndpoint pulumi.StringPtrInput `pulumi:"serviceEndpoint"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBlobStorageLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageLinkedServiceResponse)(nil)).Elem()
}

func (i AzureBlobStorageLinkedServiceResponseArgs) ToAzureBlobStorageLinkedServiceResponseOutput() AzureBlobStorageLinkedServiceResponseOutput {
	return i.ToAzureBlobStorageLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureBlobStorageLinkedServiceResponseArgs) ToAzureBlobStorageLinkedServiceResponseOutputWithContext(ctx context.Context) AzureBlobStorageLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobStorageLinkedServiceResponseOutput)
}

// The azure blob storage linked service.
type AzureBlobStorageLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobStorageLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageLinkedServiceResponse)(nil)).Elem()
}

func (o AzureBlobStorageLinkedServiceResponseOutput) ToAzureBlobStorageLinkedServiceResponseOutput() AzureBlobStorageLinkedServiceResponseOutput {
	return o
}

func (o AzureBlobStorageLinkedServiceResponseOutput) ToAzureBlobStorageLinkedServiceResponseOutputWithContext(ctx context.Context) AzureBlobStorageLinkedServiceResponseOutput {
	return o
}

// The Azure key vault secret reference of accountKey in connection string.
func (o AzureBlobStorageLinkedServiceResponseOutput) AccountKey() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse {
		return v.AccountKey
	}).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureBlobStorageLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLinkedServiceResponseOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureBlobStorageLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. It is mutually exclusive with sasUri, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureBlobStorageLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureBlobStorageLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureBlobStorageLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of sasToken in sas uri.
func (o AzureBlobStorageLinkedServiceResponseOutput) SasToken() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.SasToken }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureBlobStorageLinkedServiceResponseOutput) SasUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) interface{} { return v.SasUri }).(pulumi.AnyOutput)
}

// Blob service endpoint of the Azure Blob Storage resource. It is mutually exclusive with connectionString, sasUri property.
func (o AzureBlobStorageLinkedServiceResponseOutput) ServiceEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) *string { return v.ServiceEndpoint }).(pulumi.StringPtrOutput)
}

// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
func (o AzureBlobStorageLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureBlobStorageLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The location of azure blob dataset.
type AzureBlobStorageLocation struct {
	// Specify the container of azure blob. Type: string (or Expression with resultType string).
	Container interface{} `pulumi:"container"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
}

// AzureBlobStorageLocationInput is an input type that accepts AzureBlobStorageLocationArgs and AzureBlobStorageLocationOutput values.
// You can construct a concrete instance of `AzureBlobStorageLocationInput` via:
//
//          AzureBlobStorageLocationArgs{...}
type AzureBlobStorageLocationInput interface {
	pulumi.Input

	ToAzureBlobStorageLocationOutput() AzureBlobStorageLocationOutput
	ToAzureBlobStorageLocationOutputWithContext(context.Context) AzureBlobStorageLocationOutput
}

// The location of azure blob dataset.
type AzureBlobStorageLocationArgs struct {
	// Specify the container of azure blob. Type: string (or Expression with resultType string).
	Container pulumi.Input `pulumi:"container"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBlobStorageLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageLocation)(nil)).Elem()
}

func (i AzureBlobStorageLocationArgs) ToAzureBlobStorageLocationOutput() AzureBlobStorageLocationOutput {
	return i.ToAzureBlobStorageLocationOutputWithContext(context.Background())
}

func (i AzureBlobStorageLocationArgs) ToAzureBlobStorageLocationOutputWithContext(ctx context.Context) AzureBlobStorageLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobStorageLocationOutput)
}

// The location of azure blob dataset.
type AzureBlobStorageLocationOutput struct{ *pulumi.OutputState }

func (AzureBlobStorageLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageLocation)(nil)).Elem()
}

func (o AzureBlobStorageLocationOutput) ToAzureBlobStorageLocationOutput() AzureBlobStorageLocationOutput {
	return o
}

func (o AzureBlobStorageLocationOutput) ToAzureBlobStorageLocationOutputWithContext(ctx context.Context) AzureBlobStorageLocationOutput {
	return o
}

// Specify the container of azure blob. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLocationOutput) Container() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLocation) interface{} { return v.Container }).(pulumi.AnyOutput)
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AzureBlobStorageLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o AzureBlobStorageLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobStorageLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The location of azure blob dataset.
type AzureBlobStorageLocationResponse struct {
	// Specify the container of azure blob. Type: string (or Expression with resultType string).
	Container interface{} `pulumi:"container"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
}

// AzureBlobStorageLocationResponseInput is an input type that accepts AzureBlobStorageLocationResponseArgs and AzureBlobStorageLocationResponseOutput values.
// You can construct a concrete instance of `AzureBlobStorageLocationResponseInput` via:
//
//          AzureBlobStorageLocationResponseArgs{...}
type AzureBlobStorageLocationResponseInput interface {
	pulumi.Input

	ToAzureBlobStorageLocationResponseOutput() AzureBlobStorageLocationResponseOutput
	ToAzureBlobStorageLocationResponseOutputWithContext(context.Context) AzureBlobStorageLocationResponseOutput
}

// The location of azure blob dataset.
type AzureBlobStorageLocationResponseArgs struct {
	// Specify the container of azure blob. Type: string (or Expression with resultType string).
	Container pulumi.Input `pulumi:"container"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBlobStorageLocationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageLocationResponse)(nil)).Elem()
}

func (i AzureBlobStorageLocationResponseArgs) ToAzureBlobStorageLocationResponseOutput() AzureBlobStorageLocationResponseOutput {
	return i.ToAzureBlobStorageLocationResponseOutputWithContext(context.Background())
}

func (i AzureBlobStorageLocationResponseArgs) ToAzureBlobStorageLocationResponseOutputWithContext(ctx context.Context) AzureBlobStorageLocationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobStorageLocationResponseOutput)
}

// The location of azure blob dataset.
type AzureBlobStorageLocationResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobStorageLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageLocationResponse)(nil)).Elem()
}

func (o AzureBlobStorageLocationResponseOutput) ToAzureBlobStorageLocationResponseOutput() AzureBlobStorageLocationResponseOutput {
	return o
}

func (o AzureBlobStorageLocationResponseOutput) ToAzureBlobStorageLocationResponseOutputWithContext(ctx context.Context) AzureBlobStorageLocationResponseOutput {
	return o
}

// Specify the container of azure blob. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLocationResponseOutput) Container() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLocationResponse) interface{} { return v.Container }).(pulumi.AnyOutput)
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AzureBlobStorageLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o AzureBlobStorageLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobStorageLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Explorer (Kusto) linked service.
type AzureDataExplorerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The endpoint of Azure Data Explorer (the engine's endpoint). URL will be in the format https://<clusterName>.<regionName>.kusto.windows.net. Type: string (or Expression with resultType string)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against Azure Data Explorer. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Kusto.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureDataExplorerLinkedServiceInput is an input type that accepts AzureDataExplorerLinkedServiceArgs and AzureDataExplorerLinkedServiceOutput values.
// You can construct a concrete instance of `AzureDataExplorerLinkedServiceInput` via:
//
//          AzureDataExplorerLinkedServiceArgs{...}
type AzureDataExplorerLinkedServiceInput interface {
	pulumi.Input

	ToAzureDataExplorerLinkedServiceOutput() AzureDataExplorerLinkedServiceOutput
	ToAzureDataExplorerLinkedServiceOutputWithContext(context.Context) AzureDataExplorerLinkedServiceOutput
}

// Azure Data Explorer (Kusto) linked service.
type AzureDataExplorerLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The endpoint of Azure Data Explorer (the engine's endpoint). URL will be in the format https://<clusterName>.<regionName>.kusto.windows.net. Type: string (or Expression with resultType string)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against Azure Data Explorer. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Kusto.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataExplorerLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerLinkedService)(nil)).Elem()
}

func (i AzureDataExplorerLinkedServiceArgs) ToAzureDataExplorerLinkedServiceOutput() AzureDataExplorerLinkedServiceOutput {
	return i.ToAzureDataExplorerLinkedServiceOutputWithContext(context.Background())
}

func (i AzureDataExplorerLinkedServiceArgs) ToAzureDataExplorerLinkedServiceOutputWithContext(ctx context.Context) AzureDataExplorerLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataExplorerLinkedServiceOutput)
}

// Azure Data Explorer (Kusto) linked service.
type AzureDataExplorerLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureDataExplorerLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerLinkedService)(nil)).Elem()
}

func (o AzureDataExplorerLinkedServiceOutput) ToAzureDataExplorerLinkedServiceOutput() AzureDataExplorerLinkedServiceOutput {
	return o
}

func (o AzureDataExplorerLinkedServiceOutput) ToAzureDataExplorerLinkedServiceOutputWithContext(ctx context.Context) AzureDataExplorerLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureDataExplorerLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureDataExplorerLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Database name for connection. Type: string (or Expression with resultType string).
func (o AzureDataExplorerLinkedServiceOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureDataExplorerLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The endpoint of Azure Data Explorer (the engine's endpoint). URL will be in the format https://<clusterName>.<regionName>.kusto.windows.net. Type: string (or Expression with resultType string)
func (o AzureDataExplorerLinkedServiceOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureDataExplorerLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The ID of the service principal used to authenticate against Azure Data Explorer. Type: string (or Expression with resultType string).
func (o AzureDataExplorerLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Kusto.
func (o AzureDataExplorerLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureDataExplorerLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureDataExplorerLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Explorer (Kusto) linked service.
type AzureDataExplorerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The endpoint of Azure Data Explorer (the engine's endpoint). URL will be in the format https://<clusterName>.<regionName>.kusto.windows.net. Type: string (or Expression with resultType string)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against Azure Data Explorer. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Kusto.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureDataExplorerLinkedServiceResponseInput is an input type that accepts AzureDataExplorerLinkedServiceResponseArgs and AzureDataExplorerLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureDataExplorerLinkedServiceResponseInput` via:
//
//          AzureDataExplorerLinkedServiceResponseArgs{...}
type AzureDataExplorerLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureDataExplorerLinkedServiceResponseOutput() AzureDataExplorerLinkedServiceResponseOutput
	ToAzureDataExplorerLinkedServiceResponseOutputWithContext(context.Context) AzureDataExplorerLinkedServiceResponseOutput
}

// Azure Data Explorer (Kusto) linked service.
type AzureDataExplorerLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The endpoint of Azure Data Explorer (the engine's endpoint). URL will be in the format https://<clusterName>.<regionName>.kusto.windows.net. Type: string (or Expression with resultType string)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against Azure Data Explorer. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Kusto.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataExplorerLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerLinkedServiceResponse)(nil)).Elem()
}

func (i AzureDataExplorerLinkedServiceResponseArgs) ToAzureDataExplorerLinkedServiceResponseOutput() AzureDataExplorerLinkedServiceResponseOutput {
	return i.ToAzureDataExplorerLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureDataExplorerLinkedServiceResponseArgs) ToAzureDataExplorerLinkedServiceResponseOutputWithContext(ctx context.Context) AzureDataExplorerLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataExplorerLinkedServiceResponseOutput)
}

// Azure Data Explorer (Kusto) linked service.
type AzureDataExplorerLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureDataExplorerLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerLinkedServiceResponse)(nil)).Elem()
}

func (o AzureDataExplorerLinkedServiceResponseOutput) ToAzureDataExplorerLinkedServiceResponseOutput() AzureDataExplorerLinkedServiceResponseOutput {
	return o
}

func (o AzureDataExplorerLinkedServiceResponseOutput) ToAzureDataExplorerLinkedServiceResponseOutputWithContext(ctx context.Context) AzureDataExplorerLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureDataExplorerLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureDataExplorerLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Database name for connection. Type: string (or Expression with resultType string).
func (o AzureDataExplorerLinkedServiceResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureDataExplorerLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The endpoint of Azure Data Explorer (the engine's endpoint). URL will be in the format https://<clusterName>.<regionName>.kusto.windows.net. Type: string (or Expression with resultType string)
func (o AzureDataExplorerLinkedServiceResponseOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureDataExplorerLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The ID of the service principal used to authenticate against Azure Data Explorer. Type: string (or Expression with resultType string).
func (o AzureDataExplorerLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Kusto.
func (o AzureDataExplorerLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureDataExplorerLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureDataExplorerLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Data Explorer (Kusto) dataset.
type AzureDataExplorerTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure Data Explorer database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureDataExplorerTableDatasetInput is an input type that accepts AzureDataExplorerTableDatasetArgs and AzureDataExplorerTableDatasetOutput values.
// You can construct a concrete instance of `AzureDataExplorerTableDatasetInput` via:
//
//          AzureDataExplorerTableDatasetArgs{...}
type AzureDataExplorerTableDatasetInput interface {
	pulumi.Input

	ToAzureDataExplorerTableDatasetOutput() AzureDataExplorerTableDatasetOutput
	ToAzureDataExplorerTableDatasetOutputWithContext(context.Context) AzureDataExplorerTableDatasetOutput
}

// The Azure Data Explorer (Kusto) dataset.
type AzureDataExplorerTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Azure Data Explorer database. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataExplorerTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerTableDataset)(nil)).Elem()
}

func (i AzureDataExplorerTableDatasetArgs) ToAzureDataExplorerTableDatasetOutput() AzureDataExplorerTableDatasetOutput {
	return i.ToAzureDataExplorerTableDatasetOutputWithContext(context.Background())
}

func (i AzureDataExplorerTableDatasetArgs) ToAzureDataExplorerTableDatasetOutputWithContext(ctx context.Context) AzureDataExplorerTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataExplorerTableDatasetOutput)
}

// The Azure Data Explorer (Kusto) dataset.
type AzureDataExplorerTableDatasetOutput struct{ *pulumi.OutputState }

func (AzureDataExplorerTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerTableDataset)(nil)).Elem()
}

func (o AzureDataExplorerTableDatasetOutput) ToAzureDataExplorerTableDatasetOutput() AzureDataExplorerTableDatasetOutput {
	return o
}

func (o AzureDataExplorerTableDatasetOutput) ToAzureDataExplorerTableDatasetOutputWithContext(ctx context.Context) AzureDataExplorerTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureDataExplorerTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureDataExplorerTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureDataExplorerTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AzureDataExplorerTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureDataExplorerTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureDataExplorerTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureDataExplorerTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure Data Explorer database. Type: string (or Expression with resultType string).
func (o AzureDataExplorerTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureDataExplorerTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Data Explorer (Kusto) dataset.
type AzureDataExplorerTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure Data Explorer database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureDataExplorerTableDatasetResponseInput is an input type that accepts AzureDataExplorerTableDatasetResponseArgs and AzureDataExplorerTableDatasetResponseOutput values.
// You can construct a concrete instance of `AzureDataExplorerTableDatasetResponseInput` via:
//
//          AzureDataExplorerTableDatasetResponseArgs{...}
type AzureDataExplorerTableDatasetResponseInput interface {
	pulumi.Input

	ToAzureDataExplorerTableDatasetResponseOutput() AzureDataExplorerTableDatasetResponseOutput
	ToAzureDataExplorerTableDatasetResponseOutputWithContext(context.Context) AzureDataExplorerTableDatasetResponseOutput
}

// The Azure Data Explorer (Kusto) dataset.
type AzureDataExplorerTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Azure Data Explorer database. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataExplorerTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerTableDatasetResponse)(nil)).Elem()
}

func (i AzureDataExplorerTableDatasetResponseArgs) ToAzureDataExplorerTableDatasetResponseOutput() AzureDataExplorerTableDatasetResponseOutput {
	return i.ToAzureDataExplorerTableDatasetResponseOutputWithContext(context.Background())
}

func (i AzureDataExplorerTableDatasetResponseArgs) ToAzureDataExplorerTableDatasetResponseOutputWithContext(ctx context.Context) AzureDataExplorerTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataExplorerTableDatasetResponseOutput)
}

// The Azure Data Explorer (Kusto) dataset.
type AzureDataExplorerTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureDataExplorerTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerTableDatasetResponse)(nil)).Elem()
}

func (o AzureDataExplorerTableDatasetResponseOutput) ToAzureDataExplorerTableDatasetResponseOutput() AzureDataExplorerTableDatasetResponseOutput {
	return o
}

func (o AzureDataExplorerTableDatasetResponseOutput) ToAzureDataExplorerTableDatasetResponseOutputWithContext(ctx context.Context) AzureDataExplorerTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureDataExplorerTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureDataExplorerTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureDataExplorerTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AzureDataExplorerTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureDataExplorerTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureDataExplorerTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureDataExplorerTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure Data Explorer database. Type: string (or Expression with resultType string).
func (o AzureDataExplorerTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureDataExplorerTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedService struct {
	// The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
	DataLakeAnalyticsUri interface{} `pulumi:"dataLakeAnalyticsUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureDataLakeAnalyticsLinkedServiceInput is an input type that accepts AzureDataLakeAnalyticsLinkedServiceArgs and AzureDataLakeAnalyticsLinkedServiceOutput values.
// You can construct a concrete instance of `AzureDataLakeAnalyticsLinkedServiceInput` via:
//
//          AzureDataLakeAnalyticsLinkedServiceArgs{...}
type AzureDataLakeAnalyticsLinkedServiceInput interface {
	pulumi.Input

	ToAzureDataLakeAnalyticsLinkedServiceOutput() AzureDataLakeAnalyticsLinkedServiceOutput
	ToAzureDataLakeAnalyticsLinkedServiceOutputWithContext(context.Context) AzureDataLakeAnalyticsLinkedServiceOutput
}

// Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedServiceArgs struct {
	// The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
	AccountName pulumi.Input `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
	DataLakeAnalyticsUri pulumi.Input `pulumi:"dataLakeAnalyticsUri"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName pulumi.Input `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId pulumi.Input `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataLakeAnalyticsLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeAnalyticsLinkedService)(nil)).Elem()
}

func (i AzureDataLakeAnalyticsLinkedServiceArgs) ToAzureDataLakeAnalyticsLinkedServiceOutput() AzureDataLakeAnalyticsLinkedServiceOutput {
	return i.ToAzureDataLakeAnalyticsLinkedServiceOutputWithContext(context.Background())
}

func (i AzureDataLakeAnalyticsLinkedServiceArgs) ToAzureDataLakeAnalyticsLinkedServiceOutputWithContext(ctx context.Context) AzureDataLakeAnalyticsLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeAnalyticsLinkedServiceOutput)
}

// Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureDataLakeAnalyticsLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeAnalyticsLinkedService)(nil)).Elem()
}

func (o AzureDataLakeAnalyticsLinkedServiceOutput) ToAzureDataLakeAnalyticsLinkedServiceOutput() AzureDataLakeAnalyticsLinkedServiceOutput {
	return o
}

func (o AzureDataLakeAnalyticsLinkedServiceOutput) ToAzureDataLakeAnalyticsLinkedServiceOutputWithContext(ctx context.Context) AzureDataLakeAnalyticsLinkedServiceOutput {
	return o
}

// The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceOutput) AccountName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) interface{} { return v.AccountName }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureDataLakeAnalyticsLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureDataLakeAnalyticsLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceOutput) DataLakeAnalyticsUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) interface{} { return v.DataLakeAnalyticsUri }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureDataLakeAnalyticsLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureDataLakeAnalyticsLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceOutput) ResourceGroupName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) interface{} { return v.ResourceGroupName }).(pulumi.AnyOutput)
}

// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
func (o AzureDataLakeAnalyticsLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceOutput) SubscriptionId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) interface{} { return v.SubscriptionId }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureDataLakeAnalyticsLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedServiceResponse struct {
	// The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
	DataLakeAnalyticsUri interface{} `pulumi:"dataLakeAnalyticsUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureDataLakeAnalyticsLinkedServiceResponseInput is an input type that accepts AzureDataLakeAnalyticsLinkedServiceResponseArgs and AzureDataLakeAnalyticsLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureDataLakeAnalyticsLinkedServiceResponseInput` via:
//
//          AzureDataLakeAnalyticsLinkedServiceResponseArgs{...}
type AzureDataLakeAnalyticsLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureDataLakeAnalyticsLinkedServiceResponseOutput() AzureDataLakeAnalyticsLinkedServiceResponseOutput
	ToAzureDataLakeAnalyticsLinkedServiceResponseOutputWithContext(context.Context) AzureDataLakeAnalyticsLinkedServiceResponseOutput
}

// Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedServiceResponseArgs struct {
	// The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
	AccountName pulumi.Input `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
	DataLakeAnalyticsUri pulumi.Input `pulumi:"dataLakeAnalyticsUri"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName pulumi.Input `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId pulumi.Input `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataLakeAnalyticsLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeAnalyticsLinkedServiceResponse)(nil)).Elem()
}

func (i AzureDataLakeAnalyticsLinkedServiceResponseArgs) ToAzureDataLakeAnalyticsLinkedServiceResponseOutput() AzureDataLakeAnalyticsLinkedServiceResponseOutput {
	return i.ToAzureDataLakeAnalyticsLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureDataLakeAnalyticsLinkedServiceResponseArgs) ToAzureDataLakeAnalyticsLinkedServiceResponseOutputWithContext(ctx context.Context) AzureDataLakeAnalyticsLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeAnalyticsLinkedServiceResponseOutput)
}

// Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeAnalyticsLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeAnalyticsLinkedServiceResponse)(nil)).Elem()
}

func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) ToAzureDataLakeAnalyticsLinkedServiceResponseOutput() AzureDataLakeAnalyticsLinkedServiceResponseOutput {
	return o
}

func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) ToAzureDataLakeAnalyticsLinkedServiceResponseOutputWithContext(ctx context.Context) AzureDataLakeAnalyticsLinkedServiceResponseOutput {
	return o
}

// The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) AccountName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) interface{} { return v.AccountName }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) DataLakeAnalyticsUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) interface{} { return v.DataLakeAnalyticsUri }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) ResourceGroupName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) interface{} { return v.ResourceGroupName }).(pulumi.AnyOutput)
}

// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) SubscriptionId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) interface{} { return v.SubscriptionId }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Lake Store dataset.
type AzureDataLakeStoreDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the item(s) in the Azure Data Lake Store.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Data Lake Store.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureDataLakeStoreDatasetInput is an input type that accepts AzureDataLakeStoreDatasetArgs and AzureDataLakeStoreDatasetOutput values.
// You can construct a concrete instance of `AzureDataLakeStoreDatasetInput` via:
//
//          AzureDataLakeStoreDatasetArgs{...}
type AzureDataLakeStoreDatasetInput interface {
	pulumi.Input

	ToAzureDataLakeStoreDatasetOutput() AzureDataLakeStoreDatasetOutput
	ToAzureDataLakeStoreDatasetOutputWithContext(context.Context) AzureDataLakeStoreDatasetOutput
}

// Azure Data Lake Store dataset.
type AzureDataLakeStoreDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the item(s) in the Azure Data Lake Store.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// The format of the Data Lake Store.
	Format pulumi.Input `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataLakeStoreDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreDataset)(nil)).Elem()
}

func (i AzureDataLakeStoreDatasetArgs) ToAzureDataLakeStoreDatasetOutput() AzureDataLakeStoreDatasetOutput {
	return i.ToAzureDataLakeStoreDatasetOutputWithContext(context.Background())
}

func (i AzureDataLakeStoreDatasetArgs) ToAzureDataLakeStoreDatasetOutputWithContext(ctx context.Context) AzureDataLakeStoreDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreDatasetOutput)
}

// Azure Data Lake Store dataset.
type AzureDataLakeStoreDatasetOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreDataset)(nil)).Elem()
}

func (o AzureDataLakeStoreDatasetOutput) ToAzureDataLakeStoreDatasetOutput() AzureDataLakeStoreDatasetOutput {
	return o
}

func (o AzureDataLakeStoreDatasetOutput) ToAzureDataLakeStoreDatasetOutputWithContext(ctx context.Context) AzureDataLakeStoreDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureDataLakeStoreDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the item(s) in the Azure Data Lake Store.
func (o AzureDataLakeStoreDatasetOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o AzureDataLakeStoreDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreDatasetOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureDataLakeStoreDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreDatasetOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// The format of the Data Lake Store.
func (o AzureDataLakeStoreDatasetOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureDataLakeStoreDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureDataLakeStoreDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureDataLakeStoreDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureDataLakeStoreDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureDataLakeStoreDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Lake Store dataset.
type AzureDataLakeStoreDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the item(s) in the Azure Data Lake Store.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Data Lake Store.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureDataLakeStoreDatasetResponseInput is an input type that accepts AzureDataLakeStoreDatasetResponseArgs and AzureDataLakeStoreDatasetResponseOutput values.
// You can construct a concrete instance of `AzureDataLakeStoreDatasetResponseInput` via:
//
//          AzureDataLakeStoreDatasetResponseArgs{...}
type AzureDataLakeStoreDatasetResponseInput interface {
	pulumi.Input

	ToAzureDataLakeStoreDatasetResponseOutput() AzureDataLakeStoreDatasetResponseOutput
	ToAzureDataLakeStoreDatasetResponseOutputWithContext(context.Context) AzureDataLakeStoreDatasetResponseOutput
}

// Azure Data Lake Store dataset.
type AzureDataLakeStoreDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the item(s) in the Azure Data Lake Store.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// The format of the Data Lake Store.
	Format pulumi.Input `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataLakeStoreDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreDatasetResponse)(nil)).Elem()
}

func (i AzureDataLakeStoreDatasetResponseArgs) ToAzureDataLakeStoreDatasetResponseOutput() AzureDataLakeStoreDatasetResponseOutput {
	return i.ToAzureDataLakeStoreDatasetResponseOutputWithContext(context.Background())
}

func (i AzureDataLakeStoreDatasetResponseArgs) ToAzureDataLakeStoreDatasetResponseOutputWithContext(ctx context.Context) AzureDataLakeStoreDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreDatasetResponseOutput)
}

// Azure Data Lake Store dataset.
type AzureDataLakeStoreDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreDatasetResponse)(nil)).Elem()
}

func (o AzureDataLakeStoreDatasetResponseOutput) ToAzureDataLakeStoreDatasetResponseOutput() AzureDataLakeStoreDatasetResponseOutput {
	return o
}

func (o AzureDataLakeStoreDatasetResponseOutput) ToAzureDataLakeStoreDatasetResponseOutputWithContext(ctx context.Context) AzureDataLakeStoreDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureDataLakeStoreDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the item(s) in the Azure Data Lake Store.
func (o AzureDataLakeStoreDatasetResponseOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o AzureDataLakeStoreDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreDatasetResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureDataLakeStoreDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreDatasetResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// The format of the Data Lake Store.
func (o AzureDataLakeStoreDatasetResponseOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureDataLakeStoreDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureDataLakeStoreDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureDataLakeStoreDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureDataLakeStoreDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureDataLakeStoreDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedService struct {
	// Data Lake Store account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Data Lake Store service URI. Type: string (or Expression with resultType string).
	DataLakeStoreUri interface{} `pulumi:"dataLakeStoreUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Store account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureDataLakeStoreLinkedServiceInput is an input type that accepts AzureDataLakeStoreLinkedServiceArgs and AzureDataLakeStoreLinkedServiceOutput values.
// You can construct a concrete instance of `AzureDataLakeStoreLinkedServiceInput` via:
//
//          AzureDataLakeStoreLinkedServiceArgs{...}
type AzureDataLakeStoreLinkedServiceInput interface {
	pulumi.Input

	ToAzureDataLakeStoreLinkedServiceOutput() AzureDataLakeStoreLinkedServiceOutput
	ToAzureDataLakeStoreLinkedServiceOutputWithContext(context.Context) AzureDataLakeStoreLinkedServiceOutput
}

// Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedServiceArgs struct {
	// Data Lake Store account name. Type: string (or Expression with resultType string).
	AccountName pulumi.Input `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Data Lake Store service URI. Type: string (or Expression with resultType string).
	DataLakeStoreUri pulumi.Input `pulumi:"dataLakeStoreUri"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName pulumi.Input `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Store account.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId pulumi.Input `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataLakeStoreLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreLinkedService)(nil)).Elem()
}

func (i AzureDataLakeStoreLinkedServiceArgs) ToAzureDataLakeStoreLinkedServiceOutput() AzureDataLakeStoreLinkedServiceOutput {
	return i.ToAzureDataLakeStoreLinkedServiceOutputWithContext(context.Background())
}

func (i AzureDataLakeStoreLinkedServiceArgs) ToAzureDataLakeStoreLinkedServiceOutputWithContext(ctx context.Context) AzureDataLakeStoreLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreLinkedServiceOutput)
}

// Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreLinkedService)(nil)).Elem()
}

func (o AzureDataLakeStoreLinkedServiceOutput) ToAzureDataLakeStoreLinkedServiceOutput() AzureDataLakeStoreLinkedServiceOutput {
	return o
}

func (o AzureDataLakeStoreLinkedServiceOutput) ToAzureDataLakeStoreLinkedServiceOutputWithContext(ctx context.Context) AzureDataLakeStoreLinkedServiceOutput {
	return o
}

// Data Lake Store account name. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceOutput) AccountName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) interface{} { return v.AccountName }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureDataLakeStoreLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureDataLakeStoreLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Data Lake Store service URI. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceOutput) DataLakeStoreUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) interface{} { return v.DataLakeStoreUri }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureDataLakeStoreLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureDataLakeStoreLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceOutput) ResourceGroupName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) interface{} { return v.ResourceGroupName }).(pulumi.AnyOutput)
}

// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The Key of the application used to authenticate against the Azure Data Lake Store account.
func (o AzureDataLakeStoreLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceOutput) SubscriptionId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) interface{} { return v.SubscriptionId }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureDataLakeStoreLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedServiceResponse struct {
	// Data Lake Store account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Data Lake Store service URI. Type: string (or Expression with resultType string).
	DataLakeStoreUri interface{} `pulumi:"dataLakeStoreUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Store account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureDataLakeStoreLinkedServiceResponseInput is an input type that accepts AzureDataLakeStoreLinkedServiceResponseArgs and AzureDataLakeStoreLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureDataLakeStoreLinkedServiceResponseInput` via:
//
//          AzureDataLakeStoreLinkedServiceResponseArgs{...}
type AzureDataLakeStoreLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureDataLakeStoreLinkedServiceResponseOutput() AzureDataLakeStoreLinkedServiceResponseOutput
	ToAzureDataLakeStoreLinkedServiceResponseOutputWithContext(context.Context) AzureDataLakeStoreLinkedServiceResponseOutput
}

// Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedServiceResponseArgs struct {
	// Data Lake Store account name. Type: string (or Expression with resultType string).
	AccountName pulumi.Input `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Data Lake Store service URI. Type: string (or Expression with resultType string).
	DataLakeStoreUri pulumi.Input `pulumi:"dataLakeStoreUri"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName pulumi.Input `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Store account.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId pulumi.Input `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataLakeStoreLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreLinkedServiceResponse)(nil)).Elem()
}

func (i AzureDataLakeStoreLinkedServiceResponseArgs) ToAzureDataLakeStoreLinkedServiceResponseOutput() AzureDataLakeStoreLinkedServiceResponseOutput {
	return i.ToAzureDataLakeStoreLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureDataLakeStoreLinkedServiceResponseArgs) ToAzureDataLakeStoreLinkedServiceResponseOutputWithContext(ctx context.Context) AzureDataLakeStoreLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreLinkedServiceResponseOutput)
}

// Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreLinkedServiceResponse)(nil)).Elem()
}

func (o AzureDataLakeStoreLinkedServiceResponseOutput) ToAzureDataLakeStoreLinkedServiceResponseOutput() AzureDataLakeStoreLinkedServiceResponseOutput {
	return o
}

func (o AzureDataLakeStoreLinkedServiceResponseOutput) ToAzureDataLakeStoreLinkedServiceResponseOutputWithContext(ctx context.Context) AzureDataLakeStoreLinkedServiceResponseOutput {
	return o
}

// Data Lake Store account name. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) AccountName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) interface{} { return v.AccountName }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Data Lake Store service URI. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) DataLakeStoreUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) interface{} { return v.DataLakeStoreUri }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) ResourceGroupName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) interface{} { return v.ResourceGroupName }).(pulumi.AnyOutput)
}

// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The Key of the application used to authenticate against the Azure Data Lake Store account.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) SubscriptionId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) interface{} { return v.SubscriptionId }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The location of azure data lake store dataset.
type AzureDataLakeStoreLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
}

// AzureDataLakeStoreLocationInput is an input type that accepts AzureDataLakeStoreLocationArgs and AzureDataLakeStoreLocationOutput values.
// You can construct a concrete instance of `AzureDataLakeStoreLocationInput` via:
//
//          AzureDataLakeStoreLocationArgs{...}
type AzureDataLakeStoreLocationInput interface {
	pulumi.Input

	ToAzureDataLakeStoreLocationOutput() AzureDataLakeStoreLocationOutput
	ToAzureDataLakeStoreLocationOutputWithContext(context.Context) AzureDataLakeStoreLocationOutput
}

// The location of azure data lake store dataset.
type AzureDataLakeStoreLocationArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataLakeStoreLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreLocation)(nil)).Elem()
}

func (i AzureDataLakeStoreLocationArgs) ToAzureDataLakeStoreLocationOutput() AzureDataLakeStoreLocationOutput {
	return i.ToAzureDataLakeStoreLocationOutputWithContext(context.Background())
}

func (i AzureDataLakeStoreLocationArgs) ToAzureDataLakeStoreLocationOutputWithContext(ctx context.Context) AzureDataLakeStoreLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreLocationOutput)
}

// The location of azure data lake store dataset.
type AzureDataLakeStoreLocationOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreLocation)(nil)).Elem()
}

func (o AzureDataLakeStoreLocationOutput) ToAzureDataLakeStoreLocationOutput() AzureDataLakeStoreLocationOutput {
	return o
}

func (o AzureDataLakeStoreLocationOutput) ToAzureDataLakeStoreLocationOutputWithContext(ctx context.Context) AzureDataLakeStoreLocationOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AzureDataLakeStoreLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o AzureDataLakeStoreLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The location of azure data lake store dataset.
type AzureDataLakeStoreLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
}

// AzureDataLakeStoreLocationResponseInput is an input type that accepts AzureDataLakeStoreLocationResponseArgs and AzureDataLakeStoreLocationResponseOutput values.
// You can construct a concrete instance of `AzureDataLakeStoreLocationResponseInput` via:
//
//          AzureDataLakeStoreLocationResponseArgs{...}
type AzureDataLakeStoreLocationResponseInput interface {
	pulumi.Input

	ToAzureDataLakeStoreLocationResponseOutput() AzureDataLakeStoreLocationResponseOutput
	ToAzureDataLakeStoreLocationResponseOutputWithContext(context.Context) AzureDataLakeStoreLocationResponseOutput
}

// The location of azure data lake store dataset.
type AzureDataLakeStoreLocationResponseArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataLakeStoreLocationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreLocationResponse)(nil)).Elem()
}

func (i AzureDataLakeStoreLocationResponseArgs) ToAzureDataLakeStoreLocationResponseOutput() AzureDataLakeStoreLocationResponseOutput {
	return i.ToAzureDataLakeStoreLocationResponseOutputWithContext(context.Background())
}

func (i AzureDataLakeStoreLocationResponseArgs) ToAzureDataLakeStoreLocationResponseOutputWithContext(ctx context.Context) AzureDataLakeStoreLocationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreLocationResponseOutput)
}

// The location of azure data lake store dataset.
type AzureDataLakeStoreLocationResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreLocationResponse)(nil)).Elem()
}

func (o AzureDataLakeStoreLocationResponseOutput) ToAzureDataLakeStoreLocationResponseOutput() AzureDataLakeStoreLocationResponseOutput {
	return o
}

func (o AzureDataLakeStoreLocationResponseOutput) ToAzureDataLakeStoreLocationResponseOutputWithContext(ctx context.Context) AzureDataLakeStoreLocationResponseOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AzureDataLakeStoreLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o AzureDataLakeStoreLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Databricks Delta Lake dataset.
type AzureDatabricksDeltaLakeDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of delta table. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of delta table. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureDatabricksDeltaLakeDatasetInput is an input type that accepts AzureDatabricksDeltaLakeDatasetArgs and AzureDatabricksDeltaLakeDatasetOutput values.
// You can construct a concrete instance of `AzureDatabricksDeltaLakeDatasetInput` via:
//
//          AzureDatabricksDeltaLakeDatasetArgs{...}
type AzureDatabricksDeltaLakeDatasetInput interface {
	pulumi.Input

	ToAzureDatabricksDeltaLakeDatasetOutput() AzureDatabricksDeltaLakeDatasetOutput
	ToAzureDatabricksDeltaLakeDatasetOutputWithContext(context.Context) AzureDatabricksDeltaLakeDatasetOutput
}

// Azure Databricks Delta Lake dataset.
type AzureDatabricksDeltaLakeDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The database name of delta table. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The name of delta table. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDatabricksDeltaLakeDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeDataset)(nil)).Elem()
}

func (i AzureDatabricksDeltaLakeDatasetArgs) ToAzureDatabricksDeltaLakeDatasetOutput() AzureDatabricksDeltaLakeDatasetOutput {
	return i.ToAzureDatabricksDeltaLakeDatasetOutputWithContext(context.Background())
}

func (i AzureDatabricksDeltaLakeDatasetArgs) ToAzureDatabricksDeltaLakeDatasetOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatabricksDeltaLakeDatasetOutput)
}

// Azure Databricks Delta Lake dataset.
type AzureDatabricksDeltaLakeDatasetOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeDataset)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeDatasetOutput) ToAzureDatabricksDeltaLakeDatasetOutput() AzureDatabricksDeltaLakeDatasetOutput {
	return o
}

func (o AzureDatabricksDeltaLakeDatasetOutput) ToAzureDatabricksDeltaLakeDatasetOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureDatabricksDeltaLakeDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The database name of delta table. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeDatasetOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Dataset description.
func (o AzureDatabricksDeltaLakeDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureDatabricksDeltaLakeDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AzureDatabricksDeltaLakeDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureDatabricksDeltaLakeDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureDatabricksDeltaLakeDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureDatabricksDeltaLakeDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The name of delta table. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureDatabricksDeltaLakeDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Databricks Delta Lake dataset.
type AzureDatabricksDeltaLakeDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of delta table. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of delta table. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureDatabricksDeltaLakeDatasetResponseInput is an input type that accepts AzureDatabricksDeltaLakeDatasetResponseArgs and AzureDatabricksDeltaLakeDatasetResponseOutput values.
// You can construct a concrete instance of `AzureDatabricksDeltaLakeDatasetResponseInput` via:
//
//          AzureDatabricksDeltaLakeDatasetResponseArgs{...}
type AzureDatabricksDeltaLakeDatasetResponseInput interface {
	pulumi.Input

	ToAzureDatabricksDeltaLakeDatasetResponseOutput() AzureDatabricksDeltaLakeDatasetResponseOutput
	ToAzureDatabricksDeltaLakeDatasetResponseOutputWithContext(context.Context) AzureDatabricksDeltaLakeDatasetResponseOutput
}

// Azure Databricks Delta Lake dataset.
type AzureDatabricksDeltaLakeDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The database name of delta table. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The name of delta table. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDatabricksDeltaLakeDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeDatasetResponse)(nil)).Elem()
}

func (i AzureDatabricksDeltaLakeDatasetResponseArgs) ToAzureDatabricksDeltaLakeDatasetResponseOutput() AzureDatabricksDeltaLakeDatasetResponseOutput {
	return i.ToAzureDatabricksDeltaLakeDatasetResponseOutputWithContext(context.Background())
}

func (i AzureDatabricksDeltaLakeDatasetResponseArgs) ToAzureDatabricksDeltaLakeDatasetResponseOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatabricksDeltaLakeDatasetResponseOutput)
}

// Azure Databricks Delta Lake dataset.
type AzureDatabricksDeltaLakeDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeDatasetResponse)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeDatasetResponseOutput) ToAzureDatabricksDeltaLakeDatasetResponseOutput() AzureDatabricksDeltaLakeDatasetResponseOutput {
	return o
}

func (o AzureDatabricksDeltaLakeDatasetResponseOutput) ToAzureDatabricksDeltaLakeDatasetResponseOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The database name of delta table. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Dataset description.
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The name of delta table. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Databricks Delta Lake linked service.
type AzureDatabricksDeltaLakeLinkedService struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string, SecureString or AzureKeyVaultSecretReference.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The id of an existing interactive cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
	ClusterId interface{} `pulumi:"clusterId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureDatabricksDeltaLakeLinkedServiceInput is an input type that accepts AzureDatabricksDeltaLakeLinkedServiceArgs and AzureDatabricksDeltaLakeLinkedServiceOutput values.
// You can construct a concrete instance of `AzureDatabricksDeltaLakeLinkedServiceInput` via:
//
//          AzureDatabricksDeltaLakeLinkedServiceArgs{...}
type AzureDatabricksDeltaLakeLinkedServiceInput interface {
	pulumi.Input

	ToAzureDatabricksDeltaLakeLinkedServiceOutput() AzureDatabricksDeltaLakeLinkedServiceOutput
	ToAzureDatabricksDeltaLakeLinkedServiceOutputWithContext(context.Context) AzureDatabricksDeltaLakeLinkedServiceOutput
}

// Azure Databricks Delta Lake linked service.
type AzureDatabricksDeltaLakeLinkedServiceArgs struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string, SecureString or AzureKeyVaultSecretReference.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The id of an existing interactive cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
	ClusterId pulumi.Input `pulumi:"clusterId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain pulumi.Input `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDatabricksDeltaLakeLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeLinkedService)(nil)).Elem()
}

func (i AzureDatabricksDeltaLakeLinkedServiceArgs) ToAzureDatabricksDeltaLakeLinkedServiceOutput() AzureDatabricksDeltaLakeLinkedServiceOutput {
	return i.ToAzureDatabricksDeltaLakeLinkedServiceOutputWithContext(context.Background())
}

func (i AzureDatabricksDeltaLakeLinkedServiceArgs) ToAzureDatabricksDeltaLakeLinkedServiceOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatabricksDeltaLakeLinkedServiceOutput)
}

// Azure Databricks Delta Lake linked service.
type AzureDatabricksDeltaLakeLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeLinkedService)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeLinkedServiceOutput) ToAzureDatabricksDeltaLakeLinkedServiceOutput() AzureDatabricksDeltaLakeLinkedServiceOutput {
	return o
}

func (o AzureDatabricksDeltaLakeLinkedServiceOutput) ToAzureDatabricksDeltaLakeLinkedServiceOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeLinkedServiceOutput {
	return o
}

// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The id of an existing interactive cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) ClusterId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) interface{} { return v.ClusterId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) Domain() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) interface{} { return v.Domain }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Databricks Delta Lake linked service.
type AzureDatabricksDeltaLakeLinkedServiceResponse struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string, SecureString or AzureKeyVaultSecretReference.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The id of an existing interactive cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
	ClusterId interface{} `pulumi:"clusterId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureDatabricksDeltaLakeLinkedServiceResponseInput is an input type that accepts AzureDatabricksDeltaLakeLinkedServiceResponseArgs and AzureDatabricksDeltaLakeLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureDatabricksDeltaLakeLinkedServiceResponseInput` via:
//
//          AzureDatabricksDeltaLakeLinkedServiceResponseArgs{...}
type AzureDatabricksDeltaLakeLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureDatabricksDeltaLakeLinkedServiceResponseOutput() AzureDatabricksDeltaLakeLinkedServiceResponseOutput
	ToAzureDatabricksDeltaLakeLinkedServiceResponseOutputWithContext(context.Context) AzureDatabricksDeltaLakeLinkedServiceResponseOutput
}

// Azure Databricks Delta Lake linked service.
type AzureDatabricksDeltaLakeLinkedServiceResponseArgs struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string, SecureString or AzureKeyVaultSecretReference.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The id of an existing interactive cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
	ClusterId pulumi.Input `pulumi:"clusterId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain pulumi.Input `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDatabricksDeltaLakeLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeLinkedServiceResponse)(nil)).Elem()
}

func (i AzureDatabricksDeltaLakeLinkedServiceResponseArgs) ToAzureDatabricksDeltaLakeLinkedServiceResponseOutput() AzureDatabricksDeltaLakeLinkedServiceResponseOutput {
	return i.ToAzureDatabricksDeltaLakeLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureDatabricksDeltaLakeLinkedServiceResponseArgs) ToAzureDatabricksDeltaLakeLinkedServiceResponseOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatabricksDeltaLakeLinkedServiceResponseOutput)
}

// Azure Databricks Delta Lake linked service.
type AzureDatabricksDeltaLakeLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeLinkedServiceResponse)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) ToAzureDatabricksDeltaLakeLinkedServiceResponseOutput() AzureDatabricksDeltaLakeLinkedServiceResponseOutput {
	return o
}

func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) ToAzureDatabricksDeltaLakeLinkedServiceResponseOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeLinkedServiceResponseOutput {
	return o
}

// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The id of an existing interactive cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) ClusterId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) interface{} { return v.ClusterId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) Domain() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) interface{} { return v.Domain }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Databricks linked service.
type AzureDatabricksLinkedService struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	ExistingClusterId interface{} `pulumi:"existingClusterId"`
	// The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	InstancePoolId interface{} `pulumi:"instancePoolId"`
	// Additional tags for cluster resources. This property is ignored in instance pool configurations.
	NewClusterCustomTags map[string]interface{} `pulumi:"newClusterCustomTags"`
	// The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or Expression with resultType string).
	NewClusterDriverNodeType interface{} `pulumi:"newClusterDriverNodeType"`
	// Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks are always enabled). Type: boolean (or Expression with resultType boolean).
	NewClusterEnableElasticDisk interface{} `pulumi:"newClusterEnableElasticDisk"`
	// User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of strings).
	NewClusterInitScripts interface{} `pulumi:"newClusterInitScripts"`
	// Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string).
	NewClusterLogDestination interface{} `pulumi:"newClusterLogDestination"`
	// The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, this property is ignored. Type: string (or Expression with resultType string).
	NewClusterNodeType interface{} `pulumi:"newClusterNodeType"`
	// If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, this a string-formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fixed number of worker nodes, such as '2'. Required if newClusterVersion is specified. Type: string (or Expression with resultType string).
	NewClusterNumOfWorker interface{} `pulumi:"newClusterNumOfWorker"`
	// A set of optional, user-specified Spark configuration key-value pairs.
	NewClusterSparkConf map[string]interface{} `pulumi:"newClusterSparkConf"`
	// A set of optional, user-specified Spark environment variables key-value pairs.
	NewClusterSparkEnvVars map[string]interface{} `pulumi:"newClusterSparkEnvVars"`
	// If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes created for each run of this activity. Required if instancePoolId is specified. Type: string (or Expression with resultType string).
	NewClusterVersion interface{} `pulumi:"newClusterVersion"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureDatabricksLinkedServiceInput is an input type that accepts AzureDatabricksLinkedServiceArgs and AzureDatabricksLinkedServiceOutput values.
// You can construct a concrete instance of `AzureDatabricksLinkedServiceInput` via:
//
//          AzureDatabricksLinkedServiceArgs{...}
type AzureDatabricksLinkedServiceInput interface {
	pulumi.Input

	ToAzureDatabricksLinkedServiceOutput() AzureDatabricksLinkedServiceOutput
	ToAzureDatabricksLinkedServiceOutputWithContext(context.Context) AzureDatabricksLinkedServiceOutput
}

// Azure Databricks linked service.
type AzureDatabricksLinkedServiceArgs struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain pulumi.Input `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	ExistingClusterId pulumi.Input `pulumi:"existingClusterId"`
	// The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	InstancePoolId pulumi.Input `pulumi:"instancePoolId"`
	// Additional tags for cluster resources. This property is ignored in instance pool configurations.
	NewClusterCustomTags pulumi.MapInput `pulumi:"newClusterCustomTags"`
	// The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or Expression with resultType string).
	NewClusterDriverNodeType pulumi.Input `pulumi:"newClusterDriverNodeType"`
	// Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks are always enabled). Type: boolean (or Expression with resultType boolean).
	NewClusterEnableElasticDisk pulumi.Input `pulumi:"newClusterEnableElasticDisk"`
	// User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of strings).
	NewClusterInitScripts pulumi.Input `pulumi:"newClusterInitScripts"`
	// Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string).
	NewClusterLogDestination pulumi.Input `pulumi:"newClusterLogDestination"`
	// The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, this property is ignored. Type: string (or Expression with resultType string).
	NewClusterNodeType pulumi.Input `pulumi:"newClusterNodeType"`
	// If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, this a string-formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fixed number of worker nodes, such as '2'. Required if newClusterVersion is specified. Type: string (or Expression with resultType string).
	NewClusterNumOfWorker pulumi.Input `pulumi:"newClusterNumOfWorker"`
	// A set of optional, user-specified Spark configuration key-value pairs.
	NewClusterSparkConf pulumi.MapInput `pulumi:"newClusterSparkConf"`
	// A set of optional, user-specified Spark environment variables key-value pairs.
	NewClusterSparkEnvVars pulumi.MapInput `pulumi:"newClusterSparkEnvVars"`
	// If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes created for each run of this activity. Required if instancePoolId is specified. Type: string (or Expression with resultType string).
	NewClusterVersion pulumi.Input `pulumi:"newClusterVersion"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDatabricksLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksLinkedService)(nil)).Elem()
}

func (i AzureDatabricksLinkedServiceArgs) ToAzureDatabricksLinkedServiceOutput() AzureDatabricksLinkedServiceOutput {
	return i.ToAzureDatabricksLinkedServiceOutputWithContext(context.Background())
}

func (i AzureDatabricksLinkedServiceArgs) ToAzureDatabricksLinkedServiceOutputWithContext(ctx context.Context) AzureDatabricksLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatabricksLinkedServiceOutput)
}

// Azure Databricks linked service.
type AzureDatabricksLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureDatabricksLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksLinkedService)(nil)).Elem()
}

func (o AzureDatabricksLinkedServiceOutput) ToAzureDatabricksLinkedServiceOutput() AzureDatabricksLinkedServiceOutput {
	return o
}

func (o AzureDatabricksLinkedServiceOutput) ToAzureDatabricksLinkedServiceOutputWithContext(ctx context.Context) AzureDatabricksLinkedServiceOutput {
	return o
}

// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureDatabricksLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureDatabricksLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AzureDatabricksLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) Domain() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.Domain }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) ExistingClusterId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.ExistingClusterId }).(pulumi.AnyOutput)
}

// The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) InstancePoolId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.InstancePoolId }).(pulumi.AnyOutput)
}

// Additional tags for cluster resources. This property is ignored in instance pool configurations.
func (o AzureDatabricksLinkedServiceOutput) NewClusterCustomTags() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) map[string]interface{} { return v.NewClusterCustomTags }).(pulumi.MapOutput)
}

// The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) NewClusterDriverNodeType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.NewClusterDriverNodeType }).(pulumi.AnyOutput)
}

// Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks are always enabled). Type: boolean (or Expression with resultType boolean).
func (o AzureDatabricksLinkedServiceOutput) NewClusterEnableElasticDisk() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.NewClusterEnableElasticDisk }).(pulumi.AnyOutput)
}

// User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of strings).
func (o AzureDatabricksLinkedServiceOutput) NewClusterInitScripts() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.NewClusterInitScripts }).(pulumi.AnyOutput)
}

// Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) NewClusterLogDestination() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.NewClusterLogDestination }).(pulumi.AnyOutput)
}

// The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, this property is ignored. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) NewClusterNodeType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.NewClusterNodeType }).(pulumi.AnyOutput)
}

// If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, this a string-formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fixed number of worker nodes, such as '2'. Required if newClusterVersion is specified. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) NewClusterNumOfWorker() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.NewClusterNumOfWorker }).(pulumi.AnyOutput)
}

// A set of optional, user-specified Spark configuration key-value pairs.
func (o AzureDatabricksLinkedServiceOutput) NewClusterSparkConf() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) map[string]interface{} { return v.NewClusterSparkConf }).(pulumi.MapOutput)
}

// A set of optional, user-specified Spark environment variables key-value pairs.
func (o AzureDatabricksLinkedServiceOutput) NewClusterSparkEnvVars() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) map[string]interface{} { return v.NewClusterSparkEnvVars }).(pulumi.MapOutput)
}

// If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes created for each run of this activity. Required if instancePoolId is specified. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) NewClusterVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.NewClusterVersion }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureDatabricksLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o AzureDatabricksLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Databricks linked service.
type AzureDatabricksLinkedServiceResponse struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	ExistingClusterId interface{} `pulumi:"existingClusterId"`
	// The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	InstancePoolId interface{} `pulumi:"instancePoolId"`
	// Additional tags for cluster resources. This property is ignored in instance pool configurations.
	NewClusterCustomTags map[string]interface{} `pulumi:"newClusterCustomTags"`
	// The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or Expression with resultType string).
	NewClusterDriverNodeType interface{} `pulumi:"newClusterDriverNodeType"`
	// Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks are always enabled). Type: boolean (or Expression with resultType boolean).
	NewClusterEnableElasticDisk interface{} `pulumi:"newClusterEnableElasticDisk"`
	// User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of strings).
	NewClusterInitScripts interface{} `pulumi:"newClusterInitScripts"`
	// Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string).
	NewClusterLogDestination interface{} `pulumi:"newClusterLogDestination"`
	// The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, this property is ignored. Type: string (or Expression with resultType string).
	NewClusterNodeType interface{} `pulumi:"newClusterNodeType"`
	// If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, this a string-formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fixed number of worker nodes, such as '2'. Required if newClusterVersion is specified. Type: string (or Expression with resultType string).
	NewClusterNumOfWorker interface{} `pulumi:"newClusterNumOfWorker"`
	// A set of optional, user-specified Spark configuration key-value pairs.
	NewClusterSparkConf map[string]interface{} `pulumi:"newClusterSparkConf"`
	// A set of optional, user-specified Spark environment variables key-value pairs.
	NewClusterSparkEnvVars map[string]interface{} `pulumi:"newClusterSparkEnvVars"`
	// If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes created for each run of this activity. Required if instancePoolId is specified. Type: string (or Expression with resultType string).
	NewClusterVersion interface{} `pulumi:"newClusterVersion"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureDatabricksLinkedServiceResponseInput is an input type that accepts AzureDatabricksLinkedServiceResponseArgs and AzureDatabricksLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureDatabricksLinkedServiceResponseInput` via:
//
//          AzureDatabricksLinkedServiceResponseArgs{...}
type AzureDatabricksLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureDatabricksLinkedServiceResponseOutput() AzureDatabricksLinkedServiceResponseOutput
	ToAzureDatabricksLinkedServiceResponseOutputWithContext(context.Context) AzureDatabricksLinkedServiceResponseOutput
}

// Azure Databricks linked service.
type AzureDatabricksLinkedServiceResponseArgs struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain pulumi.Input `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	ExistingClusterId pulumi.Input `pulumi:"existingClusterId"`
	// The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	InstancePoolId pulumi.Input `pulumi:"instancePoolId"`
	// Additional tags for cluster resources. This property is ignored in instance pool configurations.
	NewClusterCustomTags pulumi.MapInput `pulumi:"newClusterCustomTags"`
	// The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or Expression with resultType string).
	NewClusterDriverNodeType pulumi.Input `pulumi:"newClusterDriverNodeType"`
	// Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks are always enabled). Type: boolean (or Expression with resultType boolean).
	NewClusterEnableElasticDisk pulumi.Input `pulumi:"newClusterEnableElasticDisk"`
	// User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of strings).
	NewClusterInitScripts pulumi.Input `pulumi:"newClusterInitScripts"`
	// Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string).
	NewClusterLogDestination pulumi.Input `pulumi:"newClusterLogDestination"`
	// The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, this property is ignored. Type: string (or Expression with resultType string).
	NewClusterNodeType pulumi.Input `pulumi:"newClusterNodeType"`
	// If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, this a string-formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fixed number of worker nodes, such as '2'. Required if newClusterVersion is specified. Type: string (or Expression with resultType string).
	NewClusterNumOfWorker pulumi.Input `pulumi:"newClusterNumOfWorker"`
	// A set of optional, user-specified Spark configuration key-value pairs.
	NewClusterSparkConf pulumi.MapInput `pulumi:"newClusterSparkConf"`
	// A set of optional, user-specified Spark environment variables key-value pairs.
	NewClusterSparkEnvVars pulumi.MapInput `pulumi:"newClusterSparkEnvVars"`
	// If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes created for each run of this activity. Required if instancePoolId is specified. Type: string (or Expression with resultType string).
	NewClusterVersion pulumi.Input `pulumi:"newClusterVersion"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDatabricksLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksLinkedServiceResponse)(nil)).Elem()
}

func (i AzureDatabricksLinkedServiceResponseArgs) ToAzureDatabricksLinkedServiceResponseOutput() AzureDatabricksLinkedServiceResponseOutput {
	return i.ToAzureDatabricksLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureDatabricksLinkedServiceResponseArgs) ToAzureDatabricksLinkedServiceResponseOutputWithContext(ctx context.Context) AzureDatabricksLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatabricksLinkedServiceResponseOutput)
}

// Azure Databricks linked service.
type AzureDatabricksLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureDatabricksLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksLinkedServiceResponse)(nil)).Elem()
}

func (o AzureDatabricksLinkedServiceResponseOutput) ToAzureDatabricksLinkedServiceResponseOutput() AzureDatabricksLinkedServiceResponseOutput {
	return o
}

func (o AzureDatabricksLinkedServiceResponseOutput) ToAzureDatabricksLinkedServiceResponseOutputWithContext(ctx context.Context) AzureDatabricksLinkedServiceResponseOutput {
	return o
}

// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureDatabricksLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureDatabricksLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureDatabricksLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) Domain() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.Domain }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) ExistingClusterId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.ExistingClusterId }).(pulumi.AnyOutput)
}

// The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) InstancePoolId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.InstancePoolId }).(pulumi.AnyOutput)
}

// Additional tags for cluster resources. This property is ignored in instance pool configurations.
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterCustomTags() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) map[string]interface{} { return v.NewClusterCustomTags }).(pulumi.MapOutput)
}

// The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterDriverNodeType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.NewClusterDriverNodeType }).(pulumi.AnyOutput)
}

// Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks are always enabled). Type: boolean (or Expression with resultType boolean).
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterEnableElasticDisk() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.NewClusterEnableElasticDisk }).(pulumi.AnyOutput)
}

// User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of strings).
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterInitScripts() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.NewClusterInitScripts }).(pulumi.AnyOutput)
}

// Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterLogDestination() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.NewClusterLogDestination }).(pulumi.AnyOutput)
}

// The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, this property is ignored. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterNodeType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.NewClusterNodeType }).(pulumi.AnyOutput)
}

// If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, this a string-formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fixed number of worker nodes, such as '2'. Required if newClusterVersion is specified. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterNumOfWorker() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.NewClusterNumOfWorker }).(pulumi.AnyOutput)
}

// A set of optional, user-specified Spark configuration key-value pairs.
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterSparkConf() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) map[string]interface{} { return v.NewClusterSparkConf }).(pulumi.MapOutput)
}

// A set of optional, user-specified Spark environment variables key-value pairs.
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterSparkEnvVars() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) map[string]interface{} { return v.NewClusterSparkEnvVars }).(pulumi.MapOutput)
}

// If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes created for each run of this activity. Required if instancePoolId is specified. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.NewClusterVersion }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureDatabricksLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o AzureDatabricksLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure File Storage linked service.
type AzureFileStorageLinkedService struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReference `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string).
	FileShare interface{} `pulumi:"fileShare"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to logon the server.
	Password interface{} `pulumi:"password"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReference `pulumi:"sasToken"`
	// SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// The azure file share snapshot version. Type: string (or Expression with resultType string).
	Snapshot interface{} `pulumi:"snapshot"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId interface{} `pulumi:"userId"`
}

// AzureFileStorageLinkedServiceInput is an input type that accepts AzureFileStorageLinkedServiceArgs and AzureFileStorageLinkedServiceOutput values.
// You can construct a concrete instance of `AzureFileStorageLinkedServiceInput` via:
//
//          AzureFileStorageLinkedServiceArgs{...}
type AzureFileStorageLinkedServiceInput interface {
	pulumi.Input

	ToAzureFileStorageLinkedServiceOutput() AzureFileStorageLinkedServiceOutput
	ToAzureFileStorageLinkedServiceOutputWithContext(context.Context) AzureFileStorageLinkedServiceOutput
}

// Azure File Storage linked service.
type AzureFileStorageLinkedServiceArgs struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey AzureKeyVaultSecretReferencePtrInput `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string).
	FileShare pulumi.Input `pulumi:"fileShare"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to logon the server.
	Password pulumi.Input `pulumi:"password"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken AzureKeyVaultSecretReferencePtrInput `pulumi:"sasToken"`
	// SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri pulumi.Input `pulumi:"sasUri"`
	// The azure file share snapshot version. Type: string (or Expression with resultType string).
	Snapshot pulumi.Input `pulumi:"snapshot"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId pulumi.Input `pulumi:"userId"`
}

func (AzureFileStorageLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageLinkedService)(nil)).Elem()
}

func (i AzureFileStorageLinkedServiceArgs) ToAzureFileStorageLinkedServiceOutput() AzureFileStorageLinkedServiceOutput {
	return i.ToAzureFileStorageLinkedServiceOutputWithContext(context.Background())
}

func (i AzureFileStorageLinkedServiceArgs) ToAzureFileStorageLinkedServiceOutputWithContext(ctx context.Context) AzureFileStorageLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileStorageLinkedServiceOutput)
}

// Azure File Storage linked service.
type AzureFileStorageLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureFileStorageLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageLinkedService)(nil)).Elem()
}

func (o AzureFileStorageLinkedServiceOutput) ToAzureFileStorageLinkedServiceOutput() AzureFileStorageLinkedServiceOutput {
	return o
}

func (o AzureFileStorageLinkedServiceOutput) ToAzureFileStorageLinkedServiceOutputWithContext(ctx context.Context) AzureFileStorageLinkedServiceOutput {
	return o
}

// The Azure key vault secret reference of accountKey in connection string.
func (o AzureFileStorageLinkedServiceOutput) AccountKey() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) *AzureKeyVaultSecretReference { return v.AccountKey }).(AzureKeyVaultSecretReferencePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureFileStorageLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureFileStorageLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureFileStorageLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureFileStorageLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureFileStorageLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string).
func (o AzureFileStorageLinkedServiceOutput) FileShare() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) interface{} { return v.FileShare }).(pulumi.AnyOutput)
}

// Host name of the server. Type: string (or Expression with resultType string).
func (o AzureFileStorageLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureFileStorageLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to logon the server.
func (o AzureFileStorageLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The Azure key vault secret reference of sasToken in sas uri.
func (o AzureFileStorageLinkedServiceOutput) SasToken() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) *AzureKeyVaultSecretReference { return v.SasToken }).(AzureKeyVaultSecretReferencePtrOutput)
}

// SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureFileStorageLinkedServiceOutput) SasUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) interface{} { return v.SasUri }).(pulumi.AnyOutput)
}

// The azure file share snapshot version. Type: string (or Expression with resultType string).
func (o AzureFileStorageLinkedServiceOutput) Snapshot() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) interface{} { return v.Snapshot }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureFileStorageLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// User ID to logon the server. Type: string (or Expression with resultType string).
func (o AzureFileStorageLinkedServiceOutput) UserId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) interface{} { return v.UserId }).(pulumi.AnyOutput)
}

// Azure File Storage linked service.
type AzureFileStorageLinkedServiceResponse struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReferenceResponse `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string).
	FileShare interface{} `pulumi:"fileShare"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to logon the server.
	Password interface{} `pulumi:"password"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReferenceResponse `pulumi:"sasToken"`
	// SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// The azure file share snapshot version. Type: string (or Expression with resultType string).
	Snapshot interface{} `pulumi:"snapshot"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId interface{} `pulumi:"userId"`
}

// AzureFileStorageLinkedServiceResponseInput is an input type that accepts AzureFileStorageLinkedServiceResponseArgs and AzureFileStorageLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureFileStorageLinkedServiceResponseInput` via:
//
//          AzureFileStorageLinkedServiceResponseArgs{...}
type AzureFileStorageLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureFileStorageLinkedServiceResponseOutput() AzureFileStorageLinkedServiceResponseOutput
	ToAzureFileStorageLinkedServiceResponseOutputWithContext(context.Context) AzureFileStorageLinkedServiceResponseOutput
}

// Azure File Storage linked service.
type AzureFileStorageLinkedServiceResponseArgs struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string).
	FileShare pulumi.Input `pulumi:"fileShare"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password to logon the server.
	Password pulumi.Input `pulumi:"password"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"sasToken"`
	// SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri pulumi.Input `pulumi:"sasUri"`
	// The azure file share snapshot version. Type: string (or Expression with resultType string).
	Snapshot pulumi.Input `pulumi:"snapshot"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId pulumi.Input `pulumi:"userId"`
}

func (AzureFileStorageLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageLinkedServiceResponse)(nil)).Elem()
}

func (i AzureFileStorageLinkedServiceResponseArgs) ToAzureFileStorageLinkedServiceResponseOutput() AzureFileStorageLinkedServiceResponseOutput {
	return i.ToAzureFileStorageLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureFileStorageLinkedServiceResponseArgs) ToAzureFileStorageLinkedServiceResponseOutputWithContext(ctx context.Context) AzureFileStorageLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileStorageLinkedServiceResponseOutput)
}

// Azure File Storage linked service.
type AzureFileStorageLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureFileStorageLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageLinkedServiceResponse)(nil)).Elem()
}

func (o AzureFileStorageLinkedServiceResponseOutput) ToAzureFileStorageLinkedServiceResponseOutput() AzureFileStorageLinkedServiceResponseOutput {
	return o
}

func (o AzureFileStorageLinkedServiceResponseOutput) ToAzureFileStorageLinkedServiceResponseOutputWithContext(ctx context.Context) AzureFileStorageLinkedServiceResponseOutput {
	return o
}

// The Azure key vault secret reference of accountKey in connection string.
func (o AzureFileStorageLinkedServiceResponseOutput) AccountKey() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse {
		return v.AccountKey
	}).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureFileStorageLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureFileStorageLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureFileStorageLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureFileStorageLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureFileStorageLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string).
func (o AzureFileStorageLinkedServiceResponseOutput) FileShare() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) interface{} { return v.FileShare }).(pulumi.AnyOutput)
}

// Host name of the server. Type: string (or Expression with resultType string).
func (o AzureFileStorageLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureFileStorageLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Password to logon the server.
func (o AzureFileStorageLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The Azure key vault secret reference of sasToken in sas uri.
func (o AzureFileStorageLinkedServiceResponseOutput) SasToken() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.SasToken }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureFileStorageLinkedServiceResponseOutput) SasUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) interface{} { return v.SasUri }).(pulumi.AnyOutput)
}

// The azure file share snapshot version. Type: string (or Expression with resultType string).
func (o AzureFileStorageLinkedServiceResponseOutput) Snapshot() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) interface{} { return v.Snapshot }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureFileStorageLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User ID to logon the server. Type: string (or Expression with resultType string).
func (o AzureFileStorageLinkedServiceResponseOutput) UserId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) interface{} { return v.UserId }).(pulumi.AnyOutput)
}

// The location of file server dataset.
type AzureFileStorageLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
}

// AzureFileStorageLocationInput is an input type that accepts AzureFileStorageLocationArgs and AzureFileStorageLocationOutput values.
// You can construct a concrete instance of `AzureFileStorageLocationInput` via:
//
//          AzureFileStorageLocationArgs{...}
type AzureFileStorageLocationInput interface {
	pulumi.Input

	ToAzureFileStorageLocationOutput() AzureFileStorageLocationOutput
	ToAzureFileStorageLocationOutputWithContext(context.Context) AzureFileStorageLocationOutput
}

// The location of file server dataset.
type AzureFileStorageLocationArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureFileStorageLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageLocation)(nil)).Elem()
}

func (i AzureFileStorageLocationArgs) ToAzureFileStorageLocationOutput() AzureFileStorageLocationOutput {
	return i.ToAzureFileStorageLocationOutputWithContext(context.Background())
}

func (i AzureFileStorageLocationArgs) ToAzureFileStorageLocationOutputWithContext(ctx context.Context) AzureFileStorageLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileStorageLocationOutput)
}

// The location of file server dataset.
type AzureFileStorageLocationOutput struct{ *pulumi.OutputState }

func (AzureFileStorageLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageLocation)(nil)).Elem()
}

func (o AzureFileStorageLocationOutput) ToAzureFileStorageLocationOutput() AzureFileStorageLocationOutput {
	return o
}

func (o AzureFileStorageLocationOutput) ToAzureFileStorageLocationOutputWithContext(ctx context.Context) AzureFileStorageLocationOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AzureFileStorageLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AzureFileStorageLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o AzureFileStorageLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileStorageLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The location of file server dataset.
type AzureFileStorageLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
}

// AzureFileStorageLocationResponseInput is an input type that accepts AzureFileStorageLocationResponseArgs and AzureFileStorageLocationResponseOutput values.
// You can construct a concrete instance of `AzureFileStorageLocationResponseInput` via:
//
//          AzureFileStorageLocationResponseArgs{...}
type AzureFileStorageLocationResponseInput interface {
	pulumi.Input

	ToAzureFileStorageLocationResponseOutput() AzureFileStorageLocationResponseOutput
	ToAzureFileStorageLocationResponseOutputWithContext(context.Context) AzureFileStorageLocationResponseOutput
}

// The location of file server dataset.
type AzureFileStorageLocationResponseArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureFileStorageLocationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageLocationResponse)(nil)).Elem()
}

func (i AzureFileStorageLocationResponseArgs) ToAzureFileStorageLocationResponseOutput() AzureFileStorageLocationResponseOutput {
	return i.ToAzureFileStorageLocationResponseOutputWithContext(context.Background())
}

func (i AzureFileStorageLocationResponseArgs) ToAzureFileStorageLocationResponseOutputWithContext(ctx context.Context) AzureFileStorageLocationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileStorageLocationResponseOutput)
}

// The location of file server dataset.
type AzureFileStorageLocationResponseOutput struct{ *pulumi.OutputState }

func (AzureFileStorageLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageLocationResponse)(nil)).Elem()
}

func (o AzureFileStorageLocationResponseOutput) ToAzureFileStorageLocationResponseOutput() AzureFileStorageLocationResponseOutput {
	return o
}

func (o AzureFileStorageLocationResponseOutput) ToAzureFileStorageLocationResponseOutputWithContext(ctx context.Context) AzureFileStorageLocationResponseOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AzureFileStorageLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AzureFileStorageLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o AzureFileStorageLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileStorageLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Function linked service.
type AzureFunctionLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Azure Function App. URL will be in the format https://<accountName>.azurewebsites.net.
	FunctionAppUrl interface{} `pulumi:"functionAppUrl"`
	// Function or Host key for Azure Function App.
	FunctionKey interface{} `pulumi:"functionKey"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureFunctionLinkedServiceInput is an input type that accepts AzureFunctionLinkedServiceArgs and AzureFunctionLinkedServiceOutput values.
// You can construct a concrete instance of `AzureFunctionLinkedServiceInput` via:
//
//          AzureFunctionLinkedServiceArgs{...}
type AzureFunctionLinkedServiceInput interface {
	pulumi.Input

	ToAzureFunctionLinkedServiceOutput() AzureFunctionLinkedServiceOutput
	ToAzureFunctionLinkedServiceOutputWithContext(context.Context) AzureFunctionLinkedServiceOutput
}

// Azure Function linked service.
type AzureFunctionLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the Azure Function App. URL will be in the format https://<accountName>.azurewebsites.net.
	FunctionAppUrl pulumi.Input `pulumi:"functionAppUrl"`
	// Function or Host key for Azure Function App.
	FunctionKey pulumi.Input `pulumi:"functionKey"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureFunctionLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionLinkedService)(nil)).Elem()
}

func (i AzureFunctionLinkedServiceArgs) ToAzureFunctionLinkedServiceOutput() AzureFunctionLinkedServiceOutput {
	return i.ToAzureFunctionLinkedServiceOutputWithContext(context.Background())
}

func (i AzureFunctionLinkedServiceArgs) ToAzureFunctionLinkedServiceOutputWithContext(ctx context.Context) AzureFunctionLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionLinkedServiceOutput)
}

// Azure Function linked service.
type AzureFunctionLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureFunctionLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionLinkedService)(nil)).Elem()
}

func (o AzureFunctionLinkedServiceOutput) ToAzureFunctionLinkedServiceOutput() AzureFunctionLinkedServiceOutput {
	return o
}

func (o AzureFunctionLinkedServiceOutput) ToAzureFunctionLinkedServiceOutputWithContext(ctx context.Context) AzureFunctionLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureFunctionLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureFunctionLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureFunctionLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureFunctionLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AzureFunctionLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureFunctionLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFunctionLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the Azure Function App. URL will be in the format https://<accountName>.azurewebsites.net.
func (o AzureFunctionLinkedServiceOutput) FunctionAppUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFunctionLinkedService) interface{} { return v.FunctionAppUrl }).(pulumi.AnyOutput)
}

// Function or Host key for Azure Function App.
func (o AzureFunctionLinkedServiceOutput) FunctionKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFunctionLinkedService) interface{} { return v.FunctionKey }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureFunctionLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureFunctionLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o AzureFunctionLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Function linked service.
type AzureFunctionLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Azure Function App. URL will be in the format https://<accountName>.azurewebsites.net.
	FunctionAppUrl interface{} `pulumi:"functionAppUrl"`
	// Function or Host key for Azure Function App.
	FunctionKey interface{} `pulumi:"functionKey"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureFunctionLinkedServiceResponseInput is an input type that accepts AzureFunctionLinkedServiceResponseArgs and AzureFunctionLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureFunctionLinkedServiceResponseInput` via:
//
//          AzureFunctionLinkedServiceResponseArgs{...}
type AzureFunctionLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureFunctionLinkedServiceResponseOutput() AzureFunctionLinkedServiceResponseOutput
	ToAzureFunctionLinkedServiceResponseOutputWithContext(context.Context) AzureFunctionLinkedServiceResponseOutput
}

// Azure Function linked service.
type AzureFunctionLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the Azure Function App. URL will be in the format https://<accountName>.azurewebsites.net.
	FunctionAppUrl pulumi.Input `pulumi:"functionAppUrl"`
	// Function or Host key for Azure Function App.
	FunctionKey pulumi.Input `pulumi:"functionKey"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureFunctionLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionLinkedServiceResponse)(nil)).Elem()
}

func (i AzureFunctionLinkedServiceResponseArgs) ToAzureFunctionLinkedServiceResponseOutput() AzureFunctionLinkedServiceResponseOutput {
	return i.ToAzureFunctionLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureFunctionLinkedServiceResponseArgs) ToAzureFunctionLinkedServiceResponseOutputWithContext(ctx context.Context) AzureFunctionLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionLinkedServiceResponseOutput)
}

// Azure Function linked service.
type AzureFunctionLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureFunctionLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionLinkedServiceResponse)(nil)).Elem()
}

func (o AzureFunctionLinkedServiceResponseOutput) ToAzureFunctionLinkedServiceResponseOutput() AzureFunctionLinkedServiceResponseOutput {
	return o
}

func (o AzureFunctionLinkedServiceResponseOutput) ToAzureFunctionLinkedServiceResponseOutputWithContext(ctx context.Context) AzureFunctionLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureFunctionLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureFunctionLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureFunctionLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureFunctionLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureFunctionLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureFunctionLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFunctionLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the Azure Function App. URL will be in the format https://<accountName>.azurewebsites.net.
func (o AzureFunctionLinkedServiceResponseOutput) FunctionAppUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFunctionLinkedServiceResponse) interface{} { return v.FunctionAppUrl }).(pulumi.AnyOutput)
}

// Function or Host key for Azure Function App.
func (o AzureFunctionLinkedServiceResponseOutput) FunctionKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFunctionLinkedServiceResponse) interface{} { return v.FunctionKey }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureFunctionLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureFunctionLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o AzureFunctionLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Key Vault linked service.
type AzureKeyVaultLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
	BaseUrl interface{} `pulumi:"baseUrl"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureKeyVaultLinkedServiceInput is an input type that accepts AzureKeyVaultLinkedServiceArgs and AzureKeyVaultLinkedServiceOutput values.
// You can construct a concrete instance of `AzureKeyVaultLinkedServiceInput` via:
//
//          AzureKeyVaultLinkedServiceArgs{...}
type AzureKeyVaultLinkedServiceInput interface {
	pulumi.Input

	ToAzureKeyVaultLinkedServiceOutput() AzureKeyVaultLinkedServiceOutput
	ToAzureKeyVaultLinkedServiceOutputWithContext(context.Context) AzureKeyVaultLinkedServiceOutput
}

// Azure Key Vault linked service.
type AzureKeyVaultLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
	BaseUrl pulumi.Input `pulumi:"baseUrl"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureKeyVaultLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultLinkedService)(nil)).Elem()
}

func (i AzureKeyVaultLinkedServiceArgs) ToAzureKeyVaultLinkedServiceOutput() AzureKeyVaultLinkedServiceOutput {
	return i.ToAzureKeyVaultLinkedServiceOutputWithContext(context.Background())
}

func (i AzureKeyVaultLinkedServiceArgs) ToAzureKeyVaultLinkedServiceOutputWithContext(ctx context.Context) AzureKeyVaultLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultLinkedServiceOutput)
}

// Azure Key Vault linked service.
type AzureKeyVaultLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultLinkedService)(nil)).Elem()
}

func (o AzureKeyVaultLinkedServiceOutput) ToAzureKeyVaultLinkedServiceOutput() AzureKeyVaultLinkedServiceOutput {
	return o
}

func (o AzureKeyVaultLinkedServiceOutput) ToAzureKeyVaultLinkedServiceOutputWithContext(ctx context.Context) AzureKeyVaultLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureKeyVaultLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
func (o AzureKeyVaultLinkedServiceOutput) BaseUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedService) interface{} { return v.BaseUrl }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureKeyVaultLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AzureKeyVaultLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureKeyVaultLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o AzureKeyVaultLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Key Vault linked service.
type AzureKeyVaultLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
	BaseUrl interface{} `pulumi:"baseUrl"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureKeyVaultLinkedServiceResponseInput is an input type that accepts AzureKeyVaultLinkedServiceResponseArgs and AzureKeyVaultLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureKeyVaultLinkedServiceResponseInput` via:
//
//          AzureKeyVaultLinkedServiceResponseArgs{...}
type AzureKeyVaultLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureKeyVaultLinkedServiceResponseOutput() AzureKeyVaultLinkedServiceResponseOutput
	ToAzureKeyVaultLinkedServiceResponseOutputWithContext(context.Context) AzureKeyVaultLinkedServiceResponseOutput
}

// Azure Key Vault linked service.
type AzureKeyVaultLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
	BaseUrl pulumi.Input `pulumi:"baseUrl"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureKeyVaultLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultLinkedServiceResponse)(nil)).Elem()
}

func (i AzureKeyVaultLinkedServiceResponseArgs) ToAzureKeyVaultLinkedServiceResponseOutput() AzureKeyVaultLinkedServiceResponseOutput {
	return i.ToAzureKeyVaultLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureKeyVaultLinkedServiceResponseArgs) ToAzureKeyVaultLinkedServiceResponseOutputWithContext(ctx context.Context) AzureKeyVaultLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultLinkedServiceResponseOutput)
}

// Azure Key Vault linked service.
type AzureKeyVaultLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultLinkedServiceResponse)(nil)).Elem()
}

func (o AzureKeyVaultLinkedServiceResponseOutput) ToAzureKeyVaultLinkedServiceResponseOutput() AzureKeyVaultLinkedServiceResponseOutput {
	return o
}

func (o AzureKeyVaultLinkedServiceResponseOutput) ToAzureKeyVaultLinkedServiceResponseOutputWithContext(ctx context.Context) AzureKeyVaultLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureKeyVaultLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
func (o AzureKeyVaultLinkedServiceResponseOutput) BaseUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedServiceResponse) interface{} { return v.BaseUrl }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureKeyVaultLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureKeyVaultLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureKeyVaultLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o AzureKeyVaultLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Key Vault secret reference.
type AzureKeyVaultSecretReference struct {
	// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
	SecretName interface{} `pulumi:"secretName"`
	// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
	SecretVersion interface{} `pulumi:"secretVersion"`
	// The Azure Key Vault linked service reference.
	Store LinkedServiceReference `pulumi:"store"`
	// Type of the secret.
	Type string `pulumi:"type"`
}

// AzureKeyVaultSecretReferenceInput is an input type that accepts AzureKeyVaultSecretReferenceArgs and AzureKeyVaultSecretReferenceOutput values.
// You can construct a concrete instance of `AzureKeyVaultSecretReferenceInput` via:
//
//          AzureKeyVaultSecretReferenceArgs{...}
type AzureKeyVaultSecretReferenceInput interface {
	pulumi.Input

	ToAzureKeyVaultSecretReferenceOutput() AzureKeyVaultSecretReferenceOutput
	ToAzureKeyVaultSecretReferenceOutputWithContext(context.Context) AzureKeyVaultSecretReferenceOutput
}

// Azure Key Vault secret reference.
type AzureKeyVaultSecretReferenceArgs struct {
	// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
	SecretName pulumi.Input `pulumi:"secretName"`
	// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
	SecretVersion pulumi.Input `pulumi:"secretVersion"`
	// The Azure Key Vault linked service reference.
	Store LinkedServiceReferenceInput `pulumi:"store"`
	// Type of the secret.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureKeyVaultSecretReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultSecretReference)(nil)).Elem()
}

func (i AzureKeyVaultSecretReferenceArgs) ToAzureKeyVaultSecretReferenceOutput() AzureKeyVaultSecretReferenceOutput {
	return i.ToAzureKeyVaultSecretReferenceOutputWithContext(context.Background())
}

func (i AzureKeyVaultSecretReferenceArgs) ToAzureKeyVaultSecretReferenceOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultSecretReferenceOutput)
}

func (i AzureKeyVaultSecretReferenceArgs) ToAzureKeyVaultSecretReferencePtrOutput() AzureKeyVaultSecretReferencePtrOutput {
	return i.ToAzureKeyVaultSecretReferencePtrOutputWithContext(context.Background())
}

func (i AzureKeyVaultSecretReferenceArgs) ToAzureKeyVaultSecretReferencePtrOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultSecretReferenceOutput).ToAzureKeyVaultSecretReferencePtrOutputWithContext(ctx)
}

// AzureKeyVaultSecretReferencePtrInput is an input type that accepts AzureKeyVaultSecretReferenceArgs, AzureKeyVaultSecretReferencePtr and AzureKeyVaultSecretReferencePtrOutput values.
// You can construct a concrete instance of `AzureKeyVaultSecretReferencePtrInput` via:
//
//          AzureKeyVaultSecretReferenceArgs{...}
//
//  or:
//
//          nil
type AzureKeyVaultSecretReferencePtrInput interface {
	pulumi.Input

	ToAzureKeyVaultSecretReferencePtrOutput() AzureKeyVaultSecretReferencePtrOutput
	ToAzureKeyVaultSecretReferencePtrOutputWithContext(context.Context) AzureKeyVaultSecretReferencePtrOutput
}

type azureKeyVaultSecretReferencePtrType AzureKeyVaultSecretReferenceArgs

func AzureKeyVaultSecretReferencePtr(v *AzureKeyVaultSecretReferenceArgs) AzureKeyVaultSecretReferencePtrInput {
	return (*azureKeyVaultSecretReferencePtrType)(v)
}

func (*azureKeyVaultSecretReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureKeyVaultSecretReference)(nil)).Elem()
}

func (i *azureKeyVaultSecretReferencePtrType) ToAzureKeyVaultSecretReferencePtrOutput() AzureKeyVaultSecretReferencePtrOutput {
	return i.ToAzureKeyVaultSecretReferencePtrOutputWithContext(context.Background())
}

func (i *azureKeyVaultSecretReferencePtrType) ToAzureKeyVaultSecretReferencePtrOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultSecretReferencePtrOutput)
}

// Azure Key Vault secret reference.
type AzureKeyVaultSecretReferenceOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultSecretReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultSecretReference)(nil)).Elem()
}

func (o AzureKeyVaultSecretReferenceOutput) ToAzureKeyVaultSecretReferenceOutput() AzureKeyVaultSecretReferenceOutput {
	return o
}

func (o AzureKeyVaultSecretReferenceOutput) ToAzureKeyVaultSecretReferenceOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferenceOutput {
	return o
}

func (o AzureKeyVaultSecretReferenceOutput) ToAzureKeyVaultSecretReferencePtrOutput() AzureKeyVaultSecretReferencePtrOutput {
	return o.ToAzureKeyVaultSecretReferencePtrOutputWithContext(context.Background())
}

func (o AzureKeyVaultSecretReferenceOutput) ToAzureKeyVaultSecretReferencePtrOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReference) *AzureKeyVaultSecretReference {
		return &v
	}).(AzureKeyVaultSecretReferencePtrOutput)
}

// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
func (o AzureKeyVaultSecretReferenceOutput) SecretName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReference) interface{} { return v.SecretName }).(pulumi.AnyOutput)
}

// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
func (o AzureKeyVaultSecretReferenceOutput) SecretVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReference) interface{} { return v.SecretVersion }).(pulumi.AnyOutput)
}

// The Azure Key Vault linked service reference.
func (o AzureKeyVaultSecretReferenceOutput) Store() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReference) LinkedServiceReference { return v.Store }).(LinkedServiceReferenceOutput)
}

// Type of the secret.
func (o AzureKeyVaultSecretReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReference) string { return v.Type }).(pulumi.StringOutput)
}

type AzureKeyVaultSecretReferencePtrOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultSecretReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureKeyVaultSecretReference)(nil)).Elem()
}

func (o AzureKeyVaultSecretReferencePtrOutput) ToAzureKeyVaultSecretReferencePtrOutput() AzureKeyVaultSecretReferencePtrOutput {
	return o
}

func (o AzureKeyVaultSecretReferencePtrOutput) ToAzureKeyVaultSecretReferencePtrOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferencePtrOutput {
	return o
}

func (o AzureKeyVaultSecretReferencePtrOutput) Elem() AzureKeyVaultSecretReferenceOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReference) AzureKeyVaultSecretReference { return *v }).(AzureKeyVaultSecretReferenceOutput)
}

// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
func (o AzureKeyVaultSecretReferencePtrOutput) SecretName() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReference) interface{} {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.AnyOutput)
}

// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
func (o AzureKeyVaultSecretReferencePtrOutput) SecretVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReference) interface{} {
		if v == nil {
			return nil
		}
		return v.SecretVersion
	}).(pulumi.AnyOutput)
}

// The Azure Key Vault linked service reference.
func (o AzureKeyVaultSecretReferencePtrOutput) Store() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReference) *LinkedServiceReference {
		if v == nil {
			return nil
		}
		return &v.Store
	}).(LinkedServiceReferencePtrOutput)
}

// Type of the secret.
func (o AzureKeyVaultSecretReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure Key Vault secret reference.
type AzureKeyVaultSecretReferenceResponse struct {
	// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
	SecretName interface{} `pulumi:"secretName"`
	// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
	SecretVersion interface{} `pulumi:"secretVersion"`
	// The Azure Key Vault linked service reference.
	Store LinkedServiceReferenceResponse `pulumi:"store"`
	// Type of the secret.
	Type string `pulumi:"type"`
}

// AzureKeyVaultSecretReferenceResponseInput is an input type that accepts AzureKeyVaultSecretReferenceResponseArgs and AzureKeyVaultSecretReferenceResponseOutput values.
// You can construct a concrete instance of `AzureKeyVaultSecretReferenceResponseInput` via:
//
//          AzureKeyVaultSecretReferenceResponseArgs{...}
type AzureKeyVaultSecretReferenceResponseInput interface {
	pulumi.Input

	ToAzureKeyVaultSecretReferenceResponseOutput() AzureKeyVaultSecretReferenceResponseOutput
	ToAzureKeyVaultSecretReferenceResponseOutputWithContext(context.Context) AzureKeyVaultSecretReferenceResponseOutput
}

// Azure Key Vault secret reference.
type AzureKeyVaultSecretReferenceResponseArgs struct {
	// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
	SecretName pulumi.Input `pulumi:"secretName"`
	// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
	SecretVersion pulumi.Input `pulumi:"secretVersion"`
	// The Azure Key Vault linked service reference.
	Store LinkedServiceReferenceResponseInput `pulumi:"store"`
	// Type of the secret.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureKeyVaultSecretReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultSecretReferenceResponse)(nil)).Elem()
}

func (i AzureKeyVaultSecretReferenceResponseArgs) ToAzureKeyVaultSecretReferenceResponseOutput() AzureKeyVaultSecretReferenceResponseOutput {
	return i.ToAzureKeyVaultSecretReferenceResponseOutputWithContext(context.Background())
}

func (i AzureKeyVaultSecretReferenceResponseArgs) ToAzureKeyVaultSecretReferenceResponseOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultSecretReferenceResponseOutput)
}

func (i AzureKeyVaultSecretReferenceResponseArgs) ToAzureKeyVaultSecretReferenceResponsePtrOutput() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return i.ToAzureKeyVaultSecretReferenceResponsePtrOutputWithContext(context.Background())
}

func (i AzureKeyVaultSecretReferenceResponseArgs) ToAzureKeyVaultSecretReferenceResponsePtrOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultSecretReferenceResponseOutput).ToAzureKeyVaultSecretReferenceResponsePtrOutputWithContext(ctx)
}

// AzureKeyVaultSecretReferenceResponsePtrInput is an input type that accepts AzureKeyVaultSecretReferenceResponseArgs, AzureKeyVaultSecretReferenceResponsePtr and AzureKeyVaultSecretReferenceResponsePtrOutput values.
// You can construct a concrete instance of `AzureKeyVaultSecretReferenceResponsePtrInput` via:
//
//          AzureKeyVaultSecretReferenceResponseArgs{...}
//
//  or:
//
//          nil
type AzureKeyVaultSecretReferenceResponsePtrInput interface {
	pulumi.Input

	ToAzureKeyVaultSecretReferenceResponsePtrOutput() AzureKeyVaultSecretReferenceResponsePtrOutput
	ToAzureKeyVaultSecretReferenceResponsePtrOutputWithContext(context.Context) AzureKeyVaultSecretReferenceResponsePtrOutput
}

type azureKeyVaultSecretReferenceResponsePtrType AzureKeyVaultSecretReferenceResponseArgs

func AzureKeyVaultSecretReferenceResponsePtr(v *AzureKeyVaultSecretReferenceResponseArgs) AzureKeyVaultSecretReferenceResponsePtrInput {
	return (*azureKeyVaultSecretReferenceResponsePtrType)(v)
}

func (*azureKeyVaultSecretReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureKeyVaultSecretReferenceResponse)(nil)).Elem()
}

func (i *azureKeyVaultSecretReferenceResponsePtrType) ToAzureKeyVaultSecretReferenceResponsePtrOutput() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return i.ToAzureKeyVaultSecretReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *azureKeyVaultSecretReferenceResponsePtrType) ToAzureKeyVaultSecretReferenceResponsePtrOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Azure Key Vault secret reference.
type AzureKeyVaultSecretReferenceResponseOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultSecretReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultSecretReferenceResponse)(nil)).Elem()
}

func (o AzureKeyVaultSecretReferenceResponseOutput) ToAzureKeyVaultSecretReferenceResponseOutput() AzureKeyVaultSecretReferenceResponseOutput {
	return o
}

func (o AzureKeyVaultSecretReferenceResponseOutput) ToAzureKeyVaultSecretReferenceResponseOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferenceResponseOutput {
	return o
}

func (o AzureKeyVaultSecretReferenceResponseOutput) ToAzureKeyVaultSecretReferenceResponsePtrOutput() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ToAzureKeyVaultSecretReferenceResponsePtrOutputWithContext(context.Background())
}

func (o AzureKeyVaultSecretReferenceResponseOutput) ToAzureKeyVaultSecretReferenceResponsePtrOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReferenceResponse) *AzureKeyVaultSecretReferenceResponse {
		return &v
	}).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
func (o AzureKeyVaultSecretReferenceResponseOutput) SecretName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReferenceResponse) interface{} { return v.SecretName }).(pulumi.AnyOutput)
}

// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
func (o AzureKeyVaultSecretReferenceResponseOutput) SecretVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReferenceResponse) interface{} { return v.SecretVersion }).(pulumi.AnyOutput)
}

// The Azure Key Vault linked service reference.
func (o AzureKeyVaultSecretReferenceResponseOutput) Store() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReferenceResponse) LinkedServiceReferenceResponse { return v.Store }).(LinkedServiceReferenceResponseOutput)
}

// Type of the secret.
func (o AzureKeyVaultSecretReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AzureKeyVaultSecretReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultSecretReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureKeyVaultSecretReferenceResponse)(nil)).Elem()
}

func (o AzureKeyVaultSecretReferenceResponsePtrOutput) ToAzureKeyVaultSecretReferenceResponsePtrOutput() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o
}

func (o AzureKeyVaultSecretReferenceResponsePtrOutput) ToAzureKeyVaultSecretReferenceResponsePtrOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o
}

func (o AzureKeyVaultSecretReferenceResponsePtrOutput) Elem() AzureKeyVaultSecretReferenceResponseOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReferenceResponse) AzureKeyVaultSecretReferenceResponse { return *v }).(AzureKeyVaultSecretReferenceResponseOutput)
}

// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
func (o AzureKeyVaultSecretReferenceResponsePtrOutput) SecretName() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReferenceResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.AnyOutput)
}

// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
func (o AzureKeyVaultSecretReferenceResponsePtrOutput) SecretVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReferenceResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.SecretVersion
	}).(pulumi.AnyOutput)
}

// The Azure Key Vault linked service reference.
func (o AzureKeyVaultSecretReferenceResponsePtrOutput) Store() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReferenceResponse) *LinkedServiceReferenceResponse {
		if v == nil {
			return nil
		}
		return &v.Store
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Type of the secret.
func (o AzureKeyVaultSecretReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure ML Studio Web Service linked service.
type AzureMLLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The API key for accessing the Azure ML model endpoint.
	ApiKey interface{} `pulumi:"apiKey"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	MlEndpoint interface{} `pulumi:"mlEndpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	UpdateResourceEndpoint interface{} `pulumi:"updateResourceEndpoint"`
}

// AzureMLLinkedServiceInput is an input type that accepts AzureMLLinkedServiceArgs and AzureMLLinkedServiceOutput values.
// You can construct a concrete instance of `AzureMLLinkedServiceInput` via:
//
//          AzureMLLinkedServiceArgs{...}
type AzureMLLinkedServiceInput interface {
	pulumi.Input

	ToAzureMLLinkedServiceOutput() AzureMLLinkedServiceOutput
	ToAzureMLLinkedServiceOutputWithContext(context.Context) AzureMLLinkedServiceOutput
}

// Azure ML Studio Web Service linked service.
type AzureMLLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The API key for accessing the Azure ML model endpoint.
	ApiKey pulumi.Input `pulumi:"apiKey"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	MlEndpoint pulumi.Input `pulumi:"mlEndpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	UpdateResourceEndpoint pulumi.Input `pulumi:"updateResourceEndpoint"`
}

func (AzureMLLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLLinkedService)(nil)).Elem()
}

func (i AzureMLLinkedServiceArgs) ToAzureMLLinkedServiceOutput() AzureMLLinkedServiceOutput {
	return i.ToAzureMLLinkedServiceOutputWithContext(context.Background())
}

func (i AzureMLLinkedServiceArgs) ToAzureMLLinkedServiceOutputWithContext(ctx context.Context) AzureMLLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMLLinkedServiceOutput)
}

// Azure ML Studio Web Service linked service.
type AzureMLLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureMLLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLLinkedService)(nil)).Elem()
}

func (o AzureMLLinkedServiceOutput) ToAzureMLLinkedServiceOutput() AzureMLLinkedServiceOutput {
	return o
}

func (o AzureMLLinkedServiceOutput) ToAzureMLLinkedServiceOutputWithContext(ctx context.Context) AzureMLLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureMLLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMLLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The API key for accessing the Azure ML model endpoint.
func (o AzureMLLinkedServiceOutput) ApiKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedService) interface{} { return v.ApiKey }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureMLLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureMLLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AzureMLLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceOutput) MlEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedService) interface{} { return v.MlEndpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureMLLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureMLLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service.
func (o AzureMLLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureMLLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceOutput) UpdateResourceEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedService) interface{} { return v.UpdateResourceEndpoint }).(pulumi.AnyOutput)
}

// Azure ML Studio Web Service linked service.
type AzureMLLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The API key for accessing the Azure ML model endpoint.
	ApiKey interface{} `pulumi:"apiKey"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	MlEndpoint interface{} `pulumi:"mlEndpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	UpdateResourceEndpoint interface{} `pulumi:"updateResourceEndpoint"`
}

// AzureMLLinkedServiceResponseInput is an input type that accepts AzureMLLinkedServiceResponseArgs and AzureMLLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureMLLinkedServiceResponseInput` via:
//
//          AzureMLLinkedServiceResponseArgs{...}
type AzureMLLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureMLLinkedServiceResponseOutput() AzureMLLinkedServiceResponseOutput
	ToAzureMLLinkedServiceResponseOutputWithContext(context.Context) AzureMLLinkedServiceResponseOutput
}

// Azure ML Studio Web Service linked service.
type AzureMLLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The API key for accessing the Azure ML model endpoint.
	ApiKey pulumi.Input `pulumi:"apiKey"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	MlEndpoint pulumi.Input `pulumi:"mlEndpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	UpdateResourceEndpoint pulumi.Input `pulumi:"updateResourceEndpoint"`
}

func (AzureMLLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLLinkedServiceResponse)(nil)).Elem()
}

func (i AzureMLLinkedServiceResponseArgs) ToAzureMLLinkedServiceResponseOutput() AzureMLLinkedServiceResponseOutput {
	return i.ToAzureMLLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureMLLinkedServiceResponseArgs) ToAzureMLLinkedServiceResponseOutputWithContext(ctx context.Context) AzureMLLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMLLinkedServiceResponseOutput)
}

// Azure ML Studio Web Service linked service.
type AzureMLLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureMLLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLLinkedServiceResponse)(nil)).Elem()
}

func (o AzureMLLinkedServiceResponseOutput) ToAzureMLLinkedServiceResponseOutput() AzureMLLinkedServiceResponseOutput {
	return o
}

func (o AzureMLLinkedServiceResponseOutput) ToAzureMLLinkedServiceResponseOutputWithContext(ctx context.Context) AzureMLLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureMLLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The API key for accessing the Azure ML model endpoint.
func (o AzureMLLinkedServiceResponseOutput) ApiKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) interface{} { return v.ApiKey }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureMLLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureMLLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceResponseOutput) MlEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) interface{} { return v.MlEndpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureMLLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service.
func (o AzureMLLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureMLLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceResponseOutput) UpdateResourceEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) interface{} { return v.UpdateResourceEndpoint }).(pulumi.AnyOutput)
}

// Azure ML Service linked service.
type AzureMLServiceLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Azure ML Service workspace name. Type: string (or Expression with resultType string).
	MlWorkspaceName interface{} `pulumi:"mlWorkspaceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Azure ML Service workspace resource group name. Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureMLServiceLinkedServiceInput is an input type that accepts AzureMLServiceLinkedServiceArgs and AzureMLServiceLinkedServiceOutput values.
// You can construct a concrete instance of `AzureMLServiceLinkedServiceInput` via:
//
//          AzureMLServiceLinkedServiceArgs{...}
type AzureMLServiceLinkedServiceInput interface {
	pulumi.Input

	ToAzureMLServiceLinkedServiceOutput() AzureMLServiceLinkedServiceOutput
	ToAzureMLServiceLinkedServiceOutputWithContext(context.Context) AzureMLServiceLinkedServiceOutput
}

// Azure ML Service linked service.
type AzureMLServiceLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Azure ML Service workspace name. Type: string (or Expression with resultType string).
	MlWorkspaceName pulumi.Input `pulumi:"mlWorkspaceName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Azure ML Service workspace resource group name. Type: string (or Expression with resultType string).
	ResourceGroupName pulumi.Input `pulumi:"resourceGroupName"`
	// The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string).
	SubscriptionId pulumi.Input `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMLServiceLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLServiceLinkedService)(nil)).Elem()
}

func (i AzureMLServiceLinkedServiceArgs) ToAzureMLServiceLinkedServiceOutput() AzureMLServiceLinkedServiceOutput {
	return i.ToAzureMLServiceLinkedServiceOutputWithContext(context.Background())
}

func (i AzureMLServiceLinkedServiceArgs) ToAzureMLServiceLinkedServiceOutputWithContext(ctx context.Context) AzureMLServiceLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMLServiceLinkedServiceOutput)
}

// Azure ML Service linked service.
type AzureMLServiceLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureMLServiceLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLServiceLinkedService)(nil)).Elem()
}

func (o AzureMLServiceLinkedServiceOutput) ToAzureMLServiceLinkedServiceOutput() AzureMLServiceLinkedServiceOutput {
	return o
}

func (o AzureMLServiceLinkedServiceOutput) ToAzureMLServiceLinkedServiceOutputWithContext(ctx context.Context) AzureMLServiceLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureMLServiceLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureMLServiceLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AzureMLServiceLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Azure ML Service workspace name. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceOutput) MlWorkspaceName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) interface{} { return v.MlWorkspaceName }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureMLServiceLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Azure ML Service workspace resource group name. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceOutput) ResourceGroupName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) interface{} { return v.ResourceGroupName }).(pulumi.AnyOutput)
}

// The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
func (o AzureMLServiceLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceOutput) SubscriptionId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) interface{} { return v.SubscriptionId }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureMLServiceLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure ML Service linked service.
type AzureMLServiceLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Azure ML Service workspace name. Type: string (or Expression with resultType string).
	MlWorkspaceName interface{} `pulumi:"mlWorkspaceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Azure ML Service workspace resource group name. Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureMLServiceLinkedServiceResponseInput is an input type that accepts AzureMLServiceLinkedServiceResponseArgs and AzureMLServiceLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureMLServiceLinkedServiceResponseInput` via:
//
//          AzureMLServiceLinkedServiceResponseArgs{...}
type AzureMLServiceLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureMLServiceLinkedServiceResponseOutput() AzureMLServiceLinkedServiceResponseOutput
	ToAzureMLServiceLinkedServiceResponseOutputWithContext(context.Context) AzureMLServiceLinkedServiceResponseOutput
}

// Azure ML Service linked service.
type AzureMLServiceLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Azure ML Service workspace name. Type: string (or Expression with resultType string).
	MlWorkspaceName pulumi.Input `pulumi:"mlWorkspaceName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Azure ML Service workspace resource group name. Type: string (or Expression with resultType string).
	ResourceGroupName pulumi.Input `pulumi:"resourceGroupName"`
	// The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string).
	SubscriptionId pulumi.Input `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMLServiceLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLServiceLinkedServiceResponse)(nil)).Elem()
}

func (i AzureMLServiceLinkedServiceResponseArgs) ToAzureMLServiceLinkedServiceResponseOutput() AzureMLServiceLinkedServiceResponseOutput {
	return i.ToAzureMLServiceLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureMLServiceLinkedServiceResponseArgs) ToAzureMLServiceLinkedServiceResponseOutputWithContext(ctx context.Context) AzureMLServiceLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMLServiceLinkedServiceResponseOutput)
}

// Azure ML Service linked service.
type AzureMLServiceLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureMLServiceLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLServiceLinkedServiceResponse)(nil)).Elem()
}

func (o AzureMLServiceLinkedServiceResponseOutput) ToAzureMLServiceLinkedServiceResponseOutput() AzureMLServiceLinkedServiceResponseOutput {
	return o
}

func (o AzureMLServiceLinkedServiceResponseOutput) ToAzureMLServiceLinkedServiceResponseOutputWithContext(ctx context.Context) AzureMLServiceLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureMLServiceLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureMLServiceLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureMLServiceLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Azure ML Service workspace name. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceResponseOutput) MlWorkspaceName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) interface{} { return v.MlWorkspaceName }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureMLServiceLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Azure ML Service workspace resource group name. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceResponseOutput) ResourceGroupName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) interface{} { return v.ResourceGroupName }).(pulumi.AnyOutput)
}

// The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
func (o AzureMLServiceLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceResponseOutput) SubscriptionId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) interface{} { return v.SubscriptionId }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureMLServiceLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Database for MariaDB linked service.
type AzureMariaDBLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureMariaDBLinkedServiceInput is an input type that accepts AzureMariaDBLinkedServiceArgs and AzureMariaDBLinkedServiceOutput values.
// You can construct a concrete instance of `AzureMariaDBLinkedServiceInput` via:
//
//          AzureMariaDBLinkedServiceArgs{...}
type AzureMariaDBLinkedServiceInput interface {
	pulumi.Input

	ToAzureMariaDBLinkedServiceOutput() AzureMariaDBLinkedServiceOutput
	ToAzureMariaDBLinkedServiceOutputWithContext(context.Context) AzureMariaDBLinkedServiceOutput
}

// Azure Database for MariaDB linked service.
type AzureMariaDBLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd AzureKeyVaultSecretReferencePtrInput `pulumi:"pwd"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMariaDBLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMariaDBLinkedService)(nil)).Elem()
}

func (i AzureMariaDBLinkedServiceArgs) ToAzureMariaDBLinkedServiceOutput() AzureMariaDBLinkedServiceOutput {
	return i.ToAzureMariaDBLinkedServiceOutputWithContext(context.Background())
}

func (i AzureMariaDBLinkedServiceArgs) ToAzureMariaDBLinkedServiceOutputWithContext(ctx context.Context) AzureMariaDBLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMariaDBLinkedServiceOutput)
}

// Azure Database for MariaDB linked service.
type AzureMariaDBLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureMariaDBLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMariaDBLinkedService)(nil)).Elem()
}

func (o AzureMariaDBLinkedServiceOutput) ToAzureMariaDBLinkedServiceOutput() AzureMariaDBLinkedServiceOutput {
	return o
}

func (o AzureMariaDBLinkedServiceOutput) ToAzureMariaDBLinkedServiceOutputWithContext(ctx context.Context) AzureMariaDBLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureMariaDBLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureMariaDBLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureMariaDBLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureMariaDBLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureMariaDBLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureMariaDBLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureMariaDBLinkedServiceOutput) Pwd() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedService) *AzureKeyVaultSecretReference { return v.Pwd }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
func (o AzureMariaDBLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Database for MariaDB linked service.
type AzureMariaDBLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureMariaDBLinkedServiceResponseInput is an input type that accepts AzureMariaDBLinkedServiceResponseArgs and AzureMariaDBLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureMariaDBLinkedServiceResponseInput` via:
//
//          AzureMariaDBLinkedServiceResponseArgs{...}
type AzureMariaDBLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureMariaDBLinkedServiceResponseOutput() AzureMariaDBLinkedServiceResponseOutput
	ToAzureMariaDBLinkedServiceResponseOutputWithContext(context.Context) AzureMariaDBLinkedServiceResponseOutput
}

// Azure Database for MariaDB linked service.
type AzureMariaDBLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"pwd"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMariaDBLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMariaDBLinkedServiceResponse)(nil)).Elem()
}

func (i AzureMariaDBLinkedServiceResponseArgs) ToAzureMariaDBLinkedServiceResponseOutput() AzureMariaDBLinkedServiceResponseOutput {
	return i.ToAzureMariaDBLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureMariaDBLinkedServiceResponseArgs) ToAzureMariaDBLinkedServiceResponseOutputWithContext(ctx context.Context) AzureMariaDBLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMariaDBLinkedServiceResponseOutput)
}

// Azure Database for MariaDB linked service.
type AzureMariaDBLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureMariaDBLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMariaDBLinkedServiceResponse)(nil)).Elem()
}

func (o AzureMariaDBLinkedServiceResponseOutput) ToAzureMariaDBLinkedServiceResponseOutput() AzureMariaDBLinkedServiceResponseOutput {
	return o
}

func (o AzureMariaDBLinkedServiceResponseOutput) ToAzureMariaDBLinkedServiceResponseOutputWithContext(ctx context.Context) AzureMariaDBLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureMariaDBLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureMariaDBLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureMariaDBLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureMariaDBLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureMariaDBLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureMariaDBLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureMariaDBLinkedServiceResponseOutput) Pwd() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Pwd }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
func (o AzureMariaDBLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Database for MariaDB dataset.
type AzureMariaDBTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureMariaDBTableDatasetInput is an input type that accepts AzureMariaDBTableDatasetArgs and AzureMariaDBTableDatasetOutput values.
// You can construct a concrete instance of `AzureMariaDBTableDatasetInput` via:
//
//          AzureMariaDBTableDatasetArgs{...}
type AzureMariaDBTableDatasetInput interface {
	pulumi.Input

	ToAzureMariaDBTableDatasetOutput() AzureMariaDBTableDatasetOutput
	ToAzureMariaDBTableDatasetOutputWithContext(context.Context) AzureMariaDBTableDatasetOutput
}

// Azure Database for MariaDB dataset.
type AzureMariaDBTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMariaDBTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMariaDBTableDataset)(nil)).Elem()
}

func (i AzureMariaDBTableDatasetArgs) ToAzureMariaDBTableDatasetOutput() AzureMariaDBTableDatasetOutput {
	return i.ToAzureMariaDBTableDatasetOutputWithContext(context.Background())
}

func (i AzureMariaDBTableDatasetArgs) ToAzureMariaDBTableDatasetOutputWithContext(ctx context.Context) AzureMariaDBTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMariaDBTableDatasetOutput)
}

// Azure Database for MariaDB dataset.
type AzureMariaDBTableDatasetOutput struct{ *pulumi.OutputState }

func (AzureMariaDBTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMariaDBTableDataset)(nil)).Elem()
}

func (o AzureMariaDBTableDatasetOutput) ToAzureMariaDBTableDatasetOutput() AzureMariaDBTableDatasetOutput {
	return o
}

func (o AzureMariaDBTableDatasetOutput) ToAzureMariaDBTableDatasetOutputWithContext(ctx context.Context) AzureMariaDBTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureMariaDBTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMariaDBTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureMariaDBTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMariaDBTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureMariaDBTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureMariaDBTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AzureMariaDBTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureMariaDBTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureMariaDBTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureMariaDBTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureMariaDBTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureMariaDBTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o AzureMariaDBTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureMariaDBTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMariaDBTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Database for MariaDB dataset.
type AzureMariaDBTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureMariaDBTableDatasetResponseInput is an input type that accepts AzureMariaDBTableDatasetResponseArgs and AzureMariaDBTableDatasetResponseOutput values.
// You can construct a concrete instance of `AzureMariaDBTableDatasetResponseInput` via:
//
//          AzureMariaDBTableDatasetResponseArgs{...}
type AzureMariaDBTableDatasetResponseInput interface {
	pulumi.Input

	ToAzureMariaDBTableDatasetResponseOutput() AzureMariaDBTableDatasetResponseOutput
	ToAzureMariaDBTableDatasetResponseOutputWithContext(context.Context) AzureMariaDBTableDatasetResponseOutput
}

// Azure Database for MariaDB dataset.
type AzureMariaDBTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMariaDBTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMariaDBTableDatasetResponse)(nil)).Elem()
}

func (i AzureMariaDBTableDatasetResponseArgs) ToAzureMariaDBTableDatasetResponseOutput() AzureMariaDBTableDatasetResponseOutput {
	return i.ToAzureMariaDBTableDatasetResponseOutputWithContext(context.Background())
}

func (i AzureMariaDBTableDatasetResponseArgs) ToAzureMariaDBTableDatasetResponseOutputWithContext(ctx context.Context) AzureMariaDBTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMariaDBTableDatasetResponseOutput)
}

// Azure Database for MariaDB dataset.
type AzureMariaDBTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureMariaDBTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMariaDBTableDatasetResponse)(nil)).Elem()
}

func (o AzureMariaDBTableDatasetResponseOutput) ToAzureMariaDBTableDatasetResponseOutput() AzureMariaDBTableDatasetResponseOutput {
	return o
}

func (o AzureMariaDBTableDatasetResponseOutput) ToAzureMariaDBTableDatasetResponseOutputWithContext(ctx context.Context) AzureMariaDBTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureMariaDBTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMariaDBTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureMariaDBTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMariaDBTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureMariaDBTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureMariaDBTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AzureMariaDBTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureMariaDBTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureMariaDBTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureMariaDBTableDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureMariaDBTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureMariaDBTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o AzureMariaDBTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureMariaDBTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMariaDBTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure MySQL database linked service.
type AzureMySqlLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureMySqlLinkedServiceInput is an input type that accepts AzureMySqlLinkedServiceArgs and AzureMySqlLinkedServiceOutput values.
// You can construct a concrete instance of `AzureMySqlLinkedServiceInput` via:
//
//          AzureMySqlLinkedServiceArgs{...}
type AzureMySqlLinkedServiceInput interface {
	pulumi.Input

	ToAzureMySqlLinkedServiceOutput() AzureMySqlLinkedServiceOutput
	ToAzureMySqlLinkedServiceOutputWithContext(context.Context) AzureMySqlLinkedServiceOutput
}

// Azure MySQL database linked service.
type AzureMySqlLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferencePtrInput `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMySqlLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlLinkedService)(nil)).Elem()
}

func (i AzureMySqlLinkedServiceArgs) ToAzureMySqlLinkedServiceOutput() AzureMySqlLinkedServiceOutput {
	return i.ToAzureMySqlLinkedServiceOutputWithContext(context.Background())
}

func (i AzureMySqlLinkedServiceArgs) ToAzureMySqlLinkedServiceOutputWithContext(ctx context.Context) AzureMySqlLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMySqlLinkedServiceOutput)
}

// Azure MySQL database linked service.
type AzureMySqlLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureMySqlLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlLinkedService)(nil)).Elem()
}

func (o AzureMySqlLinkedServiceOutput) ToAzureMySqlLinkedServiceOutput() AzureMySqlLinkedServiceOutput {
	return o
}

func (o AzureMySqlLinkedServiceOutput) ToAzureMySqlLinkedServiceOutputWithContext(ctx context.Context) AzureMySqlLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureMySqlLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMySqlLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureMySqlLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureMySqlLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureMySqlLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureMySqlLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureMySqlLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureMySqlLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureMySqlLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureMySqlLinkedServiceOutput) Password() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureMySqlLinkedService) *AzureKeyVaultSecretReference { return v.Password }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
func (o AzureMySqlLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMySqlLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure MySQL database linked service.
type AzureMySqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureMySqlLinkedServiceResponseInput is an input type that accepts AzureMySqlLinkedServiceResponseArgs and AzureMySqlLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureMySqlLinkedServiceResponseInput` via:
//
//          AzureMySqlLinkedServiceResponseArgs{...}
type AzureMySqlLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureMySqlLinkedServiceResponseOutput() AzureMySqlLinkedServiceResponseOutput
	ToAzureMySqlLinkedServiceResponseOutputWithContext(context.Context) AzureMySqlLinkedServiceResponseOutput
}

// Azure MySQL database linked service.
type AzureMySqlLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMySqlLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlLinkedServiceResponse)(nil)).Elem()
}

func (i AzureMySqlLinkedServiceResponseArgs) ToAzureMySqlLinkedServiceResponseOutput() AzureMySqlLinkedServiceResponseOutput {
	return i.ToAzureMySqlLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureMySqlLinkedServiceResponseArgs) ToAzureMySqlLinkedServiceResponseOutputWithContext(ctx context.Context) AzureMySqlLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMySqlLinkedServiceResponseOutput)
}

// Azure MySQL database linked service.
type AzureMySqlLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureMySqlLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlLinkedServiceResponse)(nil)).Elem()
}

func (o AzureMySqlLinkedServiceResponseOutput) ToAzureMySqlLinkedServiceResponseOutput() AzureMySqlLinkedServiceResponseOutput {
	return o
}

func (o AzureMySqlLinkedServiceResponseOutput) ToAzureMySqlLinkedServiceResponseOutputWithContext(ctx context.Context) AzureMySqlLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureMySqlLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureMySqlLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureMySqlLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureMySqlLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureMySqlLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureMySqlLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureMySqlLinkedServiceResponseOutput) Password() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Password }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
func (o AzureMySqlLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure MySQL database dataset.
type AzureMySqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of Azure MySQL database table. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// The Azure MySQL database table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureMySqlTableDatasetInput is an input type that accepts AzureMySqlTableDatasetArgs and AzureMySqlTableDatasetOutput values.
// You can construct a concrete instance of `AzureMySqlTableDatasetInput` via:
//
//          AzureMySqlTableDatasetArgs{...}
type AzureMySqlTableDatasetInput interface {
	pulumi.Input

	ToAzureMySqlTableDatasetOutput() AzureMySqlTableDatasetOutput
	ToAzureMySqlTableDatasetOutputWithContext(context.Context) AzureMySqlTableDatasetOutput
}

// The Azure MySQL database dataset.
type AzureMySqlTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The name of Azure MySQL database table. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// The Azure MySQL database table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMySqlTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlTableDataset)(nil)).Elem()
}

func (i AzureMySqlTableDatasetArgs) ToAzureMySqlTableDatasetOutput() AzureMySqlTableDatasetOutput {
	return i.ToAzureMySqlTableDatasetOutputWithContext(context.Background())
}

func (i AzureMySqlTableDatasetArgs) ToAzureMySqlTableDatasetOutputWithContext(ctx context.Context) AzureMySqlTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMySqlTableDatasetOutput)
}

// The Azure MySQL database dataset.
type AzureMySqlTableDatasetOutput struct{ *pulumi.OutputState }

func (AzureMySqlTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlTableDataset)(nil)).Elem()
}

func (o AzureMySqlTableDatasetOutput) ToAzureMySqlTableDatasetOutput() AzureMySqlTableDatasetOutput {
	return o
}

func (o AzureMySqlTableDatasetOutput) ToAzureMySqlTableDatasetOutputWithContext(ctx context.Context) AzureMySqlTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureMySqlTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureMySqlTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureMySqlTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AzureMySqlTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureMySqlTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureMySqlTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureMySqlTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The name of Azure MySQL database table. Type: string (or Expression with resultType string).
func (o AzureMySqlTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// The Azure MySQL database table name. Type: string (or Expression with resultType string).
func (o AzureMySqlTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureMySqlTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure MySQL database dataset.
type AzureMySqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of Azure MySQL database table. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// The Azure MySQL database table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureMySqlTableDatasetResponseInput is an input type that accepts AzureMySqlTableDatasetResponseArgs and AzureMySqlTableDatasetResponseOutput values.
// You can construct a concrete instance of `AzureMySqlTableDatasetResponseInput` via:
//
//          AzureMySqlTableDatasetResponseArgs{...}
type AzureMySqlTableDatasetResponseInput interface {
	pulumi.Input

	ToAzureMySqlTableDatasetResponseOutput() AzureMySqlTableDatasetResponseOutput
	ToAzureMySqlTableDatasetResponseOutputWithContext(context.Context) AzureMySqlTableDatasetResponseOutput
}

// The Azure MySQL database dataset.
type AzureMySqlTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The name of Azure MySQL database table. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// The Azure MySQL database table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMySqlTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlTableDatasetResponse)(nil)).Elem()
}

func (i AzureMySqlTableDatasetResponseArgs) ToAzureMySqlTableDatasetResponseOutput() AzureMySqlTableDatasetResponseOutput {
	return i.ToAzureMySqlTableDatasetResponseOutputWithContext(context.Background())
}

func (i AzureMySqlTableDatasetResponseArgs) ToAzureMySqlTableDatasetResponseOutputWithContext(ctx context.Context) AzureMySqlTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMySqlTableDatasetResponseOutput)
}

// The Azure MySQL database dataset.
type AzureMySqlTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureMySqlTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlTableDatasetResponse)(nil)).Elem()
}

func (o AzureMySqlTableDatasetResponseOutput) ToAzureMySqlTableDatasetResponseOutput() AzureMySqlTableDatasetResponseOutput {
	return o
}

func (o AzureMySqlTableDatasetResponseOutput) ToAzureMySqlTableDatasetResponseOutputWithContext(ctx context.Context) AzureMySqlTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureMySqlTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureMySqlTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureMySqlTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AzureMySqlTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureMySqlTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureMySqlTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureMySqlTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The name of Azure MySQL database table. Type: string (or Expression with resultType string).
func (o AzureMySqlTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// The Azure MySQL database table name. Type: string (or Expression with resultType string).
func (o AzureMySqlTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureMySqlTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure PostgreSQL linked service.
type AzurePostgreSqlLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzurePostgreSqlLinkedServiceInput is an input type that accepts AzurePostgreSqlLinkedServiceArgs and AzurePostgreSqlLinkedServiceOutput values.
// You can construct a concrete instance of `AzurePostgreSqlLinkedServiceInput` via:
//
//          AzurePostgreSqlLinkedServiceArgs{...}
type AzurePostgreSqlLinkedServiceInput interface {
	pulumi.Input

	ToAzurePostgreSqlLinkedServiceOutput() AzurePostgreSqlLinkedServiceOutput
	ToAzurePostgreSqlLinkedServiceOutputWithContext(context.Context) AzurePostgreSqlLinkedServiceOutput
}

// Azure PostgreSQL linked service.
type AzurePostgreSqlLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferencePtrInput `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzurePostgreSqlLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlLinkedService)(nil)).Elem()
}

func (i AzurePostgreSqlLinkedServiceArgs) ToAzurePostgreSqlLinkedServiceOutput() AzurePostgreSqlLinkedServiceOutput {
	return i.ToAzurePostgreSqlLinkedServiceOutputWithContext(context.Background())
}

func (i AzurePostgreSqlLinkedServiceArgs) ToAzurePostgreSqlLinkedServiceOutputWithContext(ctx context.Context) AzurePostgreSqlLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePostgreSqlLinkedServiceOutput)
}

// Azure PostgreSQL linked service.
type AzurePostgreSqlLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzurePostgreSqlLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlLinkedService)(nil)).Elem()
}

func (o AzurePostgreSqlLinkedServiceOutput) ToAzurePostgreSqlLinkedServiceOutput() AzurePostgreSqlLinkedServiceOutput {
	return o
}

func (o AzurePostgreSqlLinkedServiceOutput) ToAzurePostgreSqlLinkedServiceOutputWithContext(ctx context.Context) AzurePostgreSqlLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzurePostgreSqlLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzurePostgreSqlLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzurePostgreSqlLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzurePostgreSqlLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzurePostgreSqlLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzurePostgreSqlLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzurePostgreSqlLinkedServiceOutput) Password() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedService) *AzureKeyVaultSecretReference { return v.Password }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
func (o AzurePostgreSqlLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure PostgreSQL linked service.
type AzurePostgreSqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzurePostgreSqlLinkedServiceResponseInput is an input type that accepts AzurePostgreSqlLinkedServiceResponseArgs and AzurePostgreSqlLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzurePostgreSqlLinkedServiceResponseInput` via:
//
//          AzurePostgreSqlLinkedServiceResponseArgs{...}
type AzurePostgreSqlLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzurePostgreSqlLinkedServiceResponseOutput() AzurePostgreSqlLinkedServiceResponseOutput
	ToAzurePostgreSqlLinkedServiceResponseOutputWithContext(context.Context) AzurePostgreSqlLinkedServiceResponseOutput
}

// Azure PostgreSQL linked service.
type AzurePostgreSqlLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzurePostgreSqlLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlLinkedServiceResponse)(nil)).Elem()
}

func (i AzurePostgreSqlLinkedServiceResponseArgs) ToAzurePostgreSqlLinkedServiceResponseOutput() AzurePostgreSqlLinkedServiceResponseOutput {
	return i.ToAzurePostgreSqlLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzurePostgreSqlLinkedServiceResponseArgs) ToAzurePostgreSqlLinkedServiceResponseOutputWithContext(ctx context.Context) AzurePostgreSqlLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePostgreSqlLinkedServiceResponseOutput)
}

// Azure PostgreSQL linked service.
type AzurePostgreSqlLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzurePostgreSqlLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlLinkedServiceResponse)(nil)).Elem()
}

func (o AzurePostgreSqlLinkedServiceResponseOutput) ToAzurePostgreSqlLinkedServiceResponseOutput() AzurePostgreSqlLinkedServiceResponseOutput {
	return o
}

func (o AzurePostgreSqlLinkedServiceResponseOutput) ToAzurePostgreSqlLinkedServiceResponseOutputWithContext(ctx context.Context) AzurePostgreSqlLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzurePostgreSqlLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzurePostgreSqlLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzurePostgreSqlLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzurePostgreSqlLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzurePostgreSqlLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzurePostgreSqlLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzurePostgreSqlLinkedServiceResponseOutput) Password() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Password }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
func (o AzurePostgreSqlLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure PostgreSQL dataset.
type AzurePostgreSqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// The table name of the Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzurePostgreSqlTableDatasetInput is an input type that accepts AzurePostgreSqlTableDatasetArgs and AzurePostgreSqlTableDatasetOutput values.
// You can construct a concrete instance of `AzurePostgreSqlTableDatasetInput` via:
//
//          AzurePostgreSqlTableDatasetArgs{...}
type AzurePostgreSqlTableDatasetInput interface {
	pulumi.Input

	ToAzurePostgreSqlTableDatasetOutput() AzurePostgreSqlTableDatasetOutput
	ToAzurePostgreSqlTableDatasetOutputWithContext(context.Context) AzurePostgreSqlTableDatasetOutput
}

// Azure PostgreSQL dataset.
type AzurePostgreSqlTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// The table name of the Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzurePostgreSqlTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlTableDataset)(nil)).Elem()
}

func (i AzurePostgreSqlTableDatasetArgs) ToAzurePostgreSqlTableDatasetOutput() AzurePostgreSqlTableDatasetOutput {
	return i.ToAzurePostgreSqlTableDatasetOutputWithContext(context.Background())
}

func (i AzurePostgreSqlTableDatasetArgs) ToAzurePostgreSqlTableDatasetOutputWithContext(ctx context.Context) AzurePostgreSqlTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePostgreSqlTableDatasetOutput)
}

// Azure PostgreSQL dataset.
type AzurePostgreSqlTableDatasetOutput struct{ *pulumi.OutputState }

func (AzurePostgreSqlTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlTableDataset)(nil)).Elem()
}

func (o AzurePostgreSqlTableDatasetOutput) ToAzurePostgreSqlTableDatasetOutput() AzurePostgreSqlTableDatasetOutput {
	return o
}

func (o AzurePostgreSqlTableDatasetOutput) ToAzurePostgreSqlTableDatasetOutputWithContext(ctx context.Context) AzurePostgreSqlTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzurePostgreSqlTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzurePostgreSqlTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzurePostgreSqlTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AzurePostgreSqlTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzurePostgreSqlTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzurePostgreSqlTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzurePostgreSqlTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string).
func (o AzurePostgreSqlTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// The table name of the Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with resultType string).
func (o AzurePostgreSqlTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzurePostgreSqlTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Azure PostgreSQL dataset.
type AzurePostgreSqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// The table name of the Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzurePostgreSqlTableDatasetResponseInput is an input type that accepts AzurePostgreSqlTableDatasetResponseArgs and AzurePostgreSqlTableDatasetResponseOutput values.
// You can construct a concrete instance of `AzurePostgreSqlTableDatasetResponseInput` via:
//
//          AzurePostgreSqlTableDatasetResponseArgs{...}
type AzurePostgreSqlTableDatasetResponseInput interface {
	pulumi.Input

	ToAzurePostgreSqlTableDatasetResponseOutput() AzurePostgreSqlTableDatasetResponseOutput
	ToAzurePostgreSqlTableDatasetResponseOutputWithContext(context.Context) AzurePostgreSqlTableDatasetResponseOutput
}

// Azure PostgreSQL dataset.
type AzurePostgreSqlTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// The table name of the Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzurePostgreSqlTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlTableDatasetResponse)(nil)).Elem()
}

func (i AzurePostgreSqlTableDatasetResponseArgs) ToAzurePostgreSqlTableDatasetResponseOutput() AzurePostgreSqlTableDatasetResponseOutput {
	return i.ToAzurePostgreSqlTableDatasetResponseOutputWithContext(context.Background())
}

func (i AzurePostgreSqlTableDatasetResponseArgs) ToAzurePostgreSqlTableDatasetResponseOutputWithContext(ctx context.Context) AzurePostgreSqlTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePostgreSqlTableDatasetResponseOutput)
}

// Azure PostgreSQL dataset.
type AzurePostgreSqlTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzurePostgreSqlTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlTableDatasetResponse)(nil)).Elem()
}

func (o AzurePostgreSqlTableDatasetResponseOutput) ToAzurePostgreSqlTableDatasetResponseOutput() AzurePostgreSqlTableDatasetResponseOutput {
	return o
}

func (o AzurePostgreSqlTableDatasetResponseOutput) ToAzurePostgreSqlTableDatasetResponseOutputWithContext(ctx context.Context) AzurePostgreSqlTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzurePostgreSqlTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzurePostgreSqlTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzurePostgreSqlTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AzurePostgreSqlTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzurePostgreSqlTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzurePostgreSqlTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzurePostgreSqlTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string).
func (o AzurePostgreSqlTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// The table name of the Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with resultType string).
func (o AzurePostgreSqlTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzurePostgreSqlTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Search Index.
type AzureSearchIndexDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The name of the Azure Search Index. Type: string (or Expression with resultType string).
	IndexName interface{} `pulumi:"indexName"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureSearchIndexDatasetInput is an input type that accepts AzureSearchIndexDatasetArgs and AzureSearchIndexDatasetOutput values.
// You can construct a concrete instance of `AzureSearchIndexDatasetInput` via:
//
//          AzureSearchIndexDatasetArgs{...}
type AzureSearchIndexDatasetInput interface {
	pulumi.Input

	ToAzureSearchIndexDatasetOutput() AzureSearchIndexDatasetOutput
	ToAzureSearchIndexDatasetOutputWithContext(context.Context) AzureSearchIndexDatasetOutput
}

// The Azure Search Index.
type AzureSearchIndexDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// The name of the Azure Search Index. Type: string (or Expression with resultType string).
	IndexName pulumi.Input `pulumi:"indexName"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSearchIndexDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchIndexDataset)(nil)).Elem()
}

func (i AzureSearchIndexDatasetArgs) ToAzureSearchIndexDatasetOutput() AzureSearchIndexDatasetOutput {
	return i.ToAzureSearchIndexDatasetOutputWithContext(context.Background())
}

func (i AzureSearchIndexDatasetArgs) ToAzureSearchIndexDatasetOutputWithContext(ctx context.Context) AzureSearchIndexDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSearchIndexDatasetOutput)
}

// The Azure Search Index.
type AzureSearchIndexDatasetOutput struct{ *pulumi.OutputState }

func (AzureSearchIndexDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchIndexDataset)(nil)).Elem()
}

func (o AzureSearchIndexDatasetOutput) ToAzureSearchIndexDatasetOutput() AzureSearchIndexDatasetOutput {
	return o
}

func (o AzureSearchIndexDatasetOutput) ToAzureSearchIndexDatasetOutputWithContext(ctx context.Context) AzureSearchIndexDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSearchIndexDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSearchIndexDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureSearchIndexDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSearchIndexDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureSearchIndexDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureSearchIndexDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// The name of the Azure Search Index. Type: string (or Expression with resultType string).
func (o AzureSearchIndexDatasetOutput) IndexName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexDataset) interface{} { return v.IndexName }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureSearchIndexDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureSearchIndexDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureSearchIndexDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureSearchIndexDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureSearchIndexDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureSearchIndexDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureSearchIndexDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSearchIndexDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Search Index.
type AzureSearchIndexDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The name of the Azure Search Index. Type: string (or Expression with resultType string).
	IndexName interface{} `pulumi:"indexName"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureSearchIndexDatasetResponseInput is an input type that accepts AzureSearchIndexDatasetResponseArgs and AzureSearchIndexDatasetResponseOutput values.
// You can construct a concrete instance of `AzureSearchIndexDatasetResponseInput` via:
//
//          AzureSearchIndexDatasetResponseArgs{...}
type AzureSearchIndexDatasetResponseInput interface {
	pulumi.Input

	ToAzureSearchIndexDatasetResponseOutput() AzureSearchIndexDatasetResponseOutput
	ToAzureSearchIndexDatasetResponseOutputWithContext(context.Context) AzureSearchIndexDatasetResponseOutput
}

// The Azure Search Index.
type AzureSearchIndexDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// The name of the Azure Search Index. Type: string (or Expression with resultType string).
	IndexName pulumi.Input `pulumi:"indexName"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSearchIndexDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchIndexDatasetResponse)(nil)).Elem()
}

func (i AzureSearchIndexDatasetResponseArgs) ToAzureSearchIndexDatasetResponseOutput() AzureSearchIndexDatasetResponseOutput {
	return i.ToAzureSearchIndexDatasetResponseOutputWithContext(context.Background())
}

func (i AzureSearchIndexDatasetResponseArgs) ToAzureSearchIndexDatasetResponseOutputWithContext(ctx context.Context) AzureSearchIndexDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSearchIndexDatasetResponseOutput)
}

// The Azure Search Index.
type AzureSearchIndexDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureSearchIndexDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchIndexDatasetResponse)(nil)).Elem()
}

func (o AzureSearchIndexDatasetResponseOutput) ToAzureSearchIndexDatasetResponseOutput() AzureSearchIndexDatasetResponseOutput {
	return o
}

func (o AzureSearchIndexDatasetResponseOutput) ToAzureSearchIndexDatasetResponseOutputWithContext(ctx context.Context) AzureSearchIndexDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSearchIndexDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureSearchIndexDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureSearchIndexDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// The name of the Azure Search Index. Type: string (or Expression with resultType string).
func (o AzureSearchIndexDatasetResponseOutput) IndexName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) interface{} { return v.IndexName }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureSearchIndexDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureSearchIndexDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureSearchIndexDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureSearchIndexDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureSearchIndexDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Windows Azure Search Service.
type AzureSearchLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Admin Key for Azure Search service
	Key interface{} `pulumi:"key"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// URL for Azure Search service. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// AzureSearchLinkedServiceInput is an input type that accepts AzureSearchLinkedServiceArgs and AzureSearchLinkedServiceOutput values.
// You can construct a concrete instance of `AzureSearchLinkedServiceInput` via:
//
//          AzureSearchLinkedServiceArgs{...}
type AzureSearchLinkedServiceInput interface {
	pulumi.Input

	ToAzureSearchLinkedServiceOutput() AzureSearchLinkedServiceOutput
	ToAzureSearchLinkedServiceOutputWithContext(context.Context) AzureSearchLinkedServiceOutput
}

// Linked service for Windows Azure Search Service.
type AzureSearchLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Admin Key for Azure Search service
	Key pulumi.Input `pulumi:"key"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// URL for Azure Search service. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
}

func (AzureSearchLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchLinkedService)(nil)).Elem()
}

func (i AzureSearchLinkedServiceArgs) ToAzureSearchLinkedServiceOutput() AzureSearchLinkedServiceOutput {
	return i.ToAzureSearchLinkedServiceOutputWithContext(context.Background())
}

func (i AzureSearchLinkedServiceArgs) ToAzureSearchLinkedServiceOutputWithContext(ctx context.Context) AzureSearchLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSearchLinkedServiceOutput)
}

// Linked service for Windows Azure Search Service.
type AzureSearchLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureSearchLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchLinkedService)(nil)).Elem()
}

func (o AzureSearchLinkedServiceOutput) ToAzureSearchLinkedServiceOutput() AzureSearchLinkedServiceOutput {
	return o
}

func (o AzureSearchLinkedServiceOutput) ToAzureSearchLinkedServiceOutputWithContext(ctx context.Context) AzureSearchLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureSearchLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSearchLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureSearchLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureSearchLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AzureSearchLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSearchLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureSearchLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Admin Key for Azure Search service
func (o AzureSearchLinkedServiceOutput) Key() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchLinkedService) interface{} { return v.Key }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureSearchLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureSearchLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o AzureSearchLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSearchLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// URL for Azure Search service. Type: string (or Expression with resultType string).
func (o AzureSearchLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// Linked service for Windows Azure Search Service.
type AzureSearchLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Admin Key for Azure Search service
	Key interface{} `pulumi:"key"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// URL for Azure Search service. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// AzureSearchLinkedServiceResponseInput is an input type that accepts AzureSearchLinkedServiceResponseArgs and AzureSearchLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureSearchLinkedServiceResponseInput` via:
//
//          AzureSearchLinkedServiceResponseArgs{...}
type AzureSearchLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureSearchLinkedServiceResponseOutput() AzureSearchLinkedServiceResponseOutput
	ToAzureSearchLinkedServiceResponseOutputWithContext(context.Context) AzureSearchLinkedServiceResponseOutput
}

// Linked service for Windows Azure Search Service.
type AzureSearchLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Admin Key for Azure Search service
	Key pulumi.Input `pulumi:"key"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// URL for Azure Search service. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
}

func (AzureSearchLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchLinkedServiceResponse)(nil)).Elem()
}

func (i AzureSearchLinkedServiceResponseArgs) ToAzureSearchLinkedServiceResponseOutput() AzureSearchLinkedServiceResponseOutput {
	return i.ToAzureSearchLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureSearchLinkedServiceResponseArgs) ToAzureSearchLinkedServiceResponseOutputWithContext(ctx context.Context) AzureSearchLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSearchLinkedServiceResponseOutput)
}

// Linked service for Windows Azure Search Service.
type AzureSearchLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureSearchLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchLinkedServiceResponse)(nil)).Elem()
}

func (o AzureSearchLinkedServiceResponseOutput) ToAzureSearchLinkedServiceResponseOutput() AzureSearchLinkedServiceResponseOutput {
	return o
}

func (o AzureSearchLinkedServiceResponseOutput) ToAzureSearchLinkedServiceResponseOutputWithContext(ctx context.Context) AzureSearchLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureSearchLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureSearchLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureSearchLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureSearchLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Admin Key for Azure Search service
func (o AzureSearchLinkedServiceResponseOutput) Key() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) interface{} { return v.Key }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureSearchLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o AzureSearchLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// URL for Azure Search service. Type: string (or Expression with resultType string).
func (o AzureSearchLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// Azure SQL Data Warehouse linked service.
type AzureSqlDWLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureSqlDWLinkedServiceInput is an input type that accepts AzureSqlDWLinkedServiceArgs and AzureSqlDWLinkedServiceOutput values.
// You can construct a concrete instance of `AzureSqlDWLinkedServiceInput` via:
//
//          AzureSqlDWLinkedServiceArgs{...}
type AzureSqlDWLinkedServiceInput interface {
	pulumi.Input

	ToAzureSqlDWLinkedServiceOutput() AzureSqlDWLinkedServiceOutput
	ToAzureSqlDWLinkedServiceOutputWithContext(context.Context) AzureSqlDWLinkedServiceOutput
}

// Azure SQL Data Warehouse linked service.
type AzureSqlDWLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferencePtrInput `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlDWLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDWLinkedService)(nil)).Elem()
}

func (i AzureSqlDWLinkedServiceArgs) ToAzureSqlDWLinkedServiceOutput() AzureSqlDWLinkedServiceOutput {
	return i.ToAzureSqlDWLinkedServiceOutputWithContext(context.Background())
}

func (i AzureSqlDWLinkedServiceArgs) ToAzureSqlDWLinkedServiceOutputWithContext(ctx context.Context) AzureSqlDWLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlDWLinkedServiceOutput)
}

// Azure SQL Data Warehouse linked service.
type AzureSqlDWLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureSqlDWLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDWLinkedService)(nil)).Elem()
}

func (o AzureSqlDWLinkedServiceOutput) ToAzureSqlDWLinkedServiceOutput() AzureSqlDWLinkedServiceOutput {
	return o
}

func (o AzureSqlDWLinkedServiceOutput) ToAzureSqlDWLinkedServiceOutputWithContext(ctx context.Context) AzureSqlDWLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureSqlDWLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureSqlDWLinkedServiceOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureSqlDWLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureSqlDWLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureSqlDWLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureSqlDWLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureSqlDWLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureSqlDWLinkedServiceOutput) Password() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) *AzureKeyVaultSecretReference { return v.Password }).(AzureKeyVaultSecretReferencePtrOutput)
}

// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
func (o AzureSqlDWLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
func (o AzureSqlDWLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureSqlDWLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureSqlDWLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure SQL Data Warehouse linked service.
type AzureSqlDWLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureSqlDWLinkedServiceResponseInput is an input type that accepts AzureSqlDWLinkedServiceResponseArgs and AzureSqlDWLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureSqlDWLinkedServiceResponseInput` via:
//
//          AzureSqlDWLinkedServiceResponseArgs{...}
type AzureSqlDWLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureSqlDWLinkedServiceResponseOutput() AzureSqlDWLinkedServiceResponseOutput
	ToAzureSqlDWLinkedServiceResponseOutputWithContext(context.Context) AzureSqlDWLinkedServiceResponseOutput
}

// Azure SQL Data Warehouse linked service.
type AzureSqlDWLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlDWLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDWLinkedServiceResponse)(nil)).Elem()
}

func (i AzureSqlDWLinkedServiceResponseArgs) ToAzureSqlDWLinkedServiceResponseOutput() AzureSqlDWLinkedServiceResponseOutput {
	return i.ToAzureSqlDWLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureSqlDWLinkedServiceResponseArgs) ToAzureSqlDWLinkedServiceResponseOutputWithContext(ctx context.Context) AzureSqlDWLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlDWLinkedServiceResponseOutput)
}

// Azure SQL Data Warehouse linked service.
type AzureSqlDWLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlDWLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDWLinkedServiceResponse)(nil)).Elem()
}

func (o AzureSqlDWLinkedServiceResponseOutput) ToAzureSqlDWLinkedServiceResponseOutput() AzureSqlDWLinkedServiceResponseOutput {
	return o
}

func (o AzureSqlDWLinkedServiceResponseOutput) ToAzureSqlDWLinkedServiceResponseOutputWithContext(ctx context.Context) AzureSqlDWLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureSqlDWLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureSqlDWLinkedServiceResponseOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureSqlDWLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureSqlDWLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureSqlDWLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureSqlDWLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureSqlDWLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureSqlDWLinkedServiceResponseOutput) Password() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Password }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
func (o AzureSqlDWLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
func (o AzureSqlDWLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureSqlDWLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureSqlDWLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure SQL Data Warehouse dataset.
type AzureSqlDWTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureSqlDWTableDatasetInput is an input type that accepts AzureSqlDWTableDatasetArgs and AzureSqlDWTableDatasetOutput values.
// You can construct a concrete instance of `AzureSqlDWTableDatasetInput` via:
//
//          AzureSqlDWTableDatasetArgs{...}
type AzureSqlDWTableDatasetInput interface {
	pulumi.Input

	ToAzureSqlDWTableDatasetOutput() AzureSqlDWTableDatasetOutput
	ToAzureSqlDWTableDatasetOutputWithContext(context.Context) AzureSqlDWTableDatasetOutput
}

// The Azure SQL Data Warehouse dataset.
type AzureSqlDWTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlDWTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDWTableDataset)(nil)).Elem()
}

func (i AzureSqlDWTableDatasetArgs) ToAzureSqlDWTableDatasetOutput() AzureSqlDWTableDatasetOutput {
	return i.ToAzureSqlDWTableDatasetOutputWithContext(context.Background())
}

func (i AzureSqlDWTableDatasetArgs) ToAzureSqlDWTableDatasetOutputWithContext(ctx context.Context) AzureSqlDWTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlDWTableDatasetOutput)
}

// The Azure SQL Data Warehouse dataset.
type AzureSqlDWTableDatasetOutput struct{ *pulumi.OutputState }

func (AzureSqlDWTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDWTableDataset)(nil)).Elem()
}

func (o AzureSqlDWTableDatasetOutput) ToAzureSqlDWTableDatasetOutput() AzureSqlDWTableDatasetOutput {
	return o
}

func (o AzureSqlDWTableDatasetOutput) ToAzureSqlDWTableDatasetOutputWithContext(ctx context.Context) AzureSqlDWTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSqlDWTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureSqlDWTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureSqlDWTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AzureSqlDWTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureSqlDWTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureSqlDWTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureSqlDWTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
func (o AzureSqlDWTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o AzureSqlDWTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureSqlDWTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure SQL Data Warehouse dataset.
type AzureSqlDWTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureSqlDWTableDatasetResponseInput is an input type that accepts AzureSqlDWTableDatasetResponseArgs and AzureSqlDWTableDatasetResponseOutput values.
// You can construct a concrete instance of `AzureSqlDWTableDatasetResponseInput` via:
//
//          AzureSqlDWTableDatasetResponseArgs{...}
type AzureSqlDWTableDatasetResponseInput interface {
	pulumi.Input

	ToAzureSqlDWTableDatasetResponseOutput() AzureSqlDWTableDatasetResponseOutput
	ToAzureSqlDWTableDatasetResponseOutputWithContext(context.Context) AzureSqlDWTableDatasetResponseOutput
}

// The Azure SQL Data Warehouse dataset.
type AzureSqlDWTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlDWTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDWTableDatasetResponse)(nil)).Elem()
}

func (i AzureSqlDWTableDatasetResponseArgs) ToAzureSqlDWTableDatasetResponseOutput() AzureSqlDWTableDatasetResponseOutput {
	return i.ToAzureSqlDWTableDatasetResponseOutputWithContext(context.Background())
}

func (i AzureSqlDWTableDatasetResponseArgs) ToAzureSqlDWTableDatasetResponseOutputWithContext(ctx context.Context) AzureSqlDWTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlDWTableDatasetResponseOutput)
}

// The Azure SQL Data Warehouse dataset.
type AzureSqlDWTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlDWTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDWTableDatasetResponse)(nil)).Elem()
}

func (o AzureSqlDWTableDatasetResponseOutput) ToAzureSqlDWTableDatasetResponseOutput() AzureSqlDWTableDatasetResponseOutput {
	return o
}

func (o AzureSqlDWTableDatasetResponseOutput) ToAzureSqlDWTableDatasetResponseOutputWithContext(ctx context.Context) AzureSqlDWTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSqlDWTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureSqlDWTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureSqlDWTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AzureSqlDWTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureSqlDWTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureSqlDWTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureSqlDWTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
func (o AzureSqlDWTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o AzureSqlDWTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureSqlDWTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Azure SQL Database linked service.
type AzureSqlDatabaseLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Database.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureSqlDatabaseLinkedServiceInput is an input type that accepts AzureSqlDatabaseLinkedServiceArgs and AzureSqlDatabaseLinkedServiceOutput values.
// You can construct a concrete instance of `AzureSqlDatabaseLinkedServiceInput` via:
//
//          AzureSqlDatabaseLinkedServiceArgs{...}
type AzureSqlDatabaseLinkedServiceInput interface {
	pulumi.Input

	ToAzureSqlDatabaseLinkedServiceOutput() AzureSqlDatabaseLinkedServiceOutput
	ToAzureSqlDatabaseLinkedServiceOutputWithContext(context.Context) AzureSqlDatabaseLinkedServiceOutput
}

// Microsoft Azure SQL Database linked service.
type AzureSqlDatabaseLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferencePtrInput `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Database.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlDatabaseLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDatabaseLinkedService)(nil)).Elem()
}

func (i AzureSqlDatabaseLinkedServiceArgs) ToAzureSqlDatabaseLinkedServiceOutput() AzureSqlDatabaseLinkedServiceOutput {
	return i.ToAzureSqlDatabaseLinkedServiceOutputWithContext(context.Background())
}

func (i AzureSqlDatabaseLinkedServiceArgs) ToAzureSqlDatabaseLinkedServiceOutputWithContext(ctx context.Context) AzureSqlDatabaseLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlDatabaseLinkedServiceOutput)
}

// Microsoft Azure SQL Database linked service.
type AzureSqlDatabaseLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureSqlDatabaseLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDatabaseLinkedService)(nil)).Elem()
}

func (o AzureSqlDatabaseLinkedServiceOutput) ToAzureSqlDatabaseLinkedServiceOutput() AzureSqlDatabaseLinkedServiceOutput {
	return o
}

func (o AzureSqlDatabaseLinkedServiceOutput) ToAzureSqlDatabaseLinkedServiceOutputWithContext(ctx context.Context) AzureSqlDatabaseLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureSqlDatabaseLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureSqlDatabaseLinkedServiceOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureSqlDatabaseLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureSqlDatabaseLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureSqlDatabaseLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureSqlDatabaseLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureSqlDatabaseLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureSqlDatabaseLinkedServiceOutput) Password() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) *AzureKeyVaultSecretReference { return v.Password }).(AzureKeyVaultSecretReferencePtrOutput)
}

// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
func (o AzureSqlDatabaseLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure SQL Database.
func (o AzureSqlDatabaseLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureSqlDatabaseLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureSqlDatabaseLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Azure SQL Database linked service.
type AzureSqlDatabaseLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Database.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureSqlDatabaseLinkedServiceResponseInput is an input type that accepts AzureSqlDatabaseLinkedServiceResponseArgs and AzureSqlDatabaseLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureSqlDatabaseLinkedServiceResponseInput` via:
//
//          AzureSqlDatabaseLinkedServiceResponseArgs{...}
type AzureSqlDatabaseLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureSqlDatabaseLinkedServiceResponseOutput() AzureSqlDatabaseLinkedServiceResponseOutput
	ToAzureSqlDatabaseLinkedServiceResponseOutputWithContext(context.Context) AzureSqlDatabaseLinkedServiceResponseOutput
}

// Microsoft Azure SQL Database linked service.
type AzureSqlDatabaseLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Database.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlDatabaseLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDatabaseLinkedServiceResponse)(nil)).Elem()
}

func (i AzureSqlDatabaseLinkedServiceResponseArgs) ToAzureSqlDatabaseLinkedServiceResponseOutput() AzureSqlDatabaseLinkedServiceResponseOutput {
	return i.ToAzureSqlDatabaseLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureSqlDatabaseLinkedServiceResponseArgs) ToAzureSqlDatabaseLinkedServiceResponseOutputWithContext(ctx context.Context) AzureSqlDatabaseLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlDatabaseLinkedServiceResponseOutput)
}

// Microsoft Azure SQL Database linked service.
type AzureSqlDatabaseLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlDatabaseLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDatabaseLinkedServiceResponse)(nil)).Elem()
}

func (o AzureSqlDatabaseLinkedServiceResponseOutput) ToAzureSqlDatabaseLinkedServiceResponseOutput() AzureSqlDatabaseLinkedServiceResponseOutput {
	return o
}

func (o AzureSqlDatabaseLinkedServiceResponseOutput) ToAzureSqlDatabaseLinkedServiceResponseOutputWithContext(ctx context.Context) AzureSqlDatabaseLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureSqlDatabaseLinkedServiceResponseOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureSqlDatabaseLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) Password() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Password }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
func (o AzureSqlDatabaseLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure SQL Database.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureSqlDatabaseLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure SQL Managed Instance linked service.
type AzureSqlMILinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Managed Instance.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureSqlMILinkedServiceInput is an input type that accepts AzureSqlMILinkedServiceArgs and AzureSqlMILinkedServiceOutput values.
// You can construct a concrete instance of `AzureSqlMILinkedServiceInput` via:
//
//          AzureSqlMILinkedServiceArgs{...}
type AzureSqlMILinkedServiceInput interface {
	pulumi.Input

	ToAzureSqlMILinkedServiceOutput() AzureSqlMILinkedServiceOutput
	ToAzureSqlMILinkedServiceOutputWithContext(context.Context) AzureSqlMILinkedServiceOutput
}

// Azure SQL Managed Instance linked service.
type AzureSqlMILinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferencePtrInput `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Managed Instance.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlMILinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlMILinkedService)(nil)).Elem()
}

func (i AzureSqlMILinkedServiceArgs) ToAzureSqlMILinkedServiceOutput() AzureSqlMILinkedServiceOutput {
	return i.ToAzureSqlMILinkedServiceOutputWithContext(context.Background())
}

func (i AzureSqlMILinkedServiceArgs) ToAzureSqlMILinkedServiceOutputWithContext(ctx context.Context) AzureSqlMILinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlMILinkedServiceOutput)
}

// Azure SQL Managed Instance linked service.
type AzureSqlMILinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureSqlMILinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlMILinkedService)(nil)).Elem()
}

func (o AzureSqlMILinkedServiceOutput) ToAzureSqlMILinkedServiceOutput() AzureSqlMILinkedServiceOutput {
	return o
}

func (o AzureSqlMILinkedServiceOutput) ToAzureSqlMILinkedServiceOutputWithContext(ctx context.Context) AzureSqlMILinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureSqlMILinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureSqlMILinkedServiceOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureSqlMILinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureSqlMILinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureSqlMILinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureSqlMILinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureSqlMILinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureSqlMILinkedServiceOutput) Password() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) *AzureKeyVaultSecretReference { return v.Password }).(AzureKeyVaultSecretReferencePtrOutput)
}

// The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or Expression with resultType string).
func (o AzureSqlMILinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure SQL Managed Instance.
func (o AzureSqlMILinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureSqlMILinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureSqlMILinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure SQL Managed Instance linked service.
type AzureSqlMILinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Managed Instance.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureSqlMILinkedServiceResponseInput is an input type that accepts AzureSqlMILinkedServiceResponseArgs and AzureSqlMILinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureSqlMILinkedServiceResponseInput` via:
//
//          AzureSqlMILinkedServiceResponseArgs{...}
type AzureSqlMILinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureSqlMILinkedServiceResponseOutput() AzureSqlMILinkedServiceResponseOutput
	ToAzureSqlMILinkedServiceResponseOutputWithContext(context.Context) AzureSqlMILinkedServiceResponseOutput
}

// Azure SQL Managed Instance linked service.
type AzureSqlMILinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Managed Instance.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlMILinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlMILinkedServiceResponse)(nil)).Elem()
}

func (i AzureSqlMILinkedServiceResponseArgs) ToAzureSqlMILinkedServiceResponseOutput() AzureSqlMILinkedServiceResponseOutput {
	return i.ToAzureSqlMILinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureSqlMILinkedServiceResponseArgs) ToAzureSqlMILinkedServiceResponseOutputWithContext(ctx context.Context) AzureSqlMILinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlMILinkedServiceResponseOutput)
}

// Azure SQL Managed Instance linked service.
type AzureSqlMILinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlMILinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlMILinkedServiceResponse)(nil)).Elem()
}

func (o AzureSqlMILinkedServiceResponseOutput) ToAzureSqlMILinkedServiceResponseOutput() AzureSqlMILinkedServiceResponseOutput {
	return o
}

func (o AzureSqlMILinkedServiceResponseOutput) ToAzureSqlMILinkedServiceResponseOutputWithContext(ctx context.Context) AzureSqlMILinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureSqlMILinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureSqlMILinkedServiceResponseOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureSqlMILinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureSqlMILinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureSqlMILinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureSqlMILinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureSqlMILinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureSqlMILinkedServiceResponseOutput) Password() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Password }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or Expression with resultType string).
func (o AzureSqlMILinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure SQL Managed Instance.
func (o AzureSqlMILinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureSqlMILinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureSqlMILinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure SQL Managed Instance dataset.
type AzureSqlMITableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureSqlMITableDatasetInput is an input type that accepts AzureSqlMITableDatasetArgs and AzureSqlMITableDatasetOutput values.
// You can construct a concrete instance of `AzureSqlMITableDatasetInput` via:
//
//          AzureSqlMITableDatasetArgs{...}
type AzureSqlMITableDatasetInput interface {
	pulumi.Input

	ToAzureSqlMITableDatasetOutput() AzureSqlMITableDatasetOutput
	ToAzureSqlMITableDatasetOutputWithContext(context.Context) AzureSqlMITableDatasetOutput
}

// The Azure SQL Managed Instance dataset.
type AzureSqlMITableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlMITableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlMITableDataset)(nil)).Elem()
}

func (i AzureSqlMITableDatasetArgs) ToAzureSqlMITableDatasetOutput() AzureSqlMITableDatasetOutput {
	return i.ToAzureSqlMITableDatasetOutputWithContext(context.Background())
}

func (i AzureSqlMITableDatasetArgs) ToAzureSqlMITableDatasetOutputWithContext(ctx context.Context) AzureSqlMITableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlMITableDatasetOutput)
}

// The Azure SQL Managed Instance dataset.
type AzureSqlMITableDatasetOutput struct{ *pulumi.OutputState }

func (AzureSqlMITableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlMITableDataset)(nil)).Elem()
}

func (o AzureSqlMITableDatasetOutput) ToAzureSqlMITableDatasetOutput() AzureSqlMITableDatasetOutput {
	return o
}

func (o AzureSqlMITableDatasetOutput) ToAzureSqlMITableDatasetOutputWithContext(ctx context.Context) AzureSqlMITableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSqlMITableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureSqlMITableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureSqlMITableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AzureSqlMITableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureSqlMITableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureSqlMITableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureSqlMITableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType string).
func (o AzureSqlMITableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o AzureSqlMITableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureSqlMITableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure SQL Managed Instance dataset.
type AzureSqlMITableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureSqlMITableDatasetResponseInput is an input type that accepts AzureSqlMITableDatasetResponseArgs and AzureSqlMITableDatasetResponseOutput values.
// You can construct a concrete instance of `AzureSqlMITableDatasetResponseInput` via:
//
//          AzureSqlMITableDatasetResponseArgs{...}
type AzureSqlMITableDatasetResponseInput interface {
	pulumi.Input

	ToAzureSqlMITableDatasetResponseOutput() AzureSqlMITableDatasetResponseOutput
	ToAzureSqlMITableDatasetResponseOutputWithContext(context.Context) AzureSqlMITableDatasetResponseOutput
}

// The Azure SQL Managed Instance dataset.
type AzureSqlMITableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlMITableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlMITableDatasetResponse)(nil)).Elem()
}

func (i AzureSqlMITableDatasetResponseArgs) ToAzureSqlMITableDatasetResponseOutput() AzureSqlMITableDatasetResponseOutput {
	return i.ToAzureSqlMITableDatasetResponseOutputWithContext(context.Background())
}

func (i AzureSqlMITableDatasetResponseArgs) ToAzureSqlMITableDatasetResponseOutputWithContext(ctx context.Context) AzureSqlMITableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlMITableDatasetResponseOutput)
}

// The Azure SQL Managed Instance dataset.
type AzureSqlMITableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlMITableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlMITableDatasetResponse)(nil)).Elem()
}

func (o AzureSqlMITableDatasetResponseOutput) ToAzureSqlMITableDatasetResponseOutput() AzureSqlMITableDatasetResponseOutput {
	return o
}

func (o AzureSqlMITableDatasetResponseOutput) ToAzureSqlMITableDatasetResponseOutputWithContext(ctx context.Context) AzureSqlMITableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSqlMITableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureSqlMITableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureSqlMITableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AzureSqlMITableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureSqlMITableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureSqlMITableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureSqlMITableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType string).
func (o AzureSqlMITableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o AzureSqlMITableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureSqlMITableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure SQL Server database dataset.
type AzureSqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureSqlTableDatasetInput is an input type that accepts AzureSqlTableDatasetArgs and AzureSqlTableDatasetOutput values.
// You can construct a concrete instance of `AzureSqlTableDatasetInput` via:
//
//          AzureSqlTableDatasetArgs{...}
type AzureSqlTableDatasetInput interface {
	pulumi.Input

	ToAzureSqlTableDatasetOutput() AzureSqlTableDatasetOutput
	ToAzureSqlTableDatasetOutputWithContext(context.Context) AzureSqlTableDatasetOutput
}

// The Azure SQL Server database dataset.
type AzureSqlTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlTableDataset)(nil)).Elem()
}

func (i AzureSqlTableDatasetArgs) ToAzureSqlTableDatasetOutput() AzureSqlTableDatasetOutput {
	return i.ToAzureSqlTableDatasetOutputWithContext(context.Background())
}

func (i AzureSqlTableDatasetArgs) ToAzureSqlTableDatasetOutputWithContext(ctx context.Context) AzureSqlTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlTableDatasetOutput)
}

// The Azure SQL Server database dataset.
type AzureSqlTableDatasetOutput struct{ *pulumi.OutputState }

func (AzureSqlTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlTableDataset)(nil)).Elem()
}

func (o AzureSqlTableDatasetOutput) ToAzureSqlTableDatasetOutput() AzureSqlTableDatasetOutput {
	return o
}

func (o AzureSqlTableDatasetOutput) ToAzureSqlTableDatasetOutputWithContext(ctx context.Context) AzureSqlTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSqlTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureSqlTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureSqlTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AzureSqlTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureSqlTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureSqlTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureSqlTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
func (o AzureSqlTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o AzureSqlTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureSqlTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure SQL Server database dataset.
type AzureSqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureSqlTableDatasetResponseInput is an input type that accepts AzureSqlTableDatasetResponseArgs and AzureSqlTableDatasetResponseOutput values.
// You can construct a concrete instance of `AzureSqlTableDatasetResponseInput` via:
//
//          AzureSqlTableDatasetResponseArgs{...}
type AzureSqlTableDatasetResponseInput interface {
	pulumi.Input

	ToAzureSqlTableDatasetResponseOutput() AzureSqlTableDatasetResponseOutput
	ToAzureSqlTableDatasetResponseOutputWithContext(context.Context) AzureSqlTableDatasetResponseOutput
}

// The Azure SQL Server database dataset.
type AzureSqlTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlTableDatasetResponse)(nil)).Elem()
}

func (i AzureSqlTableDatasetResponseArgs) ToAzureSqlTableDatasetResponseOutput() AzureSqlTableDatasetResponseOutput {
	return i.ToAzureSqlTableDatasetResponseOutputWithContext(context.Background())
}

func (i AzureSqlTableDatasetResponseArgs) ToAzureSqlTableDatasetResponseOutputWithContext(ctx context.Context) AzureSqlTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlTableDatasetResponseOutput)
}

// The Azure SQL Server database dataset.
type AzureSqlTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlTableDatasetResponse)(nil)).Elem()
}

func (o AzureSqlTableDatasetResponseOutput) ToAzureSqlTableDatasetResponseOutput() AzureSqlTableDatasetResponseOutput {
	return o
}

func (o AzureSqlTableDatasetResponseOutput) ToAzureSqlTableDatasetResponseOutputWithContext(ctx context.Context) AzureSqlTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSqlTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureSqlTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureSqlTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AzureSqlTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureSqlTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureSqlTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureSqlTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
func (o AzureSqlTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o AzureSqlTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureSqlTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The storage account linked service.
type AzureStorageLinkedService struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReference `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReference `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureStorageLinkedServiceInput is an input type that accepts AzureStorageLinkedServiceArgs and AzureStorageLinkedServiceOutput values.
// You can construct a concrete instance of `AzureStorageLinkedServiceInput` via:
//
//          AzureStorageLinkedServiceArgs{...}
type AzureStorageLinkedServiceInput interface {
	pulumi.Input

	ToAzureStorageLinkedServiceOutput() AzureStorageLinkedServiceOutput
	ToAzureStorageLinkedServiceOutputWithContext(context.Context) AzureStorageLinkedServiceOutput
}

// The storage account linked service.
type AzureStorageLinkedServiceArgs struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey AzureKeyVaultSecretReferencePtrInput `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken AzureKeyVaultSecretReferencePtrInput `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri pulumi.Input `pulumi:"sasUri"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureStorageLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStorageLinkedService)(nil)).Elem()
}

func (i AzureStorageLinkedServiceArgs) ToAzureStorageLinkedServiceOutput() AzureStorageLinkedServiceOutput {
	return i.ToAzureStorageLinkedServiceOutputWithContext(context.Background())
}

func (i AzureStorageLinkedServiceArgs) ToAzureStorageLinkedServiceOutputWithContext(ctx context.Context) AzureStorageLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStorageLinkedServiceOutput)
}

// The storage account linked service.
type AzureStorageLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureStorageLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStorageLinkedService)(nil)).Elem()
}

func (o AzureStorageLinkedServiceOutput) ToAzureStorageLinkedServiceOutput() AzureStorageLinkedServiceOutput {
	return o
}

func (o AzureStorageLinkedServiceOutput) ToAzureStorageLinkedServiceOutputWithContext(ctx context.Context) AzureStorageLinkedServiceOutput {
	return o
}

// The Azure key vault secret reference of accountKey in connection string.
func (o AzureStorageLinkedServiceOutput) AccountKey() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) *AzureKeyVaultSecretReference { return v.AccountKey }).(AzureKeyVaultSecretReferencePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureStorageLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureStorageLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureStorageLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureStorageLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureStorageLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureStorageLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of sasToken in sas uri.
func (o AzureStorageLinkedServiceOutput) SasToken() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) *AzureKeyVaultSecretReference { return v.SasToken }).(AzureKeyVaultSecretReferencePtrOutput)
}

// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureStorageLinkedServiceOutput) SasUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) interface{} { return v.SasUri }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureStorageLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The storage account linked service.
type AzureStorageLinkedServiceResponse struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReferenceResponse `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReferenceResponse `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureStorageLinkedServiceResponseInput is an input type that accepts AzureStorageLinkedServiceResponseArgs and AzureStorageLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureStorageLinkedServiceResponseInput` via:
//
//          AzureStorageLinkedServiceResponseArgs{...}
type AzureStorageLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureStorageLinkedServiceResponseOutput() AzureStorageLinkedServiceResponseOutput
	ToAzureStorageLinkedServiceResponseOutputWithContext(context.Context) AzureStorageLinkedServiceResponseOutput
}

// The storage account linked service.
type AzureStorageLinkedServiceResponseArgs struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri pulumi.Input `pulumi:"sasUri"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureStorageLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStorageLinkedServiceResponse)(nil)).Elem()
}

func (i AzureStorageLinkedServiceResponseArgs) ToAzureStorageLinkedServiceResponseOutput() AzureStorageLinkedServiceResponseOutput {
	return i.ToAzureStorageLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureStorageLinkedServiceResponseArgs) ToAzureStorageLinkedServiceResponseOutputWithContext(ctx context.Context) AzureStorageLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStorageLinkedServiceResponseOutput)
}

// The storage account linked service.
type AzureStorageLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureStorageLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStorageLinkedServiceResponse)(nil)).Elem()
}

func (o AzureStorageLinkedServiceResponseOutput) ToAzureStorageLinkedServiceResponseOutput() AzureStorageLinkedServiceResponseOutput {
	return o
}

func (o AzureStorageLinkedServiceResponseOutput) ToAzureStorageLinkedServiceResponseOutputWithContext(ctx context.Context) AzureStorageLinkedServiceResponseOutput {
	return o
}

// The Azure key vault secret reference of accountKey in connection string.
func (o AzureStorageLinkedServiceResponseOutput) AccountKey() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.AccountKey }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureStorageLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureStorageLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureStorageLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureStorageLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureStorageLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureStorageLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of sasToken in sas uri.
func (o AzureStorageLinkedServiceResponseOutput) SasToken() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.SasToken }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureStorageLinkedServiceResponseOutput) SasUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) interface{} { return v.SasUri }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureStorageLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Table storage dataset.
type AzureTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureTableDatasetInput is an input type that accepts AzureTableDatasetArgs and AzureTableDatasetOutput values.
// You can construct a concrete instance of `AzureTableDatasetInput` via:
//
//          AzureTableDatasetArgs{...}
type AzureTableDatasetInput interface {
	pulumi.Input

	ToAzureTableDatasetOutput() AzureTableDatasetOutput
	ToAzureTableDatasetOutputWithContext(context.Context) AzureTableDatasetOutput
}

// The Azure Table storage dataset.
type AzureTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableDataset)(nil)).Elem()
}

func (i AzureTableDatasetArgs) ToAzureTableDatasetOutput() AzureTableDatasetOutput {
	return i.ToAzureTableDatasetOutputWithContext(context.Background())
}

func (i AzureTableDatasetArgs) ToAzureTableDatasetOutputWithContext(ctx context.Context) AzureTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTableDatasetOutput)
}

// The Azure Table storage dataset.
type AzureTableDatasetOutput struct{ *pulumi.OutputState }

func (AzureTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableDataset)(nil)).Elem()
}

func (o AzureTableDatasetOutput) ToAzureTableDatasetOutput() AzureTableDatasetOutput {
	return o
}

func (o AzureTableDatasetOutput) ToAzureTableDatasetOutputWithContext(ctx context.Context) AzureTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AzureTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
func (o AzureTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Table storage dataset.
type AzureTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureTableDatasetResponseInput is an input type that accepts AzureTableDatasetResponseArgs and AzureTableDatasetResponseOutput values.
// You can construct a concrete instance of `AzureTableDatasetResponseInput` via:
//
//          AzureTableDatasetResponseArgs{...}
type AzureTableDatasetResponseInput interface {
	pulumi.Input

	ToAzureTableDatasetResponseOutput() AzureTableDatasetResponseOutput
	ToAzureTableDatasetResponseOutputWithContext(context.Context) AzureTableDatasetResponseOutput
}

// The Azure Table storage dataset.
type AzureTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableDatasetResponse)(nil)).Elem()
}

func (i AzureTableDatasetResponseArgs) ToAzureTableDatasetResponseOutput() AzureTableDatasetResponseOutput {
	return i.ToAzureTableDatasetResponseOutputWithContext(context.Background())
}

func (i AzureTableDatasetResponseArgs) ToAzureTableDatasetResponseOutputWithContext(ctx context.Context) AzureTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTableDatasetResponseOutput)
}

// The Azure Table storage dataset.
type AzureTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableDatasetResponse)(nil)).Elem()
}

func (o AzureTableDatasetResponseOutput) ToAzureTableDatasetResponseOutput() AzureTableDatasetResponseOutput {
	return o
}

func (o AzureTableDatasetResponseOutput) ToAzureTableDatasetResponseOutputWithContext(ctx context.Context) AzureTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AzureTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
func (o AzureTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o AzureTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The azure table storage linked service.
type AzureTableStorageLinkedService struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReference `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReference `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureTableStorageLinkedServiceInput is an input type that accepts AzureTableStorageLinkedServiceArgs and AzureTableStorageLinkedServiceOutput values.
// You can construct a concrete instance of `AzureTableStorageLinkedServiceInput` via:
//
//          AzureTableStorageLinkedServiceArgs{...}
type AzureTableStorageLinkedServiceInput interface {
	pulumi.Input

	ToAzureTableStorageLinkedServiceOutput() AzureTableStorageLinkedServiceOutput
	ToAzureTableStorageLinkedServiceOutputWithContext(context.Context) AzureTableStorageLinkedServiceOutput
}

// The azure table storage linked service.
type AzureTableStorageLinkedServiceArgs struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey AzureKeyVaultSecretReferencePtrInput `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken AzureKeyVaultSecretReferencePtrInput `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri pulumi.Input `pulumi:"sasUri"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureTableStorageLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableStorageLinkedService)(nil)).Elem()
}

func (i AzureTableStorageLinkedServiceArgs) ToAzureTableStorageLinkedServiceOutput() AzureTableStorageLinkedServiceOutput {
	return i.ToAzureTableStorageLinkedServiceOutputWithContext(context.Background())
}

func (i AzureTableStorageLinkedServiceArgs) ToAzureTableStorageLinkedServiceOutputWithContext(ctx context.Context) AzureTableStorageLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTableStorageLinkedServiceOutput)
}

// The azure table storage linked service.
type AzureTableStorageLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureTableStorageLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableStorageLinkedService)(nil)).Elem()
}

func (o AzureTableStorageLinkedServiceOutput) ToAzureTableStorageLinkedServiceOutput() AzureTableStorageLinkedServiceOutput {
	return o
}

func (o AzureTableStorageLinkedServiceOutput) ToAzureTableStorageLinkedServiceOutputWithContext(ctx context.Context) AzureTableStorageLinkedServiceOutput {
	return o
}

// The Azure key vault secret reference of accountKey in connection string.
func (o AzureTableStorageLinkedServiceOutput) AccountKey() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) *AzureKeyVaultSecretReference { return v.AccountKey }).(AzureKeyVaultSecretReferencePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureTableStorageLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureTableStorageLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureTableStorageLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureTableStorageLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureTableStorageLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureTableStorageLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of sasToken in sas uri.
func (o AzureTableStorageLinkedServiceOutput) SasToken() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) *AzureKeyVaultSecretReference { return v.SasToken }).(AzureKeyVaultSecretReferencePtrOutput)
}

// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureTableStorageLinkedServiceOutput) SasUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) interface{} { return v.SasUri }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureTableStorageLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The azure table storage linked service.
type AzureTableStorageLinkedServiceResponse struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReferenceResponse `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReferenceResponse `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureTableStorageLinkedServiceResponseInput is an input type that accepts AzureTableStorageLinkedServiceResponseArgs and AzureTableStorageLinkedServiceResponseOutput values.
// You can construct a concrete instance of `AzureTableStorageLinkedServiceResponseInput` via:
//
//          AzureTableStorageLinkedServiceResponseArgs{...}
type AzureTableStorageLinkedServiceResponseInput interface {
	pulumi.Input

	ToAzureTableStorageLinkedServiceResponseOutput() AzureTableStorageLinkedServiceResponseOutput
	ToAzureTableStorageLinkedServiceResponseOutputWithContext(context.Context) AzureTableStorageLinkedServiceResponseOutput
}

// The azure table storage linked service.
type AzureTableStorageLinkedServiceResponseArgs struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri pulumi.Input `pulumi:"sasUri"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureTableStorageLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableStorageLinkedServiceResponse)(nil)).Elem()
}

func (i AzureTableStorageLinkedServiceResponseArgs) ToAzureTableStorageLinkedServiceResponseOutput() AzureTableStorageLinkedServiceResponseOutput {
	return i.ToAzureTableStorageLinkedServiceResponseOutputWithContext(context.Background())
}

func (i AzureTableStorageLinkedServiceResponseArgs) ToAzureTableStorageLinkedServiceResponseOutputWithContext(ctx context.Context) AzureTableStorageLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTableStorageLinkedServiceResponseOutput)
}

// The azure table storage linked service.
type AzureTableStorageLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureTableStorageLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableStorageLinkedServiceResponse)(nil)).Elem()
}

func (o AzureTableStorageLinkedServiceResponseOutput) ToAzureTableStorageLinkedServiceResponseOutput() AzureTableStorageLinkedServiceResponseOutput {
	return o
}

func (o AzureTableStorageLinkedServiceResponseOutput) ToAzureTableStorageLinkedServiceResponseOutputWithContext(ctx context.Context) AzureTableStorageLinkedServiceResponseOutput {
	return o
}

// The Azure key vault secret reference of accountKey in connection string.
func (o AzureTableStorageLinkedServiceResponseOutput) AccountKey() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse {
		return v.AccountKey
	}).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureTableStorageLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureTableStorageLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureTableStorageLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureTableStorageLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureTableStorageLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureTableStorageLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of sasToken in sas uri.
func (o AzureTableStorageLinkedServiceResponseOutput) SasToken() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse {
		return v.SasToken
	}).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureTableStorageLinkedServiceResponseOutput) SasUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) interface{} { return v.SasUri }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureTableStorageLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Binary dataset.
type BinaryDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the binary dataset.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the Binary storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// BinaryDatasetInput is an input type that accepts BinaryDatasetArgs and BinaryDatasetOutput values.
// You can construct a concrete instance of `BinaryDatasetInput` via:
//
//          BinaryDatasetArgs{...}
type BinaryDatasetInput interface {
	pulumi.Input

	ToBinaryDatasetOutput() BinaryDatasetOutput
	ToBinaryDatasetOutputWithContext(context.Context) BinaryDatasetOutput
}

// Binary dataset.
type BinaryDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the binary dataset.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The location of the Binary storage.
	Location pulumi.Input `pulumi:"location"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BinaryDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryDataset)(nil)).Elem()
}

func (i BinaryDatasetArgs) ToBinaryDatasetOutput() BinaryDatasetOutput {
	return i.ToBinaryDatasetOutputWithContext(context.Background())
}

func (i BinaryDatasetArgs) ToBinaryDatasetOutputWithContext(ctx context.Context) BinaryDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryDatasetOutput)
}

// Binary dataset.
type BinaryDatasetOutput struct{ *pulumi.OutputState }

func (BinaryDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryDataset)(nil)).Elem()
}

func (o BinaryDatasetOutput) ToBinaryDatasetOutput() BinaryDatasetOutput {
	return o
}

func (o BinaryDatasetOutput) ToBinaryDatasetOutputWithContext(ctx context.Context) BinaryDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o BinaryDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v BinaryDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the binary dataset.
func (o BinaryDatasetOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v BinaryDataset) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o BinaryDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BinaryDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o BinaryDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v BinaryDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o BinaryDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v BinaryDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The location of the Binary storage.
func (o BinaryDatasetOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v BinaryDataset) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o BinaryDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v BinaryDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o BinaryDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v BinaryDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o BinaryDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v BinaryDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o BinaryDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BinaryDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Binary dataset.
type BinaryDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the binary dataset.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the Binary storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// BinaryDatasetResponseInput is an input type that accepts BinaryDatasetResponseArgs and BinaryDatasetResponseOutput values.
// You can construct a concrete instance of `BinaryDatasetResponseInput` via:
//
//          BinaryDatasetResponseArgs{...}
type BinaryDatasetResponseInput interface {
	pulumi.Input

	ToBinaryDatasetResponseOutput() BinaryDatasetResponseOutput
	ToBinaryDatasetResponseOutputWithContext(context.Context) BinaryDatasetResponseOutput
}

// Binary dataset.
type BinaryDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the binary dataset.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// The location of the Binary storage.
	Location pulumi.Input `pulumi:"location"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BinaryDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryDatasetResponse)(nil)).Elem()
}

func (i BinaryDatasetResponseArgs) ToBinaryDatasetResponseOutput() BinaryDatasetResponseOutput {
	return i.ToBinaryDatasetResponseOutputWithContext(context.Background())
}

func (i BinaryDatasetResponseArgs) ToBinaryDatasetResponseOutputWithContext(ctx context.Context) BinaryDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryDatasetResponseOutput)
}

// Binary dataset.
type BinaryDatasetResponseOutput struct{ *pulumi.OutputState }

func (BinaryDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryDatasetResponse)(nil)).Elem()
}

func (o BinaryDatasetResponseOutput) ToBinaryDatasetResponseOutput() BinaryDatasetResponseOutput {
	return o
}

func (o BinaryDatasetResponseOutput) ToBinaryDatasetResponseOutputWithContext(ctx context.Context) BinaryDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o BinaryDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the binary dataset.
func (o BinaryDatasetResponseOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o BinaryDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o BinaryDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o BinaryDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The location of the Binary storage.
func (o BinaryDatasetResponseOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o BinaryDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o BinaryDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o BinaryDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o BinaryDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Cassandra data source.
type CassandraLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Host name for connection. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The port for the connection. Type: integer (or Expression with resultType integer).
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// CassandraLinkedServiceInput is an input type that accepts CassandraLinkedServiceArgs and CassandraLinkedServiceOutput values.
// You can construct a concrete instance of `CassandraLinkedServiceInput` via:
//
//          CassandraLinkedServiceArgs{...}
type CassandraLinkedServiceInput interface {
	pulumi.Input

	ToCassandraLinkedServiceOutput() CassandraLinkedServiceOutput
	ToCassandraLinkedServiceOutputWithContext(context.Context) CassandraLinkedServiceOutput
}

// Linked service for Cassandra data source.
type CassandraLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Host name for connection. Type: string (or Expression with resultType string).
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// The port for the connection. Type: integer (or Expression with resultType integer).
	Port pulumi.Input `pulumi:"port"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (CassandraLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraLinkedService)(nil)).Elem()
}

func (i CassandraLinkedServiceArgs) ToCassandraLinkedServiceOutput() CassandraLinkedServiceOutput {
	return i.ToCassandraLinkedServiceOutputWithContext(context.Background())
}

func (i CassandraLinkedServiceArgs) ToCassandraLinkedServiceOutputWithContext(ctx context.Context) CassandraLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraLinkedServiceOutput)
}

// Linked service for Cassandra data source.
type CassandraLinkedServiceOutput struct{ *pulumi.OutputState }

func (CassandraLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraLinkedService)(nil)).Elem()
}

func (o CassandraLinkedServiceOutput) ToCassandraLinkedServiceOutput() CassandraLinkedServiceOutput {
	return o
}

func (o CassandraLinkedServiceOutput) ToCassandraLinkedServiceOutputWithContext(ctx context.Context) CassandraLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CassandraLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CassandraLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
func (o CassandraLinkedServiceOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedService) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o CassandraLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v CassandraLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o CassandraLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CassandraLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o CassandraLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Host name for connection. Type: string (or Expression with resultType string).
func (o CassandraLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o CassandraLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CassandraLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for authentication.
func (o CassandraLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The port for the connection. Type: integer (or Expression with resultType integer).
func (o CassandraLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o CassandraLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o CassandraLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for Cassandra data source.
type CassandraLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Host name for connection. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The port for the connection. Type: integer (or Expression with resultType integer).
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// CassandraLinkedServiceResponseInput is an input type that accepts CassandraLinkedServiceResponseArgs and CassandraLinkedServiceResponseOutput values.
// You can construct a concrete instance of `CassandraLinkedServiceResponseInput` via:
//
//          CassandraLinkedServiceResponseArgs{...}
type CassandraLinkedServiceResponseInput interface {
	pulumi.Input

	ToCassandraLinkedServiceResponseOutput() CassandraLinkedServiceResponseOutput
	ToCassandraLinkedServiceResponseOutputWithContext(context.Context) CassandraLinkedServiceResponseOutput
}

// Linked service for Cassandra data source.
type CassandraLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Host name for connection. Type: string (or Expression with resultType string).
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// The port for the connection. Type: integer (or Expression with resultType integer).
	Port pulumi.Input `pulumi:"port"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (CassandraLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraLinkedServiceResponse)(nil)).Elem()
}

func (i CassandraLinkedServiceResponseArgs) ToCassandraLinkedServiceResponseOutput() CassandraLinkedServiceResponseOutput {
	return i.ToCassandraLinkedServiceResponseOutputWithContext(context.Background())
}

func (i CassandraLinkedServiceResponseArgs) ToCassandraLinkedServiceResponseOutputWithContext(ctx context.Context) CassandraLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraLinkedServiceResponseOutput)
}

// Linked service for Cassandra data source.
type CassandraLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (CassandraLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraLinkedServiceResponse)(nil)).Elem()
}

func (o CassandraLinkedServiceResponseOutput) ToCassandraLinkedServiceResponseOutput() CassandraLinkedServiceResponseOutput {
	return o
}

func (o CassandraLinkedServiceResponseOutput) ToCassandraLinkedServiceResponseOutputWithContext(ctx context.Context) CassandraLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CassandraLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
func (o CassandraLinkedServiceResponseOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o CassandraLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o CassandraLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o CassandraLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Host name for connection. Type: string (or Expression with resultType string).
func (o CassandraLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o CassandraLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for authentication.
func (o CassandraLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The port for the connection. Type: integer (or Expression with resultType integer).
func (o CassandraLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o CassandraLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o CassandraLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// The Cassandra database dataset.
type CassandraTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
	Keyspace interface{} `pulumi:"keyspace"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Cassandra database. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// CassandraTableDatasetInput is an input type that accepts CassandraTableDatasetArgs and CassandraTableDatasetOutput values.
// You can construct a concrete instance of `CassandraTableDatasetInput` via:
//
//          CassandraTableDatasetArgs{...}
type CassandraTableDatasetInput interface {
	pulumi.Input

	ToCassandraTableDatasetOutput() CassandraTableDatasetOutput
	ToCassandraTableDatasetOutputWithContext(context.Context) CassandraTableDatasetOutput
}

// The Cassandra database dataset.
type CassandraTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
	Keyspace pulumi.Input `pulumi:"keyspace"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Cassandra database. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CassandraTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraTableDataset)(nil)).Elem()
}

func (i CassandraTableDatasetArgs) ToCassandraTableDatasetOutput() CassandraTableDatasetOutput {
	return i.ToCassandraTableDatasetOutputWithContext(context.Background())
}

func (i CassandraTableDatasetArgs) ToCassandraTableDatasetOutputWithContext(ctx context.Context) CassandraTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraTableDatasetOutput)
}

// The Cassandra database dataset.
type CassandraTableDatasetOutput struct{ *pulumi.OutputState }

func (CassandraTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraTableDataset)(nil)).Elem()
}

func (o CassandraTableDatasetOutput) ToCassandraTableDatasetOutput() CassandraTableDatasetOutput {
	return o
}

func (o CassandraTableDatasetOutput) ToCassandraTableDatasetOutputWithContext(ctx context.Context) CassandraTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CassandraTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CassandraTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o CassandraTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CassandraTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CassandraTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v CassandraTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
func (o CassandraTableDatasetOutput) Keyspace() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraTableDataset) interface{} { return v.Keyspace }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o CassandraTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v CassandraTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o CassandraTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CassandraTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CassandraTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CassandraTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Cassandra database. Type: string (or Expression with resultType string).
func (o CassandraTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o CassandraTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Cassandra database dataset.
type CassandraTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
	Keyspace interface{} `pulumi:"keyspace"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Cassandra database. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// CassandraTableDatasetResponseInput is an input type that accepts CassandraTableDatasetResponseArgs and CassandraTableDatasetResponseOutput values.
// You can construct a concrete instance of `CassandraTableDatasetResponseInput` via:
//
//          CassandraTableDatasetResponseArgs{...}
type CassandraTableDatasetResponseInput interface {
	pulumi.Input

	ToCassandraTableDatasetResponseOutput() CassandraTableDatasetResponseOutput
	ToCassandraTableDatasetResponseOutputWithContext(context.Context) CassandraTableDatasetResponseOutput
}

// The Cassandra database dataset.
type CassandraTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
	Keyspace pulumi.Input `pulumi:"keyspace"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Cassandra database. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CassandraTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraTableDatasetResponse)(nil)).Elem()
}

func (i CassandraTableDatasetResponseArgs) ToCassandraTableDatasetResponseOutput() CassandraTableDatasetResponseOutput {
	return i.ToCassandraTableDatasetResponseOutputWithContext(context.Background())
}

func (i CassandraTableDatasetResponseArgs) ToCassandraTableDatasetResponseOutputWithContext(ctx context.Context) CassandraTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraTableDatasetResponseOutput)
}

// The Cassandra database dataset.
type CassandraTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (CassandraTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraTableDatasetResponse)(nil)).Elem()
}

func (o CassandraTableDatasetResponseOutput) ToCassandraTableDatasetResponseOutput() CassandraTableDatasetResponseOutput {
	return o
}

func (o CassandraTableDatasetResponseOutput) ToCassandraTableDatasetResponseOutputWithContext(ctx context.Context) CassandraTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CassandraTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o CassandraTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CassandraTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
func (o CassandraTableDatasetResponseOutput) Keyspace() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) interface{} { return v.Keyspace }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o CassandraTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o CassandraTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CassandraTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CassandraTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Cassandra database. Type: string (or Expression with resultType string).
func (o CassandraTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o CassandraTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs.
type ChainingTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Upstream Pipelines.
	DependsOn []PipelineReference `pulumi:"dependsOn"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipeline for which runs are created when all upstream pipelines complete successfully.
	Pipeline TriggerPipelineReference `pulumi:"pipeline"`
	// Run Dimension property that needs to be emitted by upstream pipelines.
	RunDimension string `pulumi:"runDimension"`
	// Trigger type.
	Type string `pulumi:"type"`
}

// ChainingTriggerInput is an input type that accepts ChainingTriggerArgs and ChainingTriggerOutput values.
// You can construct a concrete instance of `ChainingTriggerInput` via:
//
//          ChainingTriggerArgs{...}
type ChainingTriggerInput interface {
	pulumi.Input

	ToChainingTriggerOutput() ChainingTriggerOutput
	ToChainingTriggerOutputWithContext(context.Context) ChainingTriggerOutput
}

// Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs.
type ChainingTriggerArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Upstream Pipelines.
	DependsOn PipelineReferenceArrayInput `pulumi:"dependsOn"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Pipeline for which runs are created when all upstream pipelines complete successfully.
	Pipeline TriggerPipelineReferenceInput `pulumi:"pipeline"`
	// Run Dimension property that needs to be emitted by upstream pipelines.
	RunDimension pulumi.StringInput `pulumi:"runDimension"`
	// Trigger type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ChainingTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChainingTrigger)(nil)).Elem()
}

func (i ChainingTriggerArgs) ToChainingTriggerOutput() ChainingTriggerOutput {
	return i.ToChainingTriggerOutputWithContext(context.Background())
}

func (i ChainingTriggerArgs) ToChainingTriggerOutputWithContext(ctx context.Context) ChainingTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChainingTriggerOutput)
}

// Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs.
type ChainingTriggerOutput struct{ *pulumi.OutputState }

func (ChainingTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChainingTrigger)(nil)).Elem()
}

func (o ChainingTriggerOutput) ToChainingTriggerOutput() ChainingTriggerOutput {
	return o
}

func (o ChainingTriggerOutput) ToChainingTriggerOutputWithContext(ctx context.Context) ChainingTriggerOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o ChainingTriggerOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ChainingTrigger) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Upstream Pipelines.
func (o ChainingTriggerOutput) DependsOn() PipelineReferenceArrayOutput {
	return o.ApplyT(func(v ChainingTrigger) []PipelineReference { return v.DependsOn }).(PipelineReferenceArrayOutput)
}

// Trigger description.
func (o ChainingTriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChainingTrigger) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Pipeline for which runs are created when all upstream pipelines complete successfully.
func (o ChainingTriggerOutput) Pipeline() TriggerPipelineReferenceOutput {
	return o.ApplyT(func(v ChainingTrigger) TriggerPipelineReference { return v.Pipeline }).(TriggerPipelineReferenceOutput)
}

// Run Dimension property that needs to be emitted by upstream pipelines.
func (o ChainingTriggerOutput) RunDimension() pulumi.StringOutput {
	return o.ApplyT(func(v ChainingTrigger) string { return v.RunDimension }).(pulumi.StringOutput)
}

// Trigger type.
func (o ChainingTriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ChainingTrigger) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs.
type ChainingTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Upstream Pipelines.
	DependsOn []PipelineReferenceResponse `pulumi:"dependsOn"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipeline for which runs are created when all upstream pipelines complete successfully.
	Pipeline TriggerPipelineReferenceResponse `pulumi:"pipeline"`
	// Run Dimension property that needs to be emitted by upstream pipelines.
	RunDimension string `pulumi:"runDimension"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	Type string `pulumi:"type"`
}

// ChainingTriggerResponseInput is an input type that accepts ChainingTriggerResponseArgs and ChainingTriggerResponseOutput values.
// You can construct a concrete instance of `ChainingTriggerResponseInput` via:
//
//          ChainingTriggerResponseArgs{...}
type ChainingTriggerResponseInput interface {
	pulumi.Input

	ToChainingTriggerResponseOutput() ChainingTriggerResponseOutput
	ToChainingTriggerResponseOutputWithContext(context.Context) ChainingTriggerResponseOutput
}

// Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs.
type ChainingTriggerResponseArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Upstream Pipelines.
	DependsOn PipelineReferenceResponseArrayInput `pulumi:"dependsOn"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Pipeline for which runs are created when all upstream pipelines complete successfully.
	Pipeline TriggerPipelineReferenceResponseInput `pulumi:"pipeline"`
	// Run Dimension property that needs to be emitted by upstream pipelines.
	RunDimension pulumi.StringInput `pulumi:"runDimension"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState pulumi.StringInput `pulumi:"runtimeState"`
	// Trigger type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ChainingTriggerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChainingTriggerResponse)(nil)).Elem()
}

func (i ChainingTriggerResponseArgs) ToChainingTriggerResponseOutput() ChainingTriggerResponseOutput {
	return i.ToChainingTriggerResponseOutputWithContext(context.Background())
}

func (i ChainingTriggerResponseArgs) ToChainingTriggerResponseOutputWithContext(ctx context.Context) ChainingTriggerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChainingTriggerResponseOutput)
}

// Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs.
type ChainingTriggerResponseOutput struct{ *pulumi.OutputState }

func (ChainingTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChainingTriggerResponse)(nil)).Elem()
}

func (o ChainingTriggerResponseOutput) ToChainingTriggerResponseOutput() ChainingTriggerResponseOutput {
	return o
}

func (o ChainingTriggerResponseOutput) ToChainingTriggerResponseOutputWithContext(ctx context.Context) ChainingTriggerResponseOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o ChainingTriggerResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ChainingTriggerResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Upstream Pipelines.
func (o ChainingTriggerResponseOutput) DependsOn() PipelineReferenceResponseArrayOutput {
	return o.ApplyT(func(v ChainingTriggerResponse) []PipelineReferenceResponse { return v.DependsOn }).(PipelineReferenceResponseArrayOutput)
}

// Trigger description.
func (o ChainingTriggerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChainingTriggerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Pipeline for which runs are created when all upstream pipelines complete successfully.
func (o ChainingTriggerResponseOutput) Pipeline() TriggerPipelineReferenceResponseOutput {
	return o.ApplyT(func(v ChainingTriggerResponse) TriggerPipelineReferenceResponse { return v.Pipeline }).(TriggerPipelineReferenceResponseOutput)
}

// Run Dimension property that needs to be emitted by upstream pipelines.
func (o ChainingTriggerResponseOutput) RunDimension() pulumi.StringOutput {
	return o.ApplyT(func(v ChainingTriggerResponse) string { return v.RunDimension }).(pulumi.StringOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o ChainingTriggerResponseOutput) RuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v ChainingTriggerResponse) string { return v.RuntimeState }).(pulumi.StringOutput)
}

// Trigger type.
func (o ChainingTriggerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ChainingTriggerResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The custom setup of running cmdkey commands.
type CmdkeySetup struct {
	// The password of data source access.
	Password interface{} `pulumi:"password"`
	// The server name of data source access.
	TargetName interface{} `pulumi:"targetName"`
	// The type of custom setup.
	Type string `pulumi:"type"`
	// The user name of data source access.
	UserName interface{} `pulumi:"userName"`
}

// CmdkeySetupInput is an input type that accepts CmdkeySetupArgs and CmdkeySetupOutput values.
// You can construct a concrete instance of `CmdkeySetupInput` via:
//
//          CmdkeySetupArgs{...}
type CmdkeySetupInput interface {
	pulumi.Input

	ToCmdkeySetupOutput() CmdkeySetupOutput
	ToCmdkeySetupOutputWithContext(context.Context) CmdkeySetupOutput
}

// The custom setup of running cmdkey commands.
type CmdkeySetupArgs struct {
	// The password of data source access.
	Password pulumi.Input `pulumi:"password"`
	// The server name of data source access.
	TargetName pulumi.Input `pulumi:"targetName"`
	// The type of custom setup.
	Type pulumi.StringInput `pulumi:"type"`
	// The user name of data source access.
	UserName pulumi.Input `pulumi:"userName"`
}

func (CmdkeySetupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CmdkeySetup)(nil)).Elem()
}

func (i CmdkeySetupArgs) ToCmdkeySetupOutput() CmdkeySetupOutput {
	return i.ToCmdkeySetupOutputWithContext(context.Background())
}

func (i CmdkeySetupArgs) ToCmdkeySetupOutputWithContext(ctx context.Context) CmdkeySetupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmdkeySetupOutput)
}

// The custom setup of running cmdkey commands.
type CmdkeySetupOutput struct{ *pulumi.OutputState }

func (CmdkeySetupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CmdkeySetup)(nil)).Elem()
}

func (o CmdkeySetupOutput) ToCmdkeySetupOutput() CmdkeySetupOutput {
	return o
}

func (o CmdkeySetupOutput) ToCmdkeySetupOutputWithContext(ctx context.Context) CmdkeySetupOutput {
	return o
}

// The password of data source access.
func (o CmdkeySetupOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v CmdkeySetup) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The server name of data source access.
func (o CmdkeySetupOutput) TargetName() pulumi.AnyOutput {
	return o.ApplyT(func(v CmdkeySetup) interface{} { return v.TargetName }).(pulumi.AnyOutput)
}

// The type of custom setup.
func (o CmdkeySetupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CmdkeySetup) string { return v.Type }).(pulumi.StringOutput)
}

// The user name of data source access.
func (o CmdkeySetupOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v CmdkeySetup) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The custom setup of running cmdkey commands.
type CmdkeySetupResponse struct {
	// The password of data source access.
	Password interface{} `pulumi:"password"`
	// The server name of data source access.
	TargetName interface{} `pulumi:"targetName"`
	// The type of custom setup.
	Type string `pulumi:"type"`
	// The user name of data source access.
	UserName interface{} `pulumi:"userName"`
}

// CmdkeySetupResponseInput is an input type that accepts CmdkeySetupResponseArgs and CmdkeySetupResponseOutput values.
// You can construct a concrete instance of `CmdkeySetupResponseInput` via:
//
//          CmdkeySetupResponseArgs{...}
type CmdkeySetupResponseInput interface {
	pulumi.Input

	ToCmdkeySetupResponseOutput() CmdkeySetupResponseOutput
	ToCmdkeySetupResponseOutputWithContext(context.Context) CmdkeySetupResponseOutput
}

// The custom setup of running cmdkey commands.
type CmdkeySetupResponseArgs struct {
	// The password of data source access.
	Password pulumi.Input `pulumi:"password"`
	// The server name of data source access.
	TargetName pulumi.Input `pulumi:"targetName"`
	// The type of custom setup.
	Type pulumi.StringInput `pulumi:"type"`
	// The user name of data source access.
	UserName pulumi.Input `pulumi:"userName"`
}

func (CmdkeySetupResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CmdkeySetupResponse)(nil)).Elem()
}

func (i CmdkeySetupResponseArgs) ToCmdkeySetupResponseOutput() CmdkeySetupResponseOutput {
	return i.ToCmdkeySetupResponseOutputWithContext(context.Background())
}

func (i CmdkeySetupResponseArgs) ToCmdkeySetupResponseOutputWithContext(ctx context.Context) CmdkeySetupResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmdkeySetupResponseOutput)
}

// The custom setup of running cmdkey commands.
type CmdkeySetupResponseOutput struct{ *pulumi.OutputState }

func (CmdkeySetupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CmdkeySetupResponse)(nil)).Elem()
}

func (o CmdkeySetupResponseOutput) ToCmdkeySetupResponseOutput() CmdkeySetupResponseOutput {
	return o
}

func (o CmdkeySetupResponseOutput) ToCmdkeySetupResponseOutputWithContext(ctx context.Context) CmdkeySetupResponseOutput {
	return o
}

// The password of data source access.
func (o CmdkeySetupResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v CmdkeySetupResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The server name of data source access.
func (o CmdkeySetupResponseOutput) TargetName() pulumi.AnyOutput {
	return o.ApplyT(func(v CmdkeySetupResponse) interface{} { return v.TargetName }).(pulumi.AnyOutput)
}

// The type of custom setup.
func (o CmdkeySetupResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CmdkeySetupResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The user name of data source access.
func (o CmdkeySetupResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v CmdkeySetupResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The Common Data Service for Apps entity dataset.
type CommonDataServiceForAppsEntityDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// CommonDataServiceForAppsEntityDatasetInput is an input type that accepts CommonDataServiceForAppsEntityDatasetArgs and CommonDataServiceForAppsEntityDatasetOutput values.
// You can construct a concrete instance of `CommonDataServiceForAppsEntityDatasetInput` via:
//
//          CommonDataServiceForAppsEntityDatasetArgs{...}
type CommonDataServiceForAppsEntityDatasetInput interface {
	pulumi.Input

	ToCommonDataServiceForAppsEntityDatasetOutput() CommonDataServiceForAppsEntityDatasetOutput
	ToCommonDataServiceForAppsEntityDatasetOutputWithContext(context.Context) CommonDataServiceForAppsEntityDatasetOutput
}

// The Common Data Service for Apps entity dataset.
type CommonDataServiceForAppsEntityDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName pulumi.Input `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CommonDataServiceForAppsEntityDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsEntityDataset)(nil)).Elem()
}

func (i CommonDataServiceForAppsEntityDatasetArgs) ToCommonDataServiceForAppsEntityDatasetOutput() CommonDataServiceForAppsEntityDatasetOutput {
	return i.ToCommonDataServiceForAppsEntityDatasetOutputWithContext(context.Background())
}

func (i CommonDataServiceForAppsEntityDatasetArgs) ToCommonDataServiceForAppsEntityDatasetOutputWithContext(ctx context.Context) CommonDataServiceForAppsEntityDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonDataServiceForAppsEntityDatasetOutput)
}

// The Common Data Service for Apps entity dataset.
type CommonDataServiceForAppsEntityDatasetOutput struct{ *pulumi.OutputState }

func (CommonDataServiceForAppsEntityDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsEntityDataset)(nil)).Elem()
}

func (o CommonDataServiceForAppsEntityDatasetOutput) ToCommonDataServiceForAppsEntityDatasetOutput() CommonDataServiceForAppsEntityDatasetOutput {
	return o
}

func (o CommonDataServiceForAppsEntityDatasetOutput) ToCommonDataServiceForAppsEntityDatasetOutputWithContext(ctx context.Context) CommonDataServiceForAppsEntityDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CommonDataServiceForAppsEntityDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o CommonDataServiceForAppsEntityDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The logical name of the entity. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsEntityDatasetOutput) EntityName() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDataset) interface{} { return v.EntityName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CommonDataServiceForAppsEntityDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o CommonDataServiceForAppsEntityDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o CommonDataServiceForAppsEntityDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CommonDataServiceForAppsEntityDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CommonDataServiceForAppsEntityDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o CommonDataServiceForAppsEntityDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Common Data Service for Apps entity dataset.
type CommonDataServiceForAppsEntityDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// CommonDataServiceForAppsEntityDatasetResponseInput is an input type that accepts CommonDataServiceForAppsEntityDatasetResponseArgs and CommonDataServiceForAppsEntityDatasetResponseOutput values.
// You can construct a concrete instance of `CommonDataServiceForAppsEntityDatasetResponseInput` via:
//
//          CommonDataServiceForAppsEntityDatasetResponseArgs{...}
type CommonDataServiceForAppsEntityDatasetResponseInput interface {
	pulumi.Input

	ToCommonDataServiceForAppsEntityDatasetResponseOutput() CommonDataServiceForAppsEntityDatasetResponseOutput
	ToCommonDataServiceForAppsEntityDatasetResponseOutputWithContext(context.Context) CommonDataServiceForAppsEntityDatasetResponseOutput
}

// The Common Data Service for Apps entity dataset.
type CommonDataServiceForAppsEntityDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName pulumi.Input `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CommonDataServiceForAppsEntityDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsEntityDatasetResponse)(nil)).Elem()
}

func (i CommonDataServiceForAppsEntityDatasetResponseArgs) ToCommonDataServiceForAppsEntityDatasetResponseOutput() CommonDataServiceForAppsEntityDatasetResponseOutput {
	return i.ToCommonDataServiceForAppsEntityDatasetResponseOutputWithContext(context.Background())
}

func (i CommonDataServiceForAppsEntityDatasetResponseArgs) ToCommonDataServiceForAppsEntityDatasetResponseOutputWithContext(ctx context.Context) CommonDataServiceForAppsEntityDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonDataServiceForAppsEntityDatasetResponseOutput)
}

// The Common Data Service for Apps entity dataset.
type CommonDataServiceForAppsEntityDatasetResponseOutput struct{ *pulumi.OutputState }

func (CommonDataServiceForAppsEntityDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsEntityDatasetResponse)(nil)).Elem()
}

func (o CommonDataServiceForAppsEntityDatasetResponseOutput) ToCommonDataServiceForAppsEntityDatasetResponseOutput() CommonDataServiceForAppsEntityDatasetResponseOutput {
	return o
}

func (o CommonDataServiceForAppsEntityDatasetResponseOutput) ToCommonDataServiceForAppsEntityDatasetResponseOutputWithContext(ctx context.Context) CommonDataServiceForAppsEntityDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CommonDataServiceForAppsEntityDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o CommonDataServiceForAppsEntityDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The logical name of the entity. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsEntityDatasetResponseOutput) EntityName() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDatasetResponse) interface{} { return v.EntityName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CommonDataServiceForAppsEntityDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o CommonDataServiceForAppsEntityDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o CommonDataServiceForAppsEntityDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CommonDataServiceForAppsEntityDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CommonDataServiceForAppsEntityDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o CommonDataServiceForAppsEntityDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Common Data Service for Apps linked service.
type CommonDataServiceForAppsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Common Data Service for Apps server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The deployment type of the Common Data Service for Apps instance. 'Online' for Common Data Service for Apps Online and 'OnPremisesWithIfd' for Common Data Service for Apps on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType string `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The host name of the on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Common Data Service for Apps instance. The property is required for on-prem and required for online when there are more than one Common Data Service for Apps instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the Common Data Service for Apps instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType *string `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Common Data Service for Apps server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User name to access the Common Data Service for Apps instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// CommonDataServiceForAppsLinkedServiceInput is an input type that accepts CommonDataServiceForAppsLinkedServiceArgs and CommonDataServiceForAppsLinkedServiceOutput values.
// You can construct a concrete instance of `CommonDataServiceForAppsLinkedServiceInput` via:
//
//          CommonDataServiceForAppsLinkedServiceArgs{...}
type CommonDataServiceForAppsLinkedServiceInput interface {
	pulumi.Input

	ToCommonDataServiceForAppsLinkedServiceOutput() CommonDataServiceForAppsLinkedServiceOutput
	ToCommonDataServiceForAppsLinkedServiceOutputWithContext(context.Context) CommonDataServiceForAppsLinkedServiceOutput
}

// Common Data Service for Apps linked service.
type CommonDataServiceForAppsLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to connect to Common Data Service for Apps server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The deployment type of the Common Data Service for Apps instance. 'Online' for Common Data Service for Apps Online and 'OnPremisesWithIfd' for Common Data Service for Apps on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The host name of the on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName pulumi.Input `pulumi:"hostName"`
	// The organization name of the Common Data Service for Apps instance. The property is required for on-prem and required for online when there are more than one Common Data Service for Apps instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName pulumi.Input `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to access the Common Data Service for Apps instance.
	Password pulumi.Input `pulumi:"password"`
	// The port of on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.Input `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential pulumi.Input `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType pulumi.StringPtrInput `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Common Data Service for Apps server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri pulumi.Input `pulumi:"serviceUri"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// User name to access the Common Data Service for Apps instance. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (CommonDataServiceForAppsLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsLinkedService)(nil)).Elem()
}

func (i CommonDataServiceForAppsLinkedServiceArgs) ToCommonDataServiceForAppsLinkedServiceOutput() CommonDataServiceForAppsLinkedServiceOutput {
	return i.ToCommonDataServiceForAppsLinkedServiceOutputWithContext(context.Background())
}

func (i CommonDataServiceForAppsLinkedServiceArgs) ToCommonDataServiceForAppsLinkedServiceOutputWithContext(ctx context.Context) CommonDataServiceForAppsLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonDataServiceForAppsLinkedServiceOutput)
}

// Common Data Service for Apps linked service.
type CommonDataServiceForAppsLinkedServiceOutput struct{ *pulumi.OutputState }

func (CommonDataServiceForAppsLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsLinkedService)(nil)).Elem()
}

func (o CommonDataServiceForAppsLinkedServiceOutput) ToCommonDataServiceForAppsLinkedServiceOutput() CommonDataServiceForAppsLinkedServiceOutput {
	return o
}

func (o CommonDataServiceForAppsLinkedServiceOutput) ToCommonDataServiceForAppsLinkedServiceOutputWithContext(ctx context.Context) CommonDataServiceForAppsLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CommonDataServiceForAppsLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to connect to Common Data Service for Apps server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o CommonDataServiceForAppsLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The deployment type of the Common Data Service for Apps instance. 'Online' for Common Data Service for Apps Online and 'OnPremisesWithIfd' for Common Data Service for Apps on-premises with Ifd. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// Linked service description.
func (o CommonDataServiceForAppsLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The host name of the on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceOutput) HostName() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.HostName }).(pulumi.AnyOutput)
}

// The organization name of the Common Data Service for Apps instance. The property is required for on-prem and required for online when there are more than one Common Data Service for Apps instances associated with the user. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceOutput) OrganizationName() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.OrganizationName }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o CommonDataServiceForAppsLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to access the Common Data Service for Apps instance.
func (o CommonDataServiceForAppsLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The port of on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
func (o CommonDataServiceForAppsLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o CommonDataServiceForAppsLinkedServiceOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceOutput) ServicePrincipalCredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) *string { return v.ServicePrincipalCredentialType }).(pulumi.StringPtrOutput)
}

// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The URL to the Microsoft Common Data Service for Apps server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceOutput) ServiceUri() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.ServiceUri }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o CommonDataServiceForAppsLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// User name to access the Common Data Service for Apps instance. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Common Data Service for Apps linked service.
type CommonDataServiceForAppsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Common Data Service for Apps server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The deployment type of the Common Data Service for Apps instance. 'Online' for Common Data Service for Apps Online and 'OnPremisesWithIfd' for Common Data Service for Apps on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType string `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The host name of the on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Common Data Service for Apps instance. The property is required for on-prem and required for online when there are more than one Common Data Service for Apps instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the Common Data Service for Apps instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType *string `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Common Data Service for Apps server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User name to access the Common Data Service for Apps instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// CommonDataServiceForAppsLinkedServiceResponseInput is an input type that accepts CommonDataServiceForAppsLinkedServiceResponseArgs and CommonDataServiceForAppsLinkedServiceResponseOutput values.
// You can construct a concrete instance of `CommonDataServiceForAppsLinkedServiceResponseInput` via:
//
//          CommonDataServiceForAppsLinkedServiceResponseArgs{...}
type CommonDataServiceForAppsLinkedServiceResponseInput interface {
	pulumi.Input

	ToCommonDataServiceForAppsLinkedServiceResponseOutput() CommonDataServiceForAppsLinkedServiceResponseOutput
	ToCommonDataServiceForAppsLinkedServiceResponseOutputWithContext(context.Context) CommonDataServiceForAppsLinkedServiceResponseOutput
}

// Common Data Service for Apps linked service.
type CommonDataServiceForAppsLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to connect to Common Data Service for Apps server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The deployment type of the Common Data Service for Apps instance. 'Online' for Common Data Service for Apps Online and 'OnPremisesWithIfd' for Common Data Service for Apps on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The host name of the on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName pulumi.Input `pulumi:"hostName"`
	// The organization name of the Common Data Service for Apps instance. The property is required for on-prem and required for online when there are more than one Common Data Service for Apps instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName pulumi.Input `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password to access the Common Data Service for Apps instance.
	Password pulumi.Input `pulumi:"password"`
	// The port of on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.Input `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential pulumi.Input `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType pulumi.StringPtrInput `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Common Data Service for Apps server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri pulumi.Input `pulumi:"serviceUri"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// User name to access the Common Data Service for Apps instance. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (CommonDataServiceForAppsLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsLinkedServiceResponse)(nil)).Elem()
}

func (i CommonDataServiceForAppsLinkedServiceResponseArgs) ToCommonDataServiceForAppsLinkedServiceResponseOutput() CommonDataServiceForAppsLinkedServiceResponseOutput {
	return i.ToCommonDataServiceForAppsLinkedServiceResponseOutputWithContext(context.Background())
}

func (i CommonDataServiceForAppsLinkedServiceResponseArgs) ToCommonDataServiceForAppsLinkedServiceResponseOutputWithContext(ctx context.Context) CommonDataServiceForAppsLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonDataServiceForAppsLinkedServiceResponseOutput)
}

// Common Data Service for Apps linked service.
type CommonDataServiceForAppsLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (CommonDataServiceForAppsLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsLinkedServiceResponse)(nil)).Elem()
}

func (o CommonDataServiceForAppsLinkedServiceResponseOutput) ToCommonDataServiceForAppsLinkedServiceResponseOutput() CommonDataServiceForAppsLinkedServiceResponseOutput {
	return o
}

func (o CommonDataServiceForAppsLinkedServiceResponseOutput) ToCommonDataServiceForAppsLinkedServiceResponseOutputWithContext(ctx context.Context) CommonDataServiceForAppsLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to connect to Common Data Service for Apps server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The deployment type of the Common Data Service for Apps instance. 'Online' for Common Data Service for Apps Online and 'OnPremisesWithIfd' for Common Data Service for Apps on-premises with Ifd. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// Linked service description.
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The host name of the on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) HostName() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} { return v.HostName }).(pulumi.AnyOutput)
}

// The organization name of the Common Data Service for Apps instance. The property is required for on-prem and required for online when there are more than one Common Data Service for Apps instances associated with the user. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) OrganizationName() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} { return v.OrganizationName }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Password to access the Common Data Service for Apps instance.
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The port of on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) ServicePrincipalCredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) *string { return v.ServicePrincipalCredentialType }).(pulumi.StringPtrOutput)
}

// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The URL to the Microsoft Common Data Service for Apps server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) ServiceUri() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} { return v.ServiceUri }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name to access the Common Data Service for Apps instance. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// The custom setup of installing 3rd party components.
type ComponentSetup struct {
	// The name of the 3rd party component.
	ComponentName string `pulumi:"componentName"`
	// The license key to activate the component.
	LicenseKey interface{} `pulumi:"licenseKey"`
	// The type of custom setup.
	Type string `pulumi:"type"`
}

// ComponentSetupInput is an input type that accepts ComponentSetupArgs and ComponentSetupOutput values.
// You can construct a concrete instance of `ComponentSetupInput` via:
//
//          ComponentSetupArgs{...}
type ComponentSetupInput interface {
	pulumi.Input

	ToComponentSetupOutput() ComponentSetupOutput
	ToComponentSetupOutputWithContext(context.Context) ComponentSetupOutput
}

// The custom setup of installing 3rd party components.
type ComponentSetupArgs struct {
	// The name of the 3rd party component.
	ComponentName pulumi.StringInput `pulumi:"componentName"`
	// The license key to activate the component.
	LicenseKey pulumi.Input `pulumi:"licenseKey"`
	// The type of custom setup.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ComponentSetupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentSetup)(nil)).Elem()
}

func (i ComponentSetupArgs) ToComponentSetupOutput() ComponentSetupOutput {
	return i.ToComponentSetupOutputWithContext(context.Background())
}

func (i ComponentSetupArgs) ToComponentSetupOutputWithContext(ctx context.Context) ComponentSetupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentSetupOutput)
}

// The custom setup of installing 3rd party components.
type ComponentSetupOutput struct{ *pulumi.OutputState }

func (ComponentSetupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentSetup)(nil)).Elem()
}

func (o ComponentSetupOutput) ToComponentSetupOutput() ComponentSetupOutput {
	return o
}

func (o ComponentSetupOutput) ToComponentSetupOutputWithContext(ctx context.Context) ComponentSetupOutput {
	return o
}

// The name of the 3rd party component.
func (o ComponentSetupOutput) ComponentName() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentSetup) string { return v.ComponentName }).(pulumi.StringOutput)
}

// The license key to activate the component.
func (o ComponentSetupOutput) LicenseKey() pulumi.AnyOutput {
	return o.ApplyT(func(v ComponentSetup) interface{} { return v.LicenseKey }).(pulumi.AnyOutput)
}

// The type of custom setup.
func (o ComponentSetupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentSetup) string { return v.Type }).(pulumi.StringOutput)
}

// The custom setup of installing 3rd party components.
type ComponentSetupResponse struct {
	// The name of the 3rd party component.
	ComponentName string `pulumi:"componentName"`
	// The license key to activate the component.
	LicenseKey interface{} `pulumi:"licenseKey"`
	// The type of custom setup.
	Type string `pulumi:"type"`
}

// ComponentSetupResponseInput is an input type that accepts ComponentSetupResponseArgs and ComponentSetupResponseOutput values.
// You can construct a concrete instance of `ComponentSetupResponseInput` via:
//
//          ComponentSetupResponseArgs{...}
type ComponentSetupResponseInput interface {
	pulumi.Input

	ToComponentSetupResponseOutput() ComponentSetupResponseOutput
	ToComponentSetupResponseOutputWithContext(context.Context) ComponentSetupResponseOutput
}

// The custom setup of installing 3rd party components.
type ComponentSetupResponseArgs struct {
	// The name of the 3rd party component.
	ComponentName pulumi.StringInput `pulumi:"componentName"`
	// The license key to activate the component.
	LicenseKey pulumi.Input `pulumi:"licenseKey"`
	// The type of custom setup.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ComponentSetupResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentSetupResponse)(nil)).Elem()
}

func (i ComponentSetupResponseArgs) ToComponentSetupResponseOutput() ComponentSetupResponseOutput {
	return i.ToComponentSetupResponseOutputWithContext(context.Background())
}

func (i ComponentSetupResponseArgs) ToComponentSetupResponseOutputWithContext(ctx context.Context) ComponentSetupResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentSetupResponseOutput)
}

// The custom setup of installing 3rd party components.
type ComponentSetupResponseOutput struct{ *pulumi.OutputState }

func (ComponentSetupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentSetupResponse)(nil)).Elem()
}

func (o ComponentSetupResponseOutput) ToComponentSetupResponseOutput() ComponentSetupResponseOutput {
	return o
}

func (o ComponentSetupResponseOutput) ToComponentSetupResponseOutputWithContext(ctx context.Context) ComponentSetupResponseOutput {
	return o
}

// The name of the 3rd party component.
func (o ComponentSetupResponseOutput) ComponentName() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentSetupResponse) string { return v.ComponentName }).(pulumi.StringOutput)
}

// The license key to activate the component.
func (o ComponentSetupResponseOutput) LicenseKey() pulumi.AnyOutput {
	return o.ApplyT(func(v ComponentSetupResponse) interface{} { return v.LicenseKey }).(pulumi.AnyOutput)
}

// The type of custom setup.
func (o ComponentSetupResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentSetupResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Concur Service linked service.
type ConcurLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Application client_id supplied by Concur App Management.
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to Concur. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Concur Service.
	Username interface{} `pulumi:"username"`
}

// ConcurLinkedServiceInput is an input type that accepts ConcurLinkedServiceArgs and ConcurLinkedServiceOutput values.
// You can construct a concrete instance of `ConcurLinkedServiceInput` via:
//
//          ConcurLinkedServiceArgs{...}
type ConcurLinkedServiceInput interface {
	pulumi.Input

	ToConcurLinkedServiceOutput() ConcurLinkedServiceOutput
	ToConcurLinkedServiceOutputWithContext(context.Context) ConcurLinkedServiceOutput
}

// Concur Service linked service.
type ConcurLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Application client_id supplied by Concur App Management.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Properties used to connect to Concur. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties pulumi.Input `pulumi:"connectionProperties"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
	// The user name that you use to access Concur Service.
	Username pulumi.Input `pulumi:"username"`
}

func (ConcurLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurLinkedService)(nil)).Elem()
}

func (i ConcurLinkedServiceArgs) ToConcurLinkedServiceOutput() ConcurLinkedServiceOutput {
	return i.ToConcurLinkedServiceOutputWithContext(context.Background())
}

func (i ConcurLinkedServiceArgs) ToConcurLinkedServiceOutputWithContext(ctx context.Context) ConcurLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConcurLinkedServiceOutput)
}

// Concur Service linked service.
type ConcurLinkedServiceOutput struct{ *pulumi.OutputState }

func (ConcurLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurLinkedService)(nil)).Elem()
}

func (o ConcurLinkedServiceOutput) ToConcurLinkedServiceOutput() ConcurLinkedServiceOutput {
	return o
}

func (o ConcurLinkedServiceOutput) ToConcurLinkedServiceOutputWithContext(ctx context.Context) ConcurLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o ConcurLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConcurLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Application client_id supplied by Concur App Management.
func (o ConcurLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ConcurLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v ConcurLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Properties used to connect to Concur. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o ConcurLinkedServiceOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedService) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// Linked service description.
func (o ConcurLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConcurLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ConcurLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ConcurLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ConcurLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name that you provided in the username field.
func (o ConcurLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o ConcurLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConcurLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ConcurLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ConcurLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ConcurLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The user name that you use to access Concur Service.
func (o ConcurLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Concur Service linked service.
type ConcurLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Application client_id supplied by Concur App Management.
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to Concur. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Concur Service.
	Username interface{} `pulumi:"username"`
}

// ConcurLinkedServiceResponseInput is an input type that accepts ConcurLinkedServiceResponseArgs and ConcurLinkedServiceResponseOutput values.
// You can construct a concrete instance of `ConcurLinkedServiceResponseInput` via:
//
//          ConcurLinkedServiceResponseArgs{...}
type ConcurLinkedServiceResponseInput interface {
	pulumi.Input

	ToConcurLinkedServiceResponseOutput() ConcurLinkedServiceResponseOutput
	ToConcurLinkedServiceResponseOutputWithContext(context.Context) ConcurLinkedServiceResponseOutput
}

// Concur Service linked service.
type ConcurLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Application client_id supplied by Concur App Management.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Properties used to connect to Concur. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties pulumi.Input `pulumi:"connectionProperties"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
	// The user name that you use to access Concur Service.
	Username pulumi.Input `pulumi:"username"`
}

func (ConcurLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurLinkedServiceResponse)(nil)).Elem()
}

func (i ConcurLinkedServiceResponseArgs) ToConcurLinkedServiceResponseOutput() ConcurLinkedServiceResponseOutput {
	return i.ToConcurLinkedServiceResponseOutputWithContext(context.Background())
}

func (i ConcurLinkedServiceResponseArgs) ToConcurLinkedServiceResponseOutputWithContext(ctx context.Context) ConcurLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConcurLinkedServiceResponseOutput)
}

// Concur Service linked service.
type ConcurLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ConcurLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurLinkedServiceResponse)(nil)).Elem()
}

func (o ConcurLinkedServiceResponseOutput) ToConcurLinkedServiceResponseOutput() ConcurLinkedServiceResponseOutput {
	return o
}

func (o ConcurLinkedServiceResponseOutput) ToConcurLinkedServiceResponseOutputWithContext(ctx context.Context) ConcurLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o ConcurLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Application client_id supplied by Concur App Management.
func (o ConcurLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ConcurLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Properties used to connect to Concur. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o ConcurLinkedServiceResponseOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// Linked service description.
func (o ConcurLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ConcurLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ConcurLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name that you provided in the username field.
func (o ConcurLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o ConcurLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ConcurLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ConcurLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ConcurLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The user name that you use to access Concur Service.
func (o ConcurLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Concur Service dataset.
type ConcurObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ConcurObjectDatasetInput is an input type that accepts ConcurObjectDatasetArgs and ConcurObjectDatasetOutput values.
// You can construct a concrete instance of `ConcurObjectDatasetInput` via:
//
//          ConcurObjectDatasetArgs{...}
type ConcurObjectDatasetInput interface {
	pulumi.Input

	ToConcurObjectDatasetOutput() ConcurObjectDatasetOutput
	ToConcurObjectDatasetOutputWithContext(context.Context) ConcurObjectDatasetOutput
}

// Concur Service dataset.
type ConcurObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ConcurObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurObjectDataset)(nil)).Elem()
}

func (i ConcurObjectDatasetArgs) ToConcurObjectDatasetOutput() ConcurObjectDatasetOutput {
	return i.ToConcurObjectDatasetOutputWithContext(context.Background())
}

func (i ConcurObjectDatasetArgs) ToConcurObjectDatasetOutputWithContext(ctx context.Context) ConcurObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConcurObjectDatasetOutput)
}

// Concur Service dataset.
type ConcurObjectDatasetOutput struct{ *pulumi.OutputState }

func (ConcurObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurObjectDataset)(nil)).Elem()
}

func (o ConcurObjectDatasetOutput) ToConcurObjectDatasetOutput() ConcurObjectDatasetOutput {
	return o
}

func (o ConcurObjectDatasetOutput) ToConcurObjectDatasetOutputWithContext(ctx context.Context) ConcurObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ConcurObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConcurObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ConcurObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConcurObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ConcurObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v ConcurObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o ConcurObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ConcurObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o ConcurObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ConcurObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ConcurObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ConcurObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ConcurObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o ConcurObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConcurObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Concur Service dataset.
type ConcurObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ConcurObjectDatasetResponseInput is an input type that accepts ConcurObjectDatasetResponseArgs and ConcurObjectDatasetResponseOutput values.
// You can construct a concrete instance of `ConcurObjectDatasetResponseInput` via:
//
//          ConcurObjectDatasetResponseArgs{...}
type ConcurObjectDatasetResponseInput interface {
	pulumi.Input

	ToConcurObjectDatasetResponseOutput() ConcurObjectDatasetResponseOutput
	ToConcurObjectDatasetResponseOutputWithContext(context.Context) ConcurObjectDatasetResponseOutput
}

// Concur Service dataset.
type ConcurObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ConcurObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurObjectDatasetResponse)(nil)).Elem()
}

func (i ConcurObjectDatasetResponseArgs) ToConcurObjectDatasetResponseOutput() ConcurObjectDatasetResponseOutput {
	return i.ToConcurObjectDatasetResponseOutputWithContext(context.Background())
}

func (i ConcurObjectDatasetResponseArgs) ToConcurObjectDatasetResponseOutputWithContext(ctx context.Context) ConcurObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConcurObjectDatasetResponseOutput)
}

// Concur Service dataset.
type ConcurObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (ConcurObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurObjectDatasetResponse)(nil)).Elem()
}

func (o ConcurObjectDatasetResponseOutput) ToConcurObjectDatasetResponseOutput() ConcurObjectDatasetResponseOutput {
	return o
}

func (o ConcurObjectDatasetResponseOutput) ToConcurObjectDatasetResponseOutputWithContext(ctx context.Context) ConcurObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ConcurObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ConcurObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ConcurObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o ConcurObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ConcurObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ConcurObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ConcurObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ConcurObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o ConcurObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The connection state of a managed private endpoint
type ConnectionStatePropertiesResponse struct {
	// The actions required on the managed private endpoint
	ActionsRequired string `pulumi:"actionsRequired"`
	// The managed private endpoint description
	Description string `pulumi:"description"`
	// The approval status
	Status string `pulumi:"status"`
}

// ConnectionStatePropertiesResponseInput is an input type that accepts ConnectionStatePropertiesResponseArgs and ConnectionStatePropertiesResponseOutput values.
// You can construct a concrete instance of `ConnectionStatePropertiesResponseInput` via:
//
//          ConnectionStatePropertiesResponseArgs{...}
type ConnectionStatePropertiesResponseInput interface {
	pulumi.Input

	ToConnectionStatePropertiesResponseOutput() ConnectionStatePropertiesResponseOutput
	ToConnectionStatePropertiesResponseOutputWithContext(context.Context) ConnectionStatePropertiesResponseOutput
}

// The connection state of a managed private endpoint
type ConnectionStatePropertiesResponseArgs struct {
	// The actions required on the managed private endpoint
	ActionsRequired pulumi.StringInput `pulumi:"actionsRequired"`
	// The managed private endpoint description
	Description pulumi.StringInput `pulumi:"description"`
	// The approval status
	Status pulumi.StringInput `pulumi:"status"`
}

func (ConnectionStatePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionStatePropertiesResponse)(nil)).Elem()
}

func (i ConnectionStatePropertiesResponseArgs) ToConnectionStatePropertiesResponseOutput() ConnectionStatePropertiesResponseOutput {
	return i.ToConnectionStatePropertiesResponseOutputWithContext(context.Background())
}

func (i ConnectionStatePropertiesResponseArgs) ToConnectionStatePropertiesResponseOutputWithContext(ctx context.Context) ConnectionStatePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionStatePropertiesResponseOutput)
}

func (i ConnectionStatePropertiesResponseArgs) ToConnectionStatePropertiesResponsePtrOutput() ConnectionStatePropertiesResponsePtrOutput {
	return i.ToConnectionStatePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ConnectionStatePropertiesResponseArgs) ToConnectionStatePropertiesResponsePtrOutputWithContext(ctx context.Context) ConnectionStatePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionStatePropertiesResponseOutput).ToConnectionStatePropertiesResponsePtrOutputWithContext(ctx)
}

// ConnectionStatePropertiesResponsePtrInput is an input type that accepts ConnectionStatePropertiesResponseArgs, ConnectionStatePropertiesResponsePtr and ConnectionStatePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ConnectionStatePropertiesResponsePtrInput` via:
//
//          ConnectionStatePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ConnectionStatePropertiesResponsePtrInput interface {
	pulumi.Input

	ToConnectionStatePropertiesResponsePtrOutput() ConnectionStatePropertiesResponsePtrOutput
	ToConnectionStatePropertiesResponsePtrOutputWithContext(context.Context) ConnectionStatePropertiesResponsePtrOutput
}

type connectionStatePropertiesResponsePtrType ConnectionStatePropertiesResponseArgs

func ConnectionStatePropertiesResponsePtr(v *ConnectionStatePropertiesResponseArgs) ConnectionStatePropertiesResponsePtrInput {
	return (*connectionStatePropertiesResponsePtrType)(v)
}

func (*connectionStatePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionStatePropertiesResponse)(nil)).Elem()
}

func (i *connectionStatePropertiesResponsePtrType) ToConnectionStatePropertiesResponsePtrOutput() ConnectionStatePropertiesResponsePtrOutput {
	return i.ToConnectionStatePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *connectionStatePropertiesResponsePtrType) ToConnectionStatePropertiesResponsePtrOutputWithContext(ctx context.Context) ConnectionStatePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionStatePropertiesResponsePtrOutput)
}

// The connection state of a managed private endpoint
type ConnectionStatePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectionStatePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionStatePropertiesResponse)(nil)).Elem()
}

func (o ConnectionStatePropertiesResponseOutput) ToConnectionStatePropertiesResponseOutput() ConnectionStatePropertiesResponseOutput {
	return o
}

func (o ConnectionStatePropertiesResponseOutput) ToConnectionStatePropertiesResponseOutputWithContext(ctx context.Context) ConnectionStatePropertiesResponseOutput {
	return o
}

func (o ConnectionStatePropertiesResponseOutput) ToConnectionStatePropertiesResponsePtrOutput() ConnectionStatePropertiesResponsePtrOutput {
	return o.ToConnectionStatePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ConnectionStatePropertiesResponseOutput) ToConnectionStatePropertiesResponsePtrOutputWithContext(ctx context.Context) ConnectionStatePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ConnectionStatePropertiesResponse) *ConnectionStatePropertiesResponse {
		return &v
	}).(ConnectionStatePropertiesResponsePtrOutput)
}

// The actions required on the managed private endpoint
func (o ConnectionStatePropertiesResponseOutput) ActionsRequired() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatePropertiesResponse) string { return v.ActionsRequired }).(pulumi.StringOutput)
}

// The managed private endpoint description
func (o ConnectionStatePropertiesResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatePropertiesResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The approval status
func (o ConnectionStatePropertiesResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatePropertiesResponse) string { return v.Status }).(pulumi.StringOutput)
}

type ConnectionStatePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectionStatePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionStatePropertiesResponse)(nil)).Elem()
}

func (o ConnectionStatePropertiesResponsePtrOutput) ToConnectionStatePropertiesResponsePtrOutput() ConnectionStatePropertiesResponsePtrOutput {
	return o
}

func (o ConnectionStatePropertiesResponsePtrOutput) ToConnectionStatePropertiesResponsePtrOutputWithContext(ctx context.Context) ConnectionStatePropertiesResponsePtrOutput {
	return o
}

func (o ConnectionStatePropertiesResponsePtrOutput) Elem() ConnectionStatePropertiesResponseOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) ConnectionStatePropertiesResponse { return *v }).(ConnectionStatePropertiesResponseOutput)
}

// The actions required on the managed private endpoint
func (o ConnectionStatePropertiesResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// The managed private endpoint description
func (o ConnectionStatePropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Description
	}).(pulumi.StringPtrOutput)
}

// The approval status
func (o ConnectionStatePropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// ControlActivityInput is an input type that accepts ControlActivityArgs and ControlActivityOutput values.
// You can construct a concrete instance of `ControlActivityInput` via:
//
//          ControlActivityArgs{...}
type ControlActivityInput interface {
	pulumi.Input

	ToControlActivityOutput() ControlActivityOutput
	ToControlActivityOutputWithContext(context.Context) ControlActivityOutput
}

// Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of activity.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (ControlActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlActivity)(nil)).Elem()
}

func (i ControlActivityArgs) ToControlActivityOutput() ControlActivityOutput {
	return i.ToControlActivityOutputWithContext(context.Background())
}

func (i ControlActivityArgs) ToControlActivityOutputWithContext(ctx context.Context) ControlActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlActivityOutput)
}

// Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivityOutput struct{ *pulumi.OutputState }

func (ControlActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlActivity)(nil)).Elem()
}

func (o ControlActivityOutput) ToControlActivityOutput() ControlActivityOutput {
	return o
}

func (o ControlActivityOutput) ToControlActivityOutputWithContext(ctx context.Context) ControlActivityOutput {
	return o
}

// Activity depends on condition.
func (o ControlActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v ControlActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o ControlActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o ControlActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ControlActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Type of activity.
func (o ControlActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ControlActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ControlActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v ControlActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// ControlActivityResponseInput is an input type that accepts ControlActivityResponseArgs and ControlActivityResponseOutput values.
// You can construct a concrete instance of `ControlActivityResponseInput` via:
//
//          ControlActivityResponseArgs{...}
type ControlActivityResponseInput interface {
	pulumi.Input

	ToControlActivityResponseOutput() ControlActivityResponseOutput
	ToControlActivityResponseOutputWithContext(context.Context) ControlActivityResponseOutput
}

// Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivityResponseArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyResponseArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of activity.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyResponseArrayInput `pulumi:"userProperties"`
}

func (ControlActivityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlActivityResponse)(nil)).Elem()
}

func (i ControlActivityResponseArgs) ToControlActivityResponseOutput() ControlActivityResponseOutput {
	return i.ToControlActivityResponseOutputWithContext(context.Background())
}

func (i ControlActivityResponseArgs) ToControlActivityResponseOutputWithContext(ctx context.Context) ControlActivityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlActivityResponseOutput)
}

// Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivityResponseOutput struct{ *pulumi.OutputState }

func (ControlActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlActivityResponse)(nil)).Elem()
}

func (o ControlActivityResponseOutput) ToControlActivityResponseOutput() ControlActivityResponseOutput {
	return o
}

func (o ControlActivityResponseOutput) ToControlActivityResponseOutputWithContext(ctx context.Context) ControlActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o ControlActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v ControlActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o ControlActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o ControlActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ControlActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of activity.
func (o ControlActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ControlActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ControlActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v ControlActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedService struct {
	// The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string)
	AccountEndpoint interface{} `pulumi:"accountEndpoint"`
	// The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
	AccountKey interface{} `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the database. Type: string (or Expression with resultType string)
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// CosmosDbLinkedServiceInput is an input type that accepts CosmosDbLinkedServiceArgs and CosmosDbLinkedServiceOutput values.
// You can construct a concrete instance of `CosmosDbLinkedServiceInput` via:
//
//          CosmosDbLinkedServiceArgs{...}
type CosmosDbLinkedServiceInput interface {
	pulumi.Input

	ToCosmosDbLinkedServiceOutput() CosmosDbLinkedServiceOutput
	ToCosmosDbLinkedServiceOutputWithContext(context.Context) CosmosDbLinkedServiceOutput
}

// Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedServiceArgs struct {
	// The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string)
	AccountEndpoint pulumi.Input `pulumi:"accountEndpoint"`
	// The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
	AccountKey pulumi.Input `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The name of the database. Type: string (or Expression with resultType string)
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CosmosDbLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbLinkedService)(nil)).Elem()
}

func (i CosmosDbLinkedServiceArgs) ToCosmosDbLinkedServiceOutput() CosmosDbLinkedServiceOutput {
	return i.ToCosmosDbLinkedServiceOutputWithContext(context.Background())
}

func (i CosmosDbLinkedServiceArgs) ToCosmosDbLinkedServiceOutputWithContext(ctx context.Context) CosmosDbLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbLinkedServiceOutput)
}

// Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedServiceOutput struct{ *pulumi.OutputState }

func (CosmosDbLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbLinkedService)(nil)).Elem()
}

func (o CosmosDbLinkedServiceOutput) ToCosmosDbLinkedServiceOutput() CosmosDbLinkedServiceOutput {
	return o
}

func (o CosmosDbLinkedServiceOutput) ToCosmosDbLinkedServiceOutputWithContext(ctx context.Context) CosmosDbLinkedServiceOutput {
	return o
}

// The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string)
func (o CosmosDbLinkedServiceOutput) AccountEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) interface{} { return v.AccountEndpoint }).(pulumi.AnyOutput)
}

// The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
func (o CosmosDbLinkedServiceOutput) AccountKey() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) interface{} { return v.AccountKey }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o CosmosDbLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o CosmosDbLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o CosmosDbLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The name of the database. Type: string (or Expression with resultType string)
func (o CosmosDbLinkedServiceOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o CosmosDbLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o CosmosDbLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o CosmosDbLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o CosmosDbLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedServiceResponse struct {
	// The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string)
	AccountEndpoint interface{} `pulumi:"accountEndpoint"`
	// The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
	AccountKey interface{} `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the database. Type: string (or Expression with resultType string)
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// CosmosDbLinkedServiceResponseInput is an input type that accepts CosmosDbLinkedServiceResponseArgs and CosmosDbLinkedServiceResponseOutput values.
// You can construct a concrete instance of `CosmosDbLinkedServiceResponseInput` via:
//
//          CosmosDbLinkedServiceResponseArgs{...}
type CosmosDbLinkedServiceResponseInput interface {
	pulumi.Input

	ToCosmosDbLinkedServiceResponseOutput() CosmosDbLinkedServiceResponseOutput
	ToCosmosDbLinkedServiceResponseOutputWithContext(context.Context) CosmosDbLinkedServiceResponseOutput
}

// Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedServiceResponseArgs struct {
	// The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string)
	AccountEndpoint pulumi.Input `pulumi:"accountEndpoint"`
	// The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
	AccountKey pulumi.Input `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The name of the database. Type: string (or Expression with resultType string)
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CosmosDbLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbLinkedServiceResponse)(nil)).Elem()
}

func (i CosmosDbLinkedServiceResponseArgs) ToCosmosDbLinkedServiceResponseOutput() CosmosDbLinkedServiceResponseOutput {
	return i.ToCosmosDbLinkedServiceResponseOutputWithContext(context.Background())
}

func (i CosmosDbLinkedServiceResponseArgs) ToCosmosDbLinkedServiceResponseOutputWithContext(ctx context.Context) CosmosDbLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbLinkedServiceResponseOutput)
}

// Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (CosmosDbLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbLinkedServiceResponse)(nil)).Elem()
}

func (o CosmosDbLinkedServiceResponseOutput) ToCosmosDbLinkedServiceResponseOutput() CosmosDbLinkedServiceResponseOutput {
	return o
}

func (o CosmosDbLinkedServiceResponseOutput) ToCosmosDbLinkedServiceResponseOutputWithContext(ctx context.Context) CosmosDbLinkedServiceResponseOutput {
	return o
}

// The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string)
func (o CosmosDbLinkedServiceResponseOutput) AccountEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) interface{} { return v.AccountEndpoint }).(pulumi.AnyOutput)
}

// The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
func (o CosmosDbLinkedServiceResponseOutput) AccountKey() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) interface{} { return v.AccountKey }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o CosmosDbLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o CosmosDbLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o CosmosDbLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The name of the database. Type: string (or Expression with resultType string)
func (o CosmosDbLinkedServiceResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o CosmosDbLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o CosmosDbLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o CosmosDbLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o CosmosDbLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The CosmosDB (MongoDB API) database dataset.
type CosmosDbMongoDbApiCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// CosmosDbMongoDbApiCollectionDatasetInput is an input type that accepts CosmosDbMongoDbApiCollectionDatasetArgs and CosmosDbMongoDbApiCollectionDatasetOutput values.
// You can construct a concrete instance of `CosmosDbMongoDbApiCollectionDatasetInput` via:
//
//          CosmosDbMongoDbApiCollectionDatasetArgs{...}
type CosmosDbMongoDbApiCollectionDatasetInput interface {
	pulumi.Input

	ToCosmosDbMongoDbApiCollectionDatasetOutput() CosmosDbMongoDbApiCollectionDatasetOutput
	ToCosmosDbMongoDbApiCollectionDatasetOutputWithContext(context.Context) CosmosDbMongoDbApiCollectionDatasetOutput
}

// The CosmosDB (MongoDB API) database dataset.
type CosmosDbMongoDbApiCollectionDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The collection name of the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string).
	Collection pulumi.Input `pulumi:"collection"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CosmosDbMongoDbApiCollectionDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiCollectionDataset)(nil)).Elem()
}

func (i CosmosDbMongoDbApiCollectionDatasetArgs) ToCosmosDbMongoDbApiCollectionDatasetOutput() CosmosDbMongoDbApiCollectionDatasetOutput {
	return i.ToCosmosDbMongoDbApiCollectionDatasetOutputWithContext(context.Background())
}

func (i CosmosDbMongoDbApiCollectionDatasetArgs) ToCosmosDbMongoDbApiCollectionDatasetOutputWithContext(ctx context.Context) CosmosDbMongoDbApiCollectionDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbMongoDbApiCollectionDatasetOutput)
}

// The CosmosDB (MongoDB API) database dataset.
type CosmosDbMongoDbApiCollectionDatasetOutput struct{ *pulumi.OutputState }

func (CosmosDbMongoDbApiCollectionDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiCollectionDataset)(nil)).Elem()
}

func (o CosmosDbMongoDbApiCollectionDatasetOutput) ToCosmosDbMongoDbApiCollectionDatasetOutput() CosmosDbMongoDbApiCollectionDatasetOutput {
	return o
}

func (o CosmosDbMongoDbApiCollectionDatasetOutput) ToCosmosDbMongoDbApiCollectionDatasetOutputWithContext(ctx context.Context) CosmosDbMongoDbApiCollectionDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CosmosDbMongoDbApiCollectionDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The collection name of the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string).
func (o CosmosDbMongoDbApiCollectionDatasetOutput) Collection() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDataset) interface{} { return v.Collection }).(pulumi.AnyOutput)
}

// Dataset description.
func (o CosmosDbMongoDbApiCollectionDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CosmosDbMongoDbApiCollectionDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o CosmosDbMongoDbApiCollectionDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o CosmosDbMongoDbApiCollectionDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CosmosDbMongoDbApiCollectionDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CosmosDbMongoDbApiCollectionDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o CosmosDbMongoDbApiCollectionDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The CosmosDB (MongoDB API) database dataset.
type CosmosDbMongoDbApiCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// CosmosDbMongoDbApiCollectionDatasetResponseInput is an input type that accepts CosmosDbMongoDbApiCollectionDatasetResponseArgs and CosmosDbMongoDbApiCollectionDatasetResponseOutput values.
// You can construct a concrete instance of `CosmosDbMongoDbApiCollectionDatasetResponseInput` via:
//
//          CosmosDbMongoDbApiCollectionDatasetResponseArgs{...}
type CosmosDbMongoDbApiCollectionDatasetResponseInput interface {
	pulumi.Input

	ToCosmosDbMongoDbApiCollectionDatasetResponseOutput() CosmosDbMongoDbApiCollectionDatasetResponseOutput
	ToCosmosDbMongoDbApiCollectionDatasetResponseOutputWithContext(context.Context) CosmosDbMongoDbApiCollectionDatasetResponseOutput
}

// The CosmosDB (MongoDB API) database dataset.
type CosmosDbMongoDbApiCollectionDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The collection name of the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string).
	Collection pulumi.Input `pulumi:"collection"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CosmosDbMongoDbApiCollectionDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiCollectionDatasetResponse)(nil)).Elem()
}

func (i CosmosDbMongoDbApiCollectionDatasetResponseArgs) ToCosmosDbMongoDbApiCollectionDatasetResponseOutput() CosmosDbMongoDbApiCollectionDatasetResponseOutput {
	return i.ToCosmosDbMongoDbApiCollectionDatasetResponseOutputWithContext(context.Background())
}

func (i CosmosDbMongoDbApiCollectionDatasetResponseArgs) ToCosmosDbMongoDbApiCollectionDatasetResponseOutputWithContext(ctx context.Context) CosmosDbMongoDbApiCollectionDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbMongoDbApiCollectionDatasetResponseOutput)
}

// The CosmosDB (MongoDB API) database dataset.
type CosmosDbMongoDbApiCollectionDatasetResponseOutput struct{ *pulumi.OutputState }

func (CosmosDbMongoDbApiCollectionDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiCollectionDatasetResponse)(nil)).Elem()
}

func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) ToCosmosDbMongoDbApiCollectionDatasetResponseOutput() CosmosDbMongoDbApiCollectionDatasetResponseOutput {
	return o
}

func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) ToCosmosDbMongoDbApiCollectionDatasetResponseOutputWithContext(ctx context.Context) CosmosDbMongoDbApiCollectionDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The collection name of the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string).
func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) Collection() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDatasetResponse) interface{} { return v.Collection }).(pulumi.AnyOutput)
}

// Dataset description.
func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for CosmosDB (MongoDB API) data source.
type CosmosDbMongoDbApiLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// CosmosDbMongoDbApiLinkedServiceInput is an input type that accepts CosmosDbMongoDbApiLinkedServiceArgs and CosmosDbMongoDbApiLinkedServiceOutput values.
// You can construct a concrete instance of `CosmosDbMongoDbApiLinkedServiceInput` via:
//
//          CosmosDbMongoDbApiLinkedServiceArgs{...}
type CosmosDbMongoDbApiLinkedServiceInput interface {
	pulumi.Input

	ToCosmosDbMongoDbApiLinkedServiceOutput() CosmosDbMongoDbApiLinkedServiceOutput
	ToCosmosDbMongoDbApiLinkedServiceOutputWithContext(context.Context) CosmosDbMongoDbApiLinkedServiceOutput
}

// Linked service for CosmosDB (MongoDB API) data source.
type CosmosDbMongoDbApiLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CosmosDbMongoDbApiLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiLinkedService)(nil)).Elem()
}

func (i CosmosDbMongoDbApiLinkedServiceArgs) ToCosmosDbMongoDbApiLinkedServiceOutput() CosmosDbMongoDbApiLinkedServiceOutput {
	return i.ToCosmosDbMongoDbApiLinkedServiceOutputWithContext(context.Background())
}

func (i CosmosDbMongoDbApiLinkedServiceArgs) ToCosmosDbMongoDbApiLinkedServiceOutputWithContext(ctx context.Context) CosmosDbMongoDbApiLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbMongoDbApiLinkedServiceOutput)
}

// Linked service for CosmosDB (MongoDB API) data source.
type CosmosDbMongoDbApiLinkedServiceOutput struct{ *pulumi.OutputState }

func (CosmosDbMongoDbApiLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiLinkedService)(nil)).Elem()
}

func (o CosmosDbMongoDbApiLinkedServiceOutput) ToCosmosDbMongoDbApiLinkedServiceOutput() CosmosDbMongoDbApiLinkedServiceOutput {
	return o
}

func (o CosmosDbMongoDbApiLinkedServiceOutput) ToCosmosDbMongoDbApiLinkedServiceOutputWithContext(ctx context.Context) CosmosDbMongoDbApiLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CosmosDbMongoDbApiLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o CosmosDbMongoDbApiLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o CosmosDbMongoDbApiLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with resultType string).
func (o CosmosDbMongoDbApiLinkedServiceOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedService) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o CosmosDbMongoDbApiLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o CosmosDbMongoDbApiLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o CosmosDbMongoDbApiLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for CosmosDB (MongoDB API) data source.
type CosmosDbMongoDbApiLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// CosmosDbMongoDbApiLinkedServiceResponseInput is an input type that accepts CosmosDbMongoDbApiLinkedServiceResponseArgs and CosmosDbMongoDbApiLinkedServiceResponseOutput values.
// You can construct a concrete instance of `CosmosDbMongoDbApiLinkedServiceResponseInput` via:
//
//          CosmosDbMongoDbApiLinkedServiceResponseArgs{...}
type CosmosDbMongoDbApiLinkedServiceResponseInput interface {
	pulumi.Input

	ToCosmosDbMongoDbApiLinkedServiceResponseOutput() CosmosDbMongoDbApiLinkedServiceResponseOutput
	ToCosmosDbMongoDbApiLinkedServiceResponseOutputWithContext(context.Context) CosmosDbMongoDbApiLinkedServiceResponseOutput
}

// Linked service for CosmosDB (MongoDB API) data source.
type CosmosDbMongoDbApiLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CosmosDbMongoDbApiLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiLinkedServiceResponse)(nil)).Elem()
}

func (i CosmosDbMongoDbApiLinkedServiceResponseArgs) ToCosmosDbMongoDbApiLinkedServiceResponseOutput() CosmosDbMongoDbApiLinkedServiceResponseOutput {
	return i.ToCosmosDbMongoDbApiLinkedServiceResponseOutputWithContext(context.Background())
}

func (i CosmosDbMongoDbApiLinkedServiceResponseArgs) ToCosmosDbMongoDbApiLinkedServiceResponseOutputWithContext(ctx context.Context) CosmosDbMongoDbApiLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbMongoDbApiLinkedServiceResponseOutput)
}

// Linked service for CosmosDB (MongoDB API) data source.
type CosmosDbMongoDbApiLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (CosmosDbMongoDbApiLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiLinkedServiceResponse)(nil)).Elem()
}

func (o CosmosDbMongoDbApiLinkedServiceResponseOutput) ToCosmosDbMongoDbApiLinkedServiceResponseOutput() CosmosDbMongoDbApiLinkedServiceResponseOutput {
	return o
}

func (o CosmosDbMongoDbApiLinkedServiceResponseOutput) ToCosmosDbMongoDbApiLinkedServiceResponseOutputWithContext(ctx context.Context) CosmosDbMongoDbApiLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CosmosDbMongoDbApiLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o CosmosDbMongoDbApiLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o CosmosDbMongoDbApiLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with resultType string).
func (o CosmosDbMongoDbApiLinkedServiceResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedServiceResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o CosmosDbMongoDbApiLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o CosmosDbMongoDbApiLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o CosmosDbMongoDbApiLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Azure CosmosDB (SQL API) Collection dataset.
type CosmosDbSqlApiCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// CosmosDB (SQL API) collection name. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// CosmosDbSqlApiCollectionDatasetInput is an input type that accepts CosmosDbSqlApiCollectionDatasetArgs and CosmosDbSqlApiCollectionDatasetOutput values.
// You can construct a concrete instance of `CosmosDbSqlApiCollectionDatasetInput` via:
//
//          CosmosDbSqlApiCollectionDatasetArgs{...}
type CosmosDbSqlApiCollectionDatasetInput interface {
	pulumi.Input

	ToCosmosDbSqlApiCollectionDatasetOutput() CosmosDbSqlApiCollectionDatasetOutput
	ToCosmosDbSqlApiCollectionDatasetOutputWithContext(context.Context) CosmosDbSqlApiCollectionDatasetOutput
}

// Microsoft Azure CosmosDB (SQL API) Collection dataset.
type CosmosDbSqlApiCollectionDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// CosmosDB (SQL API) collection name. Type: string (or Expression with resultType string).
	CollectionName pulumi.Input `pulumi:"collectionName"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CosmosDbSqlApiCollectionDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSqlApiCollectionDataset)(nil)).Elem()
}

func (i CosmosDbSqlApiCollectionDatasetArgs) ToCosmosDbSqlApiCollectionDatasetOutput() CosmosDbSqlApiCollectionDatasetOutput {
	return i.ToCosmosDbSqlApiCollectionDatasetOutputWithContext(context.Background())
}

func (i CosmosDbSqlApiCollectionDatasetArgs) ToCosmosDbSqlApiCollectionDatasetOutputWithContext(ctx context.Context) CosmosDbSqlApiCollectionDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbSqlApiCollectionDatasetOutput)
}

// Microsoft Azure CosmosDB (SQL API) Collection dataset.
type CosmosDbSqlApiCollectionDatasetOutput struct{ *pulumi.OutputState }

func (CosmosDbSqlApiCollectionDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSqlApiCollectionDataset)(nil)).Elem()
}

func (o CosmosDbSqlApiCollectionDatasetOutput) ToCosmosDbSqlApiCollectionDatasetOutput() CosmosDbSqlApiCollectionDatasetOutput {
	return o
}

func (o CosmosDbSqlApiCollectionDatasetOutput) ToCosmosDbSqlApiCollectionDatasetOutputWithContext(ctx context.Context) CosmosDbSqlApiCollectionDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CosmosDbSqlApiCollectionDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// CosmosDB (SQL API) collection name. Type: string (or Expression with resultType string).
func (o CosmosDbSqlApiCollectionDatasetOutput) CollectionName() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDataset) interface{} { return v.CollectionName }).(pulumi.AnyOutput)
}

// Dataset description.
func (o CosmosDbSqlApiCollectionDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CosmosDbSqlApiCollectionDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o CosmosDbSqlApiCollectionDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o CosmosDbSqlApiCollectionDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CosmosDbSqlApiCollectionDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CosmosDbSqlApiCollectionDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o CosmosDbSqlApiCollectionDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Azure CosmosDB (SQL API) Collection dataset.
type CosmosDbSqlApiCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// CosmosDB (SQL API) collection name. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// CosmosDbSqlApiCollectionDatasetResponseInput is an input type that accepts CosmosDbSqlApiCollectionDatasetResponseArgs and CosmosDbSqlApiCollectionDatasetResponseOutput values.
// You can construct a concrete instance of `CosmosDbSqlApiCollectionDatasetResponseInput` via:
//
//          CosmosDbSqlApiCollectionDatasetResponseArgs{...}
type CosmosDbSqlApiCollectionDatasetResponseInput interface {
	pulumi.Input

	ToCosmosDbSqlApiCollectionDatasetResponseOutput() CosmosDbSqlApiCollectionDatasetResponseOutput
	ToCosmosDbSqlApiCollectionDatasetResponseOutputWithContext(context.Context) CosmosDbSqlApiCollectionDatasetResponseOutput
}

// Microsoft Azure CosmosDB (SQL API) Collection dataset.
type CosmosDbSqlApiCollectionDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// CosmosDB (SQL API) collection name. Type: string (or Expression with resultType string).
	CollectionName pulumi.Input `pulumi:"collectionName"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CosmosDbSqlApiCollectionDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSqlApiCollectionDatasetResponse)(nil)).Elem()
}

func (i CosmosDbSqlApiCollectionDatasetResponseArgs) ToCosmosDbSqlApiCollectionDatasetResponseOutput() CosmosDbSqlApiCollectionDatasetResponseOutput {
	return i.ToCosmosDbSqlApiCollectionDatasetResponseOutputWithContext(context.Background())
}

func (i CosmosDbSqlApiCollectionDatasetResponseArgs) ToCosmosDbSqlApiCollectionDatasetResponseOutputWithContext(ctx context.Context) CosmosDbSqlApiCollectionDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbSqlApiCollectionDatasetResponseOutput)
}

// Microsoft Azure CosmosDB (SQL API) Collection dataset.
type CosmosDbSqlApiCollectionDatasetResponseOutput struct{ *pulumi.OutputState }

func (CosmosDbSqlApiCollectionDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSqlApiCollectionDatasetResponse)(nil)).Elem()
}

func (o CosmosDbSqlApiCollectionDatasetResponseOutput) ToCosmosDbSqlApiCollectionDatasetResponseOutput() CosmosDbSqlApiCollectionDatasetResponseOutput {
	return o
}

func (o CosmosDbSqlApiCollectionDatasetResponseOutput) ToCosmosDbSqlApiCollectionDatasetResponseOutputWithContext(ctx context.Context) CosmosDbSqlApiCollectionDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CosmosDbSqlApiCollectionDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// CosmosDB (SQL API) collection name. Type: string (or Expression with resultType string).
func (o CosmosDbSqlApiCollectionDatasetResponseOutput) CollectionName() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDatasetResponse) interface{} { return v.CollectionName }).(pulumi.AnyOutput)
}

// Dataset description.
func (o CosmosDbSqlApiCollectionDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CosmosDbSqlApiCollectionDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o CosmosDbSqlApiCollectionDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o CosmosDbSqlApiCollectionDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CosmosDbSqlApiCollectionDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CosmosDbSqlApiCollectionDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o CosmosDbSqlApiCollectionDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Couchbase server linked service.
type CouchbaseLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The Azure key vault secret reference of credString in connection string.
	CredString *AzureKeyVaultSecretReference `pulumi:"credString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// CouchbaseLinkedServiceInput is an input type that accepts CouchbaseLinkedServiceArgs and CouchbaseLinkedServiceOutput values.
// You can construct a concrete instance of `CouchbaseLinkedServiceInput` via:
//
//          CouchbaseLinkedServiceArgs{...}
type CouchbaseLinkedServiceInput interface {
	pulumi.Input

	ToCouchbaseLinkedServiceOutput() CouchbaseLinkedServiceOutput
	ToCouchbaseLinkedServiceOutputWithContext(context.Context) CouchbaseLinkedServiceOutput
}

// Couchbase server linked service.
type CouchbaseLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The Azure key vault secret reference of credString in connection string.
	CredString AzureKeyVaultSecretReferencePtrInput `pulumi:"credString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CouchbaseLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseLinkedService)(nil)).Elem()
}

func (i CouchbaseLinkedServiceArgs) ToCouchbaseLinkedServiceOutput() CouchbaseLinkedServiceOutput {
	return i.ToCouchbaseLinkedServiceOutputWithContext(context.Background())
}

func (i CouchbaseLinkedServiceArgs) ToCouchbaseLinkedServiceOutputWithContext(ctx context.Context) CouchbaseLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CouchbaseLinkedServiceOutput)
}

// Couchbase server linked service.
type CouchbaseLinkedServiceOutput struct{ *pulumi.OutputState }

func (CouchbaseLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseLinkedService)(nil)).Elem()
}

func (o CouchbaseLinkedServiceOutput) ToCouchbaseLinkedServiceOutput() CouchbaseLinkedServiceOutput {
	return o
}

func (o CouchbaseLinkedServiceOutput) ToCouchbaseLinkedServiceOutputWithContext(ctx context.Context) CouchbaseLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CouchbaseLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CouchbaseLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o CouchbaseLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v CouchbaseLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o CouchbaseLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The Azure key vault secret reference of credString in connection string.
func (o CouchbaseLinkedServiceOutput) CredString() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v CouchbaseLinkedService) *AzureKeyVaultSecretReference { return v.CredString }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Linked service description.
func (o CouchbaseLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CouchbaseLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o CouchbaseLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o CouchbaseLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CouchbaseLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o CouchbaseLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CouchbaseLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Couchbase server linked service.
type CouchbaseLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The Azure key vault secret reference of credString in connection string.
	CredString *AzureKeyVaultSecretReferenceResponse `pulumi:"credString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// CouchbaseLinkedServiceResponseInput is an input type that accepts CouchbaseLinkedServiceResponseArgs and CouchbaseLinkedServiceResponseOutput values.
// You can construct a concrete instance of `CouchbaseLinkedServiceResponseInput` via:
//
//          CouchbaseLinkedServiceResponseArgs{...}
type CouchbaseLinkedServiceResponseInput interface {
	pulumi.Input

	ToCouchbaseLinkedServiceResponseOutput() CouchbaseLinkedServiceResponseOutput
	ToCouchbaseLinkedServiceResponseOutputWithContext(context.Context) CouchbaseLinkedServiceResponseOutput
}

// Couchbase server linked service.
type CouchbaseLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The Azure key vault secret reference of credString in connection string.
	CredString AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"credString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CouchbaseLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseLinkedServiceResponse)(nil)).Elem()
}

func (i CouchbaseLinkedServiceResponseArgs) ToCouchbaseLinkedServiceResponseOutput() CouchbaseLinkedServiceResponseOutput {
	return i.ToCouchbaseLinkedServiceResponseOutputWithContext(context.Background())
}

func (i CouchbaseLinkedServiceResponseArgs) ToCouchbaseLinkedServiceResponseOutputWithContext(ctx context.Context) CouchbaseLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CouchbaseLinkedServiceResponseOutput)
}

// Couchbase server linked service.
type CouchbaseLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (CouchbaseLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseLinkedServiceResponse)(nil)).Elem()
}

func (o CouchbaseLinkedServiceResponseOutput) ToCouchbaseLinkedServiceResponseOutput() CouchbaseLinkedServiceResponseOutput {
	return o
}

func (o CouchbaseLinkedServiceResponseOutput) ToCouchbaseLinkedServiceResponseOutputWithContext(ctx context.Context) CouchbaseLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CouchbaseLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o CouchbaseLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o CouchbaseLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The Azure key vault secret reference of credString in connection string.
func (o CouchbaseLinkedServiceResponseOutput) CredString() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.CredString }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Linked service description.
func (o CouchbaseLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o CouchbaseLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o CouchbaseLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o CouchbaseLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Couchbase server dataset.
type CouchbaseTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// CouchbaseTableDatasetInput is an input type that accepts CouchbaseTableDatasetArgs and CouchbaseTableDatasetOutput values.
// You can construct a concrete instance of `CouchbaseTableDatasetInput` via:
//
//          CouchbaseTableDatasetArgs{...}
type CouchbaseTableDatasetInput interface {
	pulumi.Input

	ToCouchbaseTableDatasetOutput() CouchbaseTableDatasetOutput
	ToCouchbaseTableDatasetOutputWithContext(context.Context) CouchbaseTableDatasetOutput
}

// Couchbase server dataset.
type CouchbaseTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CouchbaseTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseTableDataset)(nil)).Elem()
}

func (i CouchbaseTableDatasetArgs) ToCouchbaseTableDatasetOutput() CouchbaseTableDatasetOutput {
	return i.ToCouchbaseTableDatasetOutputWithContext(context.Background())
}

func (i CouchbaseTableDatasetArgs) ToCouchbaseTableDatasetOutputWithContext(ctx context.Context) CouchbaseTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CouchbaseTableDatasetOutput)
}

// Couchbase server dataset.
type CouchbaseTableDatasetOutput struct{ *pulumi.OutputState }

func (CouchbaseTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseTableDataset)(nil)).Elem()
}

func (o CouchbaseTableDatasetOutput) ToCouchbaseTableDatasetOutput() CouchbaseTableDatasetOutput {
	return o
}

func (o CouchbaseTableDatasetOutput) ToCouchbaseTableDatasetOutputWithContext(ctx context.Context) CouchbaseTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CouchbaseTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CouchbaseTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o CouchbaseTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CouchbaseTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CouchbaseTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v CouchbaseTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o CouchbaseTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v CouchbaseTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o CouchbaseTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CouchbaseTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CouchbaseTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CouchbaseTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o CouchbaseTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o CouchbaseTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CouchbaseTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Couchbase server dataset.
type CouchbaseTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// CouchbaseTableDatasetResponseInput is an input type that accepts CouchbaseTableDatasetResponseArgs and CouchbaseTableDatasetResponseOutput values.
// You can construct a concrete instance of `CouchbaseTableDatasetResponseInput` via:
//
//          CouchbaseTableDatasetResponseArgs{...}
type CouchbaseTableDatasetResponseInput interface {
	pulumi.Input

	ToCouchbaseTableDatasetResponseOutput() CouchbaseTableDatasetResponseOutput
	ToCouchbaseTableDatasetResponseOutputWithContext(context.Context) CouchbaseTableDatasetResponseOutput
}

// Couchbase server dataset.
type CouchbaseTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CouchbaseTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseTableDatasetResponse)(nil)).Elem()
}

func (i CouchbaseTableDatasetResponseArgs) ToCouchbaseTableDatasetResponseOutput() CouchbaseTableDatasetResponseOutput {
	return i.ToCouchbaseTableDatasetResponseOutputWithContext(context.Background())
}

func (i CouchbaseTableDatasetResponseArgs) ToCouchbaseTableDatasetResponseOutputWithContext(ctx context.Context) CouchbaseTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CouchbaseTableDatasetResponseOutput)
}

// Couchbase server dataset.
type CouchbaseTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (CouchbaseTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseTableDatasetResponse)(nil)).Elem()
}

func (o CouchbaseTableDatasetResponseOutput) ToCouchbaseTableDatasetResponseOutput() CouchbaseTableDatasetResponseOutput {
	return o
}

func (o CouchbaseTableDatasetResponseOutput) ToCouchbaseTableDatasetResponseOutputWithContext(ctx context.Context) CouchbaseTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CouchbaseTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o CouchbaseTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CouchbaseTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o CouchbaseTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o CouchbaseTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CouchbaseTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CouchbaseTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o CouchbaseTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o CouchbaseTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Custom linked service.
type CustomDataSourceLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// CustomDataSourceLinkedServiceInput is an input type that accepts CustomDataSourceLinkedServiceArgs and CustomDataSourceLinkedServiceOutput values.
// You can construct a concrete instance of `CustomDataSourceLinkedServiceInput` via:
//
//          CustomDataSourceLinkedServiceArgs{...}
type CustomDataSourceLinkedServiceInput interface {
	pulumi.Input

	ToCustomDataSourceLinkedServiceOutput() CustomDataSourceLinkedServiceOutput
	ToCustomDataSourceLinkedServiceOutputWithContext(context.Context) CustomDataSourceLinkedServiceOutput
}

// Custom linked service.
type CustomDataSourceLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CustomDataSourceLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDataSourceLinkedService)(nil)).Elem()
}

func (i CustomDataSourceLinkedServiceArgs) ToCustomDataSourceLinkedServiceOutput() CustomDataSourceLinkedServiceOutput {
	return i.ToCustomDataSourceLinkedServiceOutputWithContext(context.Background())
}

func (i CustomDataSourceLinkedServiceArgs) ToCustomDataSourceLinkedServiceOutputWithContext(ctx context.Context) CustomDataSourceLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDataSourceLinkedServiceOutput)
}

// Custom linked service.
type CustomDataSourceLinkedServiceOutput struct{ *pulumi.OutputState }

func (CustomDataSourceLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDataSourceLinkedService)(nil)).Elem()
}

func (o CustomDataSourceLinkedServiceOutput) ToCustomDataSourceLinkedServiceOutput() CustomDataSourceLinkedServiceOutput {
	return o
}

func (o CustomDataSourceLinkedServiceOutput) ToCustomDataSourceLinkedServiceOutputWithContext(ctx context.Context) CustomDataSourceLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CustomDataSourceLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o CustomDataSourceLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o CustomDataSourceLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o CustomDataSourceLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o CustomDataSourceLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Custom linked service.
type CustomDataSourceLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// CustomDataSourceLinkedServiceResponseInput is an input type that accepts CustomDataSourceLinkedServiceResponseArgs and CustomDataSourceLinkedServiceResponseOutput values.
// You can construct a concrete instance of `CustomDataSourceLinkedServiceResponseInput` via:
//
//          CustomDataSourceLinkedServiceResponseArgs{...}
type CustomDataSourceLinkedServiceResponseInput interface {
	pulumi.Input

	ToCustomDataSourceLinkedServiceResponseOutput() CustomDataSourceLinkedServiceResponseOutput
	ToCustomDataSourceLinkedServiceResponseOutputWithContext(context.Context) CustomDataSourceLinkedServiceResponseOutput
}

// Custom linked service.
type CustomDataSourceLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CustomDataSourceLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDataSourceLinkedServiceResponse)(nil)).Elem()
}

func (i CustomDataSourceLinkedServiceResponseArgs) ToCustomDataSourceLinkedServiceResponseOutput() CustomDataSourceLinkedServiceResponseOutput {
	return i.ToCustomDataSourceLinkedServiceResponseOutputWithContext(context.Background())
}

func (i CustomDataSourceLinkedServiceResponseArgs) ToCustomDataSourceLinkedServiceResponseOutputWithContext(ctx context.Context) CustomDataSourceLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDataSourceLinkedServiceResponseOutput)
}

// Custom linked service.
type CustomDataSourceLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (CustomDataSourceLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDataSourceLinkedServiceResponse)(nil)).Elem()
}

func (o CustomDataSourceLinkedServiceResponseOutput) ToCustomDataSourceLinkedServiceResponseOutput() CustomDataSourceLinkedServiceResponseOutput {
	return o
}

func (o CustomDataSourceLinkedServiceResponseOutput) ToCustomDataSourceLinkedServiceResponseOutputWithContext(ctx context.Context) CustomDataSourceLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CustomDataSourceLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o CustomDataSourceLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o CustomDataSourceLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o CustomDataSourceLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o CustomDataSourceLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The custom dataset.
type CustomDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// CustomDatasetInput is an input type that accepts CustomDatasetArgs and CustomDatasetOutput values.
// You can construct a concrete instance of `CustomDatasetInput` via:
//
//          CustomDatasetArgs{...}
type CustomDatasetInput interface {
	pulumi.Input

	ToCustomDatasetOutput() CustomDatasetOutput
	ToCustomDatasetOutputWithContext(context.Context) CustomDatasetOutput
}

// The custom dataset.
type CustomDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CustomDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDataset)(nil)).Elem()
}

func (i CustomDatasetArgs) ToCustomDatasetOutput() CustomDatasetOutput {
	return i.ToCustomDatasetOutputWithContext(context.Background())
}

func (i CustomDatasetArgs) ToCustomDatasetOutputWithContext(ctx context.Context) CustomDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDatasetOutput)
}

// The custom dataset.
type CustomDatasetOutput struct{ *pulumi.OutputState }

func (CustomDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDataset)(nil)).Elem()
}

func (o CustomDatasetOutput) ToCustomDatasetOutput() CustomDatasetOutput {
	return o
}

func (o CustomDatasetOutput) ToCustomDatasetOutputWithContext(ctx context.Context) CustomDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CustomDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CustomDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o CustomDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CustomDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v CustomDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o CustomDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v CustomDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o CustomDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CustomDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CustomDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CustomDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o CustomDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The custom dataset.
type CustomDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// CustomDatasetResponseInput is an input type that accepts CustomDatasetResponseArgs and CustomDatasetResponseOutput values.
// You can construct a concrete instance of `CustomDatasetResponseInput` via:
//
//          CustomDatasetResponseArgs{...}
type CustomDatasetResponseInput interface {
	pulumi.Input

	ToCustomDatasetResponseOutput() CustomDatasetResponseOutput
	ToCustomDatasetResponseOutputWithContext(context.Context) CustomDatasetResponseOutput
}

// The custom dataset.
type CustomDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CustomDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDatasetResponse)(nil)).Elem()
}

func (i CustomDatasetResponseArgs) ToCustomDatasetResponseOutput() CustomDatasetResponseOutput {
	return i.ToCustomDatasetResponseOutputWithContext(context.Background())
}

func (i CustomDatasetResponseArgs) ToCustomDatasetResponseOutputWithContext(ctx context.Context) CustomDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDatasetResponseOutput)
}

// The custom dataset.
type CustomDatasetResponseOutput struct{ *pulumi.OutputState }

func (CustomDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDatasetResponse)(nil)).Elem()
}

func (o CustomDatasetResponseOutput) ToCustomDatasetResponseOutput() CustomDatasetResponseOutput {
	return o
}

func (o CustomDatasetResponseOutput) ToCustomDatasetResponseOutputWithContext(ctx context.Context) CustomDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CustomDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CustomDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o CustomDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CustomDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v CustomDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o CustomDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v CustomDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o CustomDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CustomDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CustomDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CustomDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o CustomDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowFolder struct {
	// The name of the folder that this data flow is in.
	Name *string `pulumi:"name"`
}

// DataFlowFolderInput is an input type that accepts DataFlowFolderArgs and DataFlowFolderOutput values.
// You can construct a concrete instance of `DataFlowFolderInput` via:
//
//          DataFlowFolderArgs{...}
type DataFlowFolderInput interface {
	pulumi.Input

	ToDataFlowFolderOutput() DataFlowFolderOutput
	ToDataFlowFolderOutputWithContext(context.Context) DataFlowFolderOutput
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowFolderArgs struct {
	// The name of the folder that this data flow is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DataFlowFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowFolder)(nil)).Elem()
}

func (i DataFlowFolderArgs) ToDataFlowFolderOutput() DataFlowFolderOutput {
	return i.ToDataFlowFolderOutputWithContext(context.Background())
}

func (i DataFlowFolderArgs) ToDataFlowFolderOutputWithContext(ctx context.Context) DataFlowFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowFolderOutput)
}

func (i DataFlowFolderArgs) ToDataFlowFolderPtrOutput() DataFlowFolderPtrOutput {
	return i.ToDataFlowFolderPtrOutputWithContext(context.Background())
}

func (i DataFlowFolderArgs) ToDataFlowFolderPtrOutputWithContext(ctx context.Context) DataFlowFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowFolderOutput).ToDataFlowFolderPtrOutputWithContext(ctx)
}

// DataFlowFolderPtrInput is an input type that accepts DataFlowFolderArgs, DataFlowFolderPtr and DataFlowFolderPtrOutput values.
// You can construct a concrete instance of `DataFlowFolderPtrInput` via:
//
//          DataFlowFolderArgs{...}
//
//  or:
//
//          nil
type DataFlowFolderPtrInput interface {
	pulumi.Input

	ToDataFlowFolderPtrOutput() DataFlowFolderPtrOutput
	ToDataFlowFolderPtrOutputWithContext(context.Context) DataFlowFolderPtrOutput
}

type dataFlowFolderPtrType DataFlowFolderArgs

func DataFlowFolderPtr(v *DataFlowFolderArgs) DataFlowFolderPtrInput {
	return (*dataFlowFolderPtrType)(v)
}

func (*dataFlowFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowFolder)(nil)).Elem()
}

func (i *dataFlowFolderPtrType) ToDataFlowFolderPtrOutput() DataFlowFolderPtrOutput {
	return i.ToDataFlowFolderPtrOutputWithContext(context.Background())
}

func (i *dataFlowFolderPtrType) ToDataFlowFolderPtrOutputWithContext(ctx context.Context) DataFlowFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowFolderPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowFolderOutput struct{ *pulumi.OutputState }

func (DataFlowFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowFolder)(nil)).Elem()
}

func (o DataFlowFolderOutput) ToDataFlowFolderOutput() DataFlowFolderOutput {
	return o
}

func (o DataFlowFolderOutput) ToDataFlowFolderOutputWithContext(ctx context.Context) DataFlowFolderOutput {
	return o
}

func (o DataFlowFolderOutput) ToDataFlowFolderPtrOutput() DataFlowFolderPtrOutput {
	return o.ToDataFlowFolderPtrOutputWithContext(context.Background())
}

func (o DataFlowFolderOutput) ToDataFlowFolderPtrOutputWithContext(ctx context.Context) DataFlowFolderPtrOutput {
	return o.ApplyT(func(v DataFlowFolder) *DataFlowFolder {
		return &v
	}).(DataFlowFolderPtrOutput)
}

// The name of the folder that this data flow is in.
func (o DataFlowFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DataFlowFolderPtrOutput struct{ *pulumi.OutputState }

func (DataFlowFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowFolder)(nil)).Elem()
}

func (o DataFlowFolderPtrOutput) ToDataFlowFolderPtrOutput() DataFlowFolderPtrOutput {
	return o
}

func (o DataFlowFolderPtrOutput) ToDataFlowFolderPtrOutputWithContext(ctx context.Context) DataFlowFolderPtrOutput {
	return o
}

func (o DataFlowFolderPtrOutput) Elem() DataFlowFolderOutput {
	return o.ApplyT(func(v *DataFlowFolder) DataFlowFolder { return *v }).(DataFlowFolderOutput)
}

// The name of the folder that this data flow is in.
func (o DataFlowFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowResponseFolder struct {
	// The name of the folder that this data flow is in.
	Name *string `pulumi:"name"`
}

// DataFlowResponseFolderInput is an input type that accepts DataFlowResponseFolderArgs and DataFlowResponseFolderOutput values.
// You can construct a concrete instance of `DataFlowResponseFolderInput` via:
//
//          DataFlowResponseFolderArgs{...}
type DataFlowResponseFolderInput interface {
	pulumi.Input

	ToDataFlowResponseFolderOutput() DataFlowResponseFolderOutput
	ToDataFlowResponseFolderOutputWithContext(context.Context) DataFlowResponseFolderOutput
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowResponseFolderArgs struct {
	// The name of the folder that this data flow is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DataFlowResponseFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowResponseFolder)(nil)).Elem()
}

func (i DataFlowResponseFolderArgs) ToDataFlowResponseFolderOutput() DataFlowResponseFolderOutput {
	return i.ToDataFlowResponseFolderOutputWithContext(context.Background())
}

func (i DataFlowResponseFolderArgs) ToDataFlowResponseFolderOutputWithContext(ctx context.Context) DataFlowResponseFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowResponseFolderOutput)
}

func (i DataFlowResponseFolderArgs) ToDataFlowResponseFolderPtrOutput() DataFlowResponseFolderPtrOutput {
	return i.ToDataFlowResponseFolderPtrOutputWithContext(context.Background())
}

func (i DataFlowResponseFolderArgs) ToDataFlowResponseFolderPtrOutputWithContext(ctx context.Context) DataFlowResponseFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowResponseFolderOutput).ToDataFlowResponseFolderPtrOutputWithContext(ctx)
}

// DataFlowResponseFolderPtrInput is an input type that accepts DataFlowResponseFolderArgs, DataFlowResponseFolderPtr and DataFlowResponseFolderPtrOutput values.
// You can construct a concrete instance of `DataFlowResponseFolderPtrInput` via:
//
//          DataFlowResponseFolderArgs{...}
//
//  or:
//
//          nil
type DataFlowResponseFolderPtrInput interface {
	pulumi.Input

	ToDataFlowResponseFolderPtrOutput() DataFlowResponseFolderPtrOutput
	ToDataFlowResponseFolderPtrOutputWithContext(context.Context) DataFlowResponseFolderPtrOutput
}

type dataFlowResponseFolderPtrType DataFlowResponseFolderArgs

func DataFlowResponseFolderPtr(v *DataFlowResponseFolderArgs) DataFlowResponseFolderPtrInput {
	return (*dataFlowResponseFolderPtrType)(v)
}

func (*dataFlowResponseFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowResponseFolder)(nil)).Elem()
}

func (i *dataFlowResponseFolderPtrType) ToDataFlowResponseFolderPtrOutput() DataFlowResponseFolderPtrOutput {
	return i.ToDataFlowResponseFolderPtrOutputWithContext(context.Background())
}

func (i *dataFlowResponseFolderPtrType) ToDataFlowResponseFolderPtrOutputWithContext(ctx context.Context) DataFlowResponseFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowResponseFolderPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowResponseFolderOutput struct{ *pulumi.OutputState }

func (DataFlowResponseFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowResponseFolder)(nil)).Elem()
}

func (o DataFlowResponseFolderOutput) ToDataFlowResponseFolderOutput() DataFlowResponseFolderOutput {
	return o
}

func (o DataFlowResponseFolderOutput) ToDataFlowResponseFolderOutputWithContext(ctx context.Context) DataFlowResponseFolderOutput {
	return o
}

func (o DataFlowResponseFolderOutput) ToDataFlowResponseFolderPtrOutput() DataFlowResponseFolderPtrOutput {
	return o.ToDataFlowResponseFolderPtrOutputWithContext(context.Background())
}

func (o DataFlowResponseFolderOutput) ToDataFlowResponseFolderPtrOutputWithContext(ctx context.Context) DataFlowResponseFolderPtrOutput {
	return o.ApplyT(func(v DataFlowResponseFolder) *DataFlowResponseFolder {
		return &v
	}).(DataFlowResponseFolderPtrOutput)
}

// The name of the folder that this data flow is in.
func (o DataFlowResponseFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowResponseFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DataFlowResponseFolderPtrOutput struct{ *pulumi.OutputState }

func (DataFlowResponseFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowResponseFolder)(nil)).Elem()
}

func (o DataFlowResponseFolderPtrOutput) ToDataFlowResponseFolderPtrOutput() DataFlowResponseFolderPtrOutput {
	return o
}

func (o DataFlowResponseFolderPtrOutput) ToDataFlowResponseFolderPtrOutputWithContext(ctx context.Context) DataFlowResponseFolderPtrOutput {
	return o
}

func (o DataFlowResponseFolderPtrOutput) Elem() DataFlowResponseFolderOutput {
	return o.ApplyT(func(v *DataFlowResponseFolder) DataFlowResponseFolder { return *v }).(DataFlowResponseFolderOutput)
}

// The name of the folder that this data flow is in.
func (o DataFlowResponseFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowResponseFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Transformation for data flow sink.
type DataFlowSink struct {
	// Dataset reference.
	Dataset *DatasetReference `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReference `pulumi:"schemaLinkedService"`
}

// DataFlowSinkInput is an input type that accepts DataFlowSinkArgs and DataFlowSinkOutput values.
// You can construct a concrete instance of `DataFlowSinkInput` via:
//
//          DataFlowSinkArgs{...}
type DataFlowSinkInput interface {
	pulumi.Input

	ToDataFlowSinkOutput() DataFlowSinkOutput
	ToDataFlowSinkOutputWithContext(context.Context) DataFlowSinkOutput
}

// Transformation for data flow sink.
type DataFlowSinkArgs struct {
	// Dataset reference.
	Dataset DatasetReferencePtrInput `pulumi:"dataset"`
	// Transformation description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedService LinkedServiceReferencePtrInput `pulumi:"linkedService"`
	// Transformation name.
	Name pulumi.StringInput `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService LinkedServiceReferencePtrInput `pulumi:"schemaLinkedService"`
}

func (DataFlowSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowSink)(nil)).Elem()
}

func (i DataFlowSinkArgs) ToDataFlowSinkOutput() DataFlowSinkOutput {
	return i.ToDataFlowSinkOutputWithContext(context.Background())
}

func (i DataFlowSinkArgs) ToDataFlowSinkOutputWithContext(ctx context.Context) DataFlowSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowSinkOutput)
}

// DataFlowSinkArrayInput is an input type that accepts DataFlowSinkArray and DataFlowSinkArrayOutput values.
// You can construct a concrete instance of `DataFlowSinkArrayInput` via:
//
//          DataFlowSinkArray{ DataFlowSinkArgs{...} }
type DataFlowSinkArrayInput interface {
	pulumi.Input

	ToDataFlowSinkArrayOutput() DataFlowSinkArrayOutput
	ToDataFlowSinkArrayOutputWithContext(context.Context) DataFlowSinkArrayOutput
}

type DataFlowSinkArray []DataFlowSinkInput

func (DataFlowSinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlowSink)(nil)).Elem()
}

func (i DataFlowSinkArray) ToDataFlowSinkArrayOutput() DataFlowSinkArrayOutput {
	return i.ToDataFlowSinkArrayOutputWithContext(context.Background())
}

func (i DataFlowSinkArray) ToDataFlowSinkArrayOutputWithContext(ctx context.Context) DataFlowSinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowSinkArrayOutput)
}

// Transformation for data flow sink.
type DataFlowSinkOutput struct{ *pulumi.OutputState }

func (DataFlowSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowSink)(nil)).Elem()
}

func (o DataFlowSinkOutput) ToDataFlowSinkOutput() DataFlowSinkOutput {
	return o
}

func (o DataFlowSinkOutput) ToDataFlowSinkOutputWithContext(ctx context.Context) DataFlowSinkOutput {
	return o
}

// Dataset reference.
func (o DataFlowSinkOutput) Dataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v DataFlowSink) *DatasetReference { return v.Dataset }).(DatasetReferencePtrOutput)
}

// Transformation description.
func (o DataFlowSinkOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowSink) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o DataFlowSinkOutput) LinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v DataFlowSink) *LinkedServiceReference { return v.LinkedService }).(LinkedServiceReferencePtrOutput)
}

// Transformation name.
func (o DataFlowSinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataFlowSink) string { return v.Name }).(pulumi.StringOutput)
}

// Schema linked service reference.
func (o DataFlowSinkOutput) SchemaLinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v DataFlowSink) *LinkedServiceReference { return v.SchemaLinkedService }).(LinkedServiceReferencePtrOutput)
}

type DataFlowSinkArrayOutput struct{ *pulumi.OutputState }

func (DataFlowSinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlowSink)(nil)).Elem()
}

func (o DataFlowSinkArrayOutput) ToDataFlowSinkArrayOutput() DataFlowSinkArrayOutput {
	return o
}

func (o DataFlowSinkArrayOutput) ToDataFlowSinkArrayOutputWithContext(ctx context.Context) DataFlowSinkArrayOutput {
	return o
}

func (o DataFlowSinkArrayOutput) Index(i pulumi.IntInput) DataFlowSinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataFlowSink {
		return vs[0].([]DataFlowSink)[vs[1].(int)]
	}).(DataFlowSinkOutput)
}

// Transformation for data flow sink.
type DataFlowSinkResponse struct {
	// Dataset reference.
	Dataset *DatasetReferenceResponse `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReferenceResponse `pulumi:"schemaLinkedService"`
}

// DataFlowSinkResponseInput is an input type that accepts DataFlowSinkResponseArgs and DataFlowSinkResponseOutput values.
// You can construct a concrete instance of `DataFlowSinkResponseInput` via:
//
//          DataFlowSinkResponseArgs{...}
type DataFlowSinkResponseInput interface {
	pulumi.Input

	ToDataFlowSinkResponseOutput() DataFlowSinkResponseOutput
	ToDataFlowSinkResponseOutputWithContext(context.Context) DataFlowSinkResponseOutput
}

// Transformation for data flow sink.
type DataFlowSinkResponseArgs struct {
	// Dataset reference.
	Dataset DatasetReferenceResponsePtrInput `pulumi:"dataset"`
	// Transformation description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedService LinkedServiceReferenceResponsePtrInput `pulumi:"linkedService"`
	// Transformation name.
	Name pulumi.StringInput `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService LinkedServiceReferenceResponsePtrInput `pulumi:"schemaLinkedService"`
}

func (DataFlowSinkResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowSinkResponse)(nil)).Elem()
}

func (i DataFlowSinkResponseArgs) ToDataFlowSinkResponseOutput() DataFlowSinkResponseOutput {
	return i.ToDataFlowSinkResponseOutputWithContext(context.Background())
}

func (i DataFlowSinkResponseArgs) ToDataFlowSinkResponseOutputWithContext(ctx context.Context) DataFlowSinkResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowSinkResponseOutput)
}

// DataFlowSinkResponseArrayInput is an input type that accepts DataFlowSinkResponseArray and DataFlowSinkResponseArrayOutput values.
// You can construct a concrete instance of `DataFlowSinkResponseArrayInput` via:
//
//          DataFlowSinkResponseArray{ DataFlowSinkResponseArgs{...} }
type DataFlowSinkResponseArrayInput interface {
	pulumi.Input

	ToDataFlowSinkResponseArrayOutput() DataFlowSinkResponseArrayOutput
	ToDataFlowSinkResponseArrayOutputWithContext(context.Context) DataFlowSinkResponseArrayOutput
}

type DataFlowSinkResponseArray []DataFlowSinkResponseInput

func (DataFlowSinkResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlowSinkResponse)(nil)).Elem()
}

func (i DataFlowSinkResponseArray) ToDataFlowSinkResponseArrayOutput() DataFlowSinkResponseArrayOutput {
	return i.ToDataFlowSinkResponseArrayOutputWithContext(context.Background())
}

func (i DataFlowSinkResponseArray) ToDataFlowSinkResponseArrayOutputWithContext(ctx context.Context) DataFlowSinkResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowSinkResponseArrayOutput)
}

// Transformation for data flow sink.
type DataFlowSinkResponseOutput struct{ *pulumi.OutputState }

func (DataFlowSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowSinkResponse)(nil)).Elem()
}

func (o DataFlowSinkResponseOutput) ToDataFlowSinkResponseOutput() DataFlowSinkResponseOutput {
	return o
}

func (o DataFlowSinkResponseOutput) ToDataFlowSinkResponseOutputWithContext(ctx context.Context) DataFlowSinkResponseOutput {
	return o
}

// Dataset reference.
func (o DataFlowSinkResponseOutput) Dataset() DatasetReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataFlowSinkResponse) *DatasetReferenceResponse { return v.Dataset }).(DatasetReferenceResponsePtrOutput)
}

// Transformation description.
func (o DataFlowSinkResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowSinkResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o DataFlowSinkResponseOutput) LinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataFlowSinkResponse) *LinkedServiceReferenceResponse { return v.LinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

// Transformation name.
func (o DataFlowSinkResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataFlowSinkResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Schema linked service reference.
func (o DataFlowSinkResponseOutput) SchemaLinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataFlowSinkResponse) *LinkedServiceReferenceResponse { return v.SchemaLinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

type DataFlowSinkResponseArrayOutput struct{ *pulumi.OutputState }

func (DataFlowSinkResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlowSinkResponse)(nil)).Elem()
}

func (o DataFlowSinkResponseArrayOutput) ToDataFlowSinkResponseArrayOutput() DataFlowSinkResponseArrayOutput {
	return o
}

func (o DataFlowSinkResponseArrayOutput) ToDataFlowSinkResponseArrayOutputWithContext(ctx context.Context) DataFlowSinkResponseArrayOutput {
	return o
}

func (o DataFlowSinkResponseArrayOutput) Index(i pulumi.IntInput) DataFlowSinkResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataFlowSinkResponse {
		return vs[0].([]DataFlowSinkResponse)[vs[1].(int)]
	}).(DataFlowSinkResponseOutput)
}

// Transformation for data flow source.
type DataFlowSource struct {
	// Dataset reference.
	Dataset *DatasetReference `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReference `pulumi:"schemaLinkedService"`
}

// DataFlowSourceInput is an input type that accepts DataFlowSourceArgs and DataFlowSourceOutput values.
// You can construct a concrete instance of `DataFlowSourceInput` via:
//
//          DataFlowSourceArgs{...}
type DataFlowSourceInput interface {
	pulumi.Input

	ToDataFlowSourceOutput() DataFlowSourceOutput
	ToDataFlowSourceOutputWithContext(context.Context) DataFlowSourceOutput
}

// Transformation for data flow source.
type DataFlowSourceArgs struct {
	// Dataset reference.
	Dataset DatasetReferencePtrInput `pulumi:"dataset"`
	// Transformation description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedService LinkedServiceReferencePtrInput `pulumi:"linkedService"`
	// Transformation name.
	Name pulumi.StringInput `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService LinkedServiceReferencePtrInput `pulumi:"schemaLinkedService"`
}

func (DataFlowSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowSource)(nil)).Elem()
}

func (i DataFlowSourceArgs) ToDataFlowSourceOutput() DataFlowSourceOutput {
	return i.ToDataFlowSourceOutputWithContext(context.Background())
}

func (i DataFlowSourceArgs) ToDataFlowSourceOutputWithContext(ctx context.Context) DataFlowSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowSourceOutput)
}

// DataFlowSourceArrayInput is an input type that accepts DataFlowSourceArray and DataFlowSourceArrayOutput values.
// You can construct a concrete instance of `DataFlowSourceArrayInput` via:
//
//          DataFlowSourceArray{ DataFlowSourceArgs{...} }
type DataFlowSourceArrayInput interface {
	pulumi.Input

	ToDataFlowSourceArrayOutput() DataFlowSourceArrayOutput
	ToDataFlowSourceArrayOutputWithContext(context.Context) DataFlowSourceArrayOutput
}

type DataFlowSourceArray []DataFlowSourceInput

func (DataFlowSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlowSource)(nil)).Elem()
}

func (i DataFlowSourceArray) ToDataFlowSourceArrayOutput() DataFlowSourceArrayOutput {
	return i.ToDataFlowSourceArrayOutputWithContext(context.Background())
}

func (i DataFlowSourceArray) ToDataFlowSourceArrayOutputWithContext(ctx context.Context) DataFlowSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowSourceArrayOutput)
}

// Transformation for data flow source.
type DataFlowSourceOutput struct{ *pulumi.OutputState }

func (DataFlowSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowSource)(nil)).Elem()
}

func (o DataFlowSourceOutput) ToDataFlowSourceOutput() DataFlowSourceOutput {
	return o
}

func (o DataFlowSourceOutput) ToDataFlowSourceOutputWithContext(ctx context.Context) DataFlowSourceOutput {
	return o
}

// Dataset reference.
func (o DataFlowSourceOutput) Dataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v DataFlowSource) *DatasetReference { return v.Dataset }).(DatasetReferencePtrOutput)
}

// Transformation description.
func (o DataFlowSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowSource) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o DataFlowSourceOutput) LinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v DataFlowSource) *LinkedServiceReference { return v.LinkedService }).(LinkedServiceReferencePtrOutput)
}

// Transformation name.
func (o DataFlowSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataFlowSource) string { return v.Name }).(pulumi.StringOutput)
}

// Schema linked service reference.
func (o DataFlowSourceOutput) SchemaLinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v DataFlowSource) *LinkedServiceReference { return v.SchemaLinkedService }).(LinkedServiceReferencePtrOutput)
}

type DataFlowSourceArrayOutput struct{ *pulumi.OutputState }

func (DataFlowSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlowSource)(nil)).Elem()
}

func (o DataFlowSourceArrayOutput) ToDataFlowSourceArrayOutput() DataFlowSourceArrayOutput {
	return o
}

func (o DataFlowSourceArrayOutput) ToDataFlowSourceArrayOutputWithContext(ctx context.Context) DataFlowSourceArrayOutput {
	return o
}

func (o DataFlowSourceArrayOutput) Index(i pulumi.IntInput) DataFlowSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataFlowSource {
		return vs[0].([]DataFlowSource)[vs[1].(int)]
	}).(DataFlowSourceOutput)
}

// Transformation for data flow source.
type DataFlowSourceResponse struct {
	// Dataset reference.
	Dataset *DatasetReferenceResponse `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReferenceResponse `pulumi:"schemaLinkedService"`
}

// DataFlowSourceResponseInput is an input type that accepts DataFlowSourceResponseArgs and DataFlowSourceResponseOutput values.
// You can construct a concrete instance of `DataFlowSourceResponseInput` via:
//
//          DataFlowSourceResponseArgs{...}
type DataFlowSourceResponseInput interface {
	pulumi.Input

	ToDataFlowSourceResponseOutput() DataFlowSourceResponseOutput
	ToDataFlowSourceResponseOutputWithContext(context.Context) DataFlowSourceResponseOutput
}

// Transformation for data flow source.
type DataFlowSourceResponseArgs struct {
	// Dataset reference.
	Dataset DatasetReferenceResponsePtrInput `pulumi:"dataset"`
	// Transformation description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedService LinkedServiceReferenceResponsePtrInput `pulumi:"linkedService"`
	// Transformation name.
	Name pulumi.StringInput `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService LinkedServiceReferenceResponsePtrInput `pulumi:"schemaLinkedService"`
}

func (DataFlowSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowSourceResponse)(nil)).Elem()
}

func (i DataFlowSourceResponseArgs) ToDataFlowSourceResponseOutput() DataFlowSourceResponseOutput {
	return i.ToDataFlowSourceResponseOutputWithContext(context.Background())
}

func (i DataFlowSourceResponseArgs) ToDataFlowSourceResponseOutputWithContext(ctx context.Context) DataFlowSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowSourceResponseOutput)
}

// DataFlowSourceResponseArrayInput is an input type that accepts DataFlowSourceResponseArray and DataFlowSourceResponseArrayOutput values.
// You can construct a concrete instance of `DataFlowSourceResponseArrayInput` via:
//
//          DataFlowSourceResponseArray{ DataFlowSourceResponseArgs{...} }
type DataFlowSourceResponseArrayInput interface {
	pulumi.Input

	ToDataFlowSourceResponseArrayOutput() DataFlowSourceResponseArrayOutput
	ToDataFlowSourceResponseArrayOutputWithContext(context.Context) DataFlowSourceResponseArrayOutput
}

type DataFlowSourceResponseArray []DataFlowSourceResponseInput

func (DataFlowSourceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlowSourceResponse)(nil)).Elem()
}

func (i DataFlowSourceResponseArray) ToDataFlowSourceResponseArrayOutput() DataFlowSourceResponseArrayOutput {
	return i.ToDataFlowSourceResponseArrayOutputWithContext(context.Background())
}

func (i DataFlowSourceResponseArray) ToDataFlowSourceResponseArrayOutputWithContext(ctx context.Context) DataFlowSourceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowSourceResponseArrayOutput)
}

// Transformation for data flow source.
type DataFlowSourceResponseOutput struct{ *pulumi.OutputState }

func (DataFlowSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowSourceResponse)(nil)).Elem()
}

func (o DataFlowSourceResponseOutput) ToDataFlowSourceResponseOutput() DataFlowSourceResponseOutput {
	return o
}

func (o DataFlowSourceResponseOutput) ToDataFlowSourceResponseOutputWithContext(ctx context.Context) DataFlowSourceResponseOutput {
	return o
}

// Dataset reference.
func (o DataFlowSourceResponseOutput) Dataset() DatasetReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataFlowSourceResponse) *DatasetReferenceResponse { return v.Dataset }).(DatasetReferenceResponsePtrOutput)
}

// Transformation description.
func (o DataFlowSourceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowSourceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o DataFlowSourceResponseOutput) LinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataFlowSourceResponse) *LinkedServiceReferenceResponse { return v.LinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

// Transformation name.
func (o DataFlowSourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataFlowSourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Schema linked service reference.
func (o DataFlowSourceResponseOutput) SchemaLinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataFlowSourceResponse) *LinkedServiceReferenceResponse { return v.SchemaLinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

type DataFlowSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (DataFlowSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlowSourceResponse)(nil)).Elem()
}

func (o DataFlowSourceResponseArrayOutput) ToDataFlowSourceResponseArrayOutput() DataFlowSourceResponseArrayOutput {
	return o
}

func (o DataFlowSourceResponseArrayOutput) ToDataFlowSourceResponseArrayOutputWithContext(ctx context.Context) DataFlowSourceResponseArrayOutput {
	return o
}

func (o DataFlowSourceResponseArrayOutput) Index(i pulumi.IntInput) DataFlowSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataFlowSourceResponse {
		return vs[0].([]DataFlowSourceResponse)[vs[1].(int)]
	}).(DataFlowSourceResponseOutput)
}

// The BZip2 compression method used on a dataset.
type DatasetBZip2Compression struct {
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// DatasetBZip2CompressionInput is an input type that accepts DatasetBZip2CompressionArgs and DatasetBZip2CompressionOutput values.
// You can construct a concrete instance of `DatasetBZip2CompressionInput` via:
//
//          DatasetBZip2CompressionArgs{...}
type DatasetBZip2CompressionInput interface {
	pulumi.Input

	ToDatasetBZip2CompressionOutput() DatasetBZip2CompressionOutput
	ToDatasetBZip2CompressionOutputWithContext(context.Context) DatasetBZip2CompressionOutput
}

// The BZip2 compression method used on a dataset.
type DatasetBZip2CompressionArgs struct {
	// Type of dataset compression.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetBZip2CompressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetBZip2Compression)(nil)).Elem()
}

func (i DatasetBZip2CompressionArgs) ToDatasetBZip2CompressionOutput() DatasetBZip2CompressionOutput {
	return i.ToDatasetBZip2CompressionOutputWithContext(context.Background())
}

func (i DatasetBZip2CompressionArgs) ToDatasetBZip2CompressionOutputWithContext(ctx context.Context) DatasetBZip2CompressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetBZip2CompressionOutput)
}

// The BZip2 compression method used on a dataset.
type DatasetBZip2CompressionOutput struct{ *pulumi.OutputState }

func (DatasetBZip2CompressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetBZip2Compression)(nil)).Elem()
}

func (o DatasetBZip2CompressionOutput) ToDatasetBZip2CompressionOutput() DatasetBZip2CompressionOutput {
	return o
}

func (o DatasetBZip2CompressionOutput) ToDatasetBZip2CompressionOutputWithContext(ctx context.Context) DatasetBZip2CompressionOutput {
	return o
}

// Type of dataset compression.
func (o DatasetBZip2CompressionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetBZip2Compression) string { return v.Type }).(pulumi.StringOutput)
}

// The BZip2 compression method used on a dataset.
type DatasetBZip2CompressionResponse struct {
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// DatasetBZip2CompressionResponseInput is an input type that accepts DatasetBZip2CompressionResponseArgs and DatasetBZip2CompressionResponseOutput values.
// You can construct a concrete instance of `DatasetBZip2CompressionResponseInput` via:
//
//          DatasetBZip2CompressionResponseArgs{...}
type DatasetBZip2CompressionResponseInput interface {
	pulumi.Input

	ToDatasetBZip2CompressionResponseOutput() DatasetBZip2CompressionResponseOutput
	ToDatasetBZip2CompressionResponseOutputWithContext(context.Context) DatasetBZip2CompressionResponseOutput
}

// The BZip2 compression method used on a dataset.
type DatasetBZip2CompressionResponseArgs struct {
	// Type of dataset compression.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetBZip2CompressionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetBZip2CompressionResponse)(nil)).Elem()
}

func (i DatasetBZip2CompressionResponseArgs) ToDatasetBZip2CompressionResponseOutput() DatasetBZip2CompressionResponseOutput {
	return i.ToDatasetBZip2CompressionResponseOutputWithContext(context.Background())
}

func (i DatasetBZip2CompressionResponseArgs) ToDatasetBZip2CompressionResponseOutputWithContext(ctx context.Context) DatasetBZip2CompressionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetBZip2CompressionResponseOutput)
}

// The BZip2 compression method used on a dataset.
type DatasetBZip2CompressionResponseOutput struct{ *pulumi.OutputState }

func (DatasetBZip2CompressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetBZip2CompressionResponse)(nil)).Elem()
}

func (o DatasetBZip2CompressionResponseOutput) ToDatasetBZip2CompressionResponseOutput() DatasetBZip2CompressionResponseOutput {
	return o
}

func (o DatasetBZip2CompressionResponseOutput) ToDatasetBZip2CompressionResponseOutputWithContext(ctx context.Context) DatasetBZip2CompressionResponseOutput {
	return o
}

// Type of dataset compression.
func (o DatasetBZip2CompressionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetBZip2CompressionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Deflate compression method used on a dataset.
type DatasetDeflateCompression struct {
	// The Deflate compression level.
	Level *string `pulumi:"level"`
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// DatasetDeflateCompressionInput is an input type that accepts DatasetDeflateCompressionArgs and DatasetDeflateCompressionOutput values.
// You can construct a concrete instance of `DatasetDeflateCompressionInput` via:
//
//          DatasetDeflateCompressionArgs{...}
type DatasetDeflateCompressionInput interface {
	pulumi.Input

	ToDatasetDeflateCompressionOutput() DatasetDeflateCompressionOutput
	ToDatasetDeflateCompressionOutputWithContext(context.Context) DatasetDeflateCompressionOutput
}

// The Deflate compression method used on a dataset.
type DatasetDeflateCompressionArgs struct {
	// The Deflate compression level.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Type of dataset compression.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetDeflateCompressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDeflateCompression)(nil)).Elem()
}

func (i DatasetDeflateCompressionArgs) ToDatasetDeflateCompressionOutput() DatasetDeflateCompressionOutput {
	return i.ToDatasetDeflateCompressionOutputWithContext(context.Background())
}

func (i DatasetDeflateCompressionArgs) ToDatasetDeflateCompressionOutputWithContext(ctx context.Context) DatasetDeflateCompressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDeflateCompressionOutput)
}

// The Deflate compression method used on a dataset.
type DatasetDeflateCompressionOutput struct{ *pulumi.OutputState }

func (DatasetDeflateCompressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDeflateCompression)(nil)).Elem()
}

func (o DatasetDeflateCompressionOutput) ToDatasetDeflateCompressionOutput() DatasetDeflateCompressionOutput {
	return o
}

func (o DatasetDeflateCompressionOutput) ToDatasetDeflateCompressionOutputWithContext(ctx context.Context) DatasetDeflateCompressionOutput {
	return o
}

// The Deflate compression level.
func (o DatasetDeflateCompressionOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetDeflateCompression) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Type of dataset compression.
func (o DatasetDeflateCompressionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDeflateCompression) string { return v.Type }).(pulumi.StringOutput)
}

// The Deflate compression method used on a dataset.
type DatasetDeflateCompressionResponse struct {
	// The Deflate compression level.
	Level *string `pulumi:"level"`
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// DatasetDeflateCompressionResponseInput is an input type that accepts DatasetDeflateCompressionResponseArgs and DatasetDeflateCompressionResponseOutput values.
// You can construct a concrete instance of `DatasetDeflateCompressionResponseInput` via:
//
//          DatasetDeflateCompressionResponseArgs{...}
type DatasetDeflateCompressionResponseInput interface {
	pulumi.Input

	ToDatasetDeflateCompressionResponseOutput() DatasetDeflateCompressionResponseOutput
	ToDatasetDeflateCompressionResponseOutputWithContext(context.Context) DatasetDeflateCompressionResponseOutput
}

// The Deflate compression method used on a dataset.
type DatasetDeflateCompressionResponseArgs struct {
	// The Deflate compression level.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Type of dataset compression.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetDeflateCompressionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDeflateCompressionResponse)(nil)).Elem()
}

func (i DatasetDeflateCompressionResponseArgs) ToDatasetDeflateCompressionResponseOutput() DatasetDeflateCompressionResponseOutput {
	return i.ToDatasetDeflateCompressionResponseOutputWithContext(context.Background())
}

func (i DatasetDeflateCompressionResponseArgs) ToDatasetDeflateCompressionResponseOutputWithContext(ctx context.Context) DatasetDeflateCompressionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDeflateCompressionResponseOutput)
}

// The Deflate compression method used on a dataset.
type DatasetDeflateCompressionResponseOutput struct{ *pulumi.OutputState }

func (DatasetDeflateCompressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDeflateCompressionResponse)(nil)).Elem()
}

func (o DatasetDeflateCompressionResponseOutput) ToDatasetDeflateCompressionResponseOutput() DatasetDeflateCompressionResponseOutput {
	return o
}

func (o DatasetDeflateCompressionResponseOutput) ToDatasetDeflateCompressionResponseOutputWithContext(ctx context.Context) DatasetDeflateCompressionResponseOutput {
	return o
}

// The Deflate compression level.
func (o DatasetDeflateCompressionResponseOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetDeflateCompressionResponse) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Type of dataset compression.
func (o DatasetDeflateCompressionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDeflateCompressionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetFolder struct {
	// The name of the folder that this Dataset is in.
	Name *string `pulumi:"name"`
}

// DatasetFolderInput is an input type that accepts DatasetFolderArgs and DatasetFolderOutput values.
// You can construct a concrete instance of `DatasetFolderInput` via:
//
//          DatasetFolderArgs{...}
type DatasetFolderInput interface {
	pulumi.Input

	ToDatasetFolderOutput() DatasetFolderOutput
	ToDatasetFolderOutputWithContext(context.Context) DatasetFolderOutput
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetFolderArgs struct {
	// The name of the folder that this Dataset is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DatasetFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetFolder)(nil)).Elem()
}

func (i DatasetFolderArgs) ToDatasetFolderOutput() DatasetFolderOutput {
	return i.ToDatasetFolderOutputWithContext(context.Background())
}

func (i DatasetFolderArgs) ToDatasetFolderOutputWithContext(ctx context.Context) DatasetFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFolderOutput)
}

func (i DatasetFolderArgs) ToDatasetFolderPtrOutput() DatasetFolderPtrOutput {
	return i.ToDatasetFolderPtrOutputWithContext(context.Background())
}

func (i DatasetFolderArgs) ToDatasetFolderPtrOutputWithContext(ctx context.Context) DatasetFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFolderOutput).ToDatasetFolderPtrOutputWithContext(ctx)
}

// DatasetFolderPtrInput is an input type that accepts DatasetFolderArgs, DatasetFolderPtr and DatasetFolderPtrOutput values.
// You can construct a concrete instance of `DatasetFolderPtrInput` via:
//
//          DatasetFolderArgs{...}
//
//  or:
//
//          nil
type DatasetFolderPtrInput interface {
	pulumi.Input

	ToDatasetFolderPtrOutput() DatasetFolderPtrOutput
	ToDatasetFolderPtrOutputWithContext(context.Context) DatasetFolderPtrOutput
}

type datasetFolderPtrType DatasetFolderArgs

func DatasetFolderPtr(v *DatasetFolderArgs) DatasetFolderPtrInput {
	return (*datasetFolderPtrType)(v)
}

func (*datasetFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetFolder)(nil)).Elem()
}

func (i *datasetFolderPtrType) ToDatasetFolderPtrOutput() DatasetFolderPtrOutput {
	return i.ToDatasetFolderPtrOutputWithContext(context.Background())
}

func (i *datasetFolderPtrType) ToDatasetFolderPtrOutputWithContext(ctx context.Context) DatasetFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFolderPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetFolderOutput struct{ *pulumi.OutputState }

func (DatasetFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetFolder)(nil)).Elem()
}

func (o DatasetFolderOutput) ToDatasetFolderOutput() DatasetFolderOutput {
	return o
}

func (o DatasetFolderOutput) ToDatasetFolderOutputWithContext(ctx context.Context) DatasetFolderOutput {
	return o
}

func (o DatasetFolderOutput) ToDatasetFolderPtrOutput() DatasetFolderPtrOutput {
	return o.ToDatasetFolderPtrOutputWithContext(context.Background())
}

func (o DatasetFolderOutput) ToDatasetFolderPtrOutputWithContext(ctx context.Context) DatasetFolderPtrOutput {
	return o.ApplyT(func(v DatasetFolder) *DatasetFolder {
		return &v
	}).(DatasetFolderPtrOutput)
}

// The name of the folder that this Dataset is in.
func (o DatasetFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DatasetFolderPtrOutput struct{ *pulumi.OutputState }

func (DatasetFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetFolder)(nil)).Elem()
}

func (o DatasetFolderPtrOutput) ToDatasetFolderPtrOutput() DatasetFolderPtrOutput {
	return o
}

func (o DatasetFolderPtrOutput) ToDatasetFolderPtrOutputWithContext(ctx context.Context) DatasetFolderPtrOutput {
	return o
}

func (o DatasetFolderPtrOutput) Elem() DatasetFolderOutput {
	return o.ApplyT(func(v *DatasetFolder) DatasetFolder { return *v }).(DatasetFolderOutput)
}

// The name of the folder that this Dataset is in.
func (o DatasetFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The GZip compression method used on a dataset.
type DatasetGZipCompression struct {
	// The GZip compression level.
	Level *string `pulumi:"level"`
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// DatasetGZipCompressionInput is an input type that accepts DatasetGZipCompressionArgs and DatasetGZipCompressionOutput values.
// You can construct a concrete instance of `DatasetGZipCompressionInput` via:
//
//          DatasetGZipCompressionArgs{...}
type DatasetGZipCompressionInput interface {
	pulumi.Input

	ToDatasetGZipCompressionOutput() DatasetGZipCompressionOutput
	ToDatasetGZipCompressionOutputWithContext(context.Context) DatasetGZipCompressionOutput
}

// The GZip compression method used on a dataset.
type DatasetGZipCompressionArgs struct {
	// The GZip compression level.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Type of dataset compression.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetGZipCompressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetGZipCompression)(nil)).Elem()
}

func (i DatasetGZipCompressionArgs) ToDatasetGZipCompressionOutput() DatasetGZipCompressionOutput {
	return i.ToDatasetGZipCompressionOutputWithContext(context.Background())
}

func (i DatasetGZipCompressionArgs) ToDatasetGZipCompressionOutputWithContext(ctx context.Context) DatasetGZipCompressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetGZipCompressionOutput)
}

// The GZip compression method used on a dataset.
type DatasetGZipCompressionOutput struct{ *pulumi.OutputState }

func (DatasetGZipCompressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetGZipCompression)(nil)).Elem()
}

func (o DatasetGZipCompressionOutput) ToDatasetGZipCompressionOutput() DatasetGZipCompressionOutput {
	return o
}

func (o DatasetGZipCompressionOutput) ToDatasetGZipCompressionOutputWithContext(ctx context.Context) DatasetGZipCompressionOutput {
	return o
}

// The GZip compression level.
func (o DatasetGZipCompressionOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetGZipCompression) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Type of dataset compression.
func (o DatasetGZipCompressionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetGZipCompression) string { return v.Type }).(pulumi.StringOutput)
}

// The GZip compression method used on a dataset.
type DatasetGZipCompressionResponse struct {
	// The GZip compression level.
	Level *string `pulumi:"level"`
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// DatasetGZipCompressionResponseInput is an input type that accepts DatasetGZipCompressionResponseArgs and DatasetGZipCompressionResponseOutput values.
// You can construct a concrete instance of `DatasetGZipCompressionResponseInput` via:
//
//          DatasetGZipCompressionResponseArgs{...}
type DatasetGZipCompressionResponseInput interface {
	pulumi.Input

	ToDatasetGZipCompressionResponseOutput() DatasetGZipCompressionResponseOutput
	ToDatasetGZipCompressionResponseOutputWithContext(context.Context) DatasetGZipCompressionResponseOutput
}

// The GZip compression method used on a dataset.
type DatasetGZipCompressionResponseArgs struct {
	// The GZip compression level.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Type of dataset compression.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetGZipCompressionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetGZipCompressionResponse)(nil)).Elem()
}

func (i DatasetGZipCompressionResponseArgs) ToDatasetGZipCompressionResponseOutput() DatasetGZipCompressionResponseOutput {
	return i.ToDatasetGZipCompressionResponseOutputWithContext(context.Background())
}

func (i DatasetGZipCompressionResponseArgs) ToDatasetGZipCompressionResponseOutputWithContext(ctx context.Context) DatasetGZipCompressionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetGZipCompressionResponseOutput)
}

// The GZip compression method used on a dataset.
type DatasetGZipCompressionResponseOutput struct{ *pulumi.OutputState }

func (DatasetGZipCompressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetGZipCompressionResponse)(nil)).Elem()
}

func (o DatasetGZipCompressionResponseOutput) ToDatasetGZipCompressionResponseOutput() DatasetGZipCompressionResponseOutput {
	return o
}

func (o DatasetGZipCompressionResponseOutput) ToDatasetGZipCompressionResponseOutputWithContext(ctx context.Context) DatasetGZipCompressionResponseOutput {
	return o
}

// The GZip compression level.
func (o DatasetGZipCompressionResponseOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetGZipCompressionResponse) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Type of dataset compression.
func (o DatasetGZipCompressionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetGZipCompressionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Dataset reference type.
type DatasetReference struct {
	// Arguments for dataset.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference dataset name.
	ReferenceName string `pulumi:"referenceName"`
	// Dataset reference type.
	Type string `pulumi:"type"`
}

// DatasetReferenceInput is an input type that accepts DatasetReferenceArgs and DatasetReferenceOutput values.
// You can construct a concrete instance of `DatasetReferenceInput` via:
//
//          DatasetReferenceArgs{...}
type DatasetReferenceInput interface {
	pulumi.Input

	ToDatasetReferenceOutput() DatasetReferenceOutput
	ToDatasetReferenceOutputWithContext(context.Context) DatasetReferenceOutput
}

// Dataset reference type.
type DatasetReferenceArgs struct {
	// Arguments for dataset.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// Reference dataset name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Dataset reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetReference)(nil)).Elem()
}

func (i DatasetReferenceArgs) ToDatasetReferenceOutput() DatasetReferenceOutput {
	return i.ToDatasetReferenceOutputWithContext(context.Background())
}

func (i DatasetReferenceArgs) ToDatasetReferenceOutputWithContext(ctx context.Context) DatasetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReferenceOutput)
}

func (i DatasetReferenceArgs) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return i.ToDatasetReferencePtrOutputWithContext(context.Background())
}

func (i DatasetReferenceArgs) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReferenceOutput).ToDatasetReferencePtrOutputWithContext(ctx)
}

// DatasetReferencePtrInput is an input type that accepts DatasetReferenceArgs, DatasetReferencePtr and DatasetReferencePtrOutput values.
// You can construct a concrete instance of `DatasetReferencePtrInput` via:
//
//          DatasetReferenceArgs{...}
//
//  or:
//
//          nil
type DatasetReferencePtrInput interface {
	pulumi.Input

	ToDatasetReferencePtrOutput() DatasetReferencePtrOutput
	ToDatasetReferencePtrOutputWithContext(context.Context) DatasetReferencePtrOutput
}

type datasetReferencePtrType DatasetReferenceArgs

func DatasetReferencePtr(v *DatasetReferenceArgs) DatasetReferencePtrInput {
	return (*datasetReferencePtrType)(v)
}

func (*datasetReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetReference)(nil)).Elem()
}

func (i *datasetReferencePtrType) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return i.ToDatasetReferencePtrOutputWithContext(context.Background())
}

func (i *datasetReferencePtrType) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReferencePtrOutput)
}

// Dataset reference type.
type DatasetReferenceOutput struct{ *pulumi.OutputState }

func (DatasetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetReference)(nil)).Elem()
}

func (o DatasetReferenceOutput) ToDatasetReferenceOutput() DatasetReferenceOutput {
	return o
}

func (o DatasetReferenceOutput) ToDatasetReferenceOutputWithContext(ctx context.Context) DatasetReferenceOutput {
	return o
}

func (o DatasetReferenceOutput) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return o.ToDatasetReferencePtrOutputWithContext(context.Background())
}

func (o DatasetReferenceOutput) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return o.ApplyT(func(v DatasetReference) *DatasetReference {
		return &v
	}).(DatasetReferencePtrOutput)
}

// Arguments for dataset.
func (o DatasetReferenceOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetReference) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Reference dataset name.
func (o DatasetReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Dataset reference type.
func (o DatasetReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetReference) string { return v.Type }).(pulumi.StringOutput)
}

type DatasetReferencePtrOutput struct{ *pulumi.OutputState }

func (DatasetReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetReference)(nil)).Elem()
}

func (o DatasetReferencePtrOutput) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return o
}

func (o DatasetReferencePtrOutput) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return o
}

func (o DatasetReferencePtrOutput) Elem() DatasetReferenceOutput {
	return o.ApplyT(func(v *DatasetReference) DatasetReference { return *v }).(DatasetReferenceOutput)
}

// Arguments for dataset.
func (o DatasetReferencePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *DatasetReference) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// Reference dataset name.
func (o DatasetReferencePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Dataset reference type.
func (o DatasetReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Dataset reference type.
type DatasetReferenceResponse struct {
	// Arguments for dataset.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference dataset name.
	ReferenceName string `pulumi:"referenceName"`
	// Dataset reference type.
	Type string `pulumi:"type"`
}

// DatasetReferenceResponseInput is an input type that accepts DatasetReferenceResponseArgs and DatasetReferenceResponseOutput values.
// You can construct a concrete instance of `DatasetReferenceResponseInput` via:
//
//          DatasetReferenceResponseArgs{...}
type DatasetReferenceResponseInput interface {
	pulumi.Input

	ToDatasetReferenceResponseOutput() DatasetReferenceResponseOutput
	ToDatasetReferenceResponseOutputWithContext(context.Context) DatasetReferenceResponseOutput
}

// Dataset reference type.
type DatasetReferenceResponseArgs struct {
	// Arguments for dataset.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// Reference dataset name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Dataset reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetReferenceResponse)(nil)).Elem()
}

func (i DatasetReferenceResponseArgs) ToDatasetReferenceResponseOutput() DatasetReferenceResponseOutput {
	return i.ToDatasetReferenceResponseOutputWithContext(context.Background())
}

func (i DatasetReferenceResponseArgs) ToDatasetReferenceResponseOutputWithContext(ctx context.Context) DatasetReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReferenceResponseOutput)
}

func (i DatasetReferenceResponseArgs) ToDatasetReferenceResponsePtrOutput() DatasetReferenceResponsePtrOutput {
	return i.ToDatasetReferenceResponsePtrOutputWithContext(context.Background())
}

func (i DatasetReferenceResponseArgs) ToDatasetReferenceResponsePtrOutputWithContext(ctx context.Context) DatasetReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReferenceResponseOutput).ToDatasetReferenceResponsePtrOutputWithContext(ctx)
}

// DatasetReferenceResponsePtrInput is an input type that accepts DatasetReferenceResponseArgs, DatasetReferenceResponsePtr and DatasetReferenceResponsePtrOutput values.
// You can construct a concrete instance of `DatasetReferenceResponsePtrInput` via:
//
//          DatasetReferenceResponseArgs{...}
//
//  or:
//
//          nil
type DatasetReferenceResponsePtrInput interface {
	pulumi.Input

	ToDatasetReferenceResponsePtrOutput() DatasetReferenceResponsePtrOutput
	ToDatasetReferenceResponsePtrOutputWithContext(context.Context) DatasetReferenceResponsePtrOutput
}

type datasetReferenceResponsePtrType DatasetReferenceResponseArgs

func DatasetReferenceResponsePtr(v *DatasetReferenceResponseArgs) DatasetReferenceResponsePtrInput {
	return (*datasetReferenceResponsePtrType)(v)
}

func (*datasetReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetReferenceResponse)(nil)).Elem()
}

func (i *datasetReferenceResponsePtrType) ToDatasetReferenceResponsePtrOutput() DatasetReferenceResponsePtrOutput {
	return i.ToDatasetReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *datasetReferenceResponsePtrType) ToDatasetReferenceResponsePtrOutputWithContext(ctx context.Context) DatasetReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReferenceResponsePtrOutput)
}

// Dataset reference type.
type DatasetReferenceResponseOutput struct{ *pulumi.OutputState }

func (DatasetReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetReferenceResponse)(nil)).Elem()
}

func (o DatasetReferenceResponseOutput) ToDatasetReferenceResponseOutput() DatasetReferenceResponseOutput {
	return o
}

func (o DatasetReferenceResponseOutput) ToDatasetReferenceResponseOutputWithContext(ctx context.Context) DatasetReferenceResponseOutput {
	return o
}

func (o DatasetReferenceResponseOutput) ToDatasetReferenceResponsePtrOutput() DatasetReferenceResponsePtrOutput {
	return o.ToDatasetReferenceResponsePtrOutputWithContext(context.Background())
}

func (o DatasetReferenceResponseOutput) ToDatasetReferenceResponsePtrOutputWithContext(ctx context.Context) DatasetReferenceResponsePtrOutput {
	return o.ApplyT(func(v DatasetReferenceResponse) *DatasetReferenceResponse {
		return &v
	}).(DatasetReferenceResponsePtrOutput)
}

// Arguments for dataset.
func (o DatasetReferenceResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetReferenceResponse) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Reference dataset name.
func (o DatasetReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Dataset reference type.
func (o DatasetReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DatasetReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (DatasetReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetReferenceResponse)(nil)).Elem()
}

func (o DatasetReferenceResponsePtrOutput) ToDatasetReferenceResponsePtrOutput() DatasetReferenceResponsePtrOutput {
	return o
}

func (o DatasetReferenceResponsePtrOutput) ToDatasetReferenceResponsePtrOutputWithContext(ctx context.Context) DatasetReferenceResponsePtrOutput {
	return o
}

func (o DatasetReferenceResponsePtrOutput) Elem() DatasetReferenceResponseOutput {
	return o.ApplyT(func(v *DatasetReferenceResponse) DatasetReferenceResponse { return *v }).(DatasetReferenceResponseOutput)
}

// Arguments for dataset.
func (o DatasetReferenceResponsePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *DatasetReferenceResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// Reference dataset name.
func (o DatasetReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Dataset reference type.
func (o DatasetReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetResponseFolder struct {
	// The name of the folder that this Dataset is in.
	Name *string `pulumi:"name"`
}

// DatasetResponseFolderInput is an input type that accepts DatasetResponseFolderArgs and DatasetResponseFolderOutput values.
// You can construct a concrete instance of `DatasetResponseFolderInput` via:
//
//          DatasetResponseFolderArgs{...}
type DatasetResponseFolderInput interface {
	pulumi.Input

	ToDatasetResponseFolderOutput() DatasetResponseFolderOutput
	ToDatasetResponseFolderOutputWithContext(context.Context) DatasetResponseFolderOutput
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetResponseFolderArgs struct {
	// The name of the folder that this Dataset is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DatasetResponseFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponseFolder)(nil)).Elem()
}

func (i DatasetResponseFolderArgs) ToDatasetResponseFolderOutput() DatasetResponseFolderOutput {
	return i.ToDatasetResponseFolderOutputWithContext(context.Background())
}

func (i DatasetResponseFolderArgs) ToDatasetResponseFolderOutputWithContext(ctx context.Context) DatasetResponseFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetResponseFolderOutput)
}

func (i DatasetResponseFolderArgs) ToDatasetResponseFolderPtrOutput() DatasetResponseFolderPtrOutput {
	return i.ToDatasetResponseFolderPtrOutputWithContext(context.Background())
}

func (i DatasetResponseFolderArgs) ToDatasetResponseFolderPtrOutputWithContext(ctx context.Context) DatasetResponseFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetResponseFolderOutput).ToDatasetResponseFolderPtrOutputWithContext(ctx)
}

// DatasetResponseFolderPtrInput is an input type that accepts DatasetResponseFolderArgs, DatasetResponseFolderPtr and DatasetResponseFolderPtrOutput values.
// You can construct a concrete instance of `DatasetResponseFolderPtrInput` via:
//
//          DatasetResponseFolderArgs{...}
//
//  or:
//
//          nil
type DatasetResponseFolderPtrInput interface {
	pulumi.Input

	ToDatasetResponseFolderPtrOutput() DatasetResponseFolderPtrOutput
	ToDatasetResponseFolderPtrOutputWithContext(context.Context) DatasetResponseFolderPtrOutput
}

type datasetResponseFolderPtrType DatasetResponseFolderArgs

func DatasetResponseFolderPtr(v *DatasetResponseFolderArgs) DatasetResponseFolderPtrInput {
	return (*datasetResponseFolderPtrType)(v)
}

func (*datasetResponseFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetResponseFolder)(nil)).Elem()
}

func (i *datasetResponseFolderPtrType) ToDatasetResponseFolderPtrOutput() DatasetResponseFolderPtrOutput {
	return i.ToDatasetResponseFolderPtrOutputWithContext(context.Background())
}

func (i *datasetResponseFolderPtrType) ToDatasetResponseFolderPtrOutputWithContext(ctx context.Context) DatasetResponseFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetResponseFolderPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetResponseFolderOutput struct{ *pulumi.OutputState }

func (DatasetResponseFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponseFolder)(nil)).Elem()
}

func (o DatasetResponseFolderOutput) ToDatasetResponseFolderOutput() DatasetResponseFolderOutput {
	return o
}

func (o DatasetResponseFolderOutput) ToDatasetResponseFolderOutputWithContext(ctx context.Context) DatasetResponseFolderOutput {
	return o
}

func (o DatasetResponseFolderOutput) ToDatasetResponseFolderPtrOutput() DatasetResponseFolderPtrOutput {
	return o.ToDatasetResponseFolderPtrOutputWithContext(context.Background())
}

func (o DatasetResponseFolderOutput) ToDatasetResponseFolderPtrOutputWithContext(ctx context.Context) DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v DatasetResponseFolder) *DatasetResponseFolder {
		return &v
	}).(DatasetResponseFolderPtrOutput)
}

// The name of the folder that this Dataset is in.
func (o DatasetResponseFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetResponseFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DatasetResponseFolderPtrOutput struct{ *pulumi.OutputState }

func (DatasetResponseFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetResponseFolder)(nil)).Elem()
}

func (o DatasetResponseFolderPtrOutput) ToDatasetResponseFolderPtrOutput() DatasetResponseFolderPtrOutput {
	return o
}

func (o DatasetResponseFolderPtrOutput) ToDatasetResponseFolderPtrOutputWithContext(ctx context.Context) DatasetResponseFolderPtrOutput {
	return o
}

func (o DatasetResponseFolderPtrOutput) Elem() DatasetResponseFolderOutput {
	return o.ApplyT(func(v *DatasetResponseFolder) DatasetResponseFolder { return *v }).(DatasetResponseFolderOutput)
}

// The name of the folder that this Dataset is in.
func (o DatasetResponseFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The Tar archive method used on a dataset.
type DatasetTarCompression struct {
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// DatasetTarCompressionInput is an input type that accepts DatasetTarCompressionArgs and DatasetTarCompressionOutput values.
// You can construct a concrete instance of `DatasetTarCompressionInput` via:
//
//          DatasetTarCompressionArgs{...}
type DatasetTarCompressionInput interface {
	pulumi.Input

	ToDatasetTarCompressionOutput() DatasetTarCompressionOutput
	ToDatasetTarCompressionOutputWithContext(context.Context) DatasetTarCompressionOutput
}

// The Tar archive method used on a dataset.
type DatasetTarCompressionArgs struct {
	// Type of dataset compression.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetTarCompressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetTarCompression)(nil)).Elem()
}

func (i DatasetTarCompressionArgs) ToDatasetTarCompressionOutput() DatasetTarCompressionOutput {
	return i.ToDatasetTarCompressionOutputWithContext(context.Background())
}

func (i DatasetTarCompressionArgs) ToDatasetTarCompressionOutputWithContext(ctx context.Context) DatasetTarCompressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTarCompressionOutput)
}

// The Tar archive method used on a dataset.
type DatasetTarCompressionOutput struct{ *pulumi.OutputState }

func (DatasetTarCompressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetTarCompression)(nil)).Elem()
}

func (o DatasetTarCompressionOutput) ToDatasetTarCompressionOutput() DatasetTarCompressionOutput {
	return o
}

func (o DatasetTarCompressionOutput) ToDatasetTarCompressionOutputWithContext(ctx context.Context) DatasetTarCompressionOutput {
	return o
}

// Type of dataset compression.
func (o DatasetTarCompressionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetTarCompression) string { return v.Type }).(pulumi.StringOutput)
}

// The Tar archive method used on a dataset.
type DatasetTarCompressionResponse struct {
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// DatasetTarCompressionResponseInput is an input type that accepts DatasetTarCompressionResponseArgs and DatasetTarCompressionResponseOutput values.
// You can construct a concrete instance of `DatasetTarCompressionResponseInput` via:
//
//          DatasetTarCompressionResponseArgs{...}
type DatasetTarCompressionResponseInput interface {
	pulumi.Input

	ToDatasetTarCompressionResponseOutput() DatasetTarCompressionResponseOutput
	ToDatasetTarCompressionResponseOutputWithContext(context.Context) DatasetTarCompressionResponseOutput
}

// The Tar archive method used on a dataset.
type DatasetTarCompressionResponseArgs struct {
	// Type of dataset compression.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetTarCompressionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetTarCompressionResponse)(nil)).Elem()
}

func (i DatasetTarCompressionResponseArgs) ToDatasetTarCompressionResponseOutput() DatasetTarCompressionResponseOutput {
	return i.ToDatasetTarCompressionResponseOutputWithContext(context.Background())
}

func (i DatasetTarCompressionResponseArgs) ToDatasetTarCompressionResponseOutputWithContext(ctx context.Context) DatasetTarCompressionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTarCompressionResponseOutput)
}

// The Tar archive method used on a dataset.
type DatasetTarCompressionResponseOutput struct{ *pulumi.OutputState }

func (DatasetTarCompressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetTarCompressionResponse)(nil)).Elem()
}

func (o DatasetTarCompressionResponseOutput) ToDatasetTarCompressionResponseOutput() DatasetTarCompressionResponseOutput {
	return o
}

func (o DatasetTarCompressionResponseOutput) ToDatasetTarCompressionResponseOutputWithContext(ctx context.Context) DatasetTarCompressionResponseOutput {
	return o
}

// Type of dataset compression.
func (o DatasetTarCompressionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetTarCompressionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The TarGZip compression method used on a dataset.
type DatasetTarGZipCompression struct {
	// The TarGZip compression level.
	Level *string `pulumi:"level"`
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// DatasetTarGZipCompressionInput is an input type that accepts DatasetTarGZipCompressionArgs and DatasetTarGZipCompressionOutput values.
// You can construct a concrete instance of `DatasetTarGZipCompressionInput` via:
//
//          DatasetTarGZipCompressionArgs{...}
type DatasetTarGZipCompressionInput interface {
	pulumi.Input

	ToDatasetTarGZipCompressionOutput() DatasetTarGZipCompressionOutput
	ToDatasetTarGZipCompressionOutputWithContext(context.Context) DatasetTarGZipCompressionOutput
}

// The TarGZip compression method used on a dataset.
type DatasetTarGZipCompressionArgs struct {
	// The TarGZip compression level.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Type of dataset compression.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetTarGZipCompressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetTarGZipCompression)(nil)).Elem()
}

func (i DatasetTarGZipCompressionArgs) ToDatasetTarGZipCompressionOutput() DatasetTarGZipCompressionOutput {
	return i.ToDatasetTarGZipCompressionOutputWithContext(context.Background())
}

func (i DatasetTarGZipCompressionArgs) ToDatasetTarGZipCompressionOutputWithContext(ctx context.Context) DatasetTarGZipCompressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTarGZipCompressionOutput)
}

// The TarGZip compression method used on a dataset.
type DatasetTarGZipCompressionOutput struct{ *pulumi.OutputState }

func (DatasetTarGZipCompressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetTarGZipCompression)(nil)).Elem()
}

func (o DatasetTarGZipCompressionOutput) ToDatasetTarGZipCompressionOutput() DatasetTarGZipCompressionOutput {
	return o
}

func (o DatasetTarGZipCompressionOutput) ToDatasetTarGZipCompressionOutputWithContext(ctx context.Context) DatasetTarGZipCompressionOutput {
	return o
}

// The TarGZip compression level.
func (o DatasetTarGZipCompressionOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetTarGZipCompression) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Type of dataset compression.
func (o DatasetTarGZipCompressionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetTarGZipCompression) string { return v.Type }).(pulumi.StringOutput)
}

// The TarGZip compression method used on a dataset.
type DatasetTarGZipCompressionResponse struct {
	// The TarGZip compression level.
	Level *string `pulumi:"level"`
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// DatasetTarGZipCompressionResponseInput is an input type that accepts DatasetTarGZipCompressionResponseArgs and DatasetTarGZipCompressionResponseOutput values.
// You can construct a concrete instance of `DatasetTarGZipCompressionResponseInput` via:
//
//          DatasetTarGZipCompressionResponseArgs{...}
type DatasetTarGZipCompressionResponseInput interface {
	pulumi.Input

	ToDatasetTarGZipCompressionResponseOutput() DatasetTarGZipCompressionResponseOutput
	ToDatasetTarGZipCompressionResponseOutputWithContext(context.Context) DatasetTarGZipCompressionResponseOutput
}

// The TarGZip compression method used on a dataset.
type DatasetTarGZipCompressionResponseArgs struct {
	// The TarGZip compression level.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Type of dataset compression.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetTarGZipCompressionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetTarGZipCompressionResponse)(nil)).Elem()
}

func (i DatasetTarGZipCompressionResponseArgs) ToDatasetTarGZipCompressionResponseOutput() DatasetTarGZipCompressionResponseOutput {
	return i.ToDatasetTarGZipCompressionResponseOutputWithContext(context.Background())
}

func (i DatasetTarGZipCompressionResponseArgs) ToDatasetTarGZipCompressionResponseOutputWithContext(ctx context.Context) DatasetTarGZipCompressionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTarGZipCompressionResponseOutput)
}

// The TarGZip compression method used on a dataset.
type DatasetTarGZipCompressionResponseOutput struct{ *pulumi.OutputState }

func (DatasetTarGZipCompressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetTarGZipCompressionResponse)(nil)).Elem()
}

func (o DatasetTarGZipCompressionResponseOutput) ToDatasetTarGZipCompressionResponseOutput() DatasetTarGZipCompressionResponseOutput {
	return o
}

func (o DatasetTarGZipCompressionResponseOutput) ToDatasetTarGZipCompressionResponseOutputWithContext(ctx context.Context) DatasetTarGZipCompressionResponseOutput {
	return o
}

// The TarGZip compression level.
func (o DatasetTarGZipCompressionResponseOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetTarGZipCompressionResponse) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Type of dataset compression.
func (o DatasetTarGZipCompressionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetTarGZipCompressionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The ZipDeflate compression method used on a dataset.
type DatasetZipDeflateCompression struct {
	// The ZipDeflate compression level.
	Level *string `pulumi:"level"`
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// DatasetZipDeflateCompressionInput is an input type that accepts DatasetZipDeflateCompressionArgs and DatasetZipDeflateCompressionOutput values.
// You can construct a concrete instance of `DatasetZipDeflateCompressionInput` via:
//
//          DatasetZipDeflateCompressionArgs{...}
type DatasetZipDeflateCompressionInput interface {
	pulumi.Input

	ToDatasetZipDeflateCompressionOutput() DatasetZipDeflateCompressionOutput
	ToDatasetZipDeflateCompressionOutputWithContext(context.Context) DatasetZipDeflateCompressionOutput
}

// The ZipDeflate compression method used on a dataset.
type DatasetZipDeflateCompressionArgs struct {
	// The ZipDeflate compression level.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Type of dataset compression.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetZipDeflateCompressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetZipDeflateCompression)(nil)).Elem()
}

func (i DatasetZipDeflateCompressionArgs) ToDatasetZipDeflateCompressionOutput() DatasetZipDeflateCompressionOutput {
	return i.ToDatasetZipDeflateCompressionOutputWithContext(context.Background())
}

func (i DatasetZipDeflateCompressionArgs) ToDatasetZipDeflateCompressionOutputWithContext(ctx context.Context) DatasetZipDeflateCompressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetZipDeflateCompressionOutput)
}

// The ZipDeflate compression method used on a dataset.
type DatasetZipDeflateCompressionOutput struct{ *pulumi.OutputState }

func (DatasetZipDeflateCompressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetZipDeflateCompression)(nil)).Elem()
}

func (o DatasetZipDeflateCompressionOutput) ToDatasetZipDeflateCompressionOutput() DatasetZipDeflateCompressionOutput {
	return o
}

func (o DatasetZipDeflateCompressionOutput) ToDatasetZipDeflateCompressionOutputWithContext(ctx context.Context) DatasetZipDeflateCompressionOutput {
	return o
}

// The ZipDeflate compression level.
func (o DatasetZipDeflateCompressionOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetZipDeflateCompression) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Type of dataset compression.
func (o DatasetZipDeflateCompressionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetZipDeflateCompression) string { return v.Type }).(pulumi.StringOutput)
}

// The ZipDeflate compression method used on a dataset.
type DatasetZipDeflateCompressionResponse struct {
	// The ZipDeflate compression level.
	Level *string `pulumi:"level"`
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// DatasetZipDeflateCompressionResponseInput is an input type that accepts DatasetZipDeflateCompressionResponseArgs and DatasetZipDeflateCompressionResponseOutput values.
// You can construct a concrete instance of `DatasetZipDeflateCompressionResponseInput` via:
//
//          DatasetZipDeflateCompressionResponseArgs{...}
type DatasetZipDeflateCompressionResponseInput interface {
	pulumi.Input

	ToDatasetZipDeflateCompressionResponseOutput() DatasetZipDeflateCompressionResponseOutput
	ToDatasetZipDeflateCompressionResponseOutputWithContext(context.Context) DatasetZipDeflateCompressionResponseOutput
}

// The ZipDeflate compression method used on a dataset.
type DatasetZipDeflateCompressionResponseArgs struct {
	// The ZipDeflate compression level.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Type of dataset compression.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetZipDeflateCompressionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetZipDeflateCompressionResponse)(nil)).Elem()
}

func (i DatasetZipDeflateCompressionResponseArgs) ToDatasetZipDeflateCompressionResponseOutput() DatasetZipDeflateCompressionResponseOutput {
	return i.ToDatasetZipDeflateCompressionResponseOutputWithContext(context.Background())
}

func (i DatasetZipDeflateCompressionResponseArgs) ToDatasetZipDeflateCompressionResponseOutputWithContext(ctx context.Context) DatasetZipDeflateCompressionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetZipDeflateCompressionResponseOutput)
}

// The ZipDeflate compression method used on a dataset.
type DatasetZipDeflateCompressionResponseOutput struct{ *pulumi.OutputState }

func (DatasetZipDeflateCompressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetZipDeflateCompressionResponse)(nil)).Elem()
}

func (o DatasetZipDeflateCompressionResponseOutput) ToDatasetZipDeflateCompressionResponseOutput() DatasetZipDeflateCompressionResponseOutput {
	return o
}

func (o DatasetZipDeflateCompressionResponseOutput) ToDatasetZipDeflateCompressionResponseOutputWithContext(ctx context.Context) DatasetZipDeflateCompressionResponseOutput {
	return o
}

// The ZipDeflate compression level.
func (o DatasetZipDeflateCompressionResponseOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetZipDeflateCompressionResponse) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Type of dataset compression.
func (o DatasetZipDeflateCompressionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetZipDeflateCompressionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for DB2 data source.
type Db2LinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	CertificateCommonName interface{} `pulumi:"certificateCommonName"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with server, database, authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Database name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Under where packages are created when querying database. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	PackageCollection interface{} `pulumi:"packageCollection"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Db2LinkedServiceInput is an input type that accepts Db2LinkedServiceArgs and Db2LinkedServiceOutput values.
// You can construct a concrete instance of `Db2LinkedServiceInput` via:
//
//          Db2LinkedServiceArgs{...}
type Db2LinkedServiceInput interface {
	pulumi.Input

	ToDb2LinkedServiceOutput() Db2LinkedServiceOutput
	ToDb2LinkedServiceOutputWithContext(context.Context) Db2LinkedServiceOutput
}

// Linked service for DB2 data source.
type Db2LinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	CertificateCommonName pulumi.Input `pulumi:"certificateCommonName"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with server, database, authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Database name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Under where packages are created when querying database. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	PackageCollection pulumi.Input `pulumi:"packageCollection"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (Db2LinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2LinkedService)(nil)).Elem()
}

func (i Db2LinkedServiceArgs) ToDb2LinkedServiceOutput() Db2LinkedServiceOutput {
	return i.ToDb2LinkedServiceOutputWithContext(context.Background())
}

func (i Db2LinkedServiceArgs) ToDb2LinkedServiceOutputWithContext(ctx context.Context) Db2LinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Db2LinkedServiceOutput)
}

// Linked service for DB2 data source.
type Db2LinkedServiceOutput struct{ *pulumi.OutputState }

func (Db2LinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2LinkedService)(nil)).Elem()
}

func (o Db2LinkedServiceOutput) ToDb2LinkedServiceOutput() Db2LinkedServiceOutput {
	return o
}

func (o Db2LinkedServiceOutput) ToDb2LinkedServiceOutputWithContext(ctx context.Context) Db2LinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o Db2LinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v Db2LinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
func (o Db2LinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2LinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceOutput) CertificateCommonName() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedService) interface{} { return v.CertificateCommonName }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o Db2LinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v Db2LinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. It is mutually exclusive with server, database, authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o Db2LinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Database name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedService) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o Db2LinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2LinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Under where packages are created when querying database. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceOutput) PackageCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedService) interface{} { return v.PackageCollection }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o Db2LinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v Db2LinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for authentication.
func (o Db2LinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o Db2LinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Db2LinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for DB2 data source.
type Db2LinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	CertificateCommonName interface{} `pulumi:"certificateCommonName"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with server, database, authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Database name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Under where packages are created when querying database. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	PackageCollection interface{} `pulumi:"packageCollection"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Db2LinkedServiceResponseInput is an input type that accepts Db2LinkedServiceResponseArgs and Db2LinkedServiceResponseOutput values.
// You can construct a concrete instance of `Db2LinkedServiceResponseInput` via:
//
//          Db2LinkedServiceResponseArgs{...}
type Db2LinkedServiceResponseInput interface {
	pulumi.Input

	ToDb2LinkedServiceResponseOutput() Db2LinkedServiceResponseOutput
	ToDb2LinkedServiceResponseOutputWithContext(context.Context) Db2LinkedServiceResponseOutput
}

// Linked service for DB2 data source.
type Db2LinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	CertificateCommonName pulumi.Input `pulumi:"certificateCommonName"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with server, database, authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Database name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Under where packages are created when querying database. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	PackageCollection pulumi.Input `pulumi:"packageCollection"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (Db2LinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2LinkedServiceResponse)(nil)).Elem()
}

func (i Db2LinkedServiceResponseArgs) ToDb2LinkedServiceResponseOutput() Db2LinkedServiceResponseOutput {
	return i.ToDb2LinkedServiceResponseOutputWithContext(context.Background())
}

func (i Db2LinkedServiceResponseArgs) ToDb2LinkedServiceResponseOutputWithContext(ctx context.Context) Db2LinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Db2LinkedServiceResponseOutput)
}

// Linked service for DB2 data source.
type Db2LinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (Db2LinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2LinkedServiceResponse)(nil)).Elem()
}

func (o Db2LinkedServiceResponseOutput) ToDb2LinkedServiceResponseOutput() Db2LinkedServiceResponseOutput {
	return o
}

func (o Db2LinkedServiceResponseOutput) ToDb2LinkedServiceResponseOutputWithContext(ctx context.Context) Db2LinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o Db2LinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
func (o Db2LinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceResponseOutput) CertificateCommonName() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) interface{} { return v.CertificateCommonName }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o Db2LinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. It is mutually exclusive with server, database, authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o Db2LinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Database name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o Db2LinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Under where packages are created when querying database. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceResponseOutput) PackageCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) interface{} { return v.PackageCollection }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o Db2LinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for authentication.
func (o Db2LinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o Db2LinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// The Db2 table dataset.
type Db2TableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Db2 table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Db2TableDatasetInput is an input type that accepts Db2TableDatasetArgs and Db2TableDatasetOutput values.
// You can construct a concrete instance of `Db2TableDatasetInput` via:
//
//          Db2TableDatasetArgs{...}
type Db2TableDatasetInput interface {
	pulumi.Input

	ToDb2TableDatasetOutput() Db2TableDatasetOutput
	ToDb2TableDatasetOutputWithContext(context.Context) Db2TableDatasetOutput
}

// The Db2 table dataset.
type Db2TableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The Db2 table name. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (Db2TableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2TableDataset)(nil)).Elem()
}

func (i Db2TableDatasetArgs) ToDb2TableDatasetOutput() Db2TableDatasetOutput {
	return i.ToDb2TableDatasetOutputWithContext(context.Background())
}

func (i Db2TableDatasetArgs) ToDb2TableDatasetOutputWithContext(ctx context.Context) Db2TableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Db2TableDatasetOutput)
}

// The Db2 table dataset.
type Db2TableDatasetOutput struct{ *pulumi.OutputState }

func (Db2TableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2TableDataset)(nil)).Elem()
}

func (o Db2TableDatasetOutput) ToDb2TableDatasetOutput() Db2TableDatasetOutput {
	return o
}

func (o Db2TableDatasetOutput) ToDb2TableDatasetOutputWithContext(ctx context.Context) Db2TableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o Db2TableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v Db2TableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o Db2TableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2TableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o Db2TableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v Db2TableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o Db2TableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v Db2TableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o Db2TableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v Db2TableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o Db2TableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2TableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o Db2TableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2TableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Db2 table name. Type: string (or Expression with resultType string).
func (o Db2TableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2TableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o Db2TableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2TableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o Db2TableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Db2TableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Db2 table dataset.
type Db2TableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Db2 table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Db2TableDatasetResponseInput is an input type that accepts Db2TableDatasetResponseArgs and Db2TableDatasetResponseOutput values.
// You can construct a concrete instance of `Db2TableDatasetResponseInput` via:
//
//          Db2TableDatasetResponseArgs{...}
type Db2TableDatasetResponseInput interface {
	pulumi.Input

	ToDb2TableDatasetResponseOutput() Db2TableDatasetResponseOutput
	ToDb2TableDatasetResponseOutputWithContext(context.Context) Db2TableDatasetResponseOutput
}

// The Db2 table dataset.
type Db2TableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The Db2 table name. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (Db2TableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2TableDatasetResponse)(nil)).Elem()
}

func (i Db2TableDatasetResponseArgs) ToDb2TableDatasetResponseOutput() Db2TableDatasetResponseOutput {
	return i.ToDb2TableDatasetResponseOutputWithContext(context.Background())
}

func (i Db2TableDatasetResponseArgs) ToDb2TableDatasetResponseOutputWithContext(ctx context.Context) Db2TableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Db2TableDatasetResponseOutput)
}

// The Db2 table dataset.
type Db2TableDatasetResponseOutput struct{ *pulumi.OutputState }

func (Db2TableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2TableDatasetResponse)(nil)).Elem()
}

func (o Db2TableDatasetResponseOutput) ToDb2TableDatasetResponseOutput() Db2TableDatasetResponseOutput {
	return o
}

func (o Db2TableDatasetResponseOutput) ToDb2TableDatasetResponseOutputWithContext(ctx context.Context) Db2TableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o Db2TableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o Db2TableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o Db2TableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o Db2TableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o Db2TableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o Db2TableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o Db2TableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Db2 table name. Type: string (or Expression with resultType string).
func (o Db2TableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o Db2TableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o Db2TableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Delimited text dataset.
type DelimitedTextDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter  interface{} `pulumi:"columnDelimiter"`
	CompressionCodec *string     `pulumi:"compressionCodec"`
	// The data compression method used for DelimitedText.
	CompressionLevel *string `pulumi:"compressionLevel"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar interface{} `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the delimited text storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar interface{} `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter interface{} `pulumi:"rowDelimiter"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DelimitedTextDatasetInput is an input type that accepts DelimitedTextDatasetArgs and DelimitedTextDatasetOutput values.
// You can construct a concrete instance of `DelimitedTextDatasetInput` via:
//
//          DelimitedTextDatasetArgs{...}
type DelimitedTextDatasetInput interface {
	pulumi.Input

	ToDelimitedTextDatasetOutput() DelimitedTextDatasetOutput
	ToDelimitedTextDatasetOutputWithContext(context.Context) DelimitedTextDatasetOutput
}

// Delimited text dataset.
type DelimitedTextDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter  pulumi.Input          `pulumi:"columnDelimiter"`
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// The data compression method used for DelimitedText.
	CompressionLevel pulumi.StringPtrInput `pulumi:"compressionLevel"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName pulumi.Input `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar pulumi.Input `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader pulumi.Input `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The location of the delimited text storage.
	Location pulumi.Input `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue pulumi.Input `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar pulumi.Input `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter pulumi.Input `pulumi:"rowDelimiter"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DelimitedTextDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DelimitedTextDataset)(nil)).Elem()
}

func (i DelimitedTextDatasetArgs) ToDelimitedTextDatasetOutput() DelimitedTextDatasetOutput {
	return i.ToDelimitedTextDatasetOutputWithContext(context.Background())
}

func (i DelimitedTextDatasetArgs) ToDelimitedTextDatasetOutputWithContext(ctx context.Context) DelimitedTextDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelimitedTextDatasetOutput)
}

// Delimited text dataset.
type DelimitedTextDatasetOutput struct{ *pulumi.OutputState }

func (DelimitedTextDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelimitedTextDataset)(nil)).Elem()
}

func (o DelimitedTextDatasetOutput) ToDelimitedTextDatasetOutput() DelimitedTextDatasetOutput {
	return o
}

func (o DelimitedTextDatasetOutput) ToDelimitedTextDatasetOutputWithContext(ctx context.Context) DelimitedTextDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DelimitedTextDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DelimitedTextDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The column delimiter. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetOutput) ColumnDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.ColumnDelimiter }).(pulumi.AnyOutput)
}

func (o DelimitedTextDatasetOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DelimitedTextDataset) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// The data compression method used for DelimitedText.
func (o DelimitedTextDatasetOutput) CompressionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DelimitedTextDataset) *string { return v.CompressionLevel }).(pulumi.StringPtrOutput)
}

// Dataset description.
func (o DelimitedTextDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DelimitedTextDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// The escape character. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetOutput) EscapeChar() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.EscapeChar }).(pulumi.AnyOutput)
}

// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o DelimitedTextDatasetOutput) FirstRowAsHeader() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.FirstRowAsHeader }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DelimitedTextDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v DelimitedTextDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o DelimitedTextDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v DelimitedTextDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The location of the delimited text storage.
func (o DelimitedTextDatasetOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// The null value string. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetOutput) NullValue() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.NullValue }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o DelimitedTextDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DelimitedTextDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The quote character. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetOutput) QuoteChar() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.QuoteChar }).(pulumi.AnyOutput)
}

// The row delimiter. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetOutput) RowDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.RowDelimiter }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DelimitedTextDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DelimitedTextDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o DelimitedTextDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DelimitedTextDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Delimited text dataset.
type DelimitedTextDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter  interface{} `pulumi:"columnDelimiter"`
	CompressionCodec *string     `pulumi:"compressionCodec"`
	// The data compression method used for DelimitedText.
	CompressionLevel *string `pulumi:"compressionLevel"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar interface{} `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the delimited text storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar interface{} `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter interface{} `pulumi:"rowDelimiter"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DelimitedTextDatasetResponseInput is an input type that accepts DelimitedTextDatasetResponseArgs and DelimitedTextDatasetResponseOutput values.
// You can construct a concrete instance of `DelimitedTextDatasetResponseInput` via:
//
//          DelimitedTextDatasetResponseArgs{...}
type DelimitedTextDatasetResponseInput interface {
	pulumi.Input

	ToDelimitedTextDatasetResponseOutput() DelimitedTextDatasetResponseOutput
	ToDelimitedTextDatasetResponseOutputWithContext(context.Context) DelimitedTextDatasetResponseOutput
}

// Delimited text dataset.
type DelimitedTextDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter  pulumi.Input          `pulumi:"columnDelimiter"`
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// The data compression method used for DelimitedText.
	CompressionLevel pulumi.StringPtrInput `pulumi:"compressionLevel"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName pulumi.Input `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar pulumi.Input `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader pulumi.Input `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// The location of the delimited text storage.
	Location pulumi.Input `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue pulumi.Input `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar pulumi.Input `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter pulumi.Input `pulumi:"rowDelimiter"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DelimitedTextDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DelimitedTextDatasetResponse)(nil)).Elem()
}

func (i DelimitedTextDatasetResponseArgs) ToDelimitedTextDatasetResponseOutput() DelimitedTextDatasetResponseOutput {
	return i.ToDelimitedTextDatasetResponseOutputWithContext(context.Background())
}

func (i DelimitedTextDatasetResponseArgs) ToDelimitedTextDatasetResponseOutputWithContext(ctx context.Context) DelimitedTextDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelimitedTextDatasetResponseOutput)
}

// Delimited text dataset.
type DelimitedTextDatasetResponseOutput struct{ *pulumi.OutputState }

func (DelimitedTextDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelimitedTextDatasetResponse)(nil)).Elem()
}

func (o DelimitedTextDatasetResponseOutput) ToDelimitedTextDatasetResponseOutput() DelimitedTextDatasetResponseOutput {
	return o
}

func (o DelimitedTextDatasetResponseOutput) ToDelimitedTextDatasetResponseOutputWithContext(ctx context.Context) DelimitedTextDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DelimitedTextDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The column delimiter. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetResponseOutput) ColumnDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.ColumnDelimiter }).(pulumi.AnyOutput)
}

func (o DelimitedTextDatasetResponseOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// The data compression method used for DelimitedText.
func (o DelimitedTextDatasetResponseOutput) CompressionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) *string { return v.CompressionLevel }).(pulumi.StringPtrOutput)
}

// Dataset description.
func (o DelimitedTextDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetResponseOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// The escape character. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetResponseOutput) EscapeChar() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.EscapeChar }).(pulumi.AnyOutput)
}

// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o DelimitedTextDatasetResponseOutput) FirstRowAsHeader() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.FirstRowAsHeader }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DelimitedTextDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o DelimitedTextDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The location of the delimited text storage.
func (o DelimitedTextDatasetResponseOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// The null value string. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetResponseOutput) NullValue() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.NullValue }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o DelimitedTextDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The quote character. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetResponseOutput) QuoteChar() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.QuoteChar }).(pulumi.AnyOutput)
}

// The row delimiter. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetResponseOutput) RowDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.RowDelimiter }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DelimitedTextDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DelimitedTextDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o DelimitedTextDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Document Database collection name. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DocumentDbCollectionDatasetInput is an input type that accepts DocumentDbCollectionDatasetArgs and DocumentDbCollectionDatasetOutput values.
// You can construct a concrete instance of `DocumentDbCollectionDatasetInput` via:
//
//          DocumentDbCollectionDatasetArgs{...}
type DocumentDbCollectionDatasetInput interface {
	pulumi.Input

	ToDocumentDbCollectionDatasetOutput() DocumentDbCollectionDatasetOutput
	ToDocumentDbCollectionDatasetOutputWithContext(context.Context) DocumentDbCollectionDatasetOutput
}

// Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Document Database collection name. Type: string (or Expression with resultType string).
	CollectionName pulumi.Input `pulumi:"collectionName"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DocumentDbCollectionDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDbCollectionDataset)(nil)).Elem()
}

func (i DocumentDbCollectionDatasetArgs) ToDocumentDbCollectionDatasetOutput() DocumentDbCollectionDatasetOutput {
	return i.ToDocumentDbCollectionDatasetOutputWithContext(context.Background())
}

func (i DocumentDbCollectionDatasetArgs) ToDocumentDbCollectionDatasetOutputWithContext(ctx context.Context) DocumentDbCollectionDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDbCollectionDatasetOutput)
}

// Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDatasetOutput struct{ *pulumi.OutputState }

func (DocumentDbCollectionDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDbCollectionDataset)(nil)).Elem()
}

func (o DocumentDbCollectionDatasetOutput) ToDocumentDbCollectionDatasetOutput() DocumentDbCollectionDatasetOutput {
	return o
}

func (o DocumentDbCollectionDatasetOutput) ToDocumentDbCollectionDatasetOutputWithContext(ctx context.Context) DocumentDbCollectionDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DocumentDbCollectionDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DocumentDbCollectionDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Document Database collection name. Type: string (or Expression with resultType string).
func (o DocumentDbCollectionDatasetOutput) CollectionName() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionDataset) interface{} { return v.CollectionName }).(pulumi.AnyOutput)
}

// Dataset description.
func (o DocumentDbCollectionDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDbCollectionDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DocumentDbCollectionDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v DocumentDbCollectionDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o DocumentDbCollectionDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v DocumentDbCollectionDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o DocumentDbCollectionDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DocumentDbCollectionDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DocumentDbCollectionDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DocumentDbCollectionDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o DocumentDbCollectionDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentDbCollectionDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Document Database collection name. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DocumentDbCollectionDatasetResponseInput is an input type that accepts DocumentDbCollectionDatasetResponseArgs and DocumentDbCollectionDatasetResponseOutput values.
// You can construct a concrete instance of `DocumentDbCollectionDatasetResponseInput` via:
//
//          DocumentDbCollectionDatasetResponseArgs{...}
type DocumentDbCollectionDatasetResponseInput interface {
	pulumi.Input

	ToDocumentDbCollectionDatasetResponseOutput() DocumentDbCollectionDatasetResponseOutput
	ToDocumentDbCollectionDatasetResponseOutputWithContext(context.Context) DocumentDbCollectionDatasetResponseOutput
}

// Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Document Database collection name. Type: string (or Expression with resultType string).
	CollectionName pulumi.Input `pulumi:"collectionName"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DocumentDbCollectionDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDbCollectionDatasetResponse)(nil)).Elem()
}

func (i DocumentDbCollectionDatasetResponseArgs) ToDocumentDbCollectionDatasetResponseOutput() DocumentDbCollectionDatasetResponseOutput {
	return i.ToDocumentDbCollectionDatasetResponseOutputWithContext(context.Background())
}

func (i DocumentDbCollectionDatasetResponseArgs) ToDocumentDbCollectionDatasetResponseOutputWithContext(ctx context.Context) DocumentDbCollectionDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDbCollectionDatasetResponseOutput)
}

// Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDatasetResponseOutput struct{ *pulumi.OutputState }

func (DocumentDbCollectionDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDbCollectionDatasetResponse)(nil)).Elem()
}

func (o DocumentDbCollectionDatasetResponseOutput) ToDocumentDbCollectionDatasetResponseOutput() DocumentDbCollectionDatasetResponseOutput {
	return o
}

func (o DocumentDbCollectionDatasetResponseOutput) ToDocumentDbCollectionDatasetResponseOutputWithContext(ctx context.Context) DocumentDbCollectionDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DocumentDbCollectionDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Document Database collection name. Type: string (or Expression with resultType string).
func (o DocumentDbCollectionDatasetResponseOutput) CollectionName() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) interface{} { return v.CollectionName }).(pulumi.AnyOutput)
}

// Dataset description.
func (o DocumentDbCollectionDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DocumentDbCollectionDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o DocumentDbCollectionDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o DocumentDbCollectionDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DocumentDbCollectionDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DocumentDbCollectionDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o DocumentDbCollectionDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Drill server linked service.
type DrillLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// DrillLinkedServiceInput is an input type that accepts DrillLinkedServiceArgs and DrillLinkedServiceOutput values.
// You can construct a concrete instance of `DrillLinkedServiceInput` via:
//
//          DrillLinkedServiceArgs{...}
type DrillLinkedServiceInput interface {
	pulumi.Input

	ToDrillLinkedServiceOutput() DrillLinkedServiceOutput
	ToDrillLinkedServiceOutputWithContext(context.Context) DrillLinkedServiceOutput
}

// Drill server linked service.
type DrillLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd AzureKeyVaultSecretReferencePtrInput `pulumi:"pwd"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DrillLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillLinkedService)(nil)).Elem()
}

func (i DrillLinkedServiceArgs) ToDrillLinkedServiceOutput() DrillLinkedServiceOutput {
	return i.ToDrillLinkedServiceOutputWithContext(context.Background())
}

func (i DrillLinkedServiceArgs) ToDrillLinkedServiceOutputWithContext(ctx context.Context) DrillLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DrillLinkedServiceOutput)
}

// Drill server linked service.
type DrillLinkedServiceOutput struct{ *pulumi.OutputState }

func (DrillLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillLinkedService)(nil)).Elem()
}

func (o DrillLinkedServiceOutput) ToDrillLinkedServiceOutput() DrillLinkedServiceOutput {
	return o
}

func (o DrillLinkedServiceOutput) ToDrillLinkedServiceOutputWithContext(ctx context.Context) DrillLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o DrillLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DrillLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o DrillLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v DrillLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o DrillLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o DrillLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DrillLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o DrillLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o DrillLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DrillLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o DrillLinkedServiceOutput) Pwd() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v DrillLinkedService) *AzureKeyVaultSecretReference { return v.Pwd }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
func (o DrillLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DrillLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Drill server linked service.
type DrillLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// DrillLinkedServiceResponseInput is an input type that accepts DrillLinkedServiceResponseArgs and DrillLinkedServiceResponseOutput values.
// You can construct a concrete instance of `DrillLinkedServiceResponseInput` via:
//
//          DrillLinkedServiceResponseArgs{...}
type DrillLinkedServiceResponseInput interface {
	pulumi.Input

	ToDrillLinkedServiceResponseOutput() DrillLinkedServiceResponseOutput
	ToDrillLinkedServiceResponseOutputWithContext(context.Context) DrillLinkedServiceResponseOutput
}

// Drill server linked service.
type DrillLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"pwd"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DrillLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillLinkedServiceResponse)(nil)).Elem()
}

func (i DrillLinkedServiceResponseArgs) ToDrillLinkedServiceResponseOutput() DrillLinkedServiceResponseOutput {
	return i.ToDrillLinkedServiceResponseOutputWithContext(context.Background())
}

func (i DrillLinkedServiceResponseArgs) ToDrillLinkedServiceResponseOutputWithContext(ctx context.Context) DrillLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DrillLinkedServiceResponseOutput)
}

// Drill server linked service.
type DrillLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (DrillLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillLinkedServiceResponse)(nil)).Elem()
}

func (o DrillLinkedServiceResponseOutput) ToDrillLinkedServiceResponseOutput() DrillLinkedServiceResponseOutput {
	return o
}

func (o DrillLinkedServiceResponseOutput) ToDrillLinkedServiceResponseOutputWithContext(ctx context.Context) DrillLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o DrillLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o DrillLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o DrillLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o DrillLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o DrillLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o DrillLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o DrillLinkedServiceResponseOutput) Pwd() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Pwd }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
func (o DrillLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Drill server dataset.
type DrillTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Drill. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DrillTableDatasetInput is an input type that accepts DrillTableDatasetArgs and DrillTableDatasetOutput values.
// You can construct a concrete instance of `DrillTableDatasetInput` via:
//
//          DrillTableDatasetArgs{...}
type DrillTableDatasetInput interface {
	pulumi.Input

	ToDrillTableDatasetOutput() DrillTableDatasetOutput
	ToDrillTableDatasetOutputWithContext(context.Context) DrillTableDatasetOutput
}

// Drill server dataset.
type DrillTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Drill. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DrillTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillTableDataset)(nil)).Elem()
}

func (i DrillTableDatasetArgs) ToDrillTableDatasetOutput() DrillTableDatasetOutput {
	return i.ToDrillTableDatasetOutputWithContext(context.Background())
}

func (i DrillTableDatasetArgs) ToDrillTableDatasetOutputWithContext(ctx context.Context) DrillTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DrillTableDatasetOutput)
}

// Drill server dataset.
type DrillTableDatasetOutput struct{ *pulumi.OutputState }

func (DrillTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillTableDataset)(nil)).Elem()
}

func (o DrillTableDatasetOutput) ToDrillTableDatasetOutput() DrillTableDatasetOutput {
	return o
}

func (o DrillTableDatasetOutput) ToDrillTableDatasetOutputWithContext(ctx context.Context) DrillTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DrillTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DrillTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o DrillTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DrillTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DrillTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v DrillTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o DrillTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v DrillTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o DrillTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DrillTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DrillTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DrillTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Drill. Type: string (or Expression with resultType string).
func (o DrillTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o DrillTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o DrillTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DrillTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Drill server dataset.
type DrillTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Drill. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DrillTableDatasetResponseInput is an input type that accepts DrillTableDatasetResponseArgs and DrillTableDatasetResponseOutput values.
// You can construct a concrete instance of `DrillTableDatasetResponseInput` via:
//
//          DrillTableDatasetResponseArgs{...}
type DrillTableDatasetResponseInput interface {
	pulumi.Input

	ToDrillTableDatasetResponseOutput() DrillTableDatasetResponseOutput
	ToDrillTableDatasetResponseOutputWithContext(context.Context) DrillTableDatasetResponseOutput
}

// Drill server dataset.
type DrillTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Drill. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DrillTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillTableDatasetResponse)(nil)).Elem()
}

func (i DrillTableDatasetResponseArgs) ToDrillTableDatasetResponseOutput() DrillTableDatasetResponseOutput {
	return i.ToDrillTableDatasetResponseOutputWithContext(context.Background())
}

func (i DrillTableDatasetResponseArgs) ToDrillTableDatasetResponseOutputWithContext(ctx context.Context) DrillTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DrillTableDatasetResponseOutput)
}

// Drill server dataset.
type DrillTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (DrillTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillTableDatasetResponse)(nil)).Elem()
}

func (o DrillTableDatasetResponseOutput) ToDrillTableDatasetResponseOutput() DrillTableDatasetResponseOutput {
	return o
}

func (o DrillTableDatasetResponseOutput) ToDrillTableDatasetResponseOutputWithContext(ctx context.Context) DrillTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DrillTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o DrillTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DrillTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o DrillTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o DrillTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DrillTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DrillTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Drill. Type: string (or Expression with resultType string).
func (o DrillTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o DrillTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o DrillTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Dynamics AX linked service.
type DynamicsAXLinkedService struct {
	// Specify the resource you are requesting authorization. Type: string (or Expression with resultType string).
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the application's key. Mark this field as a SecureString to store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Retrieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData endpoint.
	Url interface{} `pulumi:"url"`
}

// DynamicsAXLinkedServiceInput is an input type that accepts DynamicsAXLinkedServiceArgs and DynamicsAXLinkedServiceOutput values.
// You can construct a concrete instance of `DynamicsAXLinkedServiceInput` via:
//
//          DynamicsAXLinkedServiceArgs{...}
type DynamicsAXLinkedServiceInput interface {
	pulumi.Input

	ToDynamicsAXLinkedServiceOutput() DynamicsAXLinkedServiceOutput
	ToDynamicsAXLinkedServiceOutputWithContext(context.Context) DynamicsAXLinkedServiceOutput
}

// Dynamics AX linked service.
type DynamicsAXLinkedServiceArgs struct {
	// Specify the resource you are requesting authorization. Type: string (or Expression with resultType string).
	AadResourceId pulumi.Input `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// Specify the application's key. Mark this field as a SecureString to store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (or Expression with resultType string).
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Retrieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData endpoint.
	Url pulumi.Input `pulumi:"url"`
}

func (DynamicsAXLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsAXLinkedService)(nil)).Elem()
}

func (i DynamicsAXLinkedServiceArgs) ToDynamicsAXLinkedServiceOutput() DynamicsAXLinkedServiceOutput {
	return i.ToDynamicsAXLinkedServiceOutputWithContext(context.Background())
}

func (i DynamicsAXLinkedServiceArgs) ToDynamicsAXLinkedServiceOutputWithContext(ctx context.Context) DynamicsAXLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsAXLinkedServiceOutput)
}

// Dynamics AX linked service.
type DynamicsAXLinkedServiceOutput struct{ *pulumi.OutputState }

func (DynamicsAXLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsAXLinkedService)(nil)).Elem()
}

func (o DynamicsAXLinkedServiceOutput) ToDynamicsAXLinkedServiceOutput() DynamicsAXLinkedServiceOutput {
	return o
}

func (o DynamicsAXLinkedServiceOutput) ToDynamicsAXLinkedServiceOutputWithContext(ctx context.Context) DynamicsAXLinkedServiceOutput {
	return o
}

// Specify the resource you are requesting authorization. Type: string (or Expression with resultType string).
func (o DynamicsAXLinkedServiceOutput) AadResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) interface{} { return v.AadResourceId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o DynamicsAXLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o DynamicsAXLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o DynamicsAXLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o DynamicsAXLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o DynamicsAXLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Specify the application's client ID. Type: string (or Expression with resultType string).
func (o DynamicsAXLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// Specify the application's key. Mark this field as a SecureString to store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (or Expression with resultType string).
func (o DynamicsAXLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Specify the tenant information (domain name or tenant ID) under which your application resides. Retrieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expression with resultType string).
func (o DynamicsAXLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o DynamicsAXLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData endpoint.
func (o DynamicsAXLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// Dynamics AX linked service.
type DynamicsAXLinkedServiceResponse struct {
	// Specify the resource you are requesting authorization. Type: string (or Expression with resultType string).
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the application's key. Mark this field as a SecureString to store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Retrieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData endpoint.
	Url interface{} `pulumi:"url"`
}

// DynamicsAXLinkedServiceResponseInput is an input type that accepts DynamicsAXLinkedServiceResponseArgs and DynamicsAXLinkedServiceResponseOutput values.
// You can construct a concrete instance of `DynamicsAXLinkedServiceResponseInput` via:
//
//          DynamicsAXLinkedServiceResponseArgs{...}
type DynamicsAXLinkedServiceResponseInput interface {
	pulumi.Input

	ToDynamicsAXLinkedServiceResponseOutput() DynamicsAXLinkedServiceResponseOutput
	ToDynamicsAXLinkedServiceResponseOutputWithContext(context.Context) DynamicsAXLinkedServiceResponseOutput
}

// Dynamics AX linked service.
type DynamicsAXLinkedServiceResponseArgs struct {
	// Specify the resource you are requesting authorization. Type: string (or Expression with resultType string).
	AadResourceId pulumi.Input `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// Specify the application's key. Mark this field as a SecureString to store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (or Expression with resultType string).
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Retrieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData endpoint.
	Url pulumi.Input `pulumi:"url"`
}

func (DynamicsAXLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsAXLinkedServiceResponse)(nil)).Elem()
}

func (i DynamicsAXLinkedServiceResponseArgs) ToDynamicsAXLinkedServiceResponseOutput() DynamicsAXLinkedServiceResponseOutput {
	return i.ToDynamicsAXLinkedServiceResponseOutputWithContext(context.Background())
}

func (i DynamicsAXLinkedServiceResponseArgs) ToDynamicsAXLinkedServiceResponseOutputWithContext(ctx context.Context) DynamicsAXLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsAXLinkedServiceResponseOutput)
}

// Dynamics AX linked service.
type DynamicsAXLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (DynamicsAXLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsAXLinkedServiceResponse)(nil)).Elem()
}

func (o DynamicsAXLinkedServiceResponseOutput) ToDynamicsAXLinkedServiceResponseOutput() DynamicsAXLinkedServiceResponseOutput {
	return o
}

func (o DynamicsAXLinkedServiceResponseOutput) ToDynamicsAXLinkedServiceResponseOutputWithContext(ctx context.Context) DynamicsAXLinkedServiceResponseOutput {
	return o
}

// Specify the resource you are requesting authorization. Type: string (or Expression with resultType string).
func (o DynamicsAXLinkedServiceResponseOutput) AadResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) interface{} { return v.AadResourceId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o DynamicsAXLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o DynamicsAXLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o DynamicsAXLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o DynamicsAXLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o DynamicsAXLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Specify the application's client ID. Type: string (or Expression with resultType string).
func (o DynamicsAXLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// Specify the application's key. Mark this field as a SecureString to store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (or Expression with resultType string).
func (o DynamicsAXLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Specify the tenant information (domain name or tenant ID) under which your application resides. Retrieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expression with resultType string).
func (o DynamicsAXLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o DynamicsAXLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData endpoint.
func (o DynamicsAXLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The path of the Dynamics AX OData entity.
type DynamicsAXResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The path of the Dynamics AX OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DynamicsAXResourceDatasetInput is an input type that accepts DynamicsAXResourceDatasetArgs and DynamicsAXResourceDatasetOutput values.
// You can construct a concrete instance of `DynamicsAXResourceDatasetInput` via:
//
//          DynamicsAXResourceDatasetArgs{...}
type DynamicsAXResourceDatasetInput interface {
	pulumi.Input

	ToDynamicsAXResourceDatasetOutput() DynamicsAXResourceDatasetOutput
	ToDynamicsAXResourceDatasetOutputWithContext(context.Context) DynamicsAXResourceDatasetOutput
}

// The path of the Dynamics AX OData entity.
type DynamicsAXResourceDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The path of the Dynamics AX OData entity. Type: string (or Expression with resultType string).
	Path pulumi.Input `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DynamicsAXResourceDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsAXResourceDataset)(nil)).Elem()
}

func (i DynamicsAXResourceDatasetArgs) ToDynamicsAXResourceDatasetOutput() DynamicsAXResourceDatasetOutput {
	return i.ToDynamicsAXResourceDatasetOutputWithContext(context.Background())
}

func (i DynamicsAXResourceDatasetArgs) ToDynamicsAXResourceDatasetOutputWithContext(ctx context.Context) DynamicsAXResourceDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsAXResourceDatasetOutput)
}

// The path of the Dynamics AX OData entity.
type DynamicsAXResourceDatasetOutput struct{ *pulumi.OutputState }

func (DynamicsAXResourceDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsAXResourceDataset)(nil)).Elem()
}

func (o DynamicsAXResourceDatasetOutput) ToDynamicsAXResourceDatasetOutput() DynamicsAXResourceDatasetOutput {
	return o
}

func (o DynamicsAXResourceDatasetOutput) ToDynamicsAXResourceDatasetOutputWithContext(ctx context.Context) DynamicsAXResourceDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DynamicsAXResourceDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsAXResourceDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o DynamicsAXResourceDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsAXResourceDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DynamicsAXResourceDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v DynamicsAXResourceDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o DynamicsAXResourceDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v DynamicsAXResourceDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o DynamicsAXResourceDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DynamicsAXResourceDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The path of the Dynamics AX OData entity. Type: string (or Expression with resultType string).
func (o DynamicsAXResourceDatasetOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXResourceDataset) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DynamicsAXResourceDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXResourceDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DynamicsAXResourceDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXResourceDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o DynamicsAXResourceDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsAXResourceDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The path of the Dynamics AX OData entity.
type DynamicsAXResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The path of the Dynamics AX OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DynamicsAXResourceDatasetResponseInput is an input type that accepts DynamicsAXResourceDatasetResponseArgs and DynamicsAXResourceDatasetResponseOutput values.
// You can construct a concrete instance of `DynamicsAXResourceDatasetResponseInput` via:
//
//          DynamicsAXResourceDatasetResponseArgs{...}
type DynamicsAXResourceDatasetResponseInput interface {
	pulumi.Input

	ToDynamicsAXResourceDatasetResponseOutput() DynamicsAXResourceDatasetResponseOutput
	ToDynamicsAXResourceDatasetResponseOutputWithContext(context.Context) DynamicsAXResourceDatasetResponseOutput
}

// The path of the Dynamics AX OData entity.
type DynamicsAXResourceDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The path of the Dynamics AX OData entity. Type: string (or Expression with resultType string).
	Path pulumi.Input `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DynamicsAXResourceDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsAXResourceDatasetResponse)(nil)).Elem()
}

func (i DynamicsAXResourceDatasetResponseArgs) ToDynamicsAXResourceDatasetResponseOutput() DynamicsAXResourceDatasetResponseOutput {
	return i.ToDynamicsAXResourceDatasetResponseOutputWithContext(context.Background())
}

func (i DynamicsAXResourceDatasetResponseArgs) ToDynamicsAXResourceDatasetResponseOutputWithContext(ctx context.Context) DynamicsAXResourceDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsAXResourceDatasetResponseOutput)
}

// The path of the Dynamics AX OData entity.
type DynamicsAXResourceDatasetResponseOutput struct{ *pulumi.OutputState }

func (DynamicsAXResourceDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsAXResourceDatasetResponse)(nil)).Elem()
}

func (o DynamicsAXResourceDatasetResponseOutput) ToDynamicsAXResourceDatasetResponseOutput() DynamicsAXResourceDatasetResponseOutput {
	return o
}

func (o DynamicsAXResourceDatasetResponseOutput) ToDynamicsAXResourceDatasetResponseOutputWithContext(ctx context.Context) DynamicsAXResourceDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DynamicsAXResourceDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsAXResourceDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o DynamicsAXResourceDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsAXResourceDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DynamicsAXResourceDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v DynamicsAXResourceDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o DynamicsAXResourceDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v DynamicsAXResourceDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o DynamicsAXResourceDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DynamicsAXResourceDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The path of the Dynamics AX OData entity. Type: string (or Expression with resultType string).
func (o DynamicsAXResourceDatasetResponseOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXResourceDatasetResponse) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DynamicsAXResourceDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXResourceDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DynamicsAXResourceDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXResourceDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o DynamicsAXResourceDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsAXResourceDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Dynamics CRM entity dataset.
type DynamicsCrmEntityDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DynamicsCrmEntityDatasetInput is an input type that accepts DynamicsCrmEntityDatasetArgs and DynamicsCrmEntityDatasetOutput values.
// You can construct a concrete instance of `DynamicsCrmEntityDatasetInput` via:
//
//          DynamicsCrmEntityDatasetArgs{...}
type DynamicsCrmEntityDatasetInput interface {
	pulumi.Input

	ToDynamicsCrmEntityDatasetOutput() DynamicsCrmEntityDatasetOutput
	ToDynamicsCrmEntityDatasetOutputWithContext(context.Context) DynamicsCrmEntityDatasetOutput
}

// The Dynamics CRM entity dataset.
type DynamicsCrmEntityDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName pulumi.Input `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DynamicsCrmEntityDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmEntityDataset)(nil)).Elem()
}

func (i DynamicsCrmEntityDatasetArgs) ToDynamicsCrmEntityDatasetOutput() DynamicsCrmEntityDatasetOutput {
	return i.ToDynamicsCrmEntityDatasetOutputWithContext(context.Background())
}

func (i DynamicsCrmEntityDatasetArgs) ToDynamicsCrmEntityDatasetOutputWithContext(ctx context.Context) DynamicsCrmEntityDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsCrmEntityDatasetOutput)
}

// The Dynamics CRM entity dataset.
type DynamicsCrmEntityDatasetOutput struct{ *pulumi.OutputState }

func (DynamicsCrmEntityDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmEntityDataset)(nil)).Elem()
}

func (o DynamicsCrmEntityDatasetOutput) ToDynamicsCrmEntityDatasetOutput() DynamicsCrmEntityDatasetOutput {
	return o
}

func (o DynamicsCrmEntityDatasetOutput) ToDynamicsCrmEntityDatasetOutputWithContext(ctx context.Context) DynamicsCrmEntityDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DynamicsCrmEntityDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o DynamicsCrmEntityDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The logical name of the entity. Type: string (or Expression with resultType string).
func (o DynamicsCrmEntityDatasetOutput) EntityName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDataset) interface{} { return v.EntityName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DynamicsCrmEntityDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o DynamicsCrmEntityDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o DynamicsCrmEntityDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DynamicsCrmEntityDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DynamicsCrmEntityDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o DynamicsCrmEntityDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Dynamics CRM entity dataset.
type DynamicsCrmEntityDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DynamicsCrmEntityDatasetResponseInput is an input type that accepts DynamicsCrmEntityDatasetResponseArgs and DynamicsCrmEntityDatasetResponseOutput values.
// You can construct a concrete instance of `DynamicsCrmEntityDatasetResponseInput` via:
//
//          DynamicsCrmEntityDatasetResponseArgs{...}
type DynamicsCrmEntityDatasetResponseInput interface {
	pulumi.Input

	ToDynamicsCrmEntityDatasetResponseOutput() DynamicsCrmEntityDatasetResponseOutput
	ToDynamicsCrmEntityDatasetResponseOutputWithContext(context.Context) DynamicsCrmEntityDatasetResponseOutput
}

// The Dynamics CRM entity dataset.
type DynamicsCrmEntityDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName pulumi.Input `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DynamicsCrmEntityDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmEntityDatasetResponse)(nil)).Elem()
}

func (i DynamicsCrmEntityDatasetResponseArgs) ToDynamicsCrmEntityDatasetResponseOutput() DynamicsCrmEntityDatasetResponseOutput {
	return i.ToDynamicsCrmEntityDatasetResponseOutputWithContext(context.Background())
}

func (i DynamicsCrmEntityDatasetResponseArgs) ToDynamicsCrmEntityDatasetResponseOutputWithContext(ctx context.Context) DynamicsCrmEntityDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsCrmEntityDatasetResponseOutput)
}

// The Dynamics CRM entity dataset.
type DynamicsCrmEntityDatasetResponseOutput struct{ *pulumi.OutputState }

func (DynamicsCrmEntityDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmEntityDatasetResponse)(nil)).Elem()
}

func (o DynamicsCrmEntityDatasetResponseOutput) ToDynamicsCrmEntityDatasetResponseOutput() DynamicsCrmEntityDatasetResponseOutput {
	return o
}

func (o DynamicsCrmEntityDatasetResponseOutput) ToDynamicsCrmEntityDatasetResponseOutputWithContext(ctx context.Context) DynamicsCrmEntityDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DynamicsCrmEntityDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o DynamicsCrmEntityDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The logical name of the entity. Type: string (or Expression with resultType string).
func (o DynamicsCrmEntityDatasetResponseOutput) EntityName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDatasetResponse) interface{} { return v.EntityName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DynamicsCrmEntityDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o DynamicsCrmEntityDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o DynamicsCrmEntityDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DynamicsCrmEntityDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DynamicsCrmEntityDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o DynamicsCrmEntityDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Dynamics CRM linked service.
type DynamicsCrmLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Dynamics CRM server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The deployment type of the Dynamics CRM instance. 'Online' for Dynamics CRM Online and 'OnPremisesWithIfd' for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType string `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Dynamics CRM instance. The property is required for on-prem and required for online when there are more than one Dynamics CRM instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the Dynamics CRM instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType *string `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics CRM server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User name to access the Dynamics CRM instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// DynamicsCrmLinkedServiceInput is an input type that accepts DynamicsCrmLinkedServiceArgs and DynamicsCrmLinkedServiceOutput values.
// You can construct a concrete instance of `DynamicsCrmLinkedServiceInput` via:
//
//          DynamicsCrmLinkedServiceArgs{...}
type DynamicsCrmLinkedServiceInput interface {
	pulumi.Input

	ToDynamicsCrmLinkedServiceOutput() DynamicsCrmLinkedServiceOutput
	ToDynamicsCrmLinkedServiceOutputWithContext(context.Context) DynamicsCrmLinkedServiceOutput
}

// Dynamics CRM linked service.
type DynamicsCrmLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to connect to Dynamics CRM server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The deployment type of the Dynamics CRM instance. 'Online' for Dynamics CRM Online and 'OnPremisesWithIfd' for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName pulumi.Input `pulumi:"hostName"`
	// The organization name of the Dynamics CRM instance. The property is required for on-prem and required for online when there are more than one Dynamics CRM instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName pulumi.Input `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to access the Dynamics CRM instance.
	Password pulumi.Input `pulumi:"password"`
	// The port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.Input `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential pulumi.Input `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType pulumi.StringPtrInput `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics CRM server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri pulumi.Input `pulumi:"serviceUri"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// User name to access the Dynamics CRM instance. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (DynamicsCrmLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmLinkedService)(nil)).Elem()
}

func (i DynamicsCrmLinkedServiceArgs) ToDynamicsCrmLinkedServiceOutput() DynamicsCrmLinkedServiceOutput {
	return i.ToDynamicsCrmLinkedServiceOutputWithContext(context.Background())
}

func (i DynamicsCrmLinkedServiceArgs) ToDynamicsCrmLinkedServiceOutputWithContext(ctx context.Context) DynamicsCrmLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsCrmLinkedServiceOutput)
}

// Dynamics CRM linked service.
type DynamicsCrmLinkedServiceOutput struct{ *pulumi.OutputState }

func (DynamicsCrmLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmLinkedService)(nil)).Elem()
}

func (o DynamicsCrmLinkedServiceOutput) ToDynamicsCrmLinkedServiceOutput() DynamicsCrmLinkedServiceOutput {
	return o
}

func (o DynamicsCrmLinkedServiceOutput) ToDynamicsCrmLinkedServiceOutputWithContext(ctx context.Context) DynamicsCrmLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o DynamicsCrmLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to connect to Dynamics CRM server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o DynamicsCrmLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The deployment type of the Dynamics CRM instance. 'Online' for Dynamics CRM Online and 'OnPremisesWithIfd' for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// Linked service description.
func (o DynamicsCrmLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The host name of the on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceOutput) HostName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.HostName }).(pulumi.AnyOutput)
}

// The organization name of the Dynamics CRM instance. The property is required for on-prem and required for online when there are more than one Dynamics CRM instances associated with the user. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceOutput) OrganizationName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.OrganizationName }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o DynamicsCrmLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to access the Dynamics CRM instance.
func (o DynamicsCrmLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
func (o DynamicsCrmLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o DynamicsCrmLinkedServiceOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceOutput) ServicePrincipalCredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) *string { return v.ServicePrincipalCredentialType }).(pulumi.StringPtrOutput)
}

// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The URL to the Microsoft Dynamics CRM server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceOutput) ServiceUri() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.ServiceUri }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o DynamicsCrmLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// User name to access the Dynamics CRM instance. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Dynamics CRM linked service.
type DynamicsCrmLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Dynamics CRM server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The deployment type of the Dynamics CRM instance. 'Online' for Dynamics CRM Online and 'OnPremisesWithIfd' for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType string `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Dynamics CRM instance. The property is required for on-prem and required for online when there are more than one Dynamics CRM instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the Dynamics CRM instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType *string `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics CRM server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User name to access the Dynamics CRM instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// DynamicsCrmLinkedServiceResponseInput is an input type that accepts DynamicsCrmLinkedServiceResponseArgs and DynamicsCrmLinkedServiceResponseOutput values.
// You can construct a concrete instance of `DynamicsCrmLinkedServiceResponseInput` via:
//
//          DynamicsCrmLinkedServiceResponseArgs{...}
type DynamicsCrmLinkedServiceResponseInput interface {
	pulumi.Input

	ToDynamicsCrmLinkedServiceResponseOutput() DynamicsCrmLinkedServiceResponseOutput
	ToDynamicsCrmLinkedServiceResponseOutputWithContext(context.Context) DynamicsCrmLinkedServiceResponseOutput
}

// Dynamics CRM linked service.
type DynamicsCrmLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to connect to Dynamics CRM server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The deployment type of the Dynamics CRM instance. 'Online' for Dynamics CRM Online and 'OnPremisesWithIfd' for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName pulumi.Input `pulumi:"hostName"`
	// The organization name of the Dynamics CRM instance. The property is required for on-prem and required for online when there are more than one Dynamics CRM instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName pulumi.Input `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password to access the Dynamics CRM instance.
	Password pulumi.Input `pulumi:"password"`
	// The port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.Input `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential pulumi.Input `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType pulumi.StringPtrInput `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics CRM server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri pulumi.Input `pulumi:"serviceUri"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// User name to access the Dynamics CRM instance. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (DynamicsCrmLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmLinkedServiceResponse)(nil)).Elem()
}

func (i DynamicsCrmLinkedServiceResponseArgs) ToDynamicsCrmLinkedServiceResponseOutput() DynamicsCrmLinkedServiceResponseOutput {
	return i.ToDynamicsCrmLinkedServiceResponseOutputWithContext(context.Background())
}

func (i DynamicsCrmLinkedServiceResponseArgs) ToDynamicsCrmLinkedServiceResponseOutputWithContext(ctx context.Context) DynamicsCrmLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsCrmLinkedServiceResponseOutput)
}

// Dynamics CRM linked service.
type DynamicsCrmLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (DynamicsCrmLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmLinkedServiceResponse)(nil)).Elem()
}

func (o DynamicsCrmLinkedServiceResponseOutput) ToDynamicsCrmLinkedServiceResponseOutput() DynamicsCrmLinkedServiceResponseOutput {
	return o
}

func (o DynamicsCrmLinkedServiceResponseOutput) ToDynamicsCrmLinkedServiceResponseOutputWithContext(ctx context.Context) DynamicsCrmLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o DynamicsCrmLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to connect to Dynamics CRM server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o DynamicsCrmLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The deployment type of the Dynamics CRM instance. 'Online' for Dynamics CRM Online and 'OnPremisesWithIfd' for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceResponseOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// Linked service description.
func (o DynamicsCrmLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The host name of the on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceResponseOutput) HostName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.HostName }).(pulumi.AnyOutput)
}

// The organization name of the Dynamics CRM instance. The property is required for on-prem and required for online when there are more than one Dynamics CRM instances associated with the user. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceResponseOutput) OrganizationName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.OrganizationName }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o DynamicsCrmLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Password to access the Dynamics CRM instance.
func (o DynamicsCrmLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
func (o DynamicsCrmLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o DynamicsCrmLinkedServiceResponseOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceResponseOutput) ServicePrincipalCredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) *string { return v.ServicePrincipalCredentialType }).(pulumi.StringPtrOutput)
}

// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The URL to the Microsoft Dynamics CRM server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceResponseOutput) ServiceUri() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.ServiceUri }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o DynamicsCrmLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name to access the Dynamics CRM instance. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// The Dynamics entity dataset.
type DynamicsEntityDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DynamicsEntityDatasetInput is an input type that accepts DynamicsEntityDatasetArgs and DynamicsEntityDatasetOutput values.
// You can construct a concrete instance of `DynamicsEntityDatasetInput` via:
//
//          DynamicsEntityDatasetArgs{...}
type DynamicsEntityDatasetInput interface {
	pulumi.Input

	ToDynamicsEntityDatasetOutput() DynamicsEntityDatasetOutput
	ToDynamicsEntityDatasetOutputWithContext(context.Context) DynamicsEntityDatasetOutput
}

// The Dynamics entity dataset.
type DynamicsEntityDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName pulumi.Input `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DynamicsEntityDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsEntityDataset)(nil)).Elem()
}

func (i DynamicsEntityDatasetArgs) ToDynamicsEntityDatasetOutput() DynamicsEntityDatasetOutput {
	return i.ToDynamicsEntityDatasetOutputWithContext(context.Background())
}

func (i DynamicsEntityDatasetArgs) ToDynamicsEntityDatasetOutputWithContext(ctx context.Context) DynamicsEntityDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsEntityDatasetOutput)
}

// The Dynamics entity dataset.
type DynamicsEntityDatasetOutput struct{ *pulumi.OutputState }

func (DynamicsEntityDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsEntityDataset)(nil)).Elem()
}

func (o DynamicsEntityDatasetOutput) ToDynamicsEntityDatasetOutput() DynamicsEntityDatasetOutput {
	return o
}

func (o DynamicsEntityDatasetOutput) ToDynamicsEntityDatasetOutputWithContext(ctx context.Context) DynamicsEntityDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DynamicsEntityDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsEntityDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o DynamicsEntityDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsEntityDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The logical name of the entity. Type: string (or Expression with resultType string).
func (o DynamicsEntityDatasetOutput) EntityName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsEntityDataset) interface{} { return v.EntityName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DynamicsEntityDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v DynamicsEntityDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o DynamicsEntityDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v DynamicsEntityDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o DynamicsEntityDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DynamicsEntityDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DynamicsEntityDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsEntityDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DynamicsEntityDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsEntityDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o DynamicsEntityDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsEntityDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Dynamics entity dataset.
type DynamicsEntityDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DynamicsEntityDatasetResponseInput is an input type that accepts DynamicsEntityDatasetResponseArgs and DynamicsEntityDatasetResponseOutput values.
// You can construct a concrete instance of `DynamicsEntityDatasetResponseInput` via:
//
//          DynamicsEntityDatasetResponseArgs{...}
type DynamicsEntityDatasetResponseInput interface {
	pulumi.Input

	ToDynamicsEntityDatasetResponseOutput() DynamicsEntityDatasetResponseOutput
	ToDynamicsEntityDatasetResponseOutputWithContext(context.Context) DynamicsEntityDatasetResponseOutput
}

// The Dynamics entity dataset.
type DynamicsEntityDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName pulumi.Input `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DynamicsEntityDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsEntityDatasetResponse)(nil)).Elem()
}

func (i DynamicsEntityDatasetResponseArgs) ToDynamicsEntityDatasetResponseOutput() DynamicsEntityDatasetResponseOutput {
	return i.ToDynamicsEntityDatasetResponseOutputWithContext(context.Background())
}

func (i DynamicsEntityDatasetResponseArgs) ToDynamicsEntityDatasetResponseOutputWithContext(ctx context.Context) DynamicsEntityDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsEntityDatasetResponseOutput)
}

// The Dynamics entity dataset.
type DynamicsEntityDatasetResponseOutput struct{ *pulumi.OutputState }

func (DynamicsEntityDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsEntityDatasetResponse)(nil)).Elem()
}

func (o DynamicsEntityDatasetResponseOutput) ToDynamicsEntityDatasetResponseOutput() DynamicsEntityDatasetResponseOutput {
	return o
}

func (o DynamicsEntityDatasetResponseOutput) ToDynamicsEntityDatasetResponseOutputWithContext(ctx context.Context) DynamicsEntityDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DynamicsEntityDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o DynamicsEntityDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The logical name of the entity. Type: string (or Expression with resultType string).
func (o DynamicsEntityDatasetResponseOutput) EntityName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) interface{} { return v.EntityName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DynamicsEntityDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o DynamicsEntityDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o DynamicsEntityDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DynamicsEntityDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DynamicsEntityDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o DynamicsEntityDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Dynamics linked service.
type DynamicsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType string `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the Dynamics instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType *string `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// DynamicsLinkedServiceInput is an input type that accepts DynamicsLinkedServiceArgs and DynamicsLinkedServiceOutput values.
// You can construct a concrete instance of `DynamicsLinkedServiceInput` via:
//
//          DynamicsLinkedServiceArgs{...}
type DynamicsLinkedServiceInput interface {
	pulumi.Input

	ToDynamicsLinkedServiceOutput() DynamicsLinkedServiceOutput
	ToDynamicsLinkedServiceOutputWithContext(context.Context) DynamicsLinkedServiceOutput
}

// Dynamics linked service.
type DynamicsLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName pulumi.Input `pulumi:"hostName"`
	// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName pulumi.Input `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to access the Dynamics instance.
	Password pulumi.Input `pulumi:"password"`
	// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.Input `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential pulumi.Input `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType pulumi.StringPtrInput `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri pulumi.Input `pulumi:"serviceUri"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (DynamicsLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsLinkedService)(nil)).Elem()
}

func (i DynamicsLinkedServiceArgs) ToDynamicsLinkedServiceOutput() DynamicsLinkedServiceOutput {
	return i.ToDynamicsLinkedServiceOutputWithContext(context.Background())
}

func (i DynamicsLinkedServiceArgs) ToDynamicsLinkedServiceOutputWithContext(ctx context.Context) DynamicsLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsLinkedServiceOutput)
}

// Dynamics linked service.
type DynamicsLinkedServiceOutput struct{ *pulumi.OutputState }

func (DynamicsLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsLinkedService)(nil)).Elem()
}

func (o DynamicsLinkedServiceOutput) ToDynamicsLinkedServiceOutput() DynamicsLinkedServiceOutput {
	return o
}

func (o DynamicsLinkedServiceOutput) ToDynamicsLinkedServiceOutputWithContext(ctx context.Context) DynamicsLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o DynamicsLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o DynamicsLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v DynamicsLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsLinkedService) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// Linked service description.
func (o DynamicsLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceOutput) HostName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.HostName }).(pulumi.AnyOutput)
}

// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceOutput) OrganizationName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.OrganizationName }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o DynamicsLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DynamicsLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to access the Dynamics instance.
func (o DynamicsLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
func (o DynamicsLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o DynamicsLinkedServiceOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceOutput) ServicePrincipalCredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsLinkedService) *string { return v.ServicePrincipalCredentialType }).(pulumi.StringPtrOutput)
}

// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceOutput) ServiceUri() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.ServiceUri }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o DynamicsLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Dynamics linked service.
type DynamicsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType string `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the Dynamics instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType *string `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// DynamicsLinkedServiceResponseInput is an input type that accepts DynamicsLinkedServiceResponseArgs and DynamicsLinkedServiceResponseOutput values.
// You can construct a concrete instance of `DynamicsLinkedServiceResponseInput` via:
//
//          DynamicsLinkedServiceResponseArgs{...}
type DynamicsLinkedServiceResponseInput interface {
	pulumi.Input

	ToDynamicsLinkedServiceResponseOutput() DynamicsLinkedServiceResponseOutput
	ToDynamicsLinkedServiceResponseOutputWithContext(context.Context) DynamicsLinkedServiceResponseOutput
}

// Dynamics linked service.
type DynamicsLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName pulumi.Input `pulumi:"hostName"`
	// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName pulumi.Input `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password to access the Dynamics instance.
	Password pulumi.Input `pulumi:"password"`
	// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.Input `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential pulumi.Input `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType pulumi.StringPtrInput `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri pulumi.Input `pulumi:"serviceUri"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (DynamicsLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsLinkedServiceResponse)(nil)).Elem()
}

func (i DynamicsLinkedServiceResponseArgs) ToDynamicsLinkedServiceResponseOutput() DynamicsLinkedServiceResponseOutput {
	return i.ToDynamicsLinkedServiceResponseOutputWithContext(context.Background())
}

func (i DynamicsLinkedServiceResponseArgs) ToDynamicsLinkedServiceResponseOutputWithContext(ctx context.Context) DynamicsLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsLinkedServiceResponseOutput)
}

// Dynamics linked service.
type DynamicsLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (DynamicsLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsLinkedServiceResponse)(nil)).Elem()
}

func (o DynamicsLinkedServiceResponseOutput) ToDynamicsLinkedServiceResponseOutput() DynamicsLinkedServiceResponseOutput {
	return o
}

func (o DynamicsLinkedServiceResponseOutput) ToDynamicsLinkedServiceResponseOutputWithContext(ctx context.Context) DynamicsLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o DynamicsLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o DynamicsLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// Linked service description.
func (o DynamicsLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) HostName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.HostName }).(pulumi.AnyOutput)
}

// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) OrganizationName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.OrganizationName }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o DynamicsLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to access the Dynamics instance.
func (o DynamicsLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
func (o DynamicsLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o DynamicsLinkedServiceResponseOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) ServicePrincipalCredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) *string { return v.ServicePrincipalCredentialType }).(pulumi.StringPtrOutput)
}

// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) ServiceUri() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.ServiceUri }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o DynamicsLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Eloqua server linked service.
type EloquaLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Eloqua server. (i.e. eloqua.example.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
	Username interface{} `pulumi:"username"`
}

// EloquaLinkedServiceInput is an input type that accepts EloquaLinkedServiceArgs and EloquaLinkedServiceOutput values.
// You can construct a concrete instance of `EloquaLinkedServiceInput` via:
//
//          EloquaLinkedServiceArgs{...}
type EloquaLinkedServiceInput interface {
	pulumi.Input

	ToEloquaLinkedServiceOutput() EloquaLinkedServiceOutput
	ToEloquaLinkedServiceOutputWithContext(context.Context) EloquaLinkedServiceOutput
}

// Eloqua server linked service.
type EloquaLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the Eloqua server. (i.e. eloqua.example.com)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
	// The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
	Username pulumi.Input `pulumi:"username"`
}

func (EloquaLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaLinkedService)(nil)).Elem()
}

func (i EloquaLinkedServiceArgs) ToEloquaLinkedServiceOutput() EloquaLinkedServiceOutput {
	return i.ToEloquaLinkedServiceOutputWithContext(context.Background())
}

func (i EloquaLinkedServiceArgs) ToEloquaLinkedServiceOutputWithContext(ctx context.Context) EloquaLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EloquaLinkedServiceOutput)
}

// Eloqua server linked service.
type EloquaLinkedServiceOutput struct{ *pulumi.OutputState }

func (EloquaLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaLinkedService)(nil)).Elem()
}

func (o EloquaLinkedServiceOutput) ToEloquaLinkedServiceOutput() EloquaLinkedServiceOutput {
	return o
}

func (o EloquaLinkedServiceOutput) ToEloquaLinkedServiceOutputWithContext(ctx context.Context) EloquaLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o EloquaLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v EloquaLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o EloquaLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v EloquaLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o EloquaLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EloquaLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o EloquaLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the Eloqua server. (i.e. eloqua.example.com)
func (o EloquaLinkedServiceOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedService) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o EloquaLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v EloquaLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name.
func (o EloquaLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o EloquaLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EloquaLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o EloquaLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o EloquaLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o EloquaLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
func (o EloquaLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Eloqua server linked service.
type EloquaLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Eloqua server. (i.e. eloqua.example.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
	Username interface{} `pulumi:"username"`
}

// EloquaLinkedServiceResponseInput is an input type that accepts EloquaLinkedServiceResponseArgs and EloquaLinkedServiceResponseOutput values.
// You can construct a concrete instance of `EloquaLinkedServiceResponseInput` via:
//
//          EloquaLinkedServiceResponseArgs{...}
type EloquaLinkedServiceResponseInput interface {
	pulumi.Input

	ToEloquaLinkedServiceResponseOutput() EloquaLinkedServiceResponseOutput
	ToEloquaLinkedServiceResponseOutputWithContext(context.Context) EloquaLinkedServiceResponseOutput
}

// Eloqua server linked service.
type EloquaLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the Eloqua server. (i.e. eloqua.example.com)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
	// The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
	Username pulumi.Input `pulumi:"username"`
}

func (EloquaLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaLinkedServiceResponse)(nil)).Elem()
}

func (i EloquaLinkedServiceResponseArgs) ToEloquaLinkedServiceResponseOutput() EloquaLinkedServiceResponseOutput {
	return i.ToEloquaLinkedServiceResponseOutputWithContext(context.Background())
}

func (i EloquaLinkedServiceResponseArgs) ToEloquaLinkedServiceResponseOutputWithContext(ctx context.Context) EloquaLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EloquaLinkedServiceResponseOutput)
}

// Eloqua server linked service.
type EloquaLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (EloquaLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaLinkedServiceResponse)(nil)).Elem()
}

func (o EloquaLinkedServiceResponseOutput) ToEloquaLinkedServiceResponseOutput() EloquaLinkedServiceResponseOutput {
	return o
}

func (o EloquaLinkedServiceResponseOutput) ToEloquaLinkedServiceResponseOutputWithContext(ctx context.Context) EloquaLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o EloquaLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o EloquaLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o EloquaLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o EloquaLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the Eloqua server. (i.e. eloqua.example.com)
func (o EloquaLinkedServiceResponseOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o EloquaLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name.
func (o EloquaLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o EloquaLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o EloquaLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o EloquaLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o EloquaLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
func (o EloquaLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Eloqua server dataset.
type EloquaObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// EloquaObjectDatasetInput is an input type that accepts EloquaObjectDatasetArgs and EloquaObjectDatasetOutput values.
// You can construct a concrete instance of `EloquaObjectDatasetInput` via:
//
//          EloquaObjectDatasetArgs{...}
type EloquaObjectDatasetInput interface {
	pulumi.Input

	ToEloquaObjectDatasetOutput() EloquaObjectDatasetOutput
	ToEloquaObjectDatasetOutputWithContext(context.Context) EloquaObjectDatasetOutput
}

// Eloqua server dataset.
type EloquaObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (EloquaObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaObjectDataset)(nil)).Elem()
}

func (i EloquaObjectDatasetArgs) ToEloquaObjectDatasetOutput() EloquaObjectDatasetOutput {
	return i.ToEloquaObjectDatasetOutputWithContext(context.Background())
}

func (i EloquaObjectDatasetArgs) ToEloquaObjectDatasetOutputWithContext(ctx context.Context) EloquaObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EloquaObjectDatasetOutput)
}

// Eloqua server dataset.
type EloquaObjectDatasetOutput struct{ *pulumi.OutputState }

func (EloquaObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaObjectDataset)(nil)).Elem()
}

func (o EloquaObjectDatasetOutput) ToEloquaObjectDatasetOutput() EloquaObjectDatasetOutput {
	return o
}

func (o EloquaObjectDatasetOutput) ToEloquaObjectDatasetOutputWithContext(ctx context.Context) EloquaObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o EloquaObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v EloquaObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o EloquaObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EloquaObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o EloquaObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v EloquaObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o EloquaObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v EloquaObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o EloquaObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v EloquaObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o EloquaObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o EloquaObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o EloquaObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o EloquaObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EloquaObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Eloqua server dataset.
type EloquaObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// EloquaObjectDatasetResponseInput is an input type that accepts EloquaObjectDatasetResponseArgs and EloquaObjectDatasetResponseOutput values.
// You can construct a concrete instance of `EloquaObjectDatasetResponseInput` via:
//
//          EloquaObjectDatasetResponseArgs{...}
type EloquaObjectDatasetResponseInput interface {
	pulumi.Input

	ToEloquaObjectDatasetResponseOutput() EloquaObjectDatasetResponseOutput
	ToEloquaObjectDatasetResponseOutputWithContext(context.Context) EloquaObjectDatasetResponseOutput
}

// Eloqua server dataset.
type EloquaObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (EloquaObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaObjectDatasetResponse)(nil)).Elem()
}

func (i EloquaObjectDatasetResponseArgs) ToEloquaObjectDatasetResponseOutput() EloquaObjectDatasetResponseOutput {
	return i.ToEloquaObjectDatasetResponseOutputWithContext(context.Background())
}

func (i EloquaObjectDatasetResponseArgs) ToEloquaObjectDatasetResponseOutputWithContext(ctx context.Context) EloquaObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EloquaObjectDatasetResponseOutput)
}

// Eloqua server dataset.
type EloquaObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (EloquaObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaObjectDatasetResponse)(nil)).Elem()
}

func (o EloquaObjectDatasetResponseOutput) ToEloquaObjectDatasetResponseOutput() EloquaObjectDatasetResponseOutput {
	return o
}

func (o EloquaObjectDatasetResponseOutput) ToEloquaObjectDatasetResponseOutputWithContext(ctx context.Context) EloquaObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o EloquaObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o EloquaObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o EloquaObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o EloquaObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o EloquaObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o EloquaObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o EloquaObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o EloquaObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o EloquaObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The entity reference.
type EntityReference struct {
	// The name of this referenced entity.
	ReferenceName *string `pulumi:"referenceName"`
	// The type of this referenced entity.
	Type *string `pulumi:"type"`
}

// EntityReferenceInput is an input type that accepts EntityReferenceArgs and EntityReferenceOutput values.
// You can construct a concrete instance of `EntityReferenceInput` via:
//
//          EntityReferenceArgs{...}
type EntityReferenceInput interface {
	pulumi.Input

	ToEntityReferenceOutput() EntityReferenceOutput
	ToEntityReferenceOutputWithContext(context.Context) EntityReferenceOutput
}

// The entity reference.
type EntityReferenceArgs struct {
	// The name of this referenced entity.
	ReferenceName pulumi.StringPtrInput `pulumi:"referenceName"`
	// The type of this referenced entity.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EntityReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityReference)(nil)).Elem()
}

func (i EntityReferenceArgs) ToEntityReferenceOutput() EntityReferenceOutput {
	return i.ToEntityReferenceOutputWithContext(context.Background())
}

func (i EntityReferenceArgs) ToEntityReferenceOutputWithContext(ctx context.Context) EntityReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityReferenceOutput)
}

func (i EntityReferenceArgs) ToEntityReferencePtrOutput() EntityReferencePtrOutput {
	return i.ToEntityReferencePtrOutputWithContext(context.Background())
}

func (i EntityReferenceArgs) ToEntityReferencePtrOutputWithContext(ctx context.Context) EntityReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityReferenceOutput).ToEntityReferencePtrOutputWithContext(ctx)
}

// EntityReferencePtrInput is an input type that accepts EntityReferenceArgs, EntityReferencePtr and EntityReferencePtrOutput values.
// You can construct a concrete instance of `EntityReferencePtrInput` via:
//
//          EntityReferenceArgs{...}
//
//  or:
//
//          nil
type EntityReferencePtrInput interface {
	pulumi.Input

	ToEntityReferencePtrOutput() EntityReferencePtrOutput
	ToEntityReferencePtrOutputWithContext(context.Context) EntityReferencePtrOutput
}

type entityReferencePtrType EntityReferenceArgs

func EntityReferencePtr(v *EntityReferenceArgs) EntityReferencePtrInput {
	return (*entityReferencePtrType)(v)
}

func (*entityReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityReference)(nil)).Elem()
}

func (i *entityReferencePtrType) ToEntityReferencePtrOutput() EntityReferencePtrOutput {
	return i.ToEntityReferencePtrOutputWithContext(context.Background())
}

func (i *entityReferencePtrType) ToEntityReferencePtrOutputWithContext(ctx context.Context) EntityReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityReferencePtrOutput)
}

// The entity reference.
type EntityReferenceOutput struct{ *pulumi.OutputState }

func (EntityReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityReference)(nil)).Elem()
}

func (o EntityReferenceOutput) ToEntityReferenceOutput() EntityReferenceOutput {
	return o
}

func (o EntityReferenceOutput) ToEntityReferenceOutputWithContext(ctx context.Context) EntityReferenceOutput {
	return o
}

func (o EntityReferenceOutput) ToEntityReferencePtrOutput() EntityReferencePtrOutput {
	return o.ToEntityReferencePtrOutputWithContext(context.Background())
}

func (o EntityReferenceOutput) ToEntityReferencePtrOutputWithContext(ctx context.Context) EntityReferencePtrOutput {
	return o.ApplyT(func(v EntityReference) *EntityReference {
		return &v
	}).(EntityReferencePtrOutput)
}

// The name of this referenced entity.
func (o EntityReferenceOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityReference) *string { return v.ReferenceName }).(pulumi.StringPtrOutput)
}

// The type of this referenced entity.
func (o EntityReferenceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityReference) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EntityReferencePtrOutput struct{ *pulumi.OutputState }

func (EntityReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityReference)(nil)).Elem()
}

func (o EntityReferencePtrOutput) ToEntityReferencePtrOutput() EntityReferencePtrOutput {
	return o
}

func (o EntityReferencePtrOutput) ToEntityReferencePtrOutputWithContext(ctx context.Context) EntityReferencePtrOutput {
	return o
}

func (o EntityReferencePtrOutput) Elem() EntityReferenceOutput {
	return o.ApplyT(func(v *EntityReference) EntityReference { return *v }).(EntityReferenceOutput)
}

// The name of this referenced entity.
func (o EntityReferencePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityReference) *string {
		if v == nil {
			return nil
		}
		return v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// The type of this referenced entity.
func (o EntityReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityReference) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The entity reference.
type EntityReferenceResponse struct {
	// The name of this referenced entity.
	ReferenceName *string `pulumi:"referenceName"`
	// The type of this referenced entity.
	Type *string `pulumi:"type"`
}

// EntityReferenceResponseInput is an input type that accepts EntityReferenceResponseArgs and EntityReferenceResponseOutput values.
// You can construct a concrete instance of `EntityReferenceResponseInput` via:
//
//          EntityReferenceResponseArgs{...}
type EntityReferenceResponseInput interface {
	pulumi.Input

	ToEntityReferenceResponseOutput() EntityReferenceResponseOutput
	ToEntityReferenceResponseOutputWithContext(context.Context) EntityReferenceResponseOutput
}

// The entity reference.
type EntityReferenceResponseArgs struct {
	// The name of this referenced entity.
	ReferenceName pulumi.StringPtrInput `pulumi:"referenceName"`
	// The type of this referenced entity.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EntityReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityReferenceResponse)(nil)).Elem()
}

func (i EntityReferenceResponseArgs) ToEntityReferenceResponseOutput() EntityReferenceResponseOutput {
	return i.ToEntityReferenceResponseOutputWithContext(context.Background())
}

func (i EntityReferenceResponseArgs) ToEntityReferenceResponseOutputWithContext(ctx context.Context) EntityReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityReferenceResponseOutput)
}

func (i EntityReferenceResponseArgs) ToEntityReferenceResponsePtrOutput() EntityReferenceResponsePtrOutput {
	return i.ToEntityReferenceResponsePtrOutputWithContext(context.Background())
}

func (i EntityReferenceResponseArgs) ToEntityReferenceResponsePtrOutputWithContext(ctx context.Context) EntityReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityReferenceResponseOutput).ToEntityReferenceResponsePtrOutputWithContext(ctx)
}

// EntityReferenceResponsePtrInput is an input type that accepts EntityReferenceResponseArgs, EntityReferenceResponsePtr and EntityReferenceResponsePtrOutput values.
// You can construct a concrete instance of `EntityReferenceResponsePtrInput` via:
//
//          EntityReferenceResponseArgs{...}
//
//  or:
//
//          nil
type EntityReferenceResponsePtrInput interface {
	pulumi.Input

	ToEntityReferenceResponsePtrOutput() EntityReferenceResponsePtrOutput
	ToEntityReferenceResponsePtrOutputWithContext(context.Context) EntityReferenceResponsePtrOutput
}

type entityReferenceResponsePtrType EntityReferenceResponseArgs

func EntityReferenceResponsePtr(v *EntityReferenceResponseArgs) EntityReferenceResponsePtrInput {
	return (*entityReferenceResponsePtrType)(v)
}

func (*entityReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityReferenceResponse)(nil)).Elem()
}

func (i *entityReferenceResponsePtrType) ToEntityReferenceResponsePtrOutput() EntityReferenceResponsePtrOutput {
	return i.ToEntityReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *entityReferenceResponsePtrType) ToEntityReferenceResponsePtrOutputWithContext(ctx context.Context) EntityReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityReferenceResponsePtrOutput)
}

// The entity reference.
type EntityReferenceResponseOutput struct{ *pulumi.OutputState }

func (EntityReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityReferenceResponse)(nil)).Elem()
}

func (o EntityReferenceResponseOutput) ToEntityReferenceResponseOutput() EntityReferenceResponseOutput {
	return o
}

func (o EntityReferenceResponseOutput) ToEntityReferenceResponseOutputWithContext(ctx context.Context) EntityReferenceResponseOutput {
	return o
}

func (o EntityReferenceResponseOutput) ToEntityReferenceResponsePtrOutput() EntityReferenceResponsePtrOutput {
	return o.ToEntityReferenceResponsePtrOutputWithContext(context.Background())
}

func (o EntityReferenceResponseOutput) ToEntityReferenceResponsePtrOutputWithContext(ctx context.Context) EntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v EntityReferenceResponse) *EntityReferenceResponse {
		return &v
	}).(EntityReferenceResponsePtrOutput)
}

// The name of this referenced entity.
func (o EntityReferenceResponseOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityReferenceResponse) *string { return v.ReferenceName }).(pulumi.StringPtrOutput)
}

// The type of this referenced entity.
func (o EntityReferenceResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityReferenceResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EntityReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (EntityReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityReferenceResponse)(nil)).Elem()
}

func (o EntityReferenceResponsePtrOutput) ToEntityReferenceResponsePtrOutput() EntityReferenceResponsePtrOutput {
	return o
}

func (o EntityReferenceResponsePtrOutput) ToEntityReferenceResponsePtrOutputWithContext(ctx context.Context) EntityReferenceResponsePtrOutput {
	return o
}

func (o EntityReferenceResponsePtrOutput) Elem() EntityReferenceResponseOutput {
	return o.ApplyT(func(v *EntityReferenceResponse) EntityReferenceResponse { return *v }).(EntityReferenceResponseOutput)
}

// The name of this referenced entity.
func (o EntityReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// The type of this referenced entity.
func (o EntityReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The custom setup of setting environment variable.
type EnvironmentVariableSetup struct {
	// The type of custom setup.
	Type string `pulumi:"type"`
	// The name of the environment variable.
	VariableName string `pulumi:"variableName"`
	// The value of the environment variable.
	VariableValue string `pulumi:"variableValue"`
}

// EnvironmentVariableSetupInput is an input type that accepts EnvironmentVariableSetupArgs and EnvironmentVariableSetupOutput values.
// You can construct a concrete instance of `EnvironmentVariableSetupInput` via:
//
//          EnvironmentVariableSetupArgs{...}
type EnvironmentVariableSetupInput interface {
	pulumi.Input

	ToEnvironmentVariableSetupOutput() EnvironmentVariableSetupOutput
	ToEnvironmentVariableSetupOutputWithContext(context.Context) EnvironmentVariableSetupOutput
}

// The custom setup of setting environment variable.
type EnvironmentVariableSetupArgs struct {
	// The type of custom setup.
	Type pulumi.StringInput `pulumi:"type"`
	// The name of the environment variable.
	VariableName pulumi.StringInput `pulumi:"variableName"`
	// The value of the environment variable.
	VariableValue pulumi.StringInput `pulumi:"variableValue"`
}

func (EnvironmentVariableSetupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableSetup)(nil)).Elem()
}

func (i EnvironmentVariableSetupArgs) ToEnvironmentVariableSetupOutput() EnvironmentVariableSetupOutput {
	return i.ToEnvironmentVariableSetupOutputWithContext(context.Background())
}

func (i EnvironmentVariableSetupArgs) ToEnvironmentVariableSetupOutputWithContext(ctx context.Context) EnvironmentVariableSetupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableSetupOutput)
}

// The custom setup of setting environment variable.
type EnvironmentVariableSetupOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableSetupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableSetup)(nil)).Elem()
}

func (o EnvironmentVariableSetupOutput) ToEnvironmentVariableSetupOutput() EnvironmentVariableSetupOutput {
	return o
}

func (o EnvironmentVariableSetupOutput) ToEnvironmentVariableSetupOutputWithContext(ctx context.Context) EnvironmentVariableSetupOutput {
	return o
}

// The type of custom setup.
func (o EnvironmentVariableSetupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableSetup) string { return v.Type }).(pulumi.StringOutput)
}

// The name of the environment variable.
func (o EnvironmentVariableSetupOutput) VariableName() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableSetup) string { return v.VariableName }).(pulumi.StringOutput)
}

// The value of the environment variable.
func (o EnvironmentVariableSetupOutput) VariableValue() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableSetup) string { return v.VariableValue }).(pulumi.StringOutput)
}

// The custom setup of setting environment variable.
type EnvironmentVariableSetupResponse struct {
	// The type of custom setup.
	Type string `pulumi:"type"`
	// The name of the environment variable.
	VariableName string `pulumi:"variableName"`
	// The value of the environment variable.
	VariableValue string `pulumi:"variableValue"`
}

// EnvironmentVariableSetupResponseInput is an input type that accepts EnvironmentVariableSetupResponseArgs and EnvironmentVariableSetupResponseOutput values.
// You can construct a concrete instance of `EnvironmentVariableSetupResponseInput` via:
//
//          EnvironmentVariableSetupResponseArgs{...}
type EnvironmentVariableSetupResponseInput interface {
	pulumi.Input

	ToEnvironmentVariableSetupResponseOutput() EnvironmentVariableSetupResponseOutput
	ToEnvironmentVariableSetupResponseOutputWithContext(context.Context) EnvironmentVariableSetupResponseOutput
}

// The custom setup of setting environment variable.
type EnvironmentVariableSetupResponseArgs struct {
	// The type of custom setup.
	Type pulumi.StringInput `pulumi:"type"`
	// The name of the environment variable.
	VariableName pulumi.StringInput `pulumi:"variableName"`
	// The value of the environment variable.
	VariableValue pulumi.StringInput `pulumi:"variableValue"`
}

func (EnvironmentVariableSetupResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableSetupResponse)(nil)).Elem()
}

func (i EnvironmentVariableSetupResponseArgs) ToEnvironmentVariableSetupResponseOutput() EnvironmentVariableSetupResponseOutput {
	return i.ToEnvironmentVariableSetupResponseOutputWithContext(context.Background())
}

func (i EnvironmentVariableSetupResponseArgs) ToEnvironmentVariableSetupResponseOutputWithContext(ctx context.Context) EnvironmentVariableSetupResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableSetupResponseOutput)
}

// The custom setup of setting environment variable.
type EnvironmentVariableSetupResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableSetupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableSetupResponse)(nil)).Elem()
}

func (o EnvironmentVariableSetupResponseOutput) ToEnvironmentVariableSetupResponseOutput() EnvironmentVariableSetupResponseOutput {
	return o
}

func (o EnvironmentVariableSetupResponseOutput) ToEnvironmentVariableSetupResponseOutputWithContext(ctx context.Context) EnvironmentVariableSetupResponseOutput {
	return o
}

// The type of custom setup.
func (o EnvironmentVariableSetupResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableSetupResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The name of the environment variable.
func (o EnvironmentVariableSetupResponseOutput) VariableName() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableSetupResponse) string { return v.VariableName }).(pulumi.StringOutput)
}

// The value of the environment variable.
func (o EnvironmentVariableSetupResponseOutput) VariableValue() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableSetupResponse) string { return v.VariableValue }).(pulumi.StringOutput)
}

// Excel dataset.
type ExcelDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the excel storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The partial data of one sheet. Type: string (or Expression with resultType string).
	Range interface{} `pulumi:"range"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// The sheet of excel file. Type: string (or Expression with resultType string).
	SheetName interface{} `pulumi:"sheetName"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ExcelDatasetInput is an input type that accepts ExcelDatasetArgs and ExcelDatasetOutput values.
// You can construct a concrete instance of `ExcelDatasetInput` via:
//
//          ExcelDatasetArgs{...}
type ExcelDatasetInput interface {
	pulumi.Input

	ToExcelDatasetOutput() ExcelDatasetOutput
	ToExcelDatasetOutputWithContext(context.Context) ExcelDatasetOutput
}

// Excel dataset.
type ExcelDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader pulumi.Input `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The location of the excel storage.
	Location pulumi.Input `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue pulumi.Input `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The partial data of one sheet. Type: string (or Expression with resultType string).
	Range pulumi.Input `pulumi:"range"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// The sheet of excel file. Type: string (or Expression with resultType string).
	SheetName pulumi.Input `pulumi:"sheetName"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExcelDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExcelDataset)(nil)).Elem()
}

func (i ExcelDatasetArgs) ToExcelDatasetOutput() ExcelDatasetOutput {
	return i.ToExcelDatasetOutputWithContext(context.Background())
}

func (i ExcelDatasetArgs) ToExcelDatasetOutputWithContext(ctx context.Context) ExcelDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExcelDatasetOutput)
}

// Excel dataset.
type ExcelDatasetOutput struct{ *pulumi.OutputState }

func (ExcelDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExcelDataset)(nil)).Elem()
}

func (o ExcelDatasetOutput) ToExcelDatasetOutput() ExcelDatasetOutput {
	return o
}

func (o ExcelDatasetOutput) ToExcelDatasetOutputWithContext(ctx context.Context) ExcelDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ExcelDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ExcelDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the json dataset.
func (o ExcelDatasetOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDataset) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o ExcelDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExcelDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o ExcelDatasetOutput) FirstRowAsHeader() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDataset) interface{} { return v.FirstRowAsHeader }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ExcelDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v ExcelDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o ExcelDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ExcelDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The location of the excel storage.
func (o ExcelDatasetOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDataset) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// The null value string. Type: string (or Expression with resultType string).
func (o ExcelDatasetOutput) NullValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDataset) interface{} { return v.NullValue }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o ExcelDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ExcelDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The partial data of one sheet. Type: string (or Expression with resultType string).
func (o ExcelDatasetOutput) Range() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDataset) interface{} { return v.Range }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ExcelDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// The sheet of excel file. Type: string (or Expression with resultType string).
func (o ExcelDatasetOutput) SheetName() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDataset) interface{} { return v.SheetName }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ExcelDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o ExcelDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExcelDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Excel dataset.
type ExcelDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the excel storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The partial data of one sheet. Type: string (or Expression with resultType string).
	Range interface{} `pulumi:"range"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// The sheet of excel file. Type: string (or Expression with resultType string).
	SheetName interface{} `pulumi:"sheetName"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ExcelDatasetResponseInput is an input type that accepts ExcelDatasetResponseArgs and ExcelDatasetResponseOutput values.
// You can construct a concrete instance of `ExcelDatasetResponseInput` via:
//
//          ExcelDatasetResponseArgs{...}
type ExcelDatasetResponseInput interface {
	pulumi.Input

	ToExcelDatasetResponseOutput() ExcelDatasetResponseOutput
	ToExcelDatasetResponseOutputWithContext(context.Context) ExcelDatasetResponseOutput
}

// Excel dataset.
type ExcelDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader pulumi.Input `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// The location of the excel storage.
	Location pulumi.Input `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue pulumi.Input `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The partial data of one sheet. Type: string (or Expression with resultType string).
	Range pulumi.Input `pulumi:"range"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// The sheet of excel file. Type: string (or Expression with resultType string).
	SheetName pulumi.Input `pulumi:"sheetName"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExcelDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExcelDatasetResponse)(nil)).Elem()
}

func (i ExcelDatasetResponseArgs) ToExcelDatasetResponseOutput() ExcelDatasetResponseOutput {
	return i.ToExcelDatasetResponseOutputWithContext(context.Background())
}

func (i ExcelDatasetResponseArgs) ToExcelDatasetResponseOutputWithContext(ctx context.Context) ExcelDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExcelDatasetResponseOutput)
}

// Excel dataset.
type ExcelDatasetResponseOutput struct{ *pulumi.OutputState }

func (ExcelDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExcelDatasetResponse)(nil)).Elem()
}

func (o ExcelDatasetResponseOutput) ToExcelDatasetResponseOutput() ExcelDatasetResponseOutput {
	return o
}

func (o ExcelDatasetResponseOutput) ToExcelDatasetResponseOutputWithContext(ctx context.Context) ExcelDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ExcelDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the json dataset.
func (o ExcelDatasetResponseOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o ExcelDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o ExcelDatasetResponseOutput) FirstRowAsHeader() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) interface{} { return v.FirstRowAsHeader }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ExcelDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o ExcelDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The location of the excel storage.
func (o ExcelDatasetResponseOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// The null value string. Type: string (or Expression with resultType string).
func (o ExcelDatasetResponseOutput) NullValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) interface{} { return v.NullValue }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o ExcelDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The partial data of one sheet. Type: string (or Expression with resultType string).
func (o ExcelDatasetResponseOutput) Range() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) interface{} { return v.Range }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ExcelDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// The sheet of excel file. Type: string (or Expression with resultType string).
func (o ExcelDatasetResponseOutput) SheetName() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) interface{} { return v.SheetName }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ExcelDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o ExcelDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Base class for all execution activities.
type ExecutionActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Type of activity.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// ExecutionActivityInput is an input type that accepts ExecutionActivityArgs and ExecutionActivityOutput values.
// You can construct a concrete instance of `ExecutionActivityInput` via:
//
//          ExecutionActivityArgs{...}
type ExecutionActivityInput interface {
	pulumi.Input

	ToExecutionActivityOutput() ExecutionActivityOutput
	ToExecutionActivityOutputWithContext(context.Context) ExecutionActivityOutput
}

// Base class for all execution activities.
type ExecutionActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Type of activity.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (ExecutionActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionActivity)(nil)).Elem()
}

func (i ExecutionActivityArgs) ToExecutionActivityOutput() ExecutionActivityOutput {
	return i.ToExecutionActivityOutputWithContext(context.Background())
}

func (i ExecutionActivityArgs) ToExecutionActivityOutputWithContext(ctx context.Context) ExecutionActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionActivityOutput)
}

// Base class for all execution activities.
type ExecutionActivityOutput struct{ *pulumi.OutputState }

func (ExecutionActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionActivity)(nil)).Elem()
}

func (o ExecutionActivityOutput) ToExecutionActivityOutput() ExecutionActivityOutput {
	return o
}

func (o ExecutionActivityOutput) ToExecutionActivityOutputWithContext(ctx context.Context) ExecutionActivityOutput {
	return o
}

// Activity depends on condition.
func (o ExecutionActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v ExecutionActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o ExecutionActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o ExecutionActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v ExecutionActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Activity name.
func (o ExecutionActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Activity policy.
func (o ExecutionActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v ExecutionActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Type of activity.
func (o ExecutionActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ExecutionActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v ExecutionActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Base class for all execution activities.
type ExecutionActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Type of activity.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// ExecutionActivityResponseInput is an input type that accepts ExecutionActivityResponseArgs and ExecutionActivityResponseOutput values.
// You can construct a concrete instance of `ExecutionActivityResponseInput` via:
//
//          ExecutionActivityResponseArgs{...}
type ExecutionActivityResponseInput interface {
	pulumi.Input

	ToExecutionActivityResponseOutput() ExecutionActivityResponseOutput
	ToExecutionActivityResponseOutputWithContext(context.Context) ExecutionActivityResponseOutput
}

// Base class for all execution activities.
type ExecutionActivityResponseArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyResponseArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponsePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Activity policy.
	Policy ActivityPolicyResponsePtrInput `pulumi:"policy"`
	// Type of activity.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyResponseArrayInput `pulumi:"userProperties"`
}

func (ExecutionActivityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionActivityResponse)(nil)).Elem()
}

func (i ExecutionActivityResponseArgs) ToExecutionActivityResponseOutput() ExecutionActivityResponseOutput {
	return i.ToExecutionActivityResponseOutputWithContext(context.Background())
}

func (i ExecutionActivityResponseArgs) ToExecutionActivityResponseOutputWithContext(ctx context.Context) ExecutionActivityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionActivityResponseOutput)
}

// Base class for all execution activities.
type ExecutionActivityResponseOutput struct{ *pulumi.OutputState }

func (ExecutionActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionActivityResponse)(nil)).Elem()
}

func (o ExecutionActivityResponseOutput) ToExecutionActivityResponseOutput() ExecutionActivityResponseOutput {
	return o
}

func (o ExecutionActivityResponseOutput) ToExecutionActivityResponseOutputWithContext(ctx context.Context) ExecutionActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o ExecutionActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o ExecutionActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o ExecutionActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity name.
func (o ExecutionActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Activity policy.
func (o ExecutionActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Type of activity.
func (o ExecutionActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ExecutionActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Factory's GitHub repo information.
type FactoryGitHubConfiguration struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// GitHub Enterprise host name. For example: https://github.mydomain.com
	HostName *string `pulumi:"hostName"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// Type of repo configuration.
	Type string `pulumi:"type"`
}

// FactoryGitHubConfigurationInput is an input type that accepts FactoryGitHubConfigurationArgs and FactoryGitHubConfigurationOutput values.
// You can construct a concrete instance of `FactoryGitHubConfigurationInput` via:
//
//          FactoryGitHubConfigurationArgs{...}
type FactoryGitHubConfigurationInput interface {
	pulumi.Input

	ToFactoryGitHubConfigurationOutput() FactoryGitHubConfigurationOutput
	ToFactoryGitHubConfigurationOutputWithContext(context.Context) FactoryGitHubConfigurationOutput
}

// Factory's GitHub repo information.
type FactoryGitHubConfigurationArgs struct {
	// Account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch pulumi.StringInput `pulumi:"collaborationBranch"`
	// GitHub Enterprise host name. For example: https://github.mydomain.com
	HostName pulumi.StringPtrInput `pulumi:"hostName"`
	// Last commit id.
	LastCommitId pulumi.StringPtrInput `pulumi:"lastCommitId"`
	// Repository name.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// Root folder.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
	// Type of repo configuration.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryGitHubConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryGitHubConfiguration)(nil)).Elem()
}

func (i FactoryGitHubConfigurationArgs) ToFactoryGitHubConfigurationOutput() FactoryGitHubConfigurationOutput {
	return i.ToFactoryGitHubConfigurationOutputWithContext(context.Background())
}

func (i FactoryGitHubConfigurationArgs) ToFactoryGitHubConfigurationOutputWithContext(ctx context.Context) FactoryGitHubConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryGitHubConfigurationOutput)
}

// Factory's GitHub repo information.
type FactoryGitHubConfigurationOutput struct{ *pulumi.OutputState }

func (FactoryGitHubConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryGitHubConfiguration)(nil)).Elem()
}

func (o FactoryGitHubConfigurationOutput) ToFactoryGitHubConfigurationOutput() FactoryGitHubConfigurationOutput {
	return o
}

func (o FactoryGitHubConfigurationOutput) ToFactoryGitHubConfigurationOutputWithContext(ctx context.Context) FactoryGitHubConfigurationOutput {
	return o
}

// Account name.
func (o FactoryGitHubConfigurationOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfiguration) string { return v.AccountName }).(pulumi.StringOutput)
}

// Collaboration branch.
func (o FactoryGitHubConfigurationOutput) CollaborationBranch() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfiguration) string { return v.CollaborationBranch }).(pulumi.StringOutput)
}

// GitHub Enterprise host name. For example: https://github.mydomain.com
func (o FactoryGitHubConfigurationOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryGitHubConfiguration) *string { return v.HostName }).(pulumi.StringPtrOutput)
}

// Last commit id.
func (o FactoryGitHubConfigurationOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryGitHubConfiguration) *string { return v.LastCommitId }).(pulumi.StringPtrOutput)
}

// Repository name.
func (o FactoryGitHubConfigurationOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfiguration) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Root folder.
func (o FactoryGitHubConfigurationOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfiguration) string { return v.RootFolder }).(pulumi.StringOutput)
}

// Type of repo configuration.
func (o FactoryGitHubConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfiguration) string { return v.Type }).(pulumi.StringOutput)
}

// Factory's GitHub repo information.
type FactoryGitHubConfigurationResponse struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// GitHub Enterprise host name. For example: https://github.mydomain.com
	HostName *string `pulumi:"hostName"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// Type of repo configuration.
	Type string `pulumi:"type"`
}

// FactoryGitHubConfigurationResponseInput is an input type that accepts FactoryGitHubConfigurationResponseArgs and FactoryGitHubConfigurationResponseOutput values.
// You can construct a concrete instance of `FactoryGitHubConfigurationResponseInput` via:
//
//          FactoryGitHubConfigurationResponseArgs{...}
type FactoryGitHubConfigurationResponseInput interface {
	pulumi.Input

	ToFactoryGitHubConfigurationResponseOutput() FactoryGitHubConfigurationResponseOutput
	ToFactoryGitHubConfigurationResponseOutputWithContext(context.Context) FactoryGitHubConfigurationResponseOutput
}

// Factory's GitHub repo information.
type FactoryGitHubConfigurationResponseArgs struct {
	// Account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch pulumi.StringInput `pulumi:"collaborationBranch"`
	// GitHub Enterprise host name. For example: https://github.mydomain.com
	HostName pulumi.StringPtrInput `pulumi:"hostName"`
	// Last commit id.
	LastCommitId pulumi.StringPtrInput `pulumi:"lastCommitId"`
	// Repository name.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// Root folder.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
	// Type of repo configuration.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryGitHubConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryGitHubConfigurationResponse)(nil)).Elem()
}

func (i FactoryGitHubConfigurationResponseArgs) ToFactoryGitHubConfigurationResponseOutput() FactoryGitHubConfigurationResponseOutput {
	return i.ToFactoryGitHubConfigurationResponseOutputWithContext(context.Background())
}

func (i FactoryGitHubConfigurationResponseArgs) ToFactoryGitHubConfigurationResponseOutputWithContext(ctx context.Context) FactoryGitHubConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryGitHubConfigurationResponseOutput)
}

// Factory's GitHub repo information.
type FactoryGitHubConfigurationResponseOutput struct{ *pulumi.OutputState }

func (FactoryGitHubConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryGitHubConfigurationResponse)(nil)).Elem()
}

func (o FactoryGitHubConfigurationResponseOutput) ToFactoryGitHubConfigurationResponseOutput() FactoryGitHubConfigurationResponseOutput {
	return o
}

func (o FactoryGitHubConfigurationResponseOutput) ToFactoryGitHubConfigurationResponseOutputWithContext(ctx context.Context) FactoryGitHubConfigurationResponseOutput {
	return o
}

// Account name.
func (o FactoryGitHubConfigurationResponseOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfigurationResponse) string { return v.AccountName }).(pulumi.StringOutput)
}

// Collaboration branch.
func (o FactoryGitHubConfigurationResponseOutput) CollaborationBranch() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfigurationResponse) string { return v.CollaborationBranch }).(pulumi.StringOutput)
}

// GitHub Enterprise host name. For example: https://github.mydomain.com
func (o FactoryGitHubConfigurationResponseOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryGitHubConfigurationResponse) *string { return v.HostName }).(pulumi.StringPtrOutput)
}

// Last commit id.
func (o FactoryGitHubConfigurationResponseOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryGitHubConfigurationResponse) *string { return v.LastCommitId }).(pulumi.StringPtrOutput)
}

// Repository name.
func (o FactoryGitHubConfigurationResponseOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfigurationResponse) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Root folder.
func (o FactoryGitHubConfigurationResponseOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfigurationResponse) string { return v.RootFolder }).(pulumi.StringOutput)
}

// Type of repo configuration.
func (o FactoryGitHubConfigurationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfigurationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Identity properties of the factory resource.
type FactoryIdentity struct {
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type string `pulumi:"type"`
}

// FactoryIdentityInput is an input type that accepts FactoryIdentityArgs and FactoryIdentityOutput values.
// You can construct a concrete instance of `FactoryIdentityInput` via:
//
//          FactoryIdentityArgs{...}
type FactoryIdentityInput interface {
	pulumi.Input

	ToFactoryIdentityOutput() FactoryIdentityOutput
	ToFactoryIdentityOutputWithContext(context.Context) FactoryIdentityOutput
}

// Identity properties of the factory resource.
type FactoryIdentityArgs struct {
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return i.ToFactoryIdentityOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput)
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput).ToFactoryIdentityPtrOutputWithContext(ctx)
}

// FactoryIdentityPtrInput is an input type that accepts FactoryIdentityArgs, FactoryIdentityPtr and FactoryIdentityPtrOutput values.
// You can construct a concrete instance of `FactoryIdentityPtrInput` via:
//
//          FactoryIdentityArgs{...}
//
//  or:
//
//          nil
type FactoryIdentityPtrInput interface {
	pulumi.Input

	ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput
	ToFactoryIdentityPtrOutputWithContext(context.Context) FactoryIdentityPtrOutput
}

type factoryIdentityPtrType FactoryIdentityArgs

func FactoryIdentityPtr(v *FactoryIdentityArgs) FactoryIdentityPtrInput {
	return (*factoryIdentityPtrType)(v)
}

func (*factoryIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityPtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityOutput struct{ *pulumi.OutputState }

func (FactoryIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o.ApplyT(func(v FactoryIdentity) *FactoryIdentity {
		return &v
	}).(FactoryIdentityPtrOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryIdentityPtrOutput struct{ *pulumi.OutputState }

func (FactoryIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) Elem() FactoryIdentityOutput {
	return o.ApplyT(func(v *FactoryIdentity) FactoryIdentity { return *v }).(FactoryIdentityOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityResponse struct {
	// The principal id of the identity.
	PrincipalId string `pulumi:"principalId"`
	// The client tenant id of the identity.
	TenantId string `pulumi:"tenantId"`
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type string `pulumi:"type"`
}

// FactoryIdentityResponseInput is an input type that accepts FactoryIdentityResponseArgs and FactoryIdentityResponseOutput values.
// You can construct a concrete instance of `FactoryIdentityResponseInput` via:
//
//          FactoryIdentityResponseArgs{...}
type FactoryIdentityResponseInput interface {
	pulumi.Input

	ToFactoryIdentityResponseOutput() FactoryIdentityResponseOutput
	ToFactoryIdentityResponseOutputWithContext(context.Context) FactoryIdentityResponseOutput
}

// Identity properties of the factory resource.
type FactoryIdentityResponseArgs struct {
	// The principal id of the identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The client tenant id of the identity.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryIdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentityResponse)(nil)).Elem()
}

func (i FactoryIdentityResponseArgs) ToFactoryIdentityResponseOutput() FactoryIdentityResponseOutput {
	return i.ToFactoryIdentityResponseOutputWithContext(context.Background())
}

func (i FactoryIdentityResponseArgs) ToFactoryIdentityResponseOutputWithContext(ctx context.Context) FactoryIdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityResponseOutput)
}

func (i FactoryIdentityResponseArgs) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return i.ToFactoryIdentityResponsePtrOutputWithContext(context.Background())
}

func (i FactoryIdentityResponseArgs) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityResponseOutput).ToFactoryIdentityResponsePtrOutputWithContext(ctx)
}

// FactoryIdentityResponsePtrInput is an input type that accepts FactoryIdentityResponseArgs, FactoryIdentityResponsePtr and FactoryIdentityResponsePtrOutput values.
// You can construct a concrete instance of `FactoryIdentityResponsePtrInput` via:
//
//          FactoryIdentityResponseArgs{...}
//
//  or:
//
//          nil
type FactoryIdentityResponsePtrInput interface {
	pulumi.Input

	ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput
	ToFactoryIdentityResponsePtrOutputWithContext(context.Context) FactoryIdentityResponsePtrOutput
}

type factoryIdentityResponsePtrType FactoryIdentityResponseArgs

func FactoryIdentityResponsePtr(v *FactoryIdentityResponseArgs) FactoryIdentityResponsePtrInput {
	return (*factoryIdentityResponsePtrType)(v)
}

func (*factoryIdentityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentityResponse)(nil)).Elem()
}

func (i *factoryIdentityResponsePtrType) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return i.ToFactoryIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *factoryIdentityResponsePtrType) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityResponsePtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityResponseOutput struct{ *pulumi.OutputState }

func (FactoryIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentityResponse)(nil)).Elem()
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponseOutput() FactoryIdentityResponseOutput {
	return o
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponseOutputWithContext(ctx context.Context) FactoryIdentityResponseOutput {
	return o
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return o.ToFactoryIdentityResponsePtrOutputWithContext(context.Background())
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) *FactoryIdentityResponse {
		return &v
	}).(FactoryIdentityResponsePtrOutput)
}

// The principal id of the identity.
func (o FactoryIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The client tenant id of the identity.
func (o FactoryIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (FactoryIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentityResponse)(nil)).Elem()
}

func (o FactoryIdentityResponsePtrOutput) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return o
}

func (o FactoryIdentityResponsePtrOutput) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return o
}

func (o FactoryIdentityResponsePtrOutput) Elem() FactoryIdentityResponseOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) FactoryIdentityResponse { return *v }).(FactoryIdentityResponseOutput)
}

// The principal id of the identity.
func (o FactoryIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The client tenant id of the identity.
func (o FactoryIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Factory's VSTS repo information.
type FactoryVSTSConfiguration struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName string `pulumi:"projectName"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId *string `pulumi:"tenantId"`
	// Type of repo configuration.
	Type string `pulumi:"type"`
}

// FactoryVSTSConfigurationInput is an input type that accepts FactoryVSTSConfigurationArgs and FactoryVSTSConfigurationOutput values.
// You can construct a concrete instance of `FactoryVSTSConfigurationInput` via:
//
//          FactoryVSTSConfigurationArgs{...}
type FactoryVSTSConfigurationInput interface {
	pulumi.Input

	ToFactoryVSTSConfigurationOutput() FactoryVSTSConfigurationOutput
	ToFactoryVSTSConfigurationOutputWithContext(context.Context) FactoryVSTSConfigurationOutput
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationArgs struct {
	// Account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch pulumi.StringInput `pulumi:"collaborationBranch"`
	// Last commit id.
	LastCommitId pulumi.StringPtrInput `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// Repository name.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// Root folder.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Type of repo configuration.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryVSTSConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVSTSConfiguration)(nil)).Elem()
}

func (i FactoryVSTSConfigurationArgs) ToFactoryVSTSConfigurationOutput() FactoryVSTSConfigurationOutput {
	return i.ToFactoryVSTSConfigurationOutputWithContext(context.Background())
}

func (i FactoryVSTSConfigurationArgs) ToFactoryVSTSConfigurationOutputWithContext(ctx context.Context) FactoryVSTSConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVSTSConfigurationOutput)
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationOutput struct{ *pulumi.OutputState }

func (FactoryVSTSConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVSTSConfiguration)(nil)).Elem()
}

func (o FactoryVSTSConfigurationOutput) ToFactoryVSTSConfigurationOutput() FactoryVSTSConfigurationOutput {
	return o
}

func (o FactoryVSTSConfigurationOutput) ToFactoryVSTSConfigurationOutputWithContext(ctx context.Context) FactoryVSTSConfigurationOutput {
	return o
}

// Account name.
func (o FactoryVSTSConfigurationOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) string { return v.AccountName }).(pulumi.StringOutput)
}

// Collaboration branch.
func (o FactoryVSTSConfigurationOutput) CollaborationBranch() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) string { return v.CollaborationBranch }).(pulumi.StringOutput)
}

// Last commit id.
func (o FactoryVSTSConfigurationOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *string { return v.LastCommitId }).(pulumi.StringPtrOutput)
}

// VSTS project name.
func (o FactoryVSTSConfigurationOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) string { return v.ProjectName }).(pulumi.StringOutput)
}

// Repository name.
func (o FactoryVSTSConfigurationOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Root folder.
func (o FactoryVSTSConfigurationOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) string { return v.RootFolder }).(pulumi.StringOutput)
}

// VSTS tenant id.
func (o FactoryVSTSConfigurationOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Type of repo configuration.
func (o FactoryVSTSConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) string { return v.Type }).(pulumi.StringOutput)
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationResponse struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName string `pulumi:"projectName"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId *string `pulumi:"tenantId"`
	// Type of repo configuration.
	Type string `pulumi:"type"`
}

// FactoryVSTSConfigurationResponseInput is an input type that accepts FactoryVSTSConfigurationResponseArgs and FactoryVSTSConfigurationResponseOutput values.
// You can construct a concrete instance of `FactoryVSTSConfigurationResponseInput` via:
//
//          FactoryVSTSConfigurationResponseArgs{...}
type FactoryVSTSConfigurationResponseInput interface {
	pulumi.Input

	ToFactoryVSTSConfigurationResponseOutput() FactoryVSTSConfigurationResponseOutput
	ToFactoryVSTSConfigurationResponseOutputWithContext(context.Context) FactoryVSTSConfigurationResponseOutput
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationResponseArgs struct {
	// Account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch pulumi.StringInput `pulumi:"collaborationBranch"`
	// Last commit id.
	LastCommitId pulumi.StringPtrInput `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// Repository name.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// Root folder.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Type of repo configuration.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryVSTSConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVSTSConfigurationResponse)(nil)).Elem()
}

func (i FactoryVSTSConfigurationResponseArgs) ToFactoryVSTSConfigurationResponseOutput() FactoryVSTSConfigurationResponseOutput {
	return i.ToFactoryVSTSConfigurationResponseOutputWithContext(context.Background())
}

func (i FactoryVSTSConfigurationResponseArgs) ToFactoryVSTSConfigurationResponseOutputWithContext(ctx context.Context) FactoryVSTSConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVSTSConfigurationResponseOutput)
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationResponseOutput struct{ *pulumi.OutputState }

func (FactoryVSTSConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVSTSConfigurationResponse)(nil)).Elem()
}

func (o FactoryVSTSConfigurationResponseOutput) ToFactoryVSTSConfigurationResponseOutput() FactoryVSTSConfigurationResponseOutput {
	return o
}

func (o FactoryVSTSConfigurationResponseOutput) ToFactoryVSTSConfigurationResponseOutputWithContext(ctx context.Context) FactoryVSTSConfigurationResponseOutput {
	return o
}

// Account name.
func (o FactoryVSTSConfigurationResponseOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) string { return v.AccountName }).(pulumi.StringOutput)
}

// Collaboration branch.
func (o FactoryVSTSConfigurationResponseOutput) CollaborationBranch() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) string { return v.CollaborationBranch }).(pulumi.StringOutput)
}

// Last commit id.
func (o FactoryVSTSConfigurationResponseOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.LastCommitId }).(pulumi.StringPtrOutput)
}

// VSTS project name.
func (o FactoryVSTSConfigurationResponseOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) string { return v.ProjectName }).(pulumi.StringOutput)
}

// Repository name.
func (o FactoryVSTSConfigurationResponseOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Root folder.
func (o FactoryVSTSConfigurationResponseOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) string { return v.RootFolder }).(pulumi.StringOutput)
}

// VSTS tenant id.
func (o FactoryVSTSConfigurationResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Type of repo configuration.
func (o FactoryVSTSConfigurationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// File system linked service.
type FileServerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to logon the server.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId interface{} `pulumi:"userId"`
}

// FileServerLinkedServiceInput is an input type that accepts FileServerLinkedServiceArgs and FileServerLinkedServiceOutput values.
// You can construct a concrete instance of `FileServerLinkedServiceInput` via:
//
//          FileServerLinkedServiceArgs{...}
type FileServerLinkedServiceInput interface {
	pulumi.Input

	ToFileServerLinkedServiceOutput() FileServerLinkedServiceOutput
	ToFileServerLinkedServiceOutputWithContext(context.Context) FileServerLinkedServiceOutput
}

// File system linked service.
type FileServerLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to logon the server.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId pulumi.Input `pulumi:"userId"`
}

func (FileServerLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerLinkedService)(nil)).Elem()
}

func (i FileServerLinkedServiceArgs) ToFileServerLinkedServiceOutput() FileServerLinkedServiceOutput {
	return i.ToFileServerLinkedServiceOutputWithContext(context.Background())
}

func (i FileServerLinkedServiceArgs) ToFileServerLinkedServiceOutputWithContext(ctx context.Context) FileServerLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileServerLinkedServiceOutput)
}

// File system linked service.
type FileServerLinkedServiceOutput struct{ *pulumi.OutputState }

func (FileServerLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerLinkedService)(nil)).Elem()
}

func (o FileServerLinkedServiceOutput) ToFileServerLinkedServiceOutput() FileServerLinkedServiceOutput {
	return o
}

func (o FileServerLinkedServiceOutput) ToFileServerLinkedServiceOutputWithContext(ctx context.Context) FileServerLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o FileServerLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v FileServerLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o FileServerLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v FileServerLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o FileServerLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileServerLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o FileServerLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Host name of the server. Type: string (or Expression with resultType string).
func (o FileServerLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o FileServerLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v FileServerLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to logon the server.
func (o FileServerLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o FileServerLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileServerLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// User ID to logon the server. Type: string (or Expression with resultType string).
func (o FileServerLinkedServiceOutput) UserId() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLinkedService) interface{} { return v.UserId }).(pulumi.AnyOutput)
}

// File system linked service.
type FileServerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to logon the server.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId interface{} `pulumi:"userId"`
}

// FileServerLinkedServiceResponseInput is an input type that accepts FileServerLinkedServiceResponseArgs and FileServerLinkedServiceResponseOutput values.
// You can construct a concrete instance of `FileServerLinkedServiceResponseInput` via:
//
//          FileServerLinkedServiceResponseArgs{...}
type FileServerLinkedServiceResponseInput interface {
	pulumi.Input

	ToFileServerLinkedServiceResponseOutput() FileServerLinkedServiceResponseOutput
	ToFileServerLinkedServiceResponseOutputWithContext(context.Context) FileServerLinkedServiceResponseOutput
}

// File system linked service.
type FileServerLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password to logon the server.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId pulumi.Input `pulumi:"userId"`
}

func (FileServerLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerLinkedServiceResponse)(nil)).Elem()
}

func (i FileServerLinkedServiceResponseArgs) ToFileServerLinkedServiceResponseOutput() FileServerLinkedServiceResponseOutput {
	return i.ToFileServerLinkedServiceResponseOutputWithContext(context.Background())
}

func (i FileServerLinkedServiceResponseArgs) ToFileServerLinkedServiceResponseOutputWithContext(ctx context.Context) FileServerLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileServerLinkedServiceResponseOutput)
}

// File system linked service.
type FileServerLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (FileServerLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerLinkedServiceResponse)(nil)).Elem()
}

func (o FileServerLinkedServiceResponseOutput) ToFileServerLinkedServiceResponseOutput() FileServerLinkedServiceResponseOutput {
	return o
}

func (o FileServerLinkedServiceResponseOutput) ToFileServerLinkedServiceResponseOutputWithContext(ctx context.Context) FileServerLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o FileServerLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o FileServerLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o FileServerLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o FileServerLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Host name of the server. Type: string (or Expression with resultType string).
func (o FileServerLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o FileServerLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to logon the server.
func (o FileServerLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o FileServerLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User ID to logon the server. Type: string (or Expression with resultType string).
func (o FileServerLinkedServiceResponseOutput) UserId() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) interface{} { return v.UserId }).(pulumi.AnyOutput)
}

// The location of file server dataset.
type FileServerLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
}

// FileServerLocationInput is an input type that accepts FileServerLocationArgs and FileServerLocationOutput values.
// You can construct a concrete instance of `FileServerLocationInput` via:
//
//          FileServerLocationArgs{...}
type FileServerLocationInput interface {
	pulumi.Input

	ToFileServerLocationOutput() FileServerLocationOutput
	ToFileServerLocationOutputWithContext(context.Context) FileServerLocationOutput
}

// The location of file server dataset.
type FileServerLocationArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FileServerLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerLocation)(nil)).Elem()
}

func (i FileServerLocationArgs) ToFileServerLocationOutput() FileServerLocationOutput {
	return i.ToFileServerLocationOutputWithContext(context.Background())
}

func (i FileServerLocationArgs) ToFileServerLocationOutputWithContext(ctx context.Context) FileServerLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileServerLocationOutput)
}

// The location of file server dataset.
type FileServerLocationOutput struct{ *pulumi.OutputState }

func (FileServerLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerLocation)(nil)).Elem()
}

func (o FileServerLocationOutput) ToFileServerLocationOutput() FileServerLocationOutput {
	return o
}

func (o FileServerLocationOutput) ToFileServerLocationOutputWithContext(ctx context.Context) FileServerLocationOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o FileServerLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o FileServerLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o FileServerLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileServerLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The location of file server dataset.
type FileServerLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
}

// FileServerLocationResponseInput is an input type that accepts FileServerLocationResponseArgs and FileServerLocationResponseOutput values.
// You can construct a concrete instance of `FileServerLocationResponseInput` via:
//
//          FileServerLocationResponseArgs{...}
type FileServerLocationResponseInput interface {
	pulumi.Input

	ToFileServerLocationResponseOutput() FileServerLocationResponseOutput
	ToFileServerLocationResponseOutputWithContext(context.Context) FileServerLocationResponseOutput
}

// The location of file server dataset.
type FileServerLocationResponseArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FileServerLocationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerLocationResponse)(nil)).Elem()
}

func (i FileServerLocationResponseArgs) ToFileServerLocationResponseOutput() FileServerLocationResponseOutput {
	return i.ToFileServerLocationResponseOutputWithContext(context.Background())
}

func (i FileServerLocationResponseArgs) ToFileServerLocationResponseOutputWithContext(ctx context.Context) FileServerLocationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileServerLocationResponseOutput)
}

// The location of file server dataset.
type FileServerLocationResponseOutput struct{ *pulumi.OutputState }

func (FileServerLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerLocationResponse)(nil)).Elem()
}

func (o FileServerLocationResponseOutput) ToFileServerLocationResponseOutput() FileServerLocationResponseOutput {
	return o
}

func (o FileServerLocationResponseOutput) ToFileServerLocationResponseOutputWithContext(ctx context.Context) FileServerLocationResponseOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o FileServerLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o FileServerLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o FileServerLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileServerLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// An on-premises file system dataset.
type FileShareDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the file system.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter interface{} `pulumi:"fileFilter"`
	// The name of the on-premises file system. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The path of the on-premises file system. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// FileShareDatasetInput is an input type that accepts FileShareDatasetArgs and FileShareDatasetOutput values.
// You can construct a concrete instance of `FileShareDatasetInput` via:
//
//          FileShareDatasetArgs{...}
type FileShareDatasetInput interface {
	pulumi.Input

	ToFileShareDatasetOutput() FileShareDatasetOutput
	ToFileShareDatasetOutputWithContext(context.Context) FileShareDatasetOutput
}

// An on-premises file system dataset.
type FileShareDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the file system.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter pulumi.Input `pulumi:"fileFilter"`
	// The name of the on-premises file system. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// The path of the on-premises file system. Type: string (or Expression with resultType string).
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// The format of the files.
	Format pulumi.Input `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FileShareDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareDataset)(nil)).Elem()
}

func (i FileShareDatasetArgs) ToFileShareDatasetOutput() FileShareDatasetOutput {
	return i.ToFileShareDatasetOutputWithContext(context.Background())
}

func (i FileShareDatasetArgs) ToFileShareDatasetOutputWithContext(ctx context.Context) FileShareDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareDatasetOutput)
}

// An on-premises file system dataset.
type FileShareDatasetOutput struct{ *pulumi.OutputState }

func (FileShareDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareDataset)(nil)).Elem()
}

func (o FileShareDatasetOutput) ToFileShareDatasetOutput() FileShareDatasetOutput {
	return o
}

func (o FileShareDatasetOutput) ToFileShareDatasetOutputWithContext(ctx context.Context) FileShareDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o FileShareDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v FileShareDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the file system.
func (o FileShareDatasetOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDataset) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o FileShareDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
func (o FileShareDatasetOutput) FileFilter() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDataset) interface{} { return v.FileFilter }).(pulumi.AnyOutput)
}

// The name of the on-premises file system. Type: string (or Expression with resultType string).
func (o FileShareDatasetOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDataset) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o FileShareDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v FileShareDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// The path of the on-premises file system. Type: string (or Expression with resultType string).
func (o FileShareDatasetOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDataset) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// The format of the files.
func (o FileShareDatasetOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDataset) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o FileShareDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v FileShareDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o FileShareDatasetOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDataset) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o FileShareDatasetOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDataset) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o FileShareDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v FileShareDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o FileShareDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o FileShareDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o FileShareDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileShareDataset) string { return v.Type }).(pulumi.StringOutput)
}

// An on-premises file system dataset.
type FileShareDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the file system.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter interface{} `pulumi:"fileFilter"`
	// The name of the on-premises file system. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The path of the on-premises file system. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// FileShareDatasetResponseInput is an input type that accepts FileShareDatasetResponseArgs and FileShareDatasetResponseOutput values.
// You can construct a concrete instance of `FileShareDatasetResponseInput` via:
//
//          FileShareDatasetResponseArgs{...}
type FileShareDatasetResponseInput interface {
	pulumi.Input

	ToFileShareDatasetResponseOutput() FileShareDatasetResponseOutput
	ToFileShareDatasetResponseOutputWithContext(context.Context) FileShareDatasetResponseOutput
}

// An on-premises file system dataset.
type FileShareDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the file system.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter pulumi.Input `pulumi:"fileFilter"`
	// The name of the on-premises file system. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// The path of the on-premises file system. Type: string (or Expression with resultType string).
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// The format of the files.
	Format pulumi.Input `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FileShareDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareDatasetResponse)(nil)).Elem()
}

func (i FileShareDatasetResponseArgs) ToFileShareDatasetResponseOutput() FileShareDatasetResponseOutput {
	return i.ToFileShareDatasetResponseOutputWithContext(context.Background())
}

func (i FileShareDatasetResponseArgs) ToFileShareDatasetResponseOutputWithContext(ctx context.Context) FileShareDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareDatasetResponseOutput)
}

// An on-premises file system dataset.
type FileShareDatasetResponseOutput struct{ *pulumi.OutputState }

func (FileShareDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareDatasetResponse)(nil)).Elem()
}

func (o FileShareDatasetResponseOutput) ToFileShareDatasetResponseOutput() FileShareDatasetResponseOutput {
	return o
}

func (o FileShareDatasetResponseOutput) ToFileShareDatasetResponseOutputWithContext(ctx context.Context) FileShareDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o FileShareDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the file system.
func (o FileShareDatasetResponseOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o FileShareDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
func (o FileShareDatasetResponseOutput) FileFilter() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) interface{} { return v.FileFilter }).(pulumi.AnyOutput)
}

// The name of the on-premises file system. Type: string (or Expression with resultType string).
func (o FileShareDatasetResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o FileShareDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// The path of the on-premises file system. Type: string (or Expression with resultType string).
func (o FileShareDatasetResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// The format of the files.
func (o FileShareDatasetResponseOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o FileShareDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o FileShareDatasetResponseOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o FileShareDatasetResponseOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o FileShareDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o FileShareDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o FileShareDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o FileShareDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A FTP server Linked Service.
type FtpServerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Host name of the FTP server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to logon the FTP server.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username to logon the FTP server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// FtpServerLinkedServiceInput is an input type that accepts FtpServerLinkedServiceArgs and FtpServerLinkedServiceOutput values.
// You can construct a concrete instance of `FtpServerLinkedServiceInput` via:
//
//          FtpServerLinkedServiceArgs{...}
type FtpServerLinkedServiceInput interface {
	pulumi.Input

	ToFtpServerLinkedServiceOutput() FtpServerLinkedServiceOutput
	ToFtpServerLinkedServiceOutputWithContext(context.Context) FtpServerLinkedServiceOutput
}

// A FTP server Linked Service.
type FtpServerLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation pulumi.Input `pulumi:"enableServerCertificateValidation"`
	// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Host name of the FTP server. Type: string (or Expression with resultType string).
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to logon the FTP server.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.Input `pulumi:"port"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username to logon the FTP server. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (FtpServerLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FtpServerLinkedService)(nil)).Elem()
}

func (i FtpServerLinkedServiceArgs) ToFtpServerLinkedServiceOutput() FtpServerLinkedServiceOutput {
	return i.ToFtpServerLinkedServiceOutputWithContext(context.Background())
}

func (i FtpServerLinkedServiceArgs) ToFtpServerLinkedServiceOutputWithContext(ctx context.Context) FtpServerLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FtpServerLinkedServiceOutput)
}

// A FTP server Linked Service.
type FtpServerLinkedServiceOutput struct{ *pulumi.OutputState }

func (FtpServerLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FtpServerLinkedService)(nil)).Elem()
}

func (o FtpServerLinkedServiceOutput) ToFtpServerLinkedServiceOutput() FtpServerLinkedServiceOutput {
	return o
}

func (o FtpServerLinkedServiceOutput) ToFtpServerLinkedServiceOutputWithContext(ctx context.Context) FtpServerLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o FtpServerLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v FtpServerLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to be used to connect to the FTP server.
func (o FtpServerLinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FtpServerLinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o FtpServerLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v FtpServerLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o FtpServerLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FtpServerLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
func (o FtpServerLinkedServiceOutput) EnableServerCertificateValidation() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedService) interface{} { return v.EnableServerCertificateValidation }).(pulumi.AnyOutput)
}

// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
func (o FtpServerLinkedServiceOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedService) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o FtpServerLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Host name of the FTP server. Type: string (or Expression with resultType string).
func (o FtpServerLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o FtpServerLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v FtpServerLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to logon the FTP server.
func (o FtpServerLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
func (o FtpServerLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o FtpServerLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FtpServerLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username to logon the FTP server. Type: string (or Expression with resultType string).
func (o FtpServerLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// A FTP server Linked Service.
type FtpServerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Host name of the FTP server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to logon the FTP server.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username to logon the FTP server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// FtpServerLinkedServiceResponseInput is an input type that accepts FtpServerLinkedServiceResponseArgs and FtpServerLinkedServiceResponseOutput values.
// You can construct a concrete instance of `FtpServerLinkedServiceResponseInput` via:
//
//          FtpServerLinkedServiceResponseArgs{...}
type FtpServerLinkedServiceResponseInput interface {
	pulumi.Input

	ToFtpServerLinkedServiceResponseOutput() FtpServerLinkedServiceResponseOutput
	ToFtpServerLinkedServiceResponseOutputWithContext(context.Context) FtpServerLinkedServiceResponseOutput
}

// A FTP server Linked Service.
type FtpServerLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation pulumi.Input `pulumi:"enableServerCertificateValidation"`
	// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Host name of the FTP server. Type: string (or Expression with resultType string).
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password to logon the FTP server.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.Input `pulumi:"port"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username to logon the FTP server. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (FtpServerLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FtpServerLinkedServiceResponse)(nil)).Elem()
}

func (i FtpServerLinkedServiceResponseArgs) ToFtpServerLinkedServiceResponseOutput() FtpServerLinkedServiceResponseOutput {
	return i.ToFtpServerLinkedServiceResponseOutputWithContext(context.Background())
}

func (i FtpServerLinkedServiceResponseArgs) ToFtpServerLinkedServiceResponseOutputWithContext(ctx context.Context) FtpServerLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FtpServerLinkedServiceResponseOutput)
}

// A FTP server Linked Service.
type FtpServerLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (FtpServerLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FtpServerLinkedServiceResponse)(nil)).Elem()
}

func (o FtpServerLinkedServiceResponseOutput) ToFtpServerLinkedServiceResponseOutput() FtpServerLinkedServiceResponseOutput {
	return o
}

func (o FtpServerLinkedServiceResponseOutput) ToFtpServerLinkedServiceResponseOutputWithContext(ctx context.Context) FtpServerLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o FtpServerLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to be used to connect to the FTP server.
func (o FtpServerLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o FtpServerLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o FtpServerLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
func (o FtpServerLinkedServiceResponseOutput) EnableServerCertificateValidation() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) interface{} { return v.EnableServerCertificateValidation }).(pulumi.AnyOutput)
}

// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
func (o FtpServerLinkedServiceResponseOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o FtpServerLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Host name of the FTP server. Type: string (or Expression with resultType string).
func (o FtpServerLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o FtpServerLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to logon the FTP server.
func (o FtpServerLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
func (o FtpServerLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o FtpServerLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username to logon the FTP server. Type: string (or Expression with resultType string).
func (o FtpServerLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The location of ftp server dataset.
type FtpServerLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
}

// FtpServerLocationInput is an input type that accepts FtpServerLocationArgs and FtpServerLocationOutput values.
// You can construct a concrete instance of `FtpServerLocationInput` via:
//
//          FtpServerLocationArgs{...}
type FtpServerLocationInput interface {
	pulumi.Input

	ToFtpServerLocationOutput() FtpServerLocationOutput
	ToFtpServerLocationOutputWithContext(context.Context) FtpServerLocationOutput
}

// The location of ftp server dataset.
type FtpServerLocationArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FtpServerLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FtpServerLocation)(nil)).Elem()
}

func (i FtpServerLocationArgs) ToFtpServerLocationOutput() FtpServerLocationOutput {
	return i.ToFtpServerLocationOutputWithContext(context.Background())
}

func (i FtpServerLocationArgs) ToFtpServerLocationOutputWithContext(ctx context.Context) FtpServerLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FtpServerLocationOutput)
}

// The location of ftp server dataset.
type FtpServerLocationOutput struct{ *pulumi.OutputState }

func (FtpServerLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FtpServerLocation)(nil)).Elem()
}

func (o FtpServerLocationOutput) ToFtpServerLocationOutput() FtpServerLocationOutput {
	return o
}

func (o FtpServerLocationOutput) ToFtpServerLocationOutputWithContext(ctx context.Context) FtpServerLocationOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o FtpServerLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o FtpServerLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o FtpServerLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FtpServerLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The location of ftp server dataset.
type FtpServerLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
}

// FtpServerLocationResponseInput is an input type that accepts FtpServerLocationResponseArgs and FtpServerLocationResponseOutput values.
// You can construct a concrete instance of `FtpServerLocationResponseInput` via:
//
//          FtpServerLocationResponseArgs{...}
type FtpServerLocationResponseInput interface {
	pulumi.Input

	ToFtpServerLocationResponseOutput() FtpServerLocationResponseOutput
	ToFtpServerLocationResponseOutputWithContext(context.Context) FtpServerLocationResponseOutput
}

// The location of ftp server dataset.
type FtpServerLocationResponseArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FtpServerLocationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FtpServerLocationResponse)(nil)).Elem()
}

func (i FtpServerLocationResponseArgs) ToFtpServerLocationResponseOutput() FtpServerLocationResponseOutput {
	return i.ToFtpServerLocationResponseOutputWithContext(context.Background())
}

func (i FtpServerLocationResponseArgs) ToFtpServerLocationResponseOutputWithContext(ctx context.Context) FtpServerLocationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FtpServerLocationResponseOutput)
}

// The location of ftp server dataset.
type FtpServerLocationResponseOutput struct{ *pulumi.OutputState }

func (FtpServerLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FtpServerLocationResponse)(nil)).Elem()
}

func (o FtpServerLocationResponseOutput) ToFtpServerLocationResponseOutput() FtpServerLocationResponseOutput {
	return o
}

func (o FtpServerLocationResponseOutput) ToFtpServerLocationResponseOutputWithContext(ctx context.Context) FtpServerLocationResponseOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o FtpServerLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o FtpServerLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o FtpServerLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FtpServerLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecification struct {
	// Global Parameter type.
	Type string `pulumi:"type"`
	// Value of parameter.
	Value interface{} `pulumi:"value"`
}

// GlobalParameterSpecificationInput is an input type that accepts GlobalParameterSpecificationArgs and GlobalParameterSpecificationOutput values.
// You can construct a concrete instance of `GlobalParameterSpecificationInput` via:
//
//          GlobalParameterSpecificationArgs{...}
type GlobalParameterSpecificationInput interface {
	pulumi.Input

	ToGlobalParameterSpecificationOutput() GlobalParameterSpecificationOutput
	ToGlobalParameterSpecificationOutputWithContext(context.Context) GlobalParameterSpecificationOutput
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationArgs struct {
	// Global Parameter type.
	Type pulumi.StringInput `pulumi:"type"`
	// Value of parameter.
	Value pulumi.Input `pulumi:"value"`
}

func (GlobalParameterSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterSpecification)(nil)).Elem()
}

func (i GlobalParameterSpecificationArgs) ToGlobalParameterSpecificationOutput() GlobalParameterSpecificationOutput {
	return i.ToGlobalParameterSpecificationOutputWithContext(context.Background())
}

func (i GlobalParameterSpecificationArgs) ToGlobalParameterSpecificationOutputWithContext(ctx context.Context) GlobalParameterSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterSpecificationOutput)
}

// GlobalParameterSpecificationMapInput is an input type that accepts GlobalParameterSpecificationMap and GlobalParameterSpecificationMapOutput values.
// You can construct a concrete instance of `GlobalParameterSpecificationMapInput` via:
//
//          GlobalParameterSpecificationMap{ "key": GlobalParameterSpecificationArgs{...} }
type GlobalParameterSpecificationMapInput interface {
	pulumi.Input

	ToGlobalParameterSpecificationMapOutput() GlobalParameterSpecificationMapOutput
	ToGlobalParameterSpecificationMapOutputWithContext(context.Context) GlobalParameterSpecificationMapOutput
}

type GlobalParameterSpecificationMap map[string]GlobalParameterSpecificationInput

func (GlobalParameterSpecificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GlobalParameterSpecification)(nil)).Elem()
}

func (i GlobalParameterSpecificationMap) ToGlobalParameterSpecificationMapOutput() GlobalParameterSpecificationMapOutput {
	return i.ToGlobalParameterSpecificationMapOutputWithContext(context.Background())
}

func (i GlobalParameterSpecificationMap) ToGlobalParameterSpecificationMapOutputWithContext(ctx context.Context) GlobalParameterSpecificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterSpecificationMapOutput)
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterSpecification)(nil)).Elem()
}

func (o GlobalParameterSpecificationOutput) ToGlobalParameterSpecificationOutput() GlobalParameterSpecificationOutput {
	return o
}

func (o GlobalParameterSpecificationOutput) ToGlobalParameterSpecificationOutputWithContext(ctx context.Context) GlobalParameterSpecificationOutput {
	return o
}

// Global Parameter type.
func (o GlobalParameterSpecificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalParameterSpecification) string { return v.Type }).(pulumi.StringOutput)
}

// Value of parameter.
func (o GlobalParameterSpecificationOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v GlobalParameterSpecification) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type GlobalParameterSpecificationMapOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GlobalParameterSpecification)(nil)).Elem()
}

func (o GlobalParameterSpecificationMapOutput) ToGlobalParameterSpecificationMapOutput() GlobalParameterSpecificationMapOutput {
	return o
}

func (o GlobalParameterSpecificationMapOutput) ToGlobalParameterSpecificationMapOutputWithContext(ctx context.Context) GlobalParameterSpecificationMapOutput {
	return o
}

func (o GlobalParameterSpecificationMapOutput) MapIndex(k pulumi.StringInput) GlobalParameterSpecificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GlobalParameterSpecification {
		return vs[0].(map[string]GlobalParameterSpecification)[vs[1].(string)]
	}).(GlobalParameterSpecificationOutput)
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationResponse struct {
	// Global Parameter type.
	Type string `pulumi:"type"`
	// Value of parameter.
	Value interface{} `pulumi:"value"`
}

// GlobalParameterSpecificationResponseInput is an input type that accepts GlobalParameterSpecificationResponseArgs and GlobalParameterSpecificationResponseOutput values.
// You can construct a concrete instance of `GlobalParameterSpecificationResponseInput` via:
//
//          GlobalParameterSpecificationResponseArgs{...}
type GlobalParameterSpecificationResponseInput interface {
	pulumi.Input

	ToGlobalParameterSpecificationResponseOutput() GlobalParameterSpecificationResponseOutput
	ToGlobalParameterSpecificationResponseOutputWithContext(context.Context) GlobalParameterSpecificationResponseOutput
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationResponseArgs struct {
	// Global Parameter type.
	Type pulumi.StringInput `pulumi:"type"`
	// Value of parameter.
	Value pulumi.Input `pulumi:"value"`
}

func (GlobalParameterSpecificationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterSpecificationResponse)(nil)).Elem()
}

func (i GlobalParameterSpecificationResponseArgs) ToGlobalParameterSpecificationResponseOutput() GlobalParameterSpecificationResponseOutput {
	return i.ToGlobalParameterSpecificationResponseOutputWithContext(context.Background())
}

func (i GlobalParameterSpecificationResponseArgs) ToGlobalParameterSpecificationResponseOutputWithContext(ctx context.Context) GlobalParameterSpecificationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterSpecificationResponseOutput)
}

// GlobalParameterSpecificationResponseMapInput is an input type that accepts GlobalParameterSpecificationResponseMap and GlobalParameterSpecificationResponseMapOutput values.
// You can construct a concrete instance of `GlobalParameterSpecificationResponseMapInput` via:
//
//          GlobalParameterSpecificationResponseMap{ "key": GlobalParameterSpecificationResponseArgs{...} }
type GlobalParameterSpecificationResponseMapInput interface {
	pulumi.Input

	ToGlobalParameterSpecificationResponseMapOutput() GlobalParameterSpecificationResponseMapOutput
	ToGlobalParameterSpecificationResponseMapOutputWithContext(context.Context) GlobalParameterSpecificationResponseMapOutput
}

type GlobalParameterSpecificationResponseMap map[string]GlobalParameterSpecificationResponseInput

func (GlobalParameterSpecificationResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GlobalParameterSpecificationResponse)(nil)).Elem()
}

func (i GlobalParameterSpecificationResponseMap) ToGlobalParameterSpecificationResponseMapOutput() GlobalParameterSpecificationResponseMapOutput {
	return i.ToGlobalParameterSpecificationResponseMapOutputWithContext(context.Background())
}

func (i GlobalParameterSpecificationResponseMap) ToGlobalParameterSpecificationResponseMapOutputWithContext(ctx context.Context) GlobalParameterSpecificationResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterSpecificationResponseMapOutput)
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationResponseOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterSpecificationResponse)(nil)).Elem()
}

func (o GlobalParameterSpecificationResponseOutput) ToGlobalParameterSpecificationResponseOutput() GlobalParameterSpecificationResponseOutput {
	return o
}

func (o GlobalParameterSpecificationResponseOutput) ToGlobalParameterSpecificationResponseOutputWithContext(ctx context.Context) GlobalParameterSpecificationResponseOutput {
	return o
}

// Global Parameter type.
func (o GlobalParameterSpecificationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalParameterSpecificationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Value of parameter.
func (o GlobalParameterSpecificationResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v GlobalParameterSpecificationResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type GlobalParameterSpecificationResponseMapOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GlobalParameterSpecificationResponse)(nil)).Elem()
}

func (o GlobalParameterSpecificationResponseMapOutput) ToGlobalParameterSpecificationResponseMapOutput() GlobalParameterSpecificationResponseMapOutput {
	return o
}

func (o GlobalParameterSpecificationResponseMapOutput) ToGlobalParameterSpecificationResponseMapOutputWithContext(ctx context.Context) GlobalParameterSpecificationResponseMapOutput {
	return o
}

func (o GlobalParameterSpecificationResponseMapOutput) MapIndex(k pulumi.StringInput) GlobalParameterSpecificationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GlobalParameterSpecificationResponse {
		return vs[0].(map[string]GlobalParameterSpecificationResponse)[vs[1].(string)]
	}).(GlobalParameterSpecificationResponseOutput)
}

// Google AdWords service linked service.
type GoogleAdWordsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType string `pulumi:"authenticationType"`
	// The Client customer ID of the AdWords account that you want to fetch report data for.
	ClientCustomerID interface{} `pulumi:"clientCustomerID"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The developer token associated with the manager account that you use to grant access to the AdWords API.
	DeveloperToken interface{} `pulumi:"developerToken"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
	Email interface{} `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
	KeyFilePath interface{} `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
}

// GoogleAdWordsLinkedServiceInput is an input type that accepts GoogleAdWordsLinkedServiceArgs and GoogleAdWordsLinkedServiceOutput values.
// You can construct a concrete instance of `GoogleAdWordsLinkedServiceInput` via:
//
//          GoogleAdWordsLinkedServiceArgs{...}
type GoogleAdWordsLinkedServiceInput interface {
	pulumi.Input

	ToGoogleAdWordsLinkedServiceOutput() GoogleAdWordsLinkedServiceOutput
	ToGoogleAdWordsLinkedServiceOutputWithContext(context.Context) GoogleAdWordsLinkedServiceOutput
}

// Google AdWords service linked service.
type GoogleAdWordsLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The Client customer ID of the AdWords account that you want to fetch report data for.
	ClientCustomerID pulumi.Input `pulumi:"clientCustomerID"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The developer token associated with the manager account that you use to grant access to the AdWords API.
	DeveloperToken pulumi.Input `pulumi:"developerToken"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
	Email pulumi.Input `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
	KeyFilePath pulumi.Input `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication.
	RefreshToken pulumi.Input `pulumi:"refreshToken"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
}

func (GoogleAdWordsLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAdWordsLinkedService)(nil)).Elem()
}

func (i GoogleAdWordsLinkedServiceArgs) ToGoogleAdWordsLinkedServiceOutput() GoogleAdWordsLinkedServiceOutput {
	return i.ToGoogleAdWordsLinkedServiceOutputWithContext(context.Background())
}

func (i GoogleAdWordsLinkedServiceArgs) ToGoogleAdWordsLinkedServiceOutputWithContext(ctx context.Context) GoogleAdWordsLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleAdWordsLinkedServiceOutput)
}

// Google AdWords service linked service.
type GoogleAdWordsLinkedServiceOutput struct{ *pulumi.OutputState }

func (GoogleAdWordsLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAdWordsLinkedService)(nil)).Elem()
}

func (o GoogleAdWordsLinkedServiceOutput) ToGoogleAdWordsLinkedServiceOutput() GoogleAdWordsLinkedServiceOutput {
	return o
}

func (o GoogleAdWordsLinkedServiceOutput) ToGoogleAdWordsLinkedServiceOutputWithContext(ctx context.Context) GoogleAdWordsLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o GoogleAdWordsLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
func (o GoogleAdWordsLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The Client customer ID of the AdWords account that you want to fetch report data for.
func (o GoogleAdWordsLinkedServiceOutput) ClientCustomerID() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.ClientCustomerID }).(pulumi.AnyOutput)
}

// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
func (o GoogleAdWordsLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret of the google application used to acquire the refresh token.
func (o GoogleAdWordsLinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o GoogleAdWordsLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o GoogleAdWordsLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The developer token associated with the manager account that you use to grant access to the AdWords API.
func (o GoogleAdWordsLinkedServiceOutput) DeveloperToken() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.DeveloperToken }).(pulumi.AnyOutput)
}

// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
func (o GoogleAdWordsLinkedServiceOutput) Email() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.Email }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o GoogleAdWordsLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
func (o GoogleAdWordsLinkedServiceOutput) KeyFilePath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.KeyFilePath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o GoogleAdWordsLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication.
func (o GoogleAdWordsLinkedServiceOutput) RefreshToken() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.RefreshToken }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o GoogleAdWordsLinkedServiceOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o GoogleAdWordsLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o GoogleAdWordsLinkedServiceOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// Google AdWords service linked service.
type GoogleAdWordsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType string `pulumi:"authenticationType"`
	// The Client customer ID of the AdWords account that you want to fetch report data for.
	ClientCustomerID interface{} `pulumi:"clientCustomerID"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The developer token associated with the manager account that you use to grant access to the AdWords API.
	DeveloperToken interface{} `pulumi:"developerToken"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
	Email interface{} `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
	KeyFilePath interface{} `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
}

// GoogleAdWordsLinkedServiceResponseInput is an input type that accepts GoogleAdWordsLinkedServiceResponseArgs and GoogleAdWordsLinkedServiceResponseOutput values.
// You can construct a concrete instance of `GoogleAdWordsLinkedServiceResponseInput` via:
//
//          GoogleAdWordsLinkedServiceResponseArgs{...}
type GoogleAdWordsLinkedServiceResponseInput interface {
	pulumi.Input

	ToGoogleAdWordsLinkedServiceResponseOutput() GoogleAdWordsLinkedServiceResponseOutput
	ToGoogleAdWordsLinkedServiceResponseOutputWithContext(context.Context) GoogleAdWordsLinkedServiceResponseOutput
}

// Google AdWords service linked service.
type GoogleAdWordsLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The Client customer ID of the AdWords account that you want to fetch report data for.
	ClientCustomerID pulumi.Input `pulumi:"clientCustomerID"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The developer token associated with the manager account that you use to grant access to the AdWords API.
	DeveloperToken pulumi.Input `pulumi:"developerToken"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
	Email pulumi.Input `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
	KeyFilePath pulumi.Input `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication.
	RefreshToken pulumi.Input `pulumi:"refreshToken"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
}

func (GoogleAdWordsLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAdWordsLinkedServiceResponse)(nil)).Elem()
}

func (i GoogleAdWordsLinkedServiceResponseArgs) ToGoogleAdWordsLinkedServiceResponseOutput() GoogleAdWordsLinkedServiceResponseOutput {
	return i.ToGoogleAdWordsLinkedServiceResponseOutputWithContext(context.Background())
}

func (i GoogleAdWordsLinkedServiceResponseArgs) ToGoogleAdWordsLinkedServiceResponseOutputWithContext(ctx context.Context) GoogleAdWordsLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleAdWordsLinkedServiceResponseOutput)
}

// Google AdWords service linked service.
type GoogleAdWordsLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (GoogleAdWordsLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAdWordsLinkedServiceResponse)(nil)).Elem()
}

func (o GoogleAdWordsLinkedServiceResponseOutput) ToGoogleAdWordsLinkedServiceResponseOutput() GoogleAdWordsLinkedServiceResponseOutput {
	return o
}

func (o GoogleAdWordsLinkedServiceResponseOutput) ToGoogleAdWordsLinkedServiceResponseOutputWithContext(ctx context.Context) GoogleAdWordsLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o GoogleAdWordsLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
func (o GoogleAdWordsLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The Client customer ID of the AdWords account that you want to fetch report data for.
func (o GoogleAdWordsLinkedServiceResponseOutput) ClientCustomerID() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.ClientCustomerID }).(pulumi.AnyOutput)
}

// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
func (o GoogleAdWordsLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret of the google application used to acquire the refresh token.
func (o GoogleAdWordsLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o GoogleAdWordsLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o GoogleAdWordsLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The developer token associated with the manager account that you use to grant access to the AdWords API.
func (o GoogleAdWordsLinkedServiceResponseOutput) DeveloperToken() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.DeveloperToken }).(pulumi.AnyOutput)
}

// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
func (o GoogleAdWordsLinkedServiceResponseOutput) Email() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.Email }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o GoogleAdWordsLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
func (o GoogleAdWordsLinkedServiceResponseOutput) KeyFilePath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.KeyFilePath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o GoogleAdWordsLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication.
func (o GoogleAdWordsLinkedServiceResponseOutput) RefreshToken() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.RefreshToken }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o GoogleAdWordsLinkedServiceResponseOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o GoogleAdWordsLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o GoogleAdWordsLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// Google AdWords service dataset.
type GoogleAdWordsObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// GoogleAdWordsObjectDatasetInput is an input type that accepts GoogleAdWordsObjectDatasetArgs and GoogleAdWordsObjectDatasetOutput values.
// You can construct a concrete instance of `GoogleAdWordsObjectDatasetInput` via:
//
//          GoogleAdWordsObjectDatasetArgs{...}
type GoogleAdWordsObjectDatasetInput interface {
	pulumi.Input

	ToGoogleAdWordsObjectDatasetOutput() GoogleAdWordsObjectDatasetOutput
	ToGoogleAdWordsObjectDatasetOutputWithContext(context.Context) GoogleAdWordsObjectDatasetOutput
}

// Google AdWords service dataset.
type GoogleAdWordsObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleAdWordsObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAdWordsObjectDataset)(nil)).Elem()
}

func (i GoogleAdWordsObjectDatasetArgs) ToGoogleAdWordsObjectDatasetOutput() GoogleAdWordsObjectDatasetOutput {
	return i.ToGoogleAdWordsObjectDatasetOutputWithContext(context.Background())
}

func (i GoogleAdWordsObjectDatasetArgs) ToGoogleAdWordsObjectDatasetOutputWithContext(ctx context.Context) GoogleAdWordsObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleAdWordsObjectDatasetOutput)
}

// Google AdWords service dataset.
type GoogleAdWordsObjectDatasetOutput struct{ *pulumi.OutputState }

func (GoogleAdWordsObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAdWordsObjectDataset)(nil)).Elem()
}

func (o GoogleAdWordsObjectDatasetOutput) ToGoogleAdWordsObjectDatasetOutput() GoogleAdWordsObjectDatasetOutput {
	return o
}

func (o GoogleAdWordsObjectDatasetOutput) ToGoogleAdWordsObjectDatasetOutputWithContext(ctx context.Context) GoogleAdWordsObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o GoogleAdWordsObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o GoogleAdWordsObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o GoogleAdWordsObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o GoogleAdWordsObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o GoogleAdWordsObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o GoogleAdWordsObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o GoogleAdWordsObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o GoogleAdWordsObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o GoogleAdWordsObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Google AdWords service dataset.
type GoogleAdWordsObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// GoogleAdWordsObjectDatasetResponseInput is an input type that accepts GoogleAdWordsObjectDatasetResponseArgs and GoogleAdWordsObjectDatasetResponseOutput values.
// You can construct a concrete instance of `GoogleAdWordsObjectDatasetResponseInput` via:
//
//          GoogleAdWordsObjectDatasetResponseArgs{...}
type GoogleAdWordsObjectDatasetResponseInput interface {
	pulumi.Input

	ToGoogleAdWordsObjectDatasetResponseOutput() GoogleAdWordsObjectDatasetResponseOutput
	ToGoogleAdWordsObjectDatasetResponseOutputWithContext(context.Context) GoogleAdWordsObjectDatasetResponseOutput
}

// Google AdWords service dataset.
type GoogleAdWordsObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleAdWordsObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAdWordsObjectDatasetResponse)(nil)).Elem()
}

func (i GoogleAdWordsObjectDatasetResponseArgs) ToGoogleAdWordsObjectDatasetResponseOutput() GoogleAdWordsObjectDatasetResponseOutput {
	return i.ToGoogleAdWordsObjectDatasetResponseOutputWithContext(context.Background())
}

func (i GoogleAdWordsObjectDatasetResponseArgs) ToGoogleAdWordsObjectDatasetResponseOutputWithContext(ctx context.Context) GoogleAdWordsObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleAdWordsObjectDatasetResponseOutput)
}

// Google AdWords service dataset.
type GoogleAdWordsObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (GoogleAdWordsObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAdWordsObjectDatasetResponse)(nil)).Elem()
}

func (o GoogleAdWordsObjectDatasetResponseOutput) ToGoogleAdWordsObjectDatasetResponseOutput() GoogleAdWordsObjectDatasetResponseOutput {
	return o
}

func (o GoogleAdWordsObjectDatasetResponseOutput) ToGoogleAdWordsObjectDatasetResponseOutputWithContext(ctx context.Context) GoogleAdWordsObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o GoogleAdWordsObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o GoogleAdWordsObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o GoogleAdWordsObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o GoogleAdWordsObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o GoogleAdWordsObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o GoogleAdWordsObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o GoogleAdWordsObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o GoogleAdWordsObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o GoogleAdWordsObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Google BigQuery service linked service.
type GoogleBigQueryLinkedService struct {
	// A comma-separated list of public BigQuery projects to access.
	AdditionalProjects interface{} `pulumi:"additionalProjects"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
	Email interface{} `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
	KeyFilePath interface{} `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The default BigQuery project to query against.
	Project interface{} `pulumi:"project"`
	// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false.
	RequestGoogleDriveScope interface{} `pulumi:"requestGoogleDriveScope"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
}

// GoogleBigQueryLinkedServiceInput is an input type that accepts GoogleBigQueryLinkedServiceArgs and GoogleBigQueryLinkedServiceOutput values.
// You can construct a concrete instance of `GoogleBigQueryLinkedServiceInput` via:
//
//          GoogleBigQueryLinkedServiceArgs{...}
type GoogleBigQueryLinkedServiceInput interface {
	pulumi.Input

	ToGoogleBigQueryLinkedServiceOutput() GoogleBigQueryLinkedServiceOutput
	ToGoogleBigQueryLinkedServiceOutputWithContext(context.Context) GoogleBigQueryLinkedServiceOutput
}

// Google BigQuery service linked service.
type GoogleBigQueryLinkedServiceArgs struct {
	// A comma-separated list of public BigQuery projects to access.
	AdditionalProjects pulumi.Input `pulumi:"additionalProjects"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
	Email pulumi.Input `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
	KeyFilePath pulumi.Input `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The default BigQuery project to query against.
	Project pulumi.Input `pulumi:"project"`
	// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
	RefreshToken pulumi.Input `pulumi:"refreshToken"`
	// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false.
	RequestGoogleDriveScope pulumi.Input `pulumi:"requestGoogleDriveScope"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
}

func (GoogleBigQueryLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryLinkedService)(nil)).Elem()
}

func (i GoogleBigQueryLinkedServiceArgs) ToGoogleBigQueryLinkedServiceOutput() GoogleBigQueryLinkedServiceOutput {
	return i.ToGoogleBigQueryLinkedServiceOutputWithContext(context.Background())
}

func (i GoogleBigQueryLinkedServiceArgs) ToGoogleBigQueryLinkedServiceOutputWithContext(ctx context.Context) GoogleBigQueryLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleBigQueryLinkedServiceOutput)
}

// Google BigQuery service linked service.
type GoogleBigQueryLinkedServiceOutput struct{ *pulumi.OutputState }

func (GoogleBigQueryLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryLinkedService)(nil)).Elem()
}

func (o GoogleBigQueryLinkedServiceOutput) ToGoogleBigQueryLinkedServiceOutput() GoogleBigQueryLinkedServiceOutput {
	return o
}

func (o GoogleBigQueryLinkedServiceOutput) ToGoogleBigQueryLinkedServiceOutputWithContext(ctx context.Context) GoogleBigQueryLinkedServiceOutput {
	return o
}

// A comma-separated list of public BigQuery projects to access.
func (o GoogleBigQueryLinkedServiceOutput) AdditionalProjects() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.AdditionalProjects }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o GoogleBigQueryLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
func (o GoogleBigQueryLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
func (o GoogleBigQueryLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret of the google application used to acquire the refresh token.
func (o GoogleBigQueryLinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o GoogleBigQueryLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o GoogleBigQueryLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
func (o GoogleBigQueryLinkedServiceOutput) Email() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.Email }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o GoogleBigQueryLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
func (o GoogleBigQueryLinkedServiceOutput) KeyFilePath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.KeyFilePath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o GoogleBigQueryLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The default BigQuery project to query against.
func (o GoogleBigQueryLinkedServiceOutput) Project() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.Project }).(pulumi.AnyOutput)
}

// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
func (o GoogleBigQueryLinkedServiceOutput) RefreshToken() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.RefreshToken }).(pulumi.AnyOutput)
}

// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false.
func (o GoogleBigQueryLinkedServiceOutput) RequestGoogleDriveScope() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.RequestGoogleDriveScope }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o GoogleBigQueryLinkedServiceOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o GoogleBigQueryLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o GoogleBigQueryLinkedServiceOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// Google BigQuery service linked service.
type GoogleBigQueryLinkedServiceResponse struct {
	// A comma-separated list of public BigQuery projects to access.
	AdditionalProjects interface{} `pulumi:"additionalProjects"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
	Email interface{} `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
	KeyFilePath interface{} `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The default BigQuery project to query against.
	Project interface{} `pulumi:"project"`
	// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false.
	RequestGoogleDriveScope interface{} `pulumi:"requestGoogleDriveScope"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
}

// GoogleBigQueryLinkedServiceResponseInput is an input type that accepts GoogleBigQueryLinkedServiceResponseArgs and GoogleBigQueryLinkedServiceResponseOutput values.
// You can construct a concrete instance of `GoogleBigQueryLinkedServiceResponseInput` via:
//
//          GoogleBigQueryLinkedServiceResponseArgs{...}
type GoogleBigQueryLinkedServiceResponseInput interface {
	pulumi.Input

	ToGoogleBigQueryLinkedServiceResponseOutput() GoogleBigQueryLinkedServiceResponseOutput
	ToGoogleBigQueryLinkedServiceResponseOutputWithContext(context.Context) GoogleBigQueryLinkedServiceResponseOutput
}

// Google BigQuery service linked service.
type GoogleBigQueryLinkedServiceResponseArgs struct {
	// A comma-separated list of public BigQuery projects to access.
	AdditionalProjects pulumi.Input `pulumi:"additionalProjects"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
	Email pulumi.Input `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
	KeyFilePath pulumi.Input `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The default BigQuery project to query against.
	Project pulumi.Input `pulumi:"project"`
	// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
	RefreshToken pulumi.Input `pulumi:"refreshToken"`
	// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false.
	RequestGoogleDriveScope pulumi.Input `pulumi:"requestGoogleDriveScope"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
}

func (GoogleBigQueryLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryLinkedServiceResponse)(nil)).Elem()
}

func (i GoogleBigQueryLinkedServiceResponseArgs) ToGoogleBigQueryLinkedServiceResponseOutput() GoogleBigQueryLinkedServiceResponseOutput {
	return i.ToGoogleBigQueryLinkedServiceResponseOutputWithContext(context.Background())
}

func (i GoogleBigQueryLinkedServiceResponseArgs) ToGoogleBigQueryLinkedServiceResponseOutputWithContext(ctx context.Context) GoogleBigQueryLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleBigQueryLinkedServiceResponseOutput)
}

// Google BigQuery service linked service.
type GoogleBigQueryLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (GoogleBigQueryLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryLinkedServiceResponse)(nil)).Elem()
}

func (o GoogleBigQueryLinkedServiceResponseOutput) ToGoogleBigQueryLinkedServiceResponseOutput() GoogleBigQueryLinkedServiceResponseOutput {
	return o
}

func (o GoogleBigQueryLinkedServiceResponseOutput) ToGoogleBigQueryLinkedServiceResponseOutputWithContext(ctx context.Context) GoogleBigQueryLinkedServiceResponseOutput {
	return o
}

// A comma-separated list of public BigQuery projects to access.
func (o GoogleBigQueryLinkedServiceResponseOutput) AdditionalProjects() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.AdditionalProjects }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o GoogleBigQueryLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
func (o GoogleBigQueryLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
func (o GoogleBigQueryLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret of the google application used to acquire the refresh token.
func (o GoogleBigQueryLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o GoogleBigQueryLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o GoogleBigQueryLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
func (o GoogleBigQueryLinkedServiceResponseOutput) Email() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.Email }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o GoogleBigQueryLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
func (o GoogleBigQueryLinkedServiceResponseOutput) KeyFilePath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.KeyFilePath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o GoogleBigQueryLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The default BigQuery project to query against.
func (o GoogleBigQueryLinkedServiceResponseOutput) Project() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.Project }).(pulumi.AnyOutput)
}

// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
func (o GoogleBigQueryLinkedServiceResponseOutput) RefreshToken() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.RefreshToken }).(pulumi.AnyOutput)
}

// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false.
func (o GoogleBigQueryLinkedServiceResponseOutput) RequestGoogleDriveScope() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.RequestGoogleDriveScope }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o GoogleBigQueryLinkedServiceResponseOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o GoogleBigQueryLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o GoogleBigQueryLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// Google BigQuery service dataset.
type GoogleBigQueryObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
	Dataset interface{} `pulumi:"dataset"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using database + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// GoogleBigQueryObjectDatasetInput is an input type that accepts GoogleBigQueryObjectDatasetArgs and GoogleBigQueryObjectDatasetOutput values.
// You can construct a concrete instance of `GoogleBigQueryObjectDatasetInput` via:
//
//          GoogleBigQueryObjectDatasetArgs{...}
type GoogleBigQueryObjectDatasetInput interface {
	pulumi.Input

	ToGoogleBigQueryObjectDatasetOutput() GoogleBigQueryObjectDatasetOutput
	ToGoogleBigQueryObjectDatasetOutputWithContext(context.Context) GoogleBigQueryObjectDatasetOutput
}

// Google BigQuery service dataset.
type GoogleBigQueryObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
	Dataset pulumi.Input `pulumi:"dataset"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using database + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleBigQueryObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryObjectDataset)(nil)).Elem()
}

func (i GoogleBigQueryObjectDatasetArgs) ToGoogleBigQueryObjectDatasetOutput() GoogleBigQueryObjectDatasetOutput {
	return i.ToGoogleBigQueryObjectDatasetOutputWithContext(context.Background())
}

func (i GoogleBigQueryObjectDatasetArgs) ToGoogleBigQueryObjectDatasetOutputWithContext(ctx context.Context) GoogleBigQueryObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleBigQueryObjectDatasetOutput)
}

// Google BigQuery service dataset.
type GoogleBigQueryObjectDatasetOutput struct{ *pulumi.OutputState }

func (GoogleBigQueryObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryObjectDataset)(nil)).Elem()
}

func (o GoogleBigQueryObjectDatasetOutput) ToGoogleBigQueryObjectDatasetOutput() GoogleBigQueryObjectDatasetOutput {
	return o
}

func (o GoogleBigQueryObjectDatasetOutput) ToGoogleBigQueryObjectDatasetOutputWithContext(ctx context.Context) GoogleBigQueryObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o GoogleBigQueryObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
func (o GoogleBigQueryObjectDatasetOutput) Dataset() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) interface{} { return v.Dataset }).(pulumi.AnyOutput)
}

// Dataset description.
func (o GoogleBigQueryObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o GoogleBigQueryObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o GoogleBigQueryObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o GoogleBigQueryObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o GoogleBigQueryObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o GoogleBigQueryObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
func (o GoogleBigQueryObjectDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using database + table properties instead.
func (o GoogleBigQueryObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o GoogleBigQueryObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Google BigQuery service dataset.
type GoogleBigQueryObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
	Dataset interface{} `pulumi:"dataset"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using database + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// GoogleBigQueryObjectDatasetResponseInput is an input type that accepts GoogleBigQueryObjectDatasetResponseArgs and GoogleBigQueryObjectDatasetResponseOutput values.
// You can construct a concrete instance of `GoogleBigQueryObjectDatasetResponseInput` via:
//
//          GoogleBigQueryObjectDatasetResponseArgs{...}
type GoogleBigQueryObjectDatasetResponseInput interface {
	pulumi.Input

	ToGoogleBigQueryObjectDatasetResponseOutput() GoogleBigQueryObjectDatasetResponseOutput
	ToGoogleBigQueryObjectDatasetResponseOutputWithContext(context.Context) GoogleBigQueryObjectDatasetResponseOutput
}

// Google BigQuery service dataset.
type GoogleBigQueryObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
	Dataset pulumi.Input `pulumi:"dataset"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using database + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleBigQueryObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryObjectDatasetResponse)(nil)).Elem()
}

func (i GoogleBigQueryObjectDatasetResponseArgs) ToGoogleBigQueryObjectDatasetResponseOutput() GoogleBigQueryObjectDatasetResponseOutput {
	return i.ToGoogleBigQueryObjectDatasetResponseOutputWithContext(context.Background())
}

func (i GoogleBigQueryObjectDatasetResponseArgs) ToGoogleBigQueryObjectDatasetResponseOutputWithContext(ctx context.Context) GoogleBigQueryObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleBigQueryObjectDatasetResponseOutput)
}

// Google BigQuery service dataset.
type GoogleBigQueryObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (GoogleBigQueryObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryObjectDatasetResponse)(nil)).Elem()
}

func (o GoogleBigQueryObjectDatasetResponseOutput) ToGoogleBigQueryObjectDatasetResponseOutput() GoogleBigQueryObjectDatasetResponseOutput {
	return o
}

func (o GoogleBigQueryObjectDatasetResponseOutput) ToGoogleBigQueryObjectDatasetResponseOutputWithContext(ctx context.Context) GoogleBigQueryObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o GoogleBigQueryObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
func (o GoogleBigQueryObjectDatasetResponseOutput) Dataset() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) interface{} { return v.Dataset }).(pulumi.AnyOutput)
}

// Dataset description.
func (o GoogleBigQueryObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o GoogleBigQueryObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o GoogleBigQueryObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o GoogleBigQueryObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o GoogleBigQueryObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o GoogleBigQueryObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
func (o GoogleBigQueryObjectDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using database + table properties instead.
func (o GoogleBigQueryObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o GoogleBigQueryObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Google Cloud Storage.
type GoogleCloudStorageLinkedService struct {
	// The access key identifier of the Google Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret access key of the Google Cloud Storage Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Google Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// GoogleCloudStorageLinkedServiceInput is an input type that accepts GoogleCloudStorageLinkedServiceArgs and GoogleCloudStorageLinkedServiceOutput values.
// You can construct a concrete instance of `GoogleCloudStorageLinkedServiceInput` via:
//
//          GoogleCloudStorageLinkedServiceArgs{...}
type GoogleCloudStorageLinkedServiceInput interface {
	pulumi.Input

	ToGoogleCloudStorageLinkedServiceOutput() GoogleCloudStorageLinkedServiceOutput
	ToGoogleCloudStorageLinkedServiceOutputWithContext(context.Context) GoogleCloudStorageLinkedServiceOutput
}

// Linked service for Google Cloud Storage.
type GoogleCloudStorageLinkedServiceArgs struct {
	// The access key identifier of the Google Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId pulumi.Input `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The secret access key of the Google Cloud Storage Identity and Access Management (IAM) user.
	SecretAccessKey pulumi.Input `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Google Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl pulumi.Input `pulumi:"serviceUrl"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleCloudStorageLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudStorageLinkedService)(nil)).Elem()
}

func (i GoogleCloudStorageLinkedServiceArgs) ToGoogleCloudStorageLinkedServiceOutput() GoogleCloudStorageLinkedServiceOutput {
	return i.ToGoogleCloudStorageLinkedServiceOutputWithContext(context.Background())
}

func (i GoogleCloudStorageLinkedServiceArgs) ToGoogleCloudStorageLinkedServiceOutputWithContext(ctx context.Context) GoogleCloudStorageLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudStorageLinkedServiceOutput)
}

// Linked service for Google Cloud Storage.
type GoogleCloudStorageLinkedServiceOutput struct{ *pulumi.OutputState }

func (GoogleCloudStorageLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudStorageLinkedService)(nil)).Elem()
}

func (o GoogleCloudStorageLinkedServiceOutput) ToGoogleCloudStorageLinkedServiceOutput() GoogleCloudStorageLinkedServiceOutput {
	return o
}

func (o GoogleCloudStorageLinkedServiceOutput) ToGoogleCloudStorageLinkedServiceOutputWithContext(ctx context.Context) GoogleCloudStorageLinkedServiceOutput {
	return o
}

// The access key identifier of the Google Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageLinkedServiceOutput) AccessKeyId() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedService) interface{} { return v.AccessKeyId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o GoogleCloudStorageLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o GoogleCloudStorageLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o GoogleCloudStorageLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o GoogleCloudStorageLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The secret access key of the Google Cloud Storage Identity and Access Management (IAM) user.
func (o GoogleCloudStorageLinkedServiceOutput) SecretAccessKey() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedService) interface{} { return v.SecretAccessKey }).(pulumi.AnyOutput)
}

// This value specifies the endpoint to access with the Google Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageLinkedServiceOutput) ServiceUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedService) interface{} { return v.ServiceUrl }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o GoogleCloudStorageLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Google Cloud Storage.
type GoogleCloudStorageLinkedServiceResponse struct {
	// The access key identifier of the Google Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret access key of the Google Cloud Storage Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Google Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// GoogleCloudStorageLinkedServiceResponseInput is an input type that accepts GoogleCloudStorageLinkedServiceResponseArgs and GoogleCloudStorageLinkedServiceResponseOutput values.
// You can construct a concrete instance of `GoogleCloudStorageLinkedServiceResponseInput` via:
//
//          GoogleCloudStorageLinkedServiceResponseArgs{...}
type GoogleCloudStorageLinkedServiceResponseInput interface {
	pulumi.Input

	ToGoogleCloudStorageLinkedServiceResponseOutput() GoogleCloudStorageLinkedServiceResponseOutput
	ToGoogleCloudStorageLinkedServiceResponseOutputWithContext(context.Context) GoogleCloudStorageLinkedServiceResponseOutput
}

// Linked service for Google Cloud Storage.
type GoogleCloudStorageLinkedServiceResponseArgs struct {
	// The access key identifier of the Google Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId pulumi.Input `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The secret access key of the Google Cloud Storage Identity and Access Management (IAM) user.
	SecretAccessKey pulumi.Input `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Google Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl pulumi.Input `pulumi:"serviceUrl"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleCloudStorageLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudStorageLinkedServiceResponse)(nil)).Elem()
}

func (i GoogleCloudStorageLinkedServiceResponseArgs) ToGoogleCloudStorageLinkedServiceResponseOutput() GoogleCloudStorageLinkedServiceResponseOutput {
	return i.ToGoogleCloudStorageLinkedServiceResponseOutputWithContext(context.Background())
}

func (i GoogleCloudStorageLinkedServiceResponseArgs) ToGoogleCloudStorageLinkedServiceResponseOutputWithContext(ctx context.Context) GoogleCloudStorageLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudStorageLinkedServiceResponseOutput)
}

// Linked service for Google Cloud Storage.
type GoogleCloudStorageLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudStorageLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudStorageLinkedServiceResponse)(nil)).Elem()
}

func (o GoogleCloudStorageLinkedServiceResponseOutput) ToGoogleCloudStorageLinkedServiceResponseOutput() GoogleCloudStorageLinkedServiceResponseOutput {
	return o
}

func (o GoogleCloudStorageLinkedServiceResponseOutput) ToGoogleCloudStorageLinkedServiceResponseOutputWithContext(ctx context.Context) GoogleCloudStorageLinkedServiceResponseOutput {
	return o
}

// The access key identifier of the Google Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageLinkedServiceResponseOutput) AccessKeyId() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedServiceResponse) interface{} { return v.AccessKeyId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o GoogleCloudStorageLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o GoogleCloudStorageLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o GoogleCloudStorageLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o GoogleCloudStorageLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The secret access key of the Google Cloud Storage Identity and Access Management (IAM) user.
func (o GoogleCloudStorageLinkedServiceResponseOutput) SecretAccessKey() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedServiceResponse) interface{} { return v.SecretAccessKey }).(pulumi.AnyOutput)
}

// This value specifies the endpoint to access with the Google Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageLinkedServiceResponseOutput) ServiceUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedServiceResponse) interface{} { return v.ServiceUrl }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o GoogleCloudStorageLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The location of Google Cloud Storage dataset.
type GoogleCloudStorageLocation struct {
	// Specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
	// Specify the version of Google Cloud Storage. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// GoogleCloudStorageLocationInput is an input type that accepts GoogleCloudStorageLocationArgs and GoogleCloudStorageLocationOutput values.
// You can construct a concrete instance of `GoogleCloudStorageLocationInput` via:
//
//          GoogleCloudStorageLocationArgs{...}
type GoogleCloudStorageLocationInput interface {
	pulumi.Input

	ToGoogleCloudStorageLocationOutput() GoogleCloudStorageLocationOutput
	ToGoogleCloudStorageLocationOutputWithContext(context.Context) GoogleCloudStorageLocationOutput
}

// The location of Google Cloud Storage dataset.
type GoogleCloudStorageLocationArgs struct {
	// Specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string)
	BucketName pulumi.Input `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
	// Specify the version of Google Cloud Storage. Type: string (or Expression with resultType string).
	Version pulumi.Input `pulumi:"version"`
}

func (GoogleCloudStorageLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudStorageLocation)(nil)).Elem()
}

func (i GoogleCloudStorageLocationArgs) ToGoogleCloudStorageLocationOutput() GoogleCloudStorageLocationOutput {
	return i.ToGoogleCloudStorageLocationOutputWithContext(context.Background())
}

func (i GoogleCloudStorageLocationArgs) ToGoogleCloudStorageLocationOutputWithContext(ctx context.Context) GoogleCloudStorageLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudStorageLocationOutput)
}

// The location of Google Cloud Storage dataset.
type GoogleCloudStorageLocationOutput struct{ *pulumi.OutputState }

func (GoogleCloudStorageLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudStorageLocation)(nil)).Elem()
}

func (o GoogleCloudStorageLocationOutput) ToGoogleCloudStorageLocationOutput() GoogleCloudStorageLocationOutput {
	return o
}

func (o GoogleCloudStorageLocationOutput) ToGoogleCloudStorageLocationOutputWithContext(ctx context.Context) GoogleCloudStorageLocationOutput {
	return o
}

// Specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string)
func (o GoogleCloudStorageLocationOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocation) interface{} { return v.BucketName }).(pulumi.AnyOutput)
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o GoogleCloudStorageLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o GoogleCloudStorageLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocation) string { return v.Type }).(pulumi.StringOutput)
}

// Specify the version of Google Cloud Storage. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageLocationOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocation) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// The location of Google Cloud Storage dataset.
type GoogleCloudStorageLocationResponse struct {
	// Specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
	// Specify the version of Google Cloud Storage. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// GoogleCloudStorageLocationResponseInput is an input type that accepts GoogleCloudStorageLocationResponseArgs and GoogleCloudStorageLocationResponseOutput values.
// You can construct a concrete instance of `GoogleCloudStorageLocationResponseInput` via:
//
//          GoogleCloudStorageLocationResponseArgs{...}
type GoogleCloudStorageLocationResponseInput interface {
	pulumi.Input

	ToGoogleCloudStorageLocationResponseOutput() GoogleCloudStorageLocationResponseOutput
	ToGoogleCloudStorageLocationResponseOutputWithContext(context.Context) GoogleCloudStorageLocationResponseOutput
}

// The location of Google Cloud Storage dataset.
type GoogleCloudStorageLocationResponseArgs struct {
	// Specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string)
	BucketName pulumi.Input `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
	// Specify the version of Google Cloud Storage. Type: string (or Expression with resultType string).
	Version pulumi.Input `pulumi:"version"`
}

func (GoogleCloudStorageLocationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudStorageLocationResponse)(nil)).Elem()
}

func (i GoogleCloudStorageLocationResponseArgs) ToGoogleCloudStorageLocationResponseOutput() GoogleCloudStorageLocationResponseOutput {
	return i.ToGoogleCloudStorageLocationResponseOutputWithContext(context.Background())
}

func (i GoogleCloudStorageLocationResponseArgs) ToGoogleCloudStorageLocationResponseOutputWithContext(ctx context.Context) GoogleCloudStorageLocationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudStorageLocationResponseOutput)
}

// The location of Google Cloud Storage dataset.
type GoogleCloudStorageLocationResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudStorageLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudStorageLocationResponse)(nil)).Elem()
}

func (o GoogleCloudStorageLocationResponseOutput) ToGoogleCloudStorageLocationResponseOutput() GoogleCloudStorageLocationResponseOutput {
	return o
}

func (o GoogleCloudStorageLocationResponseOutput) ToGoogleCloudStorageLocationResponseOutputWithContext(ctx context.Context) GoogleCloudStorageLocationResponseOutput {
	return o
}

// Specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string)
func (o GoogleCloudStorageLocationResponseOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocationResponse) interface{} { return v.BucketName }).(pulumi.AnyOutput)
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o GoogleCloudStorageLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o GoogleCloudStorageLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specify the version of Google Cloud Storage. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageLocationResponseOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocationResponse) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// Greenplum Database linked service.
type GreenplumLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// GreenplumLinkedServiceInput is an input type that accepts GreenplumLinkedServiceArgs and GreenplumLinkedServiceOutput values.
// You can construct a concrete instance of `GreenplumLinkedServiceInput` via:
//
//          GreenplumLinkedServiceArgs{...}
type GreenplumLinkedServiceInput interface {
	pulumi.Input

	ToGreenplumLinkedServiceOutput() GreenplumLinkedServiceOutput
	ToGreenplumLinkedServiceOutputWithContext(context.Context) GreenplumLinkedServiceOutput
}

// Greenplum Database linked service.
type GreenplumLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd AzureKeyVaultSecretReferencePtrInput `pulumi:"pwd"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GreenplumLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumLinkedService)(nil)).Elem()
}

func (i GreenplumLinkedServiceArgs) ToGreenplumLinkedServiceOutput() GreenplumLinkedServiceOutput {
	return i.ToGreenplumLinkedServiceOutputWithContext(context.Background())
}

func (i GreenplumLinkedServiceArgs) ToGreenplumLinkedServiceOutputWithContext(ctx context.Context) GreenplumLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreenplumLinkedServiceOutput)
}

// Greenplum Database linked service.
type GreenplumLinkedServiceOutput struct{ *pulumi.OutputState }

func (GreenplumLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumLinkedService)(nil)).Elem()
}

func (o GreenplumLinkedServiceOutput) ToGreenplumLinkedServiceOutput() GreenplumLinkedServiceOutput {
	return o
}

func (o GreenplumLinkedServiceOutput) ToGreenplumLinkedServiceOutputWithContext(ctx context.Context) GreenplumLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o GreenplumLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GreenplumLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o GreenplumLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v GreenplumLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o GreenplumLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o GreenplumLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreenplumLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o GreenplumLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o GreenplumLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v GreenplumLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o GreenplumLinkedServiceOutput) Pwd() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v GreenplumLinkedService) *AzureKeyVaultSecretReference { return v.Pwd }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
func (o GreenplumLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GreenplumLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Greenplum Database linked service.
type GreenplumLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// GreenplumLinkedServiceResponseInput is an input type that accepts GreenplumLinkedServiceResponseArgs and GreenplumLinkedServiceResponseOutput values.
// You can construct a concrete instance of `GreenplumLinkedServiceResponseInput` via:
//
//          GreenplumLinkedServiceResponseArgs{...}
type GreenplumLinkedServiceResponseInput interface {
	pulumi.Input

	ToGreenplumLinkedServiceResponseOutput() GreenplumLinkedServiceResponseOutput
	ToGreenplumLinkedServiceResponseOutputWithContext(context.Context) GreenplumLinkedServiceResponseOutput
}

// Greenplum Database linked service.
type GreenplumLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"pwd"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GreenplumLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumLinkedServiceResponse)(nil)).Elem()
}

func (i GreenplumLinkedServiceResponseArgs) ToGreenplumLinkedServiceResponseOutput() GreenplumLinkedServiceResponseOutput {
	return i.ToGreenplumLinkedServiceResponseOutputWithContext(context.Background())
}

func (i GreenplumLinkedServiceResponseArgs) ToGreenplumLinkedServiceResponseOutputWithContext(ctx context.Context) GreenplumLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreenplumLinkedServiceResponseOutput)
}

// Greenplum Database linked service.
type GreenplumLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (GreenplumLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumLinkedServiceResponse)(nil)).Elem()
}

func (o GreenplumLinkedServiceResponseOutput) ToGreenplumLinkedServiceResponseOutput() GreenplumLinkedServiceResponseOutput {
	return o
}

func (o GreenplumLinkedServiceResponseOutput) ToGreenplumLinkedServiceResponseOutputWithContext(ctx context.Context) GreenplumLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o GreenplumLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o GreenplumLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o GreenplumLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o GreenplumLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o GreenplumLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o GreenplumLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o GreenplumLinkedServiceResponseOutput) Pwd() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Pwd }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
func (o GreenplumLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Greenplum Database dataset.
type GreenplumTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of Greenplum. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// GreenplumTableDatasetInput is an input type that accepts GreenplumTableDatasetArgs and GreenplumTableDatasetOutput values.
// You can construct a concrete instance of `GreenplumTableDatasetInput` via:
//
//          GreenplumTableDatasetArgs{...}
type GreenplumTableDatasetInput interface {
	pulumi.Input

	ToGreenplumTableDatasetOutput() GreenplumTableDatasetOutput
	ToGreenplumTableDatasetOutputWithContext(context.Context) GreenplumTableDatasetOutput
}

// Greenplum Database dataset.
type GreenplumTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of Greenplum. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GreenplumTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumTableDataset)(nil)).Elem()
}

func (i GreenplumTableDatasetArgs) ToGreenplumTableDatasetOutput() GreenplumTableDatasetOutput {
	return i.ToGreenplumTableDatasetOutputWithContext(context.Background())
}

func (i GreenplumTableDatasetArgs) ToGreenplumTableDatasetOutputWithContext(ctx context.Context) GreenplumTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreenplumTableDatasetOutput)
}

// Greenplum Database dataset.
type GreenplumTableDatasetOutput struct{ *pulumi.OutputState }

func (GreenplumTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumTableDataset)(nil)).Elem()
}

func (o GreenplumTableDatasetOutput) ToGreenplumTableDatasetOutput() GreenplumTableDatasetOutput {
	return o
}

func (o GreenplumTableDatasetOutput) ToGreenplumTableDatasetOutputWithContext(ctx context.Context) GreenplumTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o GreenplumTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GreenplumTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o GreenplumTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreenplumTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o GreenplumTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v GreenplumTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o GreenplumTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v GreenplumTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o GreenplumTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v GreenplumTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o GreenplumTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o GreenplumTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of Greenplum. Type: string (or Expression with resultType string).
func (o GreenplumTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o GreenplumTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o GreenplumTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GreenplumTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Greenplum Database dataset.
type GreenplumTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of Greenplum. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// GreenplumTableDatasetResponseInput is an input type that accepts GreenplumTableDatasetResponseArgs and GreenplumTableDatasetResponseOutput values.
// You can construct a concrete instance of `GreenplumTableDatasetResponseInput` via:
//
//          GreenplumTableDatasetResponseArgs{...}
type GreenplumTableDatasetResponseInput interface {
	pulumi.Input

	ToGreenplumTableDatasetResponseOutput() GreenplumTableDatasetResponseOutput
	ToGreenplumTableDatasetResponseOutputWithContext(context.Context) GreenplumTableDatasetResponseOutput
}

// Greenplum Database dataset.
type GreenplumTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of Greenplum. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GreenplumTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumTableDatasetResponse)(nil)).Elem()
}

func (i GreenplumTableDatasetResponseArgs) ToGreenplumTableDatasetResponseOutput() GreenplumTableDatasetResponseOutput {
	return i.ToGreenplumTableDatasetResponseOutputWithContext(context.Background())
}

func (i GreenplumTableDatasetResponseArgs) ToGreenplumTableDatasetResponseOutputWithContext(ctx context.Context) GreenplumTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreenplumTableDatasetResponseOutput)
}

// Greenplum Database dataset.
type GreenplumTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (GreenplumTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumTableDatasetResponse)(nil)).Elem()
}

func (o GreenplumTableDatasetResponseOutput) ToGreenplumTableDatasetResponseOutput() GreenplumTableDatasetResponseOutput {
	return o
}

func (o GreenplumTableDatasetResponseOutput) ToGreenplumTableDatasetResponseOutputWithContext(ctx context.Context) GreenplumTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o GreenplumTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o GreenplumTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o GreenplumTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o GreenplumTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o GreenplumTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o GreenplumTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o GreenplumTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of Greenplum. Type: string (or Expression with resultType string).
func (o GreenplumTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o GreenplumTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o GreenplumTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// HBase server linked service.
type HBaseLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism to use to connect to the HBase server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the HBase server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The user name used to connect to the HBase instance.
	Username interface{} `pulumi:"username"`
}

// HBaseLinkedServiceInput is an input type that accepts HBaseLinkedServiceArgs and HBaseLinkedServiceOutput values.
// You can construct a concrete instance of `HBaseLinkedServiceInput` via:
//
//          HBaseLinkedServiceArgs{...}
type HBaseLinkedServiceInput interface {
	pulumi.Input

	ToHBaseLinkedServiceOutput() HBaseLinkedServiceOutput
	ToHBaseLinkedServiceOutputWithContext(context.Context) HBaseLinkedServiceOutput
}

// HBase server linked service.
type HBaseLinkedServiceArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.Input `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication mechanism to use to connect to the HBase server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The IP address or host name of the HBase server. (i.e. 192.168.222.160)
	Host pulumi.Input `pulumi:"host"`
	// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
	HttpPath pulumi.Input `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
	Port pulumi.Input `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The user name used to connect to the HBase instance.
	Username pulumi.Input `pulumi:"username"`
}

func (HBaseLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseLinkedService)(nil)).Elem()
}

func (i HBaseLinkedServiceArgs) ToHBaseLinkedServiceOutput() HBaseLinkedServiceOutput {
	return i.ToHBaseLinkedServiceOutputWithContext(context.Background())
}

func (i HBaseLinkedServiceArgs) ToHBaseLinkedServiceOutputWithContext(ctx context.Context) HBaseLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseLinkedServiceOutput)
}

// HBase server linked service.
type HBaseLinkedServiceOutput struct{ *pulumi.OutputState }

func (HBaseLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseLinkedService)(nil)).Elem()
}

func (o HBaseLinkedServiceOutput) ToHBaseLinkedServiceOutput() HBaseLinkedServiceOutput {
	return o
}

func (o HBaseLinkedServiceOutput) ToHBaseLinkedServiceOutputWithContext(ctx context.Context) HBaseLinkedServiceOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o HBaseLinkedServiceOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedService) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o HBaseLinkedServiceOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedService) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o HBaseLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HBaseLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication mechanism to use to connect to the HBase server.
func (o HBaseLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o HBaseLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v HBaseLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o HBaseLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o HBaseLinkedServiceOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedService) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HBaseLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The IP address or host name of the HBase server. (i.e. 192.168.222.160)
func (o HBaseLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
func (o HBaseLinkedServiceOutput) HttpPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedService) interface{} { return v.HttpPath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o HBaseLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HBaseLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name.
func (o HBaseLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
func (o HBaseLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o HBaseLinkedServiceOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedService) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o HBaseLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The user name used to connect to the HBase instance.
func (o HBaseLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// HBase server linked service.
type HBaseLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism to use to connect to the HBase server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the HBase server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The user name used to connect to the HBase instance.
	Username interface{} `pulumi:"username"`
}

// HBaseLinkedServiceResponseInput is an input type that accepts HBaseLinkedServiceResponseArgs and HBaseLinkedServiceResponseOutput values.
// You can construct a concrete instance of `HBaseLinkedServiceResponseInput` via:
//
//          HBaseLinkedServiceResponseArgs{...}
type HBaseLinkedServiceResponseInput interface {
	pulumi.Input

	ToHBaseLinkedServiceResponseOutput() HBaseLinkedServiceResponseOutput
	ToHBaseLinkedServiceResponseOutputWithContext(context.Context) HBaseLinkedServiceResponseOutput
}

// HBase server linked service.
type HBaseLinkedServiceResponseArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.Input `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication mechanism to use to connect to the HBase server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The IP address or host name of the HBase server. (i.e. 192.168.222.160)
	Host pulumi.Input `pulumi:"host"`
	// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
	HttpPath pulumi.Input `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
	Port pulumi.Input `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The user name used to connect to the HBase instance.
	Username pulumi.Input `pulumi:"username"`
}

func (HBaseLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseLinkedServiceResponse)(nil)).Elem()
}

func (i HBaseLinkedServiceResponseArgs) ToHBaseLinkedServiceResponseOutput() HBaseLinkedServiceResponseOutput {
	return i.ToHBaseLinkedServiceResponseOutputWithContext(context.Background())
}

func (i HBaseLinkedServiceResponseArgs) ToHBaseLinkedServiceResponseOutputWithContext(ctx context.Context) HBaseLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseLinkedServiceResponseOutput)
}

// HBase server linked service.
type HBaseLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HBaseLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseLinkedServiceResponse)(nil)).Elem()
}

func (o HBaseLinkedServiceResponseOutput) ToHBaseLinkedServiceResponseOutput() HBaseLinkedServiceResponseOutput {
	return o
}

func (o HBaseLinkedServiceResponseOutput) ToHBaseLinkedServiceResponseOutputWithContext(ctx context.Context) HBaseLinkedServiceResponseOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o HBaseLinkedServiceResponseOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o HBaseLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o HBaseLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication mechanism to use to connect to the HBase server.
func (o HBaseLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o HBaseLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o HBaseLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o HBaseLinkedServiceResponseOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HBaseLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The IP address or host name of the HBase server. (i.e. 192.168.222.160)
func (o HBaseLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
func (o HBaseLinkedServiceResponseOutput) HttpPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.HttpPath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o HBaseLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name.
func (o HBaseLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
func (o HBaseLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o HBaseLinkedServiceResponseOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o HBaseLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The user name used to connect to the HBase instance.
func (o HBaseLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// HBase server dataset.
type HBaseObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// HBaseObjectDatasetInput is an input type that accepts HBaseObjectDatasetArgs and HBaseObjectDatasetOutput values.
// You can construct a concrete instance of `HBaseObjectDatasetInput` via:
//
//          HBaseObjectDatasetArgs{...}
type HBaseObjectDatasetInput interface {
	pulumi.Input

	ToHBaseObjectDatasetOutput() HBaseObjectDatasetOutput
	ToHBaseObjectDatasetOutputWithContext(context.Context) HBaseObjectDatasetOutput
}

// HBase server dataset.
type HBaseObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HBaseObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseObjectDataset)(nil)).Elem()
}

func (i HBaseObjectDatasetArgs) ToHBaseObjectDatasetOutput() HBaseObjectDatasetOutput {
	return i.ToHBaseObjectDatasetOutputWithContext(context.Background())
}

func (i HBaseObjectDatasetArgs) ToHBaseObjectDatasetOutputWithContext(ctx context.Context) HBaseObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseObjectDatasetOutput)
}

// HBase server dataset.
type HBaseObjectDatasetOutput struct{ *pulumi.OutputState }

func (HBaseObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseObjectDataset)(nil)).Elem()
}

func (o HBaseObjectDatasetOutput) ToHBaseObjectDatasetOutput() HBaseObjectDatasetOutput {
	return o
}

func (o HBaseObjectDatasetOutput) ToHBaseObjectDatasetOutputWithContext(ctx context.Context) HBaseObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o HBaseObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HBaseObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o HBaseObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o HBaseObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v HBaseObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o HBaseObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v HBaseObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o HBaseObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HBaseObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o HBaseObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HBaseObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o HBaseObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o HBaseObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// HBase server dataset.
type HBaseObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// HBaseObjectDatasetResponseInput is an input type that accepts HBaseObjectDatasetResponseArgs and HBaseObjectDatasetResponseOutput values.
// You can construct a concrete instance of `HBaseObjectDatasetResponseInput` via:
//
//          HBaseObjectDatasetResponseArgs{...}
type HBaseObjectDatasetResponseInput interface {
	pulumi.Input

	ToHBaseObjectDatasetResponseOutput() HBaseObjectDatasetResponseOutput
	ToHBaseObjectDatasetResponseOutputWithContext(context.Context) HBaseObjectDatasetResponseOutput
}

// HBase server dataset.
type HBaseObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HBaseObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseObjectDatasetResponse)(nil)).Elem()
}

func (i HBaseObjectDatasetResponseArgs) ToHBaseObjectDatasetResponseOutput() HBaseObjectDatasetResponseOutput {
	return i.ToHBaseObjectDatasetResponseOutputWithContext(context.Background())
}

func (i HBaseObjectDatasetResponseArgs) ToHBaseObjectDatasetResponseOutputWithContext(ctx context.Context) HBaseObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseObjectDatasetResponseOutput)
}

// HBase server dataset.
type HBaseObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (HBaseObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseObjectDatasetResponse)(nil)).Elem()
}

func (o HBaseObjectDatasetResponseOutput) ToHBaseObjectDatasetResponseOutput() HBaseObjectDatasetResponseOutput {
	return o
}

func (o HBaseObjectDatasetResponseOutput) ToHBaseObjectDatasetResponseOutputWithContext(ctx context.Context) HBaseObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o HBaseObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o HBaseObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o HBaseObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o HBaseObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o HBaseObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o HBaseObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HBaseObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o HBaseObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o HBaseObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// HDInsight linked service.
type HDInsightLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// HDInsight cluster URI. Type: string (or Expression with resultType string).
	ClusterUri interface{} `pulumi:"clusterUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string).
	FileSystem interface{} `pulumi:"fileSystem"`
	// A reference to the Azure SQL linked service that points to the HCatalog database.
	HcatalogLinkedServiceName *LinkedServiceReference `pulumi:"hcatalogLinkedServiceName"`
	// Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean.
	IsEspEnabled interface{} `pulumi:"isEspEnabled"`
	// The Azure Storage linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// HDInsight cluster password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// HDInsight cluster user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// HDInsightLinkedServiceInput is an input type that accepts HDInsightLinkedServiceArgs and HDInsightLinkedServiceOutput values.
// You can construct a concrete instance of `HDInsightLinkedServiceInput` via:
//
//          HDInsightLinkedServiceArgs{...}
type HDInsightLinkedServiceInput interface {
	pulumi.Input

	ToHDInsightLinkedServiceOutput() HDInsightLinkedServiceOutput
	ToHDInsightLinkedServiceOutputWithContext(context.Context) HDInsightLinkedServiceOutput
}

// HDInsight linked service.
type HDInsightLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// HDInsight cluster URI. Type: string (or Expression with resultType string).
	ClusterUri pulumi.Input `pulumi:"clusterUri"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string).
	FileSystem pulumi.Input `pulumi:"fileSystem"`
	// A reference to the Azure SQL linked service that points to the HCatalog database.
	HcatalogLinkedServiceName LinkedServiceReferencePtrInput `pulumi:"hcatalogLinkedServiceName"`
	// Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean.
	IsEspEnabled pulumi.Input `pulumi:"isEspEnabled"`
	// The Azure Storage linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// HDInsight cluster password.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// HDInsight cluster user name. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (HDInsightLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightLinkedService)(nil)).Elem()
}

func (i HDInsightLinkedServiceArgs) ToHDInsightLinkedServiceOutput() HDInsightLinkedServiceOutput {
	return i.ToHDInsightLinkedServiceOutputWithContext(context.Background())
}

func (i HDInsightLinkedServiceArgs) ToHDInsightLinkedServiceOutputWithContext(ctx context.Context) HDInsightLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightLinkedServiceOutput)
}

// HDInsight linked service.
type HDInsightLinkedServiceOutput struct{ *pulumi.OutputState }

func (HDInsightLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightLinkedService)(nil)).Elem()
}

func (o HDInsightLinkedServiceOutput) ToHDInsightLinkedServiceOutput() HDInsightLinkedServiceOutput {
	return o
}

func (o HDInsightLinkedServiceOutput) ToHDInsightLinkedServiceOutputWithContext(ctx context.Context) HDInsightLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o HDInsightLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// HDInsight cluster URI. Type: string (or Expression with resultType string).
func (o HDInsightLinkedServiceOutput) ClusterUri() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedService) interface{} { return v.ClusterUri }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HDInsightLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v HDInsightLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o HDInsightLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HDInsightLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string).
func (o HDInsightLinkedServiceOutput) FileSystem() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedService) interface{} { return v.FileSystem }).(pulumi.AnyOutput)
}

// A reference to the Azure SQL linked service that points to the HCatalog database.
func (o HDInsightLinkedServiceOutput) HcatalogLinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v HDInsightLinkedService) *LinkedServiceReference { return v.HcatalogLinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean.
func (o HDInsightLinkedServiceOutput) IsEspEnabled() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedService) interface{} { return v.IsEspEnabled }).(pulumi.AnyOutput)
}

// The Azure Storage linked service reference.
func (o HDInsightLinkedServiceOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v HDInsightLinkedService) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Parameters for linked service.
func (o HDInsightLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HDInsightLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// HDInsight cluster password.
func (o HDInsightLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o HDInsightLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// HDInsight cluster user name. Type: string (or Expression with resultType string).
func (o HDInsightLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// HDInsight linked service.
type HDInsightLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// HDInsight cluster URI. Type: string (or Expression with resultType string).
	ClusterUri interface{} `pulumi:"clusterUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string).
	FileSystem interface{} `pulumi:"fileSystem"`
	// A reference to the Azure SQL linked service that points to the HCatalog database.
	HcatalogLinkedServiceName *LinkedServiceReferenceResponse `pulumi:"hcatalogLinkedServiceName"`
	// Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean.
	IsEspEnabled interface{} `pulumi:"isEspEnabled"`
	// The Azure Storage linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// HDInsight cluster password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// HDInsight cluster user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// HDInsightLinkedServiceResponseInput is an input type that accepts HDInsightLinkedServiceResponseArgs and HDInsightLinkedServiceResponseOutput values.
// You can construct a concrete instance of `HDInsightLinkedServiceResponseInput` via:
//
//          HDInsightLinkedServiceResponseArgs{...}
type HDInsightLinkedServiceResponseInput interface {
	pulumi.Input

	ToHDInsightLinkedServiceResponseOutput() HDInsightLinkedServiceResponseOutput
	ToHDInsightLinkedServiceResponseOutputWithContext(context.Context) HDInsightLinkedServiceResponseOutput
}

// HDInsight linked service.
type HDInsightLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// HDInsight cluster URI. Type: string (or Expression with resultType string).
	ClusterUri pulumi.Input `pulumi:"clusterUri"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string).
	FileSystem pulumi.Input `pulumi:"fileSystem"`
	// A reference to the Azure SQL linked service that points to the HCatalog database.
	HcatalogLinkedServiceName LinkedServiceReferenceResponsePtrInput `pulumi:"hcatalogLinkedServiceName"`
	// Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean.
	IsEspEnabled pulumi.Input `pulumi:"isEspEnabled"`
	// The Azure Storage linked service reference.
	LinkedServiceName LinkedServiceReferenceResponsePtrInput `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// HDInsight cluster password.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// HDInsight cluster user name. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (HDInsightLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightLinkedServiceResponse)(nil)).Elem()
}

func (i HDInsightLinkedServiceResponseArgs) ToHDInsightLinkedServiceResponseOutput() HDInsightLinkedServiceResponseOutput {
	return i.ToHDInsightLinkedServiceResponseOutputWithContext(context.Background())
}

func (i HDInsightLinkedServiceResponseArgs) ToHDInsightLinkedServiceResponseOutputWithContext(ctx context.Context) HDInsightLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightLinkedServiceResponseOutput)
}

// HDInsight linked service.
type HDInsightLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HDInsightLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightLinkedServiceResponse)(nil)).Elem()
}

func (o HDInsightLinkedServiceResponseOutput) ToHDInsightLinkedServiceResponseOutput() HDInsightLinkedServiceResponseOutput {
	return o
}

func (o HDInsightLinkedServiceResponseOutput) ToHDInsightLinkedServiceResponseOutputWithContext(ctx context.Context) HDInsightLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o HDInsightLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// HDInsight cluster URI. Type: string (or Expression with resultType string).
func (o HDInsightLinkedServiceResponseOutput) ClusterUri() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) interface{} { return v.ClusterUri }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HDInsightLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o HDInsightLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HDInsightLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string).
func (o HDInsightLinkedServiceResponseOutput) FileSystem() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) interface{} { return v.FileSystem }).(pulumi.AnyOutput)
}

// A reference to the Azure SQL linked service that points to the HCatalog database.
func (o HDInsightLinkedServiceResponseOutput) HcatalogLinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) *LinkedServiceReferenceResponse {
		return v.HcatalogLinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean.
func (o HDInsightLinkedServiceResponseOutput) IsEspEnabled() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) interface{} { return v.IsEspEnabled }).(pulumi.AnyOutput)
}

// The Azure Storage linked service reference.
func (o HDInsightLinkedServiceResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Parameters for linked service.
func (o HDInsightLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// HDInsight cluster password.
func (o HDInsightLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o HDInsightLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// HDInsight cluster user name. Type: string (or Expression with resultType string).
func (o HDInsightLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// HDInsight ondemand linked service.
type HDInsightOnDemandLinkedService struct {
	// Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
	AdditionalLinkedServiceNames []LinkedServiceReference `pulumi:"additionalLinkedServiceNames"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
	ClusterNamePrefix interface{} `pulumi:"clusterNamePrefix"`
	// The password to access the cluster.
	ClusterPassword interface{} `pulumi:"clusterPassword"`
	// The resource group where the cluster belongs. Type: string (or Expression with resultType string).
	ClusterResourceGroup interface{} `pulumi:"clusterResourceGroup"`
	// Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType string).
	ClusterSize interface{} `pulumi:"clusterSize"`
	// The password to SSH remotely connect cluster’s node (for Linux).
	ClusterSshPassword interface{} `pulumi:"clusterSshPassword"`
	// The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
	ClusterSshUserName interface{} `pulumi:"clusterSshUserName"`
	// The cluster type. Type: string (or Expression with resultType string).
	ClusterType interface{} `pulumi:"clusterType"`
	// The username to access the cluster. Type: string (or Expression with resultType string).
	ClusterUserName interface{} `pulumi:"clusterUserName"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
	CoreConfiguration interface{} `pulumi:"coreConfiguration"`
	// Specifies the size of the data node for the HDInsight cluster.
	DataNodeSize interface{} `pulumi:"dataNodeSize"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
	HBaseConfiguration interface{} `pulumi:"hBaseConfiguration"`
	// The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
	HcatalogLinkedServiceName *LinkedServiceReference `pulumi:"hcatalogLinkedServiceName"`
	// Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
	HdfsConfiguration interface{} `pulumi:"hdfsConfiguration"`
	// Specifies the size of the head node for the HDInsight cluster.
	HeadNodeSize interface{} `pulumi:"headNodeSize"`
	// Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
	HiveConfiguration interface{} `pulumi:"hiveConfiguration"`
	// The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
	HostSubscriptionId interface{} `pulumi:"hostSubscriptionId"`
	// Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
	MapReduceConfiguration interface{} `pulumi:"mapReduceConfiguration"`
	// Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
	OozieConfiguration interface{} `pulumi:"oozieConfiguration"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Custom script actions to run on HDI ondemand cluster once it's up. Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
	ScriptActions []ScriptAction `pulumi:"scriptActions"`
	// The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key for the service principal id.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
	SparkVersion interface{} `pulumi:"sparkVersion"`
	// Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
	StormConfiguration interface{} `pulumi:"stormConfiguration"`
	// The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type: string (or Expression with resultType string).
	SubnetName interface{} `pulumi:"subnetName"`
	// The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
	TimeToLive interface{} `pulumi:"timeToLive"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
	// The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with resultType string).
	VirtualNetworkId interface{} `pulumi:"virtualNetworkId"`
	// Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
	YarnConfiguration interface{} `pulumi:"yarnConfiguration"`
	// Specifies the size of the Zoo Keeper node for the HDInsight cluster.
	ZookeeperNodeSize interface{} `pulumi:"zookeeperNodeSize"`
}

// HDInsightOnDemandLinkedServiceInput is an input type that accepts HDInsightOnDemandLinkedServiceArgs and HDInsightOnDemandLinkedServiceOutput values.
// You can construct a concrete instance of `HDInsightOnDemandLinkedServiceInput` via:
//
//          HDInsightOnDemandLinkedServiceArgs{...}
type HDInsightOnDemandLinkedServiceInput interface {
	pulumi.Input

	ToHDInsightOnDemandLinkedServiceOutput() HDInsightOnDemandLinkedServiceOutput
	ToHDInsightOnDemandLinkedServiceOutputWithContext(context.Context) HDInsightOnDemandLinkedServiceOutput
}

// HDInsight ondemand linked service.
type HDInsightOnDemandLinkedServiceArgs struct {
	// Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
	AdditionalLinkedServiceNames LinkedServiceReferenceArrayInput `pulumi:"additionalLinkedServiceNames"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
	ClusterNamePrefix pulumi.Input `pulumi:"clusterNamePrefix"`
	// The password to access the cluster.
	ClusterPassword pulumi.Input `pulumi:"clusterPassword"`
	// The resource group where the cluster belongs. Type: string (or Expression with resultType string).
	ClusterResourceGroup pulumi.Input `pulumi:"clusterResourceGroup"`
	// Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType string).
	ClusterSize pulumi.Input `pulumi:"clusterSize"`
	// The password to SSH remotely connect cluster’s node (for Linux).
	ClusterSshPassword pulumi.Input `pulumi:"clusterSshPassword"`
	// The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
	ClusterSshUserName pulumi.Input `pulumi:"clusterSshUserName"`
	// The cluster type. Type: string (or Expression with resultType string).
	ClusterType pulumi.Input `pulumi:"clusterType"`
	// The username to access the cluster. Type: string (or Expression with resultType string).
	ClusterUserName pulumi.Input `pulumi:"clusterUserName"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
	CoreConfiguration pulumi.Input `pulumi:"coreConfiguration"`
	// Specifies the size of the data node for the HDInsight cluster.
	DataNodeSize pulumi.Input `pulumi:"dataNodeSize"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
	HBaseConfiguration pulumi.Input `pulumi:"hBaseConfiguration"`
	// The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
	HcatalogLinkedServiceName LinkedServiceReferencePtrInput `pulumi:"hcatalogLinkedServiceName"`
	// Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
	HdfsConfiguration pulumi.Input `pulumi:"hdfsConfiguration"`
	// Specifies the size of the head node for the HDInsight cluster.
	HeadNodeSize pulumi.Input `pulumi:"headNodeSize"`
	// Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
	HiveConfiguration pulumi.Input `pulumi:"hiveConfiguration"`
	// The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
	HostSubscriptionId pulumi.Input `pulumi:"hostSubscriptionId"`
	// Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
	MapReduceConfiguration pulumi.Input `pulumi:"mapReduceConfiguration"`
	// Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
	OozieConfiguration pulumi.Input `pulumi:"oozieConfiguration"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Custom script actions to run on HDI ondemand cluster once it's up. Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
	ScriptActions ScriptActionArrayInput `pulumi:"scriptActions"`
	// The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key for the service principal id.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
	SparkVersion pulumi.Input `pulumi:"sparkVersion"`
	// Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
	StormConfiguration pulumi.Input `pulumi:"stormConfiguration"`
	// The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type: string (or Expression with resultType string).
	SubnetName pulumi.Input `pulumi:"subnetName"`
	// The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
	TimeToLive pulumi.Input `pulumi:"timeToLive"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
	Version pulumi.Input `pulumi:"version"`
	// The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with resultType string).
	VirtualNetworkId pulumi.Input `pulumi:"virtualNetworkId"`
	// Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
	YarnConfiguration pulumi.Input `pulumi:"yarnConfiguration"`
	// Specifies the size of the Zoo Keeper node for the HDInsight cluster.
	ZookeeperNodeSize pulumi.Input `pulumi:"zookeeperNodeSize"`
}

func (HDInsightOnDemandLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightOnDemandLinkedService)(nil)).Elem()
}

func (i HDInsightOnDemandLinkedServiceArgs) ToHDInsightOnDemandLinkedServiceOutput() HDInsightOnDemandLinkedServiceOutput {
	return i.ToHDInsightOnDemandLinkedServiceOutputWithContext(context.Background())
}

func (i HDInsightOnDemandLinkedServiceArgs) ToHDInsightOnDemandLinkedServiceOutputWithContext(ctx context.Context) HDInsightOnDemandLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightOnDemandLinkedServiceOutput)
}

// HDInsight ondemand linked service.
type HDInsightOnDemandLinkedServiceOutput struct{ *pulumi.OutputState }

func (HDInsightOnDemandLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightOnDemandLinkedService)(nil)).Elem()
}

func (o HDInsightOnDemandLinkedServiceOutput) ToHDInsightOnDemandLinkedServiceOutput() HDInsightOnDemandLinkedServiceOutput {
	return o
}

func (o HDInsightOnDemandLinkedServiceOutput) ToHDInsightOnDemandLinkedServiceOutputWithContext(ctx context.Context) HDInsightOnDemandLinkedServiceOutput {
	return o
}

// Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
func (o HDInsightOnDemandLinkedServiceOutput) AdditionalLinkedServiceNames() LinkedServiceReferenceArrayOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) []LinkedServiceReference { return v.AdditionalLinkedServiceNames }).(LinkedServiceReferenceArrayOutput)
}

// List of tags that can be used for describing the linked service.
func (o HDInsightOnDemandLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) ClusterNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ClusterNamePrefix }).(pulumi.AnyOutput)
}

// The password to access the cluster.
func (o HDInsightOnDemandLinkedServiceOutput) ClusterPassword() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ClusterPassword }).(pulumi.AnyOutput)
}

// The resource group where the cluster belongs. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) ClusterResourceGroup() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ClusterResourceGroup }).(pulumi.AnyOutput)
}

// Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) ClusterSize() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ClusterSize }).(pulumi.AnyOutput)
}

// The password to SSH remotely connect cluster’s node (for Linux).
func (o HDInsightOnDemandLinkedServiceOutput) ClusterSshPassword() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ClusterSshPassword }).(pulumi.AnyOutput)
}

// The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) ClusterSshUserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ClusterSshUserName }).(pulumi.AnyOutput)
}

// The cluster type. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) ClusterType() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ClusterType }).(pulumi.AnyOutput)
}

// The username to access the cluster. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) ClusterUserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ClusterUserName }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HDInsightOnDemandLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
func (o HDInsightOnDemandLinkedServiceOutput) CoreConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.CoreConfiguration }).(pulumi.AnyOutput)
}

// Specifies the size of the data node for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) DataNodeSize() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.DataNodeSize }).(pulumi.AnyOutput)
}

// Linked service description.
func (o HDInsightOnDemandLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) HBaseConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.HBaseConfiguration }).(pulumi.AnyOutput)
}

// The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
func (o HDInsightOnDemandLinkedServiceOutput) HcatalogLinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) *LinkedServiceReference { return v.HcatalogLinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) HdfsConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.HdfsConfiguration }).(pulumi.AnyOutput)
}

// Specifies the size of the head node for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) HeadNodeSize() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.HeadNodeSize }).(pulumi.AnyOutput)
}

// Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) HiveConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.HiveConfiguration }).(pulumi.AnyOutput)
}

// The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) HostSubscriptionId() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.HostSubscriptionId }).(pulumi.AnyOutput)
}

// Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
func (o HDInsightOnDemandLinkedServiceOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) MapReduceConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.MapReduceConfiguration }).(pulumi.AnyOutput)
}

// Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) OozieConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.OozieConfiguration }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o HDInsightOnDemandLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Custom script actions to run on HDI ondemand cluster once it's up. Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
func (o HDInsightOnDemandLinkedServiceOutput) ScriptActions() ScriptActionArrayOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) []ScriptAction { return v.ScriptActions }).(ScriptActionArrayOutput)
}

// The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key for the service principal id.
func (o HDInsightOnDemandLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) SparkVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.SparkVersion }).(pulumi.AnyOutput)
}

// Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) StormConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.StormConfiguration }).(pulumi.AnyOutput)
}

// The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) SubnetName() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.SubnetName }).(pulumi.AnyOutput)
}

// The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) TimeToLive() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.TimeToLive }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o HDInsightOnDemandLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) VirtualNetworkId() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.VirtualNetworkId }).(pulumi.AnyOutput)
}

// Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) YarnConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.YarnConfiguration }).(pulumi.AnyOutput)
}

// Specifies the size of the Zoo Keeper node for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) ZookeeperNodeSize() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ZookeeperNodeSize }).(pulumi.AnyOutput)
}

// HDInsight ondemand linked service.
type HDInsightOnDemandLinkedServiceResponse struct {
	// Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
	AdditionalLinkedServiceNames []LinkedServiceReferenceResponse `pulumi:"additionalLinkedServiceNames"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
	ClusterNamePrefix interface{} `pulumi:"clusterNamePrefix"`
	// The password to access the cluster.
	ClusterPassword interface{} `pulumi:"clusterPassword"`
	// The resource group where the cluster belongs. Type: string (or Expression with resultType string).
	ClusterResourceGroup interface{} `pulumi:"clusterResourceGroup"`
	// Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType string).
	ClusterSize interface{} `pulumi:"clusterSize"`
	// The password to SSH remotely connect cluster’s node (for Linux).
	ClusterSshPassword interface{} `pulumi:"clusterSshPassword"`
	// The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
	ClusterSshUserName interface{} `pulumi:"clusterSshUserName"`
	// The cluster type. Type: string (or Expression with resultType string).
	ClusterType interface{} `pulumi:"clusterType"`
	// The username to access the cluster. Type: string (or Expression with resultType string).
	ClusterUserName interface{} `pulumi:"clusterUserName"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
	CoreConfiguration interface{} `pulumi:"coreConfiguration"`
	// Specifies the size of the data node for the HDInsight cluster.
	DataNodeSize interface{} `pulumi:"dataNodeSize"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
	HBaseConfiguration interface{} `pulumi:"hBaseConfiguration"`
	// The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
	HcatalogLinkedServiceName *LinkedServiceReferenceResponse `pulumi:"hcatalogLinkedServiceName"`
	// Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
	HdfsConfiguration interface{} `pulumi:"hdfsConfiguration"`
	// Specifies the size of the head node for the HDInsight cluster.
	HeadNodeSize interface{} `pulumi:"headNodeSize"`
	// Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
	HiveConfiguration interface{} `pulumi:"hiveConfiguration"`
	// The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
	HostSubscriptionId interface{} `pulumi:"hostSubscriptionId"`
	// Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
	MapReduceConfiguration interface{} `pulumi:"mapReduceConfiguration"`
	// Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
	OozieConfiguration interface{} `pulumi:"oozieConfiguration"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Custom script actions to run on HDI ondemand cluster once it's up. Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
	ScriptActions []ScriptActionResponse `pulumi:"scriptActions"`
	// The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key for the service principal id.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
	SparkVersion interface{} `pulumi:"sparkVersion"`
	// Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
	StormConfiguration interface{} `pulumi:"stormConfiguration"`
	// The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type: string (or Expression with resultType string).
	SubnetName interface{} `pulumi:"subnetName"`
	// The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
	TimeToLive interface{} `pulumi:"timeToLive"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
	// The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with resultType string).
	VirtualNetworkId interface{} `pulumi:"virtualNetworkId"`
	// Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
	YarnConfiguration interface{} `pulumi:"yarnConfiguration"`
	// Specifies the size of the Zoo Keeper node for the HDInsight cluster.
	ZookeeperNodeSize interface{} `pulumi:"zookeeperNodeSize"`
}

// HDInsightOnDemandLinkedServiceResponseInput is an input type that accepts HDInsightOnDemandLinkedServiceResponseArgs and HDInsightOnDemandLinkedServiceResponseOutput values.
// You can construct a concrete instance of `HDInsightOnDemandLinkedServiceResponseInput` via:
//
//          HDInsightOnDemandLinkedServiceResponseArgs{...}
type HDInsightOnDemandLinkedServiceResponseInput interface {
	pulumi.Input

	ToHDInsightOnDemandLinkedServiceResponseOutput() HDInsightOnDemandLinkedServiceResponseOutput
	ToHDInsightOnDemandLinkedServiceResponseOutputWithContext(context.Context) HDInsightOnDemandLinkedServiceResponseOutput
}

// HDInsight ondemand linked service.
type HDInsightOnDemandLinkedServiceResponseArgs struct {
	// Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
	AdditionalLinkedServiceNames LinkedServiceReferenceResponseArrayInput `pulumi:"additionalLinkedServiceNames"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
	ClusterNamePrefix pulumi.Input `pulumi:"clusterNamePrefix"`
	// The password to access the cluster.
	ClusterPassword pulumi.Input `pulumi:"clusterPassword"`
	// The resource group where the cluster belongs. Type: string (or Expression with resultType string).
	ClusterResourceGroup pulumi.Input `pulumi:"clusterResourceGroup"`
	// Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType string).
	ClusterSize pulumi.Input `pulumi:"clusterSize"`
	// The password to SSH remotely connect cluster’s node (for Linux).
	ClusterSshPassword pulumi.Input `pulumi:"clusterSshPassword"`
	// The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
	ClusterSshUserName pulumi.Input `pulumi:"clusterSshUserName"`
	// The cluster type. Type: string (or Expression with resultType string).
	ClusterType pulumi.Input `pulumi:"clusterType"`
	// The username to access the cluster. Type: string (or Expression with resultType string).
	ClusterUserName pulumi.Input `pulumi:"clusterUserName"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
	CoreConfiguration pulumi.Input `pulumi:"coreConfiguration"`
	// Specifies the size of the data node for the HDInsight cluster.
	DataNodeSize pulumi.Input `pulumi:"dataNodeSize"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
	HBaseConfiguration pulumi.Input `pulumi:"hBaseConfiguration"`
	// The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
	HcatalogLinkedServiceName LinkedServiceReferenceResponsePtrInput `pulumi:"hcatalogLinkedServiceName"`
	// Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
	HdfsConfiguration pulumi.Input `pulumi:"hdfsConfiguration"`
	// Specifies the size of the head node for the HDInsight cluster.
	HeadNodeSize pulumi.Input `pulumi:"headNodeSize"`
	// Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
	HiveConfiguration pulumi.Input `pulumi:"hiveConfiguration"`
	// The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
	HostSubscriptionId pulumi.Input `pulumi:"hostSubscriptionId"`
	// Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
	MapReduceConfiguration pulumi.Input `pulumi:"mapReduceConfiguration"`
	// Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
	OozieConfiguration pulumi.Input `pulumi:"oozieConfiguration"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Custom script actions to run on HDI ondemand cluster once it's up. Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
	ScriptActions ScriptActionResponseArrayInput `pulumi:"scriptActions"`
	// The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key for the service principal id.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
	SparkVersion pulumi.Input `pulumi:"sparkVersion"`
	// Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
	StormConfiguration pulumi.Input `pulumi:"stormConfiguration"`
	// The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type: string (or Expression with resultType string).
	SubnetName pulumi.Input `pulumi:"subnetName"`
	// The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
	TimeToLive pulumi.Input `pulumi:"timeToLive"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
	Version pulumi.Input `pulumi:"version"`
	// The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with resultType string).
	VirtualNetworkId pulumi.Input `pulumi:"virtualNetworkId"`
	// Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
	YarnConfiguration pulumi.Input `pulumi:"yarnConfiguration"`
	// Specifies the size of the Zoo Keeper node for the HDInsight cluster.
	ZookeeperNodeSize pulumi.Input `pulumi:"zookeeperNodeSize"`
}

func (HDInsightOnDemandLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightOnDemandLinkedServiceResponse)(nil)).Elem()
}

func (i HDInsightOnDemandLinkedServiceResponseArgs) ToHDInsightOnDemandLinkedServiceResponseOutput() HDInsightOnDemandLinkedServiceResponseOutput {
	return i.ToHDInsightOnDemandLinkedServiceResponseOutputWithContext(context.Background())
}

func (i HDInsightOnDemandLinkedServiceResponseArgs) ToHDInsightOnDemandLinkedServiceResponseOutputWithContext(ctx context.Context) HDInsightOnDemandLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightOnDemandLinkedServiceResponseOutput)
}

// HDInsight ondemand linked service.
type HDInsightOnDemandLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HDInsightOnDemandLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightOnDemandLinkedServiceResponse)(nil)).Elem()
}

func (o HDInsightOnDemandLinkedServiceResponseOutput) ToHDInsightOnDemandLinkedServiceResponseOutput() HDInsightOnDemandLinkedServiceResponseOutput {
	return o
}

func (o HDInsightOnDemandLinkedServiceResponseOutput) ToHDInsightOnDemandLinkedServiceResponseOutputWithContext(ctx context.Context) HDInsightOnDemandLinkedServiceResponseOutput {
	return o
}

// Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
func (o HDInsightOnDemandLinkedServiceResponseOutput) AdditionalLinkedServiceNames() LinkedServiceReferenceResponseArrayOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) []LinkedServiceReferenceResponse {
		return v.AdditionalLinkedServiceNames
	}).(LinkedServiceReferenceResponseArrayOutput)
}

// List of tags that can be used for describing the linked service.
func (o HDInsightOnDemandLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ClusterNamePrefix }).(pulumi.AnyOutput)
}

// The password to access the cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterPassword() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ClusterPassword }).(pulumi.AnyOutput)
}

// The resource group where the cluster belongs. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterResourceGroup() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ClusterResourceGroup }).(pulumi.AnyOutput)
}

// Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterSize() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ClusterSize }).(pulumi.AnyOutput)
}

// The password to SSH remotely connect cluster’s node (for Linux).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterSshPassword() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ClusterSshPassword }).(pulumi.AnyOutput)
}

// The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterSshUserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ClusterSshUserName }).(pulumi.AnyOutput)
}

// The cluster type. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterType() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ClusterType }).(pulumi.AnyOutput)
}

// The username to access the cluster. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterUserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ClusterUserName }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HDInsightOnDemandLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
func (o HDInsightOnDemandLinkedServiceResponseOutput) CoreConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.CoreConfiguration }).(pulumi.AnyOutput)
}

// Specifies the size of the data node for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) DataNodeSize() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.DataNodeSize }).(pulumi.AnyOutput)
}

// Linked service description.
func (o HDInsightOnDemandLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) HBaseConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.HBaseConfiguration }).(pulumi.AnyOutput)
}

// The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
func (o HDInsightOnDemandLinkedServiceResponseOutput) HcatalogLinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) *LinkedServiceReferenceResponse {
		return v.HcatalogLinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) HdfsConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.HdfsConfiguration }).(pulumi.AnyOutput)
}

// Specifies the size of the head node for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) HeadNodeSize() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.HeadNodeSize }).(pulumi.AnyOutput)
}

// Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) HiveConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.HiveConfiguration }).(pulumi.AnyOutput)
}

// The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) HostSubscriptionId() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.HostSubscriptionId }).(pulumi.AnyOutput)
}

// Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
func (o HDInsightOnDemandLinkedServiceResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) MapReduceConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.MapReduceConfiguration }).(pulumi.AnyOutput)
}

// Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) OozieConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.OozieConfiguration }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o HDInsightOnDemandLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Custom script actions to run on HDI ondemand cluster once it's up. Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
func (o HDInsightOnDemandLinkedServiceResponseOutput) ScriptActions() ScriptActionResponseArrayOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) []ScriptActionResponse { return v.ScriptActions }).(ScriptActionResponseArrayOutput)
}

// The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key for the service principal id.
func (o HDInsightOnDemandLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) SparkVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.SparkVersion }).(pulumi.AnyOutput)
}

// Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) StormConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.StormConfiguration }).(pulumi.AnyOutput)
}

// The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) SubnetName() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.SubnetName }).(pulumi.AnyOutput)
}

// The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) TimeToLive() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.TimeToLive }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o HDInsightOnDemandLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) VirtualNetworkId() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.VirtualNetworkId }).(pulumi.AnyOutput)
}

// Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) YarnConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.YarnConfiguration }).(pulumi.AnyOutput)
}

// Specifies the size of the Zoo Keeper node for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) ZookeeperNodeSize() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ZookeeperNodeSize }).(pulumi.AnyOutput)
}

// Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Windows authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// HdfsLinkedServiceInput is an input type that accepts HdfsLinkedServiceArgs and HdfsLinkedServiceOutput values.
// You can construct a concrete instance of `HdfsLinkedServiceInput` via:
//
//          HdfsLinkedServiceArgs{...}
type HdfsLinkedServiceInput interface {
	pulumi.Input

	ToHdfsLinkedServiceOutput() HdfsLinkedServiceOutput
	ToHdfsLinkedServiceOutputWithContext(context.Context) HdfsLinkedServiceOutput
}

// Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for Windows authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// User name for Windows authentication. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (HdfsLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsLinkedService)(nil)).Elem()
}

func (i HdfsLinkedServiceArgs) ToHdfsLinkedServiceOutput() HdfsLinkedServiceOutput {
	return i.ToHdfsLinkedServiceOutputWithContext(context.Background())
}

func (i HdfsLinkedServiceArgs) ToHdfsLinkedServiceOutputWithContext(ctx context.Context) HdfsLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HdfsLinkedServiceOutput)
}

// Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedServiceOutput struct{ *pulumi.OutputState }

func (HdfsLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsLinkedService)(nil)).Elem()
}

func (o HdfsLinkedServiceOutput) ToHdfsLinkedServiceOutput() HdfsLinkedServiceOutput {
	return o
}

func (o HdfsLinkedServiceOutput) ToHdfsLinkedServiceOutputWithContext(ctx context.Context) HdfsLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o HdfsLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HdfsLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
func (o HdfsLinkedServiceOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLinkedService) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HdfsLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v HdfsLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o HdfsLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HdfsLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HdfsLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o HdfsLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HdfsLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for Windows authentication.
func (o HdfsLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o HdfsLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
func (o HdfsLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// User name for Windows authentication. Type: string (or Expression with resultType string).
func (o HdfsLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Windows authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// HdfsLinkedServiceResponseInput is an input type that accepts HdfsLinkedServiceResponseArgs and HdfsLinkedServiceResponseOutput values.
// You can construct a concrete instance of `HdfsLinkedServiceResponseInput` via:
//
//          HdfsLinkedServiceResponseArgs{...}
type HdfsLinkedServiceResponseInput interface {
	pulumi.Input

	ToHdfsLinkedServiceResponseOutput() HdfsLinkedServiceResponseOutput
	ToHdfsLinkedServiceResponseOutputWithContext(context.Context) HdfsLinkedServiceResponseOutput
}

// Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password for Windows authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// User name for Windows authentication. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (HdfsLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsLinkedServiceResponse)(nil)).Elem()
}

func (i HdfsLinkedServiceResponseArgs) ToHdfsLinkedServiceResponseOutput() HdfsLinkedServiceResponseOutput {
	return i.ToHdfsLinkedServiceResponseOutputWithContext(context.Background())
}

func (i HdfsLinkedServiceResponseArgs) ToHdfsLinkedServiceResponseOutputWithContext(ctx context.Context) HdfsLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HdfsLinkedServiceResponseOutput)
}

// Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HdfsLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsLinkedServiceResponse)(nil)).Elem()
}

func (o HdfsLinkedServiceResponseOutput) ToHdfsLinkedServiceResponseOutput() HdfsLinkedServiceResponseOutput {
	return o
}

func (o HdfsLinkedServiceResponseOutput) ToHdfsLinkedServiceResponseOutputWithContext(ctx context.Context) HdfsLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o HdfsLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
func (o HdfsLinkedServiceResponseOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HdfsLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o HdfsLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HdfsLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o HdfsLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for Windows authentication.
func (o HdfsLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o HdfsLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
func (o HdfsLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// User name for Windows authentication. Type: string (or Expression with resultType string).
func (o HdfsLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The location of HDFS.
type HdfsLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
}

// HdfsLocationInput is an input type that accepts HdfsLocationArgs and HdfsLocationOutput values.
// You can construct a concrete instance of `HdfsLocationInput` via:
//
//          HdfsLocationArgs{...}
type HdfsLocationInput interface {
	pulumi.Input

	ToHdfsLocationOutput() HdfsLocationOutput
	ToHdfsLocationOutputWithContext(context.Context) HdfsLocationOutput
}

// The location of HDFS.
type HdfsLocationArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HdfsLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsLocation)(nil)).Elem()
}

func (i HdfsLocationArgs) ToHdfsLocationOutput() HdfsLocationOutput {
	return i.ToHdfsLocationOutputWithContext(context.Background())
}

func (i HdfsLocationArgs) ToHdfsLocationOutputWithContext(ctx context.Context) HdfsLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HdfsLocationOutput)
}

// The location of HDFS.
type HdfsLocationOutput struct{ *pulumi.OutputState }

func (HdfsLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsLocation)(nil)).Elem()
}

func (o HdfsLocationOutput) ToHdfsLocationOutput() HdfsLocationOutput {
	return o
}

func (o HdfsLocationOutput) ToHdfsLocationOutputWithContext(ctx context.Context) HdfsLocationOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o HdfsLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o HdfsLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o HdfsLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The location of HDFS.
type HdfsLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
}

// HdfsLocationResponseInput is an input type that accepts HdfsLocationResponseArgs and HdfsLocationResponseOutput values.
// You can construct a concrete instance of `HdfsLocationResponseInput` via:
//
//          HdfsLocationResponseArgs{...}
type HdfsLocationResponseInput interface {
	pulumi.Input

	ToHdfsLocationResponseOutput() HdfsLocationResponseOutput
	ToHdfsLocationResponseOutputWithContext(context.Context) HdfsLocationResponseOutput
}

// The location of HDFS.
type HdfsLocationResponseArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HdfsLocationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsLocationResponse)(nil)).Elem()
}

func (i HdfsLocationResponseArgs) ToHdfsLocationResponseOutput() HdfsLocationResponseOutput {
	return i.ToHdfsLocationResponseOutputWithContext(context.Background())
}

func (i HdfsLocationResponseArgs) ToHdfsLocationResponseOutputWithContext(ctx context.Context) HdfsLocationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HdfsLocationResponseOutput)
}

// The location of HDFS.
type HdfsLocationResponseOutput struct{ *pulumi.OutputState }

func (HdfsLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsLocationResponse)(nil)).Elem()
}

func (o HdfsLocationResponseOutput) ToHdfsLocationResponseOutput() HdfsLocationResponseOutput {
	return o
}

func (o HdfsLocationResponseOutput) ToHdfsLocationResponseOutputWithContext(ctx context.Context) HdfsLocationResponseOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o HdfsLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o HdfsLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o HdfsLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Hive Server linked service.
type HiveLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication method used to access the Hive server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Hive server.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Hive server uses to listen for client connections.
	Port interface{} `pulumi:"port"`
	// The type of Hive server.
	ServerType *string `pulumi:"serverType"`
	// true to indicate using the ZooKeeper service, false not.
	ServiceDiscoveryMode interface{} `pulumi:"serviceDiscoveryMode"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
	UseNativeQuery interface{} `pulumi:"useNativeQuery"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Hive Server.
	Username interface{} `pulumi:"username"`
	// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
	ZooKeeperNameSpace interface{} `pulumi:"zooKeeperNameSpace"`
}

// HiveLinkedServiceInput is an input type that accepts HiveLinkedServiceArgs and HiveLinkedServiceOutput values.
// You can construct a concrete instance of `HiveLinkedServiceInput` via:
//
//          HiveLinkedServiceArgs{...}
type HiveLinkedServiceInput interface {
	pulumi.Input

	ToHiveLinkedServiceOutput() HiveLinkedServiceOutput
	ToHiveLinkedServiceOutputWithContext(context.Context) HiveLinkedServiceOutput
}

// Hive Server linked service.
type HiveLinkedServiceArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.Input `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication method used to access the Hive server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
	Host pulumi.Input `pulumi:"host"`
	// The partial URL corresponding to the Hive server.
	HttpPath pulumi.Input `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Hive server uses to listen for client connections.
	Port pulumi.Input `pulumi:"port"`
	// The type of Hive server.
	ServerType pulumi.StringPtrInput `pulumi:"serverType"`
	// true to indicate using the ZooKeeper service, false not.
	ServiceDiscoveryMode pulumi.Input `pulumi:"serviceDiscoveryMode"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol pulumi.StringPtrInput `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
	UseNativeQuery pulumi.Input `pulumi:"useNativeQuery"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Hive Server.
	Username pulumi.Input `pulumi:"username"`
	// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
	ZooKeeperNameSpace pulumi.Input `pulumi:"zooKeeperNameSpace"`
}

func (HiveLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveLinkedService)(nil)).Elem()
}

func (i HiveLinkedServiceArgs) ToHiveLinkedServiceOutput() HiveLinkedServiceOutput {
	return i.ToHiveLinkedServiceOutputWithContext(context.Background())
}

func (i HiveLinkedServiceArgs) ToHiveLinkedServiceOutputWithContext(ctx context.Context) HiveLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HiveLinkedServiceOutput)
}

// Hive Server linked service.
type HiveLinkedServiceOutput struct{ *pulumi.OutputState }

func (HiveLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveLinkedService)(nil)).Elem()
}

func (o HiveLinkedServiceOutput) ToHiveLinkedServiceOutput() HiveLinkedServiceOutput {
	return o
}

func (o HiveLinkedServiceOutput) ToHiveLinkedServiceOutputWithContext(ctx context.Context) HiveLinkedServiceOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o HiveLinkedServiceOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o HiveLinkedServiceOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o HiveLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HiveLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication method used to access the Hive server.
func (o HiveLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v HiveLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o HiveLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v HiveLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o HiveLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o HiveLinkedServiceOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HiveLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
func (o HiveLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The partial URL corresponding to the Hive server.
func (o HiveLinkedServiceOutput) HttpPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.HttpPath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o HiveLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HiveLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name that you provided in the Username field
func (o HiveLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Hive server uses to listen for client connections.
func (o HiveLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The type of Hive server.
func (o HiveLinkedServiceOutput) ServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveLinkedService) *string { return v.ServerType }).(pulumi.StringPtrOutput)
}

// true to indicate using the ZooKeeper service, false not.
func (o HiveLinkedServiceOutput) ServiceDiscoveryMode() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.ServiceDiscoveryMode }).(pulumi.AnyOutput)
}

// The transport protocol to use in the Thrift layer.
func (o HiveLinkedServiceOutput) ThriftTransportProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveLinkedService) *string { return v.ThriftTransportProtocol }).(pulumi.StringPtrOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o HiveLinkedServiceOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o HiveLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HiveLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
func (o HiveLinkedServiceOutput) UseNativeQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.UseNativeQuery }).(pulumi.AnyOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o HiveLinkedServiceOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name that you use to access Hive Server.
func (o HiveLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
func (o HiveLinkedServiceOutput) ZooKeeperNameSpace() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.ZooKeeperNameSpace }).(pulumi.AnyOutput)
}

// Hive Server linked service.
type HiveLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication method used to access the Hive server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Hive server.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Hive server uses to listen for client connections.
	Port interface{} `pulumi:"port"`
	// The type of Hive server.
	ServerType *string `pulumi:"serverType"`
	// true to indicate using the ZooKeeper service, false not.
	ServiceDiscoveryMode interface{} `pulumi:"serviceDiscoveryMode"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
	UseNativeQuery interface{} `pulumi:"useNativeQuery"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Hive Server.
	Username interface{} `pulumi:"username"`
	// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
	ZooKeeperNameSpace interface{} `pulumi:"zooKeeperNameSpace"`
}

// HiveLinkedServiceResponseInput is an input type that accepts HiveLinkedServiceResponseArgs and HiveLinkedServiceResponseOutput values.
// You can construct a concrete instance of `HiveLinkedServiceResponseInput` via:
//
//          HiveLinkedServiceResponseArgs{...}
type HiveLinkedServiceResponseInput interface {
	pulumi.Input

	ToHiveLinkedServiceResponseOutput() HiveLinkedServiceResponseOutput
	ToHiveLinkedServiceResponseOutputWithContext(context.Context) HiveLinkedServiceResponseOutput
}

// Hive Server linked service.
type HiveLinkedServiceResponseArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.Input `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication method used to access the Hive server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
	Host pulumi.Input `pulumi:"host"`
	// The partial URL corresponding to the Hive server.
	HttpPath pulumi.Input `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Hive server uses to listen for client connections.
	Port pulumi.Input `pulumi:"port"`
	// The type of Hive server.
	ServerType pulumi.StringPtrInput `pulumi:"serverType"`
	// true to indicate using the ZooKeeper service, false not.
	ServiceDiscoveryMode pulumi.Input `pulumi:"serviceDiscoveryMode"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol pulumi.StringPtrInput `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
	UseNativeQuery pulumi.Input `pulumi:"useNativeQuery"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Hive Server.
	Username pulumi.Input `pulumi:"username"`
	// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
	ZooKeeperNameSpace pulumi.Input `pulumi:"zooKeeperNameSpace"`
}

func (HiveLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveLinkedServiceResponse)(nil)).Elem()
}

func (i HiveLinkedServiceResponseArgs) ToHiveLinkedServiceResponseOutput() HiveLinkedServiceResponseOutput {
	return i.ToHiveLinkedServiceResponseOutputWithContext(context.Background())
}

func (i HiveLinkedServiceResponseArgs) ToHiveLinkedServiceResponseOutputWithContext(ctx context.Context) HiveLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HiveLinkedServiceResponseOutput)
}

// Hive Server linked service.
type HiveLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HiveLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveLinkedServiceResponse)(nil)).Elem()
}

func (o HiveLinkedServiceResponseOutput) ToHiveLinkedServiceResponseOutput() HiveLinkedServiceResponseOutput {
	return o
}

func (o HiveLinkedServiceResponseOutput) ToHiveLinkedServiceResponseOutputWithContext(ctx context.Context) HiveLinkedServiceResponseOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o HiveLinkedServiceResponseOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o HiveLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o HiveLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication method used to access the Hive server.
func (o HiveLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o HiveLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o HiveLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o HiveLinkedServiceResponseOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HiveLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
func (o HiveLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The partial URL corresponding to the Hive server.
func (o HiveLinkedServiceResponseOutput) HttpPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.HttpPath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o HiveLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name that you provided in the Username field
func (o HiveLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Hive server uses to listen for client connections.
func (o HiveLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The type of Hive server.
func (o HiveLinkedServiceResponseOutput) ServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) *string { return v.ServerType }).(pulumi.StringPtrOutput)
}

// true to indicate using the ZooKeeper service, false not.
func (o HiveLinkedServiceResponseOutput) ServiceDiscoveryMode() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.ServiceDiscoveryMode }).(pulumi.AnyOutput)
}

// The transport protocol to use in the Thrift layer.
func (o HiveLinkedServiceResponseOutput) ThriftTransportProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) *string { return v.ThriftTransportProtocol }).(pulumi.StringPtrOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o HiveLinkedServiceResponseOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o HiveLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
func (o HiveLinkedServiceResponseOutput) UseNativeQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.UseNativeQuery }).(pulumi.AnyOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o HiveLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name that you use to access Hive Server.
func (o HiveLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
func (o HiveLinkedServiceResponseOutput) ZooKeeperNameSpace() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.ZooKeeperNameSpace }).(pulumi.AnyOutput)
}

// Hive Server dataset.
type HiveObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Hive. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// HiveObjectDatasetInput is an input type that accepts HiveObjectDatasetArgs and HiveObjectDatasetOutput values.
// You can construct a concrete instance of `HiveObjectDatasetInput` via:
//
//          HiveObjectDatasetArgs{...}
type HiveObjectDatasetInput interface {
	pulumi.Input

	ToHiveObjectDatasetOutput() HiveObjectDatasetOutput
	ToHiveObjectDatasetOutputWithContext(context.Context) HiveObjectDatasetOutput
}

// Hive Server dataset.
type HiveObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Hive. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HiveObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveObjectDataset)(nil)).Elem()
}

func (i HiveObjectDatasetArgs) ToHiveObjectDatasetOutput() HiveObjectDatasetOutput {
	return i.ToHiveObjectDatasetOutputWithContext(context.Background())
}

func (i HiveObjectDatasetArgs) ToHiveObjectDatasetOutputWithContext(ctx context.Context) HiveObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HiveObjectDatasetOutput)
}

// Hive Server dataset.
type HiveObjectDatasetOutput struct{ *pulumi.OutputState }

func (HiveObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveObjectDataset)(nil)).Elem()
}

func (o HiveObjectDatasetOutput) ToHiveObjectDatasetOutput() HiveObjectDatasetOutput {
	return o
}

func (o HiveObjectDatasetOutput) ToHiveObjectDatasetOutputWithContext(ctx context.Context) HiveObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o HiveObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HiveObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o HiveObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o HiveObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v HiveObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o HiveObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v HiveObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o HiveObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HiveObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o HiveObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HiveObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Hive. Type: string (or Expression with resultType string).
func (o HiveObjectDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveObjectDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o HiveObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o HiveObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HiveObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Hive Server dataset.
type HiveObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Hive. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// HiveObjectDatasetResponseInput is an input type that accepts HiveObjectDatasetResponseArgs and HiveObjectDatasetResponseOutput values.
// You can construct a concrete instance of `HiveObjectDatasetResponseInput` via:
//
//          HiveObjectDatasetResponseArgs{...}
type HiveObjectDatasetResponseInput interface {
	pulumi.Input

	ToHiveObjectDatasetResponseOutput() HiveObjectDatasetResponseOutput
	ToHiveObjectDatasetResponseOutputWithContext(context.Context) HiveObjectDatasetResponseOutput
}

// Hive Server dataset.
type HiveObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Hive. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HiveObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveObjectDatasetResponse)(nil)).Elem()
}

func (i HiveObjectDatasetResponseArgs) ToHiveObjectDatasetResponseOutput() HiveObjectDatasetResponseOutput {
	return i.ToHiveObjectDatasetResponseOutputWithContext(context.Background())
}

func (i HiveObjectDatasetResponseArgs) ToHiveObjectDatasetResponseOutputWithContext(ctx context.Context) HiveObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HiveObjectDatasetResponseOutput)
}

// Hive Server dataset.
type HiveObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (HiveObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveObjectDatasetResponse)(nil)).Elem()
}

func (o HiveObjectDatasetResponseOutput) ToHiveObjectDatasetResponseOutput() HiveObjectDatasetResponseOutput {
	return o
}

func (o HiveObjectDatasetResponseOutput) ToHiveObjectDatasetResponseOutputWithContext(ctx context.Context) HiveObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o HiveObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o HiveObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o HiveObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o HiveObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o HiveObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o HiveObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HiveObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Hive. Type: string (or Expression with resultType string).
func (o HiveObjectDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o HiveObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o HiveObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A file in an HTTP web server.
type HttpDataset struct {
	// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
	// ...
	// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used on files.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// The body for the HTTP request. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// HttpDatasetInput is an input type that accepts HttpDatasetArgs and HttpDatasetOutput values.
// You can construct a concrete instance of `HttpDatasetInput` via:
//
//          HttpDatasetArgs{...}
type HttpDatasetInput interface {
	pulumi.Input

	ToHttpDatasetOutput() HttpDatasetOutput
	ToHttpDatasetOutputWithContext(context.Context) HttpDatasetOutput
}

// A file in an HTTP web server.
type HttpDatasetArgs struct {
	// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
	// ...
	// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
	AdditionalHeaders pulumi.Input `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used on files.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// The format of files.
	Format pulumi.Input `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
	RelativeUrl pulumi.Input `pulumi:"relativeUrl"`
	// The body for the HTTP request. Type: string (or Expression with resultType string).
	RequestBody pulumi.Input `pulumi:"requestBody"`
	// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
	RequestMethod pulumi.Input `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HttpDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpDataset)(nil)).Elem()
}

func (i HttpDatasetArgs) ToHttpDatasetOutput() HttpDatasetOutput {
	return i.ToHttpDatasetOutputWithContext(context.Background())
}

func (i HttpDatasetArgs) ToHttpDatasetOutputWithContext(ctx context.Context) HttpDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpDatasetOutput)
}

// A file in an HTTP web server.
type HttpDatasetOutput struct{ *pulumi.OutputState }

func (HttpDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpDataset)(nil)).Elem()
}

func (o HttpDatasetOutput) ToHttpDatasetOutput() HttpDatasetOutput {
	return o
}

func (o HttpDatasetOutput) ToHttpDatasetOutputWithContext(ctx context.Context) HttpDatasetOutput {
	return o
}

// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
// ...
// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
func (o HttpDatasetOutput) AdditionalHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDataset) interface{} { return v.AdditionalHeaders }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the Dataset.
func (o HttpDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HttpDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used on files.
func (o HttpDatasetOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDataset) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o HttpDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o HttpDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v HttpDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// The format of files.
func (o HttpDatasetOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDataset) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o HttpDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v HttpDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o HttpDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HttpDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
func (o HttpDatasetOutput) RelativeUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDataset) interface{} { return v.RelativeUrl }).(pulumi.AnyOutput)
}

// The body for the HTTP request. Type: string (or Expression with resultType string).
func (o HttpDatasetOutput) RequestBody() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDataset) interface{} { return v.RequestBody }).(pulumi.AnyOutput)
}

// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
func (o HttpDatasetOutput) RequestMethod() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDataset) interface{} { return v.RequestMethod }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o HttpDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HttpDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o HttpDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpDataset) string { return v.Type }).(pulumi.StringOutput)
}

// A file in an HTTP web server.
type HttpDatasetResponse struct {
	// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
	// ...
	// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used on files.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// The body for the HTTP request. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// HttpDatasetResponseInput is an input type that accepts HttpDatasetResponseArgs and HttpDatasetResponseOutput values.
// You can construct a concrete instance of `HttpDatasetResponseInput` via:
//
//          HttpDatasetResponseArgs{...}
type HttpDatasetResponseInput interface {
	pulumi.Input

	ToHttpDatasetResponseOutput() HttpDatasetResponseOutput
	ToHttpDatasetResponseOutputWithContext(context.Context) HttpDatasetResponseOutput
}

// A file in an HTTP web server.
type HttpDatasetResponseArgs struct {
	// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
	// ...
	// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
	AdditionalHeaders pulumi.Input `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used on files.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// The format of files.
	Format pulumi.Input `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
	RelativeUrl pulumi.Input `pulumi:"relativeUrl"`
	// The body for the HTTP request. Type: string (or Expression with resultType string).
	RequestBody pulumi.Input `pulumi:"requestBody"`
	// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
	RequestMethod pulumi.Input `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HttpDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpDatasetResponse)(nil)).Elem()
}

func (i HttpDatasetResponseArgs) ToHttpDatasetResponseOutput() HttpDatasetResponseOutput {
	return i.ToHttpDatasetResponseOutputWithContext(context.Background())
}

func (i HttpDatasetResponseArgs) ToHttpDatasetResponseOutputWithContext(ctx context.Context) HttpDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpDatasetResponseOutput)
}

// A file in an HTTP web server.
type HttpDatasetResponseOutput struct{ *pulumi.OutputState }

func (HttpDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpDatasetResponse)(nil)).Elem()
}

func (o HttpDatasetResponseOutput) ToHttpDatasetResponseOutput() HttpDatasetResponseOutput {
	return o
}

func (o HttpDatasetResponseOutput) ToHttpDatasetResponseOutputWithContext(ctx context.Context) HttpDatasetResponseOutput {
	return o
}

// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
// ...
// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
func (o HttpDatasetResponseOutput) AdditionalHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDatasetResponse) interface{} { return v.AdditionalHeaders }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the Dataset.
func (o HttpDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HttpDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used on files.
func (o HttpDatasetResponseOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDatasetResponse) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o HttpDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o HttpDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v HttpDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// The format of files.
func (o HttpDatasetResponseOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDatasetResponse) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o HttpDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v HttpDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o HttpDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HttpDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
func (o HttpDatasetResponseOutput) RelativeUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDatasetResponse) interface{} { return v.RelativeUrl }).(pulumi.AnyOutput)
}

// The body for the HTTP request. Type: string (or Expression with resultType string).
func (o HttpDatasetResponseOutput) RequestBody() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDatasetResponse) interface{} { return v.RequestBody }).(pulumi.AnyOutput)
}

// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
func (o HttpDatasetResponseOutput) RequestMethod() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDatasetResponse) interface{} { return v.RequestMethod }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o HttpDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HttpDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o HttpDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for an HTTP source.
type HttpLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the HTTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	CertThumbprint interface{} `pulumi:"certThumbprint"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	EmbeddedCertData interface{} `pulumi:"embeddedCertData"`
	// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// HttpLinkedServiceInput is an input type that accepts HttpLinkedServiceArgs and HttpLinkedServiceOutput values.
// You can construct a concrete instance of `HttpLinkedServiceInput` via:
//
//          HttpLinkedServiceArgs{...}
type HttpLinkedServiceInput interface {
	pulumi.Input

	ToHttpLinkedServiceOutput() HttpLinkedServiceOutput
	ToHttpLinkedServiceOutputWithContext(context.Context) HttpLinkedServiceOutput
}

// Linked service for an HTTP source.
type HttpLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to be used to connect to the HTTP server.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	CertThumbprint pulumi.Input `pulumi:"certThumbprint"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	EmbeddedCertData pulumi.Input `pulumi:"embeddedCertData"`
	// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation pulumi.Input `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (HttpLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpLinkedService)(nil)).Elem()
}

func (i HttpLinkedServiceArgs) ToHttpLinkedServiceOutput() HttpLinkedServiceOutput {
	return i.ToHttpLinkedServiceOutputWithContext(context.Background())
}

func (i HttpLinkedServiceArgs) ToHttpLinkedServiceOutputWithContext(ctx context.Context) HttpLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpLinkedServiceOutput)
}

// Linked service for an HTTP source.
type HttpLinkedServiceOutput struct{ *pulumi.OutputState }

func (HttpLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpLinkedService)(nil)).Elem()
}

func (o HttpLinkedServiceOutput) ToHttpLinkedServiceOutput() HttpLinkedServiceOutput {
	return o
}

func (o HttpLinkedServiceOutput) ToHttpLinkedServiceOutputWithContext(ctx context.Context) HttpLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o HttpLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HttpLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to be used to connect to the HTTP server.
func (o HttpLinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpLinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceOutput) CertThumbprint() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedService) interface{} { return v.CertThumbprint }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HttpLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v HttpLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o HttpLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceOutput) EmbeddedCertData() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedService) interface{} { return v.EmbeddedCertData }).(pulumi.AnyOutput)
}

// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
func (o HttpLinkedServiceOutput) EnableServerCertificateValidation() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedService) interface{} { return v.EnableServerCertificateValidation }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o HttpLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HttpLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
func (o HttpLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o HttpLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Linked service for an HTTP source.
type HttpLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the HTTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	CertThumbprint interface{} `pulumi:"certThumbprint"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	EmbeddedCertData interface{} `pulumi:"embeddedCertData"`
	// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// HttpLinkedServiceResponseInput is an input type that accepts HttpLinkedServiceResponseArgs and HttpLinkedServiceResponseOutput values.
// You can construct a concrete instance of `HttpLinkedServiceResponseInput` via:
//
//          HttpLinkedServiceResponseArgs{...}
type HttpLinkedServiceResponseInput interface {
	pulumi.Input

	ToHttpLinkedServiceResponseOutput() HttpLinkedServiceResponseOutput
	ToHttpLinkedServiceResponseOutputWithContext(context.Context) HttpLinkedServiceResponseOutput
}

// Linked service for an HTTP source.
type HttpLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to be used to connect to the HTTP server.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	CertThumbprint pulumi.Input `pulumi:"certThumbprint"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	EmbeddedCertData pulumi.Input `pulumi:"embeddedCertData"`
	// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation pulumi.Input `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (HttpLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpLinkedServiceResponse)(nil)).Elem()
}

func (i HttpLinkedServiceResponseArgs) ToHttpLinkedServiceResponseOutput() HttpLinkedServiceResponseOutput {
	return i.ToHttpLinkedServiceResponseOutputWithContext(context.Background())
}

func (i HttpLinkedServiceResponseArgs) ToHttpLinkedServiceResponseOutputWithContext(ctx context.Context) HttpLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpLinkedServiceResponseOutput)
}

// Linked service for an HTTP source.
type HttpLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HttpLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpLinkedServiceResponse)(nil)).Elem()
}

func (o HttpLinkedServiceResponseOutput) ToHttpLinkedServiceResponseOutput() HttpLinkedServiceResponseOutput {
	return o
}

func (o HttpLinkedServiceResponseOutput) ToHttpLinkedServiceResponseOutputWithContext(ctx context.Context) HttpLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o HttpLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to be used to connect to the HTTP server.
func (o HttpLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceResponseOutput) CertThumbprint() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) interface{} { return v.CertThumbprint }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HttpLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o HttpLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceResponseOutput) EmbeddedCertData() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) interface{} { return v.EmbeddedCertData }).(pulumi.AnyOutput)
}

// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
func (o HttpLinkedServiceResponseOutput) EnableServerCertificateValidation() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) interface{} { return v.EnableServerCertificateValidation }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o HttpLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
func (o HttpLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o HttpLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The location of http server.
type HttpServerLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Specify the relativeUrl of http server. Type: string (or Expression with resultType string)
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
}

// HttpServerLocationInput is an input type that accepts HttpServerLocationArgs and HttpServerLocationOutput values.
// You can construct a concrete instance of `HttpServerLocationInput` via:
//
//          HttpServerLocationArgs{...}
type HttpServerLocationInput interface {
	pulumi.Input

	ToHttpServerLocationOutput() HttpServerLocationOutput
	ToHttpServerLocationOutputWithContext(context.Context) HttpServerLocationOutput
}

// The location of http server.
type HttpServerLocationArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Specify the relativeUrl of http server. Type: string (or Expression with resultType string)
	RelativeUrl pulumi.Input `pulumi:"relativeUrl"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HttpServerLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpServerLocation)(nil)).Elem()
}

func (i HttpServerLocationArgs) ToHttpServerLocationOutput() HttpServerLocationOutput {
	return i.ToHttpServerLocationOutputWithContext(context.Background())
}

func (i HttpServerLocationArgs) ToHttpServerLocationOutputWithContext(ctx context.Context) HttpServerLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpServerLocationOutput)
}

// The location of http server.
type HttpServerLocationOutput struct{ *pulumi.OutputState }

func (HttpServerLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpServerLocation)(nil)).Elem()
}

func (o HttpServerLocationOutput) ToHttpServerLocationOutput() HttpServerLocationOutput {
	return o
}

func (o HttpServerLocationOutput) ToHttpServerLocationOutputWithContext(ctx context.Context) HttpServerLocationOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o HttpServerLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpServerLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o HttpServerLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpServerLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Specify the relativeUrl of http server. Type: string (or Expression with resultType string)
func (o HttpServerLocationOutput) RelativeUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpServerLocation) interface{} { return v.RelativeUrl }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o HttpServerLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpServerLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The location of http server.
type HttpServerLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Specify the relativeUrl of http server. Type: string (or Expression with resultType string)
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
}

// HttpServerLocationResponseInput is an input type that accepts HttpServerLocationResponseArgs and HttpServerLocationResponseOutput values.
// You can construct a concrete instance of `HttpServerLocationResponseInput` via:
//
//          HttpServerLocationResponseArgs{...}
type HttpServerLocationResponseInput interface {
	pulumi.Input

	ToHttpServerLocationResponseOutput() HttpServerLocationResponseOutput
	ToHttpServerLocationResponseOutputWithContext(context.Context) HttpServerLocationResponseOutput
}

// The location of http server.
type HttpServerLocationResponseArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Specify the relativeUrl of http server. Type: string (or Expression with resultType string)
	RelativeUrl pulumi.Input `pulumi:"relativeUrl"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HttpServerLocationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpServerLocationResponse)(nil)).Elem()
}

func (i HttpServerLocationResponseArgs) ToHttpServerLocationResponseOutput() HttpServerLocationResponseOutput {
	return i.ToHttpServerLocationResponseOutputWithContext(context.Background())
}

func (i HttpServerLocationResponseArgs) ToHttpServerLocationResponseOutputWithContext(ctx context.Context) HttpServerLocationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpServerLocationResponseOutput)
}

// The location of http server.
type HttpServerLocationResponseOutput struct{ *pulumi.OutputState }

func (HttpServerLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpServerLocationResponse)(nil)).Elem()
}

func (o HttpServerLocationResponseOutput) ToHttpServerLocationResponseOutput() HttpServerLocationResponseOutput {
	return o
}

func (o HttpServerLocationResponseOutput) ToHttpServerLocationResponseOutputWithContext(ctx context.Context) HttpServerLocationResponseOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o HttpServerLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpServerLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o HttpServerLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpServerLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Specify the relativeUrl of http server. Type: string (or Expression with resultType string)
func (o HttpServerLocationResponseOutput) RelativeUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpServerLocationResponse) interface{} { return v.RelativeUrl }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o HttpServerLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpServerLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Hubspot Service linked service.
type HubspotLinkedService struct {
	// The access token obtained when initially authenticating your OAuth integration.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your Hubspot application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your Hubspot application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The refresh token obtained when initially authenticating your OAuth integration.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// HubspotLinkedServiceInput is an input type that accepts HubspotLinkedServiceArgs and HubspotLinkedServiceOutput values.
// You can construct a concrete instance of `HubspotLinkedServiceInput` via:
//
//          HubspotLinkedServiceArgs{...}
type HubspotLinkedServiceInput interface {
	pulumi.Input

	ToHubspotLinkedServiceOutput() HubspotLinkedServiceOutput
	ToHubspotLinkedServiceOutputWithContext(context.Context) HubspotLinkedServiceOutput
}

// Hubspot Service linked service.
type HubspotLinkedServiceArgs struct {
	// The access token obtained when initially authenticating your OAuth integration.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The client ID associated with your Hubspot application.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret associated with your Hubspot application.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The refresh token obtained when initially authenticating your OAuth integration.
	RefreshToken pulumi.Input `pulumi:"refreshToken"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (HubspotLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotLinkedService)(nil)).Elem()
}

func (i HubspotLinkedServiceArgs) ToHubspotLinkedServiceOutput() HubspotLinkedServiceOutput {
	return i.ToHubspotLinkedServiceOutputWithContext(context.Background())
}

func (i HubspotLinkedServiceArgs) ToHubspotLinkedServiceOutputWithContext(ctx context.Context) HubspotLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubspotLinkedServiceOutput)
}

// Hubspot Service linked service.
type HubspotLinkedServiceOutput struct{ *pulumi.OutputState }

func (HubspotLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotLinkedService)(nil)).Elem()
}

func (o HubspotLinkedServiceOutput) ToHubspotLinkedServiceOutput() HubspotLinkedServiceOutput {
	return o
}

func (o HubspotLinkedServiceOutput) ToHubspotLinkedServiceOutputWithContext(ctx context.Context) HubspotLinkedServiceOutput {
	return o
}

// The access token obtained when initially authenticating your OAuth integration.
func (o HubspotLinkedServiceOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedService) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o HubspotLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HubspotLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with your Hubspot application.
func (o HubspotLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with your Hubspot application.
func (o HubspotLinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HubspotLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v HubspotLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o HubspotLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubspotLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HubspotLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o HubspotLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HubspotLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The refresh token obtained when initially authenticating your OAuth integration.
func (o HubspotLinkedServiceOutput) RefreshToken() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedService) interface{} { return v.RefreshToken }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o HubspotLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HubspotLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o HubspotLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o HubspotLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o HubspotLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Hubspot Service linked service.
type HubspotLinkedServiceResponse struct {
	// The access token obtained when initially authenticating your OAuth integration.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your Hubspot application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your Hubspot application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The refresh token obtained when initially authenticating your OAuth integration.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// HubspotLinkedServiceResponseInput is an input type that accepts HubspotLinkedServiceResponseArgs and HubspotLinkedServiceResponseOutput values.
// You can construct a concrete instance of `HubspotLinkedServiceResponseInput` via:
//
//          HubspotLinkedServiceResponseArgs{...}
type HubspotLinkedServiceResponseInput interface {
	pulumi.Input

	ToHubspotLinkedServiceResponseOutput() HubspotLinkedServiceResponseOutput
	ToHubspotLinkedServiceResponseOutputWithContext(context.Context) HubspotLinkedServiceResponseOutput
}

// Hubspot Service linked service.
type HubspotLinkedServiceResponseArgs struct {
	// The access token obtained when initially authenticating your OAuth integration.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The client ID associated with your Hubspot application.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret associated with your Hubspot application.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The refresh token obtained when initially authenticating your OAuth integration.
	RefreshToken pulumi.Input `pulumi:"refreshToken"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (HubspotLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotLinkedServiceResponse)(nil)).Elem()
}

func (i HubspotLinkedServiceResponseArgs) ToHubspotLinkedServiceResponseOutput() HubspotLinkedServiceResponseOutput {
	return i.ToHubspotLinkedServiceResponseOutputWithContext(context.Background())
}

func (i HubspotLinkedServiceResponseArgs) ToHubspotLinkedServiceResponseOutputWithContext(ctx context.Context) HubspotLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubspotLinkedServiceResponseOutput)
}

// Hubspot Service linked service.
type HubspotLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HubspotLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotLinkedServiceResponse)(nil)).Elem()
}

func (o HubspotLinkedServiceResponseOutput) ToHubspotLinkedServiceResponseOutput() HubspotLinkedServiceResponseOutput {
	return o
}

func (o HubspotLinkedServiceResponseOutput) ToHubspotLinkedServiceResponseOutputWithContext(ctx context.Context) HubspotLinkedServiceResponseOutput {
	return o
}

// The access token obtained when initially authenticating your OAuth integration.
func (o HubspotLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o HubspotLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with your Hubspot application.
func (o HubspotLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with your Hubspot application.
func (o HubspotLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HubspotLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o HubspotLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HubspotLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o HubspotLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The refresh token obtained when initially authenticating your OAuth integration.
func (o HubspotLinkedServiceResponseOutput) RefreshToken() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) interface{} { return v.RefreshToken }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o HubspotLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o HubspotLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o HubspotLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o HubspotLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Hubspot Service dataset.
type HubspotObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// HubspotObjectDatasetInput is an input type that accepts HubspotObjectDatasetArgs and HubspotObjectDatasetOutput values.
// You can construct a concrete instance of `HubspotObjectDatasetInput` via:
//
//          HubspotObjectDatasetArgs{...}
type HubspotObjectDatasetInput interface {
	pulumi.Input

	ToHubspotObjectDatasetOutput() HubspotObjectDatasetOutput
	ToHubspotObjectDatasetOutputWithContext(context.Context) HubspotObjectDatasetOutput
}

// Hubspot Service dataset.
type HubspotObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HubspotObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotObjectDataset)(nil)).Elem()
}

func (i HubspotObjectDatasetArgs) ToHubspotObjectDatasetOutput() HubspotObjectDatasetOutput {
	return i.ToHubspotObjectDatasetOutputWithContext(context.Background())
}

func (i HubspotObjectDatasetArgs) ToHubspotObjectDatasetOutputWithContext(ctx context.Context) HubspotObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubspotObjectDatasetOutput)
}

// Hubspot Service dataset.
type HubspotObjectDatasetOutput struct{ *pulumi.OutputState }

func (HubspotObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotObjectDataset)(nil)).Elem()
}

func (o HubspotObjectDatasetOutput) ToHubspotObjectDatasetOutput() HubspotObjectDatasetOutput {
	return o
}

func (o HubspotObjectDatasetOutput) ToHubspotObjectDatasetOutputWithContext(ctx context.Context) HubspotObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o HubspotObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HubspotObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o HubspotObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubspotObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o HubspotObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v HubspotObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o HubspotObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v HubspotObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o HubspotObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HubspotObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o HubspotObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HubspotObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o HubspotObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o HubspotObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HubspotObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Hubspot Service dataset.
type HubspotObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// HubspotObjectDatasetResponseInput is an input type that accepts HubspotObjectDatasetResponseArgs and HubspotObjectDatasetResponseOutput values.
// You can construct a concrete instance of `HubspotObjectDatasetResponseInput` via:
//
//          HubspotObjectDatasetResponseArgs{...}
type HubspotObjectDatasetResponseInput interface {
	pulumi.Input

	ToHubspotObjectDatasetResponseOutput() HubspotObjectDatasetResponseOutput
	ToHubspotObjectDatasetResponseOutputWithContext(context.Context) HubspotObjectDatasetResponseOutput
}

// Hubspot Service dataset.
type HubspotObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HubspotObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotObjectDatasetResponse)(nil)).Elem()
}

func (i HubspotObjectDatasetResponseArgs) ToHubspotObjectDatasetResponseOutput() HubspotObjectDatasetResponseOutput {
	return i.ToHubspotObjectDatasetResponseOutputWithContext(context.Background())
}

func (i HubspotObjectDatasetResponseArgs) ToHubspotObjectDatasetResponseOutputWithContext(ctx context.Context) HubspotObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubspotObjectDatasetResponseOutput)
}

// Hubspot Service dataset.
type HubspotObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (HubspotObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotObjectDatasetResponse)(nil)).Elem()
}

func (o HubspotObjectDatasetResponseOutput) ToHubspotObjectDatasetResponseOutput() HubspotObjectDatasetResponseOutput {
	return o
}

func (o HubspotObjectDatasetResponseOutput) ToHubspotObjectDatasetResponseOutputWithContext(ctx context.Context) HubspotObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o HubspotObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o HubspotObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o HubspotObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o HubspotObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o HubspotObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o HubspotObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HubspotObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o HubspotObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o HubspotObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Impala server linked service.
type ImpalaLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Impala server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name when using UsernameAndPassword.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
	Username interface{} `pulumi:"username"`
}

// ImpalaLinkedServiceInput is an input type that accepts ImpalaLinkedServiceArgs and ImpalaLinkedServiceOutput values.
// You can construct a concrete instance of `ImpalaLinkedServiceInput` via:
//
//          ImpalaLinkedServiceArgs{...}
type ImpalaLinkedServiceInput interface {
	pulumi.Input

	ToImpalaLinkedServiceOutput() ImpalaLinkedServiceOutput
	ToImpalaLinkedServiceOutputWithContext(context.Context) ImpalaLinkedServiceOutput
}

// Impala server linked service.
type ImpalaLinkedServiceArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.Input `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The IP address or host name of the Impala server. (i.e. 192.168.222.160)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name when using UsernameAndPassword.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
	Port pulumi.Input `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
	// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
	Username pulumi.Input `pulumi:"username"`
}

func (ImpalaLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaLinkedService)(nil)).Elem()
}

func (i ImpalaLinkedServiceArgs) ToImpalaLinkedServiceOutput() ImpalaLinkedServiceOutput {
	return i.ToImpalaLinkedServiceOutputWithContext(context.Background())
}

func (i ImpalaLinkedServiceArgs) ToImpalaLinkedServiceOutputWithContext(ctx context.Context) ImpalaLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImpalaLinkedServiceOutput)
}

// Impala server linked service.
type ImpalaLinkedServiceOutput struct{ *pulumi.OutputState }

func (ImpalaLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaLinkedService)(nil)).Elem()
}

func (o ImpalaLinkedServiceOutput) ToImpalaLinkedServiceOutput() ImpalaLinkedServiceOutput {
	return o
}

func (o ImpalaLinkedServiceOutput) ToImpalaLinkedServiceOutputWithContext(ctx context.Context) ImpalaLinkedServiceOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o ImpalaLinkedServiceOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedService) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o ImpalaLinkedServiceOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedService) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o ImpalaLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ImpalaLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to use.
func (o ImpalaLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v ImpalaLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o ImpalaLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v ImpalaLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o ImpalaLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImpalaLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o ImpalaLinkedServiceOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedService) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ImpalaLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The IP address or host name of the Impala server. (i.e. 192.168.222.160)
func (o ImpalaLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ImpalaLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ImpalaLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name when using UsernameAndPassword.
func (o ImpalaLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
func (o ImpalaLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o ImpalaLinkedServiceOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedService) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o ImpalaLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImpalaLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o ImpalaLinkedServiceOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedService) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
func (o ImpalaLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Impala server linked service.
type ImpalaLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Impala server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name when using UsernameAndPassword.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
	Username interface{} `pulumi:"username"`
}

// ImpalaLinkedServiceResponseInput is an input type that accepts ImpalaLinkedServiceResponseArgs and ImpalaLinkedServiceResponseOutput values.
// You can construct a concrete instance of `ImpalaLinkedServiceResponseInput` via:
//
//          ImpalaLinkedServiceResponseArgs{...}
type ImpalaLinkedServiceResponseInput interface {
	pulumi.Input

	ToImpalaLinkedServiceResponseOutput() ImpalaLinkedServiceResponseOutput
	ToImpalaLinkedServiceResponseOutputWithContext(context.Context) ImpalaLinkedServiceResponseOutput
}

// Impala server linked service.
type ImpalaLinkedServiceResponseArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.Input `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The IP address or host name of the Impala server. (i.e. 192.168.222.160)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The password corresponding to the user name when using UsernameAndPassword.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
	Port pulumi.Input `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
	// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
	Username pulumi.Input `pulumi:"username"`
}

func (ImpalaLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaLinkedServiceResponse)(nil)).Elem()
}

func (i ImpalaLinkedServiceResponseArgs) ToImpalaLinkedServiceResponseOutput() ImpalaLinkedServiceResponseOutput {
	return i.ToImpalaLinkedServiceResponseOutputWithContext(context.Background())
}

func (i ImpalaLinkedServiceResponseArgs) ToImpalaLinkedServiceResponseOutputWithContext(ctx context.Context) ImpalaLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImpalaLinkedServiceResponseOutput)
}

// Impala server linked service.
type ImpalaLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ImpalaLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaLinkedServiceResponse)(nil)).Elem()
}

func (o ImpalaLinkedServiceResponseOutput) ToImpalaLinkedServiceResponseOutput() ImpalaLinkedServiceResponseOutput {
	return o
}

func (o ImpalaLinkedServiceResponseOutput) ToImpalaLinkedServiceResponseOutputWithContext(ctx context.Context) ImpalaLinkedServiceResponseOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o ImpalaLinkedServiceResponseOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o ImpalaLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o ImpalaLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to use.
func (o ImpalaLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o ImpalaLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o ImpalaLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o ImpalaLinkedServiceResponseOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ImpalaLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The IP address or host name of the Impala server. (i.e. 192.168.222.160)
func (o ImpalaLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ImpalaLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name when using UsernameAndPassword.
func (o ImpalaLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
func (o ImpalaLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o ImpalaLinkedServiceResponseOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o ImpalaLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o ImpalaLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
func (o ImpalaLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Impala server dataset.
type ImpalaObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Impala. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ImpalaObjectDatasetInput is an input type that accepts ImpalaObjectDatasetArgs and ImpalaObjectDatasetOutput values.
// You can construct a concrete instance of `ImpalaObjectDatasetInput` via:
//
//          ImpalaObjectDatasetArgs{...}
type ImpalaObjectDatasetInput interface {
	pulumi.Input

	ToImpalaObjectDatasetOutput() ImpalaObjectDatasetOutput
	ToImpalaObjectDatasetOutputWithContext(context.Context) ImpalaObjectDatasetOutput
}

// Impala server dataset.
type ImpalaObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Impala. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImpalaObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaObjectDataset)(nil)).Elem()
}

func (i ImpalaObjectDatasetArgs) ToImpalaObjectDatasetOutput() ImpalaObjectDatasetOutput {
	return i.ToImpalaObjectDatasetOutputWithContext(context.Background())
}

func (i ImpalaObjectDatasetArgs) ToImpalaObjectDatasetOutputWithContext(ctx context.Context) ImpalaObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImpalaObjectDatasetOutput)
}

// Impala server dataset.
type ImpalaObjectDatasetOutput struct{ *pulumi.OutputState }

func (ImpalaObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaObjectDataset)(nil)).Elem()
}

func (o ImpalaObjectDatasetOutput) ToImpalaObjectDatasetOutput() ImpalaObjectDatasetOutput {
	return o
}

func (o ImpalaObjectDatasetOutput) ToImpalaObjectDatasetOutputWithContext(ctx context.Context) ImpalaObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ImpalaObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ImpalaObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ImpalaObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o ImpalaObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o ImpalaObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ImpalaObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ImpalaObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Impala. Type: string (or Expression with resultType string).
func (o ImpalaObjectDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o ImpalaObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o ImpalaObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Impala server dataset.
type ImpalaObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Impala. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ImpalaObjectDatasetResponseInput is an input type that accepts ImpalaObjectDatasetResponseArgs and ImpalaObjectDatasetResponseOutput values.
// You can construct a concrete instance of `ImpalaObjectDatasetResponseInput` via:
//
//          ImpalaObjectDatasetResponseArgs{...}
type ImpalaObjectDatasetResponseInput interface {
	pulumi.Input

	ToImpalaObjectDatasetResponseOutput() ImpalaObjectDatasetResponseOutput
	ToImpalaObjectDatasetResponseOutputWithContext(context.Context) ImpalaObjectDatasetResponseOutput
}

// Impala server dataset.
type ImpalaObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Impala. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImpalaObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaObjectDatasetResponse)(nil)).Elem()
}

func (i ImpalaObjectDatasetResponseArgs) ToImpalaObjectDatasetResponseOutput() ImpalaObjectDatasetResponseOutput {
	return i.ToImpalaObjectDatasetResponseOutputWithContext(context.Background())
}

func (i ImpalaObjectDatasetResponseArgs) ToImpalaObjectDatasetResponseOutputWithContext(ctx context.Context) ImpalaObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImpalaObjectDatasetResponseOutput)
}

// Impala server dataset.
type ImpalaObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (ImpalaObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaObjectDatasetResponse)(nil)).Elem()
}

func (o ImpalaObjectDatasetResponseOutput) ToImpalaObjectDatasetResponseOutput() ImpalaObjectDatasetResponseOutput {
	return o
}

func (o ImpalaObjectDatasetResponseOutput) ToImpalaObjectDatasetResponseOutputWithContext(ctx context.Context) ImpalaObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ImpalaObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ImpalaObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ImpalaObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o ImpalaObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ImpalaObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ImpalaObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ImpalaObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Impala. Type: string (or Expression with resultType string).
func (o ImpalaObjectDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o ImpalaObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o ImpalaObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Informix linked service.
type InformixLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the Informix as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// InformixLinkedServiceInput is an input type that accepts InformixLinkedServiceArgs and InformixLinkedServiceOutput values.
// You can construct a concrete instance of `InformixLinkedServiceInput` via:
//
//          InformixLinkedServiceArgs{...}
type InformixLinkedServiceInput interface {
	pulumi.Input

	ToInformixLinkedServiceOutput() InformixLinkedServiceOutput
	ToInformixLinkedServiceOutputWithContext(context.Context) InformixLinkedServiceOutput
}

// Informix linked service.
type InformixLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Type of authentication used to connect to the Informix as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential pulumi.Input `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (InformixLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixLinkedService)(nil)).Elem()
}

func (i InformixLinkedServiceArgs) ToInformixLinkedServiceOutput() InformixLinkedServiceOutput {
	return i.ToInformixLinkedServiceOutputWithContext(context.Background())
}

func (i InformixLinkedServiceArgs) ToInformixLinkedServiceOutputWithContext(ctx context.Context) InformixLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InformixLinkedServiceOutput)
}

// Informix linked service.
type InformixLinkedServiceOutput struct{ *pulumi.OutputState }

func (InformixLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixLinkedService)(nil)).Elem()
}

func (o InformixLinkedServiceOutput) ToInformixLinkedServiceOutput() InformixLinkedServiceOutput {
	return o
}

func (o InformixLinkedServiceOutput) ToInformixLinkedServiceOutputWithContext(ctx context.Context) InformixLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o InformixLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v InformixLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the Informix as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
func (o InformixLinkedServiceOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedService) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o InformixLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v InformixLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o InformixLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The access credential portion of the connection string specified in driver-specific property-value format.
func (o InformixLinkedServiceOutput) Credential() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedService) interface{} { return v.Credential }).(pulumi.AnyOutput)
}

// Linked service description.
func (o InformixLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InformixLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o InformixLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o InformixLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v InformixLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for Basic authentication.
func (o InformixLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o InformixLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InformixLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// User name for Basic authentication. Type: string (or Expression with resultType string).
func (o InformixLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Informix linked service.
type InformixLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the Informix as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// InformixLinkedServiceResponseInput is an input type that accepts InformixLinkedServiceResponseArgs and InformixLinkedServiceResponseOutput values.
// You can construct a concrete instance of `InformixLinkedServiceResponseInput` via:
//
//          InformixLinkedServiceResponseArgs{...}
type InformixLinkedServiceResponseInput interface {
	pulumi.Input

	ToInformixLinkedServiceResponseOutput() InformixLinkedServiceResponseOutput
	ToInformixLinkedServiceResponseOutputWithContext(context.Context) InformixLinkedServiceResponseOutput
}

// Informix linked service.
type InformixLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Type of authentication used to connect to the Informix as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential pulumi.Input `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (InformixLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixLinkedServiceResponse)(nil)).Elem()
}

func (i InformixLinkedServiceResponseArgs) ToInformixLinkedServiceResponseOutput() InformixLinkedServiceResponseOutput {
	return i.ToInformixLinkedServiceResponseOutputWithContext(context.Background())
}

func (i InformixLinkedServiceResponseArgs) ToInformixLinkedServiceResponseOutputWithContext(ctx context.Context) InformixLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InformixLinkedServiceResponseOutput)
}

// Informix linked service.
type InformixLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (InformixLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixLinkedServiceResponse)(nil)).Elem()
}

func (o InformixLinkedServiceResponseOutput) ToInformixLinkedServiceResponseOutput() InformixLinkedServiceResponseOutput {
	return o
}

func (o InformixLinkedServiceResponseOutput) ToInformixLinkedServiceResponseOutputWithContext(ctx context.Context) InformixLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o InformixLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the Informix as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
func (o InformixLinkedServiceResponseOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o InformixLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o InformixLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The access credential portion of the connection string specified in driver-specific property-value format.
func (o InformixLinkedServiceResponseOutput) Credential() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) interface{} { return v.Credential }).(pulumi.AnyOutput)
}

// Linked service description.
func (o InformixLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o InformixLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o InformixLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for Basic authentication.
func (o InformixLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o InformixLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name for Basic authentication. Type: string (or Expression with resultType string).
func (o InformixLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The Informix table dataset.
type InformixTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Informix table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// InformixTableDatasetInput is an input type that accepts InformixTableDatasetArgs and InformixTableDatasetOutput values.
// You can construct a concrete instance of `InformixTableDatasetInput` via:
//
//          InformixTableDatasetArgs{...}
type InformixTableDatasetInput interface {
	pulumi.Input

	ToInformixTableDatasetOutput() InformixTableDatasetOutput
	ToInformixTableDatasetOutputWithContext(context.Context) InformixTableDatasetOutput
}

// The Informix table dataset.
type InformixTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The Informix table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (InformixTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixTableDataset)(nil)).Elem()
}

func (i InformixTableDatasetArgs) ToInformixTableDatasetOutput() InformixTableDatasetOutput {
	return i.ToInformixTableDatasetOutputWithContext(context.Background())
}

func (i InformixTableDatasetArgs) ToInformixTableDatasetOutputWithContext(ctx context.Context) InformixTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InformixTableDatasetOutput)
}

// The Informix table dataset.
type InformixTableDatasetOutput struct{ *pulumi.OutputState }

func (InformixTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixTableDataset)(nil)).Elem()
}

func (o InformixTableDatasetOutput) ToInformixTableDatasetOutput() InformixTableDatasetOutput {
	return o
}

func (o InformixTableDatasetOutput) ToInformixTableDatasetOutputWithContext(ctx context.Context) InformixTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o InformixTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v InformixTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o InformixTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InformixTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o InformixTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v InformixTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o InformixTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v InformixTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o InformixTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v InformixTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o InformixTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o InformixTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Informix table name. Type: string (or Expression with resultType string).
func (o InformixTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o InformixTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InformixTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Informix table dataset.
type InformixTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Informix table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// InformixTableDatasetResponseInput is an input type that accepts InformixTableDatasetResponseArgs and InformixTableDatasetResponseOutput values.
// You can construct a concrete instance of `InformixTableDatasetResponseInput` via:
//
//          InformixTableDatasetResponseArgs{...}
type InformixTableDatasetResponseInput interface {
	pulumi.Input

	ToInformixTableDatasetResponseOutput() InformixTableDatasetResponseOutput
	ToInformixTableDatasetResponseOutputWithContext(context.Context) InformixTableDatasetResponseOutput
}

// The Informix table dataset.
type InformixTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The Informix table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (InformixTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixTableDatasetResponse)(nil)).Elem()
}

func (i InformixTableDatasetResponseArgs) ToInformixTableDatasetResponseOutput() InformixTableDatasetResponseOutput {
	return i.ToInformixTableDatasetResponseOutputWithContext(context.Background())
}

func (i InformixTableDatasetResponseArgs) ToInformixTableDatasetResponseOutputWithContext(ctx context.Context) InformixTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InformixTableDatasetResponseOutput)
}

// The Informix table dataset.
type InformixTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (InformixTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixTableDatasetResponse)(nil)).Elem()
}

func (o InformixTableDatasetResponseOutput) ToInformixTableDatasetResponseOutput() InformixTableDatasetResponseOutput {
	return o
}

func (o InformixTableDatasetResponseOutput) ToInformixTableDatasetResponseOutputWithContext(ctx context.Context) InformixTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o InformixTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v InformixTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o InformixTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InformixTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o InformixTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v InformixTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o InformixTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v InformixTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o InformixTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v InformixTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o InformixTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o InformixTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Informix table name. Type: string (or Expression with resultType string).
func (o InformixTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o InformixTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InformixTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputeProperties struct {
	// Data flow properties for managed integration runtime.
	DataFlowProperties *IntegrationRuntimeDataFlowProperties `pulumi:"dataFlowProperties"`
	// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
	Location *string `pulumi:"location"`
	// Maximum parallel executions count per node for managed integration runtime.
	MaxParallelExecutionsPerNode *int `pulumi:"maxParallelExecutionsPerNode"`
	// The node size requirement to managed integration runtime.
	NodeSize *string `pulumi:"nodeSize"`
	// The required number of nodes for managed integration runtime.
	NumberOfNodes *int `pulumi:"numberOfNodes"`
	// VNet properties for managed integration runtime.
	VNetProperties *IntegrationRuntimeVNetProperties `pulumi:"vNetProperties"`
}

// IntegrationRuntimeComputePropertiesInput is an input type that accepts IntegrationRuntimeComputePropertiesArgs and IntegrationRuntimeComputePropertiesOutput values.
// You can construct a concrete instance of `IntegrationRuntimeComputePropertiesInput` via:
//
//          IntegrationRuntimeComputePropertiesArgs{...}
type IntegrationRuntimeComputePropertiesInput interface {
	pulumi.Input

	ToIntegrationRuntimeComputePropertiesOutput() IntegrationRuntimeComputePropertiesOutput
	ToIntegrationRuntimeComputePropertiesOutputWithContext(context.Context) IntegrationRuntimeComputePropertiesOutput
}

// The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputePropertiesArgs struct {
	// Data flow properties for managed integration runtime.
	DataFlowProperties IntegrationRuntimeDataFlowPropertiesPtrInput `pulumi:"dataFlowProperties"`
	// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Maximum parallel executions count per node for managed integration runtime.
	MaxParallelExecutionsPerNode pulumi.IntPtrInput `pulumi:"maxParallelExecutionsPerNode"`
	// The node size requirement to managed integration runtime.
	NodeSize pulumi.StringPtrInput `pulumi:"nodeSize"`
	// The required number of nodes for managed integration runtime.
	NumberOfNodes pulumi.IntPtrInput `pulumi:"numberOfNodes"`
	// VNet properties for managed integration runtime.
	VNetProperties IntegrationRuntimeVNetPropertiesPtrInput `pulumi:"vNetProperties"`
}

func (IntegrationRuntimeComputePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeComputeProperties)(nil)).Elem()
}

func (i IntegrationRuntimeComputePropertiesArgs) ToIntegrationRuntimeComputePropertiesOutput() IntegrationRuntimeComputePropertiesOutput {
	return i.ToIntegrationRuntimeComputePropertiesOutputWithContext(context.Background())
}

func (i IntegrationRuntimeComputePropertiesArgs) ToIntegrationRuntimeComputePropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeComputePropertiesOutput)
}

func (i IntegrationRuntimeComputePropertiesArgs) ToIntegrationRuntimeComputePropertiesPtrOutput() IntegrationRuntimeComputePropertiesPtrOutput {
	return i.ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeComputePropertiesArgs) ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeComputePropertiesOutput).ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(ctx)
}

// IntegrationRuntimeComputePropertiesPtrInput is an input type that accepts IntegrationRuntimeComputePropertiesArgs, IntegrationRuntimeComputePropertiesPtr and IntegrationRuntimeComputePropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeComputePropertiesPtrInput` via:
//
//          IntegrationRuntimeComputePropertiesArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeComputePropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeComputePropertiesPtrOutput() IntegrationRuntimeComputePropertiesPtrOutput
	ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(context.Context) IntegrationRuntimeComputePropertiesPtrOutput
}

type integrationRuntimeComputePropertiesPtrType IntegrationRuntimeComputePropertiesArgs

func IntegrationRuntimeComputePropertiesPtr(v *IntegrationRuntimeComputePropertiesArgs) IntegrationRuntimeComputePropertiesPtrInput {
	return (*integrationRuntimeComputePropertiesPtrType)(v)
}

func (*integrationRuntimeComputePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeComputeProperties)(nil)).Elem()
}

func (i *integrationRuntimeComputePropertiesPtrType) ToIntegrationRuntimeComputePropertiesPtrOutput() IntegrationRuntimeComputePropertiesPtrOutput {
	return i.ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeComputePropertiesPtrType) ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeComputePropertiesPtrOutput)
}

// The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputePropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeComputePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeComputeProperties)(nil)).Elem()
}

func (o IntegrationRuntimeComputePropertiesOutput) ToIntegrationRuntimeComputePropertiesOutput() IntegrationRuntimeComputePropertiesOutput {
	return o
}

func (o IntegrationRuntimeComputePropertiesOutput) ToIntegrationRuntimeComputePropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesOutput {
	return o
}

func (o IntegrationRuntimeComputePropertiesOutput) ToIntegrationRuntimeComputePropertiesPtrOutput() IntegrationRuntimeComputePropertiesPtrOutput {
	return o.ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeComputePropertiesOutput) ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputeProperties) *IntegrationRuntimeComputeProperties {
		return &v
	}).(IntegrationRuntimeComputePropertiesPtrOutput)
}

// Data flow properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesOutput) DataFlowProperties() IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputeProperties) *IntegrationRuntimeDataFlowProperties {
		return v.DataFlowProperties
	}).(IntegrationRuntimeDataFlowPropertiesPtrOutput)
}

// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
func (o IntegrationRuntimeComputePropertiesOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputeProperties) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Maximum parallel executions count per node for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesOutput) MaxParallelExecutionsPerNode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputeProperties) *int { return v.MaxParallelExecutionsPerNode }).(pulumi.IntPtrOutput)
}

// The node size requirement to managed integration runtime.
func (o IntegrationRuntimeComputePropertiesOutput) NodeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputeProperties) *string { return v.NodeSize }).(pulumi.StringPtrOutput)
}

// The required number of nodes for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesOutput) NumberOfNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputeProperties) *int { return v.NumberOfNodes }).(pulumi.IntPtrOutput)
}

// VNet properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesOutput) VNetProperties() IntegrationRuntimeVNetPropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputeProperties) *IntegrationRuntimeVNetProperties { return v.VNetProperties }).(IntegrationRuntimeVNetPropertiesPtrOutput)
}

type IntegrationRuntimeComputePropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeComputePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeComputeProperties)(nil)).Elem()
}

func (o IntegrationRuntimeComputePropertiesPtrOutput) ToIntegrationRuntimeComputePropertiesPtrOutput() IntegrationRuntimeComputePropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeComputePropertiesPtrOutput) ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeComputePropertiesPtrOutput) Elem() IntegrationRuntimeComputePropertiesOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputeProperties) IntegrationRuntimeComputeProperties { return *v }).(IntegrationRuntimeComputePropertiesOutput)
}

// Data flow properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesPtrOutput) DataFlowProperties() IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputeProperties) *IntegrationRuntimeDataFlowProperties {
		if v == nil {
			return nil
		}
		return v.DataFlowProperties
	}).(IntegrationRuntimeDataFlowPropertiesPtrOutput)
}

// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
func (o IntegrationRuntimeComputePropertiesPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputeProperties) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Maximum parallel executions count per node for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesPtrOutput) MaxParallelExecutionsPerNode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputeProperties) *int {
		if v == nil {
			return nil
		}
		return v.MaxParallelExecutionsPerNode
	}).(pulumi.IntPtrOutput)
}

// The node size requirement to managed integration runtime.
func (o IntegrationRuntimeComputePropertiesPtrOutput) NodeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputeProperties) *string {
		if v == nil {
			return nil
		}
		return v.NodeSize
	}).(pulumi.StringPtrOutput)
}

// The required number of nodes for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesPtrOutput) NumberOfNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputeProperties) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfNodes
	}).(pulumi.IntPtrOutput)
}

// VNet properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesPtrOutput) VNetProperties() IntegrationRuntimeVNetPropertiesPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputeProperties) *IntegrationRuntimeVNetProperties {
		if v == nil {
			return nil
		}
		return v.VNetProperties
	}).(IntegrationRuntimeVNetPropertiesPtrOutput)
}

// The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputePropertiesResponse struct {
	// Data flow properties for managed integration runtime.
	DataFlowProperties *IntegrationRuntimeDataFlowPropertiesResponse `pulumi:"dataFlowProperties"`
	// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
	Location *string `pulumi:"location"`
	// Maximum parallel executions count per node for managed integration runtime.
	MaxParallelExecutionsPerNode *int `pulumi:"maxParallelExecutionsPerNode"`
	// The node size requirement to managed integration runtime.
	NodeSize *string `pulumi:"nodeSize"`
	// The required number of nodes for managed integration runtime.
	NumberOfNodes *int `pulumi:"numberOfNodes"`
	// VNet properties for managed integration runtime.
	VNetProperties *IntegrationRuntimeVNetPropertiesResponse `pulumi:"vNetProperties"`
}

// IntegrationRuntimeComputePropertiesResponseInput is an input type that accepts IntegrationRuntimeComputePropertiesResponseArgs and IntegrationRuntimeComputePropertiesResponseOutput values.
// You can construct a concrete instance of `IntegrationRuntimeComputePropertiesResponseInput` via:
//
//          IntegrationRuntimeComputePropertiesResponseArgs{...}
type IntegrationRuntimeComputePropertiesResponseInput interface {
	pulumi.Input

	ToIntegrationRuntimeComputePropertiesResponseOutput() IntegrationRuntimeComputePropertiesResponseOutput
	ToIntegrationRuntimeComputePropertiesResponseOutputWithContext(context.Context) IntegrationRuntimeComputePropertiesResponseOutput
}

// The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputePropertiesResponseArgs struct {
	// Data flow properties for managed integration runtime.
	DataFlowProperties IntegrationRuntimeDataFlowPropertiesResponsePtrInput `pulumi:"dataFlowProperties"`
	// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Maximum parallel executions count per node for managed integration runtime.
	MaxParallelExecutionsPerNode pulumi.IntPtrInput `pulumi:"maxParallelExecutionsPerNode"`
	// The node size requirement to managed integration runtime.
	NodeSize pulumi.StringPtrInput `pulumi:"nodeSize"`
	// The required number of nodes for managed integration runtime.
	NumberOfNodes pulumi.IntPtrInput `pulumi:"numberOfNodes"`
	// VNet properties for managed integration runtime.
	VNetProperties IntegrationRuntimeVNetPropertiesResponsePtrInput `pulumi:"vNetProperties"`
}

func (IntegrationRuntimeComputePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeComputePropertiesResponse)(nil)).Elem()
}

func (i IntegrationRuntimeComputePropertiesResponseArgs) ToIntegrationRuntimeComputePropertiesResponseOutput() IntegrationRuntimeComputePropertiesResponseOutput {
	return i.ToIntegrationRuntimeComputePropertiesResponseOutputWithContext(context.Background())
}

func (i IntegrationRuntimeComputePropertiesResponseArgs) ToIntegrationRuntimeComputePropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeComputePropertiesResponseOutput)
}

func (i IntegrationRuntimeComputePropertiesResponseArgs) ToIntegrationRuntimeComputePropertiesResponsePtrOutput() IntegrationRuntimeComputePropertiesResponsePtrOutput {
	return i.ToIntegrationRuntimeComputePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeComputePropertiesResponseArgs) ToIntegrationRuntimeComputePropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeComputePropertiesResponseOutput).ToIntegrationRuntimeComputePropertiesResponsePtrOutputWithContext(ctx)
}

// IntegrationRuntimeComputePropertiesResponsePtrInput is an input type that accepts IntegrationRuntimeComputePropertiesResponseArgs, IntegrationRuntimeComputePropertiesResponsePtr and IntegrationRuntimeComputePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeComputePropertiesResponsePtrInput` via:
//
//          IntegrationRuntimeComputePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeComputePropertiesResponsePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeComputePropertiesResponsePtrOutput() IntegrationRuntimeComputePropertiesResponsePtrOutput
	ToIntegrationRuntimeComputePropertiesResponsePtrOutputWithContext(context.Context) IntegrationRuntimeComputePropertiesResponsePtrOutput
}

type integrationRuntimeComputePropertiesResponsePtrType IntegrationRuntimeComputePropertiesResponseArgs

func IntegrationRuntimeComputePropertiesResponsePtr(v *IntegrationRuntimeComputePropertiesResponseArgs) IntegrationRuntimeComputePropertiesResponsePtrInput {
	return (*integrationRuntimeComputePropertiesResponsePtrType)(v)
}

func (*integrationRuntimeComputePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeComputePropertiesResponse)(nil)).Elem()
}

func (i *integrationRuntimeComputePropertiesResponsePtrType) ToIntegrationRuntimeComputePropertiesResponsePtrOutput() IntegrationRuntimeComputePropertiesResponsePtrOutput {
	return i.ToIntegrationRuntimeComputePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeComputePropertiesResponsePtrType) ToIntegrationRuntimeComputePropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeComputePropertiesResponsePtrOutput)
}

// The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputePropertiesResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeComputePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeComputePropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeComputePropertiesResponseOutput) ToIntegrationRuntimeComputePropertiesResponseOutput() IntegrationRuntimeComputePropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeComputePropertiesResponseOutput) ToIntegrationRuntimeComputePropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeComputePropertiesResponseOutput) ToIntegrationRuntimeComputePropertiesResponsePtrOutput() IntegrationRuntimeComputePropertiesResponsePtrOutput {
	return o.ToIntegrationRuntimeComputePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeComputePropertiesResponseOutput) ToIntegrationRuntimeComputePropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *IntegrationRuntimeComputePropertiesResponse {
		return &v
	}).(IntegrationRuntimeComputePropertiesResponsePtrOutput)
}

// Data flow properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponseOutput) DataFlowProperties() IntegrationRuntimeDataFlowPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *IntegrationRuntimeDataFlowPropertiesResponse {
		return v.DataFlowProperties
	}).(IntegrationRuntimeDataFlowPropertiesResponsePtrOutput)
}

// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
func (o IntegrationRuntimeComputePropertiesResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Maximum parallel executions count per node for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponseOutput) MaxParallelExecutionsPerNode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *int { return v.MaxParallelExecutionsPerNode }).(pulumi.IntPtrOutput)
}

// The node size requirement to managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponseOutput) NodeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *string { return v.NodeSize }).(pulumi.StringPtrOutput)
}

// The required number of nodes for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponseOutput) NumberOfNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *int { return v.NumberOfNodes }).(pulumi.IntPtrOutput)
}

// VNet properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponseOutput) VNetProperties() IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *IntegrationRuntimeVNetPropertiesResponse {
		return v.VNetProperties
	}).(IntegrationRuntimeVNetPropertiesResponsePtrOutput)
}

type IntegrationRuntimeComputePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeComputePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeComputePropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) ToIntegrationRuntimeComputePropertiesResponsePtrOutput() IntegrationRuntimeComputePropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) ToIntegrationRuntimeComputePropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) Elem() IntegrationRuntimeComputePropertiesResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) IntegrationRuntimeComputePropertiesResponse {
		return *v
	}).(IntegrationRuntimeComputePropertiesResponseOutput)
}

// Data flow properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) DataFlowProperties() IntegrationRuntimeDataFlowPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) *IntegrationRuntimeDataFlowPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.DataFlowProperties
	}).(IntegrationRuntimeDataFlowPropertiesResponsePtrOutput)
}

// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Maximum parallel executions count per node for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) MaxParallelExecutionsPerNode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxParallelExecutionsPerNode
	}).(pulumi.IntPtrOutput)
}

// The node size requirement to managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) NodeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.NodeSize
	}).(pulumi.StringPtrOutput)
}

// The required number of nodes for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) NumberOfNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfNodes
	}).(pulumi.IntPtrOutput)
}

// VNet properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) VNetProperties() IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) *IntegrationRuntimeVNetPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.VNetProperties
	}).(IntegrationRuntimeVNetPropertiesResponsePtrOutput)
}

// Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptProperties struct {
	// The URI of the Azure blob container that contains the custom setup script.
	BlobContainerUri *string `pulumi:"blobContainerUri"`
	// The SAS token of the Azure blob container.
	SasToken *SecureString `pulumi:"sasToken"`
}

// IntegrationRuntimeCustomSetupScriptPropertiesInput is an input type that accepts IntegrationRuntimeCustomSetupScriptPropertiesArgs and IntegrationRuntimeCustomSetupScriptPropertiesOutput values.
// You can construct a concrete instance of `IntegrationRuntimeCustomSetupScriptPropertiesInput` via:
//
//          IntegrationRuntimeCustomSetupScriptPropertiesArgs{...}
type IntegrationRuntimeCustomSetupScriptPropertiesInput interface {
	pulumi.Input

	ToIntegrationRuntimeCustomSetupScriptPropertiesOutput() IntegrationRuntimeCustomSetupScriptPropertiesOutput
	ToIntegrationRuntimeCustomSetupScriptPropertiesOutputWithContext(context.Context) IntegrationRuntimeCustomSetupScriptPropertiesOutput
}

// Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptPropertiesArgs struct {
	// The URI of the Azure blob container that contains the custom setup script.
	BlobContainerUri pulumi.StringPtrInput `pulumi:"blobContainerUri"`
	// The SAS token of the Azure blob container.
	SasToken SecureStringPtrInput `pulumi:"sasToken"`
}

func (IntegrationRuntimeCustomSetupScriptPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeCustomSetupScriptProperties)(nil)).Elem()
}

func (i IntegrationRuntimeCustomSetupScriptPropertiesArgs) ToIntegrationRuntimeCustomSetupScriptPropertiesOutput() IntegrationRuntimeCustomSetupScriptPropertiesOutput {
	return i.ToIntegrationRuntimeCustomSetupScriptPropertiesOutputWithContext(context.Background())
}

func (i IntegrationRuntimeCustomSetupScriptPropertiesArgs) ToIntegrationRuntimeCustomSetupScriptPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeCustomSetupScriptPropertiesOutput)
}

func (i IntegrationRuntimeCustomSetupScriptPropertiesArgs) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return i.ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeCustomSetupScriptPropertiesArgs) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeCustomSetupScriptPropertiesOutput).ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(ctx)
}

// IntegrationRuntimeCustomSetupScriptPropertiesPtrInput is an input type that accepts IntegrationRuntimeCustomSetupScriptPropertiesArgs, IntegrationRuntimeCustomSetupScriptPropertiesPtr and IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeCustomSetupScriptPropertiesPtrInput` via:
//
//          IntegrationRuntimeCustomSetupScriptPropertiesArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeCustomSetupScriptPropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput
	ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(context.Context) IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput
}

type integrationRuntimeCustomSetupScriptPropertiesPtrType IntegrationRuntimeCustomSetupScriptPropertiesArgs

func IntegrationRuntimeCustomSetupScriptPropertiesPtr(v *IntegrationRuntimeCustomSetupScriptPropertiesArgs) IntegrationRuntimeCustomSetupScriptPropertiesPtrInput {
	return (*integrationRuntimeCustomSetupScriptPropertiesPtrType)(v)
}

func (*integrationRuntimeCustomSetupScriptPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeCustomSetupScriptProperties)(nil)).Elem()
}

func (i *integrationRuntimeCustomSetupScriptPropertiesPtrType) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return i.ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeCustomSetupScriptPropertiesPtrType) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput)
}

// Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptPropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeCustomSetupScriptPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeCustomSetupScriptProperties)(nil)).Elem()
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesOutput() IntegrationRuntimeCustomSetupScriptPropertiesOutput {
	return o
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesOutput {
	return o
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return o.ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeCustomSetupScriptProperties) *IntegrationRuntimeCustomSetupScriptProperties {
		return &v
	}).(IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput)
}

// The URI of the Azure blob container that contains the custom setup script.
func (o IntegrationRuntimeCustomSetupScriptPropertiesOutput) BlobContainerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeCustomSetupScriptProperties) *string { return v.BlobContainerUri }).(pulumi.StringPtrOutput)
}

// The SAS token of the Azure blob container.
func (o IntegrationRuntimeCustomSetupScriptPropertiesOutput) SasToken() SecureStringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeCustomSetupScriptProperties) *SecureString { return v.SasToken }).(SecureStringPtrOutput)
}

type IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeCustomSetupScriptProperties)(nil)).Elem()
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput) Elem() IntegrationRuntimeCustomSetupScriptPropertiesOutput {
	return o.ApplyT(func(v *IntegrationRuntimeCustomSetupScriptProperties) IntegrationRuntimeCustomSetupScriptProperties {
		return *v
	}).(IntegrationRuntimeCustomSetupScriptPropertiesOutput)
}

// The URI of the Azure blob container that contains the custom setup script.
func (o IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput) BlobContainerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeCustomSetupScriptProperties) *string {
		if v == nil {
			return nil
		}
		return v.BlobContainerUri
	}).(pulumi.StringPtrOutput)
}

// The SAS token of the Azure blob container.
func (o IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput) SasToken() SecureStringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeCustomSetupScriptProperties) *SecureString {
		if v == nil {
			return nil
		}
		return v.SasToken
	}).(SecureStringPtrOutput)
}

// Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptPropertiesResponse struct {
	// The URI of the Azure blob container that contains the custom setup script.
	BlobContainerUri *string `pulumi:"blobContainerUri"`
	// The SAS token of the Azure blob container.
	SasToken *SecureStringResponse `pulumi:"sasToken"`
}

// IntegrationRuntimeCustomSetupScriptPropertiesResponseInput is an input type that accepts IntegrationRuntimeCustomSetupScriptPropertiesResponseArgs and IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput values.
// You can construct a concrete instance of `IntegrationRuntimeCustomSetupScriptPropertiesResponseInput` via:
//
//          IntegrationRuntimeCustomSetupScriptPropertiesResponseArgs{...}
type IntegrationRuntimeCustomSetupScriptPropertiesResponseInput interface {
	pulumi.Input

	ToIntegrationRuntimeCustomSetupScriptPropertiesResponseOutput() IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput
	ToIntegrationRuntimeCustomSetupScriptPropertiesResponseOutputWithContext(context.Context) IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput
}

// Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptPropertiesResponseArgs struct {
	// The URI of the Azure blob container that contains the custom setup script.
	BlobContainerUri pulumi.StringPtrInput `pulumi:"blobContainerUri"`
	// The SAS token of the Azure blob container.
	SasToken SecureStringResponsePtrInput `pulumi:"sasToken"`
}

func (IntegrationRuntimeCustomSetupScriptPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeCustomSetupScriptPropertiesResponse)(nil)).Elem()
}

func (i IntegrationRuntimeCustomSetupScriptPropertiesResponseArgs) ToIntegrationRuntimeCustomSetupScriptPropertiesResponseOutput() IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput {
	return i.ToIntegrationRuntimeCustomSetupScriptPropertiesResponseOutputWithContext(context.Background())
}

func (i IntegrationRuntimeCustomSetupScriptPropertiesResponseArgs) ToIntegrationRuntimeCustomSetupScriptPropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput)
}

func (i IntegrationRuntimeCustomSetupScriptPropertiesResponseArgs) ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return i.ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeCustomSetupScriptPropertiesResponseArgs) ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput).ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutputWithContext(ctx)
}

// IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrInput is an input type that accepts IntegrationRuntimeCustomSetupScriptPropertiesResponseArgs, IntegrationRuntimeCustomSetupScriptPropertiesResponsePtr and IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrInput` via:
//
//          IntegrationRuntimeCustomSetupScriptPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput
	ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutputWithContext(context.Context) IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput
}

type integrationRuntimeCustomSetupScriptPropertiesResponsePtrType IntegrationRuntimeCustomSetupScriptPropertiesResponseArgs

func IntegrationRuntimeCustomSetupScriptPropertiesResponsePtr(v *IntegrationRuntimeCustomSetupScriptPropertiesResponseArgs) IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrInput {
	return (*integrationRuntimeCustomSetupScriptPropertiesResponsePtrType)(v)
}

func (*integrationRuntimeCustomSetupScriptPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeCustomSetupScriptPropertiesResponse)(nil)).Elem()
}

func (i *integrationRuntimeCustomSetupScriptPropertiesResponsePtrType) ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return i.ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeCustomSetupScriptPropertiesResponsePtrType) ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput)
}

// Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeCustomSetupScriptPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesResponseOutput() IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return o.ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeCustomSetupScriptPropertiesResponse) *IntegrationRuntimeCustomSetupScriptPropertiesResponse {
		return &v
	}).(IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput)
}

// The URI of the Azure blob container that contains the custom setup script.
func (o IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput) BlobContainerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeCustomSetupScriptPropertiesResponse) *string { return v.BlobContainerUri }).(pulumi.StringPtrOutput)
}

// The SAS token of the Azure blob container.
func (o IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput) SasToken() SecureStringResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeCustomSetupScriptPropertiesResponse) *SecureStringResponse { return v.SasToken }).(SecureStringResponsePtrOutput)
}

type IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeCustomSetupScriptPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput) Elem() IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeCustomSetupScriptPropertiesResponse) IntegrationRuntimeCustomSetupScriptPropertiesResponse {
		return *v
	}).(IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput)
}

// The URI of the Azure blob container that contains the custom setup script.
func (o IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput) BlobContainerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeCustomSetupScriptPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.BlobContainerUri
	}).(pulumi.StringPtrOutput)
}

// The SAS token of the Azure blob container.
func (o IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput) SasToken() SecureStringResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeCustomSetupScriptPropertiesResponse) *SecureStringResponse {
		if v == nil {
			return nil
		}
		return v.SasToken
	}).(SecureStringResponsePtrOutput)
}

// Data flow properties for managed integration runtime.
type IntegrationRuntimeDataFlowProperties struct {
	// Compute type of the cluster which will execute data flow job.
	ComputeType *string `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
	CoreCount *int `pulumi:"coreCount"`
	// Time to live (in minutes) setting of the cluster which will execute data flow job.
	TimeToLive *int `pulumi:"timeToLive"`
}

// IntegrationRuntimeDataFlowPropertiesInput is an input type that accepts IntegrationRuntimeDataFlowPropertiesArgs and IntegrationRuntimeDataFlowPropertiesOutput values.
// You can construct a concrete instance of `IntegrationRuntimeDataFlowPropertiesInput` via:
//
//          IntegrationRuntimeDataFlowPropertiesArgs{...}
type IntegrationRuntimeDataFlowPropertiesInput interface {
	pulumi.Input

	ToIntegrationRuntimeDataFlowPropertiesOutput() IntegrationRuntimeDataFlowPropertiesOutput
	ToIntegrationRuntimeDataFlowPropertiesOutputWithContext(context.Context) IntegrationRuntimeDataFlowPropertiesOutput
}

// Data flow properties for managed integration runtime.
type IntegrationRuntimeDataFlowPropertiesArgs struct {
	// Compute type of the cluster which will execute data flow job.
	ComputeType pulumi.StringPtrInput `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
	CoreCount pulumi.IntPtrInput `pulumi:"coreCount"`
	// Time to live (in minutes) setting of the cluster which will execute data flow job.
	TimeToLive pulumi.IntPtrInput `pulumi:"timeToLive"`
}

func (IntegrationRuntimeDataFlowPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDataFlowProperties)(nil)).Elem()
}

func (i IntegrationRuntimeDataFlowPropertiesArgs) ToIntegrationRuntimeDataFlowPropertiesOutput() IntegrationRuntimeDataFlowPropertiesOutput {
	return i.ToIntegrationRuntimeDataFlowPropertiesOutputWithContext(context.Background())
}

func (i IntegrationRuntimeDataFlowPropertiesArgs) ToIntegrationRuntimeDataFlowPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataFlowPropertiesOutput)
}

func (i IntegrationRuntimeDataFlowPropertiesArgs) ToIntegrationRuntimeDataFlowPropertiesPtrOutput() IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return i.ToIntegrationRuntimeDataFlowPropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeDataFlowPropertiesArgs) ToIntegrationRuntimeDataFlowPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataFlowPropertiesOutput).ToIntegrationRuntimeDataFlowPropertiesPtrOutputWithContext(ctx)
}

// IntegrationRuntimeDataFlowPropertiesPtrInput is an input type that accepts IntegrationRuntimeDataFlowPropertiesArgs, IntegrationRuntimeDataFlowPropertiesPtr and IntegrationRuntimeDataFlowPropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeDataFlowPropertiesPtrInput` via:
//
//          IntegrationRuntimeDataFlowPropertiesArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeDataFlowPropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeDataFlowPropertiesPtrOutput() IntegrationRuntimeDataFlowPropertiesPtrOutput
	ToIntegrationRuntimeDataFlowPropertiesPtrOutputWithContext(context.Context) IntegrationRuntimeDataFlowPropertiesPtrOutput
}

type integrationRuntimeDataFlowPropertiesPtrType IntegrationRuntimeDataFlowPropertiesArgs

func IntegrationRuntimeDataFlowPropertiesPtr(v *IntegrationRuntimeDataFlowPropertiesArgs) IntegrationRuntimeDataFlowPropertiesPtrInput {
	return (*integrationRuntimeDataFlowPropertiesPtrType)(v)
}

func (*integrationRuntimeDataFlowPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeDataFlowProperties)(nil)).Elem()
}

func (i *integrationRuntimeDataFlowPropertiesPtrType) ToIntegrationRuntimeDataFlowPropertiesPtrOutput() IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return i.ToIntegrationRuntimeDataFlowPropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeDataFlowPropertiesPtrType) ToIntegrationRuntimeDataFlowPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataFlowPropertiesPtrOutput)
}

// Data flow properties for managed integration runtime.
type IntegrationRuntimeDataFlowPropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataFlowPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDataFlowProperties)(nil)).Elem()
}

func (o IntegrationRuntimeDataFlowPropertiesOutput) ToIntegrationRuntimeDataFlowPropertiesOutput() IntegrationRuntimeDataFlowPropertiesOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesOutput) ToIntegrationRuntimeDataFlowPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesOutput) ToIntegrationRuntimeDataFlowPropertiesPtrOutput() IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return o.ToIntegrationRuntimeDataFlowPropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeDataFlowPropertiesOutput) ToIntegrationRuntimeDataFlowPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowProperties) *IntegrationRuntimeDataFlowProperties {
		return &v
	}).(IntegrationRuntimeDataFlowPropertiesPtrOutput)
}

// Compute type of the cluster which will execute data flow job.
func (o IntegrationRuntimeDataFlowPropertiesOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowProperties) *string { return v.ComputeType }).(pulumi.StringPtrOutput)
}

// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
func (o IntegrationRuntimeDataFlowPropertiesOutput) CoreCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowProperties) *int { return v.CoreCount }).(pulumi.IntPtrOutput)
}

// Time to live (in minutes) setting of the cluster which will execute data flow job.
func (o IntegrationRuntimeDataFlowPropertiesOutput) TimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowProperties) *int { return v.TimeToLive }).(pulumi.IntPtrOutput)
}

type IntegrationRuntimeDataFlowPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataFlowPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeDataFlowProperties)(nil)).Elem()
}

func (o IntegrationRuntimeDataFlowPropertiesPtrOutput) ToIntegrationRuntimeDataFlowPropertiesPtrOutput() IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesPtrOutput) ToIntegrationRuntimeDataFlowPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesPtrOutput) Elem() IntegrationRuntimeDataFlowPropertiesOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowProperties) IntegrationRuntimeDataFlowProperties { return *v }).(IntegrationRuntimeDataFlowPropertiesOutput)
}

// Compute type of the cluster which will execute data flow job.
func (o IntegrationRuntimeDataFlowPropertiesPtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowProperties) *string {
		if v == nil {
			return nil
		}
		return v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
func (o IntegrationRuntimeDataFlowPropertiesPtrOutput) CoreCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowProperties) *int {
		if v == nil {
			return nil
		}
		return v.CoreCount
	}).(pulumi.IntPtrOutput)
}

// Time to live (in minutes) setting of the cluster which will execute data flow job.
func (o IntegrationRuntimeDataFlowPropertiesPtrOutput) TimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowProperties) *int {
		if v == nil {
			return nil
		}
		return v.TimeToLive
	}).(pulumi.IntPtrOutput)
}

// Data flow properties for managed integration runtime.
type IntegrationRuntimeDataFlowPropertiesResponse struct {
	// Compute type of the cluster which will execute data flow job.
	ComputeType *string `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
	CoreCount *int `pulumi:"coreCount"`
	// Time to live (in minutes) setting of the cluster which will execute data flow job.
	TimeToLive *int `pulumi:"timeToLive"`
}

// IntegrationRuntimeDataFlowPropertiesResponseInput is an input type that accepts IntegrationRuntimeDataFlowPropertiesResponseArgs and IntegrationRuntimeDataFlowPropertiesResponseOutput values.
// You can construct a concrete instance of `IntegrationRuntimeDataFlowPropertiesResponseInput` via:
//
//          IntegrationRuntimeDataFlowPropertiesResponseArgs{...}
type IntegrationRuntimeDataFlowPropertiesResponseInput interface {
	pulumi.Input

	ToIntegrationRuntimeDataFlowPropertiesResponseOutput() IntegrationRuntimeDataFlowPropertiesResponseOutput
	ToIntegrationRuntimeDataFlowPropertiesResponseOutputWithContext(context.Context) IntegrationRuntimeDataFlowPropertiesResponseOutput
}

// Data flow properties for managed integration runtime.
type IntegrationRuntimeDataFlowPropertiesResponseArgs struct {
	// Compute type of the cluster which will execute data flow job.
	ComputeType pulumi.StringPtrInput `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
	CoreCount pulumi.IntPtrInput `pulumi:"coreCount"`
	// Time to live (in minutes) setting of the cluster which will execute data flow job.
	TimeToLive pulumi.IntPtrInput `pulumi:"timeToLive"`
}

func (IntegrationRuntimeDataFlowPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDataFlowPropertiesResponse)(nil)).Elem()
}

func (i IntegrationRuntimeDataFlowPropertiesResponseArgs) ToIntegrationRuntimeDataFlowPropertiesResponseOutput() IntegrationRuntimeDataFlowPropertiesResponseOutput {
	return i.ToIntegrationRuntimeDataFlowPropertiesResponseOutputWithContext(context.Background())
}

func (i IntegrationRuntimeDataFlowPropertiesResponseArgs) ToIntegrationRuntimeDataFlowPropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataFlowPropertiesResponseOutput)
}

func (i IntegrationRuntimeDataFlowPropertiesResponseArgs) ToIntegrationRuntimeDataFlowPropertiesResponsePtrOutput() IntegrationRuntimeDataFlowPropertiesResponsePtrOutput {
	return i.ToIntegrationRuntimeDataFlowPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeDataFlowPropertiesResponseArgs) ToIntegrationRuntimeDataFlowPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataFlowPropertiesResponseOutput).ToIntegrationRuntimeDataFlowPropertiesResponsePtrOutputWithContext(ctx)
}

// IntegrationRuntimeDataFlowPropertiesResponsePtrInput is an input type that accepts IntegrationRuntimeDataFlowPropertiesResponseArgs, IntegrationRuntimeDataFlowPropertiesResponsePtr and IntegrationRuntimeDataFlowPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeDataFlowPropertiesResponsePtrInput` via:
//
//          IntegrationRuntimeDataFlowPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeDataFlowPropertiesResponsePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeDataFlowPropertiesResponsePtrOutput() IntegrationRuntimeDataFlowPropertiesResponsePtrOutput
	ToIntegrationRuntimeDataFlowPropertiesResponsePtrOutputWithContext(context.Context) IntegrationRuntimeDataFlowPropertiesResponsePtrOutput
}

type integrationRuntimeDataFlowPropertiesResponsePtrType IntegrationRuntimeDataFlowPropertiesResponseArgs

func IntegrationRuntimeDataFlowPropertiesResponsePtr(v *IntegrationRuntimeDataFlowPropertiesResponseArgs) IntegrationRuntimeDataFlowPropertiesResponsePtrInput {
	return (*integrationRuntimeDataFlowPropertiesResponsePtrType)(v)
}

func (*integrationRuntimeDataFlowPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeDataFlowPropertiesResponse)(nil)).Elem()
}

func (i *integrationRuntimeDataFlowPropertiesResponsePtrType) ToIntegrationRuntimeDataFlowPropertiesResponsePtrOutput() IntegrationRuntimeDataFlowPropertiesResponsePtrOutput {
	return i.ToIntegrationRuntimeDataFlowPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeDataFlowPropertiesResponsePtrType) ToIntegrationRuntimeDataFlowPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataFlowPropertiesResponsePtrOutput)
}

// Data flow properties for managed integration runtime.
type IntegrationRuntimeDataFlowPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataFlowPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDataFlowPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeDataFlowPropertiesResponseOutput) ToIntegrationRuntimeDataFlowPropertiesResponseOutput() IntegrationRuntimeDataFlowPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesResponseOutput) ToIntegrationRuntimeDataFlowPropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesResponseOutput) ToIntegrationRuntimeDataFlowPropertiesResponsePtrOutput() IntegrationRuntimeDataFlowPropertiesResponsePtrOutput {
	return o.ToIntegrationRuntimeDataFlowPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeDataFlowPropertiesResponseOutput) ToIntegrationRuntimeDataFlowPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowPropertiesResponse) *IntegrationRuntimeDataFlowPropertiesResponse {
		return &v
	}).(IntegrationRuntimeDataFlowPropertiesResponsePtrOutput)
}

// Compute type of the cluster which will execute data flow job.
func (o IntegrationRuntimeDataFlowPropertiesResponseOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowPropertiesResponse) *string { return v.ComputeType }).(pulumi.StringPtrOutput)
}

// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
func (o IntegrationRuntimeDataFlowPropertiesResponseOutput) CoreCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowPropertiesResponse) *int { return v.CoreCount }).(pulumi.IntPtrOutput)
}

// Time to live (in minutes) setting of the cluster which will execute data flow job.
func (o IntegrationRuntimeDataFlowPropertiesResponseOutput) TimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowPropertiesResponse) *int { return v.TimeToLive }).(pulumi.IntPtrOutput)
}

type IntegrationRuntimeDataFlowPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataFlowPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeDataFlowPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeDataFlowPropertiesResponsePtrOutput) ToIntegrationRuntimeDataFlowPropertiesResponsePtrOutput() IntegrationRuntimeDataFlowPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesResponsePtrOutput) ToIntegrationRuntimeDataFlowPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesResponsePtrOutput) Elem() IntegrationRuntimeDataFlowPropertiesResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowPropertiesResponse) IntegrationRuntimeDataFlowPropertiesResponse {
		return *v
	}).(IntegrationRuntimeDataFlowPropertiesResponseOutput)
}

// Compute type of the cluster which will execute data flow job.
func (o IntegrationRuntimeDataFlowPropertiesResponsePtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
func (o IntegrationRuntimeDataFlowPropertiesResponsePtrOutput) CoreCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.CoreCount
	}).(pulumi.IntPtrOutput)
}

// Time to live (in minutes) setting of the cluster which will execute data flow job.
func (o IntegrationRuntimeDataFlowPropertiesResponsePtrOutput) TimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.TimeToLive
	}).(pulumi.IntPtrOutput)
}

// Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyProperties struct {
	// The self-hosted integration runtime reference.
	ConnectVia *EntityReference `pulumi:"connectVia"`
	// The path to contain the staged data in the Blob storage.
	Path *string `pulumi:"path"`
	// The staging linked service reference.
	StagingLinkedService *EntityReference `pulumi:"stagingLinkedService"`
}

// IntegrationRuntimeDataProxyPropertiesInput is an input type that accepts IntegrationRuntimeDataProxyPropertiesArgs and IntegrationRuntimeDataProxyPropertiesOutput values.
// You can construct a concrete instance of `IntegrationRuntimeDataProxyPropertiesInput` via:
//
//          IntegrationRuntimeDataProxyPropertiesArgs{...}
type IntegrationRuntimeDataProxyPropertiesInput interface {
	pulumi.Input

	ToIntegrationRuntimeDataProxyPropertiesOutput() IntegrationRuntimeDataProxyPropertiesOutput
	ToIntegrationRuntimeDataProxyPropertiesOutputWithContext(context.Context) IntegrationRuntimeDataProxyPropertiesOutput
}

// Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyPropertiesArgs struct {
	// The self-hosted integration runtime reference.
	ConnectVia EntityReferencePtrInput `pulumi:"connectVia"`
	// The path to contain the staged data in the Blob storage.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The staging linked service reference.
	StagingLinkedService EntityReferencePtrInput `pulumi:"stagingLinkedService"`
}

func (IntegrationRuntimeDataProxyPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDataProxyProperties)(nil)).Elem()
}

func (i IntegrationRuntimeDataProxyPropertiesArgs) ToIntegrationRuntimeDataProxyPropertiesOutput() IntegrationRuntimeDataProxyPropertiesOutput {
	return i.ToIntegrationRuntimeDataProxyPropertiesOutputWithContext(context.Background())
}

func (i IntegrationRuntimeDataProxyPropertiesArgs) ToIntegrationRuntimeDataProxyPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataProxyPropertiesOutput)
}

func (i IntegrationRuntimeDataProxyPropertiesArgs) ToIntegrationRuntimeDataProxyPropertiesPtrOutput() IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return i.ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeDataProxyPropertiesArgs) ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataProxyPropertiesOutput).ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(ctx)
}

// IntegrationRuntimeDataProxyPropertiesPtrInput is an input type that accepts IntegrationRuntimeDataProxyPropertiesArgs, IntegrationRuntimeDataProxyPropertiesPtr and IntegrationRuntimeDataProxyPropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeDataProxyPropertiesPtrInput` via:
//
//          IntegrationRuntimeDataProxyPropertiesArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeDataProxyPropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeDataProxyPropertiesPtrOutput() IntegrationRuntimeDataProxyPropertiesPtrOutput
	ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(context.Context) IntegrationRuntimeDataProxyPropertiesPtrOutput
}

type integrationRuntimeDataProxyPropertiesPtrType IntegrationRuntimeDataProxyPropertiesArgs

func IntegrationRuntimeDataProxyPropertiesPtr(v *IntegrationRuntimeDataProxyPropertiesArgs) IntegrationRuntimeDataProxyPropertiesPtrInput {
	return (*integrationRuntimeDataProxyPropertiesPtrType)(v)
}

func (*integrationRuntimeDataProxyPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeDataProxyProperties)(nil)).Elem()
}

func (i *integrationRuntimeDataProxyPropertiesPtrType) ToIntegrationRuntimeDataProxyPropertiesPtrOutput() IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return i.ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeDataProxyPropertiesPtrType) ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataProxyPropertiesPtrOutput)
}

// Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyPropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataProxyPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDataProxyProperties)(nil)).Elem()
}

func (o IntegrationRuntimeDataProxyPropertiesOutput) ToIntegrationRuntimeDataProxyPropertiesOutput() IntegrationRuntimeDataProxyPropertiesOutput {
	return o
}

func (o IntegrationRuntimeDataProxyPropertiesOutput) ToIntegrationRuntimeDataProxyPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesOutput {
	return o
}

func (o IntegrationRuntimeDataProxyPropertiesOutput) ToIntegrationRuntimeDataProxyPropertiesPtrOutput() IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return o.ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeDataProxyPropertiesOutput) ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataProxyProperties) *IntegrationRuntimeDataProxyProperties {
		return &v
	}).(IntegrationRuntimeDataProxyPropertiesPtrOutput)
}

// The self-hosted integration runtime reference.
func (o IntegrationRuntimeDataProxyPropertiesOutput) ConnectVia() EntityReferencePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataProxyProperties) *EntityReference { return v.ConnectVia }).(EntityReferencePtrOutput)
}

// The path to contain the staged data in the Blob storage.
func (o IntegrationRuntimeDataProxyPropertiesOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataProxyProperties) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The staging linked service reference.
func (o IntegrationRuntimeDataProxyPropertiesOutput) StagingLinkedService() EntityReferencePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataProxyProperties) *EntityReference { return v.StagingLinkedService }).(EntityReferencePtrOutput)
}

type IntegrationRuntimeDataProxyPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataProxyPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeDataProxyProperties)(nil)).Elem()
}

func (o IntegrationRuntimeDataProxyPropertiesPtrOutput) ToIntegrationRuntimeDataProxyPropertiesPtrOutput() IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeDataProxyPropertiesPtrOutput) ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeDataProxyPropertiesPtrOutput) Elem() IntegrationRuntimeDataProxyPropertiesOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyProperties) IntegrationRuntimeDataProxyProperties { return *v }).(IntegrationRuntimeDataProxyPropertiesOutput)
}

// The self-hosted integration runtime reference.
func (o IntegrationRuntimeDataProxyPropertiesPtrOutput) ConnectVia() EntityReferencePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyProperties) *EntityReference {
		if v == nil {
			return nil
		}
		return v.ConnectVia
	}).(EntityReferencePtrOutput)
}

// The path to contain the staged data in the Blob storage.
func (o IntegrationRuntimeDataProxyPropertiesPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyProperties) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// The staging linked service reference.
func (o IntegrationRuntimeDataProxyPropertiesPtrOutput) StagingLinkedService() EntityReferencePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyProperties) *EntityReference {
		if v == nil {
			return nil
		}
		return v.StagingLinkedService
	}).(EntityReferencePtrOutput)
}

// Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyPropertiesResponse struct {
	// The self-hosted integration runtime reference.
	ConnectVia *EntityReferenceResponse `pulumi:"connectVia"`
	// The path to contain the staged data in the Blob storage.
	Path *string `pulumi:"path"`
	// The staging linked service reference.
	StagingLinkedService *EntityReferenceResponse `pulumi:"stagingLinkedService"`
}

// IntegrationRuntimeDataProxyPropertiesResponseInput is an input type that accepts IntegrationRuntimeDataProxyPropertiesResponseArgs and IntegrationRuntimeDataProxyPropertiesResponseOutput values.
// You can construct a concrete instance of `IntegrationRuntimeDataProxyPropertiesResponseInput` via:
//
//          IntegrationRuntimeDataProxyPropertiesResponseArgs{...}
type IntegrationRuntimeDataProxyPropertiesResponseInput interface {
	pulumi.Input

	ToIntegrationRuntimeDataProxyPropertiesResponseOutput() IntegrationRuntimeDataProxyPropertiesResponseOutput
	ToIntegrationRuntimeDataProxyPropertiesResponseOutputWithContext(context.Context) IntegrationRuntimeDataProxyPropertiesResponseOutput
}

// Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyPropertiesResponseArgs struct {
	// The self-hosted integration runtime reference.
	ConnectVia EntityReferenceResponsePtrInput `pulumi:"connectVia"`
	// The path to contain the staged data in the Blob storage.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The staging linked service reference.
	StagingLinkedService EntityReferenceResponsePtrInput `pulumi:"stagingLinkedService"`
}

func (IntegrationRuntimeDataProxyPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDataProxyPropertiesResponse)(nil)).Elem()
}

func (i IntegrationRuntimeDataProxyPropertiesResponseArgs) ToIntegrationRuntimeDataProxyPropertiesResponseOutput() IntegrationRuntimeDataProxyPropertiesResponseOutput {
	return i.ToIntegrationRuntimeDataProxyPropertiesResponseOutputWithContext(context.Background())
}

func (i IntegrationRuntimeDataProxyPropertiesResponseArgs) ToIntegrationRuntimeDataProxyPropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataProxyPropertiesResponseOutput)
}

func (i IntegrationRuntimeDataProxyPropertiesResponseArgs) ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutput() IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return i.ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeDataProxyPropertiesResponseArgs) ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataProxyPropertiesResponseOutput).ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutputWithContext(ctx)
}

// IntegrationRuntimeDataProxyPropertiesResponsePtrInput is an input type that accepts IntegrationRuntimeDataProxyPropertiesResponseArgs, IntegrationRuntimeDataProxyPropertiesResponsePtr and IntegrationRuntimeDataProxyPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeDataProxyPropertiesResponsePtrInput` via:
//
//          IntegrationRuntimeDataProxyPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeDataProxyPropertiesResponsePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutput() IntegrationRuntimeDataProxyPropertiesResponsePtrOutput
	ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutputWithContext(context.Context) IntegrationRuntimeDataProxyPropertiesResponsePtrOutput
}

type integrationRuntimeDataProxyPropertiesResponsePtrType IntegrationRuntimeDataProxyPropertiesResponseArgs

func IntegrationRuntimeDataProxyPropertiesResponsePtr(v *IntegrationRuntimeDataProxyPropertiesResponseArgs) IntegrationRuntimeDataProxyPropertiesResponsePtrInput {
	return (*integrationRuntimeDataProxyPropertiesResponsePtrType)(v)
}

func (*integrationRuntimeDataProxyPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeDataProxyPropertiesResponse)(nil)).Elem()
}

func (i *integrationRuntimeDataProxyPropertiesResponsePtrType) ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutput() IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return i.ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeDataProxyPropertiesResponsePtrType) ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataProxyPropertiesResponsePtrOutput)
}

// Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataProxyPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDataProxyPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeDataProxyPropertiesResponseOutput) ToIntegrationRuntimeDataProxyPropertiesResponseOutput() IntegrationRuntimeDataProxyPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeDataProxyPropertiesResponseOutput) ToIntegrationRuntimeDataProxyPropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeDataProxyPropertiesResponseOutput) ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutput() IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return o.ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeDataProxyPropertiesResponseOutput) ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataProxyPropertiesResponse) *IntegrationRuntimeDataProxyPropertiesResponse {
		return &v
	}).(IntegrationRuntimeDataProxyPropertiesResponsePtrOutput)
}

// The self-hosted integration runtime reference.
func (o IntegrationRuntimeDataProxyPropertiesResponseOutput) ConnectVia() EntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataProxyPropertiesResponse) *EntityReferenceResponse { return v.ConnectVia }).(EntityReferenceResponsePtrOutput)
}

// The path to contain the staged data in the Blob storage.
func (o IntegrationRuntimeDataProxyPropertiesResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataProxyPropertiesResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The staging linked service reference.
func (o IntegrationRuntimeDataProxyPropertiesResponseOutput) StagingLinkedService() EntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataProxyPropertiesResponse) *EntityReferenceResponse {
		return v.StagingLinkedService
	}).(EntityReferenceResponsePtrOutput)
}

type IntegrationRuntimeDataProxyPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeDataProxyPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutput() IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) Elem() IntegrationRuntimeDataProxyPropertiesResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyPropertiesResponse) IntegrationRuntimeDataProxyPropertiesResponse {
		return *v
	}).(IntegrationRuntimeDataProxyPropertiesResponseOutput)
}

// The self-hosted integration runtime reference.
func (o IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) ConnectVia() EntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyPropertiesResponse) *EntityReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ConnectVia
	}).(EntityReferenceResponsePtrOutput)
}

// The path to contain the staged data in the Blob storage.
func (o IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// The staging linked service reference.
func (o IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) StagingLinkedService() EntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyPropertiesResponse) *EntityReferenceResponse {
		if v == nil {
			return nil
		}
		return v.StagingLinkedService
	}).(EntityReferenceResponsePtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReference struct {
	// Arguments for integration runtime.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName string `pulumi:"referenceName"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// IntegrationRuntimeReferenceInput is an input type that accepts IntegrationRuntimeReferenceArgs and IntegrationRuntimeReferenceOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferenceInput` via:
//
//          IntegrationRuntimeReferenceArgs{...}
type IntegrationRuntimeReferenceInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferenceOutput() IntegrationRuntimeReferenceOutput
	ToIntegrationRuntimeReferenceOutputWithContext(context.Context) IntegrationRuntimeReferenceOutput
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceArgs struct {
	// Arguments for integration runtime.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationRuntimeReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReference)(nil)).Elem()
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferenceOutput() IntegrationRuntimeReferenceOutput {
	return i.ToIntegrationRuntimeReferenceOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferenceOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceOutput)
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return i.ToIntegrationRuntimeReferencePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceOutput).ToIntegrationRuntimeReferencePtrOutputWithContext(ctx)
}

// IntegrationRuntimeReferencePtrInput is an input type that accepts IntegrationRuntimeReferenceArgs, IntegrationRuntimeReferencePtr and IntegrationRuntimeReferencePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferencePtrInput` via:
//
//          IntegrationRuntimeReferenceArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeReferencePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput
	ToIntegrationRuntimeReferencePtrOutputWithContext(context.Context) IntegrationRuntimeReferencePtrOutput
}

type integrationRuntimeReferencePtrType IntegrationRuntimeReferenceArgs

func IntegrationRuntimeReferencePtr(v *IntegrationRuntimeReferenceArgs) IntegrationRuntimeReferencePtrInput {
	return (*integrationRuntimeReferencePtrType)(v)
}

func (*integrationRuntimeReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReference)(nil)).Elem()
}

func (i *integrationRuntimeReferencePtrType) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return i.ToIntegrationRuntimeReferencePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeReferencePtrType) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferencePtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReference)(nil)).Elem()
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferenceOutput() IntegrationRuntimeReferenceOutput {
	return o
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferenceOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceOutput {
	return o
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return o.ToIntegrationRuntimeReferencePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeReference) *IntegrationRuntimeReference {
		return &v
	}).(IntegrationRuntimeReferencePtrOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferenceOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v IntegrationRuntimeReference) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReference) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationRuntimeReferencePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReference)(nil)).Elem()
}

func (o IntegrationRuntimeReferencePtrOutput) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return o
}

func (o IntegrationRuntimeReferencePtrOutput) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return o
}

func (o IntegrationRuntimeReferencePtrOutput) Elem() IntegrationRuntimeReferenceOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) IntegrationRuntimeReference { return *v }).(IntegrationRuntimeReferenceOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferencePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferencePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceResponse struct {
	// Arguments for integration runtime.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName string `pulumi:"referenceName"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// IntegrationRuntimeReferenceResponseInput is an input type that accepts IntegrationRuntimeReferenceResponseArgs and IntegrationRuntimeReferenceResponseOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferenceResponseInput` via:
//
//          IntegrationRuntimeReferenceResponseArgs{...}
type IntegrationRuntimeReferenceResponseInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferenceResponseOutput() IntegrationRuntimeReferenceResponseOutput
	ToIntegrationRuntimeReferenceResponseOutputWithContext(context.Context) IntegrationRuntimeReferenceResponseOutput
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceResponseArgs struct {
	// Arguments for integration runtime.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationRuntimeReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (i IntegrationRuntimeReferenceResponseArgs) ToIntegrationRuntimeReferenceResponseOutput() IntegrationRuntimeReferenceResponseOutput {
	return i.ToIntegrationRuntimeReferenceResponseOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceResponseArgs) ToIntegrationRuntimeReferenceResponseOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceResponseOutput)
}

func (i IntegrationRuntimeReferenceResponseArgs) ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput {
	return i.ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceResponseArgs) ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceResponseOutput).ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx)
}

// IntegrationRuntimeReferenceResponsePtrInput is an input type that accepts IntegrationRuntimeReferenceResponseArgs, IntegrationRuntimeReferenceResponsePtr and IntegrationRuntimeReferenceResponsePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferenceResponsePtrInput` via:
//
//          IntegrationRuntimeReferenceResponseArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeReferenceResponsePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput
	ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(context.Context) IntegrationRuntimeReferenceResponsePtrOutput
}

type integrationRuntimeReferenceResponsePtrType IntegrationRuntimeReferenceResponseArgs

func IntegrationRuntimeReferenceResponsePtr(v *IntegrationRuntimeReferenceResponseArgs) IntegrationRuntimeReferenceResponsePtrInput {
	return (*integrationRuntimeReferenceResponsePtrType)(v)
}

func (*integrationRuntimeReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (i *integrationRuntimeReferenceResponsePtrType) ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput {
	return i.ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeReferenceResponsePtrType) ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponseOutput() IntegrationRuntimeReferenceResponseOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponseOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponseOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) *IntegrationRuntimeReferenceResponse {
		return &v
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferenceResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationRuntimeReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (o IntegrationRuntimeReferenceResponsePtrOutput) ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponsePtrOutput) ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponsePtrOutput) Elem() IntegrationRuntimeReferenceResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) IntegrationRuntimeReferenceResponse { return *v }).(IntegrationRuntimeReferenceResponseOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferenceResponsePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfo struct {
	// The password of the administrator user account of the catalog database.
	CatalogAdminPassword *SecureString `pulumi:"catalogAdminPassword"`
	// The administrator user name of catalog database.
	CatalogAdminUserName *string `pulumi:"catalogAdminUserName"`
	// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
	CatalogPricingTier *string `pulumi:"catalogPricingTier"`
	// The catalog database server URL.
	CatalogServerEndpoint *string `pulumi:"catalogServerEndpoint"`
}

// IntegrationRuntimeSsisCatalogInfoInput is an input type that accepts IntegrationRuntimeSsisCatalogInfoArgs and IntegrationRuntimeSsisCatalogInfoOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisCatalogInfoInput` via:
//
//          IntegrationRuntimeSsisCatalogInfoArgs{...}
type IntegrationRuntimeSsisCatalogInfoInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisCatalogInfoOutput() IntegrationRuntimeSsisCatalogInfoOutput
	ToIntegrationRuntimeSsisCatalogInfoOutputWithContext(context.Context) IntegrationRuntimeSsisCatalogInfoOutput
}

// Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfoArgs struct {
	// The password of the administrator user account of the catalog database.
	CatalogAdminPassword SecureStringPtrInput `pulumi:"catalogAdminPassword"`
	// The administrator user name of catalog database.
	CatalogAdminUserName pulumi.StringPtrInput `pulumi:"catalogAdminUserName"`
	// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
	CatalogPricingTier pulumi.StringPtrInput `pulumi:"catalogPricingTier"`
	// The catalog database server URL.
	CatalogServerEndpoint pulumi.StringPtrInput `pulumi:"catalogServerEndpoint"`
}

func (IntegrationRuntimeSsisCatalogInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisCatalogInfo)(nil)).Elem()
}

func (i IntegrationRuntimeSsisCatalogInfoArgs) ToIntegrationRuntimeSsisCatalogInfoOutput() IntegrationRuntimeSsisCatalogInfoOutput {
	return i.ToIntegrationRuntimeSsisCatalogInfoOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisCatalogInfoArgs) ToIntegrationRuntimeSsisCatalogInfoOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisCatalogInfoOutput)
}

func (i IntegrationRuntimeSsisCatalogInfoArgs) ToIntegrationRuntimeSsisCatalogInfoPtrOutput() IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return i.ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisCatalogInfoArgs) ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisCatalogInfoOutput).ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(ctx)
}

// IntegrationRuntimeSsisCatalogInfoPtrInput is an input type that accepts IntegrationRuntimeSsisCatalogInfoArgs, IntegrationRuntimeSsisCatalogInfoPtr and IntegrationRuntimeSsisCatalogInfoPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisCatalogInfoPtrInput` via:
//
//          IntegrationRuntimeSsisCatalogInfoArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeSsisCatalogInfoPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisCatalogInfoPtrOutput() IntegrationRuntimeSsisCatalogInfoPtrOutput
	ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(context.Context) IntegrationRuntimeSsisCatalogInfoPtrOutput
}

type integrationRuntimeSsisCatalogInfoPtrType IntegrationRuntimeSsisCatalogInfoArgs

func IntegrationRuntimeSsisCatalogInfoPtr(v *IntegrationRuntimeSsisCatalogInfoArgs) IntegrationRuntimeSsisCatalogInfoPtrInput {
	return (*integrationRuntimeSsisCatalogInfoPtrType)(v)
}

func (*integrationRuntimeSsisCatalogInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisCatalogInfo)(nil)).Elem()
}

func (i *integrationRuntimeSsisCatalogInfoPtrType) ToIntegrationRuntimeSsisCatalogInfoPtrOutput() IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return i.ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeSsisCatalogInfoPtrType) ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisCatalogInfoPtrOutput)
}

// Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfoOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisCatalogInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisCatalogInfo)(nil)).Elem()
}

func (o IntegrationRuntimeSsisCatalogInfoOutput) ToIntegrationRuntimeSsisCatalogInfoOutput() IntegrationRuntimeSsisCatalogInfoOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoOutput) ToIntegrationRuntimeSsisCatalogInfoOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoOutput) ToIntegrationRuntimeSsisCatalogInfoPtrOutput() IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return o.ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeSsisCatalogInfoOutput) ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfo) *IntegrationRuntimeSsisCatalogInfo {
		return &v
	}).(IntegrationRuntimeSsisCatalogInfoPtrOutput)
}

// The password of the administrator user account of the catalog database.
func (o IntegrationRuntimeSsisCatalogInfoOutput) CatalogAdminPassword() SecureStringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfo) *SecureString { return v.CatalogAdminPassword }).(SecureStringPtrOutput)
}

// The administrator user name of catalog database.
func (o IntegrationRuntimeSsisCatalogInfoOutput) CatalogAdminUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfo) *string { return v.CatalogAdminUserName }).(pulumi.StringPtrOutput)
}

// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
func (o IntegrationRuntimeSsisCatalogInfoOutput) CatalogPricingTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfo) *string { return v.CatalogPricingTier }).(pulumi.StringPtrOutput)
}

// The catalog database server URL.
func (o IntegrationRuntimeSsisCatalogInfoOutput) CatalogServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfo) *string { return v.CatalogServerEndpoint }).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeSsisCatalogInfoPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisCatalogInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisCatalogInfo)(nil)).Elem()
}

func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) ToIntegrationRuntimeSsisCatalogInfoPtrOutput() IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) Elem() IntegrationRuntimeSsisCatalogInfoOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfo) IntegrationRuntimeSsisCatalogInfo { return *v }).(IntegrationRuntimeSsisCatalogInfoOutput)
}

// The password of the administrator user account of the catalog database.
func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) CatalogAdminPassword() SecureStringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfo) *SecureString {
		if v == nil {
			return nil
		}
		return v.CatalogAdminPassword
	}).(SecureStringPtrOutput)
}

// The administrator user name of catalog database.
func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) CatalogAdminUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfo) *string {
		if v == nil {
			return nil
		}
		return v.CatalogAdminUserName
	}).(pulumi.StringPtrOutput)
}

// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) CatalogPricingTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfo) *string {
		if v == nil {
			return nil
		}
		return v.CatalogPricingTier
	}).(pulumi.StringPtrOutput)
}

// The catalog database server URL.
func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) CatalogServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfo) *string {
		if v == nil {
			return nil
		}
		return v.CatalogServerEndpoint
	}).(pulumi.StringPtrOutput)
}

// Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfoResponse struct {
	// The password of the administrator user account of the catalog database.
	CatalogAdminPassword *SecureStringResponse `pulumi:"catalogAdminPassword"`
	// The administrator user name of catalog database.
	CatalogAdminUserName *string `pulumi:"catalogAdminUserName"`
	// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
	CatalogPricingTier *string `pulumi:"catalogPricingTier"`
	// The catalog database server URL.
	CatalogServerEndpoint *string `pulumi:"catalogServerEndpoint"`
}

// IntegrationRuntimeSsisCatalogInfoResponseInput is an input type that accepts IntegrationRuntimeSsisCatalogInfoResponseArgs and IntegrationRuntimeSsisCatalogInfoResponseOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisCatalogInfoResponseInput` via:
//
//          IntegrationRuntimeSsisCatalogInfoResponseArgs{...}
type IntegrationRuntimeSsisCatalogInfoResponseInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisCatalogInfoResponseOutput() IntegrationRuntimeSsisCatalogInfoResponseOutput
	ToIntegrationRuntimeSsisCatalogInfoResponseOutputWithContext(context.Context) IntegrationRuntimeSsisCatalogInfoResponseOutput
}

// Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfoResponseArgs struct {
	// The password of the administrator user account of the catalog database.
	CatalogAdminPassword SecureStringResponsePtrInput `pulumi:"catalogAdminPassword"`
	// The administrator user name of catalog database.
	CatalogAdminUserName pulumi.StringPtrInput `pulumi:"catalogAdminUserName"`
	// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
	CatalogPricingTier pulumi.StringPtrInput `pulumi:"catalogPricingTier"`
	// The catalog database server URL.
	CatalogServerEndpoint pulumi.StringPtrInput `pulumi:"catalogServerEndpoint"`
}

func (IntegrationRuntimeSsisCatalogInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisCatalogInfoResponse)(nil)).Elem()
}

func (i IntegrationRuntimeSsisCatalogInfoResponseArgs) ToIntegrationRuntimeSsisCatalogInfoResponseOutput() IntegrationRuntimeSsisCatalogInfoResponseOutput {
	return i.ToIntegrationRuntimeSsisCatalogInfoResponseOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisCatalogInfoResponseArgs) ToIntegrationRuntimeSsisCatalogInfoResponseOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisCatalogInfoResponseOutput)
}

func (i IntegrationRuntimeSsisCatalogInfoResponseArgs) ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutput() IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return i.ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisCatalogInfoResponseArgs) ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisCatalogInfoResponseOutput).ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutputWithContext(ctx)
}

// IntegrationRuntimeSsisCatalogInfoResponsePtrInput is an input type that accepts IntegrationRuntimeSsisCatalogInfoResponseArgs, IntegrationRuntimeSsisCatalogInfoResponsePtr and IntegrationRuntimeSsisCatalogInfoResponsePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisCatalogInfoResponsePtrInput` via:
//
//          IntegrationRuntimeSsisCatalogInfoResponseArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeSsisCatalogInfoResponsePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutput() IntegrationRuntimeSsisCatalogInfoResponsePtrOutput
	ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutputWithContext(context.Context) IntegrationRuntimeSsisCatalogInfoResponsePtrOutput
}

type integrationRuntimeSsisCatalogInfoResponsePtrType IntegrationRuntimeSsisCatalogInfoResponseArgs

func IntegrationRuntimeSsisCatalogInfoResponsePtr(v *IntegrationRuntimeSsisCatalogInfoResponseArgs) IntegrationRuntimeSsisCatalogInfoResponsePtrInput {
	return (*integrationRuntimeSsisCatalogInfoResponsePtrType)(v)
}

func (*integrationRuntimeSsisCatalogInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisCatalogInfoResponse)(nil)).Elem()
}

func (i *integrationRuntimeSsisCatalogInfoResponsePtrType) ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutput() IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return i.ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeSsisCatalogInfoResponsePtrType) ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisCatalogInfoResponsePtrOutput)
}

// Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfoResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisCatalogInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisCatalogInfoResponse)(nil)).Elem()
}

func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) ToIntegrationRuntimeSsisCatalogInfoResponseOutput() IntegrationRuntimeSsisCatalogInfoResponseOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) ToIntegrationRuntimeSsisCatalogInfoResponseOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoResponseOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutput() IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return o.ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfoResponse) *IntegrationRuntimeSsisCatalogInfoResponse {
		return &v
	}).(IntegrationRuntimeSsisCatalogInfoResponsePtrOutput)
}

// The password of the administrator user account of the catalog database.
func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) CatalogAdminPassword() SecureStringResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfoResponse) *SecureStringResponse { return v.CatalogAdminPassword }).(SecureStringResponsePtrOutput)
}

// The administrator user name of catalog database.
func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) CatalogAdminUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfoResponse) *string { return v.CatalogAdminUserName }).(pulumi.StringPtrOutput)
}

// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) CatalogPricingTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfoResponse) *string { return v.CatalogPricingTier }).(pulumi.StringPtrOutput)
}

// The catalog database server URL.
func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) CatalogServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfoResponse) *string { return v.CatalogServerEndpoint }).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeSsisCatalogInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisCatalogInfoResponse)(nil)).Elem()
}

func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutput() IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) Elem() IntegrationRuntimeSsisCatalogInfoResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfoResponse) IntegrationRuntimeSsisCatalogInfoResponse {
		return *v
	}).(IntegrationRuntimeSsisCatalogInfoResponseOutput)
}

// The password of the administrator user account of the catalog database.
func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) CatalogAdminPassword() SecureStringResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfoResponse) *SecureStringResponse {
		if v == nil {
			return nil
		}
		return v.CatalogAdminPassword
	}).(SecureStringResponsePtrOutput)
}

// The administrator user name of catalog database.
func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) CatalogAdminUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.CatalogAdminUserName
	}).(pulumi.StringPtrOutput)
}

// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) CatalogPricingTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.CatalogPricingTier
	}).(pulumi.StringPtrOutput)
}

// The catalog database server URL.
func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) CatalogServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.CatalogServerEndpoint
	}).(pulumi.StringPtrOutput)
}

// SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisProperties struct {
	// Catalog information for managed dedicated integration runtime.
	CatalogInfo *IntegrationRuntimeSsisCatalogInfo `pulumi:"catalogInfo"`
	// Custom setup script properties for a managed dedicated integration runtime.
	CustomSetupScriptProperties *IntegrationRuntimeCustomSetupScriptProperties `pulumi:"customSetupScriptProperties"`
	// Data proxy properties for a managed dedicated integration runtime.
	DataProxyProperties *IntegrationRuntimeDataProxyProperties `pulumi:"dataProxyProperties"`
	// The edition for the SSIS Integration Runtime
	Edition *string `pulumi:"edition"`
	// Custom setup without script properties for a SSIS integration runtime.
	ExpressCustomSetupProperties []interface{} `pulumi:"expressCustomSetupProperties"`
	// License type for bringing your own license scenario.
	LicenseType *string `pulumi:"licenseType"`
	// Package stores for the SSIS Integration Runtime.
	PackageStores []PackageStore `pulumi:"packageStores"`
}

// IntegrationRuntimeSsisPropertiesInput is an input type that accepts IntegrationRuntimeSsisPropertiesArgs and IntegrationRuntimeSsisPropertiesOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisPropertiesInput` via:
//
//          IntegrationRuntimeSsisPropertiesArgs{...}
type IntegrationRuntimeSsisPropertiesInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisPropertiesOutput() IntegrationRuntimeSsisPropertiesOutput
	ToIntegrationRuntimeSsisPropertiesOutputWithContext(context.Context) IntegrationRuntimeSsisPropertiesOutput
}

// SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisPropertiesArgs struct {
	// Catalog information for managed dedicated integration runtime.
	CatalogInfo IntegrationRuntimeSsisCatalogInfoPtrInput `pulumi:"catalogInfo"`
	// Custom setup script properties for a managed dedicated integration runtime.
	CustomSetupScriptProperties IntegrationRuntimeCustomSetupScriptPropertiesPtrInput `pulumi:"customSetupScriptProperties"`
	// Data proxy properties for a managed dedicated integration runtime.
	DataProxyProperties IntegrationRuntimeDataProxyPropertiesPtrInput `pulumi:"dataProxyProperties"`
	// The edition for the SSIS Integration Runtime
	Edition pulumi.StringPtrInput `pulumi:"edition"`
	// Custom setup without script properties for a SSIS integration runtime.
	ExpressCustomSetupProperties pulumi.ArrayInput `pulumi:"expressCustomSetupProperties"`
	// License type for bringing your own license scenario.
	LicenseType pulumi.StringPtrInput `pulumi:"licenseType"`
	// Package stores for the SSIS Integration Runtime.
	PackageStores PackageStoreArrayInput `pulumi:"packageStores"`
}

func (IntegrationRuntimeSsisPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisProperties)(nil)).Elem()
}

func (i IntegrationRuntimeSsisPropertiesArgs) ToIntegrationRuntimeSsisPropertiesOutput() IntegrationRuntimeSsisPropertiesOutput {
	return i.ToIntegrationRuntimeSsisPropertiesOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisPropertiesArgs) ToIntegrationRuntimeSsisPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisPropertiesOutput)
}

func (i IntegrationRuntimeSsisPropertiesArgs) ToIntegrationRuntimeSsisPropertiesPtrOutput() IntegrationRuntimeSsisPropertiesPtrOutput {
	return i.ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisPropertiesArgs) ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisPropertiesOutput).ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(ctx)
}

// IntegrationRuntimeSsisPropertiesPtrInput is an input type that accepts IntegrationRuntimeSsisPropertiesArgs, IntegrationRuntimeSsisPropertiesPtr and IntegrationRuntimeSsisPropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisPropertiesPtrInput` via:
//
//          IntegrationRuntimeSsisPropertiesArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeSsisPropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisPropertiesPtrOutput() IntegrationRuntimeSsisPropertiesPtrOutput
	ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(context.Context) IntegrationRuntimeSsisPropertiesPtrOutput
}

type integrationRuntimeSsisPropertiesPtrType IntegrationRuntimeSsisPropertiesArgs

func IntegrationRuntimeSsisPropertiesPtr(v *IntegrationRuntimeSsisPropertiesArgs) IntegrationRuntimeSsisPropertiesPtrInput {
	return (*integrationRuntimeSsisPropertiesPtrType)(v)
}

func (*integrationRuntimeSsisPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisProperties)(nil)).Elem()
}

func (i *integrationRuntimeSsisPropertiesPtrType) ToIntegrationRuntimeSsisPropertiesPtrOutput() IntegrationRuntimeSsisPropertiesPtrOutput {
	return i.ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeSsisPropertiesPtrType) ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisPropertiesPtrOutput)
}

// SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisPropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisProperties)(nil)).Elem()
}

func (o IntegrationRuntimeSsisPropertiesOutput) ToIntegrationRuntimeSsisPropertiesOutput() IntegrationRuntimeSsisPropertiesOutput {
	return o
}

func (o IntegrationRuntimeSsisPropertiesOutput) ToIntegrationRuntimeSsisPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesOutput {
	return o
}

func (o IntegrationRuntimeSsisPropertiesOutput) ToIntegrationRuntimeSsisPropertiesPtrOutput() IntegrationRuntimeSsisPropertiesPtrOutput {
	return o.ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeSsisPropertiesOutput) ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisProperties) *IntegrationRuntimeSsisProperties {
		return &v
	}).(IntegrationRuntimeSsisPropertiesPtrOutput)
}

// Catalog information for managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesOutput) CatalogInfo() IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisProperties) *IntegrationRuntimeSsisCatalogInfo { return v.CatalogInfo }).(IntegrationRuntimeSsisCatalogInfoPtrOutput)
}

// Custom setup script properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesOutput) CustomSetupScriptProperties() IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisProperties) *IntegrationRuntimeCustomSetupScriptProperties {
		return v.CustomSetupScriptProperties
	}).(IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput)
}

// Data proxy properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesOutput) DataProxyProperties() IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisProperties) *IntegrationRuntimeDataProxyProperties {
		return v.DataProxyProperties
	}).(IntegrationRuntimeDataProxyPropertiesPtrOutput)
}

// The edition for the SSIS Integration Runtime
func (o IntegrationRuntimeSsisPropertiesOutput) Edition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisProperties) *string { return v.Edition }).(pulumi.StringPtrOutput)
}

// Custom setup without script properties for a SSIS integration runtime.
func (o IntegrationRuntimeSsisPropertiesOutput) ExpressCustomSetupProperties() pulumi.ArrayOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisProperties) []interface{} { return v.ExpressCustomSetupProperties }).(pulumi.ArrayOutput)
}

// License type for bringing your own license scenario.
func (o IntegrationRuntimeSsisPropertiesOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisProperties) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// Package stores for the SSIS Integration Runtime.
func (o IntegrationRuntimeSsisPropertiesOutput) PackageStores() PackageStoreArrayOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisProperties) []PackageStore { return v.PackageStores }).(PackageStoreArrayOutput)
}

type IntegrationRuntimeSsisPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisProperties)(nil)).Elem()
}

func (o IntegrationRuntimeSsisPropertiesPtrOutput) ToIntegrationRuntimeSsisPropertiesPtrOutput() IntegrationRuntimeSsisPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeSsisPropertiesPtrOutput) ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeSsisPropertiesPtrOutput) Elem() IntegrationRuntimeSsisPropertiesOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisProperties) IntegrationRuntimeSsisProperties { return *v }).(IntegrationRuntimeSsisPropertiesOutput)
}

// Catalog information for managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesPtrOutput) CatalogInfo() IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisProperties) *IntegrationRuntimeSsisCatalogInfo {
		if v == nil {
			return nil
		}
		return v.CatalogInfo
	}).(IntegrationRuntimeSsisCatalogInfoPtrOutput)
}

// Custom setup script properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesPtrOutput) CustomSetupScriptProperties() IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisProperties) *IntegrationRuntimeCustomSetupScriptProperties {
		if v == nil {
			return nil
		}
		return v.CustomSetupScriptProperties
	}).(IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput)
}

// Data proxy properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesPtrOutput) DataProxyProperties() IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisProperties) *IntegrationRuntimeDataProxyProperties {
		if v == nil {
			return nil
		}
		return v.DataProxyProperties
	}).(IntegrationRuntimeDataProxyPropertiesPtrOutput)
}

// The edition for the SSIS Integration Runtime
func (o IntegrationRuntimeSsisPropertiesPtrOutput) Edition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisProperties) *string {
		if v == nil {
			return nil
		}
		return v.Edition
	}).(pulumi.StringPtrOutput)
}

// Custom setup without script properties for a SSIS integration runtime.
func (o IntegrationRuntimeSsisPropertiesPtrOutput) ExpressCustomSetupProperties() pulumi.ArrayOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisProperties) []interface{} {
		if v == nil {
			return nil
		}
		return v.ExpressCustomSetupProperties
	}).(pulumi.ArrayOutput)
}

// License type for bringing your own license scenario.
func (o IntegrationRuntimeSsisPropertiesPtrOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisProperties) *string {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(pulumi.StringPtrOutput)
}

// Package stores for the SSIS Integration Runtime.
func (o IntegrationRuntimeSsisPropertiesPtrOutput) PackageStores() PackageStoreArrayOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisProperties) []PackageStore {
		if v == nil {
			return nil
		}
		return v.PackageStores
	}).(PackageStoreArrayOutput)
}

// SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisPropertiesResponse struct {
	// Catalog information for managed dedicated integration runtime.
	CatalogInfo *IntegrationRuntimeSsisCatalogInfoResponse `pulumi:"catalogInfo"`
	// Custom setup script properties for a managed dedicated integration runtime.
	CustomSetupScriptProperties *IntegrationRuntimeCustomSetupScriptPropertiesResponse `pulumi:"customSetupScriptProperties"`
	// Data proxy properties for a managed dedicated integration runtime.
	DataProxyProperties *IntegrationRuntimeDataProxyPropertiesResponse `pulumi:"dataProxyProperties"`
	// The edition for the SSIS Integration Runtime
	Edition *string `pulumi:"edition"`
	// Custom setup without script properties for a SSIS integration runtime.
	ExpressCustomSetupProperties []interface{} `pulumi:"expressCustomSetupProperties"`
	// License type for bringing your own license scenario.
	LicenseType *string `pulumi:"licenseType"`
	// Package stores for the SSIS Integration Runtime.
	PackageStores []PackageStoreResponse `pulumi:"packageStores"`
}

// IntegrationRuntimeSsisPropertiesResponseInput is an input type that accepts IntegrationRuntimeSsisPropertiesResponseArgs and IntegrationRuntimeSsisPropertiesResponseOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisPropertiesResponseInput` via:
//
//          IntegrationRuntimeSsisPropertiesResponseArgs{...}
type IntegrationRuntimeSsisPropertiesResponseInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisPropertiesResponseOutput() IntegrationRuntimeSsisPropertiesResponseOutput
	ToIntegrationRuntimeSsisPropertiesResponseOutputWithContext(context.Context) IntegrationRuntimeSsisPropertiesResponseOutput
}

// SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisPropertiesResponseArgs struct {
	// Catalog information for managed dedicated integration runtime.
	CatalogInfo IntegrationRuntimeSsisCatalogInfoResponsePtrInput `pulumi:"catalogInfo"`
	// Custom setup script properties for a managed dedicated integration runtime.
	CustomSetupScriptProperties IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrInput `pulumi:"customSetupScriptProperties"`
	// Data proxy properties for a managed dedicated integration runtime.
	DataProxyProperties IntegrationRuntimeDataProxyPropertiesResponsePtrInput `pulumi:"dataProxyProperties"`
	// The edition for the SSIS Integration Runtime
	Edition pulumi.StringPtrInput `pulumi:"edition"`
	// Custom setup without script properties for a SSIS integration runtime.
	ExpressCustomSetupProperties pulumi.ArrayInput `pulumi:"expressCustomSetupProperties"`
	// License type for bringing your own license scenario.
	LicenseType pulumi.StringPtrInput `pulumi:"licenseType"`
	// Package stores for the SSIS Integration Runtime.
	PackageStores PackageStoreResponseArrayInput `pulumi:"packageStores"`
}

func (IntegrationRuntimeSsisPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisPropertiesResponse)(nil)).Elem()
}

func (i IntegrationRuntimeSsisPropertiesResponseArgs) ToIntegrationRuntimeSsisPropertiesResponseOutput() IntegrationRuntimeSsisPropertiesResponseOutput {
	return i.ToIntegrationRuntimeSsisPropertiesResponseOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisPropertiesResponseArgs) ToIntegrationRuntimeSsisPropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisPropertiesResponseOutput)
}

func (i IntegrationRuntimeSsisPropertiesResponseArgs) ToIntegrationRuntimeSsisPropertiesResponsePtrOutput() IntegrationRuntimeSsisPropertiesResponsePtrOutput {
	return i.ToIntegrationRuntimeSsisPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisPropertiesResponseArgs) ToIntegrationRuntimeSsisPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisPropertiesResponseOutput).ToIntegrationRuntimeSsisPropertiesResponsePtrOutputWithContext(ctx)
}

// IntegrationRuntimeSsisPropertiesResponsePtrInput is an input type that accepts IntegrationRuntimeSsisPropertiesResponseArgs, IntegrationRuntimeSsisPropertiesResponsePtr and IntegrationRuntimeSsisPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisPropertiesResponsePtrInput` via:
//
//          IntegrationRuntimeSsisPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeSsisPropertiesResponsePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisPropertiesResponsePtrOutput() IntegrationRuntimeSsisPropertiesResponsePtrOutput
	ToIntegrationRuntimeSsisPropertiesResponsePtrOutputWithContext(context.Context) IntegrationRuntimeSsisPropertiesResponsePtrOutput
}

type integrationRuntimeSsisPropertiesResponsePtrType IntegrationRuntimeSsisPropertiesResponseArgs

func IntegrationRuntimeSsisPropertiesResponsePtr(v *IntegrationRuntimeSsisPropertiesResponseArgs) IntegrationRuntimeSsisPropertiesResponsePtrInput {
	return (*integrationRuntimeSsisPropertiesResponsePtrType)(v)
}

func (*integrationRuntimeSsisPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisPropertiesResponse)(nil)).Elem()
}

func (i *integrationRuntimeSsisPropertiesResponsePtrType) ToIntegrationRuntimeSsisPropertiesResponsePtrOutput() IntegrationRuntimeSsisPropertiesResponsePtrOutput {
	return i.ToIntegrationRuntimeSsisPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeSsisPropertiesResponsePtrType) ToIntegrationRuntimeSsisPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisPropertiesResponsePtrOutput)
}

// SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeSsisPropertiesResponseOutput) ToIntegrationRuntimeSsisPropertiesResponseOutput() IntegrationRuntimeSsisPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeSsisPropertiesResponseOutput) ToIntegrationRuntimeSsisPropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeSsisPropertiesResponseOutput) ToIntegrationRuntimeSsisPropertiesResponsePtrOutput() IntegrationRuntimeSsisPropertiesResponsePtrOutput {
	return o.ToIntegrationRuntimeSsisPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeSsisPropertiesResponseOutput) ToIntegrationRuntimeSsisPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeSsisPropertiesResponse {
		return &v
	}).(IntegrationRuntimeSsisPropertiesResponsePtrOutput)
}

// Catalog information for managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponseOutput) CatalogInfo() IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeSsisCatalogInfoResponse {
		return v.CatalogInfo
	}).(IntegrationRuntimeSsisCatalogInfoResponsePtrOutput)
}

// Custom setup script properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponseOutput) CustomSetupScriptProperties() IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeCustomSetupScriptPropertiesResponse {
		return v.CustomSetupScriptProperties
	}).(IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput)
}

// Data proxy properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponseOutput) DataProxyProperties() IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeDataProxyPropertiesResponse {
		return v.DataProxyProperties
	}).(IntegrationRuntimeDataProxyPropertiesResponsePtrOutput)
}

// The edition for the SSIS Integration Runtime
func (o IntegrationRuntimeSsisPropertiesResponseOutput) Edition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) *string { return v.Edition }).(pulumi.StringPtrOutput)
}

// Custom setup without script properties for a SSIS integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponseOutput) ExpressCustomSetupProperties() pulumi.ArrayOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) []interface{} { return v.ExpressCustomSetupProperties }).(pulumi.ArrayOutput)
}

// License type for bringing your own license scenario.
func (o IntegrationRuntimeSsisPropertiesResponseOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// Package stores for the SSIS Integration Runtime.
func (o IntegrationRuntimeSsisPropertiesResponseOutput) PackageStores() PackageStoreResponseArrayOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) []PackageStoreResponse { return v.PackageStores }).(PackageStoreResponseArrayOutput)
}

type IntegrationRuntimeSsisPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) ToIntegrationRuntimeSsisPropertiesResponsePtrOutput() IntegrationRuntimeSsisPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) ToIntegrationRuntimeSsisPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) Elem() IntegrationRuntimeSsisPropertiesResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) IntegrationRuntimeSsisPropertiesResponse { return *v }).(IntegrationRuntimeSsisPropertiesResponseOutput)
}

// Catalog information for managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) CatalogInfo() IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeSsisCatalogInfoResponse {
		if v == nil {
			return nil
		}
		return v.CatalogInfo
	}).(IntegrationRuntimeSsisCatalogInfoResponsePtrOutput)
}

// Custom setup script properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) CustomSetupScriptProperties() IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeCustomSetupScriptPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.CustomSetupScriptProperties
	}).(IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput)
}

// Data proxy properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) DataProxyProperties() IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeDataProxyPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.DataProxyProperties
	}).(IntegrationRuntimeDataProxyPropertiesResponsePtrOutput)
}

// The edition for the SSIS Integration Runtime
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) Edition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Edition
	}).(pulumi.StringPtrOutput)
}

// Custom setup without script properties for a SSIS integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) ExpressCustomSetupProperties() pulumi.ArrayOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) []interface{} {
		if v == nil {
			return nil
		}
		return v.ExpressCustomSetupProperties
	}).(pulumi.ArrayOutput)
}

// License type for bringing your own license scenario.
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(pulumi.StringPtrOutput)
}

// Package stores for the SSIS Integration Runtime.
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) PackageStores() PackageStoreResponseArrayOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) []PackageStoreResponse {
		if v == nil {
			return nil
		}
		return v.PackageStores
	}).(PackageStoreResponseArrayOutput)
}

// VNet properties for managed integration runtime.
type IntegrationRuntimeVNetProperties struct {
	// Resource IDs of the public IP addresses that this integration runtime will use.
	PublicIPs []string `pulumi:"publicIPs"`
	// The name of the subnet this integration runtime will join.
	Subnet *string `pulumi:"subnet"`
	// The ID of the VNet that this integration runtime will join.
	VNetId *string `pulumi:"vNetId"`
}

// IntegrationRuntimeVNetPropertiesInput is an input type that accepts IntegrationRuntimeVNetPropertiesArgs and IntegrationRuntimeVNetPropertiesOutput values.
// You can construct a concrete instance of `IntegrationRuntimeVNetPropertiesInput` via:
//
//          IntegrationRuntimeVNetPropertiesArgs{...}
type IntegrationRuntimeVNetPropertiesInput interface {
	pulumi.Input

	ToIntegrationRuntimeVNetPropertiesOutput() IntegrationRuntimeVNetPropertiesOutput
	ToIntegrationRuntimeVNetPropertiesOutputWithContext(context.Context) IntegrationRuntimeVNetPropertiesOutput
}

// VNet properties for managed integration runtime.
type IntegrationRuntimeVNetPropertiesArgs struct {
	// Resource IDs of the public IP addresses that this integration runtime will use.
	PublicIPs pulumi.StringArrayInput `pulumi:"publicIPs"`
	// The name of the subnet this integration runtime will join.
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
	// The ID of the VNet that this integration runtime will join.
	VNetId pulumi.StringPtrInput `pulumi:"vNetId"`
}

func (IntegrationRuntimeVNetPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeVNetProperties)(nil)).Elem()
}

func (i IntegrationRuntimeVNetPropertiesArgs) ToIntegrationRuntimeVNetPropertiesOutput() IntegrationRuntimeVNetPropertiesOutput {
	return i.ToIntegrationRuntimeVNetPropertiesOutputWithContext(context.Background())
}

func (i IntegrationRuntimeVNetPropertiesArgs) ToIntegrationRuntimeVNetPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeVNetPropertiesOutput)
}

func (i IntegrationRuntimeVNetPropertiesArgs) ToIntegrationRuntimeVNetPropertiesPtrOutput() IntegrationRuntimeVNetPropertiesPtrOutput {
	return i.ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeVNetPropertiesArgs) ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeVNetPropertiesOutput).ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(ctx)
}

// IntegrationRuntimeVNetPropertiesPtrInput is an input type that accepts IntegrationRuntimeVNetPropertiesArgs, IntegrationRuntimeVNetPropertiesPtr and IntegrationRuntimeVNetPropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeVNetPropertiesPtrInput` via:
//
//          IntegrationRuntimeVNetPropertiesArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeVNetPropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeVNetPropertiesPtrOutput() IntegrationRuntimeVNetPropertiesPtrOutput
	ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(context.Context) IntegrationRuntimeVNetPropertiesPtrOutput
}

type integrationRuntimeVNetPropertiesPtrType IntegrationRuntimeVNetPropertiesArgs

func IntegrationRuntimeVNetPropertiesPtr(v *IntegrationRuntimeVNetPropertiesArgs) IntegrationRuntimeVNetPropertiesPtrInput {
	return (*integrationRuntimeVNetPropertiesPtrType)(v)
}

func (*integrationRuntimeVNetPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeVNetProperties)(nil)).Elem()
}

func (i *integrationRuntimeVNetPropertiesPtrType) ToIntegrationRuntimeVNetPropertiesPtrOutput() IntegrationRuntimeVNetPropertiesPtrOutput {
	return i.ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeVNetPropertiesPtrType) ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeVNetPropertiesPtrOutput)
}

// VNet properties for managed integration runtime.
type IntegrationRuntimeVNetPropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeVNetPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeVNetProperties)(nil)).Elem()
}

func (o IntegrationRuntimeVNetPropertiesOutput) ToIntegrationRuntimeVNetPropertiesOutput() IntegrationRuntimeVNetPropertiesOutput {
	return o
}

func (o IntegrationRuntimeVNetPropertiesOutput) ToIntegrationRuntimeVNetPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesOutput {
	return o
}

func (o IntegrationRuntimeVNetPropertiesOutput) ToIntegrationRuntimeVNetPropertiesPtrOutput() IntegrationRuntimeVNetPropertiesPtrOutput {
	return o.ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeVNetPropertiesOutput) ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeVNetProperties) *IntegrationRuntimeVNetProperties {
		return &v
	}).(IntegrationRuntimeVNetPropertiesPtrOutput)
}

// Resource IDs of the public IP addresses that this integration runtime will use.
func (o IntegrationRuntimeVNetPropertiesOutput) PublicIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IntegrationRuntimeVNetProperties) []string { return v.PublicIPs }).(pulumi.StringArrayOutput)
}

// The name of the subnet this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeVNetProperties) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

// The ID of the VNet that this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesOutput) VNetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeVNetProperties) *string { return v.VNetId }).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeVNetPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeVNetPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeVNetProperties)(nil)).Elem()
}

func (o IntegrationRuntimeVNetPropertiesPtrOutput) ToIntegrationRuntimeVNetPropertiesPtrOutput() IntegrationRuntimeVNetPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeVNetPropertiesPtrOutput) ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeVNetPropertiesPtrOutput) Elem() IntegrationRuntimeVNetPropertiesOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetProperties) IntegrationRuntimeVNetProperties { return *v }).(IntegrationRuntimeVNetPropertiesOutput)
}

// Resource IDs of the public IP addresses that this integration runtime will use.
func (o IntegrationRuntimeVNetPropertiesPtrOutput) PublicIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetProperties) []string {
		if v == nil {
			return nil
		}
		return v.PublicIPs
	}).(pulumi.StringArrayOutput)
}

// The name of the subnet this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesPtrOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetProperties) *string {
		if v == nil {
			return nil
		}
		return v.Subnet
	}).(pulumi.StringPtrOutput)
}

// The ID of the VNet that this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesPtrOutput) VNetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetProperties) *string {
		if v == nil {
			return nil
		}
		return v.VNetId
	}).(pulumi.StringPtrOutput)
}

// VNet properties for managed integration runtime.
type IntegrationRuntimeVNetPropertiesResponse struct {
	// Resource IDs of the public IP addresses that this integration runtime will use.
	PublicIPs []string `pulumi:"publicIPs"`
	// The name of the subnet this integration runtime will join.
	Subnet *string `pulumi:"subnet"`
	// The ID of the VNet that this integration runtime will join.
	VNetId *string `pulumi:"vNetId"`
}

// IntegrationRuntimeVNetPropertiesResponseInput is an input type that accepts IntegrationRuntimeVNetPropertiesResponseArgs and IntegrationRuntimeVNetPropertiesResponseOutput values.
// You can construct a concrete instance of `IntegrationRuntimeVNetPropertiesResponseInput` via:
//
//          IntegrationRuntimeVNetPropertiesResponseArgs{...}
type IntegrationRuntimeVNetPropertiesResponseInput interface {
	pulumi.Input

	ToIntegrationRuntimeVNetPropertiesResponseOutput() IntegrationRuntimeVNetPropertiesResponseOutput
	ToIntegrationRuntimeVNetPropertiesResponseOutputWithContext(context.Context) IntegrationRuntimeVNetPropertiesResponseOutput
}

// VNet properties for managed integration runtime.
type IntegrationRuntimeVNetPropertiesResponseArgs struct {
	// Resource IDs of the public IP addresses that this integration runtime will use.
	PublicIPs pulumi.StringArrayInput `pulumi:"publicIPs"`
	// The name of the subnet this integration runtime will join.
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
	// The ID of the VNet that this integration runtime will join.
	VNetId pulumi.StringPtrInput `pulumi:"vNetId"`
}

func (IntegrationRuntimeVNetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeVNetPropertiesResponse)(nil)).Elem()
}

func (i IntegrationRuntimeVNetPropertiesResponseArgs) ToIntegrationRuntimeVNetPropertiesResponseOutput() IntegrationRuntimeVNetPropertiesResponseOutput {
	return i.ToIntegrationRuntimeVNetPropertiesResponseOutputWithContext(context.Background())
}

func (i IntegrationRuntimeVNetPropertiesResponseArgs) ToIntegrationRuntimeVNetPropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeVNetPropertiesResponseOutput)
}

func (i IntegrationRuntimeVNetPropertiesResponseArgs) ToIntegrationRuntimeVNetPropertiesResponsePtrOutput() IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return i.ToIntegrationRuntimeVNetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeVNetPropertiesResponseArgs) ToIntegrationRuntimeVNetPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeVNetPropertiesResponseOutput).ToIntegrationRuntimeVNetPropertiesResponsePtrOutputWithContext(ctx)
}

// IntegrationRuntimeVNetPropertiesResponsePtrInput is an input type that accepts IntegrationRuntimeVNetPropertiesResponseArgs, IntegrationRuntimeVNetPropertiesResponsePtr and IntegrationRuntimeVNetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeVNetPropertiesResponsePtrInput` via:
//
//          IntegrationRuntimeVNetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeVNetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeVNetPropertiesResponsePtrOutput() IntegrationRuntimeVNetPropertiesResponsePtrOutput
	ToIntegrationRuntimeVNetPropertiesResponsePtrOutputWithContext(context.Context) IntegrationRuntimeVNetPropertiesResponsePtrOutput
}

type integrationRuntimeVNetPropertiesResponsePtrType IntegrationRuntimeVNetPropertiesResponseArgs

func IntegrationRuntimeVNetPropertiesResponsePtr(v *IntegrationRuntimeVNetPropertiesResponseArgs) IntegrationRuntimeVNetPropertiesResponsePtrInput {
	return (*integrationRuntimeVNetPropertiesResponsePtrType)(v)
}

func (*integrationRuntimeVNetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeVNetPropertiesResponse)(nil)).Elem()
}

func (i *integrationRuntimeVNetPropertiesResponsePtrType) ToIntegrationRuntimeVNetPropertiesResponsePtrOutput() IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return i.ToIntegrationRuntimeVNetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeVNetPropertiesResponsePtrType) ToIntegrationRuntimeVNetPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeVNetPropertiesResponsePtrOutput)
}

// VNet properties for managed integration runtime.
type IntegrationRuntimeVNetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeVNetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeVNetPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeVNetPropertiesResponseOutput) ToIntegrationRuntimeVNetPropertiesResponseOutput() IntegrationRuntimeVNetPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeVNetPropertiesResponseOutput) ToIntegrationRuntimeVNetPropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeVNetPropertiesResponseOutput) ToIntegrationRuntimeVNetPropertiesResponsePtrOutput() IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return o.ToIntegrationRuntimeVNetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeVNetPropertiesResponseOutput) ToIntegrationRuntimeVNetPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeVNetPropertiesResponse) *IntegrationRuntimeVNetPropertiesResponse {
		return &v
	}).(IntegrationRuntimeVNetPropertiesResponsePtrOutput)
}

// Resource IDs of the public IP addresses that this integration runtime will use.
func (o IntegrationRuntimeVNetPropertiesResponseOutput) PublicIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IntegrationRuntimeVNetPropertiesResponse) []string { return v.PublicIPs }).(pulumi.StringArrayOutput)
}

// The name of the subnet this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesResponseOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeVNetPropertiesResponse) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

// The ID of the VNet that this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesResponseOutput) VNetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeVNetPropertiesResponse) *string { return v.VNetId }).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeVNetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeVNetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeVNetPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeVNetPropertiesResponsePtrOutput) ToIntegrationRuntimeVNetPropertiesResponsePtrOutput() IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeVNetPropertiesResponsePtrOutput) ToIntegrationRuntimeVNetPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeVNetPropertiesResponsePtrOutput) Elem() IntegrationRuntimeVNetPropertiesResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetPropertiesResponse) IntegrationRuntimeVNetPropertiesResponse { return *v }).(IntegrationRuntimeVNetPropertiesResponseOutput)
}

// Resource IDs of the public IP addresses that this integration runtime will use.
func (o IntegrationRuntimeVNetPropertiesResponsePtrOutput) PublicIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.PublicIPs
	}).(pulumi.StringArrayOutput)
}

// The name of the subnet this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesResponsePtrOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Subnet
	}).(pulumi.StringPtrOutput)
}

// The ID of the VNet that this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesResponsePtrOutput) VNetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.VNetId
	}).(pulumi.StringPtrOutput)
}

// Jira Service linked service.
type JiraLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Jira service. (e.g. jira.example.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Jira Service.
	Username interface{} `pulumi:"username"`
}

// JiraLinkedServiceInput is an input type that accepts JiraLinkedServiceArgs and JiraLinkedServiceOutput values.
// You can construct a concrete instance of `JiraLinkedServiceInput` via:
//
//          JiraLinkedServiceArgs{...}
type JiraLinkedServiceInput interface {
	pulumi.Input

	ToJiraLinkedServiceOutput() JiraLinkedServiceOutput
	ToJiraLinkedServiceOutputWithContext(context.Context) JiraLinkedServiceOutput
}

// Jira Service linked service.
type JiraLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The IP address or host name of the Jira service. (e.g. jira.example.com)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
	Port pulumi.Input `pulumi:"port"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
	// The user name that you use to access Jira Service.
	Username pulumi.Input `pulumi:"username"`
}

func (JiraLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraLinkedService)(nil)).Elem()
}

func (i JiraLinkedServiceArgs) ToJiraLinkedServiceOutput() JiraLinkedServiceOutput {
	return i.ToJiraLinkedServiceOutputWithContext(context.Background())
}

func (i JiraLinkedServiceArgs) ToJiraLinkedServiceOutputWithContext(ctx context.Context) JiraLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JiraLinkedServiceOutput)
}

// Jira Service linked service.
type JiraLinkedServiceOutput struct{ *pulumi.OutputState }

func (JiraLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraLinkedService)(nil)).Elem()
}

func (o JiraLinkedServiceOutput) ToJiraLinkedServiceOutput() JiraLinkedServiceOutput {
	return o
}

func (o JiraLinkedServiceOutput) ToJiraLinkedServiceOutputWithContext(ctx context.Context) JiraLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o JiraLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v JiraLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o JiraLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v JiraLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o JiraLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JiraLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o JiraLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The IP address or host name of the Jira service. (e.g. jira.example.com)
func (o JiraLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o JiraLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v JiraLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name that you provided in the username field.
func (o JiraLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
func (o JiraLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o JiraLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JiraLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o JiraLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o JiraLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o JiraLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The user name that you use to access Jira Service.
func (o JiraLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Jira Service linked service.
type JiraLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Jira service. (e.g. jira.example.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Jira Service.
	Username interface{} `pulumi:"username"`
}

// JiraLinkedServiceResponseInput is an input type that accepts JiraLinkedServiceResponseArgs and JiraLinkedServiceResponseOutput values.
// You can construct a concrete instance of `JiraLinkedServiceResponseInput` via:
//
//          JiraLinkedServiceResponseArgs{...}
type JiraLinkedServiceResponseInput interface {
	pulumi.Input

	ToJiraLinkedServiceResponseOutput() JiraLinkedServiceResponseOutput
	ToJiraLinkedServiceResponseOutputWithContext(context.Context) JiraLinkedServiceResponseOutput
}

// Jira Service linked service.
type JiraLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The IP address or host name of the Jira service. (e.g. jira.example.com)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
	Port pulumi.Input `pulumi:"port"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
	// The user name that you use to access Jira Service.
	Username pulumi.Input `pulumi:"username"`
}

func (JiraLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraLinkedServiceResponse)(nil)).Elem()
}

func (i JiraLinkedServiceResponseArgs) ToJiraLinkedServiceResponseOutput() JiraLinkedServiceResponseOutput {
	return i.ToJiraLinkedServiceResponseOutputWithContext(context.Background())
}

func (i JiraLinkedServiceResponseArgs) ToJiraLinkedServiceResponseOutputWithContext(ctx context.Context) JiraLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JiraLinkedServiceResponseOutput)
}

// Jira Service linked service.
type JiraLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (JiraLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraLinkedServiceResponse)(nil)).Elem()
}

func (o JiraLinkedServiceResponseOutput) ToJiraLinkedServiceResponseOutput() JiraLinkedServiceResponseOutput {
	return o
}

func (o JiraLinkedServiceResponseOutput) ToJiraLinkedServiceResponseOutputWithContext(ctx context.Context) JiraLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o JiraLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o JiraLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o JiraLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o JiraLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The IP address or host name of the Jira service. (e.g. jira.example.com)
func (o JiraLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o JiraLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name that you provided in the username field.
func (o JiraLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
func (o JiraLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o JiraLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o JiraLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o JiraLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o JiraLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The user name that you use to access Jira Service.
func (o JiraLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Jira Service dataset.
type JiraObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// JiraObjectDatasetInput is an input type that accepts JiraObjectDatasetArgs and JiraObjectDatasetOutput values.
// You can construct a concrete instance of `JiraObjectDatasetInput` via:
//
//          JiraObjectDatasetArgs{...}
type JiraObjectDatasetInput interface {
	pulumi.Input

	ToJiraObjectDatasetOutput() JiraObjectDatasetOutput
	ToJiraObjectDatasetOutputWithContext(context.Context) JiraObjectDatasetOutput
}

// Jira Service dataset.
type JiraObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JiraObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraObjectDataset)(nil)).Elem()
}

func (i JiraObjectDatasetArgs) ToJiraObjectDatasetOutput() JiraObjectDatasetOutput {
	return i.ToJiraObjectDatasetOutputWithContext(context.Background())
}

func (i JiraObjectDatasetArgs) ToJiraObjectDatasetOutputWithContext(ctx context.Context) JiraObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JiraObjectDatasetOutput)
}

// Jira Service dataset.
type JiraObjectDatasetOutput struct{ *pulumi.OutputState }

func (JiraObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraObjectDataset)(nil)).Elem()
}

func (o JiraObjectDatasetOutput) ToJiraObjectDatasetOutput() JiraObjectDatasetOutput {
	return o
}

func (o JiraObjectDatasetOutput) ToJiraObjectDatasetOutputWithContext(ctx context.Context) JiraObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o JiraObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v JiraObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o JiraObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JiraObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o JiraObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v JiraObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o JiraObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v JiraObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o JiraObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v JiraObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o JiraObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o JiraObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o JiraObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o JiraObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JiraObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Jira Service dataset.
type JiraObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// JiraObjectDatasetResponseInput is an input type that accepts JiraObjectDatasetResponseArgs and JiraObjectDatasetResponseOutput values.
// You can construct a concrete instance of `JiraObjectDatasetResponseInput` via:
//
//          JiraObjectDatasetResponseArgs{...}
type JiraObjectDatasetResponseInput interface {
	pulumi.Input

	ToJiraObjectDatasetResponseOutput() JiraObjectDatasetResponseOutput
	ToJiraObjectDatasetResponseOutputWithContext(context.Context) JiraObjectDatasetResponseOutput
}

// Jira Service dataset.
type JiraObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JiraObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraObjectDatasetResponse)(nil)).Elem()
}

func (i JiraObjectDatasetResponseArgs) ToJiraObjectDatasetResponseOutput() JiraObjectDatasetResponseOutput {
	return i.ToJiraObjectDatasetResponseOutputWithContext(context.Background())
}

func (i JiraObjectDatasetResponseArgs) ToJiraObjectDatasetResponseOutputWithContext(ctx context.Context) JiraObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JiraObjectDatasetResponseOutput)
}

// Jira Service dataset.
type JiraObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (JiraObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraObjectDatasetResponse)(nil)).Elem()
}

func (o JiraObjectDatasetResponseOutput) ToJiraObjectDatasetResponseOutput() JiraObjectDatasetResponseOutput {
	return o
}

func (o JiraObjectDatasetResponseOutput) ToJiraObjectDatasetResponseOutputWithContext(ctx context.Context) JiraObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o JiraObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o JiraObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o JiraObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o JiraObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o JiraObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o JiraObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o JiraObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o JiraObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o JiraObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Json dataset.
type JsonDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// JsonDatasetInput is an input type that accepts JsonDatasetArgs and JsonDatasetOutput values.
// You can construct a concrete instance of `JsonDatasetInput` via:
//
//          JsonDatasetArgs{...}
type JsonDatasetInput interface {
	pulumi.Input

	ToJsonDatasetOutput() JsonDatasetOutput
	ToJsonDatasetOutputWithContext(context.Context) JsonDatasetOutput
}

// Json dataset.
type JsonDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName pulumi.Input `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location pulumi.Input `pulumi:"location"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JsonDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonDataset)(nil)).Elem()
}

func (i JsonDatasetArgs) ToJsonDatasetOutput() JsonDatasetOutput {
	return i.ToJsonDatasetOutputWithContext(context.Background())
}

func (i JsonDatasetArgs) ToJsonDatasetOutputWithContext(ctx context.Context) JsonDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonDatasetOutput)
}

// Json dataset.
type JsonDatasetOutput struct{ *pulumi.OutputState }

func (JsonDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonDataset)(nil)).Elem()
}

func (o JsonDatasetOutput) ToJsonDatasetOutput() JsonDatasetOutput {
	return o
}

func (o JsonDatasetOutput) ToJsonDatasetOutputWithContext(ctx context.Context) JsonDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o JsonDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v JsonDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the json dataset.
func (o JsonDatasetOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonDataset) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o JsonDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
func (o JsonDatasetOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonDataset) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o JsonDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v JsonDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o JsonDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v JsonDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The location of the json data storage.
func (o JsonDatasetOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonDataset) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o JsonDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v JsonDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o JsonDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o JsonDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o JsonDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JsonDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Json dataset.
type JsonDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// JsonDatasetResponseInput is an input type that accepts JsonDatasetResponseArgs and JsonDatasetResponseOutput values.
// You can construct a concrete instance of `JsonDatasetResponseInput` via:
//
//          JsonDatasetResponseArgs{...}
type JsonDatasetResponseInput interface {
	pulumi.Input

	ToJsonDatasetResponseOutput() JsonDatasetResponseOutput
	ToJsonDatasetResponseOutputWithContext(context.Context) JsonDatasetResponseOutput
}

// Json dataset.
type JsonDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName pulumi.Input `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location pulumi.Input `pulumi:"location"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JsonDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonDatasetResponse)(nil)).Elem()
}

func (i JsonDatasetResponseArgs) ToJsonDatasetResponseOutput() JsonDatasetResponseOutput {
	return i.ToJsonDatasetResponseOutputWithContext(context.Background())
}

func (i JsonDatasetResponseArgs) ToJsonDatasetResponseOutputWithContext(ctx context.Context) JsonDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonDatasetResponseOutput)
}

// Json dataset.
type JsonDatasetResponseOutput struct{ *pulumi.OutputState }

func (JsonDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonDatasetResponse)(nil)).Elem()
}

func (o JsonDatasetResponseOutput) ToJsonDatasetResponseOutput() JsonDatasetResponseOutput {
	return o
}

func (o JsonDatasetResponseOutput) ToJsonDatasetResponseOutputWithContext(ctx context.Context) JsonDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o JsonDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v JsonDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the json dataset.
func (o JsonDatasetResponseOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonDatasetResponse) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o JsonDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
func (o JsonDatasetResponseOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonDatasetResponse) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o JsonDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v JsonDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o JsonDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v JsonDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The location of the json data storage.
func (o JsonDatasetResponseOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonDatasetResponse) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o JsonDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v JsonDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o JsonDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o JsonDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o JsonDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JsonDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The data stored in JSON format.
type JsonFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern *string `pulumi:"filePattern"`
	// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
	JsonNodeReference interface{} `pulumi:"jsonNodeReference"`
	// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
	JsonPathDefinition interface{} `pulumi:"jsonPathDefinition"`
	// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// JsonFormatInput is an input type that accepts JsonFormatArgs and JsonFormatOutput values.
// You can construct a concrete instance of `JsonFormatInput` via:
//
//          JsonFormatArgs{...}
type JsonFormatInput interface {
	pulumi.Input

	ToJsonFormatOutput() JsonFormatOutput
	ToJsonFormatOutputWithContext(context.Context) JsonFormatOutput
}

// The data stored in JSON format.
type JsonFormatArgs struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.Input `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
	EncodingName pulumi.Input `pulumi:"encodingName"`
	// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern pulumi.StringPtrInput `pulumi:"filePattern"`
	// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
	JsonNodeReference pulumi.Input `pulumi:"jsonNodeReference"`
	// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
	JsonPathDefinition pulumi.Input `pulumi:"jsonPathDefinition"`
	// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
	NestingSeparator pulumi.Input `pulumi:"nestingSeparator"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.Input `pulumi:"serializer"`
	// Type of dataset storage format.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JsonFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFormat)(nil)).Elem()
}

func (i JsonFormatArgs) ToJsonFormatOutput() JsonFormatOutput {
	return i.ToJsonFormatOutputWithContext(context.Background())
}

func (i JsonFormatArgs) ToJsonFormatOutputWithContext(ctx context.Context) JsonFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFormatOutput)
}

// The data stored in JSON format.
type JsonFormatOutput struct{ *pulumi.OutputState }

func (JsonFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFormat)(nil)).Elem()
}

func (o JsonFormatOutput) ToJsonFormatOutput() JsonFormatOutput {
	return o
}

func (o JsonFormatOutput) ToJsonFormatOutputWithContext(ctx context.Context) JsonFormatOutput {
	return o
}

// Deserializer. Type: string (or Expression with resultType string).
func (o JsonFormatOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormat) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
func (o JsonFormatOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormat) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
func (o JsonFormatOutput) FilePattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonFormat) *string { return v.FilePattern }).(pulumi.StringPtrOutput)
}

// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
func (o JsonFormatOutput) JsonNodeReference() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormat) interface{} { return v.JsonNodeReference }).(pulumi.AnyOutput)
}

// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
func (o JsonFormatOutput) JsonPathDefinition() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormat) interface{} { return v.JsonPathDefinition }).(pulumi.AnyOutput)
}

// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
func (o JsonFormatOutput) NestingSeparator() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormat) interface{} { return v.NestingSeparator }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o JsonFormatOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormat) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
func (o JsonFormatOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JsonFormat) string { return v.Type }).(pulumi.StringOutput)
}

// The data stored in JSON format.
type JsonFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern *string `pulumi:"filePattern"`
	// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
	JsonNodeReference interface{} `pulumi:"jsonNodeReference"`
	// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
	JsonPathDefinition interface{} `pulumi:"jsonPathDefinition"`
	// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// JsonFormatResponseInput is an input type that accepts JsonFormatResponseArgs and JsonFormatResponseOutput values.
// You can construct a concrete instance of `JsonFormatResponseInput` via:
//
//          JsonFormatResponseArgs{...}
type JsonFormatResponseInput interface {
	pulumi.Input

	ToJsonFormatResponseOutput() JsonFormatResponseOutput
	ToJsonFormatResponseOutputWithContext(context.Context) JsonFormatResponseOutput
}

// The data stored in JSON format.
type JsonFormatResponseArgs struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.Input `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
	EncodingName pulumi.Input `pulumi:"encodingName"`
	// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern pulumi.StringPtrInput `pulumi:"filePattern"`
	// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
	JsonNodeReference pulumi.Input `pulumi:"jsonNodeReference"`
	// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
	JsonPathDefinition pulumi.Input `pulumi:"jsonPathDefinition"`
	// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
	NestingSeparator pulumi.Input `pulumi:"nestingSeparator"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.Input `pulumi:"serializer"`
	// Type of dataset storage format.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JsonFormatResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFormatResponse)(nil)).Elem()
}

func (i JsonFormatResponseArgs) ToJsonFormatResponseOutput() JsonFormatResponseOutput {
	return i.ToJsonFormatResponseOutputWithContext(context.Background())
}

func (i JsonFormatResponseArgs) ToJsonFormatResponseOutputWithContext(ctx context.Context) JsonFormatResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFormatResponseOutput)
}

// The data stored in JSON format.
type JsonFormatResponseOutput struct{ *pulumi.OutputState }

func (JsonFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFormatResponse)(nil)).Elem()
}

func (o JsonFormatResponseOutput) ToJsonFormatResponseOutput() JsonFormatResponseOutput {
	return o
}

func (o JsonFormatResponseOutput) ToJsonFormatResponseOutputWithContext(ctx context.Context) JsonFormatResponseOutput {
	return o
}

// Deserializer. Type: string (or Expression with resultType string).
func (o JsonFormatResponseOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormatResponse) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
func (o JsonFormatResponseOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormatResponse) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
func (o JsonFormatResponseOutput) FilePattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonFormatResponse) *string { return v.FilePattern }).(pulumi.StringPtrOutput)
}

// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
func (o JsonFormatResponseOutput) JsonNodeReference() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormatResponse) interface{} { return v.JsonNodeReference }).(pulumi.AnyOutput)
}

// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
func (o JsonFormatResponseOutput) JsonPathDefinition() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormatResponse) interface{} { return v.JsonPathDefinition }).(pulumi.AnyOutput)
}

// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
func (o JsonFormatResponseOutput) NestingSeparator() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormatResponse) interface{} { return v.NestingSeparator }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o JsonFormatResponseOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormatResponse) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
func (o JsonFormatResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JsonFormatResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The key authorization type integration runtime.
type LinkedIntegrationRuntimeKeyAuthorization struct {
	// The authorization type for integration runtime sharing.
	AuthorizationType string `pulumi:"authorizationType"`
	// The key used for authorization.
	Key SecureString `pulumi:"key"`
}

// LinkedIntegrationRuntimeKeyAuthorizationInput is an input type that accepts LinkedIntegrationRuntimeKeyAuthorizationArgs and LinkedIntegrationRuntimeKeyAuthorizationOutput values.
// You can construct a concrete instance of `LinkedIntegrationRuntimeKeyAuthorizationInput` via:
//
//          LinkedIntegrationRuntimeKeyAuthorizationArgs{...}
type LinkedIntegrationRuntimeKeyAuthorizationInput interface {
	pulumi.Input

	ToLinkedIntegrationRuntimeKeyAuthorizationOutput() LinkedIntegrationRuntimeKeyAuthorizationOutput
	ToLinkedIntegrationRuntimeKeyAuthorizationOutputWithContext(context.Context) LinkedIntegrationRuntimeKeyAuthorizationOutput
}

// The key authorization type integration runtime.
type LinkedIntegrationRuntimeKeyAuthorizationArgs struct {
	// The authorization type for integration runtime sharing.
	AuthorizationType pulumi.StringInput `pulumi:"authorizationType"`
	// The key used for authorization.
	Key SecureStringInput `pulumi:"key"`
}

func (LinkedIntegrationRuntimeKeyAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeKeyAuthorization)(nil)).Elem()
}

func (i LinkedIntegrationRuntimeKeyAuthorizationArgs) ToLinkedIntegrationRuntimeKeyAuthorizationOutput() LinkedIntegrationRuntimeKeyAuthorizationOutput {
	return i.ToLinkedIntegrationRuntimeKeyAuthorizationOutputWithContext(context.Background())
}

func (i LinkedIntegrationRuntimeKeyAuthorizationArgs) ToLinkedIntegrationRuntimeKeyAuthorizationOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeKeyAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedIntegrationRuntimeKeyAuthorizationOutput)
}

// The key authorization type integration runtime.
type LinkedIntegrationRuntimeKeyAuthorizationOutput struct{ *pulumi.OutputState }

func (LinkedIntegrationRuntimeKeyAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeKeyAuthorization)(nil)).Elem()
}

func (o LinkedIntegrationRuntimeKeyAuthorizationOutput) ToLinkedIntegrationRuntimeKeyAuthorizationOutput() LinkedIntegrationRuntimeKeyAuthorizationOutput {
	return o
}

func (o LinkedIntegrationRuntimeKeyAuthorizationOutput) ToLinkedIntegrationRuntimeKeyAuthorizationOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeKeyAuthorizationOutput {
	return o
}

// The authorization type for integration runtime sharing.
func (o LinkedIntegrationRuntimeKeyAuthorizationOutput) AuthorizationType() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeKeyAuthorization) string { return v.AuthorizationType }).(pulumi.StringOutput)
}

// The key used for authorization.
func (o LinkedIntegrationRuntimeKeyAuthorizationOutput) Key() SecureStringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeKeyAuthorization) SecureString { return v.Key }).(SecureStringOutput)
}

// The key authorization type integration runtime.
type LinkedIntegrationRuntimeKeyAuthorizationResponse struct {
	// The authorization type for integration runtime sharing.
	AuthorizationType string `pulumi:"authorizationType"`
	// The key used for authorization.
	Key SecureStringResponse `pulumi:"key"`
}

// LinkedIntegrationRuntimeKeyAuthorizationResponseInput is an input type that accepts LinkedIntegrationRuntimeKeyAuthorizationResponseArgs and LinkedIntegrationRuntimeKeyAuthorizationResponseOutput values.
// You can construct a concrete instance of `LinkedIntegrationRuntimeKeyAuthorizationResponseInput` via:
//
//          LinkedIntegrationRuntimeKeyAuthorizationResponseArgs{...}
type LinkedIntegrationRuntimeKeyAuthorizationResponseInput interface {
	pulumi.Input

	ToLinkedIntegrationRuntimeKeyAuthorizationResponseOutput() LinkedIntegrationRuntimeKeyAuthorizationResponseOutput
	ToLinkedIntegrationRuntimeKeyAuthorizationResponseOutputWithContext(context.Context) LinkedIntegrationRuntimeKeyAuthorizationResponseOutput
}

// The key authorization type integration runtime.
type LinkedIntegrationRuntimeKeyAuthorizationResponseArgs struct {
	// The authorization type for integration runtime sharing.
	AuthorizationType pulumi.StringInput `pulumi:"authorizationType"`
	// The key used for authorization.
	Key SecureStringResponseInput `pulumi:"key"`
}

func (LinkedIntegrationRuntimeKeyAuthorizationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeKeyAuthorizationResponse)(nil)).Elem()
}

func (i LinkedIntegrationRuntimeKeyAuthorizationResponseArgs) ToLinkedIntegrationRuntimeKeyAuthorizationResponseOutput() LinkedIntegrationRuntimeKeyAuthorizationResponseOutput {
	return i.ToLinkedIntegrationRuntimeKeyAuthorizationResponseOutputWithContext(context.Background())
}

func (i LinkedIntegrationRuntimeKeyAuthorizationResponseArgs) ToLinkedIntegrationRuntimeKeyAuthorizationResponseOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeKeyAuthorizationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedIntegrationRuntimeKeyAuthorizationResponseOutput)
}

// The key authorization type integration runtime.
type LinkedIntegrationRuntimeKeyAuthorizationResponseOutput struct{ *pulumi.OutputState }

func (LinkedIntegrationRuntimeKeyAuthorizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeKeyAuthorizationResponse)(nil)).Elem()
}

func (o LinkedIntegrationRuntimeKeyAuthorizationResponseOutput) ToLinkedIntegrationRuntimeKeyAuthorizationResponseOutput() LinkedIntegrationRuntimeKeyAuthorizationResponseOutput {
	return o
}

func (o LinkedIntegrationRuntimeKeyAuthorizationResponseOutput) ToLinkedIntegrationRuntimeKeyAuthorizationResponseOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeKeyAuthorizationResponseOutput {
	return o
}

// The authorization type for integration runtime sharing.
func (o LinkedIntegrationRuntimeKeyAuthorizationResponseOutput) AuthorizationType() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeKeyAuthorizationResponse) string { return v.AuthorizationType }).(pulumi.StringOutput)
}

// The key used for authorization.
func (o LinkedIntegrationRuntimeKeyAuthorizationResponseOutput) Key() SecureStringResponseOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeKeyAuthorizationResponse) SecureStringResponse { return v.Key }).(SecureStringResponseOutput)
}

// The role based access control (RBAC) authorization type integration runtime.
type LinkedIntegrationRuntimeRbacAuthorization struct {
	// The authorization type for integration runtime sharing.
	AuthorizationType string `pulumi:"authorizationType"`
	// The resource identifier of the integration runtime to be shared.
	ResourceId string `pulumi:"resourceId"`
}

// LinkedIntegrationRuntimeRbacAuthorizationInput is an input type that accepts LinkedIntegrationRuntimeRbacAuthorizationArgs and LinkedIntegrationRuntimeRbacAuthorizationOutput values.
// You can construct a concrete instance of `LinkedIntegrationRuntimeRbacAuthorizationInput` via:
//
//          LinkedIntegrationRuntimeRbacAuthorizationArgs{...}
type LinkedIntegrationRuntimeRbacAuthorizationInput interface {
	pulumi.Input

	ToLinkedIntegrationRuntimeRbacAuthorizationOutput() LinkedIntegrationRuntimeRbacAuthorizationOutput
	ToLinkedIntegrationRuntimeRbacAuthorizationOutputWithContext(context.Context) LinkedIntegrationRuntimeRbacAuthorizationOutput
}

// The role based access control (RBAC) authorization type integration runtime.
type LinkedIntegrationRuntimeRbacAuthorizationArgs struct {
	// The authorization type for integration runtime sharing.
	AuthorizationType pulumi.StringInput `pulumi:"authorizationType"`
	// The resource identifier of the integration runtime to be shared.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
}

func (LinkedIntegrationRuntimeRbacAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeRbacAuthorization)(nil)).Elem()
}

func (i LinkedIntegrationRuntimeRbacAuthorizationArgs) ToLinkedIntegrationRuntimeRbacAuthorizationOutput() LinkedIntegrationRuntimeRbacAuthorizationOutput {
	return i.ToLinkedIntegrationRuntimeRbacAuthorizationOutputWithContext(context.Background())
}

func (i LinkedIntegrationRuntimeRbacAuthorizationArgs) ToLinkedIntegrationRuntimeRbacAuthorizationOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeRbacAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedIntegrationRuntimeRbacAuthorizationOutput)
}

// The role based access control (RBAC) authorization type integration runtime.
type LinkedIntegrationRuntimeRbacAuthorizationOutput struct{ *pulumi.OutputState }

func (LinkedIntegrationRuntimeRbacAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeRbacAuthorization)(nil)).Elem()
}

func (o LinkedIntegrationRuntimeRbacAuthorizationOutput) ToLinkedIntegrationRuntimeRbacAuthorizationOutput() LinkedIntegrationRuntimeRbacAuthorizationOutput {
	return o
}

func (o LinkedIntegrationRuntimeRbacAuthorizationOutput) ToLinkedIntegrationRuntimeRbacAuthorizationOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeRbacAuthorizationOutput {
	return o
}

// The authorization type for integration runtime sharing.
func (o LinkedIntegrationRuntimeRbacAuthorizationOutput) AuthorizationType() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeRbacAuthorization) string { return v.AuthorizationType }).(pulumi.StringOutput)
}

// The resource identifier of the integration runtime to be shared.
func (o LinkedIntegrationRuntimeRbacAuthorizationOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeRbacAuthorization) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The role based access control (RBAC) authorization type integration runtime.
type LinkedIntegrationRuntimeRbacAuthorizationResponse struct {
	// The authorization type for integration runtime sharing.
	AuthorizationType string `pulumi:"authorizationType"`
	// The resource identifier of the integration runtime to be shared.
	ResourceId string `pulumi:"resourceId"`
}

// LinkedIntegrationRuntimeRbacAuthorizationResponseInput is an input type that accepts LinkedIntegrationRuntimeRbacAuthorizationResponseArgs and LinkedIntegrationRuntimeRbacAuthorizationResponseOutput values.
// You can construct a concrete instance of `LinkedIntegrationRuntimeRbacAuthorizationResponseInput` via:
//
//          LinkedIntegrationRuntimeRbacAuthorizationResponseArgs{...}
type LinkedIntegrationRuntimeRbacAuthorizationResponseInput interface {
	pulumi.Input

	ToLinkedIntegrationRuntimeRbacAuthorizationResponseOutput() LinkedIntegrationRuntimeRbacAuthorizationResponseOutput
	ToLinkedIntegrationRuntimeRbacAuthorizationResponseOutputWithContext(context.Context) LinkedIntegrationRuntimeRbacAuthorizationResponseOutput
}

// The role based access control (RBAC) authorization type integration runtime.
type LinkedIntegrationRuntimeRbacAuthorizationResponseArgs struct {
	// The authorization type for integration runtime sharing.
	AuthorizationType pulumi.StringInput `pulumi:"authorizationType"`
	// The resource identifier of the integration runtime to be shared.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
}

func (LinkedIntegrationRuntimeRbacAuthorizationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeRbacAuthorizationResponse)(nil)).Elem()
}

func (i LinkedIntegrationRuntimeRbacAuthorizationResponseArgs) ToLinkedIntegrationRuntimeRbacAuthorizationResponseOutput() LinkedIntegrationRuntimeRbacAuthorizationResponseOutput {
	return i.ToLinkedIntegrationRuntimeRbacAuthorizationResponseOutputWithContext(context.Background())
}

func (i LinkedIntegrationRuntimeRbacAuthorizationResponseArgs) ToLinkedIntegrationRuntimeRbacAuthorizationResponseOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeRbacAuthorizationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedIntegrationRuntimeRbacAuthorizationResponseOutput)
}

// The role based access control (RBAC) authorization type integration runtime.
type LinkedIntegrationRuntimeRbacAuthorizationResponseOutput struct{ *pulumi.OutputState }

func (LinkedIntegrationRuntimeRbacAuthorizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeRbacAuthorizationResponse)(nil)).Elem()
}

func (o LinkedIntegrationRuntimeRbacAuthorizationResponseOutput) ToLinkedIntegrationRuntimeRbacAuthorizationResponseOutput() LinkedIntegrationRuntimeRbacAuthorizationResponseOutput {
	return o
}

func (o LinkedIntegrationRuntimeRbacAuthorizationResponseOutput) ToLinkedIntegrationRuntimeRbacAuthorizationResponseOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeRbacAuthorizationResponseOutput {
	return o
}

// The authorization type for integration runtime sharing.
func (o LinkedIntegrationRuntimeRbacAuthorizationResponseOutput) AuthorizationType() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeRbacAuthorizationResponse) string { return v.AuthorizationType }).(pulumi.StringOutput)
}

// The resource identifier of the integration runtime to be shared.
func (o LinkedIntegrationRuntimeRbacAuthorizationResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeRbacAuthorizationResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The linked integration runtime information.
type LinkedIntegrationRuntimeResponse struct {
	// The creating time of the linked integration runtime.
	CreateTime string `pulumi:"createTime"`
	// The location of the data factory for which the linked integration runtime belong to.
	DataFactoryLocation string `pulumi:"dataFactoryLocation"`
	// The name of the data factory for which the linked integration runtime belong to.
	DataFactoryName string `pulumi:"dataFactoryName"`
	// The name of the linked integration runtime.
	Name string `pulumi:"name"`
	// The subscription ID for which the linked integration runtime belong to.
	SubscriptionId string `pulumi:"subscriptionId"`
}

// LinkedIntegrationRuntimeResponseInput is an input type that accepts LinkedIntegrationRuntimeResponseArgs and LinkedIntegrationRuntimeResponseOutput values.
// You can construct a concrete instance of `LinkedIntegrationRuntimeResponseInput` via:
//
//          LinkedIntegrationRuntimeResponseArgs{...}
type LinkedIntegrationRuntimeResponseInput interface {
	pulumi.Input

	ToLinkedIntegrationRuntimeResponseOutput() LinkedIntegrationRuntimeResponseOutput
	ToLinkedIntegrationRuntimeResponseOutputWithContext(context.Context) LinkedIntegrationRuntimeResponseOutput
}

// The linked integration runtime information.
type LinkedIntegrationRuntimeResponseArgs struct {
	// The creating time of the linked integration runtime.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The location of the data factory for which the linked integration runtime belong to.
	DataFactoryLocation pulumi.StringInput `pulumi:"dataFactoryLocation"`
	// The name of the data factory for which the linked integration runtime belong to.
	DataFactoryName pulumi.StringInput `pulumi:"dataFactoryName"`
	// The name of the linked integration runtime.
	Name pulumi.StringInput `pulumi:"name"`
	// The subscription ID for which the linked integration runtime belong to.
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
}

func (LinkedIntegrationRuntimeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeResponse)(nil)).Elem()
}

func (i LinkedIntegrationRuntimeResponseArgs) ToLinkedIntegrationRuntimeResponseOutput() LinkedIntegrationRuntimeResponseOutput {
	return i.ToLinkedIntegrationRuntimeResponseOutputWithContext(context.Background())
}

func (i LinkedIntegrationRuntimeResponseArgs) ToLinkedIntegrationRuntimeResponseOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedIntegrationRuntimeResponseOutput)
}

// LinkedIntegrationRuntimeResponseArrayInput is an input type that accepts LinkedIntegrationRuntimeResponseArray and LinkedIntegrationRuntimeResponseArrayOutput values.
// You can construct a concrete instance of `LinkedIntegrationRuntimeResponseArrayInput` via:
//
//          LinkedIntegrationRuntimeResponseArray{ LinkedIntegrationRuntimeResponseArgs{...} }
type LinkedIntegrationRuntimeResponseArrayInput interface {
	pulumi.Input

	ToLinkedIntegrationRuntimeResponseArrayOutput() LinkedIntegrationRuntimeResponseArrayOutput
	ToLinkedIntegrationRuntimeResponseArrayOutputWithContext(context.Context) LinkedIntegrationRuntimeResponseArrayOutput
}

type LinkedIntegrationRuntimeResponseArray []LinkedIntegrationRuntimeResponseInput

func (LinkedIntegrationRuntimeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedIntegrationRuntimeResponse)(nil)).Elem()
}

func (i LinkedIntegrationRuntimeResponseArray) ToLinkedIntegrationRuntimeResponseArrayOutput() LinkedIntegrationRuntimeResponseArrayOutput {
	return i.ToLinkedIntegrationRuntimeResponseArrayOutputWithContext(context.Background())
}

func (i LinkedIntegrationRuntimeResponseArray) ToLinkedIntegrationRuntimeResponseArrayOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedIntegrationRuntimeResponseArrayOutput)
}

// The linked integration runtime information.
type LinkedIntegrationRuntimeResponseOutput struct{ *pulumi.OutputState }

func (LinkedIntegrationRuntimeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeResponse)(nil)).Elem()
}

func (o LinkedIntegrationRuntimeResponseOutput) ToLinkedIntegrationRuntimeResponseOutput() LinkedIntegrationRuntimeResponseOutput {
	return o
}

func (o LinkedIntegrationRuntimeResponseOutput) ToLinkedIntegrationRuntimeResponseOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeResponseOutput {
	return o
}

// The creating time of the linked integration runtime.
func (o LinkedIntegrationRuntimeResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The location of the data factory for which the linked integration runtime belong to.
func (o LinkedIntegrationRuntimeResponseOutput) DataFactoryLocation() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeResponse) string { return v.DataFactoryLocation }).(pulumi.StringOutput)
}

// The name of the data factory for which the linked integration runtime belong to.
func (o LinkedIntegrationRuntimeResponseOutput) DataFactoryName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeResponse) string { return v.DataFactoryName }).(pulumi.StringOutput)
}

// The name of the linked integration runtime.
func (o LinkedIntegrationRuntimeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The subscription ID for which the linked integration runtime belong to.
func (o LinkedIntegrationRuntimeResponseOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeResponse) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

type LinkedIntegrationRuntimeResponseArrayOutput struct{ *pulumi.OutputState }

func (LinkedIntegrationRuntimeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedIntegrationRuntimeResponse)(nil)).Elem()
}

func (o LinkedIntegrationRuntimeResponseArrayOutput) ToLinkedIntegrationRuntimeResponseArrayOutput() LinkedIntegrationRuntimeResponseArrayOutput {
	return o
}

func (o LinkedIntegrationRuntimeResponseArrayOutput) ToLinkedIntegrationRuntimeResponseArrayOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeResponseArrayOutput {
	return o
}

func (o LinkedIntegrationRuntimeResponseArrayOutput) Index(i pulumi.IntInput) LinkedIntegrationRuntimeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkedIntegrationRuntimeResponse {
		return vs[0].([]LinkedIntegrationRuntimeResponse)[vs[1].(int)]
	}).(LinkedIntegrationRuntimeResponseOutput)
}

// Linked service reference type.
type LinkedServiceReference struct {
	// Arguments for LinkedService.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName string `pulumi:"referenceName"`
	// Linked service reference type.
	Type string `pulumi:"type"`
}

// LinkedServiceReferenceInput is an input type that accepts LinkedServiceReferenceArgs and LinkedServiceReferenceOutput values.
// You can construct a concrete instance of `LinkedServiceReferenceInput` via:
//
//          LinkedServiceReferenceArgs{...}
type LinkedServiceReferenceInput interface {
	pulumi.Input

	ToLinkedServiceReferenceOutput() LinkedServiceReferenceOutput
	ToLinkedServiceReferenceOutputWithContext(context.Context) LinkedServiceReferenceOutput
}

// Linked service reference type.
type LinkedServiceReferenceArgs struct {
	// Arguments for LinkedService.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Linked service reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LinkedServiceReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReference)(nil)).Elem()
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferenceOutput() LinkedServiceReferenceOutput {
	return i.ToLinkedServiceReferenceOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferenceOutputWithContext(ctx context.Context) LinkedServiceReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceOutput)
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return i.ToLinkedServiceReferencePtrOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceOutput).ToLinkedServiceReferencePtrOutputWithContext(ctx)
}

// LinkedServiceReferencePtrInput is an input type that accepts LinkedServiceReferenceArgs, LinkedServiceReferencePtr and LinkedServiceReferencePtrOutput values.
// You can construct a concrete instance of `LinkedServiceReferencePtrInput` via:
//
//          LinkedServiceReferenceArgs{...}
//
//  or:
//
//          nil
type LinkedServiceReferencePtrInput interface {
	pulumi.Input

	ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput
	ToLinkedServiceReferencePtrOutputWithContext(context.Context) LinkedServiceReferencePtrOutput
}

type linkedServiceReferencePtrType LinkedServiceReferenceArgs

func LinkedServiceReferencePtr(v *LinkedServiceReferenceArgs) LinkedServiceReferencePtrInput {
	return (*linkedServiceReferencePtrType)(v)
}

func (*linkedServiceReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReference)(nil)).Elem()
}

func (i *linkedServiceReferencePtrType) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return i.ToLinkedServiceReferencePtrOutputWithContext(context.Background())
}

func (i *linkedServiceReferencePtrType) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferencePtrOutput)
}

// LinkedServiceReferenceArrayInput is an input type that accepts LinkedServiceReferenceArray and LinkedServiceReferenceArrayOutput values.
// You can construct a concrete instance of `LinkedServiceReferenceArrayInput` via:
//
//          LinkedServiceReferenceArray{ LinkedServiceReferenceArgs{...} }
type LinkedServiceReferenceArrayInput interface {
	pulumi.Input

	ToLinkedServiceReferenceArrayOutput() LinkedServiceReferenceArrayOutput
	ToLinkedServiceReferenceArrayOutputWithContext(context.Context) LinkedServiceReferenceArrayOutput
}

type LinkedServiceReferenceArray []LinkedServiceReferenceInput

func (LinkedServiceReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedServiceReference)(nil)).Elem()
}

func (i LinkedServiceReferenceArray) ToLinkedServiceReferenceArrayOutput() LinkedServiceReferenceArrayOutput {
	return i.ToLinkedServiceReferenceArrayOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceArray) ToLinkedServiceReferenceArrayOutputWithContext(ctx context.Context) LinkedServiceReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceArrayOutput)
}

// Linked service reference type.
type LinkedServiceReferenceOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReference)(nil)).Elem()
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferenceOutput() LinkedServiceReferenceOutput {
	return o
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferenceOutputWithContext(ctx context.Context) LinkedServiceReferenceOutput {
	return o
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return o.ToLinkedServiceReferencePtrOutputWithContext(context.Background())
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v LinkedServiceReference) *LinkedServiceReference {
		return &v
	}).(LinkedServiceReferencePtrOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferenceOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v LinkedServiceReference) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Linked service reference type.
func (o LinkedServiceReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReference) string { return v.Type }).(pulumi.StringOutput)
}

type LinkedServiceReferencePtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReference)(nil)).Elem()
}

func (o LinkedServiceReferencePtrOutput) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return o
}

func (o LinkedServiceReferencePtrOutput) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return o
}

func (o LinkedServiceReferencePtrOutput) Elem() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v *LinkedServiceReference) LinkedServiceReference { return *v }).(LinkedServiceReferenceOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferencePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *LinkedServiceReference) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferencePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Linked service reference type.
func (o LinkedServiceReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type LinkedServiceReferenceArrayOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedServiceReference)(nil)).Elem()
}

func (o LinkedServiceReferenceArrayOutput) ToLinkedServiceReferenceArrayOutput() LinkedServiceReferenceArrayOutput {
	return o
}

func (o LinkedServiceReferenceArrayOutput) ToLinkedServiceReferenceArrayOutputWithContext(ctx context.Context) LinkedServiceReferenceArrayOutput {
	return o
}

func (o LinkedServiceReferenceArrayOutput) Index(i pulumi.IntInput) LinkedServiceReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkedServiceReference {
		return vs[0].([]LinkedServiceReference)[vs[1].(int)]
	}).(LinkedServiceReferenceOutput)
}

// Linked service reference type.
type LinkedServiceReferenceResponse struct {
	// Arguments for LinkedService.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName string `pulumi:"referenceName"`
	// Linked service reference type.
	Type string `pulumi:"type"`
}

// LinkedServiceReferenceResponseInput is an input type that accepts LinkedServiceReferenceResponseArgs and LinkedServiceReferenceResponseOutput values.
// You can construct a concrete instance of `LinkedServiceReferenceResponseInput` via:
//
//          LinkedServiceReferenceResponseArgs{...}
type LinkedServiceReferenceResponseInput interface {
	pulumi.Input

	ToLinkedServiceReferenceResponseOutput() LinkedServiceReferenceResponseOutput
	ToLinkedServiceReferenceResponseOutputWithContext(context.Context) LinkedServiceReferenceResponseOutput
}

// Linked service reference type.
type LinkedServiceReferenceResponseArgs struct {
	// Arguments for LinkedService.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Linked service reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LinkedServiceReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReferenceResponse)(nil)).Elem()
}

func (i LinkedServiceReferenceResponseArgs) ToLinkedServiceReferenceResponseOutput() LinkedServiceReferenceResponseOutput {
	return i.ToLinkedServiceReferenceResponseOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceResponseArgs) ToLinkedServiceReferenceResponseOutputWithContext(ctx context.Context) LinkedServiceReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceResponseOutput)
}

func (i LinkedServiceReferenceResponseArgs) ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput {
	return i.ToLinkedServiceReferenceResponsePtrOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceResponseArgs) ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceResponseOutput).ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx)
}

// LinkedServiceReferenceResponsePtrInput is an input type that accepts LinkedServiceReferenceResponseArgs, LinkedServiceReferenceResponsePtr and LinkedServiceReferenceResponsePtrOutput values.
// You can construct a concrete instance of `LinkedServiceReferenceResponsePtrInput` via:
//
//          LinkedServiceReferenceResponseArgs{...}
//
//  or:
//
//          nil
type LinkedServiceReferenceResponsePtrInput interface {
	pulumi.Input

	ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput
	ToLinkedServiceReferenceResponsePtrOutputWithContext(context.Context) LinkedServiceReferenceResponsePtrOutput
}

type linkedServiceReferenceResponsePtrType LinkedServiceReferenceResponseArgs

func LinkedServiceReferenceResponsePtr(v *LinkedServiceReferenceResponseArgs) LinkedServiceReferenceResponsePtrInput {
	return (*linkedServiceReferenceResponsePtrType)(v)
}

func (*linkedServiceReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReferenceResponse)(nil)).Elem()
}

func (i *linkedServiceReferenceResponsePtrType) ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput {
	return i.ToLinkedServiceReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *linkedServiceReferenceResponsePtrType) ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceResponsePtrOutput)
}

// LinkedServiceReferenceResponseArrayInput is an input type that accepts LinkedServiceReferenceResponseArray and LinkedServiceReferenceResponseArrayOutput values.
// You can construct a concrete instance of `LinkedServiceReferenceResponseArrayInput` via:
//
//          LinkedServiceReferenceResponseArray{ LinkedServiceReferenceResponseArgs{...} }
type LinkedServiceReferenceResponseArrayInput interface {
	pulumi.Input

	ToLinkedServiceReferenceResponseArrayOutput() LinkedServiceReferenceResponseArrayOutput
	ToLinkedServiceReferenceResponseArrayOutputWithContext(context.Context) LinkedServiceReferenceResponseArrayOutput
}

type LinkedServiceReferenceResponseArray []LinkedServiceReferenceResponseInput

func (LinkedServiceReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedServiceReferenceResponse)(nil)).Elem()
}

func (i LinkedServiceReferenceResponseArray) ToLinkedServiceReferenceResponseArrayOutput() LinkedServiceReferenceResponseArrayOutput {
	return i.ToLinkedServiceReferenceResponseArrayOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceResponseArray) ToLinkedServiceReferenceResponseArrayOutputWithContext(ctx context.Context) LinkedServiceReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceResponseArrayOutput)
}

// Linked service reference type.
type LinkedServiceReferenceResponseOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReferenceResponse)(nil)).Elem()
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponseOutput() LinkedServiceReferenceResponseOutput {
	return o
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponseOutputWithContext(ctx context.Context) LinkedServiceReferenceResponseOutput {
	return o
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput {
	return o.ToLinkedServiceReferenceResponsePtrOutputWithContext(context.Background())
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) *LinkedServiceReferenceResponse {
		return &v
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferenceResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Linked service reference type.
func (o LinkedServiceReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type LinkedServiceReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReferenceResponse)(nil)).Elem()
}

func (o LinkedServiceReferenceResponsePtrOutput) ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput {
	return o
}

func (o LinkedServiceReferenceResponsePtrOutput) ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceReferenceResponsePtrOutput {
	return o
}

func (o LinkedServiceReferenceResponsePtrOutput) Elem() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) LinkedServiceReferenceResponse { return *v }).(LinkedServiceReferenceResponseOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferenceResponsePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Linked service reference type.
func (o LinkedServiceReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type LinkedServiceReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedServiceReferenceResponse)(nil)).Elem()
}

func (o LinkedServiceReferenceResponseArrayOutput) ToLinkedServiceReferenceResponseArrayOutput() LinkedServiceReferenceResponseArrayOutput {
	return o
}

func (o LinkedServiceReferenceResponseArrayOutput) ToLinkedServiceReferenceResponseArrayOutputWithContext(ctx context.Context) LinkedServiceReferenceResponseArrayOutput {
	return o
}

func (o LinkedServiceReferenceResponseArrayOutput) Index(i pulumi.IntInput) LinkedServiceReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkedServiceReferenceResponse {
		return vs[0].([]LinkedServiceReferenceResponse)[vs[1].(int)]
	}).(LinkedServiceReferenceResponseOutput)
}

// Magento server linked service.
type MagentoLinkedService struct {
	// The access token from Magento.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// MagentoLinkedServiceInput is an input type that accepts MagentoLinkedServiceArgs and MagentoLinkedServiceOutput values.
// You can construct a concrete instance of `MagentoLinkedServiceInput` via:
//
//          MagentoLinkedServiceArgs{...}
type MagentoLinkedServiceInput interface {
	pulumi.Input

	ToMagentoLinkedServiceOutput() MagentoLinkedServiceOutput
	ToMagentoLinkedServiceOutputWithContext(context.Context) MagentoLinkedServiceOutput
}

// Magento server linked service.
type MagentoLinkedServiceArgs struct {
	// The access token from Magento.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (MagentoLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoLinkedService)(nil)).Elem()
}

func (i MagentoLinkedServiceArgs) ToMagentoLinkedServiceOutput() MagentoLinkedServiceOutput {
	return i.ToMagentoLinkedServiceOutputWithContext(context.Background())
}

func (i MagentoLinkedServiceArgs) ToMagentoLinkedServiceOutputWithContext(ctx context.Context) MagentoLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagentoLinkedServiceOutput)
}

// Magento server linked service.
type MagentoLinkedServiceOutput struct{ *pulumi.OutputState }

func (MagentoLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoLinkedService)(nil)).Elem()
}

func (o MagentoLinkedServiceOutput) ToMagentoLinkedServiceOutput() MagentoLinkedServiceOutput {
	return o
}

func (o MagentoLinkedServiceOutput) ToMagentoLinkedServiceOutputWithContext(ctx context.Context) MagentoLinkedServiceOutput {
	return o
}

// The access token from Magento.
func (o MagentoLinkedServiceOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedService) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o MagentoLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MagentoLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MagentoLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v MagentoLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o MagentoLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MagentoLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o MagentoLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
func (o MagentoLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o MagentoLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MagentoLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o MagentoLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MagentoLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o MagentoLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o MagentoLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o MagentoLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Magento server linked service.
type MagentoLinkedServiceResponse struct {
	// The access token from Magento.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// MagentoLinkedServiceResponseInput is an input type that accepts MagentoLinkedServiceResponseArgs and MagentoLinkedServiceResponseOutput values.
// You can construct a concrete instance of `MagentoLinkedServiceResponseInput` via:
//
//          MagentoLinkedServiceResponseArgs{...}
type MagentoLinkedServiceResponseInput interface {
	pulumi.Input

	ToMagentoLinkedServiceResponseOutput() MagentoLinkedServiceResponseOutput
	ToMagentoLinkedServiceResponseOutputWithContext(context.Context) MagentoLinkedServiceResponseOutput
}

// Magento server linked service.
type MagentoLinkedServiceResponseArgs struct {
	// The access token from Magento.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (MagentoLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoLinkedServiceResponse)(nil)).Elem()
}

func (i MagentoLinkedServiceResponseArgs) ToMagentoLinkedServiceResponseOutput() MagentoLinkedServiceResponseOutput {
	return i.ToMagentoLinkedServiceResponseOutputWithContext(context.Background())
}

func (i MagentoLinkedServiceResponseArgs) ToMagentoLinkedServiceResponseOutputWithContext(ctx context.Context) MagentoLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagentoLinkedServiceResponseOutput)
}

// Magento server linked service.
type MagentoLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MagentoLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoLinkedServiceResponse)(nil)).Elem()
}

func (o MagentoLinkedServiceResponseOutput) ToMagentoLinkedServiceResponseOutput() MagentoLinkedServiceResponseOutput {
	return o
}

func (o MagentoLinkedServiceResponseOutput) ToMagentoLinkedServiceResponseOutputWithContext(ctx context.Context) MagentoLinkedServiceResponseOutput {
	return o
}

// The access token from Magento.
func (o MagentoLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o MagentoLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MagentoLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o MagentoLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o MagentoLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
func (o MagentoLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o MagentoLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o MagentoLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o MagentoLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o MagentoLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o MagentoLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Magento server dataset.
type MagentoObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MagentoObjectDatasetInput is an input type that accepts MagentoObjectDatasetArgs and MagentoObjectDatasetOutput values.
// You can construct a concrete instance of `MagentoObjectDatasetInput` via:
//
//          MagentoObjectDatasetArgs{...}
type MagentoObjectDatasetInput interface {
	pulumi.Input

	ToMagentoObjectDatasetOutput() MagentoObjectDatasetOutput
	ToMagentoObjectDatasetOutputWithContext(context.Context) MagentoObjectDatasetOutput
}

// Magento server dataset.
type MagentoObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MagentoObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoObjectDataset)(nil)).Elem()
}

func (i MagentoObjectDatasetArgs) ToMagentoObjectDatasetOutput() MagentoObjectDatasetOutput {
	return i.ToMagentoObjectDatasetOutputWithContext(context.Background())
}

func (i MagentoObjectDatasetArgs) ToMagentoObjectDatasetOutputWithContext(ctx context.Context) MagentoObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagentoObjectDatasetOutput)
}

// Magento server dataset.
type MagentoObjectDatasetOutput struct{ *pulumi.OutputState }

func (MagentoObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoObjectDataset)(nil)).Elem()
}

func (o MagentoObjectDatasetOutput) ToMagentoObjectDatasetOutput() MagentoObjectDatasetOutput {
	return o
}

func (o MagentoObjectDatasetOutput) ToMagentoObjectDatasetOutputWithContext(ctx context.Context) MagentoObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MagentoObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MagentoObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MagentoObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MagentoObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MagentoObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v MagentoObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o MagentoObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v MagentoObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o MagentoObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MagentoObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MagentoObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MagentoObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o MagentoObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o MagentoObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MagentoObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Magento server dataset.
type MagentoObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MagentoObjectDatasetResponseInput is an input type that accepts MagentoObjectDatasetResponseArgs and MagentoObjectDatasetResponseOutput values.
// You can construct a concrete instance of `MagentoObjectDatasetResponseInput` via:
//
//          MagentoObjectDatasetResponseArgs{...}
type MagentoObjectDatasetResponseInput interface {
	pulumi.Input

	ToMagentoObjectDatasetResponseOutput() MagentoObjectDatasetResponseOutput
	ToMagentoObjectDatasetResponseOutputWithContext(context.Context) MagentoObjectDatasetResponseOutput
}

// Magento server dataset.
type MagentoObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MagentoObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoObjectDatasetResponse)(nil)).Elem()
}

func (i MagentoObjectDatasetResponseArgs) ToMagentoObjectDatasetResponseOutput() MagentoObjectDatasetResponseOutput {
	return i.ToMagentoObjectDatasetResponseOutputWithContext(context.Background())
}

func (i MagentoObjectDatasetResponseArgs) ToMagentoObjectDatasetResponseOutputWithContext(ctx context.Context) MagentoObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagentoObjectDatasetResponseOutput)
}

// Magento server dataset.
type MagentoObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (MagentoObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoObjectDatasetResponse)(nil)).Elem()
}

func (o MagentoObjectDatasetResponseOutput) ToMagentoObjectDatasetResponseOutput() MagentoObjectDatasetResponseOutput {
	return o
}

func (o MagentoObjectDatasetResponseOutput) ToMagentoObjectDatasetResponseOutputWithContext(ctx context.Context) MagentoObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MagentoObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MagentoObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MagentoObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o MagentoObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MagentoObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MagentoObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MagentoObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o MagentoObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o MagentoObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntime struct {
	// The compute resource for managed integration runtime.
	ComputeProperties *IntegrationRuntimeComputeProperties `pulumi:"computeProperties"`
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// SSIS properties for managed integration runtime.
	SsisProperties *IntegrationRuntimeSsisProperties `pulumi:"ssisProperties"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// ManagedIntegrationRuntimeInput is an input type that accepts ManagedIntegrationRuntimeArgs and ManagedIntegrationRuntimeOutput values.
// You can construct a concrete instance of `ManagedIntegrationRuntimeInput` via:
//
//          ManagedIntegrationRuntimeArgs{...}
type ManagedIntegrationRuntimeInput interface {
	pulumi.Input

	ToManagedIntegrationRuntimeOutput() ManagedIntegrationRuntimeOutput
	ToManagedIntegrationRuntimeOutputWithContext(context.Context) ManagedIntegrationRuntimeOutput
}

// Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntimeArgs struct {
	// The compute resource for managed integration runtime.
	ComputeProperties IntegrationRuntimeComputePropertiesPtrInput `pulumi:"computeProperties"`
	// Integration runtime description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// SSIS properties for managed integration runtime.
	SsisProperties IntegrationRuntimeSsisPropertiesPtrInput `pulumi:"ssisProperties"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ManagedIntegrationRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntime)(nil)).Elem()
}

func (i ManagedIntegrationRuntimeArgs) ToManagedIntegrationRuntimeOutput() ManagedIntegrationRuntimeOutput {
	return i.ToManagedIntegrationRuntimeOutputWithContext(context.Background())
}

func (i ManagedIntegrationRuntimeArgs) ToManagedIntegrationRuntimeOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIntegrationRuntimeOutput)
}

// Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntimeOutput struct{ *pulumi.OutputState }

func (ManagedIntegrationRuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntime)(nil)).Elem()
}

func (o ManagedIntegrationRuntimeOutput) ToManagedIntegrationRuntimeOutput() ManagedIntegrationRuntimeOutput {
	return o
}

func (o ManagedIntegrationRuntimeOutput) ToManagedIntegrationRuntimeOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeOutput {
	return o
}

// The compute resource for managed integration runtime.
func (o ManagedIntegrationRuntimeOutput) ComputeProperties() IntegrationRuntimeComputePropertiesPtrOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntime) *IntegrationRuntimeComputeProperties { return v.ComputeProperties }).(IntegrationRuntimeComputePropertiesPtrOutput)
}

// Integration runtime description.
func (o ManagedIntegrationRuntimeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntime) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// SSIS properties for managed integration runtime.
func (o ManagedIntegrationRuntimeOutput) SsisProperties() IntegrationRuntimeSsisPropertiesPtrOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntime) *IntegrationRuntimeSsisProperties { return v.SsisProperties }).(IntegrationRuntimeSsisPropertiesPtrOutput)
}

// Type of integration runtime.
func (o ManagedIntegrationRuntimeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntime) string { return v.Type }).(pulumi.StringOutput)
}

// Error definition for managed integration runtime.
type ManagedIntegrationRuntimeErrorResponse struct {
	// Error code.
	Code string `pulumi:"code"`
	// Error message.
	Message string `pulumi:"message"`
	// Managed integration runtime error parameters.
	Parameters []string `pulumi:"parameters"`
	// The time when the error occurred.
	Time string `pulumi:"time"`
}

// ManagedIntegrationRuntimeErrorResponseInput is an input type that accepts ManagedIntegrationRuntimeErrorResponseArgs and ManagedIntegrationRuntimeErrorResponseOutput values.
// You can construct a concrete instance of `ManagedIntegrationRuntimeErrorResponseInput` via:
//
//          ManagedIntegrationRuntimeErrorResponseArgs{...}
type ManagedIntegrationRuntimeErrorResponseInput interface {
	pulumi.Input

	ToManagedIntegrationRuntimeErrorResponseOutput() ManagedIntegrationRuntimeErrorResponseOutput
	ToManagedIntegrationRuntimeErrorResponseOutputWithContext(context.Context) ManagedIntegrationRuntimeErrorResponseOutput
}

// Error definition for managed integration runtime.
type ManagedIntegrationRuntimeErrorResponseArgs struct {
	// Error code.
	Code pulumi.StringInput `pulumi:"code"`
	// Error message.
	Message pulumi.StringInput `pulumi:"message"`
	// Managed integration runtime error parameters.
	Parameters pulumi.StringArrayInput `pulumi:"parameters"`
	// The time when the error occurred.
	Time pulumi.StringInput `pulumi:"time"`
}

func (ManagedIntegrationRuntimeErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntimeErrorResponse)(nil)).Elem()
}

func (i ManagedIntegrationRuntimeErrorResponseArgs) ToManagedIntegrationRuntimeErrorResponseOutput() ManagedIntegrationRuntimeErrorResponseOutput {
	return i.ToManagedIntegrationRuntimeErrorResponseOutputWithContext(context.Background())
}

func (i ManagedIntegrationRuntimeErrorResponseArgs) ToManagedIntegrationRuntimeErrorResponseOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIntegrationRuntimeErrorResponseOutput)
}

// ManagedIntegrationRuntimeErrorResponseArrayInput is an input type that accepts ManagedIntegrationRuntimeErrorResponseArray and ManagedIntegrationRuntimeErrorResponseArrayOutput values.
// You can construct a concrete instance of `ManagedIntegrationRuntimeErrorResponseArrayInput` via:
//
//          ManagedIntegrationRuntimeErrorResponseArray{ ManagedIntegrationRuntimeErrorResponseArgs{...} }
type ManagedIntegrationRuntimeErrorResponseArrayInput interface {
	pulumi.Input

	ToManagedIntegrationRuntimeErrorResponseArrayOutput() ManagedIntegrationRuntimeErrorResponseArrayOutput
	ToManagedIntegrationRuntimeErrorResponseArrayOutputWithContext(context.Context) ManagedIntegrationRuntimeErrorResponseArrayOutput
}

type ManagedIntegrationRuntimeErrorResponseArray []ManagedIntegrationRuntimeErrorResponseInput

func (ManagedIntegrationRuntimeErrorResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedIntegrationRuntimeErrorResponse)(nil)).Elem()
}

func (i ManagedIntegrationRuntimeErrorResponseArray) ToManagedIntegrationRuntimeErrorResponseArrayOutput() ManagedIntegrationRuntimeErrorResponseArrayOutput {
	return i.ToManagedIntegrationRuntimeErrorResponseArrayOutputWithContext(context.Background())
}

func (i ManagedIntegrationRuntimeErrorResponseArray) ToManagedIntegrationRuntimeErrorResponseArrayOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeErrorResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIntegrationRuntimeErrorResponseArrayOutput)
}

// Error definition for managed integration runtime.
type ManagedIntegrationRuntimeErrorResponseOutput struct{ *pulumi.OutputState }

func (ManagedIntegrationRuntimeErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntimeErrorResponse)(nil)).Elem()
}

func (o ManagedIntegrationRuntimeErrorResponseOutput) ToManagedIntegrationRuntimeErrorResponseOutput() ManagedIntegrationRuntimeErrorResponseOutput {
	return o
}

func (o ManagedIntegrationRuntimeErrorResponseOutput) ToManagedIntegrationRuntimeErrorResponseOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeErrorResponseOutput {
	return o
}

// Error code.
func (o ManagedIntegrationRuntimeErrorResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeErrorResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Error message.
func (o ManagedIntegrationRuntimeErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Managed integration runtime error parameters.
func (o ManagedIntegrationRuntimeErrorResponseOutput) Parameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeErrorResponse) []string { return v.Parameters }).(pulumi.StringArrayOutput)
}

// The time when the error occurred.
func (o ManagedIntegrationRuntimeErrorResponseOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeErrorResponse) string { return v.Time }).(pulumi.StringOutput)
}

type ManagedIntegrationRuntimeErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagedIntegrationRuntimeErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedIntegrationRuntimeErrorResponse)(nil)).Elem()
}

func (o ManagedIntegrationRuntimeErrorResponseArrayOutput) ToManagedIntegrationRuntimeErrorResponseArrayOutput() ManagedIntegrationRuntimeErrorResponseArrayOutput {
	return o
}

func (o ManagedIntegrationRuntimeErrorResponseArrayOutput) ToManagedIntegrationRuntimeErrorResponseArrayOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeErrorResponseArrayOutput {
	return o
}

func (o ManagedIntegrationRuntimeErrorResponseArrayOutput) Index(i pulumi.IntInput) ManagedIntegrationRuntimeErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedIntegrationRuntimeErrorResponse {
		return vs[0].([]ManagedIntegrationRuntimeErrorResponse)[vs[1].(int)]
	}).(ManagedIntegrationRuntimeErrorResponseOutput)
}

// Properties of integration runtime node.
type ManagedIntegrationRuntimeNodeResponse struct {
	// The errors that occurred on this integration runtime node.
	Errors []ManagedIntegrationRuntimeErrorResponse `pulumi:"errors"`
	// The managed integration runtime node id.
	NodeId string `pulumi:"nodeId"`
	// The managed integration runtime node status.
	Status string `pulumi:"status"`
}

// ManagedIntegrationRuntimeNodeResponseInput is an input type that accepts ManagedIntegrationRuntimeNodeResponseArgs and ManagedIntegrationRuntimeNodeResponseOutput values.
// You can construct a concrete instance of `ManagedIntegrationRuntimeNodeResponseInput` via:
//
//          ManagedIntegrationRuntimeNodeResponseArgs{...}
type ManagedIntegrationRuntimeNodeResponseInput interface {
	pulumi.Input

	ToManagedIntegrationRuntimeNodeResponseOutput() ManagedIntegrationRuntimeNodeResponseOutput
	ToManagedIntegrationRuntimeNodeResponseOutputWithContext(context.Context) ManagedIntegrationRuntimeNodeResponseOutput
}

// Properties of integration runtime node.
type ManagedIntegrationRuntimeNodeResponseArgs struct {
	// The errors that occurred on this integration runtime node.
	Errors ManagedIntegrationRuntimeErrorResponseArrayInput `pulumi:"errors"`
	// The managed integration runtime node id.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// The managed integration runtime node status.
	Status pulumi.StringInput `pulumi:"status"`
}

func (ManagedIntegrationRuntimeNodeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntimeNodeResponse)(nil)).Elem()
}

func (i ManagedIntegrationRuntimeNodeResponseArgs) ToManagedIntegrationRuntimeNodeResponseOutput() ManagedIntegrationRuntimeNodeResponseOutput {
	return i.ToManagedIntegrationRuntimeNodeResponseOutputWithContext(context.Background())
}

func (i ManagedIntegrationRuntimeNodeResponseArgs) ToManagedIntegrationRuntimeNodeResponseOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeNodeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIntegrationRuntimeNodeResponseOutput)
}

// ManagedIntegrationRuntimeNodeResponseArrayInput is an input type that accepts ManagedIntegrationRuntimeNodeResponseArray and ManagedIntegrationRuntimeNodeResponseArrayOutput values.
// You can construct a concrete instance of `ManagedIntegrationRuntimeNodeResponseArrayInput` via:
//
//          ManagedIntegrationRuntimeNodeResponseArray{ ManagedIntegrationRuntimeNodeResponseArgs{...} }
type ManagedIntegrationRuntimeNodeResponseArrayInput interface {
	pulumi.Input

	ToManagedIntegrationRuntimeNodeResponseArrayOutput() ManagedIntegrationRuntimeNodeResponseArrayOutput
	ToManagedIntegrationRuntimeNodeResponseArrayOutputWithContext(context.Context) ManagedIntegrationRuntimeNodeResponseArrayOutput
}

type ManagedIntegrationRuntimeNodeResponseArray []ManagedIntegrationRuntimeNodeResponseInput

func (ManagedIntegrationRuntimeNodeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedIntegrationRuntimeNodeResponse)(nil)).Elem()
}

func (i ManagedIntegrationRuntimeNodeResponseArray) ToManagedIntegrationRuntimeNodeResponseArrayOutput() ManagedIntegrationRuntimeNodeResponseArrayOutput {
	return i.ToManagedIntegrationRuntimeNodeResponseArrayOutputWithContext(context.Background())
}

func (i ManagedIntegrationRuntimeNodeResponseArray) ToManagedIntegrationRuntimeNodeResponseArrayOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeNodeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIntegrationRuntimeNodeResponseArrayOutput)
}

// Properties of integration runtime node.
type ManagedIntegrationRuntimeNodeResponseOutput struct{ *pulumi.OutputState }

func (ManagedIntegrationRuntimeNodeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntimeNodeResponse)(nil)).Elem()
}

func (o ManagedIntegrationRuntimeNodeResponseOutput) ToManagedIntegrationRuntimeNodeResponseOutput() ManagedIntegrationRuntimeNodeResponseOutput {
	return o
}

func (o ManagedIntegrationRuntimeNodeResponseOutput) ToManagedIntegrationRuntimeNodeResponseOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeNodeResponseOutput {
	return o
}

// The errors that occurred on this integration runtime node.
func (o ManagedIntegrationRuntimeNodeResponseOutput) Errors() ManagedIntegrationRuntimeErrorResponseArrayOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeNodeResponse) []ManagedIntegrationRuntimeErrorResponse {
		return v.Errors
	}).(ManagedIntegrationRuntimeErrorResponseArrayOutput)
}

// The managed integration runtime node id.
func (o ManagedIntegrationRuntimeNodeResponseOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeNodeResponse) string { return v.NodeId }).(pulumi.StringOutput)
}

// The managed integration runtime node status.
func (o ManagedIntegrationRuntimeNodeResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeNodeResponse) string { return v.Status }).(pulumi.StringOutput)
}

type ManagedIntegrationRuntimeNodeResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagedIntegrationRuntimeNodeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedIntegrationRuntimeNodeResponse)(nil)).Elem()
}

func (o ManagedIntegrationRuntimeNodeResponseArrayOutput) ToManagedIntegrationRuntimeNodeResponseArrayOutput() ManagedIntegrationRuntimeNodeResponseArrayOutput {
	return o
}

func (o ManagedIntegrationRuntimeNodeResponseArrayOutput) ToManagedIntegrationRuntimeNodeResponseArrayOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeNodeResponseArrayOutput {
	return o
}

func (o ManagedIntegrationRuntimeNodeResponseArrayOutput) Index(i pulumi.IntInput) ManagedIntegrationRuntimeNodeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedIntegrationRuntimeNodeResponse {
		return vs[0].([]ManagedIntegrationRuntimeNodeResponse)[vs[1].(int)]
	}).(ManagedIntegrationRuntimeNodeResponseOutput)
}

// Properties of managed integration runtime operation result.
type ManagedIntegrationRuntimeOperationResultResponse struct {
	// The activity id for the operation request.
	ActivityId string `pulumi:"activityId"`
	// The error code.
	ErrorCode string `pulumi:"errorCode"`
	// Managed integration runtime error parameters.
	Parameters []string `pulumi:"parameters"`
	// The operation result.
	Result string `pulumi:"result"`
	// The start time of the operation.
	StartTime string `pulumi:"startTime"`
	// The operation type. Could be start or stop.
	Type string `pulumi:"type"`
}

// ManagedIntegrationRuntimeOperationResultResponseInput is an input type that accepts ManagedIntegrationRuntimeOperationResultResponseArgs and ManagedIntegrationRuntimeOperationResultResponseOutput values.
// You can construct a concrete instance of `ManagedIntegrationRuntimeOperationResultResponseInput` via:
//
//          ManagedIntegrationRuntimeOperationResultResponseArgs{...}
type ManagedIntegrationRuntimeOperationResultResponseInput interface {
	pulumi.Input

	ToManagedIntegrationRuntimeOperationResultResponseOutput() ManagedIntegrationRuntimeOperationResultResponseOutput
	ToManagedIntegrationRuntimeOperationResultResponseOutputWithContext(context.Context) ManagedIntegrationRuntimeOperationResultResponseOutput
}

// Properties of managed integration runtime operation result.
type ManagedIntegrationRuntimeOperationResultResponseArgs struct {
	// The activity id for the operation request.
	ActivityId pulumi.StringInput `pulumi:"activityId"`
	// The error code.
	ErrorCode pulumi.StringInput `pulumi:"errorCode"`
	// Managed integration runtime error parameters.
	Parameters pulumi.StringArrayInput `pulumi:"parameters"`
	// The operation result.
	Result pulumi.StringInput `pulumi:"result"`
	// The start time of the operation.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// The operation type. Could be start or stop.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ManagedIntegrationRuntimeOperationResultResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntimeOperationResultResponse)(nil)).Elem()
}

func (i ManagedIntegrationRuntimeOperationResultResponseArgs) ToManagedIntegrationRuntimeOperationResultResponseOutput() ManagedIntegrationRuntimeOperationResultResponseOutput {
	return i.ToManagedIntegrationRuntimeOperationResultResponseOutputWithContext(context.Background())
}

func (i ManagedIntegrationRuntimeOperationResultResponseArgs) ToManagedIntegrationRuntimeOperationResultResponseOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeOperationResultResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIntegrationRuntimeOperationResultResponseOutput)
}

// Properties of managed integration runtime operation result.
type ManagedIntegrationRuntimeOperationResultResponseOutput struct{ *pulumi.OutputState }

func (ManagedIntegrationRuntimeOperationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntimeOperationResultResponse)(nil)).Elem()
}

func (o ManagedIntegrationRuntimeOperationResultResponseOutput) ToManagedIntegrationRuntimeOperationResultResponseOutput() ManagedIntegrationRuntimeOperationResultResponseOutput {
	return o
}

func (o ManagedIntegrationRuntimeOperationResultResponseOutput) ToManagedIntegrationRuntimeOperationResultResponseOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeOperationResultResponseOutput {
	return o
}

// The activity id for the operation request.
func (o ManagedIntegrationRuntimeOperationResultResponseOutput) ActivityId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeOperationResultResponse) string { return v.ActivityId }).(pulumi.StringOutput)
}

// The error code.
func (o ManagedIntegrationRuntimeOperationResultResponseOutput) ErrorCode() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeOperationResultResponse) string { return v.ErrorCode }).(pulumi.StringOutput)
}

// Managed integration runtime error parameters.
func (o ManagedIntegrationRuntimeOperationResultResponseOutput) Parameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeOperationResultResponse) []string { return v.Parameters }).(pulumi.StringArrayOutput)
}

// The operation result.
func (o ManagedIntegrationRuntimeOperationResultResponseOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeOperationResultResponse) string { return v.Result }).(pulumi.StringOutput)
}

// The start time of the operation.
func (o ManagedIntegrationRuntimeOperationResultResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeOperationResultResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// The operation type. Could be start or stop.
func (o ManagedIntegrationRuntimeOperationResultResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeOperationResultResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntimeResponse struct {
	// The compute resource for managed integration runtime.
	ComputeProperties *IntegrationRuntimeComputePropertiesResponse `pulumi:"computeProperties"`
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// SSIS properties for managed integration runtime.
	SsisProperties *IntegrationRuntimeSsisPropertiesResponse `pulumi:"ssisProperties"`
	// Integration runtime state, only valid for managed dedicated integration runtime.
	State string `pulumi:"state"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// ManagedIntegrationRuntimeResponseInput is an input type that accepts ManagedIntegrationRuntimeResponseArgs and ManagedIntegrationRuntimeResponseOutput values.
// You can construct a concrete instance of `ManagedIntegrationRuntimeResponseInput` via:
//
//          ManagedIntegrationRuntimeResponseArgs{...}
type ManagedIntegrationRuntimeResponseInput interface {
	pulumi.Input

	ToManagedIntegrationRuntimeResponseOutput() ManagedIntegrationRuntimeResponseOutput
	ToManagedIntegrationRuntimeResponseOutputWithContext(context.Context) ManagedIntegrationRuntimeResponseOutput
}

// Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntimeResponseArgs struct {
	// The compute resource for managed integration runtime.
	ComputeProperties IntegrationRuntimeComputePropertiesResponsePtrInput `pulumi:"computeProperties"`
	// Integration runtime description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// SSIS properties for managed integration runtime.
	SsisProperties IntegrationRuntimeSsisPropertiesResponsePtrInput `pulumi:"ssisProperties"`
	// Integration runtime state, only valid for managed dedicated integration runtime.
	State pulumi.StringInput `pulumi:"state"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ManagedIntegrationRuntimeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntimeResponse)(nil)).Elem()
}

func (i ManagedIntegrationRuntimeResponseArgs) ToManagedIntegrationRuntimeResponseOutput() ManagedIntegrationRuntimeResponseOutput {
	return i.ToManagedIntegrationRuntimeResponseOutputWithContext(context.Background())
}

func (i ManagedIntegrationRuntimeResponseArgs) ToManagedIntegrationRuntimeResponseOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIntegrationRuntimeResponseOutput)
}

// Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntimeResponseOutput struct{ *pulumi.OutputState }

func (ManagedIntegrationRuntimeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntimeResponse)(nil)).Elem()
}

func (o ManagedIntegrationRuntimeResponseOutput) ToManagedIntegrationRuntimeResponseOutput() ManagedIntegrationRuntimeResponseOutput {
	return o
}

func (o ManagedIntegrationRuntimeResponseOutput) ToManagedIntegrationRuntimeResponseOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeResponseOutput {
	return o
}

// The compute resource for managed integration runtime.
func (o ManagedIntegrationRuntimeResponseOutput) ComputeProperties() IntegrationRuntimeComputePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeResponse) *IntegrationRuntimeComputePropertiesResponse {
		return v.ComputeProperties
	}).(IntegrationRuntimeComputePropertiesResponsePtrOutput)
}

// Integration runtime description.
func (o ManagedIntegrationRuntimeResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// SSIS properties for managed integration runtime.
func (o ManagedIntegrationRuntimeResponseOutput) SsisProperties() IntegrationRuntimeSsisPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeResponse) *IntegrationRuntimeSsisPropertiesResponse {
		return v.SsisProperties
	}).(IntegrationRuntimeSsisPropertiesResponsePtrOutput)
}

// Integration runtime state, only valid for managed dedicated integration runtime.
func (o ManagedIntegrationRuntimeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeResponse) string { return v.State }).(pulumi.StringOutput)
}

// Type of integration runtime.
func (o ManagedIntegrationRuntimeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Managed integration runtime status.
type ManagedIntegrationRuntimeStatusResponse struct {
	// The time at which the integration runtime was created, in ISO8601 format.
	CreateTime string `pulumi:"createTime"`
	// The data factory name which the integration runtime belong to.
	DataFactoryName string `pulumi:"dataFactoryName"`
	// The last operation result that occurred on this integration runtime.
	LastOperation ManagedIntegrationRuntimeOperationResultResponse `pulumi:"lastOperation"`
	// The list of nodes for managed integration runtime.
	Nodes []ManagedIntegrationRuntimeNodeResponse `pulumi:"nodes"`
	// The errors that occurred on this integration runtime.
	OtherErrors []ManagedIntegrationRuntimeErrorResponse `pulumi:"otherErrors"`
	// The state of integration runtime.
	State string `pulumi:"state"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// ManagedIntegrationRuntimeStatusResponseInput is an input type that accepts ManagedIntegrationRuntimeStatusResponseArgs and ManagedIntegrationRuntimeStatusResponseOutput values.
// You can construct a concrete instance of `ManagedIntegrationRuntimeStatusResponseInput` via:
//
//          ManagedIntegrationRuntimeStatusResponseArgs{...}
type ManagedIntegrationRuntimeStatusResponseInput interface {
	pulumi.Input

	ToManagedIntegrationRuntimeStatusResponseOutput() ManagedIntegrationRuntimeStatusResponseOutput
	ToManagedIntegrationRuntimeStatusResponseOutputWithContext(context.Context) ManagedIntegrationRuntimeStatusResponseOutput
}

// Managed integration runtime status.
type ManagedIntegrationRuntimeStatusResponseArgs struct {
	// The time at which the integration runtime was created, in ISO8601 format.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The data factory name which the integration runtime belong to.
	DataFactoryName pulumi.StringInput `pulumi:"dataFactoryName"`
	// The last operation result that occurred on this integration runtime.
	LastOperation ManagedIntegrationRuntimeOperationResultResponseInput `pulumi:"lastOperation"`
	// The list of nodes for managed integration runtime.
	Nodes ManagedIntegrationRuntimeNodeResponseArrayInput `pulumi:"nodes"`
	// The errors that occurred on this integration runtime.
	OtherErrors ManagedIntegrationRuntimeErrorResponseArrayInput `pulumi:"otherErrors"`
	// The state of integration runtime.
	State pulumi.StringInput `pulumi:"state"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ManagedIntegrationRuntimeStatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntimeStatusResponse)(nil)).Elem()
}

func (i ManagedIntegrationRuntimeStatusResponseArgs) ToManagedIntegrationRuntimeStatusResponseOutput() ManagedIntegrationRuntimeStatusResponseOutput {
	return i.ToManagedIntegrationRuntimeStatusResponseOutputWithContext(context.Background())
}

func (i ManagedIntegrationRuntimeStatusResponseArgs) ToManagedIntegrationRuntimeStatusResponseOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeStatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIntegrationRuntimeStatusResponseOutput)
}

// Managed integration runtime status.
type ManagedIntegrationRuntimeStatusResponseOutput struct{ *pulumi.OutputState }

func (ManagedIntegrationRuntimeStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntimeStatusResponse)(nil)).Elem()
}

func (o ManagedIntegrationRuntimeStatusResponseOutput) ToManagedIntegrationRuntimeStatusResponseOutput() ManagedIntegrationRuntimeStatusResponseOutput {
	return o
}

func (o ManagedIntegrationRuntimeStatusResponseOutput) ToManagedIntegrationRuntimeStatusResponseOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeStatusResponseOutput {
	return o
}

// The time at which the integration runtime was created, in ISO8601 format.
func (o ManagedIntegrationRuntimeStatusResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeStatusResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The data factory name which the integration runtime belong to.
func (o ManagedIntegrationRuntimeStatusResponseOutput) DataFactoryName() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeStatusResponse) string { return v.DataFactoryName }).(pulumi.StringOutput)
}

// The last operation result that occurred on this integration runtime.
func (o ManagedIntegrationRuntimeStatusResponseOutput) LastOperation() ManagedIntegrationRuntimeOperationResultResponseOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeStatusResponse) ManagedIntegrationRuntimeOperationResultResponse {
		return v.LastOperation
	}).(ManagedIntegrationRuntimeOperationResultResponseOutput)
}

// The list of nodes for managed integration runtime.
func (o ManagedIntegrationRuntimeStatusResponseOutput) Nodes() ManagedIntegrationRuntimeNodeResponseArrayOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeStatusResponse) []ManagedIntegrationRuntimeNodeResponse {
		return v.Nodes
	}).(ManagedIntegrationRuntimeNodeResponseArrayOutput)
}

// The errors that occurred on this integration runtime.
func (o ManagedIntegrationRuntimeStatusResponseOutput) OtherErrors() ManagedIntegrationRuntimeErrorResponseArrayOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeStatusResponse) []ManagedIntegrationRuntimeErrorResponse {
		return v.OtherErrors
	}).(ManagedIntegrationRuntimeErrorResponseArrayOutput)
}

// The state of integration runtime.
func (o ManagedIntegrationRuntimeStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

// Type of integration runtime.
func (o ManagedIntegrationRuntimeStatusResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeStatusResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointType struct {
	// Fully qualified domain names
	Fqdns []string `pulumi:"fqdns"`
	// The groupId to which the managed private endpoint is created
	GroupId *string `pulumi:"groupId"`
	// The ARM resource ID of the resource to which the managed private endpoint is created
	PrivateLinkResourceId *string `pulumi:"privateLinkResourceId"`
}

// ManagedPrivateEndpointTypeInput is an input type that accepts ManagedPrivateEndpointTypeArgs and ManagedPrivateEndpointTypeOutput values.
// You can construct a concrete instance of `ManagedPrivateEndpointTypeInput` via:
//
//          ManagedPrivateEndpointTypeArgs{...}
type ManagedPrivateEndpointTypeInput interface {
	pulumi.Input

	ToManagedPrivateEndpointTypeOutput() ManagedPrivateEndpointTypeOutput
	ToManagedPrivateEndpointTypeOutputWithContext(context.Context) ManagedPrivateEndpointTypeOutput
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointTypeArgs struct {
	// Fully qualified domain names
	Fqdns pulumi.StringArrayInput `pulumi:"fqdns"`
	// The groupId to which the managed private endpoint is created
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// The ARM resource ID of the resource to which the managed private endpoint is created
	PrivateLinkResourceId pulumi.StringPtrInput `pulumi:"privateLinkResourceId"`
}

func (ManagedPrivateEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrivateEndpointType)(nil)).Elem()
}

func (i ManagedPrivateEndpointTypeArgs) ToManagedPrivateEndpointTypeOutput() ManagedPrivateEndpointTypeOutput {
	return i.ToManagedPrivateEndpointTypeOutputWithContext(context.Background())
}

func (i ManagedPrivateEndpointTypeArgs) ToManagedPrivateEndpointTypeOutputWithContext(ctx context.Context) ManagedPrivateEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrivateEndpointTypeOutput)
}

func (i ManagedPrivateEndpointTypeArgs) ToManagedPrivateEndpointTypePtrOutput() ManagedPrivateEndpointTypePtrOutput {
	return i.ToManagedPrivateEndpointTypePtrOutputWithContext(context.Background())
}

func (i ManagedPrivateEndpointTypeArgs) ToManagedPrivateEndpointTypePtrOutputWithContext(ctx context.Context) ManagedPrivateEndpointTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrivateEndpointTypeOutput).ToManagedPrivateEndpointTypePtrOutputWithContext(ctx)
}

// ManagedPrivateEndpointTypePtrInput is an input type that accepts ManagedPrivateEndpointTypeArgs, ManagedPrivateEndpointTypePtr and ManagedPrivateEndpointTypePtrOutput values.
// You can construct a concrete instance of `ManagedPrivateEndpointTypePtrInput` via:
//
//          ManagedPrivateEndpointTypeArgs{...}
//
//  or:
//
//          nil
type ManagedPrivateEndpointTypePtrInput interface {
	pulumi.Input

	ToManagedPrivateEndpointTypePtrOutput() ManagedPrivateEndpointTypePtrOutput
	ToManagedPrivateEndpointTypePtrOutputWithContext(context.Context) ManagedPrivateEndpointTypePtrOutput
}

type managedPrivateEndpointTypePtrType ManagedPrivateEndpointTypeArgs

func ManagedPrivateEndpointTypePtr(v *ManagedPrivateEndpointTypeArgs) ManagedPrivateEndpointTypePtrInput {
	return (*managedPrivateEndpointTypePtrType)(v)
}

func (*managedPrivateEndpointTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedPrivateEndpointType)(nil)).Elem()
}

func (i *managedPrivateEndpointTypePtrType) ToManagedPrivateEndpointTypePtrOutput() ManagedPrivateEndpointTypePtrOutput {
	return i.ToManagedPrivateEndpointTypePtrOutputWithContext(context.Background())
}

func (i *managedPrivateEndpointTypePtrType) ToManagedPrivateEndpointTypePtrOutputWithContext(ctx context.Context) ManagedPrivateEndpointTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrivateEndpointTypePtrOutput)
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointTypeOutput struct{ *pulumi.OutputState }

func (ManagedPrivateEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrivateEndpointType)(nil)).Elem()
}

func (o ManagedPrivateEndpointTypeOutput) ToManagedPrivateEndpointTypeOutput() ManagedPrivateEndpointTypeOutput {
	return o
}

func (o ManagedPrivateEndpointTypeOutput) ToManagedPrivateEndpointTypeOutputWithContext(ctx context.Context) ManagedPrivateEndpointTypeOutput {
	return o
}

func (o ManagedPrivateEndpointTypeOutput) ToManagedPrivateEndpointTypePtrOutput() ManagedPrivateEndpointTypePtrOutput {
	return o.ToManagedPrivateEndpointTypePtrOutputWithContext(context.Background())
}

func (o ManagedPrivateEndpointTypeOutput) ToManagedPrivateEndpointTypePtrOutputWithContext(ctx context.Context) ManagedPrivateEndpointTypePtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointType) *ManagedPrivateEndpointType {
		return &v
	}).(ManagedPrivateEndpointTypePtrOutput)
}

// Fully qualified domain names
func (o ManagedPrivateEndpointTypeOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointType) []string { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// The groupId to which the managed private endpoint is created
func (o ManagedPrivateEndpointTypeOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointType) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// The ARM resource ID of the resource to which the managed private endpoint is created
func (o ManagedPrivateEndpointTypeOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointType) *string { return v.PrivateLinkResourceId }).(pulumi.StringPtrOutput)
}

type ManagedPrivateEndpointTypePtrOutput struct{ *pulumi.OutputState }

func (ManagedPrivateEndpointTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedPrivateEndpointType)(nil)).Elem()
}

func (o ManagedPrivateEndpointTypePtrOutput) ToManagedPrivateEndpointTypePtrOutput() ManagedPrivateEndpointTypePtrOutput {
	return o
}

func (o ManagedPrivateEndpointTypePtrOutput) ToManagedPrivateEndpointTypePtrOutputWithContext(ctx context.Context) ManagedPrivateEndpointTypePtrOutput {
	return o
}

func (o ManagedPrivateEndpointTypePtrOutput) Elem() ManagedPrivateEndpointTypeOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointType) ManagedPrivateEndpointType { return *v }).(ManagedPrivateEndpointTypeOutput)
}

// Fully qualified domain names
func (o ManagedPrivateEndpointTypePtrOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointType) []string {
		if v == nil {
			return nil
		}
		return v.Fqdns
	}).(pulumi.StringArrayOutput)
}

// The groupId to which the managed private endpoint is created
func (o ManagedPrivateEndpointTypePtrOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointType) *string {
		if v == nil {
			return nil
		}
		return v.GroupId
	}).(pulumi.StringPtrOutput)
}

// The ARM resource ID of the resource to which the managed private endpoint is created
func (o ManagedPrivateEndpointTypePtrOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointType) *string {
		if v == nil {
			return nil
		}
		return v.PrivateLinkResourceId
	}).(pulumi.StringPtrOutput)
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointResponse struct {
	// The managed private endpoint connection state
	ConnectionState *ConnectionStatePropertiesResponse `pulumi:"connectionState"`
	// Fully qualified domain names
	Fqdns []string `pulumi:"fqdns"`
	// The groupId to which the managed private endpoint is created
	GroupId *string `pulumi:"groupId"`
	// Denotes whether the managed private endpoint is reserved
	IsReserved bool `pulumi:"isReserved"`
	// The ARM resource ID of the resource to which the managed private endpoint is created
	PrivateLinkResourceId *string `pulumi:"privateLinkResourceId"`
	// The managed private endpoint provisioning state
	ProvisioningState string `pulumi:"provisioningState"`
}

// ManagedPrivateEndpointResponseInput is an input type that accepts ManagedPrivateEndpointResponseArgs and ManagedPrivateEndpointResponseOutput values.
// You can construct a concrete instance of `ManagedPrivateEndpointResponseInput` via:
//
//          ManagedPrivateEndpointResponseArgs{...}
type ManagedPrivateEndpointResponseInput interface {
	pulumi.Input

	ToManagedPrivateEndpointResponseOutput() ManagedPrivateEndpointResponseOutput
	ToManagedPrivateEndpointResponseOutputWithContext(context.Context) ManagedPrivateEndpointResponseOutput
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointResponseArgs struct {
	// The managed private endpoint connection state
	ConnectionState ConnectionStatePropertiesResponsePtrInput `pulumi:"connectionState"`
	// Fully qualified domain names
	Fqdns pulumi.StringArrayInput `pulumi:"fqdns"`
	// The groupId to which the managed private endpoint is created
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// Denotes whether the managed private endpoint is reserved
	IsReserved pulumi.BoolInput `pulumi:"isReserved"`
	// The ARM resource ID of the resource to which the managed private endpoint is created
	PrivateLinkResourceId pulumi.StringPtrInput `pulumi:"privateLinkResourceId"`
	// The managed private endpoint provisioning state
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
}

func (ManagedPrivateEndpointResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrivateEndpointResponse)(nil)).Elem()
}

func (i ManagedPrivateEndpointResponseArgs) ToManagedPrivateEndpointResponseOutput() ManagedPrivateEndpointResponseOutput {
	return i.ToManagedPrivateEndpointResponseOutputWithContext(context.Background())
}

func (i ManagedPrivateEndpointResponseArgs) ToManagedPrivateEndpointResponseOutputWithContext(ctx context.Context) ManagedPrivateEndpointResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrivateEndpointResponseOutput)
}

func (i ManagedPrivateEndpointResponseArgs) ToManagedPrivateEndpointResponsePtrOutput() ManagedPrivateEndpointResponsePtrOutput {
	return i.ToManagedPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (i ManagedPrivateEndpointResponseArgs) ToManagedPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) ManagedPrivateEndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrivateEndpointResponseOutput).ToManagedPrivateEndpointResponsePtrOutputWithContext(ctx)
}

// ManagedPrivateEndpointResponsePtrInput is an input type that accepts ManagedPrivateEndpointResponseArgs, ManagedPrivateEndpointResponsePtr and ManagedPrivateEndpointResponsePtrOutput values.
// You can construct a concrete instance of `ManagedPrivateEndpointResponsePtrInput` via:
//
//          ManagedPrivateEndpointResponseArgs{...}
//
//  or:
//
//          nil
type ManagedPrivateEndpointResponsePtrInput interface {
	pulumi.Input

	ToManagedPrivateEndpointResponsePtrOutput() ManagedPrivateEndpointResponsePtrOutput
	ToManagedPrivateEndpointResponsePtrOutputWithContext(context.Context) ManagedPrivateEndpointResponsePtrOutput
}

type managedPrivateEndpointResponsePtrType ManagedPrivateEndpointResponseArgs

func ManagedPrivateEndpointResponsePtr(v *ManagedPrivateEndpointResponseArgs) ManagedPrivateEndpointResponsePtrInput {
	return (*managedPrivateEndpointResponsePtrType)(v)
}

func (*managedPrivateEndpointResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedPrivateEndpointResponse)(nil)).Elem()
}

func (i *managedPrivateEndpointResponsePtrType) ToManagedPrivateEndpointResponsePtrOutput() ManagedPrivateEndpointResponsePtrOutput {
	return i.ToManagedPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (i *managedPrivateEndpointResponsePtrType) ToManagedPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) ManagedPrivateEndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrivateEndpointResponsePtrOutput)
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (ManagedPrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrivateEndpointResponse)(nil)).Elem()
}

func (o ManagedPrivateEndpointResponseOutput) ToManagedPrivateEndpointResponseOutput() ManagedPrivateEndpointResponseOutput {
	return o
}

func (o ManagedPrivateEndpointResponseOutput) ToManagedPrivateEndpointResponseOutputWithContext(ctx context.Context) ManagedPrivateEndpointResponseOutput {
	return o
}

func (o ManagedPrivateEndpointResponseOutput) ToManagedPrivateEndpointResponsePtrOutput() ManagedPrivateEndpointResponsePtrOutput {
	return o.ToManagedPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (o ManagedPrivateEndpointResponseOutput) ToManagedPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) ManagedPrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) *ManagedPrivateEndpointResponse {
		return &v
	}).(ManagedPrivateEndpointResponsePtrOutput)
}

// The managed private endpoint connection state
func (o ManagedPrivateEndpointResponseOutput) ConnectionState() ConnectionStatePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) *ConnectionStatePropertiesResponse { return v.ConnectionState }).(ConnectionStatePropertiesResponsePtrOutput)
}

// Fully qualified domain names
func (o ManagedPrivateEndpointResponseOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) []string { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// The groupId to which the managed private endpoint is created
func (o ManagedPrivateEndpointResponseOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Denotes whether the managed private endpoint is reserved
func (o ManagedPrivateEndpointResponseOutput) IsReserved() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) bool { return v.IsReserved }).(pulumi.BoolOutput)
}

// The ARM resource ID of the resource to which the managed private endpoint is created
func (o ManagedPrivateEndpointResponseOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) *string { return v.PrivateLinkResourceId }).(pulumi.StringPtrOutput)
}

// The managed private endpoint provisioning state
func (o ManagedPrivateEndpointResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type ManagedPrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedPrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedPrivateEndpointResponse)(nil)).Elem()
}

func (o ManagedPrivateEndpointResponsePtrOutput) ToManagedPrivateEndpointResponsePtrOutput() ManagedPrivateEndpointResponsePtrOutput {
	return o
}

func (o ManagedPrivateEndpointResponsePtrOutput) ToManagedPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) ManagedPrivateEndpointResponsePtrOutput {
	return o
}

func (o ManagedPrivateEndpointResponsePtrOutput) Elem() ManagedPrivateEndpointResponseOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointResponse) ManagedPrivateEndpointResponse { return *v }).(ManagedPrivateEndpointResponseOutput)
}

// The managed private endpoint connection state
func (o ManagedPrivateEndpointResponsePtrOutput) ConnectionState() ConnectionStatePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointResponse) *ConnectionStatePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.ConnectionState
	}).(ConnectionStatePropertiesResponsePtrOutput)
}

// Fully qualified domain names
func (o ManagedPrivateEndpointResponsePtrOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointResponse) []string {
		if v == nil {
			return nil
		}
		return v.Fqdns
	}).(pulumi.StringArrayOutput)
}

// The groupId to which the managed private endpoint is created
func (o ManagedPrivateEndpointResponsePtrOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupId
	}).(pulumi.StringPtrOutput)
}

// Denotes whether the managed private endpoint is reserved
func (o ManagedPrivateEndpointResponsePtrOutput) IsReserved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsReserved
	}).(pulumi.BoolPtrOutput)
}

// The ARM resource ID of the resource to which the managed private endpoint is created
func (o ManagedPrivateEndpointResponsePtrOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrivateLinkResourceId
	}).(pulumi.StringPtrOutput)
}

// The managed private endpoint provisioning state
func (o ManagedPrivateEndpointResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Mapping data flow.
type MappingDataFlow struct {
	// List of tags that can be used for describing the data flow.
	Annotations []interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowFolder `pulumi:"folder"`
	// DataFlow script.
	Script *string `pulumi:"script"`
	// List of sinks in data flow.
	Sinks []DataFlowSink `pulumi:"sinks"`
	// List of sources in data flow.
	Sources []DataFlowSource `pulumi:"sources"`
	// List of transformations in data flow.
	Transformations []Transformation `pulumi:"transformations"`
	// Type of data flow.
	Type *string `pulumi:"type"`
}

// MappingDataFlowInput is an input type that accepts MappingDataFlowArgs and MappingDataFlowOutput values.
// You can construct a concrete instance of `MappingDataFlowInput` via:
//
//          MappingDataFlowArgs{...}
type MappingDataFlowInput interface {
	pulumi.Input

	ToMappingDataFlowOutput() MappingDataFlowOutput
	ToMappingDataFlowOutputWithContext(context.Context) MappingDataFlowOutput
}

// Mapping data flow.
type MappingDataFlowArgs struct {
	// List of tags that can be used for describing the data flow.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The description of the data flow.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder DataFlowFolderPtrInput `pulumi:"folder"`
	// DataFlow script.
	Script pulumi.StringPtrInput `pulumi:"script"`
	// List of sinks in data flow.
	Sinks DataFlowSinkArrayInput `pulumi:"sinks"`
	// List of sources in data flow.
	Sources DataFlowSourceArrayInput `pulumi:"sources"`
	// List of transformations in data flow.
	Transformations TransformationArrayInput `pulumi:"transformations"`
	// Type of data flow.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MappingDataFlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingDataFlow)(nil)).Elem()
}

func (i MappingDataFlowArgs) ToMappingDataFlowOutput() MappingDataFlowOutput {
	return i.ToMappingDataFlowOutputWithContext(context.Background())
}

func (i MappingDataFlowArgs) ToMappingDataFlowOutputWithContext(ctx context.Context) MappingDataFlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingDataFlowOutput)
}

func (i MappingDataFlowArgs) ToMappingDataFlowPtrOutput() MappingDataFlowPtrOutput {
	return i.ToMappingDataFlowPtrOutputWithContext(context.Background())
}

func (i MappingDataFlowArgs) ToMappingDataFlowPtrOutputWithContext(ctx context.Context) MappingDataFlowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingDataFlowOutput).ToMappingDataFlowPtrOutputWithContext(ctx)
}

// MappingDataFlowPtrInput is an input type that accepts MappingDataFlowArgs, MappingDataFlowPtr and MappingDataFlowPtrOutput values.
// You can construct a concrete instance of `MappingDataFlowPtrInput` via:
//
//          MappingDataFlowArgs{...}
//
//  or:
//
//          nil
type MappingDataFlowPtrInput interface {
	pulumi.Input

	ToMappingDataFlowPtrOutput() MappingDataFlowPtrOutput
	ToMappingDataFlowPtrOutputWithContext(context.Context) MappingDataFlowPtrOutput
}

type mappingDataFlowPtrType MappingDataFlowArgs

func MappingDataFlowPtr(v *MappingDataFlowArgs) MappingDataFlowPtrInput {
	return (*mappingDataFlowPtrType)(v)
}

func (*mappingDataFlowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingDataFlow)(nil)).Elem()
}

func (i *mappingDataFlowPtrType) ToMappingDataFlowPtrOutput() MappingDataFlowPtrOutput {
	return i.ToMappingDataFlowPtrOutputWithContext(context.Background())
}

func (i *mappingDataFlowPtrType) ToMappingDataFlowPtrOutputWithContext(ctx context.Context) MappingDataFlowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingDataFlowPtrOutput)
}

// Mapping data flow.
type MappingDataFlowOutput struct{ *pulumi.OutputState }

func (MappingDataFlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingDataFlow)(nil)).Elem()
}

func (o MappingDataFlowOutput) ToMappingDataFlowOutput() MappingDataFlowOutput {
	return o
}

func (o MappingDataFlowOutput) ToMappingDataFlowOutputWithContext(ctx context.Context) MappingDataFlowOutput {
	return o
}

func (o MappingDataFlowOutput) ToMappingDataFlowPtrOutput() MappingDataFlowPtrOutput {
	return o.ToMappingDataFlowPtrOutputWithContext(context.Background())
}

func (o MappingDataFlowOutput) ToMappingDataFlowPtrOutputWithContext(ctx context.Context) MappingDataFlowPtrOutput {
	return o.ApplyT(func(v MappingDataFlow) *MappingDataFlow {
		return &v
	}).(MappingDataFlowPtrOutput)
}

// List of tags that can be used for describing the data flow.
func (o MappingDataFlowOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MappingDataFlow) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The description of the data flow.
func (o MappingDataFlowOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingDataFlow) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
func (o MappingDataFlowOutput) Folder() DataFlowFolderPtrOutput {
	return o.ApplyT(func(v MappingDataFlow) *DataFlowFolder { return v.Folder }).(DataFlowFolderPtrOutput)
}

// DataFlow script.
func (o MappingDataFlowOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingDataFlow) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// List of sinks in data flow.
func (o MappingDataFlowOutput) Sinks() DataFlowSinkArrayOutput {
	return o.ApplyT(func(v MappingDataFlow) []DataFlowSink { return v.Sinks }).(DataFlowSinkArrayOutput)
}

// List of sources in data flow.
func (o MappingDataFlowOutput) Sources() DataFlowSourceArrayOutput {
	return o.ApplyT(func(v MappingDataFlow) []DataFlowSource { return v.Sources }).(DataFlowSourceArrayOutput)
}

// List of transformations in data flow.
func (o MappingDataFlowOutput) Transformations() TransformationArrayOutput {
	return o.ApplyT(func(v MappingDataFlow) []Transformation { return v.Transformations }).(TransformationArrayOutput)
}

// Type of data flow.
func (o MappingDataFlowOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingDataFlow) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MappingDataFlowPtrOutput struct{ *pulumi.OutputState }

func (MappingDataFlowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingDataFlow)(nil)).Elem()
}

func (o MappingDataFlowPtrOutput) ToMappingDataFlowPtrOutput() MappingDataFlowPtrOutput {
	return o
}

func (o MappingDataFlowPtrOutput) ToMappingDataFlowPtrOutputWithContext(ctx context.Context) MappingDataFlowPtrOutput {
	return o
}

func (o MappingDataFlowPtrOutput) Elem() MappingDataFlowOutput {
	return o.ApplyT(func(v *MappingDataFlow) MappingDataFlow { return *v }).(MappingDataFlowOutput)
}

// List of tags that can be used for describing the data flow.
func (o MappingDataFlowPtrOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v *MappingDataFlow) []interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.ArrayOutput)
}

// The description of the data flow.
func (o MappingDataFlowPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingDataFlow) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
func (o MappingDataFlowPtrOutput) Folder() DataFlowFolderPtrOutput {
	return o.ApplyT(func(v *MappingDataFlow) *DataFlowFolder {
		if v == nil {
			return nil
		}
		return v.Folder
	}).(DataFlowFolderPtrOutput)
}

// DataFlow script.
func (o MappingDataFlowPtrOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingDataFlow) *string {
		if v == nil {
			return nil
		}
		return v.Script
	}).(pulumi.StringPtrOutput)
}

// List of sinks in data flow.
func (o MappingDataFlowPtrOutput) Sinks() DataFlowSinkArrayOutput {
	return o.ApplyT(func(v *MappingDataFlow) []DataFlowSink {
		if v == nil {
			return nil
		}
		return v.Sinks
	}).(DataFlowSinkArrayOutput)
}

// List of sources in data flow.
func (o MappingDataFlowPtrOutput) Sources() DataFlowSourceArrayOutput {
	return o.ApplyT(func(v *MappingDataFlow) []DataFlowSource {
		if v == nil {
			return nil
		}
		return v.Sources
	}).(DataFlowSourceArrayOutput)
}

// List of transformations in data flow.
func (o MappingDataFlowPtrOutput) Transformations() TransformationArrayOutput {
	return o.ApplyT(func(v *MappingDataFlow) []Transformation {
		if v == nil {
			return nil
		}
		return v.Transformations
	}).(TransformationArrayOutput)
}

// Type of data flow.
func (o MappingDataFlowPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingDataFlow) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Mapping data flow.
type MappingDataFlowResponse struct {
	// List of tags that can be used for describing the data flow.
	Annotations []interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowResponseFolder `pulumi:"folder"`
	// DataFlow script.
	Script *string `pulumi:"script"`
	// List of sinks in data flow.
	Sinks []DataFlowSinkResponse `pulumi:"sinks"`
	// List of sources in data flow.
	Sources []DataFlowSourceResponse `pulumi:"sources"`
	// List of transformations in data flow.
	Transformations []TransformationResponse `pulumi:"transformations"`
	// Type of data flow.
	Type *string `pulumi:"type"`
}

// MappingDataFlowResponseInput is an input type that accepts MappingDataFlowResponseArgs and MappingDataFlowResponseOutput values.
// You can construct a concrete instance of `MappingDataFlowResponseInput` via:
//
//          MappingDataFlowResponseArgs{...}
type MappingDataFlowResponseInput interface {
	pulumi.Input

	ToMappingDataFlowResponseOutput() MappingDataFlowResponseOutput
	ToMappingDataFlowResponseOutputWithContext(context.Context) MappingDataFlowResponseOutput
}

// Mapping data flow.
type MappingDataFlowResponseArgs struct {
	// List of tags that can be used for describing the data flow.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The description of the data flow.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder DataFlowResponseFolderPtrInput `pulumi:"folder"`
	// DataFlow script.
	Script pulumi.StringPtrInput `pulumi:"script"`
	// List of sinks in data flow.
	Sinks DataFlowSinkResponseArrayInput `pulumi:"sinks"`
	// List of sources in data flow.
	Sources DataFlowSourceResponseArrayInput `pulumi:"sources"`
	// List of transformations in data flow.
	Transformations TransformationResponseArrayInput `pulumi:"transformations"`
	// Type of data flow.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MappingDataFlowResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingDataFlowResponse)(nil)).Elem()
}

func (i MappingDataFlowResponseArgs) ToMappingDataFlowResponseOutput() MappingDataFlowResponseOutput {
	return i.ToMappingDataFlowResponseOutputWithContext(context.Background())
}

func (i MappingDataFlowResponseArgs) ToMappingDataFlowResponseOutputWithContext(ctx context.Context) MappingDataFlowResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingDataFlowResponseOutput)
}

func (i MappingDataFlowResponseArgs) ToMappingDataFlowResponsePtrOutput() MappingDataFlowResponsePtrOutput {
	return i.ToMappingDataFlowResponsePtrOutputWithContext(context.Background())
}

func (i MappingDataFlowResponseArgs) ToMappingDataFlowResponsePtrOutputWithContext(ctx context.Context) MappingDataFlowResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingDataFlowResponseOutput).ToMappingDataFlowResponsePtrOutputWithContext(ctx)
}

// MappingDataFlowResponsePtrInput is an input type that accepts MappingDataFlowResponseArgs, MappingDataFlowResponsePtr and MappingDataFlowResponsePtrOutput values.
// You can construct a concrete instance of `MappingDataFlowResponsePtrInput` via:
//
//          MappingDataFlowResponseArgs{...}
//
//  or:
//
//          nil
type MappingDataFlowResponsePtrInput interface {
	pulumi.Input

	ToMappingDataFlowResponsePtrOutput() MappingDataFlowResponsePtrOutput
	ToMappingDataFlowResponsePtrOutputWithContext(context.Context) MappingDataFlowResponsePtrOutput
}

type mappingDataFlowResponsePtrType MappingDataFlowResponseArgs

func MappingDataFlowResponsePtr(v *MappingDataFlowResponseArgs) MappingDataFlowResponsePtrInput {
	return (*mappingDataFlowResponsePtrType)(v)
}

func (*mappingDataFlowResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingDataFlowResponse)(nil)).Elem()
}

func (i *mappingDataFlowResponsePtrType) ToMappingDataFlowResponsePtrOutput() MappingDataFlowResponsePtrOutput {
	return i.ToMappingDataFlowResponsePtrOutputWithContext(context.Background())
}

func (i *mappingDataFlowResponsePtrType) ToMappingDataFlowResponsePtrOutputWithContext(ctx context.Context) MappingDataFlowResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingDataFlowResponsePtrOutput)
}

// Mapping data flow.
type MappingDataFlowResponseOutput struct{ *pulumi.OutputState }

func (MappingDataFlowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingDataFlowResponse)(nil)).Elem()
}

func (o MappingDataFlowResponseOutput) ToMappingDataFlowResponseOutput() MappingDataFlowResponseOutput {
	return o
}

func (o MappingDataFlowResponseOutput) ToMappingDataFlowResponseOutputWithContext(ctx context.Context) MappingDataFlowResponseOutput {
	return o
}

func (o MappingDataFlowResponseOutput) ToMappingDataFlowResponsePtrOutput() MappingDataFlowResponsePtrOutput {
	return o.ToMappingDataFlowResponsePtrOutputWithContext(context.Background())
}

func (o MappingDataFlowResponseOutput) ToMappingDataFlowResponsePtrOutputWithContext(ctx context.Context) MappingDataFlowResponsePtrOutput {
	return o.ApplyT(func(v MappingDataFlowResponse) *MappingDataFlowResponse {
		return &v
	}).(MappingDataFlowResponsePtrOutput)
}

// List of tags that can be used for describing the data flow.
func (o MappingDataFlowResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MappingDataFlowResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The description of the data flow.
func (o MappingDataFlowResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingDataFlowResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
func (o MappingDataFlowResponseOutput) Folder() DataFlowResponseFolderPtrOutput {
	return o.ApplyT(func(v MappingDataFlowResponse) *DataFlowResponseFolder { return v.Folder }).(DataFlowResponseFolderPtrOutput)
}

// DataFlow script.
func (o MappingDataFlowResponseOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingDataFlowResponse) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// List of sinks in data flow.
func (o MappingDataFlowResponseOutput) Sinks() DataFlowSinkResponseArrayOutput {
	return o.ApplyT(func(v MappingDataFlowResponse) []DataFlowSinkResponse { return v.Sinks }).(DataFlowSinkResponseArrayOutput)
}

// List of sources in data flow.
func (o MappingDataFlowResponseOutput) Sources() DataFlowSourceResponseArrayOutput {
	return o.ApplyT(func(v MappingDataFlowResponse) []DataFlowSourceResponse { return v.Sources }).(DataFlowSourceResponseArrayOutput)
}

// List of transformations in data flow.
func (o MappingDataFlowResponseOutput) Transformations() TransformationResponseArrayOutput {
	return o.ApplyT(func(v MappingDataFlowResponse) []TransformationResponse { return v.Transformations }).(TransformationResponseArrayOutput)
}

// Type of data flow.
func (o MappingDataFlowResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingDataFlowResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MappingDataFlowResponsePtrOutput struct{ *pulumi.OutputState }

func (MappingDataFlowResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingDataFlowResponse)(nil)).Elem()
}

func (o MappingDataFlowResponsePtrOutput) ToMappingDataFlowResponsePtrOutput() MappingDataFlowResponsePtrOutput {
	return o
}

func (o MappingDataFlowResponsePtrOutput) ToMappingDataFlowResponsePtrOutputWithContext(ctx context.Context) MappingDataFlowResponsePtrOutput {
	return o
}

func (o MappingDataFlowResponsePtrOutput) Elem() MappingDataFlowResponseOutput {
	return o.ApplyT(func(v *MappingDataFlowResponse) MappingDataFlowResponse { return *v }).(MappingDataFlowResponseOutput)
}

// List of tags that can be used for describing the data flow.
func (o MappingDataFlowResponsePtrOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v *MappingDataFlowResponse) []interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.ArrayOutput)
}

// The description of the data flow.
func (o MappingDataFlowResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingDataFlowResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
func (o MappingDataFlowResponsePtrOutput) Folder() DataFlowResponseFolderPtrOutput {
	return o.ApplyT(func(v *MappingDataFlowResponse) *DataFlowResponseFolder {
		if v == nil {
			return nil
		}
		return v.Folder
	}).(DataFlowResponseFolderPtrOutput)
}

// DataFlow script.
func (o MappingDataFlowResponsePtrOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingDataFlowResponse) *string {
		if v == nil {
			return nil
		}
		return v.Script
	}).(pulumi.StringPtrOutput)
}

// List of sinks in data flow.
func (o MappingDataFlowResponsePtrOutput) Sinks() DataFlowSinkResponseArrayOutput {
	return o.ApplyT(func(v *MappingDataFlowResponse) []DataFlowSinkResponse {
		if v == nil {
			return nil
		}
		return v.Sinks
	}).(DataFlowSinkResponseArrayOutput)
}

// List of sources in data flow.
func (o MappingDataFlowResponsePtrOutput) Sources() DataFlowSourceResponseArrayOutput {
	return o.ApplyT(func(v *MappingDataFlowResponse) []DataFlowSourceResponse {
		if v == nil {
			return nil
		}
		return v.Sources
	}).(DataFlowSourceResponseArrayOutput)
}

// List of transformations in data flow.
func (o MappingDataFlowResponsePtrOutput) Transformations() TransformationResponseArrayOutput {
	return o.ApplyT(func(v *MappingDataFlowResponse) []TransformationResponse {
		if v == nil {
			return nil
		}
		return v.Transformations
	}).(TransformationResponseArrayOutput)
}

// Type of data flow.
func (o MappingDataFlowResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingDataFlowResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// MariaDB server linked service.
type MariaDBLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// MariaDBLinkedServiceInput is an input type that accepts MariaDBLinkedServiceArgs and MariaDBLinkedServiceOutput values.
// You can construct a concrete instance of `MariaDBLinkedServiceInput` via:
//
//          MariaDBLinkedServiceArgs{...}
type MariaDBLinkedServiceInput interface {
	pulumi.Input

	ToMariaDBLinkedServiceOutput() MariaDBLinkedServiceOutput
	ToMariaDBLinkedServiceOutputWithContext(context.Context) MariaDBLinkedServiceOutput
}

// MariaDB server linked service.
type MariaDBLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd AzureKeyVaultSecretReferencePtrInput `pulumi:"pwd"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MariaDBLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBLinkedService)(nil)).Elem()
}

func (i MariaDBLinkedServiceArgs) ToMariaDBLinkedServiceOutput() MariaDBLinkedServiceOutput {
	return i.ToMariaDBLinkedServiceOutputWithContext(context.Background())
}

func (i MariaDBLinkedServiceArgs) ToMariaDBLinkedServiceOutputWithContext(ctx context.Context) MariaDBLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariaDBLinkedServiceOutput)
}

// MariaDB server linked service.
type MariaDBLinkedServiceOutput struct{ *pulumi.OutputState }

func (MariaDBLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBLinkedService)(nil)).Elem()
}

func (o MariaDBLinkedServiceOutput) ToMariaDBLinkedServiceOutput() MariaDBLinkedServiceOutput {
	return o
}

func (o MariaDBLinkedServiceOutput) ToMariaDBLinkedServiceOutputWithContext(ctx context.Context) MariaDBLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MariaDBLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MariaDBLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MariaDBLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v MariaDBLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o MariaDBLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MariaDBLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MariaDBLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o MariaDBLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o MariaDBLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MariaDBLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o MariaDBLinkedServiceOutput) Pwd() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v MariaDBLinkedService) *AzureKeyVaultSecretReference { return v.Pwd }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
func (o MariaDBLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MariaDBLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// MariaDB server linked service.
type MariaDBLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// MariaDBLinkedServiceResponseInput is an input type that accepts MariaDBLinkedServiceResponseArgs and MariaDBLinkedServiceResponseOutput values.
// You can construct a concrete instance of `MariaDBLinkedServiceResponseInput` via:
//
//          MariaDBLinkedServiceResponseArgs{...}
type MariaDBLinkedServiceResponseInput interface {
	pulumi.Input

	ToMariaDBLinkedServiceResponseOutput() MariaDBLinkedServiceResponseOutput
	ToMariaDBLinkedServiceResponseOutputWithContext(context.Context) MariaDBLinkedServiceResponseOutput
}

// MariaDB server linked service.
type MariaDBLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"pwd"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MariaDBLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBLinkedServiceResponse)(nil)).Elem()
}

func (i MariaDBLinkedServiceResponseArgs) ToMariaDBLinkedServiceResponseOutput() MariaDBLinkedServiceResponseOutput {
	return i.ToMariaDBLinkedServiceResponseOutputWithContext(context.Background())
}

func (i MariaDBLinkedServiceResponseArgs) ToMariaDBLinkedServiceResponseOutputWithContext(ctx context.Context) MariaDBLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariaDBLinkedServiceResponseOutput)
}

// MariaDB server linked service.
type MariaDBLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MariaDBLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBLinkedServiceResponse)(nil)).Elem()
}

func (o MariaDBLinkedServiceResponseOutput) ToMariaDBLinkedServiceResponseOutput() MariaDBLinkedServiceResponseOutput {
	return o
}

func (o MariaDBLinkedServiceResponseOutput) ToMariaDBLinkedServiceResponseOutputWithContext(ctx context.Context) MariaDBLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MariaDBLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MariaDBLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o MariaDBLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MariaDBLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o MariaDBLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o MariaDBLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o MariaDBLinkedServiceResponseOutput) Pwd() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Pwd }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
func (o MariaDBLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// MariaDB server dataset.
type MariaDBTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MariaDBTableDatasetInput is an input type that accepts MariaDBTableDatasetArgs and MariaDBTableDatasetOutput values.
// You can construct a concrete instance of `MariaDBTableDatasetInput` via:
//
//          MariaDBTableDatasetArgs{...}
type MariaDBTableDatasetInput interface {
	pulumi.Input

	ToMariaDBTableDatasetOutput() MariaDBTableDatasetOutput
	ToMariaDBTableDatasetOutputWithContext(context.Context) MariaDBTableDatasetOutput
}

// MariaDB server dataset.
type MariaDBTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MariaDBTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBTableDataset)(nil)).Elem()
}

func (i MariaDBTableDatasetArgs) ToMariaDBTableDatasetOutput() MariaDBTableDatasetOutput {
	return i.ToMariaDBTableDatasetOutputWithContext(context.Background())
}

func (i MariaDBTableDatasetArgs) ToMariaDBTableDatasetOutputWithContext(ctx context.Context) MariaDBTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariaDBTableDatasetOutput)
}

// MariaDB server dataset.
type MariaDBTableDatasetOutput struct{ *pulumi.OutputState }

func (MariaDBTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBTableDataset)(nil)).Elem()
}

func (o MariaDBTableDatasetOutput) ToMariaDBTableDatasetOutput() MariaDBTableDatasetOutput {
	return o
}

func (o MariaDBTableDatasetOutput) ToMariaDBTableDatasetOutputWithContext(ctx context.Context) MariaDBTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MariaDBTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MariaDBTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MariaDBTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MariaDBTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MariaDBTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v MariaDBTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o MariaDBTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v MariaDBTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o MariaDBTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MariaDBTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MariaDBTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MariaDBTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o MariaDBTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o MariaDBTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MariaDBTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// MariaDB server dataset.
type MariaDBTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MariaDBTableDatasetResponseInput is an input type that accepts MariaDBTableDatasetResponseArgs and MariaDBTableDatasetResponseOutput values.
// You can construct a concrete instance of `MariaDBTableDatasetResponseInput` via:
//
//          MariaDBTableDatasetResponseArgs{...}
type MariaDBTableDatasetResponseInput interface {
	pulumi.Input

	ToMariaDBTableDatasetResponseOutput() MariaDBTableDatasetResponseOutput
	ToMariaDBTableDatasetResponseOutputWithContext(context.Context) MariaDBTableDatasetResponseOutput
}

// MariaDB server dataset.
type MariaDBTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MariaDBTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBTableDatasetResponse)(nil)).Elem()
}

func (i MariaDBTableDatasetResponseArgs) ToMariaDBTableDatasetResponseOutput() MariaDBTableDatasetResponseOutput {
	return i.ToMariaDBTableDatasetResponseOutputWithContext(context.Background())
}

func (i MariaDBTableDatasetResponseArgs) ToMariaDBTableDatasetResponseOutputWithContext(ctx context.Context) MariaDBTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariaDBTableDatasetResponseOutput)
}

// MariaDB server dataset.
type MariaDBTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (MariaDBTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBTableDatasetResponse)(nil)).Elem()
}

func (o MariaDBTableDatasetResponseOutput) ToMariaDBTableDatasetResponseOutput() MariaDBTableDatasetResponseOutput {
	return o
}

func (o MariaDBTableDatasetResponseOutput) ToMariaDBTableDatasetResponseOutputWithContext(ctx context.Context) MariaDBTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MariaDBTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MariaDBTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MariaDBTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o MariaDBTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MariaDBTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MariaDBTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MariaDBTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o MariaDBTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o MariaDBTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Marketo server linked service.
type MarketoLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client Id of your Marketo service.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of your Marketo service.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// MarketoLinkedServiceInput is an input type that accepts MarketoLinkedServiceArgs and MarketoLinkedServiceOutput values.
// You can construct a concrete instance of `MarketoLinkedServiceInput` via:
//
//          MarketoLinkedServiceArgs{...}
type MarketoLinkedServiceInput interface {
	pulumi.Input

	ToMarketoLinkedServiceOutput() MarketoLinkedServiceOutput
	ToMarketoLinkedServiceOutputWithContext(context.Context) MarketoLinkedServiceOutput
}

// Marketo server linked service.
type MarketoLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The client Id of your Marketo service.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret of your Marketo service.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (MarketoLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoLinkedService)(nil)).Elem()
}

func (i MarketoLinkedServiceArgs) ToMarketoLinkedServiceOutput() MarketoLinkedServiceOutput {
	return i.ToMarketoLinkedServiceOutputWithContext(context.Background())
}

func (i MarketoLinkedServiceArgs) ToMarketoLinkedServiceOutputWithContext(ctx context.Context) MarketoLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarketoLinkedServiceOutput)
}

// Marketo server linked service.
type MarketoLinkedServiceOutput struct{ *pulumi.OutputState }

func (MarketoLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoLinkedService)(nil)).Elem()
}

func (o MarketoLinkedServiceOutput) ToMarketoLinkedServiceOutput() MarketoLinkedServiceOutput {
	return o
}

func (o MarketoLinkedServiceOutput) ToMarketoLinkedServiceOutputWithContext(ctx context.Context) MarketoLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MarketoLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MarketoLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client Id of your Marketo service.
func (o MarketoLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret of your Marketo service.
func (o MarketoLinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o MarketoLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v MarketoLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o MarketoLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MarketoLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o MarketoLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
func (o MarketoLinkedServiceOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedService) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o MarketoLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MarketoLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o MarketoLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MarketoLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o MarketoLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o MarketoLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o MarketoLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Marketo server linked service.
type MarketoLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client Id of your Marketo service.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of your Marketo service.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// MarketoLinkedServiceResponseInput is an input type that accepts MarketoLinkedServiceResponseArgs and MarketoLinkedServiceResponseOutput values.
// You can construct a concrete instance of `MarketoLinkedServiceResponseInput` via:
//
//          MarketoLinkedServiceResponseArgs{...}
type MarketoLinkedServiceResponseInput interface {
	pulumi.Input

	ToMarketoLinkedServiceResponseOutput() MarketoLinkedServiceResponseOutput
	ToMarketoLinkedServiceResponseOutputWithContext(context.Context) MarketoLinkedServiceResponseOutput
}

// Marketo server linked service.
type MarketoLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The client Id of your Marketo service.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret of your Marketo service.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (MarketoLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoLinkedServiceResponse)(nil)).Elem()
}

func (i MarketoLinkedServiceResponseArgs) ToMarketoLinkedServiceResponseOutput() MarketoLinkedServiceResponseOutput {
	return i.ToMarketoLinkedServiceResponseOutputWithContext(context.Background())
}

func (i MarketoLinkedServiceResponseArgs) ToMarketoLinkedServiceResponseOutputWithContext(ctx context.Context) MarketoLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarketoLinkedServiceResponseOutput)
}

// Marketo server linked service.
type MarketoLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MarketoLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoLinkedServiceResponse)(nil)).Elem()
}

func (o MarketoLinkedServiceResponseOutput) ToMarketoLinkedServiceResponseOutput() MarketoLinkedServiceResponseOutput {
	return o
}

func (o MarketoLinkedServiceResponseOutput) ToMarketoLinkedServiceResponseOutputWithContext(ctx context.Context) MarketoLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MarketoLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client Id of your Marketo service.
func (o MarketoLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret of your Marketo service.
func (o MarketoLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o MarketoLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o MarketoLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o MarketoLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
func (o MarketoLinkedServiceResponseOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o MarketoLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o MarketoLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o MarketoLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o MarketoLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o MarketoLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Marketo server dataset.
type MarketoObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MarketoObjectDatasetInput is an input type that accepts MarketoObjectDatasetArgs and MarketoObjectDatasetOutput values.
// You can construct a concrete instance of `MarketoObjectDatasetInput` via:
//
//          MarketoObjectDatasetArgs{...}
type MarketoObjectDatasetInput interface {
	pulumi.Input

	ToMarketoObjectDatasetOutput() MarketoObjectDatasetOutput
	ToMarketoObjectDatasetOutputWithContext(context.Context) MarketoObjectDatasetOutput
}

// Marketo server dataset.
type MarketoObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MarketoObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoObjectDataset)(nil)).Elem()
}

func (i MarketoObjectDatasetArgs) ToMarketoObjectDatasetOutput() MarketoObjectDatasetOutput {
	return i.ToMarketoObjectDatasetOutputWithContext(context.Background())
}

func (i MarketoObjectDatasetArgs) ToMarketoObjectDatasetOutputWithContext(ctx context.Context) MarketoObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarketoObjectDatasetOutput)
}

// Marketo server dataset.
type MarketoObjectDatasetOutput struct{ *pulumi.OutputState }

func (MarketoObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoObjectDataset)(nil)).Elem()
}

func (o MarketoObjectDatasetOutput) ToMarketoObjectDatasetOutput() MarketoObjectDatasetOutput {
	return o
}

func (o MarketoObjectDatasetOutput) ToMarketoObjectDatasetOutputWithContext(ctx context.Context) MarketoObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MarketoObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MarketoObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MarketoObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MarketoObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MarketoObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v MarketoObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o MarketoObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v MarketoObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o MarketoObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MarketoObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MarketoObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MarketoObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o MarketoObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o MarketoObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MarketoObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Marketo server dataset.
type MarketoObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MarketoObjectDatasetResponseInput is an input type that accepts MarketoObjectDatasetResponseArgs and MarketoObjectDatasetResponseOutput values.
// You can construct a concrete instance of `MarketoObjectDatasetResponseInput` via:
//
//          MarketoObjectDatasetResponseArgs{...}
type MarketoObjectDatasetResponseInput interface {
	pulumi.Input

	ToMarketoObjectDatasetResponseOutput() MarketoObjectDatasetResponseOutput
	ToMarketoObjectDatasetResponseOutputWithContext(context.Context) MarketoObjectDatasetResponseOutput
}

// Marketo server dataset.
type MarketoObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MarketoObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoObjectDatasetResponse)(nil)).Elem()
}

func (i MarketoObjectDatasetResponseArgs) ToMarketoObjectDatasetResponseOutput() MarketoObjectDatasetResponseOutput {
	return i.ToMarketoObjectDatasetResponseOutputWithContext(context.Background())
}

func (i MarketoObjectDatasetResponseArgs) ToMarketoObjectDatasetResponseOutputWithContext(ctx context.Context) MarketoObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarketoObjectDatasetResponseOutput)
}

// Marketo server dataset.
type MarketoObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (MarketoObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoObjectDatasetResponse)(nil)).Elem()
}

func (o MarketoObjectDatasetResponseOutput) ToMarketoObjectDatasetResponseOutput() MarketoObjectDatasetResponseOutput {
	return o
}

func (o MarketoObjectDatasetResponseOutput) ToMarketoObjectDatasetResponseOutputWithContext(ctx context.Context) MarketoObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MarketoObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MarketoObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MarketoObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o MarketoObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MarketoObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MarketoObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MarketoObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o MarketoObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o MarketoObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Access linked service.
type MicrosoftAccessLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the Microsoft Access as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// MicrosoftAccessLinkedServiceInput is an input type that accepts MicrosoftAccessLinkedServiceArgs and MicrosoftAccessLinkedServiceOutput values.
// You can construct a concrete instance of `MicrosoftAccessLinkedServiceInput` via:
//
//          MicrosoftAccessLinkedServiceArgs{...}
type MicrosoftAccessLinkedServiceInput interface {
	pulumi.Input

	ToMicrosoftAccessLinkedServiceOutput() MicrosoftAccessLinkedServiceOutput
	ToMicrosoftAccessLinkedServiceOutputWithContext(context.Context) MicrosoftAccessLinkedServiceOutput
}

// Microsoft Access linked service.
type MicrosoftAccessLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Type of authentication used to connect to the Microsoft Access as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential pulumi.Input `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (MicrosoftAccessLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessLinkedService)(nil)).Elem()
}

func (i MicrosoftAccessLinkedServiceArgs) ToMicrosoftAccessLinkedServiceOutput() MicrosoftAccessLinkedServiceOutput {
	return i.ToMicrosoftAccessLinkedServiceOutputWithContext(context.Background())
}

func (i MicrosoftAccessLinkedServiceArgs) ToMicrosoftAccessLinkedServiceOutputWithContext(ctx context.Context) MicrosoftAccessLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrosoftAccessLinkedServiceOutput)
}

// Microsoft Access linked service.
type MicrosoftAccessLinkedServiceOutput struct{ *pulumi.OutputState }

func (MicrosoftAccessLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessLinkedService)(nil)).Elem()
}

func (o MicrosoftAccessLinkedServiceOutput) ToMicrosoftAccessLinkedServiceOutput() MicrosoftAccessLinkedServiceOutput {
	return o
}

func (o MicrosoftAccessLinkedServiceOutput) ToMicrosoftAccessLinkedServiceOutputWithContext(ctx context.Context) MicrosoftAccessLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MicrosoftAccessLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the Microsoft Access as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
func (o MicrosoftAccessLinkedServiceOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o MicrosoftAccessLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o MicrosoftAccessLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The access credential portion of the connection string specified in driver-specific property-value format.
func (o MicrosoftAccessLinkedServiceOutput) Credential() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) interface{} { return v.Credential }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MicrosoftAccessLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o MicrosoftAccessLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o MicrosoftAccessLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for Basic authentication.
func (o MicrosoftAccessLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o MicrosoftAccessLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// User name for Basic authentication. Type: string (or Expression with resultType string).
func (o MicrosoftAccessLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Microsoft Access linked service.
type MicrosoftAccessLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the Microsoft Access as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// MicrosoftAccessLinkedServiceResponseInput is an input type that accepts MicrosoftAccessLinkedServiceResponseArgs and MicrosoftAccessLinkedServiceResponseOutput values.
// You can construct a concrete instance of `MicrosoftAccessLinkedServiceResponseInput` via:
//
//          MicrosoftAccessLinkedServiceResponseArgs{...}
type MicrosoftAccessLinkedServiceResponseInput interface {
	pulumi.Input

	ToMicrosoftAccessLinkedServiceResponseOutput() MicrosoftAccessLinkedServiceResponseOutput
	ToMicrosoftAccessLinkedServiceResponseOutputWithContext(context.Context) MicrosoftAccessLinkedServiceResponseOutput
}

// Microsoft Access linked service.
type MicrosoftAccessLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Type of authentication used to connect to the Microsoft Access as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential pulumi.Input `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (MicrosoftAccessLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessLinkedServiceResponse)(nil)).Elem()
}

func (i MicrosoftAccessLinkedServiceResponseArgs) ToMicrosoftAccessLinkedServiceResponseOutput() MicrosoftAccessLinkedServiceResponseOutput {
	return i.ToMicrosoftAccessLinkedServiceResponseOutputWithContext(context.Background())
}

func (i MicrosoftAccessLinkedServiceResponseArgs) ToMicrosoftAccessLinkedServiceResponseOutputWithContext(ctx context.Context) MicrosoftAccessLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrosoftAccessLinkedServiceResponseOutput)
}

// Microsoft Access linked service.
type MicrosoftAccessLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MicrosoftAccessLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessLinkedServiceResponse)(nil)).Elem()
}

func (o MicrosoftAccessLinkedServiceResponseOutput) ToMicrosoftAccessLinkedServiceResponseOutput() MicrosoftAccessLinkedServiceResponseOutput {
	return o
}

func (o MicrosoftAccessLinkedServiceResponseOutput) ToMicrosoftAccessLinkedServiceResponseOutputWithContext(ctx context.Context) MicrosoftAccessLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MicrosoftAccessLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the Microsoft Access as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
func (o MicrosoftAccessLinkedServiceResponseOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o MicrosoftAccessLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o MicrosoftAccessLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The access credential portion of the connection string specified in driver-specific property-value format.
func (o MicrosoftAccessLinkedServiceResponseOutput) Credential() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) interface{} { return v.Credential }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MicrosoftAccessLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o MicrosoftAccessLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o MicrosoftAccessLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Password for Basic authentication.
func (o MicrosoftAccessLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o MicrosoftAccessLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name for Basic authentication. Type: string (or Expression with resultType string).
func (o MicrosoftAccessLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The Microsoft Access table dataset.
type MicrosoftAccessTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Microsoft Access table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MicrosoftAccessTableDatasetInput is an input type that accepts MicrosoftAccessTableDatasetArgs and MicrosoftAccessTableDatasetOutput values.
// You can construct a concrete instance of `MicrosoftAccessTableDatasetInput` via:
//
//          MicrosoftAccessTableDatasetArgs{...}
type MicrosoftAccessTableDatasetInput interface {
	pulumi.Input

	ToMicrosoftAccessTableDatasetOutput() MicrosoftAccessTableDatasetOutput
	ToMicrosoftAccessTableDatasetOutputWithContext(context.Context) MicrosoftAccessTableDatasetOutput
}

// The Microsoft Access table dataset.
type MicrosoftAccessTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The Microsoft Access table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MicrosoftAccessTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessTableDataset)(nil)).Elem()
}

func (i MicrosoftAccessTableDatasetArgs) ToMicrosoftAccessTableDatasetOutput() MicrosoftAccessTableDatasetOutput {
	return i.ToMicrosoftAccessTableDatasetOutputWithContext(context.Background())
}

func (i MicrosoftAccessTableDatasetArgs) ToMicrosoftAccessTableDatasetOutputWithContext(ctx context.Context) MicrosoftAccessTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrosoftAccessTableDatasetOutput)
}

// The Microsoft Access table dataset.
type MicrosoftAccessTableDatasetOutput struct{ *pulumi.OutputState }

func (MicrosoftAccessTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessTableDataset)(nil)).Elem()
}

func (o MicrosoftAccessTableDatasetOutput) ToMicrosoftAccessTableDatasetOutput() MicrosoftAccessTableDatasetOutput {
	return o
}

func (o MicrosoftAccessTableDatasetOutput) ToMicrosoftAccessTableDatasetOutputWithContext(ctx context.Context) MicrosoftAccessTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MicrosoftAccessTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MicrosoftAccessTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MicrosoftAccessTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o MicrosoftAccessTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o MicrosoftAccessTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MicrosoftAccessTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MicrosoftAccessTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Microsoft Access table name. Type: string (or Expression with resultType string).
func (o MicrosoftAccessTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o MicrosoftAccessTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Microsoft Access table dataset.
type MicrosoftAccessTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Microsoft Access table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MicrosoftAccessTableDatasetResponseInput is an input type that accepts MicrosoftAccessTableDatasetResponseArgs and MicrosoftAccessTableDatasetResponseOutput values.
// You can construct a concrete instance of `MicrosoftAccessTableDatasetResponseInput` via:
//
//          MicrosoftAccessTableDatasetResponseArgs{...}
type MicrosoftAccessTableDatasetResponseInput interface {
	pulumi.Input

	ToMicrosoftAccessTableDatasetResponseOutput() MicrosoftAccessTableDatasetResponseOutput
	ToMicrosoftAccessTableDatasetResponseOutputWithContext(context.Context) MicrosoftAccessTableDatasetResponseOutput
}

// The Microsoft Access table dataset.
type MicrosoftAccessTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The Microsoft Access table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MicrosoftAccessTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessTableDatasetResponse)(nil)).Elem()
}

func (i MicrosoftAccessTableDatasetResponseArgs) ToMicrosoftAccessTableDatasetResponseOutput() MicrosoftAccessTableDatasetResponseOutput {
	return i.ToMicrosoftAccessTableDatasetResponseOutputWithContext(context.Background())
}

func (i MicrosoftAccessTableDatasetResponseArgs) ToMicrosoftAccessTableDatasetResponseOutputWithContext(ctx context.Context) MicrosoftAccessTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrosoftAccessTableDatasetResponseOutput)
}

// The Microsoft Access table dataset.
type MicrosoftAccessTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (MicrosoftAccessTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessTableDatasetResponse)(nil)).Elem()
}

func (o MicrosoftAccessTableDatasetResponseOutput) ToMicrosoftAccessTableDatasetResponseOutput() MicrosoftAccessTableDatasetResponseOutput {
	return o
}

func (o MicrosoftAccessTableDatasetResponseOutput) ToMicrosoftAccessTableDatasetResponseOutputWithContext(ctx context.Context) MicrosoftAccessTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MicrosoftAccessTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MicrosoftAccessTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MicrosoftAccessTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o MicrosoftAccessTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MicrosoftAccessTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MicrosoftAccessTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MicrosoftAccessTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Microsoft Access table name. Type: string (or Expression with resultType string).
func (o MicrosoftAccessTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o MicrosoftAccessTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The MongoDB Atlas database dataset.
type MongoDbAtlasCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the MongoDB Atlas database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MongoDbAtlasCollectionDatasetInput is an input type that accepts MongoDbAtlasCollectionDatasetArgs and MongoDbAtlasCollectionDatasetOutput values.
// You can construct a concrete instance of `MongoDbAtlasCollectionDatasetInput` via:
//
//          MongoDbAtlasCollectionDatasetArgs{...}
type MongoDbAtlasCollectionDatasetInput interface {
	pulumi.Input

	ToMongoDbAtlasCollectionDatasetOutput() MongoDbAtlasCollectionDatasetOutput
	ToMongoDbAtlasCollectionDatasetOutputWithContext(context.Context) MongoDbAtlasCollectionDatasetOutput
}

// The MongoDB Atlas database dataset.
type MongoDbAtlasCollectionDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The collection name of the MongoDB Atlas database. Type: string (or Expression with resultType string).
	Collection pulumi.Input `pulumi:"collection"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDbAtlasCollectionDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasCollectionDataset)(nil)).Elem()
}

func (i MongoDbAtlasCollectionDatasetArgs) ToMongoDbAtlasCollectionDatasetOutput() MongoDbAtlasCollectionDatasetOutput {
	return i.ToMongoDbAtlasCollectionDatasetOutputWithContext(context.Background())
}

func (i MongoDbAtlasCollectionDatasetArgs) ToMongoDbAtlasCollectionDatasetOutputWithContext(ctx context.Context) MongoDbAtlasCollectionDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbAtlasCollectionDatasetOutput)
}

// The MongoDB Atlas database dataset.
type MongoDbAtlasCollectionDatasetOutput struct{ *pulumi.OutputState }

func (MongoDbAtlasCollectionDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasCollectionDataset)(nil)).Elem()
}

func (o MongoDbAtlasCollectionDatasetOutput) ToMongoDbAtlasCollectionDatasetOutput() MongoDbAtlasCollectionDatasetOutput {
	return o
}

func (o MongoDbAtlasCollectionDatasetOutput) ToMongoDbAtlasCollectionDatasetOutputWithContext(ctx context.Context) MongoDbAtlasCollectionDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MongoDbAtlasCollectionDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The collection name of the MongoDB Atlas database. Type: string (or Expression with resultType string).
func (o MongoDbAtlasCollectionDatasetOutput) Collection() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDataset) interface{} { return v.Collection }).(pulumi.AnyOutput)
}

// Dataset description.
func (o MongoDbAtlasCollectionDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MongoDbAtlasCollectionDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o MongoDbAtlasCollectionDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o MongoDbAtlasCollectionDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MongoDbAtlasCollectionDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MongoDbAtlasCollectionDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o MongoDbAtlasCollectionDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The MongoDB Atlas database dataset.
type MongoDbAtlasCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the MongoDB Atlas database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MongoDbAtlasCollectionDatasetResponseInput is an input type that accepts MongoDbAtlasCollectionDatasetResponseArgs and MongoDbAtlasCollectionDatasetResponseOutput values.
// You can construct a concrete instance of `MongoDbAtlasCollectionDatasetResponseInput` via:
//
//          MongoDbAtlasCollectionDatasetResponseArgs{...}
type MongoDbAtlasCollectionDatasetResponseInput interface {
	pulumi.Input

	ToMongoDbAtlasCollectionDatasetResponseOutput() MongoDbAtlasCollectionDatasetResponseOutput
	ToMongoDbAtlasCollectionDatasetResponseOutputWithContext(context.Context) MongoDbAtlasCollectionDatasetResponseOutput
}

// The MongoDB Atlas database dataset.
type MongoDbAtlasCollectionDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The collection name of the MongoDB Atlas database. Type: string (or Expression with resultType string).
	Collection pulumi.Input `pulumi:"collection"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDbAtlasCollectionDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasCollectionDatasetResponse)(nil)).Elem()
}

func (i MongoDbAtlasCollectionDatasetResponseArgs) ToMongoDbAtlasCollectionDatasetResponseOutput() MongoDbAtlasCollectionDatasetResponseOutput {
	return i.ToMongoDbAtlasCollectionDatasetResponseOutputWithContext(context.Background())
}

func (i MongoDbAtlasCollectionDatasetResponseArgs) ToMongoDbAtlasCollectionDatasetResponseOutputWithContext(ctx context.Context) MongoDbAtlasCollectionDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbAtlasCollectionDatasetResponseOutput)
}

// The MongoDB Atlas database dataset.
type MongoDbAtlasCollectionDatasetResponseOutput struct{ *pulumi.OutputState }

func (MongoDbAtlasCollectionDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasCollectionDatasetResponse)(nil)).Elem()
}

func (o MongoDbAtlasCollectionDatasetResponseOutput) ToMongoDbAtlasCollectionDatasetResponseOutput() MongoDbAtlasCollectionDatasetResponseOutput {
	return o
}

func (o MongoDbAtlasCollectionDatasetResponseOutput) ToMongoDbAtlasCollectionDatasetResponseOutputWithContext(ctx context.Context) MongoDbAtlasCollectionDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MongoDbAtlasCollectionDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The collection name of the MongoDB Atlas database. Type: string (or Expression with resultType string).
func (o MongoDbAtlasCollectionDatasetResponseOutput) Collection() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDatasetResponse) interface{} { return v.Collection }).(pulumi.AnyOutput)
}

// Dataset description.
func (o MongoDbAtlasCollectionDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MongoDbAtlasCollectionDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o MongoDbAtlasCollectionDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MongoDbAtlasCollectionDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MongoDbAtlasCollectionDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MongoDbAtlasCollectionDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o MongoDbAtlasCollectionDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for MongoDB Atlas data source.
type MongoDbAtlasLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The MongoDB Atlas connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the MongoDB Atlas database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// MongoDbAtlasLinkedServiceInput is an input type that accepts MongoDbAtlasLinkedServiceArgs and MongoDbAtlasLinkedServiceOutput values.
// You can construct a concrete instance of `MongoDbAtlasLinkedServiceInput` via:
//
//          MongoDbAtlasLinkedServiceArgs{...}
type MongoDbAtlasLinkedServiceInput interface {
	pulumi.Input

	ToMongoDbAtlasLinkedServiceOutput() MongoDbAtlasLinkedServiceOutput
	ToMongoDbAtlasLinkedServiceOutputWithContext(context.Context) MongoDbAtlasLinkedServiceOutput
}

// Linked service for MongoDB Atlas data source.
type MongoDbAtlasLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The MongoDB Atlas connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The name of the MongoDB Atlas database that you want to access. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDbAtlasLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasLinkedService)(nil)).Elem()
}

func (i MongoDbAtlasLinkedServiceArgs) ToMongoDbAtlasLinkedServiceOutput() MongoDbAtlasLinkedServiceOutput {
	return i.ToMongoDbAtlasLinkedServiceOutputWithContext(context.Background())
}

func (i MongoDbAtlasLinkedServiceArgs) ToMongoDbAtlasLinkedServiceOutputWithContext(ctx context.Context) MongoDbAtlasLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbAtlasLinkedServiceOutput)
}

// Linked service for MongoDB Atlas data source.
type MongoDbAtlasLinkedServiceOutput struct{ *pulumi.OutputState }

func (MongoDbAtlasLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasLinkedService)(nil)).Elem()
}

func (o MongoDbAtlasLinkedServiceOutput) ToMongoDbAtlasLinkedServiceOutput() MongoDbAtlasLinkedServiceOutput {
	return o
}

func (o MongoDbAtlasLinkedServiceOutput) ToMongoDbAtlasLinkedServiceOutputWithContext(ctx context.Context) MongoDbAtlasLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MongoDbAtlasLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MongoDbAtlasLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The MongoDB Atlas connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o MongoDbAtlasLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The name of the MongoDB Atlas database that you want to access. Type: string (or Expression with resultType string).
func (o MongoDbAtlasLinkedServiceOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedService) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MongoDbAtlasLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o MongoDbAtlasLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o MongoDbAtlasLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for MongoDB Atlas data source.
type MongoDbAtlasLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The MongoDB Atlas connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the MongoDB Atlas database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// MongoDbAtlasLinkedServiceResponseInput is an input type that accepts MongoDbAtlasLinkedServiceResponseArgs and MongoDbAtlasLinkedServiceResponseOutput values.
// You can construct a concrete instance of `MongoDbAtlasLinkedServiceResponseInput` via:
//
//          MongoDbAtlasLinkedServiceResponseArgs{...}
type MongoDbAtlasLinkedServiceResponseInput interface {
	pulumi.Input

	ToMongoDbAtlasLinkedServiceResponseOutput() MongoDbAtlasLinkedServiceResponseOutput
	ToMongoDbAtlasLinkedServiceResponseOutputWithContext(context.Context) MongoDbAtlasLinkedServiceResponseOutput
}

// Linked service for MongoDB Atlas data source.
type MongoDbAtlasLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The MongoDB Atlas connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The name of the MongoDB Atlas database that you want to access. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDbAtlasLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasLinkedServiceResponse)(nil)).Elem()
}

func (i MongoDbAtlasLinkedServiceResponseArgs) ToMongoDbAtlasLinkedServiceResponseOutput() MongoDbAtlasLinkedServiceResponseOutput {
	return i.ToMongoDbAtlasLinkedServiceResponseOutputWithContext(context.Background())
}

func (i MongoDbAtlasLinkedServiceResponseArgs) ToMongoDbAtlasLinkedServiceResponseOutputWithContext(ctx context.Context) MongoDbAtlasLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbAtlasLinkedServiceResponseOutput)
}

// Linked service for MongoDB Atlas data source.
type MongoDbAtlasLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MongoDbAtlasLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasLinkedServiceResponse)(nil)).Elem()
}

func (o MongoDbAtlasLinkedServiceResponseOutput) ToMongoDbAtlasLinkedServiceResponseOutput() MongoDbAtlasLinkedServiceResponseOutput {
	return o
}

func (o MongoDbAtlasLinkedServiceResponseOutput) ToMongoDbAtlasLinkedServiceResponseOutputWithContext(ctx context.Context) MongoDbAtlasLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MongoDbAtlasLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MongoDbAtlasLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The MongoDB Atlas connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o MongoDbAtlasLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The name of the MongoDB Atlas database that you want to access. Type: string (or Expression with resultType string).
func (o MongoDbAtlasLinkedServiceResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedServiceResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MongoDbAtlasLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o MongoDbAtlasLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o MongoDbAtlasLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The MongoDB database dataset.
type MongoDbCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The table name of the MongoDB database. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MongoDbCollectionDatasetInput is an input type that accepts MongoDbCollectionDatasetArgs and MongoDbCollectionDatasetOutput values.
// You can construct a concrete instance of `MongoDbCollectionDatasetInput` via:
//
//          MongoDbCollectionDatasetArgs{...}
type MongoDbCollectionDatasetInput interface {
	pulumi.Input

	ToMongoDbCollectionDatasetOutput() MongoDbCollectionDatasetOutput
	ToMongoDbCollectionDatasetOutputWithContext(context.Context) MongoDbCollectionDatasetOutput
}

// The MongoDB database dataset.
type MongoDbCollectionDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The table name of the MongoDB database. Type: string (or Expression with resultType string).
	CollectionName pulumi.Input `pulumi:"collectionName"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDbCollectionDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionDataset)(nil)).Elem()
}

func (i MongoDbCollectionDatasetArgs) ToMongoDbCollectionDatasetOutput() MongoDbCollectionDatasetOutput {
	return i.ToMongoDbCollectionDatasetOutputWithContext(context.Background())
}

func (i MongoDbCollectionDatasetArgs) ToMongoDbCollectionDatasetOutputWithContext(ctx context.Context) MongoDbCollectionDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbCollectionDatasetOutput)
}

// The MongoDB database dataset.
type MongoDbCollectionDatasetOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionDataset)(nil)).Elem()
}

func (o MongoDbCollectionDatasetOutput) ToMongoDbCollectionDatasetOutput() MongoDbCollectionDatasetOutput {
	return o
}

func (o MongoDbCollectionDatasetOutput) ToMongoDbCollectionDatasetOutputWithContext(ctx context.Context) MongoDbCollectionDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MongoDbCollectionDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbCollectionDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The table name of the MongoDB database. Type: string (or Expression with resultType string).
func (o MongoDbCollectionDatasetOutput) CollectionName() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCollectionDataset) interface{} { return v.CollectionName }).(pulumi.AnyOutput)
}

// Dataset description.
func (o MongoDbCollectionDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MongoDbCollectionDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o MongoDbCollectionDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v MongoDbCollectionDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o MongoDbCollectionDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MongoDbCollectionDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MongoDbCollectionDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCollectionDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MongoDbCollectionDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCollectionDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o MongoDbCollectionDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The MongoDB database dataset.
type MongoDbCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The table name of the MongoDB database. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MongoDbCollectionDatasetResponseInput is an input type that accepts MongoDbCollectionDatasetResponseArgs and MongoDbCollectionDatasetResponseOutput values.
// You can construct a concrete instance of `MongoDbCollectionDatasetResponseInput` via:
//
//          MongoDbCollectionDatasetResponseArgs{...}
type MongoDbCollectionDatasetResponseInput interface {
	pulumi.Input

	ToMongoDbCollectionDatasetResponseOutput() MongoDbCollectionDatasetResponseOutput
	ToMongoDbCollectionDatasetResponseOutputWithContext(context.Context) MongoDbCollectionDatasetResponseOutput
}

// The MongoDB database dataset.
type MongoDbCollectionDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The table name of the MongoDB database. Type: string (or Expression with resultType string).
	CollectionName pulumi.Input `pulumi:"collectionName"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDbCollectionDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionDatasetResponse)(nil)).Elem()
}

func (i MongoDbCollectionDatasetResponseArgs) ToMongoDbCollectionDatasetResponseOutput() MongoDbCollectionDatasetResponseOutput {
	return i.ToMongoDbCollectionDatasetResponseOutputWithContext(context.Background())
}

func (i MongoDbCollectionDatasetResponseArgs) ToMongoDbCollectionDatasetResponseOutputWithContext(ctx context.Context) MongoDbCollectionDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbCollectionDatasetResponseOutput)
}

// The MongoDB database dataset.
type MongoDbCollectionDatasetResponseOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionDatasetResponse)(nil)).Elem()
}

func (o MongoDbCollectionDatasetResponseOutput) ToMongoDbCollectionDatasetResponseOutput() MongoDbCollectionDatasetResponseOutput {
	return o
}

func (o MongoDbCollectionDatasetResponseOutput) ToMongoDbCollectionDatasetResponseOutputWithContext(ctx context.Context) MongoDbCollectionDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MongoDbCollectionDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The table name of the MongoDB database. Type: string (or Expression with resultType string).
func (o MongoDbCollectionDatasetResponseOutput) CollectionName() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) interface{} { return v.CollectionName }).(pulumi.AnyOutput)
}

// Dataset description.
func (o MongoDbCollectionDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MongoDbCollectionDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o MongoDbCollectionDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MongoDbCollectionDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MongoDbCollectionDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MongoDbCollectionDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o MongoDbCollectionDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for MongoDb data source.
type MongoDbLinkedService struct {
	// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Database to verify the username and password. Type: string (or Expression with resultType string).
	AuthSource interface{} `pulumi:"authSource"`
	// The authentication type to be used to connect to the MongoDB database.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	DatabaseName interface{} `pulumi:"databaseName"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// MongoDbLinkedServiceInput is an input type that accepts MongoDbLinkedServiceArgs and MongoDbLinkedServiceOutput values.
// You can construct a concrete instance of `MongoDbLinkedServiceInput` via:
//
//          MongoDbLinkedServiceArgs{...}
type MongoDbLinkedServiceInput interface {
	pulumi.Input

	ToMongoDbLinkedServiceOutput() MongoDbLinkedServiceOutput
	ToMongoDbLinkedServiceOutputWithContext(context.Context) MongoDbLinkedServiceOutput
}

// Linked service for MongoDb data source.
type MongoDbLinkedServiceArgs struct {
	// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Database to verify the username and password. Type: string (or Expression with resultType string).
	AuthSource pulumi.Input `pulumi:"authSource"`
	// The authentication type to be used to connect to the MongoDB database.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	DatabaseName pulumi.Input `pulumi:"databaseName"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.Input `pulumi:"port"`
	// The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (MongoDbLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbLinkedService)(nil)).Elem()
}

func (i MongoDbLinkedServiceArgs) ToMongoDbLinkedServiceOutput() MongoDbLinkedServiceOutput {
	return i.ToMongoDbLinkedServiceOutputWithContext(context.Background())
}

func (i MongoDbLinkedServiceArgs) ToMongoDbLinkedServiceOutputWithContext(ctx context.Context) MongoDbLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbLinkedServiceOutput)
}

// Linked service for MongoDb data source.
type MongoDbLinkedServiceOutput struct{ *pulumi.OutputState }

func (MongoDbLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbLinkedService)(nil)).Elem()
}

func (o MongoDbLinkedServiceOutput) ToMongoDbLinkedServiceOutput() MongoDbLinkedServiceOutput {
	return o
}

func (o MongoDbLinkedServiceOutput) ToMongoDbLinkedServiceOutputWithContext(ctx context.Context) MongoDbLinkedServiceOutput {
	return o
}

// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbLinkedServiceOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedService) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o MongoDbLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Database to verify the username and password. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceOutput) AuthSource() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedService) interface{} { return v.AuthSource }).(pulumi.AnyOutput)
}

// The authentication type to be used to connect to the MongoDB database.
func (o MongoDbLinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbLinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o MongoDbLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v MongoDbLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceOutput) DatabaseName() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedService) interface{} { return v.DatabaseName }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MongoDbLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbLinkedServiceOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedService) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o MongoDbLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MongoDbLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for authentication.
func (o MongoDbLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
func (o MongoDbLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o MongoDbLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for MongoDb data source.
type MongoDbLinkedServiceResponse struct {
	// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Database to verify the username and password. Type: string (or Expression with resultType string).
	AuthSource interface{} `pulumi:"authSource"`
	// The authentication type to be used to connect to the MongoDB database.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	DatabaseName interface{} `pulumi:"databaseName"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// MongoDbLinkedServiceResponseInput is an input type that accepts MongoDbLinkedServiceResponseArgs and MongoDbLinkedServiceResponseOutput values.
// You can construct a concrete instance of `MongoDbLinkedServiceResponseInput` via:
//
//          MongoDbLinkedServiceResponseArgs{...}
type MongoDbLinkedServiceResponseInput interface {
	pulumi.Input

	ToMongoDbLinkedServiceResponseOutput() MongoDbLinkedServiceResponseOutput
	ToMongoDbLinkedServiceResponseOutputWithContext(context.Context) MongoDbLinkedServiceResponseOutput
}

// Linked service for MongoDb data source.
type MongoDbLinkedServiceResponseArgs struct {
	// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Database to verify the username and password. Type: string (or Expression with resultType string).
	AuthSource pulumi.Input `pulumi:"authSource"`
	// The authentication type to be used to connect to the MongoDB database.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	DatabaseName pulumi.Input `pulumi:"databaseName"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.Input `pulumi:"port"`
	// The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (MongoDbLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbLinkedServiceResponse)(nil)).Elem()
}

func (i MongoDbLinkedServiceResponseArgs) ToMongoDbLinkedServiceResponseOutput() MongoDbLinkedServiceResponseOutput {
	return i.ToMongoDbLinkedServiceResponseOutputWithContext(context.Background())
}

func (i MongoDbLinkedServiceResponseArgs) ToMongoDbLinkedServiceResponseOutputWithContext(ctx context.Context) MongoDbLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbLinkedServiceResponseOutput)
}

// Linked service for MongoDb data source.
type MongoDbLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MongoDbLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbLinkedServiceResponse)(nil)).Elem()
}

func (o MongoDbLinkedServiceResponseOutput) ToMongoDbLinkedServiceResponseOutput() MongoDbLinkedServiceResponseOutput {
	return o
}

func (o MongoDbLinkedServiceResponseOutput) ToMongoDbLinkedServiceResponseOutputWithContext(ctx context.Context) MongoDbLinkedServiceResponseOutput {
	return o
}

// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o MongoDbLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Database to verify the username and password. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceResponseOutput) AuthSource() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) interface{} { return v.AuthSource }).(pulumi.AnyOutput)
}

// The authentication type to be used to connect to the MongoDB database.
func (o MongoDbLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o MongoDbLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceResponseOutput) DatabaseName() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) interface{} { return v.DatabaseName }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MongoDbLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbLinkedServiceResponseOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o MongoDbLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for authentication.
func (o MongoDbLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
func (o MongoDbLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o MongoDbLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// The MongoDB database dataset.
type MongoDbV2CollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the MongoDB database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MongoDbV2CollectionDatasetInput is an input type that accepts MongoDbV2CollectionDatasetArgs and MongoDbV2CollectionDatasetOutput values.
// You can construct a concrete instance of `MongoDbV2CollectionDatasetInput` via:
//
//          MongoDbV2CollectionDatasetArgs{...}
type MongoDbV2CollectionDatasetInput interface {
	pulumi.Input

	ToMongoDbV2CollectionDatasetOutput() MongoDbV2CollectionDatasetOutput
	ToMongoDbV2CollectionDatasetOutputWithContext(context.Context) MongoDbV2CollectionDatasetOutput
}

// The MongoDB database dataset.
type MongoDbV2CollectionDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The collection name of the MongoDB database. Type: string (or Expression with resultType string).
	Collection pulumi.Input `pulumi:"collection"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDbV2CollectionDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2CollectionDataset)(nil)).Elem()
}

func (i MongoDbV2CollectionDatasetArgs) ToMongoDbV2CollectionDatasetOutput() MongoDbV2CollectionDatasetOutput {
	return i.ToMongoDbV2CollectionDatasetOutputWithContext(context.Background())
}

func (i MongoDbV2CollectionDatasetArgs) ToMongoDbV2CollectionDatasetOutputWithContext(ctx context.Context) MongoDbV2CollectionDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbV2CollectionDatasetOutput)
}

// The MongoDB database dataset.
type MongoDbV2CollectionDatasetOutput struct{ *pulumi.OutputState }

func (MongoDbV2CollectionDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2CollectionDataset)(nil)).Elem()
}

func (o MongoDbV2CollectionDatasetOutput) ToMongoDbV2CollectionDatasetOutput() MongoDbV2CollectionDatasetOutput {
	return o
}

func (o MongoDbV2CollectionDatasetOutput) ToMongoDbV2CollectionDatasetOutputWithContext(ctx context.Context) MongoDbV2CollectionDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MongoDbV2CollectionDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The collection name of the MongoDB database. Type: string (or Expression with resultType string).
func (o MongoDbV2CollectionDatasetOutput) Collection() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDataset) interface{} { return v.Collection }).(pulumi.AnyOutput)
}

// Dataset description.
func (o MongoDbV2CollectionDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MongoDbV2CollectionDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o MongoDbV2CollectionDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o MongoDbV2CollectionDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MongoDbV2CollectionDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MongoDbV2CollectionDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o MongoDbV2CollectionDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The MongoDB database dataset.
type MongoDbV2CollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the MongoDB database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MongoDbV2CollectionDatasetResponseInput is an input type that accepts MongoDbV2CollectionDatasetResponseArgs and MongoDbV2CollectionDatasetResponseOutput values.
// You can construct a concrete instance of `MongoDbV2CollectionDatasetResponseInput` via:
//
//          MongoDbV2CollectionDatasetResponseArgs{...}
type MongoDbV2CollectionDatasetResponseInput interface {
	pulumi.Input

	ToMongoDbV2CollectionDatasetResponseOutput() MongoDbV2CollectionDatasetResponseOutput
	ToMongoDbV2CollectionDatasetResponseOutputWithContext(context.Context) MongoDbV2CollectionDatasetResponseOutput
}

// The MongoDB database dataset.
type MongoDbV2CollectionDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The collection name of the MongoDB database. Type: string (or Expression with resultType string).
	Collection pulumi.Input `pulumi:"collection"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDbV2CollectionDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2CollectionDatasetResponse)(nil)).Elem()
}

func (i MongoDbV2CollectionDatasetResponseArgs) ToMongoDbV2CollectionDatasetResponseOutput() MongoDbV2CollectionDatasetResponseOutput {
	return i.ToMongoDbV2CollectionDatasetResponseOutputWithContext(context.Background())
}

func (i MongoDbV2CollectionDatasetResponseArgs) ToMongoDbV2CollectionDatasetResponseOutputWithContext(ctx context.Context) MongoDbV2CollectionDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbV2CollectionDatasetResponseOutput)
}

// The MongoDB database dataset.
type MongoDbV2CollectionDatasetResponseOutput struct{ *pulumi.OutputState }

func (MongoDbV2CollectionDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2CollectionDatasetResponse)(nil)).Elem()
}

func (o MongoDbV2CollectionDatasetResponseOutput) ToMongoDbV2CollectionDatasetResponseOutput() MongoDbV2CollectionDatasetResponseOutput {
	return o
}

func (o MongoDbV2CollectionDatasetResponseOutput) ToMongoDbV2CollectionDatasetResponseOutputWithContext(ctx context.Context) MongoDbV2CollectionDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MongoDbV2CollectionDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The collection name of the MongoDB database. Type: string (or Expression with resultType string).
func (o MongoDbV2CollectionDatasetResponseOutput) Collection() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDatasetResponse) interface{} { return v.Collection }).(pulumi.AnyOutput)
}

// Dataset description.
func (o MongoDbV2CollectionDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MongoDbV2CollectionDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o MongoDbV2CollectionDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MongoDbV2CollectionDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MongoDbV2CollectionDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MongoDbV2CollectionDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o MongoDbV2CollectionDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for MongoDB data source.
type MongoDbV2LinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// MongoDbV2LinkedServiceInput is an input type that accepts MongoDbV2LinkedServiceArgs and MongoDbV2LinkedServiceOutput values.
// You can construct a concrete instance of `MongoDbV2LinkedServiceInput` via:
//
//          MongoDbV2LinkedServiceArgs{...}
type MongoDbV2LinkedServiceInput interface {
	pulumi.Input

	ToMongoDbV2LinkedServiceOutput() MongoDbV2LinkedServiceOutput
	ToMongoDbV2LinkedServiceOutputWithContext(context.Context) MongoDbV2LinkedServiceOutput
}

// Linked service for MongoDB data source.
type MongoDbV2LinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDbV2LinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2LinkedService)(nil)).Elem()
}

func (i MongoDbV2LinkedServiceArgs) ToMongoDbV2LinkedServiceOutput() MongoDbV2LinkedServiceOutput {
	return i.ToMongoDbV2LinkedServiceOutputWithContext(context.Background())
}

func (i MongoDbV2LinkedServiceArgs) ToMongoDbV2LinkedServiceOutputWithContext(ctx context.Context) MongoDbV2LinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbV2LinkedServiceOutput)
}

// Linked service for MongoDB data source.
type MongoDbV2LinkedServiceOutput struct{ *pulumi.OutputState }

func (MongoDbV2LinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2LinkedService)(nil)).Elem()
}

func (o MongoDbV2LinkedServiceOutput) ToMongoDbV2LinkedServiceOutput() MongoDbV2LinkedServiceOutput {
	return o
}

func (o MongoDbV2LinkedServiceOutput) ToMongoDbV2LinkedServiceOutputWithContext(ctx context.Context) MongoDbV2LinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MongoDbV2LinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbV2LinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MongoDbV2LinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v MongoDbV2LinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o MongoDbV2LinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2LinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
func (o MongoDbV2LinkedServiceOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2LinkedService) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MongoDbV2LinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbV2LinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o MongoDbV2LinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MongoDbV2LinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o MongoDbV2LinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbV2LinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for MongoDB data source.
type MongoDbV2LinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// MongoDbV2LinkedServiceResponseInput is an input type that accepts MongoDbV2LinkedServiceResponseArgs and MongoDbV2LinkedServiceResponseOutput values.
// You can construct a concrete instance of `MongoDbV2LinkedServiceResponseInput` via:
//
//          MongoDbV2LinkedServiceResponseArgs{...}
type MongoDbV2LinkedServiceResponseInput interface {
	pulumi.Input

	ToMongoDbV2LinkedServiceResponseOutput() MongoDbV2LinkedServiceResponseOutput
	ToMongoDbV2LinkedServiceResponseOutputWithContext(context.Context) MongoDbV2LinkedServiceResponseOutput
}

// Linked service for MongoDB data source.
type MongoDbV2LinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDbV2LinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2LinkedServiceResponse)(nil)).Elem()
}

func (i MongoDbV2LinkedServiceResponseArgs) ToMongoDbV2LinkedServiceResponseOutput() MongoDbV2LinkedServiceResponseOutput {
	return i.ToMongoDbV2LinkedServiceResponseOutputWithContext(context.Background())
}

func (i MongoDbV2LinkedServiceResponseArgs) ToMongoDbV2LinkedServiceResponseOutputWithContext(ctx context.Context) MongoDbV2LinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbV2LinkedServiceResponseOutput)
}

// Linked service for MongoDB data source.
type MongoDbV2LinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MongoDbV2LinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2LinkedServiceResponse)(nil)).Elem()
}

func (o MongoDbV2LinkedServiceResponseOutput) ToMongoDbV2LinkedServiceResponseOutput() MongoDbV2LinkedServiceResponseOutput {
	return o
}

func (o MongoDbV2LinkedServiceResponseOutput) ToMongoDbV2LinkedServiceResponseOutputWithContext(ctx context.Context) MongoDbV2LinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MongoDbV2LinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbV2LinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MongoDbV2LinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MongoDbV2LinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o MongoDbV2LinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2LinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
func (o MongoDbV2LinkedServiceResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2LinkedServiceResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MongoDbV2LinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbV2LinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o MongoDbV2LinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MongoDbV2LinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o MongoDbV2LinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbV2LinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReference `pulumi:"pipelines"`
	// Trigger type.
	Type string `pulumi:"type"`
}

// MultiplePipelineTriggerInput is an input type that accepts MultiplePipelineTriggerArgs and MultiplePipelineTriggerOutput values.
// You can construct a concrete instance of `MultiplePipelineTriggerInput` via:
//
//          MultiplePipelineTriggerArgs{...}
type MultiplePipelineTriggerInput interface {
	pulumi.Input

	ToMultiplePipelineTriggerOutput() MultiplePipelineTriggerOutput
	ToMultiplePipelineTriggerOutputWithContext(context.Context) MultiplePipelineTriggerOutput
}

// Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTriggerArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines TriggerPipelineReferenceArrayInput `pulumi:"pipelines"`
	// Trigger type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MultiplePipelineTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplePipelineTrigger)(nil)).Elem()
}

func (i MultiplePipelineTriggerArgs) ToMultiplePipelineTriggerOutput() MultiplePipelineTriggerOutput {
	return i.ToMultiplePipelineTriggerOutputWithContext(context.Background())
}

func (i MultiplePipelineTriggerArgs) ToMultiplePipelineTriggerOutputWithContext(ctx context.Context) MultiplePipelineTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiplePipelineTriggerOutput)
}

// Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTriggerOutput struct{ *pulumi.OutputState }

func (MultiplePipelineTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplePipelineTrigger)(nil)).Elem()
}

func (o MultiplePipelineTriggerOutput) ToMultiplePipelineTriggerOutput() MultiplePipelineTriggerOutput {
	return o
}

func (o MultiplePipelineTriggerOutput) ToMultiplePipelineTriggerOutputWithContext(ctx context.Context) MultiplePipelineTriggerOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o MultiplePipelineTriggerOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MultiplePipelineTrigger) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o MultiplePipelineTriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MultiplePipelineTrigger) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Pipelines that need to be started.
func (o MultiplePipelineTriggerOutput) Pipelines() TriggerPipelineReferenceArrayOutput {
	return o.ApplyT(func(v MultiplePipelineTrigger) []TriggerPipelineReference { return v.Pipelines }).(TriggerPipelineReferenceArrayOutput)
}

// Trigger type.
func (o MultiplePipelineTriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MultiplePipelineTrigger) string { return v.Type }).(pulumi.StringOutput)
}

// Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReferenceResponse `pulumi:"pipelines"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	Type string `pulumi:"type"`
}

// MultiplePipelineTriggerResponseInput is an input type that accepts MultiplePipelineTriggerResponseArgs and MultiplePipelineTriggerResponseOutput values.
// You can construct a concrete instance of `MultiplePipelineTriggerResponseInput` via:
//
//          MultiplePipelineTriggerResponseArgs{...}
type MultiplePipelineTriggerResponseInput interface {
	pulumi.Input

	ToMultiplePipelineTriggerResponseOutput() MultiplePipelineTriggerResponseOutput
	ToMultiplePipelineTriggerResponseOutputWithContext(context.Context) MultiplePipelineTriggerResponseOutput
}

// Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTriggerResponseArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines TriggerPipelineReferenceResponseArrayInput `pulumi:"pipelines"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState pulumi.StringInput `pulumi:"runtimeState"`
	// Trigger type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MultiplePipelineTriggerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplePipelineTriggerResponse)(nil)).Elem()
}

func (i MultiplePipelineTriggerResponseArgs) ToMultiplePipelineTriggerResponseOutput() MultiplePipelineTriggerResponseOutput {
	return i.ToMultiplePipelineTriggerResponseOutputWithContext(context.Background())
}

func (i MultiplePipelineTriggerResponseArgs) ToMultiplePipelineTriggerResponseOutputWithContext(ctx context.Context) MultiplePipelineTriggerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiplePipelineTriggerResponseOutput)
}

// Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTriggerResponseOutput struct{ *pulumi.OutputState }

func (MultiplePipelineTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplePipelineTriggerResponse)(nil)).Elem()
}

func (o MultiplePipelineTriggerResponseOutput) ToMultiplePipelineTriggerResponseOutput() MultiplePipelineTriggerResponseOutput {
	return o
}

func (o MultiplePipelineTriggerResponseOutput) ToMultiplePipelineTriggerResponseOutputWithContext(ctx context.Context) MultiplePipelineTriggerResponseOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o MultiplePipelineTriggerResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MultiplePipelineTriggerResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o MultiplePipelineTriggerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MultiplePipelineTriggerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Pipelines that need to be started.
func (o MultiplePipelineTriggerResponseOutput) Pipelines() TriggerPipelineReferenceResponseArrayOutput {
	return o.ApplyT(func(v MultiplePipelineTriggerResponse) []TriggerPipelineReferenceResponse { return v.Pipelines }).(TriggerPipelineReferenceResponseArrayOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o MultiplePipelineTriggerResponseOutput) RuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v MultiplePipelineTriggerResponse) string { return v.RuntimeState }).(pulumi.StringOutput)
}

// Trigger type.
func (o MultiplePipelineTriggerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MultiplePipelineTriggerResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for MySQL data source.
type MySqlLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// MySqlLinkedServiceInput is an input type that accepts MySqlLinkedServiceArgs and MySqlLinkedServiceOutput values.
// You can construct a concrete instance of `MySqlLinkedServiceInput` via:
//
//          MySqlLinkedServiceArgs{...}
type MySqlLinkedServiceInput interface {
	pulumi.Input

	ToMySqlLinkedServiceOutput() MySqlLinkedServiceOutput
	ToMySqlLinkedServiceOutputWithContext(context.Context) MySqlLinkedServiceOutput
}

// Linked service for MySQL data source.
type MySqlLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferencePtrInput `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MySqlLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlLinkedService)(nil)).Elem()
}

func (i MySqlLinkedServiceArgs) ToMySqlLinkedServiceOutput() MySqlLinkedServiceOutput {
	return i.ToMySqlLinkedServiceOutputWithContext(context.Background())
}

func (i MySqlLinkedServiceArgs) ToMySqlLinkedServiceOutputWithContext(ctx context.Context) MySqlLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlLinkedServiceOutput)
}

// Linked service for MySQL data source.
type MySqlLinkedServiceOutput struct{ *pulumi.OutputState }

func (MySqlLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlLinkedService)(nil)).Elem()
}

func (o MySqlLinkedServiceOutput) ToMySqlLinkedServiceOutput() MySqlLinkedServiceOutput {
	return o
}

func (o MySqlLinkedServiceOutput) ToMySqlLinkedServiceOutputWithContext(ctx context.Context) MySqlLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MySqlLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MySqlLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MySqlLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v MySqlLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string.
func (o MySqlLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MySqlLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o MySqlLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o MySqlLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MySqlLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o MySqlLinkedServiceOutput) Password() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v MySqlLinkedService) *AzureKeyVaultSecretReference { return v.Password }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
func (o MySqlLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for MySQL data source.
type MySqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// MySqlLinkedServiceResponseInput is an input type that accepts MySqlLinkedServiceResponseArgs and MySqlLinkedServiceResponseOutput values.
// You can construct a concrete instance of `MySqlLinkedServiceResponseInput` via:
//
//          MySqlLinkedServiceResponseArgs{...}
type MySqlLinkedServiceResponseInput interface {
	pulumi.Input

	ToMySqlLinkedServiceResponseOutput() MySqlLinkedServiceResponseOutput
	ToMySqlLinkedServiceResponseOutputWithContext(context.Context) MySqlLinkedServiceResponseOutput
}

// Linked service for MySQL data source.
type MySqlLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The connection string.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MySqlLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlLinkedServiceResponse)(nil)).Elem()
}

func (i MySqlLinkedServiceResponseArgs) ToMySqlLinkedServiceResponseOutput() MySqlLinkedServiceResponseOutput {
	return i.ToMySqlLinkedServiceResponseOutputWithContext(context.Background())
}

func (i MySqlLinkedServiceResponseArgs) ToMySqlLinkedServiceResponseOutputWithContext(ctx context.Context) MySqlLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlLinkedServiceResponseOutput)
}

// Linked service for MySQL data source.
type MySqlLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MySqlLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlLinkedServiceResponse)(nil)).Elem()
}

func (o MySqlLinkedServiceResponseOutput) ToMySqlLinkedServiceResponseOutput() MySqlLinkedServiceResponseOutput {
	return o
}

func (o MySqlLinkedServiceResponseOutput) ToMySqlLinkedServiceResponseOutputWithContext(ctx context.Context) MySqlLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MySqlLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MySqlLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string.
func (o MySqlLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MySqlLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o MySqlLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o MySqlLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o MySqlLinkedServiceResponseOutput) Password() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Password }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
func (o MySqlLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The MySQL table dataset.
type MySqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The MySQL table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MySqlTableDatasetInput is an input type that accepts MySqlTableDatasetArgs and MySqlTableDatasetOutput values.
// You can construct a concrete instance of `MySqlTableDatasetInput` via:
//
//          MySqlTableDatasetArgs{...}
type MySqlTableDatasetInput interface {
	pulumi.Input

	ToMySqlTableDatasetOutput() MySqlTableDatasetOutput
	ToMySqlTableDatasetOutputWithContext(context.Context) MySqlTableDatasetOutput
}

// The MySQL table dataset.
type MySqlTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The MySQL table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MySqlTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlTableDataset)(nil)).Elem()
}

func (i MySqlTableDatasetArgs) ToMySqlTableDatasetOutput() MySqlTableDatasetOutput {
	return i.ToMySqlTableDatasetOutputWithContext(context.Background())
}

func (i MySqlTableDatasetArgs) ToMySqlTableDatasetOutputWithContext(ctx context.Context) MySqlTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlTableDatasetOutput)
}

// The MySQL table dataset.
type MySqlTableDatasetOutput struct{ *pulumi.OutputState }

func (MySqlTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlTableDataset)(nil)).Elem()
}

func (o MySqlTableDatasetOutput) ToMySqlTableDatasetOutput() MySqlTableDatasetOutput {
	return o
}

func (o MySqlTableDatasetOutput) ToMySqlTableDatasetOutputWithContext(ctx context.Context) MySqlTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MySqlTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MySqlTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MySqlTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MySqlTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v MySqlTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o MySqlTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v MySqlTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o MySqlTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MySqlTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MySqlTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MySqlTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The MySQL table name. Type: string (or Expression with resultType string).
func (o MySqlTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o MySqlTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The MySQL table dataset.
type MySqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The MySQL table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MySqlTableDatasetResponseInput is an input type that accepts MySqlTableDatasetResponseArgs and MySqlTableDatasetResponseOutput values.
// You can construct a concrete instance of `MySqlTableDatasetResponseInput` via:
//
//          MySqlTableDatasetResponseArgs{...}
type MySqlTableDatasetResponseInput interface {
	pulumi.Input

	ToMySqlTableDatasetResponseOutput() MySqlTableDatasetResponseOutput
	ToMySqlTableDatasetResponseOutputWithContext(context.Context) MySqlTableDatasetResponseOutput
}

// The MySQL table dataset.
type MySqlTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The MySQL table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MySqlTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlTableDatasetResponse)(nil)).Elem()
}

func (i MySqlTableDatasetResponseArgs) ToMySqlTableDatasetResponseOutput() MySqlTableDatasetResponseOutput {
	return i.ToMySqlTableDatasetResponseOutputWithContext(context.Background())
}

func (i MySqlTableDatasetResponseArgs) ToMySqlTableDatasetResponseOutputWithContext(ctx context.Context) MySqlTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlTableDatasetResponseOutput)
}

// The MySQL table dataset.
type MySqlTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (MySqlTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlTableDatasetResponse)(nil)).Elem()
}

func (o MySqlTableDatasetResponseOutput) ToMySqlTableDatasetResponseOutput() MySqlTableDatasetResponseOutput {
	return o
}

func (o MySqlTableDatasetResponseOutput) ToMySqlTableDatasetResponseOutputWithContext(ctx context.Context) MySqlTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MySqlTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MySqlTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MySqlTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MySqlTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v MySqlTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o MySqlTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MySqlTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MySqlTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MySqlTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MySqlTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MySqlTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The MySQL table name. Type: string (or Expression with resultType string).
func (o MySqlTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o MySqlTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Netezza linked service.
type NetezzaLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// NetezzaLinkedServiceInput is an input type that accepts NetezzaLinkedServiceArgs and NetezzaLinkedServiceOutput values.
// You can construct a concrete instance of `NetezzaLinkedServiceInput` via:
//
//          NetezzaLinkedServiceArgs{...}
type NetezzaLinkedServiceInput interface {
	pulumi.Input

	ToNetezzaLinkedServiceOutput() NetezzaLinkedServiceOutput
	ToNetezzaLinkedServiceOutputWithContext(context.Context) NetezzaLinkedServiceOutput
}

// Netezza linked service.
type NetezzaLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd AzureKeyVaultSecretReferencePtrInput `pulumi:"pwd"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NetezzaLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaLinkedService)(nil)).Elem()
}

func (i NetezzaLinkedServiceArgs) ToNetezzaLinkedServiceOutput() NetezzaLinkedServiceOutput {
	return i.ToNetezzaLinkedServiceOutputWithContext(context.Background())
}

func (i NetezzaLinkedServiceArgs) ToNetezzaLinkedServiceOutputWithContext(ctx context.Context) NetezzaLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetezzaLinkedServiceOutput)
}

// Netezza linked service.
type NetezzaLinkedServiceOutput struct{ *pulumi.OutputState }

func (NetezzaLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaLinkedService)(nil)).Elem()
}

func (o NetezzaLinkedServiceOutput) ToNetezzaLinkedServiceOutput() NetezzaLinkedServiceOutput {
	return o
}

func (o NetezzaLinkedServiceOutput) ToNetezzaLinkedServiceOutputWithContext(ctx context.Context) NetezzaLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o NetezzaLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v NetezzaLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o NetezzaLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v NetezzaLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o NetezzaLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o NetezzaLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetezzaLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o NetezzaLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o NetezzaLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v NetezzaLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o NetezzaLinkedServiceOutput) Pwd() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v NetezzaLinkedService) *AzureKeyVaultSecretReference { return v.Pwd }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
func (o NetezzaLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NetezzaLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Netezza linked service.
type NetezzaLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// NetezzaLinkedServiceResponseInput is an input type that accepts NetezzaLinkedServiceResponseArgs and NetezzaLinkedServiceResponseOutput values.
// You can construct a concrete instance of `NetezzaLinkedServiceResponseInput` via:
//
//          NetezzaLinkedServiceResponseArgs{...}
type NetezzaLinkedServiceResponseInput interface {
	pulumi.Input

	ToNetezzaLinkedServiceResponseOutput() NetezzaLinkedServiceResponseOutput
	ToNetezzaLinkedServiceResponseOutputWithContext(context.Context) NetezzaLinkedServiceResponseOutput
}

// Netezza linked service.
type NetezzaLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"pwd"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NetezzaLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaLinkedServiceResponse)(nil)).Elem()
}

func (i NetezzaLinkedServiceResponseArgs) ToNetezzaLinkedServiceResponseOutput() NetezzaLinkedServiceResponseOutput {
	return i.ToNetezzaLinkedServiceResponseOutputWithContext(context.Background())
}

func (i NetezzaLinkedServiceResponseArgs) ToNetezzaLinkedServiceResponseOutputWithContext(ctx context.Context) NetezzaLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetezzaLinkedServiceResponseOutput)
}

// Netezza linked service.
type NetezzaLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (NetezzaLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaLinkedServiceResponse)(nil)).Elem()
}

func (o NetezzaLinkedServiceResponseOutput) ToNetezzaLinkedServiceResponseOutput() NetezzaLinkedServiceResponseOutput {
	return o
}

func (o NetezzaLinkedServiceResponseOutput) ToNetezzaLinkedServiceResponseOutputWithContext(ctx context.Context) NetezzaLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o NetezzaLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o NetezzaLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o NetezzaLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o NetezzaLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o NetezzaLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o NetezzaLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o NetezzaLinkedServiceResponseOutput) Pwd() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Pwd }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
func (o NetezzaLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Netezza dataset.
type NetezzaTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Netezza. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// NetezzaTableDatasetInput is an input type that accepts NetezzaTableDatasetArgs and NetezzaTableDatasetOutput values.
// You can construct a concrete instance of `NetezzaTableDatasetInput` via:
//
//          NetezzaTableDatasetArgs{...}
type NetezzaTableDatasetInput interface {
	pulumi.Input

	ToNetezzaTableDatasetOutput() NetezzaTableDatasetOutput
	ToNetezzaTableDatasetOutputWithContext(context.Context) NetezzaTableDatasetOutput
}

// Netezza dataset.
type NetezzaTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Netezza. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NetezzaTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaTableDataset)(nil)).Elem()
}

func (i NetezzaTableDatasetArgs) ToNetezzaTableDatasetOutput() NetezzaTableDatasetOutput {
	return i.ToNetezzaTableDatasetOutputWithContext(context.Background())
}

func (i NetezzaTableDatasetArgs) ToNetezzaTableDatasetOutputWithContext(ctx context.Context) NetezzaTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetezzaTableDatasetOutput)
}

// Netezza dataset.
type NetezzaTableDatasetOutput struct{ *pulumi.OutputState }

func (NetezzaTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaTableDataset)(nil)).Elem()
}

func (o NetezzaTableDatasetOutput) ToNetezzaTableDatasetOutput() NetezzaTableDatasetOutput {
	return o
}

func (o NetezzaTableDatasetOutput) ToNetezzaTableDatasetOutputWithContext(ctx context.Context) NetezzaTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o NetezzaTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v NetezzaTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o NetezzaTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetezzaTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o NetezzaTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v NetezzaTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o NetezzaTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v NetezzaTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o NetezzaTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v NetezzaTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o NetezzaTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o NetezzaTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Netezza. Type: string (or Expression with resultType string).
func (o NetezzaTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o NetezzaTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o NetezzaTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NetezzaTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Netezza dataset.
type NetezzaTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Netezza. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// NetezzaTableDatasetResponseInput is an input type that accepts NetezzaTableDatasetResponseArgs and NetezzaTableDatasetResponseOutput values.
// You can construct a concrete instance of `NetezzaTableDatasetResponseInput` via:
//
//          NetezzaTableDatasetResponseArgs{...}
type NetezzaTableDatasetResponseInput interface {
	pulumi.Input

	ToNetezzaTableDatasetResponseOutput() NetezzaTableDatasetResponseOutput
	ToNetezzaTableDatasetResponseOutputWithContext(context.Context) NetezzaTableDatasetResponseOutput
}

// Netezza dataset.
type NetezzaTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Netezza. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NetezzaTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaTableDatasetResponse)(nil)).Elem()
}

func (i NetezzaTableDatasetResponseArgs) ToNetezzaTableDatasetResponseOutput() NetezzaTableDatasetResponseOutput {
	return i.ToNetezzaTableDatasetResponseOutputWithContext(context.Background())
}

func (i NetezzaTableDatasetResponseArgs) ToNetezzaTableDatasetResponseOutputWithContext(ctx context.Context) NetezzaTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetezzaTableDatasetResponseOutput)
}

// Netezza dataset.
type NetezzaTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (NetezzaTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaTableDatasetResponse)(nil)).Elem()
}

func (o NetezzaTableDatasetResponseOutput) ToNetezzaTableDatasetResponseOutput() NetezzaTableDatasetResponseOutput {
	return o
}

func (o NetezzaTableDatasetResponseOutput) ToNetezzaTableDatasetResponseOutputWithContext(ctx context.Context) NetezzaTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o NetezzaTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o NetezzaTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o NetezzaTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o NetezzaTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o NetezzaTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o NetezzaTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o NetezzaTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Netezza. Type: string (or Expression with resultType string).
func (o NetezzaTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o NetezzaTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o NetezzaTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Open Data Protocol (OData) linked service.
type ODataLinkedService struct {
	// Specify the resource you are requesting authorization to use Directory. Type: string (or Expression with resultType string).
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// Specify the credential type (key or cert) is used for service principal.
	AadServicePrincipalCredentialType *string `pulumi:"aadServicePrincipalCredentialType"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the OData service.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password of the OData service.
	Password interface{} `pulumi:"password"`
	// Specify the base64 encoded certificate of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCert interface{} `pulumi:"servicePrincipalEmbeddedCert"`
	// Specify the password of your certificate if your certificate has a password and you are using AadServicePrincipal authentication. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCertPassword interface{} `pulumi:"servicePrincipalEmbeddedCertPassword"`
	// Specify the application id of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The URL of the OData service endpoint. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name of the OData service. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// ODataLinkedServiceInput is an input type that accepts ODataLinkedServiceArgs and ODataLinkedServiceOutput values.
// You can construct a concrete instance of `ODataLinkedServiceInput` via:
//
//          ODataLinkedServiceArgs{...}
type ODataLinkedServiceInput interface {
	pulumi.Input

	ToODataLinkedServiceOutput() ODataLinkedServiceOutput
	ToODataLinkedServiceOutputWithContext(context.Context) ODataLinkedServiceOutput
}

// Open Data Protocol (OData) linked service.
type ODataLinkedServiceArgs struct {
	// Specify the resource you are requesting authorization to use Directory. Type: string (or Expression with resultType string).
	AadResourceId pulumi.Input `pulumi:"aadResourceId"`
	// Specify the credential type (key or cert) is used for service principal.
	AadServicePrincipalCredentialType pulumi.StringPtrInput `pulumi:"aadServicePrincipalCredentialType"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Type of authentication used to connect to the OData service.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password of the OData service.
	Password pulumi.Input `pulumi:"password"`
	// Specify the base64 encoded certificate of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCert pulumi.Input `pulumi:"servicePrincipalEmbeddedCert"`
	// Specify the password of your certificate if your certificate has a password and you are using AadServicePrincipal authentication. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCertPassword pulumi.Input `pulumi:"servicePrincipalEmbeddedCertPassword"`
	// Specify the application id of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// Specify the secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The URL of the OData service endpoint. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// User name of the OData service. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (ODataLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataLinkedService)(nil)).Elem()
}

func (i ODataLinkedServiceArgs) ToODataLinkedServiceOutput() ODataLinkedServiceOutput {
	return i.ToODataLinkedServiceOutputWithContext(context.Background())
}

func (i ODataLinkedServiceArgs) ToODataLinkedServiceOutputWithContext(ctx context.Context) ODataLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataLinkedServiceOutput)
}

// Open Data Protocol (OData) linked service.
type ODataLinkedServiceOutput struct{ *pulumi.OutputState }

func (ODataLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataLinkedService)(nil)).Elem()
}

func (o ODataLinkedServiceOutput) ToODataLinkedServiceOutput() ODataLinkedServiceOutput {
	return o
}

func (o ODataLinkedServiceOutput) ToODataLinkedServiceOutputWithContext(ctx context.Context) ODataLinkedServiceOutput {
	return o
}

// Specify the resource you are requesting authorization to use Directory. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceOutput) AadResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.AadResourceId }).(pulumi.AnyOutput)
}

// Specify the credential type (key or cert) is used for service principal.
func (o ODataLinkedServiceOutput) AadServicePrincipalCredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataLinkedService) *string { return v.AadServicePrincipalCredentialType }).(pulumi.StringPtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o ODataLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ODataLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the OData service.
func (o ODataLinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataLinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ODataLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v ODataLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o ODataLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ODataLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ODataLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password of the OData service.
func (o ODataLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Specify the base64 encoded certificate of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceOutput) ServicePrincipalEmbeddedCert() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.ServicePrincipalEmbeddedCert }).(pulumi.AnyOutput)
}

// Specify the password of your certificate if your certificate has a password and you are using AadServicePrincipal authentication. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceOutput) ServicePrincipalEmbeddedCertPassword() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.ServicePrincipalEmbeddedCertPassword }).(pulumi.AnyOutput)
}

// Specify the application id of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// Specify the secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Specify the tenant information (domain name or tenant ID) under which your application resides. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o ODataLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ODataLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of the OData service endpoint. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// User name of the OData service. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Open Data Protocol (OData) linked service.
type ODataLinkedServiceResponse struct {
	// Specify the resource you are requesting authorization to use Directory. Type: string (or Expression with resultType string).
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// Specify the credential type (key or cert) is used for service principal.
	AadServicePrincipalCredentialType *string `pulumi:"aadServicePrincipalCredentialType"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the OData service.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password of the OData service.
	Password interface{} `pulumi:"password"`
	// Specify the base64 encoded certificate of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCert interface{} `pulumi:"servicePrincipalEmbeddedCert"`
	// Specify the password of your certificate if your certificate has a password and you are using AadServicePrincipal authentication. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCertPassword interface{} `pulumi:"servicePrincipalEmbeddedCertPassword"`
	// Specify the application id of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The URL of the OData service endpoint. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name of the OData service. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// ODataLinkedServiceResponseInput is an input type that accepts ODataLinkedServiceResponseArgs and ODataLinkedServiceResponseOutput values.
// You can construct a concrete instance of `ODataLinkedServiceResponseInput` via:
//
//          ODataLinkedServiceResponseArgs{...}
type ODataLinkedServiceResponseInput interface {
	pulumi.Input

	ToODataLinkedServiceResponseOutput() ODataLinkedServiceResponseOutput
	ToODataLinkedServiceResponseOutputWithContext(context.Context) ODataLinkedServiceResponseOutput
}

// Open Data Protocol (OData) linked service.
type ODataLinkedServiceResponseArgs struct {
	// Specify the resource you are requesting authorization to use Directory. Type: string (or Expression with resultType string).
	AadResourceId pulumi.Input `pulumi:"aadResourceId"`
	// Specify the credential type (key or cert) is used for service principal.
	AadServicePrincipalCredentialType pulumi.StringPtrInput `pulumi:"aadServicePrincipalCredentialType"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Type of authentication used to connect to the OData service.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password of the OData service.
	Password pulumi.Input `pulumi:"password"`
	// Specify the base64 encoded certificate of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCert pulumi.Input `pulumi:"servicePrincipalEmbeddedCert"`
	// Specify the password of your certificate if your certificate has a password and you are using AadServicePrincipal authentication. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCertPassword pulumi.Input `pulumi:"servicePrincipalEmbeddedCertPassword"`
	// Specify the application id of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// Specify the secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The URL of the OData service endpoint. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// User name of the OData service. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (ODataLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataLinkedServiceResponse)(nil)).Elem()
}

func (i ODataLinkedServiceResponseArgs) ToODataLinkedServiceResponseOutput() ODataLinkedServiceResponseOutput {
	return i.ToODataLinkedServiceResponseOutputWithContext(context.Background())
}

func (i ODataLinkedServiceResponseArgs) ToODataLinkedServiceResponseOutputWithContext(ctx context.Context) ODataLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataLinkedServiceResponseOutput)
}

// Open Data Protocol (OData) linked service.
type ODataLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ODataLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataLinkedServiceResponse)(nil)).Elem()
}

func (o ODataLinkedServiceResponseOutput) ToODataLinkedServiceResponseOutput() ODataLinkedServiceResponseOutput {
	return o
}

func (o ODataLinkedServiceResponseOutput) ToODataLinkedServiceResponseOutputWithContext(ctx context.Context) ODataLinkedServiceResponseOutput {
	return o
}

// Specify the resource you are requesting authorization to use Directory. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) AadResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.AadResourceId }).(pulumi.AnyOutput)
}

// Specify the credential type (key or cert) is used for service principal.
func (o ODataLinkedServiceResponseOutput) AadServicePrincipalCredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) *string { return v.AadServicePrincipalCredentialType }).(pulumi.StringPtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o ODataLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the OData service.
func (o ODataLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ODataLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o ODataLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ODataLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password of the OData service.
func (o ODataLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Specify the base64 encoded certificate of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) ServicePrincipalEmbeddedCert() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.ServicePrincipalEmbeddedCert }).(pulumi.AnyOutput)
}

// Specify the password of your certificate if your certificate has a password and you are using AadServicePrincipal authentication. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) ServicePrincipalEmbeddedCertPassword() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.ServicePrincipalEmbeddedCertPassword }).(pulumi.AnyOutput)
}

// Specify the application id of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// Specify the secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Specify the tenant information (domain name or tenant ID) under which your application resides. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o ODataLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of the OData service endpoint. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// User name of the OData service. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The Open Data Protocol (OData) resource dataset.
type ODataResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The OData resource path. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ODataResourceDatasetInput is an input type that accepts ODataResourceDatasetArgs and ODataResourceDatasetOutput values.
// You can construct a concrete instance of `ODataResourceDatasetInput` via:
//
//          ODataResourceDatasetArgs{...}
type ODataResourceDatasetInput interface {
	pulumi.Input

	ToODataResourceDatasetOutput() ODataResourceDatasetOutput
	ToODataResourceDatasetOutputWithContext(context.Context) ODataResourceDatasetOutput
}

// The Open Data Protocol (OData) resource dataset.
type ODataResourceDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The OData resource path. Type: string (or Expression with resultType string).
	Path pulumi.Input `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ODataResourceDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataResourceDataset)(nil)).Elem()
}

func (i ODataResourceDatasetArgs) ToODataResourceDatasetOutput() ODataResourceDatasetOutput {
	return i.ToODataResourceDatasetOutputWithContext(context.Background())
}

func (i ODataResourceDatasetArgs) ToODataResourceDatasetOutputWithContext(ctx context.Context) ODataResourceDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataResourceDatasetOutput)
}

// The Open Data Protocol (OData) resource dataset.
type ODataResourceDatasetOutput struct{ *pulumi.OutputState }

func (ODataResourceDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataResourceDataset)(nil)).Elem()
}

func (o ODataResourceDatasetOutput) ToODataResourceDatasetOutput() ODataResourceDatasetOutput {
	return o
}

func (o ODataResourceDatasetOutput) ToODataResourceDatasetOutputWithContext(ctx context.Context) ODataResourceDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ODataResourceDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ODataResourceDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ODataResourceDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataResourceDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ODataResourceDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v ODataResourceDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o ODataResourceDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ODataResourceDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o ODataResourceDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ODataResourceDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The OData resource path. Type: string (or Expression with resultType string).
func (o ODataResourceDatasetOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataResourceDataset) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ODataResourceDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataResourceDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ODataResourceDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataResourceDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o ODataResourceDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ODataResourceDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Open Data Protocol (OData) resource dataset.
type ODataResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The OData resource path. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ODataResourceDatasetResponseInput is an input type that accepts ODataResourceDatasetResponseArgs and ODataResourceDatasetResponseOutput values.
// You can construct a concrete instance of `ODataResourceDatasetResponseInput` via:
//
//          ODataResourceDatasetResponseArgs{...}
type ODataResourceDatasetResponseInput interface {
	pulumi.Input

	ToODataResourceDatasetResponseOutput() ODataResourceDatasetResponseOutput
	ToODataResourceDatasetResponseOutputWithContext(context.Context) ODataResourceDatasetResponseOutput
}

// The Open Data Protocol (OData) resource dataset.
type ODataResourceDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The OData resource path. Type: string (or Expression with resultType string).
	Path pulumi.Input `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ODataResourceDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataResourceDatasetResponse)(nil)).Elem()
}

func (i ODataResourceDatasetResponseArgs) ToODataResourceDatasetResponseOutput() ODataResourceDatasetResponseOutput {
	return i.ToODataResourceDatasetResponseOutputWithContext(context.Background())
}

func (i ODataResourceDatasetResponseArgs) ToODataResourceDatasetResponseOutputWithContext(ctx context.Context) ODataResourceDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataResourceDatasetResponseOutput)
}

// The Open Data Protocol (OData) resource dataset.
type ODataResourceDatasetResponseOutput struct{ *pulumi.OutputState }

func (ODataResourceDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataResourceDatasetResponse)(nil)).Elem()
}

func (o ODataResourceDatasetResponseOutput) ToODataResourceDatasetResponseOutput() ODataResourceDatasetResponseOutput {
	return o
}

func (o ODataResourceDatasetResponseOutput) ToODataResourceDatasetResponseOutputWithContext(ctx context.Context) ODataResourceDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ODataResourceDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ODataResourceDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ODataResourceDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o ODataResourceDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ODataResourceDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The OData resource path. Type: string (or Expression with resultType string).
func (o ODataResourceDatasetResponseOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ODataResourceDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ODataResourceDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o ODataResourceDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Open Database Connectivity (ODBC) linked service.
type OdbcLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// OdbcLinkedServiceInput is an input type that accepts OdbcLinkedServiceArgs and OdbcLinkedServiceOutput values.
// You can construct a concrete instance of `OdbcLinkedServiceInput` via:
//
//          OdbcLinkedServiceArgs{...}
type OdbcLinkedServiceInput interface {
	pulumi.Input

	ToOdbcLinkedServiceOutput() OdbcLinkedServiceOutput
	ToOdbcLinkedServiceOutputWithContext(context.Context) OdbcLinkedServiceOutput
}

// Open Database Connectivity (ODBC) linked service.
type OdbcLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential pulumi.Input `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (OdbcLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcLinkedService)(nil)).Elem()
}

func (i OdbcLinkedServiceArgs) ToOdbcLinkedServiceOutput() OdbcLinkedServiceOutput {
	return i.ToOdbcLinkedServiceOutputWithContext(context.Background())
}

func (i OdbcLinkedServiceArgs) ToOdbcLinkedServiceOutputWithContext(ctx context.Context) OdbcLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OdbcLinkedServiceOutput)
}

// Open Database Connectivity (ODBC) linked service.
type OdbcLinkedServiceOutput struct{ *pulumi.OutputState }

func (OdbcLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcLinkedService)(nil)).Elem()
}

func (o OdbcLinkedServiceOutput) ToOdbcLinkedServiceOutput() OdbcLinkedServiceOutput {
	return o
}

func (o OdbcLinkedServiceOutput) ToOdbcLinkedServiceOutputWithContext(ctx context.Context) OdbcLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o OdbcLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OdbcLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
func (o OdbcLinkedServiceOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedService) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o OdbcLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v OdbcLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o OdbcLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The access credential portion of the connection string specified in driver-specific property-value format.
func (o OdbcLinkedServiceOutput) Credential() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedService) interface{} { return v.Credential }).(pulumi.AnyOutput)
}

// Linked service description.
func (o OdbcLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OdbcLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o OdbcLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o OdbcLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v OdbcLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for Basic authentication.
func (o OdbcLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o OdbcLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OdbcLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// User name for Basic authentication. Type: string (or Expression with resultType string).
func (o OdbcLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Open Database Connectivity (ODBC) linked service.
type OdbcLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// OdbcLinkedServiceResponseInput is an input type that accepts OdbcLinkedServiceResponseArgs and OdbcLinkedServiceResponseOutput values.
// You can construct a concrete instance of `OdbcLinkedServiceResponseInput` via:
//
//          OdbcLinkedServiceResponseArgs{...}
type OdbcLinkedServiceResponseInput interface {
	pulumi.Input

	ToOdbcLinkedServiceResponseOutput() OdbcLinkedServiceResponseOutput
	ToOdbcLinkedServiceResponseOutputWithContext(context.Context) OdbcLinkedServiceResponseOutput
}

// Open Database Connectivity (ODBC) linked service.
type OdbcLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential pulumi.Input `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (OdbcLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcLinkedServiceResponse)(nil)).Elem()
}

func (i OdbcLinkedServiceResponseArgs) ToOdbcLinkedServiceResponseOutput() OdbcLinkedServiceResponseOutput {
	return i.ToOdbcLinkedServiceResponseOutputWithContext(context.Background())
}

func (i OdbcLinkedServiceResponseArgs) ToOdbcLinkedServiceResponseOutputWithContext(ctx context.Context) OdbcLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OdbcLinkedServiceResponseOutput)
}

// Open Database Connectivity (ODBC) linked service.
type OdbcLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (OdbcLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcLinkedServiceResponse)(nil)).Elem()
}

func (o OdbcLinkedServiceResponseOutput) ToOdbcLinkedServiceResponseOutput() OdbcLinkedServiceResponseOutput {
	return o
}

func (o OdbcLinkedServiceResponseOutput) ToOdbcLinkedServiceResponseOutputWithContext(ctx context.Context) OdbcLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o OdbcLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
func (o OdbcLinkedServiceResponseOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o OdbcLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o OdbcLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The access credential portion of the connection string specified in driver-specific property-value format.
func (o OdbcLinkedServiceResponseOutput) Credential() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) interface{} { return v.Credential }).(pulumi.AnyOutput)
}

// Linked service description.
func (o OdbcLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o OdbcLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o OdbcLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for Basic authentication.
func (o OdbcLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o OdbcLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name for Basic authentication. Type: string (or Expression with resultType string).
func (o OdbcLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The ODBC table dataset.
type OdbcTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The ODBC table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// OdbcTableDatasetInput is an input type that accepts OdbcTableDatasetArgs and OdbcTableDatasetOutput values.
// You can construct a concrete instance of `OdbcTableDatasetInput` via:
//
//          OdbcTableDatasetArgs{...}
type OdbcTableDatasetInput interface {
	pulumi.Input

	ToOdbcTableDatasetOutput() OdbcTableDatasetOutput
	ToOdbcTableDatasetOutputWithContext(context.Context) OdbcTableDatasetOutput
}

// The ODBC table dataset.
type OdbcTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The ODBC table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OdbcTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcTableDataset)(nil)).Elem()
}

func (i OdbcTableDatasetArgs) ToOdbcTableDatasetOutput() OdbcTableDatasetOutput {
	return i.ToOdbcTableDatasetOutputWithContext(context.Background())
}

func (i OdbcTableDatasetArgs) ToOdbcTableDatasetOutputWithContext(ctx context.Context) OdbcTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OdbcTableDatasetOutput)
}

// The ODBC table dataset.
type OdbcTableDatasetOutput struct{ *pulumi.OutputState }

func (OdbcTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcTableDataset)(nil)).Elem()
}

func (o OdbcTableDatasetOutput) ToOdbcTableDatasetOutput() OdbcTableDatasetOutput {
	return o
}

func (o OdbcTableDatasetOutput) ToOdbcTableDatasetOutputWithContext(ctx context.Context) OdbcTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o OdbcTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OdbcTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o OdbcTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OdbcTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o OdbcTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v OdbcTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o OdbcTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v OdbcTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o OdbcTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v OdbcTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o OdbcTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o OdbcTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The ODBC table name. Type: string (or Expression with resultType string).
func (o OdbcTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o OdbcTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OdbcTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The ODBC table dataset.
type OdbcTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The ODBC table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// OdbcTableDatasetResponseInput is an input type that accepts OdbcTableDatasetResponseArgs and OdbcTableDatasetResponseOutput values.
// You can construct a concrete instance of `OdbcTableDatasetResponseInput` via:
//
//          OdbcTableDatasetResponseArgs{...}
type OdbcTableDatasetResponseInput interface {
	pulumi.Input

	ToOdbcTableDatasetResponseOutput() OdbcTableDatasetResponseOutput
	ToOdbcTableDatasetResponseOutputWithContext(context.Context) OdbcTableDatasetResponseOutput
}

// The ODBC table dataset.
type OdbcTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The ODBC table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OdbcTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcTableDatasetResponse)(nil)).Elem()
}

func (i OdbcTableDatasetResponseArgs) ToOdbcTableDatasetResponseOutput() OdbcTableDatasetResponseOutput {
	return i.ToOdbcTableDatasetResponseOutputWithContext(context.Background())
}

func (i OdbcTableDatasetResponseArgs) ToOdbcTableDatasetResponseOutputWithContext(ctx context.Context) OdbcTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OdbcTableDatasetResponseOutput)
}

// The ODBC table dataset.
type OdbcTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (OdbcTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcTableDatasetResponse)(nil)).Elem()
}

func (o OdbcTableDatasetResponseOutput) ToOdbcTableDatasetResponseOutput() OdbcTableDatasetResponseOutput {
	return o
}

func (o OdbcTableDatasetResponseOutput) ToOdbcTableDatasetResponseOutputWithContext(ctx context.Context) OdbcTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o OdbcTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OdbcTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o OdbcTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OdbcTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o OdbcTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v OdbcTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o OdbcTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v OdbcTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o OdbcTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v OdbcTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o OdbcTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o OdbcTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The ODBC table name. Type: string (or Expression with resultType string).
func (o OdbcTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o OdbcTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OdbcTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Office365 account.
type Office365Dataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or Expression with resultType string).
	Predicate interface{} `pulumi:"predicate"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Office365DatasetInput is an input type that accepts Office365DatasetArgs and Office365DatasetOutput values.
// You can construct a concrete instance of `Office365DatasetInput` via:
//
//          Office365DatasetArgs{...}
type Office365DatasetInput interface {
	pulumi.Input

	ToOffice365DatasetOutput() Office365DatasetOutput
	ToOffice365DatasetOutputWithContext(context.Context) Office365DatasetOutput
}

// The Office365 account.
type Office365DatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or Expression with resultType string).
	Predicate pulumi.Input `pulumi:"predicate"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (Office365DatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365Dataset)(nil)).Elem()
}

func (i Office365DatasetArgs) ToOffice365DatasetOutput() Office365DatasetOutput {
	return i.ToOffice365DatasetOutputWithContext(context.Background())
}

func (i Office365DatasetArgs) ToOffice365DatasetOutputWithContext(ctx context.Context) Office365DatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Office365DatasetOutput)
}

// The Office365 account.
type Office365DatasetOutput struct{ *pulumi.OutputState }

func (Office365DatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365Dataset)(nil)).Elem()
}

func (o Office365DatasetOutput) ToOffice365DatasetOutput() Office365DatasetOutput {
	return o
}

func (o Office365DatasetOutput) ToOffice365DatasetOutputWithContext(ctx context.Context) Office365DatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o Office365DatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v Office365Dataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o Office365DatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Office365Dataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o Office365DatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v Office365Dataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o Office365DatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v Office365Dataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o Office365DatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v Office365Dataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or Expression with resultType string).
func (o Office365DatasetOutput) Predicate() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365Dataset) interface{} { return v.Predicate }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o Office365DatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365Dataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o Office365DatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365Dataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string).
func (o Office365DatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365Dataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o Office365DatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Office365Dataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Office365 account.
type Office365DatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or Expression with resultType string).
	Predicate interface{} `pulumi:"predicate"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Office365DatasetResponseInput is an input type that accepts Office365DatasetResponseArgs and Office365DatasetResponseOutput values.
// You can construct a concrete instance of `Office365DatasetResponseInput` via:
//
//          Office365DatasetResponseArgs{...}
type Office365DatasetResponseInput interface {
	pulumi.Input

	ToOffice365DatasetResponseOutput() Office365DatasetResponseOutput
	ToOffice365DatasetResponseOutputWithContext(context.Context) Office365DatasetResponseOutput
}

// The Office365 account.
type Office365DatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or Expression with resultType string).
	Predicate pulumi.Input `pulumi:"predicate"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (Office365DatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365DatasetResponse)(nil)).Elem()
}

func (i Office365DatasetResponseArgs) ToOffice365DatasetResponseOutput() Office365DatasetResponseOutput {
	return i.ToOffice365DatasetResponseOutputWithContext(context.Background())
}

func (i Office365DatasetResponseArgs) ToOffice365DatasetResponseOutputWithContext(ctx context.Context) Office365DatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Office365DatasetResponseOutput)
}

// The Office365 account.
type Office365DatasetResponseOutput struct{ *pulumi.OutputState }

func (Office365DatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365DatasetResponse)(nil)).Elem()
}

func (o Office365DatasetResponseOutput) ToOffice365DatasetResponseOutput() Office365DatasetResponseOutput {
	return o
}

func (o Office365DatasetResponseOutput) ToOffice365DatasetResponseOutputWithContext(ctx context.Context) Office365DatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o Office365DatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v Office365DatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o Office365DatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Office365DatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o Office365DatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v Office365DatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o Office365DatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v Office365DatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o Office365DatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v Office365DatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or Expression with resultType string).
func (o Office365DatasetResponseOutput) Predicate() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365DatasetResponse) interface{} { return v.Predicate }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o Office365DatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365DatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o Office365DatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365DatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string).
func (o Office365DatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365DatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o Office365DatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Office365DatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Office365 linked service.
type Office365LinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string).
	Office365TenantId interface{} `pulumi:"office365TenantId"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the application's key.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string).
	ServicePrincipalTenantId interface{} `pulumi:"servicePrincipalTenantId"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Office365LinkedServiceInput is an input type that accepts Office365LinkedServiceArgs and Office365LinkedServiceOutput values.
// You can construct a concrete instance of `Office365LinkedServiceInput` via:
//
//          Office365LinkedServiceArgs{...}
type Office365LinkedServiceInput interface {
	pulumi.Input

	ToOffice365LinkedServiceOutput() Office365LinkedServiceOutput
	ToOffice365LinkedServiceOutputWithContext(context.Context) Office365LinkedServiceOutput
}

// Office365 linked service.
type Office365LinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string).
	Office365TenantId pulumi.Input `pulumi:"office365TenantId"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// Specify the application's key.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string).
	ServicePrincipalTenantId pulumi.Input `pulumi:"servicePrincipalTenantId"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (Office365LinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365LinkedService)(nil)).Elem()
}

func (i Office365LinkedServiceArgs) ToOffice365LinkedServiceOutput() Office365LinkedServiceOutput {
	return i.ToOffice365LinkedServiceOutputWithContext(context.Background())
}

func (i Office365LinkedServiceArgs) ToOffice365LinkedServiceOutputWithContext(ctx context.Context) Office365LinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Office365LinkedServiceOutput)
}

// Office365 linked service.
type Office365LinkedServiceOutput struct{ *pulumi.OutputState }

func (Office365LinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365LinkedService)(nil)).Elem()
}

func (o Office365LinkedServiceOutput) ToOffice365LinkedServiceOutput() Office365LinkedServiceOutput {
	return o
}

func (o Office365LinkedServiceOutput) ToOffice365LinkedServiceOutputWithContext(ctx context.Context) Office365LinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o Office365LinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v Office365LinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o Office365LinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v Office365LinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o Office365LinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Office365LinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o Office365LinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365LinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string).
func (o Office365LinkedServiceOutput) Office365TenantId() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365LinkedService) interface{} { return v.Office365TenantId }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o Office365LinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v Office365LinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Specify the application's client ID. Type: string (or Expression with resultType string).
func (o Office365LinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365LinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// Specify the application's key.
func (o Office365LinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365LinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string).
func (o Office365LinkedServiceOutput) ServicePrincipalTenantId() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365LinkedService) interface{} { return v.ServicePrincipalTenantId }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o Office365LinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Office365LinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Office365 linked service.
type Office365LinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string).
	Office365TenantId interface{} `pulumi:"office365TenantId"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the application's key.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string).
	ServicePrincipalTenantId interface{} `pulumi:"servicePrincipalTenantId"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Office365LinkedServiceResponseInput is an input type that accepts Office365LinkedServiceResponseArgs and Office365LinkedServiceResponseOutput values.
// You can construct a concrete instance of `Office365LinkedServiceResponseInput` via:
//
//          Office365LinkedServiceResponseArgs{...}
type Office365LinkedServiceResponseInput interface {
	pulumi.Input

	ToOffice365LinkedServiceResponseOutput() Office365LinkedServiceResponseOutput
	ToOffice365LinkedServiceResponseOutputWithContext(context.Context) Office365LinkedServiceResponseOutput
}

// Office365 linked service.
type Office365LinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string).
	Office365TenantId pulumi.Input `pulumi:"office365TenantId"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// Specify the application's key.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string).
	ServicePrincipalTenantId pulumi.Input `pulumi:"servicePrincipalTenantId"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (Office365LinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365LinkedServiceResponse)(nil)).Elem()
}

func (i Office365LinkedServiceResponseArgs) ToOffice365LinkedServiceResponseOutput() Office365LinkedServiceResponseOutput {
	return i.ToOffice365LinkedServiceResponseOutputWithContext(context.Background())
}

func (i Office365LinkedServiceResponseArgs) ToOffice365LinkedServiceResponseOutputWithContext(ctx context.Context) Office365LinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Office365LinkedServiceResponseOutput)
}

// Office365 linked service.
type Office365LinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (Office365LinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365LinkedServiceResponse)(nil)).Elem()
}

func (o Office365LinkedServiceResponseOutput) ToOffice365LinkedServiceResponseOutput() Office365LinkedServiceResponseOutput {
	return o
}

func (o Office365LinkedServiceResponseOutput) ToOffice365LinkedServiceResponseOutputWithContext(ctx context.Context) Office365LinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o Office365LinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o Office365LinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o Office365LinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o Office365LinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string).
func (o Office365LinkedServiceResponseOutput) Office365TenantId() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) interface{} { return v.Office365TenantId }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o Office365LinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Specify the application's client ID. Type: string (or Expression with resultType string).
func (o Office365LinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// Specify the application's key.
func (o Office365LinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string).
func (o Office365LinkedServiceResponseOutput) ServicePrincipalTenantId() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) interface{} { return v.ServicePrincipalTenantId }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o Office365LinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Oracle database.
type OracleLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// OracleLinkedServiceInput is an input type that accepts OracleLinkedServiceArgs and OracleLinkedServiceOutput values.
// You can construct a concrete instance of `OracleLinkedServiceInput` via:
//
//          OracleLinkedServiceArgs{...}
type OracleLinkedServiceInput interface {
	pulumi.Input

	ToOracleLinkedServiceOutput() OracleLinkedServiceOutput
	ToOracleLinkedServiceOutputWithContext(context.Context) OracleLinkedServiceOutput
}

// Oracle database.
type OracleLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferencePtrInput `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OracleLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleLinkedService)(nil)).Elem()
}

func (i OracleLinkedServiceArgs) ToOracleLinkedServiceOutput() OracleLinkedServiceOutput {
	return i.ToOracleLinkedServiceOutputWithContext(context.Background())
}

func (i OracleLinkedServiceArgs) ToOracleLinkedServiceOutputWithContext(ctx context.Context) OracleLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleLinkedServiceOutput)
}

// Oracle database.
type OracleLinkedServiceOutput struct{ *pulumi.OutputState }

func (OracleLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleLinkedService)(nil)).Elem()
}

func (o OracleLinkedServiceOutput) ToOracleLinkedServiceOutput() OracleLinkedServiceOutput {
	return o
}

func (o OracleLinkedServiceOutput) ToOracleLinkedServiceOutputWithContext(ctx context.Context) OracleLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o OracleLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OracleLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o OracleLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v OracleLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o OracleLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o OracleLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o OracleLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o OracleLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v OracleLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o OracleLinkedServiceOutput) Password() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v OracleLinkedService) *AzureKeyVaultSecretReference { return v.Password }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
func (o OracleLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Oracle database.
type OracleLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// OracleLinkedServiceResponseInput is an input type that accepts OracleLinkedServiceResponseArgs and OracleLinkedServiceResponseOutput values.
// You can construct a concrete instance of `OracleLinkedServiceResponseInput` via:
//
//          OracleLinkedServiceResponseArgs{...}
type OracleLinkedServiceResponseInput interface {
	pulumi.Input

	ToOracleLinkedServiceResponseOutput() OracleLinkedServiceResponseOutput
	ToOracleLinkedServiceResponseOutputWithContext(context.Context) OracleLinkedServiceResponseOutput
}

// Oracle database.
type OracleLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OracleLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleLinkedServiceResponse)(nil)).Elem()
}

func (i OracleLinkedServiceResponseArgs) ToOracleLinkedServiceResponseOutput() OracleLinkedServiceResponseOutput {
	return i.ToOracleLinkedServiceResponseOutputWithContext(context.Background())
}

func (i OracleLinkedServiceResponseArgs) ToOracleLinkedServiceResponseOutputWithContext(ctx context.Context) OracleLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleLinkedServiceResponseOutput)
}

// Oracle database.
type OracleLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (OracleLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleLinkedServiceResponse)(nil)).Elem()
}

func (o OracleLinkedServiceResponseOutput) ToOracleLinkedServiceResponseOutput() OracleLinkedServiceResponseOutput {
	return o
}

func (o OracleLinkedServiceResponseOutput) ToOracleLinkedServiceResponseOutputWithContext(ctx context.Context) OracleLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o OracleLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o OracleLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o OracleLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o OracleLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o OracleLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o OracleLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o OracleLinkedServiceResponseOutput) Password() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Password }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
func (o OracleLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Oracle Service Cloud linked service.
type OracleServiceCloudLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the Oracle Service Cloud instance.
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username key.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Oracle Service Cloud server.
	Username interface{} `pulumi:"username"`
}

// OracleServiceCloudLinkedServiceInput is an input type that accepts OracleServiceCloudLinkedServiceArgs and OracleServiceCloudLinkedServiceOutput values.
// You can construct a concrete instance of `OracleServiceCloudLinkedServiceInput` via:
//
//          OracleServiceCloudLinkedServiceArgs{...}
type OracleServiceCloudLinkedServiceInput interface {
	pulumi.Input

	ToOracleServiceCloudLinkedServiceOutput() OracleServiceCloudLinkedServiceOutput
	ToOracleServiceCloudLinkedServiceOutputWithContext(context.Context) OracleServiceCloudLinkedServiceOutput
}

// Oracle Service Cloud linked service.
type OracleServiceCloudLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The URL of the Oracle Service Cloud instance.
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username key.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
	// The user name that you use to access Oracle Service Cloud server.
	Username pulumi.Input `pulumi:"username"`
}

func (OracleServiceCloudLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleServiceCloudLinkedService)(nil)).Elem()
}

func (i OracleServiceCloudLinkedServiceArgs) ToOracleServiceCloudLinkedServiceOutput() OracleServiceCloudLinkedServiceOutput {
	return i.ToOracleServiceCloudLinkedServiceOutputWithContext(context.Background())
}

func (i OracleServiceCloudLinkedServiceArgs) ToOracleServiceCloudLinkedServiceOutputWithContext(ctx context.Context) OracleServiceCloudLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleServiceCloudLinkedServiceOutput)
}

// Oracle Service Cloud linked service.
type OracleServiceCloudLinkedServiceOutput struct{ *pulumi.OutputState }

func (OracleServiceCloudLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleServiceCloudLinkedService)(nil)).Elem()
}

func (o OracleServiceCloudLinkedServiceOutput) ToOracleServiceCloudLinkedServiceOutput() OracleServiceCloudLinkedServiceOutput {
	return o
}

func (o OracleServiceCloudLinkedServiceOutput) ToOracleServiceCloudLinkedServiceOutputWithContext(ctx context.Context) OracleServiceCloudLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o OracleServiceCloudLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o OracleServiceCloudLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o OracleServiceCloudLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o OracleServiceCloudLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The URL of the Oracle Service Cloud instance.
func (o OracleServiceCloudLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o OracleServiceCloudLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name that you provided in the username key.
func (o OracleServiceCloudLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o OracleServiceCloudLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o OracleServiceCloudLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o OracleServiceCloudLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o OracleServiceCloudLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The user name that you use to access Oracle Service Cloud server.
func (o OracleServiceCloudLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Oracle Service Cloud linked service.
type OracleServiceCloudLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the Oracle Service Cloud instance.
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username key.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Oracle Service Cloud server.
	Username interface{} `pulumi:"username"`
}

// OracleServiceCloudLinkedServiceResponseInput is an input type that accepts OracleServiceCloudLinkedServiceResponseArgs and OracleServiceCloudLinkedServiceResponseOutput values.
// You can construct a concrete instance of `OracleServiceCloudLinkedServiceResponseInput` via:
//
//          OracleServiceCloudLinkedServiceResponseArgs{...}
type OracleServiceCloudLinkedServiceResponseInput interface {
	pulumi.Input

	ToOracleServiceCloudLinkedServiceResponseOutput() OracleServiceCloudLinkedServiceResponseOutput
	ToOracleServiceCloudLinkedServiceResponseOutputWithContext(context.Context) OracleServiceCloudLinkedServiceResponseOutput
}

// Oracle Service Cloud linked service.
type OracleServiceCloudLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The URL of the Oracle Service Cloud instance.
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username key.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
	// The user name that you use to access Oracle Service Cloud server.
	Username pulumi.Input `pulumi:"username"`
}

func (OracleServiceCloudLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleServiceCloudLinkedServiceResponse)(nil)).Elem()
}

func (i OracleServiceCloudLinkedServiceResponseArgs) ToOracleServiceCloudLinkedServiceResponseOutput() OracleServiceCloudLinkedServiceResponseOutput {
	return i.ToOracleServiceCloudLinkedServiceResponseOutputWithContext(context.Background())
}

func (i OracleServiceCloudLinkedServiceResponseArgs) ToOracleServiceCloudLinkedServiceResponseOutputWithContext(ctx context.Context) OracleServiceCloudLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleServiceCloudLinkedServiceResponseOutput)
}

// Oracle Service Cloud linked service.
type OracleServiceCloudLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (OracleServiceCloudLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleServiceCloudLinkedServiceResponse)(nil)).Elem()
}

func (o OracleServiceCloudLinkedServiceResponseOutput) ToOracleServiceCloudLinkedServiceResponseOutput() OracleServiceCloudLinkedServiceResponseOutput {
	return o
}

func (o OracleServiceCloudLinkedServiceResponseOutput) ToOracleServiceCloudLinkedServiceResponseOutputWithContext(ctx context.Context) OracleServiceCloudLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o OracleServiceCloudLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o OracleServiceCloudLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o OracleServiceCloudLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o OracleServiceCloudLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The URL of the Oracle Service Cloud instance.
func (o OracleServiceCloudLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o OracleServiceCloudLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name that you provided in the username key.
func (o OracleServiceCloudLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o OracleServiceCloudLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o OracleServiceCloudLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o OracleServiceCloudLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o OracleServiceCloudLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The user name that you use to access Oracle Service Cloud server.
func (o OracleServiceCloudLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Oracle Service Cloud dataset.
type OracleServiceCloudObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// OracleServiceCloudObjectDatasetInput is an input type that accepts OracleServiceCloudObjectDatasetArgs and OracleServiceCloudObjectDatasetOutput values.
// You can construct a concrete instance of `OracleServiceCloudObjectDatasetInput` via:
//
//          OracleServiceCloudObjectDatasetArgs{...}
type OracleServiceCloudObjectDatasetInput interface {
	pulumi.Input

	ToOracleServiceCloudObjectDatasetOutput() OracleServiceCloudObjectDatasetOutput
	ToOracleServiceCloudObjectDatasetOutputWithContext(context.Context) OracleServiceCloudObjectDatasetOutput
}

// Oracle Service Cloud dataset.
type OracleServiceCloudObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OracleServiceCloudObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleServiceCloudObjectDataset)(nil)).Elem()
}

func (i OracleServiceCloudObjectDatasetArgs) ToOracleServiceCloudObjectDatasetOutput() OracleServiceCloudObjectDatasetOutput {
	return i.ToOracleServiceCloudObjectDatasetOutputWithContext(context.Background())
}

func (i OracleServiceCloudObjectDatasetArgs) ToOracleServiceCloudObjectDatasetOutputWithContext(ctx context.Context) OracleServiceCloudObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleServiceCloudObjectDatasetOutput)
}

// Oracle Service Cloud dataset.
type OracleServiceCloudObjectDatasetOutput struct{ *pulumi.OutputState }

func (OracleServiceCloudObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleServiceCloudObjectDataset)(nil)).Elem()
}

func (o OracleServiceCloudObjectDatasetOutput) ToOracleServiceCloudObjectDatasetOutput() OracleServiceCloudObjectDatasetOutput {
	return o
}

func (o OracleServiceCloudObjectDatasetOutput) ToOracleServiceCloudObjectDatasetOutputWithContext(ctx context.Context) OracleServiceCloudObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o OracleServiceCloudObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o OracleServiceCloudObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o OracleServiceCloudObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o OracleServiceCloudObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o OracleServiceCloudObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o OracleServiceCloudObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o OracleServiceCloudObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o OracleServiceCloudObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o OracleServiceCloudObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Oracle Service Cloud dataset.
type OracleServiceCloudObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// OracleServiceCloudObjectDatasetResponseInput is an input type that accepts OracleServiceCloudObjectDatasetResponseArgs and OracleServiceCloudObjectDatasetResponseOutput values.
// You can construct a concrete instance of `OracleServiceCloudObjectDatasetResponseInput` via:
//
//          OracleServiceCloudObjectDatasetResponseArgs{...}
type OracleServiceCloudObjectDatasetResponseInput interface {
	pulumi.Input

	ToOracleServiceCloudObjectDatasetResponseOutput() OracleServiceCloudObjectDatasetResponseOutput
	ToOracleServiceCloudObjectDatasetResponseOutputWithContext(context.Context) OracleServiceCloudObjectDatasetResponseOutput
}

// Oracle Service Cloud dataset.
type OracleServiceCloudObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OracleServiceCloudObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleServiceCloudObjectDatasetResponse)(nil)).Elem()
}

func (i OracleServiceCloudObjectDatasetResponseArgs) ToOracleServiceCloudObjectDatasetResponseOutput() OracleServiceCloudObjectDatasetResponseOutput {
	return i.ToOracleServiceCloudObjectDatasetResponseOutputWithContext(context.Background())
}

func (i OracleServiceCloudObjectDatasetResponseArgs) ToOracleServiceCloudObjectDatasetResponseOutputWithContext(ctx context.Context) OracleServiceCloudObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleServiceCloudObjectDatasetResponseOutput)
}

// Oracle Service Cloud dataset.
type OracleServiceCloudObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (OracleServiceCloudObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleServiceCloudObjectDatasetResponse)(nil)).Elem()
}

func (o OracleServiceCloudObjectDatasetResponseOutput) ToOracleServiceCloudObjectDatasetResponseOutput() OracleServiceCloudObjectDatasetResponseOutput {
	return o
}

func (o OracleServiceCloudObjectDatasetResponseOutput) ToOracleServiceCloudObjectDatasetResponseOutputWithContext(ctx context.Context) OracleServiceCloudObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o OracleServiceCloudObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o OracleServiceCloudObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o OracleServiceCloudObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o OracleServiceCloudObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o OracleServiceCloudObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o OracleServiceCloudObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o OracleServiceCloudObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o OracleServiceCloudObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o OracleServiceCloudObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The on-premises Oracle database dataset.
type OracleTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// OracleTableDatasetInput is an input type that accepts OracleTableDatasetArgs and OracleTableDatasetOutput values.
// You can construct a concrete instance of `OracleTableDatasetInput` via:
//
//          OracleTableDatasetArgs{...}
type OracleTableDatasetInput interface {
	pulumi.Input

	ToOracleTableDatasetOutput() OracleTableDatasetOutput
	ToOracleTableDatasetOutputWithContext(context.Context) OracleTableDatasetOutput
}

// The on-premises Oracle database dataset.
type OracleTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OracleTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleTableDataset)(nil)).Elem()
}

func (i OracleTableDatasetArgs) ToOracleTableDatasetOutput() OracleTableDatasetOutput {
	return i.ToOracleTableDatasetOutputWithContext(context.Background())
}

func (i OracleTableDatasetArgs) ToOracleTableDatasetOutputWithContext(ctx context.Context) OracleTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleTableDatasetOutput)
}

// The on-premises Oracle database dataset.
type OracleTableDatasetOutput struct{ *pulumi.OutputState }

func (OracleTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleTableDataset)(nil)).Elem()
}

func (o OracleTableDatasetOutput) ToOracleTableDatasetOutput() OracleTableDatasetOutput {
	return o
}

func (o OracleTableDatasetOutput) ToOracleTableDatasetOutputWithContext(ctx context.Context) OracleTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o OracleTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OracleTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o OracleTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o OracleTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v OracleTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o OracleTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v OracleTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o OracleTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v OracleTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o OracleTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o OracleTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
func (o OracleTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o OracleTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o OracleTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The on-premises Oracle database dataset.
type OracleTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// OracleTableDatasetResponseInput is an input type that accepts OracleTableDatasetResponseArgs and OracleTableDatasetResponseOutput values.
// You can construct a concrete instance of `OracleTableDatasetResponseInput` via:
//
//          OracleTableDatasetResponseArgs{...}
type OracleTableDatasetResponseInput interface {
	pulumi.Input

	ToOracleTableDatasetResponseOutput() OracleTableDatasetResponseOutput
	ToOracleTableDatasetResponseOutputWithContext(context.Context) OracleTableDatasetResponseOutput
}

// The on-premises Oracle database dataset.
type OracleTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OracleTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleTableDatasetResponse)(nil)).Elem()
}

func (i OracleTableDatasetResponseArgs) ToOracleTableDatasetResponseOutput() OracleTableDatasetResponseOutput {
	return i.ToOracleTableDatasetResponseOutputWithContext(context.Background())
}

func (i OracleTableDatasetResponseArgs) ToOracleTableDatasetResponseOutputWithContext(ctx context.Context) OracleTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleTableDatasetResponseOutput)
}

// The on-premises Oracle database dataset.
type OracleTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (OracleTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleTableDatasetResponse)(nil)).Elem()
}

func (o OracleTableDatasetResponseOutput) ToOracleTableDatasetResponseOutput() OracleTableDatasetResponseOutput {
	return o
}

func (o OracleTableDatasetResponseOutput) ToOracleTableDatasetResponseOutputWithContext(ctx context.Context) OracleTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o OracleTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o OracleTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o OracleTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o OracleTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o OracleTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o OracleTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o OracleTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
func (o OracleTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o OracleTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o OracleTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// ORC dataset.
type OrcDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the ORC data storage.
	Location            interface{} `pulumi:"location"`
	OrcCompressionCodec *string     `pulumi:"orcCompressionCodec"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// OrcDatasetInput is an input type that accepts OrcDatasetArgs and OrcDatasetOutput values.
// You can construct a concrete instance of `OrcDatasetInput` via:
//
//          OrcDatasetArgs{...}
type OrcDatasetInput interface {
	pulumi.Input

	ToOrcDatasetOutput() OrcDatasetOutput
	ToOrcDatasetOutputWithContext(context.Context) OrcDatasetOutput
}

// ORC dataset.
type OrcDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The location of the ORC data storage.
	Location            pulumi.Input          `pulumi:"location"`
	OrcCompressionCodec pulumi.StringPtrInput `pulumi:"orcCompressionCodec"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OrcDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcDataset)(nil)).Elem()
}

func (i OrcDatasetArgs) ToOrcDatasetOutput() OrcDatasetOutput {
	return i.ToOrcDatasetOutputWithContext(context.Background())
}

func (i OrcDatasetArgs) ToOrcDatasetOutputWithContext(ctx context.Context) OrcDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrcDatasetOutput)
}

// ORC dataset.
type OrcDatasetOutput struct{ *pulumi.OutputState }

func (OrcDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcDataset)(nil)).Elem()
}

func (o OrcDatasetOutput) ToOrcDatasetOutput() OrcDatasetOutput {
	return o
}

func (o OrcDatasetOutput) ToOrcDatasetOutputWithContext(ctx context.Context) OrcDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o OrcDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OrcDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o OrcDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrcDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o OrcDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v OrcDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o OrcDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v OrcDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The location of the ORC data storage.
func (o OrcDatasetOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcDataset) interface{} { return v.Location }).(pulumi.AnyOutput)
}

func (o OrcDatasetOutput) OrcCompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrcDataset) *string { return v.OrcCompressionCodec }).(pulumi.StringPtrOutput)
}

// Parameters for dataset.
func (o OrcDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v OrcDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o OrcDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o OrcDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o OrcDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OrcDataset) string { return v.Type }).(pulumi.StringOutput)
}

// ORC dataset.
type OrcDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the ORC data storage.
	Location            interface{} `pulumi:"location"`
	OrcCompressionCodec *string     `pulumi:"orcCompressionCodec"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// OrcDatasetResponseInput is an input type that accepts OrcDatasetResponseArgs and OrcDatasetResponseOutput values.
// You can construct a concrete instance of `OrcDatasetResponseInput` via:
//
//          OrcDatasetResponseArgs{...}
type OrcDatasetResponseInput interface {
	pulumi.Input

	ToOrcDatasetResponseOutput() OrcDatasetResponseOutput
	ToOrcDatasetResponseOutputWithContext(context.Context) OrcDatasetResponseOutput
}

// ORC dataset.
type OrcDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// The location of the ORC data storage.
	Location            pulumi.Input          `pulumi:"location"`
	OrcCompressionCodec pulumi.StringPtrInput `pulumi:"orcCompressionCodec"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OrcDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcDatasetResponse)(nil)).Elem()
}

func (i OrcDatasetResponseArgs) ToOrcDatasetResponseOutput() OrcDatasetResponseOutput {
	return i.ToOrcDatasetResponseOutputWithContext(context.Background())
}

func (i OrcDatasetResponseArgs) ToOrcDatasetResponseOutputWithContext(ctx context.Context) OrcDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrcDatasetResponseOutput)
}

// ORC dataset.
type OrcDatasetResponseOutput struct{ *pulumi.OutputState }

func (OrcDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcDatasetResponse)(nil)).Elem()
}

func (o OrcDatasetResponseOutput) ToOrcDatasetResponseOutput() OrcDatasetResponseOutput {
	return o
}

func (o OrcDatasetResponseOutput) ToOrcDatasetResponseOutputWithContext(ctx context.Context) OrcDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o OrcDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OrcDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o OrcDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrcDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o OrcDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v OrcDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o OrcDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v OrcDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The location of the ORC data storage.
func (o OrcDatasetResponseOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcDatasetResponse) interface{} { return v.Location }).(pulumi.AnyOutput)
}

func (o OrcDatasetResponseOutput) OrcCompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrcDatasetResponse) *string { return v.OrcCompressionCodec }).(pulumi.StringPtrOutput)
}

// Parameters for dataset.
func (o OrcDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v OrcDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o OrcDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o OrcDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o OrcDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OrcDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The data stored in Optimized Row Columnar (ORC) format.
type OrcFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// OrcFormatInput is an input type that accepts OrcFormatArgs and OrcFormatOutput values.
// You can construct a concrete instance of `OrcFormatInput` via:
//
//          OrcFormatArgs{...}
type OrcFormatInput interface {
	pulumi.Input

	ToOrcFormatOutput() OrcFormatOutput
	ToOrcFormatOutputWithContext(context.Context) OrcFormatOutput
}

// The data stored in Optimized Row Columnar (ORC) format.
type OrcFormatArgs struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.Input `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.Input `pulumi:"serializer"`
	// Type of dataset storage format.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OrcFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcFormat)(nil)).Elem()
}

func (i OrcFormatArgs) ToOrcFormatOutput() OrcFormatOutput {
	return i.ToOrcFormatOutputWithContext(context.Background())
}

func (i OrcFormatArgs) ToOrcFormatOutputWithContext(ctx context.Context) OrcFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrcFormatOutput)
}

// The data stored in Optimized Row Columnar (ORC) format.
type OrcFormatOutput struct{ *pulumi.OutputState }

func (OrcFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcFormat)(nil)).Elem()
}

func (o OrcFormatOutput) ToOrcFormatOutput() OrcFormatOutput {
	return o
}

func (o OrcFormatOutput) ToOrcFormatOutputWithContext(ctx context.Context) OrcFormatOutput {
	return o
}

// Deserializer. Type: string (or Expression with resultType string).
func (o OrcFormatOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcFormat) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o OrcFormatOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcFormat) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
func (o OrcFormatOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OrcFormat) string { return v.Type }).(pulumi.StringOutput)
}

// The data stored in Optimized Row Columnar (ORC) format.
type OrcFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// OrcFormatResponseInput is an input type that accepts OrcFormatResponseArgs and OrcFormatResponseOutput values.
// You can construct a concrete instance of `OrcFormatResponseInput` via:
//
//          OrcFormatResponseArgs{...}
type OrcFormatResponseInput interface {
	pulumi.Input

	ToOrcFormatResponseOutput() OrcFormatResponseOutput
	ToOrcFormatResponseOutputWithContext(context.Context) OrcFormatResponseOutput
}

// The data stored in Optimized Row Columnar (ORC) format.
type OrcFormatResponseArgs struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.Input `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.Input `pulumi:"serializer"`
	// Type of dataset storage format.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OrcFormatResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcFormatResponse)(nil)).Elem()
}

func (i OrcFormatResponseArgs) ToOrcFormatResponseOutput() OrcFormatResponseOutput {
	return i.ToOrcFormatResponseOutputWithContext(context.Background())
}

func (i OrcFormatResponseArgs) ToOrcFormatResponseOutputWithContext(ctx context.Context) OrcFormatResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrcFormatResponseOutput)
}

// The data stored in Optimized Row Columnar (ORC) format.
type OrcFormatResponseOutput struct{ *pulumi.OutputState }

func (OrcFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcFormatResponse)(nil)).Elem()
}

func (o OrcFormatResponseOutput) ToOrcFormatResponseOutput() OrcFormatResponseOutput {
	return o
}

func (o OrcFormatResponseOutput) ToOrcFormatResponseOutputWithContext(ctx context.Context) OrcFormatResponseOutput {
	return o
}

// Deserializer. Type: string (or Expression with resultType string).
func (o OrcFormatResponseOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcFormatResponse) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o OrcFormatResponseOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcFormatResponse) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
func (o OrcFormatResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OrcFormatResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Package store for the SSIS integration runtime.
type PackageStore struct {
	// The name of the package store
	Name string `pulumi:"name"`
	// The package store linked service reference.
	PackageStoreLinkedService EntityReference `pulumi:"packageStoreLinkedService"`
}

// PackageStoreInput is an input type that accepts PackageStoreArgs and PackageStoreOutput values.
// You can construct a concrete instance of `PackageStoreInput` via:
//
//          PackageStoreArgs{...}
type PackageStoreInput interface {
	pulumi.Input

	ToPackageStoreOutput() PackageStoreOutput
	ToPackageStoreOutputWithContext(context.Context) PackageStoreOutput
}

// Package store for the SSIS integration runtime.
type PackageStoreArgs struct {
	// The name of the package store
	Name pulumi.StringInput `pulumi:"name"`
	// The package store linked service reference.
	PackageStoreLinkedService EntityReferenceInput `pulumi:"packageStoreLinkedService"`
}

func (PackageStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageStore)(nil)).Elem()
}

func (i PackageStoreArgs) ToPackageStoreOutput() PackageStoreOutput {
	return i.ToPackageStoreOutputWithContext(context.Background())
}

func (i PackageStoreArgs) ToPackageStoreOutputWithContext(ctx context.Context) PackageStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageStoreOutput)
}

// PackageStoreArrayInput is an input type that accepts PackageStoreArray and PackageStoreArrayOutput values.
// You can construct a concrete instance of `PackageStoreArrayInput` via:
//
//          PackageStoreArray{ PackageStoreArgs{...} }
type PackageStoreArrayInput interface {
	pulumi.Input

	ToPackageStoreArrayOutput() PackageStoreArrayOutput
	ToPackageStoreArrayOutputWithContext(context.Context) PackageStoreArrayOutput
}

type PackageStoreArray []PackageStoreInput

func (PackageStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageStore)(nil)).Elem()
}

func (i PackageStoreArray) ToPackageStoreArrayOutput() PackageStoreArrayOutput {
	return i.ToPackageStoreArrayOutputWithContext(context.Background())
}

func (i PackageStoreArray) ToPackageStoreArrayOutputWithContext(ctx context.Context) PackageStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageStoreArrayOutput)
}

// Package store for the SSIS integration runtime.
type PackageStoreOutput struct{ *pulumi.OutputState }

func (PackageStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageStore)(nil)).Elem()
}

func (o PackageStoreOutput) ToPackageStoreOutput() PackageStoreOutput {
	return o
}

func (o PackageStoreOutput) ToPackageStoreOutputWithContext(ctx context.Context) PackageStoreOutput {
	return o
}

// The name of the package store
func (o PackageStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PackageStore) string { return v.Name }).(pulumi.StringOutput)
}

// The package store linked service reference.
func (o PackageStoreOutput) PackageStoreLinkedService() EntityReferenceOutput {
	return o.ApplyT(func(v PackageStore) EntityReference { return v.PackageStoreLinkedService }).(EntityReferenceOutput)
}

type PackageStoreArrayOutput struct{ *pulumi.OutputState }

func (PackageStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageStore)(nil)).Elem()
}

func (o PackageStoreArrayOutput) ToPackageStoreArrayOutput() PackageStoreArrayOutput {
	return o
}

func (o PackageStoreArrayOutput) ToPackageStoreArrayOutputWithContext(ctx context.Context) PackageStoreArrayOutput {
	return o
}

func (o PackageStoreArrayOutput) Index(i pulumi.IntInput) PackageStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PackageStore {
		return vs[0].([]PackageStore)[vs[1].(int)]
	}).(PackageStoreOutput)
}

// Package store for the SSIS integration runtime.
type PackageStoreResponse struct {
	// The name of the package store
	Name string `pulumi:"name"`
	// The package store linked service reference.
	PackageStoreLinkedService EntityReferenceResponse `pulumi:"packageStoreLinkedService"`
}

// PackageStoreResponseInput is an input type that accepts PackageStoreResponseArgs and PackageStoreResponseOutput values.
// You can construct a concrete instance of `PackageStoreResponseInput` via:
//
//          PackageStoreResponseArgs{...}
type PackageStoreResponseInput interface {
	pulumi.Input

	ToPackageStoreResponseOutput() PackageStoreResponseOutput
	ToPackageStoreResponseOutputWithContext(context.Context) PackageStoreResponseOutput
}

// Package store for the SSIS integration runtime.
type PackageStoreResponseArgs struct {
	// The name of the package store
	Name pulumi.StringInput `pulumi:"name"`
	// The package store linked service reference.
	PackageStoreLinkedService EntityReferenceResponseInput `pulumi:"packageStoreLinkedService"`
}

func (PackageStoreResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageStoreResponse)(nil)).Elem()
}

func (i PackageStoreResponseArgs) ToPackageStoreResponseOutput() PackageStoreResponseOutput {
	return i.ToPackageStoreResponseOutputWithContext(context.Background())
}

func (i PackageStoreResponseArgs) ToPackageStoreResponseOutputWithContext(ctx context.Context) PackageStoreResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageStoreResponseOutput)
}

// PackageStoreResponseArrayInput is an input type that accepts PackageStoreResponseArray and PackageStoreResponseArrayOutput values.
// You can construct a concrete instance of `PackageStoreResponseArrayInput` via:
//
//          PackageStoreResponseArray{ PackageStoreResponseArgs{...} }
type PackageStoreResponseArrayInput interface {
	pulumi.Input

	ToPackageStoreResponseArrayOutput() PackageStoreResponseArrayOutput
	ToPackageStoreResponseArrayOutputWithContext(context.Context) PackageStoreResponseArrayOutput
}

type PackageStoreResponseArray []PackageStoreResponseInput

func (PackageStoreResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageStoreResponse)(nil)).Elem()
}

func (i PackageStoreResponseArray) ToPackageStoreResponseArrayOutput() PackageStoreResponseArrayOutput {
	return i.ToPackageStoreResponseArrayOutputWithContext(context.Background())
}

func (i PackageStoreResponseArray) ToPackageStoreResponseArrayOutputWithContext(ctx context.Context) PackageStoreResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageStoreResponseArrayOutput)
}

// Package store for the SSIS integration runtime.
type PackageStoreResponseOutput struct{ *pulumi.OutputState }

func (PackageStoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageStoreResponse)(nil)).Elem()
}

func (o PackageStoreResponseOutput) ToPackageStoreResponseOutput() PackageStoreResponseOutput {
	return o
}

func (o PackageStoreResponseOutput) ToPackageStoreResponseOutputWithContext(ctx context.Context) PackageStoreResponseOutput {
	return o
}

// The name of the package store
func (o PackageStoreResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PackageStoreResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The package store linked service reference.
func (o PackageStoreResponseOutput) PackageStoreLinkedService() EntityReferenceResponseOutput {
	return o.ApplyT(func(v PackageStoreResponse) EntityReferenceResponse { return v.PackageStoreLinkedService }).(EntityReferenceResponseOutput)
}

type PackageStoreResponseArrayOutput struct{ *pulumi.OutputState }

func (PackageStoreResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageStoreResponse)(nil)).Elem()
}

func (o PackageStoreResponseArrayOutput) ToPackageStoreResponseArrayOutput() PackageStoreResponseArrayOutput {
	return o
}

func (o PackageStoreResponseArrayOutput) ToPackageStoreResponseArrayOutputWithContext(ctx context.Context) PackageStoreResponseArrayOutput {
	return o
}

func (o PackageStoreResponseArrayOutput) Index(i pulumi.IntInput) PackageStoreResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PackageStoreResponse {
		return vs[0].([]PackageStoreResponse)[vs[1].(int)]
	}).(PackageStoreResponseOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecification struct {
	// Default value of parameter.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// Parameter type.
	Type string `pulumi:"type"`
}

// ParameterSpecificationInput is an input type that accepts ParameterSpecificationArgs and ParameterSpecificationOutput values.
// You can construct a concrete instance of `ParameterSpecificationInput` via:
//
//          ParameterSpecificationArgs{...}
type ParameterSpecificationInput interface {
	pulumi.Input

	ToParameterSpecificationOutput() ParameterSpecificationOutput
	ToParameterSpecificationOutputWithContext(context.Context) ParameterSpecificationOutput
}

// Definition of a single parameter for an entity.
type ParameterSpecificationArgs struct {
	// Default value of parameter.
	DefaultValue pulumi.Input `pulumi:"defaultValue"`
	// Parameter type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParameterSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecification)(nil)).Elem()
}

func (i ParameterSpecificationArgs) ToParameterSpecificationOutput() ParameterSpecificationOutput {
	return i.ToParameterSpecificationOutputWithContext(context.Background())
}

func (i ParameterSpecificationArgs) ToParameterSpecificationOutputWithContext(ctx context.Context) ParameterSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationOutput)
}

// ParameterSpecificationMapInput is an input type that accepts ParameterSpecificationMap and ParameterSpecificationMapOutput values.
// You can construct a concrete instance of `ParameterSpecificationMapInput` via:
//
//          ParameterSpecificationMap{ "key": ParameterSpecificationArgs{...} }
type ParameterSpecificationMapInput interface {
	pulumi.Input

	ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput
	ToParameterSpecificationMapOutputWithContext(context.Context) ParameterSpecificationMapOutput
}

type ParameterSpecificationMap map[string]ParameterSpecificationInput

func (ParameterSpecificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecification)(nil)).Elem()
}

func (i ParameterSpecificationMap) ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput {
	return i.ToParameterSpecificationMapOutputWithContext(context.Background())
}

func (i ParameterSpecificationMap) ToParameterSpecificationMapOutputWithContext(ctx context.Context) ParameterSpecificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationMapOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecificationOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecification)(nil)).Elem()
}

func (o ParameterSpecificationOutput) ToParameterSpecificationOutput() ParameterSpecificationOutput {
	return o
}

func (o ParameterSpecificationOutput) ToParameterSpecificationOutputWithContext(ctx context.Context) ParameterSpecificationOutput {
	return o
}

// Default value of parameter.
func (o ParameterSpecificationOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterSpecification) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// Parameter type.
func (o ParameterSpecificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterSpecification) string { return v.Type }).(pulumi.StringOutput)
}

type ParameterSpecificationMapOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecification)(nil)).Elem()
}

func (o ParameterSpecificationMapOutput) ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput {
	return o
}

func (o ParameterSpecificationMapOutput) ToParameterSpecificationMapOutputWithContext(ctx context.Context) ParameterSpecificationMapOutput {
	return o
}

func (o ParameterSpecificationMapOutput) MapIndex(k pulumi.StringInput) ParameterSpecificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterSpecification {
		return vs[0].(map[string]ParameterSpecification)[vs[1].(string)]
	}).(ParameterSpecificationOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecificationResponse struct {
	// Default value of parameter.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// Parameter type.
	Type string `pulumi:"type"`
}

// ParameterSpecificationResponseInput is an input type that accepts ParameterSpecificationResponseArgs and ParameterSpecificationResponseOutput values.
// You can construct a concrete instance of `ParameterSpecificationResponseInput` via:
//
//          ParameterSpecificationResponseArgs{...}
type ParameterSpecificationResponseInput interface {
	pulumi.Input

	ToParameterSpecificationResponseOutput() ParameterSpecificationResponseOutput
	ToParameterSpecificationResponseOutputWithContext(context.Context) ParameterSpecificationResponseOutput
}

// Definition of a single parameter for an entity.
type ParameterSpecificationResponseArgs struct {
	// Default value of parameter.
	DefaultValue pulumi.Input `pulumi:"defaultValue"`
	// Parameter type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParameterSpecificationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecificationResponse)(nil)).Elem()
}

func (i ParameterSpecificationResponseArgs) ToParameterSpecificationResponseOutput() ParameterSpecificationResponseOutput {
	return i.ToParameterSpecificationResponseOutputWithContext(context.Background())
}

func (i ParameterSpecificationResponseArgs) ToParameterSpecificationResponseOutputWithContext(ctx context.Context) ParameterSpecificationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationResponseOutput)
}

// ParameterSpecificationResponseMapInput is an input type that accepts ParameterSpecificationResponseMap and ParameterSpecificationResponseMapOutput values.
// You can construct a concrete instance of `ParameterSpecificationResponseMapInput` via:
//
//          ParameterSpecificationResponseMap{ "key": ParameterSpecificationResponseArgs{...} }
type ParameterSpecificationResponseMapInput interface {
	pulumi.Input

	ToParameterSpecificationResponseMapOutput() ParameterSpecificationResponseMapOutput
	ToParameterSpecificationResponseMapOutputWithContext(context.Context) ParameterSpecificationResponseMapOutput
}

type ParameterSpecificationResponseMap map[string]ParameterSpecificationResponseInput

func (ParameterSpecificationResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecificationResponse)(nil)).Elem()
}

func (i ParameterSpecificationResponseMap) ToParameterSpecificationResponseMapOutput() ParameterSpecificationResponseMapOutput {
	return i.ToParameterSpecificationResponseMapOutputWithContext(context.Background())
}

func (i ParameterSpecificationResponseMap) ToParameterSpecificationResponseMapOutputWithContext(ctx context.Context) ParameterSpecificationResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationResponseMapOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecificationResponseOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecificationResponse)(nil)).Elem()
}

func (o ParameterSpecificationResponseOutput) ToParameterSpecificationResponseOutput() ParameterSpecificationResponseOutput {
	return o
}

func (o ParameterSpecificationResponseOutput) ToParameterSpecificationResponseOutputWithContext(ctx context.Context) ParameterSpecificationResponseOutput {
	return o
}

// Default value of parameter.
func (o ParameterSpecificationResponseOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterSpecificationResponse) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// Parameter type.
func (o ParameterSpecificationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterSpecificationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ParameterSpecificationResponseMapOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecificationResponse)(nil)).Elem()
}

func (o ParameterSpecificationResponseMapOutput) ToParameterSpecificationResponseMapOutput() ParameterSpecificationResponseMapOutput {
	return o
}

func (o ParameterSpecificationResponseMapOutput) ToParameterSpecificationResponseMapOutputWithContext(ctx context.Context) ParameterSpecificationResponseMapOutput {
	return o
}

func (o ParameterSpecificationResponseMapOutput) MapIndex(k pulumi.StringInput) ParameterSpecificationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterSpecificationResponse {
		return vs[0].(map[string]ParameterSpecificationResponse)[vs[1].(string)]
	}).(ParameterSpecificationResponseOutput)
}

// Parquet dataset.
type ParquetDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations      []interface{} `pulumi:"annotations"`
	CompressionCodec *string       `pulumi:"compressionCodec"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the parquet storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ParquetDatasetInput is an input type that accepts ParquetDatasetArgs and ParquetDatasetOutput values.
// You can construct a concrete instance of `ParquetDatasetInput` via:
//
//          ParquetDatasetArgs{...}
type ParquetDatasetInput interface {
	pulumi.Input

	ToParquetDatasetOutput() ParquetDatasetOutput
	ToParquetDatasetOutputWithContext(context.Context) ParquetDatasetOutput
}

// Parquet dataset.
type ParquetDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations      pulumi.ArrayInput     `pulumi:"annotations"`
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The location of the parquet storage.
	Location pulumi.Input `pulumi:"location"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParquetDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetDataset)(nil)).Elem()
}

func (i ParquetDatasetArgs) ToParquetDatasetOutput() ParquetDatasetOutput {
	return i.ToParquetDatasetOutputWithContext(context.Background())
}

func (i ParquetDatasetArgs) ToParquetDatasetOutputWithContext(ctx context.Context) ParquetDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetDatasetOutput)
}

// Parquet dataset.
type ParquetDatasetOutput struct{ *pulumi.OutputState }

func (ParquetDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetDataset)(nil)).Elem()
}

func (o ParquetDatasetOutput) ToParquetDatasetOutput() ParquetDatasetOutput {
	return o
}

func (o ParquetDatasetOutput) ToParquetDatasetOutputWithContext(ctx context.Context) ParquetDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ParquetDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ParquetDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

func (o ParquetDatasetOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParquetDataset) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// Dataset description.
func (o ParquetDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParquetDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ParquetDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v ParquetDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o ParquetDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ParquetDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The location of the parquet storage.
func (o ParquetDatasetOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetDataset) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o ParquetDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ParquetDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ParquetDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ParquetDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o ParquetDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParquetDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Parquet dataset.
type ParquetDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations      []interface{} `pulumi:"annotations"`
	CompressionCodec *string       `pulumi:"compressionCodec"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the parquet storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ParquetDatasetResponseInput is an input type that accepts ParquetDatasetResponseArgs and ParquetDatasetResponseOutput values.
// You can construct a concrete instance of `ParquetDatasetResponseInput` via:
//
//          ParquetDatasetResponseArgs{...}
type ParquetDatasetResponseInput interface {
	pulumi.Input

	ToParquetDatasetResponseOutput() ParquetDatasetResponseOutput
	ToParquetDatasetResponseOutputWithContext(context.Context) ParquetDatasetResponseOutput
}

// Parquet dataset.
type ParquetDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations      pulumi.ArrayInput     `pulumi:"annotations"`
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// The location of the parquet storage.
	Location pulumi.Input `pulumi:"location"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParquetDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetDatasetResponse)(nil)).Elem()
}

func (i ParquetDatasetResponseArgs) ToParquetDatasetResponseOutput() ParquetDatasetResponseOutput {
	return i.ToParquetDatasetResponseOutputWithContext(context.Background())
}

func (i ParquetDatasetResponseArgs) ToParquetDatasetResponseOutputWithContext(ctx context.Context) ParquetDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetDatasetResponseOutput)
}

// Parquet dataset.
type ParquetDatasetResponseOutput struct{ *pulumi.OutputState }

func (ParquetDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetDatasetResponse)(nil)).Elem()
}

func (o ParquetDatasetResponseOutput) ToParquetDatasetResponseOutput() ParquetDatasetResponseOutput {
	return o
}

func (o ParquetDatasetResponseOutput) ToParquetDatasetResponseOutputWithContext(ctx context.Context) ParquetDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ParquetDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

func (o ParquetDatasetResponseOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// Dataset description.
func (o ParquetDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ParquetDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o ParquetDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The location of the parquet storage.
func (o ParquetDatasetResponseOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o ParquetDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ParquetDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ParquetDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o ParquetDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The data stored in Parquet format.
type ParquetFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// ParquetFormatInput is an input type that accepts ParquetFormatArgs and ParquetFormatOutput values.
// You can construct a concrete instance of `ParquetFormatInput` via:
//
//          ParquetFormatArgs{...}
type ParquetFormatInput interface {
	pulumi.Input

	ToParquetFormatOutput() ParquetFormatOutput
	ToParquetFormatOutputWithContext(context.Context) ParquetFormatOutput
}

// The data stored in Parquet format.
type ParquetFormatArgs struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.Input `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.Input `pulumi:"serializer"`
	// Type of dataset storage format.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParquetFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetFormat)(nil)).Elem()
}

func (i ParquetFormatArgs) ToParquetFormatOutput() ParquetFormatOutput {
	return i.ToParquetFormatOutputWithContext(context.Background())
}

func (i ParquetFormatArgs) ToParquetFormatOutputWithContext(ctx context.Context) ParquetFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetFormatOutput)
}

// The data stored in Parquet format.
type ParquetFormatOutput struct{ *pulumi.OutputState }

func (ParquetFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetFormat)(nil)).Elem()
}

func (o ParquetFormatOutput) ToParquetFormatOutput() ParquetFormatOutput {
	return o
}

func (o ParquetFormatOutput) ToParquetFormatOutputWithContext(ctx context.Context) ParquetFormatOutput {
	return o
}

// Deserializer. Type: string (or Expression with resultType string).
func (o ParquetFormatOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetFormat) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o ParquetFormatOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetFormat) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
func (o ParquetFormatOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParquetFormat) string { return v.Type }).(pulumi.StringOutput)
}

// The data stored in Parquet format.
type ParquetFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// ParquetFormatResponseInput is an input type that accepts ParquetFormatResponseArgs and ParquetFormatResponseOutput values.
// You can construct a concrete instance of `ParquetFormatResponseInput` via:
//
//          ParquetFormatResponseArgs{...}
type ParquetFormatResponseInput interface {
	pulumi.Input

	ToParquetFormatResponseOutput() ParquetFormatResponseOutput
	ToParquetFormatResponseOutputWithContext(context.Context) ParquetFormatResponseOutput
}

// The data stored in Parquet format.
type ParquetFormatResponseArgs struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.Input `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.Input `pulumi:"serializer"`
	// Type of dataset storage format.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParquetFormatResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetFormatResponse)(nil)).Elem()
}

func (i ParquetFormatResponseArgs) ToParquetFormatResponseOutput() ParquetFormatResponseOutput {
	return i.ToParquetFormatResponseOutputWithContext(context.Background())
}

func (i ParquetFormatResponseArgs) ToParquetFormatResponseOutputWithContext(ctx context.Context) ParquetFormatResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetFormatResponseOutput)
}

// The data stored in Parquet format.
type ParquetFormatResponseOutput struct{ *pulumi.OutputState }

func (ParquetFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetFormatResponse)(nil)).Elem()
}

func (o ParquetFormatResponseOutput) ToParquetFormatResponseOutput() ParquetFormatResponseOutput {
	return o
}

func (o ParquetFormatResponseOutput) ToParquetFormatResponseOutputWithContext(ctx context.Context) ParquetFormatResponseOutput {
	return o
}

// Deserializer. Type: string (or Expression with resultType string).
func (o ParquetFormatResponseOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetFormatResponse) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o ParquetFormatResponseOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetFormatResponse) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
func (o ParquetFormatResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParquetFormatResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Paypal Service linked service.
type PaypalLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your PayPal application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your PayPal application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// PaypalLinkedServiceInput is an input type that accepts PaypalLinkedServiceArgs and PaypalLinkedServiceOutput values.
// You can construct a concrete instance of `PaypalLinkedServiceInput` via:
//
//          PaypalLinkedServiceArgs{...}
type PaypalLinkedServiceInput interface {
	pulumi.Input

	ToPaypalLinkedServiceOutput() PaypalLinkedServiceOutput
	ToPaypalLinkedServiceOutputWithContext(context.Context) PaypalLinkedServiceOutput
}

// Paypal Service linked service.
type PaypalLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The client ID associated with your PayPal application.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret associated with your PayPal application.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (PaypalLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalLinkedService)(nil)).Elem()
}

func (i PaypalLinkedServiceArgs) ToPaypalLinkedServiceOutput() PaypalLinkedServiceOutput {
	return i.ToPaypalLinkedServiceOutputWithContext(context.Background())
}

func (i PaypalLinkedServiceArgs) ToPaypalLinkedServiceOutputWithContext(ctx context.Context) PaypalLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PaypalLinkedServiceOutput)
}

// Paypal Service linked service.
type PaypalLinkedServiceOutput struct{ *pulumi.OutputState }

func (PaypalLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalLinkedService)(nil)).Elem()
}

func (o PaypalLinkedServiceOutput) ToPaypalLinkedServiceOutput() PaypalLinkedServiceOutput {
	return o
}

func (o PaypalLinkedServiceOutput) ToPaypalLinkedServiceOutputWithContext(ctx context.Context) PaypalLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o PaypalLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PaypalLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with your PayPal application.
func (o PaypalLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with your PayPal application.
func (o PaypalLinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o PaypalLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v PaypalLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o PaypalLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PaypalLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o PaypalLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
func (o PaypalLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o PaypalLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v PaypalLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o PaypalLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PaypalLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o PaypalLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o PaypalLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o PaypalLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Paypal Service linked service.
type PaypalLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your PayPal application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your PayPal application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// PaypalLinkedServiceResponseInput is an input type that accepts PaypalLinkedServiceResponseArgs and PaypalLinkedServiceResponseOutput values.
// You can construct a concrete instance of `PaypalLinkedServiceResponseInput` via:
//
//          PaypalLinkedServiceResponseArgs{...}
type PaypalLinkedServiceResponseInput interface {
	pulumi.Input

	ToPaypalLinkedServiceResponseOutput() PaypalLinkedServiceResponseOutput
	ToPaypalLinkedServiceResponseOutputWithContext(context.Context) PaypalLinkedServiceResponseOutput
}

// Paypal Service linked service.
type PaypalLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The client ID associated with your PayPal application.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret associated with your PayPal application.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (PaypalLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalLinkedServiceResponse)(nil)).Elem()
}

func (i PaypalLinkedServiceResponseArgs) ToPaypalLinkedServiceResponseOutput() PaypalLinkedServiceResponseOutput {
	return i.ToPaypalLinkedServiceResponseOutputWithContext(context.Background())
}

func (i PaypalLinkedServiceResponseArgs) ToPaypalLinkedServiceResponseOutputWithContext(ctx context.Context) PaypalLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PaypalLinkedServiceResponseOutput)
}

// Paypal Service linked service.
type PaypalLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (PaypalLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalLinkedServiceResponse)(nil)).Elem()
}

func (o PaypalLinkedServiceResponseOutput) ToPaypalLinkedServiceResponseOutput() PaypalLinkedServiceResponseOutput {
	return o
}

func (o PaypalLinkedServiceResponseOutput) ToPaypalLinkedServiceResponseOutputWithContext(ctx context.Context) PaypalLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o PaypalLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with your PayPal application.
func (o PaypalLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with your PayPal application.
func (o PaypalLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o PaypalLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o PaypalLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o PaypalLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
func (o PaypalLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o PaypalLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o PaypalLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o PaypalLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o PaypalLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o PaypalLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Paypal Service dataset.
type PaypalObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// PaypalObjectDatasetInput is an input type that accepts PaypalObjectDatasetArgs and PaypalObjectDatasetOutput values.
// You can construct a concrete instance of `PaypalObjectDatasetInput` via:
//
//          PaypalObjectDatasetArgs{...}
type PaypalObjectDatasetInput interface {
	pulumi.Input

	ToPaypalObjectDatasetOutput() PaypalObjectDatasetOutput
	ToPaypalObjectDatasetOutputWithContext(context.Context) PaypalObjectDatasetOutput
}

// Paypal Service dataset.
type PaypalObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PaypalObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalObjectDataset)(nil)).Elem()
}

func (i PaypalObjectDatasetArgs) ToPaypalObjectDatasetOutput() PaypalObjectDatasetOutput {
	return i.ToPaypalObjectDatasetOutputWithContext(context.Background())
}

func (i PaypalObjectDatasetArgs) ToPaypalObjectDatasetOutputWithContext(ctx context.Context) PaypalObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PaypalObjectDatasetOutput)
}

// Paypal Service dataset.
type PaypalObjectDatasetOutput struct{ *pulumi.OutputState }

func (PaypalObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalObjectDataset)(nil)).Elem()
}

func (o PaypalObjectDatasetOutput) ToPaypalObjectDatasetOutput() PaypalObjectDatasetOutput {
	return o
}

func (o PaypalObjectDatasetOutput) ToPaypalObjectDatasetOutputWithContext(ctx context.Context) PaypalObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PaypalObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PaypalObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o PaypalObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PaypalObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o PaypalObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v PaypalObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o PaypalObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v PaypalObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o PaypalObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v PaypalObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o PaypalObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o PaypalObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o PaypalObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o PaypalObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PaypalObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Paypal Service dataset.
type PaypalObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// PaypalObjectDatasetResponseInput is an input type that accepts PaypalObjectDatasetResponseArgs and PaypalObjectDatasetResponseOutput values.
// You can construct a concrete instance of `PaypalObjectDatasetResponseInput` via:
//
//          PaypalObjectDatasetResponseArgs{...}
type PaypalObjectDatasetResponseInput interface {
	pulumi.Input

	ToPaypalObjectDatasetResponseOutput() PaypalObjectDatasetResponseOutput
	ToPaypalObjectDatasetResponseOutputWithContext(context.Context) PaypalObjectDatasetResponseOutput
}

// Paypal Service dataset.
type PaypalObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PaypalObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalObjectDatasetResponse)(nil)).Elem()
}

func (i PaypalObjectDatasetResponseArgs) ToPaypalObjectDatasetResponseOutput() PaypalObjectDatasetResponseOutput {
	return i.ToPaypalObjectDatasetResponseOutputWithContext(context.Background())
}

func (i PaypalObjectDatasetResponseArgs) ToPaypalObjectDatasetResponseOutputWithContext(ctx context.Context) PaypalObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PaypalObjectDatasetResponseOutput)
}

// Paypal Service dataset.
type PaypalObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (PaypalObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalObjectDatasetResponse)(nil)).Elem()
}

func (o PaypalObjectDatasetResponseOutput) ToPaypalObjectDatasetResponseOutput() PaypalObjectDatasetResponseOutput {
	return o
}

func (o PaypalObjectDatasetResponseOutput) ToPaypalObjectDatasetResponseOutputWithContext(ctx context.Context) PaypalObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PaypalObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o PaypalObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o PaypalObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o PaypalObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o PaypalObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o PaypalObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o PaypalObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o PaypalObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o PaypalObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Phoenix server linked service.
type PhoenixLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Phoenix server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Phoenix server.
	Username interface{} `pulumi:"username"`
}

// PhoenixLinkedServiceInput is an input type that accepts PhoenixLinkedServiceArgs and PhoenixLinkedServiceOutput values.
// You can construct a concrete instance of `PhoenixLinkedServiceInput` via:
//
//          PhoenixLinkedServiceArgs{...}
type PhoenixLinkedServiceInput interface {
	pulumi.Input

	ToPhoenixLinkedServiceOutput() PhoenixLinkedServiceOutput
	ToPhoenixLinkedServiceOutputWithContext(context.Context) PhoenixLinkedServiceOutput
}

// Phoenix server linked service.
type PhoenixLinkedServiceArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.Input `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Phoenix server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
	Host pulumi.Input `pulumi:"host"`
	// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
	HttpPath pulumi.Input `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
	Port pulumi.Input `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Phoenix server.
	Username pulumi.Input `pulumi:"username"`
}

func (PhoenixLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixLinkedService)(nil)).Elem()
}

func (i PhoenixLinkedServiceArgs) ToPhoenixLinkedServiceOutput() PhoenixLinkedServiceOutput {
	return i.ToPhoenixLinkedServiceOutputWithContext(context.Background())
}

func (i PhoenixLinkedServiceArgs) ToPhoenixLinkedServiceOutputWithContext(ctx context.Context) PhoenixLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhoenixLinkedServiceOutput)
}

// Phoenix server linked service.
type PhoenixLinkedServiceOutput struct{ *pulumi.OutputState }

func (PhoenixLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixLinkedService)(nil)).Elem()
}

func (o PhoenixLinkedServiceOutput) ToPhoenixLinkedServiceOutput() PhoenixLinkedServiceOutput {
	return o
}

func (o PhoenixLinkedServiceOutput) ToPhoenixLinkedServiceOutputWithContext(ctx context.Context) PhoenixLinkedServiceOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o PhoenixLinkedServiceOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o PhoenixLinkedServiceOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o PhoenixLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PhoenixLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication mechanism used to connect to the Phoenix server.
func (o PhoenixLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v PhoenixLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o PhoenixLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v PhoenixLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o PhoenixLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhoenixLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o PhoenixLinkedServiceOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o PhoenixLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
func (o PhoenixLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
func (o PhoenixLinkedServiceOutput) HttpPath() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.HttpPath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o PhoenixLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v PhoenixLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name.
func (o PhoenixLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
func (o PhoenixLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o PhoenixLinkedServiceOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o PhoenixLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PhoenixLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o PhoenixLinkedServiceOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name used to connect to the Phoenix server.
func (o PhoenixLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Phoenix server linked service.
type PhoenixLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Phoenix server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Phoenix server.
	Username interface{} `pulumi:"username"`
}

// PhoenixLinkedServiceResponseInput is an input type that accepts PhoenixLinkedServiceResponseArgs and PhoenixLinkedServiceResponseOutput values.
// You can construct a concrete instance of `PhoenixLinkedServiceResponseInput` via:
//
//          PhoenixLinkedServiceResponseArgs{...}
type PhoenixLinkedServiceResponseInput interface {
	pulumi.Input

	ToPhoenixLinkedServiceResponseOutput() PhoenixLinkedServiceResponseOutput
	ToPhoenixLinkedServiceResponseOutputWithContext(context.Context) PhoenixLinkedServiceResponseOutput
}

// Phoenix server linked service.
type PhoenixLinkedServiceResponseArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.Input `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Phoenix server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
	Host pulumi.Input `pulumi:"host"`
	// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
	HttpPath pulumi.Input `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
	Port pulumi.Input `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Phoenix server.
	Username pulumi.Input `pulumi:"username"`
}

func (PhoenixLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixLinkedServiceResponse)(nil)).Elem()
}

func (i PhoenixLinkedServiceResponseArgs) ToPhoenixLinkedServiceResponseOutput() PhoenixLinkedServiceResponseOutput {
	return i.ToPhoenixLinkedServiceResponseOutputWithContext(context.Background())
}

func (i PhoenixLinkedServiceResponseArgs) ToPhoenixLinkedServiceResponseOutputWithContext(ctx context.Context) PhoenixLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhoenixLinkedServiceResponseOutput)
}

// Phoenix server linked service.
type PhoenixLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (PhoenixLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixLinkedServiceResponse)(nil)).Elem()
}

func (o PhoenixLinkedServiceResponseOutput) ToPhoenixLinkedServiceResponseOutput() PhoenixLinkedServiceResponseOutput {
	return o
}

func (o PhoenixLinkedServiceResponseOutput) ToPhoenixLinkedServiceResponseOutputWithContext(ctx context.Context) PhoenixLinkedServiceResponseOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o PhoenixLinkedServiceResponseOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o PhoenixLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o PhoenixLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication mechanism used to connect to the Phoenix server.
func (o PhoenixLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o PhoenixLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o PhoenixLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o PhoenixLinkedServiceResponseOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o PhoenixLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
func (o PhoenixLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
func (o PhoenixLinkedServiceResponseOutput) HttpPath() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.HttpPath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o PhoenixLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name.
func (o PhoenixLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
func (o PhoenixLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o PhoenixLinkedServiceResponseOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o PhoenixLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o PhoenixLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name used to connect to the Phoenix server.
func (o PhoenixLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Phoenix server dataset.
type PhoenixObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Phoenix. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// PhoenixObjectDatasetInput is an input type that accepts PhoenixObjectDatasetArgs and PhoenixObjectDatasetOutput values.
// You can construct a concrete instance of `PhoenixObjectDatasetInput` via:
//
//          PhoenixObjectDatasetArgs{...}
type PhoenixObjectDatasetInput interface {
	pulumi.Input

	ToPhoenixObjectDatasetOutput() PhoenixObjectDatasetOutput
	ToPhoenixObjectDatasetOutputWithContext(context.Context) PhoenixObjectDatasetOutput
}

// Phoenix server dataset.
type PhoenixObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Phoenix. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PhoenixObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixObjectDataset)(nil)).Elem()
}

func (i PhoenixObjectDatasetArgs) ToPhoenixObjectDatasetOutput() PhoenixObjectDatasetOutput {
	return i.ToPhoenixObjectDatasetOutputWithContext(context.Background())
}

func (i PhoenixObjectDatasetArgs) ToPhoenixObjectDatasetOutputWithContext(ctx context.Context) PhoenixObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhoenixObjectDatasetOutput)
}

// Phoenix server dataset.
type PhoenixObjectDatasetOutput struct{ *pulumi.OutputState }

func (PhoenixObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixObjectDataset)(nil)).Elem()
}

func (o PhoenixObjectDatasetOutput) ToPhoenixObjectDatasetOutput() PhoenixObjectDatasetOutput {
	return o
}

func (o PhoenixObjectDatasetOutput) ToPhoenixObjectDatasetOutputWithContext(ctx context.Context) PhoenixObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PhoenixObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o PhoenixObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o PhoenixObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o PhoenixObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o PhoenixObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o PhoenixObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o PhoenixObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Phoenix. Type: string (or Expression with resultType string).
func (o PhoenixObjectDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o PhoenixObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o PhoenixObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Phoenix server dataset.
type PhoenixObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Phoenix. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// PhoenixObjectDatasetResponseInput is an input type that accepts PhoenixObjectDatasetResponseArgs and PhoenixObjectDatasetResponseOutput values.
// You can construct a concrete instance of `PhoenixObjectDatasetResponseInput` via:
//
//          PhoenixObjectDatasetResponseArgs{...}
type PhoenixObjectDatasetResponseInput interface {
	pulumi.Input

	ToPhoenixObjectDatasetResponseOutput() PhoenixObjectDatasetResponseOutput
	ToPhoenixObjectDatasetResponseOutputWithContext(context.Context) PhoenixObjectDatasetResponseOutput
}

// Phoenix server dataset.
type PhoenixObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Phoenix. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PhoenixObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixObjectDatasetResponse)(nil)).Elem()
}

func (i PhoenixObjectDatasetResponseArgs) ToPhoenixObjectDatasetResponseOutput() PhoenixObjectDatasetResponseOutput {
	return i.ToPhoenixObjectDatasetResponseOutputWithContext(context.Background())
}

func (i PhoenixObjectDatasetResponseArgs) ToPhoenixObjectDatasetResponseOutputWithContext(ctx context.Context) PhoenixObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhoenixObjectDatasetResponseOutput)
}

// Phoenix server dataset.
type PhoenixObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (PhoenixObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixObjectDatasetResponse)(nil)).Elem()
}

func (o PhoenixObjectDatasetResponseOutput) ToPhoenixObjectDatasetResponseOutput() PhoenixObjectDatasetResponseOutput {
	return o
}

func (o PhoenixObjectDatasetResponseOutput) ToPhoenixObjectDatasetResponseOutputWithContext(ctx context.Context) PhoenixObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PhoenixObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o PhoenixObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o PhoenixObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o PhoenixObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o PhoenixObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o PhoenixObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o PhoenixObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Phoenix. Type: string (or Expression with resultType string).
func (o PhoenixObjectDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o PhoenixObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o PhoenixObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineFolder struct {
	// The name of the folder that this Pipeline is in.
	Name *string `pulumi:"name"`
}

// PipelineFolderInput is an input type that accepts PipelineFolderArgs and PipelineFolderOutput values.
// You can construct a concrete instance of `PipelineFolderInput` via:
//
//          PipelineFolderArgs{...}
type PipelineFolderInput interface {
	pulumi.Input

	ToPipelineFolderOutput() PipelineFolderOutput
	ToPipelineFolderOutputWithContext(context.Context) PipelineFolderOutput
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineFolderArgs struct {
	// The name of the folder that this Pipeline is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PipelineFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineFolder)(nil)).Elem()
}

func (i PipelineFolderArgs) ToPipelineFolderOutput() PipelineFolderOutput {
	return i.ToPipelineFolderOutputWithContext(context.Background())
}

func (i PipelineFolderArgs) ToPipelineFolderOutputWithContext(ctx context.Context) PipelineFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFolderOutput)
}

func (i PipelineFolderArgs) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return i.ToPipelineFolderPtrOutputWithContext(context.Background())
}

func (i PipelineFolderArgs) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFolderOutput).ToPipelineFolderPtrOutputWithContext(ctx)
}

// PipelineFolderPtrInput is an input type that accepts PipelineFolderArgs, PipelineFolderPtr and PipelineFolderPtrOutput values.
// You can construct a concrete instance of `PipelineFolderPtrInput` via:
//
//          PipelineFolderArgs{...}
//
//  or:
//
//          nil
type PipelineFolderPtrInput interface {
	pulumi.Input

	ToPipelineFolderPtrOutput() PipelineFolderPtrOutput
	ToPipelineFolderPtrOutputWithContext(context.Context) PipelineFolderPtrOutput
}

type pipelineFolderPtrType PipelineFolderArgs

func PipelineFolderPtr(v *PipelineFolderArgs) PipelineFolderPtrInput {
	return (*pipelineFolderPtrType)(v)
}

func (*pipelineFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineFolder)(nil)).Elem()
}

func (i *pipelineFolderPtrType) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return i.ToPipelineFolderPtrOutputWithContext(context.Background())
}

func (i *pipelineFolderPtrType) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFolderPtrOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineFolderOutput struct{ *pulumi.OutputState }

func (PipelineFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineFolder)(nil)).Elem()
}

func (o PipelineFolderOutput) ToPipelineFolderOutput() PipelineFolderOutput {
	return o
}

func (o PipelineFolderOutput) ToPipelineFolderOutputWithContext(ctx context.Context) PipelineFolderOutput {
	return o
}

func (o PipelineFolderOutput) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return o.ToPipelineFolderPtrOutputWithContext(context.Background())
}

func (o PipelineFolderOutput) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return o.ApplyT(func(v PipelineFolder) *PipelineFolder {
		return &v
	}).(PipelineFolderPtrOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelineFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PipelineFolderPtrOutput struct{ *pulumi.OutputState }

func (PipelineFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineFolder)(nil)).Elem()
}

func (o PipelineFolderPtrOutput) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return o
}

func (o PipelineFolderPtrOutput) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return o
}

func (o PipelineFolderPtrOutput) Elem() PipelineFolderOutput {
	return o.ApplyT(func(v *PipelineFolder) PipelineFolder { return *v }).(PipelineFolderOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelineFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Pipeline reference type.
type PipelineReference struct {
	// Reference name.
	Name *string `pulumi:"name"`
	// Reference pipeline name.
	ReferenceName string `pulumi:"referenceName"`
	// Pipeline reference type.
	Type string `pulumi:"type"`
}

// PipelineReferenceInput is an input type that accepts PipelineReferenceArgs and PipelineReferenceOutput values.
// You can construct a concrete instance of `PipelineReferenceInput` via:
//
//          PipelineReferenceArgs{...}
type PipelineReferenceInput interface {
	pulumi.Input

	ToPipelineReferenceOutput() PipelineReferenceOutput
	ToPipelineReferenceOutputWithContext(context.Context) PipelineReferenceOutput
}

// Pipeline reference type.
type PipelineReferenceArgs struct {
	// Reference name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Reference pipeline name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Pipeline reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PipelineReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineReference)(nil)).Elem()
}

func (i PipelineReferenceArgs) ToPipelineReferenceOutput() PipelineReferenceOutput {
	return i.ToPipelineReferenceOutputWithContext(context.Background())
}

func (i PipelineReferenceArgs) ToPipelineReferenceOutputWithContext(ctx context.Context) PipelineReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineReferenceOutput)
}

func (i PipelineReferenceArgs) ToPipelineReferencePtrOutput() PipelineReferencePtrOutput {
	return i.ToPipelineReferencePtrOutputWithContext(context.Background())
}

func (i PipelineReferenceArgs) ToPipelineReferencePtrOutputWithContext(ctx context.Context) PipelineReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineReferenceOutput).ToPipelineReferencePtrOutputWithContext(ctx)
}

// PipelineReferencePtrInput is an input type that accepts PipelineReferenceArgs, PipelineReferencePtr and PipelineReferencePtrOutput values.
// You can construct a concrete instance of `PipelineReferencePtrInput` via:
//
//          PipelineReferenceArgs{...}
//
//  or:
//
//          nil
type PipelineReferencePtrInput interface {
	pulumi.Input

	ToPipelineReferencePtrOutput() PipelineReferencePtrOutput
	ToPipelineReferencePtrOutputWithContext(context.Context) PipelineReferencePtrOutput
}

type pipelineReferencePtrType PipelineReferenceArgs

func PipelineReferencePtr(v *PipelineReferenceArgs) PipelineReferencePtrInput {
	return (*pipelineReferencePtrType)(v)
}

func (*pipelineReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineReference)(nil)).Elem()
}

func (i *pipelineReferencePtrType) ToPipelineReferencePtrOutput() PipelineReferencePtrOutput {
	return i.ToPipelineReferencePtrOutputWithContext(context.Background())
}

func (i *pipelineReferencePtrType) ToPipelineReferencePtrOutputWithContext(ctx context.Context) PipelineReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineReferencePtrOutput)
}

// PipelineReferenceArrayInput is an input type that accepts PipelineReferenceArray and PipelineReferenceArrayOutput values.
// You can construct a concrete instance of `PipelineReferenceArrayInput` via:
//
//          PipelineReferenceArray{ PipelineReferenceArgs{...} }
type PipelineReferenceArrayInput interface {
	pulumi.Input

	ToPipelineReferenceArrayOutput() PipelineReferenceArrayOutput
	ToPipelineReferenceArrayOutputWithContext(context.Context) PipelineReferenceArrayOutput
}

type PipelineReferenceArray []PipelineReferenceInput

func (PipelineReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineReference)(nil)).Elem()
}

func (i PipelineReferenceArray) ToPipelineReferenceArrayOutput() PipelineReferenceArrayOutput {
	return i.ToPipelineReferenceArrayOutputWithContext(context.Background())
}

func (i PipelineReferenceArray) ToPipelineReferenceArrayOutputWithContext(ctx context.Context) PipelineReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineReferenceArrayOutput)
}

// Pipeline reference type.
type PipelineReferenceOutput struct{ *pulumi.OutputState }

func (PipelineReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineReference)(nil)).Elem()
}

func (o PipelineReferenceOutput) ToPipelineReferenceOutput() PipelineReferenceOutput {
	return o
}

func (o PipelineReferenceOutput) ToPipelineReferenceOutputWithContext(ctx context.Context) PipelineReferenceOutput {
	return o
}

func (o PipelineReferenceOutput) ToPipelineReferencePtrOutput() PipelineReferencePtrOutput {
	return o.ToPipelineReferencePtrOutputWithContext(context.Background())
}

func (o PipelineReferenceOutput) ToPipelineReferencePtrOutputWithContext(ctx context.Context) PipelineReferencePtrOutput {
	return o.ApplyT(func(v PipelineReference) *PipelineReference {
		return &v
	}).(PipelineReferencePtrOutput)
}

// Reference name.
func (o PipelineReferenceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineReference) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Reference pipeline name.
func (o PipelineReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Pipeline reference type.
func (o PipelineReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineReference) string { return v.Type }).(pulumi.StringOutput)
}

type PipelineReferencePtrOutput struct{ *pulumi.OutputState }

func (PipelineReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineReference)(nil)).Elem()
}

func (o PipelineReferencePtrOutput) ToPipelineReferencePtrOutput() PipelineReferencePtrOutput {
	return o
}

func (o PipelineReferencePtrOutput) ToPipelineReferencePtrOutputWithContext(ctx context.Context) PipelineReferencePtrOutput {
	return o
}

func (o PipelineReferencePtrOutput) Elem() PipelineReferenceOutput {
	return o.ApplyT(func(v *PipelineReference) PipelineReference { return *v }).(PipelineReferenceOutput)
}

// Reference name.
func (o PipelineReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineReference) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Reference pipeline name.
func (o PipelineReferencePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Pipeline reference type.
func (o PipelineReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type PipelineReferenceArrayOutput struct{ *pulumi.OutputState }

func (PipelineReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineReference)(nil)).Elem()
}

func (o PipelineReferenceArrayOutput) ToPipelineReferenceArrayOutput() PipelineReferenceArrayOutput {
	return o
}

func (o PipelineReferenceArrayOutput) ToPipelineReferenceArrayOutputWithContext(ctx context.Context) PipelineReferenceArrayOutput {
	return o
}

func (o PipelineReferenceArrayOutput) Index(i pulumi.IntInput) PipelineReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineReference {
		return vs[0].([]PipelineReference)[vs[1].(int)]
	}).(PipelineReferenceOutput)
}

// Pipeline reference type.
type PipelineReferenceResponse struct {
	// Reference name.
	Name *string `pulumi:"name"`
	// Reference pipeline name.
	ReferenceName string `pulumi:"referenceName"`
	// Pipeline reference type.
	Type string `pulumi:"type"`
}

// PipelineReferenceResponseInput is an input type that accepts PipelineReferenceResponseArgs and PipelineReferenceResponseOutput values.
// You can construct a concrete instance of `PipelineReferenceResponseInput` via:
//
//          PipelineReferenceResponseArgs{...}
type PipelineReferenceResponseInput interface {
	pulumi.Input

	ToPipelineReferenceResponseOutput() PipelineReferenceResponseOutput
	ToPipelineReferenceResponseOutputWithContext(context.Context) PipelineReferenceResponseOutput
}

// Pipeline reference type.
type PipelineReferenceResponseArgs struct {
	// Reference name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Reference pipeline name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Pipeline reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PipelineReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineReferenceResponse)(nil)).Elem()
}

func (i PipelineReferenceResponseArgs) ToPipelineReferenceResponseOutput() PipelineReferenceResponseOutput {
	return i.ToPipelineReferenceResponseOutputWithContext(context.Background())
}

func (i PipelineReferenceResponseArgs) ToPipelineReferenceResponseOutputWithContext(ctx context.Context) PipelineReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineReferenceResponseOutput)
}

func (i PipelineReferenceResponseArgs) ToPipelineReferenceResponsePtrOutput() PipelineReferenceResponsePtrOutput {
	return i.ToPipelineReferenceResponsePtrOutputWithContext(context.Background())
}

func (i PipelineReferenceResponseArgs) ToPipelineReferenceResponsePtrOutputWithContext(ctx context.Context) PipelineReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineReferenceResponseOutput).ToPipelineReferenceResponsePtrOutputWithContext(ctx)
}

// PipelineReferenceResponsePtrInput is an input type that accepts PipelineReferenceResponseArgs, PipelineReferenceResponsePtr and PipelineReferenceResponsePtrOutput values.
// You can construct a concrete instance of `PipelineReferenceResponsePtrInput` via:
//
//          PipelineReferenceResponseArgs{...}
//
//  or:
//
//          nil
type PipelineReferenceResponsePtrInput interface {
	pulumi.Input

	ToPipelineReferenceResponsePtrOutput() PipelineReferenceResponsePtrOutput
	ToPipelineReferenceResponsePtrOutputWithContext(context.Context) PipelineReferenceResponsePtrOutput
}

type pipelineReferenceResponsePtrType PipelineReferenceResponseArgs

func PipelineReferenceResponsePtr(v *PipelineReferenceResponseArgs) PipelineReferenceResponsePtrInput {
	return (*pipelineReferenceResponsePtrType)(v)
}

func (*pipelineReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineReferenceResponse)(nil)).Elem()
}

func (i *pipelineReferenceResponsePtrType) ToPipelineReferenceResponsePtrOutput() PipelineReferenceResponsePtrOutput {
	return i.ToPipelineReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *pipelineReferenceResponsePtrType) ToPipelineReferenceResponsePtrOutputWithContext(ctx context.Context) PipelineReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineReferenceResponsePtrOutput)
}

// PipelineReferenceResponseArrayInput is an input type that accepts PipelineReferenceResponseArray and PipelineReferenceResponseArrayOutput values.
// You can construct a concrete instance of `PipelineReferenceResponseArrayInput` via:
//
//          PipelineReferenceResponseArray{ PipelineReferenceResponseArgs{...} }
type PipelineReferenceResponseArrayInput interface {
	pulumi.Input

	ToPipelineReferenceResponseArrayOutput() PipelineReferenceResponseArrayOutput
	ToPipelineReferenceResponseArrayOutputWithContext(context.Context) PipelineReferenceResponseArrayOutput
}

type PipelineReferenceResponseArray []PipelineReferenceResponseInput

func (PipelineReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineReferenceResponse)(nil)).Elem()
}

func (i PipelineReferenceResponseArray) ToPipelineReferenceResponseArrayOutput() PipelineReferenceResponseArrayOutput {
	return i.ToPipelineReferenceResponseArrayOutputWithContext(context.Background())
}

func (i PipelineReferenceResponseArray) ToPipelineReferenceResponseArrayOutputWithContext(ctx context.Context) PipelineReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineReferenceResponseArrayOutput)
}

// Pipeline reference type.
type PipelineReferenceResponseOutput struct{ *pulumi.OutputState }

func (PipelineReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineReferenceResponse)(nil)).Elem()
}

func (o PipelineReferenceResponseOutput) ToPipelineReferenceResponseOutput() PipelineReferenceResponseOutput {
	return o
}

func (o PipelineReferenceResponseOutput) ToPipelineReferenceResponseOutputWithContext(ctx context.Context) PipelineReferenceResponseOutput {
	return o
}

func (o PipelineReferenceResponseOutput) ToPipelineReferenceResponsePtrOutput() PipelineReferenceResponsePtrOutput {
	return o.ToPipelineReferenceResponsePtrOutputWithContext(context.Background())
}

func (o PipelineReferenceResponseOutput) ToPipelineReferenceResponsePtrOutputWithContext(ctx context.Context) PipelineReferenceResponsePtrOutput {
	return o.ApplyT(func(v PipelineReferenceResponse) *PipelineReferenceResponse {
		return &v
	}).(PipelineReferenceResponsePtrOutput)
}

// Reference name.
func (o PipelineReferenceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineReferenceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Reference pipeline name.
func (o PipelineReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Pipeline reference type.
func (o PipelineReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PipelineReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (PipelineReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineReferenceResponse)(nil)).Elem()
}

func (o PipelineReferenceResponsePtrOutput) ToPipelineReferenceResponsePtrOutput() PipelineReferenceResponsePtrOutput {
	return o
}

func (o PipelineReferenceResponsePtrOutput) ToPipelineReferenceResponsePtrOutputWithContext(ctx context.Context) PipelineReferenceResponsePtrOutput {
	return o
}

func (o PipelineReferenceResponsePtrOutput) Elem() PipelineReferenceResponseOutput {
	return o.ApplyT(func(v *PipelineReferenceResponse) PipelineReferenceResponse { return *v }).(PipelineReferenceResponseOutput)
}

// Reference name.
func (o PipelineReferenceResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Reference pipeline name.
func (o PipelineReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Pipeline reference type.
func (o PipelineReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type PipelineReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (PipelineReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineReferenceResponse)(nil)).Elem()
}

func (o PipelineReferenceResponseArrayOutput) ToPipelineReferenceResponseArrayOutput() PipelineReferenceResponseArrayOutput {
	return o
}

func (o PipelineReferenceResponseArrayOutput) ToPipelineReferenceResponseArrayOutputWithContext(ctx context.Context) PipelineReferenceResponseArrayOutput {
	return o
}

func (o PipelineReferenceResponseArrayOutput) Index(i pulumi.IntInput) PipelineReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineReferenceResponse {
		return vs[0].([]PipelineReferenceResponse)[vs[1].(int)]
	}).(PipelineReferenceResponseOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineResponseFolder struct {
	// The name of the folder that this Pipeline is in.
	Name *string `pulumi:"name"`
}

// PipelineResponseFolderInput is an input type that accepts PipelineResponseFolderArgs and PipelineResponseFolderOutput values.
// You can construct a concrete instance of `PipelineResponseFolderInput` via:
//
//          PipelineResponseFolderArgs{...}
type PipelineResponseFolderInput interface {
	pulumi.Input

	ToPipelineResponseFolderOutput() PipelineResponseFolderOutput
	ToPipelineResponseFolderOutputWithContext(context.Context) PipelineResponseFolderOutput
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineResponseFolderArgs struct {
	// The name of the folder that this Pipeline is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PipelineResponseFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineResponseFolder)(nil)).Elem()
}

func (i PipelineResponseFolderArgs) ToPipelineResponseFolderOutput() PipelineResponseFolderOutput {
	return i.ToPipelineResponseFolderOutputWithContext(context.Background())
}

func (i PipelineResponseFolderArgs) ToPipelineResponseFolderOutputWithContext(ctx context.Context) PipelineResponseFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineResponseFolderOutput)
}

func (i PipelineResponseFolderArgs) ToPipelineResponseFolderPtrOutput() PipelineResponseFolderPtrOutput {
	return i.ToPipelineResponseFolderPtrOutputWithContext(context.Background())
}

func (i PipelineResponseFolderArgs) ToPipelineResponseFolderPtrOutputWithContext(ctx context.Context) PipelineResponseFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineResponseFolderOutput).ToPipelineResponseFolderPtrOutputWithContext(ctx)
}

// PipelineResponseFolderPtrInput is an input type that accepts PipelineResponseFolderArgs, PipelineResponseFolderPtr and PipelineResponseFolderPtrOutput values.
// You can construct a concrete instance of `PipelineResponseFolderPtrInput` via:
//
//          PipelineResponseFolderArgs{...}
//
//  or:
//
//          nil
type PipelineResponseFolderPtrInput interface {
	pulumi.Input

	ToPipelineResponseFolderPtrOutput() PipelineResponseFolderPtrOutput
	ToPipelineResponseFolderPtrOutputWithContext(context.Context) PipelineResponseFolderPtrOutput
}

type pipelineResponseFolderPtrType PipelineResponseFolderArgs

func PipelineResponseFolderPtr(v *PipelineResponseFolderArgs) PipelineResponseFolderPtrInput {
	return (*pipelineResponseFolderPtrType)(v)
}

func (*pipelineResponseFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineResponseFolder)(nil)).Elem()
}

func (i *pipelineResponseFolderPtrType) ToPipelineResponseFolderPtrOutput() PipelineResponseFolderPtrOutput {
	return i.ToPipelineResponseFolderPtrOutputWithContext(context.Background())
}

func (i *pipelineResponseFolderPtrType) ToPipelineResponseFolderPtrOutputWithContext(ctx context.Context) PipelineResponseFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineResponseFolderPtrOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineResponseFolderOutput struct{ *pulumi.OutputState }

func (PipelineResponseFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineResponseFolder)(nil)).Elem()
}

func (o PipelineResponseFolderOutput) ToPipelineResponseFolderOutput() PipelineResponseFolderOutput {
	return o
}

func (o PipelineResponseFolderOutput) ToPipelineResponseFolderOutputWithContext(ctx context.Context) PipelineResponseFolderOutput {
	return o
}

func (o PipelineResponseFolderOutput) ToPipelineResponseFolderPtrOutput() PipelineResponseFolderPtrOutput {
	return o.ToPipelineResponseFolderPtrOutputWithContext(context.Background())
}

func (o PipelineResponseFolderOutput) ToPipelineResponseFolderPtrOutputWithContext(ctx context.Context) PipelineResponseFolderPtrOutput {
	return o.ApplyT(func(v PipelineResponseFolder) *PipelineResponseFolder {
		return &v
	}).(PipelineResponseFolderPtrOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelineResponseFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineResponseFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PipelineResponseFolderPtrOutput struct{ *pulumi.OutputState }

func (PipelineResponseFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineResponseFolder)(nil)).Elem()
}

func (o PipelineResponseFolderPtrOutput) ToPipelineResponseFolderPtrOutput() PipelineResponseFolderPtrOutput {
	return o
}

func (o PipelineResponseFolderPtrOutput) ToPipelineResponseFolderPtrOutputWithContext(ctx context.Context) PipelineResponseFolderPtrOutput {
	return o
}

func (o PipelineResponseFolderPtrOutput) Elem() PipelineResponseFolderOutput {
	return o.ApplyT(func(v *PipelineResponseFolder) PipelineResponseFolder { return *v }).(PipelineResponseFolderOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelineResponseFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineResponseFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Linked service for PostgreSQL data source.
type PostgreSqlLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// PostgreSqlLinkedServiceInput is an input type that accepts PostgreSqlLinkedServiceArgs and PostgreSqlLinkedServiceOutput values.
// You can construct a concrete instance of `PostgreSqlLinkedServiceInput` via:
//
//          PostgreSqlLinkedServiceArgs{...}
type PostgreSqlLinkedServiceInput interface {
	pulumi.Input

	ToPostgreSqlLinkedServiceOutput() PostgreSqlLinkedServiceOutput
	ToPostgreSqlLinkedServiceOutputWithContext(context.Context) PostgreSqlLinkedServiceOutput
}

// Linked service for PostgreSQL data source.
type PostgreSqlLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferencePtrInput `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PostgreSqlLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlLinkedService)(nil)).Elem()
}

func (i PostgreSqlLinkedServiceArgs) ToPostgreSqlLinkedServiceOutput() PostgreSqlLinkedServiceOutput {
	return i.ToPostgreSqlLinkedServiceOutputWithContext(context.Background())
}

func (i PostgreSqlLinkedServiceArgs) ToPostgreSqlLinkedServiceOutputWithContext(ctx context.Context) PostgreSqlLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlLinkedServiceOutput)
}

// Linked service for PostgreSQL data source.
type PostgreSqlLinkedServiceOutput struct{ *pulumi.OutputState }

func (PostgreSqlLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlLinkedService)(nil)).Elem()
}

func (o PostgreSqlLinkedServiceOutput) ToPostgreSqlLinkedServiceOutput() PostgreSqlLinkedServiceOutput {
	return o
}

func (o PostgreSqlLinkedServiceOutput) ToPostgreSqlLinkedServiceOutputWithContext(ctx context.Context) PostgreSqlLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o PostgreSqlLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PostgreSqlLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o PostgreSqlLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v PostgreSqlLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string.
func (o PostgreSqlLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o PostgreSqlLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o PostgreSqlLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o PostgreSqlLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v PostgreSqlLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o PostgreSqlLinkedServiceOutput) Password() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v PostgreSqlLinkedService) *AzureKeyVaultSecretReference { return v.Password }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
func (o PostgreSqlLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for PostgreSQL data source.
type PostgreSqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// PostgreSqlLinkedServiceResponseInput is an input type that accepts PostgreSqlLinkedServiceResponseArgs and PostgreSqlLinkedServiceResponseOutput values.
// You can construct a concrete instance of `PostgreSqlLinkedServiceResponseInput` via:
//
//          PostgreSqlLinkedServiceResponseArgs{...}
type PostgreSqlLinkedServiceResponseInput interface {
	pulumi.Input

	ToPostgreSqlLinkedServiceResponseOutput() PostgreSqlLinkedServiceResponseOutput
	ToPostgreSqlLinkedServiceResponseOutputWithContext(context.Context) PostgreSqlLinkedServiceResponseOutput
}

// Linked service for PostgreSQL data source.
type PostgreSqlLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The connection string.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PostgreSqlLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlLinkedServiceResponse)(nil)).Elem()
}

func (i PostgreSqlLinkedServiceResponseArgs) ToPostgreSqlLinkedServiceResponseOutput() PostgreSqlLinkedServiceResponseOutput {
	return i.ToPostgreSqlLinkedServiceResponseOutputWithContext(context.Background())
}

func (i PostgreSqlLinkedServiceResponseArgs) ToPostgreSqlLinkedServiceResponseOutputWithContext(ctx context.Context) PostgreSqlLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlLinkedServiceResponseOutput)
}

// Linked service for PostgreSQL data source.
type PostgreSqlLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (PostgreSqlLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlLinkedServiceResponse)(nil)).Elem()
}

func (o PostgreSqlLinkedServiceResponseOutput) ToPostgreSqlLinkedServiceResponseOutput() PostgreSqlLinkedServiceResponseOutput {
	return o
}

func (o PostgreSqlLinkedServiceResponseOutput) ToPostgreSqlLinkedServiceResponseOutputWithContext(ctx context.Context) PostgreSqlLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o PostgreSqlLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o PostgreSqlLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string.
func (o PostgreSqlLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o PostgreSqlLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o PostgreSqlLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o PostgreSqlLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o PostgreSqlLinkedServiceResponseOutput) Password() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Password }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
func (o PostgreSqlLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The PostgreSQL table dataset.
type PostgreSqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The PostgreSQL table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// PostgreSqlTableDatasetInput is an input type that accepts PostgreSqlTableDatasetArgs and PostgreSqlTableDatasetOutput values.
// You can construct a concrete instance of `PostgreSqlTableDatasetInput` via:
//
//          PostgreSqlTableDatasetArgs{...}
type PostgreSqlTableDatasetInput interface {
	pulumi.Input

	ToPostgreSqlTableDatasetOutput() PostgreSqlTableDatasetOutput
	ToPostgreSqlTableDatasetOutputWithContext(context.Context) PostgreSqlTableDatasetOutput
}

// The PostgreSQL table dataset.
type PostgreSqlTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The PostgreSQL table name. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PostgreSqlTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlTableDataset)(nil)).Elem()
}

func (i PostgreSqlTableDatasetArgs) ToPostgreSqlTableDatasetOutput() PostgreSqlTableDatasetOutput {
	return i.ToPostgreSqlTableDatasetOutputWithContext(context.Background())
}

func (i PostgreSqlTableDatasetArgs) ToPostgreSqlTableDatasetOutputWithContext(ctx context.Context) PostgreSqlTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlTableDatasetOutput)
}

// The PostgreSQL table dataset.
type PostgreSqlTableDatasetOutput struct{ *pulumi.OutputState }

func (PostgreSqlTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlTableDataset)(nil)).Elem()
}

func (o PostgreSqlTableDatasetOutput) ToPostgreSqlTableDatasetOutput() PostgreSqlTableDatasetOutput {
	return o
}

func (o PostgreSqlTableDatasetOutput) ToPostgreSqlTableDatasetOutputWithContext(ctx context.Context) PostgreSqlTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PostgreSqlTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o PostgreSqlTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o PostgreSqlTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o PostgreSqlTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o PostgreSqlTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o PostgreSqlTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o PostgreSqlTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The PostgreSQL table name. Type: string (or Expression with resultType string).
func (o PostgreSqlTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o PostgreSqlTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o PostgreSqlTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The PostgreSQL table dataset.
type PostgreSqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The PostgreSQL table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// PostgreSqlTableDatasetResponseInput is an input type that accepts PostgreSqlTableDatasetResponseArgs and PostgreSqlTableDatasetResponseOutput values.
// You can construct a concrete instance of `PostgreSqlTableDatasetResponseInput` via:
//
//          PostgreSqlTableDatasetResponseArgs{...}
type PostgreSqlTableDatasetResponseInput interface {
	pulumi.Input

	ToPostgreSqlTableDatasetResponseOutput() PostgreSqlTableDatasetResponseOutput
	ToPostgreSqlTableDatasetResponseOutputWithContext(context.Context) PostgreSqlTableDatasetResponseOutput
}

// The PostgreSQL table dataset.
type PostgreSqlTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The PostgreSQL table name. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PostgreSqlTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlTableDatasetResponse)(nil)).Elem()
}

func (i PostgreSqlTableDatasetResponseArgs) ToPostgreSqlTableDatasetResponseOutput() PostgreSqlTableDatasetResponseOutput {
	return i.ToPostgreSqlTableDatasetResponseOutputWithContext(context.Background())
}

func (i PostgreSqlTableDatasetResponseArgs) ToPostgreSqlTableDatasetResponseOutputWithContext(ctx context.Context) PostgreSqlTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlTableDatasetResponseOutput)
}

// The PostgreSQL table dataset.
type PostgreSqlTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (PostgreSqlTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlTableDatasetResponse)(nil)).Elem()
}

func (o PostgreSqlTableDatasetResponseOutput) ToPostgreSqlTableDatasetResponseOutput() PostgreSqlTableDatasetResponseOutput {
	return o
}

func (o PostgreSqlTableDatasetResponseOutput) ToPostgreSqlTableDatasetResponseOutputWithContext(ctx context.Context) PostgreSqlTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PostgreSqlTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o PostgreSqlTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o PostgreSqlTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o PostgreSqlTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o PostgreSqlTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o PostgreSqlTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o PostgreSqlTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The PostgreSQL table name. Type: string (or Expression with resultType string).
func (o PostgreSqlTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o PostgreSqlTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o PostgreSqlTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Presto server linked service.
type PrestoLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Presto server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The catalog context for all request against the server.
	Catalog interface{} `pulumi:"catalog"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Presto server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
	Port interface{} `pulumi:"port"`
	// The version of the Presto server. (i.e. 0.148-t)
	ServerVersion interface{} `pulumi:"serverVersion"`
	// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
	TimeZoneID interface{} `pulumi:"timeZoneID"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Presto server.
	Username interface{} `pulumi:"username"`
}

// PrestoLinkedServiceInput is an input type that accepts PrestoLinkedServiceArgs and PrestoLinkedServiceOutput values.
// You can construct a concrete instance of `PrestoLinkedServiceInput` via:
//
//          PrestoLinkedServiceArgs{...}
type PrestoLinkedServiceInput interface {
	pulumi.Input

	ToPrestoLinkedServiceOutput() PrestoLinkedServiceOutput
	ToPrestoLinkedServiceOutputWithContext(context.Context) PrestoLinkedServiceOutput
}

// Presto server linked service.
type PrestoLinkedServiceArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.Input `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Presto server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The catalog context for all request against the server.
	Catalog pulumi.Input `pulumi:"catalog"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The IP address or host name of the Presto server. (i.e. 192.168.222.160)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
	Port pulumi.Input `pulumi:"port"`
	// The version of the Presto server. (i.e. 0.148-t)
	ServerVersion pulumi.Input `pulumi:"serverVersion"`
	// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
	TimeZoneID pulumi.Input `pulumi:"timeZoneID"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Presto server.
	Username pulumi.Input `pulumi:"username"`
}

func (PrestoLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoLinkedService)(nil)).Elem()
}

func (i PrestoLinkedServiceArgs) ToPrestoLinkedServiceOutput() PrestoLinkedServiceOutput {
	return i.ToPrestoLinkedServiceOutputWithContext(context.Background())
}

func (i PrestoLinkedServiceArgs) ToPrestoLinkedServiceOutputWithContext(ctx context.Context) PrestoLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrestoLinkedServiceOutput)
}

// Presto server linked service.
type PrestoLinkedServiceOutput struct{ *pulumi.OutputState }

func (PrestoLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoLinkedService)(nil)).Elem()
}

func (o PrestoLinkedServiceOutput) ToPrestoLinkedServiceOutput() PrestoLinkedServiceOutput {
	return o
}

func (o PrestoLinkedServiceOutput) ToPrestoLinkedServiceOutputWithContext(ctx context.Context) PrestoLinkedServiceOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o PrestoLinkedServiceOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o PrestoLinkedServiceOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o PrestoLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PrestoLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication mechanism used to connect to the Presto server.
func (o PrestoLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v PrestoLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The catalog context for all request against the server.
func (o PrestoLinkedServiceOutput) Catalog() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.Catalog }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o PrestoLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v PrestoLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o PrestoLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrestoLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o PrestoLinkedServiceOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o PrestoLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The IP address or host name of the Presto server. (i.e. 192.168.222.160)
func (o PrestoLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o PrestoLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v PrestoLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name.
func (o PrestoLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
func (o PrestoLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The version of the Presto server. (i.e. 0.148-t)
func (o PrestoLinkedServiceOutput) ServerVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.ServerVersion }).(pulumi.AnyOutput)
}

// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
func (o PrestoLinkedServiceOutput) TimeZoneID() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.TimeZoneID }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o PrestoLinkedServiceOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o PrestoLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrestoLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o PrestoLinkedServiceOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name used to connect to the Presto server.
func (o PrestoLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Presto server linked service.
type PrestoLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Presto server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The catalog context for all request against the server.
	Catalog interface{} `pulumi:"catalog"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Presto server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
	Port interface{} `pulumi:"port"`
	// The version of the Presto server. (i.e. 0.148-t)
	ServerVersion interface{} `pulumi:"serverVersion"`
	// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
	TimeZoneID interface{} `pulumi:"timeZoneID"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Presto server.
	Username interface{} `pulumi:"username"`
}

// PrestoLinkedServiceResponseInput is an input type that accepts PrestoLinkedServiceResponseArgs and PrestoLinkedServiceResponseOutput values.
// You can construct a concrete instance of `PrestoLinkedServiceResponseInput` via:
//
//          PrestoLinkedServiceResponseArgs{...}
type PrestoLinkedServiceResponseInput interface {
	pulumi.Input

	ToPrestoLinkedServiceResponseOutput() PrestoLinkedServiceResponseOutput
	ToPrestoLinkedServiceResponseOutputWithContext(context.Context) PrestoLinkedServiceResponseOutput
}

// Presto server linked service.
type PrestoLinkedServiceResponseArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.Input `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Presto server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The catalog context for all request against the server.
	Catalog pulumi.Input `pulumi:"catalog"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The IP address or host name of the Presto server. (i.e. 192.168.222.160)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
	Port pulumi.Input `pulumi:"port"`
	// The version of the Presto server. (i.e. 0.148-t)
	ServerVersion pulumi.Input `pulumi:"serverVersion"`
	// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
	TimeZoneID pulumi.Input `pulumi:"timeZoneID"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Presto server.
	Username pulumi.Input `pulumi:"username"`
}

func (PrestoLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoLinkedServiceResponse)(nil)).Elem()
}

func (i PrestoLinkedServiceResponseArgs) ToPrestoLinkedServiceResponseOutput() PrestoLinkedServiceResponseOutput {
	return i.ToPrestoLinkedServiceResponseOutputWithContext(context.Background())
}

func (i PrestoLinkedServiceResponseArgs) ToPrestoLinkedServiceResponseOutputWithContext(ctx context.Context) PrestoLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrestoLinkedServiceResponseOutput)
}

// Presto server linked service.
type PrestoLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (PrestoLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoLinkedServiceResponse)(nil)).Elem()
}

func (o PrestoLinkedServiceResponseOutput) ToPrestoLinkedServiceResponseOutput() PrestoLinkedServiceResponseOutput {
	return o
}

func (o PrestoLinkedServiceResponseOutput) ToPrestoLinkedServiceResponseOutputWithContext(ctx context.Context) PrestoLinkedServiceResponseOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o PrestoLinkedServiceResponseOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o PrestoLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o PrestoLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication mechanism used to connect to the Presto server.
func (o PrestoLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The catalog context for all request against the server.
func (o PrestoLinkedServiceResponseOutput) Catalog() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.Catalog }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o PrestoLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o PrestoLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o PrestoLinkedServiceResponseOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o PrestoLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The IP address or host name of the Presto server. (i.e. 192.168.222.160)
func (o PrestoLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o PrestoLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name.
func (o PrestoLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
func (o PrestoLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The version of the Presto server. (i.e. 0.148-t)
func (o PrestoLinkedServiceResponseOutput) ServerVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.ServerVersion }).(pulumi.AnyOutput)
}

// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
func (o PrestoLinkedServiceResponseOutput) TimeZoneID() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.TimeZoneID }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o PrestoLinkedServiceResponseOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o PrestoLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o PrestoLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name used to connect to the Presto server.
func (o PrestoLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Presto server dataset.
type PrestoObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Presto. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// PrestoObjectDatasetInput is an input type that accepts PrestoObjectDatasetArgs and PrestoObjectDatasetOutput values.
// You can construct a concrete instance of `PrestoObjectDatasetInput` via:
//
//          PrestoObjectDatasetArgs{...}
type PrestoObjectDatasetInput interface {
	pulumi.Input

	ToPrestoObjectDatasetOutput() PrestoObjectDatasetOutput
	ToPrestoObjectDatasetOutputWithContext(context.Context) PrestoObjectDatasetOutput
}

// Presto server dataset.
type PrestoObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Presto. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PrestoObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoObjectDataset)(nil)).Elem()
}

func (i PrestoObjectDatasetArgs) ToPrestoObjectDatasetOutput() PrestoObjectDatasetOutput {
	return i.ToPrestoObjectDatasetOutputWithContext(context.Background())
}

func (i PrestoObjectDatasetArgs) ToPrestoObjectDatasetOutputWithContext(ctx context.Context) PrestoObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrestoObjectDatasetOutput)
}

// Presto server dataset.
type PrestoObjectDatasetOutput struct{ *pulumi.OutputState }

func (PrestoObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoObjectDataset)(nil)).Elem()
}

func (o PrestoObjectDatasetOutput) ToPrestoObjectDatasetOutput() PrestoObjectDatasetOutput {
	return o
}

func (o PrestoObjectDatasetOutput) ToPrestoObjectDatasetOutputWithContext(ctx context.Context) PrestoObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PrestoObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PrestoObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o PrestoObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrestoObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o PrestoObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v PrestoObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o PrestoObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v PrestoObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o PrestoObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v PrestoObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o PrestoObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o PrestoObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Presto. Type: string (or Expression with resultType string).
func (o PrestoObjectDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoObjectDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o PrestoObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o PrestoObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrestoObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Presto server dataset.
type PrestoObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Presto. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// PrestoObjectDatasetResponseInput is an input type that accepts PrestoObjectDatasetResponseArgs and PrestoObjectDatasetResponseOutput values.
// You can construct a concrete instance of `PrestoObjectDatasetResponseInput` via:
//
//          PrestoObjectDatasetResponseArgs{...}
type PrestoObjectDatasetResponseInput interface {
	pulumi.Input

	ToPrestoObjectDatasetResponseOutput() PrestoObjectDatasetResponseOutput
	ToPrestoObjectDatasetResponseOutputWithContext(context.Context) PrestoObjectDatasetResponseOutput
}

// Presto server dataset.
type PrestoObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Presto. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PrestoObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoObjectDatasetResponse)(nil)).Elem()
}

func (i PrestoObjectDatasetResponseArgs) ToPrestoObjectDatasetResponseOutput() PrestoObjectDatasetResponseOutput {
	return i.ToPrestoObjectDatasetResponseOutputWithContext(context.Background())
}

func (i PrestoObjectDatasetResponseArgs) ToPrestoObjectDatasetResponseOutputWithContext(ctx context.Context) PrestoObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrestoObjectDatasetResponseOutput)
}

// Presto server dataset.
type PrestoObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (PrestoObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoObjectDatasetResponse)(nil)).Elem()
}

func (o PrestoObjectDatasetResponseOutput) ToPrestoObjectDatasetResponseOutput() PrestoObjectDatasetResponseOutput {
	return o
}

func (o PrestoObjectDatasetResponseOutput) ToPrestoObjectDatasetResponseOutputWithContext(ctx context.Context) PrestoObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PrestoObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o PrestoObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o PrestoObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o PrestoObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o PrestoObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o PrestoObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o PrestoObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Presto. Type: string (or Expression with resultType string).
func (o PrestoObjectDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o PrestoObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o PrestoObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// QuickBooks server linked service.
type QuickBooksLinkedService struct {
	// The access token for OAuth 1.0 authentication.
	AccessToken interface{} `pulumi:"accessToken"`
	// The access token secret for OAuth 1.0 authentication.
	AccessTokenSecret interface{} `pulumi:"accessTokenSecret"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The company ID of the QuickBooks company to authorize.
	CompanyId interface{} `pulumi:"companyId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// The consumer key for OAuth 1.0 authentication.
	ConsumerKey interface{} `pulumi:"consumerKey"`
	// The consumer secret for OAuth 1.0 authentication.
	ConsumerSecret interface{} `pulumi:"consumerSecret"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
}

// QuickBooksLinkedServiceInput is an input type that accepts QuickBooksLinkedServiceArgs and QuickBooksLinkedServiceOutput values.
// You can construct a concrete instance of `QuickBooksLinkedServiceInput` via:
//
//          QuickBooksLinkedServiceArgs{...}
type QuickBooksLinkedServiceInput interface {
	pulumi.Input

	ToQuickBooksLinkedServiceOutput() QuickBooksLinkedServiceOutput
	ToQuickBooksLinkedServiceOutputWithContext(context.Context) QuickBooksLinkedServiceOutput
}

// QuickBooks server linked service.
type QuickBooksLinkedServiceArgs struct {
	// The access token for OAuth 1.0 authentication.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// The access token secret for OAuth 1.0 authentication.
	AccessTokenSecret pulumi.Input `pulumi:"accessTokenSecret"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The company ID of the QuickBooks company to authorize.
	CompanyId pulumi.Input `pulumi:"companyId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties pulumi.Input `pulumi:"connectionProperties"`
	// The consumer key for OAuth 1.0 authentication.
	ConsumerKey pulumi.Input `pulumi:"consumerKey"`
	// The consumer secret for OAuth 1.0 authentication.
	ConsumerSecret pulumi.Input `pulumi:"consumerSecret"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
}

func (QuickBooksLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksLinkedService)(nil)).Elem()
}

func (i QuickBooksLinkedServiceArgs) ToQuickBooksLinkedServiceOutput() QuickBooksLinkedServiceOutput {
	return i.ToQuickBooksLinkedServiceOutputWithContext(context.Background())
}

func (i QuickBooksLinkedServiceArgs) ToQuickBooksLinkedServiceOutputWithContext(ctx context.Context) QuickBooksLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickBooksLinkedServiceOutput)
}

// QuickBooks server linked service.
type QuickBooksLinkedServiceOutput struct{ *pulumi.OutputState }

func (QuickBooksLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksLinkedService)(nil)).Elem()
}

func (o QuickBooksLinkedServiceOutput) ToQuickBooksLinkedServiceOutput() QuickBooksLinkedServiceOutput {
	return o
}

func (o QuickBooksLinkedServiceOutput) ToQuickBooksLinkedServiceOutputWithContext(ctx context.Context) QuickBooksLinkedServiceOutput {
	return o
}

// The access token for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// The access token secret for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceOutput) AccessTokenSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) interface{} { return v.AccessTokenSecret }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o QuickBooksLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The company ID of the QuickBooks company to authorize.
func (o QuickBooksLinkedServiceOutput) CompanyId() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) interface{} { return v.CompanyId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o QuickBooksLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o QuickBooksLinkedServiceOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// The consumer key for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceOutput) ConsumerKey() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) interface{} { return v.ConsumerKey }).(pulumi.AnyOutput)
}

// The consumer secret for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceOutput) ConsumerSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) interface{} { return v.ConsumerSecret }).(pulumi.AnyOutput)
}

// Linked service description.
func (o QuickBooksLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o QuickBooksLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
func (o QuickBooksLinkedServiceOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o QuickBooksLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o QuickBooksLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o QuickBooksLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// QuickBooks server linked service.
type QuickBooksLinkedServiceResponse struct {
	// The access token for OAuth 1.0 authentication.
	AccessToken interface{} `pulumi:"accessToken"`
	// The access token secret for OAuth 1.0 authentication.
	AccessTokenSecret interface{} `pulumi:"accessTokenSecret"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The company ID of the QuickBooks company to authorize.
	CompanyId interface{} `pulumi:"companyId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// The consumer key for OAuth 1.0 authentication.
	ConsumerKey interface{} `pulumi:"consumerKey"`
	// The consumer secret for OAuth 1.0 authentication.
	ConsumerSecret interface{} `pulumi:"consumerSecret"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
}

// QuickBooksLinkedServiceResponseInput is an input type that accepts QuickBooksLinkedServiceResponseArgs and QuickBooksLinkedServiceResponseOutput values.
// You can construct a concrete instance of `QuickBooksLinkedServiceResponseInput` via:
//
//          QuickBooksLinkedServiceResponseArgs{...}
type QuickBooksLinkedServiceResponseInput interface {
	pulumi.Input

	ToQuickBooksLinkedServiceResponseOutput() QuickBooksLinkedServiceResponseOutput
	ToQuickBooksLinkedServiceResponseOutputWithContext(context.Context) QuickBooksLinkedServiceResponseOutput
}

// QuickBooks server linked service.
type QuickBooksLinkedServiceResponseArgs struct {
	// The access token for OAuth 1.0 authentication.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// The access token secret for OAuth 1.0 authentication.
	AccessTokenSecret pulumi.Input `pulumi:"accessTokenSecret"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The company ID of the QuickBooks company to authorize.
	CompanyId pulumi.Input `pulumi:"companyId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties pulumi.Input `pulumi:"connectionProperties"`
	// The consumer key for OAuth 1.0 authentication.
	ConsumerKey pulumi.Input `pulumi:"consumerKey"`
	// The consumer secret for OAuth 1.0 authentication.
	ConsumerSecret pulumi.Input `pulumi:"consumerSecret"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
}

func (QuickBooksLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksLinkedServiceResponse)(nil)).Elem()
}

func (i QuickBooksLinkedServiceResponseArgs) ToQuickBooksLinkedServiceResponseOutput() QuickBooksLinkedServiceResponseOutput {
	return i.ToQuickBooksLinkedServiceResponseOutputWithContext(context.Background())
}

func (i QuickBooksLinkedServiceResponseArgs) ToQuickBooksLinkedServiceResponseOutputWithContext(ctx context.Context) QuickBooksLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickBooksLinkedServiceResponseOutput)
}

// QuickBooks server linked service.
type QuickBooksLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (QuickBooksLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksLinkedServiceResponse)(nil)).Elem()
}

func (o QuickBooksLinkedServiceResponseOutput) ToQuickBooksLinkedServiceResponseOutput() QuickBooksLinkedServiceResponseOutput {
	return o
}

func (o QuickBooksLinkedServiceResponseOutput) ToQuickBooksLinkedServiceResponseOutputWithContext(ctx context.Context) QuickBooksLinkedServiceResponseOutput {
	return o
}

// The access token for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// The access token secret for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceResponseOutput) AccessTokenSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.AccessTokenSecret }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o QuickBooksLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The company ID of the QuickBooks company to authorize.
func (o QuickBooksLinkedServiceResponseOutput) CompanyId() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.CompanyId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o QuickBooksLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o QuickBooksLinkedServiceResponseOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// The consumer key for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceResponseOutput) ConsumerKey() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.ConsumerKey }).(pulumi.AnyOutput)
}

// The consumer secret for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceResponseOutput) ConsumerSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.ConsumerSecret }).(pulumi.AnyOutput)
}

// Linked service description.
func (o QuickBooksLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o QuickBooksLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
func (o QuickBooksLinkedServiceResponseOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o QuickBooksLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o QuickBooksLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o QuickBooksLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// QuickBooks server dataset.
type QuickBooksObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// QuickBooksObjectDatasetInput is an input type that accepts QuickBooksObjectDatasetArgs and QuickBooksObjectDatasetOutput values.
// You can construct a concrete instance of `QuickBooksObjectDatasetInput` via:
//
//          QuickBooksObjectDatasetArgs{...}
type QuickBooksObjectDatasetInput interface {
	pulumi.Input

	ToQuickBooksObjectDatasetOutput() QuickBooksObjectDatasetOutput
	ToQuickBooksObjectDatasetOutputWithContext(context.Context) QuickBooksObjectDatasetOutput
}

// QuickBooks server dataset.
type QuickBooksObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (QuickBooksObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksObjectDataset)(nil)).Elem()
}

func (i QuickBooksObjectDatasetArgs) ToQuickBooksObjectDatasetOutput() QuickBooksObjectDatasetOutput {
	return i.ToQuickBooksObjectDatasetOutputWithContext(context.Background())
}

func (i QuickBooksObjectDatasetArgs) ToQuickBooksObjectDatasetOutputWithContext(ctx context.Context) QuickBooksObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickBooksObjectDatasetOutput)
}

// QuickBooks server dataset.
type QuickBooksObjectDatasetOutput struct{ *pulumi.OutputState }

func (QuickBooksObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksObjectDataset)(nil)).Elem()
}

func (o QuickBooksObjectDatasetOutput) ToQuickBooksObjectDatasetOutput() QuickBooksObjectDatasetOutput {
	return o
}

func (o QuickBooksObjectDatasetOutput) ToQuickBooksObjectDatasetOutputWithContext(ctx context.Context) QuickBooksObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o QuickBooksObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v QuickBooksObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o QuickBooksObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuickBooksObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o QuickBooksObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v QuickBooksObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o QuickBooksObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v QuickBooksObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o QuickBooksObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v QuickBooksObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o QuickBooksObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o QuickBooksObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o QuickBooksObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o QuickBooksObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QuickBooksObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// QuickBooks server dataset.
type QuickBooksObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// QuickBooksObjectDatasetResponseInput is an input type that accepts QuickBooksObjectDatasetResponseArgs and QuickBooksObjectDatasetResponseOutput values.
// You can construct a concrete instance of `QuickBooksObjectDatasetResponseInput` via:
//
//          QuickBooksObjectDatasetResponseArgs{...}
type QuickBooksObjectDatasetResponseInput interface {
	pulumi.Input

	ToQuickBooksObjectDatasetResponseOutput() QuickBooksObjectDatasetResponseOutput
	ToQuickBooksObjectDatasetResponseOutputWithContext(context.Context) QuickBooksObjectDatasetResponseOutput
}

// QuickBooks server dataset.
type QuickBooksObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (QuickBooksObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksObjectDatasetResponse)(nil)).Elem()
}

func (i QuickBooksObjectDatasetResponseArgs) ToQuickBooksObjectDatasetResponseOutput() QuickBooksObjectDatasetResponseOutput {
	return i.ToQuickBooksObjectDatasetResponseOutputWithContext(context.Background())
}

func (i QuickBooksObjectDatasetResponseArgs) ToQuickBooksObjectDatasetResponseOutputWithContext(ctx context.Context) QuickBooksObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickBooksObjectDatasetResponseOutput)
}

// QuickBooks server dataset.
type QuickBooksObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (QuickBooksObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksObjectDatasetResponse)(nil)).Elem()
}

func (o QuickBooksObjectDatasetResponseOutput) ToQuickBooksObjectDatasetResponseOutput() QuickBooksObjectDatasetResponseOutput {
	return o
}

func (o QuickBooksObjectDatasetResponseOutput) ToQuickBooksObjectDatasetResponseOutputWithContext(ctx context.Context) QuickBooksObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o QuickBooksObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o QuickBooksObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o QuickBooksObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o QuickBooksObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o QuickBooksObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o QuickBooksObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o QuickBooksObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o QuickBooksObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o QuickBooksObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The relational table dataset.
type RelationalTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The relational table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// RelationalTableDatasetInput is an input type that accepts RelationalTableDatasetArgs and RelationalTableDatasetOutput values.
// You can construct a concrete instance of `RelationalTableDatasetInput` via:
//
//          RelationalTableDatasetArgs{...}
type RelationalTableDatasetInput interface {
	pulumi.Input

	ToRelationalTableDatasetOutput() RelationalTableDatasetOutput
	ToRelationalTableDatasetOutputWithContext(context.Context) RelationalTableDatasetOutput
}

// The relational table dataset.
type RelationalTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The relational table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RelationalTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationalTableDataset)(nil)).Elem()
}

func (i RelationalTableDatasetArgs) ToRelationalTableDatasetOutput() RelationalTableDatasetOutput {
	return i.ToRelationalTableDatasetOutputWithContext(context.Background())
}

func (i RelationalTableDatasetArgs) ToRelationalTableDatasetOutputWithContext(ctx context.Context) RelationalTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationalTableDatasetOutput)
}

// The relational table dataset.
type RelationalTableDatasetOutput struct{ *pulumi.OutputState }

func (RelationalTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationalTableDataset)(nil)).Elem()
}

func (o RelationalTableDatasetOutput) ToRelationalTableDatasetOutput() RelationalTableDatasetOutput {
	return o
}

func (o RelationalTableDatasetOutput) ToRelationalTableDatasetOutputWithContext(ctx context.Context) RelationalTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o RelationalTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v RelationalTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o RelationalTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelationalTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o RelationalTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v RelationalTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o RelationalTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v RelationalTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o RelationalTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v RelationalTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o RelationalTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o RelationalTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The relational table name. Type: string (or Expression with resultType string).
func (o RelationalTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o RelationalTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RelationalTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The relational table dataset.
type RelationalTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The relational table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// RelationalTableDatasetResponseInput is an input type that accepts RelationalTableDatasetResponseArgs and RelationalTableDatasetResponseOutput values.
// You can construct a concrete instance of `RelationalTableDatasetResponseInput` via:
//
//          RelationalTableDatasetResponseArgs{...}
type RelationalTableDatasetResponseInput interface {
	pulumi.Input

	ToRelationalTableDatasetResponseOutput() RelationalTableDatasetResponseOutput
	ToRelationalTableDatasetResponseOutputWithContext(context.Context) RelationalTableDatasetResponseOutput
}

// The relational table dataset.
type RelationalTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The relational table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RelationalTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationalTableDatasetResponse)(nil)).Elem()
}

func (i RelationalTableDatasetResponseArgs) ToRelationalTableDatasetResponseOutput() RelationalTableDatasetResponseOutput {
	return i.ToRelationalTableDatasetResponseOutputWithContext(context.Background())
}

func (i RelationalTableDatasetResponseArgs) ToRelationalTableDatasetResponseOutputWithContext(ctx context.Context) RelationalTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationalTableDatasetResponseOutput)
}

// The relational table dataset.
type RelationalTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (RelationalTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationalTableDatasetResponse)(nil)).Elem()
}

func (o RelationalTableDatasetResponseOutput) ToRelationalTableDatasetResponseOutput() RelationalTableDatasetResponseOutput {
	return o
}

func (o RelationalTableDatasetResponseOutput) ToRelationalTableDatasetResponseOutputWithContext(ctx context.Context) RelationalTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o RelationalTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o RelationalTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o RelationalTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o RelationalTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o RelationalTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o RelationalTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o RelationalTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The relational table name. Type: string (or Expression with resultType string).
func (o RelationalTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o RelationalTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested end time.
type RerunTumblingWindowTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The parent trigger reference.
	ParentTrigger interface{} `pulumi:"parentTrigger"`
	// The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedEndTime string `pulumi:"requestedEndTime"`
	// The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedStartTime string `pulumi:"requestedStartTime"`
	// The max number of parallel time windows (ready for execution) for which a rerun is triggered.
	RerunConcurrency int `pulumi:"rerunConcurrency"`
	// Trigger type.
	Type string `pulumi:"type"`
}

// RerunTumblingWindowTriggerInput is an input type that accepts RerunTumblingWindowTriggerArgs and RerunTumblingWindowTriggerOutput values.
// You can construct a concrete instance of `RerunTumblingWindowTriggerInput` via:
//
//          RerunTumblingWindowTriggerArgs{...}
type RerunTumblingWindowTriggerInput interface {
	pulumi.Input

	ToRerunTumblingWindowTriggerOutput() RerunTumblingWindowTriggerOutput
	ToRerunTumblingWindowTriggerOutputWithContext(context.Context) RerunTumblingWindowTriggerOutput
}

// Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested end time.
type RerunTumblingWindowTriggerArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The parent trigger reference.
	ParentTrigger pulumi.Input `pulumi:"parentTrigger"`
	// The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedEndTime pulumi.StringInput `pulumi:"requestedEndTime"`
	// The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedStartTime pulumi.StringInput `pulumi:"requestedStartTime"`
	// The max number of parallel time windows (ready for execution) for which a rerun is triggered.
	RerunConcurrency pulumi.IntInput `pulumi:"rerunConcurrency"`
	// Trigger type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RerunTumblingWindowTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RerunTumblingWindowTrigger)(nil)).Elem()
}

func (i RerunTumblingWindowTriggerArgs) ToRerunTumblingWindowTriggerOutput() RerunTumblingWindowTriggerOutput {
	return i.ToRerunTumblingWindowTriggerOutputWithContext(context.Background())
}

func (i RerunTumblingWindowTriggerArgs) ToRerunTumblingWindowTriggerOutputWithContext(ctx context.Context) RerunTumblingWindowTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RerunTumblingWindowTriggerOutput)
}

// Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested end time.
type RerunTumblingWindowTriggerOutput struct{ *pulumi.OutputState }

func (RerunTumblingWindowTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RerunTumblingWindowTrigger)(nil)).Elem()
}

func (o RerunTumblingWindowTriggerOutput) ToRerunTumblingWindowTriggerOutput() RerunTumblingWindowTriggerOutput {
	return o
}

func (o RerunTumblingWindowTriggerOutput) ToRerunTumblingWindowTriggerOutputWithContext(ctx context.Context) RerunTumblingWindowTriggerOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o RerunTumblingWindowTriggerOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v RerunTumblingWindowTrigger) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o RerunTumblingWindowTriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RerunTumblingWindowTrigger) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The parent trigger reference.
func (o RerunTumblingWindowTriggerOutput) ParentTrigger() pulumi.AnyOutput {
	return o.ApplyT(func(v RerunTumblingWindowTrigger) interface{} { return v.ParentTrigger }).(pulumi.AnyOutput)
}

// The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
func (o RerunTumblingWindowTriggerOutput) RequestedEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v RerunTumblingWindowTrigger) string { return v.RequestedEndTime }).(pulumi.StringOutput)
}

// The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
func (o RerunTumblingWindowTriggerOutput) RequestedStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v RerunTumblingWindowTrigger) string { return v.RequestedStartTime }).(pulumi.StringOutput)
}

// The max number of parallel time windows (ready for execution) for which a rerun is triggered.
func (o RerunTumblingWindowTriggerOutput) RerunConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v RerunTumblingWindowTrigger) int { return v.RerunConcurrency }).(pulumi.IntOutput)
}

// Trigger type.
func (o RerunTumblingWindowTriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RerunTumblingWindowTrigger) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested end time.
type RerunTumblingWindowTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The parent trigger reference.
	ParentTrigger interface{} `pulumi:"parentTrigger"`
	// The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedEndTime string `pulumi:"requestedEndTime"`
	// The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedStartTime string `pulumi:"requestedStartTime"`
	// The max number of parallel time windows (ready for execution) for which a rerun is triggered.
	RerunConcurrency int `pulumi:"rerunConcurrency"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	Type string `pulumi:"type"`
}

// RerunTumblingWindowTriggerResponseInput is an input type that accepts RerunTumblingWindowTriggerResponseArgs and RerunTumblingWindowTriggerResponseOutput values.
// You can construct a concrete instance of `RerunTumblingWindowTriggerResponseInput` via:
//
//          RerunTumblingWindowTriggerResponseArgs{...}
type RerunTumblingWindowTriggerResponseInput interface {
	pulumi.Input

	ToRerunTumblingWindowTriggerResponseOutput() RerunTumblingWindowTriggerResponseOutput
	ToRerunTumblingWindowTriggerResponseOutputWithContext(context.Context) RerunTumblingWindowTriggerResponseOutput
}

// Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested end time.
type RerunTumblingWindowTriggerResponseArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The parent trigger reference.
	ParentTrigger pulumi.Input `pulumi:"parentTrigger"`
	// The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedEndTime pulumi.StringInput `pulumi:"requestedEndTime"`
	// The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedStartTime pulumi.StringInput `pulumi:"requestedStartTime"`
	// The max number of parallel time windows (ready for execution) for which a rerun is triggered.
	RerunConcurrency pulumi.IntInput `pulumi:"rerunConcurrency"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState pulumi.StringInput `pulumi:"runtimeState"`
	// Trigger type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RerunTumblingWindowTriggerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RerunTumblingWindowTriggerResponse)(nil)).Elem()
}

func (i RerunTumblingWindowTriggerResponseArgs) ToRerunTumblingWindowTriggerResponseOutput() RerunTumblingWindowTriggerResponseOutput {
	return i.ToRerunTumblingWindowTriggerResponseOutputWithContext(context.Background())
}

func (i RerunTumblingWindowTriggerResponseArgs) ToRerunTumblingWindowTriggerResponseOutputWithContext(ctx context.Context) RerunTumblingWindowTriggerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RerunTumblingWindowTriggerResponseOutput)
}

// Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested end time.
type RerunTumblingWindowTriggerResponseOutput struct{ *pulumi.OutputState }

func (RerunTumblingWindowTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RerunTumblingWindowTriggerResponse)(nil)).Elem()
}

func (o RerunTumblingWindowTriggerResponseOutput) ToRerunTumblingWindowTriggerResponseOutput() RerunTumblingWindowTriggerResponseOutput {
	return o
}

func (o RerunTumblingWindowTriggerResponseOutput) ToRerunTumblingWindowTriggerResponseOutputWithContext(ctx context.Context) RerunTumblingWindowTriggerResponseOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o RerunTumblingWindowTriggerResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v RerunTumblingWindowTriggerResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o RerunTumblingWindowTriggerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RerunTumblingWindowTriggerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The parent trigger reference.
func (o RerunTumblingWindowTriggerResponseOutput) ParentTrigger() pulumi.AnyOutput {
	return o.ApplyT(func(v RerunTumblingWindowTriggerResponse) interface{} { return v.ParentTrigger }).(pulumi.AnyOutput)
}

// The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
func (o RerunTumblingWindowTriggerResponseOutput) RequestedEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v RerunTumblingWindowTriggerResponse) string { return v.RequestedEndTime }).(pulumi.StringOutput)
}

// The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
func (o RerunTumblingWindowTriggerResponseOutput) RequestedStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v RerunTumblingWindowTriggerResponse) string { return v.RequestedStartTime }).(pulumi.StringOutput)
}

// The max number of parallel time windows (ready for execution) for which a rerun is triggered.
func (o RerunTumblingWindowTriggerResponseOutput) RerunConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v RerunTumblingWindowTriggerResponse) int { return v.RerunConcurrency }).(pulumi.IntOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o RerunTumblingWindowTriggerResponseOutput) RuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v RerunTumblingWindowTriggerResponse) string { return v.RuntimeState }).(pulumi.StringOutput)
}

// Trigger type.
func (o RerunTumblingWindowTriggerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RerunTumblingWindowTriggerResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Responsys linked service.
type ResponsysLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Responsys server.
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// ResponsysLinkedServiceInput is an input type that accepts ResponsysLinkedServiceArgs and ResponsysLinkedServiceOutput values.
// You can construct a concrete instance of `ResponsysLinkedServiceInput` via:
//
//          ResponsysLinkedServiceArgs{...}
type ResponsysLinkedServiceInput interface {
	pulumi.Input

	ToResponsysLinkedServiceOutput() ResponsysLinkedServiceOutput
	ToResponsysLinkedServiceOutputWithContext(context.Context) ResponsysLinkedServiceOutput
}

// Responsys linked service.
type ResponsysLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the Responsys server.
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (ResponsysLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysLinkedService)(nil)).Elem()
}

func (i ResponsysLinkedServiceArgs) ToResponsysLinkedServiceOutput() ResponsysLinkedServiceOutput {
	return i.ToResponsysLinkedServiceOutputWithContext(context.Background())
}

func (i ResponsysLinkedServiceArgs) ToResponsysLinkedServiceOutputWithContext(ctx context.Context) ResponsysLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsysLinkedServiceOutput)
}

// Responsys linked service.
type ResponsysLinkedServiceOutput struct{ *pulumi.OutputState }

func (ResponsysLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysLinkedService)(nil)).Elem()
}

func (o ResponsysLinkedServiceOutput) ToResponsysLinkedServiceOutput() ResponsysLinkedServiceOutput {
	return o
}

func (o ResponsysLinkedServiceOutput) ToResponsysLinkedServiceOutputWithContext(ctx context.Context) ResponsysLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o ResponsysLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ResponsysLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
func (o ResponsysLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
func (o ResponsysLinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ResponsysLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v ResponsysLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o ResponsysLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsysLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ResponsysLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the Responsys server.
func (o ResponsysLinkedServiceOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedService) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ResponsysLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ResponsysLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o ResponsysLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsysLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o ResponsysLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o ResponsysLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o ResponsysLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Responsys linked service.
type ResponsysLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Responsys server.
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// ResponsysLinkedServiceResponseInput is an input type that accepts ResponsysLinkedServiceResponseArgs and ResponsysLinkedServiceResponseOutput values.
// You can construct a concrete instance of `ResponsysLinkedServiceResponseInput` via:
//
//          ResponsysLinkedServiceResponseArgs{...}
type ResponsysLinkedServiceResponseInput interface {
	pulumi.Input

	ToResponsysLinkedServiceResponseOutput() ResponsysLinkedServiceResponseOutput
	ToResponsysLinkedServiceResponseOutputWithContext(context.Context) ResponsysLinkedServiceResponseOutput
}

// Responsys linked service.
type ResponsysLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the Responsys server.
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (ResponsysLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysLinkedServiceResponse)(nil)).Elem()
}

func (i ResponsysLinkedServiceResponseArgs) ToResponsysLinkedServiceResponseOutput() ResponsysLinkedServiceResponseOutput {
	return i.ToResponsysLinkedServiceResponseOutputWithContext(context.Background())
}

func (i ResponsysLinkedServiceResponseArgs) ToResponsysLinkedServiceResponseOutputWithContext(ctx context.Context) ResponsysLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsysLinkedServiceResponseOutput)
}

// Responsys linked service.
type ResponsysLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ResponsysLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysLinkedServiceResponse)(nil)).Elem()
}

func (o ResponsysLinkedServiceResponseOutput) ToResponsysLinkedServiceResponseOutput() ResponsysLinkedServiceResponseOutput {
	return o
}

func (o ResponsysLinkedServiceResponseOutput) ToResponsysLinkedServiceResponseOutputWithContext(ctx context.Context) ResponsysLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o ResponsysLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
func (o ResponsysLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
func (o ResponsysLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ResponsysLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o ResponsysLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ResponsysLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the Responsys server.
func (o ResponsysLinkedServiceResponseOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ResponsysLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o ResponsysLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o ResponsysLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o ResponsysLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o ResponsysLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Responsys dataset.
type ResponsysObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ResponsysObjectDatasetInput is an input type that accepts ResponsysObjectDatasetArgs and ResponsysObjectDatasetOutput values.
// You can construct a concrete instance of `ResponsysObjectDatasetInput` via:
//
//          ResponsysObjectDatasetArgs{...}
type ResponsysObjectDatasetInput interface {
	pulumi.Input

	ToResponsysObjectDatasetOutput() ResponsysObjectDatasetOutput
	ToResponsysObjectDatasetOutputWithContext(context.Context) ResponsysObjectDatasetOutput
}

// Responsys dataset.
type ResponsysObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ResponsysObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysObjectDataset)(nil)).Elem()
}

func (i ResponsysObjectDatasetArgs) ToResponsysObjectDatasetOutput() ResponsysObjectDatasetOutput {
	return i.ToResponsysObjectDatasetOutputWithContext(context.Background())
}

func (i ResponsysObjectDatasetArgs) ToResponsysObjectDatasetOutputWithContext(ctx context.Context) ResponsysObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsysObjectDatasetOutput)
}

// Responsys dataset.
type ResponsysObjectDatasetOutput struct{ *pulumi.OutputState }

func (ResponsysObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysObjectDataset)(nil)).Elem()
}

func (o ResponsysObjectDatasetOutput) ToResponsysObjectDatasetOutput() ResponsysObjectDatasetOutput {
	return o
}

func (o ResponsysObjectDatasetOutput) ToResponsysObjectDatasetOutputWithContext(ctx context.Context) ResponsysObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ResponsysObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ResponsysObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ResponsysObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsysObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ResponsysObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v ResponsysObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o ResponsysObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ResponsysObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o ResponsysObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ResponsysObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ResponsysObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ResponsysObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ResponsysObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o ResponsysObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsysObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Responsys dataset.
type ResponsysObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ResponsysObjectDatasetResponseInput is an input type that accepts ResponsysObjectDatasetResponseArgs and ResponsysObjectDatasetResponseOutput values.
// You can construct a concrete instance of `ResponsysObjectDatasetResponseInput` via:
//
//          ResponsysObjectDatasetResponseArgs{...}
type ResponsysObjectDatasetResponseInput interface {
	pulumi.Input

	ToResponsysObjectDatasetResponseOutput() ResponsysObjectDatasetResponseOutput
	ToResponsysObjectDatasetResponseOutputWithContext(context.Context) ResponsysObjectDatasetResponseOutput
}

// Responsys dataset.
type ResponsysObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ResponsysObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysObjectDatasetResponse)(nil)).Elem()
}

func (i ResponsysObjectDatasetResponseArgs) ToResponsysObjectDatasetResponseOutput() ResponsysObjectDatasetResponseOutput {
	return i.ToResponsysObjectDatasetResponseOutputWithContext(context.Background())
}

func (i ResponsysObjectDatasetResponseArgs) ToResponsysObjectDatasetResponseOutputWithContext(ctx context.Context) ResponsysObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsysObjectDatasetResponseOutput)
}

// Responsys dataset.
type ResponsysObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (ResponsysObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysObjectDatasetResponse)(nil)).Elem()
}

func (o ResponsysObjectDatasetResponseOutput) ToResponsysObjectDatasetResponseOutput() ResponsysObjectDatasetResponseOutput {
	return o
}

func (o ResponsysObjectDatasetResponseOutput) ToResponsysObjectDatasetResponseOutputWithContext(ctx context.Context) ResponsysObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ResponsysObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ResponsysObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ResponsysObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o ResponsysObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ResponsysObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ResponsysObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ResponsysObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ResponsysObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o ResponsysObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A Rest service dataset.
type RestResourceDataset struct {
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
	PaginationRules interface{} `pulumi:"paginationRules"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType string).
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// RestResourceDatasetInput is an input type that accepts RestResourceDatasetArgs and RestResourceDatasetOutput values.
// You can construct a concrete instance of `RestResourceDatasetInput` via:
//
//          RestResourceDatasetArgs{...}
type RestResourceDatasetInput interface {
	pulumi.Input

	ToRestResourceDatasetOutput() RestResourceDatasetOutput
	ToRestResourceDatasetOutputWithContext(context.Context) RestResourceDatasetOutput
}

// A Rest service dataset.
type RestResourceDatasetArgs struct {
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders pulumi.Input `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
	PaginationRules pulumi.Input `pulumi:"paginationRules"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType string).
	RelativeUrl pulumi.Input `pulumi:"relativeUrl"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody pulumi.Input `pulumi:"requestBody"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod pulumi.Input `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RestResourceDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestResourceDataset)(nil)).Elem()
}

func (i RestResourceDatasetArgs) ToRestResourceDatasetOutput() RestResourceDatasetOutput {
	return i.ToRestResourceDatasetOutputWithContext(context.Background())
}

func (i RestResourceDatasetArgs) ToRestResourceDatasetOutputWithContext(ctx context.Context) RestResourceDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestResourceDatasetOutput)
}

// A Rest service dataset.
type RestResourceDatasetOutput struct{ *pulumi.OutputState }

func (RestResourceDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestResourceDataset)(nil)).Elem()
}

func (o RestResourceDatasetOutput) ToRestResourceDatasetOutput() RestResourceDatasetOutput {
	return o
}

func (o RestResourceDatasetOutput) ToRestResourceDatasetOutputWithContext(ctx context.Context) RestResourceDatasetOutput {
	return o
}

// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
func (o RestResourceDatasetOutput) AdditionalHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDataset) interface{} { return v.AdditionalHeaders }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the Dataset.
func (o RestResourceDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v RestResourceDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o RestResourceDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestResourceDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o RestResourceDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v RestResourceDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o RestResourceDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v RestResourceDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
func (o RestResourceDatasetOutput) PaginationRules() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDataset) interface{} { return v.PaginationRules }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o RestResourceDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v RestResourceDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType string).
func (o RestResourceDatasetOutput) RelativeUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDataset) interface{} { return v.RelativeUrl }).(pulumi.AnyOutput)
}

// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
func (o RestResourceDatasetOutput) RequestBody() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDataset) interface{} { return v.RequestBody }).(pulumi.AnyOutput)
}

// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
func (o RestResourceDatasetOutput) RequestMethod() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDataset) interface{} { return v.RequestMethod }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o RestResourceDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o RestResourceDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o RestResourceDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RestResourceDataset) string { return v.Type }).(pulumi.StringOutput)
}

// A Rest service dataset.
type RestResourceDatasetResponse struct {
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
	PaginationRules interface{} `pulumi:"paginationRules"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType string).
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// RestResourceDatasetResponseInput is an input type that accepts RestResourceDatasetResponseArgs and RestResourceDatasetResponseOutput values.
// You can construct a concrete instance of `RestResourceDatasetResponseInput` via:
//
//          RestResourceDatasetResponseArgs{...}
type RestResourceDatasetResponseInput interface {
	pulumi.Input

	ToRestResourceDatasetResponseOutput() RestResourceDatasetResponseOutput
	ToRestResourceDatasetResponseOutputWithContext(context.Context) RestResourceDatasetResponseOutput
}

// A Rest service dataset.
type RestResourceDatasetResponseArgs struct {
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders pulumi.Input `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
	PaginationRules pulumi.Input `pulumi:"paginationRules"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType string).
	RelativeUrl pulumi.Input `pulumi:"relativeUrl"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody pulumi.Input `pulumi:"requestBody"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod pulumi.Input `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RestResourceDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestResourceDatasetResponse)(nil)).Elem()
}

func (i RestResourceDatasetResponseArgs) ToRestResourceDatasetResponseOutput() RestResourceDatasetResponseOutput {
	return i.ToRestResourceDatasetResponseOutputWithContext(context.Background())
}

func (i RestResourceDatasetResponseArgs) ToRestResourceDatasetResponseOutputWithContext(ctx context.Context) RestResourceDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestResourceDatasetResponseOutput)
}

// A Rest service dataset.
type RestResourceDatasetResponseOutput struct{ *pulumi.OutputState }

func (RestResourceDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestResourceDatasetResponse)(nil)).Elem()
}

func (o RestResourceDatasetResponseOutput) ToRestResourceDatasetResponseOutput() RestResourceDatasetResponseOutput {
	return o
}

func (o RestResourceDatasetResponseOutput) ToRestResourceDatasetResponseOutputWithContext(ctx context.Context) RestResourceDatasetResponseOutput {
	return o
}

// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
func (o RestResourceDatasetResponseOutput) AdditionalHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) interface{} { return v.AdditionalHeaders }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the Dataset.
func (o RestResourceDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o RestResourceDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o RestResourceDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o RestResourceDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
func (o RestResourceDatasetResponseOutput) PaginationRules() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) interface{} { return v.PaginationRules }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o RestResourceDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType string).
func (o RestResourceDatasetResponseOutput) RelativeUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) interface{} { return v.RelativeUrl }).(pulumi.AnyOutput)
}

// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
func (o RestResourceDatasetResponseOutput) RequestBody() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) interface{} { return v.RequestBody }).(pulumi.AnyOutput)
}

// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
func (o RestResourceDatasetResponseOutput) RequestMethod() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) interface{} { return v.RequestMethod }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o RestResourceDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o RestResourceDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o RestResourceDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Rest Service linked service.
type RestServiceLinkedService struct {
	// The resource you are requesting authorization to use.
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the REST service.
	AuthenticationType string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password used in Basic authentication type.
	Password interface{} `pulumi:"password"`
	// The application's client ID used in AadServicePrincipal authentication type.
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The application's key used in AadServicePrincipal authentication type.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which your application resides.
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The base URL of the REST service.
	Url interface{} `pulumi:"url"`
	// The user name used in Basic authentication type.
	UserName interface{} `pulumi:"userName"`
}

// RestServiceLinkedServiceInput is an input type that accepts RestServiceLinkedServiceArgs and RestServiceLinkedServiceOutput values.
// You can construct a concrete instance of `RestServiceLinkedServiceInput` via:
//
//          RestServiceLinkedServiceArgs{...}
type RestServiceLinkedServiceInput interface {
	pulumi.Input

	ToRestServiceLinkedServiceOutput() RestServiceLinkedServiceOutput
	ToRestServiceLinkedServiceOutputWithContext(context.Context) RestServiceLinkedServiceOutput
}

// Rest Service linked service.
type RestServiceLinkedServiceArgs struct {
	// The resource you are requesting authorization to use.
	AadResourceId pulumi.Input `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Type of authentication used to connect to the REST service.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation pulumi.Input `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password used in Basic authentication type.
	Password pulumi.Input `pulumi:"password"`
	// The application's client ID used in AadServicePrincipal authentication type.
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The application's key used in AadServicePrincipal authentication type.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which your application resides.
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The base URL of the REST service.
	Url pulumi.Input `pulumi:"url"`
	// The user name used in Basic authentication type.
	UserName pulumi.Input `pulumi:"userName"`
}

func (RestServiceLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestServiceLinkedService)(nil)).Elem()
}

func (i RestServiceLinkedServiceArgs) ToRestServiceLinkedServiceOutput() RestServiceLinkedServiceOutput {
	return i.ToRestServiceLinkedServiceOutputWithContext(context.Background())
}

func (i RestServiceLinkedServiceArgs) ToRestServiceLinkedServiceOutputWithContext(ctx context.Context) RestServiceLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestServiceLinkedServiceOutput)
}

// Rest Service linked service.
type RestServiceLinkedServiceOutput struct{ *pulumi.OutputState }

func (RestServiceLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestServiceLinkedService)(nil)).Elem()
}

func (o RestServiceLinkedServiceOutput) ToRestServiceLinkedServiceOutput() RestServiceLinkedServiceOutput {
	return o
}

func (o RestServiceLinkedServiceOutput) ToRestServiceLinkedServiceOutputWithContext(ctx context.Context) RestServiceLinkedServiceOutput {
	return o
}

// The resource you are requesting authorization to use.
func (o RestServiceLinkedServiceOutput) AadResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.AadResourceId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o RestServiceLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v RestServiceLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the REST service.
func (o RestServiceLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v RestServiceLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o RestServiceLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v RestServiceLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o RestServiceLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestServiceLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean).
func (o RestServiceLinkedServiceOutput) EnableServerCertificateValidation() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.EnableServerCertificateValidation }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o RestServiceLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v RestServiceLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password used in Basic authentication type.
func (o RestServiceLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The application's client ID used in AadServicePrincipal authentication type.
func (o RestServiceLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The application's key used in AadServicePrincipal authentication type.
func (o RestServiceLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which your application resides.
func (o RestServiceLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o RestServiceLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RestServiceLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The base URL of the REST service.
func (o RestServiceLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The user name used in Basic authentication type.
func (o RestServiceLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Rest Service linked service.
type RestServiceLinkedServiceResponse struct {
	// The resource you are requesting authorization to use.
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the REST service.
	AuthenticationType string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password used in Basic authentication type.
	Password interface{} `pulumi:"password"`
	// The application's client ID used in AadServicePrincipal authentication type.
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The application's key used in AadServicePrincipal authentication type.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which your application resides.
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The base URL of the REST service.
	Url interface{} `pulumi:"url"`
	// The user name used in Basic authentication type.
	UserName interface{} `pulumi:"userName"`
}

// RestServiceLinkedServiceResponseInput is an input type that accepts RestServiceLinkedServiceResponseArgs and RestServiceLinkedServiceResponseOutput values.
// You can construct a concrete instance of `RestServiceLinkedServiceResponseInput` via:
//
//          RestServiceLinkedServiceResponseArgs{...}
type RestServiceLinkedServiceResponseInput interface {
	pulumi.Input

	ToRestServiceLinkedServiceResponseOutput() RestServiceLinkedServiceResponseOutput
	ToRestServiceLinkedServiceResponseOutputWithContext(context.Context) RestServiceLinkedServiceResponseOutput
}

// Rest Service linked service.
type RestServiceLinkedServiceResponseArgs struct {
	// The resource you are requesting authorization to use.
	AadResourceId pulumi.Input `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Type of authentication used to connect to the REST service.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation pulumi.Input `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The password used in Basic authentication type.
	Password pulumi.Input `pulumi:"password"`
	// The application's client ID used in AadServicePrincipal authentication type.
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The application's key used in AadServicePrincipal authentication type.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which your application resides.
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The base URL of the REST service.
	Url pulumi.Input `pulumi:"url"`
	// The user name used in Basic authentication type.
	UserName pulumi.Input `pulumi:"userName"`
}

func (RestServiceLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestServiceLinkedServiceResponse)(nil)).Elem()
}

func (i RestServiceLinkedServiceResponseArgs) ToRestServiceLinkedServiceResponseOutput() RestServiceLinkedServiceResponseOutput {
	return i.ToRestServiceLinkedServiceResponseOutputWithContext(context.Background())
}

func (i RestServiceLinkedServiceResponseArgs) ToRestServiceLinkedServiceResponseOutputWithContext(ctx context.Context) RestServiceLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestServiceLinkedServiceResponseOutput)
}

// Rest Service linked service.
type RestServiceLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (RestServiceLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestServiceLinkedServiceResponse)(nil)).Elem()
}

func (o RestServiceLinkedServiceResponseOutput) ToRestServiceLinkedServiceResponseOutput() RestServiceLinkedServiceResponseOutput {
	return o
}

func (o RestServiceLinkedServiceResponseOutput) ToRestServiceLinkedServiceResponseOutputWithContext(ctx context.Context) RestServiceLinkedServiceResponseOutput {
	return o
}

// The resource you are requesting authorization to use.
func (o RestServiceLinkedServiceResponseOutput) AadResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.AadResourceId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o RestServiceLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the REST service.
func (o RestServiceLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceResponseOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o RestServiceLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o RestServiceLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean).
func (o RestServiceLinkedServiceResponseOutput) EnableServerCertificateValidation() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.EnableServerCertificateValidation }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o RestServiceLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The password used in Basic authentication type.
func (o RestServiceLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The application's client ID used in AadServicePrincipal authentication type.
func (o RestServiceLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The application's key used in AadServicePrincipal authentication type.
func (o RestServiceLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which your application resides.
func (o RestServiceLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o RestServiceLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The base URL of the REST service.
func (o RestServiceLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The user name used in Basic authentication type.
func (o RestServiceLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Execution policy for an activity.
type RetryPolicy struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Count interface{} `pulumi:"count"`
	// Interval between retries in seconds. Default is 30.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
}

// RetryPolicyInput is an input type that accepts RetryPolicyArgs and RetryPolicyOutput values.
// You can construct a concrete instance of `RetryPolicyInput` via:
//
//          RetryPolicyArgs{...}
type RetryPolicyInput interface {
	pulumi.Input

	ToRetryPolicyOutput() RetryPolicyOutput
	ToRetryPolicyOutputWithContext(context.Context) RetryPolicyOutput
}

// Execution policy for an activity.
type RetryPolicyArgs struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Count pulumi.Input `pulumi:"count"`
	// Interval between retries in seconds. Default is 30.
	IntervalInSeconds pulumi.IntPtrInput `pulumi:"intervalInSeconds"`
}

func (RetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicy)(nil)).Elem()
}

func (i RetryPolicyArgs) ToRetryPolicyOutput() RetryPolicyOutput {
	return i.ToRetryPolicyOutputWithContext(context.Background())
}

func (i RetryPolicyArgs) ToRetryPolicyOutputWithContext(ctx context.Context) RetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyOutput)
}

func (i RetryPolicyArgs) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return i.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (i RetryPolicyArgs) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyOutput).ToRetryPolicyPtrOutputWithContext(ctx)
}

// RetryPolicyPtrInput is an input type that accepts RetryPolicyArgs, RetryPolicyPtr and RetryPolicyPtrOutput values.
// You can construct a concrete instance of `RetryPolicyPtrInput` via:
//
//          RetryPolicyArgs{...}
//
//  or:
//
//          nil
type RetryPolicyPtrInput interface {
	pulumi.Input

	ToRetryPolicyPtrOutput() RetryPolicyPtrOutput
	ToRetryPolicyPtrOutputWithContext(context.Context) RetryPolicyPtrOutput
}

type retryPolicyPtrType RetryPolicyArgs

func RetryPolicyPtr(v *RetryPolicyArgs) RetryPolicyPtrInput {
	return (*retryPolicyPtrType)(v)
}

func (*retryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicy)(nil)).Elem()
}

func (i *retryPolicyPtrType) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return i.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *retryPolicyPtrType) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyPtrOutput)
}

// Execution policy for an activity.
type RetryPolicyOutput struct{ *pulumi.OutputState }

func (RetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicy)(nil)).Elem()
}

func (o RetryPolicyOutput) ToRetryPolicyOutput() RetryPolicyOutput {
	return o
}

func (o RetryPolicyOutput) ToRetryPolicyOutputWithContext(ctx context.Context) RetryPolicyOutput {
	return o
}

func (o RetryPolicyOutput) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return o.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (o RetryPolicyOutput) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return o.ApplyT(func(v RetryPolicy) *RetryPolicy {
		return &v
	}).(RetryPolicyPtrOutput)
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o RetryPolicyOutput) Count() pulumi.AnyOutput {
	return o.ApplyT(func(v RetryPolicy) interface{} { return v.Count }).(pulumi.AnyOutput)
}

// Interval between retries in seconds. Default is 30.
func (o RetryPolicyOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicy) *int { return v.IntervalInSeconds }).(pulumi.IntPtrOutput)
}

type RetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (RetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicy)(nil)).Elem()
}

func (o RetryPolicyPtrOutput) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return o
}

func (o RetryPolicyPtrOutput) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return o
}

func (o RetryPolicyPtrOutput) Elem() RetryPolicyOutput {
	return o.ApplyT(func(v *RetryPolicy) RetryPolicy { return *v }).(RetryPolicyOutput)
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o RetryPolicyPtrOutput) Count() pulumi.AnyOutput {
	return o.ApplyT(func(v *RetryPolicy) interface{} {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.AnyOutput)
}

// Interval between retries in seconds. Default is 30.
func (o RetryPolicyPtrOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicy) *int {
		if v == nil {
			return nil
		}
		return v.IntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// Execution policy for an activity.
type RetryPolicyResponse struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Count interface{} `pulumi:"count"`
	// Interval between retries in seconds. Default is 30.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
}

// RetryPolicyResponseInput is an input type that accepts RetryPolicyResponseArgs and RetryPolicyResponseOutput values.
// You can construct a concrete instance of `RetryPolicyResponseInput` via:
//
//          RetryPolicyResponseArgs{...}
type RetryPolicyResponseInput interface {
	pulumi.Input

	ToRetryPolicyResponseOutput() RetryPolicyResponseOutput
	ToRetryPolicyResponseOutputWithContext(context.Context) RetryPolicyResponseOutput
}

// Execution policy for an activity.
type RetryPolicyResponseArgs struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Count pulumi.Input `pulumi:"count"`
	// Interval between retries in seconds. Default is 30.
	IntervalInSeconds pulumi.IntPtrInput `pulumi:"intervalInSeconds"`
}

func (RetryPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicyResponse)(nil)).Elem()
}

func (i RetryPolicyResponseArgs) ToRetryPolicyResponseOutput() RetryPolicyResponseOutput {
	return i.ToRetryPolicyResponseOutputWithContext(context.Background())
}

func (i RetryPolicyResponseArgs) ToRetryPolicyResponseOutputWithContext(ctx context.Context) RetryPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyResponseOutput)
}

func (i RetryPolicyResponseArgs) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return i.ToRetryPolicyResponsePtrOutputWithContext(context.Background())
}

func (i RetryPolicyResponseArgs) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyResponseOutput).ToRetryPolicyResponsePtrOutputWithContext(ctx)
}

// RetryPolicyResponsePtrInput is an input type that accepts RetryPolicyResponseArgs, RetryPolicyResponsePtr and RetryPolicyResponsePtrOutput values.
// You can construct a concrete instance of `RetryPolicyResponsePtrInput` via:
//
//          RetryPolicyResponseArgs{...}
//
//  or:
//
//          nil
type RetryPolicyResponsePtrInput interface {
	pulumi.Input

	ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput
	ToRetryPolicyResponsePtrOutputWithContext(context.Context) RetryPolicyResponsePtrOutput
}

type retryPolicyResponsePtrType RetryPolicyResponseArgs

func RetryPolicyResponsePtr(v *RetryPolicyResponseArgs) RetryPolicyResponsePtrInput {
	return (*retryPolicyResponsePtrType)(v)
}

func (*retryPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicyResponse)(nil)).Elem()
}

func (i *retryPolicyResponsePtrType) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return i.ToRetryPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *retryPolicyResponsePtrType) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyResponsePtrOutput)
}

// Execution policy for an activity.
type RetryPolicyResponseOutput struct{ *pulumi.OutputState }

func (RetryPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicyResponse)(nil)).Elem()
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponseOutput() RetryPolicyResponseOutput {
	return o
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponseOutputWithContext(ctx context.Context) RetryPolicyResponseOutput {
	return o
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return o.ToRetryPolicyResponsePtrOutputWithContext(context.Background())
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return o.ApplyT(func(v RetryPolicyResponse) *RetryPolicyResponse {
		return &v
	}).(RetryPolicyResponsePtrOutput)
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o RetryPolicyResponseOutput) Count() pulumi.AnyOutput {
	return o.ApplyT(func(v RetryPolicyResponse) interface{} { return v.Count }).(pulumi.AnyOutput)
}

// Interval between retries in seconds. Default is 30.
func (o RetryPolicyResponseOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicyResponse) *int { return v.IntervalInSeconds }).(pulumi.IntPtrOutput)
}

type RetryPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (RetryPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicyResponse)(nil)).Elem()
}

func (o RetryPolicyResponsePtrOutput) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return o
}

func (o RetryPolicyResponsePtrOutput) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return o
}

func (o RetryPolicyResponsePtrOutput) Elem() RetryPolicyResponseOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) RetryPolicyResponse { return *v }).(RetryPolicyResponseOutput)
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o RetryPolicyResponsePtrOutput) Count() pulumi.AnyOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.AnyOutput)
}

// Interval between retries in seconds. Default is 30.
func (o RetryPolicyResponsePtrOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.IntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// Linked service for Salesforce.
type SalesforceLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password interface{} `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken interface{} `pulumi:"securityToken"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// SalesforceLinkedServiceInput is an input type that accepts SalesforceLinkedServiceArgs and SalesforceLinkedServiceOutput values.
// You can construct a concrete instance of `SalesforceLinkedServiceInput` via:
//
//          SalesforceLinkedServiceArgs{...}
type SalesforceLinkedServiceInput interface {
	pulumi.Input

	ToSalesforceLinkedServiceOutput() SalesforceLinkedServiceOutput
	ToSalesforceLinkedServiceOutputWithContext(context.Context) SalesforceLinkedServiceOutput
}

// Linked service for Salesforce.
type SalesforceLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion pulumi.Input `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl pulumi.Input `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password pulumi.Input `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken pulumi.Input `pulumi:"securityToken"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (SalesforceLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceLinkedService)(nil)).Elem()
}

func (i SalesforceLinkedServiceArgs) ToSalesforceLinkedServiceOutput() SalesforceLinkedServiceOutput {
	return i.ToSalesforceLinkedServiceOutputWithContext(context.Background())
}

func (i SalesforceLinkedServiceArgs) ToSalesforceLinkedServiceOutputWithContext(ctx context.Context) SalesforceLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceLinkedServiceOutput)
}

// Linked service for Salesforce.
type SalesforceLinkedServiceOutput struct{ *pulumi.OutputState }

func (SalesforceLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceLinkedService)(nil)).Elem()
}

func (o SalesforceLinkedServiceOutput) ToSalesforceLinkedServiceOutput() SalesforceLinkedServiceOutput {
	return o
}

func (o SalesforceLinkedServiceOutput) ToSalesforceLinkedServiceOutputWithContext(ctx context.Context) SalesforceLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SalesforceLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
func (o SalesforceLinkedServiceOutput) ApiVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedService) interface{} { return v.ApiVersion }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SalesforceLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SalesforceLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SalesforceLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SalesforceLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
func (o SalesforceLinkedServiceOutput) EnvironmentUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedService) interface{} { return v.EnvironmentUrl }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SalesforceLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SalesforceLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password for Basic authentication of the Salesforce instance.
func (o SalesforceLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The security token is optional to remotely access Salesforce instance.
func (o SalesforceLinkedServiceOutput) SecurityToken() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedService) interface{} { return v.SecurityToken }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SalesforceLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
func (o SalesforceLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for Salesforce.
type SalesforceLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password interface{} `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken interface{} `pulumi:"securityToken"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// SalesforceLinkedServiceResponseInput is an input type that accepts SalesforceLinkedServiceResponseArgs and SalesforceLinkedServiceResponseOutput values.
// You can construct a concrete instance of `SalesforceLinkedServiceResponseInput` via:
//
//          SalesforceLinkedServiceResponseArgs{...}
type SalesforceLinkedServiceResponseInput interface {
	pulumi.Input

	ToSalesforceLinkedServiceResponseOutput() SalesforceLinkedServiceResponseOutput
	ToSalesforceLinkedServiceResponseOutputWithContext(context.Context) SalesforceLinkedServiceResponseOutput
}

// Linked service for Salesforce.
type SalesforceLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion pulumi.Input `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl pulumi.Input `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password pulumi.Input `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken pulumi.Input `pulumi:"securityToken"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (SalesforceLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceLinkedServiceResponse)(nil)).Elem()
}

func (i SalesforceLinkedServiceResponseArgs) ToSalesforceLinkedServiceResponseOutput() SalesforceLinkedServiceResponseOutput {
	return i.ToSalesforceLinkedServiceResponseOutputWithContext(context.Background())
}

func (i SalesforceLinkedServiceResponseArgs) ToSalesforceLinkedServiceResponseOutputWithContext(ctx context.Context) SalesforceLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceLinkedServiceResponseOutput)
}

// Linked service for Salesforce.
type SalesforceLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SalesforceLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceLinkedServiceResponse)(nil)).Elem()
}

func (o SalesforceLinkedServiceResponseOutput) ToSalesforceLinkedServiceResponseOutput() SalesforceLinkedServiceResponseOutput {
	return o
}

func (o SalesforceLinkedServiceResponseOutput) ToSalesforceLinkedServiceResponseOutputWithContext(ctx context.Context) SalesforceLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SalesforceLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
func (o SalesforceLinkedServiceResponseOutput) ApiVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) interface{} { return v.ApiVersion }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SalesforceLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SalesforceLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SalesforceLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
func (o SalesforceLinkedServiceResponseOutput) EnvironmentUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) interface{} { return v.EnvironmentUrl }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SalesforceLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password for Basic authentication of the Salesforce instance.
func (o SalesforceLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The security token is optional to remotely access Salesforce instance.
func (o SalesforceLinkedServiceResponseOutput) SecurityToken() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) interface{} { return v.SecurityToken }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SalesforceLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
func (o SalesforceLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to Salesforce Marketing Cloud. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// SalesforceMarketingCloudLinkedServiceInput is an input type that accepts SalesforceMarketingCloudLinkedServiceArgs and SalesforceMarketingCloudLinkedServiceOutput values.
// You can construct a concrete instance of `SalesforceMarketingCloudLinkedServiceInput` via:
//
//          SalesforceMarketingCloudLinkedServiceArgs{...}
type SalesforceMarketingCloudLinkedServiceInput interface {
	pulumi.Input

	ToSalesforceMarketingCloudLinkedServiceOutput() SalesforceMarketingCloudLinkedServiceOutput
	ToSalesforceMarketingCloudLinkedServiceOutputWithContext(context.Context) SalesforceMarketingCloudLinkedServiceOutput
}

// Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Properties used to connect to Salesforce Marketing Cloud. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties pulumi.Input `pulumi:"connectionProperties"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (SalesforceMarketingCloudLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudLinkedService)(nil)).Elem()
}

func (i SalesforceMarketingCloudLinkedServiceArgs) ToSalesforceMarketingCloudLinkedServiceOutput() SalesforceMarketingCloudLinkedServiceOutput {
	return i.ToSalesforceMarketingCloudLinkedServiceOutputWithContext(context.Background())
}

func (i SalesforceMarketingCloudLinkedServiceArgs) ToSalesforceMarketingCloudLinkedServiceOutputWithContext(ctx context.Context) SalesforceMarketingCloudLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceMarketingCloudLinkedServiceOutput)
}

// Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedServiceOutput struct{ *pulumi.OutputState }

func (SalesforceMarketingCloudLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudLinkedService)(nil)).Elem()
}

func (o SalesforceMarketingCloudLinkedServiceOutput) ToSalesforceMarketingCloudLinkedServiceOutput() SalesforceMarketingCloudLinkedServiceOutput {
	return o
}

func (o SalesforceMarketingCloudLinkedServiceOutput) ToSalesforceMarketingCloudLinkedServiceOutputWithContext(ctx context.Context) SalesforceMarketingCloudLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SalesforceMarketingCloudLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
func (o SalesforceMarketingCloudLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
func (o SalesforceMarketingCloudLinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SalesforceMarketingCloudLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Properties used to connect to Salesforce Marketing Cloud. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o SalesforceMarketingCloudLinkedServiceOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SalesforceMarketingCloudLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SalesforceMarketingCloudLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SalesforceMarketingCloudLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o SalesforceMarketingCloudLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SalesforceMarketingCloudLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SalesforceMarketingCloudLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SalesforceMarketingCloudLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to Salesforce Marketing Cloud. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// SalesforceMarketingCloudLinkedServiceResponseInput is an input type that accepts SalesforceMarketingCloudLinkedServiceResponseArgs and SalesforceMarketingCloudLinkedServiceResponseOutput values.
// You can construct a concrete instance of `SalesforceMarketingCloudLinkedServiceResponseInput` via:
//
//          SalesforceMarketingCloudLinkedServiceResponseArgs{...}
type SalesforceMarketingCloudLinkedServiceResponseInput interface {
	pulumi.Input

	ToSalesforceMarketingCloudLinkedServiceResponseOutput() SalesforceMarketingCloudLinkedServiceResponseOutput
	ToSalesforceMarketingCloudLinkedServiceResponseOutputWithContext(context.Context) SalesforceMarketingCloudLinkedServiceResponseOutput
}

// Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Properties used to connect to Salesforce Marketing Cloud. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties pulumi.Input `pulumi:"connectionProperties"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (SalesforceMarketingCloudLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudLinkedServiceResponse)(nil)).Elem()
}

func (i SalesforceMarketingCloudLinkedServiceResponseArgs) ToSalesforceMarketingCloudLinkedServiceResponseOutput() SalesforceMarketingCloudLinkedServiceResponseOutput {
	return i.ToSalesforceMarketingCloudLinkedServiceResponseOutputWithContext(context.Background())
}

func (i SalesforceMarketingCloudLinkedServiceResponseArgs) ToSalesforceMarketingCloudLinkedServiceResponseOutputWithContext(ctx context.Context) SalesforceMarketingCloudLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceMarketingCloudLinkedServiceResponseOutput)
}

// Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SalesforceMarketingCloudLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudLinkedServiceResponse)(nil)).Elem()
}

func (o SalesforceMarketingCloudLinkedServiceResponseOutput) ToSalesforceMarketingCloudLinkedServiceResponseOutput() SalesforceMarketingCloudLinkedServiceResponseOutput {
	return o
}

func (o SalesforceMarketingCloudLinkedServiceResponseOutput) ToSalesforceMarketingCloudLinkedServiceResponseOutputWithContext(ctx context.Context) SalesforceMarketingCloudLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Properties used to connect to Salesforce Marketing Cloud. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SalesforceMarketingCloudObjectDatasetInput is an input type that accepts SalesforceMarketingCloudObjectDatasetArgs and SalesforceMarketingCloudObjectDatasetOutput values.
// You can construct a concrete instance of `SalesforceMarketingCloudObjectDatasetInput` via:
//
//          SalesforceMarketingCloudObjectDatasetArgs{...}
type SalesforceMarketingCloudObjectDatasetInput interface {
	pulumi.Input

	ToSalesforceMarketingCloudObjectDatasetOutput() SalesforceMarketingCloudObjectDatasetOutput
	ToSalesforceMarketingCloudObjectDatasetOutputWithContext(context.Context) SalesforceMarketingCloudObjectDatasetOutput
}

// Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceMarketingCloudObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudObjectDataset)(nil)).Elem()
}

func (i SalesforceMarketingCloudObjectDatasetArgs) ToSalesforceMarketingCloudObjectDatasetOutput() SalesforceMarketingCloudObjectDatasetOutput {
	return i.ToSalesforceMarketingCloudObjectDatasetOutputWithContext(context.Background())
}

func (i SalesforceMarketingCloudObjectDatasetArgs) ToSalesforceMarketingCloudObjectDatasetOutputWithContext(ctx context.Context) SalesforceMarketingCloudObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceMarketingCloudObjectDatasetOutput)
}

// Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDatasetOutput struct{ *pulumi.OutputState }

func (SalesforceMarketingCloudObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudObjectDataset)(nil)).Elem()
}

func (o SalesforceMarketingCloudObjectDatasetOutput) ToSalesforceMarketingCloudObjectDatasetOutput() SalesforceMarketingCloudObjectDatasetOutput {
	return o
}

func (o SalesforceMarketingCloudObjectDatasetOutput) ToSalesforceMarketingCloudObjectDatasetOutputWithContext(ctx context.Context) SalesforceMarketingCloudObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceMarketingCloudObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SalesforceMarketingCloudObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SalesforceMarketingCloudObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SalesforceMarketingCloudObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SalesforceMarketingCloudObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SalesforceMarketingCloudObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SalesforceMarketingCloudObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o SalesforceMarketingCloudObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SalesforceMarketingCloudObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SalesforceMarketingCloudObjectDatasetResponseInput is an input type that accepts SalesforceMarketingCloudObjectDatasetResponseArgs and SalesforceMarketingCloudObjectDatasetResponseOutput values.
// You can construct a concrete instance of `SalesforceMarketingCloudObjectDatasetResponseInput` via:
//
//          SalesforceMarketingCloudObjectDatasetResponseArgs{...}
type SalesforceMarketingCloudObjectDatasetResponseInput interface {
	pulumi.Input

	ToSalesforceMarketingCloudObjectDatasetResponseOutput() SalesforceMarketingCloudObjectDatasetResponseOutput
	ToSalesforceMarketingCloudObjectDatasetResponseOutputWithContext(context.Context) SalesforceMarketingCloudObjectDatasetResponseOutput
}

// Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceMarketingCloudObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudObjectDatasetResponse)(nil)).Elem()
}

func (i SalesforceMarketingCloudObjectDatasetResponseArgs) ToSalesforceMarketingCloudObjectDatasetResponseOutput() SalesforceMarketingCloudObjectDatasetResponseOutput {
	return i.ToSalesforceMarketingCloudObjectDatasetResponseOutputWithContext(context.Background())
}

func (i SalesforceMarketingCloudObjectDatasetResponseArgs) ToSalesforceMarketingCloudObjectDatasetResponseOutputWithContext(ctx context.Context) SalesforceMarketingCloudObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceMarketingCloudObjectDatasetResponseOutput)
}

// Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (SalesforceMarketingCloudObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudObjectDatasetResponse)(nil)).Elem()
}

func (o SalesforceMarketingCloudObjectDatasetResponseOutput) ToSalesforceMarketingCloudObjectDatasetResponseOutput() SalesforceMarketingCloudObjectDatasetResponseOutput {
	return o
}

func (o SalesforceMarketingCloudObjectDatasetResponseOutput) ToSalesforceMarketingCloudObjectDatasetResponseOutputWithContext(ctx context.Context) SalesforceMarketingCloudObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Salesforce object dataset.
type SalesforceObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The Salesforce object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SalesforceObjectDatasetInput is an input type that accepts SalesforceObjectDatasetArgs and SalesforceObjectDatasetOutput values.
// You can construct a concrete instance of `SalesforceObjectDatasetInput` via:
//
//          SalesforceObjectDatasetArgs{...}
type SalesforceObjectDatasetInput interface {
	pulumi.Input

	ToSalesforceObjectDatasetOutput() SalesforceObjectDatasetOutput
	ToSalesforceObjectDatasetOutputWithContext(context.Context) SalesforceObjectDatasetOutput
}

// The Salesforce object dataset.
type SalesforceObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The Salesforce object API name. Type: string (or Expression with resultType string).
	ObjectApiName pulumi.Input `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceObjectDataset)(nil)).Elem()
}

func (i SalesforceObjectDatasetArgs) ToSalesforceObjectDatasetOutput() SalesforceObjectDatasetOutput {
	return i.ToSalesforceObjectDatasetOutputWithContext(context.Background())
}

func (i SalesforceObjectDatasetArgs) ToSalesforceObjectDatasetOutputWithContext(ctx context.Context) SalesforceObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceObjectDatasetOutput)
}

// The Salesforce object dataset.
type SalesforceObjectDatasetOutput struct{ *pulumi.OutputState }

func (SalesforceObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceObjectDataset)(nil)).Elem()
}

func (o SalesforceObjectDatasetOutput) ToSalesforceObjectDatasetOutput() SalesforceObjectDatasetOutput {
	return o
}

func (o SalesforceObjectDatasetOutput) ToSalesforceObjectDatasetOutputWithContext(ctx context.Context) SalesforceObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SalesforceObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SalesforceObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SalesforceObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SalesforceObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SalesforceObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The Salesforce object API name. Type: string (or Expression with resultType string).
func (o SalesforceObjectDatasetOutput) ObjectApiName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceObjectDataset) interface{} { return v.ObjectApiName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SalesforceObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SalesforceObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SalesforceObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SalesforceObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SalesforceObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Salesforce object dataset.
type SalesforceObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The Salesforce object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SalesforceObjectDatasetResponseInput is an input type that accepts SalesforceObjectDatasetResponseArgs and SalesforceObjectDatasetResponseOutput values.
// You can construct a concrete instance of `SalesforceObjectDatasetResponseInput` via:
//
//          SalesforceObjectDatasetResponseArgs{...}
type SalesforceObjectDatasetResponseInput interface {
	pulumi.Input

	ToSalesforceObjectDatasetResponseOutput() SalesforceObjectDatasetResponseOutput
	ToSalesforceObjectDatasetResponseOutputWithContext(context.Context) SalesforceObjectDatasetResponseOutput
}

// The Salesforce object dataset.
type SalesforceObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// The Salesforce object API name. Type: string (or Expression with resultType string).
	ObjectApiName pulumi.Input `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceObjectDatasetResponse)(nil)).Elem()
}

func (i SalesforceObjectDatasetResponseArgs) ToSalesforceObjectDatasetResponseOutput() SalesforceObjectDatasetResponseOutput {
	return i.ToSalesforceObjectDatasetResponseOutputWithContext(context.Background())
}

func (i SalesforceObjectDatasetResponseArgs) ToSalesforceObjectDatasetResponseOutputWithContext(ctx context.Context) SalesforceObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceObjectDatasetResponseOutput)
}

// The Salesforce object dataset.
type SalesforceObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (SalesforceObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceObjectDatasetResponse)(nil)).Elem()
}

func (o SalesforceObjectDatasetResponseOutput) ToSalesforceObjectDatasetResponseOutput() SalesforceObjectDatasetResponseOutput {
	return o
}

func (o SalesforceObjectDatasetResponseOutput) ToSalesforceObjectDatasetResponseOutputWithContext(ctx context.Context) SalesforceObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SalesforceObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SalesforceObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SalesforceObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The Salesforce object API name. Type: string (or Expression with resultType string).
func (o SalesforceObjectDatasetResponseOutput) ObjectApiName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) interface{} { return v.ObjectApiName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SalesforceObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SalesforceObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SalesforceObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SalesforceObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Salesforce Service Cloud.
type SalesforceServiceCloudLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of Salesforce Service Cloud instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Extended properties appended to the connection string. Type: string (or Expression with resultType string).
	ExtendedProperties interface{} `pulumi:"extendedProperties"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password interface{} `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken interface{} `pulumi:"securityToken"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// SalesforceServiceCloudLinkedServiceInput is an input type that accepts SalesforceServiceCloudLinkedServiceArgs and SalesforceServiceCloudLinkedServiceOutput values.
// You can construct a concrete instance of `SalesforceServiceCloudLinkedServiceInput` via:
//
//          SalesforceServiceCloudLinkedServiceArgs{...}
type SalesforceServiceCloudLinkedServiceInput interface {
	pulumi.Input

	ToSalesforceServiceCloudLinkedServiceOutput() SalesforceServiceCloudLinkedServiceOutput
	ToSalesforceServiceCloudLinkedServiceOutputWithContext(context.Context) SalesforceServiceCloudLinkedServiceOutput
}

// Linked service for Salesforce Service Cloud.
type SalesforceServiceCloudLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion pulumi.Input `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The URL of Salesforce Service Cloud instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl pulumi.Input `pulumi:"environmentUrl"`
	// Extended properties appended to the connection string. Type: string (or Expression with resultType string).
	ExtendedProperties pulumi.Input `pulumi:"extendedProperties"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password pulumi.Input `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken pulumi.Input `pulumi:"securityToken"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (SalesforceServiceCloudLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudLinkedService)(nil)).Elem()
}

func (i SalesforceServiceCloudLinkedServiceArgs) ToSalesforceServiceCloudLinkedServiceOutput() SalesforceServiceCloudLinkedServiceOutput {
	return i.ToSalesforceServiceCloudLinkedServiceOutputWithContext(context.Background())
}

func (i SalesforceServiceCloudLinkedServiceArgs) ToSalesforceServiceCloudLinkedServiceOutputWithContext(ctx context.Context) SalesforceServiceCloudLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceServiceCloudLinkedServiceOutput)
}

// Linked service for Salesforce Service Cloud.
type SalesforceServiceCloudLinkedServiceOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudLinkedService)(nil)).Elem()
}

func (o SalesforceServiceCloudLinkedServiceOutput) ToSalesforceServiceCloudLinkedServiceOutput() SalesforceServiceCloudLinkedServiceOutput {
	return o
}

func (o SalesforceServiceCloudLinkedServiceOutput) ToSalesforceServiceCloudLinkedServiceOutputWithContext(ctx context.Context) SalesforceServiceCloudLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SalesforceServiceCloudLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudLinkedServiceOutput) ApiVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) interface{} { return v.ApiVersion }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SalesforceServiceCloudLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SalesforceServiceCloudLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The URL of Salesforce Service Cloud instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudLinkedServiceOutput) EnvironmentUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) interface{} { return v.EnvironmentUrl }).(pulumi.AnyOutput)
}

// Extended properties appended to the connection string. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudLinkedServiceOutput) ExtendedProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) interface{} { return v.ExtendedProperties }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SalesforceServiceCloudLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password for Basic authentication of the Salesforce instance.
func (o SalesforceServiceCloudLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The security token is optional to remotely access Salesforce instance.
func (o SalesforceServiceCloudLinkedServiceOutput) SecurityToken() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) interface{} { return v.SecurityToken }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SalesforceServiceCloudLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for Salesforce Service Cloud.
type SalesforceServiceCloudLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of Salesforce Service Cloud instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Extended properties appended to the connection string. Type: string (or Expression with resultType string).
	ExtendedProperties interface{} `pulumi:"extendedProperties"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password interface{} `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken interface{} `pulumi:"securityToken"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// SalesforceServiceCloudLinkedServiceResponseInput is an input type that accepts SalesforceServiceCloudLinkedServiceResponseArgs and SalesforceServiceCloudLinkedServiceResponseOutput values.
// You can construct a concrete instance of `SalesforceServiceCloudLinkedServiceResponseInput` via:
//
//          SalesforceServiceCloudLinkedServiceResponseArgs{...}
type SalesforceServiceCloudLinkedServiceResponseInput interface {
	pulumi.Input

	ToSalesforceServiceCloudLinkedServiceResponseOutput() SalesforceServiceCloudLinkedServiceResponseOutput
	ToSalesforceServiceCloudLinkedServiceResponseOutputWithContext(context.Context) SalesforceServiceCloudLinkedServiceResponseOutput
}

// Linked service for Salesforce Service Cloud.
type SalesforceServiceCloudLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion pulumi.Input `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The URL of Salesforce Service Cloud instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl pulumi.Input `pulumi:"environmentUrl"`
	// Extended properties appended to the connection string. Type: string (or Expression with resultType string).
	ExtendedProperties pulumi.Input `pulumi:"extendedProperties"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password pulumi.Input `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken pulumi.Input `pulumi:"securityToken"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (SalesforceServiceCloudLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudLinkedServiceResponse)(nil)).Elem()
}

func (i SalesforceServiceCloudLinkedServiceResponseArgs) ToSalesforceServiceCloudLinkedServiceResponseOutput() SalesforceServiceCloudLinkedServiceResponseOutput {
	return i.ToSalesforceServiceCloudLinkedServiceResponseOutputWithContext(context.Background())
}

func (i SalesforceServiceCloudLinkedServiceResponseArgs) ToSalesforceServiceCloudLinkedServiceResponseOutputWithContext(ctx context.Context) SalesforceServiceCloudLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceServiceCloudLinkedServiceResponseOutput)
}

// Linked service for Salesforce Service Cloud.
type SalesforceServiceCloudLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudLinkedServiceResponse)(nil)).Elem()
}

func (o SalesforceServiceCloudLinkedServiceResponseOutput) ToSalesforceServiceCloudLinkedServiceResponseOutput() SalesforceServiceCloudLinkedServiceResponseOutput {
	return o
}

func (o SalesforceServiceCloudLinkedServiceResponseOutput) ToSalesforceServiceCloudLinkedServiceResponseOutputWithContext(ctx context.Context) SalesforceServiceCloudLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SalesforceServiceCloudLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudLinkedServiceResponseOutput) ApiVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) interface{} { return v.ApiVersion }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SalesforceServiceCloudLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SalesforceServiceCloudLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The URL of Salesforce Service Cloud instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudLinkedServiceResponseOutput) EnvironmentUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) interface{} { return v.EnvironmentUrl }).(pulumi.AnyOutput)
}

// Extended properties appended to the connection string. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudLinkedServiceResponseOutput) ExtendedProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) interface{} { return v.ExtendedProperties }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SalesforceServiceCloudLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The password for Basic authentication of the Salesforce instance.
func (o SalesforceServiceCloudLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The security token is optional to remotely access Salesforce instance.
func (o SalesforceServiceCloudLinkedServiceResponseOutput) SecurityToken() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) interface{} { return v.SecurityToken }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SalesforceServiceCloudLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// The Salesforce Service Cloud object dataset.
type SalesforceServiceCloudObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The Salesforce Service Cloud object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SalesforceServiceCloudObjectDatasetInput is an input type that accepts SalesforceServiceCloudObjectDatasetArgs and SalesforceServiceCloudObjectDatasetOutput values.
// You can construct a concrete instance of `SalesforceServiceCloudObjectDatasetInput` via:
//
//          SalesforceServiceCloudObjectDatasetArgs{...}
type SalesforceServiceCloudObjectDatasetInput interface {
	pulumi.Input

	ToSalesforceServiceCloudObjectDatasetOutput() SalesforceServiceCloudObjectDatasetOutput
	ToSalesforceServiceCloudObjectDatasetOutputWithContext(context.Context) SalesforceServiceCloudObjectDatasetOutput
}

// The Salesforce Service Cloud object dataset.
type SalesforceServiceCloudObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The Salesforce Service Cloud object API name. Type: string (or Expression with resultType string).
	ObjectApiName pulumi.Input `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceServiceCloudObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudObjectDataset)(nil)).Elem()
}

func (i SalesforceServiceCloudObjectDatasetArgs) ToSalesforceServiceCloudObjectDatasetOutput() SalesforceServiceCloudObjectDatasetOutput {
	return i.ToSalesforceServiceCloudObjectDatasetOutputWithContext(context.Background())
}

func (i SalesforceServiceCloudObjectDatasetArgs) ToSalesforceServiceCloudObjectDatasetOutputWithContext(ctx context.Context) SalesforceServiceCloudObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceServiceCloudObjectDatasetOutput)
}

// The Salesforce Service Cloud object dataset.
type SalesforceServiceCloudObjectDatasetOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudObjectDataset)(nil)).Elem()
}

func (o SalesforceServiceCloudObjectDatasetOutput) ToSalesforceServiceCloudObjectDatasetOutput() SalesforceServiceCloudObjectDatasetOutput {
	return o
}

func (o SalesforceServiceCloudObjectDatasetOutput) ToSalesforceServiceCloudObjectDatasetOutputWithContext(ctx context.Context) SalesforceServiceCloudObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceServiceCloudObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SalesforceServiceCloudObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SalesforceServiceCloudObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SalesforceServiceCloudObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The Salesforce Service Cloud object API name. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudObjectDatasetOutput) ObjectApiName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDataset) interface{} { return v.ObjectApiName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SalesforceServiceCloudObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SalesforceServiceCloudObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SalesforceServiceCloudObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SalesforceServiceCloudObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Salesforce Service Cloud object dataset.
type SalesforceServiceCloudObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The Salesforce Service Cloud object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SalesforceServiceCloudObjectDatasetResponseInput is an input type that accepts SalesforceServiceCloudObjectDatasetResponseArgs and SalesforceServiceCloudObjectDatasetResponseOutput values.
// You can construct a concrete instance of `SalesforceServiceCloudObjectDatasetResponseInput` via:
//
//          SalesforceServiceCloudObjectDatasetResponseArgs{...}
type SalesforceServiceCloudObjectDatasetResponseInput interface {
	pulumi.Input

	ToSalesforceServiceCloudObjectDatasetResponseOutput() SalesforceServiceCloudObjectDatasetResponseOutput
	ToSalesforceServiceCloudObjectDatasetResponseOutputWithContext(context.Context) SalesforceServiceCloudObjectDatasetResponseOutput
}

// The Salesforce Service Cloud object dataset.
type SalesforceServiceCloudObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// The Salesforce Service Cloud object API name. Type: string (or Expression with resultType string).
	ObjectApiName pulumi.Input `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceServiceCloudObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudObjectDatasetResponse)(nil)).Elem()
}

func (i SalesforceServiceCloudObjectDatasetResponseArgs) ToSalesforceServiceCloudObjectDatasetResponseOutput() SalesforceServiceCloudObjectDatasetResponseOutput {
	return i.ToSalesforceServiceCloudObjectDatasetResponseOutputWithContext(context.Background())
}

func (i SalesforceServiceCloudObjectDatasetResponseArgs) ToSalesforceServiceCloudObjectDatasetResponseOutputWithContext(ctx context.Context) SalesforceServiceCloudObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceServiceCloudObjectDatasetResponseOutput)
}

// The Salesforce Service Cloud object dataset.
type SalesforceServiceCloudObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudObjectDatasetResponse)(nil)).Elem()
}

func (o SalesforceServiceCloudObjectDatasetResponseOutput) ToSalesforceServiceCloudObjectDatasetResponseOutput() SalesforceServiceCloudObjectDatasetResponseOutput {
	return o
}

func (o SalesforceServiceCloudObjectDatasetResponseOutput) ToSalesforceServiceCloudObjectDatasetResponseOutputWithContext(ctx context.Context) SalesforceServiceCloudObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceServiceCloudObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SalesforceServiceCloudObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SalesforceServiceCloudObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SalesforceServiceCloudObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// The Salesforce Service Cloud object API name. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudObjectDatasetResponseOutput) ObjectApiName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDatasetResponse) interface{} { return v.ObjectApiName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SalesforceServiceCloudObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SalesforceServiceCloudObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SalesforceServiceCloudObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SalesforceServiceCloudObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SAP Business Warehouse Linked Service.
type SapBWLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP BW server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP BW instance. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username to access the SAP BW server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SapBWLinkedServiceInput is an input type that accepts SapBWLinkedServiceArgs and SapBWLinkedServiceOutput values.
// You can construct a concrete instance of `SapBWLinkedServiceInput` via:
//
//          SapBWLinkedServiceArgs{...}
type SapBWLinkedServiceInput interface {
	pulumi.Input

	ToSapBWLinkedServiceOutput() SapBWLinkedServiceOutput
	ToSapBWLinkedServiceOutputWithContext(context.Context) SapBWLinkedServiceOutput
}

// SAP Business Warehouse Linked Service.
type SapBWLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to access the SAP BW server.
	Password pulumi.Input `pulumi:"password"`
	// Host name of the SAP BW instance. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber pulumi.Input `pulumi:"systemNumber"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username to access the SAP BW server. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SapBWLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapBWLinkedService)(nil)).Elem()
}

func (i SapBWLinkedServiceArgs) ToSapBWLinkedServiceOutput() SapBWLinkedServiceOutput {
	return i.ToSapBWLinkedServiceOutputWithContext(context.Background())
}

func (i SapBWLinkedServiceArgs) ToSapBWLinkedServiceOutputWithContext(ctx context.Context) SapBWLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapBWLinkedServiceOutput)
}

// SAP Business Warehouse Linked Service.
type SapBWLinkedServiceOutput struct{ *pulumi.OutputState }

func (SapBWLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapBWLinkedService)(nil)).Elem()
}

func (o SapBWLinkedServiceOutput) ToSapBWLinkedServiceOutput() SapBWLinkedServiceOutput {
	return o
}

func (o SapBWLinkedServiceOutput) ToSapBWLinkedServiceOutputWithContext(ctx context.Context) SapBWLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapBWLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapBWLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SapBWLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SapBWLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SapBWLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapBWLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SapBWLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapBWLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to access the SAP BW server.
func (o SapBWLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP BW instance. Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceOutput) SystemNumber() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedService) interface{} { return v.SystemNumber }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SapBWLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapBWLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP BW server. Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// SAP Business Warehouse Linked Service.
type SapBWLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP BW server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP BW instance. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username to access the SAP BW server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SapBWLinkedServiceResponseInput is an input type that accepts SapBWLinkedServiceResponseArgs and SapBWLinkedServiceResponseOutput values.
// You can construct a concrete instance of `SapBWLinkedServiceResponseInput` via:
//
//          SapBWLinkedServiceResponseArgs{...}
type SapBWLinkedServiceResponseInput interface {
	pulumi.Input

	ToSapBWLinkedServiceResponseOutput() SapBWLinkedServiceResponseOutput
	ToSapBWLinkedServiceResponseOutputWithContext(context.Context) SapBWLinkedServiceResponseOutput
}

// SAP Business Warehouse Linked Service.
type SapBWLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password to access the SAP BW server.
	Password pulumi.Input `pulumi:"password"`
	// Host name of the SAP BW instance. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber pulumi.Input `pulumi:"systemNumber"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username to access the SAP BW server. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SapBWLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapBWLinkedServiceResponse)(nil)).Elem()
}

func (i SapBWLinkedServiceResponseArgs) ToSapBWLinkedServiceResponseOutput() SapBWLinkedServiceResponseOutput {
	return i.ToSapBWLinkedServiceResponseOutputWithContext(context.Background())
}

func (i SapBWLinkedServiceResponseArgs) ToSapBWLinkedServiceResponseOutputWithContext(ctx context.Context) SapBWLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapBWLinkedServiceResponseOutput)
}

// SAP Business Warehouse Linked Service.
type SapBWLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SapBWLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapBWLinkedServiceResponse)(nil)).Elem()
}

func (o SapBWLinkedServiceResponseOutput) ToSapBWLinkedServiceResponseOutput() SapBWLinkedServiceResponseOutput {
	return o
}

func (o SapBWLinkedServiceResponseOutput) ToSapBWLinkedServiceResponseOutputWithContext(ctx context.Context) SapBWLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapBWLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SapBWLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SapBWLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SapBWLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to access the SAP BW server.
func (o SapBWLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP BW instance. Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceResponseOutput) SystemNumber() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) interface{} { return v.SystemNumber }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SapBWLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP BW server. Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The SAP BW cube dataset.
type SapBwCubeDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SapBwCubeDatasetInput is an input type that accepts SapBwCubeDatasetArgs and SapBwCubeDatasetOutput values.
// You can construct a concrete instance of `SapBwCubeDatasetInput` via:
//
//          SapBwCubeDatasetArgs{...}
type SapBwCubeDatasetInput interface {
	pulumi.Input

	ToSapBwCubeDatasetOutput() SapBwCubeDatasetOutput
	ToSapBwCubeDatasetOutputWithContext(context.Context) SapBwCubeDatasetOutput
}

// The SAP BW cube dataset.
type SapBwCubeDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapBwCubeDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapBwCubeDataset)(nil)).Elem()
}

func (i SapBwCubeDatasetArgs) ToSapBwCubeDatasetOutput() SapBwCubeDatasetOutput {
	return i.ToSapBwCubeDatasetOutputWithContext(context.Background())
}

func (i SapBwCubeDatasetArgs) ToSapBwCubeDatasetOutputWithContext(ctx context.Context) SapBwCubeDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapBwCubeDatasetOutput)
}

// The SAP BW cube dataset.
type SapBwCubeDatasetOutput struct{ *pulumi.OutputState }

func (SapBwCubeDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapBwCubeDataset)(nil)).Elem()
}

func (o SapBwCubeDatasetOutput) ToSapBwCubeDatasetOutput() SapBwCubeDatasetOutput {
	return o
}

func (o SapBwCubeDatasetOutput) ToSapBwCubeDatasetOutputWithContext(ctx context.Context) SapBwCubeDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapBwCubeDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapBwCubeDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapBwCubeDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapBwCubeDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapBwCubeDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SapBwCubeDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SapBwCubeDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SapBwCubeDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SapBwCubeDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapBwCubeDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapBwCubeDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwCubeDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapBwCubeDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwCubeDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SapBwCubeDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapBwCubeDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The SAP BW cube dataset.
type SapBwCubeDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SapBwCubeDatasetResponseInput is an input type that accepts SapBwCubeDatasetResponseArgs and SapBwCubeDatasetResponseOutput values.
// You can construct a concrete instance of `SapBwCubeDatasetResponseInput` via:
//
//          SapBwCubeDatasetResponseArgs{...}
type SapBwCubeDatasetResponseInput interface {
	pulumi.Input

	ToSapBwCubeDatasetResponseOutput() SapBwCubeDatasetResponseOutput
	ToSapBwCubeDatasetResponseOutputWithContext(context.Context) SapBwCubeDatasetResponseOutput
}

// The SAP BW cube dataset.
type SapBwCubeDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapBwCubeDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapBwCubeDatasetResponse)(nil)).Elem()
}

func (i SapBwCubeDatasetResponseArgs) ToSapBwCubeDatasetResponseOutput() SapBwCubeDatasetResponseOutput {
	return i.ToSapBwCubeDatasetResponseOutputWithContext(context.Background())
}

func (i SapBwCubeDatasetResponseArgs) ToSapBwCubeDatasetResponseOutputWithContext(ctx context.Context) SapBwCubeDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapBwCubeDatasetResponseOutput)
}

// The SAP BW cube dataset.
type SapBwCubeDatasetResponseOutput struct{ *pulumi.OutputState }

func (SapBwCubeDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapBwCubeDatasetResponse)(nil)).Elem()
}

func (o SapBwCubeDatasetResponseOutput) ToSapBwCubeDatasetResponseOutput() SapBwCubeDatasetResponseOutput {
	return o
}

func (o SapBwCubeDatasetResponseOutput) ToSapBwCubeDatasetResponseOutputWithContext(ctx context.Context) SapBwCubeDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapBwCubeDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapBwCubeDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapBwCubeDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapBwCubeDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapBwCubeDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SapBwCubeDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SapBwCubeDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SapBwCubeDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SapBwCubeDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapBwCubeDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapBwCubeDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwCubeDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapBwCubeDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwCubeDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SapBwCubeDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapBwCubeDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// SapCloudForCustomerLinkedServiceInput is an input type that accepts SapCloudForCustomerLinkedServiceArgs and SapCloudForCustomerLinkedServiceOutput values.
// You can construct a concrete instance of `SapCloudForCustomerLinkedServiceInput` via:
//
//          SapCloudForCustomerLinkedServiceArgs{...}
type SapCloudForCustomerLinkedServiceInput interface {
	pulumi.Input

	ToSapCloudForCustomerLinkedServiceOutput() SapCloudForCustomerLinkedServiceOutput
	ToSapCloudForCustomerLinkedServiceOutputWithContext(context.Context) SapCloudForCustomerLinkedServiceOutput
}

// Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (SapCloudForCustomerLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerLinkedService)(nil)).Elem()
}

func (i SapCloudForCustomerLinkedServiceArgs) ToSapCloudForCustomerLinkedServiceOutput() SapCloudForCustomerLinkedServiceOutput {
	return i.ToSapCloudForCustomerLinkedServiceOutputWithContext(context.Background())
}

func (i SapCloudForCustomerLinkedServiceArgs) ToSapCloudForCustomerLinkedServiceOutputWithContext(ctx context.Context) SapCloudForCustomerLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapCloudForCustomerLinkedServiceOutput)
}

// Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedServiceOutput struct{ *pulumi.OutputState }

func (SapCloudForCustomerLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerLinkedService)(nil)).Elem()
}

func (o SapCloudForCustomerLinkedServiceOutput) ToSapCloudForCustomerLinkedServiceOutput() SapCloudForCustomerLinkedServiceOutput {
	return o
}

func (o SapCloudForCustomerLinkedServiceOutput) ToSapCloudForCustomerLinkedServiceOutputWithContext(ctx context.Context) SapCloudForCustomerLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapCloudForCustomerLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SapCloudForCustomerLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SapCloudForCustomerLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
func (o SapCloudForCustomerLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SapCloudForCustomerLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password for Basic authentication.
func (o SapCloudForCustomerLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SapCloudForCustomerLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
func (o SapCloudForCustomerLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The username for Basic authentication. Type: string (or Expression with resultType string).
func (o SapCloudForCustomerLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// SapCloudForCustomerLinkedServiceResponseInput is an input type that accepts SapCloudForCustomerLinkedServiceResponseArgs and SapCloudForCustomerLinkedServiceResponseOutput values.
// You can construct a concrete instance of `SapCloudForCustomerLinkedServiceResponseInput` via:
//
//          SapCloudForCustomerLinkedServiceResponseArgs{...}
type SapCloudForCustomerLinkedServiceResponseInput interface {
	pulumi.Input

	ToSapCloudForCustomerLinkedServiceResponseOutput() SapCloudForCustomerLinkedServiceResponseOutput
	ToSapCloudForCustomerLinkedServiceResponseOutputWithContext(context.Context) SapCloudForCustomerLinkedServiceResponseOutput
}

// Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (SapCloudForCustomerLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerLinkedServiceResponse)(nil)).Elem()
}

func (i SapCloudForCustomerLinkedServiceResponseArgs) ToSapCloudForCustomerLinkedServiceResponseOutput() SapCloudForCustomerLinkedServiceResponseOutput {
	return i.ToSapCloudForCustomerLinkedServiceResponseOutputWithContext(context.Background())
}

func (i SapCloudForCustomerLinkedServiceResponseArgs) ToSapCloudForCustomerLinkedServiceResponseOutputWithContext(ctx context.Context) SapCloudForCustomerLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapCloudForCustomerLinkedServiceResponseOutput)
}

// Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SapCloudForCustomerLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerLinkedServiceResponse)(nil)).Elem()
}

func (o SapCloudForCustomerLinkedServiceResponseOutput) ToSapCloudForCustomerLinkedServiceResponseOutput() SapCloudForCustomerLinkedServiceResponseOutput {
	return o
}

func (o SapCloudForCustomerLinkedServiceResponseOutput) ToSapCloudForCustomerLinkedServiceResponseOutputWithContext(ctx context.Context) SapCloudForCustomerLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapCloudForCustomerLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SapCloudForCustomerLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SapCloudForCustomerLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
func (o SapCloudForCustomerLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SapCloudForCustomerLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The password for Basic authentication.
func (o SapCloudForCustomerLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SapCloudForCustomerLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
func (o SapCloudForCustomerLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The username for Basic authentication. Type: string (or Expression with resultType string).
func (o SapCloudForCustomerLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SapCloudForCustomerResourceDatasetInput is an input type that accepts SapCloudForCustomerResourceDatasetArgs and SapCloudForCustomerResourceDatasetOutput values.
// You can construct a concrete instance of `SapCloudForCustomerResourceDatasetInput` via:
//
//          SapCloudForCustomerResourceDatasetArgs{...}
type SapCloudForCustomerResourceDatasetInput interface {
	pulumi.Input

	ToSapCloudForCustomerResourceDatasetOutput() SapCloudForCustomerResourceDatasetOutput
	ToSapCloudForCustomerResourceDatasetOutputWithContext(context.Context) SapCloudForCustomerResourceDatasetOutput
}

// The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
	Path pulumi.Input `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapCloudForCustomerResourceDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerResourceDataset)(nil)).Elem()
}

func (i SapCloudForCustomerResourceDatasetArgs) ToSapCloudForCustomerResourceDatasetOutput() SapCloudForCustomerResourceDatasetOutput {
	return i.ToSapCloudForCustomerResourceDatasetOutputWithContext(context.Background())
}

func (i SapCloudForCustomerResourceDatasetArgs) ToSapCloudForCustomerResourceDatasetOutputWithContext(ctx context.Context) SapCloudForCustomerResourceDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapCloudForCustomerResourceDatasetOutput)
}

// The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDatasetOutput struct{ *pulumi.OutputState }

func (SapCloudForCustomerResourceDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerResourceDataset)(nil)).Elem()
}

func (o SapCloudForCustomerResourceDatasetOutput) ToSapCloudForCustomerResourceDatasetOutput() SapCloudForCustomerResourceDatasetOutput {
	return o
}

func (o SapCloudForCustomerResourceDatasetOutput) ToSapCloudForCustomerResourceDatasetOutputWithContext(ctx context.Context) SapCloudForCustomerResourceDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapCloudForCustomerResourceDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapCloudForCustomerResourceDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapCloudForCustomerResourceDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SapCloudForCustomerResourceDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SapCloudForCustomerResourceDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
func (o SapCloudForCustomerResourceDatasetOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDataset) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapCloudForCustomerResourceDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapCloudForCustomerResourceDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SapCloudForCustomerResourceDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SapCloudForCustomerResourceDatasetResponseInput is an input type that accepts SapCloudForCustomerResourceDatasetResponseArgs and SapCloudForCustomerResourceDatasetResponseOutput values.
// You can construct a concrete instance of `SapCloudForCustomerResourceDatasetResponseInput` via:
//
//          SapCloudForCustomerResourceDatasetResponseArgs{...}
type SapCloudForCustomerResourceDatasetResponseInput interface {
	pulumi.Input

	ToSapCloudForCustomerResourceDatasetResponseOutput() SapCloudForCustomerResourceDatasetResponseOutput
	ToSapCloudForCustomerResourceDatasetResponseOutputWithContext(context.Context) SapCloudForCustomerResourceDatasetResponseOutput
}

// The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
	Path pulumi.Input `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapCloudForCustomerResourceDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerResourceDatasetResponse)(nil)).Elem()
}

func (i SapCloudForCustomerResourceDatasetResponseArgs) ToSapCloudForCustomerResourceDatasetResponseOutput() SapCloudForCustomerResourceDatasetResponseOutput {
	return i.ToSapCloudForCustomerResourceDatasetResponseOutputWithContext(context.Background())
}

func (i SapCloudForCustomerResourceDatasetResponseArgs) ToSapCloudForCustomerResourceDatasetResponseOutputWithContext(ctx context.Context) SapCloudForCustomerResourceDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapCloudForCustomerResourceDatasetResponseOutput)
}

// The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDatasetResponseOutput struct{ *pulumi.OutputState }

func (SapCloudForCustomerResourceDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerResourceDatasetResponse)(nil)).Elem()
}

func (o SapCloudForCustomerResourceDatasetResponseOutput) ToSapCloudForCustomerResourceDatasetResponseOutput() SapCloudForCustomerResourceDatasetResponseOutput {
	return o
}

func (o SapCloudForCustomerResourceDatasetResponseOutput) ToSapCloudForCustomerResourceDatasetResponseOutputWithContext(ctx context.Context) SapCloudForCustomerResourceDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapCloudForCustomerResourceDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapCloudForCustomerResourceDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapCloudForCustomerResourceDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SapCloudForCustomerResourceDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SapCloudForCustomerResourceDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
func (o SapCloudForCustomerResourceDatasetResponseOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapCloudForCustomerResourceDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapCloudForCustomerResourceDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SapCloudForCustomerResourceDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
	Url string `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username *string `pulumi:"username"`
}

// SapEccLinkedServiceInput is an input type that accepts SapEccLinkedServiceArgs and SapEccLinkedServiceOutput values.
// You can construct a concrete instance of `SapEccLinkedServiceInput` via:
//
//          SapEccLinkedServiceArgs{...}
type SapEccLinkedServiceInput interface {
	pulumi.Input

	ToSapEccLinkedServiceOutput() SapEccLinkedServiceOutput
	ToSapEccLinkedServiceOutputWithContext(context.Context) SapEccLinkedServiceOutput
}

// Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
	Url pulumi.StringInput `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (SapEccLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccLinkedService)(nil)).Elem()
}

func (i SapEccLinkedServiceArgs) ToSapEccLinkedServiceOutput() SapEccLinkedServiceOutput {
	return i.ToSapEccLinkedServiceOutputWithContext(context.Background())
}

func (i SapEccLinkedServiceArgs) ToSapEccLinkedServiceOutputWithContext(ctx context.Context) SapEccLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapEccLinkedServiceOutput)
}

// Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedServiceOutput struct{ *pulumi.OutputState }

func (SapEccLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccLinkedService)(nil)).Elem()
}

func (o SapEccLinkedServiceOutput) ToSapEccLinkedServiceOutput() SapEccLinkedServiceOutput {
	return o
}

func (o SapEccLinkedServiceOutput) ToSapEccLinkedServiceOutputWithContext(ctx context.Context) SapEccLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapEccLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapEccLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SapEccLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SapEccLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SapEccLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapEccLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
func (o SapEccLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapEccLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SapEccLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapEccLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password for Basic authentication.
func (o SapEccLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SapEccLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapEccLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
func (o SapEccLinkedServiceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SapEccLinkedService) string { return v.Url }).(pulumi.StringOutput)
}

// The username for Basic authentication. Type: string (or Expression with resultType string).
func (o SapEccLinkedServiceOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapEccLinkedService) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
	Url string `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username *string `pulumi:"username"`
}

// SapEccLinkedServiceResponseInput is an input type that accepts SapEccLinkedServiceResponseArgs and SapEccLinkedServiceResponseOutput values.
// You can construct a concrete instance of `SapEccLinkedServiceResponseInput` via:
//
//          SapEccLinkedServiceResponseArgs{...}
type SapEccLinkedServiceResponseInput interface {
	pulumi.Input

	ToSapEccLinkedServiceResponseOutput() SapEccLinkedServiceResponseOutput
	ToSapEccLinkedServiceResponseOutputWithContext(context.Context) SapEccLinkedServiceResponseOutput
}

// Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
	Url pulumi.StringInput `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (SapEccLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccLinkedServiceResponse)(nil)).Elem()
}

func (i SapEccLinkedServiceResponseArgs) ToSapEccLinkedServiceResponseOutput() SapEccLinkedServiceResponseOutput {
	return i.ToSapEccLinkedServiceResponseOutputWithContext(context.Background())
}

func (i SapEccLinkedServiceResponseArgs) ToSapEccLinkedServiceResponseOutputWithContext(ctx context.Context) SapEccLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapEccLinkedServiceResponseOutput)
}

// Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SapEccLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccLinkedServiceResponse)(nil)).Elem()
}

func (o SapEccLinkedServiceResponseOutput) ToSapEccLinkedServiceResponseOutput() SapEccLinkedServiceResponseOutput {
	return o
}

func (o SapEccLinkedServiceResponseOutput) ToSapEccLinkedServiceResponseOutputWithContext(ctx context.Context) SapEccLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapEccLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SapEccLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SapEccLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
func (o SapEccLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SapEccLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password for Basic authentication.
func (o SapEccLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SapEccLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
func (o SapEccLinkedServiceResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) string { return v.Url }).(pulumi.StringOutput)
}

// The username for Basic authentication. Type: string (or Expression with resultType string).
func (o SapEccLinkedServiceResponseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// The path of the SAP ECC OData entity.
type SapEccResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SapEccResourceDatasetInput is an input type that accepts SapEccResourceDatasetArgs and SapEccResourceDatasetOutput values.
// You can construct a concrete instance of `SapEccResourceDatasetInput` via:
//
//          SapEccResourceDatasetArgs{...}
type SapEccResourceDatasetInput interface {
	pulumi.Input

	ToSapEccResourceDatasetOutput() SapEccResourceDatasetOutput
	ToSapEccResourceDatasetOutputWithContext(context.Context) SapEccResourceDatasetOutput
}

// The path of the SAP ECC OData entity.
type SapEccResourceDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
	Path pulumi.Input `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapEccResourceDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccResourceDataset)(nil)).Elem()
}

func (i SapEccResourceDatasetArgs) ToSapEccResourceDatasetOutput() SapEccResourceDatasetOutput {
	return i.ToSapEccResourceDatasetOutputWithContext(context.Background())
}

func (i SapEccResourceDatasetArgs) ToSapEccResourceDatasetOutputWithContext(ctx context.Context) SapEccResourceDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapEccResourceDatasetOutput)
}

// The path of the SAP ECC OData entity.
type SapEccResourceDatasetOutput struct{ *pulumi.OutputState }

func (SapEccResourceDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccResourceDataset)(nil)).Elem()
}

func (o SapEccResourceDatasetOutput) ToSapEccResourceDatasetOutput() SapEccResourceDatasetOutput {
	return o
}

func (o SapEccResourceDatasetOutput) ToSapEccResourceDatasetOutputWithContext(ctx context.Context) SapEccResourceDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapEccResourceDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapEccResourceDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapEccResourceDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapEccResourceDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapEccResourceDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SapEccResourceDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SapEccResourceDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SapEccResourceDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SapEccResourceDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapEccResourceDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
func (o SapEccResourceDatasetOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccResourceDataset) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapEccResourceDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccResourceDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapEccResourceDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccResourceDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SapEccResourceDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapEccResourceDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The path of the SAP ECC OData entity.
type SapEccResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SapEccResourceDatasetResponseInput is an input type that accepts SapEccResourceDatasetResponseArgs and SapEccResourceDatasetResponseOutput values.
// You can construct a concrete instance of `SapEccResourceDatasetResponseInput` via:
//
//          SapEccResourceDatasetResponseArgs{...}
type SapEccResourceDatasetResponseInput interface {
	pulumi.Input

	ToSapEccResourceDatasetResponseOutput() SapEccResourceDatasetResponseOutput
	ToSapEccResourceDatasetResponseOutputWithContext(context.Context) SapEccResourceDatasetResponseOutput
}

// The path of the SAP ECC OData entity.
type SapEccResourceDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
	Path pulumi.Input `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapEccResourceDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccResourceDatasetResponse)(nil)).Elem()
}

func (i SapEccResourceDatasetResponseArgs) ToSapEccResourceDatasetResponseOutput() SapEccResourceDatasetResponseOutput {
	return i.ToSapEccResourceDatasetResponseOutputWithContext(context.Background())
}

func (i SapEccResourceDatasetResponseArgs) ToSapEccResourceDatasetResponseOutputWithContext(ctx context.Context) SapEccResourceDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapEccResourceDatasetResponseOutput)
}

// The path of the SAP ECC OData entity.
type SapEccResourceDatasetResponseOutput struct{ *pulumi.OutputState }

func (SapEccResourceDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccResourceDatasetResponse)(nil)).Elem()
}

func (o SapEccResourceDatasetResponseOutput) ToSapEccResourceDatasetResponseOutput() SapEccResourceDatasetResponseOutput {
	return o
}

func (o SapEccResourceDatasetResponseOutput) ToSapEccResourceDatasetResponseOutputWithContext(ctx context.Context) SapEccResourceDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapEccResourceDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapEccResourceDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapEccResourceDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SapEccResourceDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SapEccResourceDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
func (o SapEccResourceDatasetResponseOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapEccResourceDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapEccResourceDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SapEccResourceDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SAP HANA Linked Service.
type SapHanaLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the SAP HANA server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP HANA server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP HANA server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SapHanaLinkedServiceInput is an input type that accepts SapHanaLinkedServiceArgs and SapHanaLinkedServiceOutput values.
// You can construct a concrete instance of `SapHanaLinkedServiceInput` via:
//
//          SapHanaLinkedServiceArgs{...}
type SapHanaLinkedServiceInput interface {
	pulumi.Input

	ToSapHanaLinkedServiceOutput() SapHanaLinkedServiceOutput
	ToSapHanaLinkedServiceOutputWithContext(context.Context) SapHanaLinkedServiceOutput
}

// SAP HANA Linked Service.
type SapHanaLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to be used to connect to the SAP HANA server.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to access the SAP HANA server.
	Password pulumi.Input `pulumi:"password"`
	// Host name of the SAP HANA server. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SapHanaLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaLinkedService)(nil)).Elem()
}

func (i SapHanaLinkedServiceArgs) ToSapHanaLinkedServiceOutput() SapHanaLinkedServiceOutput {
	return i.ToSapHanaLinkedServiceOutputWithContext(context.Background())
}

func (i SapHanaLinkedServiceArgs) ToSapHanaLinkedServiceOutputWithContext(ctx context.Context) SapHanaLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapHanaLinkedServiceOutput)
}

// SAP HANA Linked Service.
type SapHanaLinkedServiceOutput struct{ *pulumi.OutputState }

func (SapHanaLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaLinkedService)(nil)).Elem()
}

func (o SapHanaLinkedServiceOutput) ToSapHanaLinkedServiceOutput() SapHanaLinkedServiceOutput {
	return o
}

func (o SapHanaLinkedServiceOutput) ToSapHanaLinkedServiceOutputWithContext(ctx context.Context) SapHanaLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapHanaLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapHanaLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to be used to connect to the SAP HANA server.
func (o SapHanaLinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapHanaLinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o SapHanaLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SapHanaLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o SapHanaLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SapHanaLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapHanaLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SapHanaLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SapHanaLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapHanaLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to access the SAP HANA server.
func (o SapHanaLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP HANA server. Type: string (or Expression with resultType string).
func (o SapHanaLinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaLinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SapHanaLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapHanaLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
func (o SapHanaLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// SAP HANA Linked Service.
type SapHanaLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the SAP HANA server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP HANA server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP HANA server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SapHanaLinkedServiceResponseInput is an input type that accepts SapHanaLinkedServiceResponseArgs and SapHanaLinkedServiceResponseOutput values.
// You can construct a concrete instance of `SapHanaLinkedServiceResponseInput` via:
//
//          SapHanaLinkedServiceResponseArgs{...}
type SapHanaLinkedServiceResponseInput interface {
	pulumi.Input

	ToSapHanaLinkedServiceResponseOutput() SapHanaLinkedServiceResponseOutput
	ToSapHanaLinkedServiceResponseOutputWithContext(context.Context) SapHanaLinkedServiceResponseOutput
}

// SAP HANA Linked Service.
type SapHanaLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to be used to connect to the SAP HANA server.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password to access the SAP HANA server.
	Password pulumi.Input `pulumi:"password"`
	// Host name of the SAP HANA server. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SapHanaLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaLinkedServiceResponse)(nil)).Elem()
}

func (i SapHanaLinkedServiceResponseArgs) ToSapHanaLinkedServiceResponseOutput() SapHanaLinkedServiceResponseOutput {
	return i.ToSapHanaLinkedServiceResponseOutputWithContext(context.Background())
}

func (i SapHanaLinkedServiceResponseArgs) ToSapHanaLinkedServiceResponseOutputWithContext(ctx context.Context) SapHanaLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapHanaLinkedServiceResponseOutput)
}

// SAP HANA Linked Service.
type SapHanaLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SapHanaLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaLinkedServiceResponse)(nil)).Elem()
}

func (o SapHanaLinkedServiceResponseOutput) ToSapHanaLinkedServiceResponseOutput() SapHanaLinkedServiceResponseOutput {
	return o
}

func (o SapHanaLinkedServiceResponseOutput) ToSapHanaLinkedServiceResponseOutputWithContext(ctx context.Context) SapHanaLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapHanaLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to be used to connect to the SAP HANA server.
func (o SapHanaLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o SapHanaLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o SapHanaLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SapHanaLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SapHanaLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SapHanaLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to access the SAP HANA server.
func (o SapHanaLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP HANA server. Type: string (or Expression with resultType string).
func (o SapHanaLinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SapHanaLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
func (o SapHanaLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// SAP HANA Table properties.
type SapHanaTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of SAP HANA. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SapHanaTableDatasetInput is an input type that accepts SapHanaTableDatasetArgs and SapHanaTableDatasetOutput values.
// You can construct a concrete instance of `SapHanaTableDatasetInput` via:
//
//          SapHanaTableDatasetArgs{...}
type SapHanaTableDatasetInput interface {
	pulumi.Input

	ToSapHanaTableDatasetOutput() SapHanaTableDatasetOutput
	ToSapHanaTableDatasetOutputWithContext(context.Context) SapHanaTableDatasetOutput
}

// SAP HANA Table properties.
type SapHanaTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of SAP HANA. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapHanaTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaTableDataset)(nil)).Elem()
}

func (i SapHanaTableDatasetArgs) ToSapHanaTableDatasetOutput() SapHanaTableDatasetOutput {
	return i.ToSapHanaTableDatasetOutputWithContext(context.Background())
}

func (i SapHanaTableDatasetArgs) ToSapHanaTableDatasetOutputWithContext(ctx context.Context) SapHanaTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapHanaTableDatasetOutput)
}

// SAP HANA Table properties.
type SapHanaTableDatasetOutput struct{ *pulumi.OutputState }

func (SapHanaTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaTableDataset)(nil)).Elem()
}

func (o SapHanaTableDatasetOutput) ToSapHanaTableDatasetOutput() SapHanaTableDatasetOutput {
	return o
}

func (o SapHanaTableDatasetOutput) ToSapHanaTableDatasetOutputWithContext(ctx context.Context) SapHanaTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapHanaTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapHanaTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapHanaTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapHanaTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapHanaTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SapHanaTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SapHanaTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SapHanaTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SapHanaTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapHanaTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapHanaTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapHanaTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of SAP HANA. Type: string (or Expression with resultType string).
func (o SapHanaTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SapHanaTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapHanaTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// SAP HANA Table properties.
type SapHanaTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of SAP HANA. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SapHanaTableDatasetResponseInput is an input type that accepts SapHanaTableDatasetResponseArgs and SapHanaTableDatasetResponseOutput values.
// You can construct a concrete instance of `SapHanaTableDatasetResponseInput` via:
//
//          SapHanaTableDatasetResponseArgs{...}
type SapHanaTableDatasetResponseInput interface {
	pulumi.Input

	ToSapHanaTableDatasetResponseOutput() SapHanaTableDatasetResponseOutput
	ToSapHanaTableDatasetResponseOutputWithContext(context.Context) SapHanaTableDatasetResponseOutput
}

// SAP HANA Table properties.
type SapHanaTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of SAP HANA. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapHanaTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaTableDatasetResponse)(nil)).Elem()
}

func (i SapHanaTableDatasetResponseArgs) ToSapHanaTableDatasetResponseOutput() SapHanaTableDatasetResponseOutput {
	return i.ToSapHanaTableDatasetResponseOutputWithContext(context.Background())
}

func (i SapHanaTableDatasetResponseArgs) ToSapHanaTableDatasetResponseOutputWithContext(ctx context.Context) SapHanaTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapHanaTableDatasetResponseOutput)
}

// SAP HANA Table properties.
type SapHanaTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (SapHanaTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaTableDatasetResponse)(nil)).Elem()
}

func (o SapHanaTableDatasetResponseOutput) ToSapHanaTableDatasetResponseOutput() SapHanaTableDatasetResponseOutput {
	return o
}

func (o SapHanaTableDatasetResponseOutput) ToSapHanaTableDatasetResponseOutputWithContext(ctx context.Context) SapHanaTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapHanaTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapHanaTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapHanaTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapHanaTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapHanaTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SapHanaTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SapHanaTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SapHanaTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SapHanaTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapHanaTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapHanaTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapHanaTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of SAP HANA. Type: string (or Expression with resultType string).
func (o SapHanaTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SapHanaTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapHanaTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SAP Business Warehouse Open Hub Destination Linked Service.
type SapOpenHubLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the BW system where the open hub destination is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Language of the BW system where the open hub destination is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP BW server where the open hub destination is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the BW system where the open hub destination is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username to access the SAP BW server where the open hub destination is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SapOpenHubLinkedServiceInput is an input type that accepts SapOpenHubLinkedServiceArgs and SapOpenHubLinkedServiceOutput values.
// You can construct a concrete instance of `SapOpenHubLinkedServiceInput` via:
//
//          SapOpenHubLinkedServiceArgs{...}
type SapOpenHubLinkedServiceInput interface {
	pulumi.Input

	ToSapOpenHubLinkedServiceOutput() SapOpenHubLinkedServiceOutput
	ToSapOpenHubLinkedServiceOutputWithContext(context.Context) SapOpenHubLinkedServiceOutput
}

// SAP Business Warehouse Open Hub Destination Linked Service.
type SapOpenHubLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Client ID of the client on the BW system where the open hub destination is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Language of the BW system where the open hub destination is located. The default value is EN. Type: string (or Expression with resultType string).
	Language pulumi.Input `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup pulumi.Input `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer pulumi.Input `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService pulumi.Input `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to access the SAP BW server where the open hub destination is located.
	Password pulumi.Input `pulumi:"password"`
	// Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId pulumi.Input `pulumi:"systemId"`
	// System number of the BW system where the open hub destination is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber pulumi.Input `pulumi:"systemNumber"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username to access the SAP BW server where the open hub destination is located. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SapOpenHubLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOpenHubLinkedService)(nil)).Elem()
}

func (i SapOpenHubLinkedServiceArgs) ToSapOpenHubLinkedServiceOutput() SapOpenHubLinkedServiceOutput {
	return i.ToSapOpenHubLinkedServiceOutputWithContext(context.Background())
}

func (i SapOpenHubLinkedServiceArgs) ToSapOpenHubLinkedServiceOutputWithContext(ctx context.Context) SapOpenHubLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapOpenHubLinkedServiceOutput)
}

// SAP Business Warehouse Open Hub Destination Linked Service.
type SapOpenHubLinkedServiceOutput struct{ *pulumi.OutputState }

func (SapOpenHubLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOpenHubLinkedService)(nil)).Elem()
}

func (o SapOpenHubLinkedServiceOutput) ToSapOpenHubLinkedServiceOutput() SapOpenHubLinkedServiceOutput {
	return o
}

func (o SapOpenHubLinkedServiceOutput) ToSapOpenHubLinkedServiceOutputWithContext(ctx context.Context) SapOpenHubLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapOpenHubLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Client ID of the client on the BW system where the open hub destination is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SapOpenHubLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SapOpenHubLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Language of the BW system where the open hub destination is located. The default value is EN. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceOutput) Language() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.Language }).(pulumi.AnyOutput)
}

// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceOutput) LogonGroup() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.LogonGroup }).(pulumi.AnyOutput)
}

// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceOutput) MessageServer() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.MessageServer }).(pulumi.AnyOutput)
}

// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceOutput) MessageServerService() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.MessageServerService }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SapOpenHubLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to access the SAP BW server where the open hub destination is located.
func (o SapOpenHubLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceOutput) SystemId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.SystemId }).(pulumi.AnyOutput)
}

// System number of the BW system where the open hub destination is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceOutput) SystemNumber() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.SystemNumber }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SapOpenHubLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP BW server where the open hub destination is located. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// SAP Business Warehouse Open Hub Destination Linked Service.
type SapOpenHubLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the BW system where the open hub destination is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Language of the BW system where the open hub destination is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP BW server where the open hub destination is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the BW system where the open hub destination is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username to access the SAP BW server where the open hub destination is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SapOpenHubLinkedServiceResponseInput is an input type that accepts SapOpenHubLinkedServiceResponseArgs and SapOpenHubLinkedServiceResponseOutput values.
// You can construct a concrete instance of `SapOpenHubLinkedServiceResponseInput` via:
//
//          SapOpenHubLinkedServiceResponseArgs{...}
type SapOpenHubLinkedServiceResponseInput interface {
	pulumi.Input

	ToSapOpenHubLinkedServiceResponseOutput() SapOpenHubLinkedServiceResponseOutput
	ToSapOpenHubLinkedServiceResponseOutputWithContext(context.Context) SapOpenHubLinkedServiceResponseOutput
}

// SAP Business Warehouse Open Hub Destination Linked Service.
type SapOpenHubLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Client ID of the client on the BW system where the open hub destination is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Language of the BW system where the open hub destination is located. The default value is EN. Type: string (or Expression with resultType string).
	Language pulumi.Input `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup pulumi.Input `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer pulumi.Input `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService pulumi.Input `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password to access the SAP BW server where the open hub destination is located.
	Password pulumi.Input `pulumi:"password"`
	// Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId pulumi.Input `pulumi:"systemId"`
	// System number of the BW system where the open hub destination is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber pulumi.Input `pulumi:"systemNumber"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username to access the SAP BW server where the open hub destination is located. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SapOpenHubLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOpenHubLinkedServiceResponse)(nil)).Elem()
}

func (i SapOpenHubLinkedServiceResponseArgs) ToSapOpenHubLinkedServiceResponseOutput() SapOpenHubLinkedServiceResponseOutput {
	return i.ToSapOpenHubLinkedServiceResponseOutputWithContext(context.Background())
}

func (i SapOpenHubLinkedServiceResponseArgs) ToSapOpenHubLinkedServiceResponseOutputWithContext(ctx context.Context) SapOpenHubLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapOpenHubLinkedServiceResponseOutput)
}

// SAP Business Warehouse Open Hub Destination Linked Service.
type SapOpenHubLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SapOpenHubLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOpenHubLinkedServiceResponse)(nil)).Elem()
}

func (o SapOpenHubLinkedServiceResponseOutput) ToSapOpenHubLinkedServiceResponseOutput() SapOpenHubLinkedServiceResponseOutput {
	return o
}

func (o SapOpenHubLinkedServiceResponseOutput) ToSapOpenHubLinkedServiceResponseOutputWithContext(ctx context.Context) SapOpenHubLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapOpenHubLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Client ID of the client on the BW system where the open hub destination is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SapOpenHubLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SapOpenHubLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Language of the BW system where the open hub destination is located. The default value is EN. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceResponseOutput) Language() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.Language }).(pulumi.AnyOutput)
}

// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceResponseOutput) LogonGroup() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.LogonGroup }).(pulumi.AnyOutput)
}

// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceResponseOutput) MessageServer() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.MessageServer }).(pulumi.AnyOutput)
}

// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceResponseOutput) MessageServerService() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.MessageServerService }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SapOpenHubLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to access the SAP BW server where the open hub destination is located.
func (o SapOpenHubLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceResponseOutput) SystemId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.SystemId }).(pulumi.AnyOutput)
}

// System number of the BW system where the open hub destination is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceResponseOutput) SystemNumber() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.SystemNumber }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SapOpenHubLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP BW server where the open hub destination is located. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Sap Business Warehouse Open Hub Destination Table properties.
type SapOpenHubTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
	BaseRequestId interface{} `pulumi:"baseRequestId"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
	ExcludeLastRequest interface{} `pulumi:"excludeLastRequest"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The name of the Open Hub Destination with destination type as Database Table. Type: string (or Expression with resultType string).
	OpenHubDestinationName interface{} `pulumi:"openHubDestinationName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SapOpenHubTableDatasetInput is an input type that accepts SapOpenHubTableDatasetArgs and SapOpenHubTableDatasetOutput values.
// You can construct a concrete instance of `SapOpenHubTableDatasetInput` via:
//
//          SapOpenHubTableDatasetArgs{...}
type SapOpenHubTableDatasetInput interface {
	pulumi.Input

	ToSapOpenHubTableDatasetOutput() SapOpenHubTableDatasetOutput
	ToSapOpenHubTableDatasetOutputWithContext(context.Context) SapOpenHubTableDatasetOutput
}

// Sap Business Warehouse Open Hub Destination Table properties.
type SapOpenHubTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
	BaseRequestId pulumi.Input `pulumi:"baseRequestId"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
	ExcludeLastRequest pulumi.Input `pulumi:"excludeLastRequest"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The name of the Open Hub Destination with destination type as Database Table. Type: string (or Expression with resultType string).
	OpenHubDestinationName pulumi.Input `pulumi:"openHubDestinationName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapOpenHubTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOpenHubTableDataset)(nil)).Elem()
}

func (i SapOpenHubTableDatasetArgs) ToSapOpenHubTableDatasetOutput() SapOpenHubTableDatasetOutput {
	return i.ToSapOpenHubTableDatasetOutputWithContext(context.Background())
}

func (i SapOpenHubTableDatasetArgs) ToSapOpenHubTableDatasetOutputWithContext(ctx context.Context) SapOpenHubTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapOpenHubTableDatasetOutput)
}

// Sap Business Warehouse Open Hub Destination Table properties.
type SapOpenHubTableDatasetOutput struct{ *pulumi.OutputState }

func (SapOpenHubTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOpenHubTableDataset)(nil)).Elem()
}

func (o SapOpenHubTableDatasetOutput) ToSapOpenHubTableDatasetOutput() SapOpenHubTableDatasetOutput {
	return o
}

func (o SapOpenHubTableDatasetOutput) ToSapOpenHubTableDatasetOutputWithContext(ctx context.Context) SapOpenHubTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapOpenHubTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
func (o SapOpenHubTableDatasetOutput) BaseRequestId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) interface{} { return v.BaseRequestId }).(pulumi.AnyOutput)
}

// Dataset description.
func (o SapOpenHubTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SapOpenHubTableDatasetOutput) ExcludeLastRequest() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) interface{} { return v.ExcludeLastRequest }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapOpenHubTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SapOpenHubTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The name of the Open Hub Destination with destination type as Database Table. Type: string (or Expression with resultType string).
func (o SapOpenHubTableDatasetOutput) OpenHubDestinationName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) interface{} { return v.OpenHubDestinationName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SapOpenHubTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapOpenHubTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapOpenHubTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SapOpenHubTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Sap Business Warehouse Open Hub Destination Table properties.
type SapOpenHubTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
	BaseRequestId interface{} `pulumi:"baseRequestId"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
	ExcludeLastRequest interface{} `pulumi:"excludeLastRequest"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The name of the Open Hub Destination with destination type as Database Table. Type: string (or Expression with resultType string).
	OpenHubDestinationName interface{} `pulumi:"openHubDestinationName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SapOpenHubTableDatasetResponseInput is an input type that accepts SapOpenHubTableDatasetResponseArgs and SapOpenHubTableDatasetResponseOutput values.
// You can construct a concrete instance of `SapOpenHubTableDatasetResponseInput` via:
//
//          SapOpenHubTableDatasetResponseArgs{...}
type SapOpenHubTableDatasetResponseInput interface {
	pulumi.Input

	ToSapOpenHubTableDatasetResponseOutput() SapOpenHubTableDatasetResponseOutput
	ToSapOpenHubTableDatasetResponseOutputWithContext(context.Context) SapOpenHubTableDatasetResponseOutput
}

// Sap Business Warehouse Open Hub Destination Table properties.
type SapOpenHubTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
	BaseRequestId pulumi.Input `pulumi:"baseRequestId"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
	ExcludeLastRequest pulumi.Input `pulumi:"excludeLastRequest"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// The name of the Open Hub Destination with destination type as Database Table. Type: string (or Expression with resultType string).
	OpenHubDestinationName pulumi.Input `pulumi:"openHubDestinationName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapOpenHubTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOpenHubTableDatasetResponse)(nil)).Elem()
}

func (i SapOpenHubTableDatasetResponseArgs) ToSapOpenHubTableDatasetResponseOutput() SapOpenHubTableDatasetResponseOutput {
	return i.ToSapOpenHubTableDatasetResponseOutputWithContext(context.Background())
}

func (i SapOpenHubTableDatasetResponseArgs) ToSapOpenHubTableDatasetResponseOutputWithContext(ctx context.Context) SapOpenHubTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapOpenHubTableDatasetResponseOutput)
}

// Sap Business Warehouse Open Hub Destination Table properties.
type SapOpenHubTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (SapOpenHubTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOpenHubTableDatasetResponse)(nil)).Elem()
}

func (o SapOpenHubTableDatasetResponseOutput) ToSapOpenHubTableDatasetResponseOutput() SapOpenHubTableDatasetResponseOutput {
	return o
}

func (o SapOpenHubTableDatasetResponseOutput) ToSapOpenHubTableDatasetResponseOutputWithContext(ctx context.Context) SapOpenHubTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapOpenHubTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
func (o SapOpenHubTableDatasetResponseOutput) BaseRequestId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) interface{} { return v.BaseRequestId }).(pulumi.AnyOutput)
}

// Dataset description.
func (o SapOpenHubTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SapOpenHubTableDatasetResponseOutput) ExcludeLastRequest() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) interface{} { return v.ExcludeLastRequest }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapOpenHubTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SapOpenHubTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The name of the Open Hub Destination with destination type as Database Table. Type: string (or Expression with resultType string).
func (o SapOpenHubTableDatasetResponseOutput) OpenHubDestinationName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) interface{} { return v.OpenHubDestinationName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SapOpenHubTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapOpenHubTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapOpenHubTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SapOpenHubTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SAP Table Linked Service.
type SapTableLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP server where the table is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncLibraryPath interface{} `pulumi:"sncLibraryPath"`
	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
	SncMode interface{} `pulumi:"sncMode"`
	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName interface{} `pulumi:"sncMyName"`
	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncPartnerName interface{} `pulumi:"sncPartnerName"`
	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop interface{} `pulumi:"sncQop"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SapTableLinkedServiceInput is an input type that accepts SapTableLinkedServiceArgs and SapTableLinkedServiceOutput values.
// You can construct a concrete instance of `SapTableLinkedServiceInput` via:
//
//          SapTableLinkedServiceArgs{...}
type SapTableLinkedServiceInput interface {
	pulumi.Input

	ToSapTableLinkedServiceOutput() SapTableLinkedServiceOutput
	ToSapTableLinkedServiceOutputWithContext(context.Context) SapTableLinkedServiceOutput
}

// SAP Table Linked Service.
type SapTableLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
	Language pulumi.Input `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup pulumi.Input `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer pulumi.Input `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService pulumi.Input `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to access the SAP server where the table is located.
	Password pulumi.Input `pulumi:"password"`
	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncLibraryPath pulumi.Input `pulumi:"sncLibraryPath"`
	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
	SncMode pulumi.Input `pulumi:"sncMode"`
	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName pulumi.Input `pulumi:"sncMyName"`
	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncPartnerName pulumi.Input `pulumi:"sncPartnerName"`
	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop pulumi.Input `pulumi:"sncQop"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId pulumi.Input `pulumi:"systemId"`
	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber pulumi.Input `pulumi:"systemNumber"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SapTableLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTableLinkedService)(nil)).Elem()
}

func (i SapTableLinkedServiceArgs) ToSapTableLinkedServiceOutput() SapTableLinkedServiceOutput {
	return i.ToSapTableLinkedServiceOutputWithContext(context.Background())
}

func (i SapTableLinkedServiceArgs) ToSapTableLinkedServiceOutputWithContext(ctx context.Context) SapTableLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapTableLinkedServiceOutput)
}

// SAP Table Linked Service.
type SapTableLinkedServiceOutput struct{ *pulumi.OutputState }

func (SapTableLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTableLinkedService)(nil)).Elem()
}

func (o SapTableLinkedServiceOutput) ToSapTableLinkedServiceOutput() SapTableLinkedServiceOutput {
	return o
}

func (o SapTableLinkedServiceOutput) ToSapTableLinkedServiceOutputWithContext(ctx context.Context) SapTableLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapTableLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapTableLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SapTableLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SapTableLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SapTableLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapTableLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) Language() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.Language }).(pulumi.AnyOutput)
}

// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) LogonGroup() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.LogonGroup }).(pulumi.AnyOutput)
}

// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) MessageServer() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.MessageServer }).(pulumi.AnyOutput)
}

// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) MessageServerService() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.MessageServerService }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SapTableLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapTableLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to access the SAP server where the table is located.
func (o SapTableLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) SncLibraryPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.SncLibraryPath }).(pulumi.AnyOutput)
}

// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) SncMode() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.SncMode }).(pulumi.AnyOutput)
}

// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) SncMyName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.SncMyName }).(pulumi.AnyOutput)
}

// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) SncPartnerName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.SncPartnerName }).(pulumi.AnyOutput)
}

// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) SncQop() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.SncQop }).(pulumi.AnyOutput)
}

// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) SystemId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.SystemId }).(pulumi.AnyOutput)
}

// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) SystemNumber() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.SystemNumber }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SapTableLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapTableLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// SAP Table Linked Service.
type SapTableLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP server where the table is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncLibraryPath interface{} `pulumi:"sncLibraryPath"`
	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
	SncMode interface{} `pulumi:"sncMode"`
	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName interface{} `pulumi:"sncMyName"`
	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncPartnerName interface{} `pulumi:"sncPartnerName"`
	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop interface{} `pulumi:"sncQop"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SapTableLinkedServiceResponseInput is an input type that accepts SapTableLinkedServiceResponseArgs and SapTableLinkedServiceResponseOutput values.
// You can construct a concrete instance of `SapTableLinkedServiceResponseInput` via:
//
//          SapTableLinkedServiceResponseArgs{...}
type SapTableLinkedServiceResponseInput interface {
	pulumi.Input

	ToSapTableLinkedServiceResponseOutput() SapTableLinkedServiceResponseOutput
	ToSapTableLinkedServiceResponseOutputWithContext(context.Context) SapTableLinkedServiceResponseOutput
}

// SAP Table Linked Service.
type SapTableLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
	Language pulumi.Input `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup pulumi.Input `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer pulumi.Input `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService pulumi.Input `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password to access the SAP server where the table is located.
	Password pulumi.Input `pulumi:"password"`
	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncLibraryPath pulumi.Input `pulumi:"sncLibraryPath"`
	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
	SncMode pulumi.Input `pulumi:"sncMode"`
	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName pulumi.Input `pulumi:"sncMyName"`
	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncPartnerName pulumi.Input `pulumi:"sncPartnerName"`
	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop pulumi.Input `pulumi:"sncQop"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId pulumi.Input `pulumi:"systemId"`
	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber pulumi.Input `pulumi:"systemNumber"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SapTableLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTableLinkedServiceResponse)(nil)).Elem()
}

func (i SapTableLinkedServiceResponseArgs) ToSapTableLinkedServiceResponseOutput() SapTableLinkedServiceResponseOutput {
	return i.ToSapTableLinkedServiceResponseOutputWithContext(context.Background())
}

func (i SapTableLinkedServiceResponseArgs) ToSapTableLinkedServiceResponseOutputWithContext(ctx context.Context) SapTableLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapTableLinkedServiceResponseOutput)
}

// SAP Table Linked Service.
type SapTableLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SapTableLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTableLinkedServiceResponse)(nil)).Elem()
}

func (o SapTableLinkedServiceResponseOutput) ToSapTableLinkedServiceResponseOutput() SapTableLinkedServiceResponseOutput {
	return o
}

func (o SapTableLinkedServiceResponseOutput) ToSapTableLinkedServiceResponseOutputWithContext(ctx context.Context) SapTableLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapTableLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SapTableLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SapTableLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) Language() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.Language }).(pulumi.AnyOutput)
}

// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) LogonGroup() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.LogonGroup }).(pulumi.AnyOutput)
}

// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) MessageServer() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.MessageServer }).(pulumi.AnyOutput)
}

// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) MessageServerService() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.MessageServerService }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SapTableLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to access the SAP server where the table is located.
func (o SapTableLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) SncLibraryPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.SncLibraryPath }).(pulumi.AnyOutput)
}

// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) SncMode() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.SncMode }).(pulumi.AnyOutput)
}

// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) SncMyName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.SncMyName }).(pulumi.AnyOutput)
}

// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) SncPartnerName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.SncPartnerName }).(pulumi.AnyOutput)
}

// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) SncQop() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.SncQop }).(pulumi.AnyOutput)
}

// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) SystemId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.SystemId }).(pulumi.AnyOutput)
}

// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) SystemNumber() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.SystemNumber }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SapTableLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// SAP Table Resource properties.
type SapTableResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of the SAP Table. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SapTableResourceDatasetInput is an input type that accepts SapTableResourceDatasetArgs and SapTableResourceDatasetOutput values.
// You can construct a concrete instance of `SapTableResourceDatasetInput` via:
//
//          SapTableResourceDatasetArgs{...}
type SapTableResourceDatasetInput interface {
	pulumi.Input

	ToSapTableResourceDatasetOutput() SapTableResourceDatasetOutput
	ToSapTableResourceDatasetOutputWithContext(context.Context) SapTableResourceDatasetOutput
}

// SAP Table Resource properties.
type SapTableResourceDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The name of the SAP Table. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapTableResourceDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTableResourceDataset)(nil)).Elem()
}

func (i SapTableResourceDatasetArgs) ToSapTableResourceDatasetOutput() SapTableResourceDatasetOutput {
	return i.ToSapTableResourceDatasetOutputWithContext(context.Background())
}

func (i SapTableResourceDatasetArgs) ToSapTableResourceDatasetOutputWithContext(ctx context.Context) SapTableResourceDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapTableResourceDatasetOutput)
}

// SAP Table Resource properties.
type SapTableResourceDatasetOutput struct{ *pulumi.OutputState }

func (SapTableResourceDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTableResourceDataset)(nil)).Elem()
}

func (o SapTableResourceDatasetOutput) ToSapTableResourceDatasetOutput() SapTableResourceDatasetOutput {
	return o
}

func (o SapTableResourceDatasetOutput) ToSapTableResourceDatasetOutputWithContext(ctx context.Context) SapTableResourceDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapTableResourceDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapTableResourceDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapTableResourceDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapTableResourceDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapTableResourceDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SapTableResourceDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SapTableResourceDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SapTableResourceDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SapTableResourceDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapTableResourceDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapTableResourceDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableResourceDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapTableResourceDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableResourceDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The name of the SAP Table. Type: string (or Expression with resultType string).
func (o SapTableResourceDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableResourceDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SapTableResourceDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapTableResourceDataset) string { return v.Type }).(pulumi.StringOutput)
}

// SAP Table Resource properties.
type SapTableResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of the SAP Table. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SapTableResourceDatasetResponseInput is an input type that accepts SapTableResourceDatasetResponseArgs and SapTableResourceDatasetResponseOutput values.
// You can construct a concrete instance of `SapTableResourceDatasetResponseInput` via:
//
//          SapTableResourceDatasetResponseArgs{...}
type SapTableResourceDatasetResponseInput interface {
	pulumi.Input

	ToSapTableResourceDatasetResponseOutput() SapTableResourceDatasetResponseOutput
	ToSapTableResourceDatasetResponseOutputWithContext(context.Context) SapTableResourceDatasetResponseOutput
}

// SAP Table Resource properties.
type SapTableResourceDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The name of the SAP Table. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapTableResourceDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTableResourceDatasetResponse)(nil)).Elem()
}

func (i SapTableResourceDatasetResponseArgs) ToSapTableResourceDatasetResponseOutput() SapTableResourceDatasetResponseOutput {
	return i.ToSapTableResourceDatasetResponseOutputWithContext(context.Background())
}

func (i SapTableResourceDatasetResponseArgs) ToSapTableResourceDatasetResponseOutputWithContext(ctx context.Context) SapTableResourceDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapTableResourceDatasetResponseOutput)
}

// SAP Table Resource properties.
type SapTableResourceDatasetResponseOutput struct{ *pulumi.OutputState }

func (SapTableResourceDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTableResourceDatasetResponse)(nil)).Elem()
}

func (o SapTableResourceDatasetResponseOutput) ToSapTableResourceDatasetResponseOutput() SapTableResourceDatasetResponseOutput {
	return o
}

func (o SapTableResourceDatasetResponseOutput) ToSapTableResourceDatasetResponseOutputWithContext(ctx context.Context) SapTableResourceDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapTableResourceDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapTableResourceDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapTableResourceDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapTableResourceDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapTableResourceDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SapTableResourceDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SapTableResourceDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SapTableResourceDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SapTableResourceDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapTableResourceDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapTableResourceDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableResourceDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapTableResourceDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableResourceDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The name of the SAP Table. Type: string (or Expression with resultType string).
func (o SapTableResourceDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableResourceDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SapTableResourceDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapTableResourceDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptAction struct {
	// The user provided name of the script action.
	Name string `pulumi:"name"`
	// The parameters for the script action.
	Parameters *string `pulumi:"parameters"`
	// The node types on which the script action should be executed.
	Roles string `pulumi:"roles"`
	// The URI for the script action.
	Uri string `pulumi:"uri"`
}

// ScriptActionInput is an input type that accepts ScriptActionArgs and ScriptActionOutput values.
// You can construct a concrete instance of `ScriptActionInput` via:
//
//          ScriptActionArgs{...}
type ScriptActionInput interface {
	pulumi.Input

	ToScriptActionOutput() ScriptActionOutput
	ToScriptActionOutputWithContext(context.Context) ScriptActionOutput
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptActionArgs struct {
	// The user provided name of the script action.
	Name pulumi.StringInput `pulumi:"name"`
	// The parameters for the script action.
	Parameters pulumi.StringPtrInput `pulumi:"parameters"`
	// The node types on which the script action should be executed.
	Roles pulumi.StringInput `pulumi:"roles"`
	// The URI for the script action.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (ScriptActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptAction)(nil)).Elem()
}

func (i ScriptActionArgs) ToScriptActionOutput() ScriptActionOutput {
	return i.ToScriptActionOutputWithContext(context.Background())
}

func (i ScriptActionArgs) ToScriptActionOutputWithContext(ctx context.Context) ScriptActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActionOutput)
}

// ScriptActionArrayInput is an input type that accepts ScriptActionArray and ScriptActionArrayOutput values.
// You can construct a concrete instance of `ScriptActionArrayInput` via:
//
//          ScriptActionArray{ ScriptActionArgs{...} }
type ScriptActionArrayInput interface {
	pulumi.Input

	ToScriptActionArrayOutput() ScriptActionArrayOutput
	ToScriptActionArrayOutputWithContext(context.Context) ScriptActionArrayOutput
}

type ScriptActionArray []ScriptActionInput

func (ScriptActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptAction)(nil)).Elem()
}

func (i ScriptActionArray) ToScriptActionArrayOutput() ScriptActionArrayOutput {
	return i.ToScriptActionArrayOutputWithContext(context.Background())
}

func (i ScriptActionArray) ToScriptActionArrayOutputWithContext(ctx context.Context) ScriptActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActionArrayOutput)
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptActionOutput struct{ *pulumi.OutputState }

func (ScriptActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptAction)(nil)).Elem()
}

func (o ScriptActionOutput) ToScriptActionOutput() ScriptActionOutput {
	return o
}

func (o ScriptActionOutput) ToScriptActionOutputWithContext(ctx context.Context) ScriptActionOutput {
	return o
}

// The user provided name of the script action.
func (o ScriptActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptAction) string { return v.Name }).(pulumi.StringOutput)
}

// The parameters for the script action.
func (o ScriptActionOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptAction) *string { return v.Parameters }).(pulumi.StringPtrOutput)
}

// The node types on which the script action should be executed.
func (o ScriptActionOutput) Roles() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptAction) string { return v.Roles }).(pulumi.StringOutput)
}

// The URI for the script action.
func (o ScriptActionOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptAction) string { return v.Uri }).(pulumi.StringOutput)
}

type ScriptActionArrayOutput struct{ *pulumi.OutputState }

func (ScriptActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptAction)(nil)).Elem()
}

func (o ScriptActionArrayOutput) ToScriptActionArrayOutput() ScriptActionArrayOutput {
	return o
}

func (o ScriptActionArrayOutput) ToScriptActionArrayOutputWithContext(ctx context.Context) ScriptActionArrayOutput {
	return o
}

func (o ScriptActionArrayOutput) Index(i pulumi.IntInput) ScriptActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptAction {
		return vs[0].([]ScriptAction)[vs[1].(int)]
	}).(ScriptActionOutput)
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptActionResponse struct {
	// The user provided name of the script action.
	Name string `pulumi:"name"`
	// The parameters for the script action.
	Parameters *string `pulumi:"parameters"`
	// The node types on which the script action should be executed.
	Roles string `pulumi:"roles"`
	// The URI for the script action.
	Uri string `pulumi:"uri"`
}

// ScriptActionResponseInput is an input type that accepts ScriptActionResponseArgs and ScriptActionResponseOutput values.
// You can construct a concrete instance of `ScriptActionResponseInput` via:
//
//          ScriptActionResponseArgs{...}
type ScriptActionResponseInput interface {
	pulumi.Input

	ToScriptActionResponseOutput() ScriptActionResponseOutput
	ToScriptActionResponseOutputWithContext(context.Context) ScriptActionResponseOutput
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptActionResponseArgs struct {
	// The user provided name of the script action.
	Name pulumi.StringInput `pulumi:"name"`
	// The parameters for the script action.
	Parameters pulumi.StringPtrInput `pulumi:"parameters"`
	// The node types on which the script action should be executed.
	Roles pulumi.StringInput `pulumi:"roles"`
	// The URI for the script action.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (ScriptActionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActionResponse)(nil)).Elem()
}

func (i ScriptActionResponseArgs) ToScriptActionResponseOutput() ScriptActionResponseOutput {
	return i.ToScriptActionResponseOutputWithContext(context.Background())
}

func (i ScriptActionResponseArgs) ToScriptActionResponseOutputWithContext(ctx context.Context) ScriptActionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActionResponseOutput)
}

// ScriptActionResponseArrayInput is an input type that accepts ScriptActionResponseArray and ScriptActionResponseArrayOutput values.
// You can construct a concrete instance of `ScriptActionResponseArrayInput` via:
//
//          ScriptActionResponseArray{ ScriptActionResponseArgs{...} }
type ScriptActionResponseArrayInput interface {
	pulumi.Input

	ToScriptActionResponseArrayOutput() ScriptActionResponseArrayOutput
	ToScriptActionResponseArrayOutputWithContext(context.Context) ScriptActionResponseArrayOutput
}

type ScriptActionResponseArray []ScriptActionResponseInput

func (ScriptActionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptActionResponse)(nil)).Elem()
}

func (i ScriptActionResponseArray) ToScriptActionResponseArrayOutput() ScriptActionResponseArrayOutput {
	return i.ToScriptActionResponseArrayOutputWithContext(context.Background())
}

func (i ScriptActionResponseArray) ToScriptActionResponseArrayOutputWithContext(ctx context.Context) ScriptActionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActionResponseArrayOutput)
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptActionResponseOutput struct{ *pulumi.OutputState }

func (ScriptActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActionResponse)(nil)).Elem()
}

func (o ScriptActionResponseOutput) ToScriptActionResponseOutput() ScriptActionResponseOutput {
	return o
}

func (o ScriptActionResponseOutput) ToScriptActionResponseOutputWithContext(ctx context.Context) ScriptActionResponseOutput {
	return o
}

// The user provided name of the script action.
func (o ScriptActionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The parameters for the script action.
func (o ScriptActionResponseOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptActionResponse) *string { return v.Parameters }).(pulumi.StringPtrOutput)
}

// The node types on which the script action should be executed.
func (o ScriptActionResponseOutput) Roles() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionResponse) string { return v.Roles }).(pulumi.StringOutput)
}

// The URI for the script action.
func (o ScriptActionResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type ScriptActionResponseArrayOutput struct{ *pulumi.OutputState }

func (ScriptActionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptActionResponse)(nil)).Elem()
}

func (o ScriptActionResponseArrayOutput) ToScriptActionResponseArrayOutput() ScriptActionResponseArrayOutput {
	return o
}

func (o ScriptActionResponseArrayOutput) ToScriptActionResponseArrayOutputWithContext(ctx context.Context) ScriptActionResponseArrayOutput {
	return o
}

func (o ScriptActionResponseArrayOutput) Index(i pulumi.IntInput) ScriptActionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptActionResponse {
		return vs[0].([]ScriptActionResponse)[vs[1].(int)]
	}).(ScriptActionResponseOutput)
}

// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
type SecureString struct {
	// Type of the secret.
	Type string `pulumi:"type"`
	// Value of secure string.
	Value string `pulumi:"value"`
}

// SecureStringInput is an input type that accepts SecureStringArgs and SecureStringOutput values.
// You can construct a concrete instance of `SecureStringInput` via:
//
//          SecureStringArgs{...}
type SecureStringInput interface {
	pulumi.Input

	ToSecureStringOutput() SecureStringOutput
	ToSecureStringOutputWithContext(context.Context) SecureStringOutput
}

// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
type SecureStringArgs struct {
	// Type of the secret.
	Type pulumi.StringInput `pulumi:"type"`
	// Value of secure string.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SecureStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecureString)(nil)).Elem()
}

func (i SecureStringArgs) ToSecureStringOutput() SecureStringOutput {
	return i.ToSecureStringOutputWithContext(context.Background())
}

func (i SecureStringArgs) ToSecureStringOutputWithContext(ctx context.Context) SecureStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureStringOutput)
}

func (i SecureStringArgs) ToSecureStringPtrOutput() SecureStringPtrOutput {
	return i.ToSecureStringPtrOutputWithContext(context.Background())
}

func (i SecureStringArgs) ToSecureStringPtrOutputWithContext(ctx context.Context) SecureStringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureStringOutput).ToSecureStringPtrOutputWithContext(ctx)
}

// SecureStringPtrInput is an input type that accepts SecureStringArgs, SecureStringPtr and SecureStringPtrOutput values.
// You can construct a concrete instance of `SecureStringPtrInput` via:
//
//          SecureStringArgs{...}
//
//  or:
//
//          nil
type SecureStringPtrInput interface {
	pulumi.Input

	ToSecureStringPtrOutput() SecureStringPtrOutput
	ToSecureStringPtrOutputWithContext(context.Context) SecureStringPtrOutput
}

type secureStringPtrType SecureStringArgs

func SecureStringPtr(v *SecureStringArgs) SecureStringPtrInput {
	return (*secureStringPtrType)(v)
}

func (*secureStringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureString)(nil)).Elem()
}

func (i *secureStringPtrType) ToSecureStringPtrOutput() SecureStringPtrOutput {
	return i.ToSecureStringPtrOutputWithContext(context.Background())
}

func (i *secureStringPtrType) ToSecureStringPtrOutputWithContext(ctx context.Context) SecureStringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureStringPtrOutput)
}

// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
type SecureStringOutput struct{ *pulumi.OutputState }

func (SecureStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecureString)(nil)).Elem()
}

func (o SecureStringOutput) ToSecureStringOutput() SecureStringOutput {
	return o
}

func (o SecureStringOutput) ToSecureStringOutputWithContext(ctx context.Context) SecureStringOutput {
	return o
}

func (o SecureStringOutput) ToSecureStringPtrOutput() SecureStringPtrOutput {
	return o.ToSecureStringPtrOutputWithContext(context.Background())
}

func (o SecureStringOutput) ToSecureStringPtrOutputWithContext(ctx context.Context) SecureStringPtrOutput {
	return o.ApplyT(func(v SecureString) *SecureString {
		return &v
	}).(SecureStringPtrOutput)
}

// Type of the secret.
func (o SecureStringOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SecureString) string { return v.Type }).(pulumi.StringOutput)
}

// Value of secure string.
func (o SecureStringOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SecureString) string { return v.Value }).(pulumi.StringOutput)
}

type SecureStringPtrOutput struct{ *pulumi.OutputState }

func (SecureStringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureString)(nil)).Elem()
}

func (o SecureStringPtrOutput) ToSecureStringPtrOutput() SecureStringPtrOutput {
	return o
}

func (o SecureStringPtrOutput) ToSecureStringPtrOutputWithContext(ctx context.Context) SecureStringPtrOutput {
	return o
}

func (o SecureStringPtrOutput) Elem() SecureStringOutput {
	return o.ApplyT(func(v *SecureString) SecureString { return *v }).(SecureStringOutput)
}

// Type of the secret.
func (o SecureStringPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecureString) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Value of secure string.
func (o SecureStringPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecureString) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
type SecureStringResponse struct {
	// Type of the secret.
	Type string `pulumi:"type"`
	// Value of secure string.
	Value string `pulumi:"value"`
}

// SecureStringResponseInput is an input type that accepts SecureStringResponseArgs and SecureStringResponseOutput values.
// You can construct a concrete instance of `SecureStringResponseInput` via:
//
//          SecureStringResponseArgs{...}
type SecureStringResponseInput interface {
	pulumi.Input

	ToSecureStringResponseOutput() SecureStringResponseOutput
	ToSecureStringResponseOutputWithContext(context.Context) SecureStringResponseOutput
}

// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
type SecureStringResponseArgs struct {
	// Type of the secret.
	Type pulumi.StringInput `pulumi:"type"`
	// Value of secure string.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SecureStringResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecureStringResponse)(nil)).Elem()
}

func (i SecureStringResponseArgs) ToSecureStringResponseOutput() SecureStringResponseOutput {
	return i.ToSecureStringResponseOutputWithContext(context.Background())
}

func (i SecureStringResponseArgs) ToSecureStringResponseOutputWithContext(ctx context.Context) SecureStringResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureStringResponseOutput)
}

func (i SecureStringResponseArgs) ToSecureStringResponsePtrOutput() SecureStringResponsePtrOutput {
	return i.ToSecureStringResponsePtrOutputWithContext(context.Background())
}

func (i SecureStringResponseArgs) ToSecureStringResponsePtrOutputWithContext(ctx context.Context) SecureStringResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureStringResponseOutput).ToSecureStringResponsePtrOutputWithContext(ctx)
}

// SecureStringResponsePtrInput is an input type that accepts SecureStringResponseArgs, SecureStringResponsePtr and SecureStringResponsePtrOutput values.
// You can construct a concrete instance of `SecureStringResponsePtrInput` via:
//
//          SecureStringResponseArgs{...}
//
//  or:
//
//          nil
type SecureStringResponsePtrInput interface {
	pulumi.Input

	ToSecureStringResponsePtrOutput() SecureStringResponsePtrOutput
	ToSecureStringResponsePtrOutputWithContext(context.Context) SecureStringResponsePtrOutput
}

type secureStringResponsePtrType SecureStringResponseArgs

func SecureStringResponsePtr(v *SecureStringResponseArgs) SecureStringResponsePtrInput {
	return (*secureStringResponsePtrType)(v)
}

func (*secureStringResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureStringResponse)(nil)).Elem()
}

func (i *secureStringResponsePtrType) ToSecureStringResponsePtrOutput() SecureStringResponsePtrOutput {
	return i.ToSecureStringResponsePtrOutputWithContext(context.Background())
}

func (i *secureStringResponsePtrType) ToSecureStringResponsePtrOutputWithContext(ctx context.Context) SecureStringResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureStringResponsePtrOutput)
}

// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
type SecureStringResponseOutput struct{ *pulumi.OutputState }

func (SecureStringResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecureStringResponse)(nil)).Elem()
}

func (o SecureStringResponseOutput) ToSecureStringResponseOutput() SecureStringResponseOutput {
	return o
}

func (o SecureStringResponseOutput) ToSecureStringResponseOutputWithContext(ctx context.Context) SecureStringResponseOutput {
	return o
}

func (o SecureStringResponseOutput) ToSecureStringResponsePtrOutput() SecureStringResponsePtrOutput {
	return o.ToSecureStringResponsePtrOutputWithContext(context.Background())
}

func (o SecureStringResponseOutput) ToSecureStringResponsePtrOutputWithContext(ctx context.Context) SecureStringResponsePtrOutput {
	return o.ApplyT(func(v SecureStringResponse) *SecureStringResponse {
		return &v
	}).(SecureStringResponsePtrOutput)
}

// Type of the secret.
func (o SecureStringResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SecureStringResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Value of secure string.
func (o SecureStringResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SecureStringResponse) string { return v.Value }).(pulumi.StringOutput)
}

type SecureStringResponsePtrOutput struct{ *pulumi.OutputState }

func (SecureStringResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureStringResponse)(nil)).Elem()
}

func (o SecureStringResponsePtrOutput) ToSecureStringResponsePtrOutput() SecureStringResponsePtrOutput {
	return o
}

func (o SecureStringResponsePtrOutput) ToSecureStringResponsePtrOutputWithContext(ctx context.Context) SecureStringResponsePtrOutput {
	return o
}

func (o SecureStringResponsePtrOutput) Elem() SecureStringResponseOutput {
	return o.ApplyT(func(v *SecureStringResponse) SecureStringResponse { return *v }).(SecureStringResponseOutput)
}

// Type of the secret.
func (o SecureStringResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecureStringResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Value of secure string.
func (o SecureStringResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecureStringResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

// Self referenced tumbling window trigger dependency.
type SelfDependencyTumblingWindowTriggerReference struct {
	// Timespan applied to the start time of a tumbling window when evaluating dependency.
	Offset string `pulumi:"offset"`
	// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
	Size *string `pulumi:"size"`
	// The type of dependency reference.
	Type string `pulumi:"type"`
}

// SelfDependencyTumblingWindowTriggerReferenceInput is an input type that accepts SelfDependencyTumblingWindowTriggerReferenceArgs and SelfDependencyTumblingWindowTriggerReferenceOutput values.
// You can construct a concrete instance of `SelfDependencyTumblingWindowTriggerReferenceInput` via:
//
//          SelfDependencyTumblingWindowTriggerReferenceArgs{...}
type SelfDependencyTumblingWindowTriggerReferenceInput interface {
	pulumi.Input

	ToSelfDependencyTumblingWindowTriggerReferenceOutput() SelfDependencyTumblingWindowTriggerReferenceOutput
	ToSelfDependencyTumblingWindowTriggerReferenceOutputWithContext(context.Context) SelfDependencyTumblingWindowTriggerReferenceOutput
}

// Self referenced tumbling window trigger dependency.
type SelfDependencyTumblingWindowTriggerReferenceArgs struct {
	// Timespan applied to the start time of a tumbling window when evaluating dependency.
	Offset pulumi.StringInput `pulumi:"offset"`
	// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The type of dependency reference.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SelfDependencyTumblingWindowTriggerReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfDependencyTumblingWindowTriggerReference)(nil)).Elem()
}

func (i SelfDependencyTumblingWindowTriggerReferenceArgs) ToSelfDependencyTumblingWindowTriggerReferenceOutput() SelfDependencyTumblingWindowTriggerReferenceOutput {
	return i.ToSelfDependencyTumblingWindowTriggerReferenceOutputWithContext(context.Background())
}

func (i SelfDependencyTumblingWindowTriggerReferenceArgs) ToSelfDependencyTumblingWindowTriggerReferenceOutputWithContext(ctx context.Context) SelfDependencyTumblingWindowTriggerReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfDependencyTumblingWindowTriggerReferenceOutput)
}

// Self referenced tumbling window trigger dependency.
type SelfDependencyTumblingWindowTriggerReferenceOutput struct{ *pulumi.OutputState }

func (SelfDependencyTumblingWindowTriggerReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfDependencyTumblingWindowTriggerReference)(nil)).Elem()
}

func (o SelfDependencyTumblingWindowTriggerReferenceOutput) ToSelfDependencyTumblingWindowTriggerReferenceOutput() SelfDependencyTumblingWindowTriggerReferenceOutput {
	return o
}

func (o SelfDependencyTumblingWindowTriggerReferenceOutput) ToSelfDependencyTumblingWindowTriggerReferenceOutputWithContext(ctx context.Context) SelfDependencyTumblingWindowTriggerReferenceOutput {
	return o
}

// Timespan applied to the start time of a tumbling window when evaluating dependency.
func (o SelfDependencyTumblingWindowTriggerReferenceOutput) Offset() pulumi.StringOutput {
	return o.ApplyT(func(v SelfDependencyTumblingWindowTriggerReference) string { return v.Offset }).(pulumi.StringOutput)
}

// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
func (o SelfDependencyTumblingWindowTriggerReferenceOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfDependencyTumblingWindowTriggerReference) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The type of dependency reference.
func (o SelfDependencyTumblingWindowTriggerReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SelfDependencyTumblingWindowTriggerReference) string { return v.Type }).(pulumi.StringOutput)
}

// Self referenced tumbling window trigger dependency.
type SelfDependencyTumblingWindowTriggerReferenceResponse struct {
	// Timespan applied to the start time of a tumbling window when evaluating dependency.
	Offset string `pulumi:"offset"`
	// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
	Size *string `pulumi:"size"`
	// The type of dependency reference.
	Type string `pulumi:"type"`
}

// SelfDependencyTumblingWindowTriggerReferenceResponseInput is an input type that accepts SelfDependencyTumblingWindowTriggerReferenceResponseArgs and SelfDependencyTumblingWindowTriggerReferenceResponseOutput values.
// You can construct a concrete instance of `SelfDependencyTumblingWindowTriggerReferenceResponseInput` via:
//
//          SelfDependencyTumblingWindowTriggerReferenceResponseArgs{...}
type SelfDependencyTumblingWindowTriggerReferenceResponseInput interface {
	pulumi.Input

	ToSelfDependencyTumblingWindowTriggerReferenceResponseOutput() SelfDependencyTumblingWindowTriggerReferenceResponseOutput
	ToSelfDependencyTumblingWindowTriggerReferenceResponseOutputWithContext(context.Context) SelfDependencyTumblingWindowTriggerReferenceResponseOutput
}

// Self referenced tumbling window trigger dependency.
type SelfDependencyTumblingWindowTriggerReferenceResponseArgs struct {
	// Timespan applied to the start time of a tumbling window when evaluating dependency.
	Offset pulumi.StringInput `pulumi:"offset"`
	// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The type of dependency reference.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SelfDependencyTumblingWindowTriggerReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfDependencyTumblingWindowTriggerReferenceResponse)(nil)).Elem()
}

func (i SelfDependencyTumblingWindowTriggerReferenceResponseArgs) ToSelfDependencyTumblingWindowTriggerReferenceResponseOutput() SelfDependencyTumblingWindowTriggerReferenceResponseOutput {
	return i.ToSelfDependencyTumblingWindowTriggerReferenceResponseOutputWithContext(context.Background())
}

func (i SelfDependencyTumblingWindowTriggerReferenceResponseArgs) ToSelfDependencyTumblingWindowTriggerReferenceResponseOutputWithContext(ctx context.Context) SelfDependencyTumblingWindowTriggerReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfDependencyTumblingWindowTriggerReferenceResponseOutput)
}

// Self referenced tumbling window trigger dependency.
type SelfDependencyTumblingWindowTriggerReferenceResponseOutput struct{ *pulumi.OutputState }

func (SelfDependencyTumblingWindowTriggerReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfDependencyTumblingWindowTriggerReferenceResponse)(nil)).Elem()
}

func (o SelfDependencyTumblingWindowTriggerReferenceResponseOutput) ToSelfDependencyTumblingWindowTriggerReferenceResponseOutput() SelfDependencyTumblingWindowTriggerReferenceResponseOutput {
	return o
}

func (o SelfDependencyTumblingWindowTriggerReferenceResponseOutput) ToSelfDependencyTumblingWindowTriggerReferenceResponseOutputWithContext(ctx context.Context) SelfDependencyTumblingWindowTriggerReferenceResponseOutput {
	return o
}

// Timespan applied to the start time of a tumbling window when evaluating dependency.
func (o SelfDependencyTumblingWindowTriggerReferenceResponseOutput) Offset() pulumi.StringOutput {
	return o.ApplyT(func(v SelfDependencyTumblingWindowTriggerReferenceResponse) string { return v.Offset }).(pulumi.StringOutput)
}

// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
func (o SelfDependencyTumblingWindowTriggerReferenceResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfDependencyTumblingWindowTriggerReferenceResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The type of dependency reference.
func (o SelfDependencyTumblingWindowTriggerReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SelfDependencyTumblingWindowTriggerReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Self-hosted integration runtime.
type SelfHostedIntegrationRuntime struct {
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// The base definition of a linked integration runtime.
	LinkedInfo interface{} `pulumi:"linkedInfo"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// SelfHostedIntegrationRuntimeInput is an input type that accepts SelfHostedIntegrationRuntimeArgs and SelfHostedIntegrationRuntimeOutput values.
// You can construct a concrete instance of `SelfHostedIntegrationRuntimeInput` via:
//
//          SelfHostedIntegrationRuntimeArgs{...}
type SelfHostedIntegrationRuntimeInput interface {
	pulumi.Input

	ToSelfHostedIntegrationRuntimeOutput() SelfHostedIntegrationRuntimeOutput
	ToSelfHostedIntegrationRuntimeOutputWithContext(context.Context) SelfHostedIntegrationRuntimeOutput
}

// Self-hosted integration runtime.
type SelfHostedIntegrationRuntimeArgs struct {
	// Integration runtime description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The base definition of a linked integration runtime.
	LinkedInfo pulumi.Input `pulumi:"linkedInfo"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SelfHostedIntegrationRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfHostedIntegrationRuntime)(nil)).Elem()
}

func (i SelfHostedIntegrationRuntimeArgs) ToSelfHostedIntegrationRuntimeOutput() SelfHostedIntegrationRuntimeOutput {
	return i.ToSelfHostedIntegrationRuntimeOutputWithContext(context.Background())
}

func (i SelfHostedIntegrationRuntimeArgs) ToSelfHostedIntegrationRuntimeOutputWithContext(ctx context.Context) SelfHostedIntegrationRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfHostedIntegrationRuntimeOutput)
}

// Self-hosted integration runtime.
type SelfHostedIntegrationRuntimeOutput struct{ *pulumi.OutputState }

func (SelfHostedIntegrationRuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfHostedIntegrationRuntime)(nil)).Elem()
}

func (o SelfHostedIntegrationRuntimeOutput) ToSelfHostedIntegrationRuntimeOutput() SelfHostedIntegrationRuntimeOutput {
	return o
}

func (o SelfHostedIntegrationRuntimeOutput) ToSelfHostedIntegrationRuntimeOutputWithContext(ctx context.Context) SelfHostedIntegrationRuntimeOutput {
	return o
}

// Integration runtime description.
func (o SelfHostedIntegrationRuntimeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntime) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The base definition of a linked integration runtime.
func (o SelfHostedIntegrationRuntimeOutput) LinkedInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntime) interface{} { return v.LinkedInfo }).(pulumi.AnyOutput)
}

// Type of integration runtime.
func (o SelfHostedIntegrationRuntimeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntime) string { return v.Type }).(pulumi.StringOutput)
}

// Properties of Self-hosted integration runtime node.
type SelfHostedIntegrationRuntimeNodeResponse struct {
	// The integration runtime capabilities dictionary
	Capabilities map[string]string `pulumi:"capabilities"`
	// Maximum concurrent jobs on the integration runtime node.
	ConcurrentJobsLimit int `pulumi:"concurrentJobsLimit"`
	// The time at which the integration runtime will expire in ISO8601 format.
	ExpiryTime string `pulumi:"expiryTime"`
	// URI for the host machine of the integration runtime.
	HostServiceUri string `pulumi:"hostServiceUri"`
	// Indicates whether this node is the active dispatcher for integration runtime requests.
	IsActiveDispatcher bool `pulumi:"isActiveDispatcher"`
	// The most recent time at which the integration runtime was connected in ISO8601 format.
	LastConnectTime string `pulumi:"lastConnectTime"`
	// The last time for the integration runtime node update end.
	LastEndUpdateTime string `pulumi:"lastEndUpdateTime"`
	// The time the node last started up.
	LastStartTime string `pulumi:"lastStartTime"`
	// The last time for the integration runtime node update start.
	LastStartUpdateTime string `pulumi:"lastStartUpdateTime"`
	// The integration runtime node last stop time.
	LastStopTime string `pulumi:"lastStopTime"`
	// The result of the last integration runtime node update.
	LastUpdateResult string `pulumi:"lastUpdateResult"`
	// Machine name of the integration runtime node.
	MachineName string `pulumi:"machineName"`
	// The maximum concurrent jobs in this integration runtime.
	MaxConcurrentJobs int `pulumi:"maxConcurrentJobs"`
	// Name of the integration runtime node.
	NodeName string `pulumi:"nodeName"`
	// The time at which the integration runtime node was registered in ISO8601 format.
	RegisterTime string `pulumi:"registerTime"`
	// Status of the integration runtime node.
	Status string `pulumi:"status"`
	// Version of the integration runtime node.
	Version string `pulumi:"version"`
	// Status of the integration runtime node version.
	VersionStatus string `pulumi:"versionStatus"`
}

// SelfHostedIntegrationRuntimeNodeResponseInput is an input type that accepts SelfHostedIntegrationRuntimeNodeResponseArgs and SelfHostedIntegrationRuntimeNodeResponseOutput values.
// You can construct a concrete instance of `SelfHostedIntegrationRuntimeNodeResponseInput` via:
//
//          SelfHostedIntegrationRuntimeNodeResponseArgs{...}
type SelfHostedIntegrationRuntimeNodeResponseInput interface {
	pulumi.Input

	ToSelfHostedIntegrationRuntimeNodeResponseOutput() SelfHostedIntegrationRuntimeNodeResponseOutput
	ToSelfHostedIntegrationRuntimeNodeResponseOutputWithContext(context.Context) SelfHostedIntegrationRuntimeNodeResponseOutput
}

// Properties of Self-hosted integration runtime node.
type SelfHostedIntegrationRuntimeNodeResponseArgs struct {
	// The integration runtime capabilities dictionary
	Capabilities pulumi.StringMapInput `pulumi:"capabilities"`
	// Maximum concurrent jobs on the integration runtime node.
	ConcurrentJobsLimit pulumi.IntInput `pulumi:"concurrentJobsLimit"`
	// The time at which the integration runtime will expire in ISO8601 format.
	ExpiryTime pulumi.StringInput `pulumi:"expiryTime"`
	// URI for the host machine of the integration runtime.
	HostServiceUri pulumi.StringInput `pulumi:"hostServiceUri"`
	// Indicates whether this node is the active dispatcher for integration runtime requests.
	IsActiveDispatcher pulumi.BoolInput `pulumi:"isActiveDispatcher"`
	// The most recent time at which the integration runtime was connected in ISO8601 format.
	LastConnectTime pulumi.StringInput `pulumi:"lastConnectTime"`
	// The last time for the integration runtime node update end.
	LastEndUpdateTime pulumi.StringInput `pulumi:"lastEndUpdateTime"`
	// The time the node last started up.
	LastStartTime pulumi.StringInput `pulumi:"lastStartTime"`
	// The last time for the integration runtime node update start.
	LastStartUpdateTime pulumi.StringInput `pulumi:"lastStartUpdateTime"`
	// The integration runtime node last stop time.
	LastStopTime pulumi.StringInput `pulumi:"lastStopTime"`
	// The result of the last integration runtime node update.
	LastUpdateResult pulumi.StringInput `pulumi:"lastUpdateResult"`
	// Machine name of the integration runtime node.
	MachineName pulumi.StringInput `pulumi:"machineName"`
	// The maximum concurrent jobs in this integration runtime.
	MaxConcurrentJobs pulumi.IntInput `pulumi:"maxConcurrentJobs"`
	// Name of the integration runtime node.
	NodeName pulumi.StringInput `pulumi:"nodeName"`
	// The time at which the integration runtime node was registered in ISO8601 format.
	RegisterTime pulumi.StringInput `pulumi:"registerTime"`
	// Status of the integration runtime node.
	Status pulumi.StringInput `pulumi:"status"`
	// Version of the integration runtime node.
	Version pulumi.StringInput `pulumi:"version"`
	// Status of the integration runtime node version.
	VersionStatus pulumi.StringInput `pulumi:"versionStatus"`
}

func (SelfHostedIntegrationRuntimeNodeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfHostedIntegrationRuntimeNodeResponse)(nil)).Elem()
}

func (i SelfHostedIntegrationRuntimeNodeResponseArgs) ToSelfHostedIntegrationRuntimeNodeResponseOutput() SelfHostedIntegrationRuntimeNodeResponseOutput {
	return i.ToSelfHostedIntegrationRuntimeNodeResponseOutputWithContext(context.Background())
}

func (i SelfHostedIntegrationRuntimeNodeResponseArgs) ToSelfHostedIntegrationRuntimeNodeResponseOutputWithContext(ctx context.Context) SelfHostedIntegrationRuntimeNodeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfHostedIntegrationRuntimeNodeResponseOutput)
}

// SelfHostedIntegrationRuntimeNodeResponseArrayInput is an input type that accepts SelfHostedIntegrationRuntimeNodeResponseArray and SelfHostedIntegrationRuntimeNodeResponseArrayOutput values.
// You can construct a concrete instance of `SelfHostedIntegrationRuntimeNodeResponseArrayInput` via:
//
//          SelfHostedIntegrationRuntimeNodeResponseArray{ SelfHostedIntegrationRuntimeNodeResponseArgs{...} }
type SelfHostedIntegrationRuntimeNodeResponseArrayInput interface {
	pulumi.Input

	ToSelfHostedIntegrationRuntimeNodeResponseArrayOutput() SelfHostedIntegrationRuntimeNodeResponseArrayOutput
	ToSelfHostedIntegrationRuntimeNodeResponseArrayOutputWithContext(context.Context) SelfHostedIntegrationRuntimeNodeResponseArrayOutput
}

type SelfHostedIntegrationRuntimeNodeResponseArray []SelfHostedIntegrationRuntimeNodeResponseInput

func (SelfHostedIntegrationRuntimeNodeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelfHostedIntegrationRuntimeNodeResponse)(nil)).Elem()
}

func (i SelfHostedIntegrationRuntimeNodeResponseArray) ToSelfHostedIntegrationRuntimeNodeResponseArrayOutput() SelfHostedIntegrationRuntimeNodeResponseArrayOutput {
	return i.ToSelfHostedIntegrationRuntimeNodeResponseArrayOutputWithContext(context.Background())
}

func (i SelfHostedIntegrationRuntimeNodeResponseArray) ToSelfHostedIntegrationRuntimeNodeResponseArrayOutputWithContext(ctx context.Context) SelfHostedIntegrationRuntimeNodeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfHostedIntegrationRuntimeNodeResponseArrayOutput)
}

// Properties of Self-hosted integration runtime node.
type SelfHostedIntegrationRuntimeNodeResponseOutput struct{ *pulumi.OutputState }

func (SelfHostedIntegrationRuntimeNodeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfHostedIntegrationRuntimeNodeResponse)(nil)).Elem()
}

func (o SelfHostedIntegrationRuntimeNodeResponseOutput) ToSelfHostedIntegrationRuntimeNodeResponseOutput() SelfHostedIntegrationRuntimeNodeResponseOutput {
	return o
}

func (o SelfHostedIntegrationRuntimeNodeResponseOutput) ToSelfHostedIntegrationRuntimeNodeResponseOutputWithContext(ctx context.Context) SelfHostedIntegrationRuntimeNodeResponseOutput {
	return o
}

// The integration runtime capabilities dictionary
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) Capabilities() pulumi.StringMapOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) map[string]string { return v.Capabilities }).(pulumi.StringMapOutput)
}

// Maximum concurrent jobs on the integration runtime node.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) ConcurrentJobsLimit() pulumi.IntOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) int { return v.ConcurrentJobsLimit }).(pulumi.IntOutput)
}

// The time at which the integration runtime will expire in ISO8601 format.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) ExpiryTime() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.ExpiryTime }).(pulumi.StringOutput)
}

// URI for the host machine of the integration runtime.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) HostServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.HostServiceUri }).(pulumi.StringOutput)
}

// Indicates whether this node is the active dispatcher for integration runtime requests.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) IsActiveDispatcher() pulumi.BoolOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) bool { return v.IsActiveDispatcher }).(pulumi.BoolOutput)
}

// The most recent time at which the integration runtime was connected in ISO8601 format.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) LastConnectTime() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.LastConnectTime }).(pulumi.StringOutput)
}

// The last time for the integration runtime node update end.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) LastEndUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.LastEndUpdateTime }).(pulumi.StringOutput)
}

// The time the node last started up.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) LastStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.LastStartTime }).(pulumi.StringOutput)
}

// The last time for the integration runtime node update start.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) LastStartUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.LastStartUpdateTime }).(pulumi.StringOutput)
}

// The integration runtime node last stop time.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) LastStopTime() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.LastStopTime }).(pulumi.StringOutput)
}

// The result of the last integration runtime node update.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) LastUpdateResult() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.LastUpdateResult }).(pulumi.StringOutput)
}

// Machine name of the integration runtime node.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) MachineName() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.MachineName }).(pulumi.StringOutput)
}

// The maximum concurrent jobs in this integration runtime.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) MaxConcurrentJobs() pulumi.IntOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) int { return v.MaxConcurrentJobs }).(pulumi.IntOutput)
}

// Name of the integration runtime node.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.NodeName }).(pulumi.StringOutput)
}

// The time at which the integration runtime node was registered in ISO8601 format.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) RegisterTime() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.RegisterTime }).(pulumi.StringOutput)
}

// Status of the integration runtime node.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Version of the integration runtime node.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.Version }).(pulumi.StringOutput)
}

// Status of the integration runtime node version.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) VersionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.VersionStatus }).(pulumi.StringOutput)
}

type SelfHostedIntegrationRuntimeNodeResponseArrayOutput struct{ *pulumi.OutputState }

func (SelfHostedIntegrationRuntimeNodeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelfHostedIntegrationRuntimeNodeResponse)(nil)).Elem()
}

func (o SelfHostedIntegrationRuntimeNodeResponseArrayOutput) ToSelfHostedIntegrationRuntimeNodeResponseArrayOutput() SelfHostedIntegrationRuntimeNodeResponseArrayOutput {
	return o
}

func (o SelfHostedIntegrationRuntimeNodeResponseArrayOutput) ToSelfHostedIntegrationRuntimeNodeResponseArrayOutputWithContext(ctx context.Context) SelfHostedIntegrationRuntimeNodeResponseArrayOutput {
	return o
}

func (o SelfHostedIntegrationRuntimeNodeResponseArrayOutput) Index(i pulumi.IntInput) SelfHostedIntegrationRuntimeNodeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SelfHostedIntegrationRuntimeNodeResponse {
		return vs[0].([]SelfHostedIntegrationRuntimeNodeResponse)[vs[1].(int)]
	}).(SelfHostedIntegrationRuntimeNodeResponseOutput)
}

// Self-hosted integration runtime.
type SelfHostedIntegrationRuntimeResponse struct {
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// The base definition of a linked integration runtime.
	LinkedInfo interface{} `pulumi:"linkedInfo"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// SelfHostedIntegrationRuntimeResponseInput is an input type that accepts SelfHostedIntegrationRuntimeResponseArgs and SelfHostedIntegrationRuntimeResponseOutput values.
// You can construct a concrete instance of `SelfHostedIntegrationRuntimeResponseInput` via:
//
//          SelfHostedIntegrationRuntimeResponseArgs{...}
type SelfHostedIntegrationRuntimeResponseInput interface {
	pulumi.Input

	ToSelfHostedIntegrationRuntimeResponseOutput() SelfHostedIntegrationRuntimeResponseOutput
	ToSelfHostedIntegrationRuntimeResponseOutputWithContext(context.Context) SelfHostedIntegrationRuntimeResponseOutput
}

// Self-hosted integration runtime.
type SelfHostedIntegrationRuntimeResponseArgs struct {
	// Integration runtime description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The base definition of a linked integration runtime.
	LinkedInfo pulumi.Input `pulumi:"linkedInfo"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SelfHostedIntegrationRuntimeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfHostedIntegrationRuntimeResponse)(nil)).Elem()
}

func (i SelfHostedIntegrationRuntimeResponseArgs) ToSelfHostedIntegrationRuntimeResponseOutput() SelfHostedIntegrationRuntimeResponseOutput {
	return i.ToSelfHostedIntegrationRuntimeResponseOutputWithContext(context.Background())
}

func (i SelfHostedIntegrationRuntimeResponseArgs) ToSelfHostedIntegrationRuntimeResponseOutputWithContext(ctx context.Context) SelfHostedIntegrationRuntimeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfHostedIntegrationRuntimeResponseOutput)
}

// Self-hosted integration runtime.
type SelfHostedIntegrationRuntimeResponseOutput struct{ *pulumi.OutputState }

func (SelfHostedIntegrationRuntimeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfHostedIntegrationRuntimeResponse)(nil)).Elem()
}

func (o SelfHostedIntegrationRuntimeResponseOutput) ToSelfHostedIntegrationRuntimeResponseOutput() SelfHostedIntegrationRuntimeResponseOutput {
	return o
}

func (o SelfHostedIntegrationRuntimeResponseOutput) ToSelfHostedIntegrationRuntimeResponseOutputWithContext(ctx context.Context) SelfHostedIntegrationRuntimeResponseOutput {
	return o
}

// Integration runtime description.
func (o SelfHostedIntegrationRuntimeResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The base definition of a linked integration runtime.
func (o SelfHostedIntegrationRuntimeResponseOutput) LinkedInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeResponse) interface{} { return v.LinkedInfo }).(pulumi.AnyOutput)
}

// Type of integration runtime.
func (o SelfHostedIntegrationRuntimeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Self-hosted integration runtime status.
type SelfHostedIntegrationRuntimeStatusResponse struct {
	// Whether Self-hosted integration runtime auto update has been turned on.
	AutoUpdate string `pulumi:"autoUpdate"`
	// The estimated time when the self-hosted integration runtime will be updated.
	AutoUpdateETA string `pulumi:"autoUpdateETA"`
	// Object with additional information about integration runtime capabilities.
	Capabilities map[string]string `pulumi:"capabilities"`
	// The time at which the integration runtime was created, in ISO8601 format.
	CreateTime string `pulumi:"createTime"`
	// The data factory name which the integration runtime belong to.
	DataFactoryName string `pulumi:"dataFactoryName"`
	// It is used to set the encryption mode for node-node communication channel (when more than 2 self-hosted integration runtime nodes exist).
	InternalChannelEncryption string `pulumi:"internalChannelEncryption"`
	// The latest version on download center.
	LatestVersion string `pulumi:"latestVersion"`
	// The list of linked integration runtimes that are created to share with this integration runtime.
	Links []LinkedIntegrationRuntimeResponse `pulumi:"links"`
	// The local time zone offset in hours.
	LocalTimeZoneOffset string `pulumi:"localTimeZoneOffset"`
	// The list of nodes for this integration runtime.
	Nodes []SelfHostedIntegrationRuntimeNodeResponse `pulumi:"nodes"`
	// The version that the integration runtime is going to update to.
	PushedVersion string `pulumi:"pushedVersion"`
	// The date at which the integration runtime will be scheduled to update, in ISO8601 format.
	ScheduledUpdateDate string `pulumi:"scheduledUpdateDate"`
	// The URLs for the services used in integration runtime backend service.
	ServiceUrls []string `pulumi:"serviceUrls"`
	// The state of integration runtime.
	State string `pulumi:"state"`
	// The task queue id of the integration runtime.
	TaskQueueId string `pulumi:"taskQueueId"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
	// The time in the date scheduled by service to update the integration runtime, e.g., PT03H is 3 hours
	UpdateDelayOffset string `pulumi:"updateDelayOffset"`
	// Version of the integration runtime.
	Version string `pulumi:"version"`
	// Status of the integration runtime version.
	VersionStatus string `pulumi:"versionStatus"`
}

// SelfHostedIntegrationRuntimeStatusResponseInput is an input type that accepts SelfHostedIntegrationRuntimeStatusResponseArgs and SelfHostedIntegrationRuntimeStatusResponseOutput values.
// You can construct a concrete instance of `SelfHostedIntegrationRuntimeStatusResponseInput` via:
//
//          SelfHostedIntegrationRuntimeStatusResponseArgs{...}
type SelfHostedIntegrationRuntimeStatusResponseInput interface {
	pulumi.Input

	ToSelfHostedIntegrationRuntimeStatusResponseOutput() SelfHostedIntegrationRuntimeStatusResponseOutput
	ToSelfHostedIntegrationRuntimeStatusResponseOutputWithContext(context.Context) SelfHostedIntegrationRuntimeStatusResponseOutput
}

// Self-hosted integration runtime status.
type SelfHostedIntegrationRuntimeStatusResponseArgs struct {
	// Whether Self-hosted integration runtime auto update has been turned on.
	AutoUpdate pulumi.StringInput `pulumi:"autoUpdate"`
	// The estimated time when the self-hosted integration runtime will be updated.
	AutoUpdateETA pulumi.StringInput `pulumi:"autoUpdateETA"`
	// Object with additional information about integration runtime capabilities.
	Capabilities pulumi.StringMapInput `pulumi:"capabilities"`
	// The time at which the integration runtime was created, in ISO8601 format.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The data factory name which the integration runtime belong to.
	DataFactoryName pulumi.StringInput `pulumi:"dataFactoryName"`
	// It is used to set the encryption mode for node-node communication channel (when more than 2 self-hosted integration runtime nodes exist).
	InternalChannelEncryption pulumi.StringInput `pulumi:"internalChannelEncryption"`
	// The latest version on download center.
	LatestVersion pulumi.StringInput `pulumi:"latestVersion"`
	// The list of linked integration runtimes that are created to share with this integration runtime.
	Links LinkedIntegrationRuntimeResponseArrayInput `pulumi:"links"`
	// The local time zone offset in hours.
	LocalTimeZoneOffset pulumi.StringInput `pulumi:"localTimeZoneOffset"`
	// The list of nodes for this integration runtime.
	Nodes SelfHostedIntegrationRuntimeNodeResponseArrayInput `pulumi:"nodes"`
	// The version that the integration runtime is going to update to.
	PushedVersion pulumi.StringInput `pulumi:"pushedVersion"`
	// The date at which the integration runtime will be scheduled to update, in ISO8601 format.
	ScheduledUpdateDate pulumi.StringInput `pulumi:"scheduledUpdateDate"`
	// The URLs for the services used in integration runtime backend service.
	ServiceUrls pulumi.StringArrayInput `pulumi:"serviceUrls"`
	// The state of integration runtime.
	State pulumi.StringInput `pulumi:"state"`
	// The task queue id of the integration runtime.
	TaskQueueId pulumi.StringInput `pulumi:"taskQueueId"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
	// The time in the date scheduled by service to update the integration runtime, e.g., PT03H is 3 hours
	UpdateDelayOffset pulumi.StringInput `pulumi:"updateDelayOffset"`
	// Version of the integration runtime.
	Version pulumi.StringInput `pulumi:"version"`
	// Status of the integration runtime version.
	VersionStatus pulumi.StringInput `pulumi:"versionStatus"`
}

func (SelfHostedIntegrationRuntimeStatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfHostedIntegrationRuntimeStatusResponse)(nil)).Elem()
}

func (i SelfHostedIntegrationRuntimeStatusResponseArgs) ToSelfHostedIntegrationRuntimeStatusResponseOutput() SelfHostedIntegrationRuntimeStatusResponseOutput {
	return i.ToSelfHostedIntegrationRuntimeStatusResponseOutputWithContext(context.Background())
}

func (i SelfHostedIntegrationRuntimeStatusResponseArgs) ToSelfHostedIntegrationRuntimeStatusResponseOutputWithContext(ctx context.Context) SelfHostedIntegrationRuntimeStatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfHostedIntegrationRuntimeStatusResponseOutput)
}

// Self-hosted integration runtime status.
type SelfHostedIntegrationRuntimeStatusResponseOutput struct{ *pulumi.OutputState }

func (SelfHostedIntegrationRuntimeStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfHostedIntegrationRuntimeStatusResponse)(nil)).Elem()
}

func (o SelfHostedIntegrationRuntimeStatusResponseOutput) ToSelfHostedIntegrationRuntimeStatusResponseOutput() SelfHostedIntegrationRuntimeStatusResponseOutput {
	return o
}

func (o SelfHostedIntegrationRuntimeStatusResponseOutput) ToSelfHostedIntegrationRuntimeStatusResponseOutputWithContext(ctx context.Context) SelfHostedIntegrationRuntimeStatusResponseOutput {
	return o
}

// Whether Self-hosted integration runtime auto update has been turned on.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) AutoUpdate() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.AutoUpdate }).(pulumi.StringOutput)
}

// The estimated time when the self-hosted integration runtime will be updated.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) AutoUpdateETA() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.AutoUpdateETA }).(pulumi.StringOutput)
}

// Object with additional information about integration runtime capabilities.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) Capabilities() pulumi.StringMapOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) map[string]string { return v.Capabilities }).(pulumi.StringMapOutput)
}

// The time at which the integration runtime was created, in ISO8601 format.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The data factory name which the integration runtime belong to.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) DataFactoryName() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.DataFactoryName }).(pulumi.StringOutput)
}

// It is used to set the encryption mode for node-node communication channel (when more than 2 self-hosted integration runtime nodes exist).
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) InternalChannelEncryption() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.InternalChannelEncryption }).(pulumi.StringOutput)
}

// The latest version on download center.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The list of linked integration runtimes that are created to share with this integration runtime.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) Links() LinkedIntegrationRuntimeResponseArrayOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) []LinkedIntegrationRuntimeResponse { return v.Links }).(LinkedIntegrationRuntimeResponseArrayOutput)
}

// The local time zone offset in hours.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) LocalTimeZoneOffset() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.LocalTimeZoneOffset }).(pulumi.StringOutput)
}

// The list of nodes for this integration runtime.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) Nodes() SelfHostedIntegrationRuntimeNodeResponseArrayOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) []SelfHostedIntegrationRuntimeNodeResponse {
		return v.Nodes
	}).(SelfHostedIntegrationRuntimeNodeResponseArrayOutput)
}

// The version that the integration runtime is going to update to.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) PushedVersion() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.PushedVersion }).(pulumi.StringOutput)
}

// The date at which the integration runtime will be scheduled to update, in ISO8601 format.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) ScheduledUpdateDate() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.ScheduledUpdateDate }).(pulumi.StringOutput)
}

// The URLs for the services used in integration runtime backend service.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) ServiceUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) []string { return v.ServiceUrls }).(pulumi.StringArrayOutput)
}

// The state of integration runtime.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

// The task queue id of the integration runtime.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) TaskQueueId() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.TaskQueueId }).(pulumi.StringOutput)
}

// Type of integration runtime.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The time in the date scheduled by service to update the integration runtime, e.g., PT03H is 3 hours
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) UpdateDelayOffset() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.UpdateDelayOffset }).(pulumi.StringOutput)
}

// Version of the integration runtime.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.Version }).(pulumi.StringOutput)
}

// Status of the integration runtime version.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) VersionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.VersionStatus }).(pulumi.StringOutput)
}

// ServiceNow server linked service.
type ServiceNowLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id for OAuth2 authentication.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret for OAuth2 authentication.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name for Basic and OAuth2 authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
	Username interface{} `pulumi:"username"`
}

// ServiceNowLinkedServiceInput is an input type that accepts ServiceNowLinkedServiceArgs and ServiceNowLinkedServiceOutput values.
// You can construct a concrete instance of `ServiceNowLinkedServiceInput` via:
//
//          ServiceNowLinkedServiceArgs{...}
type ServiceNowLinkedServiceInput interface {
	pulumi.Input

	ToServiceNowLinkedServiceOutput() ServiceNowLinkedServiceOutput
	ToServiceNowLinkedServiceOutputWithContext(context.Context) ServiceNowLinkedServiceOutput
}

// ServiceNow server linked service.
type ServiceNowLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The client id for OAuth2 authentication.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret for OAuth2 authentication.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name for Basic and OAuth2 authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
	// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
	Username pulumi.Input `pulumi:"username"`
}

func (ServiceNowLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowLinkedService)(nil)).Elem()
}

func (i ServiceNowLinkedServiceArgs) ToServiceNowLinkedServiceOutput() ServiceNowLinkedServiceOutput {
	return i.ToServiceNowLinkedServiceOutputWithContext(context.Background())
}

func (i ServiceNowLinkedServiceArgs) ToServiceNowLinkedServiceOutputWithContext(ctx context.Context) ServiceNowLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNowLinkedServiceOutput)
}

// ServiceNow server linked service.
type ServiceNowLinkedServiceOutput struct{ *pulumi.OutputState }

func (ServiceNowLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowLinkedService)(nil)).Elem()
}

func (o ServiceNowLinkedServiceOutput) ToServiceNowLinkedServiceOutput() ServiceNowLinkedServiceOutput {
	return o
}

func (o ServiceNowLinkedServiceOutput) ToServiceNowLinkedServiceOutputWithContext(ctx context.Context) ServiceNowLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o ServiceNowLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to use.
func (o ServiceNowLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The client id for OAuth2 authentication.
func (o ServiceNowLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret for OAuth2 authentication.
func (o ServiceNowLinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ServiceNowLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o ServiceNowLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ServiceNowLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
func (o ServiceNowLinkedServiceOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ServiceNowLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name for Basic and OAuth2 authentication.
func (o ServiceNowLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o ServiceNowLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ServiceNowLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ServiceNowLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ServiceNowLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
func (o ServiceNowLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// ServiceNow server linked service.
type ServiceNowLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id for OAuth2 authentication.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret for OAuth2 authentication.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name for Basic and OAuth2 authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
	Username interface{} `pulumi:"username"`
}

// ServiceNowLinkedServiceResponseInput is an input type that accepts ServiceNowLinkedServiceResponseArgs and ServiceNowLinkedServiceResponseOutput values.
// You can construct a concrete instance of `ServiceNowLinkedServiceResponseInput` via:
//
//          ServiceNowLinkedServiceResponseArgs{...}
type ServiceNowLinkedServiceResponseInput interface {
	pulumi.Input

	ToServiceNowLinkedServiceResponseOutput() ServiceNowLinkedServiceResponseOutput
	ToServiceNowLinkedServiceResponseOutputWithContext(context.Context) ServiceNowLinkedServiceResponseOutput
}

// ServiceNow server linked service.
type ServiceNowLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The client id for OAuth2 authentication.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret for OAuth2 authentication.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The password corresponding to the user name for Basic and OAuth2 authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
	// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
	Username pulumi.Input `pulumi:"username"`
}

func (ServiceNowLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowLinkedServiceResponse)(nil)).Elem()
}

func (i ServiceNowLinkedServiceResponseArgs) ToServiceNowLinkedServiceResponseOutput() ServiceNowLinkedServiceResponseOutput {
	return i.ToServiceNowLinkedServiceResponseOutputWithContext(context.Background())
}

func (i ServiceNowLinkedServiceResponseArgs) ToServiceNowLinkedServiceResponseOutputWithContext(ctx context.Context) ServiceNowLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNowLinkedServiceResponseOutput)
}

// ServiceNow server linked service.
type ServiceNowLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ServiceNowLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowLinkedServiceResponse)(nil)).Elem()
}

func (o ServiceNowLinkedServiceResponseOutput) ToServiceNowLinkedServiceResponseOutput() ServiceNowLinkedServiceResponseOutput {
	return o
}

func (o ServiceNowLinkedServiceResponseOutput) ToServiceNowLinkedServiceResponseOutputWithContext(ctx context.Context) ServiceNowLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o ServiceNowLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to use.
func (o ServiceNowLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The client id for OAuth2 authentication.
func (o ServiceNowLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret for OAuth2 authentication.
func (o ServiceNowLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ServiceNowLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o ServiceNowLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ServiceNowLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
func (o ServiceNowLinkedServiceResponseOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ServiceNowLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name for Basic and OAuth2 authentication.
func (o ServiceNowLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o ServiceNowLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ServiceNowLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ServiceNowLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ServiceNowLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
func (o ServiceNowLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// ServiceNow server dataset.
type ServiceNowObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ServiceNowObjectDatasetInput is an input type that accepts ServiceNowObjectDatasetArgs and ServiceNowObjectDatasetOutput values.
// You can construct a concrete instance of `ServiceNowObjectDatasetInput` via:
//
//          ServiceNowObjectDatasetArgs{...}
type ServiceNowObjectDatasetInput interface {
	pulumi.Input

	ToServiceNowObjectDatasetOutput() ServiceNowObjectDatasetOutput
	ToServiceNowObjectDatasetOutputWithContext(context.Context) ServiceNowObjectDatasetOutput
}

// ServiceNow server dataset.
type ServiceNowObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceNowObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowObjectDataset)(nil)).Elem()
}

func (i ServiceNowObjectDatasetArgs) ToServiceNowObjectDatasetOutput() ServiceNowObjectDatasetOutput {
	return i.ToServiceNowObjectDatasetOutputWithContext(context.Background())
}

func (i ServiceNowObjectDatasetArgs) ToServiceNowObjectDatasetOutputWithContext(ctx context.Context) ServiceNowObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNowObjectDatasetOutput)
}

// ServiceNow server dataset.
type ServiceNowObjectDatasetOutput struct{ *pulumi.OutputState }

func (ServiceNowObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowObjectDataset)(nil)).Elem()
}

func (o ServiceNowObjectDatasetOutput) ToServiceNowObjectDatasetOutput() ServiceNowObjectDatasetOutput {
	return o
}

func (o ServiceNowObjectDatasetOutput) ToServiceNowObjectDatasetOutputWithContext(ctx context.Context) ServiceNowObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ServiceNowObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ServiceNowObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ServiceNowObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNowObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ServiceNowObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v ServiceNowObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o ServiceNowObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ServiceNowObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o ServiceNowObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ServiceNowObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ServiceNowObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ServiceNowObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ServiceNowObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o ServiceNowObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// ServiceNow server dataset.
type ServiceNowObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ServiceNowObjectDatasetResponseInput is an input type that accepts ServiceNowObjectDatasetResponseArgs and ServiceNowObjectDatasetResponseOutput values.
// You can construct a concrete instance of `ServiceNowObjectDatasetResponseInput` via:
//
//          ServiceNowObjectDatasetResponseArgs{...}
type ServiceNowObjectDatasetResponseInput interface {
	pulumi.Input

	ToServiceNowObjectDatasetResponseOutput() ServiceNowObjectDatasetResponseOutput
	ToServiceNowObjectDatasetResponseOutputWithContext(context.Context) ServiceNowObjectDatasetResponseOutput
}

// ServiceNow server dataset.
type ServiceNowObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceNowObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowObjectDatasetResponse)(nil)).Elem()
}

func (i ServiceNowObjectDatasetResponseArgs) ToServiceNowObjectDatasetResponseOutput() ServiceNowObjectDatasetResponseOutput {
	return i.ToServiceNowObjectDatasetResponseOutputWithContext(context.Background())
}

func (i ServiceNowObjectDatasetResponseArgs) ToServiceNowObjectDatasetResponseOutputWithContext(ctx context.Context) ServiceNowObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNowObjectDatasetResponseOutput)
}

// ServiceNow server dataset.
type ServiceNowObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (ServiceNowObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowObjectDatasetResponse)(nil)).Elem()
}

func (o ServiceNowObjectDatasetResponseOutput) ToServiceNowObjectDatasetResponseOutput() ServiceNowObjectDatasetResponseOutput {
	return o
}

func (o ServiceNowObjectDatasetResponseOutput) ToServiceNowObjectDatasetResponseOutputWithContext(ctx context.Context) ServiceNowObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ServiceNowObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ServiceNowObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ServiceNowObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o ServiceNowObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ServiceNowObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ServiceNowObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ServiceNowObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ServiceNowObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o ServiceNowObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The location of SFTP dataset.
type SftpLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
}

// SftpLocationInput is an input type that accepts SftpLocationArgs and SftpLocationOutput values.
// You can construct a concrete instance of `SftpLocationInput` via:
//
//          SftpLocationArgs{...}
type SftpLocationInput interface {
	pulumi.Input

	ToSftpLocationOutput() SftpLocationOutput
	ToSftpLocationOutputWithContext(context.Context) SftpLocationOutput
}

// The location of SFTP dataset.
type SftpLocationArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SftpLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpLocation)(nil)).Elem()
}

func (i SftpLocationArgs) ToSftpLocationOutput() SftpLocationOutput {
	return i.ToSftpLocationOutputWithContext(context.Background())
}

func (i SftpLocationArgs) ToSftpLocationOutputWithContext(ctx context.Context) SftpLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SftpLocationOutput)
}

// The location of SFTP dataset.
type SftpLocationOutput struct{ *pulumi.OutputState }

func (SftpLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpLocation)(nil)).Elem()
}

func (o SftpLocationOutput) ToSftpLocationOutput() SftpLocationOutput {
	return o
}

func (o SftpLocationOutput) ToSftpLocationOutputWithContext(ctx context.Context) SftpLocationOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o SftpLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o SftpLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o SftpLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SftpLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The location of SFTP dataset.
type SftpLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type string `pulumi:"type"`
}

// SftpLocationResponseInput is an input type that accepts SftpLocationResponseArgs and SftpLocationResponseOutput values.
// You can construct a concrete instance of `SftpLocationResponseInput` via:
//
//          SftpLocationResponseArgs{...}
type SftpLocationResponseInput interface {
	pulumi.Input

	ToSftpLocationResponseOutput() SftpLocationResponseOutput
	ToSftpLocationResponseOutputWithContext(context.Context) SftpLocationResponseOutput
}

// The location of SFTP dataset.
type SftpLocationResponseArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SftpLocationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpLocationResponse)(nil)).Elem()
}

func (i SftpLocationResponseArgs) ToSftpLocationResponseOutput() SftpLocationResponseOutput {
	return i.ToSftpLocationResponseOutputWithContext(context.Background())
}

func (i SftpLocationResponseArgs) ToSftpLocationResponseOutputWithContext(ctx context.Context) SftpLocationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SftpLocationResponseOutput)
}

// The location of SFTP dataset.
type SftpLocationResponseOutput struct{ *pulumi.OutputState }

func (SftpLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpLocationResponse)(nil)).Elem()
}

func (o SftpLocationResponseOutput) ToSftpLocationResponseOutput() SftpLocationResponseOutput {
	return o
}

func (o SftpLocationResponseOutput) ToSftpLocationResponseOutputWithContext(ctx context.Context) SftpLocationResponseOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o SftpLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o SftpLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
func (o SftpLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SftpLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The SFTP server host name. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
	HostKeyFingerprint interface{} `pulumi:"hostKeyFingerprint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password to decrypt the SSH private key if the SSH private key is encrypted.
	PassPhrase interface{} `pulumi:"passPhrase"`
	// Password to logon the SFTP server for Basic authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
	PrivateKeyContent interface{} `pulumi:"privateKeyContent"`
	// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
	PrivateKeyPath interface{} `pulumi:"privateKeyPath"`
	// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
	SkipHostKeyValidation interface{} `pulumi:"skipHostKeyValidation"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SftpServerLinkedServiceInput is an input type that accepts SftpServerLinkedServiceArgs and SftpServerLinkedServiceOutput values.
// You can construct a concrete instance of `SftpServerLinkedServiceInput` via:
//
//          SftpServerLinkedServiceArgs{...}
type SftpServerLinkedServiceInput interface {
	pulumi.Input

	ToSftpServerLinkedServiceOutput() SftpServerLinkedServiceOutput
	ToSftpServerLinkedServiceOutputWithContext(context.Context) SftpServerLinkedServiceOutput
}

// A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The SFTP server host name. Type: string (or Expression with resultType string).
	Host pulumi.Input `pulumi:"host"`
	// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
	HostKeyFingerprint pulumi.Input `pulumi:"hostKeyFingerprint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password to decrypt the SSH private key if the SSH private key is encrypted.
	PassPhrase pulumi.Input `pulumi:"passPhrase"`
	// Password to logon the SFTP server for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.Input `pulumi:"port"`
	// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
	PrivateKeyContent pulumi.Input `pulumi:"privateKeyContent"`
	// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
	PrivateKeyPath pulumi.Input `pulumi:"privateKeyPath"`
	// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
	SkipHostKeyValidation pulumi.Input `pulumi:"skipHostKeyValidation"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SftpServerLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpServerLinkedService)(nil)).Elem()
}

func (i SftpServerLinkedServiceArgs) ToSftpServerLinkedServiceOutput() SftpServerLinkedServiceOutput {
	return i.ToSftpServerLinkedServiceOutputWithContext(context.Background())
}

func (i SftpServerLinkedServiceArgs) ToSftpServerLinkedServiceOutputWithContext(ctx context.Context) SftpServerLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SftpServerLinkedServiceOutput)
}

// A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedServiceOutput struct{ *pulumi.OutputState }

func (SftpServerLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpServerLinkedService)(nil)).Elem()
}

func (o SftpServerLinkedServiceOutput) ToSftpServerLinkedServiceOutput() SftpServerLinkedServiceOutput {
	return o
}

func (o SftpServerLinkedServiceOutput) ToSftpServerLinkedServiceOutputWithContext(ctx context.Context) SftpServerLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SftpServerLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SftpServerLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to be used to connect to the FTP server.
func (o SftpServerLinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SftpServerLinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o SftpServerLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SftpServerLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SftpServerLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SftpServerLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The SFTP server host name. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceOutput) HostKeyFingerprint() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedService) interface{} { return v.HostKeyFingerprint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SftpServerLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SftpServerLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password to decrypt the SSH private key if the SSH private key is encrypted.
func (o SftpServerLinkedServiceOutput) PassPhrase() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedService) interface{} { return v.PassPhrase }).(pulumi.AnyOutput)
}

// Password to logon the SFTP server for Basic authentication.
func (o SftpServerLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SftpServerLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
func (o SftpServerLinkedServiceOutput) PrivateKeyContent() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedService) interface{} { return v.PrivateKeyContent }).(pulumi.AnyOutput)
}

// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceOutput) PrivateKeyPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedService) interface{} { return v.PrivateKeyPath }).(pulumi.AnyOutput)
}

// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
func (o SftpServerLinkedServiceOutput) SkipHostKeyValidation() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedService) interface{} { return v.SkipHostKeyValidation }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SftpServerLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SftpServerLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The SFTP server host name. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
	HostKeyFingerprint interface{} `pulumi:"hostKeyFingerprint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password to decrypt the SSH private key if the SSH private key is encrypted.
	PassPhrase interface{} `pulumi:"passPhrase"`
	// Password to logon the SFTP server for Basic authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
	PrivateKeyContent interface{} `pulumi:"privateKeyContent"`
	// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
	PrivateKeyPath interface{} `pulumi:"privateKeyPath"`
	// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
	SkipHostKeyValidation interface{} `pulumi:"skipHostKeyValidation"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SftpServerLinkedServiceResponseInput is an input type that accepts SftpServerLinkedServiceResponseArgs and SftpServerLinkedServiceResponseOutput values.
// You can construct a concrete instance of `SftpServerLinkedServiceResponseInput` via:
//
//          SftpServerLinkedServiceResponseArgs{...}
type SftpServerLinkedServiceResponseInput interface {
	pulumi.Input

	ToSftpServerLinkedServiceResponseOutput() SftpServerLinkedServiceResponseOutput
	ToSftpServerLinkedServiceResponseOutputWithContext(context.Context) SftpServerLinkedServiceResponseOutput
}

// A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The SFTP server host name. Type: string (or Expression with resultType string).
	Host pulumi.Input `pulumi:"host"`
	// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
	HostKeyFingerprint pulumi.Input `pulumi:"hostKeyFingerprint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The password to decrypt the SSH private key if the SSH private key is encrypted.
	PassPhrase pulumi.Input `pulumi:"passPhrase"`
	// Password to logon the SFTP server for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.Input `pulumi:"port"`
	// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
	PrivateKeyContent pulumi.Input `pulumi:"privateKeyContent"`
	// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
	PrivateKeyPath pulumi.Input `pulumi:"privateKeyPath"`
	// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
	SkipHostKeyValidation pulumi.Input `pulumi:"skipHostKeyValidation"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SftpServerLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpServerLinkedServiceResponse)(nil)).Elem()
}

func (i SftpServerLinkedServiceResponseArgs) ToSftpServerLinkedServiceResponseOutput() SftpServerLinkedServiceResponseOutput {
	return i.ToSftpServerLinkedServiceResponseOutputWithContext(context.Background())
}

func (i SftpServerLinkedServiceResponseArgs) ToSftpServerLinkedServiceResponseOutputWithContext(ctx context.Context) SftpServerLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SftpServerLinkedServiceResponseOutput)
}

// A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SftpServerLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpServerLinkedServiceResponse)(nil)).Elem()
}

func (o SftpServerLinkedServiceResponseOutput) ToSftpServerLinkedServiceResponseOutput() SftpServerLinkedServiceResponseOutput {
	return o
}

func (o SftpServerLinkedServiceResponseOutput) ToSftpServerLinkedServiceResponseOutputWithContext(ctx context.Context) SftpServerLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SftpServerLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to be used to connect to the FTP server.
func (o SftpServerLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o SftpServerLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SftpServerLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The SFTP server host name. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceResponseOutput) HostKeyFingerprint() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.HostKeyFingerprint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SftpServerLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password to decrypt the SSH private key if the SSH private key is encrypted.
func (o SftpServerLinkedServiceResponseOutput) PassPhrase() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.PassPhrase }).(pulumi.AnyOutput)
}

// Password to logon the SFTP server for Basic authentication.
func (o SftpServerLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SftpServerLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
func (o SftpServerLinkedServiceResponseOutput) PrivateKeyContent() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.PrivateKeyContent }).(pulumi.AnyOutput)
}

// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceResponseOutput) PrivateKeyPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.PrivateKeyPath }).(pulumi.AnyOutput)
}

// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
func (o SftpServerLinkedServiceResponseOutput) SkipHostKeyValidation() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.SkipHostKeyValidation }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SftpServerLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// SharePoint Online List linked service.
type SharePointOnlineListLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The application (client) ID of your application registered in Azure Active Directory. Make sure to grant SharePoint site permission to this application. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The client secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The URL of the SharePoint Online site. For example, https://contoso.sharepoint.com/sites/siteName. Type: string (or Expression with resultType string).
	SiteUrl interface{} `pulumi:"siteUrl"`
	// The tenant ID under which your application resides. You can find it from Azure portal Active Directory overview page. Type: string (or Expression with resultType string).
	TenantId interface{} `pulumi:"tenantId"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// SharePointOnlineListLinkedServiceInput is an input type that accepts SharePointOnlineListLinkedServiceArgs and SharePointOnlineListLinkedServiceOutput values.
// You can construct a concrete instance of `SharePointOnlineListLinkedServiceInput` via:
//
//          SharePointOnlineListLinkedServiceArgs{...}
type SharePointOnlineListLinkedServiceInput interface {
	pulumi.Input

	ToSharePointOnlineListLinkedServiceOutput() SharePointOnlineListLinkedServiceOutput
	ToSharePointOnlineListLinkedServiceOutputWithContext(context.Context) SharePointOnlineListLinkedServiceOutput
}

// SharePoint Online List linked service.
type SharePointOnlineListLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The application (client) ID of your application registered in Azure Active Directory. Make sure to grant SharePoint site permission to this application. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The client secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The URL of the SharePoint Online site. For example, https://contoso.sharepoint.com/sites/siteName. Type: string (or Expression with resultType string).
	SiteUrl pulumi.Input `pulumi:"siteUrl"`
	// The tenant ID under which your application resides. You can find it from Azure portal Active Directory overview page. Type: string (or Expression with resultType string).
	TenantId pulumi.Input `pulumi:"tenantId"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SharePointOnlineListLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharePointOnlineListLinkedService)(nil)).Elem()
}

func (i SharePointOnlineListLinkedServiceArgs) ToSharePointOnlineListLinkedServiceOutput() SharePointOnlineListLinkedServiceOutput {
	return i.ToSharePointOnlineListLinkedServiceOutputWithContext(context.Background())
}

func (i SharePointOnlineListLinkedServiceArgs) ToSharePointOnlineListLinkedServiceOutputWithContext(ctx context.Context) SharePointOnlineListLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharePointOnlineListLinkedServiceOutput)
}

// SharePoint Online List linked service.
type SharePointOnlineListLinkedServiceOutput struct{ *pulumi.OutputState }

func (SharePointOnlineListLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharePointOnlineListLinkedService)(nil)).Elem()
}

func (o SharePointOnlineListLinkedServiceOutput) ToSharePointOnlineListLinkedServiceOutput() SharePointOnlineListLinkedServiceOutput {
	return o
}

func (o SharePointOnlineListLinkedServiceOutput) ToSharePointOnlineListLinkedServiceOutputWithContext(ctx context.Context) SharePointOnlineListLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SharePointOnlineListLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SharePointOnlineListLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SharePointOnlineListLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SharePointOnlineListLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SharePointOnlineListLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The application (client) ID of your application registered in Azure Active Directory. Make sure to grant SharePoint site permission to this application. Type: string (or Expression with resultType string).
func (o SharePointOnlineListLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The client secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
func (o SharePointOnlineListLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The URL of the SharePoint Online site. For example, https://contoso.sharepoint.com/sites/siteName. Type: string (or Expression with resultType string).
func (o SharePointOnlineListLinkedServiceOutput) SiteUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) interface{} { return v.SiteUrl }).(pulumi.AnyOutput)
}

// The tenant ID under which your application resides. You can find it from Azure portal Active Directory overview page. Type: string (or Expression with resultType string).
func (o SharePointOnlineListLinkedServiceOutput) TenantId() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) interface{} { return v.TenantId }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SharePointOnlineListLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// SharePoint Online List linked service.
type SharePointOnlineListLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The application (client) ID of your application registered in Azure Active Directory. Make sure to grant SharePoint site permission to this application. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The client secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The URL of the SharePoint Online site. For example, https://contoso.sharepoint.com/sites/siteName. Type: string (or Expression with resultType string).
	SiteUrl interface{} `pulumi:"siteUrl"`
	// The tenant ID under which your application resides. You can find it from Azure portal Active Directory overview page. Type: string (or Expression with resultType string).
	TenantId interface{} `pulumi:"tenantId"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// SharePointOnlineListLinkedServiceResponseInput is an input type that accepts SharePointOnlineListLinkedServiceResponseArgs and SharePointOnlineListLinkedServiceResponseOutput values.
// You can construct a concrete instance of `SharePointOnlineListLinkedServiceResponseInput` via:
//
//          SharePointOnlineListLinkedServiceResponseArgs{...}
type SharePointOnlineListLinkedServiceResponseInput interface {
	pulumi.Input

	ToSharePointOnlineListLinkedServiceResponseOutput() SharePointOnlineListLinkedServiceResponseOutput
	ToSharePointOnlineListLinkedServiceResponseOutputWithContext(context.Context) SharePointOnlineListLinkedServiceResponseOutput
}

// SharePoint Online List linked service.
type SharePointOnlineListLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The application (client) ID of your application registered in Azure Active Directory. Make sure to grant SharePoint site permission to this application. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The client secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The URL of the SharePoint Online site. For example, https://contoso.sharepoint.com/sites/siteName. Type: string (or Expression with resultType string).
	SiteUrl pulumi.Input `pulumi:"siteUrl"`
	// The tenant ID under which your application resides. You can find it from Azure portal Active Directory overview page. Type: string (or Expression with resultType string).
	TenantId pulumi.Input `pulumi:"tenantId"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SharePointOnlineListLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharePointOnlineListLinkedServiceResponse)(nil)).Elem()
}

func (i SharePointOnlineListLinkedServiceResponseArgs) ToSharePointOnlineListLinkedServiceResponseOutput() SharePointOnlineListLinkedServiceResponseOutput {
	return i.ToSharePointOnlineListLinkedServiceResponseOutputWithContext(context.Background())
}

func (i SharePointOnlineListLinkedServiceResponseArgs) ToSharePointOnlineListLinkedServiceResponseOutputWithContext(ctx context.Context) SharePointOnlineListLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharePointOnlineListLinkedServiceResponseOutput)
}

// SharePoint Online List linked service.
type SharePointOnlineListLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SharePointOnlineListLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharePointOnlineListLinkedServiceResponse)(nil)).Elem()
}

func (o SharePointOnlineListLinkedServiceResponseOutput) ToSharePointOnlineListLinkedServiceResponseOutput() SharePointOnlineListLinkedServiceResponseOutput {
	return o
}

func (o SharePointOnlineListLinkedServiceResponseOutput) ToSharePointOnlineListLinkedServiceResponseOutputWithContext(ctx context.Context) SharePointOnlineListLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SharePointOnlineListLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SharePointOnlineListLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SharePointOnlineListLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SharePointOnlineListLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SharePointOnlineListLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The application (client) ID of your application registered in Azure Active Directory. Make sure to grant SharePoint site permission to this application. Type: string (or Expression with resultType string).
func (o SharePointOnlineListLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The client secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
func (o SharePointOnlineListLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The URL of the SharePoint Online site. For example, https://contoso.sharepoint.com/sites/siteName. Type: string (or Expression with resultType string).
func (o SharePointOnlineListLinkedServiceResponseOutput) SiteUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) interface{} { return v.SiteUrl }).(pulumi.AnyOutput)
}

// The tenant ID under which your application resides. You can find it from Azure portal Active Directory overview page. Type: string (or Expression with resultType string).
func (o SharePointOnlineListLinkedServiceResponseOutput) TenantId() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) interface{} { return v.TenantId }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SharePointOnlineListLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The sharepoint online list resource dataset.
type SharePointOnlineListResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The name of the SharePoint Online list. Type: string (or Expression with resultType string).
	ListName interface{} `pulumi:"listName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SharePointOnlineListResourceDatasetInput is an input type that accepts SharePointOnlineListResourceDatasetArgs and SharePointOnlineListResourceDatasetOutput values.
// You can construct a concrete instance of `SharePointOnlineListResourceDatasetInput` via:
//
//          SharePointOnlineListResourceDatasetArgs{...}
type SharePointOnlineListResourceDatasetInput interface {
	pulumi.Input

	ToSharePointOnlineListResourceDatasetOutput() SharePointOnlineListResourceDatasetOutput
	ToSharePointOnlineListResourceDatasetOutputWithContext(context.Context) SharePointOnlineListResourceDatasetOutput
}

// The sharepoint online list resource dataset.
type SharePointOnlineListResourceDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The name of the SharePoint Online list. Type: string (or Expression with resultType string).
	ListName pulumi.Input `pulumi:"listName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SharePointOnlineListResourceDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharePointOnlineListResourceDataset)(nil)).Elem()
}

func (i SharePointOnlineListResourceDatasetArgs) ToSharePointOnlineListResourceDatasetOutput() SharePointOnlineListResourceDatasetOutput {
	return i.ToSharePointOnlineListResourceDatasetOutputWithContext(context.Background())
}

func (i SharePointOnlineListResourceDatasetArgs) ToSharePointOnlineListResourceDatasetOutputWithContext(ctx context.Context) SharePointOnlineListResourceDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharePointOnlineListResourceDatasetOutput)
}

// The sharepoint online list resource dataset.
type SharePointOnlineListResourceDatasetOutput struct{ *pulumi.OutputState }

func (SharePointOnlineListResourceDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharePointOnlineListResourceDataset)(nil)).Elem()
}

func (o SharePointOnlineListResourceDatasetOutput) ToSharePointOnlineListResourceDatasetOutput() SharePointOnlineListResourceDatasetOutput {
	return o
}

func (o SharePointOnlineListResourceDatasetOutput) ToSharePointOnlineListResourceDatasetOutputWithContext(ctx context.Context) SharePointOnlineListResourceDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SharePointOnlineListResourceDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SharePointOnlineListResourceDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SharePointOnlineListResourceDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SharePointOnlineListResourceDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The name of the SharePoint Online list. Type: string (or Expression with resultType string).
func (o SharePointOnlineListResourceDatasetOutput) ListName() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDataset) interface{} { return v.ListName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SharePointOnlineListResourceDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SharePointOnlineListResourceDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SharePointOnlineListResourceDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SharePointOnlineListResourceDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The sharepoint online list resource dataset.
type SharePointOnlineListResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The name of the SharePoint Online list. Type: string (or Expression with resultType string).
	ListName interface{} `pulumi:"listName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SharePointOnlineListResourceDatasetResponseInput is an input type that accepts SharePointOnlineListResourceDatasetResponseArgs and SharePointOnlineListResourceDatasetResponseOutput values.
// You can construct a concrete instance of `SharePointOnlineListResourceDatasetResponseInput` via:
//
//          SharePointOnlineListResourceDatasetResponseArgs{...}
type SharePointOnlineListResourceDatasetResponseInput interface {
	pulumi.Input

	ToSharePointOnlineListResourceDatasetResponseOutput() SharePointOnlineListResourceDatasetResponseOutput
	ToSharePointOnlineListResourceDatasetResponseOutputWithContext(context.Context) SharePointOnlineListResourceDatasetResponseOutput
}

// The sharepoint online list resource dataset.
type SharePointOnlineListResourceDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// The name of the SharePoint Online list. Type: string (or Expression with resultType string).
	ListName pulumi.Input `pulumi:"listName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SharePointOnlineListResourceDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharePointOnlineListResourceDatasetResponse)(nil)).Elem()
}

func (i SharePointOnlineListResourceDatasetResponseArgs) ToSharePointOnlineListResourceDatasetResponseOutput() SharePointOnlineListResourceDatasetResponseOutput {
	return i.ToSharePointOnlineListResourceDatasetResponseOutputWithContext(context.Background())
}

func (i SharePointOnlineListResourceDatasetResponseArgs) ToSharePointOnlineListResourceDatasetResponseOutputWithContext(ctx context.Context) SharePointOnlineListResourceDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharePointOnlineListResourceDatasetResponseOutput)
}

// The sharepoint online list resource dataset.
type SharePointOnlineListResourceDatasetResponseOutput struct{ *pulumi.OutputState }

func (SharePointOnlineListResourceDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharePointOnlineListResourceDatasetResponse)(nil)).Elem()
}

func (o SharePointOnlineListResourceDatasetResponseOutput) ToSharePointOnlineListResourceDatasetResponseOutput() SharePointOnlineListResourceDatasetResponseOutput {
	return o
}

func (o SharePointOnlineListResourceDatasetResponseOutput) ToSharePointOnlineListResourceDatasetResponseOutputWithContext(ctx context.Context) SharePointOnlineListResourceDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SharePointOnlineListResourceDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SharePointOnlineListResourceDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SharePointOnlineListResourceDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SharePointOnlineListResourceDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// The name of the SharePoint Online list. Type: string (or Expression with resultType string).
func (o SharePointOnlineListResourceDatasetResponseOutput) ListName() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDatasetResponse) interface{} { return v.ListName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SharePointOnlineListResourceDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SharePointOnlineListResourceDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SharePointOnlineListResourceDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SharePointOnlineListResourceDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Shopify Service linked service.
type ShopifyLinkedService struct {
	// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// ShopifyLinkedServiceInput is an input type that accepts ShopifyLinkedServiceArgs and ShopifyLinkedServiceOutput values.
// You can construct a concrete instance of `ShopifyLinkedServiceInput` via:
//
//          ShopifyLinkedServiceArgs{...}
type ShopifyLinkedServiceInput interface {
	pulumi.Input

	ToShopifyLinkedServiceOutput() ShopifyLinkedServiceOutput
	ToShopifyLinkedServiceOutputWithContext(context.Context) ShopifyLinkedServiceOutput
}

// Shopify Service linked service.
type ShopifyLinkedServiceArgs struct {
	// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (ShopifyLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifyLinkedService)(nil)).Elem()
}

func (i ShopifyLinkedServiceArgs) ToShopifyLinkedServiceOutput() ShopifyLinkedServiceOutput {
	return i.ToShopifyLinkedServiceOutputWithContext(context.Background())
}

func (i ShopifyLinkedServiceArgs) ToShopifyLinkedServiceOutputWithContext(ctx context.Context) ShopifyLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShopifyLinkedServiceOutput)
}

// Shopify Service linked service.
type ShopifyLinkedServiceOutput struct{ *pulumi.OutputState }

func (ShopifyLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifyLinkedService)(nil)).Elem()
}

func (o ShopifyLinkedServiceOutput) ToShopifyLinkedServiceOutput() ShopifyLinkedServiceOutput {
	return o
}

func (o ShopifyLinkedServiceOutput) ToShopifyLinkedServiceOutputWithContext(ctx context.Context) ShopifyLinkedServiceOutput {
	return o
}

// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
func (o ShopifyLinkedServiceOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedService) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o ShopifyLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ShopifyLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o ShopifyLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v ShopifyLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o ShopifyLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShopifyLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ShopifyLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
func (o ShopifyLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ShopifyLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ShopifyLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o ShopifyLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ShopifyLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ShopifyLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ShopifyLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ShopifyLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Shopify Service linked service.
type ShopifyLinkedServiceResponse struct {
	// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// ShopifyLinkedServiceResponseInput is an input type that accepts ShopifyLinkedServiceResponseArgs and ShopifyLinkedServiceResponseOutput values.
// You can construct a concrete instance of `ShopifyLinkedServiceResponseInput` via:
//
//          ShopifyLinkedServiceResponseArgs{...}
type ShopifyLinkedServiceResponseInput interface {
	pulumi.Input

	ToShopifyLinkedServiceResponseOutput() ShopifyLinkedServiceResponseOutput
	ToShopifyLinkedServiceResponseOutputWithContext(context.Context) ShopifyLinkedServiceResponseOutput
}

// Shopify Service linked service.
type ShopifyLinkedServiceResponseArgs struct {
	// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (ShopifyLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifyLinkedServiceResponse)(nil)).Elem()
}

func (i ShopifyLinkedServiceResponseArgs) ToShopifyLinkedServiceResponseOutput() ShopifyLinkedServiceResponseOutput {
	return i.ToShopifyLinkedServiceResponseOutputWithContext(context.Background())
}

func (i ShopifyLinkedServiceResponseArgs) ToShopifyLinkedServiceResponseOutputWithContext(ctx context.Context) ShopifyLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShopifyLinkedServiceResponseOutput)
}

// Shopify Service linked service.
type ShopifyLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ShopifyLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifyLinkedServiceResponse)(nil)).Elem()
}

func (o ShopifyLinkedServiceResponseOutput) ToShopifyLinkedServiceResponseOutput() ShopifyLinkedServiceResponseOutput {
	return o
}

func (o ShopifyLinkedServiceResponseOutput) ToShopifyLinkedServiceResponseOutputWithContext(ctx context.Context) ShopifyLinkedServiceResponseOutput {
	return o
}

// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
func (o ShopifyLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o ShopifyLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o ShopifyLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o ShopifyLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ShopifyLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
func (o ShopifyLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ShopifyLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o ShopifyLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ShopifyLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ShopifyLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ShopifyLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Shopify Service dataset.
type ShopifyObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ShopifyObjectDatasetInput is an input type that accepts ShopifyObjectDatasetArgs and ShopifyObjectDatasetOutput values.
// You can construct a concrete instance of `ShopifyObjectDatasetInput` via:
//
//          ShopifyObjectDatasetArgs{...}
type ShopifyObjectDatasetInput interface {
	pulumi.Input

	ToShopifyObjectDatasetOutput() ShopifyObjectDatasetOutput
	ToShopifyObjectDatasetOutputWithContext(context.Context) ShopifyObjectDatasetOutput
}

// Shopify Service dataset.
type ShopifyObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ShopifyObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifyObjectDataset)(nil)).Elem()
}

func (i ShopifyObjectDatasetArgs) ToShopifyObjectDatasetOutput() ShopifyObjectDatasetOutput {
	return i.ToShopifyObjectDatasetOutputWithContext(context.Background())
}

func (i ShopifyObjectDatasetArgs) ToShopifyObjectDatasetOutputWithContext(ctx context.Context) ShopifyObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShopifyObjectDatasetOutput)
}

// Shopify Service dataset.
type ShopifyObjectDatasetOutput struct{ *pulumi.OutputState }

func (ShopifyObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifyObjectDataset)(nil)).Elem()
}

func (o ShopifyObjectDatasetOutput) ToShopifyObjectDatasetOutput() ShopifyObjectDatasetOutput {
	return o
}

func (o ShopifyObjectDatasetOutput) ToShopifyObjectDatasetOutputWithContext(ctx context.Context) ShopifyObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ShopifyObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ShopifyObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ShopifyObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShopifyObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ShopifyObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v ShopifyObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o ShopifyObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ShopifyObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o ShopifyObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ShopifyObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ShopifyObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ShopifyObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ShopifyObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o ShopifyObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ShopifyObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Shopify Service dataset.
type ShopifyObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ShopifyObjectDatasetResponseInput is an input type that accepts ShopifyObjectDatasetResponseArgs and ShopifyObjectDatasetResponseOutput values.
// You can construct a concrete instance of `ShopifyObjectDatasetResponseInput` via:
//
//          ShopifyObjectDatasetResponseArgs{...}
type ShopifyObjectDatasetResponseInput interface {
	pulumi.Input

	ToShopifyObjectDatasetResponseOutput() ShopifyObjectDatasetResponseOutput
	ToShopifyObjectDatasetResponseOutputWithContext(context.Context) ShopifyObjectDatasetResponseOutput
}

// Shopify Service dataset.
type ShopifyObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ShopifyObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifyObjectDatasetResponse)(nil)).Elem()
}

func (i ShopifyObjectDatasetResponseArgs) ToShopifyObjectDatasetResponseOutput() ShopifyObjectDatasetResponseOutput {
	return i.ToShopifyObjectDatasetResponseOutputWithContext(context.Background())
}

func (i ShopifyObjectDatasetResponseArgs) ToShopifyObjectDatasetResponseOutputWithContext(ctx context.Context) ShopifyObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShopifyObjectDatasetResponseOutput)
}

// Shopify Service dataset.
type ShopifyObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (ShopifyObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifyObjectDatasetResponse)(nil)).Elem()
}

func (o ShopifyObjectDatasetResponseOutput) ToShopifyObjectDatasetResponseOutput() ShopifyObjectDatasetResponseOutput {
	return o
}

func (o ShopifyObjectDatasetResponseOutput) ToShopifyObjectDatasetResponseOutputWithContext(ctx context.Context) ShopifyObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ShopifyObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ShopifyObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ShopifyObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o ShopifyObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ShopifyObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ShopifyObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ShopifyObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ShopifyObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o ShopifyObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The snowflake dataset.
type SnowflakeDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Snowflake database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SnowflakeDatasetInput is an input type that accepts SnowflakeDatasetArgs and SnowflakeDatasetOutput values.
// You can construct a concrete instance of `SnowflakeDatasetInput` via:
//
//          SnowflakeDatasetArgs{...}
type SnowflakeDatasetInput interface {
	pulumi.Input

	ToSnowflakeDatasetOutput() SnowflakeDatasetOutput
	ToSnowflakeDatasetOutputWithContext(context.Context) SnowflakeDatasetOutput
}

// The snowflake dataset.
type SnowflakeDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Snowflake database. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SnowflakeDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeDataset)(nil)).Elem()
}

func (i SnowflakeDatasetArgs) ToSnowflakeDatasetOutput() SnowflakeDatasetOutput {
	return i.ToSnowflakeDatasetOutputWithContext(context.Background())
}

func (i SnowflakeDatasetArgs) ToSnowflakeDatasetOutputWithContext(ctx context.Context) SnowflakeDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeDatasetOutput)
}

// The snowflake dataset.
type SnowflakeDatasetOutput struct{ *pulumi.OutputState }

func (SnowflakeDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeDataset)(nil)).Elem()
}

func (o SnowflakeDatasetOutput) ToSnowflakeDatasetOutput() SnowflakeDatasetOutput {
	return o
}

func (o SnowflakeDatasetOutput) ToSnowflakeDatasetOutputWithContext(ctx context.Context) SnowflakeDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SnowflakeDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SnowflakeDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SnowflakeDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnowflakeDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SnowflakeDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SnowflakeDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SnowflakeDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SnowflakeDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SnowflakeDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SnowflakeDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SnowflakeDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SnowflakeDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Snowflake database. Type: string (or Expression with resultType string).
func (o SnowflakeDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SnowflakeDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The snowflake dataset.
type SnowflakeDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Snowflake database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SnowflakeDatasetResponseInput is an input type that accepts SnowflakeDatasetResponseArgs and SnowflakeDatasetResponseOutput values.
// You can construct a concrete instance of `SnowflakeDatasetResponseInput` via:
//
//          SnowflakeDatasetResponseArgs{...}
type SnowflakeDatasetResponseInput interface {
	pulumi.Input

	ToSnowflakeDatasetResponseOutput() SnowflakeDatasetResponseOutput
	ToSnowflakeDatasetResponseOutputWithContext(context.Context) SnowflakeDatasetResponseOutput
}

// The snowflake dataset.
type SnowflakeDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Snowflake database. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SnowflakeDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeDatasetResponse)(nil)).Elem()
}

func (i SnowflakeDatasetResponseArgs) ToSnowflakeDatasetResponseOutput() SnowflakeDatasetResponseOutput {
	return i.ToSnowflakeDatasetResponseOutputWithContext(context.Background())
}

func (i SnowflakeDatasetResponseArgs) ToSnowflakeDatasetResponseOutputWithContext(ctx context.Context) SnowflakeDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeDatasetResponseOutput)
}

// The snowflake dataset.
type SnowflakeDatasetResponseOutput struct{ *pulumi.OutputState }

func (SnowflakeDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeDatasetResponse)(nil)).Elem()
}

func (o SnowflakeDatasetResponseOutput) ToSnowflakeDatasetResponseOutput() SnowflakeDatasetResponseOutput {
	return o
}

func (o SnowflakeDatasetResponseOutput) ToSnowflakeDatasetResponseOutputWithContext(ctx context.Context) SnowflakeDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SnowflakeDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SnowflakeDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SnowflakeDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnowflakeDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SnowflakeDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SnowflakeDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SnowflakeDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SnowflakeDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SnowflakeDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SnowflakeDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SnowflakeDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SnowflakeDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Snowflake database. Type: string (or Expression with resultType string).
func (o SnowflakeDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SnowflakeDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Snowflake linked service.
type SnowflakeLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string of snowflake. Type: string, SecureString.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// SnowflakeLinkedServiceInput is an input type that accepts SnowflakeLinkedServiceArgs and SnowflakeLinkedServiceOutput values.
// You can construct a concrete instance of `SnowflakeLinkedServiceInput` via:
//
//          SnowflakeLinkedServiceArgs{...}
type SnowflakeLinkedServiceInput interface {
	pulumi.Input

	ToSnowflakeLinkedServiceOutput() SnowflakeLinkedServiceOutput
	ToSnowflakeLinkedServiceOutputWithContext(context.Context) SnowflakeLinkedServiceOutput
}

// Snowflake linked service.
type SnowflakeLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string of snowflake. Type: string, SecureString.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferencePtrInput `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SnowflakeLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeLinkedService)(nil)).Elem()
}

func (i SnowflakeLinkedServiceArgs) ToSnowflakeLinkedServiceOutput() SnowflakeLinkedServiceOutput {
	return i.ToSnowflakeLinkedServiceOutputWithContext(context.Background())
}

func (i SnowflakeLinkedServiceArgs) ToSnowflakeLinkedServiceOutputWithContext(ctx context.Context) SnowflakeLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeLinkedServiceOutput)
}

// Snowflake linked service.
type SnowflakeLinkedServiceOutput struct{ *pulumi.OutputState }

func (SnowflakeLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeLinkedService)(nil)).Elem()
}

func (o SnowflakeLinkedServiceOutput) ToSnowflakeLinkedServiceOutput() SnowflakeLinkedServiceOutput {
	return o
}

func (o SnowflakeLinkedServiceOutput) ToSnowflakeLinkedServiceOutputWithContext(ctx context.Context) SnowflakeLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SnowflakeLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SnowflakeLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SnowflakeLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SnowflakeLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string of snowflake. Type: string, SecureString.
func (o SnowflakeLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SnowflakeLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnowflakeLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SnowflakeLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SnowflakeLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SnowflakeLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o SnowflakeLinkedServiceOutput) Password() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v SnowflakeLinkedService) *AzureKeyVaultSecretReference { return v.Password }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
func (o SnowflakeLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Snowflake linked service.
type SnowflakeLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string of snowflake. Type: string, SecureString.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// SnowflakeLinkedServiceResponseInput is an input type that accepts SnowflakeLinkedServiceResponseArgs and SnowflakeLinkedServiceResponseOutput values.
// You can construct a concrete instance of `SnowflakeLinkedServiceResponseInput` via:
//
//          SnowflakeLinkedServiceResponseArgs{...}
type SnowflakeLinkedServiceResponseInput interface {
	pulumi.Input

	ToSnowflakeLinkedServiceResponseOutput() SnowflakeLinkedServiceResponseOutput
	ToSnowflakeLinkedServiceResponseOutputWithContext(context.Context) SnowflakeLinkedServiceResponseOutput
}

// Snowflake linked service.
type SnowflakeLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The connection string of snowflake. Type: string, SecureString.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SnowflakeLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeLinkedServiceResponse)(nil)).Elem()
}

func (i SnowflakeLinkedServiceResponseArgs) ToSnowflakeLinkedServiceResponseOutput() SnowflakeLinkedServiceResponseOutput {
	return i.ToSnowflakeLinkedServiceResponseOutputWithContext(context.Background())
}

func (i SnowflakeLinkedServiceResponseArgs) ToSnowflakeLinkedServiceResponseOutputWithContext(ctx context.Context) SnowflakeLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeLinkedServiceResponseOutput)
}

// Snowflake linked service.
type SnowflakeLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SnowflakeLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeLinkedServiceResponse)(nil)).Elem()
}

func (o SnowflakeLinkedServiceResponseOutput) ToSnowflakeLinkedServiceResponseOutput() SnowflakeLinkedServiceResponseOutput {
	return o
}

func (o SnowflakeLinkedServiceResponseOutput) ToSnowflakeLinkedServiceResponseOutputWithContext(ctx context.Context) SnowflakeLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SnowflakeLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SnowflakeLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SnowflakeLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SnowflakeLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string of snowflake. Type: string, SecureString.
func (o SnowflakeLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SnowflakeLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnowflakeLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SnowflakeLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SnowflakeLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SnowflakeLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o SnowflakeLinkedServiceResponseOutput) Password() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v SnowflakeLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Password }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
func (o SnowflakeLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Spark Server linked service.
type SparkLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication method used to access the Spark server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// IP address or host name of the Spark server
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Spark server.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Spark server uses to listen for client connections.
	Port interface{} `pulumi:"port"`
	// The type of Spark server.
	ServerType *string `pulumi:"serverType"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Spark Server.
	Username interface{} `pulumi:"username"`
}

// SparkLinkedServiceInput is an input type that accepts SparkLinkedServiceArgs and SparkLinkedServiceOutput values.
// You can construct a concrete instance of `SparkLinkedServiceInput` via:
//
//          SparkLinkedServiceArgs{...}
type SparkLinkedServiceInput interface {
	pulumi.Input

	ToSparkLinkedServiceOutput() SparkLinkedServiceOutput
	ToSparkLinkedServiceOutputWithContext(context.Context) SparkLinkedServiceOutput
}

// Spark Server linked service.
type SparkLinkedServiceArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.Input `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication method used to access the Spark server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// IP address or host name of the Spark server
	Host pulumi.Input `pulumi:"host"`
	// The partial URL corresponding to the Spark server.
	HttpPath pulumi.Input `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Spark server uses to listen for client connections.
	Port pulumi.Input `pulumi:"port"`
	// The type of Spark server.
	ServerType pulumi.StringPtrInput `pulumi:"serverType"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol pulumi.StringPtrInput `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Spark Server.
	Username pulumi.Input `pulumi:"username"`
}

func (SparkLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkLinkedService)(nil)).Elem()
}

func (i SparkLinkedServiceArgs) ToSparkLinkedServiceOutput() SparkLinkedServiceOutput {
	return i.ToSparkLinkedServiceOutputWithContext(context.Background())
}

func (i SparkLinkedServiceArgs) ToSparkLinkedServiceOutputWithContext(ctx context.Context) SparkLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkLinkedServiceOutput)
}

// Spark Server linked service.
type SparkLinkedServiceOutput struct{ *pulumi.OutputState }

func (SparkLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkLinkedService)(nil)).Elem()
}

func (o SparkLinkedServiceOutput) ToSparkLinkedServiceOutput() SparkLinkedServiceOutput {
	return o
}

func (o SparkLinkedServiceOutput) ToSparkLinkedServiceOutputWithContext(ctx context.Context) SparkLinkedServiceOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o SparkLinkedServiceOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o SparkLinkedServiceOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o SparkLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SparkLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication method used to access the Spark server.
func (o SparkLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v SparkLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o SparkLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SparkLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SparkLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o SparkLinkedServiceOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SparkLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// IP address or host name of the Spark server
func (o SparkLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The partial URL corresponding to the Spark server.
func (o SparkLinkedServiceOutput) HttpPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.HttpPath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SparkLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SparkLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name that you provided in the Username field
func (o SparkLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Spark server uses to listen for client connections.
func (o SparkLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The type of Spark server.
func (o SparkLinkedServiceOutput) ServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkLinkedService) *string { return v.ServerType }).(pulumi.StringPtrOutput)
}

// The transport protocol to use in the Thrift layer.
func (o SparkLinkedServiceOutput) ThriftTransportProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkLinkedService) *string { return v.ThriftTransportProtocol }).(pulumi.StringPtrOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o SparkLinkedServiceOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SparkLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SparkLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o SparkLinkedServiceOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name that you use to access Spark Server.
func (o SparkLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Spark Server linked service.
type SparkLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication method used to access the Spark server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// IP address or host name of the Spark server
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Spark server.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Spark server uses to listen for client connections.
	Port interface{} `pulumi:"port"`
	// The type of Spark server.
	ServerType *string `pulumi:"serverType"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Spark Server.
	Username interface{} `pulumi:"username"`
}

// SparkLinkedServiceResponseInput is an input type that accepts SparkLinkedServiceResponseArgs and SparkLinkedServiceResponseOutput values.
// You can construct a concrete instance of `SparkLinkedServiceResponseInput` via:
//
//          SparkLinkedServiceResponseArgs{...}
type SparkLinkedServiceResponseInput interface {
	pulumi.Input

	ToSparkLinkedServiceResponseOutput() SparkLinkedServiceResponseOutput
	ToSparkLinkedServiceResponseOutputWithContext(context.Context) SparkLinkedServiceResponseOutput
}

// Spark Server linked service.
type SparkLinkedServiceResponseArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.Input `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication method used to access the Spark server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// IP address or host name of the Spark server
	Host pulumi.Input `pulumi:"host"`
	// The partial URL corresponding to the Spark server.
	HttpPath pulumi.Input `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Spark server uses to listen for client connections.
	Port pulumi.Input `pulumi:"port"`
	// The type of Spark server.
	ServerType pulumi.StringPtrInput `pulumi:"serverType"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol pulumi.StringPtrInput `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Spark Server.
	Username pulumi.Input `pulumi:"username"`
}

func (SparkLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkLinkedServiceResponse)(nil)).Elem()
}

func (i SparkLinkedServiceResponseArgs) ToSparkLinkedServiceResponseOutput() SparkLinkedServiceResponseOutput {
	return i.ToSparkLinkedServiceResponseOutputWithContext(context.Background())
}

func (i SparkLinkedServiceResponseArgs) ToSparkLinkedServiceResponseOutputWithContext(ctx context.Context) SparkLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkLinkedServiceResponseOutput)
}

// Spark Server linked service.
type SparkLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SparkLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkLinkedServiceResponse)(nil)).Elem()
}

func (o SparkLinkedServiceResponseOutput) ToSparkLinkedServiceResponseOutput() SparkLinkedServiceResponseOutput {
	return o
}

func (o SparkLinkedServiceResponseOutput) ToSparkLinkedServiceResponseOutputWithContext(ctx context.Context) SparkLinkedServiceResponseOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o SparkLinkedServiceResponseOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o SparkLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o SparkLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication method used to access the Spark server.
func (o SparkLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o SparkLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SparkLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o SparkLinkedServiceResponseOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SparkLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// IP address or host name of the Spark server
func (o SparkLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The partial URL corresponding to the Spark server.
func (o SparkLinkedServiceResponseOutput) HttpPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.HttpPath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SparkLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name that you provided in the Username field
func (o SparkLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Spark server uses to listen for client connections.
func (o SparkLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The type of Spark server.
func (o SparkLinkedServiceResponseOutput) ServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) *string { return v.ServerType }).(pulumi.StringPtrOutput)
}

// The transport protocol to use in the Thrift layer.
func (o SparkLinkedServiceResponseOutput) ThriftTransportProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) *string { return v.ThriftTransportProtocol }).(pulumi.StringPtrOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o SparkLinkedServiceResponseOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SparkLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o SparkLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name that you use to access Spark Server.
func (o SparkLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Spark Server dataset.
type SparkObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Spark. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SparkObjectDatasetInput is an input type that accepts SparkObjectDatasetArgs and SparkObjectDatasetOutput values.
// You can construct a concrete instance of `SparkObjectDatasetInput` via:
//
//          SparkObjectDatasetArgs{...}
type SparkObjectDatasetInput interface {
	pulumi.Input

	ToSparkObjectDatasetOutput() SparkObjectDatasetOutput
	ToSparkObjectDatasetOutputWithContext(context.Context) SparkObjectDatasetOutput
}

// Spark Server dataset.
type SparkObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Spark. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SparkObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkObjectDataset)(nil)).Elem()
}

func (i SparkObjectDatasetArgs) ToSparkObjectDatasetOutput() SparkObjectDatasetOutput {
	return i.ToSparkObjectDatasetOutputWithContext(context.Background())
}

func (i SparkObjectDatasetArgs) ToSparkObjectDatasetOutputWithContext(ctx context.Context) SparkObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkObjectDatasetOutput)
}

// Spark Server dataset.
type SparkObjectDatasetOutput struct{ *pulumi.OutputState }

func (SparkObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkObjectDataset)(nil)).Elem()
}

func (o SparkObjectDatasetOutput) ToSparkObjectDatasetOutput() SparkObjectDatasetOutput {
	return o
}

func (o SparkObjectDatasetOutput) ToSparkObjectDatasetOutputWithContext(ctx context.Context) SparkObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SparkObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SparkObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SparkObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SparkObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SparkObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SparkObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SparkObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SparkObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SparkObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SparkObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SparkObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Spark. Type: string (or Expression with resultType string).
func (o SparkObjectDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkObjectDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o SparkObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SparkObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SparkObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Spark Server dataset.
type SparkObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Spark. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SparkObjectDatasetResponseInput is an input type that accepts SparkObjectDatasetResponseArgs and SparkObjectDatasetResponseOutput values.
// You can construct a concrete instance of `SparkObjectDatasetResponseInput` via:
//
//          SparkObjectDatasetResponseArgs{...}
type SparkObjectDatasetResponseInput interface {
	pulumi.Input

	ToSparkObjectDatasetResponseOutput() SparkObjectDatasetResponseOutput
	ToSparkObjectDatasetResponseOutputWithContext(context.Context) SparkObjectDatasetResponseOutput
}

// Spark Server dataset.
type SparkObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Spark. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SparkObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkObjectDatasetResponse)(nil)).Elem()
}

func (i SparkObjectDatasetResponseArgs) ToSparkObjectDatasetResponseOutput() SparkObjectDatasetResponseOutput {
	return i.ToSparkObjectDatasetResponseOutputWithContext(context.Background())
}

func (i SparkObjectDatasetResponseArgs) ToSparkObjectDatasetResponseOutputWithContext(ctx context.Context) SparkObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkObjectDatasetResponseOutput)
}

// Spark Server dataset.
type SparkObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (SparkObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkObjectDatasetResponse)(nil)).Elem()
}

func (o SparkObjectDatasetResponseOutput) ToSparkObjectDatasetResponseOutput() SparkObjectDatasetResponseOutput {
	return o
}

func (o SparkObjectDatasetResponseOutput) ToSparkObjectDatasetResponseOutputWithContext(ctx context.Context) SparkObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SparkObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SparkObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SparkObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SparkObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SparkObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SparkObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SparkObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Spark. Type: string (or Expression with resultType string).
func (o SparkObjectDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o SparkObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SparkObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SQL Server linked service.
type SqlServerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The on-premises Windows authentication password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SqlServerLinkedServiceInput is an input type that accepts SqlServerLinkedServiceArgs and SqlServerLinkedServiceOutput values.
// You can construct a concrete instance of `SqlServerLinkedServiceInput` via:
//
//          SqlServerLinkedServiceArgs{...}
type SqlServerLinkedServiceInput interface {
	pulumi.Input

	ToSqlServerLinkedServiceOutput() SqlServerLinkedServiceOutput
	ToSqlServerLinkedServiceOutputWithContext(context.Context) SqlServerLinkedServiceOutput
}

// SQL Server linked service.
type SqlServerLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The on-premises Windows authentication password.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SqlServerLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerLinkedService)(nil)).Elem()
}

func (i SqlServerLinkedServiceArgs) ToSqlServerLinkedServiceOutput() SqlServerLinkedServiceOutput {
	return i.ToSqlServerLinkedServiceOutputWithContext(context.Background())
}

func (i SqlServerLinkedServiceArgs) ToSqlServerLinkedServiceOutputWithContext(ctx context.Context) SqlServerLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerLinkedServiceOutput)
}

// SQL Server linked service.
type SqlServerLinkedServiceOutput struct{ *pulumi.OutputState }

func (SqlServerLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerLinkedService)(nil)).Elem()
}

func (o SqlServerLinkedServiceOutput) ToSqlServerLinkedServiceOutput() SqlServerLinkedServiceOutput {
	return o
}

func (o SqlServerLinkedServiceOutput) ToSqlServerLinkedServiceOutputWithContext(ctx context.Context) SqlServerLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SqlServerLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SqlServerLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SqlServerLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SqlServerLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o SqlServerLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SqlServerLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SqlServerLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SqlServerLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SqlServerLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The on-premises Windows authentication password.
func (o SqlServerLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SqlServerLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
func (o SqlServerLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// SQL Server linked service.
type SqlServerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The on-premises Windows authentication password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SqlServerLinkedServiceResponseInput is an input type that accepts SqlServerLinkedServiceResponseArgs and SqlServerLinkedServiceResponseOutput values.
// You can construct a concrete instance of `SqlServerLinkedServiceResponseInput` via:
//
//          SqlServerLinkedServiceResponseArgs{...}
type SqlServerLinkedServiceResponseInput interface {
	pulumi.Input

	ToSqlServerLinkedServiceResponseOutput() SqlServerLinkedServiceResponseOutput
	ToSqlServerLinkedServiceResponseOutputWithContext(context.Context) SqlServerLinkedServiceResponseOutput
}

// SQL Server linked service.
type SqlServerLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The on-premises Windows authentication password.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SqlServerLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerLinkedServiceResponse)(nil)).Elem()
}

func (i SqlServerLinkedServiceResponseArgs) ToSqlServerLinkedServiceResponseOutput() SqlServerLinkedServiceResponseOutput {
	return i.ToSqlServerLinkedServiceResponseOutputWithContext(context.Background())
}

func (i SqlServerLinkedServiceResponseArgs) ToSqlServerLinkedServiceResponseOutputWithContext(ctx context.Context) SqlServerLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerLinkedServiceResponseOutput)
}

// SQL Server linked service.
type SqlServerLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SqlServerLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerLinkedServiceResponse)(nil)).Elem()
}

func (o SqlServerLinkedServiceResponseOutput) ToSqlServerLinkedServiceResponseOutput() SqlServerLinkedServiceResponseOutput {
	return o
}

func (o SqlServerLinkedServiceResponseOutput) ToSqlServerLinkedServiceResponseOutputWithContext(ctx context.Context) SqlServerLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SqlServerLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SqlServerLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o SqlServerLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SqlServerLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SqlServerLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SqlServerLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The on-premises Windows authentication password.
func (o SqlServerLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SqlServerLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
func (o SqlServerLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The on-premises SQL Server dataset.
type SqlServerTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SqlServerTableDatasetInput is an input type that accepts SqlServerTableDatasetArgs and SqlServerTableDatasetOutput values.
// You can construct a concrete instance of `SqlServerTableDatasetInput` via:
//
//          SqlServerTableDatasetArgs{...}
type SqlServerTableDatasetInput interface {
	pulumi.Input

	ToSqlServerTableDatasetOutput() SqlServerTableDatasetOutput
	ToSqlServerTableDatasetOutputWithContext(context.Context) SqlServerTableDatasetOutput
}

// The on-premises SQL Server dataset.
type SqlServerTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SqlServerTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerTableDataset)(nil)).Elem()
}

func (i SqlServerTableDatasetArgs) ToSqlServerTableDatasetOutput() SqlServerTableDatasetOutput {
	return i.ToSqlServerTableDatasetOutputWithContext(context.Background())
}

func (i SqlServerTableDatasetArgs) ToSqlServerTableDatasetOutputWithContext(ctx context.Context) SqlServerTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerTableDatasetOutput)
}

// The on-premises SQL Server dataset.
type SqlServerTableDatasetOutput struct{ *pulumi.OutputState }

func (SqlServerTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerTableDataset)(nil)).Elem()
}

func (o SqlServerTableDatasetOutput) ToSqlServerTableDatasetOutput() SqlServerTableDatasetOutput {
	return o
}

func (o SqlServerTableDatasetOutput) ToSqlServerTableDatasetOutputWithContext(ctx context.Context) SqlServerTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SqlServerTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SqlServerTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SqlServerTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SqlServerTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SqlServerTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SqlServerTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SqlServerTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SqlServerTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SqlServerTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SqlServerTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SqlServerTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
func (o SqlServerTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o SqlServerTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SqlServerTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The on-premises SQL Server dataset.
type SqlServerTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SqlServerTableDatasetResponseInput is an input type that accepts SqlServerTableDatasetResponseArgs and SqlServerTableDatasetResponseOutput values.
// You can construct a concrete instance of `SqlServerTableDatasetResponseInput` via:
//
//          SqlServerTableDatasetResponseArgs{...}
type SqlServerTableDatasetResponseInput interface {
	pulumi.Input

	ToSqlServerTableDatasetResponseOutput() SqlServerTableDatasetResponseOutput
	ToSqlServerTableDatasetResponseOutputWithContext(context.Context) SqlServerTableDatasetResponseOutput
}

// The on-premises SQL Server dataset.
type SqlServerTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SqlServerTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerTableDatasetResponse)(nil)).Elem()
}

func (i SqlServerTableDatasetResponseArgs) ToSqlServerTableDatasetResponseOutput() SqlServerTableDatasetResponseOutput {
	return i.ToSqlServerTableDatasetResponseOutputWithContext(context.Background())
}

func (i SqlServerTableDatasetResponseArgs) ToSqlServerTableDatasetResponseOutputWithContext(ctx context.Context) SqlServerTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerTableDatasetResponseOutput)
}

// The on-premises SQL Server dataset.
type SqlServerTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (SqlServerTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerTableDatasetResponse)(nil)).Elem()
}

func (o SqlServerTableDatasetResponseOutput) ToSqlServerTableDatasetResponseOutput() SqlServerTableDatasetResponseOutput {
	return o
}

func (o SqlServerTableDatasetResponseOutput) ToSqlServerTableDatasetResponseOutputWithContext(ctx context.Context) SqlServerTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SqlServerTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SqlServerTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SqlServerTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SqlServerTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SqlServerTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SqlServerTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SqlServerTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
func (o SqlServerTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o SqlServerTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SqlServerTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Square Service linked service.
type SquareLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your Square application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your Square application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to Square. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the Square instance. (i.e. mystore.mysquare.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500)
	RedirectUri interface{} `pulumi:"redirectUri"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// SquareLinkedServiceInput is an input type that accepts SquareLinkedServiceArgs and SquareLinkedServiceOutput values.
// You can construct a concrete instance of `SquareLinkedServiceInput` via:
//
//          SquareLinkedServiceArgs{...}
type SquareLinkedServiceInput interface {
	pulumi.Input

	ToSquareLinkedServiceOutput() SquareLinkedServiceOutput
	ToSquareLinkedServiceOutputWithContext(context.Context) SquareLinkedServiceOutput
}

// Square Service linked service.
type SquareLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The client ID associated with your Square application.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret associated with your Square application.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Properties used to connect to Square. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties pulumi.Input `pulumi:"connectionProperties"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The URL of the Square instance. (i.e. mystore.mysquare.com)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500)
	RedirectUri pulumi.Input `pulumi:"redirectUri"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (SquareLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareLinkedService)(nil)).Elem()
}

func (i SquareLinkedServiceArgs) ToSquareLinkedServiceOutput() SquareLinkedServiceOutput {
	return i.ToSquareLinkedServiceOutputWithContext(context.Background())
}

func (i SquareLinkedServiceArgs) ToSquareLinkedServiceOutputWithContext(ctx context.Context) SquareLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SquareLinkedServiceOutput)
}

// Square Service linked service.
type SquareLinkedServiceOutput struct{ *pulumi.OutputState }

func (SquareLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareLinkedService)(nil)).Elem()
}

func (o SquareLinkedServiceOutput) ToSquareLinkedServiceOutput() SquareLinkedServiceOutput {
	return o
}

func (o SquareLinkedServiceOutput) ToSquareLinkedServiceOutputWithContext(ctx context.Context) SquareLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SquareLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SquareLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with your Square application.
func (o SquareLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with your Square application.
func (o SquareLinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SquareLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SquareLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Properties used to connect to Square. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o SquareLinkedServiceOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedService) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SquareLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SquareLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SquareLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The URL of the Square instance. (i.e. mystore.mysquare.com)
func (o SquareLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SquareLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SquareLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500)
func (o SquareLinkedServiceOutput) RedirectUri() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedService) interface{} { return v.RedirectUri }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SquareLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SquareLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o SquareLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o SquareLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o SquareLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Square Service linked service.
type SquareLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your Square application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your Square application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to Square. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the Square instance. (i.e. mystore.mysquare.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500)
	RedirectUri interface{} `pulumi:"redirectUri"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// SquareLinkedServiceResponseInput is an input type that accepts SquareLinkedServiceResponseArgs and SquareLinkedServiceResponseOutput values.
// You can construct a concrete instance of `SquareLinkedServiceResponseInput` via:
//
//          SquareLinkedServiceResponseArgs{...}
type SquareLinkedServiceResponseInput interface {
	pulumi.Input

	ToSquareLinkedServiceResponseOutput() SquareLinkedServiceResponseOutput
	ToSquareLinkedServiceResponseOutputWithContext(context.Context) SquareLinkedServiceResponseOutput
}

// Square Service linked service.
type SquareLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The client ID associated with your Square application.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret associated with your Square application.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Properties used to connect to Square. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties pulumi.Input `pulumi:"connectionProperties"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The URL of the Square instance. (i.e. mystore.mysquare.com)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500)
	RedirectUri pulumi.Input `pulumi:"redirectUri"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (SquareLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareLinkedServiceResponse)(nil)).Elem()
}

func (i SquareLinkedServiceResponseArgs) ToSquareLinkedServiceResponseOutput() SquareLinkedServiceResponseOutput {
	return i.ToSquareLinkedServiceResponseOutputWithContext(context.Background())
}

func (i SquareLinkedServiceResponseArgs) ToSquareLinkedServiceResponseOutputWithContext(ctx context.Context) SquareLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SquareLinkedServiceResponseOutput)
}

// Square Service linked service.
type SquareLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SquareLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareLinkedServiceResponse)(nil)).Elem()
}

func (o SquareLinkedServiceResponseOutput) ToSquareLinkedServiceResponseOutput() SquareLinkedServiceResponseOutput {
	return o
}

func (o SquareLinkedServiceResponseOutput) ToSquareLinkedServiceResponseOutputWithContext(ctx context.Context) SquareLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SquareLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with your Square application.
func (o SquareLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with your Square application.
func (o SquareLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SquareLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Properties used to connect to Square. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o SquareLinkedServiceResponseOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SquareLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SquareLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The URL of the Square instance. (i.e. mystore.mysquare.com)
func (o SquareLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SquareLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500)
func (o SquareLinkedServiceResponseOutput) RedirectUri() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) interface{} { return v.RedirectUri }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SquareLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o SquareLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o SquareLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o SquareLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Square Service dataset.
type SquareObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SquareObjectDatasetInput is an input type that accepts SquareObjectDatasetArgs and SquareObjectDatasetOutput values.
// You can construct a concrete instance of `SquareObjectDatasetInput` via:
//
//          SquareObjectDatasetArgs{...}
type SquareObjectDatasetInput interface {
	pulumi.Input

	ToSquareObjectDatasetOutput() SquareObjectDatasetOutput
	ToSquareObjectDatasetOutputWithContext(context.Context) SquareObjectDatasetOutput
}

// Square Service dataset.
type SquareObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SquareObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareObjectDataset)(nil)).Elem()
}

func (i SquareObjectDatasetArgs) ToSquareObjectDatasetOutput() SquareObjectDatasetOutput {
	return i.ToSquareObjectDatasetOutputWithContext(context.Background())
}

func (i SquareObjectDatasetArgs) ToSquareObjectDatasetOutputWithContext(ctx context.Context) SquareObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SquareObjectDatasetOutput)
}

// Square Service dataset.
type SquareObjectDatasetOutput struct{ *pulumi.OutputState }

func (SquareObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareObjectDataset)(nil)).Elem()
}

func (o SquareObjectDatasetOutput) ToSquareObjectDatasetOutput() SquareObjectDatasetOutput {
	return o
}

func (o SquareObjectDatasetOutput) ToSquareObjectDatasetOutputWithContext(ctx context.Context) SquareObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SquareObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SquareObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SquareObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SquareObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SquareObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SquareObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SquareObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SquareObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SquareObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SquareObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SquareObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SquareObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o SquareObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SquareObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SquareObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Square Service dataset.
type SquareObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SquareObjectDatasetResponseInput is an input type that accepts SquareObjectDatasetResponseArgs and SquareObjectDatasetResponseOutput values.
// You can construct a concrete instance of `SquareObjectDatasetResponseInput` via:
//
//          SquareObjectDatasetResponseArgs{...}
type SquareObjectDatasetResponseInput interface {
	pulumi.Input

	ToSquareObjectDatasetResponseOutput() SquareObjectDatasetResponseOutput
	ToSquareObjectDatasetResponseOutputWithContext(context.Context) SquareObjectDatasetResponseOutput
}

// Square Service dataset.
type SquareObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SquareObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareObjectDatasetResponse)(nil)).Elem()
}

func (i SquareObjectDatasetResponseArgs) ToSquareObjectDatasetResponseOutput() SquareObjectDatasetResponseOutput {
	return i.ToSquareObjectDatasetResponseOutputWithContext(context.Background())
}

func (i SquareObjectDatasetResponseArgs) ToSquareObjectDatasetResponseOutputWithContext(ctx context.Context) SquareObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SquareObjectDatasetResponseOutput)
}

// Square Service dataset.
type SquareObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (SquareObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareObjectDatasetResponse)(nil)).Elem()
}

func (o SquareObjectDatasetResponseOutput) ToSquareObjectDatasetResponseOutput() SquareObjectDatasetResponseOutput {
	return o
}

func (o SquareObjectDatasetResponseOutput) ToSquareObjectDatasetResponseOutputWithContext(ctx context.Context) SquareObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SquareObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SquareObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SquareObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SquareObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SquareObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SquareObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SquareObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o SquareObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SquareObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Ssis environment reference.
type SsisEnvironmentReferenceResponse struct {
	// Environment folder name.
	EnvironmentFolderName *string `pulumi:"environmentFolderName"`
	// Environment name.
	EnvironmentName *string `pulumi:"environmentName"`
	// Environment reference id.
	Id *int `pulumi:"id"`
	// Reference type
	ReferenceType *string `pulumi:"referenceType"`
}

// SsisEnvironmentReferenceResponseInput is an input type that accepts SsisEnvironmentReferenceResponseArgs and SsisEnvironmentReferenceResponseOutput values.
// You can construct a concrete instance of `SsisEnvironmentReferenceResponseInput` via:
//
//          SsisEnvironmentReferenceResponseArgs{...}
type SsisEnvironmentReferenceResponseInput interface {
	pulumi.Input

	ToSsisEnvironmentReferenceResponseOutput() SsisEnvironmentReferenceResponseOutput
	ToSsisEnvironmentReferenceResponseOutputWithContext(context.Context) SsisEnvironmentReferenceResponseOutput
}

// Ssis environment reference.
type SsisEnvironmentReferenceResponseArgs struct {
	// Environment folder name.
	EnvironmentFolderName pulumi.StringPtrInput `pulumi:"environmentFolderName"`
	// Environment name.
	EnvironmentName pulumi.StringPtrInput `pulumi:"environmentName"`
	// Environment reference id.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Reference type
	ReferenceType pulumi.StringPtrInput `pulumi:"referenceType"`
}

func (SsisEnvironmentReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisEnvironmentReferenceResponse)(nil)).Elem()
}

func (i SsisEnvironmentReferenceResponseArgs) ToSsisEnvironmentReferenceResponseOutput() SsisEnvironmentReferenceResponseOutput {
	return i.ToSsisEnvironmentReferenceResponseOutputWithContext(context.Background())
}

func (i SsisEnvironmentReferenceResponseArgs) ToSsisEnvironmentReferenceResponseOutputWithContext(ctx context.Context) SsisEnvironmentReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisEnvironmentReferenceResponseOutput)
}

// SsisEnvironmentReferenceResponseArrayInput is an input type that accepts SsisEnvironmentReferenceResponseArray and SsisEnvironmentReferenceResponseArrayOutput values.
// You can construct a concrete instance of `SsisEnvironmentReferenceResponseArrayInput` via:
//
//          SsisEnvironmentReferenceResponseArray{ SsisEnvironmentReferenceResponseArgs{...} }
type SsisEnvironmentReferenceResponseArrayInput interface {
	pulumi.Input

	ToSsisEnvironmentReferenceResponseArrayOutput() SsisEnvironmentReferenceResponseArrayOutput
	ToSsisEnvironmentReferenceResponseArrayOutputWithContext(context.Context) SsisEnvironmentReferenceResponseArrayOutput
}

type SsisEnvironmentReferenceResponseArray []SsisEnvironmentReferenceResponseInput

func (SsisEnvironmentReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SsisEnvironmentReferenceResponse)(nil)).Elem()
}

func (i SsisEnvironmentReferenceResponseArray) ToSsisEnvironmentReferenceResponseArrayOutput() SsisEnvironmentReferenceResponseArrayOutput {
	return i.ToSsisEnvironmentReferenceResponseArrayOutputWithContext(context.Background())
}

func (i SsisEnvironmentReferenceResponseArray) ToSsisEnvironmentReferenceResponseArrayOutputWithContext(ctx context.Context) SsisEnvironmentReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisEnvironmentReferenceResponseArrayOutput)
}

// Ssis environment reference.
type SsisEnvironmentReferenceResponseOutput struct{ *pulumi.OutputState }

func (SsisEnvironmentReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisEnvironmentReferenceResponse)(nil)).Elem()
}

func (o SsisEnvironmentReferenceResponseOutput) ToSsisEnvironmentReferenceResponseOutput() SsisEnvironmentReferenceResponseOutput {
	return o
}

func (o SsisEnvironmentReferenceResponseOutput) ToSsisEnvironmentReferenceResponseOutputWithContext(ctx context.Context) SsisEnvironmentReferenceResponseOutput {
	return o
}

// Environment folder name.
func (o SsisEnvironmentReferenceResponseOutput) EnvironmentFolderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisEnvironmentReferenceResponse) *string { return v.EnvironmentFolderName }).(pulumi.StringPtrOutput)
}

// Environment name.
func (o SsisEnvironmentReferenceResponseOutput) EnvironmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisEnvironmentReferenceResponse) *string { return v.EnvironmentName }).(pulumi.StringPtrOutput)
}

// Environment reference id.
func (o SsisEnvironmentReferenceResponseOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SsisEnvironmentReferenceResponse) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Reference type
func (o SsisEnvironmentReferenceResponseOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisEnvironmentReferenceResponse) *string { return v.ReferenceType }).(pulumi.StringPtrOutput)
}

type SsisEnvironmentReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (SsisEnvironmentReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SsisEnvironmentReferenceResponse)(nil)).Elem()
}

func (o SsisEnvironmentReferenceResponseArrayOutput) ToSsisEnvironmentReferenceResponseArrayOutput() SsisEnvironmentReferenceResponseArrayOutput {
	return o
}

func (o SsisEnvironmentReferenceResponseArrayOutput) ToSsisEnvironmentReferenceResponseArrayOutputWithContext(ctx context.Context) SsisEnvironmentReferenceResponseArrayOutput {
	return o
}

func (o SsisEnvironmentReferenceResponseArrayOutput) Index(i pulumi.IntInput) SsisEnvironmentReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SsisEnvironmentReferenceResponse {
		return vs[0].([]SsisEnvironmentReferenceResponse)[vs[1].(int)]
	}).(SsisEnvironmentReferenceResponseOutput)
}

// Ssis environment.
type SsisEnvironmentResponse struct {
	// Metadata description.
	Description *string `pulumi:"description"`
	// Folder id which contains environment.
	FolderId *int `pulumi:"folderId"`
	// Metadata id.
	Id *int `pulumi:"id"`
	// Metadata name.
	Name *string `pulumi:"name"`
	// Type of metadata.
	Type string `pulumi:"type"`
	// Variable in environment
	Variables []SsisVariableResponse `pulumi:"variables"`
}

// SsisEnvironmentResponseInput is an input type that accepts SsisEnvironmentResponseArgs and SsisEnvironmentResponseOutput values.
// You can construct a concrete instance of `SsisEnvironmentResponseInput` via:
//
//          SsisEnvironmentResponseArgs{...}
type SsisEnvironmentResponseInput interface {
	pulumi.Input

	ToSsisEnvironmentResponseOutput() SsisEnvironmentResponseOutput
	ToSsisEnvironmentResponseOutputWithContext(context.Context) SsisEnvironmentResponseOutput
}

// Ssis environment.
type SsisEnvironmentResponseArgs struct {
	// Metadata description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Folder id which contains environment.
	FolderId pulumi.IntPtrInput `pulumi:"folderId"`
	// Metadata id.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Metadata name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Type of metadata.
	Type pulumi.StringInput `pulumi:"type"`
	// Variable in environment
	Variables SsisVariableResponseArrayInput `pulumi:"variables"`
}

func (SsisEnvironmentResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisEnvironmentResponse)(nil)).Elem()
}

func (i SsisEnvironmentResponseArgs) ToSsisEnvironmentResponseOutput() SsisEnvironmentResponseOutput {
	return i.ToSsisEnvironmentResponseOutputWithContext(context.Background())
}

func (i SsisEnvironmentResponseArgs) ToSsisEnvironmentResponseOutputWithContext(ctx context.Context) SsisEnvironmentResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisEnvironmentResponseOutput)
}

// Ssis environment.
type SsisEnvironmentResponseOutput struct{ *pulumi.OutputState }

func (SsisEnvironmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisEnvironmentResponse)(nil)).Elem()
}

func (o SsisEnvironmentResponseOutput) ToSsisEnvironmentResponseOutput() SsisEnvironmentResponseOutput {
	return o
}

func (o SsisEnvironmentResponseOutput) ToSsisEnvironmentResponseOutputWithContext(ctx context.Context) SsisEnvironmentResponseOutput {
	return o
}

// Metadata description.
func (o SsisEnvironmentResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisEnvironmentResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Folder id which contains environment.
func (o SsisEnvironmentResponseOutput) FolderId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SsisEnvironmentResponse) *int { return v.FolderId }).(pulumi.IntPtrOutput)
}

// Metadata id.
func (o SsisEnvironmentResponseOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SsisEnvironmentResponse) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Metadata name.
func (o SsisEnvironmentResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisEnvironmentResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of metadata.
func (o SsisEnvironmentResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SsisEnvironmentResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Variable in environment
func (o SsisEnvironmentResponseOutput) Variables() SsisVariableResponseArrayOutput {
	return o.ApplyT(func(v SsisEnvironmentResponse) []SsisVariableResponse { return v.Variables }).(SsisVariableResponseArrayOutput)
}

// Ssis folder.
type SsisFolderResponse struct {
	// Metadata description.
	Description *string `pulumi:"description"`
	// Metadata id.
	Id *int `pulumi:"id"`
	// Metadata name.
	Name *string `pulumi:"name"`
	// Type of metadata.
	Type string `pulumi:"type"`
}

// SsisFolderResponseInput is an input type that accepts SsisFolderResponseArgs and SsisFolderResponseOutput values.
// You can construct a concrete instance of `SsisFolderResponseInput` via:
//
//          SsisFolderResponseArgs{...}
type SsisFolderResponseInput interface {
	pulumi.Input

	ToSsisFolderResponseOutput() SsisFolderResponseOutput
	ToSsisFolderResponseOutputWithContext(context.Context) SsisFolderResponseOutput
}

// Ssis folder.
type SsisFolderResponseArgs struct {
	// Metadata description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Metadata id.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Metadata name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Type of metadata.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SsisFolderResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisFolderResponse)(nil)).Elem()
}

func (i SsisFolderResponseArgs) ToSsisFolderResponseOutput() SsisFolderResponseOutput {
	return i.ToSsisFolderResponseOutputWithContext(context.Background())
}

func (i SsisFolderResponseArgs) ToSsisFolderResponseOutputWithContext(ctx context.Context) SsisFolderResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisFolderResponseOutput)
}

// Ssis folder.
type SsisFolderResponseOutput struct{ *pulumi.OutputState }

func (SsisFolderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisFolderResponse)(nil)).Elem()
}

func (o SsisFolderResponseOutput) ToSsisFolderResponseOutput() SsisFolderResponseOutput {
	return o
}

func (o SsisFolderResponseOutput) ToSsisFolderResponseOutputWithContext(ctx context.Context) SsisFolderResponseOutput {
	return o
}

// Metadata description.
func (o SsisFolderResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisFolderResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Metadata id.
func (o SsisFolderResponseOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SsisFolderResponse) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Metadata name.
func (o SsisFolderResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisFolderResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of metadata.
func (o SsisFolderResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SsisFolderResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Ssis Package.
type SsisPackageResponse struct {
	// Metadata description.
	Description *string `pulumi:"description"`
	// Folder id which contains package.
	FolderId *int `pulumi:"folderId"`
	// Metadata id.
	Id *int `pulumi:"id"`
	// Metadata name.
	Name *string `pulumi:"name"`
	// Parameters in package
	Parameters []SsisParameterResponse `pulumi:"parameters"`
	// Project id which contains package.
	ProjectId *int `pulumi:"projectId"`
	// Project version which contains package.
	ProjectVersion *int `pulumi:"projectVersion"`
	// Type of metadata.
	Type string `pulumi:"type"`
}

// SsisPackageResponseInput is an input type that accepts SsisPackageResponseArgs and SsisPackageResponseOutput values.
// You can construct a concrete instance of `SsisPackageResponseInput` via:
//
//          SsisPackageResponseArgs{...}
type SsisPackageResponseInput interface {
	pulumi.Input

	ToSsisPackageResponseOutput() SsisPackageResponseOutput
	ToSsisPackageResponseOutputWithContext(context.Context) SsisPackageResponseOutput
}

// Ssis Package.
type SsisPackageResponseArgs struct {
	// Metadata description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Folder id which contains package.
	FolderId pulumi.IntPtrInput `pulumi:"folderId"`
	// Metadata id.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Metadata name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Parameters in package
	Parameters SsisParameterResponseArrayInput `pulumi:"parameters"`
	// Project id which contains package.
	ProjectId pulumi.IntPtrInput `pulumi:"projectId"`
	// Project version which contains package.
	ProjectVersion pulumi.IntPtrInput `pulumi:"projectVersion"`
	// Type of metadata.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SsisPackageResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisPackageResponse)(nil)).Elem()
}

func (i SsisPackageResponseArgs) ToSsisPackageResponseOutput() SsisPackageResponseOutput {
	return i.ToSsisPackageResponseOutputWithContext(context.Background())
}

func (i SsisPackageResponseArgs) ToSsisPackageResponseOutputWithContext(ctx context.Context) SsisPackageResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisPackageResponseOutput)
}

// Ssis Package.
type SsisPackageResponseOutput struct{ *pulumi.OutputState }

func (SsisPackageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisPackageResponse)(nil)).Elem()
}

func (o SsisPackageResponseOutput) ToSsisPackageResponseOutput() SsisPackageResponseOutput {
	return o
}

func (o SsisPackageResponseOutput) ToSsisPackageResponseOutputWithContext(ctx context.Context) SsisPackageResponseOutput {
	return o
}

// Metadata description.
func (o SsisPackageResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisPackageResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Folder id which contains package.
func (o SsisPackageResponseOutput) FolderId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SsisPackageResponse) *int { return v.FolderId }).(pulumi.IntPtrOutput)
}

// Metadata id.
func (o SsisPackageResponseOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SsisPackageResponse) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Metadata name.
func (o SsisPackageResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisPackageResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Parameters in package
func (o SsisPackageResponseOutput) Parameters() SsisParameterResponseArrayOutput {
	return o.ApplyT(func(v SsisPackageResponse) []SsisParameterResponse { return v.Parameters }).(SsisParameterResponseArrayOutput)
}

// Project id which contains package.
func (o SsisPackageResponseOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SsisPackageResponse) *int { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// Project version which contains package.
func (o SsisPackageResponseOutput) ProjectVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SsisPackageResponse) *int { return v.ProjectVersion }).(pulumi.IntPtrOutput)
}

// Type of metadata.
func (o SsisPackageResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SsisPackageResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Ssis parameter.
type SsisParameterResponse struct {
	// Parameter type.
	DataType *string `pulumi:"dataType"`
	// Default value of parameter.
	DefaultValue *string `pulumi:"defaultValue"`
	// Parameter description.
	Description *string `pulumi:"description"`
	// Design default value of parameter.
	DesignDefaultValue *string `pulumi:"designDefaultValue"`
	// Parameter id.
	Id *int `pulumi:"id"`
	// Parameter name.
	Name *string `pulumi:"name"`
	// Whether parameter is required.
	Required *bool `pulumi:"required"`
	// Whether parameter is sensitive.
	Sensitive *bool `pulumi:"sensitive"`
	// Default sensitive value of parameter.
	SensitiveDefaultValue *string `pulumi:"sensitiveDefaultValue"`
	// Parameter value set.
	ValueSet *bool `pulumi:"valueSet"`
	// Parameter value type.
	ValueType *string `pulumi:"valueType"`
	// Parameter reference variable.
	Variable *string `pulumi:"variable"`
}

// SsisParameterResponseInput is an input type that accepts SsisParameterResponseArgs and SsisParameterResponseOutput values.
// You can construct a concrete instance of `SsisParameterResponseInput` via:
//
//          SsisParameterResponseArgs{...}
type SsisParameterResponseInput interface {
	pulumi.Input

	ToSsisParameterResponseOutput() SsisParameterResponseOutput
	ToSsisParameterResponseOutputWithContext(context.Context) SsisParameterResponseOutput
}

// Ssis parameter.
type SsisParameterResponseArgs struct {
	// Parameter type.
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// Default value of parameter.
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// Parameter description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Design default value of parameter.
	DesignDefaultValue pulumi.StringPtrInput `pulumi:"designDefaultValue"`
	// Parameter id.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Parameter name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Whether parameter is required.
	Required pulumi.BoolPtrInput `pulumi:"required"`
	// Whether parameter is sensitive.
	Sensitive pulumi.BoolPtrInput `pulumi:"sensitive"`
	// Default sensitive value of parameter.
	SensitiveDefaultValue pulumi.StringPtrInput `pulumi:"sensitiveDefaultValue"`
	// Parameter value set.
	ValueSet pulumi.BoolPtrInput `pulumi:"valueSet"`
	// Parameter value type.
	ValueType pulumi.StringPtrInput `pulumi:"valueType"`
	// Parameter reference variable.
	Variable pulumi.StringPtrInput `pulumi:"variable"`
}

func (SsisParameterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisParameterResponse)(nil)).Elem()
}

func (i SsisParameterResponseArgs) ToSsisParameterResponseOutput() SsisParameterResponseOutput {
	return i.ToSsisParameterResponseOutputWithContext(context.Background())
}

func (i SsisParameterResponseArgs) ToSsisParameterResponseOutputWithContext(ctx context.Context) SsisParameterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisParameterResponseOutput)
}

// SsisParameterResponseArrayInput is an input type that accepts SsisParameterResponseArray and SsisParameterResponseArrayOutput values.
// You can construct a concrete instance of `SsisParameterResponseArrayInput` via:
//
//          SsisParameterResponseArray{ SsisParameterResponseArgs{...} }
type SsisParameterResponseArrayInput interface {
	pulumi.Input

	ToSsisParameterResponseArrayOutput() SsisParameterResponseArrayOutput
	ToSsisParameterResponseArrayOutputWithContext(context.Context) SsisParameterResponseArrayOutput
}

type SsisParameterResponseArray []SsisParameterResponseInput

func (SsisParameterResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SsisParameterResponse)(nil)).Elem()
}

func (i SsisParameterResponseArray) ToSsisParameterResponseArrayOutput() SsisParameterResponseArrayOutput {
	return i.ToSsisParameterResponseArrayOutputWithContext(context.Background())
}

func (i SsisParameterResponseArray) ToSsisParameterResponseArrayOutputWithContext(ctx context.Context) SsisParameterResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisParameterResponseArrayOutput)
}

// Ssis parameter.
type SsisParameterResponseOutput struct{ *pulumi.OutputState }

func (SsisParameterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisParameterResponse)(nil)).Elem()
}

func (o SsisParameterResponseOutput) ToSsisParameterResponseOutput() SsisParameterResponseOutput {
	return o
}

func (o SsisParameterResponseOutput) ToSsisParameterResponseOutputWithContext(ctx context.Context) SsisParameterResponseOutput {
	return o
}

// Parameter type.
func (o SsisParameterResponseOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Default value of parameter.
func (o SsisParameterResponseOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// Parameter description.
func (o SsisParameterResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Design default value of parameter.
func (o SsisParameterResponseOutput) DesignDefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *string { return v.DesignDefaultValue }).(pulumi.StringPtrOutput)
}

// Parameter id.
func (o SsisParameterResponseOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Parameter name.
func (o SsisParameterResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Whether parameter is required.
func (o SsisParameterResponseOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

// Whether parameter is sensitive.
func (o SsisParameterResponseOutput) Sensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *bool { return v.Sensitive }).(pulumi.BoolPtrOutput)
}

// Default sensitive value of parameter.
func (o SsisParameterResponseOutput) SensitiveDefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *string { return v.SensitiveDefaultValue }).(pulumi.StringPtrOutput)
}

// Parameter value set.
func (o SsisParameterResponseOutput) ValueSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *bool { return v.ValueSet }).(pulumi.BoolPtrOutput)
}

// Parameter value type.
func (o SsisParameterResponseOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *string { return v.ValueType }).(pulumi.StringPtrOutput)
}

// Parameter reference variable.
func (o SsisParameterResponseOutput) Variable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *string { return v.Variable }).(pulumi.StringPtrOutput)
}

type SsisParameterResponseArrayOutput struct{ *pulumi.OutputState }

func (SsisParameterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SsisParameterResponse)(nil)).Elem()
}

func (o SsisParameterResponseArrayOutput) ToSsisParameterResponseArrayOutput() SsisParameterResponseArrayOutput {
	return o
}

func (o SsisParameterResponseArrayOutput) ToSsisParameterResponseArrayOutputWithContext(ctx context.Context) SsisParameterResponseArrayOutput {
	return o
}

func (o SsisParameterResponseArrayOutput) Index(i pulumi.IntInput) SsisParameterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SsisParameterResponse {
		return vs[0].([]SsisParameterResponse)[vs[1].(int)]
	}).(SsisParameterResponseOutput)
}

// Ssis project.
type SsisProjectResponse struct {
	// Metadata description.
	Description *string `pulumi:"description"`
	// Environment reference in project
	EnvironmentRefs []SsisEnvironmentReferenceResponse `pulumi:"environmentRefs"`
	// Folder id which contains project.
	FolderId *int `pulumi:"folderId"`
	// Metadata id.
	Id *int `pulumi:"id"`
	// Metadata name.
	Name *string `pulumi:"name"`
	// Parameters in project
	Parameters []SsisParameterResponse `pulumi:"parameters"`
	// Type of metadata.
	Type string `pulumi:"type"`
	// Project version.
	Version *int `pulumi:"version"`
}

// SsisProjectResponseInput is an input type that accepts SsisProjectResponseArgs and SsisProjectResponseOutput values.
// You can construct a concrete instance of `SsisProjectResponseInput` via:
//
//          SsisProjectResponseArgs{...}
type SsisProjectResponseInput interface {
	pulumi.Input

	ToSsisProjectResponseOutput() SsisProjectResponseOutput
	ToSsisProjectResponseOutputWithContext(context.Context) SsisProjectResponseOutput
}

// Ssis project.
type SsisProjectResponseArgs struct {
	// Metadata description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Environment reference in project
	EnvironmentRefs SsisEnvironmentReferenceResponseArrayInput `pulumi:"environmentRefs"`
	// Folder id which contains project.
	FolderId pulumi.IntPtrInput `pulumi:"folderId"`
	// Metadata id.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Metadata name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Parameters in project
	Parameters SsisParameterResponseArrayInput `pulumi:"parameters"`
	// Type of metadata.
	Type pulumi.StringInput `pulumi:"type"`
	// Project version.
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (SsisProjectResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisProjectResponse)(nil)).Elem()
}

func (i SsisProjectResponseArgs) ToSsisProjectResponseOutput() SsisProjectResponseOutput {
	return i.ToSsisProjectResponseOutputWithContext(context.Background())
}

func (i SsisProjectResponseArgs) ToSsisProjectResponseOutputWithContext(ctx context.Context) SsisProjectResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisProjectResponseOutput)
}

// Ssis project.
type SsisProjectResponseOutput struct{ *pulumi.OutputState }

func (SsisProjectResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisProjectResponse)(nil)).Elem()
}

func (o SsisProjectResponseOutput) ToSsisProjectResponseOutput() SsisProjectResponseOutput {
	return o
}

func (o SsisProjectResponseOutput) ToSsisProjectResponseOutputWithContext(ctx context.Context) SsisProjectResponseOutput {
	return o
}

// Metadata description.
func (o SsisProjectResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisProjectResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Environment reference in project
func (o SsisProjectResponseOutput) EnvironmentRefs() SsisEnvironmentReferenceResponseArrayOutput {
	return o.ApplyT(func(v SsisProjectResponse) []SsisEnvironmentReferenceResponse { return v.EnvironmentRefs }).(SsisEnvironmentReferenceResponseArrayOutput)
}

// Folder id which contains project.
func (o SsisProjectResponseOutput) FolderId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SsisProjectResponse) *int { return v.FolderId }).(pulumi.IntPtrOutput)
}

// Metadata id.
func (o SsisProjectResponseOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SsisProjectResponse) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Metadata name.
func (o SsisProjectResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisProjectResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Parameters in project
func (o SsisProjectResponseOutput) Parameters() SsisParameterResponseArrayOutput {
	return o.ApplyT(func(v SsisProjectResponse) []SsisParameterResponse { return v.Parameters }).(SsisParameterResponseArrayOutput)
}

// Type of metadata.
func (o SsisProjectResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SsisProjectResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Project version.
func (o SsisProjectResponseOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SsisProjectResponse) *int { return v.Version }).(pulumi.IntPtrOutput)
}

// Ssis variable.
type SsisVariableResponse struct {
	// Variable type.
	DataType *string `pulumi:"dataType"`
	// Variable description.
	Description *string `pulumi:"description"`
	// Variable id.
	Id *int `pulumi:"id"`
	// Variable name.
	Name *string `pulumi:"name"`
	// Whether variable is sensitive.
	Sensitive *bool `pulumi:"sensitive"`
	// Variable sensitive value.
	SensitiveValue *string `pulumi:"sensitiveValue"`
	// Variable value.
	Value *string `pulumi:"value"`
}

// SsisVariableResponseInput is an input type that accepts SsisVariableResponseArgs and SsisVariableResponseOutput values.
// You can construct a concrete instance of `SsisVariableResponseInput` via:
//
//          SsisVariableResponseArgs{...}
type SsisVariableResponseInput interface {
	pulumi.Input

	ToSsisVariableResponseOutput() SsisVariableResponseOutput
	ToSsisVariableResponseOutputWithContext(context.Context) SsisVariableResponseOutput
}

// Ssis variable.
type SsisVariableResponseArgs struct {
	// Variable type.
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// Variable description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Variable id.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Variable name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Whether variable is sensitive.
	Sensitive pulumi.BoolPtrInput `pulumi:"sensitive"`
	// Variable sensitive value.
	SensitiveValue pulumi.StringPtrInput `pulumi:"sensitiveValue"`
	// Variable value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SsisVariableResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisVariableResponse)(nil)).Elem()
}

func (i SsisVariableResponseArgs) ToSsisVariableResponseOutput() SsisVariableResponseOutput {
	return i.ToSsisVariableResponseOutputWithContext(context.Background())
}

func (i SsisVariableResponseArgs) ToSsisVariableResponseOutputWithContext(ctx context.Context) SsisVariableResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisVariableResponseOutput)
}

// SsisVariableResponseArrayInput is an input type that accepts SsisVariableResponseArray and SsisVariableResponseArrayOutput values.
// You can construct a concrete instance of `SsisVariableResponseArrayInput` via:
//
//          SsisVariableResponseArray{ SsisVariableResponseArgs{...} }
type SsisVariableResponseArrayInput interface {
	pulumi.Input

	ToSsisVariableResponseArrayOutput() SsisVariableResponseArrayOutput
	ToSsisVariableResponseArrayOutputWithContext(context.Context) SsisVariableResponseArrayOutput
}

type SsisVariableResponseArray []SsisVariableResponseInput

func (SsisVariableResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SsisVariableResponse)(nil)).Elem()
}

func (i SsisVariableResponseArray) ToSsisVariableResponseArrayOutput() SsisVariableResponseArrayOutput {
	return i.ToSsisVariableResponseArrayOutputWithContext(context.Background())
}

func (i SsisVariableResponseArray) ToSsisVariableResponseArrayOutputWithContext(ctx context.Context) SsisVariableResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsisVariableResponseArrayOutput)
}

// Ssis variable.
type SsisVariableResponseOutput struct{ *pulumi.OutputState }

func (SsisVariableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisVariableResponse)(nil)).Elem()
}

func (o SsisVariableResponseOutput) ToSsisVariableResponseOutput() SsisVariableResponseOutput {
	return o
}

func (o SsisVariableResponseOutput) ToSsisVariableResponseOutputWithContext(ctx context.Context) SsisVariableResponseOutput {
	return o
}

// Variable type.
func (o SsisVariableResponseOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisVariableResponse) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Variable description.
func (o SsisVariableResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisVariableResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Variable id.
func (o SsisVariableResponseOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SsisVariableResponse) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Variable name.
func (o SsisVariableResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisVariableResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Whether variable is sensitive.
func (o SsisVariableResponseOutput) Sensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsisVariableResponse) *bool { return v.Sensitive }).(pulumi.BoolPtrOutput)
}

// Variable sensitive value.
func (o SsisVariableResponseOutput) SensitiveValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisVariableResponse) *string { return v.SensitiveValue }).(pulumi.StringPtrOutput)
}

// Variable value.
func (o SsisVariableResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisVariableResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SsisVariableResponseArrayOutput struct{ *pulumi.OutputState }

func (SsisVariableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SsisVariableResponse)(nil)).Elem()
}

func (o SsisVariableResponseArrayOutput) ToSsisVariableResponseArrayOutput() SsisVariableResponseArrayOutput {
	return o
}

func (o SsisVariableResponseArrayOutput) ToSsisVariableResponseArrayOutputWithContext(ctx context.Context) SsisVariableResponseArrayOutput {
	return o
}

func (o SsisVariableResponseArrayOutput) Index(i pulumi.IntInput) SsisVariableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SsisVariableResponse {
		return vs[0].([]SsisVariableResponse)[vs[1].(int)]
	}).(SsisVariableResponseOutput)
}

// Linked service for Sybase data source.
type SybaseLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Schema name for connection. Type: string (or Expression with resultType string).
	Schema interface{} `pulumi:"schema"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// SybaseLinkedServiceInput is an input type that accepts SybaseLinkedServiceArgs and SybaseLinkedServiceOutput values.
// You can construct a concrete instance of `SybaseLinkedServiceInput` via:
//
//          SybaseLinkedServiceArgs{...}
type SybaseLinkedServiceInput interface {
	pulumi.Input

	ToSybaseLinkedServiceOutput() SybaseLinkedServiceOutput
	ToSybaseLinkedServiceOutputWithContext(context.Context) SybaseLinkedServiceOutput
}

// Linked service for Sybase data source.
type SybaseLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// Schema name for connection. Type: string (or Expression with resultType string).
	Schema pulumi.Input `pulumi:"schema"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (SybaseLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SybaseLinkedService)(nil)).Elem()
}

func (i SybaseLinkedServiceArgs) ToSybaseLinkedServiceOutput() SybaseLinkedServiceOutput {
	return i.ToSybaseLinkedServiceOutputWithContext(context.Background())
}

func (i SybaseLinkedServiceArgs) ToSybaseLinkedServiceOutputWithContext(ctx context.Context) SybaseLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SybaseLinkedServiceOutput)
}

// Linked service for Sybase data source.
type SybaseLinkedServiceOutput struct{ *pulumi.OutputState }

func (SybaseLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SybaseLinkedService)(nil)).Elem()
}

func (o SybaseLinkedServiceOutput) ToSybaseLinkedServiceOutput() SybaseLinkedServiceOutput {
	return o
}

func (o SybaseLinkedServiceOutput) ToSybaseLinkedServiceOutputWithContext(ctx context.Context) SybaseLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SybaseLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SybaseLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// AuthenticationType to be used for connection.
func (o SybaseLinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SybaseLinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o SybaseLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SybaseLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Database name for connection. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedService) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SybaseLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SybaseLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SybaseLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SybaseLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for authentication.
func (o SybaseLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Schema name for connection. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedService) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Server name for connection. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SybaseLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SybaseLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for Sybase data source.
type SybaseLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Schema name for connection. Type: string (or Expression with resultType string).
	Schema interface{} `pulumi:"schema"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// SybaseLinkedServiceResponseInput is an input type that accepts SybaseLinkedServiceResponseArgs and SybaseLinkedServiceResponseOutput values.
// You can construct a concrete instance of `SybaseLinkedServiceResponseInput` via:
//
//          SybaseLinkedServiceResponseArgs{...}
type SybaseLinkedServiceResponseInput interface {
	pulumi.Input

	ToSybaseLinkedServiceResponseOutput() SybaseLinkedServiceResponseOutput
	ToSybaseLinkedServiceResponseOutputWithContext(context.Context) SybaseLinkedServiceResponseOutput
}

// Linked service for Sybase data source.
type SybaseLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// Schema name for connection. Type: string (or Expression with resultType string).
	Schema pulumi.Input `pulumi:"schema"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (SybaseLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SybaseLinkedServiceResponse)(nil)).Elem()
}

func (i SybaseLinkedServiceResponseArgs) ToSybaseLinkedServiceResponseOutput() SybaseLinkedServiceResponseOutput {
	return i.ToSybaseLinkedServiceResponseOutputWithContext(context.Background())
}

func (i SybaseLinkedServiceResponseArgs) ToSybaseLinkedServiceResponseOutputWithContext(ctx context.Context) SybaseLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SybaseLinkedServiceResponseOutput)
}

// Linked service for Sybase data source.
type SybaseLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SybaseLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SybaseLinkedServiceResponse)(nil)).Elem()
}

func (o SybaseLinkedServiceResponseOutput) ToSybaseLinkedServiceResponseOutput() SybaseLinkedServiceResponseOutput {
	return o
}

func (o SybaseLinkedServiceResponseOutput) ToSybaseLinkedServiceResponseOutputWithContext(ctx context.Context) SybaseLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SybaseLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// AuthenticationType to be used for connection.
func (o SybaseLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o SybaseLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Database name for connection. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SybaseLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SybaseLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for authentication.
func (o SybaseLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Schema name for connection. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Server name for connection. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SybaseLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// The Sybase table dataset.
type SybaseTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Sybase table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SybaseTableDatasetInput is an input type that accepts SybaseTableDatasetArgs and SybaseTableDatasetOutput values.
// You can construct a concrete instance of `SybaseTableDatasetInput` via:
//
//          SybaseTableDatasetArgs{...}
type SybaseTableDatasetInput interface {
	pulumi.Input

	ToSybaseTableDatasetOutput() SybaseTableDatasetOutput
	ToSybaseTableDatasetOutputWithContext(context.Context) SybaseTableDatasetOutput
}

// The Sybase table dataset.
type SybaseTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The Sybase table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SybaseTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SybaseTableDataset)(nil)).Elem()
}

func (i SybaseTableDatasetArgs) ToSybaseTableDatasetOutput() SybaseTableDatasetOutput {
	return i.ToSybaseTableDatasetOutputWithContext(context.Background())
}

func (i SybaseTableDatasetArgs) ToSybaseTableDatasetOutputWithContext(ctx context.Context) SybaseTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SybaseTableDatasetOutput)
}

// The Sybase table dataset.
type SybaseTableDatasetOutput struct{ *pulumi.OutputState }

func (SybaseTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SybaseTableDataset)(nil)).Elem()
}

func (o SybaseTableDatasetOutput) ToSybaseTableDatasetOutput() SybaseTableDatasetOutput {
	return o
}

func (o SybaseTableDatasetOutput) ToSybaseTableDatasetOutputWithContext(ctx context.Context) SybaseTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SybaseTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SybaseTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SybaseTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SybaseTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SybaseTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SybaseTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SybaseTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SybaseTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SybaseTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SybaseTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SybaseTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SybaseTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Sybase table name. Type: string (or Expression with resultType string).
func (o SybaseTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SybaseTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SybaseTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Sybase table dataset.
type SybaseTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Sybase table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SybaseTableDatasetResponseInput is an input type that accepts SybaseTableDatasetResponseArgs and SybaseTableDatasetResponseOutput values.
// You can construct a concrete instance of `SybaseTableDatasetResponseInput` via:
//
//          SybaseTableDatasetResponseArgs{...}
type SybaseTableDatasetResponseInput interface {
	pulumi.Input

	ToSybaseTableDatasetResponseOutput() SybaseTableDatasetResponseOutput
	ToSybaseTableDatasetResponseOutputWithContext(context.Context) SybaseTableDatasetResponseOutput
}

// The Sybase table dataset.
type SybaseTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The Sybase table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SybaseTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SybaseTableDatasetResponse)(nil)).Elem()
}

func (i SybaseTableDatasetResponseArgs) ToSybaseTableDatasetResponseOutput() SybaseTableDatasetResponseOutput {
	return i.ToSybaseTableDatasetResponseOutputWithContext(context.Background())
}

func (i SybaseTableDatasetResponseArgs) ToSybaseTableDatasetResponseOutputWithContext(ctx context.Context) SybaseTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SybaseTableDatasetResponseOutput)
}

// The Sybase table dataset.
type SybaseTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (SybaseTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SybaseTableDatasetResponse)(nil)).Elem()
}

func (o SybaseTableDatasetResponseOutput) ToSybaseTableDatasetResponseOutput() SybaseTableDatasetResponseOutput {
	return o
}

func (o SybaseTableDatasetResponseOutput) ToSybaseTableDatasetResponseOutputWithContext(ctx context.Context) SybaseTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SybaseTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SybaseTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SybaseTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SybaseTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SybaseTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SybaseTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SybaseTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SybaseTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SybaseTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SybaseTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SybaseTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SybaseTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Sybase table name. Type: string (or Expression with resultType string).
func (o SybaseTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o SybaseTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SybaseTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Teradata data source.
type TeradataLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// TeradataLinkedServiceInput is an input type that accepts TeradataLinkedServiceArgs and TeradataLinkedServiceOutput values.
// You can construct a concrete instance of `TeradataLinkedServiceInput` via:
//
//          TeradataLinkedServiceArgs{...}
type TeradataLinkedServiceInput interface {
	pulumi.Input

	ToTeradataLinkedServiceOutput() TeradataLinkedServiceOutput
	ToTeradataLinkedServiceOutputWithContext(context.Context) TeradataLinkedServiceOutput
}

// Linked service for Teradata data source.
type TeradataLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (TeradataLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataLinkedService)(nil)).Elem()
}

func (i TeradataLinkedServiceArgs) ToTeradataLinkedServiceOutput() TeradataLinkedServiceOutput {
	return i.ToTeradataLinkedServiceOutputWithContext(context.Background())
}

func (i TeradataLinkedServiceArgs) ToTeradataLinkedServiceOutputWithContext(ctx context.Context) TeradataLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeradataLinkedServiceOutput)
}

// Linked service for Teradata data source.
type TeradataLinkedServiceOutput struct{ *pulumi.OutputState }

func (TeradataLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataLinkedService)(nil)).Elem()
}

func (o TeradataLinkedServiceOutput) ToTeradataLinkedServiceOutput() TeradataLinkedServiceOutput {
	return o
}

func (o TeradataLinkedServiceOutput) ToTeradataLinkedServiceOutputWithContext(ctx context.Context) TeradataLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o TeradataLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v TeradataLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// AuthenticationType to be used for connection.
func (o TeradataLinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeradataLinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o TeradataLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v TeradataLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o TeradataLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o TeradataLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeradataLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o TeradataLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o TeradataLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v TeradataLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for authentication.
func (o TeradataLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Server name for connection. Type: string (or Expression with resultType string).
func (o TeradataLinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataLinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o TeradataLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeradataLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o TeradataLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for Teradata data source.
type TeradataLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// TeradataLinkedServiceResponseInput is an input type that accepts TeradataLinkedServiceResponseArgs and TeradataLinkedServiceResponseOutput values.
// You can construct a concrete instance of `TeradataLinkedServiceResponseInput` via:
//
//          TeradataLinkedServiceResponseArgs{...}
type TeradataLinkedServiceResponseInput interface {
	pulumi.Input

	ToTeradataLinkedServiceResponseOutput() TeradataLinkedServiceResponseOutput
	ToTeradataLinkedServiceResponseOutputWithContext(context.Context) TeradataLinkedServiceResponseOutput
}

// Linked service for Teradata data source.
type TeradataLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (TeradataLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataLinkedServiceResponse)(nil)).Elem()
}

func (i TeradataLinkedServiceResponseArgs) ToTeradataLinkedServiceResponseOutput() TeradataLinkedServiceResponseOutput {
	return i.ToTeradataLinkedServiceResponseOutputWithContext(context.Background())
}

func (i TeradataLinkedServiceResponseArgs) ToTeradataLinkedServiceResponseOutputWithContext(ctx context.Context) TeradataLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeradataLinkedServiceResponseOutput)
}

// Linked service for Teradata data source.
type TeradataLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (TeradataLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataLinkedServiceResponse)(nil)).Elem()
}

func (o TeradataLinkedServiceResponseOutput) ToTeradataLinkedServiceResponseOutput() TeradataLinkedServiceResponseOutput {
	return o
}

func (o TeradataLinkedServiceResponseOutput) ToTeradataLinkedServiceResponseOutputWithContext(ctx context.Context) TeradataLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o TeradataLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// AuthenticationType to be used for connection.
func (o TeradataLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o TeradataLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o TeradataLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o TeradataLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o TeradataLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o TeradataLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for authentication.
func (o TeradataLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Server name for connection. Type: string (or Expression with resultType string).
func (o TeradataLinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o TeradataLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o TeradataLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// The Teradata database dataset.
type TeradataTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of Teradata. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of Teradata. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// TeradataTableDatasetInput is an input type that accepts TeradataTableDatasetArgs and TeradataTableDatasetOutput values.
// You can construct a concrete instance of `TeradataTableDatasetInput` via:
//
//          TeradataTableDatasetArgs{...}
type TeradataTableDatasetInput interface {
	pulumi.Input

	ToTeradataTableDatasetOutput() TeradataTableDatasetOutput
	ToTeradataTableDatasetOutputWithContext(context.Context) TeradataTableDatasetOutput
}

// The Teradata database dataset.
type TeradataTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The database name of Teradata. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of Teradata. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TeradataTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataTableDataset)(nil)).Elem()
}

func (i TeradataTableDatasetArgs) ToTeradataTableDatasetOutput() TeradataTableDatasetOutput {
	return i.ToTeradataTableDatasetOutputWithContext(context.Background())
}

func (i TeradataTableDatasetArgs) ToTeradataTableDatasetOutputWithContext(ctx context.Context) TeradataTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeradataTableDatasetOutput)
}

// The Teradata database dataset.
type TeradataTableDatasetOutput struct{ *pulumi.OutputState }

func (TeradataTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataTableDataset)(nil)).Elem()
}

func (o TeradataTableDatasetOutput) ToTeradataTableDatasetOutput() TeradataTableDatasetOutput {
	return o
}

func (o TeradataTableDatasetOutput) ToTeradataTableDatasetOutputWithContext(ctx context.Context) TeradataTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o TeradataTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v TeradataTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The database name of Teradata. Type: string (or Expression with resultType string).
func (o TeradataTableDatasetOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataTableDataset) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Dataset description.
func (o TeradataTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeradataTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o TeradataTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v TeradataTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o TeradataTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v TeradataTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o TeradataTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v TeradataTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o TeradataTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o TeradataTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of Teradata. Type: string (or Expression with resultType string).
func (o TeradataTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o TeradataTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeradataTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Teradata database dataset.
type TeradataTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of Teradata. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of Teradata. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// TeradataTableDatasetResponseInput is an input type that accepts TeradataTableDatasetResponseArgs and TeradataTableDatasetResponseOutput values.
// You can construct a concrete instance of `TeradataTableDatasetResponseInput` via:
//
//          TeradataTableDatasetResponseArgs{...}
type TeradataTableDatasetResponseInput interface {
	pulumi.Input

	ToTeradataTableDatasetResponseOutput() TeradataTableDatasetResponseOutput
	ToTeradataTableDatasetResponseOutputWithContext(context.Context) TeradataTableDatasetResponseOutput
}

// The Teradata database dataset.
type TeradataTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The database name of Teradata. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of Teradata. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TeradataTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataTableDatasetResponse)(nil)).Elem()
}

func (i TeradataTableDatasetResponseArgs) ToTeradataTableDatasetResponseOutput() TeradataTableDatasetResponseOutput {
	return i.ToTeradataTableDatasetResponseOutputWithContext(context.Background())
}

func (i TeradataTableDatasetResponseArgs) ToTeradataTableDatasetResponseOutputWithContext(ctx context.Context) TeradataTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeradataTableDatasetResponseOutput)
}

// The Teradata database dataset.
type TeradataTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (TeradataTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataTableDatasetResponse)(nil)).Elem()
}

func (o TeradataTableDatasetResponseOutput) ToTeradataTableDatasetResponseOutput() TeradataTableDatasetResponseOutput {
	return o
}

func (o TeradataTableDatasetResponseOutput) ToTeradataTableDatasetResponseOutputWithContext(ctx context.Context) TeradataTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o TeradataTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The database name of Teradata. Type: string (or Expression with resultType string).
func (o TeradataTableDatasetResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Dataset description.
func (o TeradataTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o TeradataTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o TeradataTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o TeradataTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o TeradataTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o TeradataTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of Teradata. Type: string (or Expression with resultType string).
func (o TeradataTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o TeradataTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The data stored in text format.
type TextFormat struct {
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter interface{} `pulumi:"columnDelimiter"`
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar interface{} `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar interface{} `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter interface{} `pulumi:"rowDelimiter"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
	SkipLineCount interface{} `pulumi:"skipLineCount"`
	// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull interface{} `pulumi:"treatEmptyAsNull"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// TextFormatInput is an input type that accepts TextFormatArgs and TextFormatOutput values.
// You can construct a concrete instance of `TextFormatInput` via:
//
//          TextFormatArgs{...}
type TextFormatInput interface {
	pulumi.Input

	ToTextFormatOutput() TextFormatOutput
	ToTextFormatOutputWithContext(context.Context) TextFormatOutput
}

// The data stored in text format.
type TextFormatArgs struct {
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter pulumi.Input `pulumi:"columnDelimiter"`
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.Input `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName pulumi.Input `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar pulumi.Input `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader pulumi.Input `pulumi:"firstRowAsHeader"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue pulumi.Input `pulumi:"nullValue"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar pulumi.Input `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter pulumi.Input `pulumi:"rowDelimiter"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.Input `pulumi:"serializer"`
	// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
	SkipLineCount pulumi.Input `pulumi:"skipLineCount"`
	// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull pulumi.Input `pulumi:"treatEmptyAsNull"`
	// Type of dataset storage format.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TextFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextFormat)(nil)).Elem()
}

func (i TextFormatArgs) ToTextFormatOutput() TextFormatOutput {
	return i.ToTextFormatOutputWithContext(context.Background())
}

func (i TextFormatArgs) ToTextFormatOutputWithContext(ctx context.Context) TextFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextFormatOutput)
}

// The data stored in text format.
type TextFormatOutput struct{ *pulumi.OutputState }

func (TextFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextFormat)(nil)).Elem()
}

func (o TextFormatOutput) ToTextFormatOutput() TextFormatOutput {
	return o
}

func (o TextFormatOutput) ToTextFormatOutputWithContext(ctx context.Context) TextFormatOutput {
	return o
}

// The column delimiter. Type: string (or Expression with resultType string).
func (o TextFormatOutput) ColumnDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.ColumnDelimiter }).(pulumi.AnyOutput)
}

// Deserializer. Type: string (or Expression with resultType string).
func (o TextFormatOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
func (o TextFormatOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// The escape character. Type: string (or Expression with resultType string).
func (o TextFormatOutput) EscapeChar() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.EscapeChar }).(pulumi.AnyOutput)
}

// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o TextFormatOutput) FirstRowAsHeader() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.FirstRowAsHeader }).(pulumi.AnyOutput)
}

// The null value string. Type: string (or Expression with resultType string).
func (o TextFormatOutput) NullValue() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.NullValue }).(pulumi.AnyOutput)
}

// The quote character. Type: string (or Expression with resultType string).
func (o TextFormatOutput) QuoteChar() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.QuoteChar }).(pulumi.AnyOutput)
}

// The row delimiter. Type: string (or Expression with resultType string).
func (o TextFormatOutput) RowDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.RowDelimiter }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o TextFormatOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
func (o TextFormatOutput) SkipLineCount() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.SkipLineCount }).(pulumi.AnyOutput)
}

// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o TextFormatOutput) TreatEmptyAsNull() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.TreatEmptyAsNull }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
func (o TextFormatOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TextFormat) string { return v.Type }).(pulumi.StringOutput)
}

// The data stored in text format.
type TextFormatResponse struct {
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter interface{} `pulumi:"columnDelimiter"`
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar interface{} `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar interface{} `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter interface{} `pulumi:"rowDelimiter"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
	SkipLineCount interface{} `pulumi:"skipLineCount"`
	// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull interface{} `pulumi:"treatEmptyAsNull"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// TextFormatResponseInput is an input type that accepts TextFormatResponseArgs and TextFormatResponseOutput values.
// You can construct a concrete instance of `TextFormatResponseInput` via:
//
//          TextFormatResponseArgs{...}
type TextFormatResponseInput interface {
	pulumi.Input

	ToTextFormatResponseOutput() TextFormatResponseOutput
	ToTextFormatResponseOutputWithContext(context.Context) TextFormatResponseOutput
}

// The data stored in text format.
type TextFormatResponseArgs struct {
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter pulumi.Input `pulumi:"columnDelimiter"`
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.Input `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName pulumi.Input `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar pulumi.Input `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader pulumi.Input `pulumi:"firstRowAsHeader"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue pulumi.Input `pulumi:"nullValue"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar pulumi.Input `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter pulumi.Input `pulumi:"rowDelimiter"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.Input `pulumi:"serializer"`
	// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
	SkipLineCount pulumi.Input `pulumi:"skipLineCount"`
	// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull pulumi.Input `pulumi:"treatEmptyAsNull"`
	// Type of dataset storage format.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TextFormatResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextFormatResponse)(nil)).Elem()
}

func (i TextFormatResponseArgs) ToTextFormatResponseOutput() TextFormatResponseOutput {
	return i.ToTextFormatResponseOutputWithContext(context.Background())
}

func (i TextFormatResponseArgs) ToTextFormatResponseOutputWithContext(ctx context.Context) TextFormatResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextFormatResponseOutput)
}

// The data stored in text format.
type TextFormatResponseOutput struct{ *pulumi.OutputState }

func (TextFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextFormatResponse)(nil)).Elem()
}

func (o TextFormatResponseOutput) ToTextFormatResponseOutput() TextFormatResponseOutput {
	return o
}

func (o TextFormatResponseOutput) ToTextFormatResponseOutputWithContext(ctx context.Context) TextFormatResponseOutput {
	return o
}

// The column delimiter. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) ColumnDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.ColumnDelimiter }).(pulumi.AnyOutput)
}

// Deserializer. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// The escape character. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) EscapeChar() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.EscapeChar }).(pulumi.AnyOutput)
}

// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o TextFormatResponseOutput) FirstRowAsHeader() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.FirstRowAsHeader }).(pulumi.AnyOutput)
}

// The null value string. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) NullValue() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.NullValue }).(pulumi.AnyOutput)
}

// The quote character. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) QuoteChar() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.QuoteChar }).(pulumi.AnyOutput)
}

// The row delimiter. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) RowDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.RowDelimiter }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
func (o TextFormatResponseOutput) SkipLineCount() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.SkipLineCount }).(pulumi.AnyOutput)
}

// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o TextFormatResponseOutput) TreatEmptyAsNull() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.TreatEmptyAsNull }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
func (o TextFormatResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TextFormatResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A data flow transformation.
type Transformation struct {
	// Transformation description.
	Description *string `pulumi:"description"`
	// Transformation name.
	Name string `pulumi:"name"`
}

// TransformationInput is an input type that accepts TransformationArgs and TransformationOutput values.
// You can construct a concrete instance of `TransformationInput` via:
//
//          TransformationArgs{...}
type TransformationInput interface {
	pulumi.Input

	ToTransformationOutput() TransformationOutput
	ToTransformationOutputWithContext(context.Context) TransformationOutput
}

// A data flow transformation.
type TransformationArgs struct {
	// Transformation description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Transformation name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (TransformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Transformation)(nil)).Elem()
}

func (i TransformationArgs) ToTransformationOutput() TransformationOutput {
	return i.ToTransformationOutputWithContext(context.Background())
}

func (i TransformationArgs) ToTransformationOutputWithContext(ctx context.Context) TransformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformationOutput)
}

// TransformationArrayInput is an input type that accepts TransformationArray and TransformationArrayOutput values.
// You can construct a concrete instance of `TransformationArrayInput` via:
//
//          TransformationArray{ TransformationArgs{...} }
type TransformationArrayInput interface {
	pulumi.Input

	ToTransformationArrayOutput() TransformationArrayOutput
	ToTransformationArrayOutputWithContext(context.Context) TransformationArrayOutput
}

type TransformationArray []TransformationInput

func (TransformationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Transformation)(nil)).Elem()
}

func (i TransformationArray) ToTransformationArrayOutput() TransformationArrayOutput {
	return i.ToTransformationArrayOutputWithContext(context.Background())
}

func (i TransformationArray) ToTransformationArrayOutputWithContext(ctx context.Context) TransformationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformationArrayOutput)
}

// A data flow transformation.
type TransformationOutput struct{ *pulumi.OutputState }

func (TransformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Transformation)(nil)).Elem()
}

func (o TransformationOutput) ToTransformationOutput() TransformationOutput {
	return o
}

func (o TransformationOutput) ToTransformationOutputWithContext(ctx context.Context) TransformationOutput {
	return o
}

// Transformation description.
func (o TransformationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Transformation) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Transformation name.
func (o TransformationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Transformation) string { return v.Name }).(pulumi.StringOutput)
}

type TransformationArrayOutput struct{ *pulumi.OutputState }

func (TransformationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Transformation)(nil)).Elem()
}

func (o TransformationArrayOutput) ToTransformationArrayOutput() TransformationArrayOutput {
	return o
}

func (o TransformationArrayOutput) ToTransformationArrayOutputWithContext(ctx context.Context) TransformationArrayOutput {
	return o
}

func (o TransformationArrayOutput) Index(i pulumi.IntInput) TransformationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Transformation {
		return vs[0].([]Transformation)[vs[1].(int)]
	}).(TransformationOutput)
}

// A data flow transformation.
type TransformationResponse struct {
	// Transformation description.
	Description *string `pulumi:"description"`
	// Transformation name.
	Name string `pulumi:"name"`
}

// TransformationResponseInput is an input type that accepts TransformationResponseArgs and TransformationResponseOutput values.
// You can construct a concrete instance of `TransformationResponseInput` via:
//
//          TransformationResponseArgs{...}
type TransformationResponseInput interface {
	pulumi.Input

	ToTransformationResponseOutput() TransformationResponseOutput
	ToTransformationResponseOutputWithContext(context.Context) TransformationResponseOutput
}

// A data flow transformation.
type TransformationResponseArgs struct {
	// Transformation description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Transformation name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (TransformationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformationResponse)(nil)).Elem()
}

func (i TransformationResponseArgs) ToTransformationResponseOutput() TransformationResponseOutput {
	return i.ToTransformationResponseOutputWithContext(context.Background())
}

func (i TransformationResponseArgs) ToTransformationResponseOutputWithContext(ctx context.Context) TransformationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformationResponseOutput)
}

// TransformationResponseArrayInput is an input type that accepts TransformationResponseArray and TransformationResponseArrayOutput values.
// You can construct a concrete instance of `TransformationResponseArrayInput` via:
//
//          TransformationResponseArray{ TransformationResponseArgs{...} }
type TransformationResponseArrayInput interface {
	pulumi.Input

	ToTransformationResponseArrayOutput() TransformationResponseArrayOutput
	ToTransformationResponseArrayOutputWithContext(context.Context) TransformationResponseArrayOutput
}

type TransformationResponseArray []TransformationResponseInput

func (TransformationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformationResponse)(nil)).Elem()
}

func (i TransformationResponseArray) ToTransformationResponseArrayOutput() TransformationResponseArrayOutput {
	return i.ToTransformationResponseArrayOutputWithContext(context.Background())
}

func (i TransformationResponseArray) ToTransformationResponseArrayOutputWithContext(ctx context.Context) TransformationResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformationResponseArrayOutput)
}

// A data flow transformation.
type TransformationResponseOutput struct{ *pulumi.OutputState }

func (TransformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformationResponse)(nil)).Elem()
}

func (o TransformationResponseOutput) ToTransformationResponseOutput() TransformationResponseOutput {
	return o
}

func (o TransformationResponseOutput) ToTransformationResponseOutputWithContext(ctx context.Context) TransformationResponseOutput {
	return o
}

// Transformation description.
func (o TransformationResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformationResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Transformation name.
func (o TransformationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TransformationResponse) string { return v.Name }).(pulumi.StringOutput)
}

type TransformationResponseArrayOutput struct{ *pulumi.OutputState }

func (TransformationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformationResponse)(nil)).Elem()
}

func (o TransformationResponseArrayOutput) ToTransformationResponseArrayOutput() TransformationResponseArrayOutput {
	return o
}

func (o TransformationResponseArrayOutput) ToTransformationResponseArrayOutputWithContext(ctx context.Context) TransformationResponseArrayOutput {
	return o
}

func (o TransformationResponseArrayOutput) Index(i pulumi.IntInput) TransformationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformationResponse {
		return vs[0].([]TransformationResponse)[vs[1].(int)]
	}).(TransformationResponseOutput)
}

// Trigger referenced dependency.
type TriggerDependencyReference struct {
	// Referenced trigger.
	ReferenceTrigger TriggerReference `pulumi:"referenceTrigger"`
	// The type of dependency reference.
	Type string `pulumi:"type"`
}

// TriggerDependencyReferenceInput is an input type that accepts TriggerDependencyReferenceArgs and TriggerDependencyReferenceOutput values.
// You can construct a concrete instance of `TriggerDependencyReferenceInput` via:
//
//          TriggerDependencyReferenceArgs{...}
type TriggerDependencyReferenceInput interface {
	pulumi.Input

	ToTriggerDependencyReferenceOutput() TriggerDependencyReferenceOutput
	ToTriggerDependencyReferenceOutputWithContext(context.Context) TriggerDependencyReferenceOutput
}

// Trigger referenced dependency.
type TriggerDependencyReferenceArgs struct {
	// Referenced trigger.
	ReferenceTrigger TriggerReferenceInput `pulumi:"referenceTrigger"`
	// The type of dependency reference.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TriggerDependencyReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerDependencyReference)(nil)).Elem()
}

func (i TriggerDependencyReferenceArgs) ToTriggerDependencyReferenceOutput() TriggerDependencyReferenceOutput {
	return i.ToTriggerDependencyReferenceOutputWithContext(context.Background())
}

func (i TriggerDependencyReferenceArgs) ToTriggerDependencyReferenceOutputWithContext(ctx context.Context) TriggerDependencyReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerDependencyReferenceOutput)
}

// Trigger referenced dependency.
type TriggerDependencyReferenceOutput struct{ *pulumi.OutputState }

func (TriggerDependencyReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerDependencyReference)(nil)).Elem()
}

func (o TriggerDependencyReferenceOutput) ToTriggerDependencyReferenceOutput() TriggerDependencyReferenceOutput {
	return o
}

func (o TriggerDependencyReferenceOutput) ToTriggerDependencyReferenceOutputWithContext(ctx context.Context) TriggerDependencyReferenceOutput {
	return o
}

// Referenced trigger.
func (o TriggerDependencyReferenceOutput) ReferenceTrigger() TriggerReferenceOutput {
	return o.ApplyT(func(v TriggerDependencyReference) TriggerReference { return v.ReferenceTrigger }).(TriggerReferenceOutput)
}

// The type of dependency reference.
func (o TriggerDependencyReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerDependencyReference) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger referenced dependency.
type TriggerDependencyReferenceResponse struct {
	// Referenced trigger.
	ReferenceTrigger TriggerReferenceResponse `pulumi:"referenceTrigger"`
	// The type of dependency reference.
	Type string `pulumi:"type"`
}

// TriggerDependencyReferenceResponseInput is an input type that accepts TriggerDependencyReferenceResponseArgs and TriggerDependencyReferenceResponseOutput values.
// You can construct a concrete instance of `TriggerDependencyReferenceResponseInput` via:
//
//          TriggerDependencyReferenceResponseArgs{...}
type TriggerDependencyReferenceResponseInput interface {
	pulumi.Input

	ToTriggerDependencyReferenceResponseOutput() TriggerDependencyReferenceResponseOutput
	ToTriggerDependencyReferenceResponseOutputWithContext(context.Context) TriggerDependencyReferenceResponseOutput
}

// Trigger referenced dependency.
type TriggerDependencyReferenceResponseArgs struct {
	// Referenced trigger.
	ReferenceTrigger TriggerReferenceResponseInput `pulumi:"referenceTrigger"`
	// The type of dependency reference.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TriggerDependencyReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerDependencyReferenceResponse)(nil)).Elem()
}

func (i TriggerDependencyReferenceResponseArgs) ToTriggerDependencyReferenceResponseOutput() TriggerDependencyReferenceResponseOutput {
	return i.ToTriggerDependencyReferenceResponseOutputWithContext(context.Background())
}

func (i TriggerDependencyReferenceResponseArgs) ToTriggerDependencyReferenceResponseOutputWithContext(ctx context.Context) TriggerDependencyReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerDependencyReferenceResponseOutput)
}

// Trigger referenced dependency.
type TriggerDependencyReferenceResponseOutput struct{ *pulumi.OutputState }

func (TriggerDependencyReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerDependencyReferenceResponse)(nil)).Elem()
}

func (o TriggerDependencyReferenceResponseOutput) ToTriggerDependencyReferenceResponseOutput() TriggerDependencyReferenceResponseOutput {
	return o
}

func (o TriggerDependencyReferenceResponseOutput) ToTriggerDependencyReferenceResponseOutputWithContext(ctx context.Context) TriggerDependencyReferenceResponseOutput {
	return o
}

// Referenced trigger.
func (o TriggerDependencyReferenceResponseOutput) ReferenceTrigger() TriggerReferenceResponseOutput {
	return o.ApplyT(func(v TriggerDependencyReferenceResponse) TriggerReferenceResponse { return v.ReferenceTrigger }).(TriggerReferenceResponseOutput)
}

// The type of dependency reference.
func (o TriggerDependencyReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerDependencyReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Pipeline that needs to be triggered with the given parameters.
type TriggerPipelineReference struct {
	// Pipeline parameters.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Pipeline reference.
	PipelineReference *PipelineReference `pulumi:"pipelineReference"`
}

// TriggerPipelineReferenceInput is an input type that accepts TriggerPipelineReferenceArgs and TriggerPipelineReferenceOutput values.
// You can construct a concrete instance of `TriggerPipelineReferenceInput` via:
//
//          TriggerPipelineReferenceArgs{...}
type TriggerPipelineReferenceInput interface {
	pulumi.Input

	ToTriggerPipelineReferenceOutput() TriggerPipelineReferenceOutput
	ToTriggerPipelineReferenceOutputWithContext(context.Context) TriggerPipelineReferenceOutput
}

// Pipeline that needs to be triggered with the given parameters.
type TriggerPipelineReferenceArgs struct {
	// Pipeline parameters.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// Pipeline reference.
	PipelineReference PipelineReferencePtrInput `pulumi:"pipelineReference"`
}

func (TriggerPipelineReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPipelineReference)(nil)).Elem()
}

func (i TriggerPipelineReferenceArgs) ToTriggerPipelineReferenceOutput() TriggerPipelineReferenceOutput {
	return i.ToTriggerPipelineReferenceOutputWithContext(context.Background())
}

func (i TriggerPipelineReferenceArgs) ToTriggerPipelineReferenceOutputWithContext(ctx context.Context) TriggerPipelineReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPipelineReferenceOutput)
}

// TriggerPipelineReferenceArrayInput is an input type that accepts TriggerPipelineReferenceArray and TriggerPipelineReferenceArrayOutput values.
// You can construct a concrete instance of `TriggerPipelineReferenceArrayInput` via:
//
//          TriggerPipelineReferenceArray{ TriggerPipelineReferenceArgs{...} }
type TriggerPipelineReferenceArrayInput interface {
	pulumi.Input

	ToTriggerPipelineReferenceArrayOutput() TriggerPipelineReferenceArrayOutput
	ToTriggerPipelineReferenceArrayOutputWithContext(context.Context) TriggerPipelineReferenceArrayOutput
}

type TriggerPipelineReferenceArray []TriggerPipelineReferenceInput

func (TriggerPipelineReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerPipelineReference)(nil)).Elem()
}

func (i TriggerPipelineReferenceArray) ToTriggerPipelineReferenceArrayOutput() TriggerPipelineReferenceArrayOutput {
	return i.ToTriggerPipelineReferenceArrayOutputWithContext(context.Background())
}

func (i TriggerPipelineReferenceArray) ToTriggerPipelineReferenceArrayOutputWithContext(ctx context.Context) TriggerPipelineReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPipelineReferenceArrayOutput)
}

// Pipeline that needs to be triggered with the given parameters.
type TriggerPipelineReferenceOutput struct{ *pulumi.OutputState }

func (TriggerPipelineReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPipelineReference)(nil)).Elem()
}

func (o TriggerPipelineReferenceOutput) ToTriggerPipelineReferenceOutput() TriggerPipelineReferenceOutput {
	return o
}

func (o TriggerPipelineReferenceOutput) ToTriggerPipelineReferenceOutputWithContext(ctx context.Context) TriggerPipelineReferenceOutput {
	return o
}

// Pipeline parameters.
func (o TriggerPipelineReferenceOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v TriggerPipelineReference) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Pipeline reference.
func (o TriggerPipelineReferenceOutput) PipelineReference() PipelineReferencePtrOutput {
	return o.ApplyT(func(v TriggerPipelineReference) *PipelineReference { return v.PipelineReference }).(PipelineReferencePtrOutput)
}

type TriggerPipelineReferenceArrayOutput struct{ *pulumi.OutputState }

func (TriggerPipelineReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerPipelineReference)(nil)).Elem()
}

func (o TriggerPipelineReferenceArrayOutput) ToTriggerPipelineReferenceArrayOutput() TriggerPipelineReferenceArrayOutput {
	return o
}

func (o TriggerPipelineReferenceArrayOutput) ToTriggerPipelineReferenceArrayOutputWithContext(ctx context.Context) TriggerPipelineReferenceArrayOutput {
	return o
}

func (o TriggerPipelineReferenceArrayOutput) Index(i pulumi.IntInput) TriggerPipelineReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerPipelineReference {
		return vs[0].([]TriggerPipelineReference)[vs[1].(int)]
	}).(TriggerPipelineReferenceOutput)
}

// Pipeline that needs to be triggered with the given parameters.
type TriggerPipelineReferenceResponse struct {
	// Pipeline parameters.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Pipeline reference.
	PipelineReference *PipelineReferenceResponse `pulumi:"pipelineReference"`
}

// TriggerPipelineReferenceResponseInput is an input type that accepts TriggerPipelineReferenceResponseArgs and TriggerPipelineReferenceResponseOutput values.
// You can construct a concrete instance of `TriggerPipelineReferenceResponseInput` via:
//
//          TriggerPipelineReferenceResponseArgs{...}
type TriggerPipelineReferenceResponseInput interface {
	pulumi.Input

	ToTriggerPipelineReferenceResponseOutput() TriggerPipelineReferenceResponseOutput
	ToTriggerPipelineReferenceResponseOutputWithContext(context.Context) TriggerPipelineReferenceResponseOutput
}

// Pipeline that needs to be triggered with the given parameters.
type TriggerPipelineReferenceResponseArgs struct {
	// Pipeline parameters.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// Pipeline reference.
	PipelineReference PipelineReferenceResponsePtrInput `pulumi:"pipelineReference"`
}

func (TriggerPipelineReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPipelineReferenceResponse)(nil)).Elem()
}

func (i TriggerPipelineReferenceResponseArgs) ToTriggerPipelineReferenceResponseOutput() TriggerPipelineReferenceResponseOutput {
	return i.ToTriggerPipelineReferenceResponseOutputWithContext(context.Background())
}

func (i TriggerPipelineReferenceResponseArgs) ToTriggerPipelineReferenceResponseOutputWithContext(ctx context.Context) TriggerPipelineReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPipelineReferenceResponseOutput)
}

// TriggerPipelineReferenceResponseArrayInput is an input type that accepts TriggerPipelineReferenceResponseArray and TriggerPipelineReferenceResponseArrayOutput values.
// You can construct a concrete instance of `TriggerPipelineReferenceResponseArrayInput` via:
//
//          TriggerPipelineReferenceResponseArray{ TriggerPipelineReferenceResponseArgs{...} }
type TriggerPipelineReferenceResponseArrayInput interface {
	pulumi.Input

	ToTriggerPipelineReferenceResponseArrayOutput() TriggerPipelineReferenceResponseArrayOutput
	ToTriggerPipelineReferenceResponseArrayOutputWithContext(context.Context) TriggerPipelineReferenceResponseArrayOutput
}

type TriggerPipelineReferenceResponseArray []TriggerPipelineReferenceResponseInput

func (TriggerPipelineReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerPipelineReferenceResponse)(nil)).Elem()
}

func (i TriggerPipelineReferenceResponseArray) ToTriggerPipelineReferenceResponseArrayOutput() TriggerPipelineReferenceResponseArrayOutput {
	return i.ToTriggerPipelineReferenceResponseArrayOutputWithContext(context.Background())
}

func (i TriggerPipelineReferenceResponseArray) ToTriggerPipelineReferenceResponseArrayOutputWithContext(ctx context.Context) TriggerPipelineReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPipelineReferenceResponseArrayOutput)
}

// Pipeline that needs to be triggered with the given parameters.
type TriggerPipelineReferenceResponseOutput struct{ *pulumi.OutputState }

func (TriggerPipelineReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPipelineReferenceResponse)(nil)).Elem()
}

func (o TriggerPipelineReferenceResponseOutput) ToTriggerPipelineReferenceResponseOutput() TriggerPipelineReferenceResponseOutput {
	return o
}

func (o TriggerPipelineReferenceResponseOutput) ToTriggerPipelineReferenceResponseOutputWithContext(ctx context.Context) TriggerPipelineReferenceResponseOutput {
	return o
}

// Pipeline parameters.
func (o TriggerPipelineReferenceResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v TriggerPipelineReferenceResponse) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Pipeline reference.
func (o TriggerPipelineReferenceResponseOutput) PipelineReference() PipelineReferenceResponsePtrOutput {
	return o.ApplyT(func(v TriggerPipelineReferenceResponse) *PipelineReferenceResponse { return v.PipelineReference }).(PipelineReferenceResponsePtrOutput)
}

type TriggerPipelineReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (TriggerPipelineReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerPipelineReferenceResponse)(nil)).Elem()
}

func (o TriggerPipelineReferenceResponseArrayOutput) ToTriggerPipelineReferenceResponseArrayOutput() TriggerPipelineReferenceResponseArrayOutput {
	return o
}

func (o TriggerPipelineReferenceResponseArrayOutput) ToTriggerPipelineReferenceResponseArrayOutputWithContext(ctx context.Context) TriggerPipelineReferenceResponseArrayOutput {
	return o
}

func (o TriggerPipelineReferenceResponseArrayOutput) Index(i pulumi.IntInput) TriggerPipelineReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerPipelineReferenceResponse {
		return vs[0].([]TriggerPipelineReferenceResponse)[vs[1].(int)]
	}).(TriggerPipelineReferenceResponseOutput)
}

// Trigger reference type.
type TriggerReference struct {
	// Reference trigger name.
	ReferenceName string `pulumi:"referenceName"`
	// Trigger reference type.
	Type string `pulumi:"type"`
}

// TriggerReferenceInput is an input type that accepts TriggerReferenceArgs and TriggerReferenceOutput values.
// You can construct a concrete instance of `TriggerReferenceInput` via:
//
//          TriggerReferenceArgs{...}
type TriggerReferenceInput interface {
	pulumi.Input

	ToTriggerReferenceOutput() TriggerReferenceOutput
	ToTriggerReferenceOutputWithContext(context.Context) TriggerReferenceOutput
}

// Trigger reference type.
type TriggerReferenceArgs struct {
	// Reference trigger name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Trigger reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TriggerReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerReference)(nil)).Elem()
}

func (i TriggerReferenceArgs) ToTriggerReferenceOutput() TriggerReferenceOutput {
	return i.ToTriggerReferenceOutputWithContext(context.Background())
}

func (i TriggerReferenceArgs) ToTriggerReferenceOutputWithContext(ctx context.Context) TriggerReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerReferenceOutput)
}

// Trigger reference type.
type TriggerReferenceOutput struct{ *pulumi.OutputState }

func (TriggerReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerReference)(nil)).Elem()
}

func (o TriggerReferenceOutput) ToTriggerReferenceOutput() TriggerReferenceOutput {
	return o
}

func (o TriggerReferenceOutput) ToTriggerReferenceOutputWithContext(ctx context.Context) TriggerReferenceOutput {
	return o
}

// Reference trigger name.
func (o TriggerReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Trigger reference type.
func (o TriggerReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerReference) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger reference type.
type TriggerReferenceResponse struct {
	// Reference trigger name.
	ReferenceName string `pulumi:"referenceName"`
	// Trigger reference type.
	Type string `pulumi:"type"`
}

// TriggerReferenceResponseInput is an input type that accepts TriggerReferenceResponseArgs and TriggerReferenceResponseOutput values.
// You can construct a concrete instance of `TriggerReferenceResponseInput` via:
//
//          TriggerReferenceResponseArgs{...}
type TriggerReferenceResponseInput interface {
	pulumi.Input

	ToTriggerReferenceResponseOutput() TriggerReferenceResponseOutput
	ToTriggerReferenceResponseOutputWithContext(context.Context) TriggerReferenceResponseOutput
}

// Trigger reference type.
type TriggerReferenceResponseArgs struct {
	// Reference trigger name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Trigger reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TriggerReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerReferenceResponse)(nil)).Elem()
}

func (i TriggerReferenceResponseArgs) ToTriggerReferenceResponseOutput() TriggerReferenceResponseOutput {
	return i.ToTriggerReferenceResponseOutputWithContext(context.Background())
}

func (i TriggerReferenceResponseArgs) ToTriggerReferenceResponseOutputWithContext(ctx context.Context) TriggerReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerReferenceResponseOutput)
}

// Trigger reference type.
type TriggerReferenceResponseOutput struct{ *pulumi.OutputState }

func (TriggerReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerReferenceResponse)(nil)).Elem()
}

func (o TriggerReferenceResponseOutput) ToTriggerReferenceResponseOutput() TriggerReferenceResponseOutput {
	return o
}

func (o TriggerReferenceResponseOutput) ToTriggerReferenceResponseOutputWithContext(ctx context.Context) TriggerReferenceResponseOutput {
	return o
}

// Reference trigger name.
func (o TriggerReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Trigger reference type.
func (o TriggerReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
type TumblingWindowTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Delay interface{} `pulumi:"delay"`
	// Triggers that this trigger depends on. Only tumbling window triggers are supported.
	DependsOn []interface{} `pulumi:"dependsOn"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	EndTime *string `pulumi:"endTime"`
	// The frequency of the time windows.
	Frequency string `pulumi:"frequency"`
	// The interval of the time windows. The minimum interval allowed is 15 Minutes.
	Interval int `pulumi:"interval"`
	// The max number of parallel time windows (ready for execution) for which a new run is triggered.
	MaxConcurrency int `pulumi:"maxConcurrency"`
	// Pipeline for which runs are created when an event is fired for trigger window that is ready.
	Pipeline TriggerPipelineReference `pulumi:"pipeline"`
	// Retry policy that will be applied for failed pipeline runs.
	RetryPolicy *RetryPolicy `pulumi:"retryPolicy"`
	// The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	StartTime string `pulumi:"startTime"`
	// Trigger type.
	Type string `pulumi:"type"`
}

// TumblingWindowTriggerInput is an input type that accepts TumblingWindowTriggerArgs and TumblingWindowTriggerOutput values.
// You can construct a concrete instance of `TumblingWindowTriggerInput` via:
//
//          TumblingWindowTriggerArgs{...}
type TumblingWindowTriggerInput interface {
	pulumi.Input

	ToTumblingWindowTriggerOutput() TumblingWindowTriggerOutput
	ToTumblingWindowTriggerOutputWithContext(context.Context) TumblingWindowTriggerOutput
}

// Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
type TumblingWindowTriggerArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Delay pulumi.Input `pulumi:"delay"`
	// Triggers that this trigger depends on. Only tumbling window triggers are supported.
	DependsOn pulumi.ArrayInput `pulumi:"dependsOn"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// The frequency of the time windows.
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// The interval of the time windows. The minimum interval allowed is 15 Minutes.
	Interval pulumi.IntInput `pulumi:"interval"`
	// The max number of parallel time windows (ready for execution) for which a new run is triggered.
	MaxConcurrency pulumi.IntInput `pulumi:"maxConcurrency"`
	// Pipeline for which runs are created when an event is fired for trigger window that is ready.
	Pipeline TriggerPipelineReferenceInput `pulumi:"pipeline"`
	// Retry policy that will be applied for failed pipeline runs.
	RetryPolicy RetryPolicyPtrInput `pulumi:"retryPolicy"`
	// The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// Trigger type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TumblingWindowTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TumblingWindowTrigger)(nil)).Elem()
}

func (i TumblingWindowTriggerArgs) ToTumblingWindowTriggerOutput() TumblingWindowTriggerOutput {
	return i.ToTumblingWindowTriggerOutputWithContext(context.Background())
}

func (i TumblingWindowTriggerArgs) ToTumblingWindowTriggerOutputWithContext(ctx context.Context) TumblingWindowTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TumblingWindowTriggerOutput)
}

// Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
type TumblingWindowTriggerOutput struct{ *pulumi.OutputState }

func (TumblingWindowTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TumblingWindowTrigger)(nil)).Elem()
}

func (o TumblingWindowTriggerOutput) ToTumblingWindowTriggerOutput() TumblingWindowTriggerOutput {
	return o
}

func (o TumblingWindowTriggerOutput) ToTumblingWindowTriggerOutputWithContext(ctx context.Context) TumblingWindowTriggerOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o TumblingWindowTriggerOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o TumblingWindowTriggerOutput) Delay() pulumi.AnyOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) interface{} { return v.Delay }).(pulumi.AnyOutput)
}

// Triggers that this trigger depends on. Only tumbling window triggers are supported.
func (o TumblingWindowTriggerOutput) DependsOn() pulumi.ArrayOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) []interface{} { return v.DependsOn }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o TumblingWindowTriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
func (o TumblingWindowTriggerOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The frequency of the time windows.
func (o TumblingWindowTriggerOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) string { return v.Frequency }).(pulumi.StringOutput)
}

// The interval of the time windows. The minimum interval allowed is 15 Minutes.
func (o TumblingWindowTriggerOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) int { return v.Interval }).(pulumi.IntOutput)
}

// The max number of parallel time windows (ready for execution) for which a new run is triggered.
func (o TumblingWindowTriggerOutput) MaxConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) int { return v.MaxConcurrency }).(pulumi.IntOutput)
}

// Pipeline for which runs are created when an event is fired for trigger window that is ready.
func (o TumblingWindowTriggerOutput) Pipeline() TriggerPipelineReferenceOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) TriggerPipelineReference { return v.Pipeline }).(TriggerPipelineReferenceOutput)
}

// Retry policy that will be applied for failed pipeline runs.
func (o TumblingWindowTriggerOutput) RetryPolicy() RetryPolicyPtrOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) *RetryPolicy { return v.RetryPolicy }).(RetryPolicyPtrOutput)
}

// The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
func (o TumblingWindowTriggerOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) string { return v.StartTime }).(pulumi.StringOutput)
}

// Trigger type.
func (o TumblingWindowTriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
type TumblingWindowTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Delay interface{} `pulumi:"delay"`
	// Triggers that this trigger depends on. Only tumbling window triggers are supported.
	DependsOn []interface{} `pulumi:"dependsOn"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	EndTime *string `pulumi:"endTime"`
	// The frequency of the time windows.
	Frequency string `pulumi:"frequency"`
	// The interval of the time windows. The minimum interval allowed is 15 Minutes.
	Interval int `pulumi:"interval"`
	// The max number of parallel time windows (ready for execution) for which a new run is triggered.
	MaxConcurrency int `pulumi:"maxConcurrency"`
	// Pipeline for which runs are created when an event is fired for trigger window that is ready.
	Pipeline TriggerPipelineReferenceResponse `pulumi:"pipeline"`
	// Retry policy that will be applied for failed pipeline runs.
	RetryPolicy *RetryPolicyResponse `pulumi:"retryPolicy"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	StartTime string `pulumi:"startTime"`
	// Trigger type.
	Type string `pulumi:"type"`
}

// TumblingWindowTriggerResponseInput is an input type that accepts TumblingWindowTriggerResponseArgs and TumblingWindowTriggerResponseOutput values.
// You can construct a concrete instance of `TumblingWindowTriggerResponseInput` via:
//
//          TumblingWindowTriggerResponseArgs{...}
type TumblingWindowTriggerResponseInput interface {
	pulumi.Input

	ToTumblingWindowTriggerResponseOutput() TumblingWindowTriggerResponseOutput
	ToTumblingWindowTriggerResponseOutputWithContext(context.Context) TumblingWindowTriggerResponseOutput
}

// Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
type TumblingWindowTriggerResponseArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Delay pulumi.Input `pulumi:"delay"`
	// Triggers that this trigger depends on. Only tumbling window triggers are supported.
	DependsOn pulumi.ArrayInput `pulumi:"dependsOn"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// The frequency of the time windows.
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// The interval of the time windows. The minimum interval allowed is 15 Minutes.
	Interval pulumi.IntInput `pulumi:"interval"`
	// The max number of parallel time windows (ready for execution) for which a new run is triggered.
	MaxConcurrency pulumi.IntInput `pulumi:"maxConcurrency"`
	// Pipeline for which runs are created when an event is fired for trigger window that is ready.
	Pipeline TriggerPipelineReferenceResponseInput `pulumi:"pipeline"`
	// Retry policy that will be applied for failed pipeline runs.
	RetryPolicy RetryPolicyResponsePtrInput `pulumi:"retryPolicy"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState pulumi.StringInput `pulumi:"runtimeState"`
	// The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// Trigger type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TumblingWindowTriggerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TumblingWindowTriggerResponse)(nil)).Elem()
}

func (i TumblingWindowTriggerResponseArgs) ToTumblingWindowTriggerResponseOutput() TumblingWindowTriggerResponseOutput {
	return i.ToTumblingWindowTriggerResponseOutputWithContext(context.Background())
}

func (i TumblingWindowTriggerResponseArgs) ToTumblingWindowTriggerResponseOutputWithContext(ctx context.Context) TumblingWindowTriggerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TumblingWindowTriggerResponseOutput)
}

// Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
type TumblingWindowTriggerResponseOutput struct{ *pulumi.OutputState }

func (TumblingWindowTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TumblingWindowTriggerResponse)(nil)).Elem()
}

func (o TumblingWindowTriggerResponseOutput) ToTumblingWindowTriggerResponseOutput() TumblingWindowTriggerResponseOutput {
	return o
}

func (o TumblingWindowTriggerResponseOutput) ToTumblingWindowTriggerResponseOutputWithContext(ctx context.Context) TumblingWindowTriggerResponseOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o TumblingWindowTriggerResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o TumblingWindowTriggerResponseOutput) Delay() pulumi.AnyOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) interface{} { return v.Delay }).(pulumi.AnyOutput)
}

// Triggers that this trigger depends on. Only tumbling window triggers are supported.
func (o TumblingWindowTriggerResponseOutput) DependsOn() pulumi.ArrayOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) []interface{} { return v.DependsOn }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o TumblingWindowTriggerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
func (o TumblingWindowTriggerResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The frequency of the time windows.
func (o TumblingWindowTriggerResponseOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) string { return v.Frequency }).(pulumi.StringOutput)
}

// The interval of the time windows. The minimum interval allowed is 15 Minutes.
func (o TumblingWindowTriggerResponseOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) int { return v.Interval }).(pulumi.IntOutput)
}

// The max number of parallel time windows (ready for execution) for which a new run is triggered.
func (o TumblingWindowTriggerResponseOutput) MaxConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) int { return v.MaxConcurrency }).(pulumi.IntOutput)
}

// Pipeline for which runs are created when an event is fired for trigger window that is ready.
func (o TumblingWindowTriggerResponseOutput) Pipeline() TriggerPipelineReferenceResponseOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) TriggerPipelineReferenceResponse { return v.Pipeline }).(TriggerPipelineReferenceResponseOutput)
}

// Retry policy that will be applied for failed pipeline runs.
func (o TumblingWindowTriggerResponseOutput) RetryPolicy() RetryPolicyResponsePtrOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) *RetryPolicyResponse { return v.RetryPolicy }).(RetryPolicyResponsePtrOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o TumblingWindowTriggerResponseOutput) RuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) string { return v.RuntimeState }).(pulumi.StringOutput)
}

// The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
func (o TumblingWindowTriggerResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Trigger type.
func (o TumblingWindowTriggerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Get Data Plane read only token request definition.
type UserAccessPolicyResponse struct {
	// The resource path to get access relative to factory. Currently only empty string is supported which corresponds to the factory resource.
	AccessResourcePath *string `pulumi:"accessResourcePath"`
	// Expiration time for the token. Maximum duration for the token is eight hours and by default the token will expire in eight hours.
	ExpireTime *string `pulumi:"expireTime"`
	// The string with permissions for Data Plane access. Currently only 'r' is supported which grants read only access.
	Permissions *string `pulumi:"permissions"`
	// The name of the profile. Currently only the default is supported. The default value is DefaultProfile.
	ProfileName *string `pulumi:"profileName"`
	// Start time for the token. If not specified the current time will be used.
	StartTime *string `pulumi:"startTime"`
}

// UserAccessPolicyResponseInput is an input type that accepts UserAccessPolicyResponseArgs and UserAccessPolicyResponseOutput values.
// You can construct a concrete instance of `UserAccessPolicyResponseInput` via:
//
//          UserAccessPolicyResponseArgs{...}
type UserAccessPolicyResponseInput interface {
	pulumi.Input

	ToUserAccessPolicyResponseOutput() UserAccessPolicyResponseOutput
	ToUserAccessPolicyResponseOutputWithContext(context.Context) UserAccessPolicyResponseOutput
}

// Get Data Plane read only token request definition.
type UserAccessPolicyResponseArgs struct {
	// The resource path to get access relative to factory. Currently only empty string is supported which corresponds to the factory resource.
	AccessResourcePath pulumi.StringPtrInput `pulumi:"accessResourcePath"`
	// Expiration time for the token. Maximum duration for the token is eight hours and by default the token will expire in eight hours.
	ExpireTime pulumi.StringPtrInput `pulumi:"expireTime"`
	// The string with permissions for Data Plane access. Currently only 'r' is supported which grants read only access.
	Permissions pulumi.StringPtrInput `pulumi:"permissions"`
	// The name of the profile. Currently only the default is supported. The default value is DefaultProfile.
	ProfileName pulumi.StringPtrInput `pulumi:"profileName"`
	// Start time for the token. If not specified the current time will be used.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (UserAccessPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccessPolicyResponse)(nil)).Elem()
}

func (i UserAccessPolicyResponseArgs) ToUserAccessPolicyResponseOutput() UserAccessPolicyResponseOutput {
	return i.ToUserAccessPolicyResponseOutputWithContext(context.Background())
}

func (i UserAccessPolicyResponseArgs) ToUserAccessPolicyResponseOutputWithContext(ctx context.Context) UserAccessPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccessPolicyResponseOutput)
}

// Get Data Plane read only token request definition.
type UserAccessPolicyResponseOutput struct{ *pulumi.OutputState }

func (UserAccessPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccessPolicyResponse)(nil)).Elem()
}

func (o UserAccessPolicyResponseOutput) ToUserAccessPolicyResponseOutput() UserAccessPolicyResponseOutput {
	return o
}

func (o UserAccessPolicyResponseOutput) ToUserAccessPolicyResponseOutputWithContext(ctx context.Context) UserAccessPolicyResponseOutput {
	return o
}

// The resource path to get access relative to factory. Currently only empty string is supported which corresponds to the factory resource.
func (o UserAccessPolicyResponseOutput) AccessResourcePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccessPolicyResponse) *string { return v.AccessResourcePath }).(pulumi.StringPtrOutput)
}

// Expiration time for the token. Maximum duration for the token is eight hours and by default the token will expire in eight hours.
func (o UserAccessPolicyResponseOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccessPolicyResponse) *string { return v.ExpireTime }).(pulumi.StringPtrOutput)
}

// The string with permissions for Data Plane access. Currently only 'r' is supported which grants read only access.
func (o UserAccessPolicyResponseOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccessPolicyResponse) *string { return v.Permissions }).(pulumi.StringPtrOutput)
}

// The name of the profile. Currently only the default is supported. The default value is DefaultProfile.
func (o UserAccessPolicyResponseOutput) ProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccessPolicyResponse) *string { return v.ProfileName }).(pulumi.StringPtrOutput)
}

// Start time for the token. If not specified the current time will be used.
func (o UserAccessPolicyResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccessPolicyResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// User property.
type UserProperty struct {
	// User property name.
	Name string `pulumi:"name"`
	// User property value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// UserPropertyInput is an input type that accepts UserPropertyArgs and UserPropertyOutput values.
// You can construct a concrete instance of `UserPropertyInput` via:
//
//          UserPropertyArgs{...}
type UserPropertyInput interface {
	pulumi.Input

	ToUserPropertyOutput() UserPropertyOutput
	ToUserPropertyOutputWithContext(context.Context) UserPropertyOutput
}

// User property.
type UserPropertyArgs struct {
	// User property name.
	Name pulumi.StringInput `pulumi:"name"`
	// User property value. Type: string (or Expression with resultType string).
	Value pulumi.Input `pulumi:"value"`
}

func (UserPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserProperty)(nil)).Elem()
}

func (i UserPropertyArgs) ToUserPropertyOutput() UserPropertyOutput {
	return i.ToUserPropertyOutputWithContext(context.Background())
}

func (i UserPropertyArgs) ToUserPropertyOutputWithContext(ctx context.Context) UserPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPropertyOutput)
}

// UserPropertyArrayInput is an input type that accepts UserPropertyArray and UserPropertyArrayOutput values.
// You can construct a concrete instance of `UserPropertyArrayInput` via:
//
//          UserPropertyArray{ UserPropertyArgs{...} }
type UserPropertyArrayInput interface {
	pulumi.Input

	ToUserPropertyArrayOutput() UserPropertyArrayOutput
	ToUserPropertyArrayOutputWithContext(context.Context) UserPropertyArrayOutput
}

type UserPropertyArray []UserPropertyInput

func (UserPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserProperty)(nil)).Elem()
}

func (i UserPropertyArray) ToUserPropertyArrayOutput() UserPropertyArrayOutput {
	return i.ToUserPropertyArrayOutputWithContext(context.Background())
}

func (i UserPropertyArray) ToUserPropertyArrayOutputWithContext(ctx context.Context) UserPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPropertyArrayOutput)
}

// User property.
type UserPropertyOutput struct{ *pulumi.OutputState }

func (UserPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserProperty)(nil)).Elem()
}

func (o UserPropertyOutput) ToUserPropertyOutput() UserPropertyOutput {
	return o
}

func (o UserPropertyOutput) ToUserPropertyOutputWithContext(ctx context.Context) UserPropertyOutput {
	return o
}

// User property name.
func (o UserPropertyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UserProperty) string { return v.Name }).(pulumi.StringOutput)
}

// User property value. Type: string (or Expression with resultType string).
func (o UserPropertyOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v UserProperty) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type UserPropertyArrayOutput struct{ *pulumi.OutputState }

func (UserPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserProperty)(nil)).Elem()
}

func (o UserPropertyArrayOutput) ToUserPropertyArrayOutput() UserPropertyArrayOutput {
	return o
}

func (o UserPropertyArrayOutput) ToUserPropertyArrayOutputWithContext(ctx context.Context) UserPropertyArrayOutput {
	return o
}

func (o UserPropertyArrayOutput) Index(i pulumi.IntInput) UserPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserProperty {
		return vs[0].([]UserProperty)[vs[1].(int)]
	}).(UserPropertyOutput)
}

// User property.
type UserPropertyResponse struct {
	// User property name.
	Name string `pulumi:"name"`
	// User property value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// UserPropertyResponseInput is an input type that accepts UserPropertyResponseArgs and UserPropertyResponseOutput values.
// You can construct a concrete instance of `UserPropertyResponseInput` via:
//
//          UserPropertyResponseArgs{...}
type UserPropertyResponseInput interface {
	pulumi.Input

	ToUserPropertyResponseOutput() UserPropertyResponseOutput
	ToUserPropertyResponseOutputWithContext(context.Context) UserPropertyResponseOutput
}

// User property.
type UserPropertyResponseArgs struct {
	// User property name.
	Name pulumi.StringInput `pulumi:"name"`
	// User property value. Type: string (or Expression with resultType string).
	Value pulumi.Input `pulumi:"value"`
}

func (UserPropertyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPropertyResponse)(nil)).Elem()
}

func (i UserPropertyResponseArgs) ToUserPropertyResponseOutput() UserPropertyResponseOutput {
	return i.ToUserPropertyResponseOutputWithContext(context.Background())
}

func (i UserPropertyResponseArgs) ToUserPropertyResponseOutputWithContext(ctx context.Context) UserPropertyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPropertyResponseOutput)
}

// UserPropertyResponseArrayInput is an input type that accepts UserPropertyResponseArray and UserPropertyResponseArrayOutput values.
// You can construct a concrete instance of `UserPropertyResponseArrayInput` via:
//
//          UserPropertyResponseArray{ UserPropertyResponseArgs{...} }
type UserPropertyResponseArrayInput interface {
	pulumi.Input

	ToUserPropertyResponseArrayOutput() UserPropertyResponseArrayOutput
	ToUserPropertyResponseArrayOutputWithContext(context.Context) UserPropertyResponseArrayOutput
}

type UserPropertyResponseArray []UserPropertyResponseInput

func (UserPropertyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPropertyResponse)(nil)).Elem()
}

func (i UserPropertyResponseArray) ToUserPropertyResponseArrayOutput() UserPropertyResponseArrayOutput {
	return i.ToUserPropertyResponseArrayOutputWithContext(context.Background())
}

func (i UserPropertyResponseArray) ToUserPropertyResponseArrayOutputWithContext(ctx context.Context) UserPropertyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPropertyResponseArrayOutput)
}

// User property.
type UserPropertyResponseOutput struct{ *pulumi.OutputState }

func (UserPropertyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPropertyResponse)(nil)).Elem()
}

func (o UserPropertyResponseOutput) ToUserPropertyResponseOutput() UserPropertyResponseOutput {
	return o
}

func (o UserPropertyResponseOutput) ToUserPropertyResponseOutputWithContext(ctx context.Context) UserPropertyResponseOutput {
	return o
}

// User property name.
func (o UserPropertyResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UserPropertyResponse) string { return v.Name }).(pulumi.StringOutput)
}

// User property value. Type: string (or Expression with resultType string).
func (o UserPropertyResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v UserPropertyResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type UserPropertyResponseArrayOutput struct{ *pulumi.OutputState }

func (UserPropertyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPropertyResponse)(nil)).Elem()
}

func (o UserPropertyResponseArrayOutput) ToUserPropertyResponseArrayOutput() UserPropertyResponseArrayOutput {
	return o
}

func (o UserPropertyResponseArrayOutput) ToUserPropertyResponseArrayOutputWithContext(ctx context.Context) UserPropertyResponseArrayOutput {
	return o
}

func (o UserPropertyResponseArrayOutput) Index(i pulumi.IntInput) UserPropertyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserPropertyResponse {
		return vs[0].([]UserPropertyResponse)[vs[1].(int)]
	}).(UserPropertyResponseOutput)
}

// Definition of a single variable for a Pipeline.
type VariableSpecification struct {
	// Default value of variable.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// Variable type.
	Type string `pulumi:"type"`
}

// VariableSpecificationInput is an input type that accepts VariableSpecificationArgs and VariableSpecificationOutput values.
// You can construct a concrete instance of `VariableSpecificationInput` via:
//
//          VariableSpecificationArgs{...}
type VariableSpecificationInput interface {
	pulumi.Input

	ToVariableSpecificationOutput() VariableSpecificationOutput
	ToVariableSpecificationOutputWithContext(context.Context) VariableSpecificationOutput
}

// Definition of a single variable for a Pipeline.
type VariableSpecificationArgs struct {
	// Default value of variable.
	DefaultValue pulumi.Input `pulumi:"defaultValue"`
	// Variable type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (VariableSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableSpecification)(nil)).Elem()
}

func (i VariableSpecificationArgs) ToVariableSpecificationOutput() VariableSpecificationOutput {
	return i.ToVariableSpecificationOutputWithContext(context.Background())
}

func (i VariableSpecificationArgs) ToVariableSpecificationOutputWithContext(ctx context.Context) VariableSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableSpecificationOutput)
}

// VariableSpecificationMapInput is an input type that accepts VariableSpecificationMap and VariableSpecificationMapOutput values.
// You can construct a concrete instance of `VariableSpecificationMapInput` via:
//
//          VariableSpecificationMap{ "key": VariableSpecificationArgs{...} }
type VariableSpecificationMapInput interface {
	pulumi.Input

	ToVariableSpecificationMapOutput() VariableSpecificationMapOutput
	ToVariableSpecificationMapOutputWithContext(context.Context) VariableSpecificationMapOutput
}

type VariableSpecificationMap map[string]VariableSpecificationInput

func (VariableSpecificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VariableSpecification)(nil)).Elem()
}

func (i VariableSpecificationMap) ToVariableSpecificationMapOutput() VariableSpecificationMapOutput {
	return i.ToVariableSpecificationMapOutputWithContext(context.Background())
}

func (i VariableSpecificationMap) ToVariableSpecificationMapOutputWithContext(ctx context.Context) VariableSpecificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableSpecificationMapOutput)
}

// Definition of a single variable for a Pipeline.
type VariableSpecificationOutput struct{ *pulumi.OutputState }

func (VariableSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableSpecification)(nil)).Elem()
}

func (o VariableSpecificationOutput) ToVariableSpecificationOutput() VariableSpecificationOutput {
	return o
}

func (o VariableSpecificationOutput) ToVariableSpecificationOutputWithContext(ctx context.Context) VariableSpecificationOutput {
	return o
}

// Default value of variable.
func (o VariableSpecificationOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v VariableSpecification) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// Variable type.
func (o VariableSpecificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VariableSpecification) string { return v.Type }).(pulumi.StringOutput)
}

type VariableSpecificationMapOutput struct{ *pulumi.OutputState }

func (VariableSpecificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VariableSpecification)(nil)).Elem()
}

func (o VariableSpecificationMapOutput) ToVariableSpecificationMapOutput() VariableSpecificationMapOutput {
	return o
}

func (o VariableSpecificationMapOutput) ToVariableSpecificationMapOutputWithContext(ctx context.Context) VariableSpecificationMapOutput {
	return o
}

func (o VariableSpecificationMapOutput) MapIndex(k pulumi.StringInput) VariableSpecificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VariableSpecification {
		return vs[0].(map[string]VariableSpecification)[vs[1].(string)]
	}).(VariableSpecificationOutput)
}

// Definition of a single variable for a Pipeline.
type VariableSpecificationResponse struct {
	// Default value of variable.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// Variable type.
	Type string `pulumi:"type"`
}

// VariableSpecificationResponseInput is an input type that accepts VariableSpecificationResponseArgs and VariableSpecificationResponseOutput values.
// You can construct a concrete instance of `VariableSpecificationResponseInput` via:
//
//          VariableSpecificationResponseArgs{...}
type VariableSpecificationResponseInput interface {
	pulumi.Input

	ToVariableSpecificationResponseOutput() VariableSpecificationResponseOutput
	ToVariableSpecificationResponseOutputWithContext(context.Context) VariableSpecificationResponseOutput
}

// Definition of a single variable for a Pipeline.
type VariableSpecificationResponseArgs struct {
	// Default value of variable.
	DefaultValue pulumi.Input `pulumi:"defaultValue"`
	// Variable type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (VariableSpecificationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableSpecificationResponse)(nil)).Elem()
}

func (i VariableSpecificationResponseArgs) ToVariableSpecificationResponseOutput() VariableSpecificationResponseOutput {
	return i.ToVariableSpecificationResponseOutputWithContext(context.Background())
}

func (i VariableSpecificationResponseArgs) ToVariableSpecificationResponseOutputWithContext(ctx context.Context) VariableSpecificationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableSpecificationResponseOutput)
}

// VariableSpecificationResponseMapInput is an input type that accepts VariableSpecificationResponseMap and VariableSpecificationResponseMapOutput values.
// You can construct a concrete instance of `VariableSpecificationResponseMapInput` via:
//
//          VariableSpecificationResponseMap{ "key": VariableSpecificationResponseArgs{...} }
type VariableSpecificationResponseMapInput interface {
	pulumi.Input

	ToVariableSpecificationResponseMapOutput() VariableSpecificationResponseMapOutput
	ToVariableSpecificationResponseMapOutputWithContext(context.Context) VariableSpecificationResponseMapOutput
}

type VariableSpecificationResponseMap map[string]VariableSpecificationResponseInput

func (VariableSpecificationResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VariableSpecificationResponse)(nil)).Elem()
}

func (i VariableSpecificationResponseMap) ToVariableSpecificationResponseMapOutput() VariableSpecificationResponseMapOutput {
	return i.ToVariableSpecificationResponseMapOutputWithContext(context.Background())
}

func (i VariableSpecificationResponseMap) ToVariableSpecificationResponseMapOutputWithContext(ctx context.Context) VariableSpecificationResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableSpecificationResponseMapOutput)
}

// Definition of a single variable for a Pipeline.
type VariableSpecificationResponseOutput struct{ *pulumi.OutputState }

func (VariableSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableSpecificationResponse)(nil)).Elem()
}

func (o VariableSpecificationResponseOutput) ToVariableSpecificationResponseOutput() VariableSpecificationResponseOutput {
	return o
}

func (o VariableSpecificationResponseOutput) ToVariableSpecificationResponseOutputWithContext(ctx context.Context) VariableSpecificationResponseOutput {
	return o
}

// Default value of variable.
func (o VariableSpecificationResponseOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v VariableSpecificationResponse) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// Variable type.
func (o VariableSpecificationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VariableSpecificationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type VariableSpecificationResponseMapOutput struct{ *pulumi.OutputState }

func (VariableSpecificationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VariableSpecificationResponse)(nil)).Elem()
}

func (o VariableSpecificationResponseMapOutput) ToVariableSpecificationResponseMapOutput() VariableSpecificationResponseMapOutput {
	return o
}

func (o VariableSpecificationResponseMapOutput) ToVariableSpecificationResponseMapOutputWithContext(ctx context.Context) VariableSpecificationResponseMapOutput {
	return o
}

func (o VariableSpecificationResponseMapOutput) MapIndex(k pulumi.StringInput) VariableSpecificationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VariableSpecificationResponse {
		return vs[0].(map[string]VariableSpecificationResponse)[vs[1].(string)]
	}).(VariableSpecificationResponseOutput)
}

// Vertica linked service.
type VerticaLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// VerticaLinkedServiceInput is an input type that accepts VerticaLinkedServiceArgs and VerticaLinkedServiceOutput values.
// You can construct a concrete instance of `VerticaLinkedServiceInput` via:
//
//          VerticaLinkedServiceArgs{...}
type VerticaLinkedServiceInput interface {
	pulumi.Input

	ToVerticaLinkedServiceOutput() VerticaLinkedServiceOutput
	ToVerticaLinkedServiceOutputWithContext(context.Context) VerticaLinkedServiceOutput
}

// Vertica linked service.
type VerticaLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd AzureKeyVaultSecretReferencePtrInput `pulumi:"pwd"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (VerticaLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaLinkedService)(nil)).Elem()
}

func (i VerticaLinkedServiceArgs) ToVerticaLinkedServiceOutput() VerticaLinkedServiceOutput {
	return i.ToVerticaLinkedServiceOutputWithContext(context.Background())
}

func (i VerticaLinkedServiceArgs) ToVerticaLinkedServiceOutputWithContext(ctx context.Context) VerticaLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticaLinkedServiceOutput)
}

// Vertica linked service.
type VerticaLinkedServiceOutput struct{ *pulumi.OutputState }

func (VerticaLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaLinkedService)(nil)).Elem()
}

func (o VerticaLinkedServiceOutput) ToVerticaLinkedServiceOutput() VerticaLinkedServiceOutput {
	return o
}

func (o VerticaLinkedServiceOutput) ToVerticaLinkedServiceOutputWithContext(ctx context.Context) VerticaLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o VerticaLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v VerticaLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o VerticaLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v VerticaLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o VerticaLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o VerticaLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VerticaLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o VerticaLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o VerticaLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v VerticaLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o VerticaLinkedServiceOutput) Pwd() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v VerticaLinkedService) *AzureKeyVaultSecretReference { return v.Pwd }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
func (o VerticaLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VerticaLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Vertica linked service.
type VerticaLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// VerticaLinkedServiceResponseInput is an input type that accepts VerticaLinkedServiceResponseArgs and VerticaLinkedServiceResponseOutput values.
// You can construct a concrete instance of `VerticaLinkedServiceResponseInput` via:
//
//          VerticaLinkedServiceResponseArgs{...}
type VerticaLinkedServiceResponseInput interface {
	pulumi.Input

	ToVerticaLinkedServiceResponseOutput() VerticaLinkedServiceResponseOutput
	ToVerticaLinkedServiceResponseOutputWithContext(context.Context) VerticaLinkedServiceResponseOutput
}

// Vertica linked service.
type VerticaLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd AzureKeyVaultSecretReferenceResponsePtrInput `pulumi:"pwd"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (VerticaLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaLinkedServiceResponse)(nil)).Elem()
}

func (i VerticaLinkedServiceResponseArgs) ToVerticaLinkedServiceResponseOutput() VerticaLinkedServiceResponseOutput {
	return i.ToVerticaLinkedServiceResponseOutputWithContext(context.Background())
}

func (i VerticaLinkedServiceResponseArgs) ToVerticaLinkedServiceResponseOutputWithContext(ctx context.Context) VerticaLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticaLinkedServiceResponseOutput)
}

// Vertica linked service.
type VerticaLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (VerticaLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaLinkedServiceResponse)(nil)).Elem()
}

func (o VerticaLinkedServiceResponseOutput) ToVerticaLinkedServiceResponseOutput() VerticaLinkedServiceResponseOutput {
	return o
}

func (o VerticaLinkedServiceResponseOutput) ToVerticaLinkedServiceResponseOutputWithContext(ctx context.Context) VerticaLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o VerticaLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o VerticaLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o VerticaLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o VerticaLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o VerticaLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o VerticaLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o VerticaLinkedServiceResponseOutput) Pwd() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Pwd }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
func (o VerticaLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Vertica dataset.
type VerticaTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Vertica. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// VerticaTableDatasetInput is an input type that accepts VerticaTableDatasetArgs and VerticaTableDatasetOutput values.
// You can construct a concrete instance of `VerticaTableDatasetInput` via:
//
//          VerticaTableDatasetArgs{...}
type VerticaTableDatasetInput interface {
	pulumi.Input

	ToVerticaTableDatasetOutput() VerticaTableDatasetOutput
	ToVerticaTableDatasetOutputWithContext(context.Context) VerticaTableDatasetOutput
}

// Vertica dataset.
type VerticaTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Vertica. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (VerticaTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaTableDataset)(nil)).Elem()
}

func (i VerticaTableDatasetArgs) ToVerticaTableDatasetOutput() VerticaTableDatasetOutput {
	return i.ToVerticaTableDatasetOutputWithContext(context.Background())
}

func (i VerticaTableDatasetArgs) ToVerticaTableDatasetOutputWithContext(ctx context.Context) VerticaTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticaTableDatasetOutput)
}

// Vertica dataset.
type VerticaTableDatasetOutput struct{ *pulumi.OutputState }

func (VerticaTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaTableDataset)(nil)).Elem()
}

func (o VerticaTableDatasetOutput) ToVerticaTableDatasetOutput() VerticaTableDatasetOutput {
	return o
}

func (o VerticaTableDatasetOutput) ToVerticaTableDatasetOutputWithContext(ctx context.Context) VerticaTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o VerticaTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v VerticaTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o VerticaTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VerticaTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o VerticaTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v VerticaTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o VerticaTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v VerticaTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o VerticaTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v VerticaTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o VerticaTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o VerticaTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Vertica. Type: string (or Expression with resultType string).
func (o VerticaTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o VerticaTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o VerticaTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VerticaTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Vertica dataset.
type VerticaTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Vertica. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// VerticaTableDatasetResponseInput is an input type that accepts VerticaTableDatasetResponseArgs and VerticaTableDatasetResponseOutput values.
// You can construct a concrete instance of `VerticaTableDatasetResponseInput` via:
//
//          VerticaTableDatasetResponseArgs{...}
type VerticaTableDatasetResponseInput interface {
	pulumi.Input

	ToVerticaTableDatasetResponseOutput() VerticaTableDatasetResponseOutput
	ToVerticaTableDatasetResponseOutputWithContext(context.Context) VerticaTableDatasetResponseOutput
}

// Vertica dataset.
type VerticaTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Vertica. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (VerticaTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaTableDatasetResponse)(nil)).Elem()
}

func (i VerticaTableDatasetResponseArgs) ToVerticaTableDatasetResponseOutput() VerticaTableDatasetResponseOutput {
	return i.ToVerticaTableDatasetResponseOutputWithContext(context.Background())
}

func (i VerticaTableDatasetResponseArgs) ToVerticaTableDatasetResponseOutputWithContext(ctx context.Context) VerticaTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticaTableDatasetResponseOutput)
}

// Vertica dataset.
type VerticaTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (VerticaTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaTableDatasetResponse)(nil)).Elem()
}

func (o VerticaTableDatasetResponseOutput) ToVerticaTableDatasetResponseOutput() VerticaTableDatasetResponseOutput {
	return o
}

func (o VerticaTableDatasetResponseOutput) ToVerticaTableDatasetResponseOutputWithContext(ctx context.Context) VerticaTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o VerticaTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o VerticaTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o VerticaTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o VerticaTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o VerticaTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o VerticaTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o VerticaTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Vertica. Type: string (or Expression with resultType string).
func (o VerticaTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o VerticaTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o VerticaTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint.
type WebAnonymousAuthentication struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType string `pulumi:"authenticationType"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// WebAnonymousAuthenticationInput is an input type that accepts WebAnonymousAuthenticationArgs and WebAnonymousAuthenticationOutput values.
// You can construct a concrete instance of `WebAnonymousAuthenticationInput` via:
//
//          WebAnonymousAuthenticationArgs{...}
type WebAnonymousAuthenticationInput interface {
	pulumi.Input

	ToWebAnonymousAuthenticationOutput() WebAnonymousAuthenticationOutput
	ToWebAnonymousAuthenticationOutputWithContext(context.Context) WebAnonymousAuthenticationOutput
}

// A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint.
type WebAnonymousAuthenticationArgs struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
}

func (WebAnonymousAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebAnonymousAuthentication)(nil)).Elem()
}

func (i WebAnonymousAuthenticationArgs) ToWebAnonymousAuthenticationOutput() WebAnonymousAuthenticationOutput {
	return i.ToWebAnonymousAuthenticationOutputWithContext(context.Background())
}

func (i WebAnonymousAuthenticationArgs) ToWebAnonymousAuthenticationOutputWithContext(ctx context.Context) WebAnonymousAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAnonymousAuthenticationOutput)
}

// A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint.
type WebAnonymousAuthenticationOutput struct{ *pulumi.OutputState }

func (WebAnonymousAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebAnonymousAuthentication)(nil)).Elem()
}

func (o WebAnonymousAuthenticationOutput) ToWebAnonymousAuthenticationOutput() WebAnonymousAuthenticationOutput {
	return o
}

func (o WebAnonymousAuthenticationOutput) ToWebAnonymousAuthenticationOutputWithContext(ctx context.Context) WebAnonymousAuthenticationOutput {
	return o
}

// Type of authentication used to connect to the web table source.
func (o WebAnonymousAuthenticationOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v WebAnonymousAuthentication) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
func (o WebAnonymousAuthenticationOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v WebAnonymousAuthentication) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint.
type WebAnonymousAuthenticationResponse struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType string `pulumi:"authenticationType"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// WebAnonymousAuthenticationResponseInput is an input type that accepts WebAnonymousAuthenticationResponseArgs and WebAnonymousAuthenticationResponseOutput values.
// You can construct a concrete instance of `WebAnonymousAuthenticationResponseInput` via:
//
//          WebAnonymousAuthenticationResponseArgs{...}
type WebAnonymousAuthenticationResponseInput interface {
	pulumi.Input

	ToWebAnonymousAuthenticationResponseOutput() WebAnonymousAuthenticationResponseOutput
	ToWebAnonymousAuthenticationResponseOutputWithContext(context.Context) WebAnonymousAuthenticationResponseOutput
}

// A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint.
type WebAnonymousAuthenticationResponseArgs struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
}

func (WebAnonymousAuthenticationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebAnonymousAuthenticationResponse)(nil)).Elem()
}

func (i WebAnonymousAuthenticationResponseArgs) ToWebAnonymousAuthenticationResponseOutput() WebAnonymousAuthenticationResponseOutput {
	return i.ToWebAnonymousAuthenticationResponseOutputWithContext(context.Background())
}

func (i WebAnonymousAuthenticationResponseArgs) ToWebAnonymousAuthenticationResponseOutputWithContext(ctx context.Context) WebAnonymousAuthenticationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAnonymousAuthenticationResponseOutput)
}

// A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint.
type WebAnonymousAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (WebAnonymousAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebAnonymousAuthenticationResponse)(nil)).Elem()
}

func (o WebAnonymousAuthenticationResponseOutput) ToWebAnonymousAuthenticationResponseOutput() WebAnonymousAuthenticationResponseOutput {
	return o
}

func (o WebAnonymousAuthenticationResponseOutput) ToWebAnonymousAuthenticationResponseOutputWithContext(ctx context.Context) WebAnonymousAuthenticationResponseOutput {
	return o
}

// Type of authentication used to connect to the web table source.
func (o WebAnonymousAuthenticationResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v WebAnonymousAuthenticationResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
func (o WebAnonymousAuthenticationResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v WebAnonymousAuthenticationResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
type WebBasicAuthentication struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType string `pulumi:"authenticationType"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// WebBasicAuthenticationInput is an input type that accepts WebBasicAuthenticationArgs and WebBasicAuthenticationOutput values.
// You can construct a concrete instance of `WebBasicAuthenticationInput` via:
//
//          WebBasicAuthenticationArgs{...}
type WebBasicAuthenticationInput interface {
	pulumi.Input

	ToWebBasicAuthenticationOutput() WebBasicAuthenticationOutput
	ToWebBasicAuthenticationOutputWithContext(context.Context) WebBasicAuthenticationOutput
}

// A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
type WebBasicAuthenticationArgs struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (WebBasicAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBasicAuthentication)(nil)).Elem()
}

func (i WebBasicAuthenticationArgs) ToWebBasicAuthenticationOutput() WebBasicAuthenticationOutput {
	return i.ToWebBasicAuthenticationOutputWithContext(context.Background())
}

func (i WebBasicAuthenticationArgs) ToWebBasicAuthenticationOutputWithContext(ctx context.Context) WebBasicAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBasicAuthenticationOutput)
}

// A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
type WebBasicAuthenticationOutput struct{ *pulumi.OutputState }

func (WebBasicAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBasicAuthentication)(nil)).Elem()
}

func (o WebBasicAuthenticationOutput) ToWebBasicAuthenticationOutput() WebBasicAuthenticationOutput {
	return o
}

func (o WebBasicAuthenticationOutput) ToWebBasicAuthenticationOutputWithContext(ctx context.Context) WebBasicAuthenticationOutput {
	return o
}

// Type of authentication used to connect to the web table source.
func (o WebBasicAuthenticationOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v WebBasicAuthentication) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The password for Basic authentication.
func (o WebBasicAuthenticationOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v WebBasicAuthentication) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
func (o WebBasicAuthenticationOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v WebBasicAuthentication) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// User name for Basic authentication. Type: string (or Expression with resultType string).
func (o WebBasicAuthenticationOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v WebBasicAuthentication) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
type WebBasicAuthenticationResponse struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType string `pulumi:"authenticationType"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// WebBasicAuthenticationResponseInput is an input type that accepts WebBasicAuthenticationResponseArgs and WebBasicAuthenticationResponseOutput values.
// You can construct a concrete instance of `WebBasicAuthenticationResponseInput` via:
//
//          WebBasicAuthenticationResponseArgs{...}
type WebBasicAuthenticationResponseInput interface {
	pulumi.Input

	ToWebBasicAuthenticationResponseOutput() WebBasicAuthenticationResponseOutput
	ToWebBasicAuthenticationResponseOutputWithContext(context.Context) WebBasicAuthenticationResponseOutput
}

// A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
type WebBasicAuthenticationResponseArgs struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (WebBasicAuthenticationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBasicAuthenticationResponse)(nil)).Elem()
}

func (i WebBasicAuthenticationResponseArgs) ToWebBasicAuthenticationResponseOutput() WebBasicAuthenticationResponseOutput {
	return i.ToWebBasicAuthenticationResponseOutputWithContext(context.Background())
}

func (i WebBasicAuthenticationResponseArgs) ToWebBasicAuthenticationResponseOutputWithContext(ctx context.Context) WebBasicAuthenticationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBasicAuthenticationResponseOutput)
}

// A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
type WebBasicAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (WebBasicAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBasicAuthenticationResponse)(nil)).Elem()
}

func (o WebBasicAuthenticationResponseOutput) ToWebBasicAuthenticationResponseOutput() WebBasicAuthenticationResponseOutput {
	return o
}

func (o WebBasicAuthenticationResponseOutput) ToWebBasicAuthenticationResponseOutputWithContext(ctx context.Context) WebBasicAuthenticationResponseOutput {
	return o
}

// Type of authentication used to connect to the web table source.
func (o WebBasicAuthenticationResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v WebBasicAuthenticationResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The password for Basic authentication.
func (o WebBasicAuthenticationResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v WebBasicAuthenticationResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
func (o WebBasicAuthenticationResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v WebBasicAuthenticationResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// User name for Basic authentication. Type: string (or Expression with resultType string).
func (o WebBasicAuthenticationResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v WebBasicAuthenticationResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.
type WebClientCertificateAuthentication struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType string `pulumi:"authenticationType"`
	// Password for the PFX file.
	Password interface{} `pulumi:"password"`
	// Base64-encoded contents of a PFX file.
	Pfx interface{} `pulumi:"pfx"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// WebClientCertificateAuthenticationInput is an input type that accepts WebClientCertificateAuthenticationArgs and WebClientCertificateAuthenticationOutput values.
// You can construct a concrete instance of `WebClientCertificateAuthenticationInput` via:
//
//          WebClientCertificateAuthenticationArgs{...}
type WebClientCertificateAuthenticationInput interface {
	pulumi.Input

	ToWebClientCertificateAuthenticationOutput() WebClientCertificateAuthenticationOutput
	ToWebClientCertificateAuthenticationOutputWithContext(context.Context) WebClientCertificateAuthenticationOutput
}

// A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.
type WebClientCertificateAuthenticationArgs struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// Password for the PFX file.
	Password pulumi.Input `pulumi:"password"`
	// Base64-encoded contents of a PFX file.
	Pfx pulumi.Input `pulumi:"pfx"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
}

func (WebClientCertificateAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebClientCertificateAuthentication)(nil)).Elem()
}

func (i WebClientCertificateAuthenticationArgs) ToWebClientCertificateAuthenticationOutput() WebClientCertificateAuthenticationOutput {
	return i.ToWebClientCertificateAuthenticationOutputWithContext(context.Background())
}

func (i WebClientCertificateAuthenticationArgs) ToWebClientCertificateAuthenticationOutputWithContext(ctx context.Context) WebClientCertificateAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebClientCertificateAuthenticationOutput)
}

// A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.
type WebClientCertificateAuthenticationOutput struct{ *pulumi.OutputState }

func (WebClientCertificateAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebClientCertificateAuthentication)(nil)).Elem()
}

func (o WebClientCertificateAuthenticationOutput) ToWebClientCertificateAuthenticationOutput() WebClientCertificateAuthenticationOutput {
	return o
}

func (o WebClientCertificateAuthenticationOutput) ToWebClientCertificateAuthenticationOutputWithContext(ctx context.Context) WebClientCertificateAuthenticationOutput {
	return o
}

// Type of authentication used to connect to the web table source.
func (o WebClientCertificateAuthenticationOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v WebClientCertificateAuthentication) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// Password for the PFX file.
func (o WebClientCertificateAuthenticationOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v WebClientCertificateAuthentication) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Base64-encoded contents of a PFX file.
func (o WebClientCertificateAuthenticationOutput) Pfx() pulumi.AnyOutput {
	return o.ApplyT(func(v WebClientCertificateAuthentication) interface{} { return v.Pfx }).(pulumi.AnyOutput)
}

// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
func (o WebClientCertificateAuthenticationOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v WebClientCertificateAuthentication) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.
type WebClientCertificateAuthenticationResponse struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType string `pulumi:"authenticationType"`
	// Password for the PFX file.
	Password interface{} `pulumi:"password"`
	// Base64-encoded contents of a PFX file.
	Pfx interface{} `pulumi:"pfx"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// WebClientCertificateAuthenticationResponseInput is an input type that accepts WebClientCertificateAuthenticationResponseArgs and WebClientCertificateAuthenticationResponseOutput values.
// You can construct a concrete instance of `WebClientCertificateAuthenticationResponseInput` via:
//
//          WebClientCertificateAuthenticationResponseArgs{...}
type WebClientCertificateAuthenticationResponseInput interface {
	pulumi.Input

	ToWebClientCertificateAuthenticationResponseOutput() WebClientCertificateAuthenticationResponseOutput
	ToWebClientCertificateAuthenticationResponseOutputWithContext(context.Context) WebClientCertificateAuthenticationResponseOutput
}

// A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.
type WebClientCertificateAuthenticationResponseArgs struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// Password for the PFX file.
	Password pulumi.Input `pulumi:"password"`
	// Base64-encoded contents of a PFX file.
	Pfx pulumi.Input `pulumi:"pfx"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
}

func (WebClientCertificateAuthenticationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebClientCertificateAuthenticationResponse)(nil)).Elem()
}

func (i WebClientCertificateAuthenticationResponseArgs) ToWebClientCertificateAuthenticationResponseOutput() WebClientCertificateAuthenticationResponseOutput {
	return i.ToWebClientCertificateAuthenticationResponseOutputWithContext(context.Background())
}

func (i WebClientCertificateAuthenticationResponseArgs) ToWebClientCertificateAuthenticationResponseOutputWithContext(ctx context.Context) WebClientCertificateAuthenticationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebClientCertificateAuthenticationResponseOutput)
}

// A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.
type WebClientCertificateAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (WebClientCertificateAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebClientCertificateAuthenticationResponse)(nil)).Elem()
}

func (o WebClientCertificateAuthenticationResponseOutput) ToWebClientCertificateAuthenticationResponseOutput() WebClientCertificateAuthenticationResponseOutput {
	return o
}

func (o WebClientCertificateAuthenticationResponseOutput) ToWebClientCertificateAuthenticationResponseOutputWithContext(ctx context.Context) WebClientCertificateAuthenticationResponseOutput {
	return o
}

// Type of authentication used to connect to the web table source.
func (o WebClientCertificateAuthenticationResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v WebClientCertificateAuthenticationResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// Password for the PFX file.
func (o WebClientCertificateAuthenticationResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v WebClientCertificateAuthenticationResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Base64-encoded contents of a PFX file.
func (o WebClientCertificateAuthenticationResponseOutput) Pfx() pulumi.AnyOutput {
	return o.ApplyT(func(v WebClientCertificateAuthenticationResponse) interface{} { return v.Pfx }).(pulumi.AnyOutput)
}

// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
func (o WebClientCertificateAuthenticationResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v WebClientCertificateAuthenticationResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// Web linked service.
type WebLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Web linked service properties.
	TypeProperties interface{} `pulumi:"typeProperties"`
}

// WebLinkedServiceInput is an input type that accepts WebLinkedServiceArgs and WebLinkedServiceOutput values.
// You can construct a concrete instance of `WebLinkedServiceInput` via:
//
//          WebLinkedServiceArgs{...}
type WebLinkedServiceInput interface {
	pulumi.Input

	ToWebLinkedServiceOutput() WebLinkedServiceOutput
	ToWebLinkedServiceOutputWithContext(context.Context) WebLinkedServiceOutput
}

// Web linked service.
type WebLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Web linked service properties.
	TypeProperties pulumi.Input `pulumi:"typeProperties"`
}

func (WebLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebLinkedService)(nil)).Elem()
}

func (i WebLinkedServiceArgs) ToWebLinkedServiceOutput() WebLinkedServiceOutput {
	return i.ToWebLinkedServiceOutputWithContext(context.Background())
}

func (i WebLinkedServiceArgs) ToWebLinkedServiceOutputWithContext(ctx context.Context) WebLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebLinkedServiceOutput)
}

// Web linked service.
type WebLinkedServiceOutput struct{ *pulumi.OutputState }

func (WebLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebLinkedService)(nil)).Elem()
}

func (o WebLinkedServiceOutput) ToWebLinkedServiceOutput() WebLinkedServiceOutput {
	return o
}

func (o WebLinkedServiceOutput) ToWebLinkedServiceOutputWithContext(ctx context.Context) WebLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o WebLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v WebLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o WebLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v WebLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o WebLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o WebLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v WebLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o WebLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Web linked service properties.
func (o WebLinkedServiceOutput) TypeProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v WebLinkedService) interface{} { return v.TypeProperties }).(pulumi.AnyOutput)
}

// Web linked service.
type WebLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Web linked service properties.
	TypeProperties interface{} `pulumi:"typeProperties"`
}

// WebLinkedServiceResponseInput is an input type that accepts WebLinkedServiceResponseArgs and WebLinkedServiceResponseOutput values.
// You can construct a concrete instance of `WebLinkedServiceResponseInput` via:
//
//          WebLinkedServiceResponseArgs{...}
type WebLinkedServiceResponseInput interface {
	pulumi.Input

	ToWebLinkedServiceResponseOutput() WebLinkedServiceResponseOutput
	ToWebLinkedServiceResponseOutputWithContext(context.Context) WebLinkedServiceResponseOutput
}

// Web linked service.
type WebLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Web linked service properties.
	TypeProperties pulumi.Input `pulumi:"typeProperties"`
}

func (WebLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebLinkedServiceResponse)(nil)).Elem()
}

func (i WebLinkedServiceResponseArgs) ToWebLinkedServiceResponseOutput() WebLinkedServiceResponseOutput {
	return i.ToWebLinkedServiceResponseOutputWithContext(context.Background())
}

func (i WebLinkedServiceResponseArgs) ToWebLinkedServiceResponseOutputWithContext(ctx context.Context) WebLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebLinkedServiceResponseOutput)
}

// Web linked service.
type WebLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (WebLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebLinkedServiceResponse)(nil)).Elem()
}

func (o WebLinkedServiceResponseOutput) ToWebLinkedServiceResponseOutput() WebLinkedServiceResponseOutput {
	return o
}

func (o WebLinkedServiceResponseOutput) ToWebLinkedServiceResponseOutputWithContext(ctx context.Context) WebLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o WebLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v WebLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o WebLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v WebLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o WebLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o WebLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v WebLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o WebLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Web linked service properties.
func (o WebLinkedServiceResponseOutput) TypeProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v WebLinkedServiceResponse) interface{} { return v.TypeProperties }).(pulumi.AnyOutput)
}

// The dataset points to a HTML table in the web page.
type WebTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0.
	Index interface{} `pulumi:"index"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// WebTableDatasetInput is an input type that accepts WebTableDatasetArgs and WebTableDatasetOutput values.
// You can construct a concrete instance of `WebTableDatasetInput` via:
//
//          WebTableDatasetArgs{...}
type WebTableDatasetInput interface {
	pulumi.Input

	ToWebTableDatasetOutput() WebTableDatasetOutput
	ToWebTableDatasetOutputWithContext(context.Context) WebTableDatasetOutput
}

// The dataset points to a HTML table in the web page.
type WebTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0.
	Index pulumi.Input `pulumi:"index"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string).
	Path pulumi.Input `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (WebTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTableDataset)(nil)).Elem()
}

func (i WebTableDatasetArgs) ToWebTableDatasetOutput() WebTableDatasetOutput {
	return i.ToWebTableDatasetOutputWithContext(context.Background())
}

func (i WebTableDatasetArgs) ToWebTableDatasetOutputWithContext(ctx context.Context) WebTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTableDatasetOutput)
}

// The dataset points to a HTML table in the web page.
type WebTableDatasetOutput struct{ *pulumi.OutputState }

func (WebTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTableDataset)(nil)).Elem()
}

func (o WebTableDatasetOutput) ToWebTableDatasetOutput() WebTableDatasetOutput {
	return o
}

func (o WebTableDatasetOutput) ToWebTableDatasetOutputWithContext(ctx context.Context) WebTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o WebTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v WebTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o WebTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o WebTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v WebTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0.
func (o WebTableDatasetOutput) Index() pulumi.AnyOutput {
	return o.ApplyT(func(v WebTableDataset) interface{} { return v.Index }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o WebTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v WebTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o WebTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v WebTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string).
func (o WebTableDatasetOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v WebTableDataset) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o WebTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v WebTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o WebTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v WebTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o WebTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The dataset points to a HTML table in the web page.
type WebTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0.
	Index interface{} `pulumi:"index"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// WebTableDatasetResponseInput is an input type that accepts WebTableDatasetResponseArgs and WebTableDatasetResponseOutput values.
// You can construct a concrete instance of `WebTableDatasetResponseInput` via:
//
//          WebTableDatasetResponseArgs{...}
type WebTableDatasetResponseInput interface {
	pulumi.Input

	ToWebTableDatasetResponseOutput() WebTableDatasetResponseOutput
	ToWebTableDatasetResponseOutputWithContext(context.Context) WebTableDatasetResponseOutput
}

// The dataset points to a HTML table in the web page.
type WebTableDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0.
	Index pulumi.Input `pulumi:"index"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string).
	Path pulumi.Input `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (WebTableDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTableDatasetResponse)(nil)).Elem()
}

func (i WebTableDatasetResponseArgs) ToWebTableDatasetResponseOutput() WebTableDatasetResponseOutput {
	return i.ToWebTableDatasetResponseOutputWithContext(context.Background())
}

func (i WebTableDatasetResponseArgs) ToWebTableDatasetResponseOutputWithContext(ctx context.Context) WebTableDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTableDatasetResponseOutput)
}

// The dataset points to a HTML table in the web page.
type WebTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (WebTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTableDatasetResponse)(nil)).Elem()
}

func (o WebTableDatasetResponseOutput) ToWebTableDatasetResponseOutput() WebTableDatasetResponseOutput {
	return o
}

func (o WebTableDatasetResponseOutput) ToWebTableDatasetResponseOutputWithContext(ctx context.Context) WebTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o WebTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o WebTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o WebTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0.
func (o WebTableDatasetResponseOutput) Index() pulumi.AnyOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) interface{} { return v.Index }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o WebTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o WebTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string).
func (o WebTableDatasetResponseOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o WebTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o WebTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o WebTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Xero Service linked service.
type XeroLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to Xero. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// The consumer key associated with the Xero application.
	ConsumerKey interface{} `pulumi:"consumerKey"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Xero server. (i.e. api.xero.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
	// ).
	PrivateKey interface{} `pulumi:"privateKey"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// XeroLinkedServiceInput is an input type that accepts XeroLinkedServiceArgs and XeroLinkedServiceOutput values.
// You can construct a concrete instance of `XeroLinkedServiceInput` via:
//
//          XeroLinkedServiceArgs{...}
type XeroLinkedServiceInput interface {
	pulumi.Input

	ToXeroLinkedServiceOutput() XeroLinkedServiceOutput
	ToXeroLinkedServiceOutputWithContext(context.Context) XeroLinkedServiceOutput
}

// Xero Service linked service.
type XeroLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Properties used to connect to Xero. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties pulumi.Input `pulumi:"connectionProperties"`
	// The consumer key associated with the Xero application.
	ConsumerKey pulumi.Input `pulumi:"consumerKey"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the Xero server. (i.e. api.xero.com)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
	// ).
	PrivateKey pulumi.Input `pulumi:"privateKey"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (XeroLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroLinkedService)(nil)).Elem()
}

func (i XeroLinkedServiceArgs) ToXeroLinkedServiceOutput() XeroLinkedServiceOutput {
	return i.ToXeroLinkedServiceOutputWithContext(context.Background())
}

func (i XeroLinkedServiceArgs) ToXeroLinkedServiceOutputWithContext(ctx context.Context) XeroLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XeroLinkedServiceOutput)
}

// Xero Service linked service.
type XeroLinkedServiceOutput struct{ *pulumi.OutputState }

func (XeroLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroLinkedService)(nil)).Elem()
}

func (o XeroLinkedServiceOutput) ToXeroLinkedServiceOutput() XeroLinkedServiceOutput {
	return o
}

func (o XeroLinkedServiceOutput) ToXeroLinkedServiceOutputWithContext(ctx context.Context) XeroLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o XeroLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v XeroLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o XeroLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v XeroLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Properties used to connect to Xero. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o XeroLinkedServiceOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedService) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// The consumer key associated with the Xero application.
func (o XeroLinkedServiceOutput) ConsumerKey() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedService) interface{} { return v.ConsumerKey }).(pulumi.AnyOutput)
}

// Linked service description.
func (o XeroLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XeroLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o XeroLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the Xero server. (i.e. api.xero.com)
func (o XeroLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o XeroLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v XeroLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
// ).
func (o XeroLinkedServiceOutput) PrivateKey() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedService) interface{} { return v.PrivateKey }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o XeroLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XeroLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o XeroLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o XeroLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o XeroLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Xero Service linked service.
type XeroLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to Xero. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// The consumer key associated with the Xero application.
	ConsumerKey interface{} `pulumi:"consumerKey"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Xero server. (i.e. api.xero.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
	// ).
	PrivateKey interface{} `pulumi:"privateKey"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// XeroLinkedServiceResponseInput is an input type that accepts XeroLinkedServiceResponseArgs and XeroLinkedServiceResponseOutput values.
// You can construct a concrete instance of `XeroLinkedServiceResponseInput` via:
//
//          XeroLinkedServiceResponseArgs{...}
type XeroLinkedServiceResponseInput interface {
	pulumi.Input

	ToXeroLinkedServiceResponseOutput() XeroLinkedServiceResponseOutput
	ToXeroLinkedServiceResponseOutputWithContext(context.Context) XeroLinkedServiceResponseOutput
}

// Xero Service linked service.
type XeroLinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Properties used to connect to Xero. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties pulumi.Input `pulumi:"connectionProperties"`
	// The consumer key associated with the Xero application.
	ConsumerKey pulumi.Input `pulumi:"consumerKey"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the Xero server. (i.e. api.xero.com)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
	// ).
	PrivateKey pulumi.Input `pulumi:"privateKey"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (XeroLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroLinkedServiceResponse)(nil)).Elem()
}

func (i XeroLinkedServiceResponseArgs) ToXeroLinkedServiceResponseOutput() XeroLinkedServiceResponseOutput {
	return i.ToXeroLinkedServiceResponseOutputWithContext(context.Background())
}

func (i XeroLinkedServiceResponseArgs) ToXeroLinkedServiceResponseOutputWithContext(ctx context.Context) XeroLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XeroLinkedServiceResponseOutput)
}

// Xero Service linked service.
type XeroLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (XeroLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroLinkedServiceResponse)(nil)).Elem()
}

func (o XeroLinkedServiceResponseOutput) ToXeroLinkedServiceResponseOutput() XeroLinkedServiceResponseOutput {
	return o
}

func (o XeroLinkedServiceResponseOutput) ToXeroLinkedServiceResponseOutputWithContext(ctx context.Context) XeroLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o XeroLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o XeroLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Properties used to connect to Xero. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o XeroLinkedServiceResponseOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// The consumer key associated with the Xero application.
func (o XeroLinkedServiceResponseOutput) ConsumerKey() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) interface{} { return v.ConsumerKey }).(pulumi.AnyOutput)
}

// Linked service description.
func (o XeroLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o XeroLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the Xero server. (i.e. api.xero.com)
func (o XeroLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o XeroLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
// ).
func (o XeroLinkedServiceResponseOutput) PrivateKey() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) interface{} { return v.PrivateKey }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o XeroLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o XeroLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o XeroLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o XeroLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Xero Service dataset.
type XeroObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// XeroObjectDatasetInput is an input type that accepts XeroObjectDatasetArgs and XeroObjectDatasetOutput values.
// You can construct a concrete instance of `XeroObjectDatasetInput` via:
//
//          XeroObjectDatasetArgs{...}
type XeroObjectDatasetInput interface {
	pulumi.Input

	ToXeroObjectDatasetOutput() XeroObjectDatasetOutput
	ToXeroObjectDatasetOutputWithContext(context.Context) XeroObjectDatasetOutput
}

// Xero Service dataset.
type XeroObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (XeroObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroObjectDataset)(nil)).Elem()
}

func (i XeroObjectDatasetArgs) ToXeroObjectDatasetOutput() XeroObjectDatasetOutput {
	return i.ToXeroObjectDatasetOutputWithContext(context.Background())
}

func (i XeroObjectDatasetArgs) ToXeroObjectDatasetOutputWithContext(ctx context.Context) XeroObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XeroObjectDatasetOutput)
}

// Xero Service dataset.
type XeroObjectDatasetOutput struct{ *pulumi.OutputState }

func (XeroObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroObjectDataset)(nil)).Elem()
}

func (o XeroObjectDatasetOutput) ToXeroObjectDatasetOutput() XeroObjectDatasetOutput {
	return o
}

func (o XeroObjectDatasetOutput) ToXeroObjectDatasetOutputWithContext(ctx context.Context) XeroObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o XeroObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v XeroObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o XeroObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XeroObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o XeroObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v XeroObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o XeroObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v XeroObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o XeroObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v XeroObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o XeroObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o XeroObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o XeroObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o XeroObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XeroObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Xero Service dataset.
type XeroObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// XeroObjectDatasetResponseInput is an input type that accepts XeroObjectDatasetResponseArgs and XeroObjectDatasetResponseOutput values.
// You can construct a concrete instance of `XeroObjectDatasetResponseInput` via:
//
//          XeroObjectDatasetResponseArgs{...}
type XeroObjectDatasetResponseInput interface {
	pulumi.Input

	ToXeroObjectDatasetResponseOutput() XeroObjectDatasetResponseOutput
	ToXeroObjectDatasetResponseOutputWithContext(context.Context) XeroObjectDatasetResponseOutput
}

// Xero Service dataset.
type XeroObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (XeroObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroObjectDatasetResponse)(nil)).Elem()
}

func (i XeroObjectDatasetResponseArgs) ToXeroObjectDatasetResponseOutput() XeroObjectDatasetResponseOutput {
	return i.ToXeroObjectDatasetResponseOutputWithContext(context.Background())
}

func (i XeroObjectDatasetResponseArgs) ToXeroObjectDatasetResponseOutputWithContext(ctx context.Context) XeroObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XeroObjectDatasetResponseOutput)
}

// Xero Service dataset.
type XeroObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (XeroObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroObjectDatasetResponse)(nil)).Elem()
}

func (o XeroObjectDatasetResponseOutput) ToXeroObjectDatasetResponseOutput() XeroObjectDatasetResponseOutput {
	return o
}

func (o XeroObjectDatasetResponseOutput) ToXeroObjectDatasetResponseOutputWithContext(ctx context.Context) XeroObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o XeroObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o XeroObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o XeroObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o XeroObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o XeroObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o XeroObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o XeroObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o XeroObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o XeroObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Xml dataset.
type XmlDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// XmlDatasetInput is an input type that accepts XmlDatasetArgs and XmlDatasetOutput values.
// You can construct a concrete instance of `XmlDatasetInput` via:
//
//          XmlDatasetArgs{...}
type XmlDatasetInput interface {
	pulumi.Input

	ToXmlDatasetOutput() XmlDatasetOutput
	ToXmlDatasetOutputWithContext(context.Context) XmlDatasetOutput
}

// Xml dataset.
type XmlDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName pulumi.Input `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location pulumi.Input `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue pulumi.Input `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (XmlDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XmlDataset)(nil)).Elem()
}

func (i XmlDatasetArgs) ToXmlDatasetOutput() XmlDatasetOutput {
	return i.ToXmlDatasetOutputWithContext(context.Background())
}

func (i XmlDatasetArgs) ToXmlDatasetOutputWithContext(ctx context.Context) XmlDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XmlDatasetOutput)
}

// Xml dataset.
type XmlDatasetOutput struct{ *pulumi.OutputState }

func (XmlDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XmlDataset)(nil)).Elem()
}

func (o XmlDatasetOutput) ToXmlDatasetOutput() XmlDatasetOutput {
	return o
}

func (o XmlDatasetOutput) ToXmlDatasetOutputWithContext(ctx context.Context) XmlDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o XmlDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v XmlDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the json dataset.
func (o XmlDatasetOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDataset) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o XmlDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XmlDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
func (o XmlDatasetOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDataset) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o XmlDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v XmlDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o XmlDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v XmlDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The location of the json data storage.
func (o XmlDatasetOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDataset) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// The null value string. Type: string (or Expression with resultType string).
func (o XmlDatasetOutput) NullValue() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDataset) interface{} { return v.NullValue }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o XmlDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v XmlDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o XmlDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o XmlDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o XmlDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XmlDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Xml dataset.
type XmlDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// XmlDatasetResponseInput is an input type that accepts XmlDatasetResponseArgs and XmlDatasetResponseOutput values.
// You can construct a concrete instance of `XmlDatasetResponseInput` via:
//
//          XmlDatasetResponseArgs{...}
type XmlDatasetResponseInput interface {
	pulumi.Input

	ToXmlDatasetResponseOutput() XmlDatasetResponseOutput
	ToXmlDatasetResponseOutputWithContext(context.Context) XmlDatasetResponseOutput
}

// Xml dataset.
type XmlDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName pulumi.Input `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location pulumi.Input `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue pulumi.Input `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (XmlDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XmlDatasetResponse)(nil)).Elem()
}

func (i XmlDatasetResponseArgs) ToXmlDatasetResponseOutput() XmlDatasetResponseOutput {
	return i.ToXmlDatasetResponseOutputWithContext(context.Background())
}

func (i XmlDatasetResponseArgs) ToXmlDatasetResponseOutputWithContext(ctx context.Context) XmlDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XmlDatasetResponseOutput)
}

// Xml dataset.
type XmlDatasetResponseOutput struct{ *pulumi.OutputState }

func (XmlDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XmlDatasetResponse)(nil)).Elem()
}

func (o XmlDatasetResponseOutput) ToXmlDatasetResponseOutput() XmlDatasetResponseOutput {
	return o
}

func (o XmlDatasetResponseOutput) ToXmlDatasetResponseOutputWithContext(ctx context.Context) XmlDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o XmlDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v XmlDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the json dataset.
func (o XmlDatasetResponseOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDatasetResponse) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o XmlDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XmlDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
func (o XmlDatasetResponseOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDatasetResponse) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o XmlDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v XmlDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o XmlDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v XmlDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The location of the json data storage.
func (o XmlDatasetResponseOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDatasetResponse) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// The null value string. Type: string (or Expression with resultType string).
func (o XmlDatasetResponseOutput) NullValue() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDatasetResponse) interface{} { return v.NullValue }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o XmlDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v XmlDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o XmlDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o XmlDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o XmlDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XmlDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Zoho server linked service.
type ZohoLinkedService struct {
	// The access token for Zoho authentication.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to Zoho. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// ZohoLinkedServiceInput is an input type that accepts ZohoLinkedServiceArgs and ZohoLinkedServiceOutput values.
// You can construct a concrete instance of `ZohoLinkedServiceInput` via:
//
//          ZohoLinkedServiceArgs{...}
type ZohoLinkedServiceInput interface {
	pulumi.Input

	ToZohoLinkedServiceOutput() ZohoLinkedServiceOutput
	ToZohoLinkedServiceOutputWithContext(context.Context) ZohoLinkedServiceOutput
}

// Zoho server linked service.
type ZohoLinkedServiceArgs struct {
	// The access token for Zoho authentication.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Properties used to connect to Zoho. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties pulumi.Input `pulumi:"connectionProperties"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (ZohoLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoLinkedService)(nil)).Elem()
}

func (i ZohoLinkedServiceArgs) ToZohoLinkedServiceOutput() ZohoLinkedServiceOutput {
	return i.ToZohoLinkedServiceOutputWithContext(context.Background())
}

func (i ZohoLinkedServiceArgs) ToZohoLinkedServiceOutputWithContext(ctx context.Context) ZohoLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZohoLinkedServiceOutput)
}

// Zoho server linked service.
type ZohoLinkedServiceOutput struct{ *pulumi.OutputState }

func (ZohoLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoLinkedService)(nil)).Elem()
}

func (o ZohoLinkedServiceOutput) ToZohoLinkedServiceOutput() ZohoLinkedServiceOutput {
	return o
}

func (o ZohoLinkedServiceOutput) ToZohoLinkedServiceOutputWithContext(ctx context.Context) ZohoLinkedServiceOutput {
	return o
}

// The access token for Zoho authentication.
func (o ZohoLinkedServiceOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedService) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o ZohoLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ZohoLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o ZohoLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v ZohoLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Properties used to connect to Zoho. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o ZohoLinkedServiceOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedService) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// Linked service description.
func (o ZohoLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZohoLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ZohoLinkedServiceOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedService) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)
func (o ZohoLinkedServiceOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedService) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ZohoLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ZohoLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o ZohoLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ZohoLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ZohoLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ZohoLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ZohoLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Zoho server linked service.
type ZohoLinkedServiceResponse struct {
	// The access token for Zoho authentication.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to Zoho. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// ZohoLinkedServiceResponseInput is an input type that accepts ZohoLinkedServiceResponseArgs and ZohoLinkedServiceResponseOutput values.
// You can construct a concrete instance of `ZohoLinkedServiceResponseInput` via:
//
//          ZohoLinkedServiceResponseArgs{...}
type ZohoLinkedServiceResponseInput interface {
	pulumi.Input

	ToZohoLinkedServiceResponseOutput() ZohoLinkedServiceResponseOutput
	ToZohoLinkedServiceResponseOutputWithContext(context.Context) ZohoLinkedServiceResponseOutput
}

// Zoho server linked service.
type ZohoLinkedServiceResponseArgs struct {
	// The access token for Zoho authentication.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Properties used to connect to Zoho. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties pulumi.Input `pulumi:"connectionProperties"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.Input `pulumi:"encryptedCredential"`
	// The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (ZohoLinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoLinkedServiceResponse)(nil)).Elem()
}

func (i ZohoLinkedServiceResponseArgs) ToZohoLinkedServiceResponseOutput() ZohoLinkedServiceResponseOutput {
	return i.ToZohoLinkedServiceResponseOutputWithContext(context.Background())
}

func (i ZohoLinkedServiceResponseArgs) ToZohoLinkedServiceResponseOutputWithContext(ctx context.Context) ZohoLinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZohoLinkedServiceResponseOutput)
}

// Zoho server linked service.
type ZohoLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ZohoLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoLinkedServiceResponse)(nil)).Elem()
}

func (o ZohoLinkedServiceResponseOutput) ToZohoLinkedServiceResponseOutput() ZohoLinkedServiceResponseOutput {
	return o
}

func (o ZohoLinkedServiceResponseOutput) ToZohoLinkedServiceResponseOutputWithContext(ctx context.Context) ZohoLinkedServiceResponseOutput {
	return o
}

// The access token for Zoho authentication.
func (o ZohoLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o ZohoLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o ZohoLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Properties used to connect to Zoho. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o ZohoLinkedServiceResponseOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// Linked service description.
func (o ZohoLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ZohoLinkedServiceResponseOutput) EncryptedCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) interface{} { return v.EncryptedCredential }).(pulumi.AnyOutput)
}

// The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)
func (o ZohoLinkedServiceResponseOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ZohoLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o ZohoLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ZohoLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ZohoLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ZohoLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Zoho server dataset.
type ZohoObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ZohoObjectDatasetInput is an input type that accepts ZohoObjectDatasetArgs and ZohoObjectDatasetOutput values.
// You can construct a concrete instance of `ZohoObjectDatasetInput` via:
//
//          ZohoObjectDatasetArgs{...}
type ZohoObjectDatasetInput interface {
	pulumi.Input

	ToZohoObjectDatasetOutput() ZohoObjectDatasetOutput
	ToZohoObjectDatasetOutputWithContext(context.Context) ZohoObjectDatasetOutput
}

// Zoho server dataset.
type ZohoObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ZohoObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoObjectDataset)(nil)).Elem()
}

func (i ZohoObjectDatasetArgs) ToZohoObjectDatasetOutput() ZohoObjectDatasetOutput {
	return i.ToZohoObjectDatasetOutputWithContext(context.Background())
}

func (i ZohoObjectDatasetArgs) ToZohoObjectDatasetOutputWithContext(ctx context.Context) ZohoObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZohoObjectDatasetOutput)
}

// Zoho server dataset.
type ZohoObjectDatasetOutput struct{ *pulumi.OutputState }

func (ZohoObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoObjectDataset)(nil)).Elem()
}

func (o ZohoObjectDatasetOutput) ToZohoObjectDatasetOutput() ZohoObjectDatasetOutput {
	return o
}

func (o ZohoObjectDatasetOutput) ToZohoObjectDatasetOutputWithContext(ctx context.Context) ZohoObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ZohoObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ZohoObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ZohoObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZohoObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ZohoObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v ZohoObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o ZohoObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ZohoObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o ZohoObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ZohoObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ZohoObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ZohoObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ZohoObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o ZohoObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ZohoObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Zoho server dataset.
type ZohoObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ZohoObjectDatasetResponseInput is an input type that accepts ZohoObjectDatasetResponseArgs and ZohoObjectDatasetResponseOutput values.
// You can construct a concrete instance of `ZohoObjectDatasetResponseInput` via:
//
//          ZohoObjectDatasetResponseArgs{...}
type ZohoObjectDatasetResponseInput interface {
	pulumi.Input

	ToZohoObjectDatasetResponseOutput() ZohoObjectDatasetResponseOutput
	ToZohoObjectDatasetResponseOutputWithContext(context.Context) ZohoObjectDatasetResponseOutput
}

// Zoho server dataset.
type ZohoObjectDatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ZohoObjectDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoObjectDatasetResponse)(nil)).Elem()
}

func (i ZohoObjectDatasetResponseArgs) ToZohoObjectDatasetResponseOutput() ZohoObjectDatasetResponseOutput {
	return i.ToZohoObjectDatasetResponseOutputWithContext(context.Background())
}

func (i ZohoObjectDatasetResponseArgs) ToZohoObjectDatasetResponseOutputWithContext(ctx context.Context) ZohoObjectDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZohoObjectDatasetResponseOutput)
}

// Zoho server dataset.
type ZohoObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (ZohoObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoObjectDatasetResponse)(nil)).Elem()
}

func (o ZohoObjectDatasetResponseOutput) ToZohoObjectDatasetResponseOutput() ZohoObjectDatasetResponseOutput {
	return o
}

func (o ZohoObjectDatasetResponseOutput) ToZohoObjectDatasetResponseOutputWithContext(ctx context.Context) ZohoObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ZohoObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ZohoObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ZohoObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o ZohoObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ZohoObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ZohoObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ZohoObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ZohoObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
func (o ZohoObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ActivityDependencyOutput{})
	pulumi.RegisterOutputType(ActivityDependencyArrayOutput{})
	pulumi.RegisterOutputType(ActivityDependencyResponseOutput{})
	pulumi.RegisterOutputType(ActivityDependencyResponseArrayOutput{})
	pulumi.RegisterOutputType(ActivityPolicyOutput{})
	pulumi.RegisterOutputType(ActivityPolicyPtrOutput{})
	pulumi.RegisterOutputType(ActivityPolicyResponseOutput{})
	pulumi.RegisterOutputType(ActivityPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(AmazonMWSLinkedServiceOutput{})
	pulumi.RegisterOutputType(AmazonMWSLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AmazonMWSObjectDatasetOutput{})
	pulumi.RegisterOutputType(AmazonMWSObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(AmazonRedshiftLinkedServiceOutput{})
	pulumi.RegisterOutputType(AmazonRedshiftLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AmazonRedshiftTableDatasetOutput{})
	pulumi.RegisterOutputType(AmazonRedshiftTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AmazonS3DatasetOutput{})
	pulumi.RegisterOutputType(AmazonS3DatasetResponseOutput{})
	pulumi.RegisterOutputType(AmazonS3LinkedServiceOutput{})
	pulumi.RegisterOutputType(AmazonS3LinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AmazonS3LocationOutput{})
	pulumi.RegisterOutputType(AmazonS3LocationResponseOutput{})
	pulumi.RegisterOutputType(AvroDatasetOutput{})
	pulumi.RegisterOutputType(AvroDatasetResponseOutput{})
	pulumi.RegisterOutputType(AvroFormatOutput{})
	pulumi.RegisterOutputType(AvroFormatResponseOutput{})
	pulumi.RegisterOutputType(AzPowerShellSetupOutput{})
	pulumi.RegisterOutputType(AzPowerShellSetupResponseOutput{})
	pulumi.RegisterOutputType(AzureBatchLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureBatchLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobDatasetOutput{})
	pulumi.RegisterOutputType(AzureBlobDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobFSDatasetOutput{})
	pulumi.RegisterOutputType(AzureBlobFSDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobFSLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureBlobFSLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobFSLocationOutput{})
	pulumi.RegisterOutputType(AzureBlobFSLocationResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobStorageLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureBlobStorageLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobStorageLocationOutput{})
	pulumi.RegisterOutputType(AzureBlobStorageLocationResponseOutput{})
	pulumi.RegisterOutputType(AzureDataExplorerLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureDataExplorerLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureDataExplorerTableDatasetOutput{})
	pulumi.RegisterOutputType(AzureDataExplorerTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeAnalyticsLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureDataLakeAnalyticsLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreDatasetOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreLocationOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreLocationResponseOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeDatasetOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureDatabricksLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureDatabricksLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureFileStorageLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureFileStorageLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureFileStorageLocationOutput{})
	pulumi.RegisterOutputType(AzureFileStorageLocationResponseOutput{})
	pulumi.RegisterOutputType(AzureFunctionLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureFunctionLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultSecretReferenceOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultSecretReferencePtrOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultSecretReferenceResponseOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultSecretReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureMLLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureMLLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureMLServiceLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureMLServiceLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureMariaDBLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureMariaDBLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureMariaDBTableDatasetOutput{})
	pulumi.RegisterOutputType(AzureMariaDBTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureMySqlLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureMySqlLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureMySqlTableDatasetOutput{})
	pulumi.RegisterOutputType(AzureMySqlTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlTableDatasetOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureSearchIndexDatasetOutput{})
	pulumi.RegisterOutputType(AzureSearchIndexDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureSearchLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureSearchLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlDWLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureSqlDWLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlDWTableDatasetOutput{})
	pulumi.RegisterOutputType(AzureSqlDWTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlDatabaseLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureSqlDatabaseLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlMILinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureSqlMILinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlMITableDatasetOutput{})
	pulumi.RegisterOutputType(AzureSqlMITableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlTableDatasetOutput{})
	pulumi.RegisterOutputType(AzureSqlTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureStorageLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureStorageLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureTableDatasetOutput{})
	pulumi.RegisterOutputType(AzureTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureTableStorageLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureTableStorageLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(BinaryDatasetOutput{})
	pulumi.RegisterOutputType(BinaryDatasetResponseOutput{})
	pulumi.RegisterOutputType(CassandraLinkedServiceOutput{})
	pulumi.RegisterOutputType(CassandraLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(CassandraTableDatasetOutput{})
	pulumi.RegisterOutputType(CassandraTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(ChainingTriggerOutput{})
	pulumi.RegisterOutputType(ChainingTriggerResponseOutput{})
	pulumi.RegisterOutputType(CmdkeySetupOutput{})
	pulumi.RegisterOutputType(CmdkeySetupResponseOutput{})
	pulumi.RegisterOutputType(CommonDataServiceForAppsEntityDatasetOutput{})
	pulumi.RegisterOutputType(CommonDataServiceForAppsEntityDatasetResponseOutput{})
	pulumi.RegisterOutputType(CommonDataServiceForAppsLinkedServiceOutput{})
	pulumi.RegisterOutputType(CommonDataServiceForAppsLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ComponentSetupOutput{})
	pulumi.RegisterOutputType(ComponentSetupResponseOutput{})
	pulumi.RegisterOutputType(ConcurLinkedServiceOutput{})
	pulumi.RegisterOutputType(ConcurLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ConcurObjectDatasetOutput{})
	pulumi.RegisterOutputType(ConcurObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(ConnectionStatePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectionStatePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ControlActivityOutput{})
	pulumi.RegisterOutputType(ControlActivityResponseOutput{})
	pulumi.RegisterOutputType(CosmosDbLinkedServiceOutput{})
	pulumi.RegisterOutputType(CosmosDbLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(CosmosDbMongoDbApiCollectionDatasetOutput{})
	pulumi.RegisterOutputType(CosmosDbMongoDbApiCollectionDatasetResponseOutput{})
	pulumi.RegisterOutputType(CosmosDbMongoDbApiLinkedServiceOutput{})
	pulumi.RegisterOutputType(CosmosDbMongoDbApiLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(CosmosDbSqlApiCollectionDatasetOutput{})
	pulumi.RegisterOutputType(CosmosDbSqlApiCollectionDatasetResponseOutput{})
	pulumi.RegisterOutputType(CouchbaseLinkedServiceOutput{})
	pulumi.RegisterOutputType(CouchbaseLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(CouchbaseTableDatasetOutput{})
	pulumi.RegisterOutputType(CouchbaseTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(CustomDataSourceLinkedServiceOutput{})
	pulumi.RegisterOutputType(CustomDataSourceLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(CustomDatasetOutput{})
	pulumi.RegisterOutputType(CustomDatasetResponseOutput{})
	pulumi.RegisterOutputType(DataFlowFolderOutput{})
	pulumi.RegisterOutputType(DataFlowFolderPtrOutput{})
	pulumi.RegisterOutputType(DataFlowResponseFolderOutput{})
	pulumi.RegisterOutputType(DataFlowResponseFolderPtrOutput{})
	pulumi.RegisterOutputType(DataFlowSinkOutput{})
	pulumi.RegisterOutputType(DataFlowSinkArrayOutput{})
	pulumi.RegisterOutputType(DataFlowSinkResponseOutput{})
	pulumi.RegisterOutputType(DataFlowSinkResponseArrayOutput{})
	pulumi.RegisterOutputType(DataFlowSourceOutput{})
	pulumi.RegisterOutputType(DataFlowSourceArrayOutput{})
	pulumi.RegisterOutputType(DataFlowSourceResponseOutput{})
	pulumi.RegisterOutputType(DataFlowSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(DatasetBZip2CompressionOutput{})
	pulumi.RegisterOutputType(DatasetBZip2CompressionResponseOutput{})
	pulumi.RegisterOutputType(DatasetDeflateCompressionOutput{})
	pulumi.RegisterOutputType(DatasetDeflateCompressionResponseOutput{})
	pulumi.RegisterOutputType(DatasetFolderOutput{})
	pulumi.RegisterOutputType(DatasetFolderPtrOutput{})
	pulumi.RegisterOutputType(DatasetGZipCompressionOutput{})
	pulumi.RegisterOutputType(DatasetGZipCompressionResponseOutput{})
	pulumi.RegisterOutputType(DatasetReferenceOutput{})
	pulumi.RegisterOutputType(DatasetReferencePtrOutput{})
	pulumi.RegisterOutputType(DatasetReferenceResponseOutput{})
	pulumi.RegisterOutputType(DatasetReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(DatasetResponseFolderOutput{})
	pulumi.RegisterOutputType(DatasetResponseFolderPtrOutput{})
	pulumi.RegisterOutputType(DatasetTarCompressionOutput{})
	pulumi.RegisterOutputType(DatasetTarCompressionResponseOutput{})
	pulumi.RegisterOutputType(DatasetTarGZipCompressionOutput{})
	pulumi.RegisterOutputType(DatasetTarGZipCompressionResponseOutput{})
	pulumi.RegisterOutputType(DatasetZipDeflateCompressionOutput{})
	pulumi.RegisterOutputType(DatasetZipDeflateCompressionResponseOutput{})
	pulumi.RegisterOutputType(Db2LinkedServiceOutput{})
	pulumi.RegisterOutputType(Db2LinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(Db2TableDatasetOutput{})
	pulumi.RegisterOutputType(Db2TableDatasetResponseOutput{})
	pulumi.RegisterOutputType(DelimitedTextDatasetOutput{})
	pulumi.RegisterOutputType(DelimitedTextDatasetResponseOutput{})
	pulumi.RegisterOutputType(DocumentDbCollectionDatasetOutput{})
	pulumi.RegisterOutputType(DocumentDbCollectionDatasetResponseOutput{})
	pulumi.RegisterOutputType(DrillLinkedServiceOutput{})
	pulumi.RegisterOutputType(DrillLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(DrillTableDatasetOutput{})
	pulumi.RegisterOutputType(DrillTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(DynamicsAXLinkedServiceOutput{})
	pulumi.RegisterOutputType(DynamicsAXLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(DynamicsAXResourceDatasetOutput{})
	pulumi.RegisterOutputType(DynamicsAXResourceDatasetResponseOutput{})
	pulumi.RegisterOutputType(DynamicsCrmEntityDatasetOutput{})
	pulumi.RegisterOutputType(DynamicsCrmEntityDatasetResponseOutput{})
	pulumi.RegisterOutputType(DynamicsCrmLinkedServiceOutput{})
	pulumi.RegisterOutputType(DynamicsCrmLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(DynamicsEntityDatasetOutput{})
	pulumi.RegisterOutputType(DynamicsEntityDatasetResponseOutput{})
	pulumi.RegisterOutputType(DynamicsLinkedServiceOutput{})
	pulumi.RegisterOutputType(DynamicsLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(EloquaLinkedServiceOutput{})
	pulumi.RegisterOutputType(EloquaLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(EloquaObjectDatasetOutput{})
	pulumi.RegisterOutputType(EloquaObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(EntityReferenceOutput{})
	pulumi.RegisterOutputType(EntityReferencePtrOutput{})
	pulumi.RegisterOutputType(EntityReferenceResponseOutput{})
	pulumi.RegisterOutputType(EntityReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableSetupOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableSetupResponseOutput{})
	pulumi.RegisterOutputType(ExcelDatasetOutput{})
	pulumi.RegisterOutputType(ExcelDatasetResponseOutput{})
	pulumi.RegisterOutputType(ExecutionActivityOutput{})
	pulumi.RegisterOutputType(ExecutionActivityResponseOutput{})
	pulumi.RegisterOutputType(FactoryGitHubConfigurationOutput{})
	pulumi.RegisterOutputType(FactoryGitHubConfigurationResponseOutput{})
	pulumi.RegisterOutputType(FactoryIdentityOutput{})
	pulumi.RegisterOutputType(FactoryIdentityPtrOutput{})
	pulumi.RegisterOutputType(FactoryIdentityResponseOutput{})
	pulumi.RegisterOutputType(FactoryIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(FactoryVSTSConfigurationOutput{})
	pulumi.RegisterOutputType(FactoryVSTSConfigurationResponseOutput{})
	pulumi.RegisterOutputType(FileServerLinkedServiceOutput{})
	pulumi.RegisterOutputType(FileServerLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(FileServerLocationOutput{})
	pulumi.RegisterOutputType(FileServerLocationResponseOutput{})
	pulumi.RegisterOutputType(FileShareDatasetOutput{})
	pulumi.RegisterOutputType(FileShareDatasetResponseOutput{})
	pulumi.RegisterOutputType(FtpServerLinkedServiceOutput{})
	pulumi.RegisterOutputType(FtpServerLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(FtpServerLocationOutput{})
	pulumi.RegisterOutputType(FtpServerLocationResponseOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationMapOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationResponseOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationResponseMapOutput{})
	pulumi.RegisterOutputType(GoogleAdWordsLinkedServiceOutput{})
	pulumi.RegisterOutputType(GoogleAdWordsLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(GoogleAdWordsObjectDatasetOutput{})
	pulumi.RegisterOutputType(GoogleAdWordsObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(GoogleBigQueryLinkedServiceOutput{})
	pulumi.RegisterOutputType(GoogleBigQueryLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(GoogleBigQueryObjectDatasetOutput{})
	pulumi.RegisterOutputType(GoogleBigQueryObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudStorageLinkedServiceOutput{})
	pulumi.RegisterOutputType(GoogleCloudStorageLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudStorageLocationOutput{})
	pulumi.RegisterOutputType(GoogleCloudStorageLocationResponseOutput{})
	pulumi.RegisterOutputType(GreenplumLinkedServiceOutput{})
	pulumi.RegisterOutputType(GreenplumLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(GreenplumTableDatasetOutput{})
	pulumi.RegisterOutputType(GreenplumTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(HBaseLinkedServiceOutput{})
	pulumi.RegisterOutputType(HBaseLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HBaseObjectDatasetOutput{})
	pulumi.RegisterOutputType(HBaseObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(HDInsightLinkedServiceOutput{})
	pulumi.RegisterOutputType(HDInsightLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HDInsightOnDemandLinkedServiceOutput{})
	pulumi.RegisterOutputType(HDInsightOnDemandLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HdfsLinkedServiceOutput{})
	pulumi.RegisterOutputType(HdfsLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HdfsLocationOutput{})
	pulumi.RegisterOutputType(HdfsLocationResponseOutput{})
	pulumi.RegisterOutputType(HiveLinkedServiceOutput{})
	pulumi.RegisterOutputType(HiveLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HiveObjectDatasetOutput{})
	pulumi.RegisterOutputType(HiveObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(HttpDatasetOutput{})
	pulumi.RegisterOutputType(HttpDatasetResponseOutput{})
	pulumi.RegisterOutputType(HttpLinkedServiceOutput{})
	pulumi.RegisterOutputType(HttpLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HttpServerLocationOutput{})
	pulumi.RegisterOutputType(HttpServerLocationResponseOutput{})
	pulumi.RegisterOutputType(HubspotLinkedServiceOutput{})
	pulumi.RegisterOutputType(HubspotLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HubspotObjectDatasetOutput{})
	pulumi.RegisterOutputType(HubspotObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(ImpalaLinkedServiceOutput{})
	pulumi.RegisterOutputType(ImpalaLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ImpalaObjectDatasetOutput{})
	pulumi.RegisterOutputType(ImpalaObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(InformixLinkedServiceOutput{})
	pulumi.RegisterOutputType(InformixLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(InformixTableDatasetOutput{})
	pulumi.RegisterOutputType(InformixTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeComputePropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeComputePropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeComputePropertiesResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeComputePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeCustomSetupScriptPropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataFlowPropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataFlowPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataFlowPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataFlowPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataProxyPropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataProxyPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataProxyPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataProxyPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferenceOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferencePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferenceResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisCatalogInfoOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisCatalogInfoPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisCatalogInfoResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisCatalogInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisPropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeVNetPropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeVNetPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeVNetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeVNetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(JiraLinkedServiceOutput{})
	pulumi.RegisterOutputType(JiraLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(JiraObjectDatasetOutput{})
	pulumi.RegisterOutputType(JiraObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(JsonDatasetOutput{})
	pulumi.RegisterOutputType(JsonDatasetResponseOutput{})
	pulumi.RegisterOutputType(JsonFormatOutput{})
	pulumi.RegisterOutputType(JsonFormatResponseOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeKeyAuthorizationOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeKeyAuthorizationResponseOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeRbacAuthorizationOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeRbacAuthorizationResponseOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeResponseOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeResponseArrayOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferencePtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceArrayOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceResponseOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(MagentoLinkedServiceOutput{})
	pulumi.RegisterOutputType(MagentoLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MagentoObjectDatasetOutput{})
	pulumi.RegisterOutputType(MagentoObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(ManagedIntegrationRuntimeOutput{})
	pulumi.RegisterOutputType(ManagedIntegrationRuntimeErrorResponseOutput{})
	pulumi.RegisterOutputType(ManagedIntegrationRuntimeErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedIntegrationRuntimeNodeResponseOutput{})
	pulumi.RegisterOutputType(ManagedIntegrationRuntimeNodeResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedIntegrationRuntimeOperationResultResponseOutput{})
	pulumi.RegisterOutputType(ManagedIntegrationRuntimeResponseOutput{})
	pulumi.RegisterOutputType(ManagedIntegrationRuntimeStatusResponseOutput{})
	pulumi.RegisterOutputType(ManagedPrivateEndpointTypeOutput{})
	pulumi.RegisterOutputType(ManagedPrivateEndpointTypePtrOutput{})
	pulumi.RegisterOutputType(ManagedPrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(ManagedPrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(MappingDataFlowOutput{})
	pulumi.RegisterOutputType(MappingDataFlowPtrOutput{})
	pulumi.RegisterOutputType(MappingDataFlowResponseOutput{})
	pulumi.RegisterOutputType(MappingDataFlowResponsePtrOutput{})
	pulumi.RegisterOutputType(MariaDBLinkedServiceOutput{})
	pulumi.RegisterOutputType(MariaDBLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MariaDBTableDatasetOutput{})
	pulumi.RegisterOutputType(MariaDBTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(MarketoLinkedServiceOutput{})
	pulumi.RegisterOutputType(MarketoLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MarketoObjectDatasetOutput{})
	pulumi.RegisterOutputType(MarketoObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(MicrosoftAccessLinkedServiceOutput{})
	pulumi.RegisterOutputType(MicrosoftAccessLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MicrosoftAccessTableDatasetOutput{})
	pulumi.RegisterOutputType(MicrosoftAccessTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(MongoDbAtlasCollectionDatasetOutput{})
	pulumi.RegisterOutputType(MongoDbAtlasCollectionDatasetResponseOutput{})
	pulumi.RegisterOutputType(MongoDbAtlasLinkedServiceOutput{})
	pulumi.RegisterOutputType(MongoDbAtlasLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionDatasetOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionDatasetResponseOutput{})
	pulumi.RegisterOutputType(MongoDbLinkedServiceOutput{})
	pulumi.RegisterOutputType(MongoDbLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MongoDbV2CollectionDatasetOutput{})
	pulumi.RegisterOutputType(MongoDbV2CollectionDatasetResponseOutput{})
	pulumi.RegisterOutputType(MongoDbV2LinkedServiceOutput{})
	pulumi.RegisterOutputType(MongoDbV2LinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MultiplePipelineTriggerOutput{})
	pulumi.RegisterOutputType(MultiplePipelineTriggerResponseOutput{})
	pulumi.RegisterOutputType(MySqlLinkedServiceOutput{})
	pulumi.RegisterOutputType(MySqlLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MySqlTableDatasetOutput{})
	pulumi.RegisterOutputType(MySqlTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(NetezzaLinkedServiceOutput{})
	pulumi.RegisterOutputType(NetezzaLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(NetezzaTableDatasetOutput{})
	pulumi.RegisterOutputType(NetezzaTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(ODataLinkedServiceOutput{})
	pulumi.RegisterOutputType(ODataLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ODataResourceDatasetOutput{})
	pulumi.RegisterOutputType(ODataResourceDatasetResponseOutput{})
	pulumi.RegisterOutputType(OdbcLinkedServiceOutput{})
	pulumi.RegisterOutputType(OdbcLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(OdbcTableDatasetOutput{})
	pulumi.RegisterOutputType(OdbcTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(Office365DatasetOutput{})
	pulumi.RegisterOutputType(Office365DatasetResponseOutput{})
	pulumi.RegisterOutputType(Office365LinkedServiceOutput{})
	pulumi.RegisterOutputType(Office365LinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(OracleLinkedServiceOutput{})
	pulumi.RegisterOutputType(OracleLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(OracleServiceCloudLinkedServiceOutput{})
	pulumi.RegisterOutputType(OracleServiceCloudLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(OracleServiceCloudObjectDatasetOutput{})
	pulumi.RegisterOutputType(OracleServiceCloudObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(OracleTableDatasetOutput{})
	pulumi.RegisterOutputType(OracleTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(OrcDatasetOutput{})
	pulumi.RegisterOutputType(OrcDatasetResponseOutput{})
	pulumi.RegisterOutputType(OrcFormatOutput{})
	pulumi.RegisterOutputType(OrcFormatResponseOutput{})
	pulumi.RegisterOutputType(PackageStoreOutput{})
	pulumi.RegisterOutputType(PackageStoreArrayOutput{})
	pulumi.RegisterOutputType(PackageStoreResponseOutput{})
	pulumi.RegisterOutputType(PackageStoreResponseArrayOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationMapOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationResponseOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationResponseMapOutput{})
	pulumi.RegisterOutputType(ParquetDatasetOutput{})
	pulumi.RegisterOutputType(ParquetDatasetResponseOutput{})
	pulumi.RegisterOutputType(ParquetFormatOutput{})
	pulumi.RegisterOutputType(ParquetFormatResponseOutput{})
	pulumi.RegisterOutputType(PaypalLinkedServiceOutput{})
	pulumi.RegisterOutputType(PaypalLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(PaypalObjectDatasetOutput{})
	pulumi.RegisterOutputType(PaypalObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(PhoenixLinkedServiceOutput{})
	pulumi.RegisterOutputType(PhoenixLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(PhoenixObjectDatasetOutput{})
	pulumi.RegisterOutputType(PhoenixObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(PipelineFolderOutput{})
	pulumi.RegisterOutputType(PipelineFolderPtrOutput{})
	pulumi.RegisterOutputType(PipelineReferenceOutput{})
	pulumi.RegisterOutputType(PipelineReferencePtrOutput{})
	pulumi.RegisterOutputType(PipelineReferenceArrayOutput{})
	pulumi.RegisterOutputType(PipelineReferenceResponseOutput{})
	pulumi.RegisterOutputType(PipelineReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(PipelineResponseFolderOutput{})
	pulumi.RegisterOutputType(PipelineResponseFolderPtrOutput{})
	pulumi.RegisterOutputType(PostgreSqlLinkedServiceOutput{})
	pulumi.RegisterOutputType(PostgreSqlLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(PostgreSqlTableDatasetOutput{})
	pulumi.RegisterOutputType(PostgreSqlTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(PrestoLinkedServiceOutput{})
	pulumi.RegisterOutputType(PrestoLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(PrestoObjectDatasetOutput{})
	pulumi.RegisterOutputType(PrestoObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(QuickBooksLinkedServiceOutput{})
	pulumi.RegisterOutputType(QuickBooksLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(QuickBooksObjectDatasetOutput{})
	pulumi.RegisterOutputType(QuickBooksObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(RelationalTableDatasetOutput{})
	pulumi.RegisterOutputType(RelationalTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(RerunTumblingWindowTriggerOutput{})
	pulumi.RegisterOutputType(RerunTumblingWindowTriggerResponseOutput{})
	pulumi.RegisterOutputType(ResponsysLinkedServiceOutput{})
	pulumi.RegisterOutputType(ResponsysLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ResponsysObjectDatasetOutput{})
	pulumi.RegisterOutputType(ResponsysObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(RestResourceDatasetOutput{})
	pulumi.RegisterOutputType(RestResourceDatasetResponseOutput{})
	pulumi.RegisterOutputType(RestServiceLinkedServiceOutput{})
	pulumi.RegisterOutputType(RestServiceLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(RetryPolicyOutput{})
	pulumi.RegisterOutputType(RetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(RetryPolicyResponseOutput{})
	pulumi.RegisterOutputType(RetryPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(SalesforceLinkedServiceOutput{})
	pulumi.RegisterOutputType(SalesforceLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SalesforceMarketingCloudLinkedServiceOutput{})
	pulumi.RegisterOutputType(SalesforceMarketingCloudLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SalesforceMarketingCloudObjectDatasetOutput{})
	pulumi.RegisterOutputType(SalesforceMarketingCloudObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SalesforceObjectDatasetOutput{})
	pulumi.RegisterOutputType(SalesforceObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudLinkedServiceOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudObjectDatasetOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SapBWLinkedServiceOutput{})
	pulumi.RegisterOutputType(SapBWLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SapBwCubeDatasetOutput{})
	pulumi.RegisterOutputType(SapBwCubeDatasetResponseOutput{})
	pulumi.RegisterOutputType(SapCloudForCustomerLinkedServiceOutput{})
	pulumi.RegisterOutputType(SapCloudForCustomerLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SapCloudForCustomerResourceDatasetOutput{})
	pulumi.RegisterOutputType(SapCloudForCustomerResourceDatasetResponseOutput{})
	pulumi.RegisterOutputType(SapEccLinkedServiceOutput{})
	pulumi.RegisterOutputType(SapEccLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SapEccResourceDatasetOutput{})
	pulumi.RegisterOutputType(SapEccResourceDatasetResponseOutput{})
	pulumi.RegisterOutputType(SapHanaLinkedServiceOutput{})
	pulumi.RegisterOutputType(SapHanaLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SapHanaTableDatasetOutput{})
	pulumi.RegisterOutputType(SapHanaTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(SapOpenHubLinkedServiceOutput{})
	pulumi.RegisterOutputType(SapOpenHubLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SapOpenHubTableDatasetOutput{})
	pulumi.RegisterOutputType(SapOpenHubTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(SapTableLinkedServiceOutput{})
	pulumi.RegisterOutputType(SapTableLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SapTableResourceDatasetOutput{})
	pulumi.RegisterOutputType(SapTableResourceDatasetResponseOutput{})
	pulumi.RegisterOutputType(ScriptActionOutput{})
	pulumi.RegisterOutputType(ScriptActionArrayOutput{})
	pulumi.RegisterOutputType(ScriptActionResponseOutput{})
	pulumi.RegisterOutputType(ScriptActionResponseArrayOutput{})
	pulumi.RegisterOutputType(SecureStringOutput{})
	pulumi.RegisterOutputType(SecureStringPtrOutput{})
	pulumi.RegisterOutputType(SecureStringResponseOutput{})
	pulumi.RegisterOutputType(SecureStringResponsePtrOutput{})
	pulumi.RegisterOutputType(SelfDependencyTumblingWindowTriggerReferenceOutput{})
	pulumi.RegisterOutputType(SelfDependencyTumblingWindowTriggerReferenceResponseOutput{})
	pulumi.RegisterOutputType(SelfHostedIntegrationRuntimeOutput{})
	pulumi.RegisterOutputType(SelfHostedIntegrationRuntimeNodeResponseOutput{})
	pulumi.RegisterOutputType(SelfHostedIntegrationRuntimeNodeResponseArrayOutput{})
	pulumi.RegisterOutputType(SelfHostedIntegrationRuntimeResponseOutput{})
	pulumi.RegisterOutputType(SelfHostedIntegrationRuntimeStatusResponseOutput{})
	pulumi.RegisterOutputType(ServiceNowLinkedServiceOutput{})
	pulumi.RegisterOutputType(ServiceNowLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ServiceNowObjectDatasetOutput{})
	pulumi.RegisterOutputType(ServiceNowObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SftpLocationOutput{})
	pulumi.RegisterOutputType(SftpLocationResponseOutput{})
	pulumi.RegisterOutputType(SftpServerLinkedServiceOutput{})
	pulumi.RegisterOutputType(SftpServerLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SharePointOnlineListLinkedServiceOutput{})
	pulumi.RegisterOutputType(SharePointOnlineListLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SharePointOnlineListResourceDatasetOutput{})
	pulumi.RegisterOutputType(SharePointOnlineListResourceDatasetResponseOutput{})
	pulumi.RegisterOutputType(ShopifyLinkedServiceOutput{})
	pulumi.RegisterOutputType(ShopifyLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ShopifyObjectDatasetOutput{})
	pulumi.RegisterOutputType(ShopifyObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SnowflakeDatasetOutput{})
	pulumi.RegisterOutputType(SnowflakeDatasetResponseOutput{})
	pulumi.RegisterOutputType(SnowflakeLinkedServiceOutput{})
	pulumi.RegisterOutputType(SnowflakeLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SparkLinkedServiceOutput{})
	pulumi.RegisterOutputType(SparkLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SparkObjectDatasetOutput{})
	pulumi.RegisterOutputType(SparkObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SqlServerLinkedServiceOutput{})
	pulumi.RegisterOutputType(SqlServerLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SqlServerTableDatasetOutput{})
	pulumi.RegisterOutputType(SqlServerTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(SquareLinkedServiceOutput{})
	pulumi.RegisterOutputType(SquareLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SquareObjectDatasetOutput{})
	pulumi.RegisterOutputType(SquareObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SsisEnvironmentReferenceResponseOutput{})
	pulumi.RegisterOutputType(SsisEnvironmentReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(SsisEnvironmentResponseOutput{})
	pulumi.RegisterOutputType(SsisFolderResponseOutput{})
	pulumi.RegisterOutputType(SsisPackageResponseOutput{})
	pulumi.RegisterOutputType(SsisParameterResponseOutput{})
	pulumi.RegisterOutputType(SsisParameterResponseArrayOutput{})
	pulumi.RegisterOutputType(SsisProjectResponseOutput{})
	pulumi.RegisterOutputType(SsisVariableResponseOutput{})
	pulumi.RegisterOutputType(SsisVariableResponseArrayOutput{})
	pulumi.RegisterOutputType(SybaseLinkedServiceOutput{})
	pulumi.RegisterOutputType(SybaseLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SybaseTableDatasetOutput{})
	pulumi.RegisterOutputType(SybaseTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(TeradataLinkedServiceOutput{})
	pulumi.RegisterOutputType(TeradataLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(TeradataTableDatasetOutput{})
	pulumi.RegisterOutputType(TeradataTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(TextFormatOutput{})
	pulumi.RegisterOutputType(TextFormatResponseOutput{})
	pulumi.RegisterOutputType(TransformationOutput{})
	pulumi.RegisterOutputType(TransformationArrayOutput{})
	pulumi.RegisterOutputType(TransformationResponseOutput{})
	pulumi.RegisterOutputType(TransformationResponseArrayOutput{})
	pulumi.RegisterOutputType(TriggerDependencyReferenceOutput{})
	pulumi.RegisterOutputType(TriggerDependencyReferenceResponseOutput{})
	pulumi.RegisterOutputType(TriggerPipelineReferenceOutput{})
	pulumi.RegisterOutputType(TriggerPipelineReferenceArrayOutput{})
	pulumi.RegisterOutputType(TriggerPipelineReferenceResponseOutput{})
	pulumi.RegisterOutputType(TriggerPipelineReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(TriggerReferenceOutput{})
	pulumi.RegisterOutputType(TriggerReferenceResponseOutput{})
	pulumi.RegisterOutputType(TumblingWindowTriggerOutput{})
	pulumi.RegisterOutputType(TumblingWindowTriggerResponseOutput{})
	pulumi.RegisterOutputType(UserAccessPolicyResponseOutput{})
	pulumi.RegisterOutputType(UserPropertyOutput{})
	pulumi.RegisterOutputType(UserPropertyArrayOutput{})
	pulumi.RegisterOutputType(UserPropertyResponseOutput{})
	pulumi.RegisterOutputType(UserPropertyResponseArrayOutput{})
	pulumi.RegisterOutputType(VariableSpecificationOutput{})
	pulumi.RegisterOutputType(VariableSpecificationMapOutput{})
	pulumi.RegisterOutputType(VariableSpecificationResponseOutput{})
	pulumi.RegisterOutputType(VariableSpecificationResponseMapOutput{})
	pulumi.RegisterOutputType(VerticaLinkedServiceOutput{})
	pulumi.RegisterOutputType(VerticaLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(VerticaTableDatasetOutput{})
	pulumi.RegisterOutputType(VerticaTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(WebAnonymousAuthenticationOutput{})
	pulumi.RegisterOutputType(WebAnonymousAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(WebBasicAuthenticationOutput{})
	pulumi.RegisterOutputType(WebBasicAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(WebClientCertificateAuthenticationOutput{})
	pulumi.RegisterOutputType(WebClientCertificateAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(WebLinkedServiceOutput{})
	pulumi.RegisterOutputType(WebLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(WebTableDatasetOutput{})
	pulumi.RegisterOutputType(WebTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(XeroLinkedServiceOutput{})
	pulumi.RegisterOutputType(XeroLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(XeroObjectDatasetOutput{})
	pulumi.RegisterOutputType(XeroObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(XmlDatasetOutput{})
	pulumi.RegisterOutputType(XmlDatasetResponseOutput{})
	pulumi.RegisterOutputType(ZohoLinkedServiceOutput{})
	pulumi.RegisterOutputType(ZohoLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ZohoObjectDatasetOutput{})
	pulumi.RegisterOutputType(ZohoObjectDatasetResponseOutput{})
}
