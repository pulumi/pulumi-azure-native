// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20191011preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A NotebookProxy resource.
type NotebookProxy struct {
	pulumi.CustomResourceState

	// The friendly string identifier of the creator of the NotebookProxy resource.
	Hostname pulumi.StringPtrOutput `pulumi:"hostname"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The unique identifier (a GUID) generated for every resource.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// The type of the resource. Ex- Microsoft.Storage/storageAccounts or Microsoft.Notebooks/notebookProxies.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNotebookProxy registers a new resource with the given unique name, arguments, and options.
func NewNotebookProxy(ctx *pulumi.Context,
	name string, args *NotebookProxyArgs, opts ...pulumi.ResourceOption) (*NotebookProxy, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.ResourceName == nil {
		return nil, errors.New("missing required argument 'ResourceName'")
	}
	if args == nil {
		args = &NotebookProxyArgs{}
	}
	var resource NotebookProxy
	err := ctx.RegisterResource("azure-nextgen:notebooks/v20191011preview:NotebookProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotebookProxy gets an existing NotebookProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotebookProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotebookProxyState, opts ...pulumi.ResourceOption) (*NotebookProxy, error) {
	var resource NotebookProxy
	err := ctx.ReadResource("azure-nextgen:notebooks/v20191011preview:NotebookProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotebookProxy resources.
type notebookProxyState struct {
	// The friendly string identifier of the creator of the NotebookProxy resource.
	Hostname *string `pulumi:"hostname"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// The unique identifier (a GUID) generated for every resource.
	ResourceId *string `pulumi:"resourceId"`
	// The type of the resource. Ex- Microsoft.Storage/storageAccounts or Microsoft.Notebooks/notebookProxies.
	Type *string `pulumi:"type"`
}

type NotebookProxyState struct {
	// The friendly string identifier of the creator of the NotebookProxy resource.
	Hostname pulumi.StringPtrInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// The unique identifier (a GUID) generated for every resource.
	ResourceId pulumi.StringPtrInput
	// The type of the resource. Ex- Microsoft.Storage/storageAccounts or Microsoft.Notebooks/notebookProxies.
	Type pulumi.StringPtrInput
}

func (NotebookProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*notebookProxyState)(nil)).Elem()
}

type notebookProxyArgs struct {
	// The friendly string identifier of the creator of the NotebookProxy resource.
	Hostname *string `pulumi:"hostname"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the resource.
	ResourceName string `pulumi:"resourceName"`
}

// The set of arguments for constructing a NotebookProxy resource.
type NotebookProxyArgs struct {
	// The friendly string identifier of the creator of the NotebookProxy resource.
	Hostname pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the resource.
	ResourceName pulumi.StringInput
}

func (NotebookProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notebookProxyArgs)(nil)).Elem()
}
