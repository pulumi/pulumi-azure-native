// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220501

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A single Redis item in List or Get Operation.
type Redis struct {
	pulumi.CustomResourceState

	// The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
	AccessKeys RedisAccessKeysResponseOutput `pulumi:"accessKeys"`
	// Specifies whether the non-ssl Redis server port (6379) is enabled.
	EnableNonSslPort pulumi.BoolPtrOutput `pulumi:"enableNonSslPort"`
	// Redis host name.
	HostName pulumi.StringOutput `pulumi:"hostName"`
	// The identity of the resource.
	Identity ManagedServiceIdentityResponsePtrOutput `pulumi:"identity"`
	// List of the Redis instances associated with the cache
	Instances RedisInstanceDetailsResponseArrayOutput `pulumi:"instances"`
	// List of the linked servers associated with the cache
	LinkedServers RedisLinkedServerResponseArrayOutput `pulumi:"linkedServers"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
	MinimumTlsVersion pulumi.StringPtrOutput `pulumi:"minimumTlsVersion"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Redis non-SSL port.
	Port pulumi.IntOutput `pulumi:"port"`
	// List of private endpoint connection associated with the specified redis cache
	PrivateEndpointConnections PrivateEndpointConnectionResponseArrayOutput `pulumi:"privateEndpointConnections"`
	// Redis instance provisioning status.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'
	PublicNetworkAccess pulumi.StringPtrOutput `pulumi:"publicNetworkAccess"`
	// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
	RedisConfiguration RedisCommonPropertiesResponseRedisConfigurationPtrOutput `pulumi:"redisConfiguration"`
	// Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which refers to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value is 'latest'.
	RedisVersion pulumi.StringPtrOutput `pulumi:"redisVersion"`
	// The number of replicas to be created per primary.
	ReplicasPerMaster pulumi.IntPtrOutput `pulumi:"replicasPerMaster"`
	// The number of replicas to be created per primary.
	ReplicasPerPrimary pulumi.IntPtrOutput `pulumi:"replicasPerPrimary"`
	// The number of shards to be created on a Premium Cluster Cache.
	ShardCount pulumi.IntPtrOutput `pulumi:"shardCount"`
	// The SKU of the Redis cache to deploy.
	Sku SkuResponseOutput `pulumi:"sku"`
	// Redis SSL port.
	SslPort pulumi.IntOutput `pulumi:"sslPort"`
	// Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default.
	StaticIP pulumi.StringPtrOutput `pulumi:"staticIP"`
	// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
	SubnetId pulumi.StringPtrOutput `pulumi:"subnetId"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A dictionary of tenant settings
	TenantSettings pulumi.StringMapOutput `pulumi:"tenantSettings"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// A list of availability zones denoting where the resource needs to come from.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewRedis registers a new resource with the given unique name, arguments, and options.
func NewRedis(ctx *pulumi.Context,
	name string, args *RedisArgs, opts ...pulumi.ResourceOption) (*Redis, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Sku == nil {
		return nil, errors.New("invalid value for required argument 'Sku'")
	}
	if isZero(args.EnableNonSslPort) {
		args.EnableNonSslPort = pulumi.BoolPtr(false)
	}
	if isZero(args.PublicNetworkAccess) {
		args.PublicNetworkAccess = pulumi.StringPtr("Enabled")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:cache:Redis"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20150801:Redis"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20160401:Redis"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20170201:Redis"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20171001:Redis"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20180301:Redis"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20190701:Redis"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20200601:Redis"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20201201:Redis"),
		},
		{
			Type: pulumi.String("azure-native:cache/v20210601:Redis"),
		},
	})
	opts = append(opts, aliases)
	var resource Redis
	err := ctx.RegisterResource("azure-native:cache/v20220501:Redis", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedis gets an existing Redis resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedis(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedisState, opts ...pulumi.ResourceOption) (*Redis, error) {
	var resource Redis
	err := ctx.ReadResource("azure-native:cache/v20220501:Redis", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Redis resources.
type redisState struct {
}

type RedisState struct {
}

func (RedisState) ElementType() reflect.Type {
	return reflect.TypeOf((*redisState)(nil)).Elem()
}

type redisArgs struct {
	// Specifies whether the non-ssl Redis server port (6379) is enabled.
	EnableNonSslPort *bool `pulumi:"enableNonSslPort"`
	// The identity of the resource.
	Identity *ManagedServiceIdentity `pulumi:"identity"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
	MinimumTlsVersion *string `pulumi:"minimumTlsVersion"`
	// The name of the Redis cache.
	Name *string `pulumi:"name"`
	// Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
	RedisConfiguration *RedisCommonPropertiesRedisConfiguration `pulumi:"redisConfiguration"`
	// Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which refers to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value is 'latest'.
	RedisVersion *string `pulumi:"redisVersion"`
	// The number of replicas to be created per primary.
	ReplicasPerMaster *int `pulumi:"replicasPerMaster"`
	// The number of replicas to be created per primary.
	ReplicasPerPrimary *int `pulumi:"replicasPerPrimary"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The number of shards to be created on a Premium Cluster Cache.
	ShardCount *int `pulumi:"shardCount"`
	// The SKU of the Redis cache to deploy.
	Sku Sku `pulumi:"sku"`
	// Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default.
	StaticIP *string `pulumi:"staticIP"`
	// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
	SubnetId *string `pulumi:"subnetId"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// A dictionary of tenant settings
	TenantSettings map[string]string `pulumi:"tenantSettings"`
	// A list of availability zones denoting where the resource needs to come from.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a Redis resource.
type RedisArgs struct {
	// Specifies whether the non-ssl Redis server port (6379) is enabled.
	EnableNonSslPort pulumi.BoolPtrInput
	// The identity of the resource.
	Identity ManagedServiceIdentityPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
	MinimumTlsVersion pulumi.StringPtrInput
	// The name of the Redis cache.
	Name pulumi.StringPtrInput
	// Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'
	PublicNetworkAccess pulumi.StringPtrInput
	// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
	RedisConfiguration RedisCommonPropertiesRedisConfigurationPtrInput
	// Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which refers to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value is 'latest'.
	RedisVersion pulumi.StringPtrInput
	// The number of replicas to be created per primary.
	ReplicasPerMaster pulumi.IntPtrInput
	// The number of replicas to be created per primary.
	ReplicasPerPrimary pulumi.IntPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The number of shards to be created on a Premium Cluster Cache.
	ShardCount pulumi.IntPtrInput
	// The SKU of the Redis cache to deploy.
	Sku SkuInput
	// Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default.
	StaticIP pulumi.StringPtrInput
	// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
	SubnetId pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// A dictionary of tenant settings
	TenantSettings pulumi.StringMapInput
	// A list of availability zones denoting where the resource needs to come from.
	Zones pulumi.StringArrayInput
}

func (RedisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redisArgs)(nil)).Elem()
}

type RedisInput interface {
	pulumi.Input

	ToRedisOutput() RedisOutput
	ToRedisOutputWithContext(ctx context.Context) RedisOutput
}

func (*Redis) ElementType() reflect.Type {
	return reflect.TypeOf((**Redis)(nil)).Elem()
}

func (i *Redis) ToRedisOutput() RedisOutput {
	return i.ToRedisOutputWithContext(context.Background())
}

func (i *Redis) ToRedisOutputWithContext(ctx context.Context) RedisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisOutput)
}

type RedisOutput struct{ *pulumi.OutputState }

func (RedisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Redis)(nil)).Elem()
}

func (o RedisOutput) ToRedisOutput() RedisOutput {
	return o
}

func (o RedisOutput) ToRedisOutputWithContext(ctx context.Context) RedisOutput {
	return o
}

// The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
func (o RedisOutput) AccessKeys() RedisAccessKeysResponseOutput {
	return o.ApplyT(func(v *Redis) RedisAccessKeysResponseOutput { return v.AccessKeys }).(RedisAccessKeysResponseOutput)
}

// Specifies whether the non-ssl Redis server port (6379) is enabled.
func (o RedisOutput) EnableNonSslPort() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Redis) pulumi.BoolPtrOutput { return v.EnableNonSslPort }).(pulumi.BoolPtrOutput)
}

// Redis host name.
func (o RedisOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v *Redis) pulumi.StringOutput { return v.HostName }).(pulumi.StringOutput)
}

// The identity of the resource.
func (o RedisOutput) Identity() ManagedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v *Redis) ManagedServiceIdentityResponsePtrOutput { return v.Identity }).(ManagedServiceIdentityResponsePtrOutput)
}

// List of the Redis instances associated with the cache
func (o RedisOutput) Instances() RedisInstanceDetailsResponseArrayOutput {
	return o.ApplyT(func(v *Redis) RedisInstanceDetailsResponseArrayOutput { return v.Instances }).(RedisInstanceDetailsResponseArrayOutput)
}

// List of the linked servers associated with the cache
func (o RedisOutput) LinkedServers() RedisLinkedServerResponseArrayOutput {
	return o.ApplyT(func(v *Redis) RedisLinkedServerResponseArrayOutput { return v.LinkedServers }).(RedisLinkedServerResponseArrayOutput)
}

// The geo-location where the resource lives
func (o RedisOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Redis) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
func (o RedisOutput) MinimumTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Redis) pulumi.StringPtrOutput { return v.MinimumTlsVersion }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o RedisOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Redis) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Redis non-SSL port.
func (o RedisOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Redis) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// List of private endpoint connection associated with the specified redis cache
func (o RedisOutput) PrivateEndpointConnections() PrivateEndpointConnectionResponseArrayOutput {
	return o.ApplyT(func(v *Redis) PrivateEndpointConnectionResponseArrayOutput { return v.PrivateEndpointConnections }).(PrivateEndpointConnectionResponseArrayOutput)
}

// Redis instance provisioning status.
func (o RedisOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Redis) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'
func (o RedisOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Redis) pulumi.StringPtrOutput { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
func (o RedisOutput) RedisConfiguration() RedisCommonPropertiesResponseRedisConfigurationPtrOutput {
	return o.ApplyT(func(v *Redis) RedisCommonPropertiesResponseRedisConfigurationPtrOutput { return v.RedisConfiguration }).(RedisCommonPropertiesResponseRedisConfigurationPtrOutput)
}

// Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which refers to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value is 'latest'.
func (o RedisOutput) RedisVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Redis) pulumi.StringPtrOutput { return v.RedisVersion }).(pulumi.StringPtrOutput)
}

// The number of replicas to be created per primary.
func (o RedisOutput) ReplicasPerMaster() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Redis) pulumi.IntPtrOutput { return v.ReplicasPerMaster }).(pulumi.IntPtrOutput)
}

// The number of replicas to be created per primary.
func (o RedisOutput) ReplicasPerPrimary() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Redis) pulumi.IntPtrOutput { return v.ReplicasPerPrimary }).(pulumi.IntPtrOutput)
}

// The number of shards to be created on a Premium Cluster Cache.
func (o RedisOutput) ShardCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Redis) pulumi.IntPtrOutput { return v.ShardCount }).(pulumi.IntPtrOutput)
}

// The SKU of the Redis cache to deploy.
func (o RedisOutput) Sku() SkuResponseOutput {
	return o.ApplyT(func(v *Redis) SkuResponseOutput { return v.Sku }).(SkuResponseOutput)
}

// Redis SSL port.
func (o RedisOutput) SslPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Redis) pulumi.IntOutput { return v.SslPort }).(pulumi.IntOutput)
}

// Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default.
func (o RedisOutput) StaticIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Redis) pulumi.StringPtrOutput { return v.StaticIP }).(pulumi.StringPtrOutput)
}

// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
func (o RedisOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Redis) pulumi.StringPtrOutput { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// Resource tags.
func (o RedisOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Redis) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A dictionary of tenant settings
func (o RedisOutput) TenantSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Redis) pulumi.StringMapOutput { return v.TenantSettings }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o RedisOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Redis) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// A list of availability zones denoting where the resource needs to come from.
func (o RedisOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Redis) pulumi.StringArrayOutput { return v.Zones }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(RedisOutput{})
}
