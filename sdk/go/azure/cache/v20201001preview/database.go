// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20201001preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Describes a database on the RedisEnterprise cluster
type Database struct {
	pulumi.CustomResourceState

	// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
	ClientProtocol pulumi.StringPtrOutput `pulumi:"clientProtocol"`
	// Clustering policy - default is OSSCluster. Specified at create time.
	ClusteringPolicy pulumi.StringPtrOutput `pulumi:"clusteringPolicy"`
	// Redis eviction policy - default is VolatileLRU
	EvictionPolicy pulumi.StringPtrOutput `pulumi:"evictionPolicy"`
	// Optional set of redis modules to enable in this database - modules can only be added at creation time.
	Modules ModuleResponseArrayOutput `pulumi:"modules"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// TCP port of the database endpoint. Specified at create time. Defaults to an available port.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// Current provisioning status of the database
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Current resource status of the database
	ResourceState pulumi.StringOutput `pulumi:"resourceState"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOption) (*Database, error) {
	if args == nil || args.ClusterName == nil {
		return nil, errors.New("missing required argument 'ClusterName'")
	}
	if args == nil || args.DatabaseName == nil {
		return nil, errors.New("missing required argument 'DatabaseName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &DatabaseArgs{}
	}
	var resource Database
	err := ctx.RegisterResource("azure-nextgen:cache/v20201001preview:Database", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseState, opts ...pulumi.ResourceOption) (*Database, error) {
	var resource Database
	err := ctx.ReadResource("azure-nextgen:cache/v20201001preview:Database", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Database resources.
type databaseState struct {
	// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
	ClientProtocol *string `pulumi:"clientProtocol"`
	// Clustering policy - default is OSSCluster. Specified at create time.
	ClusteringPolicy *string `pulumi:"clusteringPolicy"`
	// Redis eviction policy - default is VolatileLRU
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// Optional set of redis modules to enable in this database - modules can only be added at creation time.
	Modules []ModuleResponse `pulumi:"modules"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// TCP port of the database endpoint. Specified at create time. Defaults to an available port.
	Port *int `pulumi:"port"`
	// Current provisioning status of the database
	ProvisioningState *string `pulumi:"provisioningState"`
	// Current resource status of the database
	ResourceState *string `pulumi:"resourceState"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `pulumi:"type"`
}

type DatabaseState struct {
	// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
	ClientProtocol pulumi.StringPtrInput
	// Clustering policy - default is OSSCluster. Specified at create time.
	ClusteringPolicy pulumi.StringPtrInput
	// Redis eviction policy - default is VolatileLRU
	EvictionPolicy pulumi.StringPtrInput
	// Optional set of redis modules to enable in this database - modules can only be added at creation time.
	Modules ModuleResponseArrayInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// TCP port of the database endpoint. Specified at create time. Defaults to an available port.
	Port pulumi.IntPtrInput
	// Current provisioning status of the database
	ProvisioningState pulumi.StringPtrInput
	// Current resource status of the database
	ResourceState pulumi.StringPtrInput
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringPtrInput
}

func (DatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseState)(nil)).Elem()
}

type databaseArgs struct {
	// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
	ClientProtocol *string `pulumi:"clientProtocol"`
	// The name of the RedisEnterprise cluster.
	ClusterName string `pulumi:"clusterName"`
	// Clustering policy - default is OSSCluster. Specified at create time.
	ClusteringPolicy *string `pulumi:"clusteringPolicy"`
	// The name of the database.
	DatabaseName string `pulumi:"databaseName"`
	// Redis eviction policy - default is VolatileLRU
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// Optional set of redis modules to enable in this database - modules can only be added at creation time.
	Modules []Module `pulumi:"modules"`
	// TCP port of the database endpoint. Specified at create time. Defaults to an available port.
	Port *int `pulumi:"port"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	// Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
	ClientProtocol pulumi.StringPtrInput
	// The name of the RedisEnterprise cluster.
	ClusterName pulumi.StringInput
	// Clustering policy - default is OSSCluster. Specified at create time.
	ClusteringPolicy pulumi.StringPtrInput
	// The name of the database.
	DatabaseName pulumi.StringInput
	// Redis eviction policy - default is VolatileLRU
	EvictionPolicy pulumi.StringPtrInput
	// Optional set of redis modules to enable in this database - modules can only be added at creation time.
	Modules ModuleArrayInput
	// TCP port of the database endpoint. Specified at create time. Defaults to an available port.
	Port pulumi.IntPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
}

func (DatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseArgs)(nil)).Elem()
}
