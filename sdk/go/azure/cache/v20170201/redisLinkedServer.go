// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20170201

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Response to put/get linked server (with properties) for Redis cache.
type RedisLinkedServer struct {
	pulumi.CustomResourceState

	// Fully qualified resourceId of the linked redis cache.
	LinkedRedisCacheId pulumi.StringOutput `pulumi:"linkedRedisCacheId"`
	// Location of the linked redis cache.
	LinkedRedisCacheLocation pulumi.StringOutput `pulumi:"linkedRedisCacheLocation"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Terminal state of the link between primary and secondary redis cache.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Role of the linked server.
	ServerRole pulumi.StringOutput `pulumi:"serverRole"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRedisLinkedServer registers a new resource with the given unique name, arguments, and options.
func NewRedisLinkedServer(ctx *pulumi.Context,
	name string, args *RedisLinkedServerArgs, opts ...pulumi.ResourceOption) (*RedisLinkedServer, error) {
	if args == nil || args.LinkedRedisCacheId == nil {
		return nil, errors.New("missing required argument 'LinkedRedisCacheId'")
	}
	if args == nil || args.LinkedRedisCacheLocation == nil {
		return nil, errors.New("missing required argument 'LinkedRedisCacheLocation'")
	}
	if args == nil || args.LinkedServerName == nil {
		return nil, errors.New("missing required argument 'LinkedServerName'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.ServerRole == nil {
		return nil, errors.New("missing required argument 'ServerRole'")
	}
	if args == nil {
		args = &RedisLinkedServerArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:cache/latest:RedisLinkedServer"),
		},
		{
			Type: pulumi.String("azure-nextgen:cache/v20171001:RedisLinkedServer"),
		},
		{
			Type: pulumi.String("azure-nextgen:cache/v20180301:RedisLinkedServer"),
		},
		{
			Type: pulumi.String("azure-nextgen:cache/v20190701:RedisLinkedServer"),
		},
		{
			Type: pulumi.String("azure-nextgen:cache/v20200601:RedisLinkedServer"),
		},
	})
	opts = append(opts, aliases)
	var resource RedisLinkedServer
	err := ctx.RegisterResource("azure-nextgen:cache/v20170201:RedisLinkedServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedisLinkedServer gets an existing RedisLinkedServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedisLinkedServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedisLinkedServerState, opts ...pulumi.ResourceOption) (*RedisLinkedServer, error) {
	var resource RedisLinkedServer
	err := ctx.ReadResource("azure-nextgen:cache/v20170201:RedisLinkedServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RedisLinkedServer resources.
type redisLinkedServerState struct {
	// Fully qualified resourceId of the linked redis cache.
	LinkedRedisCacheId *string `pulumi:"linkedRedisCacheId"`
	// Location of the linked redis cache.
	LinkedRedisCacheLocation *string `pulumi:"linkedRedisCacheLocation"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Terminal state of the link between primary and secondary redis cache.
	ProvisioningState *string `pulumi:"provisioningState"`
	// Role of the linked server.
	ServerRole *string `pulumi:"serverRole"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type RedisLinkedServerState struct {
	// Fully qualified resourceId of the linked redis cache.
	LinkedRedisCacheId pulumi.StringPtrInput
	// Location of the linked redis cache.
	LinkedRedisCacheLocation pulumi.StringPtrInput
	// Resource name.
	Name pulumi.StringPtrInput
	// Terminal state of the link between primary and secondary redis cache.
	ProvisioningState pulumi.StringPtrInput
	// Role of the linked server.
	ServerRole pulumi.StringPtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (RedisLinkedServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*redisLinkedServerState)(nil)).Elem()
}

type redisLinkedServerArgs struct {
	// Fully qualified resourceId of the linked redis cache.
	LinkedRedisCacheId string `pulumi:"linkedRedisCacheId"`
	// Location of the linked redis cache.
	LinkedRedisCacheLocation string `pulumi:"linkedRedisCacheLocation"`
	// The name of the linked server that is being added to the Redis cache.
	LinkedServerName string `pulumi:"linkedServerName"`
	// The name of the Redis cache.
	Name string `pulumi:"name"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Role of the linked server.
	ServerRole string `pulumi:"serverRole"`
}

// The set of arguments for constructing a RedisLinkedServer resource.
type RedisLinkedServerArgs struct {
	// Fully qualified resourceId of the linked redis cache.
	LinkedRedisCacheId pulumi.StringInput
	// Location of the linked redis cache.
	LinkedRedisCacheLocation pulumi.StringInput
	// The name of the linked server that is being added to the Redis cache.
	LinkedServerName pulumi.StringInput
	// The name of the Redis cache.
	Name pulumi.StringInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// Role of the linked server.
	ServerRole pulumi.StringInput
}

func (RedisLinkedServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redisLinkedServerArgs)(nil)).Elem()
}
