// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cache

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SKU parameters supplied to the create RedisEnterprise operation.
type EnterpriseSku struct {
	// The size of the RedisEnterprise cluster. Defaults to 2 or 3 depending on SKU. Valid values are (2, 4, 6, ...) for Enterprise SKUs and (3, 9, 15, ...) for Flash SKUs.
	Capacity *int `pulumi:"capacity"`
	// The type of RedisEnterprise cluster to deploy. Possible values: (Enterprise_E10, EnterpriseFlash_F300 etc.)
	Name string `pulumi:"name"`
}

// EnterpriseSkuInput is an input type that accepts EnterpriseSkuArgs and EnterpriseSkuOutput values.
// You can construct a concrete instance of `EnterpriseSkuInput` via:
//
//	EnterpriseSkuArgs{...}
type EnterpriseSkuInput interface {
	pulumi.Input

	ToEnterpriseSkuOutput() EnterpriseSkuOutput
	ToEnterpriseSkuOutputWithContext(context.Context) EnterpriseSkuOutput
}

// SKU parameters supplied to the create RedisEnterprise operation.
type EnterpriseSkuArgs struct {
	// The size of the RedisEnterprise cluster. Defaults to 2 or 3 depending on SKU. Valid values are (2, 4, 6, ...) for Enterprise SKUs and (3, 9, 15, ...) for Flash SKUs.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The type of RedisEnterprise cluster to deploy. Possible values: (Enterprise_E10, EnterpriseFlash_F300 etc.)
	Name pulumi.StringInput `pulumi:"name"`
}

func (EnterpriseSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSku)(nil)).Elem()
}

func (i EnterpriseSkuArgs) ToEnterpriseSkuOutput() EnterpriseSkuOutput {
	return i.ToEnterpriseSkuOutputWithContext(context.Background())
}

func (i EnterpriseSkuArgs) ToEnterpriseSkuOutputWithContext(ctx context.Context) EnterpriseSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSkuOutput)
}

// SKU parameters supplied to the create RedisEnterprise operation.
type EnterpriseSkuOutput struct{ *pulumi.OutputState }

func (EnterpriseSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSku)(nil)).Elem()
}

func (o EnterpriseSkuOutput) ToEnterpriseSkuOutput() EnterpriseSkuOutput {
	return o
}

func (o EnterpriseSkuOutput) ToEnterpriseSkuOutputWithContext(ctx context.Context) EnterpriseSkuOutput {
	return o
}

// The size of the RedisEnterprise cluster. Defaults to 2 or 3 depending on SKU. Valid values are (2, 4, 6, ...) for Enterprise SKUs and (3, 9, 15, ...) for Flash SKUs.
func (o EnterpriseSkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The type of RedisEnterprise cluster to deploy. Possible values: (Enterprise_E10, EnterpriseFlash_F300 etc.)
func (o EnterpriseSkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnterpriseSku) string { return v.Name }).(pulumi.StringOutput)
}

// SKU parameters supplied to the create RedisEnterprise operation.
type EnterpriseSkuResponse struct {
	// The size of the RedisEnterprise cluster. Defaults to 2 or 3 depending on SKU. Valid values are (2, 4, 6, ...) for Enterprise SKUs and (3, 9, 15, ...) for Flash SKUs.
	Capacity *int `pulumi:"capacity"`
	// The type of RedisEnterprise cluster to deploy. Possible values: (Enterprise_E10, EnterpriseFlash_F300 etc.)
	Name string `pulumi:"name"`
}

// SKU parameters supplied to the create RedisEnterprise operation.
type EnterpriseSkuResponseOutput struct{ *pulumi.OutputState }

func (EnterpriseSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSkuResponse)(nil)).Elem()
}

func (o EnterpriseSkuResponseOutput) ToEnterpriseSkuResponseOutput() EnterpriseSkuResponseOutput {
	return o
}

func (o EnterpriseSkuResponseOutput) ToEnterpriseSkuResponseOutputWithContext(ctx context.Context) EnterpriseSkuResponseOutput {
	return o
}

// The size of the RedisEnterprise cluster. Defaults to 2 or 3 depending on SKU. Valid values are (2, 4, 6, ...) for Enterprise SKUs and (3, 9, 15, ...) for Flash SKUs.
func (o EnterpriseSkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The type of RedisEnterprise cluster to deploy. Possible values: (Enterprise_E10, EnterpriseFlash_F300 etc.)
func (o EnterpriseSkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnterpriseSkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies configuration of a redis module
type Module struct {
	// Configuration options for the module, e.g. 'ERROR_RATE 0.00 INITIAL_SIZE 400'.
	Args *string `pulumi:"args"`
	// The name of the module, e.g. 'RedisBloom', 'RediSearch', 'RedisTimeSeries'
	Name string `pulumi:"name"`
}

// ModuleInput is an input type that accepts ModuleArgs and ModuleOutput values.
// You can construct a concrete instance of `ModuleInput` via:
//
//	ModuleArgs{...}
type ModuleInput interface {
	pulumi.Input

	ToModuleOutput() ModuleOutput
	ToModuleOutputWithContext(context.Context) ModuleOutput
}

// Specifies configuration of a redis module
type ModuleArgs struct {
	// Configuration options for the module, e.g. 'ERROR_RATE 0.00 INITIAL_SIZE 400'.
	Args pulumi.StringPtrInput `pulumi:"args"`
	// The name of the module, e.g. 'RedisBloom', 'RediSearch', 'RedisTimeSeries'
	Name pulumi.StringInput `pulumi:"name"`
}

func (ModuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Module)(nil)).Elem()
}

func (i ModuleArgs) ToModuleOutput() ModuleOutput {
	return i.ToModuleOutputWithContext(context.Background())
}

func (i ModuleArgs) ToModuleOutputWithContext(ctx context.Context) ModuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleOutput)
}

// ModuleArrayInput is an input type that accepts ModuleArray and ModuleArrayOutput values.
// You can construct a concrete instance of `ModuleArrayInput` via:
//
//	ModuleArray{ ModuleArgs{...} }
type ModuleArrayInput interface {
	pulumi.Input

	ToModuleArrayOutput() ModuleArrayOutput
	ToModuleArrayOutputWithContext(context.Context) ModuleArrayOutput
}

type ModuleArray []ModuleInput

func (ModuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Module)(nil)).Elem()
}

func (i ModuleArray) ToModuleArrayOutput() ModuleArrayOutput {
	return i.ToModuleArrayOutputWithContext(context.Background())
}

func (i ModuleArray) ToModuleArrayOutputWithContext(ctx context.Context) ModuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleArrayOutput)
}

// Specifies configuration of a redis module
type ModuleOutput struct{ *pulumi.OutputState }

func (ModuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Module)(nil)).Elem()
}

func (o ModuleOutput) ToModuleOutput() ModuleOutput {
	return o
}

func (o ModuleOutput) ToModuleOutputWithContext(ctx context.Context) ModuleOutput {
	return o
}

// Configuration options for the module, e.g. 'ERROR_RATE 0.00 INITIAL_SIZE 400'.
func (o ModuleOutput) Args() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Module) *string { return v.Args }).(pulumi.StringPtrOutput)
}

// The name of the module, e.g. 'RedisBloom', 'RediSearch', 'RedisTimeSeries'
func (o ModuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Module) string { return v.Name }).(pulumi.StringOutput)
}

type ModuleArrayOutput struct{ *pulumi.OutputState }

func (ModuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Module)(nil)).Elem()
}

func (o ModuleArrayOutput) ToModuleArrayOutput() ModuleArrayOutput {
	return o
}

func (o ModuleArrayOutput) ToModuleArrayOutputWithContext(ctx context.Context) ModuleArrayOutput {
	return o
}

func (o ModuleArrayOutput) Index(i pulumi.IntInput) ModuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Module {
		return vs[0].([]Module)[vs[1].(int)]
	}).(ModuleOutput)
}

// Specifies configuration of a redis module
type ModuleResponse struct {
	// Configuration options for the module, e.g. 'ERROR_RATE 0.00 INITIAL_SIZE 400'.
	Args *string `pulumi:"args"`
	// The name of the module, e.g. 'RedisBloom', 'RediSearch', 'RedisTimeSeries'
	Name string `pulumi:"name"`
	// The version of the module, e.g. '1.0'.
	Version string `pulumi:"version"`
}

// Specifies configuration of a redis module
type ModuleResponseOutput struct{ *pulumi.OutputState }

func (ModuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleResponse)(nil)).Elem()
}

func (o ModuleResponseOutput) ToModuleResponseOutput() ModuleResponseOutput {
	return o
}

func (o ModuleResponseOutput) ToModuleResponseOutputWithContext(ctx context.Context) ModuleResponseOutput {
	return o
}

// Configuration options for the module, e.g. 'ERROR_RATE 0.00 INITIAL_SIZE 400'.
func (o ModuleResponseOutput) Args() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModuleResponse) *string { return v.Args }).(pulumi.StringPtrOutput)
}

// The name of the module, e.g. 'RedisBloom', 'RediSearch', 'RedisTimeSeries'
func (o ModuleResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ModuleResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The version of the module, e.g. '1.0'.
func (o ModuleResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ModuleResponse) string { return v.Version }).(pulumi.StringOutput)
}

type ModuleResponseArrayOutput struct{ *pulumi.OutputState }

func (ModuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ModuleResponse)(nil)).Elem()
}

func (o ModuleResponseArrayOutput) ToModuleResponseArrayOutput() ModuleResponseArrayOutput {
	return o
}

func (o ModuleResponseArrayOutput) ToModuleResponseArrayOutputWithContext(ctx context.Context) ModuleResponseArrayOutput {
	return o
}

func (o ModuleResponseArrayOutput) Index(i pulumi.IntInput) ModuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ModuleResponse {
		return vs[0].([]ModuleResponse)[vs[1].(int)]
	}).(ModuleResponseOutput)
}

// Persistence-related configuration for the RedisEnterprise database
type Persistence struct {
	// Sets whether AOF is enabled.
	AofEnabled *bool `pulumi:"aofEnabled"`
	// Sets the frequency at which data is written to disk.
	AofFrequency *string `pulumi:"aofFrequency"`
	// Sets whether RDB is enabled.
	RdbEnabled *bool `pulumi:"rdbEnabled"`
	// Sets the frequency at which a snapshot of the database is created.
	RdbFrequency *string `pulumi:"rdbFrequency"`
}

// PersistenceInput is an input type that accepts PersistenceArgs and PersistenceOutput values.
// You can construct a concrete instance of `PersistenceInput` via:
//
//	PersistenceArgs{...}
type PersistenceInput interface {
	pulumi.Input

	ToPersistenceOutput() PersistenceOutput
	ToPersistenceOutputWithContext(context.Context) PersistenceOutput
}

// Persistence-related configuration for the RedisEnterprise database
type PersistenceArgs struct {
	// Sets whether AOF is enabled.
	AofEnabled pulumi.BoolPtrInput `pulumi:"aofEnabled"`
	// Sets the frequency at which data is written to disk.
	AofFrequency pulumi.StringPtrInput `pulumi:"aofFrequency"`
	// Sets whether RDB is enabled.
	RdbEnabled pulumi.BoolPtrInput `pulumi:"rdbEnabled"`
	// Sets the frequency at which a snapshot of the database is created.
	RdbFrequency pulumi.StringPtrInput `pulumi:"rdbFrequency"`
}

func (PersistenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Persistence)(nil)).Elem()
}

func (i PersistenceArgs) ToPersistenceOutput() PersistenceOutput {
	return i.ToPersistenceOutputWithContext(context.Background())
}

func (i PersistenceArgs) ToPersistenceOutputWithContext(ctx context.Context) PersistenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistenceOutput)
}

func (i PersistenceArgs) ToPersistencePtrOutput() PersistencePtrOutput {
	return i.ToPersistencePtrOutputWithContext(context.Background())
}

func (i PersistenceArgs) ToPersistencePtrOutputWithContext(ctx context.Context) PersistencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistenceOutput).ToPersistencePtrOutputWithContext(ctx)
}

// PersistencePtrInput is an input type that accepts PersistenceArgs, PersistencePtr and PersistencePtrOutput values.
// You can construct a concrete instance of `PersistencePtrInput` via:
//
//	        PersistenceArgs{...}
//
//	or:
//
//	        nil
type PersistencePtrInput interface {
	pulumi.Input

	ToPersistencePtrOutput() PersistencePtrOutput
	ToPersistencePtrOutputWithContext(context.Context) PersistencePtrOutput
}

type persistencePtrType PersistenceArgs

func PersistencePtr(v *PersistenceArgs) PersistencePtrInput {
	return (*persistencePtrType)(v)
}

func (*persistencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Persistence)(nil)).Elem()
}

func (i *persistencePtrType) ToPersistencePtrOutput() PersistencePtrOutput {
	return i.ToPersistencePtrOutputWithContext(context.Background())
}

func (i *persistencePtrType) ToPersistencePtrOutputWithContext(ctx context.Context) PersistencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistencePtrOutput)
}

// Persistence-related configuration for the RedisEnterprise database
type PersistenceOutput struct{ *pulumi.OutputState }

func (PersistenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Persistence)(nil)).Elem()
}

func (o PersistenceOutput) ToPersistenceOutput() PersistenceOutput {
	return o
}

func (o PersistenceOutput) ToPersistenceOutputWithContext(ctx context.Context) PersistenceOutput {
	return o
}

func (o PersistenceOutput) ToPersistencePtrOutput() PersistencePtrOutput {
	return o.ToPersistencePtrOutputWithContext(context.Background())
}

func (o PersistenceOutput) ToPersistencePtrOutputWithContext(ctx context.Context) PersistencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Persistence) *Persistence {
		return &v
	}).(PersistencePtrOutput)
}

// Sets whether AOF is enabled.
func (o PersistenceOutput) AofEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Persistence) *bool { return v.AofEnabled }).(pulumi.BoolPtrOutput)
}

// Sets the frequency at which data is written to disk.
func (o PersistenceOutput) AofFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Persistence) *string { return v.AofFrequency }).(pulumi.StringPtrOutput)
}

// Sets whether RDB is enabled.
func (o PersistenceOutput) RdbEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Persistence) *bool { return v.RdbEnabled }).(pulumi.BoolPtrOutput)
}

// Sets the frequency at which a snapshot of the database is created.
func (o PersistenceOutput) RdbFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Persistence) *string { return v.RdbFrequency }).(pulumi.StringPtrOutput)
}

type PersistencePtrOutput struct{ *pulumi.OutputState }

func (PersistencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Persistence)(nil)).Elem()
}

func (o PersistencePtrOutput) ToPersistencePtrOutput() PersistencePtrOutput {
	return o
}

func (o PersistencePtrOutput) ToPersistencePtrOutputWithContext(ctx context.Context) PersistencePtrOutput {
	return o
}

func (o PersistencePtrOutput) Elem() PersistenceOutput {
	return o.ApplyT(func(v *Persistence) Persistence {
		if v != nil {
			return *v
		}
		var ret Persistence
		return ret
	}).(PersistenceOutput)
}

// Sets whether AOF is enabled.
func (o PersistencePtrOutput) AofEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Persistence) *bool {
		if v == nil {
			return nil
		}
		return v.AofEnabled
	}).(pulumi.BoolPtrOutput)
}

// Sets the frequency at which data is written to disk.
func (o PersistencePtrOutput) AofFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Persistence) *string {
		if v == nil {
			return nil
		}
		return v.AofFrequency
	}).(pulumi.StringPtrOutput)
}

// Sets whether RDB is enabled.
func (o PersistencePtrOutput) RdbEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Persistence) *bool {
		if v == nil {
			return nil
		}
		return v.RdbEnabled
	}).(pulumi.BoolPtrOutput)
}

// Sets the frequency at which a snapshot of the database is created.
func (o PersistencePtrOutput) RdbFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Persistence) *string {
		if v == nil {
			return nil
		}
		return v.RdbFrequency
	}).(pulumi.StringPtrOutput)
}

// Persistence-related configuration for the RedisEnterprise database
type PersistenceResponse struct {
	// Sets whether AOF is enabled.
	AofEnabled *bool `pulumi:"aofEnabled"`
	// Sets the frequency at which data is written to disk.
	AofFrequency *string `pulumi:"aofFrequency"`
	// Sets whether RDB is enabled.
	RdbEnabled *bool `pulumi:"rdbEnabled"`
	// Sets the frequency at which a snapshot of the database is created.
	RdbFrequency *string `pulumi:"rdbFrequency"`
}

// Persistence-related configuration for the RedisEnterprise database
type PersistenceResponseOutput struct{ *pulumi.OutputState }

func (PersistenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistenceResponse)(nil)).Elem()
}

func (o PersistenceResponseOutput) ToPersistenceResponseOutput() PersistenceResponseOutput {
	return o
}

func (o PersistenceResponseOutput) ToPersistenceResponseOutputWithContext(ctx context.Context) PersistenceResponseOutput {
	return o
}

// Sets whether AOF is enabled.
func (o PersistenceResponseOutput) AofEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PersistenceResponse) *bool { return v.AofEnabled }).(pulumi.BoolPtrOutput)
}

// Sets the frequency at which data is written to disk.
func (o PersistenceResponseOutput) AofFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistenceResponse) *string { return v.AofFrequency }).(pulumi.StringPtrOutput)
}

// Sets whether RDB is enabled.
func (o PersistenceResponseOutput) RdbEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PersistenceResponse) *bool { return v.RdbEnabled }).(pulumi.BoolPtrOutput)
}

// Sets the frequency at which a snapshot of the database is created.
func (o PersistenceResponseOutput) RdbFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistenceResponse) *string { return v.RdbFrequency }).(pulumi.StringPtrOutput)
}

type PersistenceResponsePtrOutput struct{ *pulumi.OutputState }

func (PersistenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistenceResponse)(nil)).Elem()
}

func (o PersistenceResponsePtrOutput) ToPersistenceResponsePtrOutput() PersistenceResponsePtrOutput {
	return o
}

func (o PersistenceResponsePtrOutput) ToPersistenceResponsePtrOutputWithContext(ctx context.Context) PersistenceResponsePtrOutput {
	return o
}

func (o PersistenceResponsePtrOutput) Elem() PersistenceResponseOutput {
	return o.ApplyT(func(v *PersistenceResponse) PersistenceResponse {
		if v != nil {
			return *v
		}
		var ret PersistenceResponse
		return ret
	}).(PersistenceResponseOutput)
}

// Sets whether AOF is enabled.
func (o PersistenceResponsePtrOutput) AofEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PersistenceResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AofEnabled
	}).(pulumi.BoolPtrOutput)
}

// Sets the frequency at which data is written to disk.
func (o PersistenceResponsePtrOutput) AofFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.AofFrequency
	}).(pulumi.StringPtrOutput)
}

// Sets whether RDB is enabled.
func (o PersistenceResponsePtrOutput) RdbEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PersistenceResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RdbEnabled
	}).(pulumi.BoolPtrOutput)
}

// Sets the frequency at which a snapshot of the database is created.
func (o PersistenceResponsePtrOutput) RdbFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.RdbFrequency
	}).(pulumi.StringPtrOutput)
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionResponse struct {
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The resource of private end point.
	PrivateEndpoint *PrivateEndpointResponse `pulumi:"privateEndpoint"`
	// A collection of information about the state of the connection between service consumer and provider.
	PrivateLinkServiceConnectionState PrivateLinkServiceConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// The provisioning state of the private endpoint connection resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return o
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return o
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o PrivateEndpointConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o PrivateEndpointConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The resource of private end point.
func (o PrivateEndpointConnectionResponseOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *PrivateEndpointResponse { return v.PrivateEndpoint }).(PrivateEndpointResponsePtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
func (o PrivateEndpointConnectionResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) PrivateLinkServiceConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// The provisioning state of the private endpoint connection resource.
func (o PrivateEndpointConnectionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PrivateEndpointConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) PrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointConnectionResponse {
		return vs[0].([]PrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(PrivateEndpointConnectionResponseOutput)
}

// The Private Endpoint resource.
type PrivateEndpointResponse struct {
	// The ARM identifier for Private Endpoint
	Id string `pulumi:"id"`
}

// The Private Endpoint resource.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) string { return v.Id }).(pulumi.StringOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointResponse
		return ret
	}).(PrivateEndpointResponseOutput)
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateInput is an input type that accepts PrivateLinkServiceConnectionStateArgs and PrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateInput` via:
//
//	PrivateLinkServiceConnectionStateArgs{...}
type PrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput
	ToPrivateLinkServiceConnectionStateOutputWithContext(context.Context) PrivateLinkServiceConnectionStateOutput
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateArgs struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return i.ToPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponse struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Redis cache access keys.
type RedisAccessKeysResponse struct {
	// The current primary key that clients can use to authenticate with Redis cache.
	PrimaryKey string `pulumi:"primaryKey"`
	// The current secondary key that clients can use to authenticate with Redis cache.
	SecondaryKey string `pulumi:"secondaryKey"`
}

// Redis cache access keys.
type RedisAccessKeysResponseOutput struct{ *pulumi.OutputState }

func (RedisAccessKeysResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisAccessKeysResponse)(nil)).Elem()
}

func (o RedisAccessKeysResponseOutput) ToRedisAccessKeysResponseOutput() RedisAccessKeysResponseOutput {
	return o
}

func (o RedisAccessKeysResponseOutput) ToRedisAccessKeysResponseOutputWithContext(ctx context.Context) RedisAccessKeysResponseOutput {
	return o
}

// The current primary key that clients can use to authenticate with Redis cache.
func (o RedisAccessKeysResponseOutput) PrimaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v RedisAccessKeysResponse) string { return v.PrimaryKey }).(pulumi.StringOutput)
}

// The current secondary key that clients can use to authenticate with Redis cache.
func (o RedisAccessKeysResponseOutput) SecondaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v RedisAccessKeysResponse) string { return v.SecondaryKey }).(pulumi.StringOutput)
}

// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
type RedisCommonPropertiesRedisConfiguration struct {
	// First storage account connection string
	AofStorageConnectionString0 *string `pulumi:"aofStorageConnectionString0"`
	// Second storage account connection string
	AofStorageConnectionString1 *string `pulumi:"aofStorageConnectionString1"`
	// Value in megabytes reserved for fragmentation per shard
	MaxfragmentationmemoryReserved *string `pulumi:"maxfragmentationmemoryReserved"`
	// Value in megabytes reserved for non-cache usage per shard e.g. failover.
	MaxmemoryDelta *string `pulumi:"maxmemoryDelta"`
	// The eviction strategy used when your data won't fit within its memory limit.
	MaxmemoryPolicy *string `pulumi:"maxmemoryPolicy"`
	// Value in megabytes reserved for non-cache usage per shard e.g. failover.
	MaxmemoryReserved *string `pulumi:"maxmemoryReserved"`
	// Specifies whether the rdb backup is enabled
	RdbBackupEnabled *string `pulumi:"rdbBackupEnabled"`
	// Specifies the frequency for creating rdb backup
	RdbBackupFrequency *string `pulumi:"rdbBackupFrequency"`
	// Specifies the maximum number of snapshots for rdb backup
	RdbBackupMaxSnapshotCount *string `pulumi:"rdbBackupMaxSnapshotCount"`
	// The storage account connection string for storing rdb file
	RdbStorageConnectionString *string `pulumi:"rdbStorageConnectionString"`
}

// RedisCommonPropertiesRedisConfigurationInput is an input type that accepts RedisCommonPropertiesRedisConfigurationArgs and RedisCommonPropertiesRedisConfigurationOutput values.
// You can construct a concrete instance of `RedisCommonPropertiesRedisConfigurationInput` via:
//
//	RedisCommonPropertiesRedisConfigurationArgs{...}
type RedisCommonPropertiesRedisConfigurationInput interface {
	pulumi.Input

	ToRedisCommonPropertiesRedisConfigurationOutput() RedisCommonPropertiesRedisConfigurationOutput
	ToRedisCommonPropertiesRedisConfigurationOutputWithContext(context.Context) RedisCommonPropertiesRedisConfigurationOutput
}

// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
type RedisCommonPropertiesRedisConfigurationArgs struct {
	// First storage account connection string
	AofStorageConnectionString0 pulumi.StringPtrInput `pulumi:"aofStorageConnectionString0"`
	// Second storage account connection string
	AofStorageConnectionString1 pulumi.StringPtrInput `pulumi:"aofStorageConnectionString1"`
	// Value in megabytes reserved for fragmentation per shard
	MaxfragmentationmemoryReserved pulumi.StringPtrInput `pulumi:"maxfragmentationmemoryReserved"`
	// Value in megabytes reserved for non-cache usage per shard e.g. failover.
	MaxmemoryDelta pulumi.StringPtrInput `pulumi:"maxmemoryDelta"`
	// The eviction strategy used when your data won't fit within its memory limit.
	MaxmemoryPolicy pulumi.StringPtrInput `pulumi:"maxmemoryPolicy"`
	// Value in megabytes reserved for non-cache usage per shard e.g. failover.
	MaxmemoryReserved pulumi.StringPtrInput `pulumi:"maxmemoryReserved"`
	// Specifies whether the rdb backup is enabled
	RdbBackupEnabled pulumi.StringPtrInput `pulumi:"rdbBackupEnabled"`
	// Specifies the frequency for creating rdb backup
	RdbBackupFrequency pulumi.StringPtrInput `pulumi:"rdbBackupFrequency"`
	// Specifies the maximum number of snapshots for rdb backup
	RdbBackupMaxSnapshotCount pulumi.StringPtrInput `pulumi:"rdbBackupMaxSnapshotCount"`
	// The storage account connection string for storing rdb file
	RdbStorageConnectionString pulumi.StringPtrInput `pulumi:"rdbStorageConnectionString"`
}

func (RedisCommonPropertiesRedisConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisCommonPropertiesRedisConfiguration)(nil)).Elem()
}

func (i RedisCommonPropertiesRedisConfigurationArgs) ToRedisCommonPropertiesRedisConfigurationOutput() RedisCommonPropertiesRedisConfigurationOutput {
	return i.ToRedisCommonPropertiesRedisConfigurationOutputWithContext(context.Background())
}

func (i RedisCommonPropertiesRedisConfigurationArgs) ToRedisCommonPropertiesRedisConfigurationOutputWithContext(ctx context.Context) RedisCommonPropertiesRedisConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisCommonPropertiesRedisConfigurationOutput)
}

func (i RedisCommonPropertiesRedisConfigurationArgs) ToRedisCommonPropertiesRedisConfigurationPtrOutput() RedisCommonPropertiesRedisConfigurationPtrOutput {
	return i.ToRedisCommonPropertiesRedisConfigurationPtrOutputWithContext(context.Background())
}

func (i RedisCommonPropertiesRedisConfigurationArgs) ToRedisCommonPropertiesRedisConfigurationPtrOutputWithContext(ctx context.Context) RedisCommonPropertiesRedisConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisCommonPropertiesRedisConfigurationOutput).ToRedisCommonPropertiesRedisConfigurationPtrOutputWithContext(ctx)
}

// RedisCommonPropertiesRedisConfigurationPtrInput is an input type that accepts RedisCommonPropertiesRedisConfigurationArgs, RedisCommonPropertiesRedisConfigurationPtr and RedisCommonPropertiesRedisConfigurationPtrOutput values.
// You can construct a concrete instance of `RedisCommonPropertiesRedisConfigurationPtrInput` via:
//
//	        RedisCommonPropertiesRedisConfigurationArgs{...}
//
//	or:
//
//	        nil
type RedisCommonPropertiesRedisConfigurationPtrInput interface {
	pulumi.Input

	ToRedisCommonPropertiesRedisConfigurationPtrOutput() RedisCommonPropertiesRedisConfigurationPtrOutput
	ToRedisCommonPropertiesRedisConfigurationPtrOutputWithContext(context.Context) RedisCommonPropertiesRedisConfigurationPtrOutput
}

type redisCommonPropertiesRedisConfigurationPtrType RedisCommonPropertiesRedisConfigurationArgs

func RedisCommonPropertiesRedisConfigurationPtr(v *RedisCommonPropertiesRedisConfigurationArgs) RedisCommonPropertiesRedisConfigurationPtrInput {
	return (*redisCommonPropertiesRedisConfigurationPtrType)(v)
}

func (*redisCommonPropertiesRedisConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisCommonPropertiesRedisConfiguration)(nil)).Elem()
}

func (i *redisCommonPropertiesRedisConfigurationPtrType) ToRedisCommonPropertiesRedisConfigurationPtrOutput() RedisCommonPropertiesRedisConfigurationPtrOutput {
	return i.ToRedisCommonPropertiesRedisConfigurationPtrOutputWithContext(context.Background())
}

func (i *redisCommonPropertiesRedisConfigurationPtrType) ToRedisCommonPropertiesRedisConfigurationPtrOutputWithContext(ctx context.Context) RedisCommonPropertiesRedisConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisCommonPropertiesRedisConfigurationPtrOutput)
}

// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
type RedisCommonPropertiesRedisConfigurationOutput struct{ *pulumi.OutputState }

func (RedisCommonPropertiesRedisConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisCommonPropertiesRedisConfiguration)(nil)).Elem()
}

func (o RedisCommonPropertiesRedisConfigurationOutput) ToRedisCommonPropertiesRedisConfigurationOutput() RedisCommonPropertiesRedisConfigurationOutput {
	return o
}

func (o RedisCommonPropertiesRedisConfigurationOutput) ToRedisCommonPropertiesRedisConfigurationOutputWithContext(ctx context.Context) RedisCommonPropertiesRedisConfigurationOutput {
	return o
}

func (o RedisCommonPropertiesRedisConfigurationOutput) ToRedisCommonPropertiesRedisConfigurationPtrOutput() RedisCommonPropertiesRedisConfigurationPtrOutput {
	return o.ToRedisCommonPropertiesRedisConfigurationPtrOutputWithContext(context.Background())
}

func (o RedisCommonPropertiesRedisConfigurationOutput) ToRedisCommonPropertiesRedisConfigurationPtrOutputWithContext(ctx context.Context) RedisCommonPropertiesRedisConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedisCommonPropertiesRedisConfiguration) *RedisCommonPropertiesRedisConfiguration {
		return &v
	}).(RedisCommonPropertiesRedisConfigurationPtrOutput)
}

// First storage account connection string
func (o RedisCommonPropertiesRedisConfigurationOutput) AofStorageConnectionString0() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesRedisConfiguration) *string { return v.AofStorageConnectionString0 }).(pulumi.StringPtrOutput)
}

// Second storage account connection string
func (o RedisCommonPropertiesRedisConfigurationOutput) AofStorageConnectionString1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesRedisConfiguration) *string { return v.AofStorageConnectionString1 }).(pulumi.StringPtrOutput)
}

// Value in megabytes reserved for fragmentation per shard
func (o RedisCommonPropertiesRedisConfigurationOutput) MaxfragmentationmemoryReserved() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesRedisConfiguration) *string { return v.MaxfragmentationmemoryReserved }).(pulumi.StringPtrOutput)
}

// Value in megabytes reserved for non-cache usage per shard e.g. failover.
func (o RedisCommonPropertiesRedisConfigurationOutput) MaxmemoryDelta() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesRedisConfiguration) *string { return v.MaxmemoryDelta }).(pulumi.StringPtrOutput)
}

// The eviction strategy used when your data won't fit within its memory limit.
func (o RedisCommonPropertiesRedisConfigurationOutput) MaxmemoryPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesRedisConfiguration) *string { return v.MaxmemoryPolicy }).(pulumi.StringPtrOutput)
}

// Value in megabytes reserved for non-cache usage per shard e.g. failover.
func (o RedisCommonPropertiesRedisConfigurationOutput) MaxmemoryReserved() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesRedisConfiguration) *string { return v.MaxmemoryReserved }).(pulumi.StringPtrOutput)
}

// Specifies whether the rdb backup is enabled
func (o RedisCommonPropertiesRedisConfigurationOutput) RdbBackupEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesRedisConfiguration) *string { return v.RdbBackupEnabled }).(pulumi.StringPtrOutput)
}

// Specifies the frequency for creating rdb backup
func (o RedisCommonPropertiesRedisConfigurationOutput) RdbBackupFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesRedisConfiguration) *string { return v.RdbBackupFrequency }).(pulumi.StringPtrOutput)
}

// Specifies the maximum number of snapshots for rdb backup
func (o RedisCommonPropertiesRedisConfigurationOutput) RdbBackupMaxSnapshotCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesRedisConfiguration) *string { return v.RdbBackupMaxSnapshotCount }).(pulumi.StringPtrOutput)
}

// The storage account connection string for storing rdb file
func (o RedisCommonPropertiesRedisConfigurationOutput) RdbStorageConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesRedisConfiguration) *string { return v.RdbStorageConnectionString }).(pulumi.StringPtrOutput)
}

type RedisCommonPropertiesRedisConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RedisCommonPropertiesRedisConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisCommonPropertiesRedisConfiguration)(nil)).Elem()
}

func (o RedisCommonPropertiesRedisConfigurationPtrOutput) ToRedisCommonPropertiesRedisConfigurationPtrOutput() RedisCommonPropertiesRedisConfigurationPtrOutput {
	return o
}

func (o RedisCommonPropertiesRedisConfigurationPtrOutput) ToRedisCommonPropertiesRedisConfigurationPtrOutputWithContext(ctx context.Context) RedisCommonPropertiesRedisConfigurationPtrOutput {
	return o
}

func (o RedisCommonPropertiesRedisConfigurationPtrOutput) Elem() RedisCommonPropertiesRedisConfigurationOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesRedisConfiguration) RedisCommonPropertiesRedisConfiguration {
		if v != nil {
			return *v
		}
		var ret RedisCommonPropertiesRedisConfiguration
		return ret
	}).(RedisCommonPropertiesRedisConfigurationOutput)
}

// First storage account connection string
func (o RedisCommonPropertiesRedisConfigurationPtrOutput) AofStorageConnectionString0() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AofStorageConnectionString0
	}).(pulumi.StringPtrOutput)
}

// Second storage account connection string
func (o RedisCommonPropertiesRedisConfigurationPtrOutput) AofStorageConnectionString1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AofStorageConnectionString1
	}).(pulumi.StringPtrOutput)
}

// Value in megabytes reserved for fragmentation per shard
func (o RedisCommonPropertiesRedisConfigurationPtrOutput) MaxfragmentationmemoryReserved() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MaxfragmentationmemoryReserved
	}).(pulumi.StringPtrOutput)
}

// Value in megabytes reserved for non-cache usage per shard e.g. failover.
func (o RedisCommonPropertiesRedisConfigurationPtrOutput) MaxmemoryDelta() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MaxmemoryDelta
	}).(pulumi.StringPtrOutput)
}

// The eviction strategy used when your data won't fit within its memory limit.
func (o RedisCommonPropertiesRedisConfigurationPtrOutput) MaxmemoryPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MaxmemoryPolicy
	}).(pulumi.StringPtrOutput)
}

// Value in megabytes reserved for non-cache usage per shard e.g. failover.
func (o RedisCommonPropertiesRedisConfigurationPtrOutput) MaxmemoryReserved() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MaxmemoryReserved
	}).(pulumi.StringPtrOutput)
}

// Specifies whether the rdb backup is enabled
func (o RedisCommonPropertiesRedisConfigurationPtrOutput) RdbBackupEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RdbBackupEnabled
	}).(pulumi.StringPtrOutput)
}

// Specifies the frequency for creating rdb backup
func (o RedisCommonPropertiesRedisConfigurationPtrOutput) RdbBackupFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RdbBackupFrequency
	}).(pulumi.StringPtrOutput)
}

// Specifies the maximum number of snapshots for rdb backup
func (o RedisCommonPropertiesRedisConfigurationPtrOutput) RdbBackupMaxSnapshotCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RdbBackupMaxSnapshotCount
	}).(pulumi.StringPtrOutput)
}

// The storage account connection string for storing rdb file
func (o RedisCommonPropertiesRedisConfigurationPtrOutput) RdbStorageConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RdbStorageConnectionString
	}).(pulumi.StringPtrOutput)
}

// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
type RedisCommonPropertiesResponseRedisConfiguration struct {
	// First storage account connection string
	AofStorageConnectionString0 *string `pulumi:"aofStorageConnectionString0"`
	// Second storage account connection string
	AofStorageConnectionString1 *string `pulumi:"aofStorageConnectionString1"`
	// The max clients config
	Maxclients string `pulumi:"maxclients"`
	// Value in megabytes reserved for fragmentation per shard
	MaxfragmentationmemoryReserved *string `pulumi:"maxfragmentationmemoryReserved"`
	// Value in megabytes reserved for non-cache usage per shard e.g. failover.
	MaxmemoryDelta *string `pulumi:"maxmemoryDelta"`
	// The eviction strategy used when your data won't fit within its memory limit.
	MaxmemoryPolicy *string `pulumi:"maxmemoryPolicy"`
	// Value in megabytes reserved for non-cache usage per shard e.g. failover.
	MaxmemoryReserved *string `pulumi:"maxmemoryReserved"`
	// Specifies whether the rdb backup is enabled
	RdbBackupEnabled *string `pulumi:"rdbBackupEnabled"`
	// Specifies the frequency for creating rdb backup
	RdbBackupFrequency *string `pulumi:"rdbBackupFrequency"`
	// Specifies the maximum number of snapshots for rdb backup
	RdbBackupMaxSnapshotCount *string `pulumi:"rdbBackupMaxSnapshotCount"`
	// The storage account connection string for storing rdb file
	RdbStorageConnectionString *string `pulumi:"rdbStorageConnectionString"`
}

// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
type RedisCommonPropertiesResponseRedisConfigurationOutput struct{ *pulumi.OutputState }

func (RedisCommonPropertiesResponseRedisConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisCommonPropertiesResponseRedisConfiguration)(nil)).Elem()
}

func (o RedisCommonPropertiesResponseRedisConfigurationOutput) ToRedisCommonPropertiesResponseRedisConfigurationOutput() RedisCommonPropertiesResponseRedisConfigurationOutput {
	return o
}

func (o RedisCommonPropertiesResponseRedisConfigurationOutput) ToRedisCommonPropertiesResponseRedisConfigurationOutputWithContext(ctx context.Context) RedisCommonPropertiesResponseRedisConfigurationOutput {
	return o
}

// First storage account connection string
func (o RedisCommonPropertiesResponseRedisConfigurationOutput) AofStorageConnectionString0() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesResponseRedisConfiguration) *string { return v.AofStorageConnectionString0 }).(pulumi.StringPtrOutput)
}

// Second storage account connection string
func (o RedisCommonPropertiesResponseRedisConfigurationOutput) AofStorageConnectionString1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesResponseRedisConfiguration) *string { return v.AofStorageConnectionString1 }).(pulumi.StringPtrOutput)
}

// The max clients config
func (o RedisCommonPropertiesResponseRedisConfigurationOutput) Maxclients() pulumi.StringOutput {
	return o.ApplyT(func(v RedisCommonPropertiesResponseRedisConfiguration) string { return v.Maxclients }).(pulumi.StringOutput)
}

// Value in megabytes reserved for fragmentation per shard
func (o RedisCommonPropertiesResponseRedisConfigurationOutput) MaxfragmentationmemoryReserved() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesResponseRedisConfiguration) *string {
		return v.MaxfragmentationmemoryReserved
	}).(pulumi.StringPtrOutput)
}

// Value in megabytes reserved for non-cache usage per shard e.g. failover.
func (o RedisCommonPropertiesResponseRedisConfigurationOutput) MaxmemoryDelta() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesResponseRedisConfiguration) *string { return v.MaxmemoryDelta }).(pulumi.StringPtrOutput)
}

// The eviction strategy used when your data won't fit within its memory limit.
func (o RedisCommonPropertiesResponseRedisConfigurationOutput) MaxmemoryPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesResponseRedisConfiguration) *string { return v.MaxmemoryPolicy }).(pulumi.StringPtrOutput)
}

// Value in megabytes reserved for non-cache usage per shard e.g. failover.
func (o RedisCommonPropertiesResponseRedisConfigurationOutput) MaxmemoryReserved() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesResponseRedisConfiguration) *string { return v.MaxmemoryReserved }).(pulumi.StringPtrOutput)
}

// Specifies whether the rdb backup is enabled
func (o RedisCommonPropertiesResponseRedisConfigurationOutput) RdbBackupEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesResponseRedisConfiguration) *string { return v.RdbBackupEnabled }).(pulumi.StringPtrOutput)
}

// Specifies the frequency for creating rdb backup
func (o RedisCommonPropertiesResponseRedisConfigurationOutput) RdbBackupFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesResponseRedisConfiguration) *string { return v.RdbBackupFrequency }).(pulumi.StringPtrOutput)
}

// Specifies the maximum number of snapshots for rdb backup
func (o RedisCommonPropertiesResponseRedisConfigurationOutput) RdbBackupMaxSnapshotCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesResponseRedisConfiguration) *string { return v.RdbBackupMaxSnapshotCount }).(pulumi.StringPtrOutput)
}

// The storage account connection string for storing rdb file
func (o RedisCommonPropertiesResponseRedisConfigurationOutput) RdbStorageConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCommonPropertiesResponseRedisConfiguration) *string { return v.RdbStorageConnectionString }).(pulumi.StringPtrOutput)
}

type RedisCommonPropertiesResponseRedisConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RedisCommonPropertiesResponseRedisConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisCommonPropertiesResponseRedisConfiguration)(nil)).Elem()
}

func (o RedisCommonPropertiesResponseRedisConfigurationPtrOutput) ToRedisCommonPropertiesResponseRedisConfigurationPtrOutput() RedisCommonPropertiesResponseRedisConfigurationPtrOutput {
	return o
}

func (o RedisCommonPropertiesResponseRedisConfigurationPtrOutput) ToRedisCommonPropertiesResponseRedisConfigurationPtrOutputWithContext(ctx context.Context) RedisCommonPropertiesResponseRedisConfigurationPtrOutput {
	return o
}

func (o RedisCommonPropertiesResponseRedisConfigurationPtrOutput) Elem() RedisCommonPropertiesResponseRedisConfigurationOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesResponseRedisConfiguration) RedisCommonPropertiesResponseRedisConfiguration {
		if v != nil {
			return *v
		}
		var ret RedisCommonPropertiesResponseRedisConfiguration
		return ret
	}).(RedisCommonPropertiesResponseRedisConfigurationOutput)
}

// First storage account connection string
func (o RedisCommonPropertiesResponseRedisConfigurationPtrOutput) AofStorageConnectionString0() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesResponseRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AofStorageConnectionString0
	}).(pulumi.StringPtrOutput)
}

// Second storage account connection string
func (o RedisCommonPropertiesResponseRedisConfigurationPtrOutput) AofStorageConnectionString1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesResponseRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AofStorageConnectionString1
	}).(pulumi.StringPtrOutput)
}

// The max clients config
func (o RedisCommonPropertiesResponseRedisConfigurationPtrOutput) Maxclients() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesResponseRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Maxclients
	}).(pulumi.StringPtrOutput)
}

// Value in megabytes reserved for fragmentation per shard
func (o RedisCommonPropertiesResponseRedisConfigurationPtrOutput) MaxfragmentationmemoryReserved() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesResponseRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MaxfragmentationmemoryReserved
	}).(pulumi.StringPtrOutput)
}

// Value in megabytes reserved for non-cache usage per shard e.g. failover.
func (o RedisCommonPropertiesResponseRedisConfigurationPtrOutput) MaxmemoryDelta() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesResponseRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MaxmemoryDelta
	}).(pulumi.StringPtrOutput)
}

// The eviction strategy used when your data won't fit within its memory limit.
func (o RedisCommonPropertiesResponseRedisConfigurationPtrOutput) MaxmemoryPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesResponseRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MaxmemoryPolicy
	}).(pulumi.StringPtrOutput)
}

// Value in megabytes reserved for non-cache usage per shard e.g. failover.
func (o RedisCommonPropertiesResponseRedisConfigurationPtrOutput) MaxmemoryReserved() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesResponseRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MaxmemoryReserved
	}).(pulumi.StringPtrOutput)
}

// Specifies whether the rdb backup is enabled
func (o RedisCommonPropertiesResponseRedisConfigurationPtrOutput) RdbBackupEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesResponseRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RdbBackupEnabled
	}).(pulumi.StringPtrOutput)
}

// Specifies the frequency for creating rdb backup
func (o RedisCommonPropertiesResponseRedisConfigurationPtrOutput) RdbBackupFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesResponseRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RdbBackupFrequency
	}).(pulumi.StringPtrOutput)
}

// Specifies the maximum number of snapshots for rdb backup
func (o RedisCommonPropertiesResponseRedisConfigurationPtrOutput) RdbBackupMaxSnapshotCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesResponseRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RdbBackupMaxSnapshotCount
	}).(pulumi.StringPtrOutput)
}

// The storage account connection string for storing rdb file
func (o RedisCommonPropertiesResponseRedisConfigurationPtrOutput) RdbStorageConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCommonPropertiesResponseRedisConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RdbStorageConnectionString
	}).(pulumi.StringPtrOutput)
}

// Details of single instance of redis.
type RedisInstanceDetailsResponse struct {
	// Specifies whether the instance is a master node.
	IsMaster bool `pulumi:"isMaster"`
	// If enableNonSslPort is true, provides Redis instance Non-SSL port.
	NonSslPort int `pulumi:"nonSslPort"`
	// If clustering is enabled, the Shard ID of Redis Instance
	ShardId int `pulumi:"shardId"`
	// Redis instance SSL port.
	SslPort int `pulumi:"sslPort"`
	// If the Cache uses availability zones, specifies availability zone where this instance is located.
	Zone string `pulumi:"zone"`
}

// Details of single instance of redis.
type RedisInstanceDetailsResponseOutput struct{ *pulumi.OutputState }

func (RedisInstanceDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisInstanceDetailsResponse)(nil)).Elem()
}

func (o RedisInstanceDetailsResponseOutput) ToRedisInstanceDetailsResponseOutput() RedisInstanceDetailsResponseOutput {
	return o
}

func (o RedisInstanceDetailsResponseOutput) ToRedisInstanceDetailsResponseOutputWithContext(ctx context.Context) RedisInstanceDetailsResponseOutput {
	return o
}

// Specifies whether the instance is a master node.
func (o RedisInstanceDetailsResponseOutput) IsMaster() pulumi.BoolOutput {
	return o.ApplyT(func(v RedisInstanceDetailsResponse) bool { return v.IsMaster }).(pulumi.BoolOutput)
}

// If enableNonSslPort is true, provides Redis instance Non-SSL port.
func (o RedisInstanceDetailsResponseOutput) NonSslPort() pulumi.IntOutput {
	return o.ApplyT(func(v RedisInstanceDetailsResponse) int { return v.NonSslPort }).(pulumi.IntOutput)
}

// If clustering is enabled, the Shard ID of Redis Instance
func (o RedisInstanceDetailsResponseOutput) ShardId() pulumi.IntOutput {
	return o.ApplyT(func(v RedisInstanceDetailsResponse) int { return v.ShardId }).(pulumi.IntOutput)
}

// Redis instance SSL port.
func (o RedisInstanceDetailsResponseOutput) SslPort() pulumi.IntOutput {
	return o.ApplyT(func(v RedisInstanceDetailsResponse) int { return v.SslPort }).(pulumi.IntOutput)
}

// If the Cache uses availability zones, specifies availability zone where this instance is located.
func (o RedisInstanceDetailsResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v RedisInstanceDetailsResponse) string { return v.Zone }).(pulumi.StringOutput)
}

type RedisInstanceDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (RedisInstanceDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisInstanceDetailsResponse)(nil)).Elem()
}

func (o RedisInstanceDetailsResponseArrayOutput) ToRedisInstanceDetailsResponseArrayOutput() RedisInstanceDetailsResponseArrayOutput {
	return o
}

func (o RedisInstanceDetailsResponseArrayOutput) ToRedisInstanceDetailsResponseArrayOutputWithContext(ctx context.Context) RedisInstanceDetailsResponseArrayOutput {
	return o
}

func (o RedisInstanceDetailsResponseArrayOutput) Index(i pulumi.IntInput) RedisInstanceDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisInstanceDetailsResponse {
		return vs[0].([]RedisInstanceDetailsResponse)[vs[1].(int)]
	}).(RedisInstanceDetailsResponseOutput)
}

// Linked server Id
type RedisLinkedServerResponse struct {
	// Linked server Id.
	Id string `pulumi:"id"`
}

// Linked server Id
type RedisLinkedServerResponseOutput struct{ *pulumi.OutputState }

func (RedisLinkedServerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisLinkedServerResponse)(nil)).Elem()
}

func (o RedisLinkedServerResponseOutput) ToRedisLinkedServerResponseOutput() RedisLinkedServerResponseOutput {
	return o
}

func (o RedisLinkedServerResponseOutput) ToRedisLinkedServerResponseOutputWithContext(ctx context.Context) RedisLinkedServerResponseOutput {
	return o
}

// Linked server Id.
func (o RedisLinkedServerResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RedisLinkedServerResponse) string { return v.Id }).(pulumi.StringOutput)
}

type RedisLinkedServerResponseArrayOutput struct{ *pulumi.OutputState }

func (RedisLinkedServerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisLinkedServerResponse)(nil)).Elem()
}

func (o RedisLinkedServerResponseArrayOutput) ToRedisLinkedServerResponseArrayOutput() RedisLinkedServerResponseArrayOutput {
	return o
}

func (o RedisLinkedServerResponseArrayOutput) ToRedisLinkedServerResponseArrayOutputWithContext(ctx context.Context) RedisLinkedServerResponseArrayOutput {
	return o
}

func (o RedisLinkedServerResponseArrayOutput) Index(i pulumi.IntInput) RedisLinkedServerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisLinkedServerResponse {
		return vs[0].([]RedisLinkedServerResponse)[vs[1].(int)]
	}).(RedisLinkedServerResponseOutput)
}

// Patch schedule entry for a Premium Redis Cache.
type ScheduleEntry struct {
	// Day of the week when a cache can be patched.
	DayOfWeek DayOfWeek `pulumi:"dayOfWeek"`
	// ISO8601 timespan specifying how much time cache patching can take.
	MaintenanceWindow *string `pulumi:"maintenanceWindow"`
	// Start hour after which cache patching can start.
	StartHourUtc int `pulumi:"startHourUtc"`
}

// ScheduleEntryInput is an input type that accepts ScheduleEntryArgs and ScheduleEntryOutput values.
// You can construct a concrete instance of `ScheduleEntryInput` via:
//
//	ScheduleEntryArgs{...}
type ScheduleEntryInput interface {
	pulumi.Input

	ToScheduleEntryOutput() ScheduleEntryOutput
	ToScheduleEntryOutputWithContext(context.Context) ScheduleEntryOutput
}

// Patch schedule entry for a Premium Redis Cache.
type ScheduleEntryArgs struct {
	// Day of the week when a cache can be patched.
	DayOfWeek DayOfWeekInput `pulumi:"dayOfWeek"`
	// ISO8601 timespan specifying how much time cache patching can take.
	MaintenanceWindow pulumi.StringPtrInput `pulumi:"maintenanceWindow"`
	// Start hour after which cache patching can start.
	StartHourUtc pulumi.IntInput `pulumi:"startHourUtc"`
}

func (ScheduleEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleEntry)(nil)).Elem()
}

func (i ScheduleEntryArgs) ToScheduleEntryOutput() ScheduleEntryOutput {
	return i.ToScheduleEntryOutputWithContext(context.Background())
}

func (i ScheduleEntryArgs) ToScheduleEntryOutputWithContext(ctx context.Context) ScheduleEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleEntryOutput)
}

// ScheduleEntryArrayInput is an input type that accepts ScheduleEntryArray and ScheduleEntryArrayOutput values.
// You can construct a concrete instance of `ScheduleEntryArrayInput` via:
//
//	ScheduleEntryArray{ ScheduleEntryArgs{...} }
type ScheduleEntryArrayInput interface {
	pulumi.Input

	ToScheduleEntryArrayOutput() ScheduleEntryArrayOutput
	ToScheduleEntryArrayOutputWithContext(context.Context) ScheduleEntryArrayOutput
}

type ScheduleEntryArray []ScheduleEntryInput

func (ScheduleEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleEntry)(nil)).Elem()
}

func (i ScheduleEntryArray) ToScheduleEntryArrayOutput() ScheduleEntryArrayOutput {
	return i.ToScheduleEntryArrayOutputWithContext(context.Background())
}

func (i ScheduleEntryArray) ToScheduleEntryArrayOutputWithContext(ctx context.Context) ScheduleEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleEntryArrayOutput)
}

// Patch schedule entry for a Premium Redis Cache.
type ScheduleEntryOutput struct{ *pulumi.OutputState }

func (ScheduleEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleEntry)(nil)).Elem()
}

func (o ScheduleEntryOutput) ToScheduleEntryOutput() ScheduleEntryOutput {
	return o
}

func (o ScheduleEntryOutput) ToScheduleEntryOutputWithContext(ctx context.Context) ScheduleEntryOutput {
	return o
}

// Day of the week when a cache can be patched.
func (o ScheduleEntryOutput) DayOfWeek() DayOfWeekOutput {
	return o.ApplyT(func(v ScheduleEntry) DayOfWeek { return v.DayOfWeek }).(DayOfWeekOutput)
}

// ISO8601 timespan specifying how much time cache patching can take.
func (o ScheduleEntryOutput) MaintenanceWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleEntry) *string { return v.MaintenanceWindow }).(pulumi.StringPtrOutput)
}

// Start hour after which cache patching can start.
func (o ScheduleEntryOutput) StartHourUtc() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleEntry) int { return v.StartHourUtc }).(pulumi.IntOutput)
}

type ScheduleEntryArrayOutput struct{ *pulumi.OutputState }

func (ScheduleEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleEntry)(nil)).Elem()
}

func (o ScheduleEntryArrayOutput) ToScheduleEntryArrayOutput() ScheduleEntryArrayOutput {
	return o
}

func (o ScheduleEntryArrayOutput) ToScheduleEntryArrayOutputWithContext(ctx context.Context) ScheduleEntryArrayOutput {
	return o
}

func (o ScheduleEntryArrayOutput) Index(i pulumi.IntInput) ScheduleEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleEntry {
		return vs[0].([]ScheduleEntry)[vs[1].(int)]
	}).(ScheduleEntryOutput)
}

// Patch schedule entry for a Premium Redis Cache.
type ScheduleEntryResponse struct {
	// Day of the week when a cache can be patched.
	DayOfWeek string `pulumi:"dayOfWeek"`
	// ISO8601 timespan specifying how much time cache patching can take.
	MaintenanceWindow *string `pulumi:"maintenanceWindow"`
	// Start hour after which cache patching can start.
	StartHourUtc int `pulumi:"startHourUtc"`
}

// Patch schedule entry for a Premium Redis Cache.
type ScheduleEntryResponseOutput struct{ *pulumi.OutputState }

func (ScheduleEntryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleEntryResponse)(nil)).Elem()
}

func (o ScheduleEntryResponseOutput) ToScheduleEntryResponseOutput() ScheduleEntryResponseOutput {
	return o
}

func (o ScheduleEntryResponseOutput) ToScheduleEntryResponseOutputWithContext(ctx context.Context) ScheduleEntryResponseOutput {
	return o
}

// Day of the week when a cache can be patched.
func (o ScheduleEntryResponseOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleEntryResponse) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// ISO8601 timespan specifying how much time cache patching can take.
func (o ScheduleEntryResponseOutput) MaintenanceWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleEntryResponse) *string { return v.MaintenanceWindow }).(pulumi.StringPtrOutput)
}

// Start hour after which cache patching can start.
func (o ScheduleEntryResponseOutput) StartHourUtc() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleEntryResponse) int { return v.StartHourUtc }).(pulumi.IntOutput)
}

type ScheduleEntryResponseArrayOutput struct{ *pulumi.OutputState }

func (ScheduleEntryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleEntryResponse)(nil)).Elem()
}

func (o ScheduleEntryResponseArrayOutput) ToScheduleEntryResponseArrayOutput() ScheduleEntryResponseArrayOutput {
	return o
}

func (o ScheduleEntryResponseArrayOutput) ToScheduleEntryResponseArrayOutputWithContext(ctx context.Context) ScheduleEntryResponseArrayOutput {
	return o
}

func (o ScheduleEntryResponseArrayOutput) Index(i pulumi.IntInput) ScheduleEntryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleEntryResponse {
		return vs[0].([]ScheduleEntryResponse)[vs[1].(int)]
	}).(ScheduleEntryResponseOutput)
}

// SKU parameters supplied to the create Redis operation.
type Sku struct {
	// The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
	Capacity int `pulumi:"capacity"`
	// The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
	Family string `pulumi:"family"`
	// The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
	Name string `pulumi:"name"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// SKU parameters supplied to the create Redis operation.
type SkuArgs struct {
	// The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
	Capacity pulumi.IntInput `pulumi:"capacity"`
	// The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
	Family pulumi.StringInput `pulumi:"family"`
	// The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
	Name pulumi.StringInput `pulumi:"name"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

// SKU parameters supplied to the create Redis operation.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

// The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
func (o SkuOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v Sku) int { return v.Capacity }).(pulumi.IntOutput)
}

// The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
func (o SkuOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Family }).(pulumi.StringOutput)
}

// The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

// SKU parameters supplied to the create Redis operation.
type SkuResponse struct {
	// The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
	Capacity int `pulumi:"capacity"`
	// The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
	Family string `pulumi:"family"`
	// The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
	Name string `pulumi:"name"`
}

// SKU parameters supplied to the create Redis operation.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

// The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
func (o SkuResponseOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v SkuResponse) int { return v.Capacity }).(pulumi.IntOutput)
}

// The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
func (o SkuResponseOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Family }).(pulumi.StringOutput)
}

// The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(EnterpriseSkuOutput{})
	pulumi.RegisterOutputType(EnterpriseSkuResponseOutput{})
	pulumi.RegisterOutputType(ModuleOutput{})
	pulumi.RegisterOutputType(ModuleArrayOutput{})
	pulumi.RegisterOutputType(ModuleResponseOutput{})
	pulumi.RegisterOutputType(ModuleResponseArrayOutput{})
	pulumi.RegisterOutputType(PersistenceOutput{})
	pulumi.RegisterOutputType(PersistencePtrOutput{})
	pulumi.RegisterOutputType(PersistenceResponseOutput{})
	pulumi.RegisterOutputType(PersistenceResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(RedisAccessKeysResponseOutput{})
	pulumi.RegisterOutputType(RedisCommonPropertiesRedisConfigurationOutput{})
	pulumi.RegisterOutputType(RedisCommonPropertiesRedisConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RedisCommonPropertiesResponseRedisConfigurationOutput{})
	pulumi.RegisterOutputType(RedisCommonPropertiesResponseRedisConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RedisInstanceDetailsResponseOutput{})
	pulumi.RegisterOutputType(RedisInstanceDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(RedisLinkedServerResponseOutput{})
	pulumi.RegisterOutputType(RedisLinkedServerResponseArrayOutput{})
	pulumi.RegisterOutputType(ScheduleEntryOutput{})
	pulumi.RegisterOutputType(ScheduleEntryArrayOutput{})
	pulumi.RegisterOutputType(ScheduleEntryResponseOutput{})
	pulumi.RegisterOutputType(ScheduleEntryResponseArrayOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
}
