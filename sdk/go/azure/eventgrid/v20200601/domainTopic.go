// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200601

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Domain Topic.
type DomainTopic struct {
	pulumi.CustomResourceState

	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of the domain topic.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The system metadata relating to Domain Topic resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDomainTopic registers a new resource with the given unique name, arguments, and options.
func NewDomainTopic(ctx *pulumi.Context,
	name string, args *DomainTopicArgs, opts ...pulumi.ResourceOption) (*DomainTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:eventgrid:DomainTopic"),
		},
		{
			Type: pulumi.String("azure-native:eventgrid/v20190201preview:DomainTopic"),
		},
		{
			Type: pulumi.String("azure-native:eventgrid/v20190601:DomainTopic"),
		},
		{
			Type: pulumi.String("azure-native:eventgrid/v20200101preview:DomainTopic"),
		},
		{
			Type: pulumi.String("azure-native:eventgrid/v20200401preview:DomainTopic"),
		},
		{
			Type: pulumi.String("azure-native:eventgrid/v20201015preview:DomainTopic"),
		},
		{
			Type: pulumi.String("azure-native:eventgrid/v20210601preview:DomainTopic"),
		},
		{
			Type: pulumi.String("azure-native:eventgrid/v20211015preview:DomainTopic"),
		},
		{
			Type: pulumi.String("azure-native:eventgrid/v20211201:DomainTopic"),
		},
		{
			Type: pulumi.String("azure-native:eventgrid/v20220615:DomainTopic"),
		},
	})
	opts = append(opts, aliases)
	var resource DomainTopic
	err := ctx.RegisterResource("azure-native:eventgrid/v20200601:DomainTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainTopic gets an existing DomainTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainTopicState, opts ...pulumi.ResourceOption) (*DomainTopic, error) {
	var resource DomainTopic
	err := ctx.ReadResource("azure-native:eventgrid/v20200601:DomainTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainTopic resources.
type domainTopicState struct {
}

type DomainTopicState struct {
}

func (DomainTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainTopicState)(nil)).Elem()
}

type domainTopicArgs struct {
	// Name of the domain.
	DomainName string `pulumi:"domainName"`
	// Name of the domain topic.
	DomainTopicName *string `pulumi:"domainTopicName"`
	// The name of the resource group within the user's subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a DomainTopic resource.
type DomainTopicArgs struct {
	// Name of the domain.
	DomainName pulumi.StringInput
	// Name of the domain topic.
	DomainTopicName pulumi.StringPtrInput
	// The name of the resource group within the user's subscription.
	ResourceGroupName pulumi.StringInput
}

func (DomainTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainTopicArgs)(nil)).Elem()
}

type DomainTopicInput interface {
	pulumi.Input

	ToDomainTopicOutput() DomainTopicOutput
	ToDomainTopicOutputWithContext(ctx context.Context) DomainTopicOutput
}

func (*DomainTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainTopic)(nil)).Elem()
}

func (i *DomainTopic) ToDomainTopicOutput() DomainTopicOutput {
	return i.ToDomainTopicOutputWithContext(context.Background())
}

func (i *DomainTopic) ToDomainTopicOutputWithContext(ctx context.Context) DomainTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTopicOutput)
}

type DomainTopicOutput struct{ *pulumi.OutputState }

func (DomainTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainTopic)(nil)).Elem()
}

func (o DomainTopicOutput) ToDomainTopicOutput() DomainTopicOutput {
	return o
}

func (o DomainTopicOutput) ToDomainTopicOutputWithContext(ctx context.Context) DomainTopicOutput {
	return o
}

// Name of the resource.
func (o DomainTopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainTopic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the domain topic.
func (o DomainTopicOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainTopic) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The system metadata relating to Domain Topic resource.
func (o DomainTopicOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *DomainTopic) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Type of the resource.
func (o DomainTopicOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainTopic) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(DomainTopicOutput{})
}
