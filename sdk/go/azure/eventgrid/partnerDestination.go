// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventgrid

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Event Grid Partner Destination.
// API Version: 2021-10-15-preview.
type PartnerDestination struct {
	pulumi.CustomResourceState

	// Activation state of the partner destination.
	ActivationState pulumi.StringPtrOutput `pulumi:"activationState"`
	// Endpoint Base URL of the partner destination
	EndpointBaseUrl pulumi.StringPtrOutput `pulumi:"endpointBaseUrl"`
	// Endpoint context associated with this partner destination.
	EndpointServiceContext pulumi.StringPtrOutput `pulumi:"endpointServiceContext"`
	// Expiration time of the partner destination. If this timer expires and the partner destination was never activated,
	// the partner destination and corresponding channel are deleted.
	ExpirationTimeIfNotActivatedUtc pulumi.StringPtrOutput `pulumi:"expirationTimeIfNotActivatedUtc"`
	// Location of the resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// Context or helpful message that can be used during the approval process.
	MessageForActivation pulumi.StringPtrOutput `pulumi:"messageForActivation"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The immutable Id of the corresponding partner registration.
	PartnerRegistrationImmutableId pulumi.StringPtrOutput `pulumi:"partnerRegistrationImmutableId"`
	// Provisioning state of the partner destination.
	ProvisioningState pulumi.StringPtrOutput `pulumi:"provisioningState"`
	// The system metadata relating to Partner Destination resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Tags of the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPartnerDestination registers a new resource with the given unique name, arguments, and options.
func NewPartnerDestination(ctx *pulumi.Context,
	name string, args *PartnerDestinationArgs, opts ...pulumi.ResourceOption) (*PartnerDestination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:eventgrid/v20211015preview:PartnerDestination"),
		},
	})
	opts = append(opts, aliases)
	var resource PartnerDestination
	err := ctx.RegisterResource("azure-native:eventgrid:PartnerDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPartnerDestination gets an existing PartnerDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPartnerDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PartnerDestinationState, opts ...pulumi.ResourceOption) (*PartnerDestination, error) {
	var resource PartnerDestination
	err := ctx.ReadResource("azure-native:eventgrid:PartnerDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PartnerDestination resources.
type partnerDestinationState struct {
}

type PartnerDestinationState struct {
}

func (PartnerDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*partnerDestinationState)(nil)).Elem()
}

type partnerDestinationArgs struct {
	// Activation state of the partner destination.
	ActivationState *string `pulumi:"activationState"`
	// Endpoint Base URL of the partner destination
	EndpointBaseUrl *string `pulumi:"endpointBaseUrl"`
	// Endpoint context associated with this partner destination.
	EndpointServiceContext *string `pulumi:"endpointServiceContext"`
	// Expiration time of the partner destination. If this timer expires and the partner destination was never activated,
	// the partner destination and corresponding channel are deleted.
	ExpirationTimeIfNotActivatedUtc *string `pulumi:"expirationTimeIfNotActivatedUtc"`
	// Location of the resource.
	Location *string `pulumi:"location"`
	// Context or helpful message that can be used during the approval process.
	MessageForActivation *string `pulumi:"messageForActivation"`
	// Name of the partner destination.
	PartnerDestinationName *string `pulumi:"partnerDestinationName"`
	// The immutable Id of the corresponding partner registration.
	PartnerRegistrationImmutableId *string `pulumi:"partnerRegistrationImmutableId"`
	// Provisioning state of the partner destination.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The name of the resource group within the user's subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Tags of the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a PartnerDestination resource.
type PartnerDestinationArgs struct {
	// Activation state of the partner destination.
	ActivationState pulumi.StringPtrInput
	// Endpoint Base URL of the partner destination
	EndpointBaseUrl pulumi.StringPtrInput
	// Endpoint context associated with this partner destination.
	EndpointServiceContext pulumi.StringPtrInput
	// Expiration time of the partner destination. If this timer expires and the partner destination was never activated,
	// the partner destination and corresponding channel are deleted.
	ExpirationTimeIfNotActivatedUtc pulumi.StringPtrInput
	// Location of the resource.
	Location pulumi.StringPtrInput
	// Context or helpful message that can be used during the approval process.
	MessageForActivation pulumi.StringPtrInput
	// Name of the partner destination.
	PartnerDestinationName pulumi.StringPtrInput
	// The immutable Id of the corresponding partner registration.
	PartnerRegistrationImmutableId pulumi.StringPtrInput
	// Provisioning state of the partner destination.
	ProvisioningState pulumi.StringPtrInput
	// The name of the resource group within the user's subscription.
	ResourceGroupName pulumi.StringInput
	// Tags of the resource.
	Tags pulumi.StringMapInput
}

func (PartnerDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*partnerDestinationArgs)(nil)).Elem()
}

type PartnerDestinationInput interface {
	pulumi.Input

	ToPartnerDestinationOutput() PartnerDestinationOutput
	ToPartnerDestinationOutputWithContext(ctx context.Context) PartnerDestinationOutput
}

func (*PartnerDestination) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerDestination)(nil)).Elem()
}

func (i *PartnerDestination) ToPartnerDestinationOutput() PartnerDestinationOutput {
	return i.ToPartnerDestinationOutputWithContext(context.Background())
}

func (i *PartnerDestination) ToPartnerDestinationOutputWithContext(ctx context.Context) PartnerDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerDestinationOutput)
}

type PartnerDestinationOutput struct{ *pulumi.OutputState }

func (PartnerDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerDestination)(nil)).Elem()
}

func (o PartnerDestinationOutput) ToPartnerDestinationOutput() PartnerDestinationOutput {
	return o
}

func (o PartnerDestinationOutput) ToPartnerDestinationOutputWithContext(ctx context.Context) PartnerDestinationOutput {
	return o
}

// Activation state of the partner destination.
func (o PartnerDestinationOutput) ActivationState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerDestination) pulumi.StringPtrOutput { return v.ActivationState }).(pulumi.StringPtrOutput)
}

// Endpoint Base URL of the partner destination
func (o PartnerDestinationOutput) EndpointBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerDestination) pulumi.StringPtrOutput { return v.EndpointBaseUrl }).(pulumi.StringPtrOutput)
}

// Endpoint context associated with this partner destination.
func (o PartnerDestinationOutput) EndpointServiceContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerDestination) pulumi.StringPtrOutput { return v.EndpointServiceContext }).(pulumi.StringPtrOutput)
}

// Expiration time of the partner destination. If this timer expires and the partner destination was never activated,
// the partner destination and corresponding channel are deleted.
func (o PartnerDestinationOutput) ExpirationTimeIfNotActivatedUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerDestination) pulumi.StringPtrOutput { return v.ExpirationTimeIfNotActivatedUtc }).(pulumi.StringPtrOutput)
}

// Location of the resource.
func (o PartnerDestinationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerDestination) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Context or helpful message that can be used during the approval process.
func (o PartnerDestinationOutput) MessageForActivation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerDestination) pulumi.StringPtrOutput { return v.MessageForActivation }).(pulumi.StringPtrOutput)
}

// Name of the resource.
func (o PartnerDestinationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerDestination) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The immutable Id of the corresponding partner registration.
func (o PartnerDestinationOutput) PartnerRegistrationImmutableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerDestination) pulumi.StringPtrOutput { return v.PartnerRegistrationImmutableId }).(pulumi.StringPtrOutput)
}

// Provisioning state of the partner destination.
func (o PartnerDestinationOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerDestination) pulumi.StringPtrOutput { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// The system metadata relating to Partner Destination resource.
func (o PartnerDestinationOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *PartnerDestination) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Tags of the resource.
func (o PartnerDestinationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PartnerDestination) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Type of the resource.
func (o PartnerDestinationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerDestination) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(PartnerDestinationOutput{})
}
