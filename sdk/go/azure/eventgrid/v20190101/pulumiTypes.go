// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Information about the event hub destination for an event subscription
type EventHubEventSubscriptionDestination struct {
	// Type of the endpoint for the event subscription destination
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// EventHubEventSubscriptionDestinationInput is an input type that accepts EventHubEventSubscriptionDestinationArgs and EventHubEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `EventHubEventSubscriptionDestinationInput` via:
//
//          EventHubEventSubscriptionDestinationArgs{...}
type EventHubEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToEventHubEventSubscriptionDestinationOutput() EventHubEventSubscriptionDestinationOutput
	ToEventHubEventSubscriptionDestinationOutputWithContext(context.Context) EventHubEventSubscriptionDestinationOutput
}

// Information about the event hub destination for an event subscription
type EventHubEventSubscriptionDestinationArgs struct {
	// Type of the endpoint for the event subscription destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (EventHubEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubEventSubscriptionDestination)(nil)).Elem()
}

func (i EventHubEventSubscriptionDestinationArgs) ToEventHubEventSubscriptionDestinationOutput() EventHubEventSubscriptionDestinationOutput {
	return i.ToEventHubEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i EventHubEventSubscriptionDestinationArgs) ToEventHubEventSubscriptionDestinationOutputWithContext(ctx context.Context) EventHubEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubEventSubscriptionDestinationOutput)
}

// Information about the event hub destination for an event subscription
type EventHubEventSubscriptionDestinationOutput struct{ *pulumi.OutputState }

func (EventHubEventSubscriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubEventSubscriptionDestination)(nil)).Elem()
}

func (o EventHubEventSubscriptionDestinationOutput) ToEventHubEventSubscriptionDestinationOutput() EventHubEventSubscriptionDestinationOutput {
	return o
}

func (o EventHubEventSubscriptionDestinationOutput) ToEventHubEventSubscriptionDestinationOutputWithContext(ctx context.Context) EventHubEventSubscriptionDestinationOutput {
	return o
}

// Type of the endpoint for the event subscription destination
func (o EventHubEventSubscriptionDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubEventSubscriptionDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
func (o EventHubEventSubscriptionDestinationOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubEventSubscriptionDestination) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Information about the event hub destination for an event subscription
type EventHubEventSubscriptionDestinationResponse struct {
	// Type of the endpoint for the event subscription destination
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// EventHubEventSubscriptionDestinationResponseInput is an input type that accepts EventHubEventSubscriptionDestinationResponseArgs and EventHubEventSubscriptionDestinationResponseOutput values.
// You can construct a concrete instance of `EventHubEventSubscriptionDestinationResponseInput` via:
//
//          EventHubEventSubscriptionDestinationResponseArgs{...}
type EventHubEventSubscriptionDestinationResponseInput interface {
	pulumi.Input

	ToEventHubEventSubscriptionDestinationResponseOutput() EventHubEventSubscriptionDestinationResponseOutput
	ToEventHubEventSubscriptionDestinationResponseOutputWithContext(context.Context) EventHubEventSubscriptionDestinationResponseOutput
}

// Information about the event hub destination for an event subscription
type EventHubEventSubscriptionDestinationResponseArgs struct {
	// Type of the endpoint for the event subscription destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (EventHubEventSubscriptionDestinationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (i EventHubEventSubscriptionDestinationResponseArgs) ToEventHubEventSubscriptionDestinationResponseOutput() EventHubEventSubscriptionDestinationResponseOutput {
	return i.ToEventHubEventSubscriptionDestinationResponseOutputWithContext(context.Background())
}

func (i EventHubEventSubscriptionDestinationResponseArgs) ToEventHubEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) EventHubEventSubscriptionDestinationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubEventSubscriptionDestinationResponseOutput)
}

// Information about the event hub destination for an event subscription
type EventHubEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (EventHubEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o EventHubEventSubscriptionDestinationResponseOutput) ToEventHubEventSubscriptionDestinationResponseOutput() EventHubEventSubscriptionDestinationResponseOutput {
	return o
}

func (o EventHubEventSubscriptionDestinationResponseOutput) ToEventHubEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) EventHubEventSubscriptionDestinationResponseOutput {
	return o
}

// Type of the endpoint for the event subscription destination
func (o EventHubEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
func (o EventHubEventSubscriptionDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubEventSubscriptionDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Filter for the Event Subscription
type EventSubscriptionFilter struct {
	// A list of applicable event types that need to be part of the event subscription.
	// If it is desired to subscribe to all event types, the string "all" needs to be specified as an element in this list.
	IncludedEventTypes []string `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive *bool `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
}

// EventSubscriptionFilterInput is an input type that accepts EventSubscriptionFilterArgs and EventSubscriptionFilterOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterInput` via:
//
//          EventSubscriptionFilterArgs{...}
type EventSubscriptionFilterInput interface {
	pulumi.Input

	ToEventSubscriptionFilterOutput() EventSubscriptionFilterOutput
	ToEventSubscriptionFilterOutputWithContext(context.Context) EventSubscriptionFilterOutput
}

// Filter for the Event Subscription
type EventSubscriptionFilterArgs struct {
	// A list of applicable event types that need to be part of the event subscription.
	// If it is desired to subscribe to all event types, the string "all" needs to be specified as an element in this list.
	IncludedEventTypes pulumi.StringArrayInput `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive pulumi.BoolPtrInput `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith pulumi.StringPtrInput `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith pulumi.StringPtrInput `pulumi:"subjectEndsWith"`
}

func (EventSubscriptionFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilter)(nil)).Elem()
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterOutput() EventSubscriptionFilterOutput {
	return i.ToEventSubscriptionFilterOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterOutputWithContext(ctx context.Context) EventSubscriptionFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterOutput)
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return i.ToEventSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterOutput).ToEventSubscriptionFilterPtrOutputWithContext(ctx)
}

// EventSubscriptionFilterPtrInput is an input type that accepts EventSubscriptionFilterArgs, EventSubscriptionFilterPtr and EventSubscriptionFilterPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterPtrInput` via:
//
//          EventSubscriptionFilterArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionFilterPtrInput interface {
	pulumi.Input

	ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput
	ToEventSubscriptionFilterPtrOutputWithContext(context.Context) EventSubscriptionFilterPtrOutput
}

type eventSubscriptionFilterPtrType EventSubscriptionFilterArgs

func EventSubscriptionFilterPtr(v *EventSubscriptionFilterArgs) EventSubscriptionFilterPtrInput {
	return (*eventSubscriptionFilterPtrType)(v)
}

func (*eventSubscriptionFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilter)(nil)).Elem()
}

func (i *eventSubscriptionFilterPtrType) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return i.ToEventSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionFilterPtrType) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterPtrOutput)
}

// Filter for the Event Subscription
type EventSubscriptionFilterOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilter)(nil)).Elem()
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterOutput() EventSubscriptionFilterOutput {
	return o
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterOutputWithContext(ctx context.Context) EventSubscriptionFilterOutput {
	return o
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return o.ToEventSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *EventSubscriptionFilter {
		return &v
	}).(EventSubscriptionFilterPtrOutput)
}

// A list of applicable event types that need to be part of the event subscription.
// If it is desired to subscribe to all event types, the string "all" needs to be specified as an element in this list.
func (o EventSubscriptionFilterOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) []string { return v.IncludedEventTypes }).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *bool { return v.IsSubjectCaseSensitive }).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *string { return v.SubjectBeginsWith }).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *string { return v.SubjectEndsWith }).(pulumi.StringPtrOutput)
}

type EventSubscriptionFilterPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilter)(nil)).Elem()
}

func (o EventSubscriptionFilterPtrOutput) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return o
}

func (o EventSubscriptionFilterPtrOutput) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return o
}

func (o EventSubscriptionFilterPtrOutput) Elem() EventSubscriptionFilterOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) EventSubscriptionFilter { return *v }).(EventSubscriptionFilterOutput)
}

// A list of applicable event types that need to be part of the event subscription.
// If it is desired to subscribe to all event types, the string "all" needs to be specified as an element in this list.
func (o EventSubscriptionFilterPtrOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) []string {
		if v == nil {
			return nil
		}
		return v.IncludedEventTypes
	}).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterPtrOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) *bool {
		if v == nil {
			return nil
		}
		return v.IsSubjectCaseSensitive
	}).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterPtrOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) *string {
		if v == nil {
			return nil
		}
		return v.SubjectBeginsWith
	}).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterPtrOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) *string {
		if v == nil {
			return nil
		}
		return v.SubjectEndsWith
	}).(pulumi.StringPtrOutput)
}

// Filter for the Event Subscription
type EventSubscriptionFilterResponse struct {
	// A list of applicable event types that need to be part of the event subscription.
	// If it is desired to subscribe to all event types, the string "all" needs to be specified as an element in this list.
	IncludedEventTypes []string `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive *bool `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
}

// EventSubscriptionFilterResponseInput is an input type that accepts EventSubscriptionFilterResponseArgs and EventSubscriptionFilterResponseOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterResponseInput` via:
//
//          EventSubscriptionFilterResponseArgs{...}
type EventSubscriptionFilterResponseInput interface {
	pulumi.Input

	ToEventSubscriptionFilterResponseOutput() EventSubscriptionFilterResponseOutput
	ToEventSubscriptionFilterResponseOutputWithContext(context.Context) EventSubscriptionFilterResponseOutput
}

// Filter for the Event Subscription
type EventSubscriptionFilterResponseArgs struct {
	// A list of applicable event types that need to be part of the event subscription.
	// If it is desired to subscribe to all event types, the string "all" needs to be specified as an element in this list.
	IncludedEventTypes pulumi.StringArrayInput `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive pulumi.BoolPtrInput `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith pulumi.StringPtrInput `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith pulumi.StringPtrInput `pulumi:"subjectEndsWith"`
}

func (EventSubscriptionFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilterResponse)(nil)).Elem()
}

func (i EventSubscriptionFilterResponseArgs) ToEventSubscriptionFilterResponseOutput() EventSubscriptionFilterResponseOutput {
	return i.ToEventSubscriptionFilterResponseOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterResponseArgs) ToEventSubscriptionFilterResponseOutputWithContext(ctx context.Context) EventSubscriptionFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterResponseOutput)
}

func (i EventSubscriptionFilterResponseArgs) ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput {
	return i.ToEventSubscriptionFilterResponsePtrOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterResponseArgs) ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterResponseOutput).ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx)
}

// EventSubscriptionFilterResponsePtrInput is an input type that accepts EventSubscriptionFilterResponseArgs, EventSubscriptionFilterResponsePtr and EventSubscriptionFilterResponsePtrOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterResponsePtrInput` via:
//
//          EventSubscriptionFilterResponseArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionFilterResponsePtrInput interface {
	pulumi.Input

	ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput
	ToEventSubscriptionFilterResponsePtrOutputWithContext(context.Context) EventSubscriptionFilterResponsePtrOutput
}

type eventSubscriptionFilterResponsePtrType EventSubscriptionFilterResponseArgs

func EventSubscriptionFilterResponsePtr(v *EventSubscriptionFilterResponseArgs) EventSubscriptionFilterResponsePtrInput {
	return (*eventSubscriptionFilterResponsePtrType)(v)
}

func (*eventSubscriptionFilterResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilterResponse)(nil)).Elem()
}

func (i *eventSubscriptionFilterResponsePtrType) ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput {
	return i.ToEventSubscriptionFilterResponsePtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionFilterResponsePtrType) ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterResponsePtrOutput)
}

// Filter for the Event Subscription
type EventSubscriptionFilterResponseOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilterResponse)(nil)).Elem()
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponseOutput() EventSubscriptionFilterResponseOutput {
	return o
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponseOutputWithContext(ctx context.Context) EventSubscriptionFilterResponseOutput {
	return o
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput {
	return o.ToEventSubscriptionFilterResponsePtrOutputWithContext(context.Background())
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionFilterResponsePtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *EventSubscriptionFilterResponse {
		return &v
	}).(EventSubscriptionFilterResponsePtrOutput)
}

// A list of applicable event types that need to be part of the event subscription.
// If it is desired to subscribe to all event types, the string "all" needs to be specified as an element in this list.
func (o EventSubscriptionFilterResponseOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) []string { return v.IncludedEventTypes }).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterResponseOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *bool { return v.IsSubjectCaseSensitive }).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponseOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *string { return v.SubjectBeginsWith }).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponseOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *string { return v.SubjectEndsWith }).(pulumi.StringPtrOutput)
}

type EventSubscriptionFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilterResponse)(nil)).Elem()
}

func (o EventSubscriptionFilterResponsePtrOutput) ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput {
	return o
}

func (o EventSubscriptionFilterResponsePtrOutput) ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionFilterResponsePtrOutput {
	return o
}

func (o EventSubscriptionFilterResponsePtrOutput) Elem() EventSubscriptionFilterResponseOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) EventSubscriptionFilterResponse { return *v }).(EventSubscriptionFilterResponseOutput)
}

// A list of applicable event types that need to be part of the event subscription.
// If it is desired to subscribe to all event types, the string "all" needs to be specified as an element in this list.
func (o EventSubscriptionFilterResponsePtrOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) []string {
		if v == nil {
			return nil
		}
		return v.IncludedEventTypes
	}).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterResponsePtrOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsSubjectCaseSensitive
	}).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponsePtrOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubjectBeginsWith
	}).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponsePtrOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubjectEndsWith
	}).(pulumi.StringPtrOutput)
}

// Information about the HybridConnection destination for an event subscription.
type HybridConnectionEventSubscriptionDestination struct {
	// Type of the endpoint for the event subscription destination
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// HybridConnectionEventSubscriptionDestinationInput is an input type that accepts HybridConnectionEventSubscriptionDestinationArgs and HybridConnectionEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `HybridConnectionEventSubscriptionDestinationInput` via:
//
//          HybridConnectionEventSubscriptionDestinationArgs{...}
type HybridConnectionEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToHybridConnectionEventSubscriptionDestinationOutput() HybridConnectionEventSubscriptionDestinationOutput
	ToHybridConnectionEventSubscriptionDestinationOutputWithContext(context.Context) HybridConnectionEventSubscriptionDestinationOutput
}

// Information about the HybridConnection destination for an event subscription.
type HybridConnectionEventSubscriptionDestinationArgs struct {
	// Type of the endpoint for the event subscription destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (HybridConnectionEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionEventSubscriptionDestination)(nil)).Elem()
}

func (i HybridConnectionEventSubscriptionDestinationArgs) ToHybridConnectionEventSubscriptionDestinationOutput() HybridConnectionEventSubscriptionDestinationOutput {
	return i.ToHybridConnectionEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i HybridConnectionEventSubscriptionDestinationArgs) ToHybridConnectionEventSubscriptionDestinationOutputWithContext(ctx context.Context) HybridConnectionEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionEventSubscriptionDestinationOutput)
}

// Information about the HybridConnection destination for an event subscription.
type HybridConnectionEventSubscriptionDestinationOutput struct{ *pulumi.OutputState }

func (HybridConnectionEventSubscriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionEventSubscriptionDestination)(nil)).Elem()
}

func (o HybridConnectionEventSubscriptionDestinationOutput) ToHybridConnectionEventSubscriptionDestinationOutput() HybridConnectionEventSubscriptionDestinationOutput {
	return o
}

func (o HybridConnectionEventSubscriptionDestinationOutput) ToHybridConnectionEventSubscriptionDestinationOutputWithContext(ctx context.Context) HybridConnectionEventSubscriptionDestinationOutput {
	return o
}

// Type of the endpoint for the event subscription destination
func (o HybridConnectionEventSubscriptionDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v HybridConnectionEventSubscriptionDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
func (o HybridConnectionEventSubscriptionDestinationOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HybridConnectionEventSubscriptionDestination) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Information about the HybridConnection destination for an event subscription.
type HybridConnectionEventSubscriptionDestinationResponse struct {
	// Type of the endpoint for the event subscription destination
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// HybridConnectionEventSubscriptionDestinationResponseInput is an input type that accepts HybridConnectionEventSubscriptionDestinationResponseArgs and HybridConnectionEventSubscriptionDestinationResponseOutput values.
// You can construct a concrete instance of `HybridConnectionEventSubscriptionDestinationResponseInput` via:
//
//          HybridConnectionEventSubscriptionDestinationResponseArgs{...}
type HybridConnectionEventSubscriptionDestinationResponseInput interface {
	pulumi.Input

	ToHybridConnectionEventSubscriptionDestinationResponseOutput() HybridConnectionEventSubscriptionDestinationResponseOutput
	ToHybridConnectionEventSubscriptionDestinationResponseOutputWithContext(context.Context) HybridConnectionEventSubscriptionDestinationResponseOutput
}

// Information about the HybridConnection destination for an event subscription.
type HybridConnectionEventSubscriptionDestinationResponseArgs struct {
	// Type of the endpoint for the event subscription destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (HybridConnectionEventSubscriptionDestinationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (i HybridConnectionEventSubscriptionDestinationResponseArgs) ToHybridConnectionEventSubscriptionDestinationResponseOutput() HybridConnectionEventSubscriptionDestinationResponseOutput {
	return i.ToHybridConnectionEventSubscriptionDestinationResponseOutputWithContext(context.Background())
}

func (i HybridConnectionEventSubscriptionDestinationResponseArgs) ToHybridConnectionEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) HybridConnectionEventSubscriptionDestinationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionEventSubscriptionDestinationResponseOutput)
}

// Information about the HybridConnection destination for an event subscription.
type HybridConnectionEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (HybridConnectionEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o HybridConnectionEventSubscriptionDestinationResponseOutput) ToHybridConnectionEventSubscriptionDestinationResponseOutput() HybridConnectionEventSubscriptionDestinationResponseOutput {
	return o
}

func (o HybridConnectionEventSubscriptionDestinationResponseOutput) ToHybridConnectionEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) HybridConnectionEventSubscriptionDestinationResponseOutput {
	return o
}

// Type of the endpoint for the event subscription destination
func (o HybridConnectionEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v HybridConnectionEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
func (o HybridConnectionEventSubscriptionDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HybridConnectionEventSubscriptionDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Information about the retry policy for an event subscription
type RetryPolicy struct {
	// Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes *int `pulumi:"eventTimeToLiveInMinutes"`
	// Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts *int `pulumi:"maxDeliveryAttempts"`
}

// RetryPolicyInput is an input type that accepts RetryPolicyArgs and RetryPolicyOutput values.
// You can construct a concrete instance of `RetryPolicyInput` via:
//
//          RetryPolicyArgs{...}
type RetryPolicyInput interface {
	pulumi.Input

	ToRetryPolicyOutput() RetryPolicyOutput
	ToRetryPolicyOutputWithContext(context.Context) RetryPolicyOutput
}

// Information about the retry policy for an event subscription
type RetryPolicyArgs struct {
	// Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes pulumi.IntPtrInput `pulumi:"eventTimeToLiveInMinutes"`
	// Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts pulumi.IntPtrInput `pulumi:"maxDeliveryAttempts"`
}

func (RetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicy)(nil)).Elem()
}

func (i RetryPolicyArgs) ToRetryPolicyOutput() RetryPolicyOutput {
	return i.ToRetryPolicyOutputWithContext(context.Background())
}

func (i RetryPolicyArgs) ToRetryPolicyOutputWithContext(ctx context.Context) RetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyOutput)
}

func (i RetryPolicyArgs) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return i.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (i RetryPolicyArgs) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyOutput).ToRetryPolicyPtrOutputWithContext(ctx)
}

// RetryPolicyPtrInput is an input type that accepts RetryPolicyArgs, RetryPolicyPtr and RetryPolicyPtrOutput values.
// You can construct a concrete instance of `RetryPolicyPtrInput` via:
//
//          RetryPolicyArgs{...}
//
//  or:
//
//          nil
type RetryPolicyPtrInput interface {
	pulumi.Input

	ToRetryPolicyPtrOutput() RetryPolicyPtrOutput
	ToRetryPolicyPtrOutputWithContext(context.Context) RetryPolicyPtrOutput
}

type retryPolicyPtrType RetryPolicyArgs

func RetryPolicyPtr(v *RetryPolicyArgs) RetryPolicyPtrInput {
	return (*retryPolicyPtrType)(v)
}

func (*retryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicy)(nil)).Elem()
}

func (i *retryPolicyPtrType) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return i.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *retryPolicyPtrType) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyPtrOutput)
}

// Information about the retry policy for an event subscription
type RetryPolicyOutput struct{ *pulumi.OutputState }

func (RetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicy)(nil)).Elem()
}

func (o RetryPolicyOutput) ToRetryPolicyOutput() RetryPolicyOutput {
	return o
}

func (o RetryPolicyOutput) ToRetryPolicyOutputWithContext(ctx context.Context) RetryPolicyOutput {
	return o
}

func (o RetryPolicyOutput) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return o.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (o RetryPolicyOutput) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return o.ApplyT(func(v RetryPolicy) *RetryPolicy {
		return &v
	}).(RetryPolicyPtrOutput)
}

// Time To Live (in minutes) for events.
func (o RetryPolicyOutput) EventTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicy) *int { return v.EventTimeToLiveInMinutes }).(pulumi.IntPtrOutput)
}

// Maximum number of delivery retry attempts for events.
func (o RetryPolicyOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicy) *int { return v.MaxDeliveryAttempts }).(pulumi.IntPtrOutput)
}

type RetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (RetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicy)(nil)).Elem()
}

func (o RetryPolicyPtrOutput) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return o
}

func (o RetryPolicyPtrOutput) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return o
}

func (o RetryPolicyPtrOutput) Elem() RetryPolicyOutput {
	return o.ApplyT(func(v *RetryPolicy) RetryPolicy { return *v }).(RetryPolicyOutput)
}

// Time To Live (in minutes) for events.
func (o RetryPolicyPtrOutput) EventTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicy) *int {
		if v == nil {
			return nil
		}
		return v.EventTimeToLiveInMinutes
	}).(pulumi.IntPtrOutput)
}

// Maximum number of delivery retry attempts for events.
func (o RetryPolicyPtrOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryAttempts
	}).(pulumi.IntPtrOutput)
}

// Information about the retry policy for an event subscription
type RetryPolicyResponse struct {
	// Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes *int `pulumi:"eventTimeToLiveInMinutes"`
	// Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts *int `pulumi:"maxDeliveryAttempts"`
}

// RetryPolicyResponseInput is an input type that accepts RetryPolicyResponseArgs and RetryPolicyResponseOutput values.
// You can construct a concrete instance of `RetryPolicyResponseInput` via:
//
//          RetryPolicyResponseArgs{...}
type RetryPolicyResponseInput interface {
	pulumi.Input

	ToRetryPolicyResponseOutput() RetryPolicyResponseOutput
	ToRetryPolicyResponseOutputWithContext(context.Context) RetryPolicyResponseOutput
}

// Information about the retry policy for an event subscription
type RetryPolicyResponseArgs struct {
	// Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes pulumi.IntPtrInput `pulumi:"eventTimeToLiveInMinutes"`
	// Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts pulumi.IntPtrInput `pulumi:"maxDeliveryAttempts"`
}

func (RetryPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicyResponse)(nil)).Elem()
}

func (i RetryPolicyResponseArgs) ToRetryPolicyResponseOutput() RetryPolicyResponseOutput {
	return i.ToRetryPolicyResponseOutputWithContext(context.Background())
}

func (i RetryPolicyResponseArgs) ToRetryPolicyResponseOutputWithContext(ctx context.Context) RetryPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyResponseOutput)
}

func (i RetryPolicyResponseArgs) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return i.ToRetryPolicyResponsePtrOutputWithContext(context.Background())
}

func (i RetryPolicyResponseArgs) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyResponseOutput).ToRetryPolicyResponsePtrOutputWithContext(ctx)
}

// RetryPolicyResponsePtrInput is an input type that accepts RetryPolicyResponseArgs, RetryPolicyResponsePtr and RetryPolicyResponsePtrOutput values.
// You can construct a concrete instance of `RetryPolicyResponsePtrInput` via:
//
//          RetryPolicyResponseArgs{...}
//
//  or:
//
//          nil
type RetryPolicyResponsePtrInput interface {
	pulumi.Input

	ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput
	ToRetryPolicyResponsePtrOutputWithContext(context.Context) RetryPolicyResponsePtrOutput
}

type retryPolicyResponsePtrType RetryPolicyResponseArgs

func RetryPolicyResponsePtr(v *RetryPolicyResponseArgs) RetryPolicyResponsePtrInput {
	return (*retryPolicyResponsePtrType)(v)
}

func (*retryPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicyResponse)(nil)).Elem()
}

func (i *retryPolicyResponsePtrType) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return i.ToRetryPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *retryPolicyResponsePtrType) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyResponsePtrOutput)
}

// Information about the retry policy for an event subscription
type RetryPolicyResponseOutput struct{ *pulumi.OutputState }

func (RetryPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicyResponse)(nil)).Elem()
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponseOutput() RetryPolicyResponseOutput {
	return o
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponseOutputWithContext(ctx context.Context) RetryPolicyResponseOutput {
	return o
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return o.ToRetryPolicyResponsePtrOutputWithContext(context.Background())
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return o.ApplyT(func(v RetryPolicyResponse) *RetryPolicyResponse {
		return &v
	}).(RetryPolicyResponsePtrOutput)
}

// Time To Live (in minutes) for events.
func (o RetryPolicyResponseOutput) EventTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicyResponse) *int { return v.EventTimeToLiveInMinutes }).(pulumi.IntPtrOutput)
}

// Maximum number of delivery retry attempts for events.
func (o RetryPolicyResponseOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicyResponse) *int { return v.MaxDeliveryAttempts }).(pulumi.IntPtrOutput)
}

type RetryPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (RetryPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicyResponse)(nil)).Elem()
}

func (o RetryPolicyResponsePtrOutput) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return o
}

func (o RetryPolicyResponsePtrOutput) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return o
}

func (o RetryPolicyResponsePtrOutput) Elem() RetryPolicyResponseOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) RetryPolicyResponse { return *v }).(RetryPolicyResponseOutput)
}

// Time To Live (in minutes) for events.
func (o RetryPolicyResponsePtrOutput) EventTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.EventTimeToLiveInMinutes
	}).(pulumi.IntPtrOutput)
}

// Maximum number of delivery retry attempts for events.
func (o RetryPolicyResponsePtrOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryAttempts
	}).(pulumi.IntPtrOutput)
}

// Information about the storage blob based dead letter destination.
type StorageBlobDeadLetterDestination struct {
	// The name of the Storage blob container that is the destination of the deadletter events
	BlobContainerName *string `pulumi:"blobContainerName"`
	// Type of the endpoint for the dead letter destination
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource ID of the storage account that is the destination of the deadletter events. For example: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/microsoft.Storage/storageAccounts/{StorageAccountName}
	ResourceId *string `pulumi:"resourceId"`
}

// StorageBlobDeadLetterDestinationInput is an input type that accepts StorageBlobDeadLetterDestinationArgs and StorageBlobDeadLetterDestinationOutput values.
// You can construct a concrete instance of `StorageBlobDeadLetterDestinationInput` via:
//
//          StorageBlobDeadLetterDestinationArgs{...}
type StorageBlobDeadLetterDestinationInput interface {
	pulumi.Input

	ToStorageBlobDeadLetterDestinationOutput() StorageBlobDeadLetterDestinationOutput
	ToStorageBlobDeadLetterDestinationOutputWithContext(context.Context) StorageBlobDeadLetterDestinationOutput
}

// Information about the storage blob based dead letter destination.
type StorageBlobDeadLetterDestinationArgs struct {
	// The name of the Storage blob container that is the destination of the deadletter events
	BlobContainerName pulumi.StringPtrInput `pulumi:"blobContainerName"`
	// Type of the endpoint for the dead letter destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The Azure Resource ID of the storage account that is the destination of the deadletter events. For example: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/microsoft.Storage/storageAccounts/{StorageAccountName}
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (StorageBlobDeadLetterDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageBlobDeadLetterDestination)(nil)).Elem()
}

func (i StorageBlobDeadLetterDestinationArgs) ToStorageBlobDeadLetterDestinationOutput() StorageBlobDeadLetterDestinationOutput {
	return i.ToStorageBlobDeadLetterDestinationOutputWithContext(context.Background())
}

func (i StorageBlobDeadLetterDestinationArgs) ToStorageBlobDeadLetterDestinationOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBlobDeadLetterDestinationOutput)
}

func (i StorageBlobDeadLetterDestinationArgs) ToStorageBlobDeadLetterDestinationPtrOutput() StorageBlobDeadLetterDestinationPtrOutput {
	return i.ToStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i StorageBlobDeadLetterDestinationArgs) ToStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBlobDeadLetterDestinationOutput).ToStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx)
}

// StorageBlobDeadLetterDestinationPtrInput is an input type that accepts StorageBlobDeadLetterDestinationArgs, StorageBlobDeadLetterDestinationPtr and StorageBlobDeadLetterDestinationPtrOutput values.
// You can construct a concrete instance of `StorageBlobDeadLetterDestinationPtrInput` via:
//
//          StorageBlobDeadLetterDestinationArgs{...}
//
//  or:
//
//          nil
type StorageBlobDeadLetterDestinationPtrInput interface {
	pulumi.Input

	ToStorageBlobDeadLetterDestinationPtrOutput() StorageBlobDeadLetterDestinationPtrOutput
	ToStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Context) StorageBlobDeadLetterDestinationPtrOutput
}

type storageBlobDeadLetterDestinationPtrType StorageBlobDeadLetterDestinationArgs

func StorageBlobDeadLetterDestinationPtr(v *StorageBlobDeadLetterDestinationArgs) StorageBlobDeadLetterDestinationPtrInput {
	return (*storageBlobDeadLetterDestinationPtrType)(v)
}

func (*storageBlobDeadLetterDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageBlobDeadLetterDestination)(nil)).Elem()
}

func (i *storageBlobDeadLetterDestinationPtrType) ToStorageBlobDeadLetterDestinationPtrOutput() StorageBlobDeadLetterDestinationPtrOutput {
	return i.ToStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i *storageBlobDeadLetterDestinationPtrType) ToStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBlobDeadLetterDestinationPtrOutput)
}

// Information about the storage blob based dead letter destination.
type StorageBlobDeadLetterDestinationOutput struct{ *pulumi.OutputState }

func (StorageBlobDeadLetterDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageBlobDeadLetterDestination)(nil)).Elem()
}

func (o StorageBlobDeadLetterDestinationOutput) ToStorageBlobDeadLetterDestinationOutput() StorageBlobDeadLetterDestinationOutput {
	return o
}

func (o StorageBlobDeadLetterDestinationOutput) ToStorageBlobDeadLetterDestinationOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationOutput {
	return o
}

func (o StorageBlobDeadLetterDestinationOutput) ToStorageBlobDeadLetterDestinationPtrOutput() StorageBlobDeadLetterDestinationPtrOutput {
	return o.ToStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (o StorageBlobDeadLetterDestinationOutput) ToStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationPtrOutput {
	return o.ApplyT(func(v StorageBlobDeadLetterDestination) *StorageBlobDeadLetterDestination {
		return &v
	}).(StorageBlobDeadLetterDestinationPtrOutput)
}

// The name of the Storage blob container that is the destination of the deadletter events
func (o StorageBlobDeadLetterDestinationOutput) BlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDeadLetterDestination) *string { return v.BlobContainerName }).(pulumi.StringPtrOutput)
}

// Type of the endpoint for the dead letter destination
func (o StorageBlobDeadLetterDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v StorageBlobDeadLetterDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource ID of the storage account that is the destination of the deadletter events. For example: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/microsoft.Storage/storageAccounts/{StorageAccountName}
func (o StorageBlobDeadLetterDestinationOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDeadLetterDestination) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type StorageBlobDeadLetterDestinationPtrOutput struct{ *pulumi.OutputState }

func (StorageBlobDeadLetterDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageBlobDeadLetterDestination)(nil)).Elem()
}

func (o StorageBlobDeadLetterDestinationPtrOutput) ToStorageBlobDeadLetterDestinationPtrOutput() StorageBlobDeadLetterDestinationPtrOutput {
	return o
}

func (o StorageBlobDeadLetterDestinationPtrOutput) ToStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationPtrOutput {
	return o
}

func (o StorageBlobDeadLetterDestinationPtrOutput) Elem() StorageBlobDeadLetterDestinationOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestination) StorageBlobDeadLetterDestination { return *v }).(StorageBlobDeadLetterDestinationOutput)
}

// The name of the Storage blob container that is the destination of the deadletter events
func (o StorageBlobDeadLetterDestinationPtrOutput) BlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestination) *string {
		if v == nil {
			return nil
		}
		return v.BlobContainerName
	}).(pulumi.StringPtrOutput)
}

// Type of the endpoint for the dead letter destination
func (o StorageBlobDeadLetterDestinationPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestination) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource ID of the storage account that is the destination of the deadletter events. For example: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/microsoft.Storage/storageAccounts/{StorageAccountName}
func (o StorageBlobDeadLetterDestinationPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestination) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Information about the storage blob based dead letter destination.
type StorageBlobDeadLetterDestinationResponse struct {
	// The name of the Storage blob container that is the destination of the deadletter events
	BlobContainerName *string `pulumi:"blobContainerName"`
	// Type of the endpoint for the dead letter destination
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource ID of the storage account that is the destination of the deadletter events. For example: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/microsoft.Storage/storageAccounts/{StorageAccountName}
	ResourceId *string `pulumi:"resourceId"`
}

// StorageBlobDeadLetterDestinationResponseInput is an input type that accepts StorageBlobDeadLetterDestinationResponseArgs and StorageBlobDeadLetterDestinationResponseOutput values.
// You can construct a concrete instance of `StorageBlobDeadLetterDestinationResponseInput` via:
//
//          StorageBlobDeadLetterDestinationResponseArgs{...}
type StorageBlobDeadLetterDestinationResponseInput interface {
	pulumi.Input

	ToStorageBlobDeadLetterDestinationResponseOutput() StorageBlobDeadLetterDestinationResponseOutput
	ToStorageBlobDeadLetterDestinationResponseOutputWithContext(context.Context) StorageBlobDeadLetterDestinationResponseOutput
}

// Information about the storage blob based dead letter destination.
type StorageBlobDeadLetterDestinationResponseArgs struct {
	// The name of the Storage blob container that is the destination of the deadletter events
	BlobContainerName pulumi.StringPtrInput `pulumi:"blobContainerName"`
	// Type of the endpoint for the dead letter destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The Azure Resource ID of the storage account that is the destination of the deadletter events. For example: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/microsoft.Storage/storageAccounts/{StorageAccountName}
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (StorageBlobDeadLetterDestinationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageBlobDeadLetterDestinationResponse)(nil)).Elem()
}

func (i StorageBlobDeadLetterDestinationResponseArgs) ToStorageBlobDeadLetterDestinationResponseOutput() StorageBlobDeadLetterDestinationResponseOutput {
	return i.ToStorageBlobDeadLetterDestinationResponseOutputWithContext(context.Background())
}

func (i StorageBlobDeadLetterDestinationResponseArgs) ToStorageBlobDeadLetterDestinationResponseOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBlobDeadLetterDestinationResponseOutput)
}

func (i StorageBlobDeadLetterDestinationResponseArgs) ToStorageBlobDeadLetterDestinationResponsePtrOutput() StorageBlobDeadLetterDestinationResponsePtrOutput {
	return i.ToStorageBlobDeadLetterDestinationResponsePtrOutputWithContext(context.Background())
}

func (i StorageBlobDeadLetterDestinationResponseArgs) ToStorageBlobDeadLetterDestinationResponsePtrOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBlobDeadLetterDestinationResponseOutput).ToStorageBlobDeadLetterDestinationResponsePtrOutputWithContext(ctx)
}

// StorageBlobDeadLetterDestinationResponsePtrInput is an input type that accepts StorageBlobDeadLetterDestinationResponseArgs, StorageBlobDeadLetterDestinationResponsePtr and StorageBlobDeadLetterDestinationResponsePtrOutput values.
// You can construct a concrete instance of `StorageBlobDeadLetterDestinationResponsePtrInput` via:
//
//          StorageBlobDeadLetterDestinationResponseArgs{...}
//
//  or:
//
//          nil
type StorageBlobDeadLetterDestinationResponsePtrInput interface {
	pulumi.Input

	ToStorageBlobDeadLetterDestinationResponsePtrOutput() StorageBlobDeadLetterDestinationResponsePtrOutput
	ToStorageBlobDeadLetterDestinationResponsePtrOutputWithContext(context.Context) StorageBlobDeadLetterDestinationResponsePtrOutput
}

type storageBlobDeadLetterDestinationResponsePtrType StorageBlobDeadLetterDestinationResponseArgs

func StorageBlobDeadLetterDestinationResponsePtr(v *StorageBlobDeadLetterDestinationResponseArgs) StorageBlobDeadLetterDestinationResponsePtrInput {
	return (*storageBlobDeadLetterDestinationResponsePtrType)(v)
}

func (*storageBlobDeadLetterDestinationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageBlobDeadLetterDestinationResponse)(nil)).Elem()
}

func (i *storageBlobDeadLetterDestinationResponsePtrType) ToStorageBlobDeadLetterDestinationResponsePtrOutput() StorageBlobDeadLetterDestinationResponsePtrOutput {
	return i.ToStorageBlobDeadLetterDestinationResponsePtrOutputWithContext(context.Background())
}

func (i *storageBlobDeadLetterDestinationResponsePtrType) ToStorageBlobDeadLetterDestinationResponsePtrOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBlobDeadLetterDestinationResponsePtrOutput)
}

// Information about the storage blob based dead letter destination.
type StorageBlobDeadLetterDestinationResponseOutput struct{ *pulumi.OutputState }

func (StorageBlobDeadLetterDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageBlobDeadLetterDestinationResponse)(nil)).Elem()
}

func (o StorageBlobDeadLetterDestinationResponseOutput) ToStorageBlobDeadLetterDestinationResponseOutput() StorageBlobDeadLetterDestinationResponseOutput {
	return o
}

func (o StorageBlobDeadLetterDestinationResponseOutput) ToStorageBlobDeadLetterDestinationResponseOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationResponseOutput {
	return o
}

func (o StorageBlobDeadLetterDestinationResponseOutput) ToStorageBlobDeadLetterDestinationResponsePtrOutput() StorageBlobDeadLetterDestinationResponsePtrOutput {
	return o.ToStorageBlobDeadLetterDestinationResponsePtrOutputWithContext(context.Background())
}

func (o StorageBlobDeadLetterDestinationResponseOutput) ToStorageBlobDeadLetterDestinationResponsePtrOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationResponsePtrOutput {
	return o.ApplyT(func(v StorageBlobDeadLetterDestinationResponse) *StorageBlobDeadLetterDestinationResponse {
		return &v
	}).(StorageBlobDeadLetterDestinationResponsePtrOutput)
}

// The name of the Storage blob container that is the destination of the deadletter events
func (o StorageBlobDeadLetterDestinationResponseOutput) BlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDeadLetterDestinationResponse) *string { return v.BlobContainerName }).(pulumi.StringPtrOutput)
}

// Type of the endpoint for the dead letter destination
func (o StorageBlobDeadLetterDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v StorageBlobDeadLetterDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource ID of the storage account that is the destination of the deadletter events. For example: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/microsoft.Storage/storageAccounts/{StorageAccountName}
func (o StorageBlobDeadLetterDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDeadLetterDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type StorageBlobDeadLetterDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (StorageBlobDeadLetterDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageBlobDeadLetterDestinationResponse)(nil)).Elem()
}

func (o StorageBlobDeadLetterDestinationResponsePtrOutput) ToStorageBlobDeadLetterDestinationResponsePtrOutput() StorageBlobDeadLetterDestinationResponsePtrOutput {
	return o
}

func (o StorageBlobDeadLetterDestinationResponsePtrOutput) ToStorageBlobDeadLetterDestinationResponsePtrOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationResponsePtrOutput {
	return o
}

func (o StorageBlobDeadLetterDestinationResponsePtrOutput) Elem() StorageBlobDeadLetterDestinationResponseOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestinationResponse) StorageBlobDeadLetterDestinationResponse { return *v }).(StorageBlobDeadLetterDestinationResponseOutput)
}

// The name of the Storage blob container that is the destination of the deadletter events
func (o StorageBlobDeadLetterDestinationResponsePtrOutput) BlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.BlobContainerName
	}).(pulumi.StringPtrOutput)
}

// Type of the endpoint for the dead letter destination
func (o StorageBlobDeadLetterDestinationResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource ID of the storage account that is the destination of the deadletter events. For example: /subscriptions/{AzureSubscriptionId}/resourceGroups/{ResourceGroupName}/providers/microsoft.Storage/storageAccounts/{StorageAccountName}
func (o StorageBlobDeadLetterDestinationResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Information about the storage queue destination for an event subscription.
type StorageQueueEventSubscriptionDestination struct {
	// Type of the endpoint for the event subscription destination
	EndpointType string `pulumi:"endpointType"`
	// The name of the Storage queue under a storage account that is the destination of an event subscription.
	QueueName *string `pulumi:"queueName"`
	// The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// StorageQueueEventSubscriptionDestinationInput is an input type that accepts StorageQueueEventSubscriptionDestinationArgs and StorageQueueEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `StorageQueueEventSubscriptionDestinationInput` via:
//
//          StorageQueueEventSubscriptionDestinationArgs{...}
type StorageQueueEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToStorageQueueEventSubscriptionDestinationOutput() StorageQueueEventSubscriptionDestinationOutput
	ToStorageQueueEventSubscriptionDestinationOutputWithContext(context.Context) StorageQueueEventSubscriptionDestinationOutput
}

// Information about the storage queue destination for an event subscription.
type StorageQueueEventSubscriptionDestinationArgs struct {
	// Type of the endpoint for the event subscription destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The name of the Storage queue under a storage account that is the destination of an event subscription.
	QueueName pulumi.StringPtrInput `pulumi:"queueName"`
	// The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (StorageQueueEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageQueueEventSubscriptionDestination)(nil)).Elem()
}

func (i StorageQueueEventSubscriptionDestinationArgs) ToStorageQueueEventSubscriptionDestinationOutput() StorageQueueEventSubscriptionDestinationOutput {
	return i.ToStorageQueueEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i StorageQueueEventSubscriptionDestinationArgs) ToStorageQueueEventSubscriptionDestinationOutputWithContext(ctx context.Context) StorageQueueEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageQueueEventSubscriptionDestinationOutput)
}

// Information about the storage queue destination for an event subscription.
type StorageQueueEventSubscriptionDestinationOutput struct{ *pulumi.OutputState }

func (StorageQueueEventSubscriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageQueueEventSubscriptionDestination)(nil)).Elem()
}

func (o StorageQueueEventSubscriptionDestinationOutput) ToStorageQueueEventSubscriptionDestinationOutput() StorageQueueEventSubscriptionDestinationOutput {
	return o
}

func (o StorageQueueEventSubscriptionDestinationOutput) ToStorageQueueEventSubscriptionDestinationOutputWithContext(ctx context.Context) StorageQueueEventSubscriptionDestinationOutput {
	return o
}

// Type of the endpoint for the event subscription destination
func (o StorageQueueEventSubscriptionDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v StorageQueueEventSubscriptionDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The name of the Storage queue under a storage account that is the destination of an event subscription.
func (o StorageQueueEventSubscriptionDestinationOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageQueueEventSubscriptionDestination) *string { return v.QueueName }).(pulumi.StringPtrOutput)
}

// The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
func (o StorageQueueEventSubscriptionDestinationOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageQueueEventSubscriptionDestination) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Information about the storage queue destination for an event subscription.
type StorageQueueEventSubscriptionDestinationResponse struct {
	// Type of the endpoint for the event subscription destination
	EndpointType string `pulumi:"endpointType"`
	// The name of the Storage queue under a storage account that is the destination of an event subscription.
	QueueName *string `pulumi:"queueName"`
	// The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// StorageQueueEventSubscriptionDestinationResponseInput is an input type that accepts StorageQueueEventSubscriptionDestinationResponseArgs and StorageQueueEventSubscriptionDestinationResponseOutput values.
// You can construct a concrete instance of `StorageQueueEventSubscriptionDestinationResponseInput` via:
//
//          StorageQueueEventSubscriptionDestinationResponseArgs{...}
type StorageQueueEventSubscriptionDestinationResponseInput interface {
	pulumi.Input

	ToStorageQueueEventSubscriptionDestinationResponseOutput() StorageQueueEventSubscriptionDestinationResponseOutput
	ToStorageQueueEventSubscriptionDestinationResponseOutputWithContext(context.Context) StorageQueueEventSubscriptionDestinationResponseOutput
}

// Information about the storage queue destination for an event subscription.
type StorageQueueEventSubscriptionDestinationResponseArgs struct {
	// Type of the endpoint for the event subscription destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The name of the Storage queue under a storage account that is the destination of an event subscription.
	QueueName pulumi.StringPtrInput `pulumi:"queueName"`
	// The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (StorageQueueEventSubscriptionDestinationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageQueueEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (i StorageQueueEventSubscriptionDestinationResponseArgs) ToStorageQueueEventSubscriptionDestinationResponseOutput() StorageQueueEventSubscriptionDestinationResponseOutput {
	return i.ToStorageQueueEventSubscriptionDestinationResponseOutputWithContext(context.Background())
}

func (i StorageQueueEventSubscriptionDestinationResponseArgs) ToStorageQueueEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) StorageQueueEventSubscriptionDestinationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageQueueEventSubscriptionDestinationResponseOutput)
}

// Information about the storage queue destination for an event subscription.
type StorageQueueEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (StorageQueueEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageQueueEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o StorageQueueEventSubscriptionDestinationResponseOutput) ToStorageQueueEventSubscriptionDestinationResponseOutput() StorageQueueEventSubscriptionDestinationResponseOutput {
	return o
}

func (o StorageQueueEventSubscriptionDestinationResponseOutput) ToStorageQueueEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) StorageQueueEventSubscriptionDestinationResponseOutput {
	return o
}

// Type of the endpoint for the event subscription destination
func (o StorageQueueEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v StorageQueueEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The name of the Storage queue under a storage account that is the destination of an event subscription.
func (o StorageQueueEventSubscriptionDestinationResponseOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageQueueEventSubscriptionDestinationResponse) *string { return v.QueueName }).(pulumi.StringPtrOutput)
}

// The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
func (o StorageQueueEventSubscriptionDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageQueueEventSubscriptionDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Information about the webhook destination for an event subscription
type WebHookEventSubscriptionDestination struct {
	// Type of the endpoint for the event subscription destination
	EndpointType string `pulumi:"endpointType"`
	// The URL that represents the endpoint of the destination of an event subscription.
	EndpointUrl *string `pulumi:"endpointUrl"`
}

// WebHookEventSubscriptionDestinationInput is an input type that accepts WebHookEventSubscriptionDestinationArgs and WebHookEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `WebHookEventSubscriptionDestinationInput` via:
//
//          WebHookEventSubscriptionDestinationArgs{...}
type WebHookEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToWebHookEventSubscriptionDestinationOutput() WebHookEventSubscriptionDestinationOutput
	ToWebHookEventSubscriptionDestinationOutputWithContext(context.Context) WebHookEventSubscriptionDestinationOutput
}

// Information about the webhook destination for an event subscription
type WebHookEventSubscriptionDestinationArgs struct {
	// Type of the endpoint for the event subscription destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The URL that represents the endpoint of the destination of an event subscription.
	EndpointUrl pulumi.StringPtrInput `pulumi:"endpointUrl"`
}

func (WebHookEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebHookEventSubscriptionDestination)(nil)).Elem()
}

func (i WebHookEventSubscriptionDestinationArgs) ToWebHookEventSubscriptionDestinationOutput() WebHookEventSubscriptionDestinationOutput {
	return i.ToWebHookEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i WebHookEventSubscriptionDestinationArgs) ToWebHookEventSubscriptionDestinationOutputWithContext(ctx context.Context) WebHookEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebHookEventSubscriptionDestinationOutput)
}

// Information about the webhook destination for an event subscription
type WebHookEventSubscriptionDestinationOutput struct{ *pulumi.OutputState }

func (WebHookEventSubscriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebHookEventSubscriptionDestination)(nil)).Elem()
}

func (o WebHookEventSubscriptionDestinationOutput) ToWebHookEventSubscriptionDestinationOutput() WebHookEventSubscriptionDestinationOutput {
	return o
}

func (o WebHookEventSubscriptionDestinationOutput) ToWebHookEventSubscriptionDestinationOutputWithContext(ctx context.Context) WebHookEventSubscriptionDestinationOutput {
	return o
}

// Type of the endpoint for the event subscription destination
func (o WebHookEventSubscriptionDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The URL that represents the endpoint of the destination of an event subscription.
func (o WebHookEventSubscriptionDestinationOutput) EndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestination) *string { return v.EndpointUrl }).(pulumi.StringPtrOutput)
}

// Information about the webhook destination for an event subscription
type WebHookEventSubscriptionDestinationResponse struct {
	// The base URL that represents the endpoint of the destination of an event subscription.
	EndpointBaseUrl string `pulumi:"endpointBaseUrl"`
	// Type of the endpoint for the event subscription destination
	EndpointType string `pulumi:"endpointType"`
	// The URL that represents the endpoint of the destination of an event subscription.
	EndpointUrl *string `pulumi:"endpointUrl"`
}

// WebHookEventSubscriptionDestinationResponseInput is an input type that accepts WebHookEventSubscriptionDestinationResponseArgs and WebHookEventSubscriptionDestinationResponseOutput values.
// You can construct a concrete instance of `WebHookEventSubscriptionDestinationResponseInput` via:
//
//          WebHookEventSubscriptionDestinationResponseArgs{...}
type WebHookEventSubscriptionDestinationResponseInput interface {
	pulumi.Input

	ToWebHookEventSubscriptionDestinationResponseOutput() WebHookEventSubscriptionDestinationResponseOutput
	ToWebHookEventSubscriptionDestinationResponseOutputWithContext(context.Context) WebHookEventSubscriptionDestinationResponseOutput
}

// Information about the webhook destination for an event subscription
type WebHookEventSubscriptionDestinationResponseArgs struct {
	// The base URL that represents the endpoint of the destination of an event subscription.
	EndpointBaseUrl pulumi.StringInput `pulumi:"endpointBaseUrl"`
	// Type of the endpoint for the event subscription destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The URL that represents the endpoint of the destination of an event subscription.
	EndpointUrl pulumi.StringPtrInput `pulumi:"endpointUrl"`
}

func (WebHookEventSubscriptionDestinationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebHookEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (i WebHookEventSubscriptionDestinationResponseArgs) ToWebHookEventSubscriptionDestinationResponseOutput() WebHookEventSubscriptionDestinationResponseOutput {
	return i.ToWebHookEventSubscriptionDestinationResponseOutputWithContext(context.Background())
}

func (i WebHookEventSubscriptionDestinationResponseArgs) ToWebHookEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) WebHookEventSubscriptionDestinationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebHookEventSubscriptionDestinationResponseOutput)
}

// Information about the webhook destination for an event subscription
type WebHookEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (WebHookEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebHookEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o WebHookEventSubscriptionDestinationResponseOutput) ToWebHookEventSubscriptionDestinationResponseOutput() WebHookEventSubscriptionDestinationResponseOutput {
	return o
}

func (o WebHookEventSubscriptionDestinationResponseOutput) ToWebHookEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) WebHookEventSubscriptionDestinationResponseOutput {
	return o
}

// The base URL that represents the endpoint of the destination of an event subscription.
func (o WebHookEventSubscriptionDestinationResponseOutput) EndpointBaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestinationResponse) string { return v.EndpointBaseUrl }).(pulumi.StringOutput)
}

// Type of the endpoint for the event subscription destination
func (o WebHookEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The URL that represents the endpoint of the destination of an event subscription.
func (o WebHookEventSubscriptionDestinationResponseOutput) EndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestinationResponse) *string { return v.EndpointUrl }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(EventHubEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(EventHubEventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterResponseOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(HybridConnectionEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(HybridConnectionEventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(RetryPolicyOutput{})
	pulumi.RegisterOutputType(RetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(RetryPolicyResponseOutput{})
	pulumi.RegisterOutputType(RetryPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(StorageBlobDeadLetterDestinationOutput{})
	pulumi.RegisterOutputType(StorageBlobDeadLetterDestinationPtrOutput{})
	pulumi.RegisterOutputType(StorageBlobDeadLetterDestinationResponseOutput{})
	pulumi.RegisterOutputType(StorageBlobDeadLetterDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(StorageQueueEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(StorageQueueEventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(WebHookEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(WebHookEventSubscriptionDestinationResponseOutput{})
}
