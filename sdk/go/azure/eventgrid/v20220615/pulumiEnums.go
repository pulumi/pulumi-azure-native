// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220615

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
type AdvancedFilterOperatorType string

const (
	AdvancedFilterOperatorTypeNumberIn                  = AdvancedFilterOperatorType("NumberIn")
	AdvancedFilterOperatorTypeNumberNotIn               = AdvancedFilterOperatorType("NumberNotIn")
	AdvancedFilterOperatorTypeNumberLessThan            = AdvancedFilterOperatorType("NumberLessThan")
	AdvancedFilterOperatorTypeNumberGreaterThan         = AdvancedFilterOperatorType("NumberGreaterThan")
	AdvancedFilterOperatorTypeNumberLessThanOrEquals    = AdvancedFilterOperatorType("NumberLessThanOrEquals")
	AdvancedFilterOperatorTypeNumberGreaterThanOrEquals = AdvancedFilterOperatorType("NumberGreaterThanOrEquals")
	AdvancedFilterOperatorTypeBoolEquals                = AdvancedFilterOperatorType("BoolEquals")
	AdvancedFilterOperatorTypeStringIn                  = AdvancedFilterOperatorType("StringIn")
	AdvancedFilterOperatorTypeStringNotIn               = AdvancedFilterOperatorType("StringNotIn")
	AdvancedFilterOperatorTypeStringBeginsWith          = AdvancedFilterOperatorType("StringBeginsWith")
	AdvancedFilterOperatorTypeStringEndsWith            = AdvancedFilterOperatorType("StringEndsWith")
	AdvancedFilterOperatorTypeStringContains            = AdvancedFilterOperatorType("StringContains")
	AdvancedFilterOperatorTypeNumberInRange             = AdvancedFilterOperatorType("NumberInRange")
	AdvancedFilterOperatorTypeNumberNotInRange          = AdvancedFilterOperatorType("NumberNotInRange")
	AdvancedFilterOperatorTypeStringNotBeginsWith       = AdvancedFilterOperatorType("StringNotBeginsWith")
	AdvancedFilterOperatorTypeStringNotEndsWith         = AdvancedFilterOperatorType("StringNotEndsWith")
	AdvancedFilterOperatorTypeStringNotContains         = AdvancedFilterOperatorType("StringNotContains")
	AdvancedFilterOperatorTypeIsNullOrUndefined         = AdvancedFilterOperatorType("IsNullOrUndefined")
	AdvancedFilterOperatorTypeIsNotNull                 = AdvancedFilterOperatorType("IsNotNull")
)

// Provisioning state of the channel.
type ChannelProvisioningState string

const (
	ChannelProvisioningStateCreating                              = ChannelProvisioningState("Creating")
	ChannelProvisioningStateUpdating                              = ChannelProvisioningState("Updating")
	ChannelProvisioningStateDeleting                              = ChannelProvisioningState("Deleting")
	ChannelProvisioningStateSucceeded                             = ChannelProvisioningState("Succeeded")
	ChannelProvisioningStateCanceled                              = ChannelProvisioningState("Canceled")
	ChannelProvisioningStateFailed                                = ChannelProvisioningState("Failed")
	ChannelProvisioningStateIdleDueToMirroredPartnerTopicDeletion = ChannelProvisioningState("IdleDueToMirroredPartnerTopicDeletion")
)

// The type of the event channel which represents the direction flow of events.
type ChannelType string

const (
	ChannelTypePartnerTopic = ChannelType("PartnerTopic")
)

// Data Residency Boundary of the resource.
type DataResidencyBoundary string

const (
	DataResidencyBoundaryWithinGeopair = DataResidencyBoundary("WithinGeopair")
	DataResidencyBoundaryWithinRegion  = DataResidencyBoundary("WithinRegion")
)

// Type of the endpoint for the dead letter destination
type DeadLetterEndPointType string

const (
	DeadLetterEndPointTypeStorageBlob = DeadLetterEndPointType("StorageBlob")
)

// Type of the delivery attribute or header name.
type DeliveryAttributeMappingType string

const (
	DeliveryAttributeMappingTypeStatic  = DeliveryAttributeMappingType("Static")
	DeliveryAttributeMappingTypeDynamic = DeliveryAttributeMappingType("Dynamic")
)

// Type of the endpoint for the event subscription destination.
type EndpointType string

const (
	EndpointTypeWebHook          = EndpointType("WebHook")
	EndpointTypeEventHub         = EndpointType("EventHub")
	EndpointTypeStorageQueue     = EndpointType("StorageQueue")
	EndpointTypeHybridConnection = EndpointType("HybridConnection")
	EndpointTypeServiceBusQueue  = EndpointType("ServiceBusQueue")
	EndpointTypeServiceBusTopic  = EndpointType("ServiceBusTopic")
	EndpointTypeAzureFunction    = EndpointType("AzureFunction")
)

// The kind of event type used.
type EventDefinitionKind string

const (
	EventDefinitionKindInline = EventDefinitionKind("Inline")
)

// The event delivery schema for the event subscription.
type EventDeliverySchema string

const (
	EventDeliverySchemaEventGridSchema       = EventDeliverySchema("EventGridSchema")
	EventDeliverySchemaCustomInputSchema     = EventDeliverySchema("CustomInputSchema")
	EventDeliverySchema_CloudEventSchemaV1_0 = EventDeliverySchema("CloudEventSchemaV1_0")
)

// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
type EventSubscriptionIdentityType string

const (
	EventSubscriptionIdentityTypeSystemAssigned = EventSubscriptionIdentityType("SystemAssigned")
	EventSubscriptionIdentityTypeUserAssigned   = EventSubscriptionIdentityType("UserAssigned")
)

// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
type IdentityType string

const (
	IdentityTypeNone                         = IdentityType("None")
	IdentityTypeSystemAssigned               = IdentityType("SystemAssigned")
	IdentityTypeUserAssigned                 = IdentityType("UserAssigned")
	IdentityType_SystemAssigned_UserAssigned = IdentityType("SystemAssigned, UserAssigned")
)

// This determines the format that Event Grid should expect for incoming events published to the topic.
type InputSchema string

const (
	InputSchemaEventGridSchema       = InputSchema("EventGridSchema")
	InputSchemaCustomEventSchema     = InputSchema("CustomEventSchema")
	InputSchema_CloudEventSchemaV1_0 = InputSchema("CloudEventSchemaV1_0")
)

// Type of the custom mapping
type InputSchemaMappingType string

const (
	InputSchemaMappingTypeJson = InputSchemaMappingType("Json")
)

// Action to perform based on the match or no match of the IpMask.
type IpActionType string

const (
	IpActionTypeAllow = IpActionType("Allow")
)

// Provisioning state of the partner configuration.
type PartnerConfigurationProvisioningState string

const (
	PartnerConfigurationProvisioningStateCreating  = PartnerConfigurationProvisioningState("Creating")
	PartnerConfigurationProvisioningStateUpdating  = PartnerConfigurationProvisioningState("Updating")
	PartnerConfigurationProvisioningStateDeleting  = PartnerConfigurationProvisioningState("Deleting")
	PartnerConfigurationProvisioningStateSucceeded = PartnerConfigurationProvisioningState("Succeeded")
	PartnerConfigurationProvisioningStateCanceled  = PartnerConfigurationProvisioningState("Canceled")
	PartnerConfigurationProvisioningStateFailed    = PartnerConfigurationProvisioningState("Failed")
)

// Activation state of the partner topic.
type PartnerTopicActivationState string

const (
	PartnerTopicActivationStateNeverActivated = PartnerTopicActivationState("NeverActivated")
	PartnerTopicActivationStateActivated      = PartnerTopicActivationState("Activated")
	PartnerTopicActivationStateDeactivated    = PartnerTopicActivationState("Deactivated")
)

// This determines if events published to this partner namespace should use the source attribute in the event payload
// or use the channel name in the header when matching to the partner topic. If none is specified, source attribute routing will be used to match the partner topic.
type PartnerTopicRoutingMode string

const (
	PartnerTopicRoutingModeSourceEventAttribute = PartnerTopicRoutingMode("SourceEventAttribute")
	PartnerTopicRoutingModeChannelNameHeader    = PartnerTopicRoutingMode("ChannelNameHeader")
)

// Status of the connection.
type PersistedConnectionStatus string

const (
	PersistedConnectionStatusPending      = PersistedConnectionStatus("Pending")
	PersistedConnectionStatusApproved     = PersistedConnectionStatus("Approved")
	PersistedConnectionStatusRejected     = PersistedConnectionStatus("Rejected")
	PersistedConnectionStatusDisconnected = PersistedConnectionStatus("Disconnected")
)

// This determines if traffic is allowed over public network. By default it is enabled.
// You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicProperties.InboundIpRules" />
type PublicNetworkAccess string

const (
	PublicNetworkAccessEnabled  = PublicNetworkAccess("Enabled")
	PublicNetworkAccessDisabled = PublicNetworkAccess("Disabled")
)

// The readiness state of the corresponding partner topic.
type ReadinessState string

const (
	ReadinessStateNeverActivated = ReadinessState("NeverActivated")
	ReadinessStateActivated      = ReadinessState("Activated")
)

// Provisioning state of the Private Endpoint Connection.
type ResourceProvisioningState string

const (
	ResourceProvisioningStateCreating  = ResourceProvisioningState("Creating")
	ResourceProvisioningStateUpdating  = ResourceProvisioningState("Updating")
	ResourceProvisioningStateDeleting  = ResourceProvisioningState("Deleting")
	ResourceProvisioningStateSucceeded = ResourceProvisioningState("Succeeded")
	ResourceProvisioningStateCanceled  = ResourceProvisioningState("Canceled")
	ResourceProvisioningStateFailed    = ResourceProvisioningState("Failed")
)

func init() {
}
