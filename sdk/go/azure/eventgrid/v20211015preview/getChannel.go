// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211015preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Channel info.
func LookupChannel(ctx *pulumi.Context, args *LookupChannelArgs, opts ...pulumi.InvokeOption) (*LookupChannelResult, error) {
	var rv LookupChannelResult
	err := ctx.Invoke("azure-native:eventgrid/v20211015preview:getChannel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupChannelArgs struct {
	// Name of the channel.
	ChannelName string `pulumi:"channelName"`
	// Name of the partner namespace.
	PartnerNamespaceName string `pulumi:"partnerNamespaceName"`
	// The name of the resource group within the partners subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Channel info.
type LookupChannelResult struct {
	// The type of the event channel which represents the  direction flow of events.
	ChannelType *string `pulumi:"channelType"`
	// Expiration time of the channel. If this timer expires while the corresponding partner topic is never activated,
	// the channel and corresponding partner topic are deleted.
	ExpirationTimeIfNotActivatedUtc *string `pulumi:"expirationTimeIfNotActivatedUtc"`
	// Fully qualified identifier of the resource.
	Id string `pulumi:"id"`
	// Context or helpful message that can be used during the approval process by the subscriber.
	MessageForActivation *string `pulumi:"messageForActivation"`
	// Name of the resource.
	Name string `pulumi:"name"`
	// This property should be populated when channelType is PartnerDestination and represents information about the partner destination resource corresponding to the channel.
	PartnerDestinationInfo *WebhookPartnerDestinationInfoResponse `pulumi:"partnerDestinationInfo"`
	// This property should be populated when channelType is PartnerTopic and represents information about the partner topic resource corresponding to the channel.
	PartnerTopicInfo *PartnerTopicInfoResponse `pulumi:"partnerTopicInfo"`
	// Provisioning state of the channel.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The readiness state of the corresponding partner topic.
	ReadinessState *string `pulumi:"readinessState"`
	// The system metadata relating to Channel resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Type of the resource.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupChannelResult
func (val *LookupChannelResult) Defaults() *LookupChannelResult {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.PartnerDestinationInfo = tmp.PartnerDestinationInfo.Defaults()

	return &tmp
}

func LookupChannelOutput(ctx *pulumi.Context, args LookupChannelOutputArgs, opts ...pulumi.InvokeOption) LookupChannelResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupChannelResult, error) {
			args := v.(LookupChannelArgs)
			r, err := LookupChannel(ctx, &args, opts...)
			var s LookupChannelResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupChannelResultOutput)
}

type LookupChannelOutputArgs struct {
	// Name of the channel.
	ChannelName pulumi.StringInput `pulumi:"channelName"`
	// Name of the partner namespace.
	PartnerNamespaceName pulumi.StringInput `pulumi:"partnerNamespaceName"`
	// The name of the resource group within the partners subscription.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupChannelOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupChannelArgs)(nil)).Elem()
}

// Channel info.
type LookupChannelResultOutput struct{ *pulumi.OutputState }

func (LookupChannelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupChannelResult)(nil)).Elem()
}

func (o LookupChannelResultOutput) ToLookupChannelResultOutput() LookupChannelResultOutput {
	return o
}

func (o LookupChannelResultOutput) ToLookupChannelResultOutputWithContext(ctx context.Context) LookupChannelResultOutput {
	return o
}

// The type of the event channel which represents the  direction flow of events.
func (o LookupChannelResultOutput) ChannelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupChannelResult) *string { return v.ChannelType }).(pulumi.StringPtrOutput)
}

// Expiration time of the channel. If this timer expires while the corresponding partner topic is never activated,
// the channel and corresponding partner topic are deleted.
func (o LookupChannelResultOutput) ExpirationTimeIfNotActivatedUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupChannelResult) *string { return v.ExpirationTimeIfNotActivatedUtc }).(pulumi.StringPtrOutput)
}

// Fully qualified identifier of the resource.
func (o LookupChannelResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupChannelResult) string { return v.Id }).(pulumi.StringOutput)
}

// Context or helpful message that can be used during the approval process by the subscriber.
func (o LookupChannelResultOutput) MessageForActivation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupChannelResult) *string { return v.MessageForActivation }).(pulumi.StringPtrOutput)
}

// Name of the resource.
func (o LookupChannelResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupChannelResult) string { return v.Name }).(pulumi.StringOutput)
}

// This property should be populated when channelType is PartnerDestination and represents information about the partner destination resource corresponding to the channel.
func (o LookupChannelResultOutput) PartnerDestinationInfo() WebhookPartnerDestinationInfoResponsePtrOutput {
	return o.ApplyT(func(v LookupChannelResult) *WebhookPartnerDestinationInfoResponse { return v.PartnerDestinationInfo }).(WebhookPartnerDestinationInfoResponsePtrOutput)
}

// This property should be populated when channelType is PartnerTopic and represents information about the partner topic resource corresponding to the channel.
func (o LookupChannelResultOutput) PartnerTopicInfo() PartnerTopicInfoResponsePtrOutput {
	return o.ApplyT(func(v LookupChannelResult) *PartnerTopicInfoResponse { return v.PartnerTopicInfo }).(PartnerTopicInfoResponsePtrOutput)
}

// Provisioning state of the channel.
func (o LookupChannelResultOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupChannelResult) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// The readiness state of the corresponding partner topic.
func (o LookupChannelResultOutput) ReadinessState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupChannelResult) *string { return v.ReadinessState }).(pulumi.StringPtrOutput)
}

// The system metadata relating to Channel resource.
func (o LookupChannelResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupChannelResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Type of the resource.
func (o LookupChannelResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupChannelResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupChannelResultOutput{})
}
