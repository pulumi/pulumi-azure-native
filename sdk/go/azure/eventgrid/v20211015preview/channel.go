// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211015preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Channel info.
type Channel struct {
	pulumi.CustomResourceState

	// The type of the event channel which represents the  direction flow of events.
	ChannelType pulumi.StringPtrOutput `pulumi:"channelType"`
	// Expiration time of the channel. If this timer expires while the corresponding partner topic is never activated,
	// the channel and corresponding partner topic are deleted.
	ExpirationTimeIfNotActivatedUtc pulumi.StringPtrOutput `pulumi:"expirationTimeIfNotActivatedUtc"`
	// Context or helpful message that can be used during the approval process by the subscriber.
	MessageForActivation pulumi.StringPtrOutput `pulumi:"messageForActivation"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// This property should be populated when channelType is PartnerDestination and represents information about the partner destination resource corresponding to the channel.
	PartnerDestinationInfo WebhookPartnerDestinationInfoResponsePtrOutput `pulumi:"partnerDestinationInfo"`
	// This property should be populated when channelType is PartnerTopic and represents information about the partner topic resource corresponding to the channel.
	PartnerTopicInfo PartnerTopicInfoResponsePtrOutput `pulumi:"partnerTopicInfo"`
	// Provisioning state of the channel.
	ProvisioningState pulumi.StringPtrOutput `pulumi:"provisioningState"`
	// The readiness state of the corresponding partner topic.
	ReadinessState pulumi.StringPtrOutput `pulumi:"readinessState"`
	// The system metadata relating to Channel resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewChannel registers a new resource with the given unique name, arguments, and options.
func NewChannel(ctx *pulumi.Context,
	name string, args *ChannelArgs, opts ...pulumi.ResourceOption) (*Channel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PartnerNamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'PartnerNamespaceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.PartnerDestinationInfo != nil {
		args.PartnerDestinationInfo = args.PartnerDestinationInfo.ToWebhookPartnerDestinationInfoPtrOutput().ApplyT(func(v *WebhookPartnerDestinationInfo) *WebhookPartnerDestinationInfo { return v.Defaults() }).(WebhookPartnerDestinationInfoPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:eventgrid:Channel"),
		},
		{
			Type: pulumi.String("azure-native:eventgrid/v20220615:Channel"),
		},
	})
	opts = append(opts, aliases)
	var resource Channel
	err := ctx.RegisterResource("azure-native:eventgrid/v20211015preview:Channel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannel gets an existing Channel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelState, opts ...pulumi.ResourceOption) (*Channel, error) {
	var resource Channel
	err := ctx.ReadResource("azure-native:eventgrid/v20211015preview:Channel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Channel resources.
type channelState struct {
}

type ChannelState struct {
}

func (ChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelState)(nil)).Elem()
}

type channelArgs struct {
	// Name of the channel.
	ChannelName *string `pulumi:"channelName"`
	// The type of the event channel which represents the  direction flow of events.
	ChannelType *string `pulumi:"channelType"`
	// Expiration time of the channel. If this timer expires while the corresponding partner topic is never activated,
	// the channel and corresponding partner topic are deleted.
	ExpirationTimeIfNotActivatedUtc *string `pulumi:"expirationTimeIfNotActivatedUtc"`
	// Context or helpful message that can be used during the approval process by the subscriber.
	MessageForActivation *string `pulumi:"messageForActivation"`
	// This property should be populated when channelType is PartnerDestination and represents information about the partner destination resource corresponding to the channel.
	PartnerDestinationInfo *WebhookPartnerDestinationInfo `pulumi:"partnerDestinationInfo"`
	// Name of the partner namespace.
	PartnerNamespaceName string `pulumi:"partnerNamespaceName"`
	// This property should be populated when channelType is PartnerTopic and represents information about the partner topic resource corresponding to the channel.
	PartnerTopicInfo *PartnerTopicInfo `pulumi:"partnerTopicInfo"`
	// Provisioning state of the channel.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The readiness state of the corresponding partner topic.
	ReadinessState *string `pulumi:"readinessState"`
	// The name of the resource group within the partners subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Channel resource.
type ChannelArgs struct {
	// Name of the channel.
	ChannelName pulumi.StringPtrInput
	// The type of the event channel which represents the  direction flow of events.
	ChannelType pulumi.StringPtrInput
	// Expiration time of the channel. If this timer expires while the corresponding partner topic is never activated,
	// the channel and corresponding partner topic are deleted.
	ExpirationTimeIfNotActivatedUtc pulumi.StringPtrInput
	// Context or helpful message that can be used during the approval process by the subscriber.
	MessageForActivation pulumi.StringPtrInput
	// This property should be populated when channelType is PartnerDestination and represents information about the partner destination resource corresponding to the channel.
	PartnerDestinationInfo WebhookPartnerDestinationInfoPtrInput
	// Name of the partner namespace.
	PartnerNamespaceName pulumi.StringInput
	// This property should be populated when channelType is PartnerTopic and represents information about the partner topic resource corresponding to the channel.
	PartnerTopicInfo PartnerTopicInfoPtrInput
	// Provisioning state of the channel.
	ProvisioningState pulumi.StringPtrInput
	// The readiness state of the corresponding partner topic.
	ReadinessState pulumi.StringPtrInput
	// The name of the resource group within the partners subscription.
	ResourceGroupName pulumi.StringInput
}

func (ChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelArgs)(nil)).Elem()
}

type ChannelInput interface {
	pulumi.Input

	ToChannelOutput() ChannelOutput
	ToChannelOutputWithContext(ctx context.Context) ChannelOutput
}

func (*Channel) ElementType() reflect.Type {
	return reflect.TypeOf((**Channel)(nil)).Elem()
}

func (i *Channel) ToChannelOutput() ChannelOutput {
	return i.ToChannelOutputWithContext(context.Background())
}

func (i *Channel) ToChannelOutputWithContext(ctx context.Context) ChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelOutput)
}

type ChannelOutput struct{ *pulumi.OutputState }

func (ChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Channel)(nil)).Elem()
}

func (o ChannelOutput) ToChannelOutput() ChannelOutput {
	return o
}

func (o ChannelOutput) ToChannelOutputWithContext(ctx context.Context) ChannelOutput {
	return o
}

// The type of the event channel which represents the  direction flow of events.
func (o ChannelOutput) ChannelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringPtrOutput { return v.ChannelType }).(pulumi.StringPtrOutput)
}

// Expiration time of the channel. If this timer expires while the corresponding partner topic is never activated,
// the channel and corresponding partner topic are deleted.
func (o ChannelOutput) ExpirationTimeIfNotActivatedUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringPtrOutput { return v.ExpirationTimeIfNotActivatedUtc }).(pulumi.StringPtrOutput)
}

// Context or helpful message that can be used during the approval process by the subscriber.
func (o ChannelOutput) MessageForActivation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringPtrOutput { return v.MessageForActivation }).(pulumi.StringPtrOutput)
}

// Name of the resource.
func (o ChannelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// This property should be populated when channelType is PartnerDestination and represents information about the partner destination resource corresponding to the channel.
func (o ChannelOutput) PartnerDestinationInfo() WebhookPartnerDestinationInfoResponsePtrOutput {
	return o.ApplyT(func(v *Channel) WebhookPartnerDestinationInfoResponsePtrOutput { return v.PartnerDestinationInfo }).(WebhookPartnerDestinationInfoResponsePtrOutput)
}

// This property should be populated when channelType is PartnerTopic and represents information about the partner topic resource corresponding to the channel.
func (o ChannelOutput) PartnerTopicInfo() PartnerTopicInfoResponsePtrOutput {
	return o.ApplyT(func(v *Channel) PartnerTopicInfoResponsePtrOutput { return v.PartnerTopicInfo }).(PartnerTopicInfoResponsePtrOutput)
}

// Provisioning state of the channel.
func (o ChannelOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringPtrOutput { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// The readiness state of the corresponding partner topic.
func (o ChannelOutput) ReadinessState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringPtrOutput { return v.ReadinessState }).(pulumi.StringPtrOutput)
}

// The system metadata relating to Channel resource.
func (o ChannelOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Channel) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Type of the resource.
func (o ChannelOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Channel) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ChannelOutput{})
}
