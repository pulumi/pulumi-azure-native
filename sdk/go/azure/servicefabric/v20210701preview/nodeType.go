// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210701preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
type NodeType struct {
	pulumi.CustomResourceState

	// The range of ports from which cluster assigned port to Service Fabric applications.
	ApplicationPorts EndpointRangeDescriptionResponsePtrOutput `pulumi:"applicationPorts"`
	// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
	Capacities pulumi.StringMapOutput `pulumi:"capacities"`
	// Disk size for each vm in the node type in GBs.
	DataDiskSizeGB pulumi.IntOutput `pulumi:"dataDiskSizeGB"`
	// Managed data disk type.
	DataDiskType pulumi.StringPtrOutput `pulumi:"dataDiskType"`
	// The range of ephemeral ports that nodes in this node type should be configured with.
	EphemeralPorts EndpointRangeDescriptionResponsePtrOutput `pulumi:"ephemeralPorts"`
	// Indicates the node type uses its own frontend configurations instead of the default one for the cluster. This setting can only be specified for non-primary node types and can not be added or removed after the node type is created.
	FrontendConfigurations FrontendConfigurationResponseArrayOutput `pulumi:"frontendConfigurations"`
	// Indicates the Service Fabric system services for the cluster will run on this node type. This setting cannot be changed once the node type is created.
	IsPrimary pulumi.BoolOutput `pulumi:"isPrimary"`
	// Indicates if the node type can only host Stateless workloads.
	IsStateless pulumi.BoolPtrOutput `pulumi:"isStateless"`
	// Indicates if scale set associated with the node type can be composed of multiple placement groups.
	MultiplePlacementGroups pulumi.BoolPtrOutput `pulumi:"multiplePlacementGroups"`
	// Azure resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Network Security Rules for this node type. This setting can only be specified for node types that are configured with frontend configurations.
	NetworkSecurityRules NetworkSecurityRuleResponseArrayOutput `pulumi:"networkSecurityRules"`
	// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
	PlacementProperties pulumi.StringMapOutput `pulumi:"placementProperties"`
	// The provisioning state of the node type resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The node type sku.
	Sku NodeTypeSkuResponsePtrOutput `pulumi:"sku"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Azure resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Azure resource type.
	Type pulumi.StringOutput `pulumi:"type"`
	// Set of extensions that should be installed onto the virtual machines.
	VmExtensions VMSSExtensionResponseArrayOutput `pulumi:"vmExtensions"`
	// The offer type of the Azure Virtual Machines Marketplace image. For example, UbuntuServer or WindowsServer.
	VmImageOffer pulumi.StringPtrOutput `pulumi:"vmImageOffer"`
	// The publisher of the Azure Virtual Machines Marketplace image. For example, Canonical or MicrosoftWindowsServer.
	VmImagePublisher pulumi.StringPtrOutput `pulumi:"vmImagePublisher"`
	// The SKU of the Azure Virtual Machines Marketplace image. For example, 14.04.0-LTS or 2012-R2-Datacenter.
	VmImageSku pulumi.StringPtrOutput `pulumi:"vmImageSku"`
	// The version of the Azure Virtual Machines Marketplace image. A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
	VmImageVersion pulumi.StringPtrOutput `pulumi:"vmImageVersion"`
	// The number of nodes in the node type. <br /><br />**Values:** <br />-1 - Use when auto scale rules are configured or sku.capacity is defined <br /> 0 - Not supported <br /> >0 - Use for manual scale.
	VmInstanceCount pulumi.IntOutput `pulumi:"vmInstanceCount"`
	// Identities to assign to the virtual machine scale set under the node type.
	VmManagedIdentity VmManagedIdentityResponsePtrOutput `pulumi:"vmManagedIdentity"`
	// The secrets to install in the virtual machines.
	VmSecrets VaultSecretGroupResponseArrayOutput `pulumi:"vmSecrets"`
	// The size of virtual machines in the pool. All virtual machines in a pool are the same size. For example, Standard_D3.
	VmSize pulumi.StringPtrOutput `pulumi:"vmSize"`
}

// NewNodeType registers a new resource with the given unique name, arguments, and options.
func NewNodeType(ctx *pulumi.Context,
	name string, args *NodeTypeArgs, opts ...pulumi.ResourceOption) (*NodeType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.DataDiskSizeGB == nil {
		return nil, errors.New("invalid value for required argument 'DataDiskSizeGB'")
	}
	if args.IsPrimary == nil {
		return nil, errors.New("invalid value for required argument 'IsPrimary'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.VmInstanceCount == nil {
		return nil, errors.New("invalid value for required argument 'VmInstanceCount'")
	}
	if isZero(args.IsStateless) {
		args.IsStateless = pulumi.BoolPtr(false)
	}
	if isZero(args.MultiplePlacementGroups) {
		args.MultiplePlacementGroups = pulumi.BoolPtr(false)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:servicefabric:NodeType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20200101preview:NodeType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20210101preview:NodeType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20210501:NodeType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20210901privatepreview:NodeType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20211101preview:NodeType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20220101:NodeType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20220201preview:NodeType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20220601preview:NodeType"),
		},
	})
	opts = append(opts, aliases)
	var resource NodeType
	err := ctx.RegisterResource("azure-native:servicefabric/v20210701preview:NodeType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodeType gets an existing NodeType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodeType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeTypeState, opts ...pulumi.ResourceOption) (*NodeType, error) {
	var resource NodeType
	err := ctx.ReadResource("azure-native:servicefabric/v20210701preview:NodeType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodeType resources.
type nodeTypeState struct {
}

type NodeTypeState struct {
}

func (NodeTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeTypeState)(nil)).Elem()
}

type nodeTypeArgs struct {
	// The range of ports from which cluster assigned port to Service Fabric applications.
	ApplicationPorts *EndpointRangeDescription `pulumi:"applicationPorts"`
	// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
	Capacities map[string]string `pulumi:"capacities"`
	// The name of the cluster resource.
	ClusterName string `pulumi:"clusterName"`
	// Disk size for each vm in the node type in GBs.
	DataDiskSizeGB int `pulumi:"dataDiskSizeGB"`
	// Managed data disk type.
	DataDiskType *string `pulumi:"dataDiskType"`
	// The range of ephemeral ports that nodes in this node type should be configured with.
	EphemeralPorts *EndpointRangeDescription `pulumi:"ephemeralPorts"`
	// Indicates the node type uses its own frontend configurations instead of the default one for the cluster. This setting can only be specified for non-primary node types and can not be added or removed after the node type is created.
	FrontendConfigurations []FrontendConfiguration `pulumi:"frontendConfigurations"`
	// Indicates the Service Fabric system services for the cluster will run on this node type. This setting cannot be changed once the node type is created.
	IsPrimary bool `pulumi:"isPrimary"`
	// Indicates if the node type can only host Stateless workloads.
	IsStateless *bool `pulumi:"isStateless"`
	// Indicates if scale set associated with the node type can be composed of multiple placement groups.
	MultiplePlacementGroups *bool `pulumi:"multiplePlacementGroups"`
	// The Network Security Rules for this node type. This setting can only be specified for node types that are configured with frontend configurations.
	NetworkSecurityRules []NetworkSecurityRule `pulumi:"networkSecurityRules"`
	// The name of the node type.
	NodeTypeName *string `pulumi:"nodeTypeName"`
	// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
	PlacementProperties map[string]string `pulumi:"placementProperties"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The node type sku.
	Sku *NodeTypeSku `pulumi:"sku"`
	// Azure resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Set of extensions that should be installed onto the virtual machines.
	VmExtensions []VMSSExtension `pulumi:"vmExtensions"`
	// The offer type of the Azure Virtual Machines Marketplace image. For example, UbuntuServer or WindowsServer.
	VmImageOffer *string `pulumi:"vmImageOffer"`
	// The publisher of the Azure Virtual Machines Marketplace image. For example, Canonical or MicrosoftWindowsServer.
	VmImagePublisher *string `pulumi:"vmImagePublisher"`
	// The SKU of the Azure Virtual Machines Marketplace image. For example, 14.04.0-LTS or 2012-R2-Datacenter.
	VmImageSku *string `pulumi:"vmImageSku"`
	// The version of the Azure Virtual Machines Marketplace image. A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
	VmImageVersion *string `pulumi:"vmImageVersion"`
	// The number of nodes in the node type. <br /><br />**Values:** <br />-1 - Use when auto scale rules are configured or sku.capacity is defined <br /> 0 - Not supported <br /> >0 - Use for manual scale.
	VmInstanceCount int `pulumi:"vmInstanceCount"`
	// Identities to assign to the virtual machine scale set under the node type.
	VmManagedIdentity *VmManagedIdentity `pulumi:"vmManagedIdentity"`
	// The secrets to install in the virtual machines.
	VmSecrets []VaultSecretGroup `pulumi:"vmSecrets"`
	// The size of virtual machines in the pool. All virtual machines in a pool are the same size. For example, Standard_D3.
	VmSize *string `pulumi:"vmSize"`
}

// The set of arguments for constructing a NodeType resource.
type NodeTypeArgs struct {
	// The range of ports from which cluster assigned port to Service Fabric applications.
	ApplicationPorts EndpointRangeDescriptionPtrInput
	// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
	Capacities pulumi.StringMapInput
	// The name of the cluster resource.
	ClusterName pulumi.StringInput
	// Disk size for each vm in the node type in GBs.
	DataDiskSizeGB pulumi.IntInput
	// Managed data disk type.
	DataDiskType pulumi.StringPtrInput
	// The range of ephemeral ports that nodes in this node type should be configured with.
	EphemeralPorts EndpointRangeDescriptionPtrInput
	// Indicates the node type uses its own frontend configurations instead of the default one for the cluster. This setting can only be specified for non-primary node types and can not be added or removed after the node type is created.
	FrontendConfigurations FrontendConfigurationArrayInput
	// Indicates the Service Fabric system services for the cluster will run on this node type. This setting cannot be changed once the node type is created.
	IsPrimary pulumi.BoolInput
	// Indicates if the node type can only host Stateless workloads.
	IsStateless pulumi.BoolPtrInput
	// Indicates if scale set associated with the node type can be composed of multiple placement groups.
	MultiplePlacementGroups pulumi.BoolPtrInput
	// The Network Security Rules for this node type. This setting can only be specified for node types that are configured with frontend configurations.
	NetworkSecurityRules NetworkSecurityRuleArrayInput
	// The name of the node type.
	NodeTypeName pulumi.StringPtrInput
	// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
	PlacementProperties pulumi.StringMapInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The node type sku.
	Sku NodeTypeSkuPtrInput
	// Azure resource tags.
	Tags pulumi.StringMapInput
	// Set of extensions that should be installed onto the virtual machines.
	VmExtensions VMSSExtensionArrayInput
	// The offer type of the Azure Virtual Machines Marketplace image. For example, UbuntuServer or WindowsServer.
	VmImageOffer pulumi.StringPtrInput
	// The publisher of the Azure Virtual Machines Marketplace image. For example, Canonical or MicrosoftWindowsServer.
	VmImagePublisher pulumi.StringPtrInput
	// The SKU of the Azure Virtual Machines Marketplace image. For example, 14.04.0-LTS or 2012-R2-Datacenter.
	VmImageSku pulumi.StringPtrInput
	// The version of the Azure Virtual Machines Marketplace image. A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
	VmImageVersion pulumi.StringPtrInput
	// The number of nodes in the node type. <br /><br />**Values:** <br />-1 - Use when auto scale rules are configured or sku.capacity is defined <br /> 0 - Not supported <br /> >0 - Use for manual scale.
	VmInstanceCount pulumi.IntInput
	// Identities to assign to the virtual machine scale set under the node type.
	VmManagedIdentity VmManagedIdentityPtrInput
	// The secrets to install in the virtual machines.
	VmSecrets VaultSecretGroupArrayInput
	// The size of virtual machines in the pool. All virtual machines in a pool are the same size. For example, Standard_D3.
	VmSize pulumi.StringPtrInput
}

func (NodeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeTypeArgs)(nil)).Elem()
}

type NodeTypeInput interface {
	pulumi.Input

	ToNodeTypeOutput() NodeTypeOutput
	ToNodeTypeOutputWithContext(ctx context.Context) NodeTypeOutput
}

func (*NodeType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeType)(nil)).Elem()
}

func (i *NodeType) ToNodeTypeOutput() NodeTypeOutput {
	return i.ToNodeTypeOutputWithContext(context.Background())
}

func (i *NodeType) ToNodeTypeOutputWithContext(ctx context.Context) NodeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTypeOutput)
}

type NodeTypeOutput struct{ *pulumi.OutputState }

func (NodeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeType)(nil)).Elem()
}

func (o NodeTypeOutput) ToNodeTypeOutput() NodeTypeOutput {
	return o
}

func (o NodeTypeOutput) ToNodeTypeOutputWithContext(ctx context.Context) NodeTypeOutput {
	return o
}

// The range of ports from which cluster assigned port to Service Fabric applications.
func (o NodeTypeOutput) ApplicationPorts() EndpointRangeDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *NodeType) EndpointRangeDescriptionResponsePtrOutput { return v.ApplicationPorts }).(EndpointRangeDescriptionResponsePtrOutput)
}

// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
func (o NodeTypeOutput) Capacities() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeType) pulumi.StringMapOutput { return v.Capacities }).(pulumi.StringMapOutput)
}

// Disk size for each vm in the node type in GBs.
func (o NodeTypeOutput) DataDiskSizeGB() pulumi.IntOutput {
	return o.ApplyT(func(v *NodeType) pulumi.IntOutput { return v.DataDiskSizeGB }).(pulumi.IntOutput)
}

// Managed data disk type.
func (o NodeTypeOutput) DataDiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeType) pulumi.StringPtrOutput { return v.DataDiskType }).(pulumi.StringPtrOutput)
}

// The range of ephemeral ports that nodes in this node type should be configured with.
func (o NodeTypeOutput) EphemeralPorts() EndpointRangeDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *NodeType) EndpointRangeDescriptionResponsePtrOutput { return v.EphemeralPorts }).(EndpointRangeDescriptionResponsePtrOutput)
}

// Indicates the node type uses its own frontend configurations instead of the default one for the cluster. This setting can only be specified for non-primary node types and can not be added or removed after the node type is created.
func (o NodeTypeOutput) FrontendConfigurations() FrontendConfigurationResponseArrayOutput {
	return o.ApplyT(func(v *NodeType) FrontendConfigurationResponseArrayOutput { return v.FrontendConfigurations }).(FrontendConfigurationResponseArrayOutput)
}

// Indicates the Service Fabric system services for the cluster will run on this node type. This setting cannot be changed once the node type is created.
func (o NodeTypeOutput) IsPrimary() pulumi.BoolOutput {
	return o.ApplyT(func(v *NodeType) pulumi.BoolOutput { return v.IsPrimary }).(pulumi.BoolOutput)
}

// Indicates if the node type can only host Stateless workloads.
func (o NodeTypeOutput) IsStateless() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeType) pulumi.BoolPtrOutput { return v.IsStateless }).(pulumi.BoolPtrOutput)
}

// Indicates if scale set associated with the node type can be composed of multiple placement groups.
func (o NodeTypeOutput) MultiplePlacementGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeType) pulumi.BoolPtrOutput { return v.MultiplePlacementGroups }).(pulumi.BoolPtrOutput)
}

// Azure resource name.
func (o NodeTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeType) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Network Security Rules for this node type. This setting can only be specified for node types that are configured with frontend configurations.
func (o NodeTypeOutput) NetworkSecurityRules() NetworkSecurityRuleResponseArrayOutput {
	return o.ApplyT(func(v *NodeType) NetworkSecurityRuleResponseArrayOutput { return v.NetworkSecurityRules }).(NetworkSecurityRuleResponseArrayOutput)
}

// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
func (o NodeTypeOutput) PlacementProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeType) pulumi.StringMapOutput { return v.PlacementProperties }).(pulumi.StringMapOutput)
}

// The provisioning state of the node type resource.
func (o NodeTypeOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeType) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The node type sku.
func (o NodeTypeOutput) Sku() NodeTypeSkuResponsePtrOutput {
	return o.ApplyT(func(v *NodeType) NodeTypeSkuResponsePtrOutput { return v.Sku }).(NodeTypeSkuResponsePtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o NodeTypeOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *NodeType) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Azure resource tags.
func (o NodeTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeType) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure resource type.
func (o NodeTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeType) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Set of extensions that should be installed onto the virtual machines.
func (o NodeTypeOutput) VmExtensions() VMSSExtensionResponseArrayOutput {
	return o.ApplyT(func(v *NodeType) VMSSExtensionResponseArrayOutput { return v.VmExtensions }).(VMSSExtensionResponseArrayOutput)
}

// The offer type of the Azure Virtual Machines Marketplace image. For example, UbuntuServer or WindowsServer.
func (o NodeTypeOutput) VmImageOffer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeType) pulumi.StringPtrOutput { return v.VmImageOffer }).(pulumi.StringPtrOutput)
}

// The publisher of the Azure Virtual Machines Marketplace image. For example, Canonical or MicrosoftWindowsServer.
func (o NodeTypeOutput) VmImagePublisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeType) pulumi.StringPtrOutput { return v.VmImagePublisher }).(pulumi.StringPtrOutput)
}

// The SKU of the Azure Virtual Machines Marketplace image. For example, 14.04.0-LTS or 2012-R2-Datacenter.
func (o NodeTypeOutput) VmImageSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeType) pulumi.StringPtrOutput { return v.VmImageSku }).(pulumi.StringPtrOutput)
}

// The version of the Azure Virtual Machines Marketplace image. A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
func (o NodeTypeOutput) VmImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeType) pulumi.StringPtrOutput { return v.VmImageVersion }).(pulumi.StringPtrOutput)
}

// The number of nodes in the node type. <br /><br />**Values:** <br />-1 - Use when auto scale rules are configured or sku.capacity is defined <br /> 0 - Not supported <br /> >0 - Use for manual scale.
func (o NodeTypeOutput) VmInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NodeType) pulumi.IntOutput { return v.VmInstanceCount }).(pulumi.IntOutput)
}

// Identities to assign to the virtual machine scale set under the node type.
func (o NodeTypeOutput) VmManagedIdentity() VmManagedIdentityResponsePtrOutput {
	return o.ApplyT(func(v *NodeType) VmManagedIdentityResponsePtrOutput { return v.VmManagedIdentity }).(VmManagedIdentityResponsePtrOutput)
}

// The secrets to install in the virtual machines.
func (o NodeTypeOutput) VmSecrets() VaultSecretGroupResponseArrayOutput {
	return o.ApplyT(func(v *NodeType) VaultSecretGroupResponseArrayOutput { return v.VmSecrets }).(VaultSecretGroupResponseArrayOutput)
}

// The size of virtual machines in the pool. All virtual machines in a pool are the same size. For example, Standard_D3.
func (o NodeTypeOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeType) pulumi.StringPtrOutput { return v.VmSize }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(NodeTypeOutput{})
}
