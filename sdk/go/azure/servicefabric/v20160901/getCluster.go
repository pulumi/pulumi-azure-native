// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20160901

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The cluster resource
//
// Deprecated: Version 2016-09-01 will be removed in v2 of the provider.
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	var rv LookupClusterResult
	err := ctx.Invoke("azure-native:servicefabric/v20160901:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupClusterArgs struct {
	// The name of the cluster resource
	ClusterName string `pulumi:"clusterName"`
	// The name of the resource group to which the resource belongs or get created
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The cluster resource
type LookupClusterResult struct {
	// The available cluster code version which the cluster can upgrade to, note that you must choose upgradeMode to manual to upgrade to
	AvailableClusterVersions []ClusterVersionDetailsResponse `pulumi:"availableClusterVersions"`
	// The settings to enable AAD authentication on the cluster
	AzureActiveDirectory *AzureActiveDirectoryResponse `pulumi:"azureActiveDirectory"`
	// This primary certificate will be used as cluster node to node security, SSL certificate for cluster management endpoint and default admin client
	Certificate *CertificateDescriptionResponse `pulumi:"certificate"`
	//  List of client certificates to whitelist based on common names
	ClientCertificateCommonNames []ClientCertificateCommonNameResponse `pulumi:"clientCertificateCommonNames"`
	// The client thumbprint details ,it is used for client access for cluster operation
	ClientCertificateThumbprints []ClientCertificateThumbprintResponse `pulumi:"clientCertificateThumbprints"`
	// The ServiceFabric code version running in your cluster
	ClusterCodeVersion *string `pulumi:"clusterCodeVersion"`
	// The endpoint for the cluster connecting to servicefabric resource provider
	ClusterEndpoint string `pulumi:"clusterEndpoint"`
	// The unique identifier for the cluster resource
	ClusterId string `pulumi:"clusterId"`
	// The state for the cluster
	ClusterState string `pulumi:"clusterState"`
	// The storage diagnostics account configuration details
	DiagnosticsStorageAccountConfig *DiagnosticsStorageAccountConfigResponse `pulumi:"diagnosticsStorageAccountConfig"`
	// List of custom fabric settings to configure the cluster.
	FabricSettings []SettingsSectionDescriptionResponse `pulumi:"fabricSettings"`
	// Resource ID.
	Id string `pulumi:"id"`
	// Resource location.
	Location string `pulumi:"location"`
	// The http management endpoint of the cluster
	ManagementEndpoint string `pulumi:"managementEndpoint"`
	// Resource name.
	Name string `pulumi:"name"`
	// The list of node types that make up the cluster
	NodeTypes []NodeTypeDescriptionResponse `pulumi:"nodeTypes"`
	// The provisioning state of the cluster resource
	ProvisioningState string `pulumi:"provisioningState"`
	// Cluster reliability level indicates replica set size of system service
	ReliabilityLevel *string `pulumi:"reliabilityLevel"`
	// The server certificate used by reverse proxy
	ReverseProxyCertificate *CertificateDescriptionResponse `pulumi:"reverseProxyCertificate"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Resource type.
	Type string `pulumi:"type"`
	// The policy to use when upgrading the cluster.
	UpgradeDescription *ClusterUpgradePolicyResponse `pulumi:"upgradeDescription"`
	// Cluster upgrade mode indicates if fabric upgrade is initiated automatically by the system or not
	UpgradeMode *string `pulumi:"upgradeMode"`
	// The name of VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
	VmImage *string `pulumi:"vmImage"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClusterResult, error) {
			args := v.(LookupClusterArgs)
			r, err := LookupCluster(ctx, &args, opts...)
			var s LookupClusterResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupClusterResultOutput)
}

type LookupClusterOutputArgs struct {
	// The name of the cluster resource
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// The name of the resource group to which the resource belongs or get created
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterArgs)(nil)).Elem()
}

// The cluster resource
type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutput() LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutputWithContext(ctx context.Context) LookupClusterResultOutput {
	return o
}

// The available cluster code version which the cluster can upgrade to, note that you must choose upgradeMode to manual to upgrade to
func (o LookupClusterResultOutput) AvailableClusterVersions() ClusterVersionDetailsResponseArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []ClusterVersionDetailsResponse { return v.AvailableClusterVersions }).(ClusterVersionDetailsResponseArrayOutput)
}

// The settings to enable AAD authentication on the cluster
func (o LookupClusterResultOutput) AzureActiveDirectory() AzureActiveDirectoryResponsePtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *AzureActiveDirectoryResponse { return v.AzureActiveDirectory }).(AzureActiveDirectoryResponsePtrOutput)
}

// This primary certificate will be used as cluster node to node security, SSL certificate for cluster management endpoint and default admin client
func (o LookupClusterResultOutput) Certificate() CertificateDescriptionResponsePtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *CertificateDescriptionResponse { return v.Certificate }).(CertificateDescriptionResponsePtrOutput)
}

// List of client certificates to whitelist based on common names
func (o LookupClusterResultOutput) ClientCertificateCommonNames() ClientCertificateCommonNameResponseArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []ClientCertificateCommonNameResponse {
		return v.ClientCertificateCommonNames
	}).(ClientCertificateCommonNameResponseArrayOutput)
}

// The client thumbprint details ,it is used for client access for cluster operation
func (o LookupClusterResultOutput) ClientCertificateThumbprints() ClientCertificateThumbprintResponseArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []ClientCertificateThumbprintResponse {
		return v.ClientCertificateThumbprints
	}).(ClientCertificateThumbprintResponseArrayOutput)
}

// The ServiceFabric code version running in your cluster
func (o LookupClusterResultOutput) ClusterCodeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.ClusterCodeVersion }).(pulumi.StringPtrOutput)
}

// The endpoint for the cluster connecting to servicefabric resource provider
func (o LookupClusterResultOutput) ClusterEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ClusterEndpoint }).(pulumi.StringOutput)
}

// The unique identifier for the cluster resource
func (o LookupClusterResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The state for the cluster
func (o LookupClusterResultOutput) ClusterState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ClusterState }).(pulumi.StringOutput)
}

// The storage diagnostics account configuration details
func (o LookupClusterResultOutput) DiagnosticsStorageAccountConfig() DiagnosticsStorageAccountConfigResponsePtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *DiagnosticsStorageAccountConfigResponse {
		return v.DiagnosticsStorageAccountConfig
	}).(DiagnosticsStorageAccountConfigResponsePtrOutput)
}

// List of custom fabric settings to configure the cluster.
func (o LookupClusterResultOutput) FabricSettings() SettingsSectionDescriptionResponseArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []SettingsSectionDescriptionResponse { return v.FabricSettings }).(SettingsSectionDescriptionResponseArrayOutput)
}

// Resource ID.
func (o LookupClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// Resource location.
func (o LookupClusterResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Location }).(pulumi.StringOutput)
}

// The http management endpoint of the cluster
func (o LookupClusterResultOutput) ManagementEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ManagementEndpoint }).(pulumi.StringOutput)
}

// Resource name.
func (o LookupClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

// The list of node types that make up the cluster
func (o LookupClusterResultOutput) NodeTypes() NodeTypeDescriptionResponseArrayOutput {
	return o.ApplyT(func(v LookupClusterResult) []NodeTypeDescriptionResponse { return v.NodeTypes }).(NodeTypeDescriptionResponseArrayOutput)
}

// The provisioning state of the cluster resource
func (o LookupClusterResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Cluster reliability level indicates replica set size of system service
func (o LookupClusterResultOutput) ReliabilityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.ReliabilityLevel }).(pulumi.StringPtrOutput)
}

// The server certificate used by reverse proxy
func (o LookupClusterResultOutput) ReverseProxyCertificate() CertificateDescriptionResponsePtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *CertificateDescriptionResponse { return v.ReverseProxyCertificate }).(CertificateDescriptionResponsePtrOutput)
}

// Resource tags.
func (o LookupClusterResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupClusterResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type.
func (o LookupClusterResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Type }).(pulumi.StringOutput)
}

// The policy to use when upgrading the cluster.
func (o LookupClusterResultOutput) UpgradeDescription() ClusterUpgradePolicyResponsePtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *ClusterUpgradePolicyResponse { return v.UpgradeDescription }).(ClusterUpgradePolicyResponsePtrOutput)
}

// Cluster upgrade mode indicates if fabric upgrade is initiated automatically by the system or not
func (o LookupClusterResultOutput) UpgradeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.UpgradeMode }).(pulumi.StringPtrOutput)
}

// The name of VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
func (o LookupClusterResultOutput) VmImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClusterResult) *string { return v.VmImage }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterResultOutput{})
}
