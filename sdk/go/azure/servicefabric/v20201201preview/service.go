// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20201201preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The service resource.
type Service struct {
	pulumi.CustomResourceState

	// A list that describes the correlation of the service with other services.
	CorrelationScheme ServiceCorrelationDescriptionResponseArrayOutput `pulumi:"correlationScheme"`
	// Specifies the move cost for the service.
	DefaultMoveCost pulumi.StringPtrOutput `pulumi:"defaultMoveCost"`
	// Azure resource etag.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// It will be deprecated in New API, resource location depends on the parent resource.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Azure resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Describes how the service is partitioned.
	PartitionDescription pulumi.AnyOutput `pulumi:"partitionDescription"`
	// The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
	PlacementConstraints pulumi.StringPtrOutput `pulumi:"placementConstraints"`
	// The current deployment or provisioning state, which only appears in the response
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Dns name used for the service. If this is specified, then the service can be accessed via its DNS name instead of service name.
	ServiceDnsName pulumi.StringPtrOutput `pulumi:"serviceDnsName"`
	// The kind of service (Stateless or Stateful).
	ServiceKind pulumi.StringOutput `pulumi:"serviceKind"`
	// The service load metrics is given as an array of ServiceLoadMetricDescription objects.
	ServiceLoadMetrics ServiceLoadMetricDescriptionResponseArrayOutput `pulumi:"serviceLoadMetrics"`
	// The activation Mode of the service package
	ServicePackageActivationMode pulumi.StringPtrOutput `pulumi:"servicePackageActivationMode"`
	// A list that describes the correlation of the service with other services.
	ServicePlacementPolicies ServicePlacementPolicyDescriptionResponseArrayOutput `pulumi:"servicePlacementPolicies"`
	// The name of the service type
	ServiceTypeName pulumi.StringPtrOutput `pulumi:"serviceTypeName"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Azure resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Azure resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationName == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationName'")
	}
	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceKind == nil {
		return nil, errors.New("invalid value for required argument 'ServiceKind'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:servicefabric:Service"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20170701preview:Service"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20190301:Service"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20190301preview:Service"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20190601preview:Service"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20191101preview:Service"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20200301:Service"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20210601:Service"),
		},
	})
	opts = append(opts, aliases)
	var resource Service
	err := ctx.RegisterResource("azure-native:servicefabric/v20201201preview:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("azure-native:servicefabric/v20201201preview:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
}

type ServiceState struct {
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// The name of the application resource.
	ApplicationName string `pulumi:"applicationName"`
	// The name of the cluster resource.
	ClusterName string `pulumi:"clusterName"`
	// A list that describes the correlation of the service with other services.
	CorrelationScheme []ServiceCorrelationDescription `pulumi:"correlationScheme"`
	// Specifies the move cost for the service.
	DefaultMoveCost *string `pulumi:"defaultMoveCost"`
	// It will be deprecated in New API, resource location depends on the parent resource.
	Location *string `pulumi:"location"`
	// Describes how the service is partitioned.
	PartitionDescription interface{} `pulumi:"partitionDescription"`
	// The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
	PlacementConstraints *string `pulumi:"placementConstraints"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Dns name used for the service. If this is specified, then the service can be accessed via its DNS name instead of service name.
	ServiceDnsName *string `pulumi:"serviceDnsName"`
	// The kind of service (Stateless or Stateful).
	ServiceKind string `pulumi:"serviceKind"`
	// The service load metrics is given as an array of ServiceLoadMetricDescription objects.
	ServiceLoadMetrics []ServiceLoadMetricDescription `pulumi:"serviceLoadMetrics"`
	// The name of the service resource in the format of {applicationName}~{serviceName}.
	ServiceName *string `pulumi:"serviceName"`
	// The activation Mode of the service package
	ServicePackageActivationMode *string `pulumi:"servicePackageActivationMode"`
	// A list that describes the correlation of the service with other services.
	ServicePlacementPolicies []ServicePlacementPolicyDescription `pulumi:"servicePlacementPolicies"`
	// The name of the service type
	ServiceTypeName *string `pulumi:"serviceTypeName"`
	// Azure resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// The name of the application resource.
	ApplicationName pulumi.StringInput
	// The name of the cluster resource.
	ClusterName pulumi.StringInput
	// A list that describes the correlation of the service with other services.
	CorrelationScheme ServiceCorrelationDescriptionArrayInput
	// Specifies the move cost for the service.
	DefaultMoveCost pulumi.StringPtrInput
	// It will be deprecated in New API, resource location depends on the parent resource.
	Location pulumi.StringPtrInput
	// Describes how the service is partitioned.
	PartitionDescription pulumi.Input
	// The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
	PlacementConstraints pulumi.StringPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// Dns name used for the service. If this is specified, then the service can be accessed via its DNS name instead of service name.
	ServiceDnsName pulumi.StringPtrInput
	// The kind of service (Stateless or Stateful).
	ServiceKind pulumi.StringInput
	// The service load metrics is given as an array of ServiceLoadMetricDescription objects.
	ServiceLoadMetrics ServiceLoadMetricDescriptionArrayInput
	// The name of the service resource in the format of {applicationName}~{serviceName}.
	ServiceName pulumi.StringPtrInput
	// The activation Mode of the service package
	ServicePackageActivationMode pulumi.StringPtrInput
	// A list that describes the correlation of the service with other services.
	ServicePlacementPolicies ServicePlacementPolicyDescriptionArrayInput
	// The name of the service type
	ServiceTypeName pulumi.StringPtrInput
	// Azure resource tags.
	Tags pulumi.StringMapInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

// A list that describes the correlation of the service with other services.
func (o ServiceOutput) CorrelationScheme() ServiceCorrelationDescriptionResponseArrayOutput {
	return o.ApplyT(func(v *Service) ServiceCorrelationDescriptionResponseArrayOutput { return v.CorrelationScheme }).(ServiceCorrelationDescriptionResponseArrayOutput)
}

// Specifies the move cost for the service.
func (o ServiceOutput) DefaultMoveCost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.DefaultMoveCost }).(pulumi.StringPtrOutput)
}

// Azure resource etag.
func (o ServiceOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// It will be deprecated in New API, resource location depends on the parent resource.
func (o ServiceOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Azure resource name.
func (o ServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Describes how the service is partitioned.
func (o ServiceOutput) PartitionDescription() pulumi.AnyOutput {
	return o.ApplyT(func(v *Service) pulumi.AnyOutput { return v.PartitionDescription }).(pulumi.AnyOutput)
}

// The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
func (o ServiceOutput) PlacementConstraints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.PlacementConstraints }).(pulumi.StringPtrOutput)
}

// The current deployment or provisioning state, which only appears in the response
func (o ServiceOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Dns name used for the service. If this is specified, then the service can be accessed via its DNS name instead of service name.
func (o ServiceOutput) ServiceDnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.ServiceDnsName }).(pulumi.StringPtrOutput)
}

// The kind of service (Stateless or Stateful).
func (o ServiceOutput) ServiceKind() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ServiceKind }).(pulumi.StringOutput)
}

// The service load metrics is given as an array of ServiceLoadMetricDescription objects.
func (o ServiceOutput) ServiceLoadMetrics() ServiceLoadMetricDescriptionResponseArrayOutput {
	return o.ApplyT(func(v *Service) ServiceLoadMetricDescriptionResponseArrayOutput { return v.ServiceLoadMetrics }).(ServiceLoadMetricDescriptionResponseArrayOutput)
}

// The activation Mode of the service package
func (o ServiceOutput) ServicePackageActivationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.ServicePackageActivationMode }).(pulumi.StringPtrOutput)
}

// A list that describes the correlation of the service with other services.
func (o ServiceOutput) ServicePlacementPolicies() ServicePlacementPolicyDescriptionResponseArrayOutput {
	return o.ApplyT(func(v *Service) ServicePlacementPolicyDescriptionResponseArrayOutput {
		return v.ServicePlacementPolicies
	}).(ServicePlacementPolicyDescriptionResponseArrayOutput)
}

// The name of the service type
func (o ServiceOutput) ServiceTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.ServiceTypeName }).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o ServiceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Service) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Azure resource tags.
func (o ServiceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Service) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure resource type.
func (o ServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ServiceOutput{})
}
