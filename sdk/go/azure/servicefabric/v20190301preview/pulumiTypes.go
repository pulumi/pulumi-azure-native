// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20190301preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Defines a delta health policy used to evaluate the health of an application or one of its child entities when upgrading the cluster.
type ApplicationDeltaHealthPolicy struct {
	// The delta health policy used by default to evaluate the health of a service type when upgrading the cluster.
	DefaultServiceTypeDeltaHealthPolicy *ServiceTypeDeltaHealthPolicy `pulumi:"defaultServiceTypeDeltaHealthPolicy"`
	// The map with service type delta health policy per service type name. The map is empty by default.
	ServiceTypeDeltaHealthPolicies map[string]ServiceTypeDeltaHealthPolicy `pulumi:"serviceTypeDeltaHealthPolicies"`
}

// Defaults sets the appropriate defaults for ApplicationDeltaHealthPolicy
func (val *ApplicationDeltaHealthPolicy) Defaults() *ApplicationDeltaHealthPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DefaultServiceTypeDeltaHealthPolicy = tmp.DefaultServiceTypeDeltaHealthPolicy.Defaults()

	return &tmp
}

// ApplicationDeltaHealthPolicyInput is an input type that accepts ApplicationDeltaHealthPolicyArgs and ApplicationDeltaHealthPolicyOutput values.
// You can construct a concrete instance of `ApplicationDeltaHealthPolicyInput` via:
//
//	ApplicationDeltaHealthPolicyArgs{...}
type ApplicationDeltaHealthPolicyInput interface {
	pulumi.Input

	ToApplicationDeltaHealthPolicyOutput() ApplicationDeltaHealthPolicyOutput
	ToApplicationDeltaHealthPolicyOutputWithContext(context.Context) ApplicationDeltaHealthPolicyOutput
}

// Defines a delta health policy used to evaluate the health of an application or one of its child entities when upgrading the cluster.
type ApplicationDeltaHealthPolicyArgs struct {
	// The delta health policy used by default to evaluate the health of a service type when upgrading the cluster.
	DefaultServiceTypeDeltaHealthPolicy ServiceTypeDeltaHealthPolicyPtrInput `pulumi:"defaultServiceTypeDeltaHealthPolicy"`
	// The map with service type delta health policy per service type name. The map is empty by default.
	ServiceTypeDeltaHealthPolicies ServiceTypeDeltaHealthPolicyMapInput `pulumi:"serviceTypeDeltaHealthPolicies"`
}

// Defaults sets the appropriate defaults for ApplicationDeltaHealthPolicyArgs
func (val *ApplicationDeltaHealthPolicyArgs) Defaults() *ApplicationDeltaHealthPolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ApplicationDeltaHealthPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationDeltaHealthPolicy)(nil)).Elem()
}

func (i ApplicationDeltaHealthPolicyArgs) ToApplicationDeltaHealthPolicyOutput() ApplicationDeltaHealthPolicyOutput {
	return i.ToApplicationDeltaHealthPolicyOutputWithContext(context.Background())
}

func (i ApplicationDeltaHealthPolicyArgs) ToApplicationDeltaHealthPolicyOutputWithContext(ctx context.Context) ApplicationDeltaHealthPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDeltaHealthPolicyOutput)
}

// ApplicationDeltaHealthPolicyMapInput is an input type that accepts ApplicationDeltaHealthPolicyMap and ApplicationDeltaHealthPolicyMapOutput values.
// You can construct a concrete instance of `ApplicationDeltaHealthPolicyMapInput` via:
//
//	ApplicationDeltaHealthPolicyMap{ "key": ApplicationDeltaHealthPolicyArgs{...} }
type ApplicationDeltaHealthPolicyMapInput interface {
	pulumi.Input

	ToApplicationDeltaHealthPolicyMapOutput() ApplicationDeltaHealthPolicyMapOutput
	ToApplicationDeltaHealthPolicyMapOutputWithContext(context.Context) ApplicationDeltaHealthPolicyMapOutput
}

type ApplicationDeltaHealthPolicyMap map[string]ApplicationDeltaHealthPolicyInput

func (ApplicationDeltaHealthPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ApplicationDeltaHealthPolicy)(nil)).Elem()
}

func (i ApplicationDeltaHealthPolicyMap) ToApplicationDeltaHealthPolicyMapOutput() ApplicationDeltaHealthPolicyMapOutput {
	return i.ToApplicationDeltaHealthPolicyMapOutputWithContext(context.Background())
}

func (i ApplicationDeltaHealthPolicyMap) ToApplicationDeltaHealthPolicyMapOutputWithContext(ctx context.Context) ApplicationDeltaHealthPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDeltaHealthPolicyMapOutput)
}

// Defines a delta health policy used to evaluate the health of an application or one of its child entities when upgrading the cluster.
type ApplicationDeltaHealthPolicyOutput struct{ *pulumi.OutputState }

func (ApplicationDeltaHealthPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationDeltaHealthPolicy)(nil)).Elem()
}

func (o ApplicationDeltaHealthPolicyOutput) ToApplicationDeltaHealthPolicyOutput() ApplicationDeltaHealthPolicyOutput {
	return o
}

func (o ApplicationDeltaHealthPolicyOutput) ToApplicationDeltaHealthPolicyOutputWithContext(ctx context.Context) ApplicationDeltaHealthPolicyOutput {
	return o
}

// The delta health policy used by default to evaluate the health of a service type when upgrading the cluster.
func (o ApplicationDeltaHealthPolicyOutput) DefaultServiceTypeDeltaHealthPolicy() ServiceTypeDeltaHealthPolicyPtrOutput {
	return o.ApplyT(func(v ApplicationDeltaHealthPolicy) *ServiceTypeDeltaHealthPolicy {
		return v.DefaultServiceTypeDeltaHealthPolicy
	}).(ServiceTypeDeltaHealthPolicyPtrOutput)
}

// The map with service type delta health policy per service type name. The map is empty by default.
func (o ApplicationDeltaHealthPolicyOutput) ServiceTypeDeltaHealthPolicies() ServiceTypeDeltaHealthPolicyMapOutput {
	return o.ApplyT(func(v ApplicationDeltaHealthPolicy) map[string]ServiceTypeDeltaHealthPolicy {
		return v.ServiceTypeDeltaHealthPolicies
	}).(ServiceTypeDeltaHealthPolicyMapOutput)
}

type ApplicationDeltaHealthPolicyMapOutput struct{ *pulumi.OutputState }

func (ApplicationDeltaHealthPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ApplicationDeltaHealthPolicy)(nil)).Elem()
}

func (o ApplicationDeltaHealthPolicyMapOutput) ToApplicationDeltaHealthPolicyMapOutput() ApplicationDeltaHealthPolicyMapOutput {
	return o
}

func (o ApplicationDeltaHealthPolicyMapOutput) ToApplicationDeltaHealthPolicyMapOutputWithContext(ctx context.Context) ApplicationDeltaHealthPolicyMapOutput {
	return o
}

func (o ApplicationDeltaHealthPolicyMapOutput) MapIndex(k pulumi.StringInput) ApplicationDeltaHealthPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ApplicationDeltaHealthPolicy {
		return vs[0].(map[string]ApplicationDeltaHealthPolicy)[vs[1].(string)]
	}).(ApplicationDeltaHealthPolicyOutput)
}

// Defines a delta health policy used to evaluate the health of an application or one of its child entities when upgrading the cluster.
type ApplicationDeltaHealthPolicyResponse struct {
	// The delta health policy used by default to evaluate the health of a service type when upgrading the cluster.
	DefaultServiceTypeDeltaHealthPolicy *ServiceTypeDeltaHealthPolicyResponse `pulumi:"defaultServiceTypeDeltaHealthPolicy"`
	// The map with service type delta health policy per service type name. The map is empty by default.
	ServiceTypeDeltaHealthPolicies map[string]ServiceTypeDeltaHealthPolicyResponse `pulumi:"serviceTypeDeltaHealthPolicies"`
}

// Defaults sets the appropriate defaults for ApplicationDeltaHealthPolicyResponse
func (val *ApplicationDeltaHealthPolicyResponse) Defaults() *ApplicationDeltaHealthPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DefaultServiceTypeDeltaHealthPolicy = tmp.DefaultServiceTypeDeltaHealthPolicy.Defaults()

	return &tmp
}

// Defines a delta health policy used to evaluate the health of an application or one of its child entities when upgrading the cluster.
type ApplicationDeltaHealthPolicyResponseOutput struct{ *pulumi.OutputState }

func (ApplicationDeltaHealthPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationDeltaHealthPolicyResponse)(nil)).Elem()
}

func (o ApplicationDeltaHealthPolicyResponseOutput) ToApplicationDeltaHealthPolicyResponseOutput() ApplicationDeltaHealthPolicyResponseOutput {
	return o
}

func (o ApplicationDeltaHealthPolicyResponseOutput) ToApplicationDeltaHealthPolicyResponseOutputWithContext(ctx context.Context) ApplicationDeltaHealthPolicyResponseOutput {
	return o
}

// The delta health policy used by default to evaluate the health of a service type when upgrading the cluster.
func (o ApplicationDeltaHealthPolicyResponseOutput) DefaultServiceTypeDeltaHealthPolicy() ServiceTypeDeltaHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v ApplicationDeltaHealthPolicyResponse) *ServiceTypeDeltaHealthPolicyResponse {
		return v.DefaultServiceTypeDeltaHealthPolicy
	}).(ServiceTypeDeltaHealthPolicyResponsePtrOutput)
}

// The map with service type delta health policy per service type name. The map is empty by default.
func (o ApplicationDeltaHealthPolicyResponseOutput) ServiceTypeDeltaHealthPolicies() ServiceTypeDeltaHealthPolicyResponseMapOutput {
	return o.ApplyT(func(v ApplicationDeltaHealthPolicyResponse) map[string]ServiceTypeDeltaHealthPolicyResponse {
		return v.ServiceTypeDeltaHealthPolicies
	}).(ServiceTypeDeltaHealthPolicyResponseMapOutput)
}

type ApplicationDeltaHealthPolicyResponseMapOutput struct{ *pulumi.OutputState }

func (ApplicationDeltaHealthPolicyResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ApplicationDeltaHealthPolicyResponse)(nil)).Elem()
}

func (o ApplicationDeltaHealthPolicyResponseMapOutput) ToApplicationDeltaHealthPolicyResponseMapOutput() ApplicationDeltaHealthPolicyResponseMapOutput {
	return o
}

func (o ApplicationDeltaHealthPolicyResponseMapOutput) ToApplicationDeltaHealthPolicyResponseMapOutputWithContext(ctx context.Context) ApplicationDeltaHealthPolicyResponseMapOutput {
	return o
}

func (o ApplicationDeltaHealthPolicyResponseMapOutput) MapIndex(k pulumi.StringInput) ApplicationDeltaHealthPolicyResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ApplicationDeltaHealthPolicyResponse {
		return vs[0].(map[string]ApplicationDeltaHealthPolicyResponse)[vs[1].(string)]
	}).(ApplicationDeltaHealthPolicyResponseOutput)
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
type ApplicationHealthPolicy struct {
	// The health policy used by default to evaluate the health of a service type.
	DefaultServiceTypeHealthPolicy *ServiceTypeHealthPolicy `pulumi:"defaultServiceTypeHealthPolicy"`
	// The map with service type health policy per service type name. The map is empty by default.
	ServiceTypeHealthPolicies map[string]ServiceTypeHealthPolicy `pulumi:"serviceTypeHealthPolicies"`
}

// Defaults sets the appropriate defaults for ApplicationHealthPolicy
func (val *ApplicationHealthPolicy) Defaults() *ApplicationHealthPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DefaultServiceTypeHealthPolicy = tmp.DefaultServiceTypeHealthPolicy.Defaults()

	return &tmp
}

// ApplicationHealthPolicyInput is an input type that accepts ApplicationHealthPolicyArgs and ApplicationHealthPolicyOutput values.
// You can construct a concrete instance of `ApplicationHealthPolicyInput` via:
//
//	ApplicationHealthPolicyArgs{...}
type ApplicationHealthPolicyInput interface {
	pulumi.Input

	ToApplicationHealthPolicyOutput() ApplicationHealthPolicyOutput
	ToApplicationHealthPolicyOutputWithContext(context.Context) ApplicationHealthPolicyOutput
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
type ApplicationHealthPolicyArgs struct {
	// The health policy used by default to evaluate the health of a service type.
	DefaultServiceTypeHealthPolicy ServiceTypeHealthPolicyPtrInput `pulumi:"defaultServiceTypeHealthPolicy"`
	// The map with service type health policy per service type name. The map is empty by default.
	ServiceTypeHealthPolicies ServiceTypeHealthPolicyMapInput `pulumi:"serviceTypeHealthPolicies"`
}

// Defaults sets the appropriate defaults for ApplicationHealthPolicyArgs
func (val *ApplicationHealthPolicyArgs) Defaults() *ApplicationHealthPolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ApplicationHealthPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationHealthPolicy)(nil)).Elem()
}

func (i ApplicationHealthPolicyArgs) ToApplicationHealthPolicyOutput() ApplicationHealthPolicyOutput {
	return i.ToApplicationHealthPolicyOutputWithContext(context.Background())
}

func (i ApplicationHealthPolicyArgs) ToApplicationHealthPolicyOutputWithContext(ctx context.Context) ApplicationHealthPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationHealthPolicyOutput)
}

// ApplicationHealthPolicyMapInput is an input type that accepts ApplicationHealthPolicyMap and ApplicationHealthPolicyMapOutput values.
// You can construct a concrete instance of `ApplicationHealthPolicyMapInput` via:
//
//	ApplicationHealthPolicyMap{ "key": ApplicationHealthPolicyArgs{...} }
type ApplicationHealthPolicyMapInput interface {
	pulumi.Input

	ToApplicationHealthPolicyMapOutput() ApplicationHealthPolicyMapOutput
	ToApplicationHealthPolicyMapOutputWithContext(context.Context) ApplicationHealthPolicyMapOutput
}

type ApplicationHealthPolicyMap map[string]ApplicationHealthPolicyInput

func (ApplicationHealthPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ApplicationHealthPolicy)(nil)).Elem()
}

func (i ApplicationHealthPolicyMap) ToApplicationHealthPolicyMapOutput() ApplicationHealthPolicyMapOutput {
	return i.ToApplicationHealthPolicyMapOutputWithContext(context.Background())
}

func (i ApplicationHealthPolicyMap) ToApplicationHealthPolicyMapOutputWithContext(ctx context.Context) ApplicationHealthPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationHealthPolicyMapOutput)
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
type ApplicationHealthPolicyOutput struct{ *pulumi.OutputState }

func (ApplicationHealthPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationHealthPolicy)(nil)).Elem()
}

func (o ApplicationHealthPolicyOutput) ToApplicationHealthPolicyOutput() ApplicationHealthPolicyOutput {
	return o
}

func (o ApplicationHealthPolicyOutput) ToApplicationHealthPolicyOutputWithContext(ctx context.Context) ApplicationHealthPolicyOutput {
	return o
}

// The health policy used by default to evaluate the health of a service type.
func (o ApplicationHealthPolicyOutput) DefaultServiceTypeHealthPolicy() ServiceTypeHealthPolicyPtrOutput {
	return o.ApplyT(func(v ApplicationHealthPolicy) *ServiceTypeHealthPolicy { return v.DefaultServiceTypeHealthPolicy }).(ServiceTypeHealthPolicyPtrOutput)
}

// The map with service type health policy per service type name. The map is empty by default.
func (o ApplicationHealthPolicyOutput) ServiceTypeHealthPolicies() ServiceTypeHealthPolicyMapOutput {
	return o.ApplyT(func(v ApplicationHealthPolicy) map[string]ServiceTypeHealthPolicy { return v.ServiceTypeHealthPolicies }).(ServiceTypeHealthPolicyMapOutput)
}

type ApplicationHealthPolicyMapOutput struct{ *pulumi.OutputState }

func (ApplicationHealthPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ApplicationHealthPolicy)(nil)).Elem()
}

func (o ApplicationHealthPolicyMapOutput) ToApplicationHealthPolicyMapOutput() ApplicationHealthPolicyMapOutput {
	return o
}

func (o ApplicationHealthPolicyMapOutput) ToApplicationHealthPolicyMapOutputWithContext(ctx context.Context) ApplicationHealthPolicyMapOutput {
	return o
}

func (o ApplicationHealthPolicyMapOutput) MapIndex(k pulumi.StringInput) ApplicationHealthPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ApplicationHealthPolicy {
		return vs[0].(map[string]ApplicationHealthPolicy)[vs[1].(string)]
	}).(ApplicationHealthPolicyOutput)
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
type ApplicationHealthPolicyResponse struct {
	// The health policy used by default to evaluate the health of a service type.
	DefaultServiceTypeHealthPolicy *ServiceTypeHealthPolicyResponse `pulumi:"defaultServiceTypeHealthPolicy"`
	// The map with service type health policy per service type name. The map is empty by default.
	ServiceTypeHealthPolicies map[string]ServiceTypeHealthPolicyResponse `pulumi:"serviceTypeHealthPolicies"`
}

// Defaults sets the appropriate defaults for ApplicationHealthPolicyResponse
func (val *ApplicationHealthPolicyResponse) Defaults() *ApplicationHealthPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DefaultServiceTypeHealthPolicy = tmp.DefaultServiceTypeHealthPolicy.Defaults()

	return &tmp
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
type ApplicationHealthPolicyResponseOutput struct{ *pulumi.OutputState }

func (ApplicationHealthPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationHealthPolicyResponse)(nil)).Elem()
}

func (o ApplicationHealthPolicyResponseOutput) ToApplicationHealthPolicyResponseOutput() ApplicationHealthPolicyResponseOutput {
	return o
}

func (o ApplicationHealthPolicyResponseOutput) ToApplicationHealthPolicyResponseOutputWithContext(ctx context.Context) ApplicationHealthPolicyResponseOutput {
	return o
}

// The health policy used by default to evaluate the health of a service type.
func (o ApplicationHealthPolicyResponseOutput) DefaultServiceTypeHealthPolicy() ServiceTypeHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v ApplicationHealthPolicyResponse) *ServiceTypeHealthPolicyResponse {
		return v.DefaultServiceTypeHealthPolicy
	}).(ServiceTypeHealthPolicyResponsePtrOutput)
}

// The map with service type health policy per service type name. The map is empty by default.
func (o ApplicationHealthPolicyResponseOutput) ServiceTypeHealthPolicies() ServiceTypeHealthPolicyResponseMapOutput {
	return o.ApplyT(func(v ApplicationHealthPolicyResponse) map[string]ServiceTypeHealthPolicyResponse {
		return v.ServiceTypeHealthPolicies
	}).(ServiceTypeHealthPolicyResponseMapOutput)
}

type ApplicationHealthPolicyResponseMapOutput struct{ *pulumi.OutputState }

func (ApplicationHealthPolicyResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ApplicationHealthPolicyResponse)(nil)).Elem()
}

func (o ApplicationHealthPolicyResponseMapOutput) ToApplicationHealthPolicyResponseMapOutput() ApplicationHealthPolicyResponseMapOutput {
	return o
}

func (o ApplicationHealthPolicyResponseMapOutput) ToApplicationHealthPolicyResponseMapOutputWithContext(ctx context.Context) ApplicationHealthPolicyResponseMapOutput {
	return o
}

func (o ApplicationHealthPolicyResponseMapOutput) MapIndex(k pulumi.StringInput) ApplicationHealthPolicyResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ApplicationHealthPolicyResponse {
		return vs[0].(map[string]ApplicationHealthPolicyResponse)[vs[1].(string)]
	}).(ApplicationHealthPolicyResponseOutput)
}

// Describes capacity information for a custom resource balancing metric. This can be used to limit the total consumption of this metric by the services of this application.
type ApplicationMetricDescription struct {
	// The maximum node capacity for Service Fabric application.
	// This is the maximum Load for an instance of this application on a single node. Even if the capacity of node is greater than this value, Service Fabric will limit the total load of services within the application on each node to this value.
	// If set to zero, capacity for this metric is unlimited on each node.
	// When creating a new application with application capacity defined, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
	// When updating existing application with application capacity, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
	MaximumCapacity *float64 `pulumi:"maximumCapacity"`
	// The name of the metric.
	Name *string `pulumi:"name"`
	// The node reservation capacity for Service Fabric application.
	// This is the amount of load which is reserved on nodes which have instances of this application.
	// If MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the application.
	// If set to zero, no capacity is reserved for this metric.
	// When setting application capacity or when updating application capacity; this value must be smaller than or equal to MaximumCapacity for each metric.
	ReservationCapacity *float64 `pulumi:"reservationCapacity"`
	// The total metric capacity for Service Fabric application.
	// This is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of loads of services within the application to this value.
	// When creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity must always be smaller than or equal to this value.
	TotalApplicationCapacity *float64 `pulumi:"totalApplicationCapacity"`
}

// ApplicationMetricDescriptionInput is an input type that accepts ApplicationMetricDescriptionArgs and ApplicationMetricDescriptionOutput values.
// You can construct a concrete instance of `ApplicationMetricDescriptionInput` via:
//
//	ApplicationMetricDescriptionArgs{...}
type ApplicationMetricDescriptionInput interface {
	pulumi.Input

	ToApplicationMetricDescriptionOutput() ApplicationMetricDescriptionOutput
	ToApplicationMetricDescriptionOutputWithContext(context.Context) ApplicationMetricDescriptionOutput
}

// Describes capacity information for a custom resource balancing metric. This can be used to limit the total consumption of this metric by the services of this application.
type ApplicationMetricDescriptionArgs struct {
	// The maximum node capacity for Service Fabric application.
	// This is the maximum Load for an instance of this application on a single node. Even if the capacity of node is greater than this value, Service Fabric will limit the total load of services within the application on each node to this value.
	// If set to zero, capacity for this metric is unlimited on each node.
	// When creating a new application with application capacity defined, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
	// When updating existing application with application capacity, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
	MaximumCapacity pulumi.Float64PtrInput `pulumi:"maximumCapacity"`
	// The name of the metric.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The node reservation capacity for Service Fabric application.
	// This is the amount of load which is reserved on nodes which have instances of this application.
	// If MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the application.
	// If set to zero, no capacity is reserved for this metric.
	// When setting application capacity or when updating application capacity; this value must be smaller than or equal to MaximumCapacity for each metric.
	ReservationCapacity pulumi.Float64PtrInput `pulumi:"reservationCapacity"`
	// The total metric capacity for Service Fabric application.
	// This is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of loads of services within the application to this value.
	// When creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity must always be smaller than or equal to this value.
	TotalApplicationCapacity pulumi.Float64PtrInput `pulumi:"totalApplicationCapacity"`
}

func (ApplicationMetricDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationMetricDescription)(nil)).Elem()
}

func (i ApplicationMetricDescriptionArgs) ToApplicationMetricDescriptionOutput() ApplicationMetricDescriptionOutput {
	return i.ToApplicationMetricDescriptionOutputWithContext(context.Background())
}

func (i ApplicationMetricDescriptionArgs) ToApplicationMetricDescriptionOutputWithContext(ctx context.Context) ApplicationMetricDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMetricDescriptionOutput)
}

// ApplicationMetricDescriptionArrayInput is an input type that accepts ApplicationMetricDescriptionArray and ApplicationMetricDescriptionArrayOutput values.
// You can construct a concrete instance of `ApplicationMetricDescriptionArrayInput` via:
//
//	ApplicationMetricDescriptionArray{ ApplicationMetricDescriptionArgs{...} }
type ApplicationMetricDescriptionArrayInput interface {
	pulumi.Input

	ToApplicationMetricDescriptionArrayOutput() ApplicationMetricDescriptionArrayOutput
	ToApplicationMetricDescriptionArrayOutputWithContext(context.Context) ApplicationMetricDescriptionArrayOutput
}

type ApplicationMetricDescriptionArray []ApplicationMetricDescriptionInput

func (ApplicationMetricDescriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationMetricDescription)(nil)).Elem()
}

func (i ApplicationMetricDescriptionArray) ToApplicationMetricDescriptionArrayOutput() ApplicationMetricDescriptionArrayOutput {
	return i.ToApplicationMetricDescriptionArrayOutputWithContext(context.Background())
}

func (i ApplicationMetricDescriptionArray) ToApplicationMetricDescriptionArrayOutputWithContext(ctx context.Context) ApplicationMetricDescriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMetricDescriptionArrayOutput)
}

// Describes capacity information for a custom resource balancing metric. This can be used to limit the total consumption of this metric by the services of this application.
type ApplicationMetricDescriptionOutput struct{ *pulumi.OutputState }

func (ApplicationMetricDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationMetricDescription)(nil)).Elem()
}

func (o ApplicationMetricDescriptionOutput) ToApplicationMetricDescriptionOutput() ApplicationMetricDescriptionOutput {
	return o
}

func (o ApplicationMetricDescriptionOutput) ToApplicationMetricDescriptionOutputWithContext(ctx context.Context) ApplicationMetricDescriptionOutput {
	return o
}

// The maximum node capacity for Service Fabric application.
// This is the maximum Load for an instance of this application on a single node. Even if the capacity of node is greater than this value, Service Fabric will limit the total load of services within the application on each node to this value.
// If set to zero, capacity for this metric is unlimited on each node.
// When creating a new application with application capacity defined, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
// When updating existing application with application capacity, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
func (o ApplicationMetricDescriptionOutput) MaximumCapacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ApplicationMetricDescription) *float64 { return v.MaximumCapacity }).(pulumi.Float64PtrOutput)
}

// The name of the metric.
func (o ApplicationMetricDescriptionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationMetricDescription) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The node reservation capacity for Service Fabric application.
// This is the amount of load which is reserved on nodes which have instances of this application.
// If MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the application.
// If set to zero, no capacity is reserved for this metric.
// When setting application capacity or when updating application capacity; this value must be smaller than or equal to MaximumCapacity for each metric.
func (o ApplicationMetricDescriptionOutput) ReservationCapacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ApplicationMetricDescription) *float64 { return v.ReservationCapacity }).(pulumi.Float64PtrOutput)
}

// The total metric capacity for Service Fabric application.
// This is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of loads of services within the application to this value.
// When creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity must always be smaller than or equal to this value.
func (o ApplicationMetricDescriptionOutput) TotalApplicationCapacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ApplicationMetricDescription) *float64 { return v.TotalApplicationCapacity }).(pulumi.Float64PtrOutput)
}

type ApplicationMetricDescriptionArrayOutput struct{ *pulumi.OutputState }

func (ApplicationMetricDescriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationMetricDescription)(nil)).Elem()
}

func (o ApplicationMetricDescriptionArrayOutput) ToApplicationMetricDescriptionArrayOutput() ApplicationMetricDescriptionArrayOutput {
	return o
}

func (o ApplicationMetricDescriptionArrayOutput) ToApplicationMetricDescriptionArrayOutputWithContext(ctx context.Context) ApplicationMetricDescriptionArrayOutput {
	return o
}

func (o ApplicationMetricDescriptionArrayOutput) Index(i pulumi.IntInput) ApplicationMetricDescriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationMetricDescription {
		return vs[0].([]ApplicationMetricDescription)[vs[1].(int)]
	}).(ApplicationMetricDescriptionOutput)
}

// Describes capacity information for a custom resource balancing metric. This can be used to limit the total consumption of this metric by the services of this application.
type ApplicationMetricDescriptionResponse struct {
	// The maximum node capacity for Service Fabric application.
	// This is the maximum Load for an instance of this application on a single node. Even if the capacity of node is greater than this value, Service Fabric will limit the total load of services within the application on each node to this value.
	// If set to zero, capacity for this metric is unlimited on each node.
	// When creating a new application with application capacity defined, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
	// When updating existing application with application capacity, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
	MaximumCapacity *float64 `pulumi:"maximumCapacity"`
	// The name of the metric.
	Name *string `pulumi:"name"`
	// The node reservation capacity for Service Fabric application.
	// This is the amount of load which is reserved on nodes which have instances of this application.
	// If MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the application.
	// If set to zero, no capacity is reserved for this metric.
	// When setting application capacity or when updating application capacity; this value must be smaller than or equal to MaximumCapacity for each metric.
	ReservationCapacity *float64 `pulumi:"reservationCapacity"`
	// The total metric capacity for Service Fabric application.
	// This is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of loads of services within the application to this value.
	// When creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity must always be smaller than or equal to this value.
	TotalApplicationCapacity *float64 `pulumi:"totalApplicationCapacity"`
}

// Describes capacity information for a custom resource balancing metric. This can be used to limit the total consumption of this metric by the services of this application.
type ApplicationMetricDescriptionResponseOutput struct{ *pulumi.OutputState }

func (ApplicationMetricDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationMetricDescriptionResponse)(nil)).Elem()
}

func (o ApplicationMetricDescriptionResponseOutput) ToApplicationMetricDescriptionResponseOutput() ApplicationMetricDescriptionResponseOutput {
	return o
}

func (o ApplicationMetricDescriptionResponseOutput) ToApplicationMetricDescriptionResponseOutputWithContext(ctx context.Context) ApplicationMetricDescriptionResponseOutput {
	return o
}

// The maximum node capacity for Service Fabric application.
// This is the maximum Load for an instance of this application on a single node. Even if the capacity of node is greater than this value, Service Fabric will limit the total load of services within the application on each node to this value.
// If set to zero, capacity for this metric is unlimited on each node.
// When creating a new application with application capacity defined, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
// When updating existing application with application capacity, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
func (o ApplicationMetricDescriptionResponseOutput) MaximumCapacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ApplicationMetricDescriptionResponse) *float64 { return v.MaximumCapacity }).(pulumi.Float64PtrOutput)
}

// The name of the metric.
func (o ApplicationMetricDescriptionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationMetricDescriptionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The node reservation capacity for Service Fabric application.
// This is the amount of load which is reserved on nodes which have instances of this application.
// If MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the application.
// If set to zero, no capacity is reserved for this metric.
// When setting application capacity or when updating application capacity; this value must be smaller than or equal to MaximumCapacity for each metric.
func (o ApplicationMetricDescriptionResponseOutput) ReservationCapacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ApplicationMetricDescriptionResponse) *float64 { return v.ReservationCapacity }).(pulumi.Float64PtrOutput)
}

// The total metric capacity for Service Fabric application.
// This is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of loads of services within the application to this value.
// When creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity must always be smaller than or equal to this value.
func (o ApplicationMetricDescriptionResponseOutput) TotalApplicationCapacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ApplicationMetricDescriptionResponse) *float64 { return v.TotalApplicationCapacity }).(pulumi.Float64PtrOutput)
}

type ApplicationMetricDescriptionResponseArrayOutput struct{ *pulumi.OutputState }

func (ApplicationMetricDescriptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationMetricDescriptionResponse)(nil)).Elem()
}

func (o ApplicationMetricDescriptionResponseArrayOutput) ToApplicationMetricDescriptionResponseArrayOutput() ApplicationMetricDescriptionResponseArrayOutput {
	return o
}

func (o ApplicationMetricDescriptionResponseArrayOutput) ToApplicationMetricDescriptionResponseArrayOutputWithContext(ctx context.Context) ApplicationMetricDescriptionResponseArrayOutput {
	return o
}

func (o ApplicationMetricDescriptionResponseArrayOutput) Index(i pulumi.IntInput) ApplicationMetricDescriptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationMetricDescriptionResponse {
		return vs[0].([]ApplicationMetricDescriptionResponse)[vs[1].(int)]
	}).(ApplicationMetricDescriptionResponseOutput)
}

// Describes the policy for a monitored application upgrade.
type ApplicationUpgradePolicy struct {
	// Defines a health policy used to evaluate the health of an application or one of its children entities.
	ApplicationHealthPolicy *ArmApplicationHealthPolicy `pulumi:"applicationHealthPolicy"`
	// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
	ForceRestart *bool `pulumi:"forceRestart"`
	// The policy used for monitoring the application upgrade
	RollingUpgradeMonitoringPolicy *ArmRollingUpgradeMonitoringPolicy `pulumi:"rollingUpgradeMonitoringPolicy"`
	// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
	UpgradeReplicaSetCheckTimeout *string `pulumi:"upgradeReplicaSetCheckTimeout"`
}

// Defaults sets the appropriate defaults for ApplicationUpgradePolicy
func (val *ApplicationUpgradePolicy) Defaults() *ApplicationUpgradePolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ApplicationHealthPolicy = tmp.ApplicationHealthPolicy.Defaults()

	return &tmp
}

// ApplicationUpgradePolicyInput is an input type that accepts ApplicationUpgradePolicyArgs and ApplicationUpgradePolicyOutput values.
// You can construct a concrete instance of `ApplicationUpgradePolicyInput` via:
//
//	ApplicationUpgradePolicyArgs{...}
type ApplicationUpgradePolicyInput interface {
	pulumi.Input

	ToApplicationUpgradePolicyOutput() ApplicationUpgradePolicyOutput
	ToApplicationUpgradePolicyOutputWithContext(context.Context) ApplicationUpgradePolicyOutput
}

// Describes the policy for a monitored application upgrade.
type ApplicationUpgradePolicyArgs struct {
	// Defines a health policy used to evaluate the health of an application or one of its children entities.
	ApplicationHealthPolicy ArmApplicationHealthPolicyPtrInput `pulumi:"applicationHealthPolicy"`
	// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
	ForceRestart pulumi.BoolPtrInput `pulumi:"forceRestart"`
	// The policy used for monitoring the application upgrade
	RollingUpgradeMonitoringPolicy ArmRollingUpgradeMonitoringPolicyPtrInput `pulumi:"rollingUpgradeMonitoringPolicy"`
	// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
	UpgradeReplicaSetCheckTimeout pulumi.StringPtrInput `pulumi:"upgradeReplicaSetCheckTimeout"`
}

// Defaults sets the appropriate defaults for ApplicationUpgradePolicyArgs
func (val *ApplicationUpgradePolicyArgs) Defaults() *ApplicationUpgradePolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ApplicationUpgradePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationUpgradePolicy)(nil)).Elem()
}

func (i ApplicationUpgradePolicyArgs) ToApplicationUpgradePolicyOutput() ApplicationUpgradePolicyOutput {
	return i.ToApplicationUpgradePolicyOutputWithContext(context.Background())
}

func (i ApplicationUpgradePolicyArgs) ToApplicationUpgradePolicyOutputWithContext(ctx context.Context) ApplicationUpgradePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUpgradePolicyOutput)
}

func (i ApplicationUpgradePolicyArgs) ToApplicationUpgradePolicyPtrOutput() ApplicationUpgradePolicyPtrOutput {
	return i.ToApplicationUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i ApplicationUpgradePolicyArgs) ToApplicationUpgradePolicyPtrOutputWithContext(ctx context.Context) ApplicationUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUpgradePolicyOutput).ToApplicationUpgradePolicyPtrOutputWithContext(ctx)
}

// ApplicationUpgradePolicyPtrInput is an input type that accepts ApplicationUpgradePolicyArgs, ApplicationUpgradePolicyPtr and ApplicationUpgradePolicyPtrOutput values.
// You can construct a concrete instance of `ApplicationUpgradePolicyPtrInput` via:
//
//	        ApplicationUpgradePolicyArgs{...}
//
//	or:
//
//	        nil
type ApplicationUpgradePolicyPtrInput interface {
	pulumi.Input

	ToApplicationUpgradePolicyPtrOutput() ApplicationUpgradePolicyPtrOutput
	ToApplicationUpgradePolicyPtrOutputWithContext(context.Context) ApplicationUpgradePolicyPtrOutput
}

type applicationUpgradePolicyPtrType ApplicationUpgradePolicyArgs

func ApplicationUpgradePolicyPtr(v *ApplicationUpgradePolicyArgs) ApplicationUpgradePolicyPtrInput {
	return (*applicationUpgradePolicyPtrType)(v)
}

func (*applicationUpgradePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationUpgradePolicy)(nil)).Elem()
}

func (i *applicationUpgradePolicyPtrType) ToApplicationUpgradePolicyPtrOutput() ApplicationUpgradePolicyPtrOutput {
	return i.ToApplicationUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i *applicationUpgradePolicyPtrType) ToApplicationUpgradePolicyPtrOutputWithContext(ctx context.Context) ApplicationUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUpgradePolicyPtrOutput)
}

// Describes the policy for a monitored application upgrade.
type ApplicationUpgradePolicyOutput struct{ *pulumi.OutputState }

func (ApplicationUpgradePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationUpgradePolicy)(nil)).Elem()
}

func (o ApplicationUpgradePolicyOutput) ToApplicationUpgradePolicyOutput() ApplicationUpgradePolicyOutput {
	return o
}

func (o ApplicationUpgradePolicyOutput) ToApplicationUpgradePolicyOutputWithContext(ctx context.Context) ApplicationUpgradePolicyOutput {
	return o
}

func (o ApplicationUpgradePolicyOutput) ToApplicationUpgradePolicyPtrOutput() ApplicationUpgradePolicyPtrOutput {
	return o.ToApplicationUpgradePolicyPtrOutputWithContext(context.Background())
}

func (o ApplicationUpgradePolicyOutput) ToApplicationUpgradePolicyPtrOutputWithContext(ctx context.Context) ApplicationUpgradePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationUpgradePolicy) *ApplicationUpgradePolicy {
		return &v
	}).(ApplicationUpgradePolicyPtrOutput)
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
func (o ApplicationUpgradePolicyOutput) ApplicationHealthPolicy() ArmApplicationHealthPolicyPtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicy) *ArmApplicationHealthPolicy { return v.ApplicationHealthPolicy }).(ArmApplicationHealthPolicyPtrOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
func (o ApplicationUpgradePolicyOutput) ForceRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicy) *bool { return v.ForceRestart }).(pulumi.BoolPtrOutput)
}

// The policy used for monitoring the application upgrade
func (o ApplicationUpgradePolicyOutput) RollingUpgradeMonitoringPolicy() ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicy) *ArmRollingUpgradeMonitoringPolicy {
		return v.RollingUpgradeMonitoringPolicy
	}).(ArmRollingUpgradeMonitoringPolicyPtrOutput)
}

// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
func (o ApplicationUpgradePolicyOutput) UpgradeReplicaSetCheckTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicy) *string { return v.UpgradeReplicaSetCheckTimeout }).(pulumi.StringPtrOutput)
}

type ApplicationUpgradePolicyPtrOutput struct{ *pulumi.OutputState }

func (ApplicationUpgradePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationUpgradePolicy)(nil)).Elem()
}

func (o ApplicationUpgradePolicyPtrOutput) ToApplicationUpgradePolicyPtrOutput() ApplicationUpgradePolicyPtrOutput {
	return o
}

func (o ApplicationUpgradePolicyPtrOutput) ToApplicationUpgradePolicyPtrOutputWithContext(ctx context.Context) ApplicationUpgradePolicyPtrOutput {
	return o
}

func (o ApplicationUpgradePolicyPtrOutput) Elem() ApplicationUpgradePolicyOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicy) ApplicationUpgradePolicy {
		if v != nil {
			return *v
		}
		var ret ApplicationUpgradePolicy
		return ret
	}).(ApplicationUpgradePolicyOutput)
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
func (o ApplicationUpgradePolicyPtrOutput) ApplicationHealthPolicy() ArmApplicationHealthPolicyPtrOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicy) *ArmApplicationHealthPolicy {
		if v == nil {
			return nil
		}
		return v.ApplicationHealthPolicy
	}).(ArmApplicationHealthPolicyPtrOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
func (o ApplicationUpgradePolicyPtrOutput) ForceRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicy) *bool {
		if v == nil {
			return nil
		}
		return v.ForceRestart
	}).(pulumi.BoolPtrOutput)
}

// The policy used for monitoring the application upgrade
func (o ApplicationUpgradePolicyPtrOutput) RollingUpgradeMonitoringPolicy() ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicy) *ArmRollingUpgradeMonitoringPolicy {
		if v == nil {
			return nil
		}
		return v.RollingUpgradeMonitoringPolicy
	}).(ArmRollingUpgradeMonitoringPolicyPtrOutput)
}

// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
func (o ApplicationUpgradePolicyPtrOutput) UpgradeReplicaSetCheckTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeReplicaSetCheckTimeout
	}).(pulumi.StringPtrOutput)
}

// Describes the policy for a monitored application upgrade.
type ApplicationUpgradePolicyResponse struct {
	// Defines a health policy used to evaluate the health of an application or one of its children entities.
	ApplicationHealthPolicy *ArmApplicationHealthPolicyResponse `pulumi:"applicationHealthPolicy"`
	// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
	ForceRestart *bool `pulumi:"forceRestart"`
	// The policy used for monitoring the application upgrade
	RollingUpgradeMonitoringPolicy *ArmRollingUpgradeMonitoringPolicyResponse `pulumi:"rollingUpgradeMonitoringPolicy"`
	// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
	UpgradeReplicaSetCheckTimeout *string `pulumi:"upgradeReplicaSetCheckTimeout"`
}

// Defaults sets the appropriate defaults for ApplicationUpgradePolicyResponse
func (val *ApplicationUpgradePolicyResponse) Defaults() *ApplicationUpgradePolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ApplicationHealthPolicy = tmp.ApplicationHealthPolicy.Defaults()

	return &tmp
}

// Describes the policy for a monitored application upgrade.
type ApplicationUpgradePolicyResponseOutput struct{ *pulumi.OutputState }

func (ApplicationUpgradePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationUpgradePolicyResponse)(nil)).Elem()
}

func (o ApplicationUpgradePolicyResponseOutput) ToApplicationUpgradePolicyResponseOutput() ApplicationUpgradePolicyResponseOutput {
	return o
}

func (o ApplicationUpgradePolicyResponseOutput) ToApplicationUpgradePolicyResponseOutputWithContext(ctx context.Context) ApplicationUpgradePolicyResponseOutput {
	return o
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
func (o ApplicationUpgradePolicyResponseOutput) ApplicationHealthPolicy() ArmApplicationHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicyResponse) *ArmApplicationHealthPolicyResponse {
		return v.ApplicationHealthPolicy
	}).(ArmApplicationHealthPolicyResponsePtrOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
func (o ApplicationUpgradePolicyResponseOutput) ForceRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicyResponse) *bool { return v.ForceRestart }).(pulumi.BoolPtrOutput)
}

// The policy used for monitoring the application upgrade
func (o ApplicationUpgradePolicyResponseOutput) RollingUpgradeMonitoringPolicy() ArmRollingUpgradeMonitoringPolicyResponsePtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicyResponse) *ArmRollingUpgradeMonitoringPolicyResponse {
		return v.RollingUpgradeMonitoringPolicy
	}).(ArmRollingUpgradeMonitoringPolicyResponsePtrOutput)
}

// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
func (o ApplicationUpgradePolicyResponseOutput) UpgradeReplicaSetCheckTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicyResponse) *string { return v.UpgradeReplicaSetCheckTimeout }).(pulumi.StringPtrOutput)
}

type ApplicationUpgradePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ApplicationUpgradePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationUpgradePolicyResponse)(nil)).Elem()
}

func (o ApplicationUpgradePolicyResponsePtrOutput) ToApplicationUpgradePolicyResponsePtrOutput() ApplicationUpgradePolicyResponsePtrOutput {
	return o
}

func (o ApplicationUpgradePolicyResponsePtrOutput) ToApplicationUpgradePolicyResponsePtrOutputWithContext(ctx context.Context) ApplicationUpgradePolicyResponsePtrOutput {
	return o
}

func (o ApplicationUpgradePolicyResponsePtrOutput) Elem() ApplicationUpgradePolicyResponseOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicyResponse) ApplicationUpgradePolicyResponse {
		if v != nil {
			return *v
		}
		var ret ApplicationUpgradePolicyResponse
		return ret
	}).(ApplicationUpgradePolicyResponseOutput)
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
func (o ApplicationUpgradePolicyResponsePtrOutput) ApplicationHealthPolicy() ArmApplicationHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicyResponse) *ArmApplicationHealthPolicyResponse {
		if v == nil {
			return nil
		}
		return v.ApplicationHealthPolicy
	}).(ArmApplicationHealthPolicyResponsePtrOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
func (o ApplicationUpgradePolicyResponsePtrOutput) ForceRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ForceRestart
	}).(pulumi.BoolPtrOutput)
}

// The policy used for monitoring the application upgrade
func (o ApplicationUpgradePolicyResponsePtrOutput) RollingUpgradeMonitoringPolicy() ArmRollingUpgradeMonitoringPolicyResponsePtrOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicyResponse) *ArmRollingUpgradeMonitoringPolicyResponse {
		if v == nil {
			return nil
		}
		return v.RollingUpgradeMonitoringPolicy
	}).(ArmRollingUpgradeMonitoringPolicyResponsePtrOutput)
}

// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
func (o ApplicationUpgradePolicyResponsePtrOutput) UpgradeReplicaSetCheckTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeReplicaSetCheckTimeout
	}).(pulumi.StringPtrOutput)
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
type ArmApplicationHealthPolicy struct {
	// Indicates whether warnings are treated with the same severity as errors.
	ConsiderWarningAsError *bool `pulumi:"considerWarningAsError"`
	// The health policy used by default to evaluate the health of a service type.
	DefaultServiceTypeHealthPolicy *ArmServiceTypeHealthPolicy `pulumi:"defaultServiceTypeHealthPolicy"`
	// The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
	// The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
	// This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
	// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
	MaxPercentUnhealthyDeployedApplications *int `pulumi:"maxPercentUnhealthyDeployedApplications"`
	// The map with service type health policy per service type name. The map is empty by default.
	ServiceTypeHealthPolicyMap map[string]ArmServiceTypeHealthPolicy `pulumi:"serviceTypeHealthPolicyMap"`
}

// Defaults sets the appropriate defaults for ArmApplicationHealthPolicy
func (val *ArmApplicationHealthPolicy) Defaults() *ArmApplicationHealthPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ConsiderWarningAsError) {
		considerWarningAsError_ := false
		tmp.ConsiderWarningAsError = &considerWarningAsError_
	}
	tmp.DefaultServiceTypeHealthPolicy = tmp.DefaultServiceTypeHealthPolicy.Defaults()

	if isZero(tmp.MaxPercentUnhealthyDeployedApplications) {
		maxPercentUnhealthyDeployedApplications_ := 0
		tmp.MaxPercentUnhealthyDeployedApplications = &maxPercentUnhealthyDeployedApplications_
	}
	return &tmp
}

// ArmApplicationHealthPolicyInput is an input type that accepts ArmApplicationHealthPolicyArgs and ArmApplicationHealthPolicyOutput values.
// You can construct a concrete instance of `ArmApplicationHealthPolicyInput` via:
//
//	ArmApplicationHealthPolicyArgs{...}
type ArmApplicationHealthPolicyInput interface {
	pulumi.Input

	ToArmApplicationHealthPolicyOutput() ArmApplicationHealthPolicyOutput
	ToArmApplicationHealthPolicyOutputWithContext(context.Context) ArmApplicationHealthPolicyOutput
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
type ArmApplicationHealthPolicyArgs struct {
	// Indicates whether warnings are treated with the same severity as errors.
	ConsiderWarningAsError pulumi.BoolPtrInput `pulumi:"considerWarningAsError"`
	// The health policy used by default to evaluate the health of a service type.
	DefaultServiceTypeHealthPolicy ArmServiceTypeHealthPolicyPtrInput `pulumi:"defaultServiceTypeHealthPolicy"`
	// The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
	// The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
	// This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
	// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
	MaxPercentUnhealthyDeployedApplications pulumi.IntPtrInput `pulumi:"maxPercentUnhealthyDeployedApplications"`
	// The map with service type health policy per service type name. The map is empty by default.
	ServiceTypeHealthPolicyMap ArmServiceTypeHealthPolicyMapInput `pulumi:"serviceTypeHealthPolicyMap"`
}

// Defaults sets the appropriate defaults for ArmApplicationHealthPolicyArgs
func (val *ArmApplicationHealthPolicyArgs) Defaults() *ArmApplicationHealthPolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ConsiderWarningAsError) {
		tmp.ConsiderWarningAsError = pulumi.BoolPtr(false)
	}

	if isZero(tmp.MaxPercentUnhealthyDeployedApplications) {
		tmp.MaxPercentUnhealthyDeployedApplications = pulumi.IntPtr(0)
	}
	return &tmp
}
func (ArmApplicationHealthPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmApplicationHealthPolicy)(nil)).Elem()
}

func (i ArmApplicationHealthPolicyArgs) ToArmApplicationHealthPolicyOutput() ArmApplicationHealthPolicyOutput {
	return i.ToArmApplicationHealthPolicyOutputWithContext(context.Background())
}

func (i ArmApplicationHealthPolicyArgs) ToArmApplicationHealthPolicyOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmApplicationHealthPolicyOutput)
}

func (i ArmApplicationHealthPolicyArgs) ToArmApplicationHealthPolicyPtrOutput() ArmApplicationHealthPolicyPtrOutput {
	return i.ToArmApplicationHealthPolicyPtrOutputWithContext(context.Background())
}

func (i ArmApplicationHealthPolicyArgs) ToArmApplicationHealthPolicyPtrOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmApplicationHealthPolicyOutput).ToArmApplicationHealthPolicyPtrOutputWithContext(ctx)
}

// ArmApplicationHealthPolicyPtrInput is an input type that accepts ArmApplicationHealthPolicyArgs, ArmApplicationHealthPolicyPtr and ArmApplicationHealthPolicyPtrOutput values.
// You can construct a concrete instance of `ArmApplicationHealthPolicyPtrInput` via:
//
//	        ArmApplicationHealthPolicyArgs{...}
//
//	or:
//
//	        nil
type ArmApplicationHealthPolicyPtrInput interface {
	pulumi.Input

	ToArmApplicationHealthPolicyPtrOutput() ArmApplicationHealthPolicyPtrOutput
	ToArmApplicationHealthPolicyPtrOutputWithContext(context.Context) ArmApplicationHealthPolicyPtrOutput
}

type armApplicationHealthPolicyPtrType ArmApplicationHealthPolicyArgs

func ArmApplicationHealthPolicyPtr(v *ArmApplicationHealthPolicyArgs) ArmApplicationHealthPolicyPtrInput {
	return (*armApplicationHealthPolicyPtrType)(v)
}

func (*armApplicationHealthPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmApplicationHealthPolicy)(nil)).Elem()
}

func (i *armApplicationHealthPolicyPtrType) ToArmApplicationHealthPolicyPtrOutput() ArmApplicationHealthPolicyPtrOutput {
	return i.ToArmApplicationHealthPolicyPtrOutputWithContext(context.Background())
}

func (i *armApplicationHealthPolicyPtrType) ToArmApplicationHealthPolicyPtrOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmApplicationHealthPolicyPtrOutput)
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
type ArmApplicationHealthPolicyOutput struct{ *pulumi.OutputState }

func (ArmApplicationHealthPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmApplicationHealthPolicy)(nil)).Elem()
}

func (o ArmApplicationHealthPolicyOutput) ToArmApplicationHealthPolicyOutput() ArmApplicationHealthPolicyOutput {
	return o
}

func (o ArmApplicationHealthPolicyOutput) ToArmApplicationHealthPolicyOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyOutput {
	return o
}

func (o ArmApplicationHealthPolicyOutput) ToArmApplicationHealthPolicyPtrOutput() ArmApplicationHealthPolicyPtrOutput {
	return o.ToArmApplicationHealthPolicyPtrOutputWithContext(context.Background())
}

func (o ArmApplicationHealthPolicyOutput) ToArmApplicationHealthPolicyPtrOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArmApplicationHealthPolicy) *ArmApplicationHealthPolicy {
		return &v
	}).(ArmApplicationHealthPolicyPtrOutput)
}

// Indicates whether warnings are treated with the same severity as errors.
func (o ArmApplicationHealthPolicyOutput) ConsiderWarningAsError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ArmApplicationHealthPolicy) *bool { return v.ConsiderWarningAsError }).(pulumi.BoolPtrOutput)
}

// The health policy used by default to evaluate the health of a service type.
func (o ArmApplicationHealthPolicyOutput) DefaultServiceTypeHealthPolicy() ArmServiceTypeHealthPolicyPtrOutput {
	return o.ApplyT(func(v ArmApplicationHealthPolicy) *ArmServiceTypeHealthPolicy {
		return v.DefaultServiceTypeHealthPolicy
	}).(ArmServiceTypeHealthPolicyPtrOutput)
}

// The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
// The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
// This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
func (o ArmApplicationHealthPolicyOutput) MaxPercentUnhealthyDeployedApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArmApplicationHealthPolicy) *int { return v.MaxPercentUnhealthyDeployedApplications }).(pulumi.IntPtrOutput)
}

// The map with service type health policy per service type name. The map is empty by default.
func (o ArmApplicationHealthPolicyOutput) ServiceTypeHealthPolicyMap() ArmServiceTypeHealthPolicyMapOutput {
	return o.ApplyT(func(v ArmApplicationHealthPolicy) map[string]ArmServiceTypeHealthPolicy {
		return v.ServiceTypeHealthPolicyMap
	}).(ArmServiceTypeHealthPolicyMapOutput)
}

type ArmApplicationHealthPolicyPtrOutput struct{ *pulumi.OutputState }

func (ArmApplicationHealthPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmApplicationHealthPolicy)(nil)).Elem()
}

func (o ArmApplicationHealthPolicyPtrOutput) ToArmApplicationHealthPolicyPtrOutput() ArmApplicationHealthPolicyPtrOutput {
	return o
}

func (o ArmApplicationHealthPolicyPtrOutput) ToArmApplicationHealthPolicyPtrOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyPtrOutput {
	return o
}

func (o ArmApplicationHealthPolicyPtrOutput) Elem() ArmApplicationHealthPolicyOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicy) ArmApplicationHealthPolicy {
		if v != nil {
			return *v
		}
		var ret ArmApplicationHealthPolicy
		return ret
	}).(ArmApplicationHealthPolicyOutput)
}

// Indicates whether warnings are treated with the same severity as errors.
func (o ArmApplicationHealthPolicyPtrOutput) ConsiderWarningAsError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.ConsiderWarningAsError
	}).(pulumi.BoolPtrOutput)
}

// The health policy used by default to evaluate the health of a service type.
func (o ArmApplicationHealthPolicyPtrOutput) DefaultServiceTypeHealthPolicy() ArmServiceTypeHealthPolicyPtrOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicy) *ArmServiceTypeHealthPolicy {
		if v == nil {
			return nil
		}
		return v.DefaultServiceTypeHealthPolicy
	}).(ArmServiceTypeHealthPolicyPtrOutput)
}

// The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
// The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
// This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
func (o ArmApplicationHealthPolicyPtrOutput) MaxPercentUnhealthyDeployedApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyDeployedApplications
	}).(pulumi.IntPtrOutput)
}

// The map with service type health policy per service type name. The map is empty by default.
func (o ArmApplicationHealthPolicyPtrOutput) ServiceTypeHealthPolicyMap() ArmServiceTypeHealthPolicyMapOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicy) map[string]ArmServiceTypeHealthPolicy {
		if v == nil {
			return nil
		}
		return v.ServiceTypeHealthPolicyMap
	}).(ArmServiceTypeHealthPolicyMapOutput)
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
type ArmApplicationHealthPolicyResponse struct {
	// Indicates whether warnings are treated with the same severity as errors.
	ConsiderWarningAsError *bool `pulumi:"considerWarningAsError"`
	// The health policy used by default to evaluate the health of a service type.
	DefaultServiceTypeHealthPolicy *ArmServiceTypeHealthPolicyResponse `pulumi:"defaultServiceTypeHealthPolicy"`
	// The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
	// The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
	// This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
	// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
	MaxPercentUnhealthyDeployedApplications *int `pulumi:"maxPercentUnhealthyDeployedApplications"`
	// The map with service type health policy per service type name. The map is empty by default.
	ServiceTypeHealthPolicyMap map[string]ArmServiceTypeHealthPolicyResponse `pulumi:"serviceTypeHealthPolicyMap"`
}

// Defaults sets the appropriate defaults for ArmApplicationHealthPolicyResponse
func (val *ArmApplicationHealthPolicyResponse) Defaults() *ArmApplicationHealthPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ConsiderWarningAsError) {
		considerWarningAsError_ := false
		tmp.ConsiderWarningAsError = &considerWarningAsError_
	}
	tmp.DefaultServiceTypeHealthPolicy = tmp.DefaultServiceTypeHealthPolicy.Defaults()

	if isZero(tmp.MaxPercentUnhealthyDeployedApplications) {
		maxPercentUnhealthyDeployedApplications_ := 0
		tmp.MaxPercentUnhealthyDeployedApplications = &maxPercentUnhealthyDeployedApplications_
	}
	return &tmp
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
type ArmApplicationHealthPolicyResponseOutput struct{ *pulumi.OutputState }

func (ArmApplicationHealthPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmApplicationHealthPolicyResponse)(nil)).Elem()
}

func (o ArmApplicationHealthPolicyResponseOutput) ToArmApplicationHealthPolicyResponseOutput() ArmApplicationHealthPolicyResponseOutput {
	return o
}

func (o ArmApplicationHealthPolicyResponseOutput) ToArmApplicationHealthPolicyResponseOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyResponseOutput {
	return o
}

// Indicates whether warnings are treated with the same severity as errors.
func (o ArmApplicationHealthPolicyResponseOutput) ConsiderWarningAsError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ArmApplicationHealthPolicyResponse) *bool { return v.ConsiderWarningAsError }).(pulumi.BoolPtrOutput)
}

// The health policy used by default to evaluate the health of a service type.
func (o ArmApplicationHealthPolicyResponseOutput) DefaultServiceTypeHealthPolicy() ArmServiceTypeHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v ArmApplicationHealthPolicyResponse) *ArmServiceTypeHealthPolicyResponse {
		return v.DefaultServiceTypeHealthPolicy
	}).(ArmServiceTypeHealthPolicyResponsePtrOutput)
}

// The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
// The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
// This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
func (o ArmApplicationHealthPolicyResponseOutput) MaxPercentUnhealthyDeployedApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArmApplicationHealthPolicyResponse) *int { return v.MaxPercentUnhealthyDeployedApplications }).(pulumi.IntPtrOutput)
}

// The map with service type health policy per service type name. The map is empty by default.
func (o ArmApplicationHealthPolicyResponseOutput) ServiceTypeHealthPolicyMap() ArmServiceTypeHealthPolicyResponseMapOutput {
	return o.ApplyT(func(v ArmApplicationHealthPolicyResponse) map[string]ArmServiceTypeHealthPolicyResponse {
		return v.ServiceTypeHealthPolicyMap
	}).(ArmServiceTypeHealthPolicyResponseMapOutput)
}

type ArmApplicationHealthPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ArmApplicationHealthPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmApplicationHealthPolicyResponse)(nil)).Elem()
}

func (o ArmApplicationHealthPolicyResponsePtrOutput) ToArmApplicationHealthPolicyResponsePtrOutput() ArmApplicationHealthPolicyResponsePtrOutput {
	return o
}

func (o ArmApplicationHealthPolicyResponsePtrOutput) ToArmApplicationHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyResponsePtrOutput {
	return o
}

func (o ArmApplicationHealthPolicyResponsePtrOutput) Elem() ArmApplicationHealthPolicyResponseOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicyResponse) ArmApplicationHealthPolicyResponse {
		if v != nil {
			return *v
		}
		var ret ArmApplicationHealthPolicyResponse
		return ret
	}).(ArmApplicationHealthPolicyResponseOutput)
}

// Indicates whether warnings are treated with the same severity as errors.
func (o ArmApplicationHealthPolicyResponsePtrOutput) ConsiderWarningAsError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ConsiderWarningAsError
	}).(pulumi.BoolPtrOutput)
}

// The health policy used by default to evaluate the health of a service type.
func (o ArmApplicationHealthPolicyResponsePtrOutput) DefaultServiceTypeHealthPolicy() ArmServiceTypeHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicyResponse) *ArmServiceTypeHealthPolicyResponse {
		if v == nil {
			return nil
		}
		return v.DefaultServiceTypeHealthPolicy
	}).(ArmServiceTypeHealthPolicyResponsePtrOutput)
}

// The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
// The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
// This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
func (o ArmApplicationHealthPolicyResponsePtrOutput) MaxPercentUnhealthyDeployedApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyDeployedApplications
	}).(pulumi.IntPtrOutput)
}

// The map with service type health policy per service type name. The map is empty by default.
func (o ArmApplicationHealthPolicyResponsePtrOutput) ServiceTypeHealthPolicyMap() ArmServiceTypeHealthPolicyResponseMapOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicyResponse) map[string]ArmServiceTypeHealthPolicyResponse {
		if v == nil {
			return nil
		}
		return v.ServiceTypeHealthPolicyMap
	}).(ArmServiceTypeHealthPolicyResponseMapOutput)
}

// The policy used for monitoring the application upgrade
type ArmRollingUpgradeMonitoringPolicy struct {
	// The activation Mode of the service package
	FailureAction *string `pulumi:"failureAction"`
	// The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckRetryTimeout *string `pulumi:"healthCheckRetryTimeout"`
	// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckStableDuration *string `pulumi:"healthCheckStableDuration"`
	// The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckWaitDuration *string `pulumi:"healthCheckWaitDuration"`
	// The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	UpgradeDomainTimeout *string `pulumi:"upgradeDomainTimeout"`
	// The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	UpgradeTimeout *string `pulumi:"upgradeTimeout"`
}

// ArmRollingUpgradeMonitoringPolicyInput is an input type that accepts ArmRollingUpgradeMonitoringPolicyArgs and ArmRollingUpgradeMonitoringPolicyOutput values.
// You can construct a concrete instance of `ArmRollingUpgradeMonitoringPolicyInput` via:
//
//	ArmRollingUpgradeMonitoringPolicyArgs{...}
type ArmRollingUpgradeMonitoringPolicyInput interface {
	pulumi.Input

	ToArmRollingUpgradeMonitoringPolicyOutput() ArmRollingUpgradeMonitoringPolicyOutput
	ToArmRollingUpgradeMonitoringPolicyOutputWithContext(context.Context) ArmRollingUpgradeMonitoringPolicyOutput
}

// The policy used for monitoring the application upgrade
type ArmRollingUpgradeMonitoringPolicyArgs struct {
	// The activation Mode of the service package
	FailureAction pulumi.StringPtrInput `pulumi:"failureAction"`
	// The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckRetryTimeout pulumi.StringPtrInput `pulumi:"healthCheckRetryTimeout"`
	// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckStableDuration pulumi.StringPtrInput `pulumi:"healthCheckStableDuration"`
	// The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckWaitDuration pulumi.StringPtrInput `pulumi:"healthCheckWaitDuration"`
	// The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	UpgradeDomainTimeout pulumi.StringPtrInput `pulumi:"upgradeDomainTimeout"`
	// The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	UpgradeTimeout pulumi.StringPtrInput `pulumi:"upgradeTimeout"`
}

func (ArmRollingUpgradeMonitoringPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmRollingUpgradeMonitoringPolicy)(nil)).Elem()
}

func (i ArmRollingUpgradeMonitoringPolicyArgs) ToArmRollingUpgradeMonitoringPolicyOutput() ArmRollingUpgradeMonitoringPolicyOutput {
	return i.ToArmRollingUpgradeMonitoringPolicyOutputWithContext(context.Background())
}

func (i ArmRollingUpgradeMonitoringPolicyArgs) ToArmRollingUpgradeMonitoringPolicyOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmRollingUpgradeMonitoringPolicyOutput)
}

func (i ArmRollingUpgradeMonitoringPolicyArgs) ToArmRollingUpgradeMonitoringPolicyPtrOutput() ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return i.ToArmRollingUpgradeMonitoringPolicyPtrOutputWithContext(context.Background())
}

func (i ArmRollingUpgradeMonitoringPolicyArgs) ToArmRollingUpgradeMonitoringPolicyPtrOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmRollingUpgradeMonitoringPolicyOutput).ToArmRollingUpgradeMonitoringPolicyPtrOutputWithContext(ctx)
}

// ArmRollingUpgradeMonitoringPolicyPtrInput is an input type that accepts ArmRollingUpgradeMonitoringPolicyArgs, ArmRollingUpgradeMonitoringPolicyPtr and ArmRollingUpgradeMonitoringPolicyPtrOutput values.
// You can construct a concrete instance of `ArmRollingUpgradeMonitoringPolicyPtrInput` via:
//
//	        ArmRollingUpgradeMonitoringPolicyArgs{...}
//
//	or:
//
//	        nil
type ArmRollingUpgradeMonitoringPolicyPtrInput interface {
	pulumi.Input

	ToArmRollingUpgradeMonitoringPolicyPtrOutput() ArmRollingUpgradeMonitoringPolicyPtrOutput
	ToArmRollingUpgradeMonitoringPolicyPtrOutputWithContext(context.Context) ArmRollingUpgradeMonitoringPolicyPtrOutput
}

type armRollingUpgradeMonitoringPolicyPtrType ArmRollingUpgradeMonitoringPolicyArgs

func ArmRollingUpgradeMonitoringPolicyPtr(v *ArmRollingUpgradeMonitoringPolicyArgs) ArmRollingUpgradeMonitoringPolicyPtrInput {
	return (*armRollingUpgradeMonitoringPolicyPtrType)(v)
}

func (*armRollingUpgradeMonitoringPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmRollingUpgradeMonitoringPolicy)(nil)).Elem()
}

func (i *armRollingUpgradeMonitoringPolicyPtrType) ToArmRollingUpgradeMonitoringPolicyPtrOutput() ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return i.ToArmRollingUpgradeMonitoringPolicyPtrOutputWithContext(context.Background())
}

func (i *armRollingUpgradeMonitoringPolicyPtrType) ToArmRollingUpgradeMonitoringPolicyPtrOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmRollingUpgradeMonitoringPolicyPtrOutput)
}

// The policy used for monitoring the application upgrade
type ArmRollingUpgradeMonitoringPolicyOutput struct{ *pulumi.OutputState }

func (ArmRollingUpgradeMonitoringPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmRollingUpgradeMonitoringPolicy)(nil)).Elem()
}

func (o ArmRollingUpgradeMonitoringPolicyOutput) ToArmRollingUpgradeMonitoringPolicyOutput() ArmRollingUpgradeMonitoringPolicyOutput {
	return o
}

func (o ArmRollingUpgradeMonitoringPolicyOutput) ToArmRollingUpgradeMonitoringPolicyOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyOutput {
	return o
}

func (o ArmRollingUpgradeMonitoringPolicyOutput) ToArmRollingUpgradeMonitoringPolicyPtrOutput() ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return o.ToArmRollingUpgradeMonitoringPolicyPtrOutputWithContext(context.Background())
}

func (o ArmRollingUpgradeMonitoringPolicyOutput) ToArmRollingUpgradeMonitoringPolicyPtrOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArmRollingUpgradeMonitoringPolicy) *ArmRollingUpgradeMonitoringPolicy {
		return &v
	}).(ArmRollingUpgradeMonitoringPolicyPtrOutput)
}

// The activation Mode of the service package
func (o ArmRollingUpgradeMonitoringPolicyOutput) FailureAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicy) *string { return v.FailureAction }).(pulumi.StringPtrOutput)
}

// The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyOutput) HealthCheckRetryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicy) *string { return v.HealthCheckRetryTimeout }).(pulumi.StringPtrOutput)
}

// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyOutput) HealthCheckStableDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicy) *string { return v.HealthCheckStableDuration }).(pulumi.StringPtrOutput)
}

// The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyOutput) HealthCheckWaitDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicy) *string { return v.HealthCheckWaitDuration }).(pulumi.StringPtrOutput)
}

// The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyOutput) UpgradeDomainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicy) *string { return v.UpgradeDomainTimeout }).(pulumi.StringPtrOutput)
}

// The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyOutput) UpgradeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicy) *string { return v.UpgradeTimeout }).(pulumi.StringPtrOutput)
}

type ArmRollingUpgradeMonitoringPolicyPtrOutput struct{ *pulumi.OutputState }

func (ArmRollingUpgradeMonitoringPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmRollingUpgradeMonitoringPolicy)(nil)).Elem()
}

func (o ArmRollingUpgradeMonitoringPolicyPtrOutput) ToArmRollingUpgradeMonitoringPolicyPtrOutput() ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return o
}

func (o ArmRollingUpgradeMonitoringPolicyPtrOutput) ToArmRollingUpgradeMonitoringPolicyPtrOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return o
}

func (o ArmRollingUpgradeMonitoringPolicyPtrOutput) Elem() ArmRollingUpgradeMonitoringPolicyOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicy) ArmRollingUpgradeMonitoringPolicy {
		if v != nil {
			return *v
		}
		var ret ArmRollingUpgradeMonitoringPolicy
		return ret
	}).(ArmRollingUpgradeMonitoringPolicyOutput)
}

// The activation Mode of the service package
func (o ArmRollingUpgradeMonitoringPolicyPtrOutput) FailureAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicy) *string {
		if v == nil {
			return nil
		}
		return v.FailureAction
	}).(pulumi.StringPtrOutput)
}

// The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyPtrOutput) HealthCheckRetryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicy) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckRetryTimeout
	}).(pulumi.StringPtrOutput)
}

// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyPtrOutput) HealthCheckStableDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicy) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckStableDuration
	}).(pulumi.StringPtrOutput)
}

// The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyPtrOutput) HealthCheckWaitDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicy) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckWaitDuration
	}).(pulumi.StringPtrOutput)
}

// The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyPtrOutput) UpgradeDomainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicy) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeDomainTimeout
	}).(pulumi.StringPtrOutput)
}

// The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyPtrOutput) UpgradeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicy) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeTimeout
	}).(pulumi.StringPtrOutput)
}

// The policy used for monitoring the application upgrade
type ArmRollingUpgradeMonitoringPolicyResponse struct {
	// The activation Mode of the service package
	FailureAction *string `pulumi:"failureAction"`
	// The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckRetryTimeout *string `pulumi:"healthCheckRetryTimeout"`
	// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckStableDuration *string `pulumi:"healthCheckStableDuration"`
	// The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckWaitDuration *string `pulumi:"healthCheckWaitDuration"`
	// The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	UpgradeDomainTimeout *string `pulumi:"upgradeDomainTimeout"`
	// The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	UpgradeTimeout *string `pulumi:"upgradeTimeout"`
}

// The policy used for monitoring the application upgrade
type ArmRollingUpgradeMonitoringPolicyResponseOutput struct{ *pulumi.OutputState }

func (ArmRollingUpgradeMonitoringPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmRollingUpgradeMonitoringPolicyResponse)(nil)).Elem()
}

func (o ArmRollingUpgradeMonitoringPolicyResponseOutput) ToArmRollingUpgradeMonitoringPolicyResponseOutput() ArmRollingUpgradeMonitoringPolicyResponseOutput {
	return o
}

func (o ArmRollingUpgradeMonitoringPolicyResponseOutput) ToArmRollingUpgradeMonitoringPolicyResponseOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyResponseOutput {
	return o
}

// The activation Mode of the service package
func (o ArmRollingUpgradeMonitoringPolicyResponseOutput) FailureAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicyResponse) *string { return v.FailureAction }).(pulumi.StringPtrOutput)
}

// The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponseOutput) HealthCheckRetryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicyResponse) *string { return v.HealthCheckRetryTimeout }).(pulumi.StringPtrOutput)
}

// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponseOutput) HealthCheckStableDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicyResponse) *string { return v.HealthCheckStableDuration }).(pulumi.StringPtrOutput)
}

// The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponseOutput) HealthCheckWaitDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicyResponse) *string { return v.HealthCheckWaitDuration }).(pulumi.StringPtrOutput)
}

// The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponseOutput) UpgradeDomainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicyResponse) *string { return v.UpgradeDomainTimeout }).(pulumi.StringPtrOutput)
}

// The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponseOutput) UpgradeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicyResponse) *string { return v.UpgradeTimeout }).(pulumi.StringPtrOutput)
}

type ArmRollingUpgradeMonitoringPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmRollingUpgradeMonitoringPolicyResponse)(nil)).Elem()
}

func (o ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) ToArmRollingUpgradeMonitoringPolicyResponsePtrOutput() ArmRollingUpgradeMonitoringPolicyResponsePtrOutput {
	return o
}

func (o ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) ToArmRollingUpgradeMonitoringPolicyResponsePtrOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyResponsePtrOutput {
	return o
}

func (o ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) Elem() ArmRollingUpgradeMonitoringPolicyResponseOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicyResponse) ArmRollingUpgradeMonitoringPolicyResponse {
		if v != nil {
			return *v
		}
		var ret ArmRollingUpgradeMonitoringPolicyResponse
		return ret
	}).(ArmRollingUpgradeMonitoringPolicyResponseOutput)
}

// The activation Mode of the service package
func (o ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) FailureAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.FailureAction
	}).(pulumi.StringPtrOutput)
}

// The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) HealthCheckRetryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckRetryTimeout
	}).(pulumi.StringPtrOutput)
}

// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) HealthCheckStableDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckStableDuration
	}).(pulumi.StringPtrOutput)
}

// The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) HealthCheckWaitDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckWaitDuration
	}).(pulumi.StringPtrOutput)
}

// The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) UpgradeDomainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeDomainTimeout
	}).(pulumi.StringPtrOutput)
}

// The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) UpgradeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeTimeout
	}).(pulumi.StringPtrOutput)
}

// Represents the health policy used to evaluate the health of services belonging to a service type.
type ArmServiceTypeHealthPolicy struct {
	// The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyPartitionsPerService *int `pulumi:"maxPercentUnhealthyPartitionsPerService"`
	// The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyReplicasPerPartition *int `pulumi:"maxPercentUnhealthyReplicasPerPartition"`
	// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyServices *int `pulumi:"maxPercentUnhealthyServices"`
}

// Defaults sets the appropriate defaults for ArmServiceTypeHealthPolicy
func (val *ArmServiceTypeHealthPolicy) Defaults() *ArmServiceTypeHealthPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.MaxPercentUnhealthyPartitionsPerService) {
		maxPercentUnhealthyPartitionsPerService_ := 0
		tmp.MaxPercentUnhealthyPartitionsPerService = &maxPercentUnhealthyPartitionsPerService_
	}
	if isZero(tmp.MaxPercentUnhealthyReplicasPerPartition) {
		maxPercentUnhealthyReplicasPerPartition_ := 0
		tmp.MaxPercentUnhealthyReplicasPerPartition = &maxPercentUnhealthyReplicasPerPartition_
	}
	if isZero(tmp.MaxPercentUnhealthyServices) {
		maxPercentUnhealthyServices_ := 0
		tmp.MaxPercentUnhealthyServices = &maxPercentUnhealthyServices_
	}
	return &tmp
}

// ArmServiceTypeHealthPolicyInput is an input type that accepts ArmServiceTypeHealthPolicyArgs and ArmServiceTypeHealthPolicyOutput values.
// You can construct a concrete instance of `ArmServiceTypeHealthPolicyInput` via:
//
//	ArmServiceTypeHealthPolicyArgs{...}
type ArmServiceTypeHealthPolicyInput interface {
	pulumi.Input

	ToArmServiceTypeHealthPolicyOutput() ArmServiceTypeHealthPolicyOutput
	ToArmServiceTypeHealthPolicyOutputWithContext(context.Context) ArmServiceTypeHealthPolicyOutput
}

// Represents the health policy used to evaluate the health of services belonging to a service type.
type ArmServiceTypeHealthPolicyArgs struct {
	// The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyPartitionsPerService pulumi.IntPtrInput `pulumi:"maxPercentUnhealthyPartitionsPerService"`
	// The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyReplicasPerPartition pulumi.IntPtrInput `pulumi:"maxPercentUnhealthyReplicasPerPartition"`
	// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyServices pulumi.IntPtrInput `pulumi:"maxPercentUnhealthyServices"`
}

// Defaults sets the appropriate defaults for ArmServiceTypeHealthPolicyArgs
func (val *ArmServiceTypeHealthPolicyArgs) Defaults() *ArmServiceTypeHealthPolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.MaxPercentUnhealthyPartitionsPerService) {
		tmp.MaxPercentUnhealthyPartitionsPerService = pulumi.IntPtr(0)
	}
	if isZero(tmp.MaxPercentUnhealthyReplicasPerPartition) {
		tmp.MaxPercentUnhealthyReplicasPerPartition = pulumi.IntPtr(0)
	}
	if isZero(tmp.MaxPercentUnhealthyServices) {
		tmp.MaxPercentUnhealthyServices = pulumi.IntPtr(0)
	}
	return &tmp
}
func (ArmServiceTypeHealthPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmServiceTypeHealthPolicy)(nil)).Elem()
}

func (i ArmServiceTypeHealthPolicyArgs) ToArmServiceTypeHealthPolicyOutput() ArmServiceTypeHealthPolicyOutput {
	return i.ToArmServiceTypeHealthPolicyOutputWithContext(context.Background())
}

func (i ArmServiceTypeHealthPolicyArgs) ToArmServiceTypeHealthPolicyOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmServiceTypeHealthPolicyOutput)
}

func (i ArmServiceTypeHealthPolicyArgs) ToArmServiceTypeHealthPolicyPtrOutput() ArmServiceTypeHealthPolicyPtrOutput {
	return i.ToArmServiceTypeHealthPolicyPtrOutputWithContext(context.Background())
}

func (i ArmServiceTypeHealthPolicyArgs) ToArmServiceTypeHealthPolicyPtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmServiceTypeHealthPolicyOutput).ToArmServiceTypeHealthPolicyPtrOutputWithContext(ctx)
}

// ArmServiceTypeHealthPolicyPtrInput is an input type that accepts ArmServiceTypeHealthPolicyArgs, ArmServiceTypeHealthPolicyPtr and ArmServiceTypeHealthPolicyPtrOutput values.
// You can construct a concrete instance of `ArmServiceTypeHealthPolicyPtrInput` via:
//
//	        ArmServiceTypeHealthPolicyArgs{...}
//
//	or:
//
//	        nil
type ArmServiceTypeHealthPolicyPtrInput interface {
	pulumi.Input

	ToArmServiceTypeHealthPolicyPtrOutput() ArmServiceTypeHealthPolicyPtrOutput
	ToArmServiceTypeHealthPolicyPtrOutputWithContext(context.Context) ArmServiceTypeHealthPolicyPtrOutput
}

type armServiceTypeHealthPolicyPtrType ArmServiceTypeHealthPolicyArgs

func ArmServiceTypeHealthPolicyPtr(v *ArmServiceTypeHealthPolicyArgs) ArmServiceTypeHealthPolicyPtrInput {
	return (*armServiceTypeHealthPolicyPtrType)(v)
}

func (*armServiceTypeHealthPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmServiceTypeHealthPolicy)(nil)).Elem()
}

func (i *armServiceTypeHealthPolicyPtrType) ToArmServiceTypeHealthPolicyPtrOutput() ArmServiceTypeHealthPolicyPtrOutput {
	return i.ToArmServiceTypeHealthPolicyPtrOutputWithContext(context.Background())
}

func (i *armServiceTypeHealthPolicyPtrType) ToArmServiceTypeHealthPolicyPtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmServiceTypeHealthPolicyPtrOutput)
}

// ArmServiceTypeHealthPolicyMapInput is an input type that accepts ArmServiceTypeHealthPolicyMap and ArmServiceTypeHealthPolicyMapOutput values.
// You can construct a concrete instance of `ArmServiceTypeHealthPolicyMapInput` via:
//
//	ArmServiceTypeHealthPolicyMap{ "key": ArmServiceTypeHealthPolicyArgs{...} }
type ArmServiceTypeHealthPolicyMapInput interface {
	pulumi.Input

	ToArmServiceTypeHealthPolicyMapOutput() ArmServiceTypeHealthPolicyMapOutput
	ToArmServiceTypeHealthPolicyMapOutputWithContext(context.Context) ArmServiceTypeHealthPolicyMapOutput
}

type ArmServiceTypeHealthPolicyMap map[string]ArmServiceTypeHealthPolicyInput

func (ArmServiceTypeHealthPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArmServiceTypeHealthPolicy)(nil)).Elem()
}

func (i ArmServiceTypeHealthPolicyMap) ToArmServiceTypeHealthPolicyMapOutput() ArmServiceTypeHealthPolicyMapOutput {
	return i.ToArmServiceTypeHealthPolicyMapOutputWithContext(context.Background())
}

func (i ArmServiceTypeHealthPolicyMap) ToArmServiceTypeHealthPolicyMapOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmServiceTypeHealthPolicyMapOutput)
}

// Represents the health policy used to evaluate the health of services belonging to a service type.
type ArmServiceTypeHealthPolicyOutput struct{ *pulumi.OutputState }

func (ArmServiceTypeHealthPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmServiceTypeHealthPolicy)(nil)).Elem()
}

func (o ArmServiceTypeHealthPolicyOutput) ToArmServiceTypeHealthPolicyOutput() ArmServiceTypeHealthPolicyOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyOutput) ToArmServiceTypeHealthPolicyOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyOutput) ToArmServiceTypeHealthPolicyPtrOutput() ArmServiceTypeHealthPolicyPtrOutput {
	return o.ToArmServiceTypeHealthPolicyPtrOutputWithContext(context.Background())
}

func (o ArmServiceTypeHealthPolicyOutput) ToArmServiceTypeHealthPolicyPtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArmServiceTypeHealthPolicy) *ArmServiceTypeHealthPolicy {
		return &v
	}).(ArmServiceTypeHealthPolicyPtrOutput)
}

// The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyOutput) MaxPercentUnhealthyPartitionsPerService() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArmServiceTypeHealthPolicy) *int { return v.MaxPercentUnhealthyPartitionsPerService }).(pulumi.IntPtrOutput)
}

// The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyOutput) MaxPercentUnhealthyReplicasPerPartition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArmServiceTypeHealthPolicy) *int { return v.MaxPercentUnhealthyReplicasPerPartition }).(pulumi.IntPtrOutput)
}

// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyOutput) MaxPercentUnhealthyServices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArmServiceTypeHealthPolicy) *int { return v.MaxPercentUnhealthyServices }).(pulumi.IntPtrOutput)
}

type ArmServiceTypeHealthPolicyPtrOutput struct{ *pulumi.OutputState }

func (ArmServiceTypeHealthPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmServiceTypeHealthPolicy)(nil)).Elem()
}

func (o ArmServiceTypeHealthPolicyPtrOutput) ToArmServiceTypeHealthPolicyPtrOutput() ArmServiceTypeHealthPolicyPtrOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyPtrOutput) ToArmServiceTypeHealthPolicyPtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyPtrOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyPtrOutput) Elem() ArmServiceTypeHealthPolicyOutput {
	return o.ApplyT(func(v *ArmServiceTypeHealthPolicy) ArmServiceTypeHealthPolicy {
		if v != nil {
			return *v
		}
		var ret ArmServiceTypeHealthPolicy
		return ret
	}).(ArmServiceTypeHealthPolicyOutput)
}

// The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyPtrOutput) MaxPercentUnhealthyPartitionsPerService() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArmServiceTypeHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyPartitionsPerService
	}).(pulumi.IntPtrOutput)
}

// The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyPtrOutput) MaxPercentUnhealthyReplicasPerPartition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArmServiceTypeHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyReplicasPerPartition
	}).(pulumi.IntPtrOutput)
}

// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyPtrOutput) MaxPercentUnhealthyServices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArmServiceTypeHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyServices
	}).(pulumi.IntPtrOutput)
}

type ArmServiceTypeHealthPolicyMapOutput struct{ *pulumi.OutputState }

func (ArmServiceTypeHealthPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArmServiceTypeHealthPolicy)(nil)).Elem()
}

func (o ArmServiceTypeHealthPolicyMapOutput) ToArmServiceTypeHealthPolicyMapOutput() ArmServiceTypeHealthPolicyMapOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyMapOutput) ToArmServiceTypeHealthPolicyMapOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyMapOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyMapOutput) MapIndex(k pulumi.StringInput) ArmServiceTypeHealthPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArmServiceTypeHealthPolicy {
		return vs[0].(map[string]ArmServiceTypeHealthPolicy)[vs[1].(string)]
	}).(ArmServiceTypeHealthPolicyOutput)
}

// Represents the health policy used to evaluate the health of services belonging to a service type.
type ArmServiceTypeHealthPolicyResponse struct {
	// The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyPartitionsPerService *int `pulumi:"maxPercentUnhealthyPartitionsPerService"`
	// The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyReplicasPerPartition *int `pulumi:"maxPercentUnhealthyReplicasPerPartition"`
	// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyServices *int `pulumi:"maxPercentUnhealthyServices"`
}

// Defaults sets the appropriate defaults for ArmServiceTypeHealthPolicyResponse
func (val *ArmServiceTypeHealthPolicyResponse) Defaults() *ArmServiceTypeHealthPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.MaxPercentUnhealthyPartitionsPerService) {
		maxPercentUnhealthyPartitionsPerService_ := 0
		tmp.MaxPercentUnhealthyPartitionsPerService = &maxPercentUnhealthyPartitionsPerService_
	}
	if isZero(tmp.MaxPercentUnhealthyReplicasPerPartition) {
		maxPercentUnhealthyReplicasPerPartition_ := 0
		tmp.MaxPercentUnhealthyReplicasPerPartition = &maxPercentUnhealthyReplicasPerPartition_
	}
	if isZero(tmp.MaxPercentUnhealthyServices) {
		maxPercentUnhealthyServices_ := 0
		tmp.MaxPercentUnhealthyServices = &maxPercentUnhealthyServices_
	}
	return &tmp
}

// Represents the health policy used to evaluate the health of services belonging to a service type.
type ArmServiceTypeHealthPolicyResponseOutput struct{ *pulumi.OutputState }

func (ArmServiceTypeHealthPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmServiceTypeHealthPolicyResponse)(nil)).Elem()
}

func (o ArmServiceTypeHealthPolicyResponseOutput) ToArmServiceTypeHealthPolicyResponseOutput() ArmServiceTypeHealthPolicyResponseOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyResponseOutput) ToArmServiceTypeHealthPolicyResponseOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyResponseOutput {
	return o
}

// The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyResponseOutput) MaxPercentUnhealthyPartitionsPerService() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArmServiceTypeHealthPolicyResponse) *int { return v.MaxPercentUnhealthyPartitionsPerService }).(pulumi.IntPtrOutput)
}

// The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyResponseOutput) MaxPercentUnhealthyReplicasPerPartition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArmServiceTypeHealthPolicyResponse) *int { return v.MaxPercentUnhealthyReplicasPerPartition }).(pulumi.IntPtrOutput)
}

// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyResponseOutput) MaxPercentUnhealthyServices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArmServiceTypeHealthPolicyResponse) *int { return v.MaxPercentUnhealthyServices }).(pulumi.IntPtrOutput)
}

type ArmServiceTypeHealthPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ArmServiceTypeHealthPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmServiceTypeHealthPolicyResponse)(nil)).Elem()
}

func (o ArmServiceTypeHealthPolicyResponsePtrOutput) ToArmServiceTypeHealthPolicyResponsePtrOutput() ArmServiceTypeHealthPolicyResponsePtrOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyResponsePtrOutput) ToArmServiceTypeHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyResponsePtrOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyResponsePtrOutput) Elem() ArmServiceTypeHealthPolicyResponseOutput {
	return o.ApplyT(func(v *ArmServiceTypeHealthPolicyResponse) ArmServiceTypeHealthPolicyResponse {
		if v != nil {
			return *v
		}
		var ret ArmServiceTypeHealthPolicyResponse
		return ret
	}).(ArmServiceTypeHealthPolicyResponseOutput)
}

// The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyResponsePtrOutput) MaxPercentUnhealthyPartitionsPerService() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArmServiceTypeHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyPartitionsPerService
	}).(pulumi.IntPtrOutput)
}

// The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyResponsePtrOutput) MaxPercentUnhealthyReplicasPerPartition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArmServiceTypeHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyReplicasPerPartition
	}).(pulumi.IntPtrOutput)
}

// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyResponsePtrOutput) MaxPercentUnhealthyServices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArmServiceTypeHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyServices
	}).(pulumi.IntPtrOutput)
}

type ArmServiceTypeHealthPolicyResponseMapOutput struct{ *pulumi.OutputState }

func (ArmServiceTypeHealthPolicyResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArmServiceTypeHealthPolicyResponse)(nil)).Elem()
}

func (o ArmServiceTypeHealthPolicyResponseMapOutput) ToArmServiceTypeHealthPolicyResponseMapOutput() ArmServiceTypeHealthPolicyResponseMapOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyResponseMapOutput) ToArmServiceTypeHealthPolicyResponseMapOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyResponseMapOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyResponseMapOutput) MapIndex(k pulumi.StringInput) ArmServiceTypeHealthPolicyResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArmServiceTypeHealthPolicyResponse {
		return vs[0].(map[string]ArmServiceTypeHealthPolicyResponse)[vs[1].(string)]
	}).(ArmServiceTypeHealthPolicyResponseOutput)
}

// The settings to enable AAD authentication on the cluster.
type AzureActiveDirectory struct {
	// Azure active directory client application id.
	ClientApplication *string `pulumi:"clientApplication"`
	// Azure active directory cluster application id.
	ClusterApplication *string `pulumi:"clusterApplication"`
	// Azure active directory tenant id.
	TenantId *string `pulumi:"tenantId"`
}

// AzureActiveDirectoryInput is an input type that accepts AzureActiveDirectoryArgs and AzureActiveDirectoryOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryInput` via:
//
//	AzureActiveDirectoryArgs{...}
type AzureActiveDirectoryInput interface {
	pulumi.Input

	ToAzureActiveDirectoryOutput() AzureActiveDirectoryOutput
	ToAzureActiveDirectoryOutputWithContext(context.Context) AzureActiveDirectoryOutput
}

// The settings to enable AAD authentication on the cluster.
type AzureActiveDirectoryArgs struct {
	// Azure active directory client application id.
	ClientApplication pulumi.StringPtrInput `pulumi:"clientApplication"`
	// Azure active directory cluster application id.
	ClusterApplication pulumi.StringPtrInput `pulumi:"clusterApplication"`
	// Azure active directory tenant id.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (AzureActiveDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectory)(nil)).Elem()
}

func (i AzureActiveDirectoryArgs) ToAzureActiveDirectoryOutput() AzureActiveDirectoryOutput {
	return i.ToAzureActiveDirectoryOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryArgs) ToAzureActiveDirectoryOutputWithContext(ctx context.Context) AzureActiveDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryOutput)
}

func (i AzureActiveDirectoryArgs) ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput {
	return i.ToAzureActiveDirectoryPtrOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryArgs) ToAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryOutput).ToAzureActiveDirectoryPtrOutputWithContext(ctx)
}

// AzureActiveDirectoryPtrInput is an input type that accepts AzureActiveDirectoryArgs, AzureActiveDirectoryPtr and AzureActiveDirectoryPtrOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryPtrInput` via:
//
//	        AzureActiveDirectoryArgs{...}
//
//	or:
//
//	        nil
type AzureActiveDirectoryPtrInput interface {
	pulumi.Input

	ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput
	ToAzureActiveDirectoryPtrOutputWithContext(context.Context) AzureActiveDirectoryPtrOutput
}

type azureActiveDirectoryPtrType AzureActiveDirectoryArgs

func AzureActiveDirectoryPtr(v *AzureActiveDirectoryArgs) AzureActiveDirectoryPtrInput {
	return (*azureActiveDirectoryPtrType)(v)
}

func (*azureActiveDirectoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectory)(nil)).Elem()
}

func (i *azureActiveDirectoryPtrType) ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput {
	return i.ToAzureActiveDirectoryPtrOutputWithContext(context.Background())
}

func (i *azureActiveDirectoryPtrType) ToAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryPtrOutput)
}

// The settings to enable AAD authentication on the cluster.
type AzureActiveDirectoryOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectory)(nil)).Elem()
}

func (o AzureActiveDirectoryOutput) ToAzureActiveDirectoryOutput() AzureActiveDirectoryOutput {
	return o
}

func (o AzureActiveDirectoryOutput) ToAzureActiveDirectoryOutputWithContext(ctx context.Context) AzureActiveDirectoryOutput {
	return o
}

func (o AzureActiveDirectoryOutput) ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput {
	return o.ToAzureActiveDirectoryPtrOutputWithContext(context.Background())
}

func (o AzureActiveDirectoryOutput) ToAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureActiveDirectory) *AzureActiveDirectory {
		return &v
	}).(AzureActiveDirectoryPtrOutput)
}

// Azure active directory client application id.
func (o AzureActiveDirectoryOutput) ClientApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectory) *string { return v.ClientApplication }).(pulumi.StringPtrOutput)
}

// Azure active directory cluster application id.
func (o AzureActiveDirectoryOutput) ClusterApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectory) *string { return v.ClusterApplication }).(pulumi.StringPtrOutput)
}

// Azure active directory tenant id.
func (o AzureActiveDirectoryOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectory) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type AzureActiveDirectoryPtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectory)(nil)).Elem()
}

func (o AzureActiveDirectoryPtrOutput) ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput {
	return o
}

func (o AzureActiveDirectoryPtrOutput) ToAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryPtrOutput {
	return o
}

func (o AzureActiveDirectoryPtrOutput) Elem() AzureActiveDirectoryOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) AzureActiveDirectory {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectory
		return ret
	}).(AzureActiveDirectoryOutput)
}

// Azure active directory client application id.
func (o AzureActiveDirectoryPtrOutput) ClientApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return v.ClientApplication
	}).(pulumi.StringPtrOutput)
}

// Azure active directory cluster application id.
func (o AzureActiveDirectoryPtrOutput) ClusterApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return v.ClusterApplication
	}).(pulumi.StringPtrOutput)
}

// Azure active directory tenant id.
func (o AzureActiveDirectoryPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The settings to enable AAD authentication on the cluster.
type AzureActiveDirectoryResponse struct {
	// Azure active directory client application id.
	ClientApplication *string `pulumi:"clientApplication"`
	// Azure active directory cluster application id.
	ClusterApplication *string `pulumi:"clusterApplication"`
	// Azure active directory tenant id.
	TenantId *string `pulumi:"tenantId"`
}

// The settings to enable AAD authentication on the cluster.
type AzureActiveDirectoryResponseOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryResponseOutput) ToAzureActiveDirectoryResponseOutput() AzureActiveDirectoryResponseOutput {
	return o
}

func (o AzureActiveDirectoryResponseOutput) ToAzureActiveDirectoryResponseOutputWithContext(ctx context.Context) AzureActiveDirectoryResponseOutput {
	return o
}

// Azure active directory client application id.
func (o AzureActiveDirectoryResponseOutput) ClientApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryResponse) *string { return v.ClientApplication }).(pulumi.StringPtrOutput)
}

// Azure active directory cluster application id.
func (o AzureActiveDirectoryResponseOutput) ClusterApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryResponse) *string { return v.ClusterApplication }).(pulumi.StringPtrOutput)
}

// Azure active directory tenant id.
func (o AzureActiveDirectoryResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type AzureActiveDirectoryResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryResponsePtrOutput) ToAzureActiveDirectoryResponsePtrOutput() AzureActiveDirectoryResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryResponsePtrOutput) ToAzureActiveDirectoryResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryResponsePtrOutput) Elem() AzureActiveDirectoryResponseOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) AzureActiveDirectoryResponse {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectoryResponse
		return ret
	}).(AzureActiveDirectoryResponseOutput)
}

// Azure active directory client application id.
func (o AzureActiveDirectoryResponsePtrOutput) ClientApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientApplication
	}).(pulumi.StringPtrOutput)
}

// Azure active directory cluster application id.
func (o AzureActiveDirectoryResponsePtrOutput) ClusterApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClusterApplication
	}).(pulumi.StringPtrOutput)
}

// Azure active directory tenant id.
func (o AzureActiveDirectoryResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Describes the certificate details.
type CertificateDescription struct {
	// Thumbprint of the primary certificate.
	Thumbprint string `pulumi:"thumbprint"`
	// Thumbprint of the secondary certificate.
	ThumbprintSecondary *string `pulumi:"thumbprintSecondary"`
	// The local certificate store location.
	X509StoreName *string `pulumi:"x509StoreName"`
}

// CertificateDescriptionInput is an input type that accepts CertificateDescriptionArgs and CertificateDescriptionOutput values.
// You can construct a concrete instance of `CertificateDescriptionInput` via:
//
//	CertificateDescriptionArgs{...}
type CertificateDescriptionInput interface {
	pulumi.Input

	ToCertificateDescriptionOutput() CertificateDescriptionOutput
	ToCertificateDescriptionOutputWithContext(context.Context) CertificateDescriptionOutput
}

// Describes the certificate details.
type CertificateDescriptionArgs struct {
	// Thumbprint of the primary certificate.
	Thumbprint pulumi.StringInput `pulumi:"thumbprint"`
	// Thumbprint of the secondary certificate.
	ThumbprintSecondary pulumi.StringPtrInput `pulumi:"thumbprintSecondary"`
	// The local certificate store location.
	X509StoreName pulumi.StringPtrInput `pulumi:"x509StoreName"`
}

func (CertificateDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDescription)(nil)).Elem()
}

func (i CertificateDescriptionArgs) ToCertificateDescriptionOutput() CertificateDescriptionOutput {
	return i.ToCertificateDescriptionOutputWithContext(context.Background())
}

func (i CertificateDescriptionArgs) ToCertificateDescriptionOutputWithContext(ctx context.Context) CertificateDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDescriptionOutput)
}

func (i CertificateDescriptionArgs) ToCertificateDescriptionPtrOutput() CertificateDescriptionPtrOutput {
	return i.ToCertificateDescriptionPtrOutputWithContext(context.Background())
}

func (i CertificateDescriptionArgs) ToCertificateDescriptionPtrOutputWithContext(ctx context.Context) CertificateDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDescriptionOutput).ToCertificateDescriptionPtrOutputWithContext(ctx)
}

// CertificateDescriptionPtrInput is an input type that accepts CertificateDescriptionArgs, CertificateDescriptionPtr and CertificateDescriptionPtrOutput values.
// You can construct a concrete instance of `CertificateDescriptionPtrInput` via:
//
//	        CertificateDescriptionArgs{...}
//
//	or:
//
//	        nil
type CertificateDescriptionPtrInput interface {
	pulumi.Input

	ToCertificateDescriptionPtrOutput() CertificateDescriptionPtrOutput
	ToCertificateDescriptionPtrOutputWithContext(context.Context) CertificateDescriptionPtrOutput
}

type certificateDescriptionPtrType CertificateDescriptionArgs

func CertificateDescriptionPtr(v *CertificateDescriptionArgs) CertificateDescriptionPtrInput {
	return (*certificateDescriptionPtrType)(v)
}

func (*certificateDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateDescription)(nil)).Elem()
}

func (i *certificateDescriptionPtrType) ToCertificateDescriptionPtrOutput() CertificateDescriptionPtrOutput {
	return i.ToCertificateDescriptionPtrOutputWithContext(context.Background())
}

func (i *certificateDescriptionPtrType) ToCertificateDescriptionPtrOutputWithContext(ctx context.Context) CertificateDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDescriptionPtrOutput)
}

// Describes the certificate details.
type CertificateDescriptionOutput struct{ *pulumi.OutputState }

func (CertificateDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDescription)(nil)).Elem()
}

func (o CertificateDescriptionOutput) ToCertificateDescriptionOutput() CertificateDescriptionOutput {
	return o
}

func (o CertificateDescriptionOutput) ToCertificateDescriptionOutputWithContext(ctx context.Context) CertificateDescriptionOutput {
	return o
}

func (o CertificateDescriptionOutput) ToCertificateDescriptionPtrOutput() CertificateDescriptionPtrOutput {
	return o.ToCertificateDescriptionPtrOutputWithContext(context.Background())
}

func (o CertificateDescriptionOutput) ToCertificateDescriptionPtrOutputWithContext(ctx context.Context) CertificateDescriptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateDescription) *CertificateDescription {
		return &v
	}).(CertificateDescriptionPtrOutput)
}

// Thumbprint of the primary certificate.
func (o CertificateDescriptionOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDescription) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// Thumbprint of the secondary certificate.
func (o CertificateDescriptionOutput) ThumbprintSecondary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDescription) *string { return v.ThumbprintSecondary }).(pulumi.StringPtrOutput)
}

// The local certificate store location.
func (o CertificateDescriptionOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDescription) *string { return v.X509StoreName }).(pulumi.StringPtrOutput)
}

type CertificateDescriptionPtrOutput struct{ *pulumi.OutputState }

func (CertificateDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateDescription)(nil)).Elem()
}

func (o CertificateDescriptionPtrOutput) ToCertificateDescriptionPtrOutput() CertificateDescriptionPtrOutput {
	return o
}

func (o CertificateDescriptionPtrOutput) ToCertificateDescriptionPtrOutputWithContext(ctx context.Context) CertificateDescriptionPtrOutput {
	return o
}

func (o CertificateDescriptionPtrOutput) Elem() CertificateDescriptionOutput {
	return o.ApplyT(func(v *CertificateDescription) CertificateDescription {
		if v != nil {
			return *v
		}
		var ret CertificateDescription
		return ret
	}).(CertificateDescriptionOutput)
}

// Thumbprint of the primary certificate.
func (o CertificateDescriptionPtrOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateDescription) *string {
		if v == nil {
			return nil
		}
		return &v.Thumbprint
	}).(pulumi.StringPtrOutput)
}

// Thumbprint of the secondary certificate.
func (o CertificateDescriptionPtrOutput) ThumbprintSecondary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateDescription) *string {
		if v == nil {
			return nil
		}
		return v.ThumbprintSecondary
	}).(pulumi.StringPtrOutput)
}

// The local certificate store location.
func (o CertificateDescriptionPtrOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateDescription) *string {
		if v == nil {
			return nil
		}
		return v.X509StoreName
	}).(pulumi.StringPtrOutput)
}

// Describes the certificate details.
type CertificateDescriptionResponse struct {
	// Thumbprint of the primary certificate.
	Thumbprint string `pulumi:"thumbprint"`
	// Thumbprint of the secondary certificate.
	ThumbprintSecondary *string `pulumi:"thumbprintSecondary"`
	// The local certificate store location.
	X509StoreName *string `pulumi:"x509StoreName"`
}

// Describes the certificate details.
type CertificateDescriptionResponseOutput struct{ *pulumi.OutputState }

func (CertificateDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDescriptionResponse)(nil)).Elem()
}

func (o CertificateDescriptionResponseOutput) ToCertificateDescriptionResponseOutput() CertificateDescriptionResponseOutput {
	return o
}

func (o CertificateDescriptionResponseOutput) ToCertificateDescriptionResponseOutputWithContext(ctx context.Context) CertificateDescriptionResponseOutput {
	return o
}

// Thumbprint of the primary certificate.
func (o CertificateDescriptionResponseOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDescriptionResponse) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// Thumbprint of the secondary certificate.
func (o CertificateDescriptionResponseOutput) ThumbprintSecondary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDescriptionResponse) *string { return v.ThumbprintSecondary }).(pulumi.StringPtrOutput)
}

// The local certificate store location.
func (o CertificateDescriptionResponseOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDescriptionResponse) *string { return v.X509StoreName }).(pulumi.StringPtrOutput)
}

type CertificateDescriptionResponsePtrOutput struct{ *pulumi.OutputState }

func (CertificateDescriptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateDescriptionResponse)(nil)).Elem()
}

func (o CertificateDescriptionResponsePtrOutput) ToCertificateDescriptionResponsePtrOutput() CertificateDescriptionResponsePtrOutput {
	return o
}

func (o CertificateDescriptionResponsePtrOutput) ToCertificateDescriptionResponsePtrOutputWithContext(ctx context.Context) CertificateDescriptionResponsePtrOutput {
	return o
}

func (o CertificateDescriptionResponsePtrOutput) Elem() CertificateDescriptionResponseOutput {
	return o.ApplyT(func(v *CertificateDescriptionResponse) CertificateDescriptionResponse {
		if v != nil {
			return *v
		}
		var ret CertificateDescriptionResponse
		return ret
	}).(CertificateDescriptionResponseOutput)
}

// Thumbprint of the primary certificate.
func (o CertificateDescriptionResponsePtrOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateDescriptionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Thumbprint
	}).(pulumi.StringPtrOutput)
}

// Thumbprint of the secondary certificate.
func (o CertificateDescriptionResponsePtrOutput) ThumbprintSecondary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateDescriptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ThumbprintSecondary
	}).(pulumi.StringPtrOutput)
}

// The local certificate store location.
func (o CertificateDescriptionResponsePtrOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateDescriptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.X509StoreName
	}).(pulumi.StringPtrOutput)
}

// Describes the client certificate details using common name.
type ClientCertificateCommonName struct {
	// The common name of the client certificate.
	CertificateCommonName string `pulumi:"certificateCommonName"`
	// The issuer thumbprint of the client certificate.
	CertificateIssuerThumbprint string `pulumi:"certificateIssuerThumbprint"`
	// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
	IsAdmin bool `pulumi:"isAdmin"`
}

// ClientCertificateCommonNameInput is an input type that accepts ClientCertificateCommonNameArgs and ClientCertificateCommonNameOutput values.
// You can construct a concrete instance of `ClientCertificateCommonNameInput` via:
//
//	ClientCertificateCommonNameArgs{...}
type ClientCertificateCommonNameInput interface {
	pulumi.Input

	ToClientCertificateCommonNameOutput() ClientCertificateCommonNameOutput
	ToClientCertificateCommonNameOutputWithContext(context.Context) ClientCertificateCommonNameOutput
}

// Describes the client certificate details using common name.
type ClientCertificateCommonNameArgs struct {
	// The common name of the client certificate.
	CertificateCommonName pulumi.StringInput `pulumi:"certificateCommonName"`
	// The issuer thumbprint of the client certificate.
	CertificateIssuerThumbprint pulumi.StringInput `pulumi:"certificateIssuerThumbprint"`
	// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
	IsAdmin pulumi.BoolInput `pulumi:"isAdmin"`
}

func (ClientCertificateCommonNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateCommonName)(nil)).Elem()
}

func (i ClientCertificateCommonNameArgs) ToClientCertificateCommonNameOutput() ClientCertificateCommonNameOutput {
	return i.ToClientCertificateCommonNameOutputWithContext(context.Background())
}

func (i ClientCertificateCommonNameArgs) ToClientCertificateCommonNameOutputWithContext(ctx context.Context) ClientCertificateCommonNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateCommonNameOutput)
}

// ClientCertificateCommonNameArrayInput is an input type that accepts ClientCertificateCommonNameArray and ClientCertificateCommonNameArrayOutput values.
// You can construct a concrete instance of `ClientCertificateCommonNameArrayInput` via:
//
//	ClientCertificateCommonNameArray{ ClientCertificateCommonNameArgs{...} }
type ClientCertificateCommonNameArrayInput interface {
	pulumi.Input

	ToClientCertificateCommonNameArrayOutput() ClientCertificateCommonNameArrayOutput
	ToClientCertificateCommonNameArrayOutputWithContext(context.Context) ClientCertificateCommonNameArrayOutput
}

type ClientCertificateCommonNameArray []ClientCertificateCommonNameInput

func (ClientCertificateCommonNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientCertificateCommonName)(nil)).Elem()
}

func (i ClientCertificateCommonNameArray) ToClientCertificateCommonNameArrayOutput() ClientCertificateCommonNameArrayOutput {
	return i.ToClientCertificateCommonNameArrayOutputWithContext(context.Background())
}

func (i ClientCertificateCommonNameArray) ToClientCertificateCommonNameArrayOutputWithContext(ctx context.Context) ClientCertificateCommonNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateCommonNameArrayOutput)
}

// Describes the client certificate details using common name.
type ClientCertificateCommonNameOutput struct{ *pulumi.OutputState }

func (ClientCertificateCommonNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateCommonName)(nil)).Elem()
}

func (o ClientCertificateCommonNameOutput) ToClientCertificateCommonNameOutput() ClientCertificateCommonNameOutput {
	return o
}

func (o ClientCertificateCommonNameOutput) ToClientCertificateCommonNameOutputWithContext(ctx context.Context) ClientCertificateCommonNameOutput {
	return o
}

// The common name of the client certificate.
func (o ClientCertificateCommonNameOutput) CertificateCommonName() pulumi.StringOutput {
	return o.ApplyT(func(v ClientCertificateCommonName) string { return v.CertificateCommonName }).(pulumi.StringOutput)
}

// The issuer thumbprint of the client certificate.
func (o ClientCertificateCommonNameOutput) CertificateIssuerThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ClientCertificateCommonName) string { return v.CertificateIssuerThumbprint }).(pulumi.StringOutput)
}

// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
func (o ClientCertificateCommonNameOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v ClientCertificateCommonName) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

type ClientCertificateCommonNameArrayOutput struct{ *pulumi.OutputState }

func (ClientCertificateCommonNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientCertificateCommonName)(nil)).Elem()
}

func (o ClientCertificateCommonNameArrayOutput) ToClientCertificateCommonNameArrayOutput() ClientCertificateCommonNameArrayOutput {
	return o
}

func (o ClientCertificateCommonNameArrayOutput) ToClientCertificateCommonNameArrayOutputWithContext(ctx context.Context) ClientCertificateCommonNameArrayOutput {
	return o
}

func (o ClientCertificateCommonNameArrayOutput) Index(i pulumi.IntInput) ClientCertificateCommonNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClientCertificateCommonName {
		return vs[0].([]ClientCertificateCommonName)[vs[1].(int)]
	}).(ClientCertificateCommonNameOutput)
}

// Describes the client certificate details using common name.
type ClientCertificateCommonNameResponse struct {
	// The common name of the client certificate.
	CertificateCommonName string `pulumi:"certificateCommonName"`
	// The issuer thumbprint of the client certificate.
	CertificateIssuerThumbprint string `pulumi:"certificateIssuerThumbprint"`
	// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
	IsAdmin bool `pulumi:"isAdmin"`
}

// Describes the client certificate details using common name.
type ClientCertificateCommonNameResponseOutput struct{ *pulumi.OutputState }

func (ClientCertificateCommonNameResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateCommonNameResponse)(nil)).Elem()
}

func (o ClientCertificateCommonNameResponseOutput) ToClientCertificateCommonNameResponseOutput() ClientCertificateCommonNameResponseOutput {
	return o
}

func (o ClientCertificateCommonNameResponseOutput) ToClientCertificateCommonNameResponseOutputWithContext(ctx context.Context) ClientCertificateCommonNameResponseOutput {
	return o
}

// The common name of the client certificate.
func (o ClientCertificateCommonNameResponseOutput) CertificateCommonName() pulumi.StringOutput {
	return o.ApplyT(func(v ClientCertificateCommonNameResponse) string { return v.CertificateCommonName }).(pulumi.StringOutput)
}

// The issuer thumbprint of the client certificate.
func (o ClientCertificateCommonNameResponseOutput) CertificateIssuerThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ClientCertificateCommonNameResponse) string { return v.CertificateIssuerThumbprint }).(pulumi.StringOutput)
}

// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
func (o ClientCertificateCommonNameResponseOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v ClientCertificateCommonNameResponse) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

type ClientCertificateCommonNameResponseArrayOutput struct{ *pulumi.OutputState }

func (ClientCertificateCommonNameResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientCertificateCommonNameResponse)(nil)).Elem()
}

func (o ClientCertificateCommonNameResponseArrayOutput) ToClientCertificateCommonNameResponseArrayOutput() ClientCertificateCommonNameResponseArrayOutput {
	return o
}

func (o ClientCertificateCommonNameResponseArrayOutput) ToClientCertificateCommonNameResponseArrayOutputWithContext(ctx context.Context) ClientCertificateCommonNameResponseArrayOutput {
	return o
}

func (o ClientCertificateCommonNameResponseArrayOutput) Index(i pulumi.IntInput) ClientCertificateCommonNameResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClientCertificateCommonNameResponse {
		return vs[0].([]ClientCertificateCommonNameResponse)[vs[1].(int)]
	}).(ClientCertificateCommonNameResponseOutput)
}

// Describes the client certificate details using thumbprint.
type ClientCertificateThumbprint struct {
	// The thumbprint of the client certificate.
	CertificateThumbprint string `pulumi:"certificateThumbprint"`
	// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
	IsAdmin bool `pulumi:"isAdmin"`
}

// ClientCertificateThumbprintInput is an input type that accepts ClientCertificateThumbprintArgs and ClientCertificateThumbprintOutput values.
// You can construct a concrete instance of `ClientCertificateThumbprintInput` via:
//
//	ClientCertificateThumbprintArgs{...}
type ClientCertificateThumbprintInput interface {
	pulumi.Input

	ToClientCertificateThumbprintOutput() ClientCertificateThumbprintOutput
	ToClientCertificateThumbprintOutputWithContext(context.Context) ClientCertificateThumbprintOutput
}

// Describes the client certificate details using thumbprint.
type ClientCertificateThumbprintArgs struct {
	// The thumbprint of the client certificate.
	CertificateThumbprint pulumi.StringInput `pulumi:"certificateThumbprint"`
	// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
	IsAdmin pulumi.BoolInput `pulumi:"isAdmin"`
}

func (ClientCertificateThumbprintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateThumbprint)(nil)).Elem()
}

func (i ClientCertificateThumbprintArgs) ToClientCertificateThumbprintOutput() ClientCertificateThumbprintOutput {
	return i.ToClientCertificateThumbprintOutputWithContext(context.Background())
}

func (i ClientCertificateThumbprintArgs) ToClientCertificateThumbprintOutputWithContext(ctx context.Context) ClientCertificateThumbprintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateThumbprintOutput)
}

// ClientCertificateThumbprintArrayInput is an input type that accepts ClientCertificateThumbprintArray and ClientCertificateThumbprintArrayOutput values.
// You can construct a concrete instance of `ClientCertificateThumbprintArrayInput` via:
//
//	ClientCertificateThumbprintArray{ ClientCertificateThumbprintArgs{...} }
type ClientCertificateThumbprintArrayInput interface {
	pulumi.Input

	ToClientCertificateThumbprintArrayOutput() ClientCertificateThumbprintArrayOutput
	ToClientCertificateThumbprintArrayOutputWithContext(context.Context) ClientCertificateThumbprintArrayOutput
}

type ClientCertificateThumbprintArray []ClientCertificateThumbprintInput

func (ClientCertificateThumbprintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientCertificateThumbprint)(nil)).Elem()
}

func (i ClientCertificateThumbprintArray) ToClientCertificateThumbprintArrayOutput() ClientCertificateThumbprintArrayOutput {
	return i.ToClientCertificateThumbprintArrayOutputWithContext(context.Background())
}

func (i ClientCertificateThumbprintArray) ToClientCertificateThumbprintArrayOutputWithContext(ctx context.Context) ClientCertificateThumbprintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateThumbprintArrayOutput)
}

// Describes the client certificate details using thumbprint.
type ClientCertificateThumbprintOutput struct{ *pulumi.OutputState }

func (ClientCertificateThumbprintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateThumbprint)(nil)).Elem()
}

func (o ClientCertificateThumbprintOutput) ToClientCertificateThumbprintOutput() ClientCertificateThumbprintOutput {
	return o
}

func (o ClientCertificateThumbprintOutput) ToClientCertificateThumbprintOutputWithContext(ctx context.Context) ClientCertificateThumbprintOutput {
	return o
}

// The thumbprint of the client certificate.
func (o ClientCertificateThumbprintOutput) CertificateThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ClientCertificateThumbprint) string { return v.CertificateThumbprint }).(pulumi.StringOutput)
}

// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
func (o ClientCertificateThumbprintOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v ClientCertificateThumbprint) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

type ClientCertificateThumbprintArrayOutput struct{ *pulumi.OutputState }

func (ClientCertificateThumbprintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientCertificateThumbprint)(nil)).Elem()
}

func (o ClientCertificateThumbprintArrayOutput) ToClientCertificateThumbprintArrayOutput() ClientCertificateThumbprintArrayOutput {
	return o
}

func (o ClientCertificateThumbprintArrayOutput) ToClientCertificateThumbprintArrayOutputWithContext(ctx context.Context) ClientCertificateThumbprintArrayOutput {
	return o
}

func (o ClientCertificateThumbprintArrayOutput) Index(i pulumi.IntInput) ClientCertificateThumbprintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClientCertificateThumbprint {
		return vs[0].([]ClientCertificateThumbprint)[vs[1].(int)]
	}).(ClientCertificateThumbprintOutput)
}

// Describes the client certificate details using thumbprint.
type ClientCertificateThumbprintResponse struct {
	// The thumbprint of the client certificate.
	CertificateThumbprint string `pulumi:"certificateThumbprint"`
	// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
	IsAdmin bool `pulumi:"isAdmin"`
}

// Describes the client certificate details using thumbprint.
type ClientCertificateThumbprintResponseOutput struct{ *pulumi.OutputState }

func (ClientCertificateThumbprintResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateThumbprintResponse)(nil)).Elem()
}

func (o ClientCertificateThumbprintResponseOutput) ToClientCertificateThumbprintResponseOutput() ClientCertificateThumbprintResponseOutput {
	return o
}

func (o ClientCertificateThumbprintResponseOutput) ToClientCertificateThumbprintResponseOutputWithContext(ctx context.Context) ClientCertificateThumbprintResponseOutput {
	return o
}

// The thumbprint of the client certificate.
func (o ClientCertificateThumbprintResponseOutput) CertificateThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ClientCertificateThumbprintResponse) string { return v.CertificateThumbprint }).(pulumi.StringOutput)
}

// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
func (o ClientCertificateThumbprintResponseOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v ClientCertificateThumbprintResponse) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

type ClientCertificateThumbprintResponseArrayOutput struct{ *pulumi.OutputState }

func (ClientCertificateThumbprintResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientCertificateThumbprintResponse)(nil)).Elem()
}

func (o ClientCertificateThumbprintResponseArrayOutput) ToClientCertificateThumbprintResponseArrayOutput() ClientCertificateThumbprintResponseArrayOutput {
	return o
}

func (o ClientCertificateThumbprintResponseArrayOutput) ToClientCertificateThumbprintResponseArrayOutputWithContext(ctx context.Context) ClientCertificateThumbprintResponseArrayOutput {
	return o
}

func (o ClientCertificateThumbprintResponseArrayOutput) Index(i pulumi.IntInput) ClientCertificateThumbprintResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClientCertificateThumbprintResponse {
		return vs[0].([]ClientCertificateThumbprintResponse)[vs[1].(int)]
	}).(ClientCertificateThumbprintResponseOutput)
}

// Defines a health policy used to evaluate the health of the cluster or of a cluster node.
type ClusterHealthPolicy struct {
	// Defines the application health policy map used to evaluate the health of an application or one of its children entities.
	ApplicationHealthPolicies map[string]ApplicationHealthPolicy `pulumi:"applicationHealthPolicies"`
	// The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.
	//
	// The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.
	// If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
	// This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.
	// The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
	MaxPercentUnhealthyApplications *int `pulumi:"maxPercentUnhealthyApplications"`
	// The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.
	//
	// The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.
	// If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
	// The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.
	// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
	//
	// In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
	MaxPercentUnhealthyNodes *int `pulumi:"maxPercentUnhealthyNodes"`
}

// Defaults sets the appropriate defaults for ClusterHealthPolicy
func (val *ClusterHealthPolicy) Defaults() *ClusterHealthPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.MaxPercentUnhealthyApplications) {
		maxPercentUnhealthyApplications_ := 0
		tmp.MaxPercentUnhealthyApplications = &maxPercentUnhealthyApplications_
	}
	if isZero(tmp.MaxPercentUnhealthyNodes) {
		maxPercentUnhealthyNodes_ := 0
		tmp.MaxPercentUnhealthyNodes = &maxPercentUnhealthyNodes_
	}
	return &tmp
}

// ClusterHealthPolicyInput is an input type that accepts ClusterHealthPolicyArgs and ClusterHealthPolicyOutput values.
// You can construct a concrete instance of `ClusterHealthPolicyInput` via:
//
//	ClusterHealthPolicyArgs{...}
type ClusterHealthPolicyInput interface {
	pulumi.Input

	ToClusterHealthPolicyOutput() ClusterHealthPolicyOutput
	ToClusterHealthPolicyOutputWithContext(context.Context) ClusterHealthPolicyOutput
}

// Defines a health policy used to evaluate the health of the cluster or of a cluster node.
type ClusterHealthPolicyArgs struct {
	// Defines the application health policy map used to evaluate the health of an application or one of its children entities.
	ApplicationHealthPolicies ApplicationHealthPolicyMapInput `pulumi:"applicationHealthPolicies"`
	// The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.
	//
	// The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.
	// If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
	// This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.
	// The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
	MaxPercentUnhealthyApplications pulumi.IntPtrInput `pulumi:"maxPercentUnhealthyApplications"`
	// The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.
	//
	// The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.
	// If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
	// The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.
	// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
	//
	// In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
	MaxPercentUnhealthyNodes pulumi.IntPtrInput `pulumi:"maxPercentUnhealthyNodes"`
}

// Defaults sets the appropriate defaults for ClusterHealthPolicyArgs
func (val *ClusterHealthPolicyArgs) Defaults() *ClusterHealthPolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.MaxPercentUnhealthyApplications) {
		tmp.MaxPercentUnhealthyApplications = pulumi.IntPtr(0)
	}
	if isZero(tmp.MaxPercentUnhealthyNodes) {
		tmp.MaxPercentUnhealthyNodes = pulumi.IntPtr(0)
	}
	return &tmp
}
func (ClusterHealthPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterHealthPolicy)(nil)).Elem()
}

func (i ClusterHealthPolicyArgs) ToClusterHealthPolicyOutput() ClusterHealthPolicyOutput {
	return i.ToClusterHealthPolicyOutputWithContext(context.Background())
}

func (i ClusterHealthPolicyArgs) ToClusterHealthPolicyOutputWithContext(ctx context.Context) ClusterHealthPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterHealthPolicyOutput)
}

func (i ClusterHealthPolicyArgs) ToClusterHealthPolicyPtrOutput() ClusterHealthPolicyPtrOutput {
	return i.ToClusterHealthPolicyPtrOutputWithContext(context.Background())
}

func (i ClusterHealthPolicyArgs) ToClusterHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterHealthPolicyOutput).ToClusterHealthPolicyPtrOutputWithContext(ctx)
}

// ClusterHealthPolicyPtrInput is an input type that accepts ClusterHealthPolicyArgs, ClusterHealthPolicyPtr and ClusterHealthPolicyPtrOutput values.
// You can construct a concrete instance of `ClusterHealthPolicyPtrInput` via:
//
//	        ClusterHealthPolicyArgs{...}
//
//	or:
//
//	        nil
type ClusterHealthPolicyPtrInput interface {
	pulumi.Input

	ToClusterHealthPolicyPtrOutput() ClusterHealthPolicyPtrOutput
	ToClusterHealthPolicyPtrOutputWithContext(context.Context) ClusterHealthPolicyPtrOutput
}

type clusterHealthPolicyPtrType ClusterHealthPolicyArgs

func ClusterHealthPolicyPtr(v *ClusterHealthPolicyArgs) ClusterHealthPolicyPtrInput {
	return (*clusterHealthPolicyPtrType)(v)
}

func (*clusterHealthPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterHealthPolicy)(nil)).Elem()
}

func (i *clusterHealthPolicyPtrType) ToClusterHealthPolicyPtrOutput() ClusterHealthPolicyPtrOutput {
	return i.ToClusterHealthPolicyPtrOutputWithContext(context.Background())
}

func (i *clusterHealthPolicyPtrType) ToClusterHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterHealthPolicyPtrOutput)
}

// Defines a health policy used to evaluate the health of the cluster or of a cluster node.
type ClusterHealthPolicyOutput struct{ *pulumi.OutputState }

func (ClusterHealthPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterHealthPolicy)(nil)).Elem()
}

func (o ClusterHealthPolicyOutput) ToClusterHealthPolicyOutput() ClusterHealthPolicyOutput {
	return o
}

func (o ClusterHealthPolicyOutput) ToClusterHealthPolicyOutputWithContext(ctx context.Context) ClusterHealthPolicyOutput {
	return o
}

func (o ClusterHealthPolicyOutput) ToClusterHealthPolicyPtrOutput() ClusterHealthPolicyPtrOutput {
	return o.ToClusterHealthPolicyPtrOutputWithContext(context.Background())
}

func (o ClusterHealthPolicyOutput) ToClusterHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterHealthPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterHealthPolicy) *ClusterHealthPolicy {
		return &v
	}).(ClusterHealthPolicyPtrOutput)
}

// Defines the application health policy map used to evaluate the health of an application or one of its children entities.
func (o ClusterHealthPolicyOutput) ApplicationHealthPolicies() ApplicationHealthPolicyMapOutput {
	return o.ApplyT(func(v ClusterHealthPolicy) map[string]ApplicationHealthPolicy { return v.ApplicationHealthPolicies }).(ApplicationHealthPolicyMapOutput)
}

// The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.
//
// The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.
// If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
// This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.
// The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
func (o ClusterHealthPolicyOutput) MaxPercentUnhealthyApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterHealthPolicy) *int { return v.MaxPercentUnhealthyApplications }).(pulumi.IntPtrOutput)
}

// The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.
//
// The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.
// If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
// The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.
// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
//
// In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
func (o ClusterHealthPolicyOutput) MaxPercentUnhealthyNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterHealthPolicy) *int { return v.MaxPercentUnhealthyNodes }).(pulumi.IntPtrOutput)
}

type ClusterHealthPolicyPtrOutput struct{ *pulumi.OutputState }

func (ClusterHealthPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterHealthPolicy)(nil)).Elem()
}

func (o ClusterHealthPolicyPtrOutput) ToClusterHealthPolicyPtrOutput() ClusterHealthPolicyPtrOutput {
	return o
}

func (o ClusterHealthPolicyPtrOutput) ToClusterHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterHealthPolicyPtrOutput {
	return o
}

func (o ClusterHealthPolicyPtrOutput) Elem() ClusterHealthPolicyOutput {
	return o.ApplyT(func(v *ClusterHealthPolicy) ClusterHealthPolicy {
		if v != nil {
			return *v
		}
		var ret ClusterHealthPolicy
		return ret
	}).(ClusterHealthPolicyOutput)
}

// Defines the application health policy map used to evaluate the health of an application or one of its children entities.
func (o ClusterHealthPolicyPtrOutput) ApplicationHealthPolicies() ApplicationHealthPolicyMapOutput {
	return o.ApplyT(func(v *ClusterHealthPolicy) map[string]ApplicationHealthPolicy {
		if v == nil {
			return nil
		}
		return v.ApplicationHealthPolicies
	}).(ApplicationHealthPolicyMapOutput)
}

// The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.
//
// The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.
// If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
// This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.
// The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
func (o ClusterHealthPolicyPtrOutput) MaxPercentUnhealthyApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyApplications
	}).(pulumi.IntPtrOutput)
}

// The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.
//
// The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.
// If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
// The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.
// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
//
// In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
func (o ClusterHealthPolicyPtrOutput) MaxPercentUnhealthyNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyNodes
	}).(pulumi.IntPtrOutput)
}

// Defines a health policy used to evaluate the health of the cluster or of a cluster node.
type ClusterHealthPolicyResponse struct {
	// Defines the application health policy map used to evaluate the health of an application or one of its children entities.
	ApplicationHealthPolicies map[string]ApplicationHealthPolicyResponse `pulumi:"applicationHealthPolicies"`
	// The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.
	//
	// The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.
	// If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
	// This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.
	// The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
	MaxPercentUnhealthyApplications *int `pulumi:"maxPercentUnhealthyApplications"`
	// The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.
	//
	// The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.
	// If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
	// The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.
	// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
	//
	// In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
	MaxPercentUnhealthyNodes *int `pulumi:"maxPercentUnhealthyNodes"`
}

// Defaults sets the appropriate defaults for ClusterHealthPolicyResponse
func (val *ClusterHealthPolicyResponse) Defaults() *ClusterHealthPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.MaxPercentUnhealthyApplications) {
		maxPercentUnhealthyApplications_ := 0
		tmp.MaxPercentUnhealthyApplications = &maxPercentUnhealthyApplications_
	}
	if isZero(tmp.MaxPercentUnhealthyNodes) {
		maxPercentUnhealthyNodes_ := 0
		tmp.MaxPercentUnhealthyNodes = &maxPercentUnhealthyNodes_
	}
	return &tmp
}

// Defines a health policy used to evaluate the health of the cluster or of a cluster node.
type ClusterHealthPolicyResponseOutput struct{ *pulumi.OutputState }

func (ClusterHealthPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterHealthPolicyResponse)(nil)).Elem()
}

func (o ClusterHealthPolicyResponseOutput) ToClusterHealthPolicyResponseOutput() ClusterHealthPolicyResponseOutput {
	return o
}

func (o ClusterHealthPolicyResponseOutput) ToClusterHealthPolicyResponseOutputWithContext(ctx context.Context) ClusterHealthPolicyResponseOutput {
	return o
}

// Defines the application health policy map used to evaluate the health of an application or one of its children entities.
func (o ClusterHealthPolicyResponseOutput) ApplicationHealthPolicies() ApplicationHealthPolicyResponseMapOutput {
	return o.ApplyT(func(v ClusterHealthPolicyResponse) map[string]ApplicationHealthPolicyResponse {
		return v.ApplicationHealthPolicies
	}).(ApplicationHealthPolicyResponseMapOutput)
}

// The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.
//
// The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.
// If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
// This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.
// The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
func (o ClusterHealthPolicyResponseOutput) MaxPercentUnhealthyApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterHealthPolicyResponse) *int { return v.MaxPercentUnhealthyApplications }).(pulumi.IntPtrOutput)
}

// The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.
//
// The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.
// If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
// The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.
// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
//
// In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
func (o ClusterHealthPolicyResponseOutput) MaxPercentUnhealthyNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterHealthPolicyResponse) *int { return v.MaxPercentUnhealthyNodes }).(pulumi.IntPtrOutput)
}

type ClusterHealthPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterHealthPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterHealthPolicyResponse)(nil)).Elem()
}

func (o ClusterHealthPolicyResponsePtrOutput) ToClusterHealthPolicyResponsePtrOutput() ClusterHealthPolicyResponsePtrOutput {
	return o
}

func (o ClusterHealthPolicyResponsePtrOutput) ToClusterHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ClusterHealthPolicyResponsePtrOutput {
	return o
}

func (o ClusterHealthPolicyResponsePtrOutput) Elem() ClusterHealthPolicyResponseOutput {
	return o.ApplyT(func(v *ClusterHealthPolicyResponse) ClusterHealthPolicyResponse {
		if v != nil {
			return *v
		}
		var ret ClusterHealthPolicyResponse
		return ret
	}).(ClusterHealthPolicyResponseOutput)
}

// Defines the application health policy map used to evaluate the health of an application or one of its children entities.
func (o ClusterHealthPolicyResponsePtrOutput) ApplicationHealthPolicies() ApplicationHealthPolicyResponseMapOutput {
	return o.ApplyT(func(v *ClusterHealthPolicyResponse) map[string]ApplicationHealthPolicyResponse {
		if v == nil {
			return nil
		}
		return v.ApplicationHealthPolicies
	}).(ApplicationHealthPolicyResponseMapOutput)
}

// The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.
//
// The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.
// If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
// This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.
// The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
func (o ClusterHealthPolicyResponsePtrOutput) MaxPercentUnhealthyApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyApplications
	}).(pulumi.IntPtrOutput)
}

// The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.
//
// The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.
// If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
// The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.
// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
//
// In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
func (o ClusterHealthPolicyResponsePtrOutput) MaxPercentUnhealthyNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyNodes
	}).(pulumi.IntPtrOutput)
}

// Describes the delta health policies for the cluster upgrade.
type ClusterUpgradeDeltaHealthPolicy struct {
	// Defines the application delta health policy map used to evaluate the health of an application or one of its child entities when upgrading the cluster.
	ApplicationDeltaHealthPolicies map[string]ApplicationDeltaHealthPolicy `pulumi:"applicationDeltaHealthPolicies"`
	// The maximum allowed percentage of applications health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.
	MaxPercentDeltaUnhealthyApplications int `pulumi:"maxPercentDeltaUnhealthyApplications"`
	// The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
	MaxPercentDeltaUnhealthyNodes int `pulumi:"maxPercentDeltaUnhealthyNodes"`
	// The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.
	MaxPercentUpgradeDomainDeltaUnhealthyNodes int `pulumi:"maxPercentUpgradeDomainDeltaUnhealthyNodes"`
}

// ClusterUpgradeDeltaHealthPolicyInput is an input type that accepts ClusterUpgradeDeltaHealthPolicyArgs and ClusterUpgradeDeltaHealthPolicyOutput values.
// You can construct a concrete instance of `ClusterUpgradeDeltaHealthPolicyInput` via:
//
//	ClusterUpgradeDeltaHealthPolicyArgs{...}
type ClusterUpgradeDeltaHealthPolicyInput interface {
	pulumi.Input

	ToClusterUpgradeDeltaHealthPolicyOutput() ClusterUpgradeDeltaHealthPolicyOutput
	ToClusterUpgradeDeltaHealthPolicyOutputWithContext(context.Context) ClusterUpgradeDeltaHealthPolicyOutput
}

// Describes the delta health policies for the cluster upgrade.
type ClusterUpgradeDeltaHealthPolicyArgs struct {
	// Defines the application delta health policy map used to evaluate the health of an application or one of its child entities when upgrading the cluster.
	ApplicationDeltaHealthPolicies ApplicationDeltaHealthPolicyMapInput `pulumi:"applicationDeltaHealthPolicies"`
	// The maximum allowed percentage of applications health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.
	MaxPercentDeltaUnhealthyApplications pulumi.IntInput `pulumi:"maxPercentDeltaUnhealthyApplications"`
	// The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
	MaxPercentDeltaUnhealthyNodes pulumi.IntInput `pulumi:"maxPercentDeltaUnhealthyNodes"`
	// The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.
	MaxPercentUpgradeDomainDeltaUnhealthyNodes pulumi.IntInput `pulumi:"maxPercentUpgradeDomainDeltaUnhealthyNodes"`
}

func (ClusterUpgradeDeltaHealthPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeDeltaHealthPolicy)(nil)).Elem()
}

func (i ClusterUpgradeDeltaHealthPolicyArgs) ToClusterUpgradeDeltaHealthPolicyOutput() ClusterUpgradeDeltaHealthPolicyOutput {
	return i.ToClusterUpgradeDeltaHealthPolicyOutputWithContext(context.Background())
}

func (i ClusterUpgradeDeltaHealthPolicyArgs) ToClusterUpgradeDeltaHealthPolicyOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeDeltaHealthPolicyOutput)
}

func (i ClusterUpgradeDeltaHealthPolicyArgs) ToClusterUpgradeDeltaHealthPolicyPtrOutput() ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return i.ToClusterUpgradeDeltaHealthPolicyPtrOutputWithContext(context.Background())
}

func (i ClusterUpgradeDeltaHealthPolicyArgs) ToClusterUpgradeDeltaHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeDeltaHealthPolicyOutput).ToClusterUpgradeDeltaHealthPolicyPtrOutputWithContext(ctx)
}

// ClusterUpgradeDeltaHealthPolicyPtrInput is an input type that accepts ClusterUpgradeDeltaHealthPolicyArgs, ClusterUpgradeDeltaHealthPolicyPtr and ClusterUpgradeDeltaHealthPolicyPtrOutput values.
// You can construct a concrete instance of `ClusterUpgradeDeltaHealthPolicyPtrInput` via:
//
//	        ClusterUpgradeDeltaHealthPolicyArgs{...}
//
//	or:
//
//	        nil
type ClusterUpgradeDeltaHealthPolicyPtrInput interface {
	pulumi.Input

	ToClusterUpgradeDeltaHealthPolicyPtrOutput() ClusterUpgradeDeltaHealthPolicyPtrOutput
	ToClusterUpgradeDeltaHealthPolicyPtrOutputWithContext(context.Context) ClusterUpgradeDeltaHealthPolicyPtrOutput
}

type clusterUpgradeDeltaHealthPolicyPtrType ClusterUpgradeDeltaHealthPolicyArgs

func ClusterUpgradeDeltaHealthPolicyPtr(v *ClusterUpgradeDeltaHealthPolicyArgs) ClusterUpgradeDeltaHealthPolicyPtrInput {
	return (*clusterUpgradeDeltaHealthPolicyPtrType)(v)
}

func (*clusterUpgradeDeltaHealthPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradeDeltaHealthPolicy)(nil)).Elem()
}

func (i *clusterUpgradeDeltaHealthPolicyPtrType) ToClusterUpgradeDeltaHealthPolicyPtrOutput() ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return i.ToClusterUpgradeDeltaHealthPolicyPtrOutputWithContext(context.Background())
}

func (i *clusterUpgradeDeltaHealthPolicyPtrType) ToClusterUpgradeDeltaHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeDeltaHealthPolicyPtrOutput)
}

// Describes the delta health policies for the cluster upgrade.
type ClusterUpgradeDeltaHealthPolicyOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeDeltaHealthPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeDeltaHealthPolicy)(nil)).Elem()
}

func (o ClusterUpgradeDeltaHealthPolicyOutput) ToClusterUpgradeDeltaHealthPolicyOutput() ClusterUpgradeDeltaHealthPolicyOutput {
	return o
}

func (o ClusterUpgradeDeltaHealthPolicyOutput) ToClusterUpgradeDeltaHealthPolicyOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyOutput {
	return o
}

func (o ClusterUpgradeDeltaHealthPolicyOutput) ToClusterUpgradeDeltaHealthPolicyPtrOutput() ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return o.ToClusterUpgradeDeltaHealthPolicyPtrOutputWithContext(context.Background())
}

func (o ClusterUpgradeDeltaHealthPolicyOutput) ToClusterUpgradeDeltaHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterUpgradeDeltaHealthPolicy) *ClusterUpgradeDeltaHealthPolicy {
		return &v
	}).(ClusterUpgradeDeltaHealthPolicyPtrOutput)
}

// Defines the application delta health policy map used to evaluate the health of an application or one of its child entities when upgrading the cluster.
func (o ClusterUpgradeDeltaHealthPolicyOutput) ApplicationDeltaHealthPolicies() ApplicationDeltaHealthPolicyMapOutput {
	return o.ApplyT(func(v ClusterUpgradeDeltaHealthPolicy) map[string]ApplicationDeltaHealthPolicy {
		return v.ApplicationDeltaHealthPolicies
	}).(ApplicationDeltaHealthPolicyMapOutput)
}

// The maximum allowed percentage of applications health degradation allowed during cluster upgrades.
// The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.
func (o ClusterUpgradeDeltaHealthPolicyOutput) MaxPercentDeltaUnhealthyApplications() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterUpgradeDeltaHealthPolicy) int { return v.MaxPercentDeltaUnhealthyApplications }).(pulumi.IntOutput)
}

// The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
// The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
func (o ClusterUpgradeDeltaHealthPolicyOutput) MaxPercentDeltaUnhealthyNodes() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterUpgradeDeltaHealthPolicy) int { return v.MaxPercentDeltaUnhealthyNodes }).(pulumi.IntOutput)
}

// The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.
// The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.
func (o ClusterUpgradeDeltaHealthPolicyOutput) MaxPercentUpgradeDomainDeltaUnhealthyNodes() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterUpgradeDeltaHealthPolicy) int { return v.MaxPercentUpgradeDomainDeltaUnhealthyNodes }).(pulumi.IntOutput)
}

type ClusterUpgradeDeltaHealthPolicyPtrOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeDeltaHealthPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradeDeltaHealthPolicy)(nil)).Elem()
}

func (o ClusterUpgradeDeltaHealthPolicyPtrOutput) ToClusterUpgradeDeltaHealthPolicyPtrOutput() ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return o
}

func (o ClusterUpgradeDeltaHealthPolicyPtrOutput) ToClusterUpgradeDeltaHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return o
}

func (o ClusterUpgradeDeltaHealthPolicyPtrOutput) Elem() ClusterUpgradeDeltaHealthPolicyOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicy) ClusterUpgradeDeltaHealthPolicy {
		if v != nil {
			return *v
		}
		var ret ClusterUpgradeDeltaHealthPolicy
		return ret
	}).(ClusterUpgradeDeltaHealthPolicyOutput)
}

// Defines the application delta health policy map used to evaluate the health of an application or one of its child entities when upgrading the cluster.
func (o ClusterUpgradeDeltaHealthPolicyPtrOutput) ApplicationDeltaHealthPolicies() ApplicationDeltaHealthPolicyMapOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicy) map[string]ApplicationDeltaHealthPolicy {
		if v == nil {
			return nil
		}
		return v.ApplicationDeltaHealthPolicies
	}).(ApplicationDeltaHealthPolicyMapOutput)
}

// The maximum allowed percentage of applications health degradation allowed during cluster upgrades.
// The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.
func (o ClusterUpgradeDeltaHealthPolicyPtrOutput) MaxPercentDeltaUnhealthyApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.MaxPercentDeltaUnhealthyApplications
	}).(pulumi.IntPtrOutput)
}

// The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
// The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
func (o ClusterUpgradeDeltaHealthPolicyPtrOutput) MaxPercentDeltaUnhealthyNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.MaxPercentDeltaUnhealthyNodes
	}).(pulumi.IntPtrOutput)
}

// The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.
// The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.
func (o ClusterUpgradeDeltaHealthPolicyPtrOutput) MaxPercentUpgradeDomainDeltaUnhealthyNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.MaxPercentUpgradeDomainDeltaUnhealthyNodes
	}).(pulumi.IntPtrOutput)
}

// Describes the delta health policies for the cluster upgrade.
type ClusterUpgradeDeltaHealthPolicyResponse struct {
	// Defines the application delta health policy map used to evaluate the health of an application or one of its child entities when upgrading the cluster.
	ApplicationDeltaHealthPolicies map[string]ApplicationDeltaHealthPolicyResponse `pulumi:"applicationDeltaHealthPolicies"`
	// The maximum allowed percentage of applications health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.
	MaxPercentDeltaUnhealthyApplications int `pulumi:"maxPercentDeltaUnhealthyApplications"`
	// The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
	MaxPercentDeltaUnhealthyNodes int `pulumi:"maxPercentDeltaUnhealthyNodes"`
	// The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.
	MaxPercentUpgradeDomainDeltaUnhealthyNodes int `pulumi:"maxPercentUpgradeDomainDeltaUnhealthyNodes"`
}

// Describes the delta health policies for the cluster upgrade.
type ClusterUpgradeDeltaHealthPolicyResponseOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeDeltaHealthPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeDeltaHealthPolicyResponse)(nil)).Elem()
}

func (o ClusterUpgradeDeltaHealthPolicyResponseOutput) ToClusterUpgradeDeltaHealthPolicyResponseOutput() ClusterUpgradeDeltaHealthPolicyResponseOutput {
	return o
}

func (o ClusterUpgradeDeltaHealthPolicyResponseOutput) ToClusterUpgradeDeltaHealthPolicyResponseOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyResponseOutput {
	return o
}

// Defines the application delta health policy map used to evaluate the health of an application or one of its child entities when upgrading the cluster.
func (o ClusterUpgradeDeltaHealthPolicyResponseOutput) ApplicationDeltaHealthPolicies() ApplicationDeltaHealthPolicyResponseMapOutput {
	return o.ApplyT(func(v ClusterUpgradeDeltaHealthPolicyResponse) map[string]ApplicationDeltaHealthPolicyResponse {
		return v.ApplicationDeltaHealthPolicies
	}).(ApplicationDeltaHealthPolicyResponseMapOutput)
}

// The maximum allowed percentage of applications health degradation allowed during cluster upgrades.
// The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.
func (o ClusterUpgradeDeltaHealthPolicyResponseOutput) MaxPercentDeltaUnhealthyApplications() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterUpgradeDeltaHealthPolicyResponse) int { return v.MaxPercentDeltaUnhealthyApplications }).(pulumi.IntOutput)
}

// The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
// The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
func (o ClusterUpgradeDeltaHealthPolicyResponseOutput) MaxPercentDeltaUnhealthyNodes() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterUpgradeDeltaHealthPolicyResponse) int { return v.MaxPercentDeltaUnhealthyNodes }).(pulumi.IntOutput)
}

// The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.
// The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.
func (o ClusterUpgradeDeltaHealthPolicyResponseOutput) MaxPercentUpgradeDomainDeltaUnhealthyNodes() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterUpgradeDeltaHealthPolicyResponse) int {
		return v.MaxPercentUpgradeDomainDeltaUnhealthyNodes
	}).(pulumi.IntOutput)
}

type ClusterUpgradeDeltaHealthPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeDeltaHealthPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradeDeltaHealthPolicyResponse)(nil)).Elem()
}

func (o ClusterUpgradeDeltaHealthPolicyResponsePtrOutput) ToClusterUpgradeDeltaHealthPolicyResponsePtrOutput() ClusterUpgradeDeltaHealthPolicyResponsePtrOutput {
	return o
}

func (o ClusterUpgradeDeltaHealthPolicyResponsePtrOutput) ToClusterUpgradeDeltaHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyResponsePtrOutput {
	return o
}

func (o ClusterUpgradeDeltaHealthPolicyResponsePtrOutput) Elem() ClusterUpgradeDeltaHealthPolicyResponseOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicyResponse) ClusterUpgradeDeltaHealthPolicyResponse {
		if v != nil {
			return *v
		}
		var ret ClusterUpgradeDeltaHealthPolicyResponse
		return ret
	}).(ClusterUpgradeDeltaHealthPolicyResponseOutput)
}

// Defines the application delta health policy map used to evaluate the health of an application or one of its child entities when upgrading the cluster.
func (o ClusterUpgradeDeltaHealthPolicyResponsePtrOutput) ApplicationDeltaHealthPolicies() ApplicationDeltaHealthPolicyResponseMapOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicyResponse) map[string]ApplicationDeltaHealthPolicyResponse {
		if v == nil {
			return nil
		}
		return v.ApplicationDeltaHealthPolicies
	}).(ApplicationDeltaHealthPolicyResponseMapOutput)
}

// The maximum allowed percentage of applications health degradation allowed during cluster upgrades.
// The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.
func (o ClusterUpgradeDeltaHealthPolicyResponsePtrOutput) MaxPercentDeltaUnhealthyApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxPercentDeltaUnhealthyApplications
	}).(pulumi.IntPtrOutput)
}

// The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
// The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
func (o ClusterUpgradeDeltaHealthPolicyResponsePtrOutput) MaxPercentDeltaUnhealthyNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxPercentDeltaUnhealthyNodes
	}).(pulumi.IntPtrOutput)
}

// The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.
// The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.
func (o ClusterUpgradeDeltaHealthPolicyResponsePtrOutput) MaxPercentUpgradeDomainDeltaUnhealthyNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxPercentUpgradeDomainDeltaUnhealthyNodes
	}).(pulumi.IntPtrOutput)
}

// Describes the policy used when upgrading the cluster.
type ClusterUpgradePolicy struct {
	// The cluster delta health policy used when upgrading the cluster.
	DeltaHealthPolicy *ClusterUpgradeDeltaHealthPolicy `pulumi:"deltaHealthPolicy"`
	// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
	ForceRestart *bool `pulumi:"forceRestart"`
	// The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckRetryTimeout string `pulumi:"healthCheckRetryTimeout"`
	// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckStableDuration string `pulumi:"healthCheckStableDuration"`
	// The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckWaitDuration string `pulumi:"healthCheckWaitDuration"`
	// The cluster health policy used when upgrading the cluster.
	HealthPolicy ClusterHealthPolicy `pulumi:"healthPolicy"`
	// The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeDomainTimeout string `pulumi:"upgradeDomainTimeout"`
	// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeReplicaSetCheckTimeout string `pulumi:"upgradeReplicaSetCheckTimeout"`
	// The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeTimeout string `pulumi:"upgradeTimeout"`
}

// Defaults sets the appropriate defaults for ClusterUpgradePolicy
func (val *ClusterUpgradePolicy) Defaults() *ClusterUpgradePolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.HealthPolicy = *tmp.HealthPolicy.Defaults()

	return &tmp
}

// ClusterUpgradePolicyInput is an input type that accepts ClusterUpgradePolicyArgs and ClusterUpgradePolicyOutput values.
// You can construct a concrete instance of `ClusterUpgradePolicyInput` via:
//
//	ClusterUpgradePolicyArgs{...}
type ClusterUpgradePolicyInput interface {
	pulumi.Input

	ToClusterUpgradePolicyOutput() ClusterUpgradePolicyOutput
	ToClusterUpgradePolicyOutputWithContext(context.Context) ClusterUpgradePolicyOutput
}

// Describes the policy used when upgrading the cluster.
type ClusterUpgradePolicyArgs struct {
	// The cluster delta health policy used when upgrading the cluster.
	DeltaHealthPolicy ClusterUpgradeDeltaHealthPolicyPtrInput `pulumi:"deltaHealthPolicy"`
	// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
	ForceRestart pulumi.BoolPtrInput `pulumi:"forceRestart"`
	// The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckRetryTimeout pulumi.StringInput `pulumi:"healthCheckRetryTimeout"`
	// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckStableDuration pulumi.StringInput `pulumi:"healthCheckStableDuration"`
	// The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckWaitDuration pulumi.StringInput `pulumi:"healthCheckWaitDuration"`
	// The cluster health policy used when upgrading the cluster.
	HealthPolicy ClusterHealthPolicyInput `pulumi:"healthPolicy"`
	// The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeDomainTimeout pulumi.StringInput `pulumi:"upgradeDomainTimeout"`
	// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeReplicaSetCheckTimeout pulumi.StringInput `pulumi:"upgradeReplicaSetCheckTimeout"`
	// The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeTimeout pulumi.StringInput `pulumi:"upgradeTimeout"`
}

// Defaults sets the appropriate defaults for ClusterUpgradePolicyArgs
func (val *ClusterUpgradePolicyArgs) Defaults() *ClusterUpgradePolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ClusterUpgradePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradePolicy)(nil)).Elem()
}

func (i ClusterUpgradePolicyArgs) ToClusterUpgradePolicyOutput() ClusterUpgradePolicyOutput {
	return i.ToClusterUpgradePolicyOutputWithContext(context.Background())
}

func (i ClusterUpgradePolicyArgs) ToClusterUpgradePolicyOutputWithContext(ctx context.Context) ClusterUpgradePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyOutput)
}

func (i ClusterUpgradePolicyArgs) ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput {
	return i.ToClusterUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i ClusterUpgradePolicyArgs) ToClusterUpgradePolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyOutput).ToClusterUpgradePolicyPtrOutputWithContext(ctx)
}

// ClusterUpgradePolicyPtrInput is an input type that accepts ClusterUpgradePolicyArgs, ClusterUpgradePolicyPtr and ClusterUpgradePolicyPtrOutput values.
// You can construct a concrete instance of `ClusterUpgradePolicyPtrInput` via:
//
//	        ClusterUpgradePolicyArgs{...}
//
//	or:
//
//	        nil
type ClusterUpgradePolicyPtrInput interface {
	pulumi.Input

	ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput
	ToClusterUpgradePolicyPtrOutputWithContext(context.Context) ClusterUpgradePolicyPtrOutput
}

type clusterUpgradePolicyPtrType ClusterUpgradePolicyArgs

func ClusterUpgradePolicyPtr(v *ClusterUpgradePolicyArgs) ClusterUpgradePolicyPtrInput {
	return (*clusterUpgradePolicyPtrType)(v)
}

func (*clusterUpgradePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradePolicy)(nil)).Elem()
}

func (i *clusterUpgradePolicyPtrType) ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput {
	return i.ToClusterUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i *clusterUpgradePolicyPtrType) ToClusterUpgradePolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyPtrOutput)
}

// Describes the policy used when upgrading the cluster.
type ClusterUpgradePolicyOutput struct{ *pulumi.OutputState }

func (ClusterUpgradePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradePolicy)(nil)).Elem()
}

func (o ClusterUpgradePolicyOutput) ToClusterUpgradePolicyOutput() ClusterUpgradePolicyOutput {
	return o
}

func (o ClusterUpgradePolicyOutput) ToClusterUpgradePolicyOutputWithContext(ctx context.Context) ClusterUpgradePolicyOutput {
	return o
}

func (o ClusterUpgradePolicyOutput) ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput {
	return o.ToClusterUpgradePolicyPtrOutputWithContext(context.Background())
}

func (o ClusterUpgradePolicyOutput) ToClusterUpgradePolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterUpgradePolicy) *ClusterUpgradePolicy {
		return &v
	}).(ClusterUpgradePolicyPtrOutput)
}

// The cluster delta health policy used when upgrading the cluster.
func (o ClusterUpgradePolicyOutput) DeltaHealthPolicy() ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) *ClusterUpgradeDeltaHealthPolicy { return v.DeltaHealthPolicy }).(ClusterUpgradeDeltaHealthPolicyPtrOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
func (o ClusterUpgradePolicyOutput) ForceRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) *bool { return v.ForceRestart }).(pulumi.BoolPtrOutput)
}

// The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyOutput) HealthCheckRetryTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) string { return v.HealthCheckRetryTimeout }).(pulumi.StringOutput)
}

// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyOutput) HealthCheckStableDuration() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) string { return v.HealthCheckStableDuration }).(pulumi.StringOutput)
}

// The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyOutput) HealthCheckWaitDuration() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) string { return v.HealthCheckWaitDuration }).(pulumi.StringOutput)
}

// The cluster health policy used when upgrading the cluster.
func (o ClusterUpgradePolicyOutput) HealthPolicy() ClusterHealthPolicyOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) ClusterHealthPolicy { return v.HealthPolicy }).(ClusterHealthPolicyOutput)
}

// The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyOutput) UpgradeDomainTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) string { return v.UpgradeDomainTimeout }).(pulumi.StringOutput)
}

// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyOutput) UpgradeReplicaSetCheckTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) string { return v.UpgradeReplicaSetCheckTimeout }).(pulumi.StringOutput)
}

// The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyOutput) UpgradeTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) string { return v.UpgradeTimeout }).(pulumi.StringOutput)
}

type ClusterUpgradePolicyPtrOutput struct{ *pulumi.OutputState }

func (ClusterUpgradePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradePolicy)(nil)).Elem()
}

func (o ClusterUpgradePolicyPtrOutput) ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput {
	return o
}

func (o ClusterUpgradePolicyPtrOutput) ToClusterUpgradePolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyPtrOutput {
	return o
}

func (o ClusterUpgradePolicyPtrOutput) Elem() ClusterUpgradePolicyOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) ClusterUpgradePolicy {
		if v != nil {
			return *v
		}
		var ret ClusterUpgradePolicy
		return ret
	}).(ClusterUpgradePolicyOutput)
}

// The cluster delta health policy used when upgrading the cluster.
func (o ClusterUpgradePolicyPtrOutput) DeltaHealthPolicy() ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *ClusterUpgradeDeltaHealthPolicy {
		if v == nil {
			return nil
		}
		return v.DeltaHealthPolicy
	}).(ClusterUpgradeDeltaHealthPolicyPtrOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
func (o ClusterUpgradePolicyPtrOutput) ForceRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *bool {
		if v == nil {
			return nil
		}
		return v.ForceRestart
	}).(pulumi.BoolPtrOutput)
}

// The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyPtrOutput) HealthCheckRetryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.HealthCheckRetryTimeout
	}).(pulumi.StringPtrOutput)
}

// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyPtrOutput) HealthCheckStableDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.HealthCheckStableDuration
	}).(pulumi.StringPtrOutput)
}

// The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyPtrOutput) HealthCheckWaitDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.HealthCheckWaitDuration
	}).(pulumi.StringPtrOutput)
}

// The cluster health policy used when upgrading the cluster.
func (o ClusterUpgradePolicyPtrOutput) HealthPolicy() ClusterHealthPolicyPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *ClusterHealthPolicy {
		if v == nil {
			return nil
		}
		return &v.HealthPolicy
	}).(ClusterHealthPolicyPtrOutput)
}

// The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyPtrOutput) UpgradeDomainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.UpgradeDomainTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyPtrOutput) UpgradeReplicaSetCheckTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.UpgradeReplicaSetCheckTimeout
	}).(pulumi.StringPtrOutput)
}

// The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyPtrOutput) UpgradeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.UpgradeTimeout
	}).(pulumi.StringPtrOutput)
}

// Describes the policy used when upgrading the cluster.
type ClusterUpgradePolicyResponse struct {
	// The cluster delta health policy used when upgrading the cluster.
	DeltaHealthPolicy *ClusterUpgradeDeltaHealthPolicyResponse `pulumi:"deltaHealthPolicy"`
	// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
	ForceRestart *bool `pulumi:"forceRestart"`
	// The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckRetryTimeout string `pulumi:"healthCheckRetryTimeout"`
	// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckStableDuration string `pulumi:"healthCheckStableDuration"`
	// The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckWaitDuration string `pulumi:"healthCheckWaitDuration"`
	// The cluster health policy used when upgrading the cluster.
	HealthPolicy ClusterHealthPolicyResponse `pulumi:"healthPolicy"`
	// The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeDomainTimeout string `pulumi:"upgradeDomainTimeout"`
	// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeReplicaSetCheckTimeout string `pulumi:"upgradeReplicaSetCheckTimeout"`
	// The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeTimeout string `pulumi:"upgradeTimeout"`
}

// Defaults sets the appropriate defaults for ClusterUpgradePolicyResponse
func (val *ClusterUpgradePolicyResponse) Defaults() *ClusterUpgradePolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.HealthPolicy = *tmp.HealthPolicy.Defaults()

	return &tmp
}

// Describes the policy used when upgrading the cluster.
type ClusterUpgradePolicyResponseOutput struct{ *pulumi.OutputState }

func (ClusterUpgradePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradePolicyResponse)(nil)).Elem()
}

func (o ClusterUpgradePolicyResponseOutput) ToClusterUpgradePolicyResponseOutput() ClusterUpgradePolicyResponseOutput {
	return o
}

func (o ClusterUpgradePolicyResponseOutput) ToClusterUpgradePolicyResponseOutputWithContext(ctx context.Context) ClusterUpgradePolicyResponseOutput {
	return o
}

// The cluster delta health policy used when upgrading the cluster.
func (o ClusterUpgradePolicyResponseOutput) DeltaHealthPolicy() ClusterUpgradeDeltaHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyResponse) *ClusterUpgradeDeltaHealthPolicyResponse {
		return v.DeltaHealthPolicy
	}).(ClusterUpgradeDeltaHealthPolicyResponsePtrOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
func (o ClusterUpgradePolicyResponseOutput) ForceRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyResponse) *bool { return v.ForceRestart }).(pulumi.BoolPtrOutput)
}

// The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponseOutput) HealthCheckRetryTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyResponse) string { return v.HealthCheckRetryTimeout }).(pulumi.StringOutput)
}

// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponseOutput) HealthCheckStableDuration() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyResponse) string { return v.HealthCheckStableDuration }).(pulumi.StringOutput)
}

// The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponseOutput) HealthCheckWaitDuration() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyResponse) string { return v.HealthCheckWaitDuration }).(pulumi.StringOutput)
}

// The cluster health policy used when upgrading the cluster.
func (o ClusterUpgradePolicyResponseOutput) HealthPolicy() ClusterHealthPolicyResponseOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyResponse) ClusterHealthPolicyResponse { return v.HealthPolicy }).(ClusterHealthPolicyResponseOutput)
}

// The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponseOutput) UpgradeDomainTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyResponse) string { return v.UpgradeDomainTimeout }).(pulumi.StringOutput)
}

// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponseOutput) UpgradeReplicaSetCheckTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyResponse) string { return v.UpgradeReplicaSetCheckTimeout }).(pulumi.StringOutput)
}

// The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponseOutput) UpgradeTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyResponse) string { return v.UpgradeTimeout }).(pulumi.StringOutput)
}

type ClusterUpgradePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterUpgradePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradePolicyResponse)(nil)).Elem()
}

func (o ClusterUpgradePolicyResponsePtrOutput) ToClusterUpgradePolicyResponsePtrOutput() ClusterUpgradePolicyResponsePtrOutput {
	return o
}

func (o ClusterUpgradePolicyResponsePtrOutput) ToClusterUpgradePolicyResponsePtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyResponsePtrOutput {
	return o
}

func (o ClusterUpgradePolicyResponsePtrOutput) Elem() ClusterUpgradePolicyResponseOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) ClusterUpgradePolicyResponse {
		if v != nil {
			return *v
		}
		var ret ClusterUpgradePolicyResponse
		return ret
	}).(ClusterUpgradePolicyResponseOutput)
}

// The cluster delta health policy used when upgrading the cluster.
func (o ClusterUpgradePolicyResponsePtrOutput) DeltaHealthPolicy() ClusterUpgradeDeltaHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) *ClusterUpgradeDeltaHealthPolicyResponse {
		if v == nil {
			return nil
		}
		return v.DeltaHealthPolicy
	}).(ClusterUpgradeDeltaHealthPolicyResponsePtrOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
func (o ClusterUpgradePolicyResponsePtrOutput) ForceRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ForceRestart
	}).(pulumi.BoolPtrOutput)
}

// The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponsePtrOutput) HealthCheckRetryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HealthCheckRetryTimeout
	}).(pulumi.StringPtrOutput)
}

// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponsePtrOutput) HealthCheckStableDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HealthCheckStableDuration
	}).(pulumi.StringPtrOutput)
}

// The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponsePtrOutput) HealthCheckWaitDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HealthCheckWaitDuration
	}).(pulumi.StringPtrOutput)
}

// The cluster health policy used when upgrading the cluster.
func (o ClusterUpgradePolicyResponsePtrOutput) HealthPolicy() ClusterHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) *ClusterHealthPolicyResponse {
		if v == nil {
			return nil
		}
		return &v.HealthPolicy
	}).(ClusterHealthPolicyResponsePtrOutput)
}

// The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponsePtrOutput) UpgradeDomainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpgradeDomainTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponsePtrOutput) UpgradeReplicaSetCheckTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpgradeReplicaSetCheckTimeout
	}).(pulumi.StringPtrOutput)
}

// The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponsePtrOutput) UpgradeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpgradeTimeout
	}).(pulumi.StringPtrOutput)
}

// The detail of the Service Fabric runtime version result
type ClusterVersionDetailsResponse struct {
	// The Service Fabric runtime version of the cluster.
	CodeVersion *string `pulumi:"codeVersion"`
	// Indicates if this version is for Windows or Linux operating system.
	Environment *string `pulumi:"environment"`
	// The date of expiry of support of the version.
	SupportExpiryUtc *string `pulumi:"supportExpiryUtc"`
}

// The detail of the Service Fabric runtime version result
type ClusterVersionDetailsResponseOutput struct{ *pulumi.OutputState }

func (ClusterVersionDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVersionDetailsResponse)(nil)).Elem()
}

func (o ClusterVersionDetailsResponseOutput) ToClusterVersionDetailsResponseOutput() ClusterVersionDetailsResponseOutput {
	return o
}

func (o ClusterVersionDetailsResponseOutput) ToClusterVersionDetailsResponseOutputWithContext(ctx context.Context) ClusterVersionDetailsResponseOutput {
	return o
}

// The Service Fabric runtime version of the cluster.
func (o ClusterVersionDetailsResponseOutput) CodeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterVersionDetailsResponse) *string { return v.CodeVersion }).(pulumi.StringPtrOutput)
}

// Indicates if this version is for Windows or Linux operating system.
func (o ClusterVersionDetailsResponseOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterVersionDetailsResponse) *string { return v.Environment }).(pulumi.StringPtrOutput)
}

// The date of expiry of support of the version.
func (o ClusterVersionDetailsResponseOutput) SupportExpiryUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterVersionDetailsResponse) *string { return v.SupportExpiryUtc }).(pulumi.StringPtrOutput)
}

type ClusterVersionDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (ClusterVersionDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterVersionDetailsResponse)(nil)).Elem()
}

func (o ClusterVersionDetailsResponseArrayOutput) ToClusterVersionDetailsResponseArrayOutput() ClusterVersionDetailsResponseArrayOutput {
	return o
}

func (o ClusterVersionDetailsResponseArrayOutput) ToClusterVersionDetailsResponseArrayOutputWithContext(ctx context.Context) ClusterVersionDetailsResponseArrayOutput {
	return o
}

func (o ClusterVersionDetailsResponseArrayOutput) Index(i pulumi.IntInput) ClusterVersionDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterVersionDetailsResponse {
		return vs[0].([]ClusterVersionDetailsResponse)[vs[1].(int)]
	}).(ClusterVersionDetailsResponseOutput)
}

// The storage account information for storing Service Fabric diagnostic logs.
type DiagnosticsStorageAccountConfig struct {
	// The blob endpoint of the azure storage account.
	BlobEndpoint string `pulumi:"blobEndpoint"`
	// The protected diagnostics storage key name.
	ProtectedAccountKeyName string `pulumi:"protectedAccountKeyName"`
	// The queue endpoint of the azure storage account.
	QueueEndpoint string `pulumi:"queueEndpoint"`
	// The Azure storage account name.
	StorageAccountName string `pulumi:"storageAccountName"`
	// The table endpoint of the azure storage account.
	TableEndpoint string `pulumi:"tableEndpoint"`
}

// DiagnosticsStorageAccountConfigInput is an input type that accepts DiagnosticsStorageAccountConfigArgs and DiagnosticsStorageAccountConfigOutput values.
// You can construct a concrete instance of `DiagnosticsStorageAccountConfigInput` via:
//
//	DiagnosticsStorageAccountConfigArgs{...}
type DiagnosticsStorageAccountConfigInput interface {
	pulumi.Input

	ToDiagnosticsStorageAccountConfigOutput() DiagnosticsStorageAccountConfigOutput
	ToDiagnosticsStorageAccountConfigOutputWithContext(context.Context) DiagnosticsStorageAccountConfigOutput
}

// The storage account information for storing Service Fabric diagnostic logs.
type DiagnosticsStorageAccountConfigArgs struct {
	// The blob endpoint of the azure storage account.
	BlobEndpoint pulumi.StringInput `pulumi:"blobEndpoint"`
	// The protected diagnostics storage key name.
	ProtectedAccountKeyName pulumi.StringInput `pulumi:"protectedAccountKeyName"`
	// The queue endpoint of the azure storage account.
	QueueEndpoint pulumi.StringInput `pulumi:"queueEndpoint"`
	// The Azure storage account name.
	StorageAccountName pulumi.StringInput `pulumi:"storageAccountName"`
	// The table endpoint of the azure storage account.
	TableEndpoint pulumi.StringInput `pulumi:"tableEndpoint"`
}

func (DiagnosticsStorageAccountConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsStorageAccountConfig)(nil)).Elem()
}

func (i DiagnosticsStorageAccountConfigArgs) ToDiagnosticsStorageAccountConfigOutput() DiagnosticsStorageAccountConfigOutput {
	return i.ToDiagnosticsStorageAccountConfigOutputWithContext(context.Background())
}

func (i DiagnosticsStorageAccountConfigArgs) ToDiagnosticsStorageAccountConfigOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsStorageAccountConfigOutput)
}

func (i DiagnosticsStorageAccountConfigArgs) ToDiagnosticsStorageAccountConfigPtrOutput() DiagnosticsStorageAccountConfigPtrOutput {
	return i.ToDiagnosticsStorageAccountConfigPtrOutputWithContext(context.Background())
}

func (i DiagnosticsStorageAccountConfigArgs) ToDiagnosticsStorageAccountConfigPtrOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsStorageAccountConfigOutput).ToDiagnosticsStorageAccountConfigPtrOutputWithContext(ctx)
}

// DiagnosticsStorageAccountConfigPtrInput is an input type that accepts DiagnosticsStorageAccountConfigArgs, DiagnosticsStorageAccountConfigPtr and DiagnosticsStorageAccountConfigPtrOutput values.
// You can construct a concrete instance of `DiagnosticsStorageAccountConfigPtrInput` via:
//
//	        DiagnosticsStorageAccountConfigArgs{...}
//
//	or:
//
//	        nil
type DiagnosticsStorageAccountConfigPtrInput interface {
	pulumi.Input

	ToDiagnosticsStorageAccountConfigPtrOutput() DiagnosticsStorageAccountConfigPtrOutput
	ToDiagnosticsStorageAccountConfigPtrOutputWithContext(context.Context) DiagnosticsStorageAccountConfigPtrOutput
}

type diagnosticsStorageAccountConfigPtrType DiagnosticsStorageAccountConfigArgs

func DiagnosticsStorageAccountConfigPtr(v *DiagnosticsStorageAccountConfigArgs) DiagnosticsStorageAccountConfigPtrInput {
	return (*diagnosticsStorageAccountConfigPtrType)(v)
}

func (*diagnosticsStorageAccountConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsStorageAccountConfig)(nil)).Elem()
}

func (i *diagnosticsStorageAccountConfigPtrType) ToDiagnosticsStorageAccountConfigPtrOutput() DiagnosticsStorageAccountConfigPtrOutput {
	return i.ToDiagnosticsStorageAccountConfigPtrOutputWithContext(context.Background())
}

func (i *diagnosticsStorageAccountConfigPtrType) ToDiagnosticsStorageAccountConfigPtrOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsStorageAccountConfigPtrOutput)
}

// The storage account information for storing Service Fabric diagnostic logs.
type DiagnosticsStorageAccountConfigOutput struct{ *pulumi.OutputState }

func (DiagnosticsStorageAccountConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsStorageAccountConfig)(nil)).Elem()
}

func (o DiagnosticsStorageAccountConfigOutput) ToDiagnosticsStorageAccountConfigOutput() DiagnosticsStorageAccountConfigOutput {
	return o
}

func (o DiagnosticsStorageAccountConfigOutput) ToDiagnosticsStorageAccountConfigOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigOutput {
	return o
}

func (o DiagnosticsStorageAccountConfigOutput) ToDiagnosticsStorageAccountConfigPtrOutput() DiagnosticsStorageAccountConfigPtrOutput {
	return o.ToDiagnosticsStorageAccountConfigPtrOutputWithContext(context.Background())
}

func (o DiagnosticsStorageAccountConfigOutput) ToDiagnosticsStorageAccountConfigPtrOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiagnosticsStorageAccountConfig) *DiagnosticsStorageAccountConfig {
		return &v
	}).(DiagnosticsStorageAccountConfigPtrOutput)
}

// The blob endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigOutput) BlobEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfig) string { return v.BlobEndpoint }).(pulumi.StringOutput)
}

// The protected diagnostics storage key name.
func (o DiagnosticsStorageAccountConfigOutput) ProtectedAccountKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfig) string { return v.ProtectedAccountKeyName }).(pulumi.StringOutput)
}

// The queue endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigOutput) QueueEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfig) string { return v.QueueEndpoint }).(pulumi.StringOutput)
}

// The Azure storage account name.
func (o DiagnosticsStorageAccountConfigOutput) StorageAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfig) string { return v.StorageAccountName }).(pulumi.StringOutput)
}

// The table endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigOutput) TableEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfig) string { return v.TableEndpoint }).(pulumi.StringOutput)
}

type DiagnosticsStorageAccountConfigPtrOutput struct{ *pulumi.OutputState }

func (DiagnosticsStorageAccountConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsStorageAccountConfig)(nil)).Elem()
}

func (o DiagnosticsStorageAccountConfigPtrOutput) ToDiagnosticsStorageAccountConfigPtrOutput() DiagnosticsStorageAccountConfigPtrOutput {
	return o
}

func (o DiagnosticsStorageAccountConfigPtrOutput) ToDiagnosticsStorageAccountConfigPtrOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigPtrOutput {
	return o
}

func (o DiagnosticsStorageAccountConfigPtrOutput) Elem() DiagnosticsStorageAccountConfigOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfig) DiagnosticsStorageAccountConfig {
		if v != nil {
			return *v
		}
		var ret DiagnosticsStorageAccountConfig
		return ret
	}).(DiagnosticsStorageAccountConfigOutput)
}

// The blob endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigPtrOutput) BlobEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfig) *string {
		if v == nil {
			return nil
		}
		return &v.BlobEndpoint
	}).(pulumi.StringPtrOutput)
}

// The protected diagnostics storage key name.
func (o DiagnosticsStorageAccountConfigPtrOutput) ProtectedAccountKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfig) *string {
		if v == nil {
			return nil
		}
		return &v.ProtectedAccountKeyName
	}).(pulumi.StringPtrOutput)
}

// The queue endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigPtrOutput) QueueEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfig) *string {
		if v == nil {
			return nil
		}
		return &v.QueueEndpoint
	}).(pulumi.StringPtrOutput)
}

// The Azure storage account name.
func (o DiagnosticsStorageAccountConfigPtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfig) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// The table endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigPtrOutput) TableEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfig) *string {
		if v == nil {
			return nil
		}
		return &v.TableEndpoint
	}).(pulumi.StringPtrOutput)
}

// The storage account information for storing Service Fabric diagnostic logs.
type DiagnosticsStorageAccountConfigResponse struct {
	// The blob endpoint of the azure storage account.
	BlobEndpoint string `pulumi:"blobEndpoint"`
	// The protected diagnostics storage key name.
	ProtectedAccountKeyName string `pulumi:"protectedAccountKeyName"`
	// The queue endpoint of the azure storage account.
	QueueEndpoint string `pulumi:"queueEndpoint"`
	// The Azure storage account name.
	StorageAccountName string `pulumi:"storageAccountName"`
	// The table endpoint of the azure storage account.
	TableEndpoint string `pulumi:"tableEndpoint"`
}

// The storage account information for storing Service Fabric diagnostic logs.
type DiagnosticsStorageAccountConfigResponseOutput struct{ *pulumi.OutputState }

func (DiagnosticsStorageAccountConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsStorageAccountConfigResponse)(nil)).Elem()
}

func (o DiagnosticsStorageAccountConfigResponseOutput) ToDiagnosticsStorageAccountConfigResponseOutput() DiagnosticsStorageAccountConfigResponseOutput {
	return o
}

func (o DiagnosticsStorageAccountConfigResponseOutput) ToDiagnosticsStorageAccountConfigResponseOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigResponseOutput {
	return o
}

// The blob endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigResponseOutput) BlobEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfigResponse) string { return v.BlobEndpoint }).(pulumi.StringOutput)
}

// The protected diagnostics storage key name.
func (o DiagnosticsStorageAccountConfigResponseOutput) ProtectedAccountKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfigResponse) string { return v.ProtectedAccountKeyName }).(pulumi.StringOutput)
}

// The queue endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigResponseOutput) QueueEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfigResponse) string { return v.QueueEndpoint }).(pulumi.StringOutput)
}

// The Azure storage account name.
func (o DiagnosticsStorageAccountConfigResponseOutput) StorageAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfigResponse) string { return v.StorageAccountName }).(pulumi.StringOutput)
}

// The table endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigResponseOutput) TableEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfigResponse) string { return v.TableEndpoint }).(pulumi.StringOutput)
}

type DiagnosticsStorageAccountConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (DiagnosticsStorageAccountConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsStorageAccountConfigResponse)(nil)).Elem()
}

func (o DiagnosticsStorageAccountConfigResponsePtrOutput) ToDiagnosticsStorageAccountConfigResponsePtrOutput() DiagnosticsStorageAccountConfigResponsePtrOutput {
	return o
}

func (o DiagnosticsStorageAccountConfigResponsePtrOutput) ToDiagnosticsStorageAccountConfigResponsePtrOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigResponsePtrOutput {
	return o
}

func (o DiagnosticsStorageAccountConfigResponsePtrOutput) Elem() DiagnosticsStorageAccountConfigResponseOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfigResponse) DiagnosticsStorageAccountConfigResponse {
		if v != nil {
			return *v
		}
		var ret DiagnosticsStorageAccountConfigResponse
		return ret
	}).(DiagnosticsStorageAccountConfigResponseOutput)
}

// The blob endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigResponsePtrOutput) BlobEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BlobEndpoint
	}).(pulumi.StringPtrOutput)
}

// The protected diagnostics storage key name.
func (o DiagnosticsStorageAccountConfigResponsePtrOutput) ProtectedAccountKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProtectedAccountKeyName
	}).(pulumi.StringPtrOutput)
}

// The queue endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigResponsePtrOutput) QueueEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.QueueEndpoint
	}).(pulumi.StringPtrOutput)
}

// The Azure storage account name.
func (o DiagnosticsStorageAccountConfigResponsePtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// The table endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigResponsePtrOutput) TableEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TableEndpoint
	}).(pulumi.StringPtrOutput)
}

// Port range details
type EndpointRangeDescription struct {
	// End port of a range of ports
	EndPort int `pulumi:"endPort"`
	// Starting port of a range of ports
	StartPort int `pulumi:"startPort"`
}

// EndpointRangeDescriptionInput is an input type that accepts EndpointRangeDescriptionArgs and EndpointRangeDescriptionOutput values.
// You can construct a concrete instance of `EndpointRangeDescriptionInput` via:
//
//	EndpointRangeDescriptionArgs{...}
type EndpointRangeDescriptionInput interface {
	pulumi.Input

	ToEndpointRangeDescriptionOutput() EndpointRangeDescriptionOutput
	ToEndpointRangeDescriptionOutputWithContext(context.Context) EndpointRangeDescriptionOutput
}

// Port range details
type EndpointRangeDescriptionArgs struct {
	// End port of a range of ports
	EndPort pulumi.IntInput `pulumi:"endPort"`
	// Starting port of a range of ports
	StartPort pulumi.IntInput `pulumi:"startPort"`
}

func (EndpointRangeDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointRangeDescription)(nil)).Elem()
}

func (i EndpointRangeDescriptionArgs) ToEndpointRangeDescriptionOutput() EndpointRangeDescriptionOutput {
	return i.ToEndpointRangeDescriptionOutputWithContext(context.Background())
}

func (i EndpointRangeDescriptionArgs) ToEndpointRangeDescriptionOutputWithContext(ctx context.Context) EndpointRangeDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointRangeDescriptionOutput)
}

func (i EndpointRangeDescriptionArgs) ToEndpointRangeDescriptionPtrOutput() EndpointRangeDescriptionPtrOutput {
	return i.ToEndpointRangeDescriptionPtrOutputWithContext(context.Background())
}

func (i EndpointRangeDescriptionArgs) ToEndpointRangeDescriptionPtrOutputWithContext(ctx context.Context) EndpointRangeDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointRangeDescriptionOutput).ToEndpointRangeDescriptionPtrOutputWithContext(ctx)
}

// EndpointRangeDescriptionPtrInput is an input type that accepts EndpointRangeDescriptionArgs, EndpointRangeDescriptionPtr and EndpointRangeDescriptionPtrOutput values.
// You can construct a concrete instance of `EndpointRangeDescriptionPtrInput` via:
//
//	        EndpointRangeDescriptionArgs{...}
//
//	or:
//
//	        nil
type EndpointRangeDescriptionPtrInput interface {
	pulumi.Input

	ToEndpointRangeDescriptionPtrOutput() EndpointRangeDescriptionPtrOutput
	ToEndpointRangeDescriptionPtrOutputWithContext(context.Context) EndpointRangeDescriptionPtrOutput
}

type endpointRangeDescriptionPtrType EndpointRangeDescriptionArgs

func EndpointRangeDescriptionPtr(v *EndpointRangeDescriptionArgs) EndpointRangeDescriptionPtrInput {
	return (*endpointRangeDescriptionPtrType)(v)
}

func (*endpointRangeDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointRangeDescription)(nil)).Elem()
}

func (i *endpointRangeDescriptionPtrType) ToEndpointRangeDescriptionPtrOutput() EndpointRangeDescriptionPtrOutput {
	return i.ToEndpointRangeDescriptionPtrOutputWithContext(context.Background())
}

func (i *endpointRangeDescriptionPtrType) ToEndpointRangeDescriptionPtrOutputWithContext(ctx context.Context) EndpointRangeDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointRangeDescriptionPtrOutput)
}

// Port range details
type EndpointRangeDescriptionOutput struct{ *pulumi.OutputState }

func (EndpointRangeDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointRangeDescription)(nil)).Elem()
}

func (o EndpointRangeDescriptionOutput) ToEndpointRangeDescriptionOutput() EndpointRangeDescriptionOutput {
	return o
}

func (o EndpointRangeDescriptionOutput) ToEndpointRangeDescriptionOutputWithContext(ctx context.Context) EndpointRangeDescriptionOutput {
	return o
}

func (o EndpointRangeDescriptionOutput) ToEndpointRangeDescriptionPtrOutput() EndpointRangeDescriptionPtrOutput {
	return o.ToEndpointRangeDescriptionPtrOutputWithContext(context.Background())
}

func (o EndpointRangeDescriptionOutput) ToEndpointRangeDescriptionPtrOutputWithContext(ctx context.Context) EndpointRangeDescriptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EndpointRangeDescription) *EndpointRangeDescription {
		return &v
	}).(EndpointRangeDescriptionPtrOutput)
}

// End port of a range of ports
func (o EndpointRangeDescriptionOutput) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v EndpointRangeDescription) int { return v.EndPort }).(pulumi.IntOutput)
}

// Starting port of a range of ports
func (o EndpointRangeDescriptionOutput) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v EndpointRangeDescription) int { return v.StartPort }).(pulumi.IntOutput)
}

type EndpointRangeDescriptionPtrOutput struct{ *pulumi.OutputState }

func (EndpointRangeDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointRangeDescription)(nil)).Elem()
}

func (o EndpointRangeDescriptionPtrOutput) ToEndpointRangeDescriptionPtrOutput() EndpointRangeDescriptionPtrOutput {
	return o
}

func (o EndpointRangeDescriptionPtrOutput) ToEndpointRangeDescriptionPtrOutputWithContext(ctx context.Context) EndpointRangeDescriptionPtrOutput {
	return o
}

func (o EndpointRangeDescriptionPtrOutput) Elem() EndpointRangeDescriptionOutput {
	return o.ApplyT(func(v *EndpointRangeDescription) EndpointRangeDescription {
		if v != nil {
			return *v
		}
		var ret EndpointRangeDescription
		return ret
	}).(EndpointRangeDescriptionOutput)
}

// End port of a range of ports
func (o EndpointRangeDescriptionPtrOutput) EndPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointRangeDescription) *int {
		if v == nil {
			return nil
		}
		return &v.EndPort
	}).(pulumi.IntPtrOutput)
}

// Starting port of a range of ports
func (o EndpointRangeDescriptionPtrOutput) StartPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointRangeDescription) *int {
		if v == nil {
			return nil
		}
		return &v.StartPort
	}).(pulumi.IntPtrOutput)
}

// Port range details
type EndpointRangeDescriptionResponse struct {
	// End port of a range of ports
	EndPort int `pulumi:"endPort"`
	// Starting port of a range of ports
	StartPort int `pulumi:"startPort"`
}

// Port range details
type EndpointRangeDescriptionResponseOutput struct{ *pulumi.OutputState }

func (EndpointRangeDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointRangeDescriptionResponse)(nil)).Elem()
}

func (o EndpointRangeDescriptionResponseOutput) ToEndpointRangeDescriptionResponseOutput() EndpointRangeDescriptionResponseOutput {
	return o
}

func (o EndpointRangeDescriptionResponseOutput) ToEndpointRangeDescriptionResponseOutputWithContext(ctx context.Context) EndpointRangeDescriptionResponseOutput {
	return o
}

// End port of a range of ports
func (o EndpointRangeDescriptionResponseOutput) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v EndpointRangeDescriptionResponse) int { return v.EndPort }).(pulumi.IntOutput)
}

// Starting port of a range of ports
func (o EndpointRangeDescriptionResponseOutput) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v EndpointRangeDescriptionResponse) int { return v.StartPort }).(pulumi.IntOutput)
}

type EndpointRangeDescriptionResponsePtrOutput struct{ *pulumi.OutputState }

func (EndpointRangeDescriptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointRangeDescriptionResponse)(nil)).Elem()
}

func (o EndpointRangeDescriptionResponsePtrOutput) ToEndpointRangeDescriptionResponsePtrOutput() EndpointRangeDescriptionResponsePtrOutput {
	return o
}

func (o EndpointRangeDescriptionResponsePtrOutput) ToEndpointRangeDescriptionResponsePtrOutputWithContext(ctx context.Context) EndpointRangeDescriptionResponsePtrOutput {
	return o
}

func (o EndpointRangeDescriptionResponsePtrOutput) Elem() EndpointRangeDescriptionResponseOutput {
	return o.ApplyT(func(v *EndpointRangeDescriptionResponse) EndpointRangeDescriptionResponse {
		if v != nil {
			return *v
		}
		var ret EndpointRangeDescriptionResponse
		return ret
	}).(EndpointRangeDescriptionResponseOutput)
}

// End port of a range of ports
func (o EndpointRangeDescriptionResponsePtrOutput) EndPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointRangeDescriptionResponse) *int {
		if v == nil {
			return nil
		}
		return &v.EndPort
	}).(pulumi.IntPtrOutput)
}

// Starting port of a range of ports
func (o EndpointRangeDescriptionResponsePtrOutput) StartPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointRangeDescriptionResponse) *int {
		if v == nil {
			return nil
		}
		return &v.StartPort
	}).(pulumi.IntPtrOutput)
}

// Describes the named partition scheme of the service.
type NamedPartitionSchemeDescription struct {
	// The number of partitions.
	Count int `pulumi:"count"`
	// Array of size specified by the ‘Count’ parameter, for the names of the partitions.
	Names []string `pulumi:"names"`
	// Enumerates the ways that a service can be partitioned.
	// Expected value is 'Named'.
	PartitionScheme string `pulumi:"partitionScheme"`
}

// Describes the named partition scheme of the service.
type NamedPartitionSchemeDescriptionResponse struct {
	// The number of partitions.
	Count int `pulumi:"count"`
	// Array of size specified by the ‘Count’ parameter, for the names of the partitions.
	Names []string `pulumi:"names"`
	// Enumerates the ways that a service can be partitioned.
	// Expected value is 'Named'.
	PartitionScheme string `pulumi:"partitionScheme"`
}

// Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
type NodeTypeDescription struct {
	// The range of ports from which cluster assigned port to Service Fabric applications.
	ApplicationPorts *EndpointRangeDescription `pulumi:"applicationPorts"`
	// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
	Capacities map[string]string `pulumi:"capacities"`
	// The TCP cluster management endpoint port.
	ClientConnectionEndpointPort int `pulumi:"clientConnectionEndpointPort"`
	// The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
	//
	//   - Bronze - No privileges. This is the default.
	//   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
	//   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
	DurabilityLevel *string `pulumi:"durabilityLevel"`
	// The range of ephemeral ports that nodes in this node type should be configured with.
	EphemeralPorts *EndpointRangeDescription `pulumi:"ephemeralPorts"`
	// The HTTP cluster management endpoint port.
	HttpGatewayEndpointPort int `pulumi:"httpGatewayEndpointPort"`
	// The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
	IsPrimary bool `pulumi:"isPrimary"`
	// The name of the node type.
	Name string `pulumi:"name"`
	// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
	PlacementProperties map[string]string `pulumi:"placementProperties"`
	// The endpoint used by reverse proxy.
	ReverseProxyEndpointPort *int `pulumi:"reverseProxyEndpointPort"`
	// The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
	VmInstanceCount int `pulumi:"vmInstanceCount"`
}

// NodeTypeDescriptionInput is an input type that accepts NodeTypeDescriptionArgs and NodeTypeDescriptionOutput values.
// You can construct a concrete instance of `NodeTypeDescriptionInput` via:
//
//	NodeTypeDescriptionArgs{...}
type NodeTypeDescriptionInput interface {
	pulumi.Input

	ToNodeTypeDescriptionOutput() NodeTypeDescriptionOutput
	ToNodeTypeDescriptionOutputWithContext(context.Context) NodeTypeDescriptionOutput
}

// Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
type NodeTypeDescriptionArgs struct {
	// The range of ports from which cluster assigned port to Service Fabric applications.
	ApplicationPorts EndpointRangeDescriptionPtrInput `pulumi:"applicationPorts"`
	// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
	Capacities pulumi.StringMapInput `pulumi:"capacities"`
	// The TCP cluster management endpoint port.
	ClientConnectionEndpointPort pulumi.IntInput `pulumi:"clientConnectionEndpointPort"`
	// The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
	//
	//   - Bronze - No privileges. This is the default.
	//   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
	//   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
	DurabilityLevel pulumi.StringPtrInput `pulumi:"durabilityLevel"`
	// The range of ephemeral ports that nodes in this node type should be configured with.
	EphemeralPorts EndpointRangeDescriptionPtrInput `pulumi:"ephemeralPorts"`
	// The HTTP cluster management endpoint port.
	HttpGatewayEndpointPort pulumi.IntInput `pulumi:"httpGatewayEndpointPort"`
	// The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
	IsPrimary pulumi.BoolInput `pulumi:"isPrimary"`
	// The name of the node type.
	Name pulumi.StringInput `pulumi:"name"`
	// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
	PlacementProperties pulumi.StringMapInput `pulumi:"placementProperties"`
	// The endpoint used by reverse proxy.
	ReverseProxyEndpointPort pulumi.IntPtrInput `pulumi:"reverseProxyEndpointPort"`
	// The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
	VmInstanceCount pulumi.IntInput `pulumi:"vmInstanceCount"`
}

func (NodeTypeDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTypeDescription)(nil)).Elem()
}

func (i NodeTypeDescriptionArgs) ToNodeTypeDescriptionOutput() NodeTypeDescriptionOutput {
	return i.ToNodeTypeDescriptionOutputWithContext(context.Background())
}

func (i NodeTypeDescriptionArgs) ToNodeTypeDescriptionOutputWithContext(ctx context.Context) NodeTypeDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTypeDescriptionOutput)
}

// NodeTypeDescriptionArrayInput is an input type that accepts NodeTypeDescriptionArray and NodeTypeDescriptionArrayOutput values.
// You can construct a concrete instance of `NodeTypeDescriptionArrayInput` via:
//
//	NodeTypeDescriptionArray{ NodeTypeDescriptionArgs{...} }
type NodeTypeDescriptionArrayInput interface {
	pulumi.Input

	ToNodeTypeDescriptionArrayOutput() NodeTypeDescriptionArrayOutput
	ToNodeTypeDescriptionArrayOutputWithContext(context.Context) NodeTypeDescriptionArrayOutput
}

type NodeTypeDescriptionArray []NodeTypeDescriptionInput

func (NodeTypeDescriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTypeDescription)(nil)).Elem()
}

func (i NodeTypeDescriptionArray) ToNodeTypeDescriptionArrayOutput() NodeTypeDescriptionArrayOutput {
	return i.ToNodeTypeDescriptionArrayOutputWithContext(context.Background())
}

func (i NodeTypeDescriptionArray) ToNodeTypeDescriptionArrayOutputWithContext(ctx context.Context) NodeTypeDescriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTypeDescriptionArrayOutput)
}

// Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
type NodeTypeDescriptionOutput struct{ *pulumi.OutputState }

func (NodeTypeDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTypeDescription)(nil)).Elem()
}

func (o NodeTypeDescriptionOutput) ToNodeTypeDescriptionOutput() NodeTypeDescriptionOutput {
	return o
}

func (o NodeTypeDescriptionOutput) ToNodeTypeDescriptionOutputWithContext(ctx context.Context) NodeTypeDescriptionOutput {
	return o
}

// The range of ports from which cluster assigned port to Service Fabric applications.
func (o NodeTypeDescriptionOutput) ApplicationPorts() EndpointRangeDescriptionPtrOutput {
	return o.ApplyT(func(v NodeTypeDescription) *EndpointRangeDescription { return v.ApplicationPorts }).(EndpointRangeDescriptionPtrOutput)
}

// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
func (o NodeTypeDescriptionOutput) Capacities() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeTypeDescription) map[string]string { return v.Capacities }).(pulumi.StringMapOutput)
}

// The TCP cluster management endpoint port.
func (o NodeTypeDescriptionOutput) ClientConnectionEndpointPort() pulumi.IntOutput {
	return o.ApplyT(func(v NodeTypeDescription) int { return v.ClientConnectionEndpointPort }).(pulumi.IntOutput)
}

// The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
//
//   - Bronze - No privileges. This is the default.
//   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
//   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
func (o NodeTypeDescriptionOutput) DurabilityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTypeDescription) *string { return v.DurabilityLevel }).(pulumi.StringPtrOutput)
}

// The range of ephemeral ports that nodes in this node type should be configured with.
func (o NodeTypeDescriptionOutput) EphemeralPorts() EndpointRangeDescriptionPtrOutput {
	return o.ApplyT(func(v NodeTypeDescription) *EndpointRangeDescription { return v.EphemeralPorts }).(EndpointRangeDescriptionPtrOutput)
}

// The HTTP cluster management endpoint port.
func (o NodeTypeDescriptionOutput) HttpGatewayEndpointPort() pulumi.IntOutput {
	return o.ApplyT(func(v NodeTypeDescription) int { return v.HttpGatewayEndpointPort }).(pulumi.IntOutput)
}

// The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
func (o NodeTypeDescriptionOutput) IsPrimary() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeTypeDescription) bool { return v.IsPrimary }).(pulumi.BoolOutput)
}

// The name of the node type.
func (o NodeTypeDescriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTypeDescription) string { return v.Name }).(pulumi.StringOutput)
}

// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
func (o NodeTypeDescriptionOutput) PlacementProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeTypeDescription) map[string]string { return v.PlacementProperties }).(pulumi.StringMapOutput)
}

// The endpoint used by reverse proxy.
func (o NodeTypeDescriptionOutput) ReverseProxyEndpointPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeTypeDescription) *int { return v.ReverseProxyEndpointPort }).(pulumi.IntPtrOutput)
}

// The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
func (o NodeTypeDescriptionOutput) VmInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeTypeDescription) int { return v.VmInstanceCount }).(pulumi.IntOutput)
}

type NodeTypeDescriptionArrayOutput struct{ *pulumi.OutputState }

func (NodeTypeDescriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTypeDescription)(nil)).Elem()
}

func (o NodeTypeDescriptionArrayOutput) ToNodeTypeDescriptionArrayOutput() NodeTypeDescriptionArrayOutput {
	return o
}

func (o NodeTypeDescriptionArrayOutput) ToNodeTypeDescriptionArrayOutputWithContext(ctx context.Context) NodeTypeDescriptionArrayOutput {
	return o
}

func (o NodeTypeDescriptionArrayOutput) Index(i pulumi.IntInput) NodeTypeDescriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeTypeDescription {
		return vs[0].([]NodeTypeDescription)[vs[1].(int)]
	}).(NodeTypeDescriptionOutput)
}

// Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
type NodeTypeDescriptionResponse struct {
	// The range of ports from which cluster assigned port to Service Fabric applications.
	ApplicationPorts *EndpointRangeDescriptionResponse `pulumi:"applicationPorts"`
	// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
	Capacities map[string]string `pulumi:"capacities"`
	// The TCP cluster management endpoint port.
	ClientConnectionEndpointPort int `pulumi:"clientConnectionEndpointPort"`
	// The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
	//
	//   - Bronze - No privileges. This is the default.
	//   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
	//   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
	DurabilityLevel *string `pulumi:"durabilityLevel"`
	// The range of ephemeral ports that nodes in this node type should be configured with.
	EphemeralPorts *EndpointRangeDescriptionResponse `pulumi:"ephemeralPorts"`
	// The HTTP cluster management endpoint port.
	HttpGatewayEndpointPort int `pulumi:"httpGatewayEndpointPort"`
	// The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
	IsPrimary bool `pulumi:"isPrimary"`
	// The name of the node type.
	Name string `pulumi:"name"`
	// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
	PlacementProperties map[string]string `pulumi:"placementProperties"`
	// The endpoint used by reverse proxy.
	ReverseProxyEndpointPort *int `pulumi:"reverseProxyEndpointPort"`
	// The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
	VmInstanceCount int `pulumi:"vmInstanceCount"`
}

// Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
type NodeTypeDescriptionResponseOutput struct{ *pulumi.OutputState }

func (NodeTypeDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTypeDescriptionResponse)(nil)).Elem()
}

func (o NodeTypeDescriptionResponseOutput) ToNodeTypeDescriptionResponseOutput() NodeTypeDescriptionResponseOutput {
	return o
}

func (o NodeTypeDescriptionResponseOutput) ToNodeTypeDescriptionResponseOutputWithContext(ctx context.Context) NodeTypeDescriptionResponseOutput {
	return o
}

// The range of ports from which cluster assigned port to Service Fabric applications.
func (o NodeTypeDescriptionResponseOutput) ApplicationPorts() EndpointRangeDescriptionResponsePtrOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) *EndpointRangeDescriptionResponse { return v.ApplicationPorts }).(EndpointRangeDescriptionResponsePtrOutput)
}

// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
func (o NodeTypeDescriptionResponseOutput) Capacities() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) map[string]string { return v.Capacities }).(pulumi.StringMapOutput)
}

// The TCP cluster management endpoint port.
func (o NodeTypeDescriptionResponseOutput) ClientConnectionEndpointPort() pulumi.IntOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) int { return v.ClientConnectionEndpointPort }).(pulumi.IntOutput)
}

// The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
//
//   - Bronze - No privileges. This is the default.
//   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
//   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
func (o NodeTypeDescriptionResponseOutput) DurabilityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) *string { return v.DurabilityLevel }).(pulumi.StringPtrOutput)
}

// The range of ephemeral ports that nodes in this node type should be configured with.
func (o NodeTypeDescriptionResponseOutput) EphemeralPorts() EndpointRangeDescriptionResponsePtrOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) *EndpointRangeDescriptionResponse { return v.EphemeralPorts }).(EndpointRangeDescriptionResponsePtrOutput)
}

// The HTTP cluster management endpoint port.
func (o NodeTypeDescriptionResponseOutput) HttpGatewayEndpointPort() pulumi.IntOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) int { return v.HttpGatewayEndpointPort }).(pulumi.IntOutput)
}

// The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
func (o NodeTypeDescriptionResponseOutput) IsPrimary() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) bool { return v.IsPrimary }).(pulumi.BoolOutput)
}

// The name of the node type.
func (o NodeTypeDescriptionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
func (o NodeTypeDescriptionResponseOutput) PlacementProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) map[string]string { return v.PlacementProperties }).(pulumi.StringMapOutput)
}

// The endpoint used by reverse proxy.
func (o NodeTypeDescriptionResponseOutput) ReverseProxyEndpointPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) *int { return v.ReverseProxyEndpointPort }).(pulumi.IntPtrOutput)
}

// The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
func (o NodeTypeDescriptionResponseOutput) VmInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) int { return v.VmInstanceCount }).(pulumi.IntOutput)
}

type NodeTypeDescriptionResponseArrayOutput struct{ *pulumi.OutputState }

func (NodeTypeDescriptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTypeDescriptionResponse)(nil)).Elem()
}

func (o NodeTypeDescriptionResponseArrayOutput) ToNodeTypeDescriptionResponseArrayOutput() NodeTypeDescriptionResponseArrayOutput {
	return o
}

func (o NodeTypeDescriptionResponseArrayOutput) ToNodeTypeDescriptionResponseArrayOutputWithContext(ctx context.Context) NodeTypeDescriptionResponseArrayOutput {
	return o
}

func (o NodeTypeDescriptionResponseArrayOutput) Index(i pulumi.IntInput) NodeTypeDescriptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeTypeDescriptionResponse {
		return vs[0].([]NodeTypeDescriptionResponse)[vs[1].(int)]
	}).(NodeTypeDescriptionResponseOutput)
}

// Describes the server certificate details using common name.
type ServerCertificateCommonName struct {
	// The common name of the server certificate.
	CertificateCommonName string `pulumi:"certificateCommonName"`
	// The issuer thumbprint of the server certificate.
	CertificateIssuerThumbprint string `pulumi:"certificateIssuerThumbprint"`
}

// ServerCertificateCommonNameInput is an input type that accepts ServerCertificateCommonNameArgs and ServerCertificateCommonNameOutput values.
// You can construct a concrete instance of `ServerCertificateCommonNameInput` via:
//
//	ServerCertificateCommonNameArgs{...}
type ServerCertificateCommonNameInput interface {
	pulumi.Input

	ToServerCertificateCommonNameOutput() ServerCertificateCommonNameOutput
	ToServerCertificateCommonNameOutputWithContext(context.Context) ServerCertificateCommonNameOutput
}

// Describes the server certificate details using common name.
type ServerCertificateCommonNameArgs struct {
	// The common name of the server certificate.
	CertificateCommonName pulumi.StringInput `pulumi:"certificateCommonName"`
	// The issuer thumbprint of the server certificate.
	CertificateIssuerThumbprint pulumi.StringInput `pulumi:"certificateIssuerThumbprint"`
}

func (ServerCertificateCommonNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCertificateCommonName)(nil)).Elem()
}

func (i ServerCertificateCommonNameArgs) ToServerCertificateCommonNameOutput() ServerCertificateCommonNameOutput {
	return i.ToServerCertificateCommonNameOutputWithContext(context.Background())
}

func (i ServerCertificateCommonNameArgs) ToServerCertificateCommonNameOutputWithContext(ctx context.Context) ServerCertificateCommonNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateCommonNameOutput)
}

// ServerCertificateCommonNameArrayInput is an input type that accepts ServerCertificateCommonNameArray and ServerCertificateCommonNameArrayOutput values.
// You can construct a concrete instance of `ServerCertificateCommonNameArrayInput` via:
//
//	ServerCertificateCommonNameArray{ ServerCertificateCommonNameArgs{...} }
type ServerCertificateCommonNameArrayInput interface {
	pulumi.Input

	ToServerCertificateCommonNameArrayOutput() ServerCertificateCommonNameArrayOutput
	ToServerCertificateCommonNameArrayOutputWithContext(context.Context) ServerCertificateCommonNameArrayOutput
}

type ServerCertificateCommonNameArray []ServerCertificateCommonNameInput

func (ServerCertificateCommonNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerCertificateCommonName)(nil)).Elem()
}

func (i ServerCertificateCommonNameArray) ToServerCertificateCommonNameArrayOutput() ServerCertificateCommonNameArrayOutput {
	return i.ToServerCertificateCommonNameArrayOutputWithContext(context.Background())
}

func (i ServerCertificateCommonNameArray) ToServerCertificateCommonNameArrayOutputWithContext(ctx context.Context) ServerCertificateCommonNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateCommonNameArrayOutput)
}

// Describes the server certificate details using common name.
type ServerCertificateCommonNameOutput struct{ *pulumi.OutputState }

func (ServerCertificateCommonNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCertificateCommonName)(nil)).Elem()
}

func (o ServerCertificateCommonNameOutput) ToServerCertificateCommonNameOutput() ServerCertificateCommonNameOutput {
	return o
}

func (o ServerCertificateCommonNameOutput) ToServerCertificateCommonNameOutputWithContext(ctx context.Context) ServerCertificateCommonNameOutput {
	return o
}

// The common name of the server certificate.
func (o ServerCertificateCommonNameOutput) CertificateCommonName() pulumi.StringOutput {
	return o.ApplyT(func(v ServerCertificateCommonName) string { return v.CertificateCommonName }).(pulumi.StringOutput)
}

// The issuer thumbprint of the server certificate.
func (o ServerCertificateCommonNameOutput) CertificateIssuerThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ServerCertificateCommonName) string { return v.CertificateIssuerThumbprint }).(pulumi.StringOutput)
}

type ServerCertificateCommonNameArrayOutput struct{ *pulumi.OutputState }

func (ServerCertificateCommonNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerCertificateCommonName)(nil)).Elem()
}

func (o ServerCertificateCommonNameArrayOutput) ToServerCertificateCommonNameArrayOutput() ServerCertificateCommonNameArrayOutput {
	return o
}

func (o ServerCertificateCommonNameArrayOutput) ToServerCertificateCommonNameArrayOutputWithContext(ctx context.Context) ServerCertificateCommonNameArrayOutput {
	return o
}

func (o ServerCertificateCommonNameArrayOutput) Index(i pulumi.IntInput) ServerCertificateCommonNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerCertificateCommonName {
		return vs[0].([]ServerCertificateCommonName)[vs[1].(int)]
	}).(ServerCertificateCommonNameOutput)
}

// Describes the server certificate details using common name.
type ServerCertificateCommonNameResponse struct {
	// The common name of the server certificate.
	CertificateCommonName string `pulumi:"certificateCommonName"`
	// The issuer thumbprint of the server certificate.
	CertificateIssuerThumbprint string `pulumi:"certificateIssuerThumbprint"`
}

// Describes the server certificate details using common name.
type ServerCertificateCommonNameResponseOutput struct{ *pulumi.OutputState }

func (ServerCertificateCommonNameResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCertificateCommonNameResponse)(nil)).Elem()
}

func (o ServerCertificateCommonNameResponseOutput) ToServerCertificateCommonNameResponseOutput() ServerCertificateCommonNameResponseOutput {
	return o
}

func (o ServerCertificateCommonNameResponseOutput) ToServerCertificateCommonNameResponseOutputWithContext(ctx context.Context) ServerCertificateCommonNameResponseOutput {
	return o
}

// The common name of the server certificate.
func (o ServerCertificateCommonNameResponseOutput) CertificateCommonName() pulumi.StringOutput {
	return o.ApplyT(func(v ServerCertificateCommonNameResponse) string { return v.CertificateCommonName }).(pulumi.StringOutput)
}

// The issuer thumbprint of the server certificate.
func (o ServerCertificateCommonNameResponseOutput) CertificateIssuerThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ServerCertificateCommonNameResponse) string { return v.CertificateIssuerThumbprint }).(pulumi.StringOutput)
}

type ServerCertificateCommonNameResponseArrayOutput struct{ *pulumi.OutputState }

func (ServerCertificateCommonNameResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerCertificateCommonNameResponse)(nil)).Elem()
}

func (o ServerCertificateCommonNameResponseArrayOutput) ToServerCertificateCommonNameResponseArrayOutput() ServerCertificateCommonNameResponseArrayOutput {
	return o
}

func (o ServerCertificateCommonNameResponseArrayOutput) ToServerCertificateCommonNameResponseArrayOutputWithContext(ctx context.Context) ServerCertificateCommonNameResponseArrayOutput {
	return o
}

func (o ServerCertificateCommonNameResponseArrayOutput) Index(i pulumi.IntInput) ServerCertificateCommonNameResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerCertificateCommonNameResponse {
		return vs[0].([]ServerCertificateCommonNameResponse)[vs[1].(int)]
	}).(ServerCertificateCommonNameResponseOutput)
}

// Describes a list of server certificates referenced by common name that are used to secure the cluster.
type ServerCertificateCommonNames struct {
	// The list of server certificates referenced by common name that are used to secure the cluster.
	CommonNames []ServerCertificateCommonName `pulumi:"commonNames"`
	// The local certificate store location.
	X509StoreName *string `pulumi:"x509StoreName"`
}

// ServerCertificateCommonNamesInput is an input type that accepts ServerCertificateCommonNamesArgs and ServerCertificateCommonNamesOutput values.
// You can construct a concrete instance of `ServerCertificateCommonNamesInput` via:
//
//	ServerCertificateCommonNamesArgs{...}
type ServerCertificateCommonNamesInput interface {
	pulumi.Input

	ToServerCertificateCommonNamesOutput() ServerCertificateCommonNamesOutput
	ToServerCertificateCommonNamesOutputWithContext(context.Context) ServerCertificateCommonNamesOutput
}

// Describes a list of server certificates referenced by common name that are used to secure the cluster.
type ServerCertificateCommonNamesArgs struct {
	// The list of server certificates referenced by common name that are used to secure the cluster.
	CommonNames ServerCertificateCommonNameArrayInput `pulumi:"commonNames"`
	// The local certificate store location.
	X509StoreName pulumi.StringPtrInput `pulumi:"x509StoreName"`
}

func (ServerCertificateCommonNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCertificateCommonNames)(nil)).Elem()
}

func (i ServerCertificateCommonNamesArgs) ToServerCertificateCommonNamesOutput() ServerCertificateCommonNamesOutput {
	return i.ToServerCertificateCommonNamesOutputWithContext(context.Background())
}

func (i ServerCertificateCommonNamesArgs) ToServerCertificateCommonNamesOutputWithContext(ctx context.Context) ServerCertificateCommonNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateCommonNamesOutput)
}

func (i ServerCertificateCommonNamesArgs) ToServerCertificateCommonNamesPtrOutput() ServerCertificateCommonNamesPtrOutput {
	return i.ToServerCertificateCommonNamesPtrOutputWithContext(context.Background())
}

func (i ServerCertificateCommonNamesArgs) ToServerCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ServerCertificateCommonNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateCommonNamesOutput).ToServerCertificateCommonNamesPtrOutputWithContext(ctx)
}

// ServerCertificateCommonNamesPtrInput is an input type that accepts ServerCertificateCommonNamesArgs, ServerCertificateCommonNamesPtr and ServerCertificateCommonNamesPtrOutput values.
// You can construct a concrete instance of `ServerCertificateCommonNamesPtrInput` via:
//
//	        ServerCertificateCommonNamesArgs{...}
//
//	or:
//
//	        nil
type ServerCertificateCommonNamesPtrInput interface {
	pulumi.Input

	ToServerCertificateCommonNamesPtrOutput() ServerCertificateCommonNamesPtrOutput
	ToServerCertificateCommonNamesPtrOutputWithContext(context.Context) ServerCertificateCommonNamesPtrOutput
}

type serverCertificateCommonNamesPtrType ServerCertificateCommonNamesArgs

func ServerCertificateCommonNamesPtr(v *ServerCertificateCommonNamesArgs) ServerCertificateCommonNamesPtrInput {
	return (*serverCertificateCommonNamesPtrType)(v)
}

func (*serverCertificateCommonNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerCertificateCommonNames)(nil)).Elem()
}

func (i *serverCertificateCommonNamesPtrType) ToServerCertificateCommonNamesPtrOutput() ServerCertificateCommonNamesPtrOutput {
	return i.ToServerCertificateCommonNamesPtrOutputWithContext(context.Background())
}

func (i *serverCertificateCommonNamesPtrType) ToServerCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ServerCertificateCommonNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateCommonNamesPtrOutput)
}

// Describes a list of server certificates referenced by common name that are used to secure the cluster.
type ServerCertificateCommonNamesOutput struct{ *pulumi.OutputState }

func (ServerCertificateCommonNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCertificateCommonNames)(nil)).Elem()
}

func (o ServerCertificateCommonNamesOutput) ToServerCertificateCommonNamesOutput() ServerCertificateCommonNamesOutput {
	return o
}

func (o ServerCertificateCommonNamesOutput) ToServerCertificateCommonNamesOutputWithContext(ctx context.Context) ServerCertificateCommonNamesOutput {
	return o
}

func (o ServerCertificateCommonNamesOutput) ToServerCertificateCommonNamesPtrOutput() ServerCertificateCommonNamesPtrOutput {
	return o.ToServerCertificateCommonNamesPtrOutputWithContext(context.Background())
}

func (o ServerCertificateCommonNamesOutput) ToServerCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ServerCertificateCommonNamesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerCertificateCommonNames) *ServerCertificateCommonNames {
		return &v
	}).(ServerCertificateCommonNamesPtrOutput)
}

// The list of server certificates referenced by common name that are used to secure the cluster.
func (o ServerCertificateCommonNamesOutput) CommonNames() ServerCertificateCommonNameArrayOutput {
	return o.ApplyT(func(v ServerCertificateCommonNames) []ServerCertificateCommonName { return v.CommonNames }).(ServerCertificateCommonNameArrayOutput)
}

// The local certificate store location.
func (o ServerCertificateCommonNamesOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerCertificateCommonNames) *string { return v.X509StoreName }).(pulumi.StringPtrOutput)
}

type ServerCertificateCommonNamesPtrOutput struct{ *pulumi.OutputState }

func (ServerCertificateCommonNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerCertificateCommonNames)(nil)).Elem()
}

func (o ServerCertificateCommonNamesPtrOutput) ToServerCertificateCommonNamesPtrOutput() ServerCertificateCommonNamesPtrOutput {
	return o
}

func (o ServerCertificateCommonNamesPtrOutput) ToServerCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ServerCertificateCommonNamesPtrOutput {
	return o
}

func (o ServerCertificateCommonNamesPtrOutput) Elem() ServerCertificateCommonNamesOutput {
	return o.ApplyT(func(v *ServerCertificateCommonNames) ServerCertificateCommonNames {
		if v != nil {
			return *v
		}
		var ret ServerCertificateCommonNames
		return ret
	}).(ServerCertificateCommonNamesOutput)
}

// The list of server certificates referenced by common name that are used to secure the cluster.
func (o ServerCertificateCommonNamesPtrOutput) CommonNames() ServerCertificateCommonNameArrayOutput {
	return o.ApplyT(func(v *ServerCertificateCommonNames) []ServerCertificateCommonName {
		if v == nil {
			return nil
		}
		return v.CommonNames
	}).(ServerCertificateCommonNameArrayOutput)
}

// The local certificate store location.
func (o ServerCertificateCommonNamesPtrOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerCertificateCommonNames) *string {
		if v == nil {
			return nil
		}
		return v.X509StoreName
	}).(pulumi.StringPtrOutput)
}

// Describes a list of server certificates referenced by common name that are used to secure the cluster.
type ServerCertificateCommonNamesResponse struct {
	// The list of server certificates referenced by common name that are used to secure the cluster.
	CommonNames []ServerCertificateCommonNameResponse `pulumi:"commonNames"`
	// The local certificate store location.
	X509StoreName *string `pulumi:"x509StoreName"`
}

// Describes a list of server certificates referenced by common name that are used to secure the cluster.
type ServerCertificateCommonNamesResponseOutput struct{ *pulumi.OutputState }

func (ServerCertificateCommonNamesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCertificateCommonNamesResponse)(nil)).Elem()
}

func (o ServerCertificateCommonNamesResponseOutput) ToServerCertificateCommonNamesResponseOutput() ServerCertificateCommonNamesResponseOutput {
	return o
}

func (o ServerCertificateCommonNamesResponseOutput) ToServerCertificateCommonNamesResponseOutputWithContext(ctx context.Context) ServerCertificateCommonNamesResponseOutput {
	return o
}

// The list of server certificates referenced by common name that are used to secure the cluster.
func (o ServerCertificateCommonNamesResponseOutput) CommonNames() ServerCertificateCommonNameResponseArrayOutput {
	return o.ApplyT(func(v ServerCertificateCommonNamesResponse) []ServerCertificateCommonNameResponse {
		return v.CommonNames
	}).(ServerCertificateCommonNameResponseArrayOutput)
}

// The local certificate store location.
func (o ServerCertificateCommonNamesResponseOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerCertificateCommonNamesResponse) *string { return v.X509StoreName }).(pulumi.StringPtrOutput)
}

type ServerCertificateCommonNamesResponsePtrOutput struct{ *pulumi.OutputState }

func (ServerCertificateCommonNamesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerCertificateCommonNamesResponse)(nil)).Elem()
}

func (o ServerCertificateCommonNamesResponsePtrOutput) ToServerCertificateCommonNamesResponsePtrOutput() ServerCertificateCommonNamesResponsePtrOutput {
	return o
}

func (o ServerCertificateCommonNamesResponsePtrOutput) ToServerCertificateCommonNamesResponsePtrOutputWithContext(ctx context.Context) ServerCertificateCommonNamesResponsePtrOutput {
	return o
}

func (o ServerCertificateCommonNamesResponsePtrOutput) Elem() ServerCertificateCommonNamesResponseOutput {
	return o.ApplyT(func(v *ServerCertificateCommonNamesResponse) ServerCertificateCommonNamesResponse {
		if v != nil {
			return *v
		}
		var ret ServerCertificateCommonNamesResponse
		return ret
	}).(ServerCertificateCommonNamesResponseOutput)
}

// The list of server certificates referenced by common name that are used to secure the cluster.
func (o ServerCertificateCommonNamesResponsePtrOutput) CommonNames() ServerCertificateCommonNameResponseArrayOutput {
	return o.ApplyT(func(v *ServerCertificateCommonNamesResponse) []ServerCertificateCommonNameResponse {
		if v == nil {
			return nil
		}
		return v.CommonNames
	}).(ServerCertificateCommonNameResponseArrayOutput)
}

// The local certificate store location.
func (o ServerCertificateCommonNamesResponsePtrOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerCertificateCommonNamesResponse) *string {
		if v == nil {
			return nil
		}
		return v.X509StoreName
	}).(pulumi.StringPtrOutput)
}

// Creates a particular correlation between services.
type ServiceCorrelationDescription struct {
	// The ServiceCorrelationScheme which describes the relationship between this service and the service specified via ServiceName.
	Scheme string `pulumi:"scheme"`
	// The name of the service that the correlation relationship is established with.
	ServiceName string `pulumi:"serviceName"`
}

// ServiceCorrelationDescriptionInput is an input type that accepts ServiceCorrelationDescriptionArgs and ServiceCorrelationDescriptionOutput values.
// You can construct a concrete instance of `ServiceCorrelationDescriptionInput` via:
//
//	ServiceCorrelationDescriptionArgs{...}
type ServiceCorrelationDescriptionInput interface {
	pulumi.Input

	ToServiceCorrelationDescriptionOutput() ServiceCorrelationDescriptionOutput
	ToServiceCorrelationDescriptionOutputWithContext(context.Context) ServiceCorrelationDescriptionOutput
}

// Creates a particular correlation between services.
type ServiceCorrelationDescriptionArgs struct {
	// The ServiceCorrelationScheme which describes the relationship between this service and the service specified via ServiceName.
	Scheme pulumi.StringInput `pulumi:"scheme"`
	// The name of the service that the correlation relationship is established with.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (ServiceCorrelationDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCorrelationDescription)(nil)).Elem()
}

func (i ServiceCorrelationDescriptionArgs) ToServiceCorrelationDescriptionOutput() ServiceCorrelationDescriptionOutput {
	return i.ToServiceCorrelationDescriptionOutputWithContext(context.Background())
}

func (i ServiceCorrelationDescriptionArgs) ToServiceCorrelationDescriptionOutputWithContext(ctx context.Context) ServiceCorrelationDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCorrelationDescriptionOutput)
}

// ServiceCorrelationDescriptionArrayInput is an input type that accepts ServiceCorrelationDescriptionArray and ServiceCorrelationDescriptionArrayOutput values.
// You can construct a concrete instance of `ServiceCorrelationDescriptionArrayInput` via:
//
//	ServiceCorrelationDescriptionArray{ ServiceCorrelationDescriptionArgs{...} }
type ServiceCorrelationDescriptionArrayInput interface {
	pulumi.Input

	ToServiceCorrelationDescriptionArrayOutput() ServiceCorrelationDescriptionArrayOutput
	ToServiceCorrelationDescriptionArrayOutputWithContext(context.Context) ServiceCorrelationDescriptionArrayOutput
}

type ServiceCorrelationDescriptionArray []ServiceCorrelationDescriptionInput

func (ServiceCorrelationDescriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceCorrelationDescription)(nil)).Elem()
}

func (i ServiceCorrelationDescriptionArray) ToServiceCorrelationDescriptionArrayOutput() ServiceCorrelationDescriptionArrayOutput {
	return i.ToServiceCorrelationDescriptionArrayOutputWithContext(context.Background())
}

func (i ServiceCorrelationDescriptionArray) ToServiceCorrelationDescriptionArrayOutputWithContext(ctx context.Context) ServiceCorrelationDescriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceCorrelationDescriptionArrayOutput)
}

// Creates a particular correlation between services.
type ServiceCorrelationDescriptionOutput struct{ *pulumi.OutputState }

func (ServiceCorrelationDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCorrelationDescription)(nil)).Elem()
}

func (o ServiceCorrelationDescriptionOutput) ToServiceCorrelationDescriptionOutput() ServiceCorrelationDescriptionOutput {
	return o
}

func (o ServiceCorrelationDescriptionOutput) ToServiceCorrelationDescriptionOutputWithContext(ctx context.Context) ServiceCorrelationDescriptionOutput {
	return o
}

// The ServiceCorrelationScheme which describes the relationship between this service and the service specified via ServiceName.
func (o ServiceCorrelationDescriptionOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceCorrelationDescription) string { return v.Scheme }).(pulumi.StringOutput)
}

// The name of the service that the correlation relationship is established with.
func (o ServiceCorrelationDescriptionOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceCorrelationDescription) string { return v.ServiceName }).(pulumi.StringOutput)
}

type ServiceCorrelationDescriptionArrayOutput struct{ *pulumi.OutputState }

func (ServiceCorrelationDescriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceCorrelationDescription)(nil)).Elem()
}

func (o ServiceCorrelationDescriptionArrayOutput) ToServiceCorrelationDescriptionArrayOutput() ServiceCorrelationDescriptionArrayOutput {
	return o
}

func (o ServiceCorrelationDescriptionArrayOutput) ToServiceCorrelationDescriptionArrayOutputWithContext(ctx context.Context) ServiceCorrelationDescriptionArrayOutput {
	return o
}

func (o ServiceCorrelationDescriptionArrayOutput) Index(i pulumi.IntInput) ServiceCorrelationDescriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceCorrelationDescription {
		return vs[0].([]ServiceCorrelationDescription)[vs[1].(int)]
	}).(ServiceCorrelationDescriptionOutput)
}

// Creates a particular correlation between services.
type ServiceCorrelationDescriptionResponse struct {
	// The ServiceCorrelationScheme which describes the relationship between this service and the service specified via ServiceName.
	Scheme string `pulumi:"scheme"`
	// The name of the service that the correlation relationship is established with.
	ServiceName string `pulumi:"serviceName"`
}

// Creates a particular correlation between services.
type ServiceCorrelationDescriptionResponseOutput struct{ *pulumi.OutputState }

func (ServiceCorrelationDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCorrelationDescriptionResponse)(nil)).Elem()
}

func (o ServiceCorrelationDescriptionResponseOutput) ToServiceCorrelationDescriptionResponseOutput() ServiceCorrelationDescriptionResponseOutput {
	return o
}

func (o ServiceCorrelationDescriptionResponseOutput) ToServiceCorrelationDescriptionResponseOutputWithContext(ctx context.Context) ServiceCorrelationDescriptionResponseOutput {
	return o
}

// The ServiceCorrelationScheme which describes the relationship between this service and the service specified via ServiceName.
func (o ServiceCorrelationDescriptionResponseOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceCorrelationDescriptionResponse) string { return v.Scheme }).(pulumi.StringOutput)
}

// The name of the service that the correlation relationship is established with.
func (o ServiceCorrelationDescriptionResponseOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceCorrelationDescriptionResponse) string { return v.ServiceName }).(pulumi.StringOutput)
}

type ServiceCorrelationDescriptionResponseArrayOutput struct{ *pulumi.OutputState }

func (ServiceCorrelationDescriptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceCorrelationDescriptionResponse)(nil)).Elem()
}

func (o ServiceCorrelationDescriptionResponseArrayOutput) ToServiceCorrelationDescriptionResponseArrayOutput() ServiceCorrelationDescriptionResponseArrayOutput {
	return o
}

func (o ServiceCorrelationDescriptionResponseArrayOutput) ToServiceCorrelationDescriptionResponseArrayOutputWithContext(ctx context.Context) ServiceCorrelationDescriptionResponseArrayOutput {
	return o
}

func (o ServiceCorrelationDescriptionResponseArrayOutput) Index(i pulumi.IntInput) ServiceCorrelationDescriptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceCorrelationDescriptionResponse {
		return vs[0].([]ServiceCorrelationDescriptionResponse)[vs[1].(int)]
	}).(ServiceCorrelationDescriptionResponseOutput)
}

// Specifies a metric to load balance a service during runtime.
type ServiceLoadMetricDescription struct {
	// Used only for Stateless services. The default amount of load, as a number, that this service creates for this metric.
	DefaultLoad *int `pulumi:"defaultLoad"`
	// The name of the metric. If the service chooses to report load during runtime, the load metric name should match the name that is specified in Name exactly. Note that metric names are case sensitive.
	Name string `pulumi:"name"`
	// Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Primary replica.
	PrimaryDefaultLoad *int `pulumi:"primaryDefaultLoad"`
	// Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Secondary replica.
	SecondaryDefaultLoad *int `pulumi:"secondaryDefaultLoad"`
	// The service load metric relative weight, compared to other metrics configured for this service, as a number.
	Weight *string `pulumi:"weight"`
}

// ServiceLoadMetricDescriptionInput is an input type that accepts ServiceLoadMetricDescriptionArgs and ServiceLoadMetricDescriptionOutput values.
// You can construct a concrete instance of `ServiceLoadMetricDescriptionInput` via:
//
//	ServiceLoadMetricDescriptionArgs{...}
type ServiceLoadMetricDescriptionInput interface {
	pulumi.Input

	ToServiceLoadMetricDescriptionOutput() ServiceLoadMetricDescriptionOutput
	ToServiceLoadMetricDescriptionOutputWithContext(context.Context) ServiceLoadMetricDescriptionOutput
}

// Specifies a metric to load balance a service during runtime.
type ServiceLoadMetricDescriptionArgs struct {
	// Used only for Stateless services. The default amount of load, as a number, that this service creates for this metric.
	DefaultLoad pulumi.IntPtrInput `pulumi:"defaultLoad"`
	// The name of the metric. If the service chooses to report load during runtime, the load metric name should match the name that is specified in Name exactly. Note that metric names are case sensitive.
	Name pulumi.StringInput `pulumi:"name"`
	// Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Primary replica.
	PrimaryDefaultLoad pulumi.IntPtrInput `pulumi:"primaryDefaultLoad"`
	// Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Secondary replica.
	SecondaryDefaultLoad pulumi.IntPtrInput `pulumi:"secondaryDefaultLoad"`
	// The service load metric relative weight, compared to other metrics configured for this service, as a number.
	Weight pulumi.StringPtrInput `pulumi:"weight"`
}

func (ServiceLoadMetricDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLoadMetricDescription)(nil)).Elem()
}

func (i ServiceLoadMetricDescriptionArgs) ToServiceLoadMetricDescriptionOutput() ServiceLoadMetricDescriptionOutput {
	return i.ToServiceLoadMetricDescriptionOutputWithContext(context.Background())
}

func (i ServiceLoadMetricDescriptionArgs) ToServiceLoadMetricDescriptionOutputWithContext(ctx context.Context) ServiceLoadMetricDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLoadMetricDescriptionOutput)
}

// ServiceLoadMetricDescriptionArrayInput is an input type that accepts ServiceLoadMetricDescriptionArray and ServiceLoadMetricDescriptionArrayOutput values.
// You can construct a concrete instance of `ServiceLoadMetricDescriptionArrayInput` via:
//
//	ServiceLoadMetricDescriptionArray{ ServiceLoadMetricDescriptionArgs{...} }
type ServiceLoadMetricDescriptionArrayInput interface {
	pulumi.Input

	ToServiceLoadMetricDescriptionArrayOutput() ServiceLoadMetricDescriptionArrayOutput
	ToServiceLoadMetricDescriptionArrayOutputWithContext(context.Context) ServiceLoadMetricDescriptionArrayOutput
}

type ServiceLoadMetricDescriptionArray []ServiceLoadMetricDescriptionInput

func (ServiceLoadMetricDescriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLoadMetricDescription)(nil)).Elem()
}

func (i ServiceLoadMetricDescriptionArray) ToServiceLoadMetricDescriptionArrayOutput() ServiceLoadMetricDescriptionArrayOutput {
	return i.ToServiceLoadMetricDescriptionArrayOutputWithContext(context.Background())
}

func (i ServiceLoadMetricDescriptionArray) ToServiceLoadMetricDescriptionArrayOutputWithContext(ctx context.Context) ServiceLoadMetricDescriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLoadMetricDescriptionArrayOutput)
}

// Specifies a metric to load balance a service during runtime.
type ServiceLoadMetricDescriptionOutput struct{ *pulumi.OutputState }

func (ServiceLoadMetricDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLoadMetricDescription)(nil)).Elem()
}

func (o ServiceLoadMetricDescriptionOutput) ToServiceLoadMetricDescriptionOutput() ServiceLoadMetricDescriptionOutput {
	return o
}

func (o ServiceLoadMetricDescriptionOutput) ToServiceLoadMetricDescriptionOutputWithContext(ctx context.Context) ServiceLoadMetricDescriptionOutput {
	return o
}

// Used only for Stateless services. The default amount of load, as a number, that this service creates for this metric.
func (o ServiceLoadMetricDescriptionOutput) DefaultLoad() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceLoadMetricDescription) *int { return v.DefaultLoad }).(pulumi.IntPtrOutput)
}

// The name of the metric. If the service chooses to report load during runtime, the load metric name should match the name that is specified in Name exactly. Note that metric names are case sensitive.
func (o ServiceLoadMetricDescriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceLoadMetricDescription) string { return v.Name }).(pulumi.StringOutput)
}

// Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Primary replica.
func (o ServiceLoadMetricDescriptionOutput) PrimaryDefaultLoad() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceLoadMetricDescription) *int { return v.PrimaryDefaultLoad }).(pulumi.IntPtrOutput)
}

// Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Secondary replica.
func (o ServiceLoadMetricDescriptionOutput) SecondaryDefaultLoad() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceLoadMetricDescription) *int { return v.SecondaryDefaultLoad }).(pulumi.IntPtrOutput)
}

// The service load metric relative weight, compared to other metrics configured for this service, as a number.
func (o ServiceLoadMetricDescriptionOutput) Weight() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLoadMetricDescription) *string { return v.Weight }).(pulumi.StringPtrOutput)
}

type ServiceLoadMetricDescriptionArrayOutput struct{ *pulumi.OutputState }

func (ServiceLoadMetricDescriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLoadMetricDescription)(nil)).Elem()
}

func (o ServiceLoadMetricDescriptionArrayOutput) ToServiceLoadMetricDescriptionArrayOutput() ServiceLoadMetricDescriptionArrayOutput {
	return o
}

func (o ServiceLoadMetricDescriptionArrayOutput) ToServiceLoadMetricDescriptionArrayOutputWithContext(ctx context.Context) ServiceLoadMetricDescriptionArrayOutput {
	return o
}

func (o ServiceLoadMetricDescriptionArrayOutput) Index(i pulumi.IntInput) ServiceLoadMetricDescriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceLoadMetricDescription {
		return vs[0].([]ServiceLoadMetricDescription)[vs[1].(int)]
	}).(ServiceLoadMetricDescriptionOutput)
}

// Specifies a metric to load balance a service during runtime.
type ServiceLoadMetricDescriptionResponse struct {
	// Used only for Stateless services. The default amount of load, as a number, that this service creates for this metric.
	DefaultLoad *int `pulumi:"defaultLoad"`
	// The name of the metric. If the service chooses to report load during runtime, the load metric name should match the name that is specified in Name exactly. Note that metric names are case sensitive.
	Name string `pulumi:"name"`
	// Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Primary replica.
	PrimaryDefaultLoad *int `pulumi:"primaryDefaultLoad"`
	// Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Secondary replica.
	SecondaryDefaultLoad *int `pulumi:"secondaryDefaultLoad"`
	// The service load metric relative weight, compared to other metrics configured for this service, as a number.
	Weight *string `pulumi:"weight"`
}

// Specifies a metric to load balance a service during runtime.
type ServiceLoadMetricDescriptionResponseOutput struct{ *pulumi.OutputState }

func (ServiceLoadMetricDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLoadMetricDescriptionResponse)(nil)).Elem()
}

func (o ServiceLoadMetricDescriptionResponseOutput) ToServiceLoadMetricDescriptionResponseOutput() ServiceLoadMetricDescriptionResponseOutput {
	return o
}

func (o ServiceLoadMetricDescriptionResponseOutput) ToServiceLoadMetricDescriptionResponseOutputWithContext(ctx context.Context) ServiceLoadMetricDescriptionResponseOutput {
	return o
}

// Used only for Stateless services. The default amount of load, as a number, that this service creates for this metric.
func (o ServiceLoadMetricDescriptionResponseOutput) DefaultLoad() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceLoadMetricDescriptionResponse) *int { return v.DefaultLoad }).(pulumi.IntPtrOutput)
}

// The name of the metric. If the service chooses to report load during runtime, the load metric name should match the name that is specified in Name exactly. Note that metric names are case sensitive.
func (o ServiceLoadMetricDescriptionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceLoadMetricDescriptionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Primary replica.
func (o ServiceLoadMetricDescriptionResponseOutput) PrimaryDefaultLoad() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceLoadMetricDescriptionResponse) *int { return v.PrimaryDefaultLoad }).(pulumi.IntPtrOutput)
}

// Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Secondary replica.
func (o ServiceLoadMetricDescriptionResponseOutput) SecondaryDefaultLoad() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceLoadMetricDescriptionResponse) *int { return v.SecondaryDefaultLoad }).(pulumi.IntPtrOutput)
}

// The service load metric relative weight, compared to other metrics configured for this service, as a number.
func (o ServiceLoadMetricDescriptionResponseOutput) Weight() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLoadMetricDescriptionResponse) *string { return v.Weight }).(pulumi.StringPtrOutput)
}

type ServiceLoadMetricDescriptionResponseArrayOutput struct{ *pulumi.OutputState }

func (ServiceLoadMetricDescriptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLoadMetricDescriptionResponse)(nil)).Elem()
}

func (o ServiceLoadMetricDescriptionResponseArrayOutput) ToServiceLoadMetricDescriptionResponseArrayOutput() ServiceLoadMetricDescriptionResponseArrayOutput {
	return o
}

func (o ServiceLoadMetricDescriptionResponseArrayOutput) ToServiceLoadMetricDescriptionResponseArrayOutputWithContext(ctx context.Context) ServiceLoadMetricDescriptionResponseArrayOutput {
	return o
}

func (o ServiceLoadMetricDescriptionResponseArrayOutput) Index(i pulumi.IntInput) ServiceLoadMetricDescriptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceLoadMetricDescriptionResponse {
		return vs[0].([]ServiceLoadMetricDescriptionResponse)[vs[1].(int)]
	}).(ServiceLoadMetricDescriptionResponseOutput)
}

// Describes the policy to be used for placement of a Service Fabric service.
type ServicePlacementPolicyDescription struct {
	// The type of placement policy for a service fabric service. Following are the possible values.
	Type string `pulumi:"type"`
}

// ServicePlacementPolicyDescriptionInput is an input type that accepts ServicePlacementPolicyDescriptionArgs and ServicePlacementPolicyDescriptionOutput values.
// You can construct a concrete instance of `ServicePlacementPolicyDescriptionInput` via:
//
//	ServicePlacementPolicyDescriptionArgs{...}
type ServicePlacementPolicyDescriptionInput interface {
	pulumi.Input

	ToServicePlacementPolicyDescriptionOutput() ServicePlacementPolicyDescriptionOutput
	ToServicePlacementPolicyDescriptionOutputWithContext(context.Context) ServicePlacementPolicyDescriptionOutput
}

// Describes the policy to be used for placement of a Service Fabric service.
type ServicePlacementPolicyDescriptionArgs struct {
	// The type of placement policy for a service fabric service. Following are the possible values.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServicePlacementPolicyDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePlacementPolicyDescription)(nil)).Elem()
}

func (i ServicePlacementPolicyDescriptionArgs) ToServicePlacementPolicyDescriptionOutput() ServicePlacementPolicyDescriptionOutput {
	return i.ToServicePlacementPolicyDescriptionOutputWithContext(context.Background())
}

func (i ServicePlacementPolicyDescriptionArgs) ToServicePlacementPolicyDescriptionOutputWithContext(ctx context.Context) ServicePlacementPolicyDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlacementPolicyDescriptionOutput)
}

// ServicePlacementPolicyDescriptionArrayInput is an input type that accepts ServicePlacementPolicyDescriptionArray and ServicePlacementPolicyDescriptionArrayOutput values.
// You can construct a concrete instance of `ServicePlacementPolicyDescriptionArrayInput` via:
//
//	ServicePlacementPolicyDescriptionArray{ ServicePlacementPolicyDescriptionArgs{...} }
type ServicePlacementPolicyDescriptionArrayInput interface {
	pulumi.Input

	ToServicePlacementPolicyDescriptionArrayOutput() ServicePlacementPolicyDescriptionArrayOutput
	ToServicePlacementPolicyDescriptionArrayOutputWithContext(context.Context) ServicePlacementPolicyDescriptionArrayOutput
}

type ServicePlacementPolicyDescriptionArray []ServicePlacementPolicyDescriptionInput

func (ServicePlacementPolicyDescriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePlacementPolicyDescription)(nil)).Elem()
}

func (i ServicePlacementPolicyDescriptionArray) ToServicePlacementPolicyDescriptionArrayOutput() ServicePlacementPolicyDescriptionArrayOutput {
	return i.ToServicePlacementPolicyDescriptionArrayOutputWithContext(context.Background())
}

func (i ServicePlacementPolicyDescriptionArray) ToServicePlacementPolicyDescriptionArrayOutputWithContext(ctx context.Context) ServicePlacementPolicyDescriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlacementPolicyDescriptionArrayOutput)
}

// Describes the policy to be used for placement of a Service Fabric service.
type ServicePlacementPolicyDescriptionOutput struct{ *pulumi.OutputState }

func (ServicePlacementPolicyDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePlacementPolicyDescription)(nil)).Elem()
}

func (o ServicePlacementPolicyDescriptionOutput) ToServicePlacementPolicyDescriptionOutput() ServicePlacementPolicyDescriptionOutput {
	return o
}

func (o ServicePlacementPolicyDescriptionOutput) ToServicePlacementPolicyDescriptionOutputWithContext(ctx context.Context) ServicePlacementPolicyDescriptionOutput {
	return o
}

// The type of placement policy for a service fabric service. Following are the possible values.
func (o ServicePlacementPolicyDescriptionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePlacementPolicyDescription) string { return v.Type }).(pulumi.StringOutput)
}

type ServicePlacementPolicyDescriptionArrayOutput struct{ *pulumi.OutputState }

func (ServicePlacementPolicyDescriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePlacementPolicyDescription)(nil)).Elem()
}

func (o ServicePlacementPolicyDescriptionArrayOutput) ToServicePlacementPolicyDescriptionArrayOutput() ServicePlacementPolicyDescriptionArrayOutput {
	return o
}

func (o ServicePlacementPolicyDescriptionArrayOutput) ToServicePlacementPolicyDescriptionArrayOutputWithContext(ctx context.Context) ServicePlacementPolicyDescriptionArrayOutput {
	return o
}

func (o ServicePlacementPolicyDescriptionArrayOutput) Index(i pulumi.IntInput) ServicePlacementPolicyDescriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServicePlacementPolicyDescription {
		return vs[0].([]ServicePlacementPolicyDescription)[vs[1].(int)]
	}).(ServicePlacementPolicyDescriptionOutput)
}

// Describes the policy to be used for placement of a Service Fabric service.
type ServicePlacementPolicyDescriptionResponse struct {
	// The type of placement policy for a service fabric service. Following are the possible values.
	Type string `pulumi:"type"`
}

// Describes the policy to be used for placement of a Service Fabric service.
type ServicePlacementPolicyDescriptionResponseOutput struct{ *pulumi.OutputState }

func (ServicePlacementPolicyDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePlacementPolicyDescriptionResponse)(nil)).Elem()
}

func (o ServicePlacementPolicyDescriptionResponseOutput) ToServicePlacementPolicyDescriptionResponseOutput() ServicePlacementPolicyDescriptionResponseOutput {
	return o
}

func (o ServicePlacementPolicyDescriptionResponseOutput) ToServicePlacementPolicyDescriptionResponseOutputWithContext(ctx context.Context) ServicePlacementPolicyDescriptionResponseOutput {
	return o
}

// The type of placement policy for a service fabric service. Following are the possible values.
func (o ServicePlacementPolicyDescriptionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePlacementPolicyDescriptionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ServicePlacementPolicyDescriptionResponseArrayOutput struct{ *pulumi.OutputState }

func (ServicePlacementPolicyDescriptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePlacementPolicyDescriptionResponse)(nil)).Elem()
}

func (o ServicePlacementPolicyDescriptionResponseArrayOutput) ToServicePlacementPolicyDescriptionResponseArrayOutput() ServicePlacementPolicyDescriptionResponseArrayOutput {
	return o
}

func (o ServicePlacementPolicyDescriptionResponseArrayOutput) ToServicePlacementPolicyDescriptionResponseArrayOutputWithContext(ctx context.Context) ServicePlacementPolicyDescriptionResponseArrayOutput {
	return o
}

func (o ServicePlacementPolicyDescriptionResponseArrayOutput) Index(i pulumi.IntInput) ServicePlacementPolicyDescriptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServicePlacementPolicyDescriptionResponse {
		return vs[0].([]ServicePlacementPolicyDescriptionResponse)[vs[1].(int)]
	}).(ServicePlacementPolicyDescriptionResponseOutput)
}

// Represents the delta health policy used to evaluate the health of services belonging to a service type when upgrading the cluster.
type ServiceTypeDeltaHealthPolicy struct {
	// The maximum allowed percentage of services health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the services at the beginning of upgrade and the state of the services at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
	MaxPercentDeltaUnhealthyServices *int `pulumi:"maxPercentDeltaUnhealthyServices"`
}

// Defaults sets the appropriate defaults for ServiceTypeDeltaHealthPolicy
func (val *ServiceTypeDeltaHealthPolicy) Defaults() *ServiceTypeDeltaHealthPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.MaxPercentDeltaUnhealthyServices) {
		maxPercentDeltaUnhealthyServices_ := 0
		tmp.MaxPercentDeltaUnhealthyServices = &maxPercentDeltaUnhealthyServices_
	}
	return &tmp
}

// ServiceTypeDeltaHealthPolicyInput is an input type that accepts ServiceTypeDeltaHealthPolicyArgs and ServiceTypeDeltaHealthPolicyOutput values.
// You can construct a concrete instance of `ServiceTypeDeltaHealthPolicyInput` via:
//
//	ServiceTypeDeltaHealthPolicyArgs{...}
type ServiceTypeDeltaHealthPolicyInput interface {
	pulumi.Input

	ToServiceTypeDeltaHealthPolicyOutput() ServiceTypeDeltaHealthPolicyOutput
	ToServiceTypeDeltaHealthPolicyOutputWithContext(context.Context) ServiceTypeDeltaHealthPolicyOutput
}

// Represents the delta health policy used to evaluate the health of services belonging to a service type when upgrading the cluster.
type ServiceTypeDeltaHealthPolicyArgs struct {
	// The maximum allowed percentage of services health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the services at the beginning of upgrade and the state of the services at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
	MaxPercentDeltaUnhealthyServices pulumi.IntPtrInput `pulumi:"maxPercentDeltaUnhealthyServices"`
}

// Defaults sets the appropriate defaults for ServiceTypeDeltaHealthPolicyArgs
func (val *ServiceTypeDeltaHealthPolicyArgs) Defaults() *ServiceTypeDeltaHealthPolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.MaxPercentDeltaUnhealthyServices) {
		tmp.MaxPercentDeltaUnhealthyServices = pulumi.IntPtr(0)
	}
	return &tmp
}
func (ServiceTypeDeltaHealthPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTypeDeltaHealthPolicy)(nil)).Elem()
}

func (i ServiceTypeDeltaHealthPolicyArgs) ToServiceTypeDeltaHealthPolicyOutput() ServiceTypeDeltaHealthPolicyOutput {
	return i.ToServiceTypeDeltaHealthPolicyOutputWithContext(context.Background())
}

func (i ServiceTypeDeltaHealthPolicyArgs) ToServiceTypeDeltaHealthPolicyOutputWithContext(ctx context.Context) ServiceTypeDeltaHealthPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTypeDeltaHealthPolicyOutput)
}

func (i ServiceTypeDeltaHealthPolicyArgs) ToServiceTypeDeltaHealthPolicyPtrOutput() ServiceTypeDeltaHealthPolicyPtrOutput {
	return i.ToServiceTypeDeltaHealthPolicyPtrOutputWithContext(context.Background())
}

func (i ServiceTypeDeltaHealthPolicyArgs) ToServiceTypeDeltaHealthPolicyPtrOutputWithContext(ctx context.Context) ServiceTypeDeltaHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTypeDeltaHealthPolicyOutput).ToServiceTypeDeltaHealthPolicyPtrOutputWithContext(ctx)
}

// ServiceTypeDeltaHealthPolicyPtrInput is an input type that accepts ServiceTypeDeltaHealthPolicyArgs, ServiceTypeDeltaHealthPolicyPtr and ServiceTypeDeltaHealthPolicyPtrOutput values.
// You can construct a concrete instance of `ServiceTypeDeltaHealthPolicyPtrInput` via:
//
//	        ServiceTypeDeltaHealthPolicyArgs{...}
//
//	or:
//
//	        nil
type ServiceTypeDeltaHealthPolicyPtrInput interface {
	pulumi.Input

	ToServiceTypeDeltaHealthPolicyPtrOutput() ServiceTypeDeltaHealthPolicyPtrOutput
	ToServiceTypeDeltaHealthPolicyPtrOutputWithContext(context.Context) ServiceTypeDeltaHealthPolicyPtrOutput
}

type serviceTypeDeltaHealthPolicyPtrType ServiceTypeDeltaHealthPolicyArgs

func ServiceTypeDeltaHealthPolicyPtr(v *ServiceTypeDeltaHealthPolicyArgs) ServiceTypeDeltaHealthPolicyPtrInput {
	return (*serviceTypeDeltaHealthPolicyPtrType)(v)
}

func (*serviceTypeDeltaHealthPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTypeDeltaHealthPolicy)(nil)).Elem()
}

func (i *serviceTypeDeltaHealthPolicyPtrType) ToServiceTypeDeltaHealthPolicyPtrOutput() ServiceTypeDeltaHealthPolicyPtrOutput {
	return i.ToServiceTypeDeltaHealthPolicyPtrOutputWithContext(context.Background())
}

func (i *serviceTypeDeltaHealthPolicyPtrType) ToServiceTypeDeltaHealthPolicyPtrOutputWithContext(ctx context.Context) ServiceTypeDeltaHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTypeDeltaHealthPolicyPtrOutput)
}

// ServiceTypeDeltaHealthPolicyMapInput is an input type that accepts ServiceTypeDeltaHealthPolicyMap and ServiceTypeDeltaHealthPolicyMapOutput values.
// You can construct a concrete instance of `ServiceTypeDeltaHealthPolicyMapInput` via:
//
//	ServiceTypeDeltaHealthPolicyMap{ "key": ServiceTypeDeltaHealthPolicyArgs{...} }
type ServiceTypeDeltaHealthPolicyMapInput interface {
	pulumi.Input

	ToServiceTypeDeltaHealthPolicyMapOutput() ServiceTypeDeltaHealthPolicyMapOutput
	ToServiceTypeDeltaHealthPolicyMapOutputWithContext(context.Context) ServiceTypeDeltaHealthPolicyMapOutput
}

type ServiceTypeDeltaHealthPolicyMap map[string]ServiceTypeDeltaHealthPolicyInput

func (ServiceTypeDeltaHealthPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ServiceTypeDeltaHealthPolicy)(nil)).Elem()
}

func (i ServiceTypeDeltaHealthPolicyMap) ToServiceTypeDeltaHealthPolicyMapOutput() ServiceTypeDeltaHealthPolicyMapOutput {
	return i.ToServiceTypeDeltaHealthPolicyMapOutputWithContext(context.Background())
}

func (i ServiceTypeDeltaHealthPolicyMap) ToServiceTypeDeltaHealthPolicyMapOutputWithContext(ctx context.Context) ServiceTypeDeltaHealthPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTypeDeltaHealthPolicyMapOutput)
}

// Represents the delta health policy used to evaluate the health of services belonging to a service type when upgrading the cluster.
type ServiceTypeDeltaHealthPolicyOutput struct{ *pulumi.OutputState }

func (ServiceTypeDeltaHealthPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTypeDeltaHealthPolicy)(nil)).Elem()
}

func (o ServiceTypeDeltaHealthPolicyOutput) ToServiceTypeDeltaHealthPolicyOutput() ServiceTypeDeltaHealthPolicyOutput {
	return o
}

func (o ServiceTypeDeltaHealthPolicyOutput) ToServiceTypeDeltaHealthPolicyOutputWithContext(ctx context.Context) ServiceTypeDeltaHealthPolicyOutput {
	return o
}

func (o ServiceTypeDeltaHealthPolicyOutput) ToServiceTypeDeltaHealthPolicyPtrOutput() ServiceTypeDeltaHealthPolicyPtrOutput {
	return o.ToServiceTypeDeltaHealthPolicyPtrOutputWithContext(context.Background())
}

func (o ServiceTypeDeltaHealthPolicyOutput) ToServiceTypeDeltaHealthPolicyPtrOutputWithContext(ctx context.Context) ServiceTypeDeltaHealthPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTypeDeltaHealthPolicy) *ServiceTypeDeltaHealthPolicy {
		return &v
	}).(ServiceTypeDeltaHealthPolicyPtrOutput)
}

// The maximum allowed percentage of services health degradation allowed during cluster upgrades.
// The delta is measured between the state of the services at the beginning of upgrade and the state of the services at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
func (o ServiceTypeDeltaHealthPolicyOutput) MaxPercentDeltaUnhealthyServices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTypeDeltaHealthPolicy) *int { return v.MaxPercentDeltaUnhealthyServices }).(pulumi.IntPtrOutput)
}

type ServiceTypeDeltaHealthPolicyPtrOutput struct{ *pulumi.OutputState }

func (ServiceTypeDeltaHealthPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTypeDeltaHealthPolicy)(nil)).Elem()
}

func (o ServiceTypeDeltaHealthPolicyPtrOutput) ToServiceTypeDeltaHealthPolicyPtrOutput() ServiceTypeDeltaHealthPolicyPtrOutput {
	return o
}

func (o ServiceTypeDeltaHealthPolicyPtrOutput) ToServiceTypeDeltaHealthPolicyPtrOutputWithContext(ctx context.Context) ServiceTypeDeltaHealthPolicyPtrOutput {
	return o
}

func (o ServiceTypeDeltaHealthPolicyPtrOutput) Elem() ServiceTypeDeltaHealthPolicyOutput {
	return o.ApplyT(func(v *ServiceTypeDeltaHealthPolicy) ServiceTypeDeltaHealthPolicy {
		if v != nil {
			return *v
		}
		var ret ServiceTypeDeltaHealthPolicy
		return ret
	}).(ServiceTypeDeltaHealthPolicyOutput)
}

// The maximum allowed percentage of services health degradation allowed during cluster upgrades.
// The delta is measured between the state of the services at the beginning of upgrade and the state of the services at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
func (o ServiceTypeDeltaHealthPolicyPtrOutput) MaxPercentDeltaUnhealthyServices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceTypeDeltaHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentDeltaUnhealthyServices
	}).(pulumi.IntPtrOutput)
}

type ServiceTypeDeltaHealthPolicyMapOutput struct{ *pulumi.OutputState }

func (ServiceTypeDeltaHealthPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ServiceTypeDeltaHealthPolicy)(nil)).Elem()
}

func (o ServiceTypeDeltaHealthPolicyMapOutput) ToServiceTypeDeltaHealthPolicyMapOutput() ServiceTypeDeltaHealthPolicyMapOutput {
	return o
}

func (o ServiceTypeDeltaHealthPolicyMapOutput) ToServiceTypeDeltaHealthPolicyMapOutputWithContext(ctx context.Context) ServiceTypeDeltaHealthPolicyMapOutput {
	return o
}

func (o ServiceTypeDeltaHealthPolicyMapOutput) MapIndex(k pulumi.StringInput) ServiceTypeDeltaHealthPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ServiceTypeDeltaHealthPolicy {
		return vs[0].(map[string]ServiceTypeDeltaHealthPolicy)[vs[1].(string)]
	}).(ServiceTypeDeltaHealthPolicyOutput)
}

// Represents the delta health policy used to evaluate the health of services belonging to a service type when upgrading the cluster.
type ServiceTypeDeltaHealthPolicyResponse struct {
	// The maximum allowed percentage of services health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the services at the beginning of upgrade and the state of the services at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
	MaxPercentDeltaUnhealthyServices *int `pulumi:"maxPercentDeltaUnhealthyServices"`
}

// Defaults sets the appropriate defaults for ServiceTypeDeltaHealthPolicyResponse
func (val *ServiceTypeDeltaHealthPolicyResponse) Defaults() *ServiceTypeDeltaHealthPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.MaxPercentDeltaUnhealthyServices) {
		maxPercentDeltaUnhealthyServices_ := 0
		tmp.MaxPercentDeltaUnhealthyServices = &maxPercentDeltaUnhealthyServices_
	}
	return &tmp
}

// Represents the delta health policy used to evaluate the health of services belonging to a service type when upgrading the cluster.
type ServiceTypeDeltaHealthPolicyResponseOutput struct{ *pulumi.OutputState }

func (ServiceTypeDeltaHealthPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTypeDeltaHealthPolicyResponse)(nil)).Elem()
}

func (o ServiceTypeDeltaHealthPolicyResponseOutput) ToServiceTypeDeltaHealthPolicyResponseOutput() ServiceTypeDeltaHealthPolicyResponseOutput {
	return o
}

func (o ServiceTypeDeltaHealthPolicyResponseOutput) ToServiceTypeDeltaHealthPolicyResponseOutputWithContext(ctx context.Context) ServiceTypeDeltaHealthPolicyResponseOutput {
	return o
}

// The maximum allowed percentage of services health degradation allowed during cluster upgrades.
// The delta is measured between the state of the services at the beginning of upgrade and the state of the services at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
func (o ServiceTypeDeltaHealthPolicyResponseOutput) MaxPercentDeltaUnhealthyServices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTypeDeltaHealthPolicyResponse) *int { return v.MaxPercentDeltaUnhealthyServices }).(pulumi.IntPtrOutput)
}

type ServiceTypeDeltaHealthPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceTypeDeltaHealthPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTypeDeltaHealthPolicyResponse)(nil)).Elem()
}

func (o ServiceTypeDeltaHealthPolicyResponsePtrOutput) ToServiceTypeDeltaHealthPolicyResponsePtrOutput() ServiceTypeDeltaHealthPolicyResponsePtrOutput {
	return o
}

func (o ServiceTypeDeltaHealthPolicyResponsePtrOutput) ToServiceTypeDeltaHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ServiceTypeDeltaHealthPolicyResponsePtrOutput {
	return o
}

func (o ServiceTypeDeltaHealthPolicyResponsePtrOutput) Elem() ServiceTypeDeltaHealthPolicyResponseOutput {
	return o.ApplyT(func(v *ServiceTypeDeltaHealthPolicyResponse) ServiceTypeDeltaHealthPolicyResponse {
		if v != nil {
			return *v
		}
		var ret ServiceTypeDeltaHealthPolicyResponse
		return ret
	}).(ServiceTypeDeltaHealthPolicyResponseOutput)
}

// The maximum allowed percentage of services health degradation allowed during cluster upgrades.
// The delta is measured between the state of the services at the beginning of upgrade and the state of the services at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
func (o ServiceTypeDeltaHealthPolicyResponsePtrOutput) MaxPercentDeltaUnhealthyServices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceTypeDeltaHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentDeltaUnhealthyServices
	}).(pulumi.IntPtrOutput)
}

type ServiceTypeDeltaHealthPolicyResponseMapOutput struct{ *pulumi.OutputState }

func (ServiceTypeDeltaHealthPolicyResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ServiceTypeDeltaHealthPolicyResponse)(nil)).Elem()
}

func (o ServiceTypeDeltaHealthPolicyResponseMapOutput) ToServiceTypeDeltaHealthPolicyResponseMapOutput() ServiceTypeDeltaHealthPolicyResponseMapOutput {
	return o
}

func (o ServiceTypeDeltaHealthPolicyResponseMapOutput) ToServiceTypeDeltaHealthPolicyResponseMapOutputWithContext(ctx context.Context) ServiceTypeDeltaHealthPolicyResponseMapOutput {
	return o
}

func (o ServiceTypeDeltaHealthPolicyResponseMapOutput) MapIndex(k pulumi.StringInput) ServiceTypeDeltaHealthPolicyResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ServiceTypeDeltaHealthPolicyResponse {
		return vs[0].(map[string]ServiceTypeDeltaHealthPolicyResponse)[vs[1].(string)]
	}).(ServiceTypeDeltaHealthPolicyResponseOutput)
}

// Represents the health policy used to evaluate the health of services belonging to a service type.
type ServiceTypeHealthPolicy struct {
	// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyServices *int `pulumi:"maxPercentUnhealthyServices"`
}

// Defaults sets the appropriate defaults for ServiceTypeHealthPolicy
func (val *ServiceTypeHealthPolicy) Defaults() *ServiceTypeHealthPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.MaxPercentUnhealthyServices) {
		maxPercentUnhealthyServices_ := 0
		tmp.MaxPercentUnhealthyServices = &maxPercentUnhealthyServices_
	}
	return &tmp
}

// ServiceTypeHealthPolicyInput is an input type that accepts ServiceTypeHealthPolicyArgs and ServiceTypeHealthPolicyOutput values.
// You can construct a concrete instance of `ServiceTypeHealthPolicyInput` via:
//
//	ServiceTypeHealthPolicyArgs{...}
type ServiceTypeHealthPolicyInput interface {
	pulumi.Input

	ToServiceTypeHealthPolicyOutput() ServiceTypeHealthPolicyOutput
	ToServiceTypeHealthPolicyOutputWithContext(context.Context) ServiceTypeHealthPolicyOutput
}

// Represents the health policy used to evaluate the health of services belonging to a service type.
type ServiceTypeHealthPolicyArgs struct {
	// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyServices pulumi.IntPtrInput `pulumi:"maxPercentUnhealthyServices"`
}

// Defaults sets the appropriate defaults for ServiceTypeHealthPolicyArgs
func (val *ServiceTypeHealthPolicyArgs) Defaults() *ServiceTypeHealthPolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.MaxPercentUnhealthyServices) {
		tmp.MaxPercentUnhealthyServices = pulumi.IntPtr(0)
	}
	return &tmp
}
func (ServiceTypeHealthPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTypeHealthPolicy)(nil)).Elem()
}

func (i ServiceTypeHealthPolicyArgs) ToServiceTypeHealthPolicyOutput() ServiceTypeHealthPolicyOutput {
	return i.ToServiceTypeHealthPolicyOutputWithContext(context.Background())
}

func (i ServiceTypeHealthPolicyArgs) ToServiceTypeHealthPolicyOutputWithContext(ctx context.Context) ServiceTypeHealthPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTypeHealthPolicyOutput)
}

func (i ServiceTypeHealthPolicyArgs) ToServiceTypeHealthPolicyPtrOutput() ServiceTypeHealthPolicyPtrOutput {
	return i.ToServiceTypeHealthPolicyPtrOutputWithContext(context.Background())
}

func (i ServiceTypeHealthPolicyArgs) ToServiceTypeHealthPolicyPtrOutputWithContext(ctx context.Context) ServiceTypeHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTypeHealthPolicyOutput).ToServiceTypeHealthPolicyPtrOutputWithContext(ctx)
}

// ServiceTypeHealthPolicyPtrInput is an input type that accepts ServiceTypeHealthPolicyArgs, ServiceTypeHealthPolicyPtr and ServiceTypeHealthPolicyPtrOutput values.
// You can construct a concrete instance of `ServiceTypeHealthPolicyPtrInput` via:
//
//	        ServiceTypeHealthPolicyArgs{...}
//
//	or:
//
//	        nil
type ServiceTypeHealthPolicyPtrInput interface {
	pulumi.Input

	ToServiceTypeHealthPolicyPtrOutput() ServiceTypeHealthPolicyPtrOutput
	ToServiceTypeHealthPolicyPtrOutputWithContext(context.Context) ServiceTypeHealthPolicyPtrOutput
}

type serviceTypeHealthPolicyPtrType ServiceTypeHealthPolicyArgs

func ServiceTypeHealthPolicyPtr(v *ServiceTypeHealthPolicyArgs) ServiceTypeHealthPolicyPtrInput {
	return (*serviceTypeHealthPolicyPtrType)(v)
}

func (*serviceTypeHealthPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTypeHealthPolicy)(nil)).Elem()
}

func (i *serviceTypeHealthPolicyPtrType) ToServiceTypeHealthPolicyPtrOutput() ServiceTypeHealthPolicyPtrOutput {
	return i.ToServiceTypeHealthPolicyPtrOutputWithContext(context.Background())
}

func (i *serviceTypeHealthPolicyPtrType) ToServiceTypeHealthPolicyPtrOutputWithContext(ctx context.Context) ServiceTypeHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTypeHealthPolicyPtrOutput)
}

// ServiceTypeHealthPolicyMapInput is an input type that accepts ServiceTypeHealthPolicyMap and ServiceTypeHealthPolicyMapOutput values.
// You can construct a concrete instance of `ServiceTypeHealthPolicyMapInput` via:
//
//	ServiceTypeHealthPolicyMap{ "key": ServiceTypeHealthPolicyArgs{...} }
type ServiceTypeHealthPolicyMapInput interface {
	pulumi.Input

	ToServiceTypeHealthPolicyMapOutput() ServiceTypeHealthPolicyMapOutput
	ToServiceTypeHealthPolicyMapOutputWithContext(context.Context) ServiceTypeHealthPolicyMapOutput
}

type ServiceTypeHealthPolicyMap map[string]ServiceTypeHealthPolicyInput

func (ServiceTypeHealthPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ServiceTypeHealthPolicy)(nil)).Elem()
}

func (i ServiceTypeHealthPolicyMap) ToServiceTypeHealthPolicyMapOutput() ServiceTypeHealthPolicyMapOutput {
	return i.ToServiceTypeHealthPolicyMapOutputWithContext(context.Background())
}

func (i ServiceTypeHealthPolicyMap) ToServiceTypeHealthPolicyMapOutputWithContext(ctx context.Context) ServiceTypeHealthPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTypeHealthPolicyMapOutput)
}

// Represents the health policy used to evaluate the health of services belonging to a service type.
type ServiceTypeHealthPolicyOutput struct{ *pulumi.OutputState }

func (ServiceTypeHealthPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTypeHealthPolicy)(nil)).Elem()
}

func (o ServiceTypeHealthPolicyOutput) ToServiceTypeHealthPolicyOutput() ServiceTypeHealthPolicyOutput {
	return o
}

func (o ServiceTypeHealthPolicyOutput) ToServiceTypeHealthPolicyOutputWithContext(ctx context.Context) ServiceTypeHealthPolicyOutput {
	return o
}

func (o ServiceTypeHealthPolicyOutput) ToServiceTypeHealthPolicyPtrOutput() ServiceTypeHealthPolicyPtrOutput {
	return o.ToServiceTypeHealthPolicyPtrOutputWithContext(context.Background())
}

func (o ServiceTypeHealthPolicyOutput) ToServiceTypeHealthPolicyPtrOutputWithContext(ctx context.Context) ServiceTypeHealthPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTypeHealthPolicy) *ServiceTypeHealthPolicy {
		return &v
	}).(ServiceTypeHealthPolicyPtrOutput)
}

// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
func (o ServiceTypeHealthPolicyOutput) MaxPercentUnhealthyServices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTypeHealthPolicy) *int { return v.MaxPercentUnhealthyServices }).(pulumi.IntPtrOutput)
}

type ServiceTypeHealthPolicyPtrOutput struct{ *pulumi.OutputState }

func (ServiceTypeHealthPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTypeHealthPolicy)(nil)).Elem()
}

func (o ServiceTypeHealthPolicyPtrOutput) ToServiceTypeHealthPolicyPtrOutput() ServiceTypeHealthPolicyPtrOutput {
	return o
}

func (o ServiceTypeHealthPolicyPtrOutput) ToServiceTypeHealthPolicyPtrOutputWithContext(ctx context.Context) ServiceTypeHealthPolicyPtrOutput {
	return o
}

func (o ServiceTypeHealthPolicyPtrOutput) Elem() ServiceTypeHealthPolicyOutput {
	return o.ApplyT(func(v *ServiceTypeHealthPolicy) ServiceTypeHealthPolicy {
		if v != nil {
			return *v
		}
		var ret ServiceTypeHealthPolicy
		return ret
	}).(ServiceTypeHealthPolicyOutput)
}

// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
func (o ServiceTypeHealthPolicyPtrOutput) MaxPercentUnhealthyServices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceTypeHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyServices
	}).(pulumi.IntPtrOutput)
}

type ServiceTypeHealthPolicyMapOutput struct{ *pulumi.OutputState }

func (ServiceTypeHealthPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ServiceTypeHealthPolicy)(nil)).Elem()
}

func (o ServiceTypeHealthPolicyMapOutput) ToServiceTypeHealthPolicyMapOutput() ServiceTypeHealthPolicyMapOutput {
	return o
}

func (o ServiceTypeHealthPolicyMapOutput) ToServiceTypeHealthPolicyMapOutputWithContext(ctx context.Context) ServiceTypeHealthPolicyMapOutput {
	return o
}

func (o ServiceTypeHealthPolicyMapOutput) MapIndex(k pulumi.StringInput) ServiceTypeHealthPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ServiceTypeHealthPolicy {
		return vs[0].(map[string]ServiceTypeHealthPolicy)[vs[1].(string)]
	}).(ServiceTypeHealthPolicyOutput)
}

// Represents the health policy used to evaluate the health of services belonging to a service type.
type ServiceTypeHealthPolicyResponse struct {
	// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyServices *int `pulumi:"maxPercentUnhealthyServices"`
}

// Defaults sets the appropriate defaults for ServiceTypeHealthPolicyResponse
func (val *ServiceTypeHealthPolicyResponse) Defaults() *ServiceTypeHealthPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.MaxPercentUnhealthyServices) {
		maxPercentUnhealthyServices_ := 0
		tmp.MaxPercentUnhealthyServices = &maxPercentUnhealthyServices_
	}
	return &tmp
}

// Represents the health policy used to evaluate the health of services belonging to a service type.
type ServiceTypeHealthPolicyResponseOutput struct{ *pulumi.OutputState }

func (ServiceTypeHealthPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTypeHealthPolicyResponse)(nil)).Elem()
}

func (o ServiceTypeHealthPolicyResponseOutput) ToServiceTypeHealthPolicyResponseOutput() ServiceTypeHealthPolicyResponseOutput {
	return o
}

func (o ServiceTypeHealthPolicyResponseOutput) ToServiceTypeHealthPolicyResponseOutputWithContext(ctx context.Context) ServiceTypeHealthPolicyResponseOutput {
	return o
}

// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
func (o ServiceTypeHealthPolicyResponseOutput) MaxPercentUnhealthyServices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceTypeHealthPolicyResponse) *int { return v.MaxPercentUnhealthyServices }).(pulumi.IntPtrOutput)
}

type ServiceTypeHealthPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceTypeHealthPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTypeHealthPolicyResponse)(nil)).Elem()
}

func (o ServiceTypeHealthPolicyResponsePtrOutput) ToServiceTypeHealthPolicyResponsePtrOutput() ServiceTypeHealthPolicyResponsePtrOutput {
	return o
}

func (o ServiceTypeHealthPolicyResponsePtrOutput) ToServiceTypeHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ServiceTypeHealthPolicyResponsePtrOutput {
	return o
}

func (o ServiceTypeHealthPolicyResponsePtrOutput) Elem() ServiceTypeHealthPolicyResponseOutput {
	return o.ApplyT(func(v *ServiceTypeHealthPolicyResponse) ServiceTypeHealthPolicyResponse {
		if v != nil {
			return *v
		}
		var ret ServiceTypeHealthPolicyResponse
		return ret
	}).(ServiceTypeHealthPolicyResponseOutput)
}

// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
func (o ServiceTypeHealthPolicyResponsePtrOutput) MaxPercentUnhealthyServices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceTypeHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyServices
	}).(pulumi.IntPtrOutput)
}

type ServiceTypeHealthPolicyResponseMapOutput struct{ *pulumi.OutputState }

func (ServiceTypeHealthPolicyResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ServiceTypeHealthPolicyResponse)(nil)).Elem()
}

func (o ServiceTypeHealthPolicyResponseMapOutput) ToServiceTypeHealthPolicyResponseMapOutput() ServiceTypeHealthPolicyResponseMapOutput {
	return o
}

func (o ServiceTypeHealthPolicyResponseMapOutput) ToServiceTypeHealthPolicyResponseMapOutputWithContext(ctx context.Context) ServiceTypeHealthPolicyResponseMapOutput {
	return o
}

func (o ServiceTypeHealthPolicyResponseMapOutput) MapIndex(k pulumi.StringInput) ServiceTypeHealthPolicyResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ServiceTypeHealthPolicyResponse {
		return vs[0].(map[string]ServiceTypeHealthPolicyResponse)[vs[1].(string)]
	}).(ServiceTypeHealthPolicyResponseOutput)
}

// Describes a parameter in fabric settings of the cluster.
type SettingsParameterDescription struct {
	// The parameter name of fabric setting.
	Name string `pulumi:"name"`
	// The parameter value of fabric setting.
	Value string `pulumi:"value"`
}

// SettingsParameterDescriptionInput is an input type that accepts SettingsParameterDescriptionArgs and SettingsParameterDescriptionOutput values.
// You can construct a concrete instance of `SettingsParameterDescriptionInput` via:
//
//	SettingsParameterDescriptionArgs{...}
type SettingsParameterDescriptionInput interface {
	pulumi.Input

	ToSettingsParameterDescriptionOutput() SettingsParameterDescriptionOutput
	ToSettingsParameterDescriptionOutputWithContext(context.Context) SettingsParameterDescriptionOutput
}

// Describes a parameter in fabric settings of the cluster.
type SettingsParameterDescriptionArgs struct {
	// The parameter name of fabric setting.
	Name pulumi.StringInput `pulumi:"name"`
	// The parameter value of fabric setting.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SettingsParameterDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingsParameterDescription)(nil)).Elem()
}

func (i SettingsParameterDescriptionArgs) ToSettingsParameterDescriptionOutput() SettingsParameterDescriptionOutput {
	return i.ToSettingsParameterDescriptionOutputWithContext(context.Background())
}

func (i SettingsParameterDescriptionArgs) ToSettingsParameterDescriptionOutputWithContext(ctx context.Context) SettingsParameterDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsParameterDescriptionOutput)
}

// SettingsParameterDescriptionArrayInput is an input type that accepts SettingsParameterDescriptionArray and SettingsParameterDescriptionArrayOutput values.
// You can construct a concrete instance of `SettingsParameterDescriptionArrayInput` via:
//
//	SettingsParameterDescriptionArray{ SettingsParameterDescriptionArgs{...} }
type SettingsParameterDescriptionArrayInput interface {
	pulumi.Input

	ToSettingsParameterDescriptionArrayOutput() SettingsParameterDescriptionArrayOutput
	ToSettingsParameterDescriptionArrayOutputWithContext(context.Context) SettingsParameterDescriptionArrayOutput
}

type SettingsParameterDescriptionArray []SettingsParameterDescriptionInput

func (SettingsParameterDescriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingsParameterDescription)(nil)).Elem()
}

func (i SettingsParameterDescriptionArray) ToSettingsParameterDescriptionArrayOutput() SettingsParameterDescriptionArrayOutput {
	return i.ToSettingsParameterDescriptionArrayOutputWithContext(context.Background())
}

func (i SettingsParameterDescriptionArray) ToSettingsParameterDescriptionArrayOutputWithContext(ctx context.Context) SettingsParameterDescriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsParameterDescriptionArrayOutput)
}

// Describes a parameter in fabric settings of the cluster.
type SettingsParameterDescriptionOutput struct{ *pulumi.OutputState }

func (SettingsParameterDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingsParameterDescription)(nil)).Elem()
}

func (o SettingsParameterDescriptionOutput) ToSettingsParameterDescriptionOutput() SettingsParameterDescriptionOutput {
	return o
}

func (o SettingsParameterDescriptionOutput) ToSettingsParameterDescriptionOutputWithContext(ctx context.Context) SettingsParameterDescriptionOutput {
	return o
}

// The parameter name of fabric setting.
func (o SettingsParameterDescriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsParameterDescription) string { return v.Name }).(pulumi.StringOutput)
}

// The parameter value of fabric setting.
func (o SettingsParameterDescriptionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsParameterDescription) string { return v.Value }).(pulumi.StringOutput)
}

type SettingsParameterDescriptionArrayOutput struct{ *pulumi.OutputState }

func (SettingsParameterDescriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingsParameterDescription)(nil)).Elem()
}

func (o SettingsParameterDescriptionArrayOutput) ToSettingsParameterDescriptionArrayOutput() SettingsParameterDescriptionArrayOutput {
	return o
}

func (o SettingsParameterDescriptionArrayOutput) ToSettingsParameterDescriptionArrayOutputWithContext(ctx context.Context) SettingsParameterDescriptionArrayOutput {
	return o
}

func (o SettingsParameterDescriptionArrayOutput) Index(i pulumi.IntInput) SettingsParameterDescriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingsParameterDescription {
		return vs[0].([]SettingsParameterDescription)[vs[1].(int)]
	}).(SettingsParameterDescriptionOutput)
}

// Describes a parameter in fabric settings of the cluster.
type SettingsParameterDescriptionResponse struct {
	// The parameter name of fabric setting.
	Name string `pulumi:"name"`
	// The parameter value of fabric setting.
	Value string `pulumi:"value"`
}

// Describes a parameter in fabric settings of the cluster.
type SettingsParameterDescriptionResponseOutput struct{ *pulumi.OutputState }

func (SettingsParameterDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingsParameterDescriptionResponse)(nil)).Elem()
}

func (o SettingsParameterDescriptionResponseOutput) ToSettingsParameterDescriptionResponseOutput() SettingsParameterDescriptionResponseOutput {
	return o
}

func (o SettingsParameterDescriptionResponseOutput) ToSettingsParameterDescriptionResponseOutputWithContext(ctx context.Context) SettingsParameterDescriptionResponseOutput {
	return o
}

// The parameter name of fabric setting.
func (o SettingsParameterDescriptionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsParameterDescriptionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The parameter value of fabric setting.
func (o SettingsParameterDescriptionResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsParameterDescriptionResponse) string { return v.Value }).(pulumi.StringOutput)
}

type SettingsParameterDescriptionResponseArrayOutput struct{ *pulumi.OutputState }

func (SettingsParameterDescriptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingsParameterDescriptionResponse)(nil)).Elem()
}

func (o SettingsParameterDescriptionResponseArrayOutput) ToSettingsParameterDescriptionResponseArrayOutput() SettingsParameterDescriptionResponseArrayOutput {
	return o
}

func (o SettingsParameterDescriptionResponseArrayOutput) ToSettingsParameterDescriptionResponseArrayOutputWithContext(ctx context.Context) SettingsParameterDescriptionResponseArrayOutput {
	return o
}

func (o SettingsParameterDescriptionResponseArrayOutput) Index(i pulumi.IntInput) SettingsParameterDescriptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingsParameterDescriptionResponse {
		return vs[0].([]SettingsParameterDescriptionResponse)[vs[1].(int)]
	}).(SettingsParameterDescriptionResponseOutput)
}

// Describes a section in the fabric settings of the cluster.
type SettingsSectionDescription struct {
	// The section name of the fabric settings.
	Name string `pulumi:"name"`
	// The collection of parameters in the section.
	Parameters []SettingsParameterDescription `pulumi:"parameters"`
}

// SettingsSectionDescriptionInput is an input type that accepts SettingsSectionDescriptionArgs and SettingsSectionDescriptionOutput values.
// You can construct a concrete instance of `SettingsSectionDescriptionInput` via:
//
//	SettingsSectionDescriptionArgs{...}
type SettingsSectionDescriptionInput interface {
	pulumi.Input

	ToSettingsSectionDescriptionOutput() SettingsSectionDescriptionOutput
	ToSettingsSectionDescriptionOutputWithContext(context.Context) SettingsSectionDescriptionOutput
}

// Describes a section in the fabric settings of the cluster.
type SettingsSectionDescriptionArgs struct {
	// The section name of the fabric settings.
	Name pulumi.StringInput `pulumi:"name"`
	// The collection of parameters in the section.
	Parameters SettingsParameterDescriptionArrayInput `pulumi:"parameters"`
}

func (SettingsSectionDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingsSectionDescription)(nil)).Elem()
}

func (i SettingsSectionDescriptionArgs) ToSettingsSectionDescriptionOutput() SettingsSectionDescriptionOutput {
	return i.ToSettingsSectionDescriptionOutputWithContext(context.Background())
}

func (i SettingsSectionDescriptionArgs) ToSettingsSectionDescriptionOutputWithContext(ctx context.Context) SettingsSectionDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsSectionDescriptionOutput)
}

// SettingsSectionDescriptionArrayInput is an input type that accepts SettingsSectionDescriptionArray and SettingsSectionDescriptionArrayOutput values.
// You can construct a concrete instance of `SettingsSectionDescriptionArrayInput` via:
//
//	SettingsSectionDescriptionArray{ SettingsSectionDescriptionArgs{...} }
type SettingsSectionDescriptionArrayInput interface {
	pulumi.Input

	ToSettingsSectionDescriptionArrayOutput() SettingsSectionDescriptionArrayOutput
	ToSettingsSectionDescriptionArrayOutputWithContext(context.Context) SettingsSectionDescriptionArrayOutput
}

type SettingsSectionDescriptionArray []SettingsSectionDescriptionInput

func (SettingsSectionDescriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingsSectionDescription)(nil)).Elem()
}

func (i SettingsSectionDescriptionArray) ToSettingsSectionDescriptionArrayOutput() SettingsSectionDescriptionArrayOutput {
	return i.ToSettingsSectionDescriptionArrayOutputWithContext(context.Background())
}

func (i SettingsSectionDescriptionArray) ToSettingsSectionDescriptionArrayOutputWithContext(ctx context.Context) SettingsSectionDescriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsSectionDescriptionArrayOutput)
}

// Describes a section in the fabric settings of the cluster.
type SettingsSectionDescriptionOutput struct{ *pulumi.OutputState }

func (SettingsSectionDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingsSectionDescription)(nil)).Elem()
}

func (o SettingsSectionDescriptionOutput) ToSettingsSectionDescriptionOutput() SettingsSectionDescriptionOutput {
	return o
}

func (o SettingsSectionDescriptionOutput) ToSettingsSectionDescriptionOutputWithContext(ctx context.Context) SettingsSectionDescriptionOutput {
	return o
}

// The section name of the fabric settings.
func (o SettingsSectionDescriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsSectionDescription) string { return v.Name }).(pulumi.StringOutput)
}

// The collection of parameters in the section.
func (o SettingsSectionDescriptionOutput) Parameters() SettingsParameterDescriptionArrayOutput {
	return o.ApplyT(func(v SettingsSectionDescription) []SettingsParameterDescription { return v.Parameters }).(SettingsParameterDescriptionArrayOutput)
}

type SettingsSectionDescriptionArrayOutput struct{ *pulumi.OutputState }

func (SettingsSectionDescriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingsSectionDescription)(nil)).Elem()
}

func (o SettingsSectionDescriptionArrayOutput) ToSettingsSectionDescriptionArrayOutput() SettingsSectionDescriptionArrayOutput {
	return o
}

func (o SettingsSectionDescriptionArrayOutput) ToSettingsSectionDescriptionArrayOutputWithContext(ctx context.Context) SettingsSectionDescriptionArrayOutput {
	return o
}

func (o SettingsSectionDescriptionArrayOutput) Index(i pulumi.IntInput) SettingsSectionDescriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingsSectionDescription {
		return vs[0].([]SettingsSectionDescription)[vs[1].(int)]
	}).(SettingsSectionDescriptionOutput)
}

// Describes a section in the fabric settings of the cluster.
type SettingsSectionDescriptionResponse struct {
	// The section name of the fabric settings.
	Name string `pulumi:"name"`
	// The collection of parameters in the section.
	Parameters []SettingsParameterDescriptionResponse `pulumi:"parameters"`
}

// Describes a section in the fabric settings of the cluster.
type SettingsSectionDescriptionResponseOutput struct{ *pulumi.OutputState }

func (SettingsSectionDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingsSectionDescriptionResponse)(nil)).Elem()
}

func (o SettingsSectionDescriptionResponseOutput) ToSettingsSectionDescriptionResponseOutput() SettingsSectionDescriptionResponseOutput {
	return o
}

func (o SettingsSectionDescriptionResponseOutput) ToSettingsSectionDescriptionResponseOutputWithContext(ctx context.Context) SettingsSectionDescriptionResponseOutput {
	return o
}

// The section name of the fabric settings.
func (o SettingsSectionDescriptionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsSectionDescriptionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The collection of parameters in the section.
func (o SettingsSectionDescriptionResponseOutput) Parameters() SettingsParameterDescriptionResponseArrayOutput {
	return o.ApplyT(func(v SettingsSectionDescriptionResponse) []SettingsParameterDescriptionResponse { return v.Parameters }).(SettingsParameterDescriptionResponseArrayOutput)
}

type SettingsSectionDescriptionResponseArrayOutput struct{ *pulumi.OutputState }

func (SettingsSectionDescriptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingsSectionDescriptionResponse)(nil)).Elem()
}

func (o SettingsSectionDescriptionResponseArrayOutput) ToSettingsSectionDescriptionResponseArrayOutput() SettingsSectionDescriptionResponseArrayOutput {
	return o
}

func (o SettingsSectionDescriptionResponseArrayOutput) ToSettingsSectionDescriptionResponseArrayOutputWithContext(ctx context.Context) SettingsSectionDescriptionResponseArrayOutput {
	return o
}

func (o SettingsSectionDescriptionResponseArrayOutput) Index(i pulumi.IntInput) SettingsSectionDescriptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingsSectionDescriptionResponse {
		return vs[0].([]SettingsSectionDescriptionResponse)[vs[1].(int)]
	}).(SettingsSectionDescriptionResponseOutput)
}

// Describes the partition scheme of a singleton-partitioned, or non-partitioned service.
type SingletonPartitionSchemeDescription struct {
	// Enumerates the ways that a service can be partitioned.
	// Expected value is 'Singleton'.
	PartitionScheme string `pulumi:"partitionScheme"`
}

// Describes the partition scheme of a singleton-partitioned, or non-partitioned service.
type SingletonPartitionSchemeDescriptionResponse struct {
	// Enumerates the ways that a service can be partitioned.
	// Expected value is 'Singleton'.
	PartitionScheme string `pulumi:"partitionScheme"`
}

// Describes a partitioning scheme where an integer range is allocated evenly across a number of partitions.
type UniformInt64RangePartitionSchemeDescription struct {
	// The number of partitions.
	Count int `pulumi:"count"`
	// String indicating the upper bound of the partition key range that
	// should be split between the partition ‘Count’
	HighKey string `pulumi:"highKey"`
	// String indicating the lower bound of the partition key range that
	// should be split between the partition ‘Count’
	LowKey string `pulumi:"lowKey"`
	// Enumerates the ways that a service can be partitioned.
	// Expected value is 'UniformInt64Range'.
	PartitionScheme string `pulumi:"partitionScheme"`
}

// Describes a partitioning scheme where an integer range is allocated evenly across a number of partitions.
type UniformInt64RangePartitionSchemeDescriptionResponse struct {
	// The number of partitions.
	Count int `pulumi:"count"`
	// String indicating the upper bound of the partition key range that
	// should be split between the partition ‘Count’
	HighKey string `pulumi:"highKey"`
	// String indicating the lower bound of the partition key range that
	// should be split between the partition ‘Count’
	LowKey string `pulumi:"lowKey"`
	// Enumerates the ways that a service can be partitioned.
	// Expected value is 'UniformInt64Range'.
	PartitionScheme string `pulumi:"partitionScheme"`
}

func init() {
	pulumi.RegisterOutputType(ApplicationDeltaHealthPolicyOutput{})
	pulumi.RegisterOutputType(ApplicationDeltaHealthPolicyMapOutput{})
	pulumi.RegisterOutputType(ApplicationDeltaHealthPolicyResponseOutput{})
	pulumi.RegisterOutputType(ApplicationDeltaHealthPolicyResponseMapOutput{})
	pulumi.RegisterOutputType(ApplicationHealthPolicyOutput{})
	pulumi.RegisterOutputType(ApplicationHealthPolicyMapOutput{})
	pulumi.RegisterOutputType(ApplicationHealthPolicyResponseOutput{})
	pulumi.RegisterOutputType(ApplicationHealthPolicyResponseMapOutput{})
	pulumi.RegisterOutputType(ApplicationMetricDescriptionOutput{})
	pulumi.RegisterOutputType(ApplicationMetricDescriptionArrayOutput{})
	pulumi.RegisterOutputType(ApplicationMetricDescriptionResponseOutput{})
	pulumi.RegisterOutputType(ApplicationMetricDescriptionResponseArrayOutput{})
	pulumi.RegisterOutputType(ApplicationUpgradePolicyOutput{})
	pulumi.RegisterOutputType(ApplicationUpgradePolicyPtrOutput{})
	pulumi.RegisterOutputType(ApplicationUpgradePolicyResponseOutput{})
	pulumi.RegisterOutputType(ApplicationUpgradePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ArmApplicationHealthPolicyOutput{})
	pulumi.RegisterOutputType(ArmApplicationHealthPolicyPtrOutput{})
	pulumi.RegisterOutputType(ArmApplicationHealthPolicyResponseOutput{})
	pulumi.RegisterOutputType(ArmApplicationHealthPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ArmRollingUpgradeMonitoringPolicyOutput{})
	pulumi.RegisterOutputType(ArmRollingUpgradeMonitoringPolicyPtrOutput{})
	pulumi.RegisterOutputType(ArmRollingUpgradeMonitoringPolicyResponseOutput{})
	pulumi.RegisterOutputType(ArmRollingUpgradeMonitoringPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ArmServiceTypeHealthPolicyOutput{})
	pulumi.RegisterOutputType(ArmServiceTypeHealthPolicyPtrOutput{})
	pulumi.RegisterOutputType(ArmServiceTypeHealthPolicyMapOutput{})
	pulumi.RegisterOutputType(ArmServiceTypeHealthPolicyResponseOutput{})
	pulumi.RegisterOutputType(ArmServiceTypeHealthPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ArmServiceTypeHealthPolicyResponseMapOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryPtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryResponseOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryResponsePtrOutput{})
	pulumi.RegisterOutputType(CertificateDescriptionOutput{})
	pulumi.RegisterOutputType(CertificateDescriptionPtrOutput{})
	pulumi.RegisterOutputType(CertificateDescriptionResponseOutput{})
	pulumi.RegisterOutputType(CertificateDescriptionResponsePtrOutput{})
	pulumi.RegisterOutputType(ClientCertificateCommonNameOutput{})
	pulumi.RegisterOutputType(ClientCertificateCommonNameArrayOutput{})
	pulumi.RegisterOutputType(ClientCertificateCommonNameResponseOutput{})
	pulumi.RegisterOutputType(ClientCertificateCommonNameResponseArrayOutput{})
	pulumi.RegisterOutputType(ClientCertificateThumbprintOutput{})
	pulumi.RegisterOutputType(ClientCertificateThumbprintArrayOutput{})
	pulumi.RegisterOutputType(ClientCertificateThumbprintResponseOutput{})
	pulumi.RegisterOutputType(ClientCertificateThumbprintResponseArrayOutput{})
	pulumi.RegisterOutputType(ClusterHealthPolicyOutput{})
	pulumi.RegisterOutputType(ClusterHealthPolicyPtrOutput{})
	pulumi.RegisterOutputType(ClusterHealthPolicyResponseOutput{})
	pulumi.RegisterOutputType(ClusterHealthPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeDeltaHealthPolicyOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeDeltaHealthPolicyPtrOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeDeltaHealthPolicyResponseOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeDeltaHealthPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterUpgradePolicyOutput{})
	pulumi.RegisterOutputType(ClusterUpgradePolicyPtrOutput{})
	pulumi.RegisterOutputType(ClusterUpgradePolicyResponseOutput{})
	pulumi.RegisterOutputType(ClusterUpgradePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterVersionDetailsResponseOutput{})
	pulumi.RegisterOutputType(ClusterVersionDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(DiagnosticsStorageAccountConfigOutput{})
	pulumi.RegisterOutputType(DiagnosticsStorageAccountConfigPtrOutput{})
	pulumi.RegisterOutputType(DiagnosticsStorageAccountConfigResponseOutput{})
	pulumi.RegisterOutputType(DiagnosticsStorageAccountConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(EndpointRangeDescriptionOutput{})
	pulumi.RegisterOutputType(EndpointRangeDescriptionPtrOutput{})
	pulumi.RegisterOutputType(EndpointRangeDescriptionResponseOutput{})
	pulumi.RegisterOutputType(EndpointRangeDescriptionResponsePtrOutput{})
	pulumi.RegisterOutputType(NodeTypeDescriptionOutput{})
	pulumi.RegisterOutputType(NodeTypeDescriptionArrayOutput{})
	pulumi.RegisterOutputType(NodeTypeDescriptionResponseOutput{})
	pulumi.RegisterOutputType(NodeTypeDescriptionResponseArrayOutput{})
	pulumi.RegisterOutputType(ServerCertificateCommonNameOutput{})
	pulumi.RegisterOutputType(ServerCertificateCommonNameArrayOutput{})
	pulumi.RegisterOutputType(ServerCertificateCommonNameResponseOutput{})
	pulumi.RegisterOutputType(ServerCertificateCommonNameResponseArrayOutput{})
	pulumi.RegisterOutputType(ServerCertificateCommonNamesOutput{})
	pulumi.RegisterOutputType(ServerCertificateCommonNamesPtrOutput{})
	pulumi.RegisterOutputType(ServerCertificateCommonNamesResponseOutput{})
	pulumi.RegisterOutputType(ServerCertificateCommonNamesResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceCorrelationDescriptionOutput{})
	pulumi.RegisterOutputType(ServiceCorrelationDescriptionArrayOutput{})
	pulumi.RegisterOutputType(ServiceCorrelationDescriptionResponseOutput{})
	pulumi.RegisterOutputType(ServiceCorrelationDescriptionResponseArrayOutput{})
	pulumi.RegisterOutputType(ServiceLoadMetricDescriptionOutput{})
	pulumi.RegisterOutputType(ServiceLoadMetricDescriptionArrayOutput{})
	pulumi.RegisterOutputType(ServiceLoadMetricDescriptionResponseOutput{})
	pulumi.RegisterOutputType(ServiceLoadMetricDescriptionResponseArrayOutput{})
	pulumi.RegisterOutputType(ServicePlacementPolicyDescriptionOutput{})
	pulumi.RegisterOutputType(ServicePlacementPolicyDescriptionArrayOutput{})
	pulumi.RegisterOutputType(ServicePlacementPolicyDescriptionResponseOutput{})
	pulumi.RegisterOutputType(ServicePlacementPolicyDescriptionResponseArrayOutput{})
	pulumi.RegisterOutputType(ServiceTypeDeltaHealthPolicyOutput{})
	pulumi.RegisterOutputType(ServiceTypeDeltaHealthPolicyPtrOutput{})
	pulumi.RegisterOutputType(ServiceTypeDeltaHealthPolicyMapOutput{})
	pulumi.RegisterOutputType(ServiceTypeDeltaHealthPolicyResponseOutput{})
	pulumi.RegisterOutputType(ServiceTypeDeltaHealthPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceTypeDeltaHealthPolicyResponseMapOutput{})
	pulumi.RegisterOutputType(ServiceTypeHealthPolicyOutput{})
	pulumi.RegisterOutputType(ServiceTypeHealthPolicyPtrOutput{})
	pulumi.RegisterOutputType(ServiceTypeHealthPolicyMapOutput{})
	pulumi.RegisterOutputType(ServiceTypeHealthPolicyResponseOutput{})
	pulumi.RegisterOutputType(ServiceTypeHealthPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceTypeHealthPolicyResponseMapOutput{})
	pulumi.RegisterOutputType(SettingsParameterDescriptionOutput{})
	pulumi.RegisterOutputType(SettingsParameterDescriptionArrayOutput{})
	pulumi.RegisterOutputType(SettingsParameterDescriptionResponseOutput{})
	pulumi.RegisterOutputType(SettingsParameterDescriptionResponseArrayOutput{})
	pulumi.RegisterOutputType(SettingsSectionDescriptionOutput{})
	pulumi.RegisterOutputType(SettingsSectionDescriptionArrayOutput{})
	pulumi.RegisterOutputType(SettingsSectionDescriptionResponseOutput{})
	pulumi.RegisterOutputType(SettingsSectionDescriptionResponseArrayOutput{})
}
