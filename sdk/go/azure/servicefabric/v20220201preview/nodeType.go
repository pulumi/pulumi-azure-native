// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20220201preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
type NodeType struct {
	pulumi.CustomResourceState

	// Additional managed data disks.
	AdditionalDataDisks VmssDataDiskResponseArrayOutput `pulumi:"additionalDataDisks"`
	// The range of ports from which cluster assigned port to Service Fabric applications.
	ApplicationPorts EndpointRangeDescriptionResponsePtrOutput `pulumi:"applicationPorts"`
	// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
	Capacities pulumi.StringMapOutput `pulumi:"capacities"`
	// Managed data disk letter. It can not use the reserved letter C or D and it can not change after created.
	DataDiskLetter pulumi.StringPtrOutput `pulumi:"dataDiskLetter"`
	// Disk size for the managed disk attached to the vms on the node type in GBs.
	DataDiskSizeGB pulumi.IntPtrOutput `pulumi:"dataDiskSizeGB"`
	// Managed data disk type. Specifies the storage account type for the managed disk
	DataDiskType pulumi.StringPtrOutput `pulumi:"dataDiskType"`
	// Specifies whether the network interface is accelerated networking-enabled.
	EnableAcceleratedNetworking pulumi.BoolPtrOutput `pulumi:"enableAcceleratedNetworking"`
	// Enable or disable the Host Encryption for the virtual machines on the node type. This will enable the encryption for all the disks including Resource/Temp disk at host itself. Default: The Encryption at host will be disabled unless this property is set to true for the resource.
	EnableEncryptionAtHost pulumi.BoolPtrOutput `pulumi:"enableEncryptionAtHost"`
	// Specifies whether the node type should be overprovisioned. It is only allowed for stateless node types.
	EnableOverProvisioning pulumi.BoolPtrOutput `pulumi:"enableOverProvisioning"`
	// The range of ephemeral ports that nodes in this node type should be configured with.
	EphemeralPorts EndpointRangeDescriptionResponsePtrOutput `pulumi:"ephemeralPorts"`
	// Indicates the node type uses its own frontend configurations instead of the default one for the cluster. This setting can only be specified for non-primary node types and can not be added or removed after the node type is created.
	FrontendConfigurations FrontendConfigurationResponseArrayOutput `pulumi:"frontendConfigurations"`
	// Indicates the Service Fabric system services for the cluster will run on this node type. This setting cannot be changed once the node type is created.
	IsPrimary pulumi.BoolOutput `pulumi:"isPrimary"`
	// Indicates whether the node type will be Spot Virtual Machines. Azure will allocate the VMs if there is capacity available and the VMs can be evicted at any time.
	IsSpotVM pulumi.BoolPtrOutput `pulumi:"isSpotVM"`
	// Indicates if the node type can only host Stateless workloads.
	IsStateless pulumi.BoolPtrOutput `pulumi:"isStateless"`
	// Indicates if scale set associated with the node type can be composed of multiple placement groups.
	MultiplePlacementGroups pulumi.BoolPtrOutput `pulumi:"multiplePlacementGroups"`
	// Azure resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Network Security Rules for this node type. This setting can only be specified for node types that are configured with frontend configurations.
	NetworkSecurityRules NetworkSecurityRuleResponseArrayOutput `pulumi:"networkSecurityRules"`
	// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
	PlacementProperties pulumi.StringMapOutput `pulumi:"placementProperties"`
	// The provisioning state of the node type resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The node type sku.
	Sku NodeTypeSkuResponsePtrOutput `pulumi:"sku"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Azure resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Azure resource type.
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies whether the use public load balancer. If not specified and the node type doesn't have its own frontend configuration, it will be attached to the default load balancer. If the node type uses its own Load balancer and useDefaultPublicLoadBalancer is true, then the frontend has to be an Internal Load Balancer. If the node type uses its own Load balancer and useDefaultPublicLoadBalancer is false or not set, then the custom load balancer must include a public load balancer to provide outbound connectivity.
	UseDefaultPublicLoadBalancer pulumi.BoolPtrOutput `pulumi:"useDefaultPublicLoadBalancer"`
	// Specifies whether to use the temporary disk for the service fabric data root, in which case no managed data disk will be attached and the temporary disk will be used. It is only allowed for stateless node types.
	UseTempDataDisk pulumi.BoolPtrOutput `pulumi:"useTempDataDisk"`
	// Set of extensions that should be installed onto the virtual machines.
	VmExtensions VMSSExtensionResponseArrayOutput `pulumi:"vmExtensions"`
	// The offer type of the Azure Virtual Machines Marketplace image. For example, UbuntuServer or WindowsServer.
	VmImageOffer pulumi.StringPtrOutput `pulumi:"vmImageOffer"`
	// The publisher of the Azure Virtual Machines Marketplace image. For example, Canonical or MicrosoftWindowsServer.
	VmImagePublisher pulumi.StringPtrOutput `pulumi:"vmImagePublisher"`
	// The SKU of the Azure Virtual Machines Marketplace image. For example, 14.04.0-LTS or 2012-R2-Datacenter.
	VmImageSku pulumi.StringPtrOutput `pulumi:"vmImageSku"`
	// The version of the Azure Virtual Machines Marketplace image. A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
	VmImageVersion pulumi.StringPtrOutput `pulumi:"vmImageVersion"`
	// The number of nodes in the node type. <br /><br />**Values:** <br />-1 - Use when auto scale rules are configured or sku.capacity is defined <br /> 0 - Not supported <br /> >0 - Use for manual scale.
	VmInstanceCount pulumi.IntOutput `pulumi:"vmInstanceCount"`
	// Identities to assign to the virtual machine scale set under the node type.
	VmManagedIdentity VmManagedIdentityResponsePtrOutput `pulumi:"vmManagedIdentity"`
	// The secrets to install in the virtual machines.
	VmSecrets VaultSecretGroupResponseArrayOutput `pulumi:"vmSecrets"`
	// The size of virtual machines in the pool. All virtual machines in a pool are the same size. For example, Standard_D3.
	VmSize pulumi.StringPtrOutput `pulumi:"vmSize"`
	// Specifies the availability zones where the node type would span across. If the cluster is not spanning across availability zones, initiates az migration for the cluster.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewNodeType registers a new resource with the given unique name, arguments, and options.
func NewNodeType(ctx *pulumi.Context,
	name string, args *NodeTypeArgs, opts ...pulumi.ResourceOption) (*NodeType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.IsPrimary == nil {
		return nil, errors.New("invalid value for required argument 'IsPrimary'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.VmInstanceCount == nil {
		return nil, errors.New("invalid value for required argument 'VmInstanceCount'")
	}
	if isZero(args.EnableEncryptionAtHost) {
		args.EnableEncryptionAtHost = pulumi.BoolPtr(false)
	}
	if isZero(args.IsStateless) {
		args.IsStateless = pulumi.BoolPtr(false)
	}
	if isZero(args.MultiplePlacementGroups) {
		args.MultiplePlacementGroups = pulumi.BoolPtr(false)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:servicefabric:NodeType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20200101preview:NodeType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20210101preview:NodeType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20210501:NodeType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20210701preview:NodeType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20210901privatepreview:NodeType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20211101preview:NodeType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20220101:NodeType"),
		},
	})
	opts = append(opts, aliases)
	var resource NodeType
	err := ctx.RegisterResource("azure-native:servicefabric/v20220201preview:NodeType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodeType gets an existing NodeType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodeType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeTypeState, opts ...pulumi.ResourceOption) (*NodeType, error) {
	var resource NodeType
	err := ctx.ReadResource("azure-native:servicefabric/v20220201preview:NodeType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodeType resources.
type nodeTypeState struct {
}

type NodeTypeState struct {
}

func (NodeTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeTypeState)(nil)).Elem()
}

type nodeTypeArgs struct {
	// Additional managed data disks.
	AdditionalDataDisks []VmssDataDisk `pulumi:"additionalDataDisks"`
	// The range of ports from which cluster assigned port to Service Fabric applications.
	ApplicationPorts *EndpointRangeDescription `pulumi:"applicationPorts"`
	// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
	Capacities map[string]string `pulumi:"capacities"`
	// The name of the cluster resource.
	ClusterName string `pulumi:"clusterName"`
	// Managed data disk letter. It can not use the reserved letter C or D and it can not change after created.
	DataDiskLetter *string `pulumi:"dataDiskLetter"`
	// Disk size for the managed disk attached to the vms on the node type in GBs.
	DataDiskSizeGB *int `pulumi:"dataDiskSizeGB"`
	// Managed data disk type. Specifies the storage account type for the managed disk
	DataDiskType *string `pulumi:"dataDiskType"`
	// Specifies whether the network interface is accelerated networking-enabled.
	EnableAcceleratedNetworking *bool `pulumi:"enableAcceleratedNetworking"`
	// Enable or disable the Host Encryption for the virtual machines on the node type. This will enable the encryption for all the disks including Resource/Temp disk at host itself. Default: The Encryption at host will be disabled unless this property is set to true for the resource.
	EnableEncryptionAtHost *bool `pulumi:"enableEncryptionAtHost"`
	// Specifies whether the node type should be overprovisioned. It is only allowed for stateless node types.
	EnableOverProvisioning *bool `pulumi:"enableOverProvisioning"`
	// The range of ephemeral ports that nodes in this node type should be configured with.
	EphemeralPorts *EndpointRangeDescription `pulumi:"ephemeralPorts"`
	// Indicates the node type uses its own frontend configurations instead of the default one for the cluster. This setting can only be specified for non-primary node types and can not be added or removed after the node type is created.
	FrontendConfigurations []FrontendConfiguration `pulumi:"frontendConfigurations"`
	// Indicates the Service Fabric system services for the cluster will run on this node type. This setting cannot be changed once the node type is created.
	IsPrimary bool `pulumi:"isPrimary"`
	// Indicates whether the node type will be Spot Virtual Machines. Azure will allocate the VMs if there is capacity available and the VMs can be evicted at any time.
	IsSpotVM *bool `pulumi:"isSpotVM"`
	// Indicates if the node type can only host Stateless workloads.
	IsStateless *bool `pulumi:"isStateless"`
	// Indicates if scale set associated with the node type can be composed of multiple placement groups.
	MultiplePlacementGroups *bool `pulumi:"multiplePlacementGroups"`
	// The Network Security Rules for this node type. This setting can only be specified for node types that are configured with frontend configurations.
	NetworkSecurityRules []NetworkSecurityRule `pulumi:"networkSecurityRules"`
	// The name of the node type.
	NodeTypeName *string `pulumi:"nodeTypeName"`
	// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
	PlacementProperties map[string]string `pulumi:"placementProperties"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The node type sku.
	Sku *NodeTypeSku `pulumi:"sku"`
	// Azure resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Specifies whether the use public load balancer. If not specified and the node type doesn't have its own frontend configuration, it will be attached to the default load balancer. If the node type uses its own Load balancer and useDefaultPublicLoadBalancer is true, then the frontend has to be an Internal Load Balancer. If the node type uses its own Load balancer and useDefaultPublicLoadBalancer is false or not set, then the custom load balancer must include a public load balancer to provide outbound connectivity.
	UseDefaultPublicLoadBalancer *bool `pulumi:"useDefaultPublicLoadBalancer"`
	// Specifies whether to use the temporary disk for the service fabric data root, in which case no managed data disk will be attached and the temporary disk will be used. It is only allowed for stateless node types.
	UseTempDataDisk *bool `pulumi:"useTempDataDisk"`
	// Set of extensions that should be installed onto the virtual machines.
	VmExtensions []VMSSExtension `pulumi:"vmExtensions"`
	// The offer type of the Azure Virtual Machines Marketplace image. For example, UbuntuServer or WindowsServer.
	VmImageOffer *string `pulumi:"vmImageOffer"`
	// The publisher of the Azure Virtual Machines Marketplace image. For example, Canonical or MicrosoftWindowsServer.
	VmImagePublisher *string `pulumi:"vmImagePublisher"`
	// The SKU of the Azure Virtual Machines Marketplace image. For example, 14.04.0-LTS or 2012-R2-Datacenter.
	VmImageSku *string `pulumi:"vmImageSku"`
	// The version of the Azure Virtual Machines Marketplace image. A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
	VmImageVersion *string `pulumi:"vmImageVersion"`
	// The number of nodes in the node type. <br /><br />**Values:** <br />-1 - Use when auto scale rules are configured or sku.capacity is defined <br /> 0 - Not supported <br /> >0 - Use for manual scale.
	VmInstanceCount int `pulumi:"vmInstanceCount"`
	// Identities to assign to the virtual machine scale set under the node type.
	VmManagedIdentity *VmManagedIdentity `pulumi:"vmManagedIdentity"`
	// The secrets to install in the virtual machines.
	VmSecrets []VaultSecretGroup `pulumi:"vmSecrets"`
	// The size of virtual machines in the pool. All virtual machines in a pool are the same size. For example, Standard_D3.
	VmSize *string `pulumi:"vmSize"`
	// Specifies the availability zones where the node type would span across. If the cluster is not spanning across availability zones, initiates az migration for the cluster.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a NodeType resource.
type NodeTypeArgs struct {
	// Additional managed data disks.
	AdditionalDataDisks VmssDataDiskArrayInput
	// The range of ports from which cluster assigned port to Service Fabric applications.
	ApplicationPorts EndpointRangeDescriptionPtrInput
	// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
	Capacities pulumi.StringMapInput
	// The name of the cluster resource.
	ClusterName pulumi.StringInput
	// Managed data disk letter. It can not use the reserved letter C or D and it can not change after created.
	DataDiskLetter pulumi.StringPtrInput
	// Disk size for the managed disk attached to the vms on the node type in GBs.
	DataDiskSizeGB pulumi.IntPtrInput
	// Managed data disk type. Specifies the storage account type for the managed disk
	DataDiskType pulumi.StringPtrInput
	// Specifies whether the network interface is accelerated networking-enabled.
	EnableAcceleratedNetworking pulumi.BoolPtrInput
	// Enable or disable the Host Encryption for the virtual machines on the node type. This will enable the encryption for all the disks including Resource/Temp disk at host itself. Default: The Encryption at host will be disabled unless this property is set to true for the resource.
	EnableEncryptionAtHost pulumi.BoolPtrInput
	// Specifies whether the node type should be overprovisioned. It is only allowed for stateless node types.
	EnableOverProvisioning pulumi.BoolPtrInput
	// The range of ephemeral ports that nodes in this node type should be configured with.
	EphemeralPorts EndpointRangeDescriptionPtrInput
	// Indicates the node type uses its own frontend configurations instead of the default one for the cluster. This setting can only be specified for non-primary node types and can not be added or removed after the node type is created.
	FrontendConfigurations FrontendConfigurationArrayInput
	// Indicates the Service Fabric system services for the cluster will run on this node type. This setting cannot be changed once the node type is created.
	IsPrimary pulumi.BoolInput
	// Indicates whether the node type will be Spot Virtual Machines. Azure will allocate the VMs if there is capacity available and the VMs can be evicted at any time.
	IsSpotVM pulumi.BoolPtrInput
	// Indicates if the node type can only host Stateless workloads.
	IsStateless pulumi.BoolPtrInput
	// Indicates if scale set associated with the node type can be composed of multiple placement groups.
	MultiplePlacementGroups pulumi.BoolPtrInput
	// The Network Security Rules for this node type. This setting can only be specified for node types that are configured with frontend configurations.
	NetworkSecurityRules NetworkSecurityRuleArrayInput
	// The name of the node type.
	NodeTypeName pulumi.StringPtrInput
	// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
	PlacementProperties pulumi.StringMapInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The node type sku.
	Sku NodeTypeSkuPtrInput
	// Azure resource tags.
	Tags pulumi.StringMapInput
	// Specifies whether the use public load balancer. If not specified and the node type doesn't have its own frontend configuration, it will be attached to the default load balancer. If the node type uses its own Load balancer and useDefaultPublicLoadBalancer is true, then the frontend has to be an Internal Load Balancer. If the node type uses its own Load balancer and useDefaultPublicLoadBalancer is false or not set, then the custom load balancer must include a public load balancer to provide outbound connectivity.
	UseDefaultPublicLoadBalancer pulumi.BoolPtrInput
	// Specifies whether to use the temporary disk for the service fabric data root, in which case no managed data disk will be attached and the temporary disk will be used. It is only allowed for stateless node types.
	UseTempDataDisk pulumi.BoolPtrInput
	// Set of extensions that should be installed onto the virtual machines.
	VmExtensions VMSSExtensionArrayInput
	// The offer type of the Azure Virtual Machines Marketplace image. For example, UbuntuServer or WindowsServer.
	VmImageOffer pulumi.StringPtrInput
	// The publisher of the Azure Virtual Machines Marketplace image. For example, Canonical or MicrosoftWindowsServer.
	VmImagePublisher pulumi.StringPtrInput
	// The SKU of the Azure Virtual Machines Marketplace image. For example, 14.04.0-LTS or 2012-R2-Datacenter.
	VmImageSku pulumi.StringPtrInput
	// The version of the Azure Virtual Machines Marketplace image. A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
	VmImageVersion pulumi.StringPtrInput
	// The number of nodes in the node type. <br /><br />**Values:** <br />-1 - Use when auto scale rules are configured or sku.capacity is defined <br /> 0 - Not supported <br /> >0 - Use for manual scale.
	VmInstanceCount pulumi.IntInput
	// Identities to assign to the virtual machine scale set under the node type.
	VmManagedIdentity VmManagedIdentityPtrInput
	// The secrets to install in the virtual machines.
	VmSecrets VaultSecretGroupArrayInput
	// The size of virtual machines in the pool. All virtual machines in a pool are the same size. For example, Standard_D3.
	VmSize pulumi.StringPtrInput
	// Specifies the availability zones where the node type would span across. If the cluster is not spanning across availability zones, initiates az migration for the cluster.
	Zones pulumi.StringArrayInput
}

func (NodeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeTypeArgs)(nil)).Elem()
}

type NodeTypeInput interface {
	pulumi.Input

	ToNodeTypeOutput() NodeTypeOutput
	ToNodeTypeOutputWithContext(ctx context.Context) NodeTypeOutput
}

func (*NodeType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeType)(nil)).Elem()
}

func (i *NodeType) ToNodeTypeOutput() NodeTypeOutput {
	return i.ToNodeTypeOutputWithContext(context.Background())
}

func (i *NodeType) ToNodeTypeOutputWithContext(ctx context.Context) NodeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTypeOutput)
}

type NodeTypeOutput struct{ *pulumi.OutputState }

func (NodeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeType)(nil)).Elem()
}

func (o NodeTypeOutput) ToNodeTypeOutput() NodeTypeOutput {
	return o
}

func (o NodeTypeOutput) ToNodeTypeOutputWithContext(ctx context.Context) NodeTypeOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(NodeTypeOutput{})
}
