// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20140901

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Single item in List or Get Event Hub operation
//
// Deprecated: Version 2014-09-01 will be removed in v2 of the provider.
type EventHub struct {
	pulumi.CustomResourceState

	// Exact time the Event Hub was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Resource location
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Number of days to retain the events for this Event Hub.
	MessageRetentionInDays pulumi.Float64PtrOutput `pulumi:"messageRetentionInDays"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of partitions created for the Event Hub.
	PartitionCount pulumi.Float64PtrOutput `pulumi:"partitionCount"`
	// Current number of shards on the Event Hub.
	PartitionIds pulumi.StringArrayOutput `pulumi:"partitionIds"`
	// Enumerates the possible values for the status of the Event Hub.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
	// The exact time the message was updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewEventHub registers a new resource with the given unique name, arguments, and options.
func NewEventHub(ctx *pulumi.Context,
	name string, args *EventHubArgs, opts ...pulumi.ResourceOption) (*EventHub, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:eventhub:EventHub"),
		},
		{
			Type: pulumi.String("azure-native:eventhub/v20150801:EventHub"),
		},
		{
			Type: pulumi.String("azure-native:eventhub/v20170401:EventHub"),
		},
		{
			Type: pulumi.String("azure-native:eventhub/v20180101preview:EventHub"),
		},
		{
			Type: pulumi.String("azure-native:eventhub/v20210101preview:EventHub"),
		},
		{
			Type: pulumi.String("azure-native:eventhub/v20210601preview:EventHub"),
		},
		{
			Type: pulumi.String("azure-native:eventhub/v20211101:EventHub"),
		},
		{
			Type: pulumi.String("azure-native:eventhub/v20220101preview:EventHub"),
		},
	})
	opts = append(opts, aliases)
	var resource EventHub
	err := ctx.RegisterResource("azure-native:eventhub/v20140901:EventHub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventHub gets an existing EventHub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventHub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventHubState, opts ...pulumi.ResourceOption) (*EventHub, error) {
	var resource EventHub
	err := ctx.ReadResource("azure-native:eventhub/v20140901:EventHub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventHub resources.
type eventHubState struct {
}

type EventHubState struct {
}

func (EventHubState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventHubState)(nil)).Elem()
}

type eventHubArgs struct {
	// The Event Hub name
	EventHubName *string `pulumi:"eventHubName"`
	// Location of the resource.
	Location *string `pulumi:"location"`
	// Number of days to retain the events for this Event Hub.
	MessageRetentionInDays *float64 `pulumi:"messageRetentionInDays"`
	// Name of the Event Hub.
	Name *string `pulumi:"name"`
	// The Namespace name
	NamespaceName string `pulumi:"namespaceName"`
	// Number of partitions created for the Event Hub.
	PartitionCount *float64 `pulumi:"partitionCount"`
	// Name of the resource group within the azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Enumerates the possible values for the status of the Event Hub.
	Status *EntityStatus `pulumi:"status"`
	// ARM type of the Namespace.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a EventHub resource.
type EventHubArgs struct {
	// The Event Hub name
	EventHubName pulumi.StringPtrInput
	// Location of the resource.
	Location pulumi.StringPtrInput
	// Number of days to retain the events for this Event Hub.
	MessageRetentionInDays pulumi.Float64PtrInput
	// Name of the Event Hub.
	Name pulumi.StringPtrInput
	// The Namespace name
	NamespaceName pulumi.StringInput
	// Number of partitions created for the Event Hub.
	PartitionCount pulumi.Float64PtrInput
	// Name of the resource group within the azure subscription.
	ResourceGroupName pulumi.StringInput
	// Enumerates the possible values for the status of the Event Hub.
	Status EntityStatusPtrInput
	// ARM type of the Namespace.
	Type pulumi.StringPtrInput
}

func (EventHubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventHubArgs)(nil)).Elem()
}

type EventHubInput interface {
	pulumi.Input

	ToEventHubOutput() EventHubOutput
	ToEventHubOutputWithContext(ctx context.Context) EventHubOutput
}

func (*EventHub) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHub)(nil)).Elem()
}

func (i *EventHub) ToEventHubOutput() EventHubOutput {
	return i.ToEventHubOutputWithContext(context.Background())
}

func (i *EventHub) ToEventHubOutputWithContext(ctx context.Context) EventHubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubOutput)
}

type EventHubOutput struct{ *pulumi.OutputState }

func (EventHubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHub)(nil)).Elem()
}

func (o EventHubOutput) ToEventHubOutput() EventHubOutput {
	return o
}

func (o EventHubOutput) ToEventHubOutputWithContext(ctx context.Context) EventHubOutput {
	return o
}

// Exact time the Event Hub was created.
func (o EventHubOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHub) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Resource location
func (o EventHubOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHub) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Number of days to retain the events for this Event Hub.
func (o EventHubOutput) MessageRetentionInDays() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *EventHub) pulumi.Float64PtrOutput { return v.MessageRetentionInDays }).(pulumi.Float64PtrOutput)
}

// Resource name
func (o EventHubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHub) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of partitions created for the Event Hub.
func (o EventHubOutput) PartitionCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *EventHub) pulumi.Float64PtrOutput { return v.PartitionCount }).(pulumi.Float64PtrOutput)
}

// Current number of shards on the Event Hub.
func (o EventHubOutput) PartitionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventHub) pulumi.StringArrayOutput { return v.PartitionIds }).(pulumi.StringArrayOutput)
}

// Enumerates the possible values for the status of the Event Hub.
func (o EventHubOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHub) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// Resource type
func (o EventHubOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHub) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The exact time the message was updated.
func (o EventHubOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHub) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(EventHubOutput{})
}
