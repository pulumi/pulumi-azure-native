// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180101preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Single item in List or Get Consumer group operation
func LookupConsumerGroup(ctx *pulumi.Context, args *LookupConsumerGroupArgs, opts ...pulumi.InvokeOption) (*LookupConsumerGroupResult, error) {
	var rv LookupConsumerGroupResult
	err := ctx.Invoke("azure-native:eventhub/v20180101preview:getConsumerGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupConsumerGroupArgs struct {
	// The consumer group name
	ConsumerGroupName string `pulumi:"consumerGroupName"`
	// The Event Hub name
	EventHubName string `pulumi:"eventHubName"`
	// The Namespace name
	NamespaceName string `pulumi:"namespaceName"`
	// Name of the resource group within the azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Single item in List or Get Consumer group operation
type LookupConsumerGroupResult struct {
	// Exact time the message was created.
	CreatedAt string `pulumi:"createdAt"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
	// The exact time the message was updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// User Metadata is a placeholder to store user-defined string data with maximum length 1024. e.g. it can be used to store descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
	UserMetadata *string `pulumi:"userMetadata"`
}

func LookupConsumerGroupOutput(ctx *pulumi.Context, args LookupConsumerGroupOutputArgs, opts ...pulumi.InvokeOption) LookupConsumerGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupConsumerGroupResult, error) {
			args := v.(LookupConsumerGroupArgs)
			r, err := LookupConsumerGroup(ctx, &args, opts...)
			var s LookupConsumerGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupConsumerGroupResultOutput)
}

type LookupConsumerGroupOutputArgs struct {
	// The consumer group name
	ConsumerGroupName pulumi.StringInput `pulumi:"consumerGroupName"`
	// The Event Hub name
	EventHubName pulumi.StringInput `pulumi:"eventHubName"`
	// The Namespace name
	NamespaceName pulumi.StringInput `pulumi:"namespaceName"`
	// Name of the resource group within the azure subscription.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupConsumerGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConsumerGroupArgs)(nil)).Elem()
}

// Single item in List or Get Consumer group operation
type LookupConsumerGroupResultOutput struct{ *pulumi.OutputState }

func (LookupConsumerGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConsumerGroupResult)(nil)).Elem()
}

func (o LookupConsumerGroupResultOutput) ToLookupConsumerGroupResultOutput() LookupConsumerGroupResultOutput {
	return o
}

func (o LookupConsumerGroupResultOutput) ToLookupConsumerGroupResultOutputWithContext(ctx context.Context) LookupConsumerGroupResultOutput {
	return o
}

// Exact time the message was created.
func (o LookupConsumerGroupResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConsumerGroupResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupConsumerGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConsumerGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupConsumerGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConsumerGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupConsumerGroupResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConsumerGroupResult) string { return v.Type }).(pulumi.StringOutput)
}

// The exact time the message was updated.
func (o LookupConsumerGroupResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConsumerGroupResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// User Metadata is a placeholder to store user-defined string data with maximum length 1024. e.g. it can be used to store descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
func (o LookupConsumerGroupResultOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConsumerGroupResult) *string { return v.UserMetadata }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConsumerGroupResultOutput{})
}
