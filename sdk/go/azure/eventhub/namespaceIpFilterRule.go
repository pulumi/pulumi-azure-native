// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventhub

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Single item in a List or Get IpFilterRules operation
// API Version: 2018-01-01-preview.
type NamespaceIpFilterRule struct {
	pulumi.CustomResourceState

	// The IP Filter Action
	Action pulumi.StringPtrOutput `pulumi:"action"`
	// IP Filter name
	FilterName pulumi.StringPtrOutput `pulumi:"filterName"`
	// IP Mask
	IpMask pulumi.StringPtrOutput `pulumi:"ipMask"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNamespaceIpFilterRule registers a new resource with the given unique name, arguments, and options.
func NewNamespaceIpFilterRule(ctx *pulumi.Context,
	name string, args *NamespaceIpFilterRuleArgs, opts ...pulumi.ResourceOption) (*NamespaceIpFilterRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:eventhub/v20180101preview:NamespaceIpFilterRule"),
		},
	})
	opts = append(opts, aliases)
	var resource NamespaceIpFilterRule
	err := ctx.RegisterResource("azure-native:eventhub:NamespaceIpFilterRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespaceIpFilterRule gets an existing NamespaceIpFilterRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespaceIpFilterRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceIpFilterRuleState, opts ...pulumi.ResourceOption) (*NamespaceIpFilterRule, error) {
	var resource NamespaceIpFilterRule
	err := ctx.ReadResource("azure-native:eventhub:NamespaceIpFilterRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamespaceIpFilterRule resources.
type namespaceIpFilterRuleState struct {
}

type NamespaceIpFilterRuleState struct {
}

func (NamespaceIpFilterRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceIpFilterRuleState)(nil)).Elem()
}

type namespaceIpFilterRuleArgs struct {
	// The IP Filter Action
	Action *string `pulumi:"action"`
	// IP Filter name
	FilterName *string `pulumi:"filterName"`
	// The IP Filter Rule name.
	IpFilterRuleName *string `pulumi:"ipFilterRuleName"`
	// IP Mask
	IpMask *string `pulumi:"ipMask"`
	// The Namespace name
	NamespaceName string `pulumi:"namespaceName"`
	// Name of the resource group within the azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a NamespaceIpFilterRule resource.
type NamespaceIpFilterRuleArgs struct {
	// The IP Filter Action
	Action pulumi.StringPtrInput
	// IP Filter name
	FilterName pulumi.StringPtrInput
	// The IP Filter Rule name.
	IpFilterRuleName pulumi.StringPtrInput
	// IP Mask
	IpMask pulumi.StringPtrInput
	// The Namespace name
	NamespaceName pulumi.StringInput
	// Name of the resource group within the azure subscription.
	ResourceGroupName pulumi.StringInput
}

func (NamespaceIpFilterRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceIpFilterRuleArgs)(nil)).Elem()
}

type NamespaceIpFilterRuleInput interface {
	pulumi.Input

	ToNamespaceIpFilterRuleOutput() NamespaceIpFilterRuleOutput
	ToNamespaceIpFilterRuleOutputWithContext(ctx context.Context) NamespaceIpFilterRuleOutput
}

func (*NamespaceIpFilterRule) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceIpFilterRule)(nil)).Elem()
}

func (i *NamespaceIpFilterRule) ToNamespaceIpFilterRuleOutput() NamespaceIpFilterRuleOutput {
	return i.ToNamespaceIpFilterRuleOutputWithContext(context.Background())
}

func (i *NamespaceIpFilterRule) ToNamespaceIpFilterRuleOutputWithContext(ctx context.Context) NamespaceIpFilterRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceIpFilterRuleOutput)
}

type NamespaceIpFilterRuleOutput struct{ *pulumi.OutputState }

func (NamespaceIpFilterRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceIpFilterRule)(nil)).Elem()
}

func (o NamespaceIpFilterRuleOutput) ToNamespaceIpFilterRuleOutput() NamespaceIpFilterRuleOutput {
	return o
}

func (o NamespaceIpFilterRuleOutput) ToNamespaceIpFilterRuleOutputWithContext(ctx context.Context) NamespaceIpFilterRuleOutput {
	return o
}

// The IP Filter Action
func (o NamespaceIpFilterRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceIpFilterRule) pulumi.StringPtrOutput { return v.Action }).(pulumi.StringPtrOutput)
}

// IP Filter name
func (o NamespaceIpFilterRuleOutput) FilterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceIpFilterRule) pulumi.StringPtrOutput { return v.FilterName }).(pulumi.StringPtrOutput)
}

// IP Mask
func (o NamespaceIpFilterRuleOutput) IpMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceIpFilterRule) pulumi.StringPtrOutput { return v.IpMask }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o NamespaceIpFilterRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceIpFilterRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o NamespaceIpFilterRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceIpFilterRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(NamespaceIpFilterRuleOutput{})
}
