// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211101

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Description of topic resource.
type NamespaceNetworkRuleSet struct {
	pulumi.CustomResourceState

	// Default Action for Network Rule Set
	DefaultAction pulumi.StringPtrOutput `pulumi:"defaultAction"`
	// List of IpRules
	IpRules NWRuleSetIpRulesResponseArrayOutput `pulumi:"ipRules"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// This determines if traffic is allowed over public network. By default it is enabled.
	PublicNetworkAccess pulumi.StringPtrOutput `pulumi:"publicNetworkAccess"`
	// The system meta data relating to this resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Value that indicates whether Trusted Service Access is Enabled or not.
	TrustedServiceAccessEnabled pulumi.BoolPtrOutput `pulumi:"trustedServiceAccessEnabled"`
	// The type of the resource. E.g. "Microsoft.EventHub/Namespaces" or "Microsoft.EventHub/Namespaces/EventHubs"
	Type pulumi.StringOutput `pulumi:"type"`
	// List VirtualNetwork Rules
	VirtualNetworkRules NWRuleSetVirtualNetworkRulesResponseArrayOutput `pulumi:"virtualNetworkRules"`
}

// NewNamespaceNetworkRuleSet registers a new resource with the given unique name, arguments, and options.
func NewNamespaceNetworkRuleSet(ctx *pulumi.Context,
	name string, args *NamespaceNetworkRuleSetArgs, opts ...pulumi.ResourceOption) (*NamespaceNetworkRuleSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if isZero(args.PublicNetworkAccess) {
		args.PublicNetworkAccess = pulumi.StringPtr("Enabled")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:eventhub:NamespaceNetworkRuleSet"),
		},
		{
			Type: pulumi.String("azure-native:eventhub/v20170401:NamespaceNetworkRuleSet"),
		},
		{
			Type: pulumi.String("azure-native:eventhub/v20180101preview:NamespaceNetworkRuleSet"),
		},
		{
			Type: pulumi.String("azure-native:eventhub/v20210101preview:NamespaceNetworkRuleSet"),
		},
		{
			Type: pulumi.String("azure-native:eventhub/v20210601preview:NamespaceNetworkRuleSet"),
		},
		{
			Type: pulumi.String("azure-native:eventhub/v20220101preview:NamespaceNetworkRuleSet"),
		},
	})
	opts = append(opts, aliases)
	var resource NamespaceNetworkRuleSet
	err := ctx.RegisterResource("azure-native:eventhub/v20211101:NamespaceNetworkRuleSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespaceNetworkRuleSet gets an existing NamespaceNetworkRuleSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespaceNetworkRuleSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceNetworkRuleSetState, opts ...pulumi.ResourceOption) (*NamespaceNetworkRuleSet, error) {
	var resource NamespaceNetworkRuleSet
	err := ctx.ReadResource("azure-native:eventhub/v20211101:NamespaceNetworkRuleSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamespaceNetworkRuleSet resources.
type namespaceNetworkRuleSetState struct {
}

type NamespaceNetworkRuleSetState struct {
}

func (NamespaceNetworkRuleSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceNetworkRuleSetState)(nil)).Elem()
}

type namespaceNetworkRuleSetArgs struct {
	// Default Action for Network Rule Set
	DefaultAction *string `pulumi:"defaultAction"`
	// List of IpRules
	IpRules []NWRuleSetIpRules `pulumi:"ipRules"`
	// The Namespace name
	NamespaceName string `pulumi:"namespaceName"`
	// This determines if traffic is allowed over public network. By default it is enabled.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// Name of the resource group within the azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Value that indicates whether Trusted Service Access is Enabled or not.
	TrustedServiceAccessEnabled *bool `pulumi:"trustedServiceAccessEnabled"`
	// List VirtualNetwork Rules
	VirtualNetworkRules []NWRuleSetVirtualNetworkRules `pulumi:"virtualNetworkRules"`
}

// The set of arguments for constructing a NamespaceNetworkRuleSet resource.
type NamespaceNetworkRuleSetArgs struct {
	// Default Action for Network Rule Set
	DefaultAction pulumi.StringPtrInput
	// List of IpRules
	IpRules NWRuleSetIpRulesArrayInput
	// The Namespace name
	NamespaceName pulumi.StringInput
	// This determines if traffic is allowed over public network. By default it is enabled.
	PublicNetworkAccess pulumi.StringPtrInput
	// Name of the resource group within the azure subscription.
	ResourceGroupName pulumi.StringInput
	// Value that indicates whether Trusted Service Access is Enabled or not.
	TrustedServiceAccessEnabled pulumi.BoolPtrInput
	// List VirtualNetwork Rules
	VirtualNetworkRules NWRuleSetVirtualNetworkRulesArrayInput
}

func (NamespaceNetworkRuleSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceNetworkRuleSetArgs)(nil)).Elem()
}

type NamespaceNetworkRuleSetInput interface {
	pulumi.Input

	ToNamespaceNetworkRuleSetOutput() NamespaceNetworkRuleSetOutput
	ToNamespaceNetworkRuleSetOutputWithContext(ctx context.Context) NamespaceNetworkRuleSetOutput
}

func (*NamespaceNetworkRuleSet) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceNetworkRuleSet)(nil)).Elem()
}

func (i *NamespaceNetworkRuleSet) ToNamespaceNetworkRuleSetOutput() NamespaceNetworkRuleSetOutput {
	return i.ToNamespaceNetworkRuleSetOutputWithContext(context.Background())
}

func (i *NamespaceNetworkRuleSet) ToNamespaceNetworkRuleSetOutputWithContext(ctx context.Context) NamespaceNetworkRuleSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceNetworkRuleSetOutput)
}

type NamespaceNetworkRuleSetOutput struct{ *pulumi.OutputState }

func (NamespaceNetworkRuleSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceNetworkRuleSet)(nil)).Elem()
}

func (o NamespaceNetworkRuleSetOutput) ToNamespaceNetworkRuleSetOutput() NamespaceNetworkRuleSetOutput {
	return o
}

func (o NamespaceNetworkRuleSetOutput) ToNamespaceNetworkRuleSetOutputWithContext(ctx context.Context) NamespaceNetworkRuleSetOutput {
	return o
}

// Default Action for Network Rule Set
func (o NamespaceNetworkRuleSetOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceNetworkRuleSet) pulumi.StringPtrOutput { return v.DefaultAction }).(pulumi.StringPtrOutput)
}

// List of IpRules
func (o NamespaceNetworkRuleSetOutput) IpRules() NWRuleSetIpRulesResponseArrayOutput {
	return o.ApplyT(func(v *NamespaceNetworkRuleSet) NWRuleSetIpRulesResponseArrayOutput { return v.IpRules }).(NWRuleSetIpRulesResponseArrayOutput)
}

// The geo-location where the resource lives
func (o NamespaceNetworkRuleSetOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceNetworkRuleSet) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o NamespaceNetworkRuleSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceNetworkRuleSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// This determines if traffic is allowed over public network. By default it is enabled.
func (o NamespaceNetworkRuleSetOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceNetworkRuleSet) pulumi.StringPtrOutput { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// The system meta data relating to this resource.
func (o NamespaceNetworkRuleSetOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *NamespaceNetworkRuleSet) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Value that indicates whether Trusted Service Access is Enabled or not.
func (o NamespaceNetworkRuleSetOutput) TrustedServiceAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NamespaceNetworkRuleSet) pulumi.BoolPtrOutput { return v.TrustedServiceAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The type of the resource. E.g. "Microsoft.EventHub/Namespaces" or "Microsoft.EventHub/Namespaces/EventHubs"
func (o NamespaceNetworkRuleSetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NamespaceNetworkRuleSet) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// List VirtualNetwork Rules
func (o NamespaceNetworkRuleSetOutput) VirtualNetworkRules() NWRuleSetVirtualNetworkRulesResponseArrayOutput {
	return o.ApplyT(func(v *NamespaceNetworkRuleSet) NWRuleSetVirtualNetworkRulesResponseArrayOutput {
		return v.VirtualNetworkRules
	}).(NWRuleSetVirtualNetworkRulesResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(NamespaceNetworkRuleSetOutput{})
}
