// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20201001preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ADLSGen2 storage account data set mapping.
type ADLSGen2StorageAccountDataSetMapping struct {
	pulumi.CustomResourceState

	// Gets or sets the container name.
	ContainerName pulumi.StringOutput `pulumi:"containerName"`
	// The id of the source data set.
	DataSetId pulumi.StringOutput `pulumi:"dataSetId"`
	// Gets the status of the data set mapping.
	DataSetMappingStatus pulumi.StringOutput `pulumi:"dataSetMappingStatus"`
	// Gets or sets the path to folder within the container.
	Folder pulumi.StringOutput `pulumi:"folder"`
	// Kind of data set mapping.
	// Expected value is 'AdlsGen2StorageAccount'.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Location of the sink storage account.
	Location pulumi.StringOutput `pulumi:"location"`
	// Gets or sets the mount path
	MountPath pulumi.StringPtrOutput `pulumi:"mountPath"`
	// Name of the azure resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of the data set mapping.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Resource id of the sink storage account
	StorageAccountResourceId pulumi.StringOutput `pulumi:"storageAccountResourceId"`
	// System Data of the Azure resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Type of the azure resource
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewADLSGen2StorageAccountDataSetMapping registers a new resource with the given unique name, arguments, and options.
func NewADLSGen2StorageAccountDataSetMapping(ctx *pulumi.Context,
	name string, args *ADLSGen2StorageAccountDataSetMappingArgs, opts ...pulumi.ResourceOption) (*ADLSGen2StorageAccountDataSetMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.ContainerName == nil {
		return nil, errors.New("invalid value for required argument 'ContainerName'")
	}
	if args.DataSetId == nil {
		return nil, errors.New("invalid value for required argument 'DataSetId'")
	}
	if args.Folder == nil {
		return nil, errors.New("invalid value for required argument 'Folder'")
	}
	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ShareSubscriptionName == nil {
		return nil, errors.New("invalid value for required argument 'ShareSubscriptionName'")
	}
	if args.StorageAccountResourceId == nil {
		return nil, errors.New("invalid value for required argument 'StorageAccountResourceId'")
	}
	args.Kind = pulumi.String("AdlsGen2StorageAccount")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:datashare:ADLSGen2StorageAccountDataSetMapping"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20181101preview:ADLSGen2StorageAccountDataSetMapping"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20191101:ADLSGen2StorageAccountDataSetMapping"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20200901:ADLSGen2StorageAccountDataSetMapping"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20210801:ADLSGen2StorageAccountDataSetMapping"),
		},
	})
	opts = append(opts, aliases)
	var resource ADLSGen2StorageAccountDataSetMapping
	err := ctx.RegisterResource("azure-native:datashare/v20201001preview:ADLSGen2StorageAccountDataSetMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetADLSGen2StorageAccountDataSetMapping gets an existing ADLSGen2StorageAccountDataSetMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetADLSGen2StorageAccountDataSetMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ADLSGen2StorageAccountDataSetMappingState, opts ...pulumi.ResourceOption) (*ADLSGen2StorageAccountDataSetMapping, error) {
	var resource ADLSGen2StorageAccountDataSetMapping
	err := ctx.ReadResource("azure-native:datashare/v20201001preview:ADLSGen2StorageAccountDataSetMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ADLSGen2StorageAccountDataSetMapping resources.
type adlsgen2StorageAccountDataSetMappingState struct {
}

type ADLSGen2StorageAccountDataSetMappingState struct {
}

func (ADLSGen2StorageAccountDataSetMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*adlsgen2StorageAccountDataSetMappingState)(nil)).Elem()
}

type adlsgen2StorageAccountDataSetMappingArgs struct {
	// The name of the share account.
	AccountName string `pulumi:"accountName"`
	// Gets or sets the container name.
	ContainerName string `pulumi:"containerName"`
	// The id of the source data set.
	DataSetId string `pulumi:"dataSetId"`
	// The name of the data set mapping to be created.
	DataSetMappingName *string `pulumi:"dataSetMappingName"`
	// Gets or sets the path to folder within the container.
	Folder string `pulumi:"folder"`
	// Kind of data set mapping.
	// Expected value is 'AdlsGen2StorageAccount'.
	Kind string `pulumi:"kind"`
	// Gets or sets the mount path
	MountPath *string `pulumi:"mountPath"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the share subscription which will hold the data set sink.
	ShareSubscriptionName string `pulumi:"shareSubscriptionName"`
	// Resource id of the sink storage account
	StorageAccountResourceId string `pulumi:"storageAccountResourceId"`
}

// The set of arguments for constructing a ADLSGen2StorageAccountDataSetMapping resource.
type ADLSGen2StorageAccountDataSetMappingArgs struct {
	// The name of the share account.
	AccountName pulumi.StringInput
	// Gets or sets the container name.
	ContainerName pulumi.StringInput
	// The id of the source data set.
	DataSetId pulumi.StringInput
	// The name of the data set mapping to be created.
	DataSetMappingName pulumi.StringPtrInput
	// Gets or sets the path to folder within the container.
	Folder pulumi.StringInput
	// Kind of data set mapping.
	// Expected value is 'AdlsGen2StorageAccount'.
	Kind pulumi.StringInput
	// Gets or sets the mount path
	MountPath pulumi.StringPtrInput
	// The resource group name.
	ResourceGroupName pulumi.StringInput
	// The name of the share subscription which will hold the data set sink.
	ShareSubscriptionName pulumi.StringInput
	// Resource id of the sink storage account
	StorageAccountResourceId pulumi.StringInput
}

func (ADLSGen2StorageAccountDataSetMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*adlsgen2StorageAccountDataSetMappingArgs)(nil)).Elem()
}

type ADLSGen2StorageAccountDataSetMappingInput interface {
	pulumi.Input

	ToADLSGen2StorageAccountDataSetMappingOutput() ADLSGen2StorageAccountDataSetMappingOutput
	ToADLSGen2StorageAccountDataSetMappingOutputWithContext(ctx context.Context) ADLSGen2StorageAccountDataSetMappingOutput
}

func (*ADLSGen2StorageAccountDataSetMapping) ElementType() reflect.Type {
	return reflect.TypeOf((**ADLSGen2StorageAccountDataSetMapping)(nil)).Elem()
}

func (i *ADLSGen2StorageAccountDataSetMapping) ToADLSGen2StorageAccountDataSetMappingOutput() ADLSGen2StorageAccountDataSetMappingOutput {
	return i.ToADLSGen2StorageAccountDataSetMappingOutputWithContext(context.Background())
}

func (i *ADLSGen2StorageAccountDataSetMapping) ToADLSGen2StorageAccountDataSetMappingOutputWithContext(ctx context.Context) ADLSGen2StorageAccountDataSetMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ADLSGen2StorageAccountDataSetMappingOutput)
}

type ADLSGen2StorageAccountDataSetMappingOutput struct{ *pulumi.OutputState }

func (ADLSGen2StorageAccountDataSetMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ADLSGen2StorageAccountDataSetMapping)(nil)).Elem()
}

func (o ADLSGen2StorageAccountDataSetMappingOutput) ToADLSGen2StorageAccountDataSetMappingOutput() ADLSGen2StorageAccountDataSetMappingOutput {
	return o
}

func (o ADLSGen2StorageAccountDataSetMappingOutput) ToADLSGen2StorageAccountDataSetMappingOutputWithContext(ctx context.Context) ADLSGen2StorageAccountDataSetMappingOutput {
	return o
}

// Gets or sets the container name.
func (o ADLSGen2StorageAccountDataSetMappingOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v *ADLSGen2StorageAccountDataSetMapping) pulumi.StringOutput { return v.ContainerName }).(pulumi.StringOutput)
}

// The id of the source data set.
func (o ADLSGen2StorageAccountDataSetMappingOutput) DataSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *ADLSGen2StorageAccountDataSetMapping) pulumi.StringOutput { return v.DataSetId }).(pulumi.StringOutput)
}

// Gets the status of the data set mapping.
func (o ADLSGen2StorageAccountDataSetMappingOutput) DataSetMappingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ADLSGen2StorageAccountDataSetMapping) pulumi.StringOutput { return v.DataSetMappingStatus }).(pulumi.StringOutput)
}

// Gets or sets the path to folder within the container.
func (o ADLSGen2StorageAccountDataSetMappingOutput) Folder() pulumi.StringOutput {
	return o.ApplyT(func(v *ADLSGen2StorageAccountDataSetMapping) pulumi.StringOutput { return v.Folder }).(pulumi.StringOutput)
}

// Kind of data set mapping.
// Expected value is 'AdlsGen2StorageAccount'.
func (o ADLSGen2StorageAccountDataSetMappingOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ADLSGen2StorageAccountDataSetMapping) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Location of the sink storage account.
func (o ADLSGen2StorageAccountDataSetMappingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ADLSGen2StorageAccountDataSetMapping) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Gets or sets the mount path
func (o ADLSGen2StorageAccountDataSetMappingOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ADLSGen2StorageAccountDataSetMapping) pulumi.StringPtrOutput { return v.MountPath }).(pulumi.StringPtrOutput)
}

// Name of the azure resource
func (o ADLSGen2StorageAccountDataSetMappingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ADLSGen2StorageAccountDataSetMapping) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the data set mapping.
func (o ADLSGen2StorageAccountDataSetMappingOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *ADLSGen2StorageAccountDataSetMapping) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Resource id of the sink storage account
func (o ADLSGen2StorageAccountDataSetMappingOutput) StorageAccountResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ADLSGen2StorageAccountDataSetMapping) pulumi.StringOutput { return v.StorageAccountResourceId }).(pulumi.StringOutput)
}

// System Data of the Azure resource.
func (o ADLSGen2StorageAccountDataSetMappingOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *ADLSGen2StorageAccountDataSetMapping) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Type of the azure resource
func (o ADLSGen2StorageAccountDataSetMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ADLSGen2StorageAccountDataSetMapping) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ADLSGen2StorageAccountDataSetMappingOutput{})
}
