// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20201001preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A blob storage account data set mapping.
type BlobStorageAccountDataSetMapping struct {
	pulumi.CustomResourceState

	// Gets or sets the container name.
	ContainerName pulumi.StringOutput `pulumi:"containerName"`
	// The id of the source data set.
	DataSetId pulumi.StringOutput `pulumi:"dataSetId"`
	// Gets the status of the data set mapping.
	DataSetMappingStatus pulumi.StringOutput `pulumi:"dataSetMappingStatus"`
	// Gets or sets the path to folder within the container.
	Folder pulumi.StringOutput `pulumi:"folder"`
	// Kind of data set mapping.
	// Expected value is 'BlobStorageAccount'.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Location of the sink storage account.
	Location pulumi.StringOutput `pulumi:"location"`
	// Gets or sets the mount path on the consumer side where the dataset is to be mapped.
	MountPath pulumi.StringPtrOutput `pulumi:"mountPath"`
	// Name of the azure resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of the data set mapping.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Resource id of the sink storage account
	StorageAccountResourceId pulumi.StringOutput `pulumi:"storageAccountResourceId"`
	// System Data of the Azure resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Type of the azure resource
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewBlobStorageAccountDataSetMapping registers a new resource with the given unique name, arguments, and options.
func NewBlobStorageAccountDataSetMapping(ctx *pulumi.Context,
	name string, args *BlobStorageAccountDataSetMappingArgs, opts ...pulumi.ResourceOption) (*BlobStorageAccountDataSetMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.ContainerName == nil {
		return nil, errors.New("invalid value for required argument 'ContainerName'")
	}
	if args.DataSetId == nil {
		return nil, errors.New("invalid value for required argument 'DataSetId'")
	}
	if args.Folder == nil {
		return nil, errors.New("invalid value for required argument 'Folder'")
	}
	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ShareSubscriptionName == nil {
		return nil, errors.New("invalid value for required argument 'ShareSubscriptionName'")
	}
	if args.StorageAccountResourceId == nil {
		return nil, errors.New("invalid value for required argument 'StorageAccountResourceId'")
	}
	args.Kind = pulumi.String("BlobStorageAccount")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:datashare:BlobStorageAccountDataSetMapping"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20181101preview:BlobStorageAccountDataSetMapping"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20191101:BlobStorageAccountDataSetMapping"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20200901:BlobStorageAccountDataSetMapping"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20210801:BlobStorageAccountDataSetMapping"),
		},
	})
	opts = append(opts, aliases)
	var resource BlobStorageAccountDataSetMapping
	err := ctx.RegisterResource("azure-native:datashare/v20201001preview:BlobStorageAccountDataSetMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlobStorageAccountDataSetMapping gets an existing BlobStorageAccountDataSetMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlobStorageAccountDataSetMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlobStorageAccountDataSetMappingState, opts ...pulumi.ResourceOption) (*BlobStorageAccountDataSetMapping, error) {
	var resource BlobStorageAccountDataSetMapping
	err := ctx.ReadResource("azure-native:datashare/v20201001preview:BlobStorageAccountDataSetMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BlobStorageAccountDataSetMapping resources.
type blobStorageAccountDataSetMappingState struct {
}

type BlobStorageAccountDataSetMappingState struct {
}

func (BlobStorageAccountDataSetMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*blobStorageAccountDataSetMappingState)(nil)).Elem()
}

type blobStorageAccountDataSetMappingArgs struct {
	// The name of the share account.
	AccountName string `pulumi:"accountName"`
	// Gets or sets the container name.
	ContainerName string `pulumi:"containerName"`
	// The id of the source data set.
	DataSetId string `pulumi:"dataSetId"`
	// The name of the data set mapping to be created.
	DataSetMappingName *string `pulumi:"dataSetMappingName"`
	// Gets or sets the path to folder within the container.
	Folder string `pulumi:"folder"`
	// Kind of data set mapping.
	// Expected value is 'BlobStorageAccount'.
	Kind string `pulumi:"kind"`
	// Gets or sets the mount path on the consumer side where the dataset is to be mapped.
	MountPath *string `pulumi:"mountPath"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the share subscription which will hold the data set sink.
	ShareSubscriptionName string `pulumi:"shareSubscriptionName"`
	// Resource id of the sink storage account
	StorageAccountResourceId string `pulumi:"storageAccountResourceId"`
}

// The set of arguments for constructing a BlobStorageAccountDataSetMapping resource.
type BlobStorageAccountDataSetMappingArgs struct {
	// The name of the share account.
	AccountName pulumi.StringInput
	// Gets or sets the container name.
	ContainerName pulumi.StringInput
	// The id of the source data set.
	DataSetId pulumi.StringInput
	// The name of the data set mapping to be created.
	DataSetMappingName pulumi.StringPtrInput
	// Gets or sets the path to folder within the container.
	Folder pulumi.StringInput
	// Kind of data set mapping.
	// Expected value is 'BlobStorageAccount'.
	Kind pulumi.StringInput
	// Gets or sets the mount path on the consumer side where the dataset is to be mapped.
	MountPath pulumi.StringPtrInput
	// The resource group name.
	ResourceGroupName pulumi.StringInput
	// The name of the share subscription which will hold the data set sink.
	ShareSubscriptionName pulumi.StringInput
	// Resource id of the sink storage account
	StorageAccountResourceId pulumi.StringInput
}

func (BlobStorageAccountDataSetMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blobStorageAccountDataSetMappingArgs)(nil)).Elem()
}

type BlobStorageAccountDataSetMappingInput interface {
	pulumi.Input

	ToBlobStorageAccountDataSetMappingOutput() BlobStorageAccountDataSetMappingOutput
	ToBlobStorageAccountDataSetMappingOutputWithContext(ctx context.Context) BlobStorageAccountDataSetMappingOutput
}

func (*BlobStorageAccountDataSetMapping) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobStorageAccountDataSetMapping)(nil)).Elem()
}

func (i *BlobStorageAccountDataSetMapping) ToBlobStorageAccountDataSetMappingOutput() BlobStorageAccountDataSetMappingOutput {
	return i.ToBlobStorageAccountDataSetMappingOutputWithContext(context.Background())
}

func (i *BlobStorageAccountDataSetMapping) ToBlobStorageAccountDataSetMappingOutputWithContext(ctx context.Context) BlobStorageAccountDataSetMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobStorageAccountDataSetMappingOutput)
}

type BlobStorageAccountDataSetMappingOutput struct{ *pulumi.OutputState }

func (BlobStorageAccountDataSetMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobStorageAccountDataSetMapping)(nil)).Elem()
}

func (o BlobStorageAccountDataSetMappingOutput) ToBlobStorageAccountDataSetMappingOutput() BlobStorageAccountDataSetMappingOutput {
	return o
}

func (o BlobStorageAccountDataSetMappingOutput) ToBlobStorageAccountDataSetMappingOutputWithContext(ctx context.Context) BlobStorageAccountDataSetMappingOutput {
	return o
}

// Gets or sets the container name.
func (o BlobStorageAccountDataSetMappingOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v *BlobStorageAccountDataSetMapping) pulumi.StringOutput { return v.ContainerName }).(pulumi.StringOutput)
}

// The id of the source data set.
func (o BlobStorageAccountDataSetMappingOutput) DataSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *BlobStorageAccountDataSetMapping) pulumi.StringOutput { return v.DataSetId }).(pulumi.StringOutput)
}

// Gets the status of the data set mapping.
func (o BlobStorageAccountDataSetMappingOutput) DataSetMappingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *BlobStorageAccountDataSetMapping) pulumi.StringOutput { return v.DataSetMappingStatus }).(pulumi.StringOutput)
}

// Gets or sets the path to folder within the container.
func (o BlobStorageAccountDataSetMappingOutput) Folder() pulumi.StringOutput {
	return o.ApplyT(func(v *BlobStorageAccountDataSetMapping) pulumi.StringOutput { return v.Folder }).(pulumi.StringOutput)
}

// Kind of data set mapping.
// Expected value is 'BlobStorageAccount'.
func (o BlobStorageAccountDataSetMappingOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *BlobStorageAccountDataSetMapping) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Location of the sink storage account.
func (o BlobStorageAccountDataSetMappingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BlobStorageAccountDataSetMapping) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Gets or sets the mount path on the consumer side where the dataset is to be mapped.
func (o BlobStorageAccountDataSetMappingOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobStorageAccountDataSetMapping) pulumi.StringPtrOutput { return v.MountPath }).(pulumi.StringPtrOutput)
}

// Name of the azure resource
func (o BlobStorageAccountDataSetMappingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BlobStorageAccountDataSetMapping) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the data set mapping.
func (o BlobStorageAccountDataSetMappingOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *BlobStorageAccountDataSetMapping) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Resource id of the sink storage account
func (o BlobStorageAccountDataSetMappingOutput) StorageAccountResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *BlobStorageAccountDataSetMapping) pulumi.StringOutput { return v.StorageAccountResourceId }).(pulumi.StringOutput)
}

// System Data of the Azure resource.
func (o BlobStorageAccountDataSetMappingOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *BlobStorageAccountDataSetMapping) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Type of the azure resource
func (o BlobStorageAccountDataSetMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *BlobStorageAccountDataSetMapping) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(BlobStorageAccountDataSetMappingOutput{})
}
