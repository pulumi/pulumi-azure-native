// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200901

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A SQL DB table data set.
type SqlDBTableDataSet struct {
	pulumi.CustomResourceState

	// Unique id for identifying a data set resource
	DataSetId pulumi.StringOutput `pulumi:"dataSetId"`
	// Database name of the source data set
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// Kind of data set.
	// Expected value is 'SqlDBTable'.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Name of the azure resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Schema of the table. Default value is dbo.
	SchemaName pulumi.StringOutput `pulumi:"schemaName"`
	// Resource id of SQL server
	SqlServerResourceId pulumi.StringOutput `pulumi:"sqlServerResourceId"`
	// System Data of the Azure resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// SQL DB table name.
	TableName pulumi.StringOutput `pulumi:"tableName"`
	// Type of the azure resource
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSqlDBTableDataSet registers a new resource with the given unique name, arguments, and options.
func NewSqlDBTableDataSet(ctx *pulumi.Context,
	name string, args *SqlDBTableDataSetArgs, opts ...pulumi.ResourceOption) (*SqlDBTableDataSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SchemaName == nil {
		return nil, errors.New("invalid value for required argument 'SchemaName'")
	}
	if args.ShareName == nil {
		return nil, errors.New("invalid value for required argument 'ShareName'")
	}
	if args.SqlServerResourceId == nil {
		return nil, errors.New("invalid value for required argument 'SqlServerResourceId'")
	}
	if args.TableName == nil {
		return nil, errors.New("invalid value for required argument 'TableName'")
	}
	args.Kind = pulumi.String("SqlDBTable")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:datashare:SqlDBTableDataSet"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20181101preview:SqlDBTableDataSet"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20191101:SqlDBTableDataSet"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20201001preview:SqlDBTableDataSet"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20210801:SqlDBTableDataSet"),
		},
	})
	opts = append(opts, aliases)
	var resource SqlDBTableDataSet
	err := ctx.RegisterResource("azure-native:datashare/v20200901:SqlDBTableDataSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlDBTableDataSet gets an existing SqlDBTableDataSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlDBTableDataSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlDBTableDataSetState, opts ...pulumi.ResourceOption) (*SqlDBTableDataSet, error) {
	var resource SqlDBTableDataSet
	err := ctx.ReadResource("azure-native:datashare/v20200901:SqlDBTableDataSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlDBTableDataSet resources.
type sqlDBTableDataSetState struct {
}

type SqlDBTableDataSetState struct {
}

func (SqlDBTableDataSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlDBTableDataSetState)(nil)).Elem()
}

type sqlDBTableDataSetArgs struct {
	// The name of the share account.
	AccountName string `pulumi:"accountName"`
	// The name of the dataSet.
	DataSetName *string `pulumi:"dataSetName"`
	// Database name of the source data set
	DatabaseName string `pulumi:"databaseName"`
	// Kind of data set.
	// Expected value is 'SqlDBTable'.
	Kind string `pulumi:"kind"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Schema of the table. Default value is dbo.
	SchemaName string `pulumi:"schemaName"`
	// The name of the share to add the data set to.
	ShareName string `pulumi:"shareName"`
	// Resource id of SQL server
	SqlServerResourceId string `pulumi:"sqlServerResourceId"`
	// SQL DB table name.
	TableName string `pulumi:"tableName"`
}

// The set of arguments for constructing a SqlDBTableDataSet resource.
type SqlDBTableDataSetArgs struct {
	// The name of the share account.
	AccountName pulumi.StringInput
	// The name of the dataSet.
	DataSetName pulumi.StringPtrInput
	// Database name of the source data set
	DatabaseName pulumi.StringInput
	// Kind of data set.
	// Expected value is 'SqlDBTable'.
	Kind pulumi.StringInput
	// The resource group name.
	ResourceGroupName pulumi.StringInput
	// Schema of the table. Default value is dbo.
	SchemaName pulumi.StringInput
	// The name of the share to add the data set to.
	ShareName pulumi.StringInput
	// Resource id of SQL server
	SqlServerResourceId pulumi.StringInput
	// SQL DB table name.
	TableName pulumi.StringInput
}

func (SqlDBTableDataSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlDBTableDataSetArgs)(nil)).Elem()
}

type SqlDBTableDataSetInput interface {
	pulumi.Input

	ToSqlDBTableDataSetOutput() SqlDBTableDataSetOutput
	ToSqlDBTableDataSetOutputWithContext(ctx context.Context) SqlDBTableDataSetOutput
}

func (*SqlDBTableDataSet) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDBTableDataSet)(nil)).Elem()
}

func (i *SqlDBTableDataSet) ToSqlDBTableDataSetOutput() SqlDBTableDataSetOutput {
	return i.ToSqlDBTableDataSetOutputWithContext(context.Background())
}

func (i *SqlDBTableDataSet) ToSqlDBTableDataSetOutputWithContext(ctx context.Context) SqlDBTableDataSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDBTableDataSetOutput)
}

type SqlDBTableDataSetOutput struct{ *pulumi.OutputState }

func (SqlDBTableDataSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDBTableDataSet)(nil)).Elem()
}

func (o SqlDBTableDataSetOutput) ToSqlDBTableDataSetOutput() SqlDBTableDataSetOutput {
	return o
}

func (o SqlDBTableDataSetOutput) ToSqlDBTableDataSetOutputWithContext(ctx context.Context) SqlDBTableDataSetOutput {
	return o
}

// Unique id for identifying a data set resource
func (o SqlDBTableDataSetOutput) DataSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDBTableDataSet) pulumi.StringOutput { return v.DataSetId }).(pulumi.StringOutput)
}

// Database name of the source data set
func (o SqlDBTableDataSetOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDBTableDataSet) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// Kind of data set.
// Expected value is 'SqlDBTable'.
func (o SqlDBTableDataSetOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDBTableDataSet) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Name of the azure resource
func (o SqlDBTableDataSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDBTableDataSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Schema of the table. Default value is dbo.
func (o SqlDBTableDataSetOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDBTableDataSet) pulumi.StringOutput { return v.SchemaName }).(pulumi.StringOutput)
}

// Resource id of SQL server
func (o SqlDBTableDataSetOutput) SqlServerResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDBTableDataSet) pulumi.StringOutput { return v.SqlServerResourceId }).(pulumi.StringOutput)
}

// System Data of the Azure resource.
func (o SqlDBTableDataSetOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *SqlDBTableDataSet) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// SQL DB table name.
func (o SqlDBTableDataSetOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDBTableDataSet) pulumi.StringOutput { return v.TableName }).(pulumi.StringOutput)
}

// Type of the azure resource
func (o SqlDBTableDataSetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDBTableDataSet) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SqlDBTableDataSetOutput{})
}
