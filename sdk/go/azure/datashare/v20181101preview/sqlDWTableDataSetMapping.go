// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20181101preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A SQL DW Table data set mapping.
type SqlDWTableDataSetMapping struct {
	pulumi.CustomResourceState

	// The id of the source data set.
	DataSetId pulumi.StringOutput `pulumi:"dataSetId"`
	// Gets the status of the data set mapping.
	DataSetMappingStatus pulumi.StringOutput `pulumi:"dataSetMappingStatus"`
	// DataWarehouse name of the source data set
	DataWarehouseName pulumi.StringOutput `pulumi:"dataWarehouseName"`
	// Kind of data set mapping.
	// Expected value is 'SqlDWTable'.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Name of the azure resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of the data set mapping.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Schema of the table. Default value is dbo.
	SchemaName pulumi.StringOutput `pulumi:"schemaName"`
	// Resource id of SQL server
	SqlServerResourceId pulumi.StringOutput `pulumi:"sqlServerResourceId"`
	// SQL DW table name.
	TableName pulumi.StringOutput `pulumi:"tableName"`
	// Type of the azure resource
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSqlDWTableDataSetMapping registers a new resource with the given unique name, arguments, and options.
func NewSqlDWTableDataSetMapping(ctx *pulumi.Context,
	name string, args *SqlDWTableDataSetMappingArgs, opts ...pulumi.ResourceOption) (*SqlDWTableDataSetMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.DataSetId == nil {
		return nil, errors.New("invalid value for required argument 'DataSetId'")
	}
	if args.DataWarehouseName == nil {
		return nil, errors.New("invalid value for required argument 'DataWarehouseName'")
	}
	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SchemaName == nil {
		return nil, errors.New("invalid value for required argument 'SchemaName'")
	}
	if args.ShareSubscriptionName == nil {
		return nil, errors.New("invalid value for required argument 'ShareSubscriptionName'")
	}
	if args.SqlServerResourceId == nil {
		return nil, errors.New("invalid value for required argument 'SqlServerResourceId'")
	}
	if args.TableName == nil {
		return nil, errors.New("invalid value for required argument 'TableName'")
	}
	args.Kind = pulumi.String("SqlDWTable")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:datashare:SqlDWTableDataSetMapping"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20191101:SqlDWTableDataSetMapping"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20200901:SqlDWTableDataSetMapping"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20201001preview:SqlDWTableDataSetMapping"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20210801:SqlDWTableDataSetMapping"),
		},
	})
	opts = append(opts, aliases)
	var resource SqlDWTableDataSetMapping
	err := ctx.RegisterResource("azure-native:datashare/v20181101preview:SqlDWTableDataSetMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlDWTableDataSetMapping gets an existing SqlDWTableDataSetMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlDWTableDataSetMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlDWTableDataSetMappingState, opts ...pulumi.ResourceOption) (*SqlDWTableDataSetMapping, error) {
	var resource SqlDWTableDataSetMapping
	err := ctx.ReadResource("azure-native:datashare/v20181101preview:SqlDWTableDataSetMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlDWTableDataSetMapping resources.
type sqlDWTableDataSetMappingState struct {
}

type SqlDWTableDataSetMappingState struct {
}

func (SqlDWTableDataSetMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlDWTableDataSetMappingState)(nil)).Elem()
}

type sqlDWTableDataSetMappingArgs struct {
	// The name of the share account.
	AccountName string `pulumi:"accountName"`
	// The id of the source data set.
	DataSetId string `pulumi:"dataSetId"`
	// The name of the data set mapping to be created.
	DataSetMappingName *string `pulumi:"dataSetMappingName"`
	// DataWarehouse name of the source data set
	DataWarehouseName string `pulumi:"dataWarehouseName"`
	// Kind of data set mapping.
	// Expected value is 'SqlDWTable'.
	Kind string `pulumi:"kind"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Schema of the table. Default value is dbo.
	SchemaName string `pulumi:"schemaName"`
	// The name of the share subscription which will hold the data set sink.
	ShareSubscriptionName string `pulumi:"shareSubscriptionName"`
	// Resource id of SQL server
	SqlServerResourceId string `pulumi:"sqlServerResourceId"`
	// SQL DW table name.
	TableName string `pulumi:"tableName"`
}

// The set of arguments for constructing a SqlDWTableDataSetMapping resource.
type SqlDWTableDataSetMappingArgs struct {
	// The name of the share account.
	AccountName pulumi.StringInput
	// The id of the source data set.
	DataSetId pulumi.StringInput
	// The name of the data set mapping to be created.
	DataSetMappingName pulumi.StringPtrInput
	// DataWarehouse name of the source data set
	DataWarehouseName pulumi.StringInput
	// Kind of data set mapping.
	// Expected value is 'SqlDWTable'.
	Kind pulumi.StringInput
	// The resource group name.
	ResourceGroupName pulumi.StringInput
	// Schema of the table. Default value is dbo.
	SchemaName pulumi.StringInput
	// The name of the share subscription which will hold the data set sink.
	ShareSubscriptionName pulumi.StringInput
	// Resource id of SQL server
	SqlServerResourceId pulumi.StringInput
	// SQL DW table name.
	TableName pulumi.StringInput
}

func (SqlDWTableDataSetMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlDWTableDataSetMappingArgs)(nil)).Elem()
}

type SqlDWTableDataSetMappingInput interface {
	pulumi.Input

	ToSqlDWTableDataSetMappingOutput() SqlDWTableDataSetMappingOutput
	ToSqlDWTableDataSetMappingOutputWithContext(ctx context.Context) SqlDWTableDataSetMappingOutput
}

func (*SqlDWTableDataSetMapping) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDWTableDataSetMapping)(nil)).Elem()
}

func (i *SqlDWTableDataSetMapping) ToSqlDWTableDataSetMappingOutput() SqlDWTableDataSetMappingOutput {
	return i.ToSqlDWTableDataSetMappingOutputWithContext(context.Background())
}

func (i *SqlDWTableDataSetMapping) ToSqlDWTableDataSetMappingOutputWithContext(ctx context.Context) SqlDWTableDataSetMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDWTableDataSetMappingOutput)
}

type SqlDWTableDataSetMappingOutput struct{ *pulumi.OutputState }

func (SqlDWTableDataSetMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDWTableDataSetMapping)(nil)).Elem()
}

func (o SqlDWTableDataSetMappingOutput) ToSqlDWTableDataSetMappingOutput() SqlDWTableDataSetMappingOutput {
	return o
}

func (o SqlDWTableDataSetMappingOutput) ToSqlDWTableDataSetMappingOutputWithContext(ctx context.Context) SqlDWTableDataSetMappingOutput {
	return o
}

// The id of the source data set.
func (o SqlDWTableDataSetMappingOutput) DataSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDWTableDataSetMapping) pulumi.StringOutput { return v.DataSetId }).(pulumi.StringOutput)
}

// Gets the status of the data set mapping.
func (o SqlDWTableDataSetMappingOutput) DataSetMappingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDWTableDataSetMapping) pulumi.StringOutput { return v.DataSetMappingStatus }).(pulumi.StringOutput)
}

// DataWarehouse name of the source data set
func (o SqlDWTableDataSetMappingOutput) DataWarehouseName() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDWTableDataSetMapping) pulumi.StringOutput { return v.DataWarehouseName }).(pulumi.StringOutput)
}

// Kind of data set mapping.
// Expected value is 'SqlDWTable'.
func (o SqlDWTableDataSetMappingOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDWTableDataSetMapping) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Name of the azure resource
func (o SqlDWTableDataSetMappingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDWTableDataSetMapping) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the data set mapping.
func (o SqlDWTableDataSetMappingOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDWTableDataSetMapping) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Schema of the table. Default value is dbo.
func (o SqlDWTableDataSetMappingOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDWTableDataSetMapping) pulumi.StringOutput { return v.SchemaName }).(pulumi.StringOutput)
}

// Resource id of SQL server
func (o SqlDWTableDataSetMappingOutput) SqlServerResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDWTableDataSetMapping) pulumi.StringOutput { return v.SqlServerResourceId }).(pulumi.StringOutput)
}

// SQL DW table name.
func (o SqlDWTableDataSetMappingOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDWTableDataSetMapping) pulumi.StringOutput { return v.TableName }).(pulumi.StringOutput)
}

// Type of the azure resource
func (o SqlDWTableDataSetMappingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlDWTableDataSetMapping) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SqlDWTableDataSetMappingOutput{})
}
