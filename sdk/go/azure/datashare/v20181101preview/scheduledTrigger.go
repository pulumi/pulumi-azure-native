// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20181101preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A type of trigger based on schedule
type ScheduledTrigger struct {
	pulumi.CustomResourceState

	// Time at which the trigger was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Kind of synchronization on trigger.
	// Expected value is 'ScheduleBased'.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Name of the azure resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Gets the provisioning state
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Recurrence Interval
	RecurrenceInterval pulumi.StringOutput `pulumi:"recurrenceInterval"`
	// Synchronization mode
	SynchronizationMode pulumi.StringPtrOutput `pulumi:"synchronizationMode"`
	// Synchronization time
	SynchronizationTime pulumi.StringOutput `pulumi:"synchronizationTime"`
	// Gets the trigger state
	TriggerStatus pulumi.StringOutput `pulumi:"triggerStatus"`
	// Type of the azure resource
	Type pulumi.StringOutput `pulumi:"type"`
	// Name of the user who created the trigger.
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewScheduledTrigger registers a new resource with the given unique name, arguments, and options.
func NewScheduledTrigger(ctx *pulumi.Context,
	name string, args *ScheduledTriggerArgs, opts ...pulumi.ResourceOption) (*ScheduledTrigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.RecurrenceInterval == nil {
		return nil, errors.New("invalid value for required argument 'RecurrenceInterval'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ShareSubscriptionName == nil {
		return nil, errors.New("invalid value for required argument 'ShareSubscriptionName'")
	}
	if args.SynchronizationTime == nil {
		return nil, errors.New("invalid value for required argument 'SynchronizationTime'")
	}
	args.Kind = pulumi.String("ScheduleBased")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:datashare:ScheduledTrigger"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20191101:ScheduledTrigger"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20200901:ScheduledTrigger"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20201001preview:ScheduledTrigger"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20210801:ScheduledTrigger"),
		},
	})
	opts = append(opts, aliases)
	var resource ScheduledTrigger
	err := ctx.RegisterResource("azure-native:datashare/v20181101preview:ScheduledTrigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScheduledTrigger gets an existing ScheduledTrigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScheduledTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduledTriggerState, opts ...pulumi.ResourceOption) (*ScheduledTrigger, error) {
	var resource ScheduledTrigger
	err := ctx.ReadResource("azure-native:datashare/v20181101preview:ScheduledTrigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScheduledTrigger resources.
type scheduledTriggerState struct {
}

type ScheduledTriggerState struct {
}

func (ScheduledTriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledTriggerState)(nil)).Elem()
}

type scheduledTriggerArgs struct {
	// The name of the share account.
	AccountName string `pulumi:"accountName"`
	// Kind of synchronization on trigger.
	// Expected value is 'ScheduleBased'.
	Kind string `pulumi:"kind"`
	// Recurrence Interval
	RecurrenceInterval string `pulumi:"recurrenceInterval"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the share subscription which will hold the data set sink.
	ShareSubscriptionName string `pulumi:"shareSubscriptionName"`
	// Synchronization mode
	SynchronizationMode *string `pulumi:"synchronizationMode"`
	// Synchronization time
	SynchronizationTime string `pulumi:"synchronizationTime"`
	// The name of the trigger.
	TriggerName *string `pulumi:"triggerName"`
}

// The set of arguments for constructing a ScheduledTrigger resource.
type ScheduledTriggerArgs struct {
	// The name of the share account.
	AccountName pulumi.StringInput
	// Kind of synchronization on trigger.
	// Expected value is 'ScheduleBased'.
	Kind pulumi.StringInput
	// Recurrence Interval
	RecurrenceInterval pulumi.StringInput
	// The resource group name.
	ResourceGroupName pulumi.StringInput
	// The name of the share subscription which will hold the data set sink.
	ShareSubscriptionName pulumi.StringInput
	// Synchronization mode
	SynchronizationMode pulumi.StringPtrInput
	// Synchronization time
	SynchronizationTime pulumi.StringInput
	// The name of the trigger.
	TriggerName pulumi.StringPtrInput
}

func (ScheduledTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledTriggerArgs)(nil)).Elem()
}

type ScheduledTriggerInput interface {
	pulumi.Input

	ToScheduledTriggerOutput() ScheduledTriggerOutput
	ToScheduledTriggerOutputWithContext(ctx context.Context) ScheduledTriggerOutput
}

func (*ScheduledTrigger) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledTrigger)(nil)).Elem()
}

func (i *ScheduledTrigger) ToScheduledTriggerOutput() ScheduledTriggerOutput {
	return i.ToScheduledTriggerOutputWithContext(context.Background())
}

func (i *ScheduledTrigger) ToScheduledTriggerOutputWithContext(ctx context.Context) ScheduledTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledTriggerOutput)
}

type ScheduledTriggerOutput struct{ *pulumi.OutputState }

func (ScheduledTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledTrigger)(nil)).Elem()
}

func (o ScheduledTriggerOutput) ToScheduledTriggerOutput() ScheduledTriggerOutput {
	return o
}

func (o ScheduledTriggerOutput) ToScheduledTriggerOutputWithContext(ctx context.Context) ScheduledTriggerOutput {
	return o
}

// Time at which the trigger was created.
func (o ScheduledTriggerOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledTrigger) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Kind of synchronization on trigger.
// Expected value is 'ScheduleBased'.
func (o ScheduledTriggerOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledTrigger) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Name of the azure resource
func (o ScheduledTriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledTrigger) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Gets the provisioning state
func (o ScheduledTriggerOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledTrigger) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Recurrence Interval
func (o ScheduledTriggerOutput) RecurrenceInterval() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledTrigger) pulumi.StringOutput { return v.RecurrenceInterval }).(pulumi.StringOutput)
}

// Synchronization mode
func (o ScheduledTriggerOutput) SynchronizationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledTrigger) pulumi.StringPtrOutput { return v.SynchronizationMode }).(pulumi.StringPtrOutput)
}

// Synchronization time
func (o ScheduledTriggerOutput) SynchronizationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledTrigger) pulumi.StringOutput { return v.SynchronizationTime }).(pulumi.StringOutput)
}

// Gets the trigger state
func (o ScheduledTriggerOutput) TriggerStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledTrigger) pulumi.StringOutput { return v.TriggerStatus }).(pulumi.StringOutput)
}

// Type of the azure resource
func (o ScheduledTriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledTrigger) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Name of the user who created the trigger.
func (o ScheduledTriggerOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledTrigger) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ScheduledTriggerOutput{})
}
