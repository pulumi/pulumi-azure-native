// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20191101

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A type of synchronization setting based on schedule
type ScheduledSynchronizationSetting struct {
	pulumi.CustomResourceState

	// Time at which the synchronization setting was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Kind of synchronization setting.
	// Expected value is 'ScheduleBased'.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Name of the azure resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Gets or sets the provisioning state
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Recurrence Interval
	RecurrenceInterval pulumi.StringOutput `pulumi:"recurrenceInterval"`
	// Synchronization time
	SynchronizationTime pulumi.StringOutput `pulumi:"synchronizationTime"`
	// Type of the azure resource
	Type pulumi.StringOutput `pulumi:"type"`
	// Name of the user who created the synchronization setting.
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewScheduledSynchronizationSetting registers a new resource with the given unique name, arguments, and options.
func NewScheduledSynchronizationSetting(ctx *pulumi.Context,
	name string, args *ScheduledSynchronizationSettingArgs, opts ...pulumi.ResourceOption) (*ScheduledSynchronizationSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.RecurrenceInterval == nil {
		return nil, errors.New("invalid value for required argument 'RecurrenceInterval'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ShareName == nil {
		return nil, errors.New("invalid value for required argument 'ShareName'")
	}
	if args.SynchronizationTime == nil {
		return nil, errors.New("invalid value for required argument 'SynchronizationTime'")
	}
	args.Kind = pulumi.String("ScheduleBased")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:datashare:ScheduledSynchronizationSetting"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20181101preview:ScheduledSynchronizationSetting"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20200901:ScheduledSynchronizationSetting"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20201001preview:ScheduledSynchronizationSetting"),
		},
		{
			Type: pulumi.String("azure-native:datashare/v20210801:ScheduledSynchronizationSetting"),
		},
	})
	opts = append(opts, aliases)
	var resource ScheduledSynchronizationSetting
	err := ctx.RegisterResource("azure-native:datashare/v20191101:ScheduledSynchronizationSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScheduledSynchronizationSetting gets an existing ScheduledSynchronizationSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScheduledSynchronizationSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduledSynchronizationSettingState, opts ...pulumi.ResourceOption) (*ScheduledSynchronizationSetting, error) {
	var resource ScheduledSynchronizationSetting
	err := ctx.ReadResource("azure-native:datashare/v20191101:ScheduledSynchronizationSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScheduledSynchronizationSetting resources.
type scheduledSynchronizationSettingState struct {
}

type ScheduledSynchronizationSettingState struct {
}

func (ScheduledSynchronizationSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledSynchronizationSettingState)(nil)).Elem()
}

type scheduledSynchronizationSettingArgs struct {
	// The name of the share account.
	AccountName string `pulumi:"accountName"`
	// Kind of synchronization setting.
	// Expected value is 'ScheduleBased'.
	Kind string `pulumi:"kind"`
	// Recurrence Interval
	RecurrenceInterval string `pulumi:"recurrenceInterval"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the share to add the synchronization setting to.
	ShareName string `pulumi:"shareName"`
	// The name of the synchronizationSetting.
	SynchronizationSettingName *string `pulumi:"synchronizationSettingName"`
	// Synchronization time
	SynchronizationTime string `pulumi:"synchronizationTime"`
}

// The set of arguments for constructing a ScheduledSynchronizationSetting resource.
type ScheduledSynchronizationSettingArgs struct {
	// The name of the share account.
	AccountName pulumi.StringInput
	// Kind of synchronization setting.
	// Expected value is 'ScheduleBased'.
	Kind pulumi.StringInput
	// Recurrence Interval
	RecurrenceInterval pulumi.StringInput
	// The resource group name.
	ResourceGroupName pulumi.StringInput
	// The name of the share to add the synchronization setting to.
	ShareName pulumi.StringInput
	// The name of the synchronizationSetting.
	SynchronizationSettingName pulumi.StringPtrInput
	// Synchronization time
	SynchronizationTime pulumi.StringInput
}

func (ScheduledSynchronizationSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledSynchronizationSettingArgs)(nil)).Elem()
}

type ScheduledSynchronizationSettingInput interface {
	pulumi.Input

	ToScheduledSynchronizationSettingOutput() ScheduledSynchronizationSettingOutput
	ToScheduledSynchronizationSettingOutputWithContext(ctx context.Context) ScheduledSynchronizationSettingOutput
}

func (*ScheduledSynchronizationSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledSynchronizationSetting)(nil)).Elem()
}

func (i *ScheduledSynchronizationSetting) ToScheduledSynchronizationSettingOutput() ScheduledSynchronizationSettingOutput {
	return i.ToScheduledSynchronizationSettingOutputWithContext(context.Background())
}

func (i *ScheduledSynchronizationSetting) ToScheduledSynchronizationSettingOutputWithContext(ctx context.Context) ScheduledSynchronizationSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledSynchronizationSettingOutput)
}

type ScheduledSynchronizationSettingOutput struct{ *pulumi.OutputState }

func (ScheduledSynchronizationSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledSynchronizationSetting)(nil)).Elem()
}

func (o ScheduledSynchronizationSettingOutput) ToScheduledSynchronizationSettingOutput() ScheduledSynchronizationSettingOutput {
	return o
}

func (o ScheduledSynchronizationSettingOutput) ToScheduledSynchronizationSettingOutputWithContext(ctx context.Context) ScheduledSynchronizationSettingOutput {
	return o
}

// Time at which the synchronization setting was created.
func (o ScheduledSynchronizationSettingOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledSynchronizationSetting) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Kind of synchronization setting.
// Expected value is 'ScheduleBased'.
func (o ScheduledSynchronizationSettingOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledSynchronizationSetting) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Name of the azure resource
func (o ScheduledSynchronizationSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledSynchronizationSetting) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Gets or sets the provisioning state
func (o ScheduledSynchronizationSettingOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledSynchronizationSetting) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Recurrence Interval
func (o ScheduledSynchronizationSettingOutput) RecurrenceInterval() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledSynchronizationSetting) pulumi.StringOutput { return v.RecurrenceInterval }).(pulumi.StringOutput)
}

// Synchronization time
func (o ScheduledSynchronizationSettingOutput) SynchronizationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledSynchronizationSetting) pulumi.StringOutput { return v.SynchronizationTime }).(pulumi.StringOutput)
}

// Type of the azure resource
func (o ScheduledSynchronizationSettingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledSynchronizationSetting) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Name of the user who created the synchronization setting.
func (o ScheduledSynchronizationSettingOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledSynchronizationSetting) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ScheduledSynchronizationSettingOutput{})
}
