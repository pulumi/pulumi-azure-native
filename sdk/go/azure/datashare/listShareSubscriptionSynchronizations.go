// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datashare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A consumer side list of share subscription synchronizations
// API Version: 2020-09-01.
func ListShareSubscriptionSynchronizations(ctx *pulumi.Context, args *ListShareSubscriptionSynchronizationsArgs, opts ...pulumi.InvokeOption) (*ListShareSubscriptionSynchronizationsResult, error) {
	var rv ListShareSubscriptionSynchronizationsResult
	err := ctx.Invoke("azure-native:datashare:listShareSubscriptionSynchronizations", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ListShareSubscriptionSynchronizationsArgs struct {
	// The name of the share account.
	AccountName string `pulumi:"accountName"`
	// Filters the results using OData syntax.
	Filter *string `pulumi:"filter"`
	// Sorts the results using OData syntax.
	Orderby *string `pulumi:"orderby"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the share subscription.
	ShareSubscriptionName string `pulumi:"shareSubscriptionName"`
	// Continuation token
	SkipToken *string `pulumi:"skipToken"`
}

// A consumer side list of share subscription synchronizations
type ListShareSubscriptionSynchronizationsResult struct {
	// The Url of next result page.
	NextLink *string `pulumi:"nextLink"`
	// Collection of items of type DataTransferObjects.
	Value []ShareSubscriptionSynchronizationResponse `pulumi:"value"`
}

func ListShareSubscriptionSynchronizationsOutput(ctx *pulumi.Context, args ListShareSubscriptionSynchronizationsOutputArgs, opts ...pulumi.InvokeOption) ListShareSubscriptionSynchronizationsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ListShareSubscriptionSynchronizationsResult, error) {
			args := v.(ListShareSubscriptionSynchronizationsArgs)
			r, err := ListShareSubscriptionSynchronizations(ctx, &args, opts...)
			var s ListShareSubscriptionSynchronizationsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ListShareSubscriptionSynchronizationsResultOutput)
}

type ListShareSubscriptionSynchronizationsOutputArgs struct {
	// The name of the share account.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Filters the results using OData syntax.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// Sorts the results using OData syntax.
	Orderby pulumi.StringPtrInput `pulumi:"orderby"`
	// The resource group name.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the share subscription.
	ShareSubscriptionName pulumi.StringInput `pulumi:"shareSubscriptionName"`
	// Continuation token
	SkipToken pulumi.StringPtrInput `pulumi:"skipToken"`
}

func (ListShareSubscriptionSynchronizationsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListShareSubscriptionSynchronizationsArgs)(nil)).Elem()
}

// A consumer side list of share subscription synchronizations
type ListShareSubscriptionSynchronizationsResultOutput struct{ *pulumi.OutputState }

func (ListShareSubscriptionSynchronizationsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListShareSubscriptionSynchronizationsResult)(nil)).Elem()
}

func (o ListShareSubscriptionSynchronizationsResultOutput) ToListShareSubscriptionSynchronizationsResultOutput() ListShareSubscriptionSynchronizationsResultOutput {
	return o
}

func (o ListShareSubscriptionSynchronizationsResultOutput) ToListShareSubscriptionSynchronizationsResultOutputWithContext(ctx context.Context) ListShareSubscriptionSynchronizationsResultOutput {
	return o
}

// The Url of next result page.
func (o ListShareSubscriptionSynchronizationsResultOutput) NextLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListShareSubscriptionSynchronizationsResult) *string { return v.NextLink }).(pulumi.StringPtrOutput)
}

// Collection of items of type DataTransferObjects.
func (o ListShareSubscriptionSynchronizationsResultOutput) Value() ShareSubscriptionSynchronizationResponseArrayOutput {
	return o.ApplyT(func(v ListShareSubscriptionSynchronizationsResult) []ShareSubscriptionSynchronizationResponse {
		return v.Value
	}).(ShareSubscriptionSynchronizationResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ListShareSubscriptionSynchronizationsResultOutput{})
}
