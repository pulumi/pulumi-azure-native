// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210501

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The comparison expression to be used in the budgets.
type BudgetComparisonExpression struct {
	// The name of the column to use in comparison.
	Name string `pulumi:"name"`
	// The operator to use for comparison.
	Operator string `pulumi:"operator"`
	// Array of values to use for comparison
	Values []string `pulumi:"values"`
}

// BudgetComparisonExpressionInput is an input type that accepts BudgetComparisonExpressionArgs and BudgetComparisonExpressionOutput values.
// You can construct a concrete instance of `BudgetComparisonExpressionInput` via:
//
//	BudgetComparisonExpressionArgs{...}
type BudgetComparisonExpressionInput interface {
	pulumi.Input

	ToBudgetComparisonExpressionOutput() BudgetComparisonExpressionOutput
	ToBudgetComparisonExpressionOutputWithContext(context.Context) BudgetComparisonExpressionOutput
}

// The comparison expression to be used in the budgets.
type BudgetComparisonExpressionArgs struct {
	// The name of the column to use in comparison.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator to use for comparison.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Array of values to use for comparison
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (BudgetComparisonExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetComparisonExpression)(nil)).Elem()
}

func (i BudgetComparisonExpressionArgs) ToBudgetComparisonExpressionOutput() BudgetComparisonExpressionOutput {
	return i.ToBudgetComparisonExpressionOutputWithContext(context.Background())
}

func (i BudgetComparisonExpressionArgs) ToBudgetComparisonExpressionOutputWithContext(ctx context.Context) BudgetComparisonExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetComparisonExpressionOutput)
}

func (i BudgetComparisonExpressionArgs) ToBudgetComparisonExpressionPtrOutput() BudgetComparisonExpressionPtrOutput {
	return i.ToBudgetComparisonExpressionPtrOutputWithContext(context.Background())
}

func (i BudgetComparisonExpressionArgs) ToBudgetComparisonExpressionPtrOutputWithContext(ctx context.Context) BudgetComparisonExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetComparisonExpressionOutput).ToBudgetComparisonExpressionPtrOutputWithContext(ctx)
}

// BudgetComparisonExpressionPtrInput is an input type that accepts BudgetComparisonExpressionArgs, BudgetComparisonExpressionPtr and BudgetComparisonExpressionPtrOutput values.
// You can construct a concrete instance of `BudgetComparisonExpressionPtrInput` via:
//
//	        BudgetComparisonExpressionArgs{...}
//
//	or:
//
//	        nil
type BudgetComparisonExpressionPtrInput interface {
	pulumi.Input

	ToBudgetComparisonExpressionPtrOutput() BudgetComparisonExpressionPtrOutput
	ToBudgetComparisonExpressionPtrOutputWithContext(context.Context) BudgetComparisonExpressionPtrOutput
}

type budgetComparisonExpressionPtrType BudgetComparisonExpressionArgs

func BudgetComparisonExpressionPtr(v *BudgetComparisonExpressionArgs) BudgetComparisonExpressionPtrInput {
	return (*budgetComparisonExpressionPtrType)(v)
}

func (*budgetComparisonExpressionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetComparisonExpression)(nil)).Elem()
}

func (i *budgetComparisonExpressionPtrType) ToBudgetComparisonExpressionPtrOutput() BudgetComparisonExpressionPtrOutput {
	return i.ToBudgetComparisonExpressionPtrOutputWithContext(context.Background())
}

func (i *budgetComparisonExpressionPtrType) ToBudgetComparisonExpressionPtrOutputWithContext(ctx context.Context) BudgetComparisonExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetComparisonExpressionPtrOutput)
}

// The comparison expression to be used in the budgets.
type BudgetComparisonExpressionOutput struct{ *pulumi.OutputState }

func (BudgetComparisonExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetComparisonExpression)(nil)).Elem()
}

func (o BudgetComparisonExpressionOutput) ToBudgetComparisonExpressionOutput() BudgetComparisonExpressionOutput {
	return o
}

func (o BudgetComparisonExpressionOutput) ToBudgetComparisonExpressionOutputWithContext(ctx context.Context) BudgetComparisonExpressionOutput {
	return o
}

func (o BudgetComparisonExpressionOutput) ToBudgetComparisonExpressionPtrOutput() BudgetComparisonExpressionPtrOutput {
	return o.ToBudgetComparisonExpressionPtrOutputWithContext(context.Background())
}

func (o BudgetComparisonExpressionOutput) ToBudgetComparisonExpressionPtrOutputWithContext(ctx context.Context) BudgetComparisonExpressionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetComparisonExpression) *BudgetComparisonExpression {
		return &v
	}).(BudgetComparisonExpressionPtrOutput)
}

// The name of the column to use in comparison.
func (o BudgetComparisonExpressionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetComparisonExpression) string { return v.Name }).(pulumi.StringOutput)
}

// The operator to use for comparison.
func (o BudgetComparisonExpressionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetComparisonExpression) string { return v.Operator }).(pulumi.StringOutput)
}

// Array of values to use for comparison
func (o BudgetComparisonExpressionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetComparisonExpression) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type BudgetComparisonExpressionPtrOutput struct{ *pulumi.OutputState }

func (BudgetComparisonExpressionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetComparisonExpression)(nil)).Elem()
}

func (o BudgetComparisonExpressionPtrOutput) ToBudgetComparisonExpressionPtrOutput() BudgetComparisonExpressionPtrOutput {
	return o
}

func (o BudgetComparisonExpressionPtrOutput) ToBudgetComparisonExpressionPtrOutputWithContext(ctx context.Context) BudgetComparisonExpressionPtrOutput {
	return o
}

func (o BudgetComparisonExpressionPtrOutput) Elem() BudgetComparisonExpressionOutput {
	return o.ApplyT(func(v *BudgetComparisonExpression) BudgetComparisonExpression {
		if v != nil {
			return *v
		}
		var ret BudgetComparisonExpression
		return ret
	}).(BudgetComparisonExpressionOutput)
}

// The name of the column to use in comparison.
func (o BudgetComparisonExpressionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetComparisonExpression) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The operator to use for comparison.
func (o BudgetComparisonExpressionPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetComparisonExpression) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Array of values to use for comparison
func (o BudgetComparisonExpressionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BudgetComparisonExpression) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// The comparison expression to be used in the budgets.
type BudgetComparisonExpressionResponse struct {
	// The name of the column to use in comparison.
	Name string `pulumi:"name"`
	// The operator to use for comparison.
	Operator string `pulumi:"operator"`
	// Array of values to use for comparison
	Values []string `pulumi:"values"`
}

// The comparison expression to be used in the budgets.
type BudgetComparisonExpressionResponseOutput struct{ *pulumi.OutputState }

func (BudgetComparisonExpressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetComparisonExpressionResponse)(nil)).Elem()
}

func (o BudgetComparisonExpressionResponseOutput) ToBudgetComparisonExpressionResponseOutput() BudgetComparisonExpressionResponseOutput {
	return o
}

func (o BudgetComparisonExpressionResponseOutput) ToBudgetComparisonExpressionResponseOutputWithContext(ctx context.Context) BudgetComparisonExpressionResponseOutput {
	return o
}

// The name of the column to use in comparison.
func (o BudgetComparisonExpressionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetComparisonExpressionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The operator to use for comparison.
func (o BudgetComparisonExpressionResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetComparisonExpressionResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Array of values to use for comparison
func (o BudgetComparisonExpressionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetComparisonExpressionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type BudgetComparisonExpressionResponsePtrOutput struct{ *pulumi.OutputState }

func (BudgetComparisonExpressionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetComparisonExpressionResponse)(nil)).Elem()
}

func (o BudgetComparisonExpressionResponsePtrOutput) ToBudgetComparisonExpressionResponsePtrOutput() BudgetComparisonExpressionResponsePtrOutput {
	return o
}

func (o BudgetComparisonExpressionResponsePtrOutput) ToBudgetComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) BudgetComparisonExpressionResponsePtrOutput {
	return o
}

func (o BudgetComparisonExpressionResponsePtrOutput) Elem() BudgetComparisonExpressionResponseOutput {
	return o.ApplyT(func(v *BudgetComparisonExpressionResponse) BudgetComparisonExpressionResponse {
		if v != nil {
			return *v
		}
		var ret BudgetComparisonExpressionResponse
		return ret
	}).(BudgetComparisonExpressionResponseOutput)
}

// The name of the column to use in comparison.
func (o BudgetComparisonExpressionResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetComparisonExpressionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The operator to use for comparison.
func (o BudgetComparisonExpressionResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetComparisonExpressionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Array of values to use for comparison
func (o BudgetComparisonExpressionResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BudgetComparisonExpressionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// May be used to filter budgets by resource group, resource, or meter.
type BudgetFilter struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []BudgetFilterProperties `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimensions *BudgetComparisonExpression `pulumi:"dimensions"`
	// The logical "NOT" expression.
	Not *BudgetFilterProperties `pulumi:"not"`
	// Has comparison expression for a tag
	Tags *BudgetComparisonExpression `pulumi:"tags"`
}

// BudgetFilterInput is an input type that accepts BudgetFilterArgs and BudgetFilterOutput values.
// You can construct a concrete instance of `BudgetFilterInput` via:
//
//	BudgetFilterArgs{...}
type BudgetFilterInput interface {
	pulumi.Input

	ToBudgetFilterOutput() BudgetFilterOutput
	ToBudgetFilterOutputWithContext(context.Context) BudgetFilterOutput
}

// May be used to filter budgets by resource group, resource, or meter.
type BudgetFilterArgs struct {
	// The logical "AND" expression. Must have at least 2 items.
	And BudgetFilterPropertiesArrayInput `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimensions BudgetComparisonExpressionPtrInput `pulumi:"dimensions"`
	// The logical "NOT" expression.
	Not BudgetFilterPropertiesPtrInput `pulumi:"not"`
	// Has comparison expression for a tag
	Tags BudgetComparisonExpressionPtrInput `pulumi:"tags"`
}

func (BudgetFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetFilter)(nil)).Elem()
}

func (i BudgetFilterArgs) ToBudgetFilterOutput() BudgetFilterOutput {
	return i.ToBudgetFilterOutputWithContext(context.Background())
}

func (i BudgetFilterArgs) ToBudgetFilterOutputWithContext(ctx context.Context) BudgetFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterOutput)
}

func (i BudgetFilterArgs) ToBudgetFilterPtrOutput() BudgetFilterPtrOutput {
	return i.ToBudgetFilterPtrOutputWithContext(context.Background())
}

func (i BudgetFilterArgs) ToBudgetFilterPtrOutputWithContext(ctx context.Context) BudgetFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterOutput).ToBudgetFilterPtrOutputWithContext(ctx)
}

// BudgetFilterPtrInput is an input type that accepts BudgetFilterArgs, BudgetFilterPtr and BudgetFilterPtrOutput values.
// You can construct a concrete instance of `BudgetFilterPtrInput` via:
//
//	        BudgetFilterArgs{...}
//
//	or:
//
//	        nil
type BudgetFilterPtrInput interface {
	pulumi.Input

	ToBudgetFilterPtrOutput() BudgetFilterPtrOutput
	ToBudgetFilterPtrOutputWithContext(context.Context) BudgetFilterPtrOutput
}

type budgetFilterPtrType BudgetFilterArgs

func BudgetFilterPtr(v *BudgetFilterArgs) BudgetFilterPtrInput {
	return (*budgetFilterPtrType)(v)
}

func (*budgetFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetFilter)(nil)).Elem()
}

func (i *budgetFilterPtrType) ToBudgetFilterPtrOutput() BudgetFilterPtrOutput {
	return i.ToBudgetFilterPtrOutputWithContext(context.Background())
}

func (i *budgetFilterPtrType) ToBudgetFilterPtrOutputWithContext(ctx context.Context) BudgetFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterPtrOutput)
}

// May be used to filter budgets by resource group, resource, or meter.
type BudgetFilterOutput struct{ *pulumi.OutputState }

func (BudgetFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetFilter)(nil)).Elem()
}

func (o BudgetFilterOutput) ToBudgetFilterOutput() BudgetFilterOutput {
	return o
}

func (o BudgetFilterOutput) ToBudgetFilterOutputWithContext(ctx context.Context) BudgetFilterOutput {
	return o
}

func (o BudgetFilterOutput) ToBudgetFilterPtrOutput() BudgetFilterPtrOutput {
	return o.ToBudgetFilterPtrOutputWithContext(context.Background())
}

func (o BudgetFilterOutput) ToBudgetFilterPtrOutputWithContext(ctx context.Context) BudgetFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetFilter) *BudgetFilter {
		return &v
	}).(BudgetFilterPtrOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o BudgetFilterOutput) And() BudgetFilterPropertiesArrayOutput {
	return o.ApplyT(func(v BudgetFilter) []BudgetFilterProperties { return v.And }).(BudgetFilterPropertiesArrayOutput)
}

// Has comparison expression for a dimension
func (o BudgetFilterOutput) Dimensions() BudgetComparisonExpressionPtrOutput {
	return o.ApplyT(func(v BudgetFilter) *BudgetComparisonExpression { return v.Dimensions }).(BudgetComparisonExpressionPtrOutput)
}

// The logical "NOT" expression.
func (o BudgetFilterOutput) Not() BudgetFilterPropertiesPtrOutput {
	return o.ApplyT(func(v BudgetFilter) *BudgetFilterProperties { return v.Not }).(BudgetFilterPropertiesPtrOutput)
}

// Has comparison expression for a tag
func (o BudgetFilterOutput) Tags() BudgetComparisonExpressionPtrOutput {
	return o.ApplyT(func(v BudgetFilter) *BudgetComparisonExpression { return v.Tags }).(BudgetComparisonExpressionPtrOutput)
}

type BudgetFilterPtrOutput struct{ *pulumi.OutputState }

func (BudgetFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetFilter)(nil)).Elem()
}

func (o BudgetFilterPtrOutput) ToBudgetFilterPtrOutput() BudgetFilterPtrOutput {
	return o
}

func (o BudgetFilterPtrOutput) ToBudgetFilterPtrOutputWithContext(ctx context.Context) BudgetFilterPtrOutput {
	return o
}

func (o BudgetFilterPtrOutput) Elem() BudgetFilterOutput {
	return o.ApplyT(func(v *BudgetFilter) BudgetFilter {
		if v != nil {
			return *v
		}
		var ret BudgetFilter
		return ret
	}).(BudgetFilterOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o BudgetFilterPtrOutput) And() BudgetFilterPropertiesArrayOutput {
	return o.ApplyT(func(v *BudgetFilter) []BudgetFilterProperties {
		if v == nil {
			return nil
		}
		return v.And
	}).(BudgetFilterPropertiesArrayOutput)
}

// Has comparison expression for a dimension
func (o BudgetFilterPtrOutput) Dimensions() BudgetComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *BudgetFilter) *BudgetComparisonExpression {
		if v == nil {
			return nil
		}
		return v.Dimensions
	}).(BudgetComparisonExpressionPtrOutput)
}

// The logical "NOT" expression.
func (o BudgetFilterPtrOutput) Not() BudgetFilterPropertiesPtrOutput {
	return o.ApplyT(func(v *BudgetFilter) *BudgetFilterProperties {
		if v == nil {
			return nil
		}
		return v.Not
	}).(BudgetFilterPropertiesPtrOutput)
}

// Has comparison expression for a tag
func (o BudgetFilterPtrOutput) Tags() BudgetComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *BudgetFilter) *BudgetComparisonExpression {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(BudgetComparisonExpressionPtrOutput)
}

// The Dimensions or Tags to filter a budget by.
type BudgetFilterProperties struct {
	// Has comparison expression for a dimension
	Dimensions *BudgetComparisonExpression `pulumi:"dimensions"`
	// Has comparison expression for a tag
	Tags *BudgetComparisonExpression `pulumi:"tags"`
}

// BudgetFilterPropertiesInput is an input type that accepts BudgetFilterPropertiesArgs and BudgetFilterPropertiesOutput values.
// You can construct a concrete instance of `BudgetFilterPropertiesInput` via:
//
//	BudgetFilterPropertiesArgs{...}
type BudgetFilterPropertiesInput interface {
	pulumi.Input

	ToBudgetFilterPropertiesOutput() BudgetFilterPropertiesOutput
	ToBudgetFilterPropertiesOutputWithContext(context.Context) BudgetFilterPropertiesOutput
}

// The Dimensions or Tags to filter a budget by.
type BudgetFilterPropertiesArgs struct {
	// Has comparison expression for a dimension
	Dimensions BudgetComparisonExpressionPtrInput `pulumi:"dimensions"`
	// Has comparison expression for a tag
	Tags BudgetComparisonExpressionPtrInput `pulumi:"tags"`
}

func (BudgetFilterPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetFilterProperties)(nil)).Elem()
}

func (i BudgetFilterPropertiesArgs) ToBudgetFilterPropertiesOutput() BudgetFilterPropertiesOutput {
	return i.ToBudgetFilterPropertiesOutputWithContext(context.Background())
}

func (i BudgetFilterPropertiesArgs) ToBudgetFilterPropertiesOutputWithContext(ctx context.Context) BudgetFilterPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterPropertiesOutput)
}

func (i BudgetFilterPropertiesArgs) ToBudgetFilterPropertiesPtrOutput() BudgetFilterPropertiesPtrOutput {
	return i.ToBudgetFilterPropertiesPtrOutputWithContext(context.Background())
}

func (i BudgetFilterPropertiesArgs) ToBudgetFilterPropertiesPtrOutputWithContext(ctx context.Context) BudgetFilterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterPropertiesOutput).ToBudgetFilterPropertiesPtrOutputWithContext(ctx)
}

// BudgetFilterPropertiesPtrInput is an input type that accepts BudgetFilterPropertiesArgs, BudgetFilterPropertiesPtr and BudgetFilterPropertiesPtrOutput values.
// You can construct a concrete instance of `BudgetFilterPropertiesPtrInput` via:
//
//	        BudgetFilterPropertiesArgs{...}
//
//	or:
//
//	        nil
type BudgetFilterPropertiesPtrInput interface {
	pulumi.Input

	ToBudgetFilterPropertiesPtrOutput() BudgetFilterPropertiesPtrOutput
	ToBudgetFilterPropertiesPtrOutputWithContext(context.Context) BudgetFilterPropertiesPtrOutput
}

type budgetFilterPropertiesPtrType BudgetFilterPropertiesArgs

func BudgetFilterPropertiesPtr(v *BudgetFilterPropertiesArgs) BudgetFilterPropertiesPtrInput {
	return (*budgetFilterPropertiesPtrType)(v)
}

func (*budgetFilterPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetFilterProperties)(nil)).Elem()
}

func (i *budgetFilterPropertiesPtrType) ToBudgetFilterPropertiesPtrOutput() BudgetFilterPropertiesPtrOutput {
	return i.ToBudgetFilterPropertiesPtrOutputWithContext(context.Background())
}

func (i *budgetFilterPropertiesPtrType) ToBudgetFilterPropertiesPtrOutputWithContext(ctx context.Context) BudgetFilterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterPropertiesPtrOutput)
}

// BudgetFilterPropertiesArrayInput is an input type that accepts BudgetFilterPropertiesArray and BudgetFilterPropertiesArrayOutput values.
// You can construct a concrete instance of `BudgetFilterPropertiesArrayInput` via:
//
//	BudgetFilterPropertiesArray{ BudgetFilterPropertiesArgs{...} }
type BudgetFilterPropertiesArrayInput interface {
	pulumi.Input

	ToBudgetFilterPropertiesArrayOutput() BudgetFilterPropertiesArrayOutput
	ToBudgetFilterPropertiesArrayOutputWithContext(context.Context) BudgetFilterPropertiesArrayOutput
}

type BudgetFilterPropertiesArray []BudgetFilterPropertiesInput

func (BudgetFilterPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetFilterProperties)(nil)).Elem()
}

func (i BudgetFilterPropertiesArray) ToBudgetFilterPropertiesArrayOutput() BudgetFilterPropertiesArrayOutput {
	return i.ToBudgetFilterPropertiesArrayOutputWithContext(context.Background())
}

func (i BudgetFilterPropertiesArray) ToBudgetFilterPropertiesArrayOutputWithContext(ctx context.Context) BudgetFilterPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterPropertiesArrayOutput)
}

// The Dimensions or Tags to filter a budget by.
type BudgetFilterPropertiesOutput struct{ *pulumi.OutputState }

func (BudgetFilterPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetFilterProperties)(nil)).Elem()
}

func (o BudgetFilterPropertiesOutput) ToBudgetFilterPropertiesOutput() BudgetFilterPropertiesOutput {
	return o
}

func (o BudgetFilterPropertiesOutput) ToBudgetFilterPropertiesOutputWithContext(ctx context.Context) BudgetFilterPropertiesOutput {
	return o
}

func (o BudgetFilterPropertiesOutput) ToBudgetFilterPropertiesPtrOutput() BudgetFilterPropertiesPtrOutput {
	return o.ToBudgetFilterPropertiesPtrOutputWithContext(context.Background())
}

func (o BudgetFilterPropertiesOutput) ToBudgetFilterPropertiesPtrOutputWithContext(ctx context.Context) BudgetFilterPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BudgetFilterProperties) *BudgetFilterProperties {
		return &v
	}).(BudgetFilterPropertiesPtrOutput)
}

// Has comparison expression for a dimension
func (o BudgetFilterPropertiesOutput) Dimensions() BudgetComparisonExpressionPtrOutput {
	return o.ApplyT(func(v BudgetFilterProperties) *BudgetComparisonExpression { return v.Dimensions }).(BudgetComparisonExpressionPtrOutput)
}

// Has comparison expression for a tag
func (o BudgetFilterPropertiesOutput) Tags() BudgetComparisonExpressionPtrOutput {
	return o.ApplyT(func(v BudgetFilterProperties) *BudgetComparisonExpression { return v.Tags }).(BudgetComparisonExpressionPtrOutput)
}

type BudgetFilterPropertiesPtrOutput struct{ *pulumi.OutputState }

func (BudgetFilterPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetFilterProperties)(nil)).Elem()
}

func (o BudgetFilterPropertiesPtrOutput) ToBudgetFilterPropertiesPtrOutput() BudgetFilterPropertiesPtrOutput {
	return o
}

func (o BudgetFilterPropertiesPtrOutput) ToBudgetFilterPropertiesPtrOutputWithContext(ctx context.Context) BudgetFilterPropertiesPtrOutput {
	return o
}

func (o BudgetFilterPropertiesPtrOutput) Elem() BudgetFilterPropertiesOutput {
	return o.ApplyT(func(v *BudgetFilterProperties) BudgetFilterProperties {
		if v != nil {
			return *v
		}
		var ret BudgetFilterProperties
		return ret
	}).(BudgetFilterPropertiesOutput)
}

// Has comparison expression for a dimension
func (o BudgetFilterPropertiesPtrOutput) Dimensions() BudgetComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *BudgetFilterProperties) *BudgetComparisonExpression {
		if v == nil {
			return nil
		}
		return v.Dimensions
	}).(BudgetComparisonExpressionPtrOutput)
}

// Has comparison expression for a tag
func (o BudgetFilterPropertiesPtrOutput) Tags() BudgetComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *BudgetFilterProperties) *BudgetComparisonExpression {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(BudgetComparisonExpressionPtrOutput)
}

type BudgetFilterPropertiesArrayOutput struct{ *pulumi.OutputState }

func (BudgetFilterPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetFilterProperties)(nil)).Elem()
}

func (o BudgetFilterPropertiesArrayOutput) ToBudgetFilterPropertiesArrayOutput() BudgetFilterPropertiesArrayOutput {
	return o
}

func (o BudgetFilterPropertiesArrayOutput) ToBudgetFilterPropertiesArrayOutputWithContext(ctx context.Context) BudgetFilterPropertiesArrayOutput {
	return o
}

func (o BudgetFilterPropertiesArrayOutput) Index(i pulumi.IntInput) BudgetFilterPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BudgetFilterProperties {
		return vs[0].([]BudgetFilterProperties)[vs[1].(int)]
	}).(BudgetFilterPropertiesOutput)
}

// The Dimensions or Tags to filter a budget by.
type BudgetFilterPropertiesResponse struct {
	// Has comparison expression for a dimension
	Dimensions *BudgetComparisonExpressionResponse `pulumi:"dimensions"`
	// Has comparison expression for a tag
	Tags *BudgetComparisonExpressionResponse `pulumi:"tags"`
}

// The Dimensions or Tags to filter a budget by.
type BudgetFilterPropertiesResponseOutput struct{ *pulumi.OutputState }

func (BudgetFilterPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetFilterPropertiesResponse)(nil)).Elem()
}

func (o BudgetFilterPropertiesResponseOutput) ToBudgetFilterPropertiesResponseOutput() BudgetFilterPropertiesResponseOutput {
	return o
}

func (o BudgetFilterPropertiesResponseOutput) ToBudgetFilterPropertiesResponseOutputWithContext(ctx context.Context) BudgetFilterPropertiesResponseOutput {
	return o
}

// Has comparison expression for a dimension
func (o BudgetFilterPropertiesResponseOutput) Dimensions() BudgetComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v BudgetFilterPropertiesResponse) *BudgetComparisonExpressionResponse { return v.Dimensions }).(BudgetComparisonExpressionResponsePtrOutput)
}

// Has comparison expression for a tag
func (o BudgetFilterPropertiesResponseOutput) Tags() BudgetComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v BudgetFilterPropertiesResponse) *BudgetComparisonExpressionResponse { return v.Tags }).(BudgetComparisonExpressionResponsePtrOutput)
}

type BudgetFilterPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (BudgetFilterPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetFilterPropertiesResponse)(nil)).Elem()
}

func (o BudgetFilterPropertiesResponsePtrOutput) ToBudgetFilterPropertiesResponsePtrOutput() BudgetFilterPropertiesResponsePtrOutput {
	return o
}

func (o BudgetFilterPropertiesResponsePtrOutput) ToBudgetFilterPropertiesResponsePtrOutputWithContext(ctx context.Context) BudgetFilterPropertiesResponsePtrOutput {
	return o
}

func (o BudgetFilterPropertiesResponsePtrOutput) Elem() BudgetFilterPropertiesResponseOutput {
	return o.ApplyT(func(v *BudgetFilterPropertiesResponse) BudgetFilterPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret BudgetFilterPropertiesResponse
		return ret
	}).(BudgetFilterPropertiesResponseOutput)
}

// Has comparison expression for a dimension
func (o BudgetFilterPropertiesResponsePtrOutput) Dimensions() BudgetComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *BudgetFilterPropertiesResponse) *BudgetComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Dimensions
	}).(BudgetComparisonExpressionResponsePtrOutput)
}

// Has comparison expression for a tag
func (o BudgetFilterPropertiesResponsePtrOutput) Tags() BudgetComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *BudgetFilterPropertiesResponse) *BudgetComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(BudgetComparisonExpressionResponsePtrOutput)
}

type BudgetFilterPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (BudgetFilterPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetFilterPropertiesResponse)(nil)).Elem()
}

func (o BudgetFilterPropertiesResponseArrayOutput) ToBudgetFilterPropertiesResponseArrayOutput() BudgetFilterPropertiesResponseArrayOutput {
	return o
}

func (o BudgetFilterPropertiesResponseArrayOutput) ToBudgetFilterPropertiesResponseArrayOutputWithContext(ctx context.Context) BudgetFilterPropertiesResponseArrayOutput {
	return o
}

func (o BudgetFilterPropertiesResponseArrayOutput) Index(i pulumi.IntInput) BudgetFilterPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BudgetFilterPropertiesResponse {
		return vs[0].([]BudgetFilterPropertiesResponse)[vs[1].(int)]
	}).(BudgetFilterPropertiesResponseOutput)
}

// May be used to filter budgets by resource group, resource, or meter.
type BudgetFilterResponse struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []BudgetFilterPropertiesResponse `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimensions *BudgetComparisonExpressionResponse `pulumi:"dimensions"`
	// The logical "NOT" expression.
	Not *BudgetFilterPropertiesResponse `pulumi:"not"`
	// Has comparison expression for a tag
	Tags *BudgetComparisonExpressionResponse `pulumi:"tags"`
}

// May be used to filter budgets by resource group, resource, or meter.
type BudgetFilterResponseOutput struct{ *pulumi.OutputState }

func (BudgetFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetFilterResponse)(nil)).Elem()
}

func (o BudgetFilterResponseOutput) ToBudgetFilterResponseOutput() BudgetFilterResponseOutput {
	return o
}

func (o BudgetFilterResponseOutput) ToBudgetFilterResponseOutputWithContext(ctx context.Context) BudgetFilterResponseOutput {
	return o
}

// The logical "AND" expression. Must have at least 2 items.
func (o BudgetFilterResponseOutput) And() BudgetFilterPropertiesResponseArrayOutput {
	return o.ApplyT(func(v BudgetFilterResponse) []BudgetFilterPropertiesResponse { return v.And }).(BudgetFilterPropertiesResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o BudgetFilterResponseOutput) Dimensions() BudgetComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v BudgetFilterResponse) *BudgetComparisonExpressionResponse { return v.Dimensions }).(BudgetComparisonExpressionResponsePtrOutput)
}

// The logical "NOT" expression.
func (o BudgetFilterResponseOutput) Not() BudgetFilterPropertiesResponsePtrOutput {
	return o.ApplyT(func(v BudgetFilterResponse) *BudgetFilterPropertiesResponse { return v.Not }).(BudgetFilterPropertiesResponsePtrOutput)
}

// Has comparison expression for a tag
func (o BudgetFilterResponseOutput) Tags() BudgetComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v BudgetFilterResponse) *BudgetComparisonExpressionResponse { return v.Tags }).(BudgetComparisonExpressionResponsePtrOutput)
}

type BudgetFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (BudgetFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetFilterResponse)(nil)).Elem()
}

func (o BudgetFilterResponsePtrOutput) ToBudgetFilterResponsePtrOutput() BudgetFilterResponsePtrOutput {
	return o
}

func (o BudgetFilterResponsePtrOutput) ToBudgetFilterResponsePtrOutputWithContext(ctx context.Context) BudgetFilterResponsePtrOutput {
	return o
}

func (o BudgetFilterResponsePtrOutput) Elem() BudgetFilterResponseOutput {
	return o.ApplyT(func(v *BudgetFilterResponse) BudgetFilterResponse {
		if v != nil {
			return *v
		}
		var ret BudgetFilterResponse
		return ret
	}).(BudgetFilterResponseOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o BudgetFilterResponsePtrOutput) And() BudgetFilterPropertiesResponseArrayOutput {
	return o.ApplyT(func(v *BudgetFilterResponse) []BudgetFilterPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.And
	}).(BudgetFilterPropertiesResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o BudgetFilterResponsePtrOutput) Dimensions() BudgetComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *BudgetFilterResponse) *BudgetComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Dimensions
	}).(BudgetComparisonExpressionResponsePtrOutput)
}

// The logical "NOT" expression.
func (o BudgetFilterResponsePtrOutput) Not() BudgetFilterPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *BudgetFilterResponse) *BudgetFilterPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.Not
	}).(BudgetFilterPropertiesResponsePtrOutput)
}

// Has comparison expression for a tag
func (o BudgetFilterResponsePtrOutput) Tags() BudgetComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *BudgetFilterResponse) *BudgetComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(BudgetComparisonExpressionResponsePtrOutput)
}

// The start and end date for a budget.
type BudgetTimePeriod struct {
	// The end date for the budget. If not provided, we default this to 10 years from the start date.
	EndDate *string `pulumi:"endDate"`
	// The start date for the budget.
	StartDate string `pulumi:"startDate"`
}

// BudgetTimePeriodInput is an input type that accepts BudgetTimePeriodArgs and BudgetTimePeriodOutput values.
// You can construct a concrete instance of `BudgetTimePeriodInput` via:
//
//	BudgetTimePeriodArgs{...}
type BudgetTimePeriodInput interface {
	pulumi.Input

	ToBudgetTimePeriodOutput() BudgetTimePeriodOutput
	ToBudgetTimePeriodOutputWithContext(context.Context) BudgetTimePeriodOutput
}

// The start and end date for a budget.
type BudgetTimePeriodArgs struct {
	// The end date for the budget. If not provided, we default this to 10 years from the start date.
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// The start date for the budget.
	StartDate pulumi.StringInput `pulumi:"startDate"`
}

func (BudgetTimePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetTimePeriod)(nil)).Elem()
}

func (i BudgetTimePeriodArgs) ToBudgetTimePeriodOutput() BudgetTimePeriodOutput {
	return i.ToBudgetTimePeriodOutputWithContext(context.Background())
}

func (i BudgetTimePeriodArgs) ToBudgetTimePeriodOutputWithContext(ctx context.Context) BudgetTimePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTimePeriodOutput)
}

// The start and end date for a budget.
type BudgetTimePeriodOutput struct{ *pulumi.OutputState }

func (BudgetTimePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetTimePeriod)(nil)).Elem()
}

func (o BudgetTimePeriodOutput) ToBudgetTimePeriodOutput() BudgetTimePeriodOutput {
	return o
}

func (o BudgetTimePeriodOutput) ToBudgetTimePeriodOutputWithContext(ctx context.Context) BudgetTimePeriodOutput {
	return o
}

// The end date for the budget. If not provided, we default this to 10 years from the start date.
func (o BudgetTimePeriodOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetTimePeriod) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// The start date for the budget.
func (o BudgetTimePeriodOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetTimePeriod) string { return v.StartDate }).(pulumi.StringOutput)
}

// The start and end date for a budget.
type BudgetTimePeriodResponse struct {
	// The end date for the budget. If not provided, we default this to 10 years from the start date.
	EndDate *string `pulumi:"endDate"`
	// The start date for the budget.
	StartDate string `pulumi:"startDate"`
}

// The start and end date for a budget.
type BudgetTimePeriodResponseOutput struct{ *pulumi.OutputState }

func (BudgetTimePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetTimePeriodResponse)(nil)).Elem()
}

func (o BudgetTimePeriodResponseOutput) ToBudgetTimePeriodResponseOutput() BudgetTimePeriodResponseOutput {
	return o
}

func (o BudgetTimePeriodResponseOutput) ToBudgetTimePeriodResponseOutputWithContext(ctx context.Context) BudgetTimePeriodResponseOutput {
	return o
}

// The end date for the budget. If not provided, we default this to 10 years from the start date.
func (o BudgetTimePeriodResponseOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetTimePeriodResponse) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// The start date for the budget.
func (o BudgetTimePeriodResponseOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetTimePeriodResponse) string { return v.StartDate }).(pulumi.StringOutput)
}

// The current amount of cost which is being tracked for a budget.
type CurrentSpendResponse struct {
	// The total amount of cost which is being tracked by the budget.
	Amount float64 `pulumi:"amount"`
	// The unit of measure for the budget amount.
	Unit string `pulumi:"unit"`
}

// The current amount of cost which is being tracked for a budget.
type CurrentSpendResponseOutput struct{ *pulumi.OutputState }

func (CurrentSpendResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CurrentSpendResponse)(nil)).Elem()
}

func (o CurrentSpendResponseOutput) ToCurrentSpendResponseOutput() CurrentSpendResponseOutput {
	return o
}

func (o CurrentSpendResponseOutput) ToCurrentSpendResponseOutputWithContext(ctx context.Context) CurrentSpendResponseOutput {
	return o
}

// The total amount of cost which is being tracked by the budget.
func (o CurrentSpendResponseOutput) Amount() pulumi.Float64Output {
	return o.ApplyT(func(v CurrentSpendResponse) float64 { return v.Amount }).(pulumi.Float64Output)
}

// The unit of measure for the budget amount.
func (o CurrentSpendResponseOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v CurrentSpendResponse) string { return v.Unit }).(pulumi.StringOutput)
}

// The forecasted cost which is being tracked for a budget.
type ForecastSpendResponse struct {
	// The forecasted cost for the total time period which is being tracked by the budget. This value is only provided if the budget contains a forecast alert type.
	Amount float64 `pulumi:"amount"`
	// The unit of measure for the budget amount.
	Unit string `pulumi:"unit"`
}

// The forecasted cost which is being tracked for a budget.
type ForecastSpendResponseOutput struct{ *pulumi.OutputState }

func (ForecastSpendResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForecastSpendResponse)(nil)).Elem()
}

func (o ForecastSpendResponseOutput) ToForecastSpendResponseOutput() ForecastSpendResponseOutput {
	return o
}

func (o ForecastSpendResponseOutput) ToForecastSpendResponseOutputWithContext(ctx context.Context) ForecastSpendResponseOutput {
	return o
}

// The forecasted cost for the total time period which is being tracked by the budget. This value is only provided if the budget contains a forecast alert type.
func (o ForecastSpendResponseOutput) Amount() pulumi.Float64Output {
	return o.ApplyT(func(v ForecastSpendResponse) float64 { return v.Amount }).(pulumi.Float64Output)
}

// The unit of measure for the budget amount.
func (o ForecastSpendResponseOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v ForecastSpendResponse) string { return v.Unit }).(pulumi.StringOutput)
}

// The notification associated with a budget.
type Notification struct {
	// Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified.
	ContactEmails []string `pulumi:"contactEmails"`
	// Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id. Only supported at Subscription or Resource Group scopes.
	ContactGroups []string `pulumi:"contactGroups"`
	// Contact roles to send the budget notification to when the threshold is exceeded.
	ContactRoles []string `pulumi:"contactRoles"`
	// The notification is enabled or not.
	Enabled bool `pulumi:"enabled"`
	// The comparison operator.
	Operator string `pulumi:"operator"`
	// Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
	Threshold float64 `pulumi:"threshold"`
	// The type of threshold
	ThresholdType *string `pulumi:"thresholdType"`
}

// Defaults sets the appropriate defaults for Notification
func (val *Notification) Defaults() *Notification {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ThresholdType) {
		thresholdType_ := "Actual"
		tmp.ThresholdType = &thresholdType_
	}
	return &tmp
}

// NotificationInput is an input type that accepts NotificationArgs and NotificationOutput values.
// You can construct a concrete instance of `NotificationInput` via:
//
//	NotificationArgs{...}
type NotificationInput interface {
	pulumi.Input

	ToNotificationOutput() NotificationOutput
	ToNotificationOutputWithContext(context.Context) NotificationOutput
}

// The notification associated with a budget.
type NotificationArgs struct {
	// Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified.
	ContactEmails pulumi.StringArrayInput `pulumi:"contactEmails"`
	// Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id. Only supported at Subscription or Resource Group scopes.
	ContactGroups pulumi.StringArrayInput `pulumi:"contactGroups"`
	// Contact roles to send the budget notification to when the threshold is exceeded.
	ContactRoles pulumi.StringArrayInput `pulumi:"contactRoles"`
	// The notification is enabled or not.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The comparison operator.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// The type of threshold
	ThresholdType pulumi.StringPtrInput `pulumi:"thresholdType"`
}

// Defaults sets the appropriate defaults for NotificationArgs
func (val *NotificationArgs) Defaults() *NotificationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ThresholdType) {
		tmp.ThresholdType = pulumi.StringPtr("Actual")
	}
	return &tmp
}
func (NotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Notification)(nil)).Elem()
}

func (i NotificationArgs) ToNotificationOutput() NotificationOutput {
	return i.ToNotificationOutputWithContext(context.Background())
}

func (i NotificationArgs) ToNotificationOutputWithContext(ctx context.Context) NotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationOutput)
}

// NotificationMapInput is an input type that accepts NotificationMap and NotificationMapOutput values.
// You can construct a concrete instance of `NotificationMapInput` via:
//
//	NotificationMap{ "key": NotificationArgs{...} }
type NotificationMapInput interface {
	pulumi.Input

	ToNotificationMapOutput() NotificationMapOutput
	ToNotificationMapOutputWithContext(context.Context) NotificationMapOutput
}

type NotificationMap map[string]NotificationInput

func (NotificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Notification)(nil)).Elem()
}

func (i NotificationMap) ToNotificationMapOutput() NotificationMapOutput {
	return i.ToNotificationMapOutputWithContext(context.Background())
}

func (i NotificationMap) ToNotificationMapOutputWithContext(ctx context.Context) NotificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationMapOutput)
}

// The notification associated with a budget.
type NotificationOutput struct{ *pulumi.OutputState }

func (NotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Notification)(nil)).Elem()
}

func (o NotificationOutput) ToNotificationOutput() NotificationOutput {
	return o
}

func (o NotificationOutput) ToNotificationOutputWithContext(ctx context.Context) NotificationOutput {
	return o
}

// Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified.
func (o NotificationOutput) ContactEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Notification) []string { return v.ContactEmails }).(pulumi.StringArrayOutput)
}

// Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id. Only supported at Subscription or Resource Group scopes.
func (o NotificationOutput) ContactGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Notification) []string { return v.ContactGroups }).(pulumi.StringArrayOutput)
}

// Contact roles to send the budget notification to when the threshold is exceeded.
func (o NotificationOutput) ContactRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Notification) []string { return v.ContactRoles }).(pulumi.StringArrayOutput)
}

// The notification is enabled or not.
func (o NotificationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v Notification) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The comparison operator.
func (o NotificationOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v Notification) string { return v.Operator }).(pulumi.StringOutput)
}

// Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
func (o NotificationOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v Notification) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// The type of threshold
func (o NotificationOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Notification) *string { return v.ThresholdType }).(pulumi.StringPtrOutput)
}

type NotificationMapOutput struct{ *pulumi.OutputState }

func (NotificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Notification)(nil)).Elem()
}

func (o NotificationMapOutput) ToNotificationMapOutput() NotificationMapOutput {
	return o
}

func (o NotificationMapOutput) ToNotificationMapOutputWithContext(ctx context.Context) NotificationMapOutput {
	return o
}

func (o NotificationMapOutput) MapIndex(k pulumi.StringInput) NotificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Notification {
		return vs[0].(map[string]Notification)[vs[1].(string)]
	}).(NotificationOutput)
}

// The notification associated with a budget.
type NotificationResponse struct {
	// Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified.
	ContactEmails []string `pulumi:"contactEmails"`
	// Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id. Only supported at Subscription or Resource Group scopes.
	ContactGroups []string `pulumi:"contactGroups"`
	// Contact roles to send the budget notification to when the threshold is exceeded.
	ContactRoles []string `pulumi:"contactRoles"`
	// The notification is enabled or not.
	Enabled bool `pulumi:"enabled"`
	// The comparison operator.
	Operator string `pulumi:"operator"`
	// Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
	Threshold float64 `pulumi:"threshold"`
	// The type of threshold
	ThresholdType *string `pulumi:"thresholdType"`
}

// Defaults sets the appropriate defaults for NotificationResponse
func (val *NotificationResponse) Defaults() *NotificationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ThresholdType) {
		thresholdType_ := "Actual"
		tmp.ThresholdType = &thresholdType_
	}
	return &tmp
}

// The notification associated with a budget.
type NotificationResponseOutput struct{ *pulumi.OutputState }

func (NotificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationResponse)(nil)).Elem()
}

func (o NotificationResponseOutput) ToNotificationResponseOutput() NotificationResponseOutput {
	return o
}

func (o NotificationResponseOutput) ToNotificationResponseOutputWithContext(ctx context.Context) NotificationResponseOutput {
	return o
}

// Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified.
func (o NotificationResponseOutput) ContactEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationResponse) []string { return v.ContactEmails }).(pulumi.StringArrayOutput)
}

// Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id. Only supported at Subscription or Resource Group scopes.
func (o NotificationResponseOutput) ContactGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationResponse) []string { return v.ContactGroups }).(pulumi.StringArrayOutput)
}

// Contact roles to send the budget notification to when the threshold is exceeded.
func (o NotificationResponseOutput) ContactRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationResponse) []string { return v.ContactRoles }).(pulumi.StringArrayOutput)
}

// The notification is enabled or not.
func (o NotificationResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v NotificationResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The comparison operator.
func (o NotificationResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
func (o NotificationResponseOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v NotificationResponse) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// The type of threshold
func (o NotificationResponseOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationResponse) *string { return v.ThresholdType }).(pulumi.StringPtrOutput)
}

type NotificationResponseMapOutput struct{ *pulumi.OutputState }

func (NotificationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NotificationResponse)(nil)).Elem()
}

func (o NotificationResponseMapOutput) ToNotificationResponseMapOutput() NotificationResponseMapOutput {
	return o
}

func (o NotificationResponseMapOutput) ToNotificationResponseMapOutputWithContext(ctx context.Context) NotificationResponseMapOutput {
	return o
}

func (o NotificationResponseMapOutput) MapIndex(k pulumi.StringInput) NotificationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NotificationResponse {
		return vs[0].(map[string]NotificationResponse)[vs[1].(string)]
	}).(NotificationResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(BudgetComparisonExpressionOutput{})
	pulumi.RegisterOutputType(BudgetComparisonExpressionPtrOutput{})
	pulumi.RegisterOutputType(BudgetComparisonExpressionResponseOutput{})
	pulumi.RegisterOutputType(BudgetComparisonExpressionResponsePtrOutput{})
	pulumi.RegisterOutputType(BudgetFilterOutput{})
	pulumi.RegisterOutputType(BudgetFilterPtrOutput{})
	pulumi.RegisterOutputType(BudgetFilterPropertiesOutput{})
	pulumi.RegisterOutputType(BudgetFilterPropertiesPtrOutput{})
	pulumi.RegisterOutputType(BudgetFilterPropertiesArrayOutput{})
	pulumi.RegisterOutputType(BudgetFilterPropertiesResponseOutput{})
	pulumi.RegisterOutputType(BudgetFilterPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(BudgetFilterPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(BudgetFilterResponseOutput{})
	pulumi.RegisterOutputType(BudgetFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(BudgetTimePeriodOutput{})
	pulumi.RegisterOutputType(BudgetTimePeriodResponseOutput{})
	pulumi.RegisterOutputType(CurrentSpendResponseOutput{})
	pulumi.RegisterOutputType(ForecastSpendResponseOutput{})
	pulumi.RegisterOutputType(NotificationOutput{})
	pulumi.RegisterOutputType(NotificationMapOutput{})
	pulumi.RegisterOutputType(NotificationResponseOutput{})
	pulumi.RegisterOutputType(NotificationResponseMapOutput{})
}
