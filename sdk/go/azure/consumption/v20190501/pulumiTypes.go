// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190501

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The start and end date for a budget.
type BudgetTimePeriod struct {
	// The end date for the budget. If not provided, we default this to 10 years from the start date.
	EndDate *string `pulumi:"endDate"`
	// The start date for the budget.
	StartDate string `pulumi:"startDate"`
}

// BudgetTimePeriodInput is an input type that accepts BudgetTimePeriodArgs and BudgetTimePeriodOutput values.
// You can construct a concrete instance of `BudgetTimePeriodInput` via:
//
//          BudgetTimePeriodArgs{...}
type BudgetTimePeriodInput interface {
	pulumi.Input

	ToBudgetTimePeriodOutput() BudgetTimePeriodOutput
	ToBudgetTimePeriodOutputWithContext(context.Context) BudgetTimePeriodOutput
}

// The start and end date for a budget.
type BudgetTimePeriodArgs struct {
	// The end date for the budget. If not provided, we default this to 10 years from the start date.
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// The start date for the budget.
	StartDate pulumi.StringInput `pulumi:"startDate"`
}

func (BudgetTimePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetTimePeriod)(nil)).Elem()
}

func (i BudgetTimePeriodArgs) ToBudgetTimePeriodOutput() BudgetTimePeriodOutput {
	return i.ToBudgetTimePeriodOutputWithContext(context.Background())
}

func (i BudgetTimePeriodArgs) ToBudgetTimePeriodOutputWithContext(ctx context.Context) BudgetTimePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTimePeriodOutput)
}

func (i BudgetTimePeriodArgs) ToBudgetTimePeriodPtrOutput() BudgetTimePeriodPtrOutput {
	return i.ToBudgetTimePeriodPtrOutputWithContext(context.Background())
}

func (i BudgetTimePeriodArgs) ToBudgetTimePeriodPtrOutputWithContext(ctx context.Context) BudgetTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTimePeriodOutput).ToBudgetTimePeriodPtrOutputWithContext(ctx)
}

// BudgetTimePeriodPtrInput is an input type that accepts BudgetTimePeriodArgs, BudgetTimePeriodPtr and BudgetTimePeriodPtrOutput values.
// You can construct a concrete instance of `BudgetTimePeriodPtrInput` via:
//
//          BudgetTimePeriodArgs{...}
//
//  or:
//
//          nil
type BudgetTimePeriodPtrInput interface {
	pulumi.Input

	ToBudgetTimePeriodPtrOutput() BudgetTimePeriodPtrOutput
	ToBudgetTimePeriodPtrOutputWithContext(context.Context) BudgetTimePeriodPtrOutput
}

type budgetTimePeriodPtrType BudgetTimePeriodArgs

func BudgetTimePeriodPtr(v *BudgetTimePeriodArgs) BudgetTimePeriodPtrInput {
	return (*budgetTimePeriodPtrType)(v)
}

func (*budgetTimePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetTimePeriod)(nil)).Elem()
}

func (i *budgetTimePeriodPtrType) ToBudgetTimePeriodPtrOutput() BudgetTimePeriodPtrOutput {
	return i.ToBudgetTimePeriodPtrOutputWithContext(context.Background())
}

func (i *budgetTimePeriodPtrType) ToBudgetTimePeriodPtrOutputWithContext(ctx context.Context) BudgetTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTimePeriodPtrOutput)
}

// The start and end date for a budget.
type BudgetTimePeriodOutput struct{ *pulumi.OutputState }

func (BudgetTimePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetTimePeriod)(nil)).Elem()
}

func (o BudgetTimePeriodOutput) ToBudgetTimePeriodOutput() BudgetTimePeriodOutput {
	return o
}

func (o BudgetTimePeriodOutput) ToBudgetTimePeriodOutputWithContext(ctx context.Context) BudgetTimePeriodOutput {
	return o
}

func (o BudgetTimePeriodOutput) ToBudgetTimePeriodPtrOutput() BudgetTimePeriodPtrOutput {
	return o.ToBudgetTimePeriodPtrOutputWithContext(context.Background())
}

func (o BudgetTimePeriodOutput) ToBudgetTimePeriodPtrOutputWithContext(ctx context.Context) BudgetTimePeriodPtrOutput {
	return o.ApplyT(func(v BudgetTimePeriod) *BudgetTimePeriod {
		return &v
	}).(BudgetTimePeriodPtrOutput)
}

// The end date for the budget. If not provided, we default this to 10 years from the start date.
func (o BudgetTimePeriodOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetTimePeriod) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// The start date for the budget.
func (o BudgetTimePeriodOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetTimePeriod) string { return v.StartDate }).(pulumi.StringOutput)
}

type BudgetTimePeriodPtrOutput struct{ *pulumi.OutputState }

func (BudgetTimePeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetTimePeriod)(nil)).Elem()
}

func (o BudgetTimePeriodPtrOutput) ToBudgetTimePeriodPtrOutput() BudgetTimePeriodPtrOutput {
	return o
}

func (o BudgetTimePeriodPtrOutput) ToBudgetTimePeriodPtrOutputWithContext(ctx context.Context) BudgetTimePeriodPtrOutput {
	return o
}

func (o BudgetTimePeriodPtrOutput) Elem() BudgetTimePeriodOutput {
	return o.ApplyT(func(v *BudgetTimePeriod) BudgetTimePeriod { return *v }).(BudgetTimePeriodOutput)
}

// The end date for the budget. If not provided, we default this to 10 years from the start date.
func (o BudgetTimePeriodPtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetTimePeriod) *string {
		if v == nil {
			return nil
		}
		return v.EndDate
	}).(pulumi.StringPtrOutput)
}

// The start date for the budget.
func (o BudgetTimePeriodPtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetTimePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.StartDate
	}).(pulumi.StringPtrOutput)
}

// The start and end date for a budget.
type BudgetTimePeriodResponse struct {
	// The end date for the budget. If not provided, we default this to 10 years from the start date.
	EndDate *string `pulumi:"endDate"`
	// The start date for the budget.
	StartDate string `pulumi:"startDate"`
}

// BudgetTimePeriodResponseInput is an input type that accepts BudgetTimePeriodResponseArgs and BudgetTimePeriodResponseOutput values.
// You can construct a concrete instance of `BudgetTimePeriodResponseInput` via:
//
//          BudgetTimePeriodResponseArgs{...}
type BudgetTimePeriodResponseInput interface {
	pulumi.Input

	ToBudgetTimePeriodResponseOutput() BudgetTimePeriodResponseOutput
	ToBudgetTimePeriodResponseOutputWithContext(context.Context) BudgetTimePeriodResponseOutput
}

// The start and end date for a budget.
type BudgetTimePeriodResponseArgs struct {
	// The end date for the budget. If not provided, we default this to 10 years from the start date.
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// The start date for the budget.
	StartDate pulumi.StringInput `pulumi:"startDate"`
}

func (BudgetTimePeriodResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetTimePeriodResponse)(nil)).Elem()
}

func (i BudgetTimePeriodResponseArgs) ToBudgetTimePeriodResponseOutput() BudgetTimePeriodResponseOutput {
	return i.ToBudgetTimePeriodResponseOutputWithContext(context.Background())
}

func (i BudgetTimePeriodResponseArgs) ToBudgetTimePeriodResponseOutputWithContext(ctx context.Context) BudgetTimePeriodResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTimePeriodResponseOutput)
}

func (i BudgetTimePeriodResponseArgs) ToBudgetTimePeriodResponsePtrOutput() BudgetTimePeriodResponsePtrOutput {
	return i.ToBudgetTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (i BudgetTimePeriodResponseArgs) ToBudgetTimePeriodResponsePtrOutputWithContext(ctx context.Context) BudgetTimePeriodResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTimePeriodResponseOutput).ToBudgetTimePeriodResponsePtrOutputWithContext(ctx)
}

// BudgetTimePeriodResponsePtrInput is an input type that accepts BudgetTimePeriodResponseArgs, BudgetTimePeriodResponsePtr and BudgetTimePeriodResponsePtrOutput values.
// You can construct a concrete instance of `BudgetTimePeriodResponsePtrInput` via:
//
//          BudgetTimePeriodResponseArgs{...}
//
//  or:
//
//          nil
type BudgetTimePeriodResponsePtrInput interface {
	pulumi.Input

	ToBudgetTimePeriodResponsePtrOutput() BudgetTimePeriodResponsePtrOutput
	ToBudgetTimePeriodResponsePtrOutputWithContext(context.Context) BudgetTimePeriodResponsePtrOutput
}

type budgetTimePeriodResponsePtrType BudgetTimePeriodResponseArgs

func BudgetTimePeriodResponsePtr(v *BudgetTimePeriodResponseArgs) BudgetTimePeriodResponsePtrInput {
	return (*budgetTimePeriodResponsePtrType)(v)
}

func (*budgetTimePeriodResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetTimePeriodResponse)(nil)).Elem()
}

func (i *budgetTimePeriodResponsePtrType) ToBudgetTimePeriodResponsePtrOutput() BudgetTimePeriodResponsePtrOutput {
	return i.ToBudgetTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (i *budgetTimePeriodResponsePtrType) ToBudgetTimePeriodResponsePtrOutputWithContext(ctx context.Context) BudgetTimePeriodResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTimePeriodResponsePtrOutput)
}

// The start and end date for a budget.
type BudgetTimePeriodResponseOutput struct{ *pulumi.OutputState }

func (BudgetTimePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetTimePeriodResponse)(nil)).Elem()
}

func (o BudgetTimePeriodResponseOutput) ToBudgetTimePeriodResponseOutput() BudgetTimePeriodResponseOutput {
	return o
}

func (o BudgetTimePeriodResponseOutput) ToBudgetTimePeriodResponseOutputWithContext(ctx context.Context) BudgetTimePeriodResponseOutput {
	return o
}

func (o BudgetTimePeriodResponseOutput) ToBudgetTimePeriodResponsePtrOutput() BudgetTimePeriodResponsePtrOutput {
	return o.ToBudgetTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (o BudgetTimePeriodResponseOutput) ToBudgetTimePeriodResponsePtrOutputWithContext(ctx context.Context) BudgetTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v BudgetTimePeriodResponse) *BudgetTimePeriodResponse {
		return &v
	}).(BudgetTimePeriodResponsePtrOutput)
}

// The end date for the budget. If not provided, we default this to 10 years from the start date.
func (o BudgetTimePeriodResponseOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetTimePeriodResponse) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// The start date for the budget.
func (o BudgetTimePeriodResponseOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetTimePeriodResponse) string { return v.StartDate }).(pulumi.StringOutput)
}

type BudgetTimePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (BudgetTimePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetTimePeriodResponse)(nil)).Elem()
}

func (o BudgetTimePeriodResponsePtrOutput) ToBudgetTimePeriodResponsePtrOutput() BudgetTimePeriodResponsePtrOutput {
	return o
}

func (o BudgetTimePeriodResponsePtrOutput) ToBudgetTimePeriodResponsePtrOutputWithContext(ctx context.Context) BudgetTimePeriodResponsePtrOutput {
	return o
}

func (o BudgetTimePeriodResponsePtrOutput) Elem() BudgetTimePeriodResponseOutput {
	return o.ApplyT(func(v *BudgetTimePeriodResponse) BudgetTimePeriodResponse { return *v }).(BudgetTimePeriodResponseOutput)
}

// The end date for the budget. If not provided, we default this to 10 years from the start date.
func (o BudgetTimePeriodResponsePtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndDate
	}).(pulumi.StringPtrOutput)
}

// The start date for the budget.
func (o BudgetTimePeriodResponsePtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartDate
	}).(pulumi.StringPtrOutput)
}

// The current amount of cost which is being tracked for a budget.
type CurrentSpendResponse struct {
	// The total amount of cost which is being tracked by the budget.
	Amount float64 `pulumi:"amount"`
	// The unit of measure for the budget amount.
	Unit string `pulumi:"unit"`
}

// CurrentSpendResponseInput is an input type that accepts CurrentSpendResponseArgs and CurrentSpendResponseOutput values.
// You can construct a concrete instance of `CurrentSpendResponseInput` via:
//
//          CurrentSpendResponseArgs{...}
type CurrentSpendResponseInput interface {
	pulumi.Input

	ToCurrentSpendResponseOutput() CurrentSpendResponseOutput
	ToCurrentSpendResponseOutputWithContext(context.Context) CurrentSpendResponseOutput
}

// The current amount of cost which is being tracked for a budget.
type CurrentSpendResponseArgs struct {
	// The total amount of cost which is being tracked by the budget.
	Amount pulumi.Float64Input `pulumi:"amount"`
	// The unit of measure for the budget amount.
	Unit pulumi.StringInput `pulumi:"unit"`
}

func (CurrentSpendResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CurrentSpendResponse)(nil)).Elem()
}

func (i CurrentSpendResponseArgs) ToCurrentSpendResponseOutput() CurrentSpendResponseOutput {
	return i.ToCurrentSpendResponseOutputWithContext(context.Background())
}

func (i CurrentSpendResponseArgs) ToCurrentSpendResponseOutputWithContext(ctx context.Context) CurrentSpendResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CurrentSpendResponseOutput)
}

func (i CurrentSpendResponseArgs) ToCurrentSpendResponsePtrOutput() CurrentSpendResponsePtrOutput {
	return i.ToCurrentSpendResponsePtrOutputWithContext(context.Background())
}

func (i CurrentSpendResponseArgs) ToCurrentSpendResponsePtrOutputWithContext(ctx context.Context) CurrentSpendResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CurrentSpendResponseOutput).ToCurrentSpendResponsePtrOutputWithContext(ctx)
}

// CurrentSpendResponsePtrInput is an input type that accepts CurrentSpendResponseArgs, CurrentSpendResponsePtr and CurrentSpendResponsePtrOutput values.
// You can construct a concrete instance of `CurrentSpendResponsePtrInput` via:
//
//          CurrentSpendResponseArgs{...}
//
//  or:
//
//          nil
type CurrentSpendResponsePtrInput interface {
	pulumi.Input

	ToCurrentSpendResponsePtrOutput() CurrentSpendResponsePtrOutput
	ToCurrentSpendResponsePtrOutputWithContext(context.Context) CurrentSpendResponsePtrOutput
}

type currentSpendResponsePtrType CurrentSpendResponseArgs

func CurrentSpendResponsePtr(v *CurrentSpendResponseArgs) CurrentSpendResponsePtrInput {
	return (*currentSpendResponsePtrType)(v)
}

func (*currentSpendResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CurrentSpendResponse)(nil)).Elem()
}

func (i *currentSpendResponsePtrType) ToCurrentSpendResponsePtrOutput() CurrentSpendResponsePtrOutput {
	return i.ToCurrentSpendResponsePtrOutputWithContext(context.Background())
}

func (i *currentSpendResponsePtrType) ToCurrentSpendResponsePtrOutputWithContext(ctx context.Context) CurrentSpendResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CurrentSpendResponsePtrOutput)
}

// The current amount of cost which is being tracked for a budget.
type CurrentSpendResponseOutput struct{ *pulumi.OutputState }

func (CurrentSpendResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CurrentSpendResponse)(nil)).Elem()
}

func (o CurrentSpendResponseOutput) ToCurrentSpendResponseOutput() CurrentSpendResponseOutput {
	return o
}

func (o CurrentSpendResponseOutput) ToCurrentSpendResponseOutputWithContext(ctx context.Context) CurrentSpendResponseOutput {
	return o
}

func (o CurrentSpendResponseOutput) ToCurrentSpendResponsePtrOutput() CurrentSpendResponsePtrOutput {
	return o.ToCurrentSpendResponsePtrOutputWithContext(context.Background())
}

func (o CurrentSpendResponseOutput) ToCurrentSpendResponsePtrOutputWithContext(ctx context.Context) CurrentSpendResponsePtrOutput {
	return o.ApplyT(func(v CurrentSpendResponse) *CurrentSpendResponse {
		return &v
	}).(CurrentSpendResponsePtrOutput)
}

// The total amount of cost which is being tracked by the budget.
func (o CurrentSpendResponseOutput) Amount() pulumi.Float64Output {
	return o.ApplyT(func(v CurrentSpendResponse) float64 { return v.Amount }).(pulumi.Float64Output)
}

// The unit of measure for the budget amount.
func (o CurrentSpendResponseOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v CurrentSpendResponse) string { return v.Unit }).(pulumi.StringOutput)
}

type CurrentSpendResponsePtrOutput struct{ *pulumi.OutputState }

func (CurrentSpendResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CurrentSpendResponse)(nil)).Elem()
}

func (o CurrentSpendResponsePtrOutput) ToCurrentSpendResponsePtrOutput() CurrentSpendResponsePtrOutput {
	return o
}

func (o CurrentSpendResponsePtrOutput) ToCurrentSpendResponsePtrOutputWithContext(ctx context.Context) CurrentSpendResponsePtrOutput {
	return o
}

func (o CurrentSpendResponsePtrOutput) Elem() CurrentSpendResponseOutput {
	return o.ApplyT(func(v *CurrentSpendResponse) CurrentSpendResponse { return *v }).(CurrentSpendResponseOutput)
}

// The total amount of cost which is being tracked by the budget.
func (o CurrentSpendResponsePtrOutput) Amount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CurrentSpendResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Amount
	}).(pulumi.Float64PtrOutput)
}

// The unit of measure for the budget amount.
func (o CurrentSpendResponsePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CurrentSpendResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Unit
	}).(pulumi.StringPtrOutput)
}

// May be used to filter budgets by user-specified dimensions and/or tags.
type Filter struct {
	// The list of filters on meters (GUID), mandatory for budgets of usage category.
	Meters []string `pulumi:"meters"`
	// The list of filters on resource groups, allowed at subscription level only.
	ResourceGroups []string `pulumi:"resourceGroups"`
	// The list of filters on resources.
	Resources []string `pulumi:"resources"`
	// The dictionary of filters on tags.
	Tags map[string][]string `pulumi:"tags"`
}

// FilterInput is an input type that accepts FilterArgs and FilterOutput values.
// You can construct a concrete instance of `FilterInput` via:
//
//          FilterArgs{...}
type FilterInput interface {
	pulumi.Input

	ToFilterOutput() FilterOutput
	ToFilterOutputWithContext(context.Context) FilterOutput
}

// May be used to filter budgets by user-specified dimensions and/or tags.
type FilterArgs struct {
	// The list of filters on meters (GUID), mandatory for budgets of usage category.
	Meters pulumi.StringArrayInput `pulumi:"meters"`
	// The list of filters on resource groups, allowed at subscription level only.
	ResourceGroups pulumi.StringArrayInput `pulumi:"resourceGroups"`
	// The list of filters on resources.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
	// The dictionary of filters on tags.
	Tags pulumi.StringArrayMapInput `pulumi:"tags"`
}

func (FilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Filter)(nil)).Elem()
}

func (i FilterArgs) ToFilterOutput() FilterOutput {
	return i.ToFilterOutputWithContext(context.Background())
}

func (i FilterArgs) ToFilterOutputWithContext(ctx context.Context) FilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterOutput)
}

func (i FilterArgs) ToFilterPtrOutput() FilterPtrOutput {
	return i.ToFilterPtrOutputWithContext(context.Background())
}

func (i FilterArgs) ToFilterPtrOutputWithContext(ctx context.Context) FilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterOutput).ToFilterPtrOutputWithContext(ctx)
}

// FilterPtrInput is an input type that accepts FilterArgs, FilterPtr and FilterPtrOutput values.
// You can construct a concrete instance of `FilterPtrInput` via:
//
//          FilterArgs{...}
//
//  or:
//
//          nil
type FilterPtrInput interface {
	pulumi.Input

	ToFilterPtrOutput() FilterPtrOutput
	ToFilterPtrOutputWithContext(context.Context) FilterPtrOutput
}

type filterPtrType FilterArgs

func FilterPtr(v *FilterArgs) FilterPtrInput {
	return (*filterPtrType)(v)
}

func (*filterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Filter)(nil)).Elem()
}

func (i *filterPtrType) ToFilterPtrOutput() FilterPtrOutput {
	return i.ToFilterPtrOutputWithContext(context.Background())
}

func (i *filterPtrType) ToFilterPtrOutputWithContext(ctx context.Context) FilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterPtrOutput)
}

// May be used to filter budgets by user-specified dimensions and/or tags.
type FilterOutput struct{ *pulumi.OutputState }

func (FilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Filter)(nil)).Elem()
}

func (o FilterOutput) ToFilterOutput() FilterOutput {
	return o
}

func (o FilterOutput) ToFilterOutputWithContext(ctx context.Context) FilterOutput {
	return o
}

func (o FilterOutput) ToFilterPtrOutput() FilterPtrOutput {
	return o.ToFilterPtrOutputWithContext(context.Background())
}

func (o FilterOutput) ToFilterPtrOutputWithContext(ctx context.Context) FilterPtrOutput {
	return o.ApplyT(func(v Filter) *Filter {
		return &v
	}).(FilterPtrOutput)
}

// The list of filters on meters (GUID), mandatory for budgets of usage category.
func (o FilterOutput) Meters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Filter) []string { return v.Meters }).(pulumi.StringArrayOutput)
}

// The list of filters on resource groups, allowed at subscription level only.
func (o FilterOutput) ResourceGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Filter) []string { return v.ResourceGroups }).(pulumi.StringArrayOutput)
}

// The list of filters on resources.
func (o FilterOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Filter) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

// The dictionary of filters on tags.
func (o FilterOutput) Tags() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v Filter) map[string][]string { return v.Tags }).(pulumi.StringArrayMapOutput)
}

type FilterPtrOutput struct{ *pulumi.OutputState }

func (FilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Filter)(nil)).Elem()
}

func (o FilterPtrOutput) ToFilterPtrOutput() FilterPtrOutput {
	return o
}

func (o FilterPtrOutput) ToFilterPtrOutputWithContext(ctx context.Context) FilterPtrOutput {
	return o
}

func (o FilterPtrOutput) Elem() FilterOutput {
	return o.ApplyT(func(v *Filter) Filter { return *v }).(FilterOutput)
}

// The list of filters on meters (GUID), mandatory for budgets of usage category.
func (o FilterPtrOutput) Meters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Filter) []string {
		if v == nil {
			return nil
		}
		return v.Meters
	}).(pulumi.StringArrayOutput)
}

// The list of filters on resource groups, allowed at subscription level only.
func (o FilterPtrOutput) ResourceGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Filter) []string {
		if v == nil {
			return nil
		}
		return v.ResourceGroups
	}).(pulumi.StringArrayOutput)
}

// The list of filters on resources.
func (o FilterPtrOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Filter) []string {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(pulumi.StringArrayOutput)
}

// The dictionary of filters on tags.
func (o FilterPtrOutput) Tags() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *Filter) map[string][]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayMapOutput)
}

// May be used to filter budgets by user-specified dimensions and/or tags.
type FilterResponse struct {
	// The list of filters on meters (GUID), mandatory for budgets of usage category.
	Meters []string `pulumi:"meters"`
	// The list of filters on resource groups, allowed at subscription level only.
	ResourceGroups []string `pulumi:"resourceGroups"`
	// The list of filters on resources.
	Resources []string `pulumi:"resources"`
	// The dictionary of filters on tags.
	Tags map[string][]string `pulumi:"tags"`
}

// FilterResponseInput is an input type that accepts FilterResponseArgs and FilterResponseOutput values.
// You can construct a concrete instance of `FilterResponseInput` via:
//
//          FilterResponseArgs{...}
type FilterResponseInput interface {
	pulumi.Input

	ToFilterResponseOutput() FilterResponseOutput
	ToFilterResponseOutputWithContext(context.Context) FilterResponseOutput
}

// May be used to filter budgets by user-specified dimensions and/or tags.
type FilterResponseArgs struct {
	// The list of filters on meters (GUID), mandatory for budgets of usage category.
	Meters pulumi.StringArrayInput `pulumi:"meters"`
	// The list of filters on resource groups, allowed at subscription level only.
	ResourceGroups pulumi.StringArrayInput `pulumi:"resourceGroups"`
	// The list of filters on resources.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
	// The dictionary of filters on tags.
	Tags pulumi.StringArrayMapInput `pulumi:"tags"`
}

func (FilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterResponse)(nil)).Elem()
}

func (i FilterResponseArgs) ToFilterResponseOutput() FilterResponseOutput {
	return i.ToFilterResponseOutputWithContext(context.Background())
}

func (i FilterResponseArgs) ToFilterResponseOutputWithContext(ctx context.Context) FilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterResponseOutput)
}

func (i FilterResponseArgs) ToFilterResponsePtrOutput() FilterResponsePtrOutput {
	return i.ToFilterResponsePtrOutputWithContext(context.Background())
}

func (i FilterResponseArgs) ToFilterResponsePtrOutputWithContext(ctx context.Context) FilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterResponseOutput).ToFilterResponsePtrOutputWithContext(ctx)
}

// FilterResponsePtrInput is an input type that accepts FilterResponseArgs, FilterResponsePtr and FilterResponsePtrOutput values.
// You can construct a concrete instance of `FilterResponsePtrInput` via:
//
//          FilterResponseArgs{...}
//
//  or:
//
//          nil
type FilterResponsePtrInput interface {
	pulumi.Input

	ToFilterResponsePtrOutput() FilterResponsePtrOutput
	ToFilterResponsePtrOutputWithContext(context.Context) FilterResponsePtrOutput
}

type filterResponsePtrType FilterResponseArgs

func FilterResponsePtr(v *FilterResponseArgs) FilterResponsePtrInput {
	return (*filterResponsePtrType)(v)
}

func (*filterResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FilterResponse)(nil)).Elem()
}

func (i *filterResponsePtrType) ToFilterResponsePtrOutput() FilterResponsePtrOutput {
	return i.ToFilterResponsePtrOutputWithContext(context.Background())
}

func (i *filterResponsePtrType) ToFilterResponsePtrOutputWithContext(ctx context.Context) FilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterResponsePtrOutput)
}

// May be used to filter budgets by user-specified dimensions and/or tags.
type FilterResponseOutput struct{ *pulumi.OutputState }

func (FilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterResponse)(nil)).Elem()
}

func (o FilterResponseOutput) ToFilterResponseOutput() FilterResponseOutput {
	return o
}

func (o FilterResponseOutput) ToFilterResponseOutputWithContext(ctx context.Context) FilterResponseOutput {
	return o
}

func (o FilterResponseOutput) ToFilterResponsePtrOutput() FilterResponsePtrOutput {
	return o.ToFilterResponsePtrOutputWithContext(context.Background())
}

func (o FilterResponseOutput) ToFilterResponsePtrOutputWithContext(ctx context.Context) FilterResponsePtrOutput {
	return o.ApplyT(func(v FilterResponse) *FilterResponse {
		return &v
	}).(FilterResponsePtrOutput)
}

// The list of filters on meters (GUID), mandatory for budgets of usage category.
func (o FilterResponseOutput) Meters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FilterResponse) []string { return v.Meters }).(pulumi.StringArrayOutput)
}

// The list of filters on resource groups, allowed at subscription level only.
func (o FilterResponseOutput) ResourceGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FilterResponse) []string { return v.ResourceGroups }).(pulumi.StringArrayOutput)
}

// The list of filters on resources.
func (o FilterResponseOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FilterResponse) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

// The dictionary of filters on tags.
func (o FilterResponseOutput) Tags() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v FilterResponse) map[string][]string { return v.Tags }).(pulumi.StringArrayMapOutput)
}

type FilterResponsePtrOutput struct{ *pulumi.OutputState }

func (FilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FilterResponse)(nil)).Elem()
}

func (o FilterResponsePtrOutput) ToFilterResponsePtrOutput() FilterResponsePtrOutput {
	return o
}

func (o FilterResponsePtrOutput) ToFilterResponsePtrOutputWithContext(ctx context.Context) FilterResponsePtrOutput {
	return o
}

func (o FilterResponsePtrOutput) Elem() FilterResponseOutput {
	return o.ApplyT(func(v *FilterResponse) FilterResponse { return *v }).(FilterResponseOutput)
}

// The list of filters on meters (GUID), mandatory for budgets of usage category.
func (o FilterResponsePtrOutput) Meters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FilterResponse) []string {
		if v == nil {
			return nil
		}
		return v.Meters
	}).(pulumi.StringArrayOutput)
}

// The list of filters on resource groups, allowed at subscription level only.
func (o FilterResponsePtrOutput) ResourceGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FilterResponse) []string {
		if v == nil {
			return nil
		}
		return v.ResourceGroups
	}).(pulumi.StringArrayOutput)
}

// The list of filters on resources.
func (o FilterResponsePtrOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FilterResponse) []string {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(pulumi.StringArrayOutput)
}

// The dictionary of filters on tags.
func (o FilterResponsePtrOutput) Tags() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *FilterResponse) map[string][]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayMapOutput)
}

// The notification associated with a budget.
type Notification struct {
	// Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified.
	ContactEmails []string `pulumi:"contactEmails"`
	// Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id. Only supported at Subscription or Resource Group scopes.
	ContactGroups []string `pulumi:"contactGroups"`
	// Contact roles to send the budget notification to when the threshold is exceeded.
	ContactRoles []string `pulumi:"contactRoles"`
	// The notification is enabled or not.
	Enabled bool `pulumi:"enabled"`
	// The comparison operator.
	Operator string `pulumi:"operator"`
	// Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
	Threshold float64 `pulumi:"threshold"`
	// The type of threshold
	ThresholdType *string `pulumi:"thresholdType"`
}

// NotificationInput is an input type that accepts NotificationArgs and NotificationOutput values.
// You can construct a concrete instance of `NotificationInput` via:
//
//          NotificationArgs{...}
type NotificationInput interface {
	pulumi.Input

	ToNotificationOutput() NotificationOutput
	ToNotificationOutputWithContext(context.Context) NotificationOutput
}

// The notification associated with a budget.
type NotificationArgs struct {
	// Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified.
	ContactEmails pulumi.StringArrayInput `pulumi:"contactEmails"`
	// Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id. Only supported at Subscription or Resource Group scopes.
	ContactGroups pulumi.StringArrayInput `pulumi:"contactGroups"`
	// Contact roles to send the budget notification to when the threshold is exceeded.
	ContactRoles pulumi.StringArrayInput `pulumi:"contactRoles"`
	// The notification is enabled or not.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The comparison operator.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// The type of threshold
	ThresholdType pulumi.StringPtrInput `pulumi:"thresholdType"`
}

func (NotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Notification)(nil)).Elem()
}

func (i NotificationArgs) ToNotificationOutput() NotificationOutput {
	return i.ToNotificationOutputWithContext(context.Background())
}

func (i NotificationArgs) ToNotificationOutputWithContext(ctx context.Context) NotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationOutput)
}

// NotificationMapInput is an input type that accepts NotificationMap and NotificationMapOutput values.
// You can construct a concrete instance of `NotificationMapInput` via:
//
//          NotificationMap{ "key": NotificationArgs{...} }
type NotificationMapInput interface {
	pulumi.Input

	ToNotificationMapOutput() NotificationMapOutput
	ToNotificationMapOutputWithContext(context.Context) NotificationMapOutput
}

type NotificationMap map[string]NotificationInput

func (NotificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Notification)(nil)).Elem()
}

func (i NotificationMap) ToNotificationMapOutput() NotificationMapOutput {
	return i.ToNotificationMapOutputWithContext(context.Background())
}

func (i NotificationMap) ToNotificationMapOutputWithContext(ctx context.Context) NotificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationMapOutput)
}

// The notification associated with a budget.
type NotificationOutput struct{ *pulumi.OutputState }

func (NotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Notification)(nil)).Elem()
}

func (o NotificationOutput) ToNotificationOutput() NotificationOutput {
	return o
}

func (o NotificationOutput) ToNotificationOutputWithContext(ctx context.Context) NotificationOutput {
	return o
}

// Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified.
func (o NotificationOutput) ContactEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Notification) []string { return v.ContactEmails }).(pulumi.StringArrayOutput)
}

// Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id. Only supported at Subscription or Resource Group scopes.
func (o NotificationOutput) ContactGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Notification) []string { return v.ContactGroups }).(pulumi.StringArrayOutput)
}

// Contact roles to send the budget notification to when the threshold is exceeded.
func (o NotificationOutput) ContactRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Notification) []string { return v.ContactRoles }).(pulumi.StringArrayOutput)
}

// The notification is enabled or not.
func (o NotificationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v Notification) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The comparison operator.
func (o NotificationOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v Notification) string { return v.Operator }).(pulumi.StringOutput)
}

// Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
func (o NotificationOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v Notification) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// The type of threshold
func (o NotificationOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Notification) *string { return v.ThresholdType }).(pulumi.StringPtrOutput)
}

type NotificationMapOutput struct{ *pulumi.OutputState }

func (NotificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Notification)(nil)).Elem()
}

func (o NotificationMapOutput) ToNotificationMapOutput() NotificationMapOutput {
	return o
}

func (o NotificationMapOutput) ToNotificationMapOutputWithContext(ctx context.Context) NotificationMapOutput {
	return o
}

func (o NotificationMapOutput) MapIndex(k pulumi.StringInput) NotificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Notification {
		return vs[0].(map[string]Notification)[vs[1].(string)]
	}).(NotificationOutput)
}

// The notification associated with a budget.
type NotificationResponse struct {
	// Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified.
	ContactEmails []string `pulumi:"contactEmails"`
	// Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id. Only supported at Subscription or Resource Group scopes.
	ContactGroups []string `pulumi:"contactGroups"`
	// Contact roles to send the budget notification to when the threshold is exceeded.
	ContactRoles []string `pulumi:"contactRoles"`
	// The notification is enabled or not.
	Enabled bool `pulumi:"enabled"`
	// The comparison operator.
	Operator string `pulumi:"operator"`
	// Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
	Threshold float64 `pulumi:"threshold"`
	// The type of threshold
	ThresholdType *string `pulumi:"thresholdType"`
}

// NotificationResponseInput is an input type that accepts NotificationResponseArgs and NotificationResponseOutput values.
// You can construct a concrete instance of `NotificationResponseInput` via:
//
//          NotificationResponseArgs{...}
type NotificationResponseInput interface {
	pulumi.Input

	ToNotificationResponseOutput() NotificationResponseOutput
	ToNotificationResponseOutputWithContext(context.Context) NotificationResponseOutput
}

// The notification associated with a budget.
type NotificationResponseArgs struct {
	// Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified.
	ContactEmails pulumi.StringArrayInput `pulumi:"contactEmails"`
	// Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id. Only supported at Subscription or Resource Group scopes.
	ContactGroups pulumi.StringArrayInput `pulumi:"contactGroups"`
	// Contact roles to send the budget notification to when the threshold is exceeded.
	ContactRoles pulumi.StringArrayInput `pulumi:"contactRoles"`
	// The notification is enabled or not.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The comparison operator.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// The type of threshold
	ThresholdType pulumi.StringPtrInput `pulumi:"thresholdType"`
}

func (NotificationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationResponse)(nil)).Elem()
}

func (i NotificationResponseArgs) ToNotificationResponseOutput() NotificationResponseOutput {
	return i.ToNotificationResponseOutputWithContext(context.Background())
}

func (i NotificationResponseArgs) ToNotificationResponseOutputWithContext(ctx context.Context) NotificationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationResponseOutput)
}

// NotificationResponseMapInput is an input type that accepts NotificationResponseMap and NotificationResponseMapOutput values.
// You can construct a concrete instance of `NotificationResponseMapInput` via:
//
//          NotificationResponseMap{ "key": NotificationResponseArgs{...} }
type NotificationResponseMapInput interface {
	pulumi.Input

	ToNotificationResponseMapOutput() NotificationResponseMapOutput
	ToNotificationResponseMapOutputWithContext(context.Context) NotificationResponseMapOutput
}

type NotificationResponseMap map[string]NotificationResponseInput

func (NotificationResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NotificationResponse)(nil)).Elem()
}

func (i NotificationResponseMap) ToNotificationResponseMapOutput() NotificationResponseMapOutput {
	return i.ToNotificationResponseMapOutputWithContext(context.Background())
}

func (i NotificationResponseMap) ToNotificationResponseMapOutputWithContext(ctx context.Context) NotificationResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationResponseMapOutput)
}

// The notification associated with a budget.
type NotificationResponseOutput struct{ *pulumi.OutputState }

func (NotificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationResponse)(nil)).Elem()
}

func (o NotificationResponseOutput) ToNotificationResponseOutput() NotificationResponseOutput {
	return o
}

func (o NotificationResponseOutput) ToNotificationResponseOutputWithContext(ctx context.Context) NotificationResponseOutput {
	return o
}

// Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified.
func (o NotificationResponseOutput) ContactEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationResponse) []string { return v.ContactEmails }).(pulumi.StringArrayOutput)
}

// Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id. Only supported at Subscription or Resource Group scopes.
func (o NotificationResponseOutput) ContactGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationResponse) []string { return v.ContactGroups }).(pulumi.StringArrayOutput)
}

// Contact roles to send the budget notification to when the threshold is exceeded.
func (o NotificationResponseOutput) ContactRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationResponse) []string { return v.ContactRoles }).(pulumi.StringArrayOutput)
}

// The notification is enabled or not.
func (o NotificationResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v NotificationResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The comparison operator.
func (o NotificationResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
func (o NotificationResponseOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v NotificationResponse) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// The type of threshold
func (o NotificationResponseOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationResponse) *string { return v.ThresholdType }).(pulumi.StringPtrOutput)
}

type NotificationResponseMapOutput struct{ *pulumi.OutputState }

func (NotificationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NotificationResponse)(nil)).Elem()
}

func (o NotificationResponseMapOutput) ToNotificationResponseMapOutput() NotificationResponseMapOutput {
	return o
}

func (o NotificationResponseMapOutput) ToNotificationResponseMapOutputWithContext(ctx context.Context) NotificationResponseMapOutput {
	return o
}

func (o NotificationResponseMapOutput) MapIndex(k pulumi.StringInput) NotificationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NotificationResponse {
		return vs[0].(map[string]NotificationResponse)[vs[1].(string)]
	}).(NotificationResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(BudgetTimePeriodOutput{})
	pulumi.RegisterOutputType(BudgetTimePeriodPtrOutput{})
	pulumi.RegisterOutputType(BudgetTimePeriodResponseOutput{})
	pulumi.RegisterOutputType(BudgetTimePeriodResponsePtrOutput{})
	pulumi.RegisterOutputType(CurrentSpendResponseOutput{})
	pulumi.RegisterOutputType(CurrentSpendResponsePtrOutput{})
	pulumi.RegisterOutputType(FilterOutput{})
	pulumi.RegisterOutputType(FilterPtrOutput{})
	pulumi.RegisterOutputType(FilterResponseOutput{})
	pulumi.RegisterOutputType(FilterResponsePtrOutput{})
	pulumi.RegisterOutputType(NotificationOutput{})
	pulumi.RegisterOutputType(NotificationMapOutput{})
	pulumi.RegisterOutputType(NotificationResponseOutput{})
	pulumi.RegisterOutputType(NotificationResponseMapOutput{})
}
