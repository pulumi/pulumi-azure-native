// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20170907privatepreview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Class representing an event hub connection.
type EventHubConnection struct {
	pulumi.CustomResourceState

	// The event hub consumer group.
	ConsumerGroup pulumi.StringOutput `pulumi:"consumerGroup"`
	// The data format of the message. Optionally the data format can be added to each message.
	DataFormat pulumi.StringPtrOutput `pulumi:"dataFormat"`
	// The resource ID of the event hub to be used to create a data connection.
	EventHubResourceId pulumi.StringOutput `pulumi:"eventHubResourceId"`
	// Resource location.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
	MappingRuleName pulumi.StringPtrOutput `pulumi:"mappingRuleName"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The table where the data should be ingested. Optionally the table information can be added to each message.
	TableName pulumi.StringPtrOutput `pulumi:"tableName"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewEventHubConnection registers a new resource with the given unique name, arguments, and options.
func NewEventHubConnection(ctx *pulumi.Context,
	name string, args *EventHubConnectionArgs, opts ...pulumi.ResourceOption) (*EventHubConnection, error) {
	if args == nil || args.ClusterName == nil {
		return nil, errors.New("missing required argument 'ClusterName'")
	}
	if args == nil || args.ConsumerGroup == nil {
		return nil, errors.New("missing required argument 'ConsumerGroup'")
	}
	if args == nil || args.DatabaseName == nil {
		return nil, errors.New("missing required argument 'DatabaseName'")
	}
	if args == nil || args.EventHubConnectionName == nil {
		return nil, errors.New("missing required argument 'EventHubConnectionName'")
	}
	if args == nil || args.EventHubResourceId == nil {
		return nil, errors.New("missing required argument 'EventHubResourceId'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &EventHubConnectionArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:kusto/v20180907preview:EventHubConnection"),
		},
	})
	opts = append(opts, aliases)
	var resource EventHubConnection
	err := ctx.RegisterResource("azure-nextgen:kusto/v20170907privatepreview:EventHubConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventHubConnection gets an existing EventHubConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventHubConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventHubConnectionState, opts ...pulumi.ResourceOption) (*EventHubConnection, error) {
	var resource EventHubConnection
	err := ctx.ReadResource("azure-nextgen:kusto/v20170907privatepreview:EventHubConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventHubConnection resources.
type eventHubConnectionState struct {
	// The event hub consumer group.
	ConsumerGroup *string `pulumi:"consumerGroup"`
	// The data format of the message. Optionally the data format can be added to each message.
	DataFormat *string `pulumi:"dataFormat"`
	// The resource ID of the event hub to be used to create a data connection.
	EventHubResourceId *string `pulumi:"eventHubResourceId"`
	// Resource location.
	Location *string `pulumi:"location"`
	// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
	MappingRuleName *string `pulumi:"mappingRuleName"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// The table where the data should be ingested. Optionally the table information can be added to each message.
	TableName *string `pulumi:"tableName"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `pulumi:"type"`
}

type EventHubConnectionState struct {
	// The event hub consumer group.
	ConsumerGroup pulumi.StringPtrInput
	// The data format of the message. Optionally the data format can be added to each message.
	DataFormat pulumi.StringPtrInput
	// The resource ID of the event hub to be used to create a data connection.
	EventHubResourceId pulumi.StringPtrInput
	// Resource location.
	Location pulumi.StringPtrInput
	// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
	MappingRuleName pulumi.StringPtrInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// The table where the data should be ingested. Optionally the table information can be added to each message.
	TableName pulumi.StringPtrInput
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringPtrInput
}

func (EventHubConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventHubConnectionState)(nil)).Elem()
}

type eventHubConnectionArgs struct {
	// The name of the Kusto cluster.
	ClusterName string `pulumi:"clusterName"`
	// The event hub consumer group.
	ConsumerGroup string `pulumi:"consumerGroup"`
	// The data format of the message. Optionally the data format can be added to each message.
	DataFormat *string `pulumi:"dataFormat"`
	// The name of the database in the Kusto cluster.
	DatabaseName string `pulumi:"databaseName"`
	// The name of the event hub connection.
	EventHubConnectionName string `pulumi:"eventHubConnectionName"`
	// The resource ID of the event hub to be used to create a data connection.
	EventHubResourceId string `pulumi:"eventHubResourceId"`
	// Resource location.
	Location *string `pulumi:"location"`
	// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
	MappingRuleName *string `pulumi:"mappingRuleName"`
	// The name of the resource group containing the Kusto cluster.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The table where the data should be ingested. Optionally the table information can be added to each message.
	TableName *string `pulumi:"tableName"`
}

// The set of arguments for constructing a EventHubConnection resource.
type EventHubConnectionArgs struct {
	// The name of the Kusto cluster.
	ClusterName pulumi.StringInput
	// The event hub consumer group.
	ConsumerGroup pulumi.StringInput
	// The data format of the message. Optionally the data format can be added to each message.
	DataFormat pulumi.StringPtrInput
	// The name of the database in the Kusto cluster.
	DatabaseName pulumi.StringInput
	// The name of the event hub connection.
	EventHubConnectionName pulumi.StringInput
	// The resource ID of the event hub to be used to create a data connection.
	EventHubResourceId pulumi.StringInput
	// Resource location.
	Location pulumi.StringPtrInput
	// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
	MappingRuleName pulumi.StringPtrInput
	// The name of the resource group containing the Kusto cluster.
	ResourceGroupName pulumi.StringInput
	// The table where the data should be ingested. Optionally the table information can be added to each message.
	TableName pulumi.StringPtrInput
}

func (EventHubConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventHubConnectionArgs)(nil)).Elem()
}
