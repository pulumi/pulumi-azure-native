// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kusto

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Class representing an event hub connection.
// API Version: 2018-09-07-preview.
func LookupEventHubConnection(ctx *pulumi.Context, args *LookupEventHubConnectionArgs, opts ...pulumi.InvokeOption) (*LookupEventHubConnectionResult, error) {
	var rv LookupEventHubConnectionResult
	err := ctx.Invoke("azure-native:kusto:getEventHubConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEventHubConnectionArgs struct {
	// The name of the Kusto cluster.
	ClusterName string `pulumi:"clusterName"`
	// The name of the database in the Kusto cluster.
	DatabaseName string `pulumi:"databaseName"`
	// The name of the event hub connection.
	EventHubConnectionName string `pulumi:"eventHubConnectionName"`
	// The name of the resource group containing the Kusto cluster.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Class representing an event hub connection.
type LookupEventHubConnectionResult struct {
	// The event hub consumer group.
	ConsumerGroup string `pulumi:"consumerGroup"`
	// The data format of the message. Optionally the data format can be added to each message.
	DataFormat *string `pulumi:"dataFormat"`
	// The resource ID of the event hub to be used to create a data connection.
	EventHubResourceId string `pulumi:"eventHubResourceId"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// Resource location.
	Location *string `pulumi:"location"`
	// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
	MappingRuleName *string `pulumi:"mappingRuleName"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The table where the data should be ingested. Optionally the table information can be added to each message.
	TableName *string `pulumi:"tableName"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupEventHubConnectionOutput(ctx *pulumi.Context, args LookupEventHubConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupEventHubConnectionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEventHubConnectionResult, error) {
			args := v.(LookupEventHubConnectionArgs)
			r, err := LookupEventHubConnection(ctx, &args, opts...)
			var s LookupEventHubConnectionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEventHubConnectionResultOutput)
}

type LookupEventHubConnectionOutputArgs struct {
	// The name of the Kusto cluster.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// The name of the database in the Kusto cluster.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The name of the event hub connection.
	EventHubConnectionName pulumi.StringInput `pulumi:"eventHubConnectionName"`
	// The name of the resource group containing the Kusto cluster.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupEventHubConnectionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventHubConnectionArgs)(nil)).Elem()
}

// Class representing an event hub connection.
type LookupEventHubConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupEventHubConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventHubConnectionResult)(nil)).Elem()
}

func (o LookupEventHubConnectionResultOutput) ToLookupEventHubConnectionResultOutput() LookupEventHubConnectionResultOutput {
	return o
}

func (o LookupEventHubConnectionResultOutput) ToLookupEventHubConnectionResultOutputWithContext(ctx context.Context) LookupEventHubConnectionResultOutput {
	return o
}

// The event hub consumer group.
func (o LookupEventHubConnectionResultOutput) ConsumerGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventHubConnectionResult) string { return v.ConsumerGroup }).(pulumi.StringOutput)
}

// The data format of the message. Optionally the data format can be added to each message.
func (o LookupEventHubConnectionResultOutput) DataFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEventHubConnectionResult) *string { return v.DataFormat }).(pulumi.StringPtrOutput)
}

// The resource ID of the event hub to be used to create a data connection.
func (o LookupEventHubConnectionResultOutput) EventHubResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventHubConnectionResult) string { return v.EventHubResourceId }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupEventHubConnectionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventHubConnectionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Resource location.
func (o LookupEventHubConnectionResultOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEventHubConnectionResult) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
func (o LookupEventHubConnectionResultOutput) MappingRuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEventHubConnectionResult) *string { return v.MappingRuleName }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o LookupEventHubConnectionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventHubConnectionResult) string { return v.Name }).(pulumi.StringOutput)
}

// The table where the data should be ingested. Optionally the table information can be added to each message.
func (o LookupEventHubConnectionResultOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEventHubConnectionResult) *string { return v.TableName }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupEventHubConnectionResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventHubConnectionResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEventHubConnectionResultOutput{})
}
