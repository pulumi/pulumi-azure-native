// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210827

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Class representing an attached database configuration.
func LookupAttachedDatabaseConfiguration(ctx *pulumi.Context, args *LookupAttachedDatabaseConfigurationArgs, opts ...pulumi.InvokeOption) (*LookupAttachedDatabaseConfigurationResult, error) {
	var rv LookupAttachedDatabaseConfigurationResult
	err := ctx.Invoke("azure-native:kusto/v20210827:getAttachedDatabaseConfiguration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAttachedDatabaseConfigurationArgs struct {
	// The name of the attached database configuration.
	AttachedDatabaseConfigurationName string `pulumi:"attachedDatabaseConfigurationName"`
	// The name of the Kusto cluster.
	ClusterName string `pulumi:"clusterName"`
	// The name of the resource group containing the Kusto cluster.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Class representing an attached database configuration.
type LookupAttachedDatabaseConfigurationResult struct {
	// The list of databases from the clusterResourceId which are currently attached to the cluster.
	AttachedDatabaseNames []string `pulumi:"attachedDatabaseNames"`
	// The resource id of the cluster where the databases you would like to attach reside.
	ClusterResourceId string `pulumi:"clusterResourceId"`
	// The name of the database which you would like to attach, use * if you want to follow all current and future databases.
	DatabaseName string `pulumi:"databaseName"`
	// The default principals modification kind
	DefaultPrincipalsModificationKind string `pulumi:"defaultPrincipalsModificationKind"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// Resource location.
	Location *string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The provisioned state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Table level sharing specifications
	TableLevelSharingProperties *TableLevelSharingPropertiesResponse `pulumi:"tableLevelSharingProperties"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupAttachedDatabaseConfigurationOutput(ctx *pulumi.Context, args LookupAttachedDatabaseConfigurationOutputArgs, opts ...pulumi.InvokeOption) LookupAttachedDatabaseConfigurationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAttachedDatabaseConfigurationResult, error) {
			args := v.(LookupAttachedDatabaseConfigurationArgs)
			r, err := LookupAttachedDatabaseConfiguration(ctx, &args, opts...)
			var s LookupAttachedDatabaseConfigurationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAttachedDatabaseConfigurationResultOutput)
}

type LookupAttachedDatabaseConfigurationOutputArgs struct {
	// The name of the attached database configuration.
	AttachedDatabaseConfigurationName pulumi.StringInput `pulumi:"attachedDatabaseConfigurationName"`
	// The name of the Kusto cluster.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// The name of the resource group containing the Kusto cluster.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupAttachedDatabaseConfigurationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAttachedDatabaseConfigurationArgs)(nil)).Elem()
}

// Class representing an attached database configuration.
type LookupAttachedDatabaseConfigurationResultOutput struct{ *pulumi.OutputState }

func (LookupAttachedDatabaseConfigurationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAttachedDatabaseConfigurationResult)(nil)).Elem()
}

func (o LookupAttachedDatabaseConfigurationResultOutput) ToLookupAttachedDatabaseConfigurationResultOutput() LookupAttachedDatabaseConfigurationResultOutput {
	return o
}

func (o LookupAttachedDatabaseConfigurationResultOutput) ToLookupAttachedDatabaseConfigurationResultOutputWithContext(ctx context.Context) LookupAttachedDatabaseConfigurationResultOutput {
	return o
}

// The list of databases from the clusterResourceId which are currently attached to the cluster.
func (o LookupAttachedDatabaseConfigurationResultOutput) AttachedDatabaseNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) []string { return v.AttachedDatabaseNames }).(pulumi.StringArrayOutput)
}

// The resource id of the cluster where the databases you would like to attach reside.
func (o LookupAttachedDatabaseConfigurationResultOutput) ClusterResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) string { return v.ClusterResourceId }).(pulumi.StringOutput)
}

// The name of the database which you would like to attach, use * if you want to follow all current and future databases.
func (o LookupAttachedDatabaseConfigurationResultOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// The default principals modification kind
func (o LookupAttachedDatabaseConfigurationResultOutput) DefaultPrincipalsModificationKind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) string { return v.DefaultPrincipalsModificationKind }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupAttachedDatabaseConfigurationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) string { return v.Id }).(pulumi.StringOutput)
}

// Resource location.
func (o LookupAttachedDatabaseConfigurationResultOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o LookupAttachedDatabaseConfigurationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) string { return v.Name }).(pulumi.StringOutput)
}

// The provisioned state of the resource.
func (o LookupAttachedDatabaseConfigurationResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Table level sharing specifications
func (o LookupAttachedDatabaseConfigurationResultOutput) TableLevelSharingProperties() TableLevelSharingPropertiesResponsePtrOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) *TableLevelSharingPropertiesResponse {
		return v.TableLevelSharingProperties
	}).(TableLevelSharingPropertiesResponsePtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupAttachedDatabaseConfigurationResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAttachedDatabaseConfigurationResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAttachedDatabaseConfigurationResultOutput{})
}
