// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20171111preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Represents a Blueprint artifact.
type Artifact struct {
	pulumi.CustomResourceState

	// Specifies the kind of Blueprint artifact.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Name of this resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Type of this resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewArtifact registers a new resource with the given unique name, arguments, and options.
func NewArtifact(ctx *pulumi.Context,
	name string, args *ArtifactArgs, opts ...pulumi.ResourceOption) (*Artifact, error) {
	if args == nil || args.ArtifactName == nil {
		return nil, errors.New("missing required argument 'ArtifactName'")
	}
	if args == nil || args.BlueprintName == nil {
		return nil, errors.New("missing required argument 'BlueprintName'")
	}
	if args == nil || args.Kind == nil {
		return nil, errors.New("missing required argument 'Kind'")
	}
	if args == nil || args.ManagementGroupName == nil {
		return nil, errors.New("missing required argument 'ManagementGroupName'")
	}
	if args == nil {
		args = &ArtifactArgs{}
	}
	var resource Artifact
	err := ctx.RegisterResource("azure-nextgen:management/v20171111preview:Artifact", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArtifact gets an existing Artifact resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArtifact(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArtifactState, opts ...pulumi.ResourceOption) (*Artifact, error) {
	var resource Artifact
	err := ctx.ReadResource("azure-nextgen:management/v20171111preview:Artifact", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Artifact resources.
type artifactState struct {
	// Specifies the kind of Blueprint artifact.
	Kind *string `pulumi:"kind"`
	// Name of this resource.
	Name *string `pulumi:"name"`
	// Type of this resource.
	Type *string `pulumi:"type"`
}

type ArtifactState struct {
	// Specifies the kind of Blueprint artifact.
	Kind pulumi.StringPtrInput
	// Name of this resource.
	Name pulumi.StringPtrInput
	// Type of this resource.
	Type pulumi.StringPtrInput
}

func (ArtifactState) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactState)(nil)).Elem()
}

type artifactArgs struct {
	// name of the artifact.
	ArtifactName string `pulumi:"artifactName"`
	// name of the blueprint.
	BlueprintName string `pulumi:"blueprintName"`
	// Specifies the kind of Blueprint artifact.
	Kind string `pulumi:"kind"`
	// ManagementGroup where blueprint stores.
	ManagementGroupName string `pulumi:"managementGroupName"`
}

// The set of arguments for constructing a Artifact resource.
type ArtifactArgs struct {
	// name of the artifact.
	ArtifactName pulumi.StringInput
	// name of the blueprint.
	BlueprintName pulumi.StringInput
	// Specifies the kind of Blueprint artifact.
	Kind pulumi.StringInput
	// ManagementGroup where blueprint stores.
	ManagementGroupName pulumi.StringInput
}

func (ArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactArgs)(nil)).Elem()
}
