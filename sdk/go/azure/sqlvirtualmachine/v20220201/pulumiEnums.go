// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220201

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Day of the week to run assessment.
type AssessmentDayOfWeek string

const (
	AssessmentDayOfWeekMonday    = AssessmentDayOfWeek("Monday")
	AssessmentDayOfWeekTuesday   = AssessmentDayOfWeek("Tuesday")
	AssessmentDayOfWeekWednesday = AssessmentDayOfWeek("Wednesday")
	AssessmentDayOfWeekThursday  = AssessmentDayOfWeek("Thursday")
	AssessmentDayOfWeekFriday    = AssessmentDayOfWeek("Friday")
	AssessmentDayOfWeekSaturday  = AssessmentDayOfWeek("Saturday")
	AssessmentDayOfWeekSunday    = AssessmentDayOfWeek("Sunday")
)

func (AssessmentDayOfWeek) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentDayOfWeek)(nil)).Elem()
}

func (e AssessmentDayOfWeek) ToAssessmentDayOfWeekOutput() AssessmentDayOfWeekOutput {
	return pulumi.ToOutput(e).(AssessmentDayOfWeekOutput)
}

func (e AssessmentDayOfWeek) ToAssessmentDayOfWeekOutputWithContext(ctx context.Context) AssessmentDayOfWeekOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AssessmentDayOfWeekOutput)
}

func (e AssessmentDayOfWeek) ToAssessmentDayOfWeekPtrOutput() AssessmentDayOfWeekPtrOutput {
	return e.ToAssessmentDayOfWeekPtrOutputWithContext(context.Background())
}

func (e AssessmentDayOfWeek) ToAssessmentDayOfWeekPtrOutputWithContext(ctx context.Context) AssessmentDayOfWeekPtrOutput {
	return AssessmentDayOfWeek(e).ToAssessmentDayOfWeekOutputWithContext(ctx).ToAssessmentDayOfWeekPtrOutputWithContext(ctx)
}

func (e AssessmentDayOfWeek) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AssessmentDayOfWeek) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AssessmentDayOfWeek) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AssessmentDayOfWeek) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AssessmentDayOfWeekOutput struct{ *pulumi.OutputState }

func (AssessmentDayOfWeekOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssessmentDayOfWeek)(nil)).Elem()
}

func (o AssessmentDayOfWeekOutput) ToAssessmentDayOfWeekOutput() AssessmentDayOfWeekOutput {
	return o
}

func (o AssessmentDayOfWeekOutput) ToAssessmentDayOfWeekOutputWithContext(ctx context.Context) AssessmentDayOfWeekOutput {
	return o
}

func (o AssessmentDayOfWeekOutput) ToAssessmentDayOfWeekPtrOutput() AssessmentDayOfWeekPtrOutput {
	return o.ToAssessmentDayOfWeekPtrOutputWithContext(context.Background())
}

func (o AssessmentDayOfWeekOutput) ToAssessmentDayOfWeekPtrOutputWithContext(ctx context.Context) AssessmentDayOfWeekPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssessmentDayOfWeek) *AssessmentDayOfWeek {
		return &v
	}).(AssessmentDayOfWeekPtrOutput)
}

func (o AssessmentDayOfWeekOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AssessmentDayOfWeekOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AssessmentDayOfWeek) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AssessmentDayOfWeekOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AssessmentDayOfWeekOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AssessmentDayOfWeek) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AssessmentDayOfWeekPtrOutput struct{ *pulumi.OutputState }

func (AssessmentDayOfWeekPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentDayOfWeek)(nil)).Elem()
}

func (o AssessmentDayOfWeekPtrOutput) ToAssessmentDayOfWeekPtrOutput() AssessmentDayOfWeekPtrOutput {
	return o
}

func (o AssessmentDayOfWeekPtrOutput) ToAssessmentDayOfWeekPtrOutputWithContext(ctx context.Context) AssessmentDayOfWeekPtrOutput {
	return o
}

func (o AssessmentDayOfWeekPtrOutput) Elem() AssessmentDayOfWeekOutput {
	return o.ApplyT(func(v *AssessmentDayOfWeek) AssessmentDayOfWeek {
		if v != nil {
			return *v
		}
		var ret AssessmentDayOfWeek
		return ret
	}).(AssessmentDayOfWeekOutput)
}

func (o AssessmentDayOfWeekPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AssessmentDayOfWeekPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AssessmentDayOfWeek) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AssessmentDayOfWeekInput is an input type that accepts AssessmentDayOfWeekArgs and AssessmentDayOfWeekOutput values.
// You can construct a concrete instance of `AssessmentDayOfWeekInput` via:
//
//	AssessmentDayOfWeekArgs{...}
type AssessmentDayOfWeekInput interface {
	pulumi.Input

	ToAssessmentDayOfWeekOutput() AssessmentDayOfWeekOutput
	ToAssessmentDayOfWeekOutputWithContext(context.Context) AssessmentDayOfWeekOutput
}

var assessmentDayOfWeekPtrType = reflect.TypeOf((**AssessmentDayOfWeek)(nil)).Elem()

type AssessmentDayOfWeekPtrInput interface {
	pulumi.Input

	ToAssessmentDayOfWeekPtrOutput() AssessmentDayOfWeekPtrOutput
	ToAssessmentDayOfWeekPtrOutputWithContext(context.Context) AssessmentDayOfWeekPtrOutput
}

type assessmentDayOfWeekPtr string

func AssessmentDayOfWeekPtr(v string) AssessmentDayOfWeekPtrInput {
	return (*assessmentDayOfWeekPtr)(&v)
}

func (*assessmentDayOfWeekPtr) ElementType() reflect.Type {
	return assessmentDayOfWeekPtrType
}

func (in *assessmentDayOfWeekPtr) ToAssessmentDayOfWeekPtrOutput() AssessmentDayOfWeekPtrOutput {
	return pulumi.ToOutput(in).(AssessmentDayOfWeekPtrOutput)
}

func (in *assessmentDayOfWeekPtr) ToAssessmentDayOfWeekPtrOutputWithContext(ctx context.Context) AssessmentDayOfWeekPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AssessmentDayOfWeekPtrOutput)
}

type AutoBackupDaysOfWeek string

const (
	AutoBackupDaysOfWeekMonday    = AutoBackupDaysOfWeek("Monday")
	AutoBackupDaysOfWeekTuesday   = AutoBackupDaysOfWeek("Tuesday")
	AutoBackupDaysOfWeekWednesday = AutoBackupDaysOfWeek("Wednesday")
	AutoBackupDaysOfWeekThursday  = AutoBackupDaysOfWeek("Thursday")
	AutoBackupDaysOfWeekFriday    = AutoBackupDaysOfWeek("Friday")
	AutoBackupDaysOfWeekSaturday  = AutoBackupDaysOfWeek("Saturday")
	AutoBackupDaysOfWeekSunday    = AutoBackupDaysOfWeek("Sunday")
)

// Backup schedule type.
type BackupScheduleType string

const (
	BackupScheduleTypeManual    = BackupScheduleType("Manual")
	BackupScheduleTypeAutomated = BackupScheduleType("Automated")
)

// Cluster subnet type.
type ClusterSubnetType string

const (
	ClusterSubnetTypeSingleSubnet = ClusterSubnetType("SingleSubnet")
	ClusterSubnetTypeMultiSubnet  = ClusterSubnetType("MultiSubnet")
)

// Replica commit mode in availability group.
type Commit string

const (
	Commit_SYNCHRONOUS_COMMIT  = Commit("SYNCHRONOUS_COMMIT")
	Commit_ASYNCHRONOUS_COMMIT = Commit("ASYNCHRONOUS_COMMIT")
)

// SQL Server connectivity option.
type ConnectivityType string

const (
	ConnectivityTypeLOCAL   = ConnectivityType("LOCAL")
	ConnectivityTypePRIVATE = ConnectivityType("PRIVATE")
	ConnectivityTypePUBLIC  = ConnectivityType("PUBLIC")
)

// Day of week to apply the patch on.
type DayOfWeek string

const (
	DayOfWeekEveryday  = DayOfWeek("Everyday")
	DayOfWeekMonday    = DayOfWeek("Monday")
	DayOfWeekTuesday   = DayOfWeek("Tuesday")
	DayOfWeekWednesday = DayOfWeek("Wednesday")
	DayOfWeekThursday  = DayOfWeek("Thursday")
	DayOfWeekFriday    = DayOfWeek("Friday")
	DayOfWeekSaturday  = DayOfWeek("Saturday")
	DayOfWeekSunday    = DayOfWeek("Sunday")
)

func (DayOfWeek) ElementType() reflect.Type {
	return reflect.TypeOf((*DayOfWeek)(nil)).Elem()
}

func (e DayOfWeek) ToDayOfWeekOutput() DayOfWeekOutput {
	return pulumi.ToOutput(e).(DayOfWeekOutput)
}

func (e DayOfWeek) ToDayOfWeekOutputWithContext(ctx context.Context) DayOfWeekOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DayOfWeekOutput)
}

func (e DayOfWeek) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return e.ToDayOfWeekPtrOutputWithContext(context.Background())
}

func (e DayOfWeek) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return DayOfWeek(e).ToDayOfWeekOutputWithContext(ctx).ToDayOfWeekPtrOutputWithContext(ctx)
}

func (e DayOfWeek) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DayOfWeek) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DayOfWeek) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DayOfWeek) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DayOfWeekOutput struct{ *pulumi.OutputState }

func (DayOfWeekOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DayOfWeek)(nil)).Elem()
}

func (o DayOfWeekOutput) ToDayOfWeekOutput() DayOfWeekOutput {
	return o
}

func (o DayOfWeekOutput) ToDayOfWeekOutputWithContext(ctx context.Context) DayOfWeekOutput {
	return o
}

func (o DayOfWeekOutput) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return o.ToDayOfWeekPtrOutputWithContext(context.Background())
}

func (o DayOfWeekOutput) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DayOfWeek) *DayOfWeek {
		return &v
	}).(DayOfWeekPtrOutput)
}

func (o DayOfWeekOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DayOfWeekOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DayOfWeek) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DayOfWeekOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DayOfWeekOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DayOfWeek) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DayOfWeekPtrOutput struct{ *pulumi.OutputState }

func (DayOfWeekPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DayOfWeek)(nil)).Elem()
}

func (o DayOfWeekPtrOutput) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return o
}

func (o DayOfWeekPtrOutput) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return o
}

func (o DayOfWeekPtrOutput) Elem() DayOfWeekOutput {
	return o.ApplyT(func(v *DayOfWeek) DayOfWeek {
		if v != nil {
			return *v
		}
		var ret DayOfWeek
		return ret
	}).(DayOfWeekOutput)
}

func (o DayOfWeekPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DayOfWeekPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DayOfWeek) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DayOfWeekInput is an input type that accepts DayOfWeekArgs and DayOfWeekOutput values.
// You can construct a concrete instance of `DayOfWeekInput` via:
//
//	DayOfWeekArgs{...}
type DayOfWeekInput interface {
	pulumi.Input

	ToDayOfWeekOutput() DayOfWeekOutput
	ToDayOfWeekOutputWithContext(context.Context) DayOfWeekOutput
}

var dayOfWeekPtrType = reflect.TypeOf((**DayOfWeek)(nil)).Elem()

type DayOfWeekPtrInput interface {
	pulumi.Input

	ToDayOfWeekPtrOutput() DayOfWeekPtrOutput
	ToDayOfWeekPtrOutputWithContext(context.Context) DayOfWeekPtrOutput
}

type dayOfWeekPtr string

func DayOfWeekPtr(v string) DayOfWeekPtrInput {
	return (*dayOfWeekPtr)(&v)
}

func (*dayOfWeekPtr) ElementType() reflect.Type {
	return dayOfWeekPtrType
}

func (in *dayOfWeekPtr) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return pulumi.ToOutput(in).(DayOfWeekPtrOutput)
}

func (in *dayOfWeekPtr) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DayOfWeekPtrOutput)
}

// Disk configuration to apply to SQL Server.
type DiskConfigurationType string

const (
	DiskConfigurationTypeNEW    = DiskConfigurationType("NEW")
	DiskConfigurationTypeEXTEND = DiskConfigurationType("EXTEND")
	DiskConfigurationTypeADD    = DiskConfigurationType("ADD")
)

// Replica failover mode in availability group.
type Failover string

const (
	FailoverAUTOMATIC = Failover("AUTOMATIC")
	FailoverMANUAL    = Failover("MANUAL")
)

// Frequency of full backups. In both cases, full backups begin during the next scheduled time window.
type FullBackupFrequencyType string

const (
	FullBackupFrequencyTypeDaily  = FullBackupFrequencyType("Daily")
	FullBackupFrequencyTypeWeekly = FullBackupFrequencyType("Weekly")
)

// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
type IdentityType string

const (
	IdentityTypeNone           = IdentityType("None")
	IdentityTypeSystemAssigned = IdentityType("SystemAssigned")
)

// Replica readable secondary mode in availability group.
type ReadableSecondary string

const (
	ReadableSecondaryNO         = ReadableSecondary("NO")
	ReadableSecondaryALL        = ReadableSecondary("ALL")
	ReadableSecondary_READ_ONLY = ReadableSecondary("READ_ONLY")
)

// Replica Role in availability group.
type Role string

const (
	RolePRIMARY   = Role("PRIMARY")
	RoleSECONDARY = Role("SECONDARY")
)

// SQL Server edition type.
type SqlImageSku string

const (
	SqlImageSkuDeveloper  = SqlImageSku("Developer")
	SqlImageSkuExpress    = SqlImageSku("Express")
	SqlImageSkuStandard   = SqlImageSku("Standard")
	SqlImageSkuEnterprise = SqlImageSku("Enterprise")
	SqlImageSkuWeb        = SqlImageSku("Web")
)

// SQL Server Management type.
type SqlManagementMode string

const (
	SqlManagementModeFull        = SqlManagementMode("Full")
	SqlManagementModeLightWeight = SqlManagementMode("LightWeight")
	SqlManagementModeNoAgent     = SqlManagementMode("NoAgent")
)

// SQL Server license type.
type SqlServerLicenseType string

const (
	SqlServerLicenseTypePAYG = SqlServerLicenseType("PAYG")
	SqlServerLicenseTypeAHUB = SqlServerLicenseType("AHUB")
	SqlServerLicenseTypeDR   = SqlServerLicenseType("DR")
)

// SQL image sku.
type SqlVmGroupImageSku string

const (
	SqlVmGroupImageSkuDeveloper  = SqlVmGroupImageSku("Developer")
	SqlVmGroupImageSkuEnterprise = SqlVmGroupImageSku("Enterprise")
)

// SQL Server workload type.
type SqlWorkloadType string

const (
	SqlWorkloadTypeGENERAL = SqlWorkloadType("GENERAL")
	SqlWorkloadTypeOLTP    = SqlWorkloadType("OLTP")
	SqlWorkloadTypeDW      = SqlWorkloadType("DW")
)

// Storage workload type.
type StorageWorkloadType string

const (
	StorageWorkloadTypeGENERAL = StorageWorkloadType("GENERAL")
	StorageWorkloadTypeOLTP    = StorageWorkloadType("OLTP")
	StorageWorkloadTypeDW      = StorageWorkloadType("DW")
)

func init() {
	pulumi.RegisterOutputType(AssessmentDayOfWeekOutput{})
	pulumi.RegisterOutputType(AssessmentDayOfWeekPtrOutput{})
	pulumi.RegisterOutputType(DayOfWeekOutput{})
	pulumi.RegisterOutputType(DayOfWeekPtrOutput{})
}
