// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20170301preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BackupScheduleType string

const (
	BackupScheduleTypeManual    = BackupScheduleType("Manual")
	BackupScheduleTypeAutomated = BackupScheduleType("Automated")
)

func (BackupScheduleType) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupScheduleType)(nil)).Elem()
}

func (e BackupScheduleType) ToBackupScheduleTypeOutput() BackupScheduleTypeOutput {
	return pulumi.ToOutput(e).(BackupScheduleTypeOutput)
}

func (e BackupScheduleType) ToBackupScheduleTypeOutputWithContext(ctx context.Context) BackupScheduleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BackupScheduleTypeOutput)
}

func (e BackupScheduleType) ToBackupScheduleTypePtrOutput() BackupScheduleTypePtrOutput {
	return e.ToBackupScheduleTypePtrOutputWithContext(context.Background())
}

func (e BackupScheduleType) ToBackupScheduleTypePtrOutputWithContext(ctx context.Context) BackupScheduleTypePtrOutput {
	return BackupScheduleType(e).ToBackupScheduleTypeOutputWithContext(ctx).ToBackupScheduleTypePtrOutputWithContext(ctx)
}

func (e BackupScheduleType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackupScheduleType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackupScheduleType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BackupScheduleType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BackupScheduleTypeOutput struct{ *pulumi.OutputState }

func (BackupScheduleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupScheduleType)(nil)).Elem()
}

func (o BackupScheduleTypeOutput) ToBackupScheduleTypeOutput() BackupScheduleTypeOutput {
	return o
}

func (o BackupScheduleTypeOutput) ToBackupScheduleTypeOutputWithContext(ctx context.Context) BackupScheduleTypeOutput {
	return o
}

func (o BackupScheduleTypeOutput) ToBackupScheduleTypePtrOutput() BackupScheduleTypePtrOutput {
	return o.ToBackupScheduleTypePtrOutputWithContext(context.Background())
}

func (o BackupScheduleTypeOutput) ToBackupScheduleTypePtrOutputWithContext(ctx context.Context) BackupScheduleTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackupScheduleType) *BackupScheduleType {
		return &v
	}).(BackupScheduleTypePtrOutput)
}

func (o BackupScheduleTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BackupScheduleTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BackupScheduleType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BackupScheduleTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BackupScheduleTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BackupScheduleType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BackupScheduleTypePtrOutput struct{ *pulumi.OutputState }

func (BackupScheduleTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupScheduleType)(nil)).Elem()
}

func (o BackupScheduleTypePtrOutput) ToBackupScheduleTypePtrOutput() BackupScheduleTypePtrOutput {
	return o
}

func (o BackupScheduleTypePtrOutput) ToBackupScheduleTypePtrOutputWithContext(ctx context.Context) BackupScheduleTypePtrOutput {
	return o
}

func (o BackupScheduleTypePtrOutput) Elem() BackupScheduleTypeOutput {
	return o.ApplyT(func(v *BackupScheduleType) BackupScheduleType {
		if v != nil {
			return *v
		}
		var ret BackupScheduleType
		return ret
	}).(BackupScheduleTypeOutput)
}

func (o BackupScheduleTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BackupScheduleTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BackupScheduleType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BackupScheduleTypeInput is an input type that accepts BackupScheduleTypeArgs and BackupScheduleTypeOutput values.
// You can construct a concrete instance of `BackupScheduleTypeInput` via:
//
//          BackupScheduleTypeArgs{...}
type BackupScheduleTypeInput interface {
	pulumi.Input

	ToBackupScheduleTypeOutput() BackupScheduleTypeOutput
	ToBackupScheduleTypeOutputWithContext(context.Context) BackupScheduleTypeOutput
}

var backupScheduleTypePtrType = reflect.TypeOf((**BackupScheduleType)(nil)).Elem()

type BackupScheduleTypePtrInput interface {
	pulumi.Input

	ToBackupScheduleTypePtrOutput() BackupScheduleTypePtrOutput
	ToBackupScheduleTypePtrOutputWithContext(context.Context) BackupScheduleTypePtrOutput
}

type backupScheduleTypePtr string

func BackupScheduleTypePtr(v string) BackupScheduleTypePtrInput {
	return (*backupScheduleTypePtr)(&v)
}

func (*backupScheduleTypePtr) ElementType() reflect.Type {
	return backupScheduleTypePtrType
}

func (in *backupScheduleTypePtr) ToBackupScheduleTypePtrOutput() BackupScheduleTypePtrOutput {
	return pulumi.ToOutput(in).(BackupScheduleTypePtrOutput)
}

func (in *backupScheduleTypePtr) ToBackupScheduleTypePtrOutputWithContext(ctx context.Context) BackupScheduleTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BackupScheduleTypePtrOutput)
}

type ConnectivityType string

const (
	ConnectivityTypeLOCAL   = ConnectivityType("LOCAL")
	ConnectivityTypePRIVATE = ConnectivityType("PRIVATE")
	ConnectivityTypePUBLIC  = ConnectivityType("PUBLIC")
)

func (ConnectivityType) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectivityType)(nil)).Elem()
}

func (e ConnectivityType) ToConnectivityTypeOutput() ConnectivityTypeOutput {
	return pulumi.ToOutput(e).(ConnectivityTypeOutput)
}

func (e ConnectivityType) ToConnectivityTypeOutputWithContext(ctx context.Context) ConnectivityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ConnectivityTypeOutput)
}

func (e ConnectivityType) ToConnectivityTypePtrOutput() ConnectivityTypePtrOutput {
	return e.ToConnectivityTypePtrOutputWithContext(context.Background())
}

func (e ConnectivityType) ToConnectivityTypePtrOutputWithContext(ctx context.Context) ConnectivityTypePtrOutput {
	return ConnectivityType(e).ToConnectivityTypeOutputWithContext(ctx).ToConnectivityTypePtrOutputWithContext(ctx)
}

func (e ConnectivityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectivityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectivityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConnectivityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ConnectivityTypeOutput struct{ *pulumi.OutputState }

func (ConnectivityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectivityType)(nil)).Elem()
}

func (o ConnectivityTypeOutput) ToConnectivityTypeOutput() ConnectivityTypeOutput {
	return o
}

func (o ConnectivityTypeOutput) ToConnectivityTypeOutputWithContext(ctx context.Context) ConnectivityTypeOutput {
	return o
}

func (o ConnectivityTypeOutput) ToConnectivityTypePtrOutput() ConnectivityTypePtrOutput {
	return o.ToConnectivityTypePtrOutputWithContext(context.Background())
}

func (o ConnectivityTypeOutput) ToConnectivityTypePtrOutputWithContext(ctx context.Context) ConnectivityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectivityType) *ConnectivityType {
		return &v
	}).(ConnectivityTypePtrOutput)
}

func (o ConnectivityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ConnectivityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectivityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ConnectivityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectivityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectivityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ConnectivityTypePtrOutput struct{ *pulumi.OutputState }

func (ConnectivityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectivityType)(nil)).Elem()
}

func (o ConnectivityTypePtrOutput) ToConnectivityTypePtrOutput() ConnectivityTypePtrOutput {
	return o
}

func (o ConnectivityTypePtrOutput) ToConnectivityTypePtrOutputWithContext(ctx context.Context) ConnectivityTypePtrOutput {
	return o
}

func (o ConnectivityTypePtrOutput) Elem() ConnectivityTypeOutput {
	return o.ApplyT(func(v *ConnectivityType) ConnectivityType {
		if v != nil {
			return *v
		}
		var ret ConnectivityType
		return ret
	}).(ConnectivityTypeOutput)
}

func (o ConnectivityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectivityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ConnectivityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ConnectivityTypeInput is an input type that accepts ConnectivityTypeArgs and ConnectivityTypeOutput values.
// You can construct a concrete instance of `ConnectivityTypeInput` via:
//
//          ConnectivityTypeArgs{...}
type ConnectivityTypeInput interface {
	pulumi.Input

	ToConnectivityTypeOutput() ConnectivityTypeOutput
	ToConnectivityTypeOutputWithContext(context.Context) ConnectivityTypeOutput
}

var connectivityTypePtrType = reflect.TypeOf((**ConnectivityType)(nil)).Elem()

type ConnectivityTypePtrInput interface {
	pulumi.Input

	ToConnectivityTypePtrOutput() ConnectivityTypePtrOutput
	ToConnectivityTypePtrOutputWithContext(context.Context) ConnectivityTypePtrOutput
}

type connectivityTypePtr string

func ConnectivityTypePtr(v string) ConnectivityTypePtrInput {
	return (*connectivityTypePtr)(&v)
}

func (*connectivityTypePtr) ElementType() reflect.Type {
	return connectivityTypePtrType
}

func (in *connectivityTypePtr) ToConnectivityTypePtrOutput() ConnectivityTypePtrOutput {
	return pulumi.ToOutput(in).(ConnectivityTypePtrOutput)
}

func (in *connectivityTypePtr) ToConnectivityTypePtrOutputWithContext(ctx context.Context) ConnectivityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ConnectivityTypePtrOutput)
}

type DayOfWeek string

const (
	DayOfWeekMonday    = DayOfWeek("Monday")
	DayOfWeekTuesday   = DayOfWeek("Tuesday")
	DayOfWeekWednesday = DayOfWeek("Wednesday")
	DayOfWeekThursday  = DayOfWeek("Thursday")
	DayOfWeekFriday    = DayOfWeek("Friday")
	DayOfWeekSaturday  = DayOfWeek("Saturday")
	DayOfWeekSunday    = DayOfWeek("Sunday")
)

func (DayOfWeek) ElementType() reflect.Type {
	return reflect.TypeOf((*DayOfWeek)(nil)).Elem()
}

func (e DayOfWeek) ToDayOfWeekOutput() DayOfWeekOutput {
	return pulumi.ToOutput(e).(DayOfWeekOutput)
}

func (e DayOfWeek) ToDayOfWeekOutputWithContext(ctx context.Context) DayOfWeekOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DayOfWeekOutput)
}

func (e DayOfWeek) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return e.ToDayOfWeekPtrOutputWithContext(context.Background())
}

func (e DayOfWeek) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return DayOfWeek(e).ToDayOfWeekOutputWithContext(ctx).ToDayOfWeekPtrOutputWithContext(ctx)
}

func (e DayOfWeek) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DayOfWeek) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DayOfWeek) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DayOfWeek) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DayOfWeekOutput struct{ *pulumi.OutputState }

func (DayOfWeekOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DayOfWeek)(nil)).Elem()
}

func (o DayOfWeekOutput) ToDayOfWeekOutput() DayOfWeekOutput {
	return o
}

func (o DayOfWeekOutput) ToDayOfWeekOutputWithContext(ctx context.Context) DayOfWeekOutput {
	return o
}

func (o DayOfWeekOutput) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return o.ToDayOfWeekPtrOutputWithContext(context.Background())
}

func (o DayOfWeekOutput) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DayOfWeek) *DayOfWeek {
		return &v
	}).(DayOfWeekPtrOutput)
}

func (o DayOfWeekOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DayOfWeekOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DayOfWeek) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DayOfWeekOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DayOfWeekOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DayOfWeek) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DayOfWeekPtrOutput struct{ *pulumi.OutputState }

func (DayOfWeekPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DayOfWeek)(nil)).Elem()
}

func (o DayOfWeekPtrOutput) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return o
}

func (o DayOfWeekPtrOutput) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return o
}

func (o DayOfWeekPtrOutput) Elem() DayOfWeekOutput {
	return o.ApplyT(func(v *DayOfWeek) DayOfWeek {
		if v != nil {
			return *v
		}
		var ret DayOfWeek
		return ret
	}).(DayOfWeekOutput)
}

func (o DayOfWeekPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DayOfWeekPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DayOfWeek) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DayOfWeekInput is an input type that accepts DayOfWeekArgs and DayOfWeekOutput values.
// You can construct a concrete instance of `DayOfWeekInput` via:
//
//          DayOfWeekArgs{...}
type DayOfWeekInput interface {
	pulumi.Input

	ToDayOfWeekOutput() DayOfWeekOutput
	ToDayOfWeekOutputWithContext(context.Context) DayOfWeekOutput
}

var dayOfWeekPtrType = reflect.TypeOf((**DayOfWeek)(nil)).Elem()

type DayOfWeekPtrInput interface {
	pulumi.Input

	ToDayOfWeekPtrOutput() DayOfWeekPtrOutput
	ToDayOfWeekPtrOutputWithContext(context.Context) DayOfWeekPtrOutput
}

type dayOfWeekPtr string

func DayOfWeekPtr(v string) DayOfWeekPtrInput {
	return (*dayOfWeekPtr)(&v)
}

func (*dayOfWeekPtr) ElementType() reflect.Type {
	return dayOfWeekPtrType
}

func (in *dayOfWeekPtr) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return pulumi.ToOutput(in).(DayOfWeekPtrOutput)
}

func (in *dayOfWeekPtr) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DayOfWeekPtrOutput)
}

type DiskConfigurationType string

const (
	DiskConfigurationTypeNEW    = DiskConfigurationType("NEW")
	DiskConfigurationTypeEXTEND = DiskConfigurationType("EXTEND")
	DiskConfigurationTypeADD    = DiskConfigurationType("ADD")
)

func (DiskConfigurationType) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskConfigurationType)(nil)).Elem()
}

func (e DiskConfigurationType) ToDiskConfigurationTypeOutput() DiskConfigurationTypeOutput {
	return pulumi.ToOutput(e).(DiskConfigurationTypeOutput)
}

func (e DiskConfigurationType) ToDiskConfigurationTypeOutputWithContext(ctx context.Context) DiskConfigurationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DiskConfigurationTypeOutput)
}

func (e DiskConfigurationType) ToDiskConfigurationTypePtrOutput() DiskConfigurationTypePtrOutput {
	return e.ToDiskConfigurationTypePtrOutputWithContext(context.Background())
}

func (e DiskConfigurationType) ToDiskConfigurationTypePtrOutputWithContext(ctx context.Context) DiskConfigurationTypePtrOutput {
	return DiskConfigurationType(e).ToDiskConfigurationTypeOutputWithContext(ctx).ToDiskConfigurationTypePtrOutputWithContext(ctx)
}

func (e DiskConfigurationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiskConfigurationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiskConfigurationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DiskConfigurationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DiskConfigurationTypeOutput struct{ *pulumi.OutputState }

func (DiskConfigurationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskConfigurationType)(nil)).Elem()
}

func (o DiskConfigurationTypeOutput) ToDiskConfigurationTypeOutput() DiskConfigurationTypeOutput {
	return o
}

func (o DiskConfigurationTypeOutput) ToDiskConfigurationTypeOutputWithContext(ctx context.Context) DiskConfigurationTypeOutput {
	return o
}

func (o DiskConfigurationTypeOutput) ToDiskConfigurationTypePtrOutput() DiskConfigurationTypePtrOutput {
	return o.ToDiskConfigurationTypePtrOutputWithContext(context.Background())
}

func (o DiskConfigurationTypeOutput) ToDiskConfigurationTypePtrOutputWithContext(ctx context.Context) DiskConfigurationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskConfigurationType) *DiskConfigurationType {
		return &v
	}).(DiskConfigurationTypePtrOutput)
}

func (o DiskConfigurationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DiskConfigurationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiskConfigurationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DiskConfigurationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiskConfigurationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiskConfigurationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DiskConfigurationTypePtrOutput struct{ *pulumi.OutputState }

func (DiskConfigurationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskConfigurationType)(nil)).Elem()
}

func (o DiskConfigurationTypePtrOutput) ToDiskConfigurationTypePtrOutput() DiskConfigurationTypePtrOutput {
	return o
}

func (o DiskConfigurationTypePtrOutput) ToDiskConfigurationTypePtrOutputWithContext(ctx context.Context) DiskConfigurationTypePtrOutput {
	return o
}

func (o DiskConfigurationTypePtrOutput) Elem() DiskConfigurationTypeOutput {
	return o.ApplyT(func(v *DiskConfigurationType) DiskConfigurationType {
		if v != nil {
			return *v
		}
		var ret DiskConfigurationType
		return ret
	}).(DiskConfigurationTypeOutput)
}

func (o DiskConfigurationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiskConfigurationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DiskConfigurationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DiskConfigurationTypeInput is an input type that accepts DiskConfigurationTypeArgs and DiskConfigurationTypeOutput values.
// You can construct a concrete instance of `DiskConfigurationTypeInput` via:
//
//          DiskConfigurationTypeArgs{...}
type DiskConfigurationTypeInput interface {
	pulumi.Input

	ToDiskConfigurationTypeOutput() DiskConfigurationTypeOutput
	ToDiskConfigurationTypeOutputWithContext(context.Context) DiskConfigurationTypeOutput
}

var diskConfigurationTypePtrType = reflect.TypeOf((**DiskConfigurationType)(nil)).Elem()

type DiskConfigurationTypePtrInput interface {
	pulumi.Input

	ToDiskConfigurationTypePtrOutput() DiskConfigurationTypePtrOutput
	ToDiskConfigurationTypePtrOutputWithContext(context.Context) DiskConfigurationTypePtrOutput
}

type diskConfigurationTypePtr string

func DiskConfigurationTypePtr(v string) DiskConfigurationTypePtrInput {
	return (*diskConfigurationTypePtr)(&v)
}

func (*diskConfigurationTypePtr) ElementType() reflect.Type {
	return diskConfigurationTypePtrType
}

func (in *diskConfigurationTypePtr) ToDiskConfigurationTypePtrOutput() DiskConfigurationTypePtrOutput {
	return pulumi.ToOutput(in).(DiskConfigurationTypePtrOutput)
}

func (in *diskConfigurationTypePtr) ToDiskConfigurationTypePtrOutputWithContext(ctx context.Context) DiskConfigurationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DiskConfigurationTypePtrOutput)
}

type FullBackupFrequencyType string

const (
	FullBackupFrequencyTypeDaily  = FullBackupFrequencyType("Daily")
	FullBackupFrequencyTypeWeekly = FullBackupFrequencyType("Weekly")
)

func (FullBackupFrequencyType) ElementType() reflect.Type {
	return reflect.TypeOf((*FullBackupFrequencyType)(nil)).Elem()
}

func (e FullBackupFrequencyType) ToFullBackupFrequencyTypeOutput() FullBackupFrequencyTypeOutput {
	return pulumi.ToOutput(e).(FullBackupFrequencyTypeOutput)
}

func (e FullBackupFrequencyType) ToFullBackupFrequencyTypeOutputWithContext(ctx context.Context) FullBackupFrequencyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FullBackupFrequencyTypeOutput)
}

func (e FullBackupFrequencyType) ToFullBackupFrequencyTypePtrOutput() FullBackupFrequencyTypePtrOutput {
	return e.ToFullBackupFrequencyTypePtrOutputWithContext(context.Background())
}

func (e FullBackupFrequencyType) ToFullBackupFrequencyTypePtrOutputWithContext(ctx context.Context) FullBackupFrequencyTypePtrOutput {
	return FullBackupFrequencyType(e).ToFullBackupFrequencyTypeOutputWithContext(ctx).ToFullBackupFrequencyTypePtrOutputWithContext(ctx)
}

func (e FullBackupFrequencyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FullBackupFrequencyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FullBackupFrequencyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FullBackupFrequencyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FullBackupFrequencyTypeOutput struct{ *pulumi.OutputState }

func (FullBackupFrequencyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FullBackupFrequencyType)(nil)).Elem()
}

func (o FullBackupFrequencyTypeOutput) ToFullBackupFrequencyTypeOutput() FullBackupFrequencyTypeOutput {
	return o
}

func (o FullBackupFrequencyTypeOutput) ToFullBackupFrequencyTypeOutputWithContext(ctx context.Context) FullBackupFrequencyTypeOutput {
	return o
}

func (o FullBackupFrequencyTypeOutput) ToFullBackupFrequencyTypePtrOutput() FullBackupFrequencyTypePtrOutput {
	return o.ToFullBackupFrequencyTypePtrOutputWithContext(context.Background())
}

func (o FullBackupFrequencyTypeOutput) ToFullBackupFrequencyTypePtrOutputWithContext(ctx context.Context) FullBackupFrequencyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FullBackupFrequencyType) *FullBackupFrequencyType {
		return &v
	}).(FullBackupFrequencyTypePtrOutput)
}

func (o FullBackupFrequencyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FullBackupFrequencyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FullBackupFrequencyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FullBackupFrequencyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FullBackupFrequencyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FullBackupFrequencyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FullBackupFrequencyTypePtrOutput struct{ *pulumi.OutputState }

func (FullBackupFrequencyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FullBackupFrequencyType)(nil)).Elem()
}

func (o FullBackupFrequencyTypePtrOutput) ToFullBackupFrequencyTypePtrOutput() FullBackupFrequencyTypePtrOutput {
	return o
}

func (o FullBackupFrequencyTypePtrOutput) ToFullBackupFrequencyTypePtrOutputWithContext(ctx context.Context) FullBackupFrequencyTypePtrOutput {
	return o
}

func (o FullBackupFrequencyTypePtrOutput) Elem() FullBackupFrequencyTypeOutput {
	return o.ApplyT(func(v *FullBackupFrequencyType) FullBackupFrequencyType {
		if v != nil {
			return *v
		}
		var ret FullBackupFrequencyType
		return ret
	}).(FullBackupFrequencyTypeOutput)
}

func (o FullBackupFrequencyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FullBackupFrequencyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FullBackupFrequencyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FullBackupFrequencyTypeInput is an input type that accepts FullBackupFrequencyTypeArgs and FullBackupFrequencyTypeOutput values.
// You can construct a concrete instance of `FullBackupFrequencyTypeInput` via:
//
//          FullBackupFrequencyTypeArgs{...}
type FullBackupFrequencyTypeInput interface {
	pulumi.Input

	ToFullBackupFrequencyTypeOutput() FullBackupFrequencyTypeOutput
	ToFullBackupFrequencyTypeOutputWithContext(context.Context) FullBackupFrequencyTypeOutput
}

var fullBackupFrequencyTypePtrType = reflect.TypeOf((**FullBackupFrequencyType)(nil)).Elem()

type FullBackupFrequencyTypePtrInput interface {
	pulumi.Input

	ToFullBackupFrequencyTypePtrOutput() FullBackupFrequencyTypePtrOutput
	ToFullBackupFrequencyTypePtrOutputWithContext(context.Context) FullBackupFrequencyTypePtrOutput
}

type fullBackupFrequencyTypePtr string

func FullBackupFrequencyTypePtr(v string) FullBackupFrequencyTypePtrInput {
	return (*fullBackupFrequencyTypePtr)(&v)
}

func (*fullBackupFrequencyTypePtr) ElementType() reflect.Type {
	return fullBackupFrequencyTypePtrType
}

func (in *fullBackupFrequencyTypePtr) ToFullBackupFrequencyTypePtrOutput() FullBackupFrequencyTypePtrOutput {
	return pulumi.ToOutput(in).(FullBackupFrequencyTypePtrOutput)
}

func (in *fullBackupFrequencyTypePtr) ToFullBackupFrequencyTypePtrOutputWithContext(ctx context.Context) FullBackupFrequencyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FullBackupFrequencyTypePtrOutput)
}

type IdentityType string

const (
	IdentityTypeSystemAssigned = IdentityType("SystemAssigned")
)

func (IdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityType)(nil)).Elem()
}

func (e IdentityType) ToIdentityTypeOutput() IdentityTypeOutput {
	return pulumi.ToOutput(e).(IdentityTypeOutput)
}

func (e IdentityType) ToIdentityTypeOutputWithContext(ctx context.Context) IdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(IdentityTypeOutput)
}

func (e IdentityType) ToIdentityTypePtrOutput() IdentityTypePtrOutput {
	return e.ToIdentityTypePtrOutputWithContext(context.Background())
}

func (e IdentityType) ToIdentityTypePtrOutputWithContext(ctx context.Context) IdentityTypePtrOutput {
	return IdentityType(e).ToIdentityTypeOutputWithContext(ctx).ToIdentityTypePtrOutputWithContext(ctx)
}

func (e IdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IdentityTypeOutput struct{ *pulumi.OutputState }

func (IdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityType)(nil)).Elem()
}

func (o IdentityTypeOutput) ToIdentityTypeOutput() IdentityTypeOutput {
	return o
}

func (o IdentityTypeOutput) ToIdentityTypeOutputWithContext(ctx context.Context) IdentityTypeOutput {
	return o
}

func (o IdentityTypeOutput) ToIdentityTypePtrOutput() IdentityTypePtrOutput {
	return o.ToIdentityTypePtrOutputWithContext(context.Background())
}

func (o IdentityTypeOutput) ToIdentityTypePtrOutputWithContext(ctx context.Context) IdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityType) *IdentityType {
		return &v
	}).(IdentityTypePtrOutput)
}

func (o IdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IdentityTypePtrOutput struct{ *pulumi.OutputState }

func (IdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityType)(nil)).Elem()
}

func (o IdentityTypePtrOutput) ToIdentityTypePtrOutput() IdentityTypePtrOutput {
	return o
}

func (o IdentityTypePtrOutput) ToIdentityTypePtrOutputWithContext(ctx context.Context) IdentityTypePtrOutput {
	return o
}

func (o IdentityTypePtrOutput) Elem() IdentityTypeOutput {
	return o.ApplyT(func(v *IdentityType) IdentityType {
		if v != nil {
			return *v
		}
		var ret IdentityType
		return ret
	}).(IdentityTypeOutput)
}

func (o IdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// IdentityTypeInput is an input type that accepts IdentityTypeArgs and IdentityTypeOutput values.
// You can construct a concrete instance of `IdentityTypeInput` via:
//
//          IdentityTypeArgs{...}
type IdentityTypeInput interface {
	pulumi.Input

	ToIdentityTypeOutput() IdentityTypeOutput
	ToIdentityTypeOutputWithContext(context.Context) IdentityTypeOutput
}

var identityTypePtrType = reflect.TypeOf((**IdentityType)(nil)).Elem()

type IdentityTypePtrInput interface {
	pulumi.Input

	ToIdentityTypePtrOutput() IdentityTypePtrOutput
	ToIdentityTypePtrOutputWithContext(context.Context) IdentityTypePtrOutput
}

type identityTypePtr string

func IdentityTypePtr(v string) IdentityTypePtrInput {
	return (*identityTypePtr)(&v)
}

func (*identityTypePtr) ElementType() reflect.Type {
	return identityTypePtrType
}

func (in *identityTypePtr) ToIdentityTypePtrOutput() IdentityTypePtrOutput {
	return pulumi.ToOutput(in).(IdentityTypePtrOutput)
}

func (in *identityTypePtr) ToIdentityTypePtrOutputWithContext(ctx context.Context) IdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(IdentityTypePtrOutput)
}

type SqlImageSku string

const (
	SqlImageSkuDeveloper  = SqlImageSku("Developer")
	SqlImageSkuExpress    = SqlImageSku("Express")
	SqlImageSkuStandard   = SqlImageSku("Standard")
	SqlImageSkuEnterprise = SqlImageSku("Enterprise")
	SqlImageSkuWeb        = SqlImageSku("Web")
)

func (SqlImageSku) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlImageSku)(nil)).Elem()
}

func (e SqlImageSku) ToSqlImageSkuOutput() SqlImageSkuOutput {
	return pulumi.ToOutput(e).(SqlImageSkuOutput)
}

func (e SqlImageSku) ToSqlImageSkuOutputWithContext(ctx context.Context) SqlImageSkuOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SqlImageSkuOutput)
}

func (e SqlImageSku) ToSqlImageSkuPtrOutput() SqlImageSkuPtrOutput {
	return e.ToSqlImageSkuPtrOutputWithContext(context.Background())
}

func (e SqlImageSku) ToSqlImageSkuPtrOutputWithContext(ctx context.Context) SqlImageSkuPtrOutput {
	return SqlImageSku(e).ToSqlImageSkuOutputWithContext(ctx).ToSqlImageSkuPtrOutputWithContext(ctx)
}

func (e SqlImageSku) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SqlImageSku) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SqlImageSku) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SqlImageSku) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SqlImageSkuOutput struct{ *pulumi.OutputState }

func (SqlImageSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlImageSku)(nil)).Elem()
}

func (o SqlImageSkuOutput) ToSqlImageSkuOutput() SqlImageSkuOutput {
	return o
}

func (o SqlImageSkuOutput) ToSqlImageSkuOutputWithContext(ctx context.Context) SqlImageSkuOutput {
	return o
}

func (o SqlImageSkuOutput) ToSqlImageSkuPtrOutput() SqlImageSkuPtrOutput {
	return o.ToSqlImageSkuPtrOutputWithContext(context.Background())
}

func (o SqlImageSkuOutput) ToSqlImageSkuPtrOutputWithContext(ctx context.Context) SqlImageSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlImageSku) *SqlImageSku {
		return &v
	}).(SqlImageSkuPtrOutput)
}

func (o SqlImageSkuOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SqlImageSkuOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SqlImageSku) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SqlImageSkuOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SqlImageSkuOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SqlImageSku) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SqlImageSkuPtrOutput struct{ *pulumi.OutputState }

func (SqlImageSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlImageSku)(nil)).Elem()
}

func (o SqlImageSkuPtrOutput) ToSqlImageSkuPtrOutput() SqlImageSkuPtrOutput {
	return o
}

func (o SqlImageSkuPtrOutput) ToSqlImageSkuPtrOutputWithContext(ctx context.Context) SqlImageSkuPtrOutput {
	return o
}

func (o SqlImageSkuPtrOutput) Elem() SqlImageSkuOutput {
	return o.ApplyT(func(v *SqlImageSku) SqlImageSku {
		if v != nil {
			return *v
		}
		var ret SqlImageSku
		return ret
	}).(SqlImageSkuOutput)
}

func (o SqlImageSkuPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SqlImageSkuPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SqlImageSku) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SqlImageSkuInput is an input type that accepts SqlImageSkuArgs and SqlImageSkuOutput values.
// You can construct a concrete instance of `SqlImageSkuInput` via:
//
//          SqlImageSkuArgs{...}
type SqlImageSkuInput interface {
	pulumi.Input

	ToSqlImageSkuOutput() SqlImageSkuOutput
	ToSqlImageSkuOutputWithContext(context.Context) SqlImageSkuOutput
}

var sqlImageSkuPtrType = reflect.TypeOf((**SqlImageSku)(nil)).Elem()

type SqlImageSkuPtrInput interface {
	pulumi.Input

	ToSqlImageSkuPtrOutput() SqlImageSkuPtrOutput
	ToSqlImageSkuPtrOutputWithContext(context.Context) SqlImageSkuPtrOutput
}

type sqlImageSkuPtr string

func SqlImageSkuPtr(v string) SqlImageSkuPtrInput {
	return (*sqlImageSkuPtr)(&v)
}

func (*sqlImageSkuPtr) ElementType() reflect.Type {
	return sqlImageSkuPtrType
}

func (in *sqlImageSkuPtr) ToSqlImageSkuPtrOutput() SqlImageSkuPtrOutput {
	return pulumi.ToOutput(in).(SqlImageSkuPtrOutput)
}

func (in *sqlImageSkuPtr) ToSqlImageSkuPtrOutputWithContext(ctx context.Context) SqlImageSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SqlImageSkuPtrOutput)
}

type SqlManagementMode string

const (
	SqlManagementModeFull        = SqlManagementMode("Full")
	SqlManagementModeLightWeight = SqlManagementMode("LightWeight")
	SqlManagementModeNoAgent     = SqlManagementMode("NoAgent")
)

func (SqlManagementMode) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagementMode)(nil)).Elem()
}

func (e SqlManagementMode) ToSqlManagementModeOutput() SqlManagementModeOutput {
	return pulumi.ToOutput(e).(SqlManagementModeOutput)
}

func (e SqlManagementMode) ToSqlManagementModeOutputWithContext(ctx context.Context) SqlManagementModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SqlManagementModeOutput)
}

func (e SqlManagementMode) ToSqlManagementModePtrOutput() SqlManagementModePtrOutput {
	return e.ToSqlManagementModePtrOutputWithContext(context.Background())
}

func (e SqlManagementMode) ToSqlManagementModePtrOutputWithContext(ctx context.Context) SqlManagementModePtrOutput {
	return SqlManagementMode(e).ToSqlManagementModeOutputWithContext(ctx).ToSqlManagementModePtrOutputWithContext(ctx)
}

func (e SqlManagementMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SqlManagementMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SqlManagementMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SqlManagementMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SqlManagementModeOutput struct{ *pulumi.OutputState }

func (SqlManagementModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagementMode)(nil)).Elem()
}

func (o SqlManagementModeOutput) ToSqlManagementModeOutput() SqlManagementModeOutput {
	return o
}

func (o SqlManagementModeOutput) ToSqlManagementModeOutputWithContext(ctx context.Context) SqlManagementModeOutput {
	return o
}

func (o SqlManagementModeOutput) ToSqlManagementModePtrOutput() SqlManagementModePtrOutput {
	return o.ToSqlManagementModePtrOutputWithContext(context.Background())
}

func (o SqlManagementModeOutput) ToSqlManagementModePtrOutputWithContext(ctx context.Context) SqlManagementModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlManagementMode) *SqlManagementMode {
		return &v
	}).(SqlManagementModePtrOutput)
}

func (o SqlManagementModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SqlManagementModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SqlManagementMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SqlManagementModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SqlManagementModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SqlManagementMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SqlManagementModePtrOutput struct{ *pulumi.OutputState }

func (SqlManagementModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlManagementMode)(nil)).Elem()
}

func (o SqlManagementModePtrOutput) ToSqlManagementModePtrOutput() SqlManagementModePtrOutput {
	return o
}

func (o SqlManagementModePtrOutput) ToSqlManagementModePtrOutputWithContext(ctx context.Context) SqlManagementModePtrOutput {
	return o
}

func (o SqlManagementModePtrOutput) Elem() SqlManagementModeOutput {
	return o.ApplyT(func(v *SqlManagementMode) SqlManagementMode {
		if v != nil {
			return *v
		}
		var ret SqlManagementMode
		return ret
	}).(SqlManagementModeOutput)
}

func (o SqlManagementModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SqlManagementModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SqlManagementMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SqlManagementModeInput is an input type that accepts SqlManagementModeArgs and SqlManagementModeOutput values.
// You can construct a concrete instance of `SqlManagementModeInput` via:
//
//          SqlManagementModeArgs{...}
type SqlManagementModeInput interface {
	pulumi.Input

	ToSqlManagementModeOutput() SqlManagementModeOutput
	ToSqlManagementModeOutputWithContext(context.Context) SqlManagementModeOutput
}

var sqlManagementModePtrType = reflect.TypeOf((**SqlManagementMode)(nil)).Elem()

type SqlManagementModePtrInput interface {
	pulumi.Input

	ToSqlManagementModePtrOutput() SqlManagementModePtrOutput
	ToSqlManagementModePtrOutputWithContext(context.Context) SqlManagementModePtrOutput
}

type sqlManagementModePtr string

func SqlManagementModePtr(v string) SqlManagementModePtrInput {
	return (*sqlManagementModePtr)(&v)
}

func (*sqlManagementModePtr) ElementType() reflect.Type {
	return sqlManagementModePtrType
}

func (in *sqlManagementModePtr) ToSqlManagementModePtrOutput() SqlManagementModePtrOutput {
	return pulumi.ToOutput(in).(SqlManagementModePtrOutput)
}

func (in *sqlManagementModePtr) ToSqlManagementModePtrOutputWithContext(ctx context.Context) SqlManagementModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SqlManagementModePtrOutput)
}

type SqlServerLicenseType string

const (
	SqlServerLicenseTypePAYG = SqlServerLicenseType("PAYG")
	SqlServerLicenseTypeAHUB = SqlServerLicenseType("AHUB")
	SqlServerLicenseTypeDR   = SqlServerLicenseType("DR")
)

func (SqlServerLicenseType) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerLicenseType)(nil)).Elem()
}

func (e SqlServerLicenseType) ToSqlServerLicenseTypeOutput() SqlServerLicenseTypeOutput {
	return pulumi.ToOutput(e).(SqlServerLicenseTypeOutput)
}

func (e SqlServerLicenseType) ToSqlServerLicenseTypeOutputWithContext(ctx context.Context) SqlServerLicenseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SqlServerLicenseTypeOutput)
}

func (e SqlServerLicenseType) ToSqlServerLicenseTypePtrOutput() SqlServerLicenseTypePtrOutput {
	return e.ToSqlServerLicenseTypePtrOutputWithContext(context.Background())
}

func (e SqlServerLicenseType) ToSqlServerLicenseTypePtrOutputWithContext(ctx context.Context) SqlServerLicenseTypePtrOutput {
	return SqlServerLicenseType(e).ToSqlServerLicenseTypeOutputWithContext(ctx).ToSqlServerLicenseTypePtrOutputWithContext(ctx)
}

func (e SqlServerLicenseType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SqlServerLicenseType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SqlServerLicenseType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SqlServerLicenseType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SqlServerLicenseTypeOutput struct{ *pulumi.OutputState }

func (SqlServerLicenseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerLicenseType)(nil)).Elem()
}

func (o SqlServerLicenseTypeOutput) ToSqlServerLicenseTypeOutput() SqlServerLicenseTypeOutput {
	return o
}

func (o SqlServerLicenseTypeOutput) ToSqlServerLicenseTypeOutputWithContext(ctx context.Context) SqlServerLicenseTypeOutput {
	return o
}

func (o SqlServerLicenseTypeOutput) ToSqlServerLicenseTypePtrOutput() SqlServerLicenseTypePtrOutput {
	return o.ToSqlServerLicenseTypePtrOutputWithContext(context.Background())
}

func (o SqlServerLicenseTypeOutput) ToSqlServerLicenseTypePtrOutputWithContext(ctx context.Context) SqlServerLicenseTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlServerLicenseType) *SqlServerLicenseType {
		return &v
	}).(SqlServerLicenseTypePtrOutput)
}

func (o SqlServerLicenseTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SqlServerLicenseTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SqlServerLicenseType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SqlServerLicenseTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SqlServerLicenseTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SqlServerLicenseType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SqlServerLicenseTypePtrOutput struct{ *pulumi.OutputState }

func (SqlServerLicenseTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerLicenseType)(nil)).Elem()
}

func (o SqlServerLicenseTypePtrOutput) ToSqlServerLicenseTypePtrOutput() SqlServerLicenseTypePtrOutput {
	return o
}

func (o SqlServerLicenseTypePtrOutput) ToSqlServerLicenseTypePtrOutputWithContext(ctx context.Context) SqlServerLicenseTypePtrOutput {
	return o
}

func (o SqlServerLicenseTypePtrOutput) Elem() SqlServerLicenseTypeOutput {
	return o.ApplyT(func(v *SqlServerLicenseType) SqlServerLicenseType {
		if v != nil {
			return *v
		}
		var ret SqlServerLicenseType
		return ret
	}).(SqlServerLicenseTypeOutput)
}

func (o SqlServerLicenseTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SqlServerLicenseTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SqlServerLicenseType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SqlServerLicenseTypeInput is an input type that accepts SqlServerLicenseTypeArgs and SqlServerLicenseTypeOutput values.
// You can construct a concrete instance of `SqlServerLicenseTypeInput` via:
//
//          SqlServerLicenseTypeArgs{...}
type SqlServerLicenseTypeInput interface {
	pulumi.Input

	ToSqlServerLicenseTypeOutput() SqlServerLicenseTypeOutput
	ToSqlServerLicenseTypeOutputWithContext(context.Context) SqlServerLicenseTypeOutput
}

var sqlServerLicenseTypePtrType = reflect.TypeOf((**SqlServerLicenseType)(nil)).Elem()

type SqlServerLicenseTypePtrInput interface {
	pulumi.Input

	ToSqlServerLicenseTypePtrOutput() SqlServerLicenseTypePtrOutput
	ToSqlServerLicenseTypePtrOutputWithContext(context.Context) SqlServerLicenseTypePtrOutput
}

type sqlServerLicenseTypePtr string

func SqlServerLicenseTypePtr(v string) SqlServerLicenseTypePtrInput {
	return (*sqlServerLicenseTypePtr)(&v)
}

func (*sqlServerLicenseTypePtr) ElementType() reflect.Type {
	return sqlServerLicenseTypePtrType
}

func (in *sqlServerLicenseTypePtr) ToSqlServerLicenseTypePtrOutput() SqlServerLicenseTypePtrOutput {
	return pulumi.ToOutput(in).(SqlServerLicenseTypePtrOutput)
}

func (in *sqlServerLicenseTypePtr) ToSqlServerLicenseTypePtrOutputWithContext(ctx context.Context) SqlServerLicenseTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SqlServerLicenseTypePtrOutput)
}

type SqlVmGroupImageSku string

const (
	SqlVmGroupImageSkuDeveloper  = SqlVmGroupImageSku("Developer")
	SqlVmGroupImageSkuEnterprise = SqlVmGroupImageSku("Enterprise")
)

func (SqlVmGroupImageSku) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlVmGroupImageSku)(nil)).Elem()
}

func (e SqlVmGroupImageSku) ToSqlVmGroupImageSkuOutput() SqlVmGroupImageSkuOutput {
	return pulumi.ToOutput(e).(SqlVmGroupImageSkuOutput)
}

func (e SqlVmGroupImageSku) ToSqlVmGroupImageSkuOutputWithContext(ctx context.Context) SqlVmGroupImageSkuOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SqlVmGroupImageSkuOutput)
}

func (e SqlVmGroupImageSku) ToSqlVmGroupImageSkuPtrOutput() SqlVmGroupImageSkuPtrOutput {
	return e.ToSqlVmGroupImageSkuPtrOutputWithContext(context.Background())
}

func (e SqlVmGroupImageSku) ToSqlVmGroupImageSkuPtrOutputWithContext(ctx context.Context) SqlVmGroupImageSkuPtrOutput {
	return SqlVmGroupImageSku(e).ToSqlVmGroupImageSkuOutputWithContext(ctx).ToSqlVmGroupImageSkuPtrOutputWithContext(ctx)
}

func (e SqlVmGroupImageSku) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SqlVmGroupImageSku) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SqlVmGroupImageSku) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SqlVmGroupImageSku) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SqlVmGroupImageSkuOutput struct{ *pulumi.OutputState }

func (SqlVmGroupImageSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlVmGroupImageSku)(nil)).Elem()
}

func (o SqlVmGroupImageSkuOutput) ToSqlVmGroupImageSkuOutput() SqlVmGroupImageSkuOutput {
	return o
}

func (o SqlVmGroupImageSkuOutput) ToSqlVmGroupImageSkuOutputWithContext(ctx context.Context) SqlVmGroupImageSkuOutput {
	return o
}

func (o SqlVmGroupImageSkuOutput) ToSqlVmGroupImageSkuPtrOutput() SqlVmGroupImageSkuPtrOutput {
	return o.ToSqlVmGroupImageSkuPtrOutputWithContext(context.Background())
}

func (o SqlVmGroupImageSkuOutput) ToSqlVmGroupImageSkuPtrOutputWithContext(ctx context.Context) SqlVmGroupImageSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlVmGroupImageSku) *SqlVmGroupImageSku {
		return &v
	}).(SqlVmGroupImageSkuPtrOutput)
}

func (o SqlVmGroupImageSkuOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SqlVmGroupImageSkuOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SqlVmGroupImageSku) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SqlVmGroupImageSkuOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SqlVmGroupImageSkuOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SqlVmGroupImageSku) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SqlVmGroupImageSkuPtrOutput struct{ *pulumi.OutputState }

func (SqlVmGroupImageSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlVmGroupImageSku)(nil)).Elem()
}

func (o SqlVmGroupImageSkuPtrOutput) ToSqlVmGroupImageSkuPtrOutput() SqlVmGroupImageSkuPtrOutput {
	return o
}

func (o SqlVmGroupImageSkuPtrOutput) ToSqlVmGroupImageSkuPtrOutputWithContext(ctx context.Context) SqlVmGroupImageSkuPtrOutput {
	return o
}

func (o SqlVmGroupImageSkuPtrOutput) Elem() SqlVmGroupImageSkuOutput {
	return o.ApplyT(func(v *SqlVmGroupImageSku) SqlVmGroupImageSku {
		if v != nil {
			return *v
		}
		var ret SqlVmGroupImageSku
		return ret
	}).(SqlVmGroupImageSkuOutput)
}

func (o SqlVmGroupImageSkuPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SqlVmGroupImageSkuPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SqlVmGroupImageSku) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SqlVmGroupImageSkuInput is an input type that accepts SqlVmGroupImageSkuArgs and SqlVmGroupImageSkuOutput values.
// You can construct a concrete instance of `SqlVmGroupImageSkuInput` via:
//
//          SqlVmGroupImageSkuArgs{...}
type SqlVmGroupImageSkuInput interface {
	pulumi.Input

	ToSqlVmGroupImageSkuOutput() SqlVmGroupImageSkuOutput
	ToSqlVmGroupImageSkuOutputWithContext(context.Context) SqlVmGroupImageSkuOutput
}

var sqlVmGroupImageSkuPtrType = reflect.TypeOf((**SqlVmGroupImageSku)(nil)).Elem()

type SqlVmGroupImageSkuPtrInput interface {
	pulumi.Input

	ToSqlVmGroupImageSkuPtrOutput() SqlVmGroupImageSkuPtrOutput
	ToSqlVmGroupImageSkuPtrOutputWithContext(context.Context) SqlVmGroupImageSkuPtrOutput
}

type sqlVmGroupImageSkuPtr string

func SqlVmGroupImageSkuPtr(v string) SqlVmGroupImageSkuPtrInput {
	return (*sqlVmGroupImageSkuPtr)(&v)
}

func (*sqlVmGroupImageSkuPtr) ElementType() reflect.Type {
	return sqlVmGroupImageSkuPtrType
}

func (in *sqlVmGroupImageSkuPtr) ToSqlVmGroupImageSkuPtrOutput() SqlVmGroupImageSkuPtrOutput {
	return pulumi.ToOutput(in).(SqlVmGroupImageSkuPtrOutput)
}

func (in *sqlVmGroupImageSkuPtr) ToSqlVmGroupImageSkuPtrOutputWithContext(ctx context.Context) SqlVmGroupImageSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SqlVmGroupImageSkuPtrOutput)
}

type SqlWorkloadType string

const (
	SqlWorkloadTypeGENERAL = SqlWorkloadType("GENERAL")
	SqlWorkloadTypeOLTP    = SqlWorkloadType("OLTP")
	SqlWorkloadTypeDW      = SqlWorkloadType("DW")
)

func (SqlWorkloadType) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlWorkloadType)(nil)).Elem()
}

func (e SqlWorkloadType) ToSqlWorkloadTypeOutput() SqlWorkloadTypeOutput {
	return pulumi.ToOutput(e).(SqlWorkloadTypeOutput)
}

func (e SqlWorkloadType) ToSqlWorkloadTypeOutputWithContext(ctx context.Context) SqlWorkloadTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SqlWorkloadTypeOutput)
}

func (e SqlWorkloadType) ToSqlWorkloadTypePtrOutput() SqlWorkloadTypePtrOutput {
	return e.ToSqlWorkloadTypePtrOutputWithContext(context.Background())
}

func (e SqlWorkloadType) ToSqlWorkloadTypePtrOutputWithContext(ctx context.Context) SqlWorkloadTypePtrOutput {
	return SqlWorkloadType(e).ToSqlWorkloadTypeOutputWithContext(ctx).ToSqlWorkloadTypePtrOutputWithContext(ctx)
}

func (e SqlWorkloadType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SqlWorkloadType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SqlWorkloadType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SqlWorkloadType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SqlWorkloadTypeOutput struct{ *pulumi.OutputState }

func (SqlWorkloadTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlWorkloadType)(nil)).Elem()
}

func (o SqlWorkloadTypeOutput) ToSqlWorkloadTypeOutput() SqlWorkloadTypeOutput {
	return o
}

func (o SqlWorkloadTypeOutput) ToSqlWorkloadTypeOutputWithContext(ctx context.Context) SqlWorkloadTypeOutput {
	return o
}

func (o SqlWorkloadTypeOutput) ToSqlWorkloadTypePtrOutput() SqlWorkloadTypePtrOutput {
	return o.ToSqlWorkloadTypePtrOutputWithContext(context.Background())
}

func (o SqlWorkloadTypeOutput) ToSqlWorkloadTypePtrOutputWithContext(ctx context.Context) SqlWorkloadTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlWorkloadType) *SqlWorkloadType {
		return &v
	}).(SqlWorkloadTypePtrOutput)
}

func (o SqlWorkloadTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SqlWorkloadTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SqlWorkloadType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SqlWorkloadTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SqlWorkloadTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SqlWorkloadType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SqlWorkloadTypePtrOutput struct{ *pulumi.OutputState }

func (SqlWorkloadTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlWorkloadType)(nil)).Elem()
}

func (o SqlWorkloadTypePtrOutput) ToSqlWorkloadTypePtrOutput() SqlWorkloadTypePtrOutput {
	return o
}

func (o SqlWorkloadTypePtrOutput) ToSqlWorkloadTypePtrOutputWithContext(ctx context.Context) SqlWorkloadTypePtrOutput {
	return o
}

func (o SqlWorkloadTypePtrOutput) Elem() SqlWorkloadTypeOutput {
	return o.ApplyT(func(v *SqlWorkloadType) SqlWorkloadType {
		if v != nil {
			return *v
		}
		var ret SqlWorkloadType
		return ret
	}).(SqlWorkloadTypeOutput)
}

func (o SqlWorkloadTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SqlWorkloadTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SqlWorkloadType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SqlWorkloadTypeInput is an input type that accepts SqlWorkloadTypeArgs and SqlWorkloadTypeOutput values.
// You can construct a concrete instance of `SqlWorkloadTypeInput` via:
//
//          SqlWorkloadTypeArgs{...}
type SqlWorkloadTypeInput interface {
	pulumi.Input

	ToSqlWorkloadTypeOutput() SqlWorkloadTypeOutput
	ToSqlWorkloadTypeOutputWithContext(context.Context) SqlWorkloadTypeOutput
}

var sqlWorkloadTypePtrType = reflect.TypeOf((**SqlWorkloadType)(nil)).Elem()

type SqlWorkloadTypePtrInput interface {
	pulumi.Input

	ToSqlWorkloadTypePtrOutput() SqlWorkloadTypePtrOutput
	ToSqlWorkloadTypePtrOutputWithContext(context.Context) SqlWorkloadTypePtrOutput
}

type sqlWorkloadTypePtr string

func SqlWorkloadTypePtr(v string) SqlWorkloadTypePtrInput {
	return (*sqlWorkloadTypePtr)(&v)
}

func (*sqlWorkloadTypePtr) ElementType() reflect.Type {
	return sqlWorkloadTypePtrType
}

func (in *sqlWorkloadTypePtr) ToSqlWorkloadTypePtrOutput() SqlWorkloadTypePtrOutput {
	return pulumi.ToOutput(in).(SqlWorkloadTypePtrOutput)
}

func (in *sqlWorkloadTypePtr) ToSqlWorkloadTypePtrOutputWithContext(ctx context.Context) SqlWorkloadTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SqlWorkloadTypePtrOutput)
}

type StorageWorkloadType string

const (
	StorageWorkloadTypeGENERAL = StorageWorkloadType("GENERAL")
	StorageWorkloadTypeOLTP    = StorageWorkloadType("OLTP")
	StorageWorkloadTypeDW      = StorageWorkloadType("DW")
)

func (StorageWorkloadType) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageWorkloadType)(nil)).Elem()
}

func (e StorageWorkloadType) ToStorageWorkloadTypeOutput() StorageWorkloadTypeOutput {
	return pulumi.ToOutput(e).(StorageWorkloadTypeOutput)
}

func (e StorageWorkloadType) ToStorageWorkloadTypeOutputWithContext(ctx context.Context) StorageWorkloadTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StorageWorkloadTypeOutput)
}

func (e StorageWorkloadType) ToStorageWorkloadTypePtrOutput() StorageWorkloadTypePtrOutput {
	return e.ToStorageWorkloadTypePtrOutputWithContext(context.Background())
}

func (e StorageWorkloadType) ToStorageWorkloadTypePtrOutputWithContext(ctx context.Context) StorageWorkloadTypePtrOutput {
	return StorageWorkloadType(e).ToStorageWorkloadTypeOutputWithContext(ctx).ToStorageWorkloadTypePtrOutputWithContext(ctx)
}

func (e StorageWorkloadType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StorageWorkloadType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StorageWorkloadType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StorageWorkloadType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StorageWorkloadTypeOutput struct{ *pulumi.OutputState }

func (StorageWorkloadTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageWorkloadType)(nil)).Elem()
}

func (o StorageWorkloadTypeOutput) ToStorageWorkloadTypeOutput() StorageWorkloadTypeOutput {
	return o
}

func (o StorageWorkloadTypeOutput) ToStorageWorkloadTypeOutputWithContext(ctx context.Context) StorageWorkloadTypeOutput {
	return o
}

func (o StorageWorkloadTypeOutput) ToStorageWorkloadTypePtrOutput() StorageWorkloadTypePtrOutput {
	return o.ToStorageWorkloadTypePtrOutputWithContext(context.Background())
}

func (o StorageWorkloadTypeOutput) ToStorageWorkloadTypePtrOutputWithContext(ctx context.Context) StorageWorkloadTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageWorkloadType) *StorageWorkloadType {
		return &v
	}).(StorageWorkloadTypePtrOutput)
}

func (o StorageWorkloadTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StorageWorkloadTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StorageWorkloadType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StorageWorkloadTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StorageWorkloadTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StorageWorkloadType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StorageWorkloadTypePtrOutput struct{ *pulumi.OutputState }

func (StorageWorkloadTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageWorkloadType)(nil)).Elem()
}

func (o StorageWorkloadTypePtrOutput) ToStorageWorkloadTypePtrOutput() StorageWorkloadTypePtrOutput {
	return o
}

func (o StorageWorkloadTypePtrOutput) ToStorageWorkloadTypePtrOutputWithContext(ctx context.Context) StorageWorkloadTypePtrOutput {
	return o
}

func (o StorageWorkloadTypePtrOutput) Elem() StorageWorkloadTypeOutput {
	return o.ApplyT(func(v *StorageWorkloadType) StorageWorkloadType {
		if v != nil {
			return *v
		}
		var ret StorageWorkloadType
		return ret
	}).(StorageWorkloadTypeOutput)
}

func (o StorageWorkloadTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StorageWorkloadTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StorageWorkloadType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// StorageWorkloadTypeInput is an input type that accepts StorageWorkloadTypeArgs and StorageWorkloadTypeOutput values.
// You can construct a concrete instance of `StorageWorkloadTypeInput` via:
//
//          StorageWorkloadTypeArgs{...}
type StorageWorkloadTypeInput interface {
	pulumi.Input

	ToStorageWorkloadTypeOutput() StorageWorkloadTypeOutput
	ToStorageWorkloadTypeOutputWithContext(context.Context) StorageWorkloadTypeOutput
}

var storageWorkloadTypePtrType = reflect.TypeOf((**StorageWorkloadType)(nil)).Elem()

type StorageWorkloadTypePtrInput interface {
	pulumi.Input

	ToStorageWorkloadTypePtrOutput() StorageWorkloadTypePtrOutput
	ToStorageWorkloadTypePtrOutputWithContext(context.Context) StorageWorkloadTypePtrOutput
}

type storageWorkloadTypePtr string

func StorageWorkloadTypePtr(v string) StorageWorkloadTypePtrInput {
	return (*storageWorkloadTypePtr)(&v)
}

func (*storageWorkloadTypePtr) ElementType() reflect.Type {
	return storageWorkloadTypePtrType
}

func (in *storageWorkloadTypePtr) ToStorageWorkloadTypePtrOutput() StorageWorkloadTypePtrOutput {
	return pulumi.ToOutput(in).(StorageWorkloadTypePtrOutput)
}

func (in *storageWorkloadTypePtr) ToStorageWorkloadTypePtrOutputWithContext(ctx context.Context) StorageWorkloadTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StorageWorkloadTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BackupScheduleTypeOutput{})
	pulumi.RegisterOutputType(BackupScheduleTypePtrOutput{})
	pulumi.RegisterOutputType(ConnectivityTypeOutput{})
	pulumi.RegisterOutputType(ConnectivityTypePtrOutput{})
	pulumi.RegisterOutputType(DayOfWeekOutput{})
	pulumi.RegisterOutputType(DayOfWeekPtrOutput{})
	pulumi.RegisterOutputType(DiskConfigurationTypeOutput{})
	pulumi.RegisterOutputType(DiskConfigurationTypePtrOutput{})
	pulumi.RegisterOutputType(FullBackupFrequencyTypeOutput{})
	pulumi.RegisterOutputType(FullBackupFrequencyTypePtrOutput{})
	pulumi.RegisterOutputType(IdentityTypeOutput{})
	pulumi.RegisterOutputType(IdentityTypePtrOutput{})
	pulumi.RegisterOutputType(SqlImageSkuOutput{})
	pulumi.RegisterOutputType(SqlImageSkuPtrOutput{})
	pulumi.RegisterOutputType(SqlManagementModeOutput{})
	pulumi.RegisterOutputType(SqlManagementModePtrOutput{})
	pulumi.RegisterOutputType(SqlServerLicenseTypeOutput{})
	pulumi.RegisterOutputType(SqlServerLicenseTypePtrOutput{})
	pulumi.RegisterOutputType(SqlVmGroupImageSkuOutput{})
	pulumi.RegisterOutputType(SqlVmGroupImageSkuPtrOutput{})
	pulumi.RegisterOutputType(SqlWorkloadTypeOutput{})
	pulumi.RegisterOutputType(SqlWorkloadTypePtrOutput{})
	pulumi.RegisterOutputType(StorageWorkloadTypeOutput{})
	pulumi.RegisterOutputType(StorageWorkloadTypePtrOutput{})
}
