// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220201preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A SQL Server availability group listener.
type AvailabilityGroupListener struct {
	pulumi.CustomResourceState

	// Availability Group configuration.
	AvailabilityGroupConfiguration AgConfigurationResponsePtrOutput `pulumi:"availabilityGroupConfiguration"`
	// Name of the availability group.
	AvailabilityGroupName pulumi.StringPtrOutput `pulumi:"availabilityGroupName"`
	// Create a default availability group if it does not exist.
	CreateDefaultAvailabilityGroupIfNotExist pulumi.BoolPtrOutput `pulumi:"createDefaultAvailabilityGroupIfNotExist"`
	// List of load balancer configurations for an availability group listener.
	LoadBalancerConfigurations LoadBalancerConfigurationResponseArrayOutput `pulumi:"loadBalancerConfigurations"`
	// List of multi subnet IP configurations for an AG listener.
	MultiSubnetIpConfigurations MultiSubnetIpConfigurationResponseArrayOutput `pulumi:"multiSubnetIpConfigurations"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Listener port.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// Provisioning state to track the async operation status.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAvailabilityGroupListener registers a new resource with the given unique name, arguments, and options.
func NewAvailabilityGroupListener(ctx *pulumi.Context,
	name string, args *AvailabilityGroupListenerArgs, opts ...pulumi.ResourceOption) (*AvailabilityGroupListener, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SqlVirtualMachineGroupName == nil {
		return nil, errors.New("invalid value for required argument 'SqlVirtualMachineGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:sqlvirtualmachine:AvailabilityGroupListener"),
		},
		{
			Type: pulumi.String("azure-native:sqlvirtualmachine/v20170301preview:AvailabilityGroupListener"),
		},
		{
			Type: pulumi.String("azure-native:sqlvirtualmachine/v20211101preview:AvailabilityGroupListener"),
		},
		{
			Type: pulumi.String("azure-native:sqlvirtualmachine/v20220201:AvailabilityGroupListener"),
		},
	})
	opts = append(opts, aliases)
	var resource AvailabilityGroupListener
	err := ctx.RegisterResource("azure-native:sqlvirtualmachine/v20220201preview:AvailabilityGroupListener", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAvailabilityGroupListener gets an existing AvailabilityGroupListener resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAvailabilityGroupListener(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AvailabilityGroupListenerState, opts ...pulumi.ResourceOption) (*AvailabilityGroupListener, error) {
	var resource AvailabilityGroupListener
	err := ctx.ReadResource("azure-native:sqlvirtualmachine/v20220201preview:AvailabilityGroupListener", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AvailabilityGroupListener resources.
type availabilityGroupListenerState struct {
}

type AvailabilityGroupListenerState struct {
}

func (AvailabilityGroupListenerState) ElementType() reflect.Type {
	return reflect.TypeOf((*availabilityGroupListenerState)(nil)).Elem()
}

type availabilityGroupListenerArgs struct {
	// Availability Group configuration.
	AvailabilityGroupConfiguration *AgConfiguration `pulumi:"availabilityGroupConfiguration"`
	// Name of the availability group listener.
	AvailabilityGroupListenerName *string `pulumi:"availabilityGroupListenerName"`
	// Name of the availability group.
	AvailabilityGroupName *string `pulumi:"availabilityGroupName"`
	// Create a default availability group if it does not exist.
	CreateDefaultAvailabilityGroupIfNotExist *bool `pulumi:"createDefaultAvailabilityGroupIfNotExist"`
	// List of load balancer configurations for an availability group listener.
	LoadBalancerConfigurations []LoadBalancerConfiguration `pulumi:"loadBalancerConfigurations"`
	// List of multi subnet IP configurations for an AG listener.
	MultiSubnetIpConfigurations []MultiSubnetIpConfiguration `pulumi:"multiSubnetIpConfigurations"`
	// Listener port.
	Port *int `pulumi:"port"`
	// Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of the SQL virtual machine group.
	SqlVirtualMachineGroupName string `pulumi:"sqlVirtualMachineGroupName"`
}

// The set of arguments for constructing a AvailabilityGroupListener resource.
type AvailabilityGroupListenerArgs struct {
	// Availability Group configuration.
	AvailabilityGroupConfiguration AgConfigurationPtrInput
	// Name of the availability group listener.
	AvailabilityGroupListenerName pulumi.StringPtrInput
	// Name of the availability group.
	AvailabilityGroupName pulumi.StringPtrInput
	// Create a default availability group if it does not exist.
	CreateDefaultAvailabilityGroupIfNotExist pulumi.BoolPtrInput
	// List of load balancer configurations for an availability group listener.
	LoadBalancerConfigurations LoadBalancerConfigurationArrayInput
	// List of multi subnet IP configurations for an AG listener.
	MultiSubnetIpConfigurations MultiSubnetIpConfigurationArrayInput
	// Listener port.
	Port pulumi.IntPtrInput
	// Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput
	// Name of the SQL virtual machine group.
	SqlVirtualMachineGroupName pulumi.StringInput
}

func (AvailabilityGroupListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*availabilityGroupListenerArgs)(nil)).Elem()
}

type AvailabilityGroupListenerInput interface {
	pulumi.Input

	ToAvailabilityGroupListenerOutput() AvailabilityGroupListenerOutput
	ToAvailabilityGroupListenerOutputWithContext(ctx context.Context) AvailabilityGroupListenerOutput
}

func (*AvailabilityGroupListener) ElementType() reflect.Type {
	return reflect.TypeOf((**AvailabilityGroupListener)(nil)).Elem()
}

func (i *AvailabilityGroupListener) ToAvailabilityGroupListenerOutput() AvailabilityGroupListenerOutput {
	return i.ToAvailabilityGroupListenerOutputWithContext(context.Background())
}

func (i *AvailabilityGroupListener) ToAvailabilityGroupListenerOutputWithContext(ctx context.Context) AvailabilityGroupListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailabilityGroupListenerOutput)
}

type AvailabilityGroupListenerOutput struct{ *pulumi.OutputState }

func (AvailabilityGroupListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AvailabilityGroupListener)(nil)).Elem()
}

func (o AvailabilityGroupListenerOutput) ToAvailabilityGroupListenerOutput() AvailabilityGroupListenerOutput {
	return o
}

func (o AvailabilityGroupListenerOutput) ToAvailabilityGroupListenerOutputWithContext(ctx context.Context) AvailabilityGroupListenerOutput {
	return o
}

// Availability Group configuration.
func (o AvailabilityGroupListenerOutput) AvailabilityGroupConfiguration() AgConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *AvailabilityGroupListener) AgConfigurationResponsePtrOutput {
		return v.AvailabilityGroupConfiguration
	}).(AgConfigurationResponsePtrOutput)
}

// Name of the availability group.
func (o AvailabilityGroupListenerOutput) AvailabilityGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvailabilityGroupListener) pulumi.StringPtrOutput { return v.AvailabilityGroupName }).(pulumi.StringPtrOutput)
}

// Create a default availability group if it does not exist.
func (o AvailabilityGroupListenerOutput) CreateDefaultAvailabilityGroupIfNotExist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AvailabilityGroupListener) pulumi.BoolPtrOutput {
		return v.CreateDefaultAvailabilityGroupIfNotExist
	}).(pulumi.BoolPtrOutput)
}

// List of load balancer configurations for an availability group listener.
func (o AvailabilityGroupListenerOutput) LoadBalancerConfigurations() LoadBalancerConfigurationResponseArrayOutput {
	return o.ApplyT(func(v *AvailabilityGroupListener) LoadBalancerConfigurationResponseArrayOutput {
		return v.LoadBalancerConfigurations
	}).(LoadBalancerConfigurationResponseArrayOutput)
}

// List of multi subnet IP configurations for an AG listener.
func (o AvailabilityGroupListenerOutput) MultiSubnetIpConfigurations() MultiSubnetIpConfigurationResponseArrayOutput {
	return o.ApplyT(func(v *AvailabilityGroupListener) MultiSubnetIpConfigurationResponseArrayOutput {
		return v.MultiSubnetIpConfigurations
	}).(MultiSubnetIpConfigurationResponseArrayOutput)
}

// Resource name.
func (o AvailabilityGroupListenerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AvailabilityGroupListener) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Listener port.
func (o AvailabilityGroupListenerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailabilityGroupListener) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// Provisioning state to track the async operation status.
func (o AvailabilityGroupListenerOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *AvailabilityGroupListener) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o AvailabilityGroupListenerOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *AvailabilityGroupListener) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource type.
func (o AvailabilityGroupListenerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AvailabilityGroupListener) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AvailabilityGroupListenerOutput{})
}
