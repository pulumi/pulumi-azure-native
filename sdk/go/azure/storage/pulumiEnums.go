// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The access tier of a storage blob.
type BlobAccessTier string

const (
	// Optimized for storing data that is accessed frequently.
	BlobAccessTierHot = BlobAccessTier("Hot")
	// Optimized for storing data that is infrequently accessed and stored for at least 30 days.
	BlobAccessTierCool = BlobAccessTier("Cool")
	// Optimized for storing data that is rarely accessed and stored for at least 180 days with flexible latency requirements, on the order of hours.
	BlobAccessTierArchive = BlobAccessTier("Archive")
)

func (BlobAccessTier) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobAccessTier)(nil)).Elem()
}

func (e BlobAccessTier) ToBlobAccessTierOutput() BlobAccessTierOutput {
	return pulumi.ToOutput(e).(BlobAccessTierOutput)
}

func (e BlobAccessTier) ToBlobAccessTierOutputWithContext(ctx context.Context) BlobAccessTierOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BlobAccessTierOutput)
}

func (e BlobAccessTier) ToBlobAccessTierPtrOutput() BlobAccessTierPtrOutput {
	return e.ToBlobAccessTierPtrOutputWithContext(context.Background())
}

func (e BlobAccessTier) ToBlobAccessTierPtrOutputWithContext(ctx context.Context) BlobAccessTierPtrOutput {
	return BlobAccessTier(e).ToBlobAccessTierOutputWithContext(ctx).ToBlobAccessTierPtrOutputWithContext(ctx)
}

func (e BlobAccessTier) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BlobAccessTier) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BlobAccessTier) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BlobAccessTier) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BlobAccessTierOutput struct{ *pulumi.OutputState }

func (BlobAccessTierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobAccessTier)(nil)).Elem()
}

func (o BlobAccessTierOutput) ToBlobAccessTierOutput() BlobAccessTierOutput {
	return o
}

func (o BlobAccessTierOutput) ToBlobAccessTierOutputWithContext(ctx context.Context) BlobAccessTierOutput {
	return o
}

func (o BlobAccessTierOutput) ToBlobAccessTierPtrOutput() BlobAccessTierPtrOutput {
	return o.ToBlobAccessTierPtrOutputWithContext(context.Background())
}

func (o BlobAccessTierOutput) ToBlobAccessTierPtrOutputWithContext(ctx context.Context) BlobAccessTierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BlobAccessTier) *BlobAccessTier {
		return &v
	}).(BlobAccessTierPtrOutput)
}

func (o BlobAccessTierOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BlobAccessTierOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BlobAccessTier) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BlobAccessTierOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BlobAccessTierOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BlobAccessTier) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BlobAccessTierPtrOutput struct{ *pulumi.OutputState }

func (BlobAccessTierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobAccessTier)(nil)).Elem()
}

func (o BlobAccessTierPtrOutput) ToBlobAccessTierPtrOutput() BlobAccessTierPtrOutput {
	return o
}

func (o BlobAccessTierPtrOutput) ToBlobAccessTierPtrOutputWithContext(ctx context.Context) BlobAccessTierPtrOutput {
	return o
}

func (o BlobAccessTierPtrOutput) Elem() BlobAccessTierOutput {
	return o.ApplyT(func(v *BlobAccessTier) BlobAccessTier {
		if v != nil {
			return *v
		}
		var ret BlobAccessTier
		return ret
	}).(BlobAccessTierOutput)
}

func (o BlobAccessTierPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BlobAccessTierPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BlobAccessTier) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BlobAccessTierInput is an input type that accepts BlobAccessTierArgs and BlobAccessTierOutput values.
// You can construct a concrete instance of `BlobAccessTierInput` via:
//
//          BlobAccessTierArgs{...}
type BlobAccessTierInput interface {
	pulumi.Input

	ToBlobAccessTierOutput() BlobAccessTierOutput
	ToBlobAccessTierOutputWithContext(context.Context) BlobAccessTierOutput
}

var blobAccessTierPtrType = reflect.TypeOf((**BlobAccessTier)(nil)).Elem()

type BlobAccessTierPtrInput interface {
	pulumi.Input

	ToBlobAccessTierPtrOutput() BlobAccessTierPtrOutput
	ToBlobAccessTierPtrOutputWithContext(context.Context) BlobAccessTierPtrOutput
}

type blobAccessTierPtr string

func BlobAccessTierPtr(v string) BlobAccessTierPtrInput {
	return (*blobAccessTierPtr)(&v)
}

func (*blobAccessTierPtr) ElementType() reflect.Type {
	return blobAccessTierPtrType
}

func (in *blobAccessTierPtr) ToBlobAccessTierPtrOutput() BlobAccessTierPtrOutput {
	return pulumi.ToOutput(in).(BlobAccessTierPtrOutput)
}

func (in *blobAccessTierPtr) ToBlobAccessTierPtrOutputWithContext(ctx context.Context) BlobAccessTierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BlobAccessTierPtrOutput)
}

// The type of a storage blob to be created.
type BlobType string

const (
	// Block blobs store text and binary data. Block blobs are made up of blocks of data that can be managed individually.
	BlobTypeBlock = BlobType("Block")
	// Append blobs are made up of blocks like block blobs, but are optimized for append operations.
	BlobTypeAppend = BlobType("Append")
)

func (BlobType) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobType)(nil)).Elem()
}

func (e BlobType) ToBlobTypeOutput() BlobTypeOutput {
	return pulumi.ToOutput(e).(BlobTypeOutput)
}

func (e BlobType) ToBlobTypeOutputWithContext(ctx context.Context) BlobTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BlobTypeOutput)
}

func (e BlobType) ToBlobTypePtrOutput() BlobTypePtrOutput {
	return e.ToBlobTypePtrOutputWithContext(context.Background())
}

func (e BlobType) ToBlobTypePtrOutputWithContext(ctx context.Context) BlobTypePtrOutput {
	return BlobType(e).ToBlobTypeOutputWithContext(ctx).ToBlobTypePtrOutputWithContext(ctx)
}

func (e BlobType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BlobType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BlobType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BlobType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BlobTypeOutput struct{ *pulumi.OutputState }

func (BlobTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobType)(nil)).Elem()
}

func (o BlobTypeOutput) ToBlobTypeOutput() BlobTypeOutput {
	return o
}

func (o BlobTypeOutput) ToBlobTypeOutputWithContext(ctx context.Context) BlobTypeOutput {
	return o
}

func (o BlobTypeOutput) ToBlobTypePtrOutput() BlobTypePtrOutput {
	return o.ToBlobTypePtrOutputWithContext(context.Background())
}

func (o BlobTypeOutput) ToBlobTypePtrOutputWithContext(ctx context.Context) BlobTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BlobType) *BlobType {
		return &v
	}).(BlobTypePtrOutput)
}

func (o BlobTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BlobTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BlobType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BlobTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BlobTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BlobType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BlobTypePtrOutput struct{ *pulumi.OutputState }

func (BlobTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobType)(nil)).Elem()
}

func (o BlobTypePtrOutput) ToBlobTypePtrOutput() BlobTypePtrOutput {
	return o
}

func (o BlobTypePtrOutput) ToBlobTypePtrOutputWithContext(ctx context.Context) BlobTypePtrOutput {
	return o
}

func (o BlobTypePtrOutput) Elem() BlobTypeOutput {
	return o.ApplyT(func(v *BlobType) BlobType {
		if v != nil {
			return *v
		}
		var ret BlobType
		return ret
	}).(BlobTypeOutput)
}

func (o BlobTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BlobTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BlobType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BlobTypeInput is an input type that accepts BlobTypeArgs and BlobTypeOutput values.
// You can construct a concrete instance of `BlobTypeInput` via:
//
//          BlobTypeArgs{...}
type BlobTypeInput interface {
	pulumi.Input

	ToBlobTypeOutput() BlobTypeOutput
	ToBlobTypeOutputWithContext(context.Context) BlobTypeOutput
}

var blobTypePtrType = reflect.TypeOf((**BlobType)(nil)).Elem()

type BlobTypePtrInput interface {
	pulumi.Input

	ToBlobTypePtrOutput() BlobTypePtrOutput
	ToBlobTypePtrOutputWithContext(context.Context) BlobTypePtrOutput
}

type blobTypePtr string

func BlobTypePtr(v string) BlobTypePtrInput {
	return (*blobTypePtr)(&v)
}

func (*blobTypePtr) ElementType() reflect.Type {
	return blobTypePtrType
}

func (in *blobTypePtr) ToBlobTypePtrOutput() BlobTypePtrOutput {
	return pulumi.ToOutput(in).(BlobTypePtrOutput)
}

func (in *blobTypePtr) ToBlobTypePtrOutputWithContext(ctx context.Context) BlobTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BlobTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BlobAccessTierOutput{})
	pulumi.RegisterOutputType(BlobAccessTierPtrOutput{})
	pulumi.RegisterOutputType(BlobTypeOutput{})
	pulumi.RegisterOutputType(BlobTypePtrOutput{})
}
