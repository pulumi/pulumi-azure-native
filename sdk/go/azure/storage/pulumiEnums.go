// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Required for storage accounts where kind = BlobStorage. The access tier used for billing.
type AccessTier string

const (
	AccessTierHot  = AccessTier("Hot")
	AccessTierCool = AccessTier("Cool")
)

func (AccessTier) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessTier)(nil)).Elem()
}

func (e AccessTier) ToAccessTierOutput() AccessTierOutput {
	return pulumi.ToOutput(e).(AccessTierOutput)
}

func (e AccessTier) ToAccessTierOutputWithContext(ctx context.Context) AccessTierOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AccessTierOutput)
}

func (e AccessTier) ToAccessTierPtrOutput() AccessTierPtrOutput {
	return e.ToAccessTierPtrOutputWithContext(context.Background())
}

func (e AccessTier) ToAccessTierPtrOutputWithContext(ctx context.Context) AccessTierPtrOutput {
	return AccessTier(e).ToAccessTierOutputWithContext(ctx).ToAccessTierPtrOutputWithContext(ctx)
}

func (e AccessTier) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccessTier) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccessTier) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AccessTier) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AccessTierOutput struct{ *pulumi.OutputState }

func (AccessTierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessTier)(nil)).Elem()
}

func (o AccessTierOutput) ToAccessTierOutput() AccessTierOutput {
	return o
}

func (o AccessTierOutput) ToAccessTierOutputWithContext(ctx context.Context) AccessTierOutput {
	return o
}

func (o AccessTierOutput) ToAccessTierPtrOutput() AccessTierPtrOutput {
	return o.ToAccessTierPtrOutputWithContext(context.Background())
}

func (o AccessTierOutput) ToAccessTierPtrOutputWithContext(ctx context.Context) AccessTierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessTier) *AccessTier {
		return &v
	}).(AccessTierPtrOutput)
}

func (o AccessTierOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AccessTierOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccessTier) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AccessTierOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccessTierOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccessTier) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AccessTierPtrOutput struct{ *pulumi.OutputState }

func (AccessTierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessTier)(nil)).Elem()
}

func (o AccessTierPtrOutput) ToAccessTierPtrOutput() AccessTierPtrOutput {
	return o
}

func (o AccessTierPtrOutput) ToAccessTierPtrOutputWithContext(ctx context.Context) AccessTierPtrOutput {
	return o
}

func (o AccessTierPtrOutput) Elem() AccessTierOutput {
	return o.ApplyT(func(v *AccessTier) AccessTier {
		if v != nil {
			return *v
		}
		var ret AccessTier
		return ret
	}).(AccessTierOutput)
}

func (o AccessTierPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccessTierPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AccessTier) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AccessTierInput is an input type that accepts AccessTierArgs and AccessTierOutput values.
// You can construct a concrete instance of `AccessTierInput` via:
//
//	AccessTierArgs{...}
type AccessTierInput interface {
	pulumi.Input

	ToAccessTierOutput() AccessTierOutput
	ToAccessTierOutputWithContext(context.Context) AccessTierOutput
}

var accessTierPtrType = reflect.TypeOf((**AccessTier)(nil)).Elem()

type AccessTierPtrInput interface {
	pulumi.Input

	ToAccessTierPtrOutput() AccessTierPtrOutput
	ToAccessTierPtrOutputWithContext(context.Context) AccessTierPtrOutput
}

type accessTierPtr string

func AccessTierPtr(v string) AccessTierPtrInput {
	return (*accessTierPtr)(&v)
}

func (*accessTierPtr) ElementType() reflect.Type {
	return accessTierPtrType
}

func (in *accessTierPtr) ToAccessTierPtrOutput() AccessTierPtrOutput {
	return pulumi.ToOutput(in).(AccessTierPtrOutput)
}

func (in *accessTierPtr) ToAccessTierPtrOutputWithContext(ctx context.Context) AccessTierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AccessTierPtrOutput)
}

// The action of virtual network rule.
type Action string

const (
	ActionAllow = Action("Allow")
)

func (Action) ElementType() reflect.Type {
	return reflect.TypeOf((*Action)(nil)).Elem()
}

func (e Action) ToActionOutput() ActionOutput {
	return pulumi.ToOutput(e).(ActionOutput)
}

func (e Action) ToActionOutputWithContext(ctx context.Context) ActionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ActionOutput)
}

func (e Action) ToActionPtrOutput() ActionPtrOutput {
	return e.ToActionPtrOutputWithContext(context.Background())
}

func (e Action) ToActionPtrOutputWithContext(ctx context.Context) ActionPtrOutput {
	return Action(e).ToActionOutputWithContext(ctx).ToActionPtrOutputWithContext(ctx)
}

func (e Action) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Action) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Action) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Action) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ActionOutput struct{ *pulumi.OutputState }

func (ActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Action)(nil)).Elem()
}

func (o ActionOutput) ToActionOutput() ActionOutput {
	return o
}

func (o ActionOutput) ToActionOutputWithContext(ctx context.Context) ActionOutput {
	return o
}

func (o ActionOutput) ToActionPtrOutput() ActionPtrOutput {
	return o.ToActionPtrOutputWithContext(context.Background())
}

func (o ActionOutput) ToActionPtrOutputWithContext(ctx context.Context) ActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Action) *Action {
		return &v
	}).(ActionPtrOutput)
}

func (o ActionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ActionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Action) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ActionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ActionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Action) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ActionPtrOutput struct{ *pulumi.OutputState }

func (ActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Action)(nil)).Elem()
}

func (o ActionPtrOutput) ToActionPtrOutput() ActionPtrOutput {
	return o
}

func (o ActionPtrOutput) ToActionPtrOutputWithContext(ctx context.Context) ActionPtrOutput {
	return o
}

func (o ActionPtrOutput) Elem() ActionOutput {
	return o.ApplyT(func(v *Action) Action {
		if v != nil {
			return *v
		}
		var ret Action
		return ret
	}).(ActionOutput)
}

func (o ActionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ActionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Action) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ActionInput is an input type that accepts ActionArgs and ActionOutput values.
// You can construct a concrete instance of `ActionInput` via:
//
//	ActionArgs{...}
type ActionInput interface {
	pulumi.Input

	ToActionOutput() ActionOutput
	ToActionOutputWithContext(context.Context) ActionOutput
}

var actionPtrType = reflect.TypeOf((**Action)(nil)).Elem()

type ActionPtrInput interface {
	pulumi.Input

	ToActionPtrOutput() ActionPtrOutput
	ToActionPtrOutputWithContext(context.Context) ActionPtrOutput
}

type actionPtr string

func ActionPtr(v string) ActionPtrInput {
	return (*actionPtr)(&v)
}

func (*actionPtr) ElementType() reflect.Type {
	return actionPtrType
}

func (in *actionPtr) ToActionPtrOutput() ActionPtrOutput {
	return pulumi.ToOutput(in).(ActionPtrOutput)
}

func (in *actionPtr) ToActionPtrOutputWithContext(ctx context.Context) ActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ActionPtrOutput)
}

// The access tier of a storage blob.
type BlobAccessTier string

const (
	// Optimized for storing data that is accessed frequently.
	BlobAccessTierHot = BlobAccessTier("Hot")
	// Optimized for storing data that is infrequently accessed and stored for at least 30 days.
	BlobAccessTierCool = BlobAccessTier("Cool")
	// Optimized for storing data that is rarely accessed and stored for at least 180 days with flexible latency requirements, on the order of hours.
	BlobAccessTierArchive = BlobAccessTier("Archive")
)

func (BlobAccessTier) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobAccessTier)(nil)).Elem()
}

func (e BlobAccessTier) ToBlobAccessTierOutput() BlobAccessTierOutput {
	return pulumi.ToOutput(e).(BlobAccessTierOutput)
}

func (e BlobAccessTier) ToBlobAccessTierOutputWithContext(ctx context.Context) BlobAccessTierOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BlobAccessTierOutput)
}

func (e BlobAccessTier) ToBlobAccessTierPtrOutput() BlobAccessTierPtrOutput {
	return e.ToBlobAccessTierPtrOutputWithContext(context.Background())
}

func (e BlobAccessTier) ToBlobAccessTierPtrOutputWithContext(ctx context.Context) BlobAccessTierPtrOutput {
	return BlobAccessTier(e).ToBlobAccessTierOutputWithContext(ctx).ToBlobAccessTierPtrOutputWithContext(ctx)
}

func (e BlobAccessTier) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BlobAccessTier) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BlobAccessTier) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BlobAccessTier) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BlobAccessTierOutput struct{ *pulumi.OutputState }

func (BlobAccessTierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobAccessTier)(nil)).Elem()
}

func (o BlobAccessTierOutput) ToBlobAccessTierOutput() BlobAccessTierOutput {
	return o
}

func (o BlobAccessTierOutput) ToBlobAccessTierOutputWithContext(ctx context.Context) BlobAccessTierOutput {
	return o
}

func (o BlobAccessTierOutput) ToBlobAccessTierPtrOutput() BlobAccessTierPtrOutput {
	return o.ToBlobAccessTierPtrOutputWithContext(context.Background())
}

func (o BlobAccessTierOutput) ToBlobAccessTierPtrOutputWithContext(ctx context.Context) BlobAccessTierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BlobAccessTier) *BlobAccessTier {
		return &v
	}).(BlobAccessTierPtrOutput)
}

func (o BlobAccessTierOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BlobAccessTierOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BlobAccessTier) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BlobAccessTierOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BlobAccessTierOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BlobAccessTier) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BlobAccessTierPtrOutput struct{ *pulumi.OutputState }

func (BlobAccessTierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobAccessTier)(nil)).Elem()
}

func (o BlobAccessTierPtrOutput) ToBlobAccessTierPtrOutput() BlobAccessTierPtrOutput {
	return o
}

func (o BlobAccessTierPtrOutput) ToBlobAccessTierPtrOutputWithContext(ctx context.Context) BlobAccessTierPtrOutput {
	return o
}

func (o BlobAccessTierPtrOutput) Elem() BlobAccessTierOutput {
	return o.ApplyT(func(v *BlobAccessTier) BlobAccessTier {
		if v != nil {
			return *v
		}
		var ret BlobAccessTier
		return ret
	}).(BlobAccessTierOutput)
}

func (o BlobAccessTierPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BlobAccessTierPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BlobAccessTier) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BlobAccessTierInput is an input type that accepts BlobAccessTierArgs and BlobAccessTierOutput values.
// You can construct a concrete instance of `BlobAccessTierInput` via:
//
//	BlobAccessTierArgs{...}
type BlobAccessTierInput interface {
	pulumi.Input

	ToBlobAccessTierOutput() BlobAccessTierOutput
	ToBlobAccessTierOutputWithContext(context.Context) BlobAccessTierOutput
}

var blobAccessTierPtrType = reflect.TypeOf((**BlobAccessTier)(nil)).Elem()

type BlobAccessTierPtrInput interface {
	pulumi.Input

	ToBlobAccessTierPtrOutput() BlobAccessTierPtrOutput
	ToBlobAccessTierPtrOutputWithContext(context.Context) BlobAccessTierPtrOutput
}

type blobAccessTierPtr string

func BlobAccessTierPtr(v string) BlobAccessTierPtrInput {
	return (*blobAccessTierPtr)(&v)
}

func (*blobAccessTierPtr) ElementType() reflect.Type {
	return blobAccessTierPtrType
}

func (in *blobAccessTierPtr) ToBlobAccessTierPtrOutput() BlobAccessTierPtrOutput {
	return pulumi.ToOutput(in).(BlobAccessTierPtrOutput)
}

func (in *blobAccessTierPtr) ToBlobAccessTierPtrOutputWithContext(ctx context.Context) BlobAccessTierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BlobAccessTierPtrOutput)
}

// The type of a storage blob to be created.
type BlobType string

const (
	// Block blobs store text and binary data. Block blobs are made up of blocks of data that can be managed individually.
	BlobTypeBlock = BlobType("Block")
	// Append blobs are made up of blocks like block blobs, but are optimized for append operations.
	BlobTypeAppend = BlobType("Append")
)

func (BlobType) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobType)(nil)).Elem()
}

func (e BlobType) ToBlobTypeOutput() BlobTypeOutput {
	return pulumi.ToOutput(e).(BlobTypeOutput)
}

func (e BlobType) ToBlobTypeOutputWithContext(ctx context.Context) BlobTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BlobTypeOutput)
}

func (e BlobType) ToBlobTypePtrOutput() BlobTypePtrOutput {
	return e.ToBlobTypePtrOutputWithContext(context.Background())
}

func (e BlobType) ToBlobTypePtrOutputWithContext(ctx context.Context) BlobTypePtrOutput {
	return BlobType(e).ToBlobTypeOutputWithContext(ctx).ToBlobTypePtrOutputWithContext(ctx)
}

func (e BlobType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BlobType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BlobType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BlobType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BlobTypeOutput struct{ *pulumi.OutputState }

func (BlobTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobType)(nil)).Elem()
}

func (o BlobTypeOutput) ToBlobTypeOutput() BlobTypeOutput {
	return o
}

func (o BlobTypeOutput) ToBlobTypeOutputWithContext(ctx context.Context) BlobTypeOutput {
	return o
}

func (o BlobTypeOutput) ToBlobTypePtrOutput() BlobTypePtrOutput {
	return o.ToBlobTypePtrOutputWithContext(context.Background())
}

func (o BlobTypeOutput) ToBlobTypePtrOutputWithContext(ctx context.Context) BlobTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BlobType) *BlobType {
		return &v
	}).(BlobTypePtrOutput)
}

func (o BlobTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BlobTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BlobType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BlobTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BlobTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BlobType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BlobTypePtrOutput struct{ *pulumi.OutputState }

func (BlobTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobType)(nil)).Elem()
}

func (o BlobTypePtrOutput) ToBlobTypePtrOutput() BlobTypePtrOutput {
	return o
}

func (o BlobTypePtrOutput) ToBlobTypePtrOutputWithContext(ctx context.Context) BlobTypePtrOutput {
	return o
}

func (o BlobTypePtrOutput) Elem() BlobTypeOutput {
	return o.ApplyT(func(v *BlobType) BlobType {
		if v != nil {
			return *v
		}
		var ret BlobType
		return ret
	}).(BlobTypeOutput)
}

func (o BlobTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BlobTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BlobType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BlobTypeInput is an input type that accepts BlobTypeArgs and BlobTypeOutput values.
// You can construct a concrete instance of `BlobTypeInput` via:
//
//	BlobTypeArgs{...}
type BlobTypeInput interface {
	pulumi.Input

	ToBlobTypeOutput() BlobTypeOutput
	ToBlobTypeOutputWithContext(context.Context) BlobTypeOutput
}

var blobTypePtrType = reflect.TypeOf((**BlobType)(nil)).Elem()

type BlobTypePtrInput interface {
	pulumi.Input

	ToBlobTypePtrOutput() BlobTypePtrOutput
	ToBlobTypePtrOutputWithContext(context.Context) BlobTypePtrOutput
}

type blobTypePtr string

func BlobTypePtr(v string) BlobTypePtrInput {
	return (*blobTypePtr)(&v)
}

func (*blobTypePtr) ElementType() reflect.Type {
	return blobTypePtrType
}

func (in *blobTypePtr) ToBlobTypePtrOutput() BlobTypePtrOutput {
	return pulumi.ToOutput(in).(BlobTypePtrOutput)
}

func (in *blobTypePtr) ToBlobTypePtrOutputWithContext(ctx context.Context) BlobTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BlobTypePtrOutput)
}

// Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics.
type Bypass string

const (
	BypassNone          = Bypass("None")
	BypassLogging       = Bypass("Logging")
	BypassMetrics       = Bypass("Metrics")
	BypassAzureServices = Bypass("AzureServices")
)

// Specifies the default action of allow or deny when no other rules match.
type DefaultAction string

const (
	DefaultActionAllow = DefaultAction("Allow")
	DefaultActionDeny  = DefaultAction("Deny")
)

func (DefaultAction) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultAction)(nil)).Elem()
}

func (e DefaultAction) ToDefaultActionOutput() DefaultActionOutput {
	return pulumi.ToOutput(e).(DefaultActionOutput)
}

func (e DefaultAction) ToDefaultActionOutputWithContext(ctx context.Context) DefaultActionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DefaultActionOutput)
}

func (e DefaultAction) ToDefaultActionPtrOutput() DefaultActionPtrOutput {
	return e.ToDefaultActionPtrOutputWithContext(context.Background())
}

func (e DefaultAction) ToDefaultActionPtrOutputWithContext(ctx context.Context) DefaultActionPtrOutput {
	return DefaultAction(e).ToDefaultActionOutputWithContext(ctx).ToDefaultActionPtrOutputWithContext(ctx)
}

func (e DefaultAction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DefaultAction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DefaultAction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DefaultAction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DefaultActionOutput struct{ *pulumi.OutputState }

func (DefaultActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultAction)(nil)).Elem()
}

func (o DefaultActionOutput) ToDefaultActionOutput() DefaultActionOutput {
	return o
}

func (o DefaultActionOutput) ToDefaultActionOutputWithContext(ctx context.Context) DefaultActionOutput {
	return o
}

func (o DefaultActionOutput) ToDefaultActionPtrOutput() DefaultActionPtrOutput {
	return o.ToDefaultActionPtrOutputWithContext(context.Background())
}

func (o DefaultActionOutput) ToDefaultActionPtrOutputWithContext(ctx context.Context) DefaultActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DefaultAction) *DefaultAction {
		return &v
	}).(DefaultActionPtrOutput)
}

func (o DefaultActionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DefaultActionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DefaultAction) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DefaultActionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DefaultActionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DefaultAction) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DefaultActionPtrOutput struct{ *pulumi.OutputState }

func (DefaultActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultAction)(nil)).Elem()
}

func (o DefaultActionPtrOutput) ToDefaultActionPtrOutput() DefaultActionPtrOutput {
	return o
}

func (o DefaultActionPtrOutput) ToDefaultActionPtrOutputWithContext(ctx context.Context) DefaultActionPtrOutput {
	return o
}

func (o DefaultActionPtrOutput) Elem() DefaultActionOutput {
	return o.ApplyT(func(v *DefaultAction) DefaultAction {
		if v != nil {
			return *v
		}
		var ret DefaultAction
		return ret
	}).(DefaultActionOutput)
}

func (o DefaultActionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DefaultActionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DefaultAction) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DefaultActionInput is an input type that accepts DefaultActionArgs and DefaultActionOutput values.
// You can construct a concrete instance of `DefaultActionInput` via:
//
//	DefaultActionArgs{...}
type DefaultActionInput interface {
	pulumi.Input

	ToDefaultActionOutput() DefaultActionOutput
	ToDefaultActionOutputWithContext(context.Context) DefaultActionOutput
}

var defaultActionPtrType = reflect.TypeOf((**DefaultAction)(nil)).Elem()

type DefaultActionPtrInput interface {
	pulumi.Input

	ToDefaultActionPtrOutput() DefaultActionPtrOutput
	ToDefaultActionPtrOutputWithContext(context.Context) DefaultActionPtrOutput
}

type defaultActionPtr string

func DefaultActionPtr(v string) DefaultActionPtrInput {
	return (*defaultActionPtr)(&v)
}

func (*defaultActionPtr) ElementType() reflect.Type {
	return defaultActionPtrType
}

func (in *defaultActionPtr) ToDefaultActionPtrOutput() DefaultActionPtrOutput {
	return pulumi.ToOutput(in).(DefaultActionPtrOutput)
}

func (in *defaultActionPtr) ToDefaultActionPtrOutputWithContext(ctx context.Context) DefaultActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DefaultActionPtrOutput)
}

// Indicates the directory service used.
type DirectoryServiceOptions string

const (
	DirectoryServiceOptionsNone  = DirectoryServiceOptions("None")
	DirectoryServiceOptionsAADDS = DirectoryServiceOptions("AADDS")
	DirectoryServiceOptionsAD    = DirectoryServiceOptions("AD")
)

// The authentication protocol that is used for the file share. Can only be specified when creating a share.
type EnabledProtocols string

const (
	EnabledProtocolsSMB = EnabledProtocols("SMB")
	EnabledProtocolsNFS = EnabledProtocols("NFS")
)

// The provider for the encryption scope. Possible values (case-insensitive):  Microsoft.Storage, Microsoft.KeyVault.
type EncryptionScopeSource string

const (
	EncryptionScopeSource_Microsoft_Storage  = EncryptionScopeSource("Microsoft.Storage")
	EncryptionScopeSource_Microsoft_KeyVault = EncryptionScopeSource("Microsoft.KeyVault")
)

// The state of the encryption scope. Possible values (case-insensitive):  Enabled, Disabled.
type EncryptionScopeStateEnum string

const (
	EncryptionScopeStateEnumEnabled  = EncryptionScopeStateEnum("Enabled")
	EncryptionScopeStateEnumDisabled = EncryptionScopeStateEnum("Disabled")
)

// The SAS expiration action. Can only be Log.
type ExpirationAction string

const (
	ExpirationActionLog = ExpirationAction("Log")
)

// The type of the extended location.
type ExtendedLocationTypes string

const (
	ExtendedLocationTypesEdgeZone = ExtendedLocationTypes("EdgeZone")
)

// The protocol permitted for a request made with the account SAS.
type HttpProtocol string

const (
	HttpProtocol_Https_http = HttpProtocol("https,http")
	HttpProtocolHttps       = HttpProtocol("https")
)

func (HttpProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpProtocol)(nil)).Elem()
}

func (e HttpProtocol) ToHttpProtocolOutput() HttpProtocolOutput {
	return pulumi.ToOutput(e).(HttpProtocolOutput)
}

func (e HttpProtocol) ToHttpProtocolOutputWithContext(ctx context.Context) HttpProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(HttpProtocolOutput)
}

func (e HttpProtocol) ToHttpProtocolPtrOutput() HttpProtocolPtrOutput {
	return e.ToHttpProtocolPtrOutputWithContext(context.Background())
}

func (e HttpProtocol) ToHttpProtocolPtrOutputWithContext(ctx context.Context) HttpProtocolPtrOutput {
	return HttpProtocol(e).ToHttpProtocolOutputWithContext(ctx).ToHttpProtocolPtrOutputWithContext(ctx)
}

func (e HttpProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HttpProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type HttpProtocolOutput struct{ *pulumi.OutputState }

func (HttpProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpProtocol)(nil)).Elem()
}

func (o HttpProtocolOutput) ToHttpProtocolOutput() HttpProtocolOutput {
	return o
}

func (o HttpProtocolOutput) ToHttpProtocolOutputWithContext(ctx context.Context) HttpProtocolOutput {
	return o
}

func (o HttpProtocolOutput) ToHttpProtocolPtrOutput() HttpProtocolPtrOutput {
	return o.ToHttpProtocolPtrOutputWithContext(context.Background())
}

func (o HttpProtocolOutput) ToHttpProtocolPtrOutputWithContext(ctx context.Context) HttpProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpProtocol) *HttpProtocol {
		return &v
	}).(HttpProtocolPtrOutput)
}

func (o HttpProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o HttpProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HttpProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o HttpProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HttpProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HttpProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type HttpProtocolPtrOutput struct{ *pulumi.OutputState }

func (HttpProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpProtocol)(nil)).Elem()
}

func (o HttpProtocolPtrOutput) ToHttpProtocolPtrOutput() HttpProtocolPtrOutput {
	return o
}

func (o HttpProtocolPtrOutput) ToHttpProtocolPtrOutputWithContext(ctx context.Context) HttpProtocolPtrOutput {
	return o
}

func (o HttpProtocolPtrOutput) Elem() HttpProtocolOutput {
	return o.ApplyT(func(v *HttpProtocol) HttpProtocol {
		if v != nil {
			return *v
		}
		var ret HttpProtocol
		return ret
	}).(HttpProtocolOutput)
}

func (o HttpProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HttpProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *HttpProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// HttpProtocolInput is an input type that accepts HttpProtocolArgs and HttpProtocolOutput values.
// You can construct a concrete instance of `HttpProtocolInput` via:
//
//	HttpProtocolArgs{...}
type HttpProtocolInput interface {
	pulumi.Input

	ToHttpProtocolOutput() HttpProtocolOutput
	ToHttpProtocolOutputWithContext(context.Context) HttpProtocolOutput
}

var httpProtocolPtrType = reflect.TypeOf((**HttpProtocol)(nil)).Elem()

type HttpProtocolPtrInput interface {
	pulumi.Input

	ToHttpProtocolPtrOutput() HttpProtocolPtrOutput
	ToHttpProtocolPtrOutputWithContext(context.Context) HttpProtocolPtrOutput
}

type httpProtocolPtr string

func HttpProtocolPtr(v string) HttpProtocolPtrInput {
	return (*httpProtocolPtr)(&v)
}

func (*httpProtocolPtr) ElementType() reflect.Type {
	return httpProtocolPtrType
}

func (in *httpProtocolPtr) ToHttpProtocolPtrOutput() HttpProtocolPtrOutput {
	return pulumi.ToOutput(in).(HttpProtocolPtrOutput)
}

func (in *httpProtocolPtr) ToHttpProtocolPtrOutputWithContext(ctx context.Context) HttpProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(HttpProtocolPtrOutput)
}

// The identity type.
type IdentityType string

const (
	IdentityTypeNone                         = IdentityType("None")
	IdentityTypeSystemAssigned               = IdentityType("SystemAssigned")
	IdentityTypeUserAssigned                 = IdentityType("UserAssigned")
	IdentityType_SystemAssigned_UserAssigned = IdentityType("SystemAssigned,UserAssigned")
)

// The valid value is Inventory
type InventoryRuleType string

const (
	InventoryRuleTypeInventory = InventoryRuleType("Inventory")
)

// The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault
type KeySource string

const (
	KeySource_Microsoft_Storage  = KeySource("Microsoft.Storage")
	KeySource_Microsoft_Keyvault = KeySource("Microsoft.Keyvault")
)

// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used.
type KeyType string

const (
	KeyTypeService = KeyType("Service")
	KeyTypeAccount = KeyType("Account")
)

// Required. Indicates the type of storage account.
type Kind string

const (
	KindStorage          = Kind("Storage")
	KindStorageV2        = Kind("StorageV2")
	KindBlobStorage      = Kind("BlobStorage")
	KindFileStorage      = Kind("FileStorage")
	KindBlockBlobStorage = Kind("BlockBlobStorage")
)

// Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
type LargeFileSharesState string

const (
	LargeFileSharesStateDisabled = LargeFileSharesState("Disabled")
	LargeFileSharesStateEnabled  = LargeFileSharesState("Enabled")
)

// Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property.
type MinimumTlsVersion string

const (
	MinimumTlsVersion_TLS1_0 = MinimumTlsVersion("TLS1_0")
	MinimumTlsVersion_TLS1_1 = MinimumTlsVersion("TLS1_1")
	MinimumTlsVersion_TLS1_2 = MinimumTlsVersion("TLS1_2")
)

// Name of the policy. The valid value is AccessTimeTracking. This field is currently read only
type Name string

const (
	NameAccessTimeTracking = Name("AccessTimeTracking")
)

// The signed permissions for the service SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).
type Permissions string

const (
	PermissionsR = Permissions("r")
	PermissionsD = Permissions("d")
	PermissionsW = Permissions("w")
	PermissionsL = Permissions("l")
	PermissionsA = Permissions("a")
	PermissionsC = Permissions("c")
	PermissionsU = Permissions("u")
	PermissionsP = Permissions("p")
)

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
type PrivateEndpointServiceConnectionStatus string

const (
	PrivateEndpointServiceConnectionStatusPending  = PrivateEndpointServiceConnectionStatus("Pending")
	PrivateEndpointServiceConnectionStatusApproved = PrivateEndpointServiceConnectionStatus("Approved")
	PrivateEndpointServiceConnectionStatusRejected = PrivateEndpointServiceConnectionStatus("Rejected")
)

// Specifies whether data in the container may be accessed publicly and the level of access.
type PublicAccess string

const (
	PublicAccessContainer = PublicAccess("Container")
	PublicAccessBlob      = PublicAccess("Blob")
	PublicAccessNone      = PublicAccess("None")
)

func (PublicAccess) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicAccess)(nil)).Elem()
}

func (e PublicAccess) ToPublicAccessOutput() PublicAccessOutput {
	return pulumi.ToOutput(e).(PublicAccessOutput)
}

func (e PublicAccess) ToPublicAccessOutputWithContext(ctx context.Context) PublicAccessOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PublicAccessOutput)
}

func (e PublicAccess) ToPublicAccessPtrOutput() PublicAccessPtrOutput {
	return e.ToPublicAccessPtrOutputWithContext(context.Background())
}

func (e PublicAccess) ToPublicAccessPtrOutputWithContext(ctx context.Context) PublicAccessPtrOutput {
	return PublicAccess(e).ToPublicAccessOutputWithContext(ctx).ToPublicAccessPtrOutputWithContext(ctx)
}

func (e PublicAccess) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicAccess) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicAccess) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PublicAccess) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PublicAccessOutput struct{ *pulumi.OutputState }

func (PublicAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicAccess)(nil)).Elem()
}

func (o PublicAccessOutput) ToPublicAccessOutput() PublicAccessOutput {
	return o
}

func (o PublicAccessOutput) ToPublicAccessOutputWithContext(ctx context.Context) PublicAccessOutput {
	return o
}

func (o PublicAccessOutput) ToPublicAccessPtrOutput() PublicAccessPtrOutput {
	return o.ToPublicAccessPtrOutputWithContext(context.Background())
}

func (o PublicAccessOutput) ToPublicAccessPtrOutputWithContext(ctx context.Context) PublicAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PublicAccess) *PublicAccess {
		return &v
	}).(PublicAccessPtrOutput)
}

func (o PublicAccessOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PublicAccessOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PublicAccess) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PublicAccessOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PublicAccessOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PublicAccess) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PublicAccessPtrOutput struct{ *pulumi.OutputState }

func (PublicAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicAccess)(nil)).Elem()
}

func (o PublicAccessPtrOutput) ToPublicAccessPtrOutput() PublicAccessPtrOutput {
	return o
}

func (o PublicAccessPtrOutput) ToPublicAccessPtrOutputWithContext(ctx context.Context) PublicAccessPtrOutput {
	return o
}

func (o PublicAccessPtrOutput) Elem() PublicAccessOutput {
	return o.ApplyT(func(v *PublicAccess) PublicAccess {
		if v != nil {
			return *v
		}
		var ret PublicAccess
		return ret
	}).(PublicAccessOutput)
}

func (o PublicAccessPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PublicAccessPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PublicAccess) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PublicAccessInput is an input type that accepts PublicAccessArgs and PublicAccessOutput values.
// You can construct a concrete instance of `PublicAccessInput` via:
//
//	PublicAccessArgs{...}
type PublicAccessInput interface {
	pulumi.Input

	ToPublicAccessOutput() PublicAccessOutput
	ToPublicAccessOutputWithContext(context.Context) PublicAccessOutput
}

var publicAccessPtrType = reflect.TypeOf((**PublicAccess)(nil)).Elem()

type PublicAccessPtrInput interface {
	pulumi.Input

	ToPublicAccessPtrOutput() PublicAccessPtrOutput
	ToPublicAccessPtrOutputWithContext(context.Context) PublicAccessPtrOutput
}

type publicAccessPtr string

func PublicAccessPtr(v string) PublicAccessPtrInput {
	return (*publicAccessPtr)(&v)
}

func (*publicAccessPtr) ElementType() reflect.Type {
	return publicAccessPtrType
}

func (in *publicAccessPtr) ToPublicAccessPtrOutput() PublicAccessPtrOutput {
	return pulumi.ToOutput(in).(PublicAccessPtrOutput)
}

func (in *publicAccessPtr) ToPublicAccessPtrOutputWithContext(ctx context.Context) PublicAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PublicAccessPtrOutput)
}

// The property is for NFS share only. The default is NoRootSquash.
type RootSquashType string

const (
	RootSquashTypeNoRootSquash = RootSquashType("NoRootSquash")
	RootSquashTypeRootSquash   = RootSquashType("RootSquash")
	RootSquashTypeAllSquash    = RootSquashType("AllSquash")
)

// Routing Choice defines the kind of network routing opted by the user.
type RoutingChoice string

const (
	RoutingChoiceMicrosoftRouting = RoutingChoice("MicrosoftRouting")
	RoutingChoiceInternetRouting  = RoutingChoice("InternetRouting")
)

// The valid value is Lifecycle
type RuleType string

const (
	RuleTypeLifecycle = RuleType("Lifecycle")
)

// The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).
type Services string

const (
	ServicesB = Services("b")
	ServicesQ = Services("q")
	ServicesT = Services("t")
	ServicesF = Services("f")
)

// Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium.
type ShareAccessTier string

const (
	ShareAccessTierTransactionOptimized = ShareAccessTier("TransactionOptimized")
	ShareAccessTierHot                  = ShareAccessTier("Hot")
	ShareAccessTierCool                 = ShareAccessTier("Cool")
	ShareAccessTierPremium              = ShareAccessTier("Premium")
)

// The signed services accessible with the service SAS. Possible values include: Blob (b), Container (c), File (f), Share (s).
type SignedResource string

const (
	SignedResourceB = SignedResource("b")
	SignedResourceC = SignedResource("c")
	SignedResourceF = SignedResource("f")
	SignedResourceS = SignedResource("s")
)

// The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.
type SignedResourceTypes string

const (
	SignedResourceTypesS = SignedResourceTypes("s")
	SignedResourceTypesC = SignedResourceTypes("c")
	SignedResourceTypesO = SignedResourceTypes("o")
)

// The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.
type SkuName string

const (
	SkuName_Standard_LRS    = SkuName("Standard_LRS")
	SkuName_Standard_GRS    = SkuName("Standard_GRS")
	SkuName_Standard_RAGRS  = SkuName("Standard_RAGRS")
	SkuName_Standard_ZRS    = SkuName("Standard_ZRS")
	SkuName_Premium_LRS     = SkuName("Premium_LRS")
	SkuName_Premium_ZRS     = SkuName("Premium_ZRS")
	SkuName_Standard_GZRS   = SkuName("Standard_GZRS")
	SkuName_Standard_RAGZRS = SkuName("Standard_RAGZRS")
)

// Gets the state of virtual network rule.
type State string

const (
	StateProvisioning         = State("provisioning")
	StateDeprovisioning       = State("deprovisioning")
	StateSucceeded            = State("succeeded")
	StateFailed               = State("failed")
	StateNetworkSourceDeleted = State("networkSourceDeleted")
)

func init() {
	pulumi.RegisterOutputType(AccessTierOutput{})
	pulumi.RegisterOutputType(AccessTierPtrOutput{})
	pulumi.RegisterOutputType(ActionOutput{})
	pulumi.RegisterOutputType(ActionPtrOutput{})
	pulumi.RegisterOutputType(BlobAccessTierOutput{})
	pulumi.RegisterOutputType(BlobAccessTierPtrOutput{})
	pulumi.RegisterOutputType(BlobTypeOutput{})
	pulumi.RegisterOutputType(BlobTypePtrOutput{})
	pulumi.RegisterOutputType(DefaultActionOutput{})
	pulumi.RegisterOutputType(DefaultActionPtrOutput{})
	pulumi.RegisterOutputType(HttpProtocolOutput{})
	pulumi.RegisterOutputType(HttpProtocolPtrOutput{})
	pulumi.RegisterOutputType(PublicAccessOutput{})
	pulumi.RegisterOutputType(PublicAccessPtrOutput{})
}
