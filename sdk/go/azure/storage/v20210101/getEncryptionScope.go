// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Encryption Scope resource.
func LookupEncryptionScope(ctx *pulumi.Context, args *LookupEncryptionScopeArgs, opts ...pulumi.InvokeOption) (*LookupEncryptionScopeResult, error) {
	var rv LookupEncryptionScopeResult
	err := ctx.Invoke("azure-native:storage/v20210101:getEncryptionScope", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEncryptionScopeArgs struct {
	// The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
	AccountName string `pulumi:"accountName"`
	// The name of the encryption scope within the specified storage account. Encryption scope names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
	EncryptionScopeName string `pulumi:"encryptionScopeName"`
	// The name of the resource group within the user's subscription. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The Encryption Scope resource.
type LookupEncryptionScopeResult struct {
	// Gets the creation date and time of the encryption scope in UTC.
	CreationTime string `pulumi:"creationTime"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'.
	KeyVaultProperties *EncryptionScopeKeyVaultPropertiesResponse `pulumi:"keyVaultProperties"`
	// Gets the last modification date and time of the encryption scope in UTC.
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// The name of the resource
	Name string `pulumi:"name"`
	// A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest.
	RequireInfrastructureEncryption *bool `pulumi:"requireInfrastructureEncryption"`
	// The provider for the encryption scope. Possible values (case-insensitive):  Microsoft.Storage, Microsoft.KeyVault.
	Source *string `pulumi:"source"`
	// The state of the encryption scope. Possible values (case-insensitive):  Enabled, Disabled.
	State *string `pulumi:"state"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupEncryptionScopeOutput(ctx *pulumi.Context, args LookupEncryptionScopeOutputArgs, opts ...pulumi.InvokeOption) LookupEncryptionScopeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEncryptionScopeResult, error) {
			args := v.(LookupEncryptionScopeArgs)
			r, err := LookupEncryptionScope(ctx, &args, opts...)
			var s LookupEncryptionScopeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEncryptionScopeResultOutput)
}

type LookupEncryptionScopeOutputArgs struct {
	// The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the encryption scope within the specified storage account. Encryption scope names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
	EncryptionScopeName pulumi.StringInput `pulumi:"encryptionScopeName"`
	// The name of the resource group within the user's subscription. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupEncryptionScopeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEncryptionScopeArgs)(nil)).Elem()
}

// The Encryption Scope resource.
type LookupEncryptionScopeResultOutput struct{ *pulumi.OutputState }

func (LookupEncryptionScopeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEncryptionScopeResult)(nil)).Elem()
}

func (o LookupEncryptionScopeResultOutput) ToLookupEncryptionScopeResultOutput() LookupEncryptionScopeResultOutput {
	return o
}

func (o LookupEncryptionScopeResultOutput) ToLookupEncryptionScopeResultOutputWithContext(ctx context.Context) LookupEncryptionScopeResultOutput {
	return o
}

// Gets the creation date and time of the encryption scope in UTC.
func (o LookupEncryptionScopeResultOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEncryptionScopeResult) string { return v.CreationTime }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupEncryptionScopeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEncryptionScopeResult) string { return v.Id }).(pulumi.StringOutput)
}

// The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'.
func (o LookupEncryptionScopeResultOutput) KeyVaultProperties() EncryptionScopeKeyVaultPropertiesResponsePtrOutput {
	return o.ApplyT(func(v LookupEncryptionScopeResult) *EncryptionScopeKeyVaultPropertiesResponse {
		return v.KeyVaultProperties
	}).(EncryptionScopeKeyVaultPropertiesResponsePtrOutput)
}

// Gets the last modification date and time of the encryption scope in UTC.
func (o LookupEncryptionScopeResultOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEncryptionScopeResult) string { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupEncryptionScopeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEncryptionScopeResult) string { return v.Name }).(pulumi.StringOutput)
}

// A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest.
func (o LookupEncryptionScopeResultOutput) RequireInfrastructureEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupEncryptionScopeResult) *bool { return v.RequireInfrastructureEncryption }).(pulumi.BoolPtrOutput)
}

// The provider for the encryption scope. Possible values (case-insensitive):  Microsoft.Storage, Microsoft.KeyVault.
func (o LookupEncryptionScopeResultOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEncryptionScopeResult) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The state of the encryption scope. Possible values (case-insensitive):  Enabled, Disabled.
func (o LookupEncryptionScopeResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEncryptionScopeResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupEncryptionScopeResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEncryptionScopeResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEncryptionScopeResultOutput{})
}
