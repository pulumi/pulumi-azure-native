// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Blob within a Storage Container.
type Blob struct {
	pulumi.CustomResourceState

	// The access tier of the storage blob.
	AccessTier pulumi.StringOutput `pulumi:"accessTier"`
	// The MD5 sum of the blob contents.
	ContentMd5 pulumi.StringPtrOutput `pulumi:"contentMd5"`
	// The content type of the storage blob.
	ContentType pulumi.StringPtrOutput `pulumi:"contentType"`
	// A map of custom blob metadata.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// The name of the storage blob.
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of the storage blob to be created.
	Type pulumi.StringOutput `pulumi:"type"`
	// The URL of the blob.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewBlob registers a new resource with the given unique name, arguments, and options.
func NewBlob(ctx *pulumi.Context,
	name string, args *BlobArgs, opts ...pulumi.ResourceOption) (*Blob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.ContainerName == nil {
		return nil, errors.New("invalid value for required argument 'ContainerName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Type == nil {
		e := BlobType("Block")
		args.Type = &e
	}
	var resource Blob
	err := ctx.RegisterResource("azure-nextgen:storage:Blob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlob gets an existing Blob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlobState, opts ...pulumi.ResourceOption) (*Blob, error) {
	var resource Blob
	err := ctx.ReadResource("azure-nextgen:storage:Blob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Blob resources.
type blobState struct {
	// The access tier of the storage blob.
	AccessTier *string `pulumi:"accessTier"`
	// The MD5 sum of the blob contents.
	ContentMd5 *string `pulumi:"contentMd5"`
	// The content type of the storage blob.
	ContentType *string `pulumi:"contentType"`
	// A map of custom blob metadata.
	Metadata map[string]string `pulumi:"metadata"`
	// The name of the storage blob.
	Name *string `pulumi:"name"`
	// The type of the storage blob to be created.
	Type *string `pulumi:"type"`
	// The URL of the blob.
	Url *string `pulumi:"url"`
}

type BlobState struct {
	// The access tier of the storage blob.
	AccessTier *BlobAccessTier
	// The MD5 sum of the blob contents.
	ContentMd5 pulumi.StringPtrInput
	// The content type of the storage blob.
	ContentType pulumi.StringPtrInput
	// A map of custom blob metadata.
	Metadata pulumi.StringMapInput
	// The name of the storage blob.
	Name pulumi.StringPtrInput
	// The type of the storage blob to be created.
	Type *BlobType
	// The URL of the blob.
	Url pulumi.StringPtrInput
}

func (BlobState) ElementType() reflect.Type {
	return reflect.TypeOf((*blobState)(nil)).Elem()
}

type blobArgs struct {
	// The access tier of the storage blob.
	AccessTier *string `pulumi:"accessTier"`
	// Specifies the storage account in which to create the storage container.
	AccountName string `pulumi:"accountName"`
	// The name of the storage blob. Must be unique within the storage container the blob is located.
	BlobName *string `pulumi:"blobName"`
	// The name of the storage container in which this blob should be created.
	ContainerName string `pulumi:"containerName"`
	// The MD5 sum of the blob contents. Cannot be defined if blob type is Append.
	ContentMd5 *string `pulumi:"contentMd5"`
	// The content type of the storage blob. Defaults to `application/octet-stream`.
	ContentType *string `pulumi:"contentType"`
	// A map of custom blob metadata.
	Metadata map[string]string `pulumi:"metadata"`
	// The name of the resource group within the user's subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// An asset to copy to the blob contents. This field cannot be specified for Append blobs.
	Source pulumi.AssetOrArchive `pulumi:"source"`
	// The type of the storage blob to be created. Defaults to 'Block'.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a Blob resource.
type BlobArgs struct {
	// The access tier of the storage blob.
	AccessTier *BlobAccessTier
	// Specifies the storage account in which to create the storage container.
	AccountName pulumi.StringInput
	// The name of the storage blob. Must be unique within the storage container the blob is located.
	BlobName pulumi.StringPtrInput
	// The name of the storage container in which this blob should be created.
	ContainerName pulumi.StringInput
	// The MD5 sum of the blob contents. Cannot be defined if blob type is Append.
	ContentMd5 pulumi.StringPtrInput
	// The content type of the storage blob. Defaults to `application/octet-stream`.
	ContentType pulumi.StringPtrInput
	// A map of custom blob metadata.
	Metadata pulumi.StringMapInput
	// The name of the resource group within the user's subscription.
	ResourceGroupName pulumi.StringInput
	// An asset to copy to the blob contents. This field cannot be specified for Append blobs.
	Source pulumi.AssetOrArchiveInput
	// The type of the storage blob to be created. Defaults to 'Block'.
	Type *BlobType
}

func (BlobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blobArgs)(nil)).Elem()
}

type BlobInput interface {
	pulumi.Input

	ToBlobOutput() BlobOutput
	ToBlobOutputWithContext(ctx context.Context) BlobOutput
}

func (*Blob) ElementType() reflect.Type {
	return reflect.TypeOf((*Blob)(nil))
}

func (i *Blob) ToBlobOutput() BlobOutput {
	return i.ToBlobOutputWithContext(context.Background())
}

func (i *Blob) ToBlobOutputWithContext(ctx context.Context) BlobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobOutput)
}

type BlobOutput struct {
	*pulumi.OutputState
}

func (BlobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Blob)(nil))
}

func (o BlobOutput) ToBlobOutput() BlobOutput {
	return o
}

func (o BlobOutput) ToBlobOutputWithContext(ctx context.Context) BlobOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(BlobOutput{})
}
