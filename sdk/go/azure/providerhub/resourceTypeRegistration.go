// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package providerhub

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// API Version: 2020-11-20.
type ResourceTypeRegistration struct {
	pulumi.CustomResourceState

	// The name of the resource
	Name       pulumi.StringOutput                              `pulumi:"name"`
	Properties ResourceTypeRegistrationResponsePropertiesOutput `pulumi:"properties"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewResourceTypeRegistration registers a new resource with the given unique name, arguments, and options.
func NewResourceTypeRegistration(ctx *pulumi.Context,
	name string, args *ResourceTypeRegistrationArgs, opts ...pulumi.ResourceOption) (*ResourceTypeRegistration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProviderNamespace == nil {
		return nil, errors.New("invalid value for required argument 'ProviderNamespace'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:providerhub/v20201120:ResourceTypeRegistration"),
		},
		{
			Type: pulumi.String("azure-native:providerhub/v20210501preview:ResourceTypeRegistration"),
		},
		{
			Type: pulumi.String("azure-native:providerhub/v20210601preview:ResourceTypeRegistration"),
		},
		{
			Type: pulumi.String("azure-native:providerhub/v20210901preview:ResourceTypeRegistration"),
		},
	})
	opts = append(opts, aliases)
	var resource ResourceTypeRegistration
	err := ctx.RegisterResource("azure-native:providerhub:ResourceTypeRegistration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceTypeRegistration gets an existing ResourceTypeRegistration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceTypeRegistration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceTypeRegistrationState, opts ...pulumi.ResourceOption) (*ResourceTypeRegistration, error) {
	var resource ResourceTypeRegistration
	err := ctx.ReadResource("azure-native:providerhub:ResourceTypeRegistration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceTypeRegistration resources.
type resourceTypeRegistrationState struct {
}

type ResourceTypeRegistrationState struct {
}

func (ResourceTypeRegistrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceTypeRegistrationState)(nil)).Elem()
}

type resourceTypeRegistrationArgs struct {
	Properties *ResourceTypeRegistrationProperties `pulumi:"properties"`
	// The name of the resource provider hosted within ProviderHub.
	ProviderNamespace string `pulumi:"providerNamespace"`
	// The resource type.
	ResourceType *string `pulumi:"resourceType"`
}

// The set of arguments for constructing a ResourceTypeRegistration resource.
type ResourceTypeRegistrationArgs struct {
	Properties ResourceTypeRegistrationPropertiesPtrInput
	// The name of the resource provider hosted within ProviderHub.
	ProviderNamespace pulumi.StringInput
	// The resource type.
	ResourceType pulumi.StringPtrInput
}

func (ResourceTypeRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceTypeRegistrationArgs)(nil)).Elem()
}

type ResourceTypeRegistrationInput interface {
	pulumi.Input

	ToResourceTypeRegistrationOutput() ResourceTypeRegistrationOutput
	ToResourceTypeRegistrationOutputWithContext(ctx context.Context) ResourceTypeRegistrationOutput
}

func (*ResourceTypeRegistration) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceTypeRegistration)(nil)).Elem()
}

func (i *ResourceTypeRegistration) ToResourceTypeRegistrationOutput() ResourceTypeRegistrationOutput {
	return i.ToResourceTypeRegistrationOutputWithContext(context.Background())
}

func (i *ResourceTypeRegistration) ToResourceTypeRegistrationOutputWithContext(ctx context.Context) ResourceTypeRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceTypeRegistrationOutput)
}

type ResourceTypeRegistrationOutput struct{ *pulumi.OutputState }

func (ResourceTypeRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceTypeRegistration)(nil)).Elem()
}

func (o ResourceTypeRegistrationOutput) ToResourceTypeRegistrationOutput() ResourceTypeRegistrationOutput {
	return o
}

func (o ResourceTypeRegistrationOutput) ToResourceTypeRegistrationOutputWithContext(ctx context.Context) ResourceTypeRegistrationOutput {
	return o
}

// The name of the resource
func (o ResourceTypeRegistrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceTypeRegistration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ResourceTypeRegistrationOutput) Properties() ResourceTypeRegistrationResponsePropertiesOutput {
	return o.ApplyT(func(v *ResourceTypeRegistration) ResourceTypeRegistrationResponsePropertiesOutput {
		return v.Properties
	}).(ResourceTypeRegistrationResponsePropertiesOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o ResourceTypeRegistrationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceTypeRegistration) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ResourceTypeRegistrationOutput{})
}
