// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180901preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// This type describes a gateway resource.
type Gateway struct {
	pulumi.CustomResourceState

	// User readable description of the gateway.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Network that the Application is using.
	DestinationNetwork NetworkRefResponseOutput `pulumi:"destinationNetwork"`
	// Configuration for http connectivity for this gateway.
	Http HttpConfigResponseArrayOutput `pulumi:"http"`
	// IP address of the gateway. This is populated in the response and is ignored for incoming requests.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// State of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Network the gateway should listen on for requests.
	SourceNetwork NetworkRefResponseOutput `pulumi:"sourceNetwork"`
	// Status of the resource.
	Status pulumi.StringOutput `pulumi:"status"`
	// Gives additional information about the current status of the gateway.
	StatusDetails pulumi.StringOutput `pulumi:"statusDetails"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Configuration for tcp connectivity for this gateway.
	Tcp TcpConfigResponseArrayOutput `pulumi:"tcp"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewGateway registers a new resource with the given unique name, arguments, and options.
func NewGateway(ctx *pulumi.Context,
	name string, args *GatewayArgs, opts ...pulumi.ResourceOption) (*Gateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationNetwork == nil {
		return nil, errors.New("invalid value for required argument 'DestinationNetwork'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SourceNetwork == nil {
		return nil, errors.New("invalid value for required argument 'SourceNetwork'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:servicefabricmesh:Gateway"),
		},
	})
	opts = append(opts, aliases)
	var resource Gateway
	err := ctx.RegisterResource("azure-nextgen:servicefabricmesh/v20180901preview:Gateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGateway gets an existing Gateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayState, opts ...pulumi.ResourceOption) (*Gateway, error) {
	var resource Gateway
	err := ctx.ReadResource("azure-nextgen:servicefabricmesh/v20180901preview:Gateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Gateway resources.
type gatewayState struct {
	// User readable description of the gateway.
	Description *string `pulumi:"description"`
	// Network that the Application is using.
	DestinationNetwork *NetworkRefResponse `pulumi:"destinationNetwork"`
	// Configuration for http connectivity for this gateway.
	Http []HttpConfigResponse `pulumi:"http"`
	// IP address of the gateway. This is populated in the response and is ignored for incoming requests.
	IpAddress *string `pulumi:"ipAddress"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// State of the resource.
	ProvisioningState *string `pulumi:"provisioningState"`
	// Network the gateway should listen on for requests.
	SourceNetwork *NetworkRefResponse `pulumi:"sourceNetwork"`
	// Status of the resource.
	Status *string `pulumi:"status"`
	// Gives additional information about the current status of the gateway.
	StatusDetails *string `pulumi:"statusDetails"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Configuration for tcp connectivity for this gateway.
	Tcp []TcpConfigResponse `pulumi:"tcp"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `pulumi:"type"`
}

type GatewayState struct {
	// User readable description of the gateway.
	Description pulumi.StringPtrInput
	// Network that the Application is using.
	DestinationNetwork NetworkRefResponsePtrInput
	// Configuration for http connectivity for this gateway.
	Http HttpConfigResponseArrayInput
	// IP address of the gateway. This is populated in the response and is ignored for incoming requests.
	IpAddress pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// State of the resource.
	ProvisioningState pulumi.StringPtrInput
	// Network the gateway should listen on for requests.
	SourceNetwork NetworkRefResponsePtrInput
	// Status of the resource.
	Status pulumi.StringPtrInput
	// Gives additional information about the current status of the gateway.
	StatusDetails pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// Configuration for tcp connectivity for this gateway.
	Tcp TcpConfigResponseArrayInput
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringPtrInput
}

func (GatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayState)(nil)).Elem()
}

type gatewayArgs struct {
	// User readable description of the gateway.
	Description *string `pulumi:"description"`
	// Network that the Application is using.
	DestinationNetwork NetworkRef `pulumi:"destinationNetwork"`
	// The identity of the gateway.
	GatewayResourceName *string `pulumi:"gatewayResourceName"`
	// Configuration for http connectivity for this gateway.
	Http []HttpConfig `pulumi:"http"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Azure resource group name
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Network the gateway should listen on for requests.
	SourceNetwork NetworkRef `pulumi:"sourceNetwork"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Configuration for tcp connectivity for this gateway.
	Tcp []TcpConfig `pulumi:"tcp"`
}

// The set of arguments for constructing a Gateway resource.
type GatewayArgs struct {
	// User readable description of the gateway.
	Description pulumi.StringPtrInput
	// Network that the Application is using.
	DestinationNetwork NetworkRefInput
	// The identity of the gateway.
	GatewayResourceName pulumi.StringPtrInput
	// Configuration for http connectivity for this gateway.
	Http HttpConfigArrayInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Azure resource group name
	ResourceGroupName pulumi.StringInput
	// Network the gateway should listen on for requests.
	SourceNetwork NetworkRefInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// Configuration for tcp connectivity for this gateway.
	Tcp TcpConfigArrayInput
}

func (GatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayArgs)(nil)).Elem()
}

type GatewayInput interface {
	pulumi.Input

	ToGatewayOutput() GatewayOutput
	ToGatewayOutputWithContext(ctx context.Context) GatewayOutput
}

func (*Gateway) ElementType() reflect.Type {
	return reflect.TypeOf((*Gateway)(nil))
}

func (i *Gateway) ToGatewayOutput() GatewayOutput {
	return i.ToGatewayOutputWithContext(context.Background())
}

func (i *Gateway) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayOutput)
}

type GatewayOutput struct {
	*pulumi.OutputState
}

func (GatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Gateway)(nil))
}

func (o GatewayOutput) ToGatewayOutput() GatewayOutput {
	return o
}

func (o GatewayOutput) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GatewayOutput{})
}
