// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180701preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Diagnostics settings for Geneva.
type AzureInternalMonitoringPipelineSinkDescription struct {
	// Azure Internal monitoring pipeline account.
	AccountName *string `pulumi:"accountName"`
	// Azure Internal monitoring pipeline autokey associated with the certificate.
	AutoKeyConfigUrl *string `pulumi:"autoKeyConfigUrl"`
	// A description of the sink.
	Description *string `pulumi:"description"`
	// Azure Internal monitoring agent fluentd configuration.
	FluentdConfigUrl interface{} `pulumi:"fluentdConfigUrl"`
	// The kind of DiagnosticsSink.
	Kind string `pulumi:"kind"`
	// Azure Internal monitoring agent configuration.
	MaConfigUrl *string `pulumi:"maConfigUrl"`
	// Name of the sink. This value is referenced by DiagnosticsReferenceDescription
	Name *string `pulumi:"name"`
	// Azure Internal monitoring pipeline account namespace.
	Namespace *string `pulumi:"namespace"`
}

// AzureInternalMonitoringPipelineSinkDescriptionInput is an input type that accepts AzureInternalMonitoringPipelineSinkDescriptionArgs and AzureInternalMonitoringPipelineSinkDescriptionOutput values.
// You can construct a concrete instance of `AzureInternalMonitoringPipelineSinkDescriptionInput` via:
//
//          AzureInternalMonitoringPipelineSinkDescriptionArgs{...}
type AzureInternalMonitoringPipelineSinkDescriptionInput interface {
	pulumi.Input

	ToAzureInternalMonitoringPipelineSinkDescriptionOutput() AzureInternalMonitoringPipelineSinkDescriptionOutput
	ToAzureInternalMonitoringPipelineSinkDescriptionOutputWithContext(context.Context) AzureInternalMonitoringPipelineSinkDescriptionOutput
}

// Diagnostics settings for Geneva.
type AzureInternalMonitoringPipelineSinkDescriptionArgs struct {
	// Azure Internal monitoring pipeline account.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// Azure Internal monitoring pipeline autokey associated with the certificate.
	AutoKeyConfigUrl pulumi.StringPtrInput `pulumi:"autoKeyConfigUrl"`
	// A description of the sink.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Azure Internal monitoring agent fluentd configuration.
	FluentdConfigUrl pulumi.Input `pulumi:"fluentdConfigUrl"`
	// The kind of DiagnosticsSink.
	Kind pulumi.StringInput `pulumi:"kind"`
	// Azure Internal monitoring agent configuration.
	MaConfigUrl pulumi.StringPtrInput `pulumi:"maConfigUrl"`
	// Name of the sink. This value is referenced by DiagnosticsReferenceDescription
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Azure Internal monitoring pipeline account namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (AzureInternalMonitoringPipelineSinkDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureInternalMonitoringPipelineSinkDescription)(nil)).Elem()
}

func (i AzureInternalMonitoringPipelineSinkDescriptionArgs) ToAzureInternalMonitoringPipelineSinkDescriptionOutput() AzureInternalMonitoringPipelineSinkDescriptionOutput {
	return i.ToAzureInternalMonitoringPipelineSinkDescriptionOutputWithContext(context.Background())
}

func (i AzureInternalMonitoringPipelineSinkDescriptionArgs) ToAzureInternalMonitoringPipelineSinkDescriptionOutputWithContext(ctx context.Context) AzureInternalMonitoringPipelineSinkDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureInternalMonitoringPipelineSinkDescriptionOutput)
}

// AzureInternalMonitoringPipelineSinkDescriptionArrayInput is an input type that accepts AzureInternalMonitoringPipelineSinkDescriptionArray and AzureInternalMonitoringPipelineSinkDescriptionArrayOutput values.
// You can construct a concrete instance of `AzureInternalMonitoringPipelineSinkDescriptionArrayInput` via:
//
//          AzureInternalMonitoringPipelineSinkDescriptionArray{ AzureInternalMonitoringPipelineSinkDescriptionArgs{...} }
type AzureInternalMonitoringPipelineSinkDescriptionArrayInput interface {
	pulumi.Input

	ToAzureInternalMonitoringPipelineSinkDescriptionArrayOutput() AzureInternalMonitoringPipelineSinkDescriptionArrayOutput
	ToAzureInternalMonitoringPipelineSinkDescriptionArrayOutputWithContext(context.Context) AzureInternalMonitoringPipelineSinkDescriptionArrayOutput
}

type AzureInternalMonitoringPipelineSinkDescriptionArray []AzureInternalMonitoringPipelineSinkDescriptionInput

func (AzureInternalMonitoringPipelineSinkDescriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureInternalMonitoringPipelineSinkDescription)(nil)).Elem()
}

func (i AzureInternalMonitoringPipelineSinkDescriptionArray) ToAzureInternalMonitoringPipelineSinkDescriptionArrayOutput() AzureInternalMonitoringPipelineSinkDescriptionArrayOutput {
	return i.ToAzureInternalMonitoringPipelineSinkDescriptionArrayOutputWithContext(context.Background())
}

func (i AzureInternalMonitoringPipelineSinkDescriptionArray) ToAzureInternalMonitoringPipelineSinkDescriptionArrayOutputWithContext(ctx context.Context) AzureInternalMonitoringPipelineSinkDescriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureInternalMonitoringPipelineSinkDescriptionArrayOutput)
}

// Diagnostics settings for Geneva.
type AzureInternalMonitoringPipelineSinkDescriptionOutput struct{ *pulumi.OutputState }

func (AzureInternalMonitoringPipelineSinkDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureInternalMonitoringPipelineSinkDescription)(nil)).Elem()
}

func (o AzureInternalMonitoringPipelineSinkDescriptionOutput) ToAzureInternalMonitoringPipelineSinkDescriptionOutput() AzureInternalMonitoringPipelineSinkDescriptionOutput {
	return o
}

func (o AzureInternalMonitoringPipelineSinkDescriptionOutput) ToAzureInternalMonitoringPipelineSinkDescriptionOutputWithContext(ctx context.Context) AzureInternalMonitoringPipelineSinkDescriptionOutput {
	return o
}

// Azure Internal monitoring pipeline account.
func (o AzureInternalMonitoringPipelineSinkDescriptionOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureInternalMonitoringPipelineSinkDescription) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// Azure Internal monitoring pipeline autokey associated with the certificate.
func (o AzureInternalMonitoringPipelineSinkDescriptionOutput) AutoKeyConfigUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureInternalMonitoringPipelineSinkDescription) *string { return v.AutoKeyConfigUrl }).(pulumi.StringPtrOutput)
}

// A description of the sink.
func (o AzureInternalMonitoringPipelineSinkDescriptionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureInternalMonitoringPipelineSinkDescription) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure Internal monitoring agent fluentd configuration.
func (o AzureInternalMonitoringPipelineSinkDescriptionOutput) FluentdConfigUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureInternalMonitoringPipelineSinkDescription) interface{} { return v.FluentdConfigUrl }).(pulumi.AnyOutput)
}

// The kind of DiagnosticsSink.
func (o AzureInternalMonitoringPipelineSinkDescriptionOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v AzureInternalMonitoringPipelineSinkDescription) string { return v.Kind }).(pulumi.StringOutput)
}

// Azure Internal monitoring agent configuration.
func (o AzureInternalMonitoringPipelineSinkDescriptionOutput) MaConfigUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureInternalMonitoringPipelineSinkDescription) *string { return v.MaConfigUrl }).(pulumi.StringPtrOutput)
}

// Name of the sink. This value is referenced by DiagnosticsReferenceDescription
func (o AzureInternalMonitoringPipelineSinkDescriptionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureInternalMonitoringPipelineSinkDescription) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Azure Internal monitoring pipeline account namespace.
func (o AzureInternalMonitoringPipelineSinkDescriptionOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureInternalMonitoringPipelineSinkDescription) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type AzureInternalMonitoringPipelineSinkDescriptionArrayOutput struct{ *pulumi.OutputState }

func (AzureInternalMonitoringPipelineSinkDescriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureInternalMonitoringPipelineSinkDescription)(nil)).Elem()
}

func (o AzureInternalMonitoringPipelineSinkDescriptionArrayOutput) ToAzureInternalMonitoringPipelineSinkDescriptionArrayOutput() AzureInternalMonitoringPipelineSinkDescriptionArrayOutput {
	return o
}

func (o AzureInternalMonitoringPipelineSinkDescriptionArrayOutput) ToAzureInternalMonitoringPipelineSinkDescriptionArrayOutputWithContext(ctx context.Context) AzureInternalMonitoringPipelineSinkDescriptionArrayOutput {
	return o
}

func (o AzureInternalMonitoringPipelineSinkDescriptionArrayOutput) Index(i pulumi.IntInput) AzureInternalMonitoringPipelineSinkDescriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureInternalMonitoringPipelineSinkDescription {
		return vs[0].([]AzureInternalMonitoringPipelineSinkDescription)[vs[1].(int)]
	}).(AzureInternalMonitoringPipelineSinkDescriptionOutput)
}

// Diagnostics settings for Geneva.
type AzureInternalMonitoringPipelineSinkDescriptionResponse struct {
	// Azure Internal monitoring pipeline account.
	AccountName *string `pulumi:"accountName"`
	// Azure Internal monitoring pipeline autokey associated with the certificate.
	AutoKeyConfigUrl *string `pulumi:"autoKeyConfigUrl"`
	// A description of the sink.
	Description *string `pulumi:"description"`
	// Azure Internal monitoring agent fluentd configuration.
	FluentdConfigUrl interface{} `pulumi:"fluentdConfigUrl"`
	// The kind of DiagnosticsSink.
	Kind string `pulumi:"kind"`
	// Azure Internal monitoring agent configuration.
	MaConfigUrl *string `pulumi:"maConfigUrl"`
	// Name of the sink. This value is referenced by DiagnosticsReferenceDescription
	Name *string `pulumi:"name"`
	// Azure Internal monitoring pipeline account namespace.
	Namespace *string `pulumi:"namespace"`
}

// AzureInternalMonitoringPipelineSinkDescriptionResponseInput is an input type that accepts AzureInternalMonitoringPipelineSinkDescriptionResponseArgs and AzureInternalMonitoringPipelineSinkDescriptionResponseOutput values.
// You can construct a concrete instance of `AzureInternalMonitoringPipelineSinkDescriptionResponseInput` via:
//
//          AzureInternalMonitoringPipelineSinkDescriptionResponseArgs{...}
type AzureInternalMonitoringPipelineSinkDescriptionResponseInput interface {
	pulumi.Input

	ToAzureInternalMonitoringPipelineSinkDescriptionResponseOutput() AzureInternalMonitoringPipelineSinkDescriptionResponseOutput
	ToAzureInternalMonitoringPipelineSinkDescriptionResponseOutputWithContext(context.Context) AzureInternalMonitoringPipelineSinkDescriptionResponseOutput
}

// Diagnostics settings for Geneva.
type AzureInternalMonitoringPipelineSinkDescriptionResponseArgs struct {
	// Azure Internal monitoring pipeline account.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// Azure Internal monitoring pipeline autokey associated with the certificate.
	AutoKeyConfigUrl pulumi.StringPtrInput `pulumi:"autoKeyConfigUrl"`
	// A description of the sink.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Azure Internal monitoring agent fluentd configuration.
	FluentdConfigUrl pulumi.Input `pulumi:"fluentdConfigUrl"`
	// The kind of DiagnosticsSink.
	Kind pulumi.StringInput `pulumi:"kind"`
	// Azure Internal monitoring agent configuration.
	MaConfigUrl pulumi.StringPtrInput `pulumi:"maConfigUrl"`
	// Name of the sink. This value is referenced by DiagnosticsReferenceDescription
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Azure Internal monitoring pipeline account namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (AzureInternalMonitoringPipelineSinkDescriptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureInternalMonitoringPipelineSinkDescriptionResponse)(nil)).Elem()
}

func (i AzureInternalMonitoringPipelineSinkDescriptionResponseArgs) ToAzureInternalMonitoringPipelineSinkDescriptionResponseOutput() AzureInternalMonitoringPipelineSinkDescriptionResponseOutput {
	return i.ToAzureInternalMonitoringPipelineSinkDescriptionResponseOutputWithContext(context.Background())
}

func (i AzureInternalMonitoringPipelineSinkDescriptionResponseArgs) ToAzureInternalMonitoringPipelineSinkDescriptionResponseOutputWithContext(ctx context.Context) AzureInternalMonitoringPipelineSinkDescriptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureInternalMonitoringPipelineSinkDescriptionResponseOutput)
}

// AzureInternalMonitoringPipelineSinkDescriptionResponseArrayInput is an input type that accepts AzureInternalMonitoringPipelineSinkDescriptionResponseArray and AzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput values.
// You can construct a concrete instance of `AzureInternalMonitoringPipelineSinkDescriptionResponseArrayInput` via:
//
//          AzureInternalMonitoringPipelineSinkDescriptionResponseArray{ AzureInternalMonitoringPipelineSinkDescriptionResponseArgs{...} }
type AzureInternalMonitoringPipelineSinkDescriptionResponseArrayInput interface {
	pulumi.Input

	ToAzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput() AzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput
	ToAzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutputWithContext(context.Context) AzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput
}

type AzureInternalMonitoringPipelineSinkDescriptionResponseArray []AzureInternalMonitoringPipelineSinkDescriptionResponseInput

func (AzureInternalMonitoringPipelineSinkDescriptionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureInternalMonitoringPipelineSinkDescriptionResponse)(nil)).Elem()
}

func (i AzureInternalMonitoringPipelineSinkDescriptionResponseArray) ToAzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput() AzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput {
	return i.ToAzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutputWithContext(context.Background())
}

func (i AzureInternalMonitoringPipelineSinkDescriptionResponseArray) ToAzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutputWithContext(ctx context.Context) AzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput)
}

// Diagnostics settings for Geneva.
type AzureInternalMonitoringPipelineSinkDescriptionResponseOutput struct{ *pulumi.OutputState }

func (AzureInternalMonitoringPipelineSinkDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureInternalMonitoringPipelineSinkDescriptionResponse)(nil)).Elem()
}

func (o AzureInternalMonitoringPipelineSinkDescriptionResponseOutput) ToAzureInternalMonitoringPipelineSinkDescriptionResponseOutput() AzureInternalMonitoringPipelineSinkDescriptionResponseOutput {
	return o
}

func (o AzureInternalMonitoringPipelineSinkDescriptionResponseOutput) ToAzureInternalMonitoringPipelineSinkDescriptionResponseOutputWithContext(ctx context.Context) AzureInternalMonitoringPipelineSinkDescriptionResponseOutput {
	return o
}

// Azure Internal monitoring pipeline account.
func (o AzureInternalMonitoringPipelineSinkDescriptionResponseOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureInternalMonitoringPipelineSinkDescriptionResponse) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// Azure Internal monitoring pipeline autokey associated with the certificate.
func (o AzureInternalMonitoringPipelineSinkDescriptionResponseOutput) AutoKeyConfigUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureInternalMonitoringPipelineSinkDescriptionResponse) *string { return v.AutoKeyConfigUrl }).(pulumi.StringPtrOutput)
}

// A description of the sink.
func (o AzureInternalMonitoringPipelineSinkDescriptionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureInternalMonitoringPipelineSinkDescriptionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure Internal monitoring agent fluentd configuration.
func (o AzureInternalMonitoringPipelineSinkDescriptionResponseOutput) FluentdConfigUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureInternalMonitoringPipelineSinkDescriptionResponse) interface{} { return v.FluentdConfigUrl }).(pulumi.AnyOutput)
}

// The kind of DiagnosticsSink.
func (o AzureInternalMonitoringPipelineSinkDescriptionResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v AzureInternalMonitoringPipelineSinkDescriptionResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Azure Internal monitoring agent configuration.
func (o AzureInternalMonitoringPipelineSinkDescriptionResponseOutput) MaConfigUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureInternalMonitoringPipelineSinkDescriptionResponse) *string { return v.MaConfigUrl }).(pulumi.StringPtrOutput)
}

// Name of the sink. This value is referenced by DiagnosticsReferenceDescription
func (o AzureInternalMonitoringPipelineSinkDescriptionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureInternalMonitoringPipelineSinkDescriptionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Azure Internal monitoring pipeline account namespace.
func (o AzureInternalMonitoringPipelineSinkDescriptionResponseOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureInternalMonitoringPipelineSinkDescriptionResponse) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type AzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureInternalMonitoringPipelineSinkDescriptionResponse)(nil)).Elem()
}

func (o AzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput) ToAzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput() AzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput {
	return o
}

func (o AzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput) ToAzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutputWithContext(ctx context.Context) AzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput {
	return o
}

func (o AzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput) Index(i pulumi.IntInput) AzureInternalMonitoringPipelineSinkDescriptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureInternalMonitoringPipelineSinkDescriptionResponse {
		return vs[0].([]AzureInternalMonitoringPipelineSinkDescriptionResponse)[vs[1].(int)]
	}).(AzureInternalMonitoringPipelineSinkDescriptionResponseOutput)
}

// Describes a container and its runtime properties.
type ContainerCodePackageProperties struct {
	// Command array to execute within the container in exec form.
	Commands []string `pulumi:"commands"`
	// Reference to sinks in DiagnosticsDescription.
	Diagnostics *DiagnosticsRef `pulumi:"diagnostics"`
	// The endpoints exposed by this container.
	Endpoints []EndpointProperties `pulumi:"endpoints"`
	// Override for the default entry point in the container.
	Entrypoint *string `pulumi:"entrypoint"`
	// The environment variables to set in this container
	EnvironmentVariables []EnvironmentVariable `pulumi:"environmentVariables"`
	// The Container image to use.
	Image string `pulumi:"image"`
	// Image registry credential.
	ImageRegistryCredential *ImageRegistryCredential `pulumi:"imageRegistryCredential"`
	// The labels to set in this container.
	Labels []ContainerLabel `pulumi:"labels"`
	// The name of the code package.
	Name string `pulumi:"name"`
	// This type describes the resource requirements for a container or a service.
	Resources ResourceRequirements `pulumi:"resources"`
	// The settings to set in this container. The setting file path can be fetched from environment variable "Fabric_SettingPath". The path for Windows container is "C:\\secrets". The path for Linux container is "/var/secrets".
	Settings []Setting `pulumi:"settings"`
	// The volumes to be attached to the container.
	VolumeRefs []ContainerVolume `pulumi:"volumeRefs"`
}

// ContainerCodePackagePropertiesInput is an input type that accepts ContainerCodePackagePropertiesArgs and ContainerCodePackagePropertiesOutput values.
// You can construct a concrete instance of `ContainerCodePackagePropertiesInput` via:
//
//          ContainerCodePackagePropertiesArgs{...}
type ContainerCodePackagePropertiesInput interface {
	pulumi.Input

	ToContainerCodePackagePropertiesOutput() ContainerCodePackagePropertiesOutput
	ToContainerCodePackagePropertiesOutputWithContext(context.Context) ContainerCodePackagePropertiesOutput
}

// Describes a container and its runtime properties.
type ContainerCodePackagePropertiesArgs struct {
	// Command array to execute within the container in exec form.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
	// Reference to sinks in DiagnosticsDescription.
	Diagnostics DiagnosticsRefPtrInput `pulumi:"diagnostics"`
	// The endpoints exposed by this container.
	Endpoints EndpointPropertiesArrayInput `pulumi:"endpoints"`
	// Override for the default entry point in the container.
	Entrypoint pulumi.StringPtrInput `pulumi:"entrypoint"`
	// The environment variables to set in this container
	EnvironmentVariables EnvironmentVariableArrayInput `pulumi:"environmentVariables"`
	// The Container image to use.
	Image pulumi.StringInput `pulumi:"image"`
	// Image registry credential.
	ImageRegistryCredential ImageRegistryCredentialPtrInput `pulumi:"imageRegistryCredential"`
	// The labels to set in this container.
	Labels ContainerLabelArrayInput `pulumi:"labels"`
	// The name of the code package.
	Name pulumi.StringInput `pulumi:"name"`
	// This type describes the resource requirements for a container or a service.
	Resources ResourceRequirementsInput `pulumi:"resources"`
	// The settings to set in this container. The setting file path can be fetched from environment variable "Fabric_SettingPath". The path for Windows container is "C:\\secrets". The path for Linux container is "/var/secrets".
	Settings SettingArrayInput `pulumi:"settings"`
	// The volumes to be attached to the container.
	VolumeRefs ContainerVolumeArrayInput `pulumi:"volumeRefs"`
}

func (ContainerCodePackagePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerCodePackageProperties)(nil)).Elem()
}

func (i ContainerCodePackagePropertiesArgs) ToContainerCodePackagePropertiesOutput() ContainerCodePackagePropertiesOutput {
	return i.ToContainerCodePackagePropertiesOutputWithContext(context.Background())
}

func (i ContainerCodePackagePropertiesArgs) ToContainerCodePackagePropertiesOutputWithContext(ctx context.Context) ContainerCodePackagePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerCodePackagePropertiesOutput)
}

// ContainerCodePackagePropertiesArrayInput is an input type that accepts ContainerCodePackagePropertiesArray and ContainerCodePackagePropertiesArrayOutput values.
// You can construct a concrete instance of `ContainerCodePackagePropertiesArrayInput` via:
//
//          ContainerCodePackagePropertiesArray{ ContainerCodePackagePropertiesArgs{...} }
type ContainerCodePackagePropertiesArrayInput interface {
	pulumi.Input

	ToContainerCodePackagePropertiesArrayOutput() ContainerCodePackagePropertiesArrayOutput
	ToContainerCodePackagePropertiesArrayOutputWithContext(context.Context) ContainerCodePackagePropertiesArrayOutput
}

type ContainerCodePackagePropertiesArray []ContainerCodePackagePropertiesInput

func (ContainerCodePackagePropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerCodePackageProperties)(nil)).Elem()
}

func (i ContainerCodePackagePropertiesArray) ToContainerCodePackagePropertiesArrayOutput() ContainerCodePackagePropertiesArrayOutput {
	return i.ToContainerCodePackagePropertiesArrayOutputWithContext(context.Background())
}

func (i ContainerCodePackagePropertiesArray) ToContainerCodePackagePropertiesArrayOutputWithContext(ctx context.Context) ContainerCodePackagePropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerCodePackagePropertiesArrayOutput)
}

// Describes a container and its runtime properties.
type ContainerCodePackagePropertiesOutput struct{ *pulumi.OutputState }

func (ContainerCodePackagePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerCodePackageProperties)(nil)).Elem()
}

func (o ContainerCodePackagePropertiesOutput) ToContainerCodePackagePropertiesOutput() ContainerCodePackagePropertiesOutput {
	return o
}

func (o ContainerCodePackagePropertiesOutput) ToContainerCodePackagePropertiesOutputWithContext(ctx context.Context) ContainerCodePackagePropertiesOutput {
	return o
}

// Command array to execute within the container in exec form.
func (o ContainerCodePackagePropertiesOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerCodePackageProperties) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

// Reference to sinks in DiagnosticsDescription.
func (o ContainerCodePackagePropertiesOutput) Diagnostics() DiagnosticsRefPtrOutput {
	return o.ApplyT(func(v ContainerCodePackageProperties) *DiagnosticsRef { return v.Diagnostics }).(DiagnosticsRefPtrOutput)
}

// The endpoints exposed by this container.
func (o ContainerCodePackagePropertiesOutput) Endpoints() EndpointPropertiesArrayOutput {
	return o.ApplyT(func(v ContainerCodePackageProperties) []EndpointProperties { return v.Endpoints }).(EndpointPropertiesArrayOutput)
}

// Override for the default entry point in the container.
func (o ContainerCodePackagePropertiesOutput) Entrypoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerCodePackageProperties) *string { return v.Entrypoint }).(pulumi.StringPtrOutput)
}

// The environment variables to set in this container
func (o ContainerCodePackagePropertiesOutput) EnvironmentVariables() EnvironmentVariableArrayOutput {
	return o.ApplyT(func(v ContainerCodePackageProperties) []EnvironmentVariable { return v.EnvironmentVariables }).(EnvironmentVariableArrayOutput)
}

// The Container image to use.
func (o ContainerCodePackagePropertiesOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerCodePackageProperties) string { return v.Image }).(pulumi.StringOutput)
}

// Image registry credential.
func (o ContainerCodePackagePropertiesOutput) ImageRegistryCredential() ImageRegistryCredentialPtrOutput {
	return o.ApplyT(func(v ContainerCodePackageProperties) *ImageRegistryCredential { return v.ImageRegistryCredential }).(ImageRegistryCredentialPtrOutput)
}

// The labels to set in this container.
func (o ContainerCodePackagePropertiesOutput) Labels() ContainerLabelArrayOutput {
	return o.ApplyT(func(v ContainerCodePackageProperties) []ContainerLabel { return v.Labels }).(ContainerLabelArrayOutput)
}

// The name of the code package.
func (o ContainerCodePackagePropertiesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerCodePackageProperties) string { return v.Name }).(pulumi.StringOutput)
}

// This type describes the resource requirements for a container or a service.
func (o ContainerCodePackagePropertiesOutput) Resources() ResourceRequirementsOutput {
	return o.ApplyT(func(v ContainerCodePackageProperties) ResourceRequirements { return v.Resources }).(ResourceRequirementsOutput)
}

// The settings to set in this container. The setting file path can be fetched from environment variable "Fabric_SettingPath". The path for Windows container is "C:\\secrets". The path for Linux container is "/var/secrets".
func (o ContainerCodePackagePropertiesOutput) Settings() SettingArrayOutput {
	return o.ApplyT(func(v ContainerCodePackageProperties) []Setting { return v.Settings }).(SettingArrayOutput)
}

// The volumes to be attached to the container.
func (o ContainerCodePackagePropertiesOutput) VolumeRefs() ContainerVolumeArrayOutput {
	return o.ApplyT(func(v ContainerCodePackageProperties) []ContainerVolume { return v.VolumeRefs }).(ContainerVolumeArrayOutput)
}

type ContainerCodePackagePropertiesArrayOutput struct{ *pulumi.OutputState }

func (ContainerCodePackagePropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerCodePackageProperties)(nil)).Elem()
}

func (o ContainerCodePackagePropertiesArrayOutput) ToContainerCodePackagePropertiesArrayOutput() ContainerCodePackagePropertiesArrayOutput {
	return o
}

func (o ContainerCodePackagePropertiesArrayOutput) ToContainerCodePackagePropertiesArrayOutputWithContext(ctx context.Context) ContainerCodePackagePropertiesArrayOutput {
	return o
}

func (o ContainerCodePackagePropertiesArrayOutput) Index(i pulumi.IntInput) ContainerCodePackagePropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerCodePackageProperties {
		return vs[0].([]ContainerCodePackageProperties)[vs[1].(int)]
	}).(ContainerCodePackagePropertiesOutput)
}

// Describes a container and its runtime properties.
type ContainerCodePackagePropertiesResponse struct {
	// Command array to execute within the container in exec form.
	Commands []string `pulumi:"commands"`
	// Reference to sinks in DiagnosticsDescription.
	Diagnostics *DiagnosticsRefResponse `pulumi:"diagnostics"`
	// The endpoints exposed by this container.
	Endpoints []EndpointPropertiesResponse `pulumi:"endpoints"`
	// Override for the default entry point in the container.
	Entrypoint *string `pulumi:"entrypoint"`
	// The environment variables to set in this container
	EnvironmentVariables []EnvironmentVariableResponse `pulumi:"environmentVariables"`
	// The Container image to use.
	Image string `pulumi:"image"`
	// Image registry credential.
	ImageRegistryCredential *ImageRegistryCredentialResponse `pulumi:"imageRegistryCredential"`
	// Runtime information of a container instance.
	InstanceView ContainerInstanceViewResponse `pulumi:"instanceView"`
	// The labels to set in this container.
	Labels []ContainerLabelResponse `pulumi:"labels"`
	// The name of the code package.
	Name string `pulumi:"name"`
	// This type describes the resource requirements for a container or a service.
	Resources ResourceRequirementsResponse `pulumi:"resources"`
	// The settings to set in this container. The setting file path can be fetched from environment variable "Fabric_SettingPath". The path for Windows container is "C:\\secrets". The path for Linux container is "/var/secrets".
	Settings []SettingResponse `pulumi:"settings"`
	// The volumes to be attached to the container.
	VolumeRefs []ContainerVolumeResponse `pulumi:"volumeRefs"`
}

// ContainerCodePackagePropertiesResponseInput is an input type that accepts ContainerCodePackagePropertiesResponseArgs and ContainerCodePackagePropertiesResponseOutput values.
// You can construct a concrete instance of `ContainerCodePackagePropertiesResponseInput` via:
//
//          ContainerCodePackagePropertiesResponseArgs{...}
type ContainerCodePackagePropertiesResponseInput interface {
	pulumi.Input

	ToContainerCodePackagePropertiesResponseOutput() ContainerCodePackagePropertiesResponseOutput
	ToContainerCodePackagePropertiesResponseOutputWithContext(context.Context) ContainerCodePackagePropertiesResponseOutput
}

// Describes a container and its runtime properties.
type ContainerCodePackagePropertiesResponseArgs struct {
	// Command array to execute within the container in exec form.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
	// Reference to sinks in DiagnosticsDescription.
	Diagnostics DiagnosticsRefResponsePtrInput `pulumi:"diagnostics"`
	// The endpoints exposed by this container.
	Endpoints EndpointPropertiesResponseArrayInput `pulumi:"endpoints"`
	// Override for the default entry point in the container.
	Entrypoint pulumi.StringPtrInput `pulumi:"entrypoint"`
	// The environment variables to set in this container
	EnvironmentVariables EnvironmentVariableResponseArrayInput `pulumi:"environmentVariables"`
	// The Container image to use.
	Image pulumi.StringInput `pulumi:"image"`
	// Image registry credential.
	ImageRegistryCredential ImageRegistryCredentialResponsePtrInput `pulumi:"imageRegistryCredential"`
	// Runtime information of a container instance.
	InstanceView ContainerInstanceViewResponseInput `pulumi:"instanceView"`
	// The labels to set in this container.
	Labels ContainerLabelResponseArrayInput `pulumi:"labels"`
	// The name of the code package.
	Name pulumi.StringInput `pulumi:"name"`
	// This type describes the resource requirements for a container or a service.
	Resources ResourceRequirementsResponseInput `pulumi:"resources"`
	// The settings to set in this container. The setting file path can be fetched from environment variable "Fabric_SettingPath". The path for Windows container is "C:\\secrets". The path for Linux container is "/var/secrets".
	Settings SettingResponseArrayInput `pulumi:"settings"`
	// The volumes to be attached to the container.
	VolumeRefs ContainerVolumeResponseArrayInput `pulumi:"volumeRefs"`
}

func (ContainerCodePackagePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerCodePackagePropertiesResponse)(nil)).Elem()
}

func (i ContainerCodePackagePropertiesResponseArgs) ToContainerCodePackagePropertiesResponseOutput() ContainerCodePackagePropertiesResponseOutput {
	return i.ToContainerCodePackagePropertiesResponseOutputWithContext(context.Background())
}

func (i ContainerCodePackagePropertiesResponseArgs) ToContainerCodePackagePropertiesResponseOutputWithContext(ctx context.Context) ContainerCodePackagePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerCodePackagePropertiesResponseOutput)
}

// ContainerCodePackagePropertiesResponseArrayInput is an input type that accepts ContainerCodePackagePropertiesResponseArray and ContainerCodePackagePropertiesResponseArrayOutput values.
// You can construct a concrete instance of `ContainerCodePackagePropertiesResponseArrayInput` via:
//
//          ContainerCodePackagePropertiesResponseArray{ ContainerCodePackagePropertiesResponseArgs{...} }
type ContainerCodePackagePropertiesResponseArrayInput interface {
	pulumi.Input

	ToContainerCodePackagePropertiesResponseArrayOutput() ContainerCodePackagePropertiesResponseArrayOutput
	ToContainerCodePackagePropertiesResponseArrayOutputWithContext(context.Context) ContainerCodePackagePropertiesResponseArrayOutput
}

type ContainerCodePackagePropertiesResponseArray []ContainerCodePackagePropertiesResponseInput

func (ContainerCodePackagePropertiesResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerCodePackagePropertiesResponse)(nil)).Elem()
}

func (i ContainerCodePackagePropertiesResponseArray) ToContainerCodePackagePropertiesResponseArrayOutput() ContainerCodePackagePropertiesResponseArrayOutput {
	return i.ToContainerCodePackagePropertiesResponseArrayOutputWithContext(context.Background())
}

func (i ContainerCodePackagePropertiesResponseArray) ToContainerCodePackagePropertiesResponseArrayOutputWithContext(ctx context.Context) ContainerCodePackagePropertiesResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerCodePackagePropertiesResponseArrayOutput)
}

// Describes a container and its runtime properties.
type ContainerCodePackagePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ContainerCodePackagePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerCodePackagePropertiesResponse)(nil)).Elem()
}

func (o ContainerCodePackagePropertiesResponseOutput) ToContainerCodePackagePropertiesResponseOutput() ContainerCodePackagePropertiesResponseOutput {
	return o
}

func (o ContainerCodePackagePropertiesResponseOutput) ToContainerCodePackagePropertiesResponseOutputWithContext(ctx context.Context) ContainerCodePackagePropertiesResponseOutput {
	return o
}

// Command array to execute within the container in exec form.
func (o ContainerCodePackagePropertiesResponseOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerCodePackagePropertiesResponse) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

// Reference to sinks in DiagnosticsDescription.
func (o ContainerCodePackagePropertiesResponseOutput) Diagnostics() DiagnosticsRefResponsePtrOutput {
	return o.ApplyT(func(v ContainerCodePackagePropertiesResponse) *DiagnosticsRefResponse { return v.Diagnostics }).(DiagnosticsRefResponsePtrOutput)
}

// The endpoints exposed by this container.
func (o ContainerCodePackagePropertiesResponseOutput) Endpoints() EndpointPropertiesResponseArrayOutput {
	return o.ApplyT(func(v ContainerCodePackagePropertiesResponse) []EndpointPropertiesResponse { return v.Endpoints }).(EndpointPropertiesResponseArrayOutput)
}

// Override for the default entry point in the container.
func (o ContainerCodePackagePropertiesResponseOutput) Entrypoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerCodePackagePropertiesResponse) *string { return v.Entrypoint }).(pulumi.StringPtrOutput)
}

// The environment variables to set in this container
func (o ContainerCodePackagePropertiesResponseOutput) EnvironmentVariables() EnvironmentVariableResponseArrayOutput {
	return o.ApplyT(func(v ContainerCodePackagePropertiesResponse) []EnvironmentVariableResponse {
		return v.EnvironmentVariables
	}).(EnvironmentVariableResponseArrayOutput)
}

// The Container image to use.
func (o ContainerCodePackagePropertiesResponseOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerCodePackagePropertiesResponse) string { return v.Image }).(pulumi.StringOutput)
}

// Image registry credential.
func (o ContainerCodePackagePropertiesResponseOutput) ImageRegistryCredential() ImageRegistryCredentialResponsePtrOutput {
	return o.ApplyT(func(v ContainerCodePackagePropertiesResponse) *ImageRegistryCredentialResponse {
		return v.ImageRegistryCredential
	}).(ImageRegistryCredentialResponsePtrOutput)
}

// Runtime information of a container instance.
func (o ContainerCodePackagePropertiesResponseOutput) InstanceView() ContainerInstanceViewResponseOutput {
	return o.ApplyT(func(v ContainerCodePackagePropertiesResponse) ContainerInstanceViewResponse { return v.InstanceView }).(ContainerInstanceViewResponseOutput)
}

// The labels to set in this container.
func (o ContainerCodePackagePropertiesResponseOutput) Labels() ContainerLabelResponseArrayOutput {
	return o.ApplyT(func(v ContainerCodePackagePropertiesResponse) []ContainerLabelResponse { return v.Labels }).(ContainerLabelResponseArrayOutput)
}

// The name of the code package.
func (o ContainerCodePackagePropertiesResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerCodePackagePropertiesResponse) string { return v.Name }).(pulumi.StringOutput)
}

// This type describes the resource requirements for a container or a service.
func (o ContainerCodePackagePropertiesResponseOutput) Resources() ResourceRequirementsResponseOutput {
	return o.ApplyT(func(v ContainerCodePackagePropertiesResponse) ResourceRequirementsResponse { return v.Resources }).(ResourceRequirementsResponseOutput)
}

// The settings to set in this container. The setting file path can be fetched from environment variable "Fabric_SettingPath". The path for Windows container is "C:\\secrets". The path for Linux container is "/var/secrets".
func (o ContainerCodePackagePropertiesResponseOutput) Settings() SettingResponseArrayOutput {
	return o.ApplyT(func(v ContainerCodePackagePropertiesResponse) []SettingResponse { return v.Settings }).(SettingResponseArrayOutput)
}

// The volumes to be attached to the container.
func (o ContainerCodePackagePropertiesResponseOutput) VolumeRefs() ContainerVolumeResponseArrayOutput {
	return o.ApplyT(func(v ContainerCodePackagePropertiesResponse) []ContainerVolumeResponse { return v.VolumeRefs }).(ContainerVolumeResponseArrayOutput)
}

type ContainerCodePackagePropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerCodePackagePropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerCodePackagePropertiesResponse)(nil)).Elem()
}

func (o ContainerCodePackagePropertiesResponseArrayOutput) ToContainerCodePackagePropertiesResponseArrayOutput() ContainerCodePackagePropertiesResponseArrayOutput {
	return o
}

func (o ContainerCodePackagePropertiesResponseArrayOutput) ToContainerCodePackagePropertiesResponseArrayOutputWithContext(ctx context.Context) ContainerCodePackagePropertiesResponseArrayOutput {
	return o
}

func (o ContainerCodePackagePropertiesResponseArrayOutput) Index(i pulumi.IntInput) ContainerCodePackagePropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerCodePackagePropertiesResponse {
		return vs[0].([]ContainerCodePackagePropertiesResponse)[vs[1].(int)]
	}).(ContainerCodePackagePropertiesResponseOutput)
}

// A container event.
type ContainerEventResponse struct {
	// The count of the event.
	Count *int `pulumi:"count"`
	// Date/time of the first event.
	FirstTimestamp *string `pulumi:"firstTimestamp"`
	// Date/time of the last event.
	LastTimestamp *string `pulumi:"lastTimestamp"`
	// The event message
	Message *string `pulumi:"message"`
	// The name of the container event.
	Name *string `pulumi:"name"`
	// The event type.
	Type *string `pulumi:"type"`
}

// ContainerEventResponseInput is an input type that accepts ContainerEventResponseArgs and ContainerEventResponseOutput values.
// You can construct a concrete instance of `ContainerEventResponseInput` via:
//
//          ContainerEventResponseArgs{...}
type ContainerEventResponseInput interface {
	pulumi.Input

	ToContainerEventResponseOutput() ContainerEventResponseOutput
	ToContainerEventResponseOutputWithContext(context.Context) ContainerEventResponseOutput
}

// A container event.
type ContainerEventResponseArgs struct {
	// The count of the event.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Date/time of the first event.
	FirstTimestamp pulumi.StringPtrInput `pulumi:"firstTimestamp"`
	// Date/time of the last event.
	LastTimestamp pulumi.StringPtrInput `pulumi:"lastTimestamp"`
	// The event message
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The name of the container event.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The event type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ContainerEventResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerEventResponse)(nil)).Elem()
}

func (i ContainerEventResponseArgs) ToContainerEventResponseOutput() ContainerEventResponseOutput {
	return i.ToContainerEventResponseOutputWithContext(context.Background())
}

func (i ContainerEventResponseArgs) ToContainerEventResponseOutputWithContext(ctx context.Context) ContainerEventResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerEventResponseOutput)
}

// ContainerEventResponseArrayInput is an input type that accepts ContainerEventResponseArray and ContainerEventResponseArrayOutput values.
// You can construct a concrete instance of `ContainerEventResponseArrayInput` via:
//
//          ContainerEventResponseArray{ ContainerEventResponseArgs{...} }
type ContainerEventResponseArrayInput interface {
	pulumi.Input

	ToContainerEventResponseArrayOutput() ContainerEventResponseArrayOutput
	ToContainerEventResponseArrayOutputWithContext(context.Context) ContainerEventResponseArrayOutput
}

type ContainerEventResponseArray []ContainerEventResponseInput

func (ContainerEventResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerEventResponse)(nil)).Elem()
}

func (i ContainerEventResponseArray) ToContainerEventResponseArrayOutput() ContainerEventResponseArrayOutput {
	return i.ToContainerEventResponseArrayOutputWithContext(context.Background())
}

func (i ContainerEventResponseArray) ToContainerEventResponseArrayOutputWithContext(ctx context.Context) ContainerEventResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerEventResponseArrayOutput)
}

// A container event.
type ContainerEventResponseOutput struct{ *pulumi.OutputState }

func (ContainerEventResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerEventResponse)(nil)).Elem()
}

func (o ContainerEventResponseOutput) ToContainerEventResponseOutput() ContainerEventResponseOutput {
	return o
}

func (o ContainerEventResponseOutput) ToContainerEventResponseOutputWithContext(ctx context.Context) ContainerEventResponseOutput {
	return o
}

// The count of the event.
func (o ContainerEventResponseOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerEventResponse) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Date/time of the first event.
func (o ContainerEventResponseOutput) FirstTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerEventResponse) *string { return v.FirstTimestamp }).(pulumi.StringPtrOutput)
}

// Date/time of the last event.
func (o ContainerEventResponseOutput) LastTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerEventResponse) *string { return v.LastTimestamp }).(pulumi.StringPtrOutput)
}

// The event message
func (o ContainerEventResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerEventResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The name of the container event.
func (o ContainerEventResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerEventResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The event type.
func (o ContainerEventResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerEventResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ContainerEventResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerEventResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerEventResponse)(nil)).Elem()
}

func (o ContainerEventResponseArrayOutput) ToContainerEventResponseArrayOutput() ContainerEventResponseArrayOutput {
	return o
}

func (o ContainerEventResponseArrayOutput) ToContainerEventResponseArrayOutputWithContext(ctx context.Context) ContainerEventResponseArrayOutput {
	return o
}

func (o ContainerEventResponseArrayOutput) Index(i pulumi.IntInput) ContainerEventResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerEventResponse {
		return vs[0].([]ContainerEventResponse)[vs[1].(int)]
	}).(ContainerEventResponseOutput)
}

// Runtime information of a container instance.
type ContainerInstanceViewResponse struct {
	// Current container instance state.
	CurrentState *ContainerStateResponse `pulumi:"currentState"`
	// The events of this container instance.
	Events []ContainerEventResponse `pulumi:"events"`
	// Previous container instance state.
	PreviousState *ContainerStateResponse `pulumi:"previousState"`
	// The number of times the container has been restarted.
	RestartCount *int `pulumi:"restartCount"`
}

// ContainerInstanceViewResponseInput is an input type that accepts ContainerInstanceViewResponseArgs and ContainerInstanceViewResponseOutput values.
// You can construct a concrete instance of `ContainerInstanceViewResponseInput` via:
//
//          ContainerInstanceViewResponseArgs{...}
type ContainerInstanceViewResponseInput interface {
	pulumi.Input

	ToContainerInstanceViewResponseOutput() ContainerInstanceViewResponseOutput
	ToContainerInstanceViewResponseOutputWithContext(context.Context) ContainerInstanceViewResponseOutput
}

// Runtime information of a container instance.
type ContainerInstanceViewResponseArgs struct {
	// Current container instance state.
	CurrentState ContainerStateResponsePtrInput `pulumi:"currentState"`
	// The events of this container instance.
	Events ContainerEventResponseArrayInput `pulumi:"events"`
	// Previous container instance state.
	PreviousState ContainerStateResponsePtrInput `pulumi:"previousState"`
	// The number of times the container has been restarted.
	RestartCount pulumi.IntPtrInput `pulumi:"restartCount"`
}

func (ContainerInstanceViewResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceViewResponse)(nil)).Elem()
}

func (i ContainerInstanceViewResponseArgs) ToContainerInstanceViewResponseOutput() ContainerInstanceViewResponseOutput {
	return i.ToContainerInstanceViewResponseOutputWithContext(context.Background())
}

func (i ContainerInstanceViewResponseArgs) ToContainerInstanceViewResponseOutputWithContext(ctx context.Context) ContainerInstanceViewResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceViewResponseOutput)
}

// Runtime information of a container instance.
type ContainerInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (ContainerInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceViewResponse)(nil)).Elem()
}

func (o ContainerInstanceViewResponseOutput) ToContainerInstanceViewResponseOutput() ContainerInstanceViewResponseOutput {
	return o
}

func (o ContainerInstanceViewResponseOutput) ToContainerInstanceViewResponseOutputWithContext(ctx context.Context) ContainerInstanceViewResponseOutput {
	return o
}

// Current container instance state.
func (o ContainerInstanceViewResponseOutput) CurrentState() ContainerStateResponsePtrOutput {
	return o.ApplyT(func(v ContainerInstanceViewResponse) *ContainerStateResponse { return v.CurrentState }).(ContainerStateResponsePtrOutput)
}

// The events of this container instance.
func (o ContainerInstanceViewResponseOutput) Events() ContainerEventResponseArrayOutput {
	return o.ApplyT(func(v ContainerInstanceViewResponse) []ContainerEventResponse { return v.Events }).(ContainerEventResponseArrayOutput)
}

// Previous container instance state.
func (o ContainerInstanceViewResponseOutput) PreviousState() ContainerStateResponsePtrOutput {
	return o.ApplyT(func(v ContainerInstanceViewResponse) *ContainerStateResponse { return v.PreviousState }).(ContainerStateResponsePtrOutput)
}

// The number of times the container has been restarted.
func (o ContainerInstanceViewResponseOutput) RestartCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceViewResponse) *int { return v.RestartCount }).(pulumi.IntPtrOutput)
}

// Describes a container label.
type ContainerLabel struct {
	// The name of the container label.
	Name string `pulumi:"name"`
	// The value of the container label.
	Value string `pulumi:"value"`
}

// ContainerLabelInput is an input type that accepts ContainerLabelArgs and ContainerLabelOutput values.
// You can construct a concrete instance of `ContainerLabelInput` via:
//
//          ContainerLabelArgs{...}
type ContainerLabelInput interface {
	pulumi.Input

	ToContainerLabelOutput() ContainerLabelOutput
	ToContainerLabelOutputWithContext(context.Context) ContainerLabelOutput
}

// Describes a container label.
type ContainerLabelArgs struct {
	// The name of the container label.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the container label.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ContainerLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerLabel)(nil)).Elem()
}

func (i ContainerLabelArgs) ToContainerLabelOutput() ContainerLabelOutput {
	return i.ToContainerLabelOutputWithContext(context.Background())
}

func (i ContainerLabelArgs) ToContainerLabelOutputWithContext(ctx context.Context) ContainerLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerLabelOutput)
}

// ContainerLabelArrayInput is an input type that accepts ContainerLabelArray and ContainerLabelArrayOutput values.
// You can construct a concrete instance of `ContainerLabelArrayInput` via:
//
//          ContainerLabelArray{ ContainerLabelArgs{...} }
type ContainerLabelArrayInput interface {
	pulumi.Input

	ToContainerLabelArrayOutput() ContainerLabelArrayOutput
	ToContainerLabelArrayOutputWithContext(context.Context) ContainerLabelArrayOutput
}

type ContainerLabelArray []ContainerLabelInput

func (ContainerLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerLabel)(nil)).Elem()
}

func (i ContainerLabelArray) ToContainerLabelArrayOutput() ContainerLabelArrayOutput {
	return i.ToContainerLabelArrayOutputWithContext(context.Background())
}

func (i ContainerLabelArray) ToContainerLabelArrayOutputWithContext(ctx context.Context) ContainerLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerLabelArrayOutput)
}

// Describes a container label.
type ContainerLabelOutput struct{ *pulumi.OutputState }

func (ContainerLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerLabel)(nil)).Elem()
}

func (o ContainerLabelOutput) ToContainerLabelOutput() ContainerLabelOutput {
	return o
}

func (o ContainerLabelOutput) ToContainerLabelOutputWithContext(ctx context.Context) ContainerLabelOutput {
	return o
}

// The name of the container label.
func (o ContainerLabelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerLabel) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the container label.
func (o ContainerLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerLabel) string { return v.Value }).(pulumi.StringOutput)
}

type ContainerLabelArrayOutput struct{ *pulumi.OutputState }

func (ContainerLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerLabel)(nil)).Elem()
}

func (o ContainerLabelArrayOutput) ToContainerLabelArrayOutput() ContainerLabelArrayOutput {
	return o
}

func (o ContainerLabelArrayOutput) ToContainerLabelArrayOutputWithContext(ctx context.Context) ContainerLabelArrayOutput {
	return o
}

func (o ContainerLabelArrayOutput) Index(i pulumi.IntInput) ContainerLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerLabel {
		return vs[0].([]ContainerLabel)[vs[1].(int)]
	}).(ContainerLabelOutput)
}

// Describes a container label.
type ContainerLabelResponse struct {
	// The name of the container label.
	Name string `pulumi:"name"`
	// The value of the container label.
	Value string `pulumi:"value"`
}

// ContainerLabelResponseInput is an input type that accepts ContainerLabelResponseArgs and ContainerLabelResponseOutput values.
// You can construct a concrete instance of `ContainerLabelResponseInput` via:
//
//          ContainerLabelResponseArgs{...}
type ContainerLabelResponseInput interface {
	pulumi.Input

	ToContainerLabelResponseOutput() ContainerLabelResponseOutput
	ToContainerLabelResponseOutputWithContext(context.Context) ContainerLabelResponseOutput
}

// Describes a container label.
type ContainerLabelResponseArgs struct {
	// The name of the container label.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the container label.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ContainerLabelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerLabelResponse)(nil)).Elem()
}

func (i ContainerLabelResponseArgs) ToContainerLabelResponseOutput() ContainerLabelResponseOutput {
	return i.ToContainerLabelResponseOutputWithContext(context.Background())
}

func (i ContainerLabelResponseArgs) ToContainerLabelResponseOutputWithContext(ctx context.Context) ContainerLabelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerLabelResponseOutput)
}

// ContainerLabelResponseArrayInput is an input type that accepts ContainerLabelResponseArray and ContainerLabelResponseArrayOutput values.
// You can construct a concrete instance of `ContainerLabelResponseArrayInput` via:
//
//          ContainerLabelResponseArray{ ContainerLabelResponseArgs{...} }
type ContainerLabelResponseArrayInput interface {
	pulumi.Input

	ToContainerLabelResponseArrayOutput() ContainerLabelResponseArrayOutput
	ToContainerLabelResponseArrayOutputWithContext(context.Context) ContainerLabelResponseArrayOutput
}

type ContainerLabelResponseArray []ContainerLabelResponseInput

func (ContainerLabelResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerLabelResponse)(nil)).Elem()
}

func (i ContainerLabelResponseArray) ToContainerLabelResponseArrayOutput() ContainerLabelResponseArrayOutput {
	return i.ToContainerLabelResponseArrayOutputWithContext(context.Background())
}

func (i ContainerLabelResponseArray) ToContainerLabelResponseArrayOutputWithContext(ctx context.Context) ContainerLabelResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerLabelResponseArrayOutput)
}

// Describes a container label.
type ContainerLabelResponseOutput struct{ *pulumi.OutputState }

func (ContainerLabelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerLabelResponse)(nil)).Elem()
}

func (o ContainerLabelResponseOutput) ToContainerLabelResponseOutput() ContainerLabelResponseOutput {
	return o
}

func (o ContainerLabelResponseOutput) ToContainerLabelResponseOutputWithContext(ctx context.Context) ContainerLabelResponseOutput {
	return o
}

// The name of the container label.
func (o ContainerLabelResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerLabelResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the container label.
func (o ContainerLabelResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerLabelResponse) string { return v.Value }).(pulumi.StringOutput)
}

type ContainerLabelResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerLabelResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerLabelResponse)(nil)).Elem()
}

func (o ContainerLabelResponseArrayOutput) ToContainerLabelResponseArrayOutput() ContainerLabelResponseArrayOutput {
	return o
}

func (o ContainerLabelResponseArrayOutput) ToContainerLabelResponseArrayOutputWithContext(ctx context.Context) ContainerLabelResponseArrayOutput {
	return o
}

func (o ContainerLabelResponseArrayOutput) Index(i pulumi.IntInput) ContainerLabelResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerLabelResponse {
		return vs[0].([]ContainerLabelResponse)[vs[1].(int)]
	}).(ContainerLabelResponseOutput)
}

// The container state.
type ContainerStateResponse struct {
	// Human-readable status of this state.
	DetailStatus *string `pulumi:"detailStatus"`
	// The container exit code.
	ExitCode *string `pulumi:"exitCode"`
	// Date/time when the container state finished.
	FinishTime *string `pulumi:"finishTime"`
	// Date/time when the container state started.
	StartTime *string `pulumi:"startTime"`
	// The state of this container
	State *string `pulumi:"state"`
}

// ContainerStateResponseInput is an input type that accepts ContainerStateResponseArgs and ContainerStateResponseOutput values.
// You can construct a concrete instance of `ContainerStateResponseInput` via:
//
//          ContainerStateResponseArgs{...}
type ContainerStateResponseInput interface {
	pulumi.Input

	ToContainerStateResponseOutput() ContainerStateResponseOutput
	ToContainerStateResponseOutputWithContext(context.Context) ContainerStateResponseOutput
}

// The container state.
type ContainerStateResponseArgs struct {
	// Human-readable status of this state.
	DetailStatus pulumi.StringPtrInput `pulumi:"detailStatus"`
	// The container exit code.
	ExitCode pulumi.StringPtrInput `pulumi:"exitCode"`
	// Date/time when the container state finished.
	FinishTime pulumi.StringPtrInput `pulumi:"finishTime"`
	// Date/time when the container state started.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The state of this container
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (ContainerStateResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateResponse)(nil)).Elem()
}

func (i ContainerStateResponseArgs) ToContainerStateResponseOutput() ContainerStateResponseOutput {
	return i.ToContainerStateResponseOutputWithContext(context.Background())
}

func (i ContainerStateResponseArgs) ToContainerStateResponseOutputWithContext(ctx context.Context) ContainerStateResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateResponseOutput)
}

func (i ContainerStateResponseArgs) ToContainerStateResponsePtrOutput() ContainerStateResponsePtrOutput {
	return i.ToContainerStateResponsePtrOutputWithContext(context.Background())
}

func (i ContainerStateResponseArgs) ToContainerStateResponsePtrOutputWithContext(ctx context.Context) ContainerStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateResponseOutput).ToContainerStateResponsePtrOutputWithContext(ctx)
}

// ContainerStateResponsePtrInput is an input type that accepts ContainerStateResponseArgs, ContainerStateResponsePtr and ContainerStateResponsePtrOutput values.
// You can construct a concrete instance of `ContainerStateResponsePtrInput` via:
//
//          ContainerStateResponseArgs{...}
//
//  or:
//
//          nil
type ContainerStateResponsePtrInput interface {
	pulumi.Input

	ToContainerStateResponsePtrOutput() ContainerStateResponsePtrOutput
	ToContainerStateResponsePtrOutputWithContext(context.Context) ContainerStateResponsePtrOutput
}

type containerStateResponsePtrType ContainerStateResponseArgs

func ContainerStateResponsePtr(v *ContainerStateResponseArgs) ContainerStateResponsePtrInput {
	return (*containerStateResponsePtrType)(v)
}

func (*containerStateResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerStateResponse)(nil)).Elem()
}

func (i *containerStateResponsePtrType) ToContainerStateResponsePtrOutput() ContainerStateResponsePtrOutput {
	return i.ToContainerStateResponsePtrOutputWithContext(context.Background())
}

func (i *containerStateResponsePtrType) ToContainerStateResponsePtrOutputWithContext(ctx context.Context) ContainerStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerStateResponsePtrOutput)
}

// The container state.
type ContainerStateResponseOutput struct{ *pulumi.OutputState }

func (ContainerStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateResponse)(nil)).Elem()
}

func (o ContainerStateResponseOutput) ToContainerStateResponseOutput() ContainerStateResponseOutput {
	return o
}

func (o ContainerStateResponseOutput) ToContainerStateResponseOutputWithContext(ctx context.Context) ContainerStateResponseOutput {
	return o
}

func (o ContainerStateResponseOutput) ToContainerStateResponsePtrOutput() ContainerStateResponsePtrOutput {
	return o.ToContainerStateResponsePtrOutputWithContext(context.Background())
}

func (o ContainerStateResponseOutput) ToContainerStateResponsePtrOutputWithContext(ctx context.Context) ContainerStateResponsePtrOutput {
	return o.ApplyT(func(v ContainerStateResponse) *ContainerStateResponse {
		return &v
	}).(ContainerStateResponsePtrOutput)
}

// Human-readable status of this state.
func (o ContainerStateResponseOutput) DetailStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateResponse) *string { return v.DetailStatus }).(pulumi.StringPtrOutput)
}

// The container exit code.
func (o ContainerStateResponseOutput) ExitCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateResponse) *string { return v.ExitCode }).(pulumi.StringPtrOutput)
}

// Date/time when the container state finished.
func (o ContainerStateResponseOutput) FinishTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateResponse) *string { return v.FinishTime }).(pulumi.StringPtrOutput)
}

// Date/time when the container state started.
func (o ContainerStateResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The state of this container
func (o ContainerStateResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

type ContainerStateResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerStateResponse)(nil)).Elem()
}

func (o ContainerStateResponsePtrOutput) ToContainerStateResponsePtrOutput() ContainerStateResponsePtrOutput {
	return o
}

func (o ContainerStateResponsePtrOutput) ToContainerStateResponsePtrOutputWithContext(ctx context.Context) ContainerStateResponsePtrOutput {
	return o
}

func (o ContainerStateResponsePtrOutput) Elem() ContainerStateResponseOutput {
	return o.ApplyT(func(v *ContainerStateResponse) ContainerStateResponse { return *v }).(ContainerStateResponseOutput)
}

// Human-readable status of this state.
func (o ContainerStateResponsePtrOutput) DetailStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.DetailStatus
	}).(pulumi.StringPtrOutput)
}

// The container exit code.
func (o ContainerStateResponsePtrOutput) ExitCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExitCode
	}).(pulumi.StringPtrOutput)
}

// Date/time when the container state finished.
func (o ContainerStateResponsePtrOutput) FinishTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.FinishTime
	}).(pulumi.StringPtrOutput)
}

// Date/time when the container state started.
func (o ContainerStateResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The state of this container
func (o ContainerStateResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Describes how a volume is attached to a container.
type ContainerVolume struct {
	// The path within the container at which the volume should be mounted. Only valid path characters are allowed.
	DestinationPath string `pulumi:"destinationPath"`
	// Name of the volume.
	Name string `pulumi:"name"`
	// The flag indicating whether the volume is read only. Default is 'false'.
	ReadOnly *bool `pulumi:"readOnly"`
}

// ContainerVolumeInput is an input type that accepts ContainerVolumeArgs and ContainerVolumeOutput values.
// You can construct a concrete instance of `ContainerVolumeInput` via:
//
//          ContainerVolumeArgs{...}
type ContainerVolumeInput interface {
	pulumi.Input

	ToContainerVolumeOutput() ContainerVolumeOutput
	ToContainerVolumeOutputWithContext(context.Context) ContainerVolumeOutput
}

// Describes how a volume is attached to a container.
type ContainerVolumeArgs struct {
	// The path within the container at which the volume should be mounted. Only valid path characters are allowed.
	DestinationPath pulumi.StringInput `pulumi:"destinationPath"`
	// Name of the volume.
	Name pulumi.StringInput `pulumi:"name"`
	// The flag indicating whether the volume is read only. Default is 'false'.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (ContainerVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerVolume)(nil)).Elem()
}

func (i ContainerVolumeArgs) ToContainerVolumeOutput() ContainerVolumeOutput {
	return i.ToContainerVolumeOutputWithContext(context.Background())
}

func (i ContainerVolumeArgs) ToContainerVolumeOutputWithContext(ctx context.Context) ContainerVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerVolumeOutput)
}

// ContainerVolumeArrayInput is an input type that accepts ContainerVolumeArray and ContainerVolumeArrayOutput values.
// You can construct a concrete instance of `ContainerVolumeArrayInput` via:
//
//          ContainerVolumeArray{ ContainerVolumeArgs{...} }
type ContainerVolumeArrayInput interface {
	pulumi.Input

	ToContainerVolumeArrayOutput() ContainerVolumeArrayOutput
	ToContainerVolumeArrayOutputWithContext(context.Context) ContainerVolumeArrayOutput
}

type ContainerVolumeArray []ContainerVolumeInput

func (ContainerVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerVolume)(nil)).Elem()
}

func (i ContainerVolumeArray) ToContainerVolumeArrayOutput() ContainerVolumeArrayOutput {
	return i.ToContainerVolumeArrayOutputWithContext(context.Background())
}

func (i ContainerVolumeArray) ToContainerVolumeArrayOutputWithContext(ctx context.Context) ContainerVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerVolumeArrayOutput)
}

// Describes how a volume is attached to a container.
type ContainerVolumeOutput struct{ *pulumi.OutputState }

func (ContainerVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerVolume)(nil)).Elem()
}

func (o ContainerVolumeOutput) ToContainerVolumeOutput() ContainerVolumeOutput {
	return o
}

func (o ContainerVolumeOutput) ToContainerVolumeOutputWithContext(ctx context.Context) ContainerVolumeOutput {
	return o
}

// The path within the container at which the volume should be mounted. Only valid path characters are allowed.
func (o ContainerVolumeOutput) DestinationPath() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerVolume) string { return v.DestinationPath }).(pulumi.StringOutput)
}

// Name of the volume.
func (o ContainerVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerVolume) string { return v.Name }).(pulumi.StringOutput)
}

// The flag indicating whether the volume is read only. Default is 'false'.
func (o ContainerVolumeOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerVolume) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type ContainerVolumeArrayOutput struct{ *pulumi.OutputState }

func (ContainerVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerVolume)(nil)).Elem()
}

func (o ContainerVolumeArrayOutput) ToContainerVolumeArrayOutput() ContainerVolumeArrayOutput {
	return o
}

func (o ContainerVolumeArrayOutput) ToContainerVolumeArrayOutputWithContext(ctx context.Context) ContainerVolumeArrayOutput {
	return o
}

func (o ContainerVolumeArrayOutput) Index(i pulumi.IntInput) ContainerVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerVolume {
		return vs[0].([]ContainerVolume)[vs[1].(int)]
	}).(ContainerVolumeOutput)
}

// Describes how a volume is attached to a container.
type ContainerVolumeResponse struct {
	// The path within the container at which the volume should be mounted. Only valid path characters are allowed.
	DestinationPath string `pulumi:"destinationPath"`
	// Name of the volume.
	Name string `pulumi:"name"`
	// The flag indicating whether the volume is read only. Default is 'false'.
	ReadOnly *bool `pulumi:"readOnly"`
}

// ContainerVolumeResponseInput is an input type that accepts ContainerVolumeResponseArgs and ContainerVolumeResponseOutput values.
// You can construct a concrete instance of `ContainerVolumeResponseInput` via:
//
//          ContainerVolumeResponseArgs{...}
type ContainerVolumeResponseInput interface {
	pulumi.Input

	ToContainerVolumeResponseOutput() ContainerVolumeResponseOutput
	ToContainerVolumeResponseOutputWithContext(context.Context) ContainerVolumeResponseOutput
}

// Describes how a volume is attached to a container.
type ContainerVolumeResponseArgs struct {
	// The path within the container at which the volume should be mounted. Only valid path characters are allowed.
	DestinationPath pulumi.StringInput `pulumi:"destinationPath"`
	// Name of the volume.
	Name pulumi.StringInput `pulumi:"name"`
	// The flag indicating whether the volume is read only. Default is 'false'.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (ContainerVolumeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerVolumeResponse)(nil)).Elem()
}

func (i ContainerVolumeResponseArgs) ToContainerVolumeResponseOutput() ContainerVolumeResponseOutput {
	return i.ToContainerVolumeResponseOutputWithContext(context.Background())
}

func (i ContainerVolumeResponseArgs) ToContainerVolumeResponseOutputWithContext(ctx context.Context) ContainerVolumeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerVolumeResponseOutput)
}

// ContainerVolumeResponseArrayInput is an input type that accepts ContainerVolumeResponseArray and ContainerVolumeResponseArrayOutput values.
// You can construct a concrete instance of `ContainerVolumeResponseArrayInput` via:
//
//          ContainerVolumeResponseArray{ ContainerVolumeResponseArgs{...} }
type ContainerVolumeResponseArrayInput interface {
	pulumi.Input

	ToContainerVolumeResponseArrayOutput() ContainerVolumeResponseArrayOutput
	ToContainerVolumeResponseArrayOutputWithContext(context.Context) ContainerVolumeResponseArrayOutput
}

type ContainerVolumeResponseArray []ContainerVolumeResponseInput

func (ContainerVolumeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerVolumeResponse)(nil)).Elem()
}

func (i ContainerVolumeResponseArray) ToContainerVolumeResponseArrayOutput() ContainerVolumeResponseArrayOutput {
	return i.ToContainerVolumeResponseArrayOutputWithContext(context.Background())
}

func (i ContainerVolumeResponseArray) ToContainerVolumeResponseArrayOutputWithContext(ctx context.Context) ContainerVolumeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerVolumeResponseArrayOutput)
}

// Describes how a volume is attached to a container.
type ContainerVolumeResponseOutput struct{ *pulumi.OutputState }

func (ContainerVolumeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerVolumeResponse)(nil)).Elem()
}

func (o ContainerVolumeResponseOutput) ToContainerVolumeResponseOutput() ContainerVolumeResponseOutput {
	return o
}

func (o ContainerVolumeResponseOutput) ToContainerVolumeResponseOutputWithContext(ctx context.Context) ContainerVolumeResponseOutput {
	return o
}

// The path within the container at which the volume should be mounted. Only valid path characters are allowed.
func (o ContainerVolumeResponseOutput) DestinationPath() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerVolumeResponse) string { return v.DestinationPath }).(pulumi.StringOutput)
}

// Name of the volume.
func (o ContainerVolumeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerVolumeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The flag indicating whether the volume is read only. Default is 'false'.
func (o ContainerVolumeResponseOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerVolumeResponse) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type ContainerVolumeResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerVolumeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerVolumeResponse)(nil)).Elem()
}

func (o ContainerVolumeResponseArrayOutput) ToContainerVolumeResponseArrayOutput() ContainerVolumeResponseArrayOutput {
	return o
}

func (o ContainerVolumeResponseArrayOutput) ToContainerVolumeResponseArrayOutputWithContext(ctx context.Context) ContainerVolumeResponseArrayOutput {
	return o
}

func (o ContainerVolumeResponseArrayOutput) Index(i pulumi.IntInput) ContainerVolumeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerVolumeResponse {
		return vs[0].([]ContainerVolumeResponse)[vs[1].(int)]
	}).(ContainerVolumeResponseOutput)
}

// Describes the diagnostics options available
type DiagnosticsDescription struct {
	// The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.
	DefaultSinkRefs []string `pulumi:"defaultSinkRefs"`
	// Status of whether or not sinks are enabled.
	Enabled *bool `pulumi:"enabled"`
	// List of supported sinks that can be referenced.
	Sinks []AzureInternalMonitoringPipelineSinkDescription `pulumi:"sinks"`
}

// DiagnosticsDescriptionInput is an input type that accepts DiagnosticsDescriptionArgs and DiagnosticsDescriptionOutput values.
// You can construct a concrete instance of `DiagnosticsDescriptionInput` via:
//
//          DiagnosticsDescriptionArgs{...}
type DiagnosticsDescriptionInput interface {
	pulumi.Input

	ToDiagnosticsDescriptionOutput() DiagnosticsDescriptionOutput
	ToDiagnosticsDescriptionOutputWithContext(context.Context) DiagnosticsDescriptionOutput
}

// Describes the diagnostics options available
type DiagnosticsDescriptionArgs struct {
	// The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.
	DefaultSinkRefs pulumi.StringArrayInput `pulumi:"defaultSinkRefs"`
	// Status of whether or not sinks are enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// List of supported sinks that can be referenced.
	Sinks AzureInternalMonitoringPipelineSinkDescriptionArrayInput `pulumi:"sinks"`
}

func (DiagnosticsDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsDescription)(nil)).Elem()
}

func (i DiagnosticsDescriptionArgs) ToDiagnosticsDescriptionOutput() DiagnosticsDescriptionOutput {
	return i.ToDiagnosticsDescriptionOutputWithContext(context.Background())
}

func (i DiagnosticsDescriptionArgs) ToDiagnosticsDescriptionOutputWithContext(ctx context.Context) DiagnosticsDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsDescriptionOutput)
}

func (i DiagnosticsDescriptionArgs) ToDiagnosticsDescriptionPtrOutput() DiagnosticsDescriptionPtrOutput {
	return i.ToDiagnosticsDescriptionPtrOutputWithContext(context.Background())
}

func (i DiagnosticsDescriptionArgs) ToDiagnosticsDescriptionPtrOutputWithContext(ctx context.Context) DiagnosticsDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsDescriptionOutput).ToDiagnosticsDescriptionPtrOutputWithContext(ctx)
}

// DiagnosticsDescriptionPtrInput is an input type that accepts DiagnosticsDescriptionArgs, DiagnosticsDescriptionPtr and DiagnosticsDescriptionPtrOutput values.
// You can construct a concrete instance of `DiagnosticsDescriptionPtrInput` via:
//
//          DiagnosticsDescriptionArgs{...}
//
//  or:
//
//          nil
type DiagnosticsDescriptionPtrInput interface {
	pulumi.Input

	ToDiagnosticsDescriptionPtrOutput() DiagnosticsDescriptionPtrOutput
	ToDiagnosticsDescriptionPtrOutputWithContext(context.Context) DiagnosticsDescriptionPtrOutput
}

type diagnosticsDescriptionPtrType DiagnosticsDescriptionArgs

func DiagnosticsDescriptionPtr(v *DiagnosticsDescriptionArgs) DiagnosticsDescriptionPtrInput {
	return (*diagnosticsDescriptionPtrType)(v)
}

func (*diagnosticsDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsDescription)(nil)).Elem()
}

func (i *diagnosticsDescriptionPtrType) ToDiagnosticsDescriptionPtrOutput() DiagnosticsDescriptionPtrOutput {
	return i.ToDiagnosticsDescriptionPtrOutputWithContext(context.Background())
}

func (i *diagnosticsDescriptionPtrType) ToDiagnosticsDescriptionPtrOutputWithContext(ctx context.Context) DiagnosticsDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsDescriptionPtrOutput)
}

// Describes the diagnostics options available
type DiagnosticsDescriptionOutput struct{ *pulumi.OutputState }

func (DiagnosticsDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsDescription)(nil)).Elem()
}

func (o DiagnosticsDescriptionOutput) ToDiagnosticsDescriptionOutput() DiagnosticsDescriptionOutput {
	return o
}

func (o DiagnosticsDescriptionOutput) ToDiagnosticsDescriptionOutputWithContext(ctx context.Context) DiagnosticsDescriptionOutput {
	return o
}

func (o DiagnosticsDescriptionOutput) ToDiagnosticsDescriptionPtrOutput() DiagnosticsDescriptionPtrOutput {
	return o.ToDiagnosticsDescriptionPtrOutputWithContext(context.Background())
}

func (o DiagnosticsDescriptionOutput) ToDiagnosticsDescriptionPtrOutputWithContext(ctx context.Context) DiagnosticsDescriptionPtrOutput {
	return o.ApplyT(func(v DiagnosticsDescription) *DiagnosticsDescription {
		return &v
	}).(DiagnosticsDescriptionPtrOutput)
}

// The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.
func (o DiagnosticsDescriptionOutput) DefaultSinkRefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DiagnosticsDescription) []string { return v.DefaultSinkRefs }).(pulumi.StringArrayOutput)
}

// Status of whether or not sinks are enabled.
func (o DiagnosticsDescriptionOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DiagnosticsDescription) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// List of supported sinks that can be referenced.
func (o DiagnosticsDescriptionOutput) Sinks() AzureInternalMonitoringPipelineSinkDescriptionArrayOutput {
	return o.ApplyT(func(v DiagnosticsDescription) []AzureInternalMonitoringPipelineSinkDescription { return v.Sinks }).(AzureInternalMonitoringPipelineSinkDescriptionArrayOutput)
}

type DiagnosticsDescriptionPtrOutput struct{ *pulumi.OutputState }

func (DiagnosticsDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsDescription)(nil)).Elem()
}

func (o DiagnosticsDescriptionPtrOutput) ToDiagnosticsDescriptionPtrOutput() DiagnosticsDescriptionPtrOutput {
	return o
}

func (o DiagnosticsDescriptionPtrOutput) ToDiagnosticsDescriptionPtrOutputWithContext(ctx context.Context) DiagnosticsDescriptionPtrOutput {
	return o
}

func (o DiagnosticsDescriptionPtrOutput) Elem() DiagnosticsDescriptionOutput {
	return o.ApplyT(func(v *DiagnosticsDescription) DiagnosticsDescription { return *v }).(DiagnosticsDescriptionOutput)
}

// The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.
func (o DiagnosticsDescriptionPtrOutput) DefaultSinkRefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DiagnosticsDescription) []string {
		if v == nil {
			return nil
		}
		return v.DefaultSinkRefs
	}).(pulumi.StringArrayOutput)
}

// Status of whether or not sinks are enabled.
func (o DiagnosticsDescriptionPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DiagnosticsDescription) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// List of supported sinks that can be referenced.
func (o DiagnosticsDescriptionPtrOutput) Sinks() AzureInternalMonitoringPipelineSinkDescriptionArrayOutput {
	return o.ApplyT(func(v *DiagnosticsDescription) []AzureInternalMonitoringPipelineSinkDescription {
		if v == nil {
			return nil
		}
		return v.Sinks
	}).(AzureInternalMonitoringPipelineSinkDescriptionArrayOutput)
}

// Describes the diagnostics options available
type DiagnosticsDescriptionResponse struct {
	// The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.
	DefaultSinkRefs []string `pulumi:"defaultSinkRefs"`
	// Status of whether or not sinks are enabled.
	Enabled *bool `pulumi:"enabled"`
	// List of supported sinks that can be referenced.
	Sinks []AzureInternalMonitoringPipelineSinkDescriptionResponse `pulumi:"sinks"`
}

// DiagnosticsDescriptionResponseInput is an input type that accepts DiagnosticsDescriptionResponseArgs and DiagnosticsDescriptionResponseOutput values.
// You can construct a concrete instance of `DiagnosticsDescriptionResponseInput` via:
//
//          DiagnosticsDescriptionResponseArgs{...}
type DiagnosticsDescriptionResponseInput interface {
	pulumi.Input

	ToDiagnosticsDescriptionResponseOutput() DiagnosticsDescriptionResponseOutput
	ToDiagnosticsDescriptionResponseOutputWithContext(context.Context) DiagnosticsDescriptionResponseOutput
}

// Describes the diagnostics options available
type DiagnosticsDescriptionResponseArgs struct {
	// The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.
	DefaultSinkRefs pulumi.StringArrayInput `pulumi:"defaultSinkRefs"`
	// Status of whether or not sinks are enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// List of supported sinks that can be referenced.
	Sinks AzureInternalMonitoringPipelineSinkDescriptionResponseArrayInput `pulumi:"sinks"`
}

func (DiagnosticsDescriptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsDescriptionResponse)(nil)).Elem()
}

func (i DiagnosticsDescriptionResponseArgs) ToDiagnosticsDescriptionResponseOutput() DiagnosticsDescriptionResponseOutput {
	return i.ToDiagnosticsDescriptionResponseOutputWithContext(context.Background())
}

func (i DiagnosticsDescriptionResponseArgs) ToDiagnosticsDescriptionResponseOutputWithContext(ctx context.Context) DiagnosticsDescriptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsDescriptionResponseOutput)
}

func (i DiagnosticsDescriptionResponseArgs) ToDiagnosticsDescriptionResponsePtrOutput() DiagnosticsDescriptionResponsePtrOutput {
	return i.ToDiagnosticsDescriptionResponsePtrOutputWithContext(context.Background())
}

func (i DiagnosticsDescriptionResponseArgs) ToDiagnosticsDescriptionResponsePtrOutputWithContext(ctx context.Context) DiagnosticsDescriptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsDescriptionResponseOutput).ToDiagnosticsDescriptionResponsePtrOutputWithContext(ctx)
}

// DiagnosticsDescriptionResponsePtrInput is an input type that accepts DiagnosticsDescriptionResponseArgs, DiagnosticsDescriptionResponsePtr and DiagnosticsDescriptionResponsePtrOutput values.
// You can construct a concrete instance of `DiagnosticsDescriptionResponsePtrInput` via:
//
//          DiagnosticsDescriptionResponseArgs{...}
//
//  or:
//
//          nil
type DiagnosticsDescriptionResponsePtrInput interface {
	pulumi.Input

	ToDiagnosticsDescriptionResponsePtrOutput() DiagnosticsDescriptionResponsePtrOutput
	ToDiagnosticsDescriptionResponsePtrOutputWithContext(context.Context) DiagnosticsDescriptionResponsePtrOutput
}

type diagnosticsDescriptionResponsePtrType DiagnosticsDescriptionResponseArgs

func DiagnosticsDescriptionResponsePtr(v *DiagnosticsDescriptionResponseArgs) DiagnosticsDescriptionResponsePtrInput {
	return (*diagnosticsDescriptionResponsePtrType)(v)
}

func (*diagnosticsDescriptionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsDescriptionResponse)(nil)).Elem()
}

func (i *diagnosticsDescriptionResponsePtrType) ToDiagnosticsDescriptionResponsePtrOutput() DiagnosticsDescriptionResponsePtrOutput {
	return i.ToDiagnosticsDescriptionResponsePtrOutputWithContext(context.Background())
}

func (i *diagnosticsDescriptionResponsePtrType) ToDiagnosticsDescriptionResponsePtrOutputWithContext(ctx context.Context) DiagnosticsDescriptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsDescriptionResponsePtrOutput)
}

// Describes the diagnostics options available
type DiagnosticsDescriptionResponseOutput struct{ *pulumi.OutputState }

func (DiagnosticsDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsDescriptionResponse)(nil)).Elem()
}

func (o DiagnosticsDescriptionResponseOutput) ToDiagnosticsDescriptionResponseOutput() DiagnosticsDescriptionResponseOutput {
	return o
}

func (o DiagnosticsDescriptionResponseOutput) ToDiagnosticsDescriptionResponseOutputWithContext(ctx context.Context) DiagnosticsDescriptionResponseOutput {
	return o
}

func (o DiagnosticsDescriptionResponseOutput) ToDiagnosticsDescriptionResponsePtrOutput() DiagnosticsDescriptionResponsePtrOutput {
	return o.ToDiagnosticsDescriptionResponsePtrOutputWithContext(context.Background())
}

func (o DiagnosticsDescriptionResponseOutput) ToDiagnosticsDescriptionResponsePtrOutputWithContext(ctx context.Context) DiagnosticsDescriptionResponsePtrOutput {
	return o.ApplyT(func(v DiagnosticsDescriptionResponse) *DiagnosticsDescriptionResponse {
		return &v
	}).(DiagnosticsDescriptionResponsePtrOutput)
}

// The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.
func (o DiagnosticsDescriptionResponseOutput) DefaultSinkRefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DiagnosticsDescriptionResponse) []string { return v.DefaultSinkRefs }).(pulumi.StringArrayOutput)
}

// Status of whether or not sinks are enabled.
func (o DiagnosticsDescriptionResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DiagnosticsDescriptionResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// List of supported sinks that can be referenced.
func (o DiagnosticsDescriptionResponseOutput) Sinks() AzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput {
	return o.ApplyT(func(v DiagnosticsDescriptionResponse) []AzureInternalMonitoringPipelineSinkDescriptionResponse {
		return v.Sinks
	}).(AzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput)
}

type DiagnosticsDescriptionResponsePtrOutput struct{ *pulumi.OutputState }

func (DiagnosticsDescriptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsDescriptionResponse)(nil)).Elem()
}

func (o DiagnosticsDescriptionResponsePtrOutput) ToDiagnosticsDescriptionResponsePtrOutput() DiagnosticsDescriptionResponsePtrOutput {
	return o
}

func (o DiagnosticsDescriptionResponsePtrOutput) ToDiagnosticsDescriptionResponsePtrOutputWithContext(ctx context.Context) DiagnosticsDescriptionResponsePtrOutput {
	return o
}

func (o DiagnosticsDescriptionResponsePtrOutput) Elem() DiagnosticsDescriptionResponseOutput {
	return o.ApplyT(func(v *DiagnosticsDescriptionResponse) DiagnosticsDescriptionResponse { return *v }).(DiagnosticsDescriptionResponseOutput)
}

// The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.
func (o DiagnosticsDescriptionResponsePtrOutput) DefaultSinkRefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DiagnosticsDescriptionResponse) []string {
		if v == nil {
			return nil
		}
		return v.DefaultSinkRefs
	}).(pulumi.StringArrayOutput)
}

// Status of whether or not sinks are enabled.
func (o DiagnosticsDescriptionResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DiagnosticsDescriptionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// List of supported sinks that can be referenced.
func (o DiagnosticsDescriptionResponsePtrOutput) Sinks() AzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput {
	return o.ApplyT(func(v *DiagnosticsDescriptionResponse) []AzureInternalMonitoringPipelineSinkDescriptionResponse {
		if v == nil {
			return nil
		}
		return v.Sinks
	}).(AzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput)
}

// Reference to sinks in DiagnosticsDescription.
type DiagnosticsRef struct {
	// Status of whether or not sinks are enabled.
	Enabled *bool `pulumi:"enabled"`
	// List of sinks to be used if enabled. References the list of sinks in DiagnosticsDescription.
	SinkRefs []string `pulumi:"sinkRefs"`
}

// DiagnosticsRefInput is an input type that accepts DiagnosticsRefArgs and DiagnosticsRefOutput values.
// You can construct a concrete instance of `DiagnosticsRefInput` via:
//
//          DiagnosticsRefArgs{...}
type DiagnosticsRefInput interface {
	pulumi.Input

	ToDiagnosticsRefOutput() DiagnosticsRefOutput
	ToDiagnosticsRefOutputWithContext(context.Context) DiagnosticsRefOutput
}

// Reference to sinks in DiagnosticsDescription.
type DiagnosticsRefArgs struct {
	// Status of whether or not sinks are enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// List of sinks to be used if enabled. References the list of sinks in DiagnosticsDescription.
	SinkRefs pulumi.StringArrayInput `pulumi:"sinkRefs"`
}

func (DiagnosticsRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsRef)(nil)).Elem()
}

func (i DiagnosticsRefArgs) ToDiagnosticsRefOutput() DiagnosticsRefOutput {
	return i.ToDiagnosticsRefOutputWithContext(context.Background())
}

func (i DiagnosticsRefArgs) ToDiagnosticsRefOutputWithContext(ctx context.Context) DiagnosticsRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsRefOutput)
}

func (i DiagnosticsRefArgs) ToDiagnosticsRefPtrOutput() DiagnosticsRefPtrOutput {
	return i.ToDiagnosticsRefPtrOutputWithContext(context.Background())
}

func (i DiagnosticsRefArgs) ToDiagnosticsRefPtrOutputWithContext(ctx context.Context) DiagnosticsRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsRefOutput).ToDiagnosticsRefPtrOutputWithContext(ctx)
}

// DiagnosticsRefPtrInput is an input type that accepts DiagnosticsRefArgs, DiagnosticsRefPtr and DiagnosticsRefPtrOutput values.
// You can construct a concrete instance of `DiagnosticsRefPtrInput` via:
//
//          DiagnosticsRefArgs{...}
//
//  or:
//
//          nil
type DiagnosticsRefPtrInput interface {
	pulumi.Input

	ToDiagnosticsRefPtrOutput() DiagnosticsRefPtrOutput
	ToDiagnosticsRefPtrOutputWithContext(context.Context) DiagnosticsRefPtrOutput
}

type diagnosticsRefPtrType DiagnosticsRefArgs

func DiagnosticsRefPtr(v *DiagnosticsRefArgs) DiagnosticsRefPtrInput {
	return (*diagnosticsRefPtrType)(v)
}

func (*diagnosticsRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsRef)(nil)).Elem()
}

func (i *diagnosticsRefPtrType) ToDiagnosticsRefPtrOutput() DiagnosticsRefPtrOutput {
	return i.ToDiagnosticsRefPtrOutputWithContext(context.Background())
}

func (i *diagnosticsRefPtrType) ToDiagnosticsRefPtrOutputWithContext(ctx context.Context) DiagnosticsRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsRefPtrOutput)
}

// Reference to sinks in DiagnosticsDescription.
type DiagnosticsRefOutput struct{ *pulumi.OutputState }

func (DiagnosticsRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsRef)(nil)).Elem()
}

func (o DiagnosticsRefOutput) ToDiagnosticsRefOutput() DiagnosticsRefOutput {
	return o
}

func (o DiagnosticsRefOutput) ToDiagnosticsRefOutputWithContext(ctx context.Context) DiagnosticsRefOutput {
	return o
}

func (o DiagnosticsRefOutput) ToDiagnosticsRefPtrOutput() DiagnosticsRefPtrOutput {
	return o.ToDiagnosticsRefPtrOutputWithContext(context.Background())
}

func (o DiagnosticsRefOutput) ToDiagnosticsRefPtrOutputWithContext(ctx context.Context) DiagnosticsRefPtrOutput {
	return o.ApplyT(func(v DiagnosticsRef) *DiagnosticsRef {
		return &v
	}).(DiagnosticsRefPtrOutput)
}

// Status of whether or not sinks are enabled.
func (o DiagnosticsRefOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DiagnosticsRef) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// List of sinks to be used if enabled. References the list of sinks in DiagnosticsDescription.
func (o DiagnosticsRefOutput) SinkRefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DiagnosticsRef) []string { return v.SinkRefs }).(pulumi.StringArrayOutput)
}

type DiagnosticsRefPtrOutput struct{ *pulumi.OutputState }

func (DiagnosticsRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsRef)(nil)).Elem()
}

func (o DiagnosticsRefPtrOutput) ToDiagnosticsRefPtrOutput() DiagnosticsRefPtrOutput {
	return o
}

func (o DiagnosticsRefPtrOutput) ToDiagnosticsRefPtrOutputWithContext(ctx context.Context) DiagnosticsRefPtrOutput {
	return o
}

func (o DiagnosticsRefPtrOutput) Elem() DiagnosticsRefOutput {
	return o.ApplyT(func(v *DiagnosticsRef) DiagnosticsRef { return *v }).(DiagnosticsRefOutput)
}

// Status of whether or not sinks are enabled.
func (o DiagnosticsRefPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DiagnosticsRef) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// List of sinks to be used if enabled. References the list of sinks in DiagnosticsDescription.
func (o DiagnosticsRefPtrOutput) SinkRefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DiagnosticsRef) []string {
		if v == nil {
			return nil
		}
		return v.SinkRefs
	}).(pulumi.StringArrayOutput)
}

// Reference to sinks in DiagnosticsDescription.
type DiagnosticsRefResponse struct {
	// Status of whether or not sinks are enabled.
	Enabled *bool `pulumi:"enabled"`
	// List of sinks to be used if enabled. References the list of sinks in DiagnosticsDescription.
	SinkRefs []string `pulumi:"sinkRefs"`
}

// DiagnosticsRefResponseInput is an input type that accepts DiagnosticsRefResponseArgs and DiagnosticsRefResponseOutput values.
// You can construct a concrete instance of `DiagnosticsRefResponseInput` via:
//
//          DiagnosticsRefResponseArgs{...}
type DiagnosticsRefResponseInput interface {
	pulumi.Input

	ToDiagnosticsRefResponseOutput() DiagnosticsRefResponseOutput
	ToDiagnosticsRefResponseOutputWithContext(context.Context) DiagnosticsRefResponseOutput
}

// Reference to sinks in DiagnosticsDescription.
type DiagnosticsRefResponseArgs struct {
	// Status of whether or not sinks are enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// List of sinks to be used if enabled. References the list of sinks in DiagnosticsDescription.
	SinkRefs pulumi.StringArrayInput `pulumi:"sinkRefs"`
}

func (DiagnosticsRefResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsRefResponse)(nil)).Elem()
}

func (i DiagnosticsRefResponseArgs) ToDiagnosticsRefResponseOutput() DiagnosticsRefResponseOutput {
	return i.ToDiagnosticsRefResponseOutputWithContext(context.Background())
}

func (i DiagnosticsRefResponseArgs) ToDiagnosticsRefResponseOutputWithContext(ctx context.Context) DiagnosticsRefResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsRefResponseOutput)
}

func (i DiagnosticsRefResponseArgs) ToDiagnosticsRefResponsePtrOutput() DiagnosticsRefResponsePtrOutput {
	return i.ToDiagnosticsRefResponsePtrOutputWithContext(context.Background())
}

func (i DiagnosticsRefResponseArgs) ToDiagnosticsRefResponsePtrOutputWithContext(ctx context.Context) DiagnosticsRefResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsRefResponseOutput).ToDiagnosticsRefResponsePtrOutputWithContext(ctx)
}

// DiagnosticsRefResponsePtrInput is an input type that accepts DiagnosticsRefResponseArgs, DiagnosticsRefResponsePtr and DiagnosticsRefResponsePtrOutput values.
// You can construct a concrete instance of `DiagnosticsRefResponsePtrInput` via:
//
//          DiagnosticsRefResponseArgs{...}
//
//  or:
//
//          nil
type DiagnosticsRefResponsePtrInput interface {
	pulumi.Input

	ToDiagnosticsRefResponsePtrOutput() DiagnosticsRefResponsePtrOutput
	ToDiagnosticsRefResponsePtrOutputWithContext(context.Context) DiagnosticsRefResponsePtrOutput
}

type diagnosticsRefResponsePtrType DiagnosticsRefResponseArgs

func DiagnosticsRefResponsePtr(v *DiagnosticsRefResponseArgs) DiagnosticsRefResponsePtrInput {
	return (*diagnosticsRefResponsePtrType)(v)
}

func (*diagnosticsRefResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsRefResponse)(nil)).Elem()
}

func (i *diagnosticsRefResponsePtrType) ToDiagnosticsRefResponsePtrOutput() DiagnosticsRefResponsePtrOutput {
	return i.ToDiagnosticsRefResponsePtrOutputWithContext(context.Background())
}

func (i *diagnosticsRefResponsePtrType) ToDiagnosticsRefResponsePtrOutputWithContext(ctx context.Context) DiagnosticsRefResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsRefResponsePtrOutput)
}

// Reference to sinks in DiagnosticsDescription.
type DiagnosticsRefResponseOutput struct{ *pulumi.OutputState }

func (DiagnosticsRefResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsRefResponse)(nil)).Elem()
}

func (o DiagnosticsRefResponseOutput) ToDiagnosticsRefResponseOutput() DiagnosticsRefResponseOutput {
	return o
}

func (o DiagnosticsRefResponseOutput) ToDiagnosticsRefResponseOutputWithContext(ctx context.Context) DiagnosticsRefResponseOutput {
	return o
}

func (o DiagnosticsRefResponseOutput) ToDiagnosticsRefResponsePtrOutput() DiagnosticsRefResponsePtrOutput {
	return o.ToDiagnosticsRefResponsePtrOutputWithContext(context.Background())
}

func (o DiagnosticsRefResponseOutput) ToDiagnosticsRefResponsePtrOutputWithContext(ctx context.Context) DiagnosticsRefResponsePtrOutput {
	return o.ApplyT(func(v DiagnosticsRefResponse) *DiagnosticsRefResponse {
		return &v
	}).(DiagnosticsRefResponsePtrOutput)
}

// Status of whether or not sinks are enabled.
func (o DiagnosticsRefResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DiagnosticsRefResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// List of sinks to be used if enabled. References the list of sinks in DiagnosticsDescription.
func (o DiagnosticsRefResponseOutput) SinkRefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DiagnosticsRefResponse) []string { return v.SinkRefs }).(pulumi.StringArrayOutput)
}

type DiagnosticsRefResponsePtrOutput struct{ *pulumi.OutputState }

func (DiagnosticsRefResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsRefResponse)(nil)).Elem()
}

func (o DiagnosticsRefResponsePtrOutput) ToDiagnosticsRefResponsePtrOutput() DiagnosticsRefResponsePtrOutput {
	return o
}

func (o DiagnosticsRefResponsePtrOutput) ToDiagnosticsRefResponsePtrOutputWithContext(ctx context.Context) DiagnosticsRefResponsePtrOutput {
	return o
}

func (o DiagnosticsRefResponsePtrOutput) Elem() DiagnosticsRefResponseOutput {
	return o.ApplyT(func(v *DiagnosticsRefResponse) DiagnosticsRefResponse { return *v }).(DiagnosticsRefResponseOutput)
}

// Status of whether or not sinks are enabled.
func (o DiagnosticsRefResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DiagnosticsRefResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// List of sinks to be used if enabled. References the list of sinks in DiagnosticsDescription.
func (o DiagnosticsRefResponsePtrOutput) SinkRefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DiagnosticsRefResponse) []string {
		if v == nil {
			return nil
		}
		return v.SinkRefs
	}).(pulumi.StringArrayOutput)
}

// Describes a container endpoint.
type EndpointProperties struct {
	// The name of the endpoint.
	Name string `pulumi:"name"`
	// Port used by the container.
	Port *int `pulumi:"port"`
}

// EndpointPropertiesInput is an input type that accepts EndpointPropertiesArgs and EndpointPropertiesOutput values.
// You can construct a concrete instance of `EndpointPropertiesInput` via:
//
//          EndpointPropertiesArgs{...}
type EndpointPropertiesInput interface {
	pulumi.Input

	ToEndpointPropertiesOutput() EndpointPropertiesOutput
	ToEndpointPropertiesOutputWithContext(context.Context) EndpointPropertiesOutput
}

// Describes a container endpoint.
type EndpointPropertiesArgs struct {
	// The name of the endpoint.
	Name pulumi.StringInput `pulumi:"name"`
	// Port used by the container.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (EndpointPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointProperties)(nil)).Elem()
}

func (i EndpointPropertiesArgs) ToEndpointPropertiesOutput() EndpointPropertiesOutput {
	return i.ToEndpointPropertiesOutputWithContext(context.Background())
}

func (i EndpointPropertiesArgs) ToEndpointPropertiesOutputWithContext(ctx context.Context) EndpointPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPropertiesOutput)
}

// EndpointPropertiesArrayInput is an input type that accepts EndpointPropertiesArray and EndpointPropertiesArrayOutput values.
// You can construct a concrete instance of `EndpointPropertiesArrayInput` via:
//
//          EndpointPropertiesArray{ EndpointPropertiesArgs{...} }
type EndpointPropertiesArrayInput interface {
	pulumi.Input

	ToEndpointPropertiesArrayOutput() EndpointPropertiesArrayOutput
	ToEndpointPropertiesArrayOutputWithContext(context.Context) EndpointPropertiesArrayOutput
}

type EndpointPropertiesArray []EndpointPropertiesInput

func (EndpointPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointProperties)(nil)).Elem()
}

func (i EndpointPropertiesArray) ToEndpointPropertiesArrayOutput() EndpointPropertiesArrayOutput {
	return i.ToEndpointPropertiesArrayOutputWithContext(context.Background())
}

func (i EndpointPropertiesArray) ToEndpointPropertiesArrayOutputWithContext(ctx context.Context) EndpointPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPropertiesArrayOutput)
}

// Describes a container endpoint.
type EndpointPropertiesOutput struct{ *pulumi.OutputState }

func (EndpointPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointProperties)(nil)).Elem()
}

func (o EndpointPropertiesOutput) ToEndpointPropertiesOutput() EndpointPropertiesOutput {
	return o
}

func (o EndpointPropertiesOutput) ToEndpointPropertiesOutputWithContext(ctx context.Context) EndpointPropertiesOutput {
	return o
}

// The name of the endpoint.
func (o EndpointPropertiesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointProperties) string { return v.Name }).(pulumi.StringOutput)
}

// Port used by the container.
func (o EndpointPropertiesOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointProperties) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type EndpointPropertiesArrayOutput struct{ *pulumi.OutputState }

func (EndpointPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointProperties)(nil)).Elem()
}

func (o EndpointPropertiesArrayOutput) ToEndpointPropertiesArrayOutput() EndpointPropertiesArrayOutput {
	return o
}

func (o EndpointPropertiesArrayOutput) ToEndpointPropertiesArrayOutputWithContext(ctx context.Context) EndpointPropertiesArrayOutput {
	return o
}

func (o EndpointPropertiesArrayOutput) Index(i pulumi.IntInput) EndpointPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointProperties {
		return vs[0].([]EndpointProperties)[vs[1].(int)]
	}).(EndpointPropertiesOutput)
}

// Describes a container endpoint.
type EndpointPropertiesResponse struct {
	// The name of the endpoint.
	Name string `pulumi:"name"`
	// Port used by the container.
	Port *int `pulumi:"port"`
}

// EndpointPropertiesResponseInput is an input type that accepts EndpointPropertiesResponseArgs and EndpointPropertiesResponseOutput values.
// You can construct a concrete instance of `EndpointPropertiesResponseInput` via:
//
//          EndpointPropertiesResponseArgs{...}
type EndpointPropertiesResponseInput interface {
	pulumi.Input

	ToEndpointPropertiesResponseOutput() EndpointPropertiesResponseOutput
	ToEndpointPropertiesResponseOutputWithContext(context.Context) EndpointPropertiesResponseOutput
}

// Describes a container endpoint.
type EndpointPropertiesResponseArgs struct {
	// The name of the endpoint.
	Name pulumi.StringInput `pulumi:"name"`
	// Port used by the container.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (EndpointPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPropertiesResponse)(nil)).Elem()
}

func (i EndpointPropertiesResponseArgs) ToEndpointPropertiesResponseOutput() EndpointPropertiesResponseOutput {
	return i.ToEndpointPropertiesResponseOutputWithContext(context.Background())
}

func (i EndpointPropertiesResponseArgs) ToEndpointPropertiesResponseOutputWithContext(ctx context.Context) EndpointPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPropertiesResponseOutput)
}

// EndpointPropertiesResponseArrayInput is an input type that accepts EndpointPropertiesResponseArray and EndpointPropertiesResponseArrayOutput values.
// You can construct a concrete instance of `EndpointPropertiesResponseArrayInput` via:
//
//          EndpointPropertiesResponseArray{ EndpointPropertiesResponseArgs{...} }
type EndpointPropertiesResponseArrayInput interface {
	pulumi.Input

	ToEndpointPropertiesResponseArrayOutput() EndpointPropertiesResponseArrayOutput
	ToEndpointPropertiesResponseArrayOutputWithContext(context.Context) EndpointPropertiesResponseArrayOutput
}

type EndpointPropertiesResponseArray []EndpointPropertiesResponseInput

func (EndpointPropertiesResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointPropertiesResponse)(nil)).Elem()
}

func (i EndpointPropertiesResponseArray) ToEndpointPropertiesResponseArrayOutput() EndpointPropertiesResponseArrayOutput {
	return i.ToEndpointPropertiesResponseArrayOutputWithContext(context.Background())
}

func (i EndpointPropertiesResponseArray) ToEndpointPropertiesResponseArrayOutputWithContext(ctx context.Context) EndpointPropertiesResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPropertiesResponseArrayOutput)
}

// Describes a container endpoint.
type EndpointPropertiesResponseOutput struct{ *pulumi.OutputState }

func (EndpointPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPropertiesResponse)(nil)).Elem()
}

func (o EndpointPropertiesResponseOutput) ToEndpointPropertiesResponseOutput() EndpointPropertiesResponseOutput {
	return o
}

func (o EndpointPropertiesResponseOutput) ToEndpointPropertiesResponseOutputWithContext(ctx context.Context) EndpointPropertiesResponseOutput {
	return o
}

// The name of the endpoint.
func (o EndpointPropertiesResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Port used by the container.
func (o EndpointPropertiesResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type EndpointPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (EndpointPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointPropertiesResponse)(nil)).Elem()
}

func (o EndpointPropertiesResponseArrayOutput) ToEndpointPropertiesResponseArrayOutput() EndpointPropertiesResponseArrayOutput {
	return o
}

func (o EndpointPropertiesResponseArrayOutput) ToEndpointPropertiesResponseArrayOutputWithContext(ctx context.Context) EndpointPropertiesResponseArrayOutput {
	return o
}

func (o EndpointPropertiesResponseArrayOutput) Index(i pulumi.IntInput) EndpointPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointPropertiesResponse {
		return vs[0].([]EndpointPropertiesResponse)[vs[1].(int)]
	}).(EndpointPropertiesResponseOutput)
}

// Describes an environment variable for the container.
type EnvironmentVariable struct {
	// The name of the environment variable.
	Name *string `pulumi:"name"`
	// The value of the environment variable.
	Value *string `pulumi:"value"`
}

// EnvironmentVariableInput is an input type that accepts EnvironmentVariableArgs and EnvironmentVariableOutput values.
// You can construct a concrete instance of `EnvironmentVariableInput` via:
//
//          EnvironmentVariableArgs{...}
type EnvironmentVariableInput interface {
	pulumi.Input

	ToEnvironmentVariableOutput() EnvironmentVariableOutput
	ToEnvironmentVariableOutputWithContext(context.Context) EnvironmentVariableOutput
}

// Describes an environment variable for the container.
type EnvironmentVariableArgs struct {
	// The name of the environment variable.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariable)(nil)).Elem()
}

func (i EnvironmentVariableArgs) ToEnvironmentVariableOutput() EnvironmentVariableOutput {
	return i.ToEnvironmentVariableOutputWithContext(context.Background())
}

func (i EnvironmentVariableArgs) ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableOutput)
}

// EnvironmentVariableArrayInput is an input type that accepts EnvironmentVariableArray and EnvironmentVariableArrayOutput values.
// You can construct a concrete instance of `EnvironmentVariableArrayInput` via:
//
//          EnvironmentVariableArray{ EnvironmentVariableArgs{...} }
type EnvironmentVariableArrayInput interface {
	pulumi.Input

	ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput
	ToEnvironmentVariableArrayOutputWithContext(context.Context) EnvironmentVariableArrayOutput
}

type EnvironmentVariableArray []EnvironmentVariableInput

func (EnvironmentVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariable)(nil)).Elem()
}

func (i EnvironmentVariableArray) ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput {
	return i.ToEnvironmentVariableArrayOutputWithContext(context.Background())
}

func (i EnvironmentVariableArray) ToEnvironmentVariableArrayOutputWithContext(ctx context.Context) EnvironmentVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableArrayOutput)
}

// Describes an environment variable for the container.
type EnvironmentVariableOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariable)(nil)).Elem()
}

func (o EnvironmentVariableOutput) ToEnvironmentVariableOutput() EnvironmentVariableOutput {
	return o
}

func (o EnvironmentVariableOutput) ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput {
	return o
}

// The name of the environment variable.
func (o EnvironmentVariableOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariable) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the environment variable.
func (o EnvironmentVariableOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariable) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentVariableArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariable)(nil)).Elem()
}

func (o EnvironmentVariableArrayOutput) ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput {
	return o
}

func (o EnvironmentVariableArrayOutput) ToEnvironmentVariableArrayOutputWithContext(ctx context.Context) EnvironmentVariableArrayOutput {
	return o
}

func (o EnvironmentVariableArrayOutput) Index(i pulumi.IntInput) EnvironmentVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVariable {
		return vs[0].([]EnvironmentVariable)[vs[1].(int)]
	}).(EnvironmentVariableOutput)
}

// Describes an environment variable for the container.
type EnvironmentVariableResponse struct {
	// The name of the environment variable.
	Name *string `pulumi:"name"`
	// The value of the environment variable.
	Value *string `pulumi:"value"`
}

// EnvironmentVariableResponseInput is an input type that accepts EnvironmentVariableResponseArgs and EnvironmentVariableResponseOutput values.
// You can construct a concrete instance of `EnvironmentVariableResponseInput` via:
//
//          EnvironmentVariableResponseArgs{...}
type EnvironmentVariableResponseInput interface {
	pulumi.Input

	ToEnvironmentVariableResponseOutput() EnvironmentVariableResponseOutput
	ToEnvironmentVariableResponseOutputWithContext(context.Context) EnvironmentVariableResponseOutput
}

// Describes an environment variable for the container.
type EnvironmentVariableResponseArgs struct {
	// The name of the environment variable.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EnvironmentVariableResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableResponse)(nil)).Elem()
}

func (i EnvironmentVariableResponseArgs) ToEnvironmentVariableResponseOutput() EnvironmentVariableResponseOutput {
	return i.ToEnvironmentVariableResponseOutputWithContext(context.Background())
}

func (i EnvironmentVariableResponseArgs) ToEnvironmentVariableResponseOutputWithContext(ctx context.Context) EnvironmentVariableResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableResponseOutput)
}

// EnvironmentVariableResponseArrayInput is an input type that accepts EnvironmentVariableResponseArray and EnvironmentVariableResponseArrayOutput values.
// You can construct a concrete instance of `EnvironmentVariableResponseArrayInput` via:
//
//          EnvironmentVariableResponseArray{ EnvironmentVariableResponseArgs{...} }
type EnvironmentVariableResponseArrayInput interface {
	pulumi.Input

	ToEnvironmentVariableResponseArrayOutput() EnvironmentVariableResponseArrayOutput
	ToEnvironmentVariableResponseArrayOutputWithContext(context.Context) EnvironmentVariableResponseArrayOutput
}

type EnvironmentVariableResponseArray []EnvironmentVariableResponseInput

func (EnvironmentVariableResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableResponse)(nil)).Elem()
}

func (i EnvironmentVariableResponseArray) ToEnvironmentVariableResponseArrayOutput() EnvironmentVariableResponseArrayOutput {
	return i.ToEnvironmentVariableResponseArrayOutputWithContext(context.Background())
}

func (i EnvironmentVariableResponseArray) ToEnvironmentVariableResponseArrayOutputWithContext(ctx context.Context) EnvironmentVariableResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableResponseArrayOutput)
}

// Describes an environment variable for the container.
type EnvironmentVariableResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableResponse)(nil)).Elem()
}

func (o EnvironmentVariableResponseOutput) ToEnvironmentVariableResponseOutput() EnvironmentVariableResponseOutput {
	return o
}

func (o EnvironmentVariableResponseOutput) ToEnvironmentVariableResponseOutputWithContext(ctx context.Context) EnvironmentVariableResponseOutput {
	return o
}

// The name of the environment variable.
func (o EnvironmentVariableResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariableResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the environment variable.
func (o EnvironmentVariableResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariableResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentVariableResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableResponse)(nil)).Elem()
}

func (o EnvironmentVariableResponseArrayOutput) ToEnvironmentVariableResponseArrayOutput() EnvironmentVariableResponseArrayOutput {
	return o
}

func (o EnvironmentVariableResponseArrayOutput) ToEnvironmentVariableResponseArrayOutputWithContext(ctx context.Context) EnvironmentVariableResponseArrayOutput {
	return o
}

func (o EnvironmentVariableResponseArrayOutput) Index(i pulumi.IntInput) EnvironmentVariableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVariableResponse {
		return vs[0].([]EnvironmentVariableResponse)[vs[1].(int)]
	}).(EnvironmentVariableResponseOutput)
}

// Image registry credential.
type ImageRegistryCredential struct {
	// The password for the private registry.
	Password *string `pulumi:"password"`
	// Docker image registry server, without protocol such as `http` and `https`.
	Server string `pulumi:"server"`
	// The username for the private registry.
	Username string `pulumi:"username"`
}

// ImageRegistryCredentialInput is an input type that accepts ImageRegistryCredentialArgs and ImageRegistryCredentialOutput values.
// You can construct a concrete instance of `ImageRegistryCredentialInput` via:
//
//          ImageRegistryCredentialArgs{...}
type ImageRegistryCredentialInput interface {
	pulumi.Input

	ToImageRegistryCredentialOutput() ImageRegistryCredentialOutput
	ToImageRegistryCredentialOutputWithContext(context.Context) ImageRegistryCredentialOutput
}

// Image registry credential.
type ImageRegistryCredentialArgs struct {
	// The password for the private registry.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Docker image registry server, without protocol such as `http` and `https`.
	Server pulumi.StringInput `pulumi:"server"`
	// The username for the private registry.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ImageRegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRegistryCredential)(nil)).Elem()
}

func (i ImageRegistryCredentialArgs) ToImageRegistryCredentialOutput() ImageRegistryCredentialOutput {
	return i.ToImageRegistryCredentialOutputWithContext(context.Background())
}

func (i ImageRegistryCredentialArgs) ToImageRegistryCredentialOutputWithContext(ctx context.Context) ImageRegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryCredentialOutput)
}

func (i ImageRegistryCredentialArgs) ToImageRegistryCredentialPtrOutput() ImageRegistryCredentialPtrOutput {
	return i.ToImageRegistryCredentialPtrOutputWithContext(context.Background())
}

func (i ImageRegistryCredentialArgs) ToImageRegistryCredentialPtrOutputWithContext(ctx context.Context) ImageRegistryCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryCredentialOutput).ToImageRegistryCredentialPtrOutputWithContext(ctx)
}

// ImageRegistryCredentialPtrInput is an input type that accepts ImageRegistryCredentialArgs, ImageRegistryCredentialPtr and ImageRegistryCredentialPtrOutput values.
// You can construct a concrete instance of `ImageRegistryCredentialPtrInput` via:
//
//          ImageRegistryCredentialArgs{...}
//
//  or:
//
//          nil
type ImageRegistryCredentialPtrInput interface {
	pulumi.Input

	ToImageRegistryCredentialPtrOutput() ImageRegistryCredentialPtrOutput
	ToImageRegistryCredentialPtrOutputWithContext(context.Context) ImageRegistryCredentialPtrOutput
}

type imageRegistryCredentialPtrType ImageRegistryCredentialArgs

func ImageRegistryCredentialPtr(v *ImageRegistryCredentialArgs) ImageRegistryCredentialPtrInput {
	return (*imageRegistryCredentialPtrType)(v)
}

func (*imageRegistryCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRegistryCredential)(nil)).Elem()
}

func (i *imageRegistryCredentialPtrType) ToImageRegistryCredentialPtrOutput() ImageRegistryCredentialPtrOutput {
	return i.ToImageRegistryCredentialPtrOutputWithContext(context.Background())
}

func (i *imageRegistryCredentialPtrType) ToImageRegistryCredentialPtrOutputWithContext(ctx context.Context) ImageRegistryCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryCredentialPtrOutput)
}

// Image registry credential.
type ImageRegistryCredentialOutput struct{ *pulumi.OutputState }

func (ImageRegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRegistryCredential)(nil)).Elem()
}

func (o ImageRegistryCredentialOutput) ToImageRegistryCredentialOutput() ImageRegistryCredentialOutput {
	return o
}

func (o ImageRegistryCredentialOutput) ToImageRegistryCredentialOutputWithContext(ctx context.Context) ImageRegistryCredentialOutput {
	return o
}

func (o ImageRegistryCredentialOutput) ToImageRegistryCredentialPtrOutput() ImageRegistryCredentialPtrOutput {
	return o.ToImageRegistryCredentialPtrOutputWithContext(context.Background())
}

func (o ImageRegistryCredentialOutput) ToImageRegistryCredentialPtrOutputWithContext(ctx context.Context) ImageRegistryCredentialPtrOutput {
	return o.ApplyT(func(v ImageRegistryCredential) *ImageRegistryCredential {
		return &v
	}).(ImageRegistryCredentialPtrOutput)
}

// The password for the private registry.
func (o ImageRegistryCredentialOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRegistryCredential) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Docker image registry server, without protocol such as `http` and `https`.
func (o ImageRegistryCredentialOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRegistryCredential) string { return v.Server }).(pulumi.StringOutput)
}

// The username for the private registry.
func (o ImageRegistryCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRegistryCredential) string { return v.Username }).(pulumi.StringOutput)
}

type ImageRegistryCredentialPtrOutput struct{ *pulumi.OutputState }

func (ImageRegistryCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRegistryCredential)(nil)).Elem()
}

func (o ImageRegistryCredentialPtrOutput) ToImageRegistryCredentialPtrOutput() ImageRegistryCredentialPtrOutput {
	return o
}

func (o ImageRegistryCredentialPtrOutput) ToImageRegistryCredentialPtrOutputWithContext(ctx context.Context) ImageRegistryCredentialPtrOutput {
	return o
}

func (o ImageRegistryCredentialPtrOutput) Elem() ImageRegistryCredentialOutput {
	return o.ApplyT(func(v *ImageRegistryCredential) ImageRegistryCredential { return *v }).(ImageRegistryCredentialOutput)
}

// The password for the private registry.
func (o ImageRegistryCredentialPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRegistryCredential) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Docker image registry server, without protocol such as `http` and `https`.
func (o ImageRegistryCredentialPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRegistryCredential) *string {
		if v == nil {
			return nil
		}
		return &v.Server
	}).(pulumi.StringPtrOutput)
}

// The username for the private registry.
func (o ImageRegistryCredentialPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRegistryCredential) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Image registry credential.
type ImageRegistryCredentialResponse struct {
	// The password for the private registry.
	Password *string `pulumi:"password"`
	// Docker image registry server, without protocol such as `http` and `https`.
	Server string `pulumi:"server"`
	// The username for the private registry.
	Username string `pulumi:"username"`
}

// ImageRegistryCredentialResponseInput is an input type that accepts ImageRegistryCredentialResponseArgs and ImageRegistryCredentialResponseOutput values.
// You can construct a concrete instance of `ImageRegistryCredentialResponseInput` via:
//
//          ImageRegistryCredentialResponseArgs{...}
type ImageRegistryCredentialResponseInput interface {
	pulumi.Input

	ToImageRegistryCredentialResponseOutput() ImageRegistryCredentialResponseOutput
	ToImageRegistryCredentialResponseOutputWithContext(context.Context) ImageRegistryCredentialResponseOutput
}

// Image registry credential.
type ImageRegistryCredentialResponseArgs struct {
	// The password for the private registry.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Docker image registry server, without protocol such as `http` and `https`.
	Server pulumi.StringInput `pulumi:"server"`
	// The username for the private registry.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ImageRegistryCredentialResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRegistryCredentialResponse)(nil)).Elem()
}

func (i ImageRegistryCredentialResponseArgs) ToImageRegistryCredentialResponseOutput() ImageRegistryCredentialResponseOutput {
	return i.ToImageRegistryCredentialResponseOutputWithContext(context.Background())
}

func (i ImageRegistryCredentialResponseArgs) ToImageRegistryCredentialResponseOutputWithContext(ctx context.Context) ImageRegistryCredentialResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryCredentialResponseOutput)
}

func (i ImageRegistryCredentialResponseArgs) ToImageRegistryCredentialResponsePtrOutput() ImageRegistryCredentialResponsePtrOutput {
	return i.ToImageRegistryCredentialResponsePtrOutputWithContext(context.Background())
}

func (i ImageRegistryCredentialResponseArgs) ToImageRegistryCredentialResponsePtrOutputWithContext(ctx context.Context) ImageRegistryCredentialResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryCredentialResponseOutput).ToImageRegistryCredentialResponsePtrOutputWithContext(ctx)
}

// ImageRegistryCredentialResponsePtrInput is an input type that accepts ImageRegistryCredentialResponseArgs, ImageRegistryCredentialResponsePtr and ImageRegistryCredentialResponsePtrOutput values.
// You can construct a concrete instance of `ImageRegistryCredentialResponsePtrInput` via:
//
//          ImageRegistryCredentialResponseArgs{...}
//
//  or:
//
//          nil
type ImageRegistryCredentialResponsePtrInput interface {
	pulumi.Input

	ToImageRegistryCredentialResponsePtrOutput() ImageRegistryCredentialResponsePtrOutput
	ToImageRegistryCredentialResponsePtrOutputWithContext(context.Context) ImageRegistryCredentialResponsePtrOutput
}

type imageRegistryCredentialResponsePtrType ImageRegistryCredentialResponseArgs

func ImageRegistryCredentialResponsePtr(v *ImageRegistryCredentialResponseArgs) ImageRegistryCredentialResponsePtrInput {
	return (*imageRegistryCredentialResponsePtrType)(v)
}

func (*imageRegistryCredentialResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRegistryCredentialResponse)(nil)).Elem()
}

func (i *imageRegistryCredentialResponsePtrType) ToImageRegistryCredentialResponsePtrOutput() ImageRegistryCredentialResponsePtrOutput {
	return i.ToImageRegistryCredentialResponsePtrOutputWithContext(context.Background())
}

func (i *imageRegistryCredentialResponsePtrType) ToImageRegistryCredentialResponsePtrOutputWithContext(ctx context.Context) ImageRegistryCredentialResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryCredentialResponsePtrOutput)
}

// Image registry credential.
type ImageRegistryCredentialResponseOutput struct{ *pulumi.OutputState }

func (ImageRegistryCredentialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRegistryCredentialResponse)(nil)).Elem()
}

func (o ImageRegistryCredentialResponseOutput) ToImageRegistryCredentialResponseOutput() ImageRegistryCredentialResponseOutput {
	return o
}

func (o ImageRegistryCredentialResponseOutput) ToImageRegistryCredentialResponseOutputWithContext(ctx context.Context) ImageRegistryCredentialResponseOutput {
	return o
}

func (o ImageRegistryCredentialResponseOutput) ToImageRegistryCredentialResponsePtrOutput() ImageRegistryCredentialResponsePtrOutput {
	return o.ToImageRegistryCredentialResponsePtrOutputWithContext(context.Background())
}

func (o ImageRegistryCredentialResponseOutput) ToImageRegistryCredentialResponsePtrOutputWithContext(ctx context.Context) ImageRegistryCredentialResponsePtrOutput {
	return o.ApplyT(func(v ImageRegistryCredentialResponse) *ImageRegistryCredentialResponse {
		return &v
	}).(ImageRegistryCredentialResponsePtrOutput)
}

// The password for the private registry.
func (o ImageRegistryCredentialResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRegistryCredentialResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Docker image registry server, without protocol such as `http` and `https`.
func (o ImageRegistryCredentialResponseOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRegistryCredentialResponse) string { return v.Server }).(pulumi.StringOutput)
}

// The username for the private registry.
func (o ImageRegistryCredentialResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRegistryCredentialResponse) string { return v.Username }).(pulumi.StringOutput)
}

type ImageRegistryCredentialResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageRegistryCredentialResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRegistryCredentialResponse)(nil)).Elem()
}

func (o ImageRegistryCredentialResponsePtrOutput) ToImageRegistryCredentialResponsePtrOutput() ImageRegistryCredentialResponsePtrOutput {
	return o
}

func (o ImageRegistryCredentialResponsePtrOutput) ToImageRegistryCredentialResponsePtrOutputWithContext(ctx context.Context) ImageRegistryCredentialResponsePtrOutput {
	return o
}

func (o ImageRegistryCredentialResponsePtrOutput) Elem() ImageRegistryCredentialResponseOutput {
	return o.ApplyT(func(v *ImageRegistryCredentialResponse) ImageRegistryCredentialResponse { return *v }).(ImageRegistryCredentialResponseOutput)
}

// The password for the private registry.
func (o ImageRegistryCredentialResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRegistryCredentialResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Docker image registry server, without protocol such as `http` and `https`.
func (o ImageRegistryCredentialResponsePtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRegistryCredentialResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Server
	}).(pulumi.StringPtrOutput)
}

// The username for the private registry.
func (o ImageRegistryCredentialResponsePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRegistryCredentialResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Describes public connectivity configuration for the network.
type IngressConfig struct {
	// Configuration for layer4 public connectivity for this network.
	Layer4 []Layer4IngressConfig `pulumi:"layer4"`
	// The QoS tier for ingress.
	QosLevel *string `pulumi:"qosLevel"`
}

// IngressConfigInput is an input type that accepts IngressConfigArgs and IngressConfigOutput values.
// You can construct a concrete instance of `IngressConfigInput` via:
//
//          IngressConfigArgs{...}
type IngressConfigInput interface {
	pulumi.Input

	ToIngressConfigOutput() IngressConfigOutput
	ToIngressConfigOutputWithContext(context.Context) IngressConfigOutput
}

// Describes public connectivity configuration for the network.
type IngressConfigArgs struct {
	// Configuration for layer4 public connectivity for this network.
	Layer4 Layer4IngressConfigArrayInput `pulumi:"layer4"`
	// The QoS tier for ingress.
	QosLevel pulumi.StringPtrInput `pulumi:"qosLevel"`
}

func (IngressConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressConfig)(nil)).Elem()
}

func (i IngressConfigArgs) ToIngressConfigOutput() IngressConfigOutput {
	return i.ToIngressConfigOutputWithContext(context.Background())
}

func (i IngressConfigArgs) ToIngressConfigOutputWithContext(ctx context.Context) IngressConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressConfigOutput)
}

func (i IngressConfigArgs) ToIngressConfigPtrOutput() IngressConfigPtrOutput {
	return i.ToIngressConfigPtrOutputWithContext(context.Background())
}

func (i IngressConfigArgs) ToIngressConfigPtrOutputWithContext(ctx context.Context) IngressConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressConfigOutput).ToIngressConfigPtrOutputWithContext(ctx)
}

// IngressConfigPtrInput is an input type that accepts IngressConfigArgs, IngressConfigPtr and IngressConfigPtrOutput values.
// You can construct a concrete instance of `IngressConfigPtrInput` via:
//
//          IngressConfigArgs{...}
//
//  or:
//
//          nil
type IngressConfigPtrInput interface {
	pulumi.Input

	ToIngressConfigPtrOutput() IngressConfigPtrOutput
	ToIngressConfigPtrOutputWithContext(context.Context) IngressConfigPtrOutput
}

type ingressConfigPtrType IngressConfigArgs

func IngressConfigPtr(v *IngressConfigArgs) IngressConfigPtrInput {
	return (*ingressConfigPtrType)(v)
}

func (*ingressConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressConfig)(nil)).Elem()
}

func (i *ingressConfigPtrType) ToIngressConfigPtrOutput() IngressConfigPtrOutput {
	return i.ToIngressConfigPtrOutputWithContext(context.Background())
}

func (i *ingressConfigPtrType) ToIngressConfigPtrOutputWithContext(ctx context.Context) IngressConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressConfigPtrOutput)
}

// Describes public connectivity configuration for the network.
type IngressConfigOutput struct{ *pulumi.OutputState }

func (IngressConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressConfig)(nil)).Elem()
}

func (o IngressConfigOutput) ToIngressConfigOutput() IngressConfigOutput {
	return o
}

func (o IngressConfigOutput) ToIngressConfigOutputWithContext(ctx context.Context) IngressConfigOutput {
	return o
}

func (o IngressConfigOutput) ToIngressConfigPtrOutput() IngressConfigPtrOutput {
	return o.ToIngressConfigPtrOutputWithContext(context.Background())
}

func (o IngressConfigOutput) ToIngressConfigPtrOutputWithContext(ctx context.Context) IngressConfigPtrOutput {
	return o.ApplyT(func(v IngressConfig) *IngressConfig {
		return &v
	}).(IngressConfigPtrOutput)
}

// Configuration for layer4 public connectivity for this network.
func (o IngressConfigOutput) Layer4() Layer4IngressConfigArrayOutput {
	return o.ApplyT(func(v IngressConfig) []Layer4IngressConfig { return v.Layer4 }).(Layer4IngressConfigArrayOutput)
}

// The QoS tier for ingress.
func (o IngressConfigOutput) QosLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressConfig) *string { return v.QosLevel }).(pulumi.StringPtrOutput)
}

type IngressConfigPtrOutput struct{ *pulumi.OutputState }

func (IngressConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressConfig)(nil)).Elem()
}

func (o IngressConfigPtrOutput) ToIngressConfigPtrOutput() IngressConfigPtrOutput {
	return o
}

func (o IngressConfigPtrOutput) ToIngressConfigPtrOutputWithContext(ctx context.Context) IngressConfigPtrOutput {
	return o
}

func (o IngressConfigPtrOutput) Elem() IngressConfigOutput {
	return o.ApplyT(func(v *IngressConfig) IngressConfig { return *v }).(IngressConfigOutput)
}

// Configuration for layer4 public connectivity for this network.
func (o IngressConfigPtrOutput) Layer4() Layer4IngressConfigArrayOutput {
	return o.ApplyT(func(v *IngressConfig) []Layer4IngressConfig {
		if v == nil {
			return nil
		}
		return v.Layer4
	}).(Layer4IngressConfigArrayOutput)
}

// The QoS tier for ingress.
func (o IngressConfigPtrOutput) QosLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressConfig) *string {
		if v == nil {
			return nil
		}
		return v.QosLevel
	}).(pulumi.StringPtrOutput)
}

// Describes public connectivity configuration for the network.
type IngressConfigResponse struct {
	// Configuration for layer4 public connectivity for this network.
	Layer4 []Layer4IngressConfigResponse `pulumi:"layer4"`
	// The public IP address for reaching this network.
	PublicIPAddress string `pulumi:"publicIPAddress"`
	// The QoS tier for ingress.
	QosLevel *string `pulumi:"qosLevel"`
}

// IngressConfigResponseInput is an input type that accepts IngressConfigResponseArgs and IngressConfigResponseOutput values.
// You can construct a concrete instance of `IngressConfigResponseInput` via:
//
//          IngressConfigResponseArgs{...}
type IngressConfigResponseInput interface {
	pulumi.Input

	ToIngressConfigResponseOutput() IngressConfigResponseOutput
	ToIngressConfigResponseOutputWithContext(context.Context) IngressConfigResponseOutput
}

// Describes public connectivity configuration for the network.
type IngressConfigResponseArgs struct {
	// Configuration for layer4 public connectivity for this network.
	Layer4 Layer4IngressConfigResponseArrayInput `pulumi:"layer4"`
	// The public IP address for reaching this network.
	PublicIPAddress pulumi.StringInput `pulumi:"publicIPAddress"`
	// The QoS tier for ingress.
	QosLevel pulumi.StringPtrInput `pulumi:"qosLevel"`
}

func (IngressConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressConfigResponse)(nil)).Elem()
}

func (i IngressConfigResponseArgs) ToIngressConfigResponseOutput() IngressConfigResponseOutput {
	return i.ToIngressConfigResponseOutputWithContext(context.Background())
}

func (i IngressConfigResponseArgs) ToIngressConfigResponseOutputWithContext(ctx context.Context) IngressConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressConfigResponseOutput)
}

func (i IngressConfigResponseArgs) ToIngressConfigResponsePtrOutput() IngressConfigResponsePtrOutput {
	return i.ToIngressConfigResponsePtrOutputWithContext(context.Background())
}

func (i IngressConfigResponseArgs) ToIngressConfigResponsePtrOutputWithContext(ctx context.Context) IngressConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressConfigResponseOutput).ToIngressConfigResponsePtrOutputWithContext(ctx)
}

// IngressConfigResponsePtrInput is an input type that accepts IngressConfigResponseArgs, IngressConfigResponsePtr and IngressConfigResponsePtrOutput values.
// You can construct a concrete instance of `IngressConfigResponsePtrInput` via:
//
//          IngressConfigResponseArgs{...}
//
//  or:
//
//          nil
type IngressConfigResponsePtrInput interface {
	pulumi.Input

	ToIngressConfigResponsePtrOutput() IngressConfigResponsePtrOutput
	ToIngressConfigResponsePtrOutputWithContext(context.Context) IngressConfigResponsePtrOutput
}

type ingressConfigResponsePtrType IngressConfigResponseArgs

func IngressConfigResponsePtr(v *IngressConfigResponseArgs) IngressConfigResponsePtrInput {
	return (*ingressConfigResponsePtrType)(v)
}

func (*ingressConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressConfigResponse)(nil)).Elem()
}

func (i *ingressConfigResponsePtrType) ToIngressConfigResponsePtrOutput() IngressConfigResponsePtrOutput {
	return i.ToIngressConfigResponsePtrOutputWithContext(context.Background())
}

func (i *ingressConfigResponsePtrType) ToIngressConfigResponsePtrOutputWithContext(ctx context.Context) IngressConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressConfigResponsePtrOutput)
}

// Describes public connectivity configuration for the network.
type IngressConfigResponseOutput struct{ *pulumi.OutputState }

func (IngressConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressConfigResponse)(nil)).Elem()
}

func (o IngressConfigResponseOutput) ToIngressConfigResponseOutput() IngressConfigResponseOutput {
	return o
}

func (o IngressConfigResponseOutput) ToIngressConfigResponseOutputWithContext(ctx context.Context) IngressConfigResponseOutput {
	return o
}

func (o IngressConfigResponseOutput) ToIngressConfigResponsePtrOutput() IngressConfigResponsePtrOutput {
	return o.ToIngressConfigResponsePtrOutputWithContext(context.Background())
}

func (o IngressConfigResponseOutput) ToIngressConfigResponsePtrOutputWithContext(ctx context.Context) IngressConfigResponsePtrOutput {
	return o.ApplyT(func(v IngressConfigResponse) *IngressConfigResponse {
		return &v
	}).(IngressConfigResponsePtrOutput)
}

// Configuration for layer4 public connectivity for this network.
func (o IngressConfigResponseOutput) Layer4() Layer4IngressConfigResponseArrayOutput {
	return o.ApplyT(func(v IngressConfigResponse) []Layer4IngressConfigResponse { return v.Layer4 }).(Layer4IngressConfigResponseArrayOutput)
}

// The public IP address for reaching this network.
func (o IngressConfigResponseOutput) PublicIPAddress() pulumi.StringOutput {
	return o.ApplyT(func(v IngressConfigResponse) string { return v.PublicIPAddress }).(pulumi.StringOutput)
}

// The QoS tier for ingress.
func (o IngressConfigResponseOutput) QosLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressConfigResponse) *string { return v.QosLevel }).(pulumi.StringPtrOutput)
}

type IngressConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (IngressConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressConfigResponse)(nil)).Elem()
}

func (o IngressConfigResponsePtrOutput) ToIngressConfigResponsePtrOutput() IngressConfigResponsePtrOutput {
	return o
}

func (o IngressConfigResponsePtrOutput) ToIngressConfigResponsePtrOutputWithContext(ctx context.Context) IngressConfigResponsePtrOutput {
	return o
}

func (o IngressConfigResponsePtrOutput) Elem() IngressConfigResponseOutput {
	return o.ApplyT(func(v *IngressConfigResponse) IngressConfigResponse { return *v }).(IngressConfigResponseOutput)
}

// Configuration for layer4 public connectivity for this network.
func (o IngressConfigResponsePtrOutput) Layer4() Layer4IngressConfigResponseArrayOutput {
	return o.ApplyT(func(v *IngressConfigResponse) []Layer4IngressConfigResponse {
		if v == nil {
			return nil
		}
		return v.Layer4
	}).(Layer4IngressConfigResponseArrayOutput)
}

// The public IP address for reaching this network.
func (o IngressConfigResponsePtrOutput) PublicIPAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PublicIPAddress
	}).(pulumi.StringPtrOutput)
}

// The QoS tier for ingress.
func (o IngressConfigResponsePtrOutput) QosLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.QosLevel
	}).(pulumi.StringPtrOutput)
}

// Describes the layer4 configuration for public connectivity for this network.
type Layer4IngressConfig struct {
	// The application name which contains the service to be exposed.
	ApplicationName *string `pulumi:"applicationName"`
	// The service endpoint that needs to be exposed.
	EndpointName *string `pulumi:"endpointName"`
	// Layer4 ingress config name.
	Name *string `pulumi:"name"`
	// Specifies the public port at which the service endpoint below needs to be exposed.
	PublicPort *int `pulumi:"publicPort"`
	// The service whose endpoint needs to be exposed at the public port.
	ServiceName *string `pulumi:"serviceName"`
}

// Layer4IngressConfigInput is an input type that accepts Layer4IngressConfigArgs and Layer4IngressConfigOutput values.
// You can construct a concrete instance of `Layer4IngressConfigInput` via:
//
//          Layer4IngressConfigArgs{...}
type Layer4IngressConfigInput interface {
	pulumi.Input

	ToLayer4IngressConfigOutput() Layer4IngressConfigOutput
	ToLayer4IngressConfigOutputWithContext(context.Context) Layer4IngressConfigOutput
}

// Describes the layer4 configuration for public connectivity for this network.
type Layer4IngressConfigArgs struct {
	// The application name which contains the service to be exposed.
	ApplicationName pulumi.StringPtrInput `pulumi:"applicationName"`
	// The service endpoint that needs to be exposed.
	EndpointName pulumi.StringPtrInput `pulumi:"endpointName"`
	// Layer4 ingress config name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the public port at which the service endpoint below needs to be exposed.
	PublicPort pulumi.IntPtrInput `pulumi:"publicPort"`
	// The service whose endpoint needs to be exposed at the public port.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (Layer4IngressConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Layer4IngressConfig)(nil)).Elem()
}

func (i Layer4IngressConfigArgs) ToLayer4IngressConfigOutput() Layer4IngressConfigOutput {
	return i.ToLayer4IngressConfigOutputWithContext(context.Background())
}

func (i Layer4IngressConfigArgs) ToLayer4IngressConfigOutputWithContext(ctx context.Context) Layer4IngressConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Layer4IngressConfigOutput)
}

// Layer4IngressConfigArrayInput is an input type that accepts Layer4IngressConfigArray and Layer4IngressConfigArrayOutput values.
// You can construct a concrete instance of `Layer4IngressConfigArrayInput` via:
//
//          Layer4IngressConfigArray{ Layer4IngressConfigArgs{...} }
type Layer4IngressConfigArrayInput interface {
	pulumi.Input

	ToLayer4IngressConfigArrayOutput() Layer4IngressConfigArrayOutput
	ToLayer4IngressConfigArrayOutputWithContext(context.Context) Layer4IngressConfigArrayOutput
}

type Layer4IngressConfigArray []Layer4IngressConfigInput

func (Layer4IngressConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Layer4IngressConfig)(nil)).Elem()
}

func (i Layer4IngressConfigArray) ToLayer4IngressConfigArrayOutput() Layer4IngressConfigArrayOutput {
	return i.ToLayer4IngressConfigArrayOutputWithContext(context.Background())
}

func (i Layer4IngressConfigArray) ToLayer4IngressConfigArrayOutputWithContext(ctx context.Context) Layer4IngressConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Layer4IngressConfigArrayOutput)
}

// Describes the layer4 configuration for public connectivity for this network.
type Layer4IngressConfigOutput struct{ *pulumi.OutputState }

func (Layer4IngressConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Layer4IngressConfig)(nil)).Elem()
}

func (o Layer4IngressConfigOutput) ToLayer4IngressConfigOutput() Layer4IngressConfigOutput {
	return o
}

func (o Layer4IngressConfigOutput) ToLayer4IngressConfigOutputWithContext(ctx context.Context) Layer4IngressConfigOutput {
	return o
}

// The application name which contains the service to be exposed.
func (o Layer4IngressConfigOutput) ApplicationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Layer4IngressConfig) *string { return v.ApplicationName }).(pulumi.StringPtrOutput)
}

// The service endpoint that needs to be exposed.
func (o Layer4IngressConfigOutput) EndpointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Layer4IngressConfig) *string { return v.EndpointName }).(pulumi.StringPtrOutput)
}

// Layer4 ingress config name.
func (o Layer4IngressConfigOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Layer4IngressConfig) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the public port at which the service endpoint below needs to be exposed.
func (o Layer4IngressConfigOutput) PublicPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Layer4IngressConfig) *int { return v.PublicPort }).(pulumi.IntPtrOutput)
}

// The service whose endpoint needs to be exposed at the public port.
func (o Layer4IngressConfigOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Layer4IngressConfig) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type Layer4IngressConfigArrayOutput struct{ *pulumi.OutputState }

func (Layer4IngressConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Layer4IngressConfig)(nil)).Elem()
}

func (o Layer4IngressConfigArrayOutput) ToLayer4IngressConfigArrayOutput() Layer4IngressConfigArrayOutput {
	return o
}

func (o Layer4IngressConfigArrayOutput) ToLayer4IngressConfigArrayOutputWithContext(ctx context.Context) Layer4IngressConfigArrayOutput {
	return o
}

func (o Layer4IngressConfigArrayOutput) Index(i pulumi.IntInput) Layer4IngressConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Layer4IngressConfig {
		return vs[0].([]Layer4IngressConfig)[vs[1].(int)]
	}).(Layer4IngressConfigOutput)
}

// Describes the layer4 configuration for public connectivity for this network.
type Layer4IngressConfigResponse struct {
	// The application name which contains the service to be exposed.
	ApplicationName *string `pulumi:"applicationName"`
	// The service endpoint that needs to be exposed.
	EndpointName *string `pulumi:"endpointName"`
	// Layer4 ingress config name.
	Name *string `pulumi:"name"`
	// Specifies the public port at which the service endpoint below needs to be exposed.
	PublicPort *int `pulumi:"publicPort"`
	// The service whose endpoint needs to be exposed at the public port.
	ServiceName *string `pulumi:"serviceName"`
}

// Layer4IngressConfigResponseInput is an input type that accepts Layer4IngressConfigResponseArgs and Layer4IngressConfigResponseOutput values.
// You can construct a concrete instance of `Layer4IngressConfigResponseInput` via:
//
//          Layer4IngressConfigResponseArgs{...}
type Layer4IngressConfigResponseInput interface {
	pulumi.Input

	ToLayer4IngressConfigResponseOutput() Layer4IngressConfigResponseOutput
	ToLayer4IngressConfigResponseOutputWithContext(context.Context) Layer4IngressConfigResponseOutput
}

// Describes the layer4 configuration for public connectivity for this network.
type Layer4IngressConfigResponseArgs struct {
	// The application name which contains the service to be exposed.
	ApplicationName pulumi.StringPtrInput `pulumi:"applicationName"`
	// The service endpoint that needs to be exposed.
	EndpointName pulumi.StringPtrInput `pulumi:"endpointName"`
	// Layer4 ingress config name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the public port at which the service endpoint below needs to be exposed.
	PublicPort pulumi.IntPtrInput `pulumi:"publicPort"`
	// The service whose endpoint needs to be exposed at the public port.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (Layer4IngressConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Layer4IngressConfigResponse)(nil)).Elem()
}

func (i Layer4IngressConfigResponseArgs) ToLayer4IngressConfigResponseOutput() Layer4IngressConfigResponseOutput {
	return i.ToLayer4IngressConfigResponseOutputWithContext(context.Background())
}

func (i Layer4IngressConfigResponseArgs) ToLayer4IngressConfigResponseOutputWithContext(ctx context.Context) Layer4IngressConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Layer4IngressConfigResponseOutput)
}

// Layer4IngressConfigResponseArrayInput is an input type that accepts Layer4IngressConfigResponseArray and Layer4IngressConfigResponseArrayOutput values.
// You can construct a concrete instance of `Layer4IngressConfigResponseArrayInput` via:
//
//          Layer4IngressConfigResponseArray{ Layer4IngressConfigResponseArgs{...} }
type Layer4IngressConfigResponseArrayInput interface {
	pulumi.Input

	ToLayer4IngressConfigResponseArrayOutput() Layer4IngressConfigResponseArrayOutput
	ToLayer4IngressConfigResponseArrayOutputWithContext(context.Context) Layer4IngressConfigResponseArrayOutput
}

type Layer4IngressConfigResponseArray []Layer4IngressConfigResponseInput

func (Layer4IngressConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Layer4IngressConfigResponse)(nil)).Elem()
}

func (i Layer4IngressConfigResponseArray) ToLayer4IngressConfigResponseArrayOutput() Layer4IngressConfigResponseArrayOutput {
	return i.ToLayer4IngressConfigResponseArrayOutputWithContext(context.Background())
}

func (i Layer4IngressConfigResponseArray) ToLayer4IngressConfigResponseArrayOutputWithContext(ctx context.Context) Layer4IngressConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Layer4IngressConfigResponseArrayOutput)
}

// Describes the layer4 configuration for public connectivity for this network.
type Layer4IngressConfigResponseOutput struct{ *pulumi.OutputState }

func (Layer4IngressConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Layer4IngressConfigResponse)(nil)).Elem()
}

func (o Layer4IngressConfigResponseOutput) ToLayer4IngressConfigResponseOutput() Layer4IngressConfigResponseOutput {
	return o
}

func (o Layer4IngressConfigResponseOutput) ToLayer4IngressConfigResponseOutputWithContext(ctx context.Context) Layer4IngressConfigResponseOutput {
	return o
}

// The application name which contains the service to be exposed.
func (o Layer4IngressConfigResponseOutput) ApplicationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Layer4IngressConfigResponse) *string { return v.ApplicationName }).(pulumi.StringPtrOutput)
}

// The service endpoint that needs to be exposed.
func (o Layer4IngressConfigResponseOutput) EndpointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Layer4IngressConfigResponse) *string { return v.EndpointName }).(pulumi.StringPtrOutput)
}

// Layer4 ingress config name.
func (o Layer4IngressConfigResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Layer4IngressConfigResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the public port at which the service endpoint below needs to be exposed.
func (o Layer4IngressConfigResponseOutput) PublicPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Layer4IngressConfigResponse) *int { return v.PublicPort }).(pulumi.IntPtrOutput)
}

// The service whose endpoint needs to be exposed at the public port.
func (o Layer4IngressConfigResponseOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Layer4IngressConfigResponse) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type Layer4IngressConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (Layer4IngressConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Layer4IngressConfigResponse)(nil)).Elem()
}

func (o Layer4IngressConfigResponseArrayOutput) ToLayer4IngressConfigResponseArrayOutput() Layer4IngressConfigResponseArrayOutput {
	return o
}

func (o Layer4IngressConfigResponseArrayOutput) ToLayer4IngressConfigResponseArrayOutputWithContext(ctx context.Context) Layer4IngressConfigResponseArrayOutput {
	return o
}

func (o Layer4IngressConfigResponseArrayOutput) Index(i pulumi.IntInput) Layer4IngressConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Layer4IngressConfigResponse {
		return vs[0].([]Layer4IngressConfigResponse)[vs[1].(int)]
	}).(Layer4IngressConfigResponseOutput)
}

// Describes a network reference in a service.
type NetworkRef struct {
	// Name of the network.
	Name *string `pulumi:"name"`
}

// NetworkRefInput is an input type that accepts NetworkRefArgs and NetworkRefOutput values.
// You can construct a concrete instance of `NetworkRefInput` via:
//
//          NetworkRefArgs{...}
type NetworkRefInput interface {
	pulumi.Input

	ToNetworkRefOutput() NetworkRefOutput
	ToNetworkRefOutputWithContext(context.Context) NetworkRefOutput
}

// Describes a network reference in a service.
type NetworkRefArgs struct {
	// Name of the network.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (NetworkRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkRef)(nil)).Elem()
}

func (i NetworkRefArgs) ToNetworkRefOutput() NetworkRefOutput {
	return i.ToNetworkRefOutputWithContext(context.Background())
}

func (i NetworkRefArgs) ToNetworkRefOutputWithContext(ctx context.Context) NetworkRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRefOutput)
}

// NetworkRefArrayInput is an input type that accepts NetworkRefArray and NetworkRefArrayOutput values.
// You can construct a concrete instance of `NetworkRefArrayInput` via:
//
//          NetworkRefArray{ NetworkRefArgs{...} }
type NetworkRefArrayInput interface {
	pulumi.Input

	ToNetworkRefArrayOutput() NetworkRefArrayOutput
	ToNetworkRefArrayOutputWithContext(context.Context) NetworkRefArrayOutput
}

type NetworkRefArray []NetworkRefInput

func (NetworkRefArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkRef)(nil)).Elem()
}

func (i NetworkRefArray) ToNetworkRefArrayOutput() NetworkRefArrayOutput {
	return i.ToNetworkRefArrayOutputWithContext(context.Background())
}

func (i NetworkRefArray) ToNetworkRefArrayOutputWithContext(ctx context.Context) NetworkRefArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRefArrayOutput)
}

// Describes a network reference in a service.
type NetworkRefOutput struct{ *pulumi.OutputState }

func (NetworkRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkRef)(nil)).Elem()
}

func (o NetworkRefOutput) ToNetworkRefOutput() NetworkRefOutput {
	return o
}

func (o NetworkRefOutput) ToNetworkRefOutputWithContext(ctx context.Context) NetworkRefOutput {
	return o
}

// Name of the network.
func (o NetworkRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type NetworkRefArrayOutput struct{ *pulumi.OutputState }

func (NetworkRefArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkRef)(nil)).Elem()
}

func (o NetworkRefArrayOutput) ToNetworkRefArrayOutput() NetworkRefArrayOutput {
	return o
}

func (o NetworkRefArrayOutput) ToNetworkRefArrayOutputWithContext(ctx context.Context) NetworkRefArrayOutput {
	return o
}

func (o NetworkRefArrayOutput) Index(i pulumi.IntInput) NetworkRefOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkRef {
		return vs[0].([]NetworkRef)[vs[1].(int)]
	}).(NetworkRefOutput)
}

// Describes a network reference in a service.
type NetworkRefResponse struct {
	// Name of the network.
	Name *string `pulumi:"name"`
}

// NetworkRefResponseInput is an input type that accepts NetworkRefResponseArgs and NetworkRefResponseOutput values.
// You can construct a concrete instance of `NetworkRefResponseInput` via:
//
//          NetworkRefResponseArgs{...}
type NetworkRefResponseInput interface {
	pulumi.Input

	ToNetworkRefResponseOutput() NetworkRefResponseOutput
	ToNetworkRefResponseOutputWithContext(context.Context) NetworkRefResponseOutput
}

// Describes a network reference in a service.
type NetworkRefResponseArgs struct {
	// Name of the network.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (NetworkRefResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkRefResponse)(nil)).Elem()
}

func (i NetworkRefResponseArgs) ToNetworkRefResponseOutput() NetworkRefResponseOutput {
	return i.ToNetworkRefResponseOutputWithContext(context.Background())
}

func (i NetworkRefResponseArgs) ToNetworkRefResponseOutputWithContext(ctx context.Context) NetworkRefResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRefResponseOutput)
}

// NetworkRefResponseArrayInput is an input type that accepts NetworkRefResponseArray and NetworkRefResponseArrayOutput values.
// You can construct a concrete instance of `NetworkRefResponseArrayInput` via:
//
//          NetworkRefResponseArray{ NetworkRefResponseArgs{...} }
type NetworkRefResponseArrayInput interface {
	pulumi.Input

	ToNetworkRefResponseArrayOutput() NetworkRefResponseArrayOutput
	ToNetworkRefResponseArrayOutputWithContext(context.Context) NetworkRefResponseArrayOutput
}

type NetworkRefResponseArray []NetworkRefResponseInput

func (NetworkRefResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkRefResponse)(nil)).Elem()
}

func (i NetworkRefResponseArray) ToNetworkRefResponseArrayOutput() NetworkRefResponseArrayOutput {
	return i.ToNetworkRefResponseArrayOutputWithContext(context.Background())
}

func (i NetworkRefResponseArray) ToNetworkRefResponseArrayOutputWithContext(ctx context.Context) NetworkRefResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRefResponseArrayOutput)
}

// Describes a network reference in a service.
type NetworkRefResponseOutput struct{ *pulumi.OutputState }

func (NetworkRefResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkRefResponse)(nil)).Elem()
}

func (o NetworkRefResponseOutput) ToNetworkRefResponseOutput() NetworkRefResponseOutput {
	return o
}

func (o NetworkRefResponseOutput) ToNetworkRefResponseOutputWithContext(ctx context.Context) NetworkRefResponseOutput {
	return o
}

// Name of the network.
func (o NetworkRefResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkRefResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type NetworkRefResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkRefResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkRefResponse)(nil)).Elem()
}

func (o NetworkRefResponseArrayOutput) ToNetworkRefResponseArrayOutput() NetworkRefResponseArrayOutput {
	return o
}

func (o NetworkRefResponseArrayOutput) ToNetworkRefResponseArrayOutputWithContext(ctx context.Context) NetworkRefResponseArrayOutput {
	return o
}

func (o NetworkRefResponseArrayOutput) Index(i pulumi.IntInput) NetworkRefResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkRefResponse {
		return vs[0].([]NetworkRefResponse)[vs[1].(int)]
	}).(NetworkRefResponseOutput)
}

// This type describes the resource limits for a given container. It describes the most amount of resources a container is allowed to use before being restarted.
type ResourceLimits struct {
	// CPU limits in cores. At present, only full cores are supported.
	Cpu *float64 `pulumi:"cpu"`
	// The memory limit in GB.
	MemoryInGB *float64 `pulumi:"memoryInGB"`
}

// ResourceLimitsInput is an input type that accepts ResourceLimitsArgs and ResourceLimitsOutput values.
// You can construct a concrete instance of `ResourceLimitsInput` via:
//
//          ResourceLimitsArgs{...}
type ResourceLimitsInput interface {
	pulumi.Input

	ToResourceLimitsOutput() ResourceLimitsOutput
	ToResourceLimitsOutputWithContext(context.Context) ResourceLimitsOutput
}

// This type describes the resource limits for a given container. It describes the most amount of resources a container is allowed to use before being restarted.
type ResourceLimitsArgs struct {
	// CPU limits in cores. At present, only full cores are supported.
	Cpu pulumi.Float64PtrInput `pulumi:"cpu"`
	// The memory limit in GB.
	MemoryInGB pulumi.Float64PtrInput `pulumi:"memoryInGB"`
}

func (ResourceLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimits)(nil)).Elem()
}

func (i ResourceLimitsArgs) ToResourceLimitsOutput() ResourceLimitsOutput {
	return i.ToResourceLimitsOutputWithContext(context.Background())
}

func (i ResourceLimitsArgs) ToResourceLimitsOutputWithContext(ctx context.Context) ResourceLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsOutput)
}

func (i ResourceLimitsArgs) ToResourceLimitsPtrOutput() ResourceLimitsPtrOutput {
	return i.ToResourceLimitsPtrOutputWithContext(context.Background())
}

func (i ResourceLimitsArgs) ToResourceLimitsPtrOutputWithContext(ctx context.Context) ResourceLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsOutput).ToResourceLimitsPtrOutputWithContext(ctx)
}

// ResourceLimitsPtrInput is an input type that accepts ResourceLimitsArgs, ResourceLimitsPtr and ResourceLimitsPtrOutput values.
// You can construct a concrete instance of `ResourceLimitsPtrInput` via:
//
//          ResourceLimitsArgs{...}
//
//  or:
//
//          nil
type ResourceLimitsPtrInput interface {
	pulumi.Input

	ToResourceLimitsPtrOutput() ResourceLimitsPtrOutput
	ToResourceLimitsPtrOutputWithContext(context.Context) ResourceLimitsPtrOutput
}

type resourceLimitsPtrType ResourceLimitsArgs

func ResourceLimitsPtr(v *ResourceLimitsArgs) ResourceLimitsPtrInput {
	return (*resourceLimitsPtrType)(v)
}

func (*resourceLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLimits)(nil)).Elem()
}

func (i *resourceLimitsPtrType) ToResourceLimitsPtrOutput() ResourceLimitsPtrOutput {
	return i.ToResourceLimitsPtrOutputWithContext(context.Background())
}

func (i *resourceLimitsPtrType) ToResourceLimitsPtrOutputWithContext(ctx context.Context) ResourceLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsPtrOutput)
}

// This type describes the resource limits for a given container. It describes the most amount of resources a container is allowed to use before being restarted.
type ResourceLimitsOutput struct{ *pulumi.OutputState }

func (ResourceLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimits)(nil)).Elem()
}

func (o ResourceLimitsOutput) ToResourceLimitsOutput() ResourceLimitsOutput {
	return o
}

func (o ResourceLimitsOutput) ToResourceLimitsOutputWithContext(ctx context.Context) ResourceLimitsOutput {
	return o
}

func (o ResourceLimitsOutput) ToResourceLimitsPtrOutput() ResourceLimitsPtrOutput {
	return o.ToResourceLimitsPtrOutputWithContext(context.Background())
}

func (o ResourceLimitsOutput) ToResourceLimitsPtrOutputWithContext(ctx context.Context) ResourceLimitsPtrOutput {
	return o.ApplyT(func(v ResourceLimits) *ResourceLimits {
		return &v
	}).(ResourceLimitsPtrOutput)
}

// CPU limits in cores. At present, only full cores are supported.
func (o ResourceLimitsOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ResourceLimits) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

// The memory limit in GB.
func (o ResourceLimitsOutput) MemoryInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ResourceLimits) *float64 { return v.MemoryInGB }).(pulumi.Float64PtrOutput)
}

type ResourceLimitsPtrOutput struct{ *pulumi.OutputState }

func (ResourceLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLimits)(nil)).Elem()
}

func (o ResourceLimitsPtrOutput) ToResourceLimitsPtrOutput() ResourceLimitsPtrOutput {
	return o
}

func (o ResourceLimitsPtrOutput) ToResourceLimitsPtrOutputWithContext(ctx context.Context) ResourceLimitsPtrOutput {
	return o
}

func (o ResourceLimitsPtrOutput) Elem() ResourceLimitsOutput {
	return o.ApplyT(func(v *ResourceLimits) ResourceLimits { return *v }).(ResourceLimitsOutput)
}

// CPU limits in cores. At present, only full cores are supported.
func (o ResourceLimitsPtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ResourceLimits) *float64 {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// The memory limit in GB.
func (o ResourceLimitsPtrOutput) MemoryInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ResourceLimits) *float64 {
		if v == nil {
			return nil
		}
		return v.MemoryInGB
	}).(pulumi.Float64PtrOutput)
}

// This type describes the resource limits for a given container. It describes the most amount of resources a container is allowed to use before being restarted.
type ResourceLimitsResponse struct {
	// CPU limits in cores. At present, only full cores are supported.
	Cpu *float64 `pulumi:"cpu"`
	// The memory limit in GB.
	MemoryInGB *float64 `pulumi:"memoryInGB"`
}

// ResourceLimitsResponseInput is an input type that accepts ResourceLimitsResponseArgs and ResourceLimitsResponseOutput values.
// You can construct a concrete instance of `ResourceLimitsResponseInput` via:
//
//          ResourceLimitsResponseArgs{...}
type ResourceLimitsResponseInput interface {
	pulumi.Input

	ToResourceLimitsResponseOutput() ResourceLimitsResponseOutput
	ToResourceLimitsResponseOutputWithContext(context.Context) ResourceLimitsResponseOutput
}

// This type describes the resource limits for a given container. It describes the most amount of resources a container is allowed to use before being restarted.
type ResourceLimitsResponseArgs struct {
	// CPU limits in cores. At present, only full cores are supported.
	Cpu pulumi.Float64PtrInput `pulumi:"cpu"`
	// The memory limit in GB.
	MemoryInGB pulumi.Float64PtrInput `pulumi:"memoryInGB"`
}

func (ResourceLimitsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimitsResponse)(nil)).Elem()
}

func (i ResourceLimitsResponseArgs) ToResourceLimitsResponseOutput() ResourceLimitsResponseOutput {
	return i.ToResourceLimitsResponseOutputWithContext(context.Background())
}

func (i ResourceLimitsResponseArgs) ToResourceLimitsResponseOutputWithContext(ctx context.Context) ResourceLimitsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsResponseOutput)
}

func (i ResourceLimitsResponseArgs) ToResourceLimitsResponsePtrOutput() ResourceLimitsResponsePtrOutput {
	return i.ToResourceLimitsResponsePtrOutputWithContext(context.Background())
}

func (i ResourceLimitsResponseArgs) ToResourceLimitsResponsePtrOutputWithContext(ctx context.Context) ResourceLimitsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsResponseOutput).ToResourceLimitsResponsePtrOutputWithContext(ctx)
}

// ResourceLimitsResponsePtrInput is an input type that accepts ResourceLimitsResponseArgs, ResourceLimitsResponsePtr and ResourceLimitsResponsePtrOutput values.
// You can construct a concrete instance of `ResourceLimitsResponsePtrInput` via:
//
//          ResourceLimitsResponseArgs{...}
//
//  or:
//
//          nil
type ResourceLimitsResponsePtrInput interface {
	pulumi.Input

	ToResourceLimitsResponsePtrOutput() ResourceLimitsResponsePtrOutput
	ToResourceLimitsResponsePtrOutputWithContext(context.Context) ResourceLimitsResponsePtrOutput
}

type resourceLimitsResponsePtrType ResourceLimitsResponseArgs

func ResourceLimitsResponsePtr(v *ResourceLimitsResponseArgs) ResourceLimitsResponsePtrInput {
	return (*resourceLimitsResponsePtrType)(v)
}

func (*resourceLimitsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLimitsResponse)(nil)).Elem()
}

func (i *resourceLimitsResponsePtrType) ToResourceLimitsResponsePtrOutput() ResourceLimitsResponsePtrOutput {
	return i.ToResourceLimitsResponsePtrOutputWithContext(context.Background())
}

func (i *resourceLimitsResponsePtrType) ToResourceLimitsResponsePtrOutputWithContext(ctx context.Context) ResourceLimitsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsResponsePtrOutput)
}

// This type describes the resource limits for a given container. It describes the most amount of resources a container is allowed to use before being restarted.
type ResourceLimitsResponseOutput struct{ *pulumi.OutputState }

func (ResourceLimitsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimitsResponse)(nil)).Elem()
}

func (o ResourceLimitsResponseOutput) ToResourceLimitsResponseOutput() ResourceLimitsResponseOutput {
	return o
}

func (o ResourceLimitsResponseOutput) ToResourceLimitsResponseOutputWithContext(ctx context.Context) ResourceLimitsResponseOutput {
	return o
}

func (o ResourceLimitsResponseOutput) ToResourceLimitsResponsePtrOutput() ResourceLimitsResponsePtrOutput {
	return o.ToResourceLimitsResponsePtrOutputWithContext(context.Background())
}

func (o ResourceLimitsResponseOutput) ToResourceLimitsResponsePtrOutputWithContext(ctx context.Context) ResourceLimitsResponsePtrOutput {
	return o.ApplyT(func(v ResourceLimitsResponse) *ResourceLimitsResponse {
		return &v
	}).(ResourceLimitsResponsePtrOutput)
}

// CPU limits in cores. At present, only full cores are supported.
func (o ResourceLimitsResponseOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ResourceLimitsResponse) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

// The memory limit in GB.
func (o ResourceLimitsResponseOutput) MemoryInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ResourceLimitsResponse) *float64 { return v.MemoryInGB }).(pulumi.Float64PtrOutput)
}

type ResourceLimitsResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceLimitsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLimitsResponse)(nil)).Elem()
}

func (o ResourceLimitsResponsePtrOutput) ToResourceLimitsResponsePtrOutput() ResourceLimitsResponsePtrOutput {
	return o
}

func (o ResourceLimitsResponsePtrOutput) ToResourceLimitsResponsePtrOutputWithContext(ctx context.Context) ResourceLimitsResponsePtrOutput {
	return o
}

func (o ResourceLimitsResponsePtrOutput) Elem() ResourceLimitsResponseOutput {
	return o.ApplyT(func(v *ResourceLimitsResponse) ResourceLimitsResponse { return *v }).(ResourceLimitsResponseOutput)
}

// CPU limits in cores. At present, only full cores are supported.
func (o ResourceLimitsResponsePtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ResourceLimitsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// The memory limit in GB.
func (o ResourceLimitsResponsePtrOutput) MemoryInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ResourceLimitsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MemoryInGB
	}).(pulumi.Float64PtrOutput)
}

// This type describes the requested resources for a given container. It describes the least amount of resources required for the container. A container can consume more than requested resources up to the specified limits before being restarted. Currently, the requested resources are treated as limits.
type ResourceRequests struct {
	// Requested number of CPU cores. At present, only full cores are supported.
	Cpu float64 `pulumi:"cpu"`
	// The memory request in GB for this container.
	MemoryInGB float64 `pulumi:"memoryInGB"`
}

// ResourceRequestsInput is an input type that accepts ResourceRequestsArgs and ResourceRequestsOutput values.
// You can construct a concrete instance of `ResourceRequestsInput` via:
//
//          ResourceRequestsArgs{...}
type ResourceRequestsInput interface {
	pulumi.Input

	ToResourceRequestsOutput() ResourceRequestsOutput
	ToResourceRequestsOutputWithContext(context.Context) ResourceRequestsOutput
}

// This type describes the requested resources for a given container. It describes the least amount of resources required for the container. A container can consume more than requested resources up to the specified limits before being restarted. Currently, the requested resources are treated as limits.
type ResourceRequestsArgs struct {
	// Requested number of CPU cores. At present, only full cores are supported.
	Cpu pulumi.Float64Input `pulumi:"cpu"`
	// The memory request in GB for this container.
	MemoryInGB pulumi.Float64Input `pulumi:"memoryInGB"`
}

func (ResourceRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequests)(nil)).Elem()
}

func (i ResourceRequestsArgs) ToResourceRequestsOutput() ResourceRequestsOutput {
	return i.ToResourceRequestsOutputWithContext(context.Background())
}

func (i ResourceRequestsArgs) ToResourceRequestsOutputWithContext(ctx context.Context) ResourceRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequestsOutput)
}

// This type describes the requested resources for a given container. It describes the least amount of resources required for the container. A container can consume more than requested resources up to the specified limits before being restarted. Currently, the requested resources are treated as limits.
type ResourceRequestsOutput struct{ *pulumi.OutputState }

func (ResourceRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequests)(nil)).Elem()
}

func (o ResourceRequestsOutput) ToResourceRequestsOutput() ResourceRequestsOutput {
	return o
}

func (o ResourceRequestsOutput) ToResourceRequestsOutputWithContext(ctx context.Context) ResourceRequestsOutput {
	return o
}

// Requested number of CPU cores. At present, only full cores are supported.
func (o ResourceRequestsOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceRequests) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// The memory request in GB for this container.
func (o ResourceRequestsOutput) MemoryInGB() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceRequests) float64 { return v.MemoryInGB }).(pulumi.Float64Output)
}

// This type describes the requested resources for a given container. It describes the least amount of resources required for the container. A container can consume more than requested resources up to the specified limits before being restarted. Currently, the requested resources are treated as limits.
type ResourceRequestsResponse struct {
	// Requested number of CPU cores. At present, only full cores are supported.
	Cpu float64 `pulumi:"cpu"`
	// The memory request in GB for this container.
	MemoryInGB float64 `pulumi:"memoryInGB"`
}

// ResourceRequestsResponseInput is an input type that accepts ResourceRequestsResponseArgs and ResourceRequestsResponseOutput values.
// You can construct a concrete instance of `ResourceRequestsResponseInput` via:
//
//          ResourceRequestsResponseArgs{...}
type ResourceRequestsResponseInput interface {
	pulumi.Input

	ToResourceRequestsResponseOutput() ResourceRequestsResponseOutput
	ToResourceRequestsResponseOutputWithContext(context.Context) ResourceRequestsResponseOutput
}

// This type describes the requested resources for a given container. It describes the least amount of resources required for the container. A container can consume more than requested resources up to the specified limits before being restarted. Currently, the requested resources are treated as limits.
type ResourceRequestsResponseArgs struct {
	// Requested number of CPU cores. At present, only full cores are supported.
	Cpu pulumi.Float64Input `pulumi:"cpu"`
	// The memory request in GB for this container.
	MemoryInGB pulumi.Float64Input `pulumi:"memoryInGB"`
}

func (ResourceRequestsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequestsResponse)(nil)).Elem()
}

func (i ResourceRequestsResponseArgs) ToResourceRequestsResponseOutput() ResourceRequestsResponseOutput {
	return i.ToResourceRequestsResponseOutputWithContext(context.Background())
}

func (i ResourceRequestsResponseArgs) ToResourceRequestsResponseOutputWithContext(ctx context.Context) ResourceRequestsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequestsResponseOutput)
}

// This type describes the requested resources for a given container. It describes the least amount of resources required for the container. A container can consume more than requested resources up to the specified limits before being restarted. Currently, the requested resources are treated as limits.
type ResourceRequestsResponseOutput struct{ *pulumi.OutputState }

func (ResourceRequestsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequestsResponse)(nil)).Elem()
}

func (o ResourceRequestsResponseOutput) ToResourceRequestsResponseOutput() ResourceRequestsResponseOutput {
	return o
}

func (o ResourceRequestsResponseOutput) ToResourceRequestsResponseOutputWithContext(ctx context.Context) ResourceRequestsResponseOutput {
	return o
}

// Requested number of CPU cores. At present, only full cores are supported.
func (o ResourceRequestsResponseOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceRequestsResponse) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// The memory request in GB for this container.
func (o ResourceRequestsResponseOutput) MemoryInGB() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceRequestsResponse) float64 { return v.MemoryInGB }).(pulumi.Float64Output)
}

// This type describes the resource requirements for a container or a service.
type ResourceRequirements struct {
	// Describes the maximum limits on the resources for a given container.
	Limits *ResourceLimits `pulumi:"limits"`
	// Describes the requested resources for a given container.
	Requests ResourceRequests `pulumi:"requests"`
}

// ResourceRequirementsInput is an input type that accepts ResourceRequirementsArgs and ResourceRequirementsOutput values.
// You can construct a concrete instance of `ResourceRequirementsInput` via:
//
//          ResourceRequirementsArgs{...}
type ResourceRequirementsInput interface {
	pulumi.Input

	ToResourceRequirementsOutput() ResourceRequirementsOutput
	ToResourceRequirementsOutputWithContext(context.Context) ResourceRequirementsOutput
}

// This type describes the resource requirements for a container or a service.
type ResourceRequirementsArgs struct {
	// Describes the maximum limits on the resources for a given container.
	Limits ResourceLimitsPtrInput `pulumi:"limits"`
	// Describes the requested resources for a given container.
	Requests ResourceRequestsInput `pulumi:"requests"`
}

func (ResourceRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirements)(nil)).Elem()
}

func (i ResourceRequirementsArgs) ToResourceRequirementsOutput() ResourceRequirementsOutput {
	return i.ToResourceRequirementsOutputWithContext(context.Background())
}

func (i ResourceRequirementsArgs) ToResourceRequirementsOutputWithContext(ctx context.Context) ResourceRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsOutput)
}

// This type describes the resource requirements for a container or a service.
type ResourceRequirementsOutput struct{ *pulumi.OutputState }

func (ResourceRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirements)(nil)).Elem()
}

func (o ResourceRequirementsOutput) ToResourceRequirementsOutput() ResourceRequirementsOutput {
	return o
}

func (o ResourceRequirementsOutput) ToResourceRequirementsOutputWithContext(ctx context.Context) ResourceRequirementsOutput {
	return o
}

// Describes the maximum limits on the resources for a given container.
func (o ResourceRequirementsOutput) Limits() ResourceLimitsPtrOutput {
	return o.ApplyT(func(v ResourceRequirements) *ResourceLimits { return v.Limits }).(ResourceLimitsPtrOutput)
}

// Describes the requested resources for a given container.
func (o ResourceRequirementsOutput) Requests() ResourceRequestsOutput {
	return o.ApplyT(func(v ResourceRequirements) ResourceRequests { return v.Requests }).(ResourceRequestsOutput)
}

// This type describes the resource requirements for a container or a service.
type ResourceRequirementsResponse struct {
	// Describes the maximum limits on the resources for a given container.
	Limits *ResourceLimitsResponse `pulumi:"limits"`
	// Describes the requested resources for a given container.
	Requests ResourceRequestsResponse `pulumi:"requests"`
}

// ResourceRequirementsResponseInput is an input type that accepts ResourceRequirementsResponseArgs and ResourceRequirementsResponseOutput values.
// You can construct a concrete instance of `ResourceRequirementsResponseInput` via:
//
//          ResourceRequirementsResponseArgs{...}
type ResourceRequirementsResponseInput interface {
	pulumi.Input

	ToResourceRequirementsResponseOutput() ResourceRequirementsResponseOutput
	ToResourceRequirementsResponseOutputWithContext(context.Context) ResourceRequirementsResponseOutput
}

// This type describes the resource requirements for a container or a service.
type ResourceRequirementsResponseArgs struct {
	// Describes the maximum limits on the resources for a given container.
	Limits ResourceLimitsResponsePtrInput `pulumi:"limits"`
	// Describes the requested resources for a given container.
	Requests ResourceRequestsResponseInput `pulumi:"requests"`
}

func (ResourceRequirementsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirementsResponse)(nil)).Elem()
}

func (i ResourceRequirementsResponseArgs) ToResourceRequirementsResponseOutput() ResourceRequirementsResponseOutput {
	return i.ToResourceRequirementsResponseOutputWithContext(context.Background())
}

func (i ResourceRequirementsResponseArgs) ToResourceRequirementsResponseOutputWithContext(ctx context.Context) ResourceRequirementsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsResponseOutput)
}

// This type describes the resource requirements for a container or a service.
type ResourceRequirementsResponseOutput struct{ *pulumi.OutputState }

func (ResourceRequirementsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirementsResponse)(nil)).Elem()
}

func (o ResourceRequirementsResponseOutput) ToResourceRequirementsResponseOutput() ResourceRequirementsResponseOutput {
	return o
}

func (o ResourceRequirementsResponseOutput) ToResourceRequirementsResponseOutputWithContext(ctx context.Context) ResourceRequirementsResponseOutput {
	return o
}

// Describes the maximum limits on the resources for a given container.
func (o ResourceRequirementsResponseOutput) Limits() ResourceLimitsResponsePtrOutput {
	return o.ApplyT(func(v ResourceRequirementsResponse) *ResourceLimitsResponse { return v.Limits }).(ResourceLimitsResponsePtrOutput)
}

// Describes the requested resources for a given container.
func (o ResourceRequirementsResponseOutput) Requests() ResourceRequestsResponseOutput {
	return o.ApplyT(func(v ResourceRequirementsResponse) ResourceRequestsResponse { return v.Requests }).(ResourceRequestsResponseOutput)
}

// This type describes a service resource.
type ServiceResourceDescription struct {
	// Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).
	CodePackages []ContainerCodePackageProperties `pulumi:"codePackages"`
	// User readable description of the service.
	Description *string `pulumi:"description"`
	// Reference to sinks in DiagnosticsDescription.
	Diagnostics *DiagnosticsRef `pulumi:"diagnostics"`
	// The health state of a resource such as Application, Service, or Network.
	HealthState *string `pulumi:"healthState"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// The names of the private networks that this service needs to be part of.
	NetworkRefs []NetworkRef `pulumi:"networkRefs"`
	// The Operating system type required by the code in service.
	OsType string `pulumi:"osType"`
	// The number of replicas of the service to create. Defaults to 1 if not specified.
	ReplicaCount *int `pulumi:"replicaCount"`
}

// ServiceResourceDescriptionInput is an input type that accepts ServiceResourceDescriptionArgs and ServiceResourceDescriptionOutput values.
// You can construct a concrete instance of `ServiceResourceDescriptionInput` via:
//
//          ServiceResourceDescriptionArgs{...}
type ServiceResourceDescriptionInput interface {
	pulumi.Input

	ToServiceResourceDescriptionOutput() ServiceResourceDescriptionOutput
	ToServiceResourceDescriptionOutputWithContext(context.Context) ServiceResourceDescriptionOutput
}

// This type describes a service resource.
type ServiceResourceDescriptionArgs struct {
	// Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).
	CodePackages ContainerCodePackagePropertiesArrayInput `pulumi:"codePackages"`
	// User readable description of the service.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Reference to sinks in DiagnosticsDescription.
	Diagnostics DiagnosticsRefPtrInput `pulumi:"diagnostics"`
	// The health state of a resource such as Application, Service, or Network.
	HealthState pulumi.StringPtrInput `pulumi:"healthState"`
	// The name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The names of the private networks that this service needs to be part of.
	NetworkRefs NetworkRefArrayInput `pulumi:"networkRefs"`
	// The Operating system type required by the code in service.
	OsType pulumi.StringInput `pulumi:"osType"`
	// The number of replicas of the service to create. Defaults to 1 if not specified.
	ReplicaCount pulumi.IntPtrInput `pulumi:"replicaCount"`
}

func (ServiceResourceDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceResourceDescription)(nil)).Elem()
}

func (i ServiceResourceDescriptionArgs) ToServiceResourceDescriptionOutput() ServiceResourceDescriptionOutput {
	return i.ToServiceResourceDescriptionOutputWithContext(context.Background())
}

func (i ServiceResourceDescriptionArgs) ToServiceResourceDescriptionOutputWithContext(ctx context.Context) ServiceResourceDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceResourceDescriptionOutput)
}

// ServiceResourceDescriptionArrayInput is an input type that accepts ServiceResourceDescriptionArray and ServiceResourceDescriptionArrayOutput values.
// You can construct a concrete instance of `ServiceResourceDescriptionArrayInput` via:
//
//          ServiceResourceDescriptionArray{ ServiceResourceDescriptionArgs{...} }
type ServiceResourceDescriptionArrayInput interface {
	pulumi.Input

	ToServiceResourceDescriptionArrayOutput() ServiceResourceDescriptionArrayOutput
	ToServiceResourceDescriptionArrayOutputWithContext(context.Context) ServiceResourceDescriptionArrayOutput
}

type ServiceResourceDescriptionArray []ServiceResourceDescriptionInput

func (ServiceResourceDescriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceResourceDescription)(nil)).Elem()
}

func (i ServiceResourceDescriptionArray) ToServiceResourceDescriptionArrayOutput() ServiceResourceDescriptionArrayOutput {
	return i.ToServiceResourceDescriptionArrayOutputWithContext(context.Background())
}

func (i ServiceResourceDescriptionArray) ToServiceResourceDescriptionArrayOutputWithContext(ctx context.Context) ServiceResourceDescriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceResourceDescriptionArrayOutput)
}

// This type describes a service resource.
type ServiceResourceDescriptionOutput struct{ *pulumi.OutputState }

func (ServiceResourceDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceResourceDescription)(nil)).Elem()
}

func (o ServiceResourceDescriptionOutput) ToServiceResourceDescriptionOutput() ServiceResourceDescriptionOutput {
	return o
}

func (o ServiceResourceDescriptionOutput) ToServiceResourceDescriptionOutputWithContext(ctx context.Context) ServiceResourceDescriptionOutput {
	return o
}

// Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).
func (o ServiceResourceDescriptionOutput) CodePackages() ContainerCodePackagePropertiesArrayOutput {
	return o.ApplyT(func(v ServiceResourceDescription) []ContainerCodePackageProperties { return v.CodePackages }).(ContainerCodePackagePropertiesArrayOutput)
}

// User readable description of the service.
func (o ServiceResourceDescriptionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceResourceDescription) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Reference to sinks in DiagnosticsDescription.
func (o ServiceResourceDescriptionOutput) Diagnostics() DiagnosticsRefPtrOutput {
	return o.ApplyT(func(v ServiceResourceDescription) *DiagnosticsRef { return v.Diagnostics }).(DiagnosticsRefPtrOutput)
}

// The health state of a resource such as Application, Service, or Network.
func (o ServiceResourceDescriptionOutput) HealthState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceResourceDescription) *string { return v.HealthState }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o ServiceResourceDescriptionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceResourceDescription) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The names of the private networks that this service needs to be part of.
func (o ServiceResourceDescriptionOutput) NetworkRefs() NetworkRefArrayOutput {
	return o.ApplyT(func(v ServiceResourceDescription) []NetworkRef { return v.NetworkRefs }).(NetworkRefArrayOutput)
}

// The Operating system type required by the code in service.
func (o ServiceResourceDescriptionOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResourceDescription) string { return v.OsType }).(pulumi.StringOutput)
}

// The number of replicas of the service to create. Defaults to 1 if not specified.
func (o ServiceResourceDescriptionOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceResourceDescription) *int { return v.ReplicaCount }).(pulumi.IntPtrOutput)
}

type ServiceResourceDescriptionArrayOutput struct{ *pulumi.OutputState }

func (ServiceResourceDescriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceResourceDescription)(nil)).Elem()
}

func (o ServiceResourceDescriptionArrayOutput) ToServiceResourceDescriptionArrayOutput() ServiceResourceDescriptionArrayOutput {
	return o
}

func (o ServiceResourceDescriptionArrayOutput) ToServiceResourceDescriptionArrayOutputWithContext(ctx context.Context) ServiceResourceDescriptionArrayOutput {
	return o
}

func (o ServiceResourceDescriptionArrayOutput) Index(i pulumi.IntInput) ServiceResourceDescriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceResourceDescription {
		return vs[0].([]ServiceResourceDescription)[vs[1].(int)]
	}).(ServiceResourceDescriptionOutput)
}

// This type describes a service resource.
type ServiceResourceDescriptionResponse struct {
	// Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).
	CodePackages []ContainerCodePackagePropertiesResponse `pulumi:"codePackages"`
	// User readable description of the service.
	Description *string `pulumi:"description"`
	// Reference to sinks in DiagnosticsDescription.
	Diagnostics *DiagnosticsRefResponse `pulumi:"diagnostics"`
	// The health state of a resource such as Application, Service, or Network.
	HealthState *string `pulumi:"healthState"`
	// Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// The names of the private networks that this service needs to be part of.
	NetworkRefs []NetworkRefResponse `pulumi:"networkRefs"`
	// The Operating system type required by the code in service.
	OsType string `pulumi:"osType"`
	// The number of replicas of the service to create. Defaults to 1 if not specified.
	ReplicaCount *int `pulumi:"replicaCount"`
	// Represents the status of the service.
	Status string `pulumi:"status"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type string `pulumi:"type"`
}

// ServiceResourceDescriptionResponseInput is an input type that accepts ServiceResourceDescriptionResponseArgs and ServiceResourceDescriptionResponseOutput values.
// You can construct a concrete instance of `ServiceResourceDescriptionResponseInput` via:
//
//          ServiceResourceDescriptionResponseArgs{...}
type ServiceResourceDescriptionResponseInput interface {
	pulumi.Input

	ToServiceResourceDescriptionResponseOutput() ServiceResourceDescriptionResponseOutput
	ToServiceResourceDescriptionResponseOutputWithContext(context.Context) ServiceResourceDescriptionResponseOutput
}

// This type describes a service resource.
type ServiceResourceDescriptionResponseArgs struct {
	// Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).
	CodePackages ContainerCodePackagePropertiesResponseArrayInput `pulumi:"codePackages"`
	// User readable description of the service.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Reference to sinks in DiagnosticsDescription.
	Diagnostics DiagnosticsRefResponsePtrInput `pulumi:"diagnostics"`
	// The health state of a resource such as Application, Service, or Network.
	HealthState pulumi.StringPtrInput `pulumi:"healthState"`
	// Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The names of the private networks that this service needs to be part of.
	NetworkRefs NetworkRefResponseArrayInput `pulumi:"networkRefs"`
	// The Operating system type required by the code in service.
	OsType pulumi.StringInput `pulumi:"osType"`
	// The number of replicas of the service to create. Defaults to 1 if not specified.
	ReplicaCount pulumi.IntPtrInput `pulumi:"replicaCount"`
	// Represents the status of the service.
	Status pulumi.StringInput `pulumi:"status"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceResourceDescriptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceResourceDescriptionResponse)(nil)).Elem()
}

func (i ServiceResourceDescriptionResponseArgs) ToServiceResourceDescriptionResponseOutput() ServiceResourceDescriptionResponseOutput {
	return i.ToServiceResourceDescriptionResponseOutputWithContext(context.Background())
}

func (i ServiceResourceDescriptionResponseArgs) ToServiceResourceDescriptionResponseOutputWithContext(ctx context.Context) ServiceResourceDescriptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceResourceDescriptionResponseOutput)
}

// ServiceResourceDescriptionResponseArrayInput is an input type that accepts ServiceResourceDescriptionResponseArray and ServiceResourceDescriptionResponseArrayOutput values.
// You can construct a concrete instance of `ServiceResourceDescriptionResponseArrayInput` via:
//
//          ServiceResourceDescriptionResponseArray{ ServiceResourceDescriptionResponseArgs{...} }
type ServiceResourceDescriptionResponseArrayInput interface {
	pulumi.Input

	ToServiceResourceDescriptionResponseArrayOutput() ServiceResourceDescriptionResponseArrayOutput
	ToServiceResourceDescriptionResponseArrayOutputWithContext(context.Context) ServiceResourceDescriptionResponseArrayOutput
}

type ServiceResourceDescriptionResponseArray []ServiceResourceDescriptionResponseInput

func (ServiceResourceDescriptionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceResourceDescriptionResponse)(nil)).Elem()
}

func (i ServiceResourceDescriptionResponseArray) ToServiceResourceDescriptionResponseArrayOutput() ServiceResourceDescriptionResponseArrayOutput {
	return i.ToServiceResourceDescriptionResponseArrayOutputWithContext(context.Background())
}

func (i ServiceResourceDescriptionResponseArray) ToServiceResourceDescriptionResponseArrayOutputWithContext(ctx context.Context) ServiceResourceDescriptionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceResourceDescriptionResponseArrayOutput)
}

// This type describes a service resource.
type ServiceResourceDescriptionResponseOutput struct{ *pulumi.OutputState }

func (ServiceResourceDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceResourceDescriptionResponse)(nil)).Elem()
}

func (o ServiceResourceDescriptionResponseOutput) ToServiceResourceDescriptionResponseOutput() ServiceResourceDescriptionResponseOutput {
	return o
}

func (o ServiceResourceDescriptionResponseOutput) ToServiceResourceDescriptionResponseOutputWithContext(ctx context.Context) ServiceResourceDescriptionResponseOutput {
	return o
}

// Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).
func (o ServiceResourceDescriptionResponseOutput) CodePackages() ContainerCodePackagePropertiesResponseArrayOutput {
	return o.ApplyT(func(v ServiceResourceDescriptionResponse) []ContainerCodePackagePropertiesResponse {
		return v.CodePackages
	}).(ContainerCodePackagePropertiesResponseArrayOutput)
}

// User readable description of the service.
func (o ServiceResourceDescriptionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceResourceDescriptionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Reference to sinks in DiagnosticsDescription.
func (o ServiceResourceDescriptionResponseOutput) Diagnostics() DiagnosticsRefResponsePtrOutput {
	return o.ApplyT(func(v ServiceResourceDescriptionResponse) *DiagnosticsRefResponse { return v.Diagnostics }).(DiagnosticsRefResponsePtrOutput)
}

// The health state of a resource such as Application, Service, or Network.
func (o ServiceResourceDescriptionResponseOutput) HealthState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceResourceDescriptionResponse) *string { return v.HealthState }).(pulumi.StringPtrOutput)
}

// Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o ServiceResourceDescriptionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResourceDescriptionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o ServiceResourceDescriptionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceResourceDescriptionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The names of the private networks that this service needs to be part of.
func (o ServiceResourceDescriptionResponseOutput) NetworkRefs() NetworkRefResponseArrayOutput {
	return o.ApplyT(func(v ServiceResourceDescriptionResponse) []NetworkRefResponse { return v.NetworkRefs }).(NetworkRefResponseArrayOutput)
}

// The Operating system type required by the code in service.
func (o ServiceResourceDescriptionResponseOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResourceDescriptionResponse) string { return v.OsType }).(pulumi.StringOutput)
}

// The number of replicas of the service to create. Defaults to 1 if not specified.
func (o ServiceResourceDescriptionResponseOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceResourceDescriptionResponse) *int { return v.ReplicaCount }).(pulumi.IntPtrOutput)
}

// Represents the status of the service.
func (o ServiceResourceDescriptionResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResourceDescriptionResponse) string { return v.Status }).(pulumi.StringOutput)
}

// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
func (o ServiceResourceDescriptionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResourceDescriptionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceResourceDescriptionResponseArrayOutput struct{ *pulumi.OutputState }

func (ServiceResourceDescriptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceResourceDescriptionResponse)(nil)).Elem()
}

func (o ServiceResourceDescriptionResponseArrayOutput) ToServiceResourceDescriptionResponseArrayOutput() ServiceResourceDescriptionResponseArrayOutput {
	return o
}

func (o ServiceResourceDescriptionResponseArrayOutput) ToServiceResourceDescriptionResponseArrayOutputWithContext(ctx context.Context) ServiceResourceDescriptionResponseArrayOutput {
	return o
}

func (o ServiceResourceDescriptionResponseArrayOutput) Index(i pulumi.IntInput) ServiceResourceDescriptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceResourceDescriptionResponse {
		return vs[0].([]ServiceResourceDescriptionResponse)[vs[1].(int)]
	}).(ServiceResourceDescriptionResponseOutput)
}

// Describes a setting for the container.
type Setting struct {
	// The name of the setting.
	Name *string `pulumi:"name"`
	// The value of the setting.
	Value *string `pulumi:"value"`
}

// SettingInput is an input type that accepts SettingArgs and SettingOutput values.
// You can construct a concrete instance of `SettingInput` via:
//
//          SettingArgs{...}
type SettingInput interface {
	pulumi.Input

	ToSettingOutput() SettingOutput
	ToSettingOutputWithContext(context.Context) SettingOutput
}

// Describes a setting for the container.
type SettingArgs struct {
	// The name of the setting.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the setting.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Setting)(nil)).Elem()
}

func (i SettingArgs) ToSettingOutput() SettingOutput {
	return i.ToSettingOutputWithContext(context.Background())
}

func (i SettingArgs) ToSettingOutputWithContext(ctx context.Context) SettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingOutput)
}

// SettingArrayInput is an input type that accepts SettingArray and SettingArrayOutput values.
// You can construct a concrete instance of `SettingArrayInput` via:
//
//          SettingArray{ SettingArgs{...} }
type SettingArrayInput interface {
	pulumi.Input

	ToSettingArrayOutput() SettingArrayOutput
	ToSettingArrayOutputWithContext(context.Context) SettingArrayOutput
}

type SettingArray []SettingInput

func (SettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Setting)(nil)).Elem()
}

func (i SettingArray) ToSettingArrayOutput() SettingArrayOutput {
	return i.ToSettingArrayOutputWithContext(context.Background())
}

func (i SettingArray) ToSettingArrayOutputWithContext(ctx context.Context) SettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingArrayOutput)
}

// Describes a setting for the container.
type SettingOutput struct{ *pulumi.OutputState }

func (SettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Setting)(nil)).Elem()
}

func (o SettingOutput) ToSettingOutput() SettingOutput {
	return o
}

func (o SettingOutput) ToSettingOutputWithContext(ctx context.Context) SettingOutput {
	return o
}

// The name of the setting.
func (o SettingOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Setting) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the setting.
func (o SettingOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Setting) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SettingArrayOutput struct{ *pulumi.OutputState }

func (SettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Setting)(nil)).Elem()
}

func (o SettingArrayOutput) ToSettingArrayOutput() SettingArrayOutput {
	return o
}

func (o SettingArrayOutput) ToSettingArrayOutputWithContext(ctx context.Context) SettingArrayOutput {
	return o
}

func (o SettingArrayOutput) Index(i pulumi.IntInput) SettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Setting {
		return vs[0].([]Setting)[vs[1].(int)]
	}).(SettingOutput)
}

// Describes a setting for the container.
type SettingResponse struct {
	// The name of the setting.
	Name *string `pulumi:"name"`
	// The value of the setting.
	Value *string `pulumi:"value"`
}

// SettingResponseInput is an input type that accepts SettingResponseArgs and SettingResponseOutput values.
// You can construct a concrete instance of `SettingResponseInput` via:
//
//          SettingResponseArgs{...}
type SettingResponseInput interface {
	pulumi.Input

	ToSettingResponseOutput() SettingResponseOutput
	ToSettingResponseOutputWithContext(context.Context) SettingResponseOutput
}

// Describes a setting for the container.
type SettingResponseArgs struct {
	// The name of the setting.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the setting.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SettingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingResponse)(nil)).Elem()
}

func (i SettingResponseArgs) ToSettingResponseOutput() SettingResponseOutput {
	return i.ToSettingResponseOutputWithContext(context.Background())
}

func (i SettingResponseArgs) ToSettingResponseOutputWithContext(ctx context.Context) SettingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingResponseOutput)
}

// SettingResponseArrayInput is an input type that accepts SettingResponseArray and SettingResponseArrayOutput values.
// You can construct a concrete instance of `SettingResponseArrayInput` via:
//
//          SettingResponseArray{ SettingResponseArgs{...} }
type SettingResponseArrayInput interface {
	pulumi.Input

	ToSettingResponseArrayOutput() SettingResponseArrayOutput
	ToSettingResponseArrayOutputWithContext(context.Context) SettingResponseArrayOutput
}

type SettingResponseArray []SettingResponseInput

func (SettingResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingResponse)(nil)).Elem()
}

func (i SettingResponseArray) ToSettingResponseArrayOutput() SettingResponseArrayOutput {
	return i.ToSettingResponseArrayOutputWithContext(context.Background())
}

func (i SettingResponseArray) ToSettingResponseArrayOutputWithContext(ctx context.Context) SettingResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingResponseArrayOutput)
}

// Describes a setting for the container.
type SettingResponseOutput struct{ *pulumi.OutputState }

func (SettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingResponse)(nil)).Elem()
}

func (o SettingResponseOutput) ToSettingResponseOutput() SettingResponseOutput {
	return o
}

func (o SettingResponseOutput) ToSettingResponseOutputWithContext(ctx context.Context) SettingResponseOutput {
	return o
}

// The name of the setting.
func (o SettingResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the setting.
func (o SettingResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SettingResponseArrayOutput struct{ *pulumi.OutputState }

func (SettingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingResponse)(nil)).Elem()
}

func (o SettingResponseArrayOutput) ToSettingResponseArrayOutput() SettingResponseArrayOutput {
	return o
}

func (o SettingResponseArrayOutput) ToSettingResponseArrayOutputWithContext(ctx context.Context) SettingResponseArrayOutput {
	return o
}

func (o SettingResponseArrayOutput) Index(i pulumi.IntInput) SettingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingResponse {
		return vs[0].([]SettingResponse)[vs[1].(int)]
	}).(SettingResponseOutput)
}

// This type describes a volume provided by an Azure Files file share.
type VolumeProviderParametersAzureFile struct {
	// Access key of the Azure storage account for the File Share.
	AccountKey *string `pulumi:"accountKey"`
	// Name of the Azure storage account for the File Share.
	AccountName string `pulumi:"accountName"`
	// Name of the Azure Files file share that provides storage for the volume.
	ShareName string `pulumi:"shareName"`
}

// VolumeProviderParametersAzureFileInput is an input type that accepts VolumeProviderParametersAzureFileArgs and VolumeProviderParametersAzureFileOutput values.
// You can construct a concrete instance of `VolumeProviderParametersAzureFileInput` via:
//
//          VolumeProviderParametersAzureFileArgs{...}
type VolumeProviderParametersAzureFileInput interface {
	pulumi.Input

	ToVolumeProviderParametersAzureFileOutput() VolumeProviderParametersAzureFileOutput
	ToVolumeProviderParametersAzureFileOutputWithContext(context.Context) VolumeProviderParametersAzureFileOutput
}

// This type describes a volume provided by an Azure Files file share.
type VolumeProviderParametersAzureFileArgs struct {
	// Access key of the Azure storage account for the File Share.
	AccountKey pulumi.StringPtrInput `pulumi:"accountKey"`
	// Name of the Azure storage account for the File Share.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Name of the Azure Files file share that provides storage for the volume.
	ShareName pulumi.StringInput `pulumi:"shareName"`
}

func (VolumeProviderParametersAzureFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeProviderParametersAzureFile)(nil)).Elem()
}

func (i VolumeProviderParametersAzureFileArgs) ToVolumeProviderParametersAzureFileOutput() VolumeProviderParametersAzureFileOutput {
	return i.ToVolumeProviderParametersAzureFileOutputWithContext(context.Background())
}

func (i VolumeProviderParametersAzureFileArgs) ToVolumeProviderParametersAzureFileOutputWithContext(ctx context.Context) VolumeProviderParametersAzureFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeProviderParametersAzureFileOutput)
}

func (i VolumeProviderParametersAzureFileArgs) ToVolumeProviderParametersAzureFilePtrOutput() VolumeProviderParametersAzureFilePtrOutput {
	return i.ToVolumeProviderParametersAzureFilePtrOutputWithContext(context.Background())
}

func (i VolumeProviderParametersAzureFileArgs) ToVolumeProviderParametersAzureFilePtrOutputWithContext(ctx context.Context) VolumeProviderParametersAzureFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeProviderParametersAzureFileOutput).ToVolumeProviderParametersAzureFilePtrOutputWithContext(ctx)
}

// VolumeProviderParametersAzureFilePtrInput is an input type that accepts VolumeProviderParametersAzureFileArgs, VolumeProviderParametersAzureFilePtr and VolumeProviderParametersAzureFilePtrOutput values.
// You can construct a concrete instance of `VolumeProviderParametersAzureFilePtrInput` via:
//
//          VolumeProviderParametersAzureFileArgs{...}
//
//  or:
//
//          nil
type VolumeProviderParametersAzureFilePtrInput interface {
	pulumi.Input

	ToVolumeProviderParametersAzureFilePtrOutput() VolumeProviderParametersAzureFilePtrOutput
	ToVolumeProviderParametersAzureFilePtrOutputWithContext(context.Context) VolumeProviderParametersAzureFilePtrOutput
}

type volumeProviderParametersAzureFilePtrType VolumeProviderParametersAzureFileArgs

func VolumeProviderParametersAzureFilePtr(v *VolumeProviderParametersAzureFileArgs) VolumeProviderParametersAzureFilePtrInput {
	return (*volumeProviderParametersAzureFilePtrType)(v)
}

func (*volumeProviderParametersAzureFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeProviderParametersAzureFile)(nil)).Elem()
}

func (i *volumeProviderParametersAzureFilePtrType) ToVolumeProviderParametersAzureFilePtrOutput() VolumeProviderParametersAzureFilePtrOutput {
	return i.ToVolumeProviderParametersAzureFilePtrOutputWithContext(context.Background())
}

func (i *volumeProviderParametersAzureFilePtrType) ToVolumeProviderParametersAzureFilePtrOutputWithContext(ctx context.Context) VolumeProviderParametersAzureFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeProviderParametersAzureFilePtrOutput)
}

// This type describes a volume provided by an Azure Files file share.
type VolumeProviderParametersAzureFileOutput struct{ *pulumi.OutputState }

func (VolumeProviderParametersAzureFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeProviderParametersAzureFile)(nil)).Elem()
}

func (o VolumeProviderParametersAzureFileOutput) ToVolumeProviderParametersAzureFileOutput() VolumeProviderParametersAzureFileOutput {
	return o
}

func (o VolumeProviderParametersAzureFileOutput) ToVolumeProviderParametersAzureFileOutputWithContext(ctx context.Context) VolumeProviderParametersAzureFileOutput {
	return o
}

func (o VolumeProviderParametersAzureFileOutput) ToVolumeProviderParametersAzureFilePtrOutput() VolumeProviderParametersAzureFilePtrOutput {
	return o.ToVolumeProviderParametersAzureFilePtrOutputWithContext(context.Background())
}

func (o VolumeProviderParametersAzureFileOutput) ToVolumeProviderParametersAzureFilePtrOutputWithContext(ctx context.Context) VolumeProviderParametersAzureFilePtrOutput {
	return o.ApplyT(func(v VolumeProviderParametersAzureFile) *VolumeProviderParametersAzureFile {
		return &v
	}).(VolumeProviderParametersAzureFilePtrOutput)
}

// Access key of the Azure storage account for the File Share.
func (o VolumeProviderParametersAzureFileOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeProviderParametersAzureFile) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

// Name of the Azure storage account for the File Share.
func (o VolumeProviderParametersAzureFileOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeProviderParametersAzureFile) string { return v.AccountName }).(pulumi.StringOutput)
}

// Name of the Azure Files file share that provides storage for the volume.
func (o VolumeProviderParametersAzureFileOutput) ShareName() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeProviderParametersAzureFile) string { return v.ShareName }).(pulumi.StringOutput)
}

type VolumeProviderParametersAzureFilePtrOutput struct{ *pulumi.OutputState }

func (VolumeProviderParametersAzureFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeProviderParametersAzureFile)(nil)).Elem()
}

func (o VolumeProviderParametersAzureFilePtrOutput) ToVolumeProviderParametersAzureFilePtrOutput() VolumeProviderParametersAzureFilePtrOutput {
	return o
}

func (o VolumeProviderParametersAzureFilePtrOutput) ToVolumeProviderParametersAzureFilePtrOutputWithContext(ctx context.Context) VolumeProviderParametersAzureFilePtrOutput {
	return o
}

func (o VolumeProviderParametersAzureFilePtrOutput) Elem() VolumeProviderParametersAzureFileOutput {
	return o.ApplyT(func(v *VolumeProviderParametersAzureFile) VolumeProviderParametersAzureFile { return *v }).(VolumeProviderParametersAzureFileOutput)
}

// Access key of the Azure storage account for the File Share.
func (o VolumeProviderParametersAzureFilePtrOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeProviderParametersAzureFile) *string {
		if v == nil {
			return nil
		}
		return v.AccountKey
	}).(pulumi.StringPtrOutput)
}

// Name of the Azure storage account for the File Share.
func (o VolumeProviderParametersAzureFilePtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeProviderParametersAzureFile) *string {
		if v == nil {
			return nil
		}
		return &v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Name of the Azure Files file share that provides storage for the volume.
func (o VolumeProviderParametersAzureFilePtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeProviderParametersAzureFile) *string {
		if v == nil {
			return nil
		}
		return &v.ShareName
	}).(pulumi.StringPtrOutput)
}

// This type describes a volume provided by an Azure Files file share.
type VolumeProviderParametersAzureFileResponse struct {
	// Access key of the Azure storage account for the File Share.
	AccountKey *string `pulumi:"accountKey"`
	// Name of the Azure storage account for the File Share.
	AccountName string `pulumi:"accountName"`
	// Name of the Azure Files file share that provides storage for the volume.
	ShareName string `pulumi:"shareName"`
}

// VolumeProviderParametersAzureFileResponseInput is an input type that accepts VolumeProviderParametersAzureFileResponseArgs and VolumeProviderParametersAzureFileResponseOutput values.
// You can construct a concrete instance of `VolumeProviderParametersAzureFileResponseInput` via:
//
//          VolumeProviderParametersAzureFileResponseArgs{...}
type VolumeProviderParametersAzureFileResponseInput interface {
	pulumi.Input

	ToVolumeProviderParametersAzureFileResponseOutput() VolumeProviderParametersAzureFileResponseOutput
	ToVolumeProviderParametersAzureFileResponseOutputWithContext(context.Context) VolumeProviderParametersAzureFileResponseOutput
}

// This type describes a volume provided by an Azure Files file share.
type VolumeProviderParametersAzureFileResponseArgs struct {
	// Access key of the Azure storage account for the File Share.
	AccountKey pulumi.StringPtrInput `pulumi:"accountKey"`
	// Name of the Azure storage account for the File Share.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Name of the Azure Files file share that provides storage for the volume.
	ShareName pulumi.StringInput `pulumi:"shareName"`
}

func (VolumeProviderParametersAzureFileResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeProviderParametersAzureFileResponse)(nil)).Elem()
}

func (i VolumeProviderParametersAzureFileResponseArgs) ToVolumeProviderParametersAzureFileResponseOutput() VolumeProviderParametersAzureFileResponseOutput {
	return i.ToVolumeProviderParametersAzureFileResponseOutputWithContext(context.Background())
}

func (i VolumeProviderParametersAzureFileResponseArgs) ToVolumeProviderParametersAzureFileResponseOutputWithContext(ctx context.Context) VolumeProviderParametersAzureFileResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeProviderParametersAzureFileResponseOutput)
}

func (i VolumeProviderParametersAzureFileResponseArgs) ToVolumeProviderParametersAzureFileResponsePtrOutput() VolumeProviderParametersAzureFileResponsePtrOutput {
	return i.ToVolumeProviderParametersAzureFileResponsePtrOutputWithContext(context.Background())
}

func (i VolumeProviderParametersAzureFileResponseArgs) ToVolumeProviderParametersAzureFileResponsePtrOutputWithContext(ctx context.Context) VolumeProviderParametersAzureFileResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeProviderParametersAzureFileResponseOutput).ToVolumeProviderParametersAzureFileResponsePtrOutputWithContext(ctx)
}

// VolumeProviderParametersAzureFileResponsePtrInput is an input type that accepts VolumeProviderParametersAzureFileResponseArgs, VolumeProviderParametersAzureFileResponsePtr and VolumeProviderParametersAzureFileResponsePtrOutput values.
// You can construct a concrete instance of `VolumeProviderParametersAzureFileResponsePtrInput` via:
//
//          VolumeProviderParametersAzureFileResponseArgs{...}
//
//  or:
//
//          nil
type VolumeProviderParametersAzureFileResponsePtrInput interface {
	pulumi.Input

	ToVolumeProviderParametersAzureFileResponsePtrOutput() VolumeProviderParametersAzureFileResponsePtrOutput
	ToVolumeProviderParametersAzureFileResponsePtrOutputWithContext(context.Context) VolumeProviderParametersAzureFileResponsePtrOutput
}

type volumeProviderParametersAzureFileResponsePtrType VolumeProviderParametersAzureFileResponseArgs

func VolumeProviderParametersAzureFileResponsePtr(v *VolumeProviderParametersAzureFileResponseArgs) VolumeProviderParametersAzureFileResponsePtrInput {
	return (*volumeProviderParametersAzureFileResponsePtrType)(v)
}

func (*volumeProviderParametersAzureFileResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeProviderParametersAzureFileResponse)(nil)).Elem()
}

func (i *volumeProviderParametersAzureFileResponsePtrType) ToVolumeProviderParametersAzureFileResponsePtrOutput() VolumeProviderParametersAzureFileResponsePtrOutput {
	return i.ToVolumeProviderParametersAzureFileResponsePtrOutputWithContext(context.Background())
}

func (i *volumeProviderParametersAzureFileResponsePtrType) ToVolumeProviderParametersAzureFileResponsePtrOutputWithContext(ctx context.Context) VolumeProviderParametersAzureFileResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeProviderParametersAzureFileResponsePtrOutput)
}

// This type describes a volume provided by an Azure Files file share.
type VolumeProviderParametersAzureFileResponseOutput struct{ *pulumi.OutputState }

func (VolumeProviderParametersAzureFileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeProviderParametersAzureFileResponse)(nil)).Elem()
}

func (o VolumeProviderParametersAzureFileResponseOutput) ToVolumeProviderParametersAzureFileResponseOutput() VolumeProviderParametersAzureFileResponseOutput {
	return o
}

func (o VolumeProviderParametersAzureFileResponseOutput) ToVolumeProviderParametersAzureFileResponseOutputWithContext(ctx context.Context) VolumeProviderParametersAzureFileResponseOutput {
	return o
}

func (o VolumeProviderParametersAzureFileResponseOutput) ToVolumeProviderParametersAzureFileResponsePtrOutput() VolumeProviderParametersAzureFileResponsePtrOutput {
	return o.ToVolumeProviderParametersAzureFileResponsePtrOutputWithContext(context.Background())
}

func (o VolumeProviderParametersAzureFileResponseOutput) ToVolumeProviderParametersAzureFileResponsePtrOutputWithContext(ctx context.Context) VolumeProviderParametersAzureFileResponsePtrOutput {
	return o.ApplyT(func(v VolumeProviderParametersAzureFileResponse) *VolumeProviderParametersAzureFileResponse {
		return &v
	}).(VolumeProviderParametersAzureFileResponsePtrOutput)
}

// Access key of the Azure storage account for the File Share.
func (o VolumeProviderParametersAzureFileResponseOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeProviderParametersAzureFileResponse) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

// Name of the Azure storage account for the File Share.
func (o VolumeProviderParametersAzureFileResponseOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeProviderParametersAzureFileResponse) string { return v.AccountName }).(pulumi.StringOutput)
}

// Name of the Azure Files file share that provides storage for the volume.
func (o VolumeProviderParametersAzureFileResponseOutput) ShareName() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeProviderParametersAzureFileResponse) string { return v.ShareName }).(pulumi.StringOutput)
}

type VolumeProviderParametersAzureFileResponsePtrOutput struct{ *pulumi.OutputState }

func (VolumeProviderParametersAzureFileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeProviderParametersAzureFileResponse)(nil)).Elem()
}

func (o VolumeProviderParametersAzureFileResponsePtrOutput) ToVolumeProviderParametersAzureFileResponsePtrOutput() VolumeProviderParametersAzureFileResponsePtrOutput {
	return o
}

func (o VolumeProviderParametersAzureFileResponsePtrOutput) ToVolumeProviderParametersAzureFileResponsePtrOutputWithContext(ctx context.Context) VolumeProviderParametersAzureFileResponsePtrOutput {
	return o
}

func (o VolumeProviderParametersAzureFileResponsePtrOutput) Elem() VolumeProviderParametersAzureFileResponseOutput {
	return o.ApplyT(func(v *VolumeProviderParametersAzureFileResponse) VolumeProviderParametersAzureFileResponse {
		return *v
	}).(VolumeProviderParametersAzureFileResponseOutput)
}

// Access key of the Azure storage account for the File Share.
func (o VolumeProviderParametersAzureFileResponsePtrOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeProviderParametersAzureFileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccountKey
	}).(pulumi.StringPtrOutput)
}

// Name of the Azure storage account for the File Share.
func (o VolumeProviderParametersAzureFileResponsePtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeProviderParametersAzureFileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Name of the Azure Files file share that provides storage for the volume.
func (o VolumeProviderParametersAzureFileResponsePtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeProviderParametersAzureFileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ShareName
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AzureInternalMonitoringPipelineSinkDescriptionOutput{})
	pulumi.RegisterOutputType(AzureInternalMonitoringPipelineSinkDescriptionArrayOutput{})
	pulumi.RegisterOutputType(AzureInternalMonitoringPipelineSinkDescriptionResponseOutput{})
	pulumi.RegisterOutputType(AzureInternalMonitoringPipelineSinkDescriptionResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerCodePackagePropertiesOutput{})
	pulumi.RegisterOutputType(ContainerCodePackagePropertiesArrayOutput{})
	pulumi.RegisterOutputType(ContainerCodePackagePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ContainerCodePackagePropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerEventResponseOutput{})
	pulumi.RegisterOutputType(ContainerEventResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(ContainerLabelOutput{})
	pulumi.RegisterOutputType(ContainerLabelArrayOutput{})
	pulumi.RegisterOutputType(ContainerLabelResponseOutput{})
	pulumi.RegisterOutputType(ContainerLabelResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerStateResponseOutput{})
	pulumi.RegisterOutputType(ContainerStateResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerVolumeOutput{})
	pulumi.RegisterOutputType(ContainerVolumeArrayOutput{})
	pulumi.RegisterOutputType(ContainerVolumeResponseOutput{})
	pulumi.RegisterOutputType(ContainerVolumeResponseArrayOutput{})
	pulumi.RegisterOutputType(DiagnosticsDescriptionOutput{})
	pulumi.RegisterOutputType(DiagnosticsDescriptionPtrOutput{})
	pulumi.RegisterOutputType(DiagnosticsDescriptionResponseOutput{})
	pulumi.RegisterOutputType(DiagnosticsDescriptionResponsePtrOutput{})
	pulumi.RegisterOutputType(DiagnosticsRefOutput{})
	pulumi.RegisterOutputType(DiagnosticsRefPtrOutput{})
	pulumi.RegisterOutputType(DiagnosticsRefResponseOutput{})
	pulumi.RegisterOutputType(DiagnosticsRefResponsePtrOutput{})
	pulumi.RegisterOutputType(EndpointPropertiesOutput{})
	pulumi.RegisterOutputType(EndpointPropertiesArrayOutput{})
	pulumi.RegisterOutputType(EndpointPropertiesResponseOutput{})
	pulumi.RegisterOutputType(EndpointPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageRegistryCredentialOutput{})
	pulumi.RegisterOutputType(ImageRegistryCredentialPtrOutput{})
	pulumi.RegisterOutputType(ImageRegistryCredentialResponseOutput{})
	pulumi.RegisterOutputType(ImageRegistryCredentialResponsePtrOutput{})
	pulumi.RegisterOutputType(IngressConfigOutput{})
	pulumi.RegisterOutputType(IngressConfigPtrOutput{})
	pulumi.RegisterOutputType(IngressConfigResponseOutput{})
	pulumi.RegisterOutputType(IngressConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(Layer4IngressConfigOutput{})
	pulumi.RegisterOutputType(Layer4IngressConfigArrayOutput{})
	pulumi.RegisterOutputType(Layer4IngressConfigResponseOutput{})
	pulumi.RegisterOutputType(Layer4IngressConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkRefOutput{})
	pulumi.RegisterOutputType(NetworkRefArrayOutput{})
	pulumi.RegisterOutputType(NetworkRefResponseOutput{})
	pulumi.RegisterOutputType(NetworkRefResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceLimitsOutput{})
	pulumi.RegisterOutputType(ResourceLimitsPtrOutput{})
	pulumi.RegisterOutputType(ResourceLimitsResponseOutput{})
	pulumi.RegisterOutputType(ResourceLimitsResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceRequestsOutput{})
	pulumi.RegisterOutputType(ResourceRequestsResponseOutput{})
	pulumi.RegisterOutputType(ResourceRequirementsOutput{})
	pulumi.RegisterOutputType(ResourceRequirementsResponseOutput{})
	pulumi.RegisterOutputType(ServiceResourceDescriptionOutput{})
	pulumi.RegisterOutputType(ServiceResourceDescriptionArrayOutput{})
	pulumi.RegisterOutputType(ServiceResourceDescriptionResponseOutput{})
	pulumi.RegisterOutputType(ServiceResourceDescriptionResponseArrayOutput{})
	pulumi.RegisterOutputType(SettingOutput{})
	pulumi.RegisterOutputType(SettingArrayOutput{})
	pulumi.RegisterOutputType(SettingResponseOutput{})
	pulumi.RegisterOutputType(SettingResponseArrayOutput{})
	pulumi.RegisterOutputType(VolumeProviderParametersAzureFileOutput{})
	pulumi.RegisterOutputType(VolumeProviderParametersAzureFilePtrOutput{})
	pulumi.RegisterOutputType(VolumeProviderParametersAzureFileResponseOutput{})
	pulumi.RegisterOutputType(VolumeProviderParametersAzureFileResponsePtrOutput{})
}
