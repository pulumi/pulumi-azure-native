// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210801

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A SqlServerInstance.
type SqlServerInstance struct {
	pulumi.CustomResourceState

	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// null
	Properties SqlServerInstancePropertiesResponseOutput `pulumi:"properties"`
	// Read only system data
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSqlServerInstance registers a new resource with the given unique name, arguments, and options.
func NewSqlServerInstance(ctx *pulumi.Context,
	name string, args *SqlServerInstanceArgs, opts ...pulumi.ResourceOption) (*SqlServerInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:azurearcdata:SqlServerInstance"),
		},
		{
			Type: pulumi.String("azure-native:azurearcdata/v20210601preview:SqlServerInstance"),
		},
		{
			Type: pulumi.String("azure-native:azurearcdata/v20210701preview:SqlServerInstance"),
		},
		{
			Type: pulumi.String("azure-native:azurearcdata/v20211101:SqlServerInstance"),
		},
		{
			Type: pulumi.String("azure-native:azurearcdata/v20220301preview:SqlServerInstance"),
		},
	})
	opts = append(opts, aliases)
	var resource SqlServerInstance
	err := ctx.RegisterResource("azure-native:azurearcdata/v20210801:SqlServerInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlServerInstance gets an existing SqlServerInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlServerInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlServerInstanceState, opts ...pulumi.ResourceOption) (*SqlServerInstance, error) {
	var resource SqlServerInstance
	err := ctx.ReadResource("azure-native:azurearcdata/v20210801:SqlServerInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlServerInstance resources.
type sqlServerInstanceState struct {
}

type SqlServerInstanceState struct {
}

func (SqlServerInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlServerInstanceState)(nil)).Elem()
}

type sqlServerInstanceArgs struct {
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// null
	Properties *SqlServerInstanceProperties `pulumi:"properties"`
	// The name of the Azure resource group
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of SQL Server Instance
	SqlServerInstanceName *string `pulumi:"sqlServerInstanceName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SqlServerInstance resource.
type SqlServerInstanceArgs struct {
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// null
	Properties SqlServerInstancePropertiesPtrInput
	// The name of the Azure resource group
	ResourceGroupName pulumi.StringInput
	// The name of SQL Server Instance
	SqlServerInstanceName pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (SqlServerInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlServerInstanceArgs)(nil)).Elem()
}

type SqlServerInstanceInput interface {
	pulumi.Input

	ToSqlServerInstanceOutput() SqlServerInstanceOutput
	ToSqlServerInstanceOutputWithContext(ctx context.Context) SqlServerInstanceOutput
}

func (*SqlServerInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerInstance)(nil)).Elem()
}

func (i *SqlServerInstance) ToSqlServerInstanceOutput() SqlServerInstanceOutput {
	return i.ToSqlServerInstanceOutputWithContext(context.Background())
}

func (i *SqlServerInstance) ToSqlServerInstanceOutputWithContext(ctx context.Context) SqlServerInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerInstanceOutput)
}

type SqlServerInstanceOutput struct{ *pulumi.OutputState }

func (SqlServerInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerInstance)(nil)).Elem()
}

func (o SqlServerInstanceOutput) ToSqlServerInstanceOutput() SqlServerInstanceOutput {
	return o
}

func (o SqlServerInstanceOutput) ToSqlServerInstanceOutputWithContext(ctx context.Context) SqlServerInstanceOutput {
	return o
}

// The geo-location where the resource lives
func (o SqlServerInstanceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlServerInstance) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o SqlServerInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlServerInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// null
func (o SqlServerInstanceOutput) Properties() SqlServerInstancePropertiesResponseOutput {
	return o.ApplyT(func(v *SqlServerInstance) SqlServerInstancePropertiesResponseOutput { return v.Properties }).(SqlServerInstancePropertiesResponseOutput)
}

// Read only system data
func (o SqlServerInstanceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *SqlServerInstance) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o SqlServerInstanceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SqlServerInstance) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
func (o SqlServerInstanceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlServerInstance) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SqlServerInstanceOutput{})
}
