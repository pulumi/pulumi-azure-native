// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210801

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Username and password for basic login authentication.
type BasicLoginInformation struct {
	// Login password.
	Password *string `pulumi:"password"`
	// Login username.
	Username *string `pulumi:"username"`
}

// BasicLoginInformationInput is an input type that accepts BasicLoginInformationArgs and BasicLoginInformationOutput values.
// You can construct a concrete instance of `BasicLoginInformationInput` via:
//
//	BasicLoginInformationArgs{...}
type BasicLoginInformationInput interface {
	pulumi.Input

	ToBasicLoginInformationOutput() BasicLoginInformationOutput
	ToBasicLoginInformationOutputWithContext(context.Context) BasicLoginInformationOutput
}

// Username and password for basic login authentication.
type BasicLoginInformationArgs struct {
	// Login password.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Login username.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (BasicLoginInformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicLoginInformation)(nil)).Elem()
}

func (i BasicLoginInformationArgs) ToBasicLoginInformationOutput() BasicLoginInformationOutput {
	return i.ToBasicLoginInformationOutputWithContext(context.Background())
}

func (i BasicLoginInformationArgs) ToBasicLoginInformationOutputWithContext(ctx context.Context) BasicLoginInformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicLoginInformationOutput)
}

func (i BasicLoginInformationArgs) ToBasicLoginInformationPtrOutput() BasicLoginInformationPtrOutput {
	return i.ToBasicLoginInformationPtrOutputWithContext(context.Background())
}

func (i BasicLoginInformationArgs) ToBasicLoginInformationPtrOutputWithContext(ctx context.Context) BasicLoginInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicLoginInformationOutput).ToBasicLoginInformationPtrOutputWithContext(ctx)
}

// BasicLoginInformationPtrInput is an input type that accepts BasicLoginInformationArgs, BasicLoginInformationPtr and BasicLoginInformationPtrOutput values.
// You can construct a concrete instance of `BasicLoginInformationPtrInput` via:
//
//	        BasicLoginInformationArgs{...}
//
//	or:
//
//	        nil
type BasicLoginInformationPtrInput interface {
	pulumi.Input

	ToBasicLoginInformationPtrOutput() BasicLoginInformationPtrOutput
	ToBasicLoginInformationPtrOutputWithContext(context.Context) BasicLoginInformationPtrOutput
}

type basicLoginInformationPtrType BasicLoginInformationArgs

func BasicLoginInformationPtr(v *BasicLoginInformationArgs) BasicLoginInformationPtrInput {
	return (*basicLoginInformationPtrType)(v)
}

func (*basicLoginInformationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BasicLoginInformation)(nil)).Elem()
}

func (i *basicLoginInformationPtrType) ToBasicLoginInformationPtrOutput() BasicLoginInformationPtrOutput {
	return i.ToBasicLoginInformationPtrOutputWithContext(context.Background())
}

func (i *basicLoginInformationPtrType) ToBasicLoginInformationPtrOutputWithContext(ctx context.Context) BasicLoginInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicLoginInformationPtrOutput)
}

// Username and password for basic login authentication.
type BasicLoginInformationOutput struct{ *pulumi.OutputState }

func (BasicLoginInformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicLoginInformation)(nil)).Elem()
}

func (o BasicLoginInformationOutput) ToBasicLoginInformationOutput() BasicLoginInformationOutput {
	return o
}

func (o BasicLoginInformationOutput) ToBasicLoginInformationOutputWithContext(ctx context.Context) BasicLoginInformationOutput {
	return o
}

func (o BasicLoginInformationOutput) ToBasicLoginInformationPtrOutput() BasicLoginInformationPtrOutput {
	return o.ToBasicLoginInformationPtrOutputWithContext(context.Background())
}

func (o BasicLoginInformationOutput) ToBasicLoginInformationPtrOutputWithContext(ctx context.Context) BasicLoginInformationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BasicLoginInformation) *BasicLoginInformation {
		return &v
	}).(BasicLoginInformationPtrOutput)
}

// Login password.
func (o BasicLoginInformationOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BasicLoginInformation) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Login username.
func (o BasicLoginInformationOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BasicLoginInformation) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type BasicLoginInformationPtrOutput struct{ *pulumi.OutputState }

func (BasicLoginInformationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BasicLoginInformation)(nil)).Elem()
}

func (o BasicLoginInformationPtrOutput) ToBasicLoginInformationPtrOutput() BasicLoginInformationPtrOutput {
	return o
}

func (o BasicLoginInformationPtrOutput) ToBasicLoginInformationPtrOutputWithContext(ctx context.Context) BasicLoginInformationPtrOutput {
	return o
}

func (o BasicLoginInformationPtrOutput) Elem() BasicLoginInformationOutput {
	return o.ApplyT(func(v *BasicLoginInformation) BasicLoginInformation {
		if v != nil {
			return *v
		}
		var ret BasicLoginInformation
		return ret
	}).(BasicLoginInformationOutput)
}

// Login password.
func (o BasicLoginInformationPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BasicLoginInformation) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Login username.
func (o BasicLoginInformationPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BasicLoginInformation) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Username and password for basic login authentication.
type BasicLoginInformationResponse struct {
	// Login username.
	Username *string `pulumi:"username"`
}

// Username and password for basic login authentication.
type BasicLoginInformationResponseOutput struct{ *pulumi.OutputState }

func (BasicLoginInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicLoginInformationResponse)(nil)).Elem()
}

func (o BasicLoginInformationResponseOutput) ToBasicLoginInformationResponseOutput() BasicLoginInformationResponseOutput {
	return o
}

func (o BasicLoginInformationResponseOutput) ToBasicLoginInformationResponseOutputWithContext(ctx context.Context) BasicLoginInformationResponseOutput {
	return o
}

// Login username.
func (o BasicLoginInformationResponseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BasicLoginInformationResponse) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type BasicLoginInformationResponsePtrOutput struct{ *pulumi.OutputState }

func (BasicLoginInformationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BasicLoginInformationResponse)(nil)).Elem()
}

func (o BasicLoginInformationResponsePtrOutput) ToBasicLoginInformationResponsePtrOutput() BasicLoginInformationResponsePtrOutput {
	return o
}

func (o BasicLoginInformationResponsePtrOutput) ToBasicLoginInformationResponsePtrOutputWithContext(ctx context.Context) BasicLoginInformationResponsePtrOutput {
	return o
}

func (o BasicLoginInformationResponsePtrOutput) Elem() BasicLoginInformationResponseOutput {
	return o.ApplyT(func(v *BasicLoginInformationResponse) BasicLoginInformationResponse {
		if v != nil {
			return *v
		}
		var ret BasicLoginInformationResponse
		return ret
	}).(BasicLoginInformationResponseOutput)
}

// Login username.
func (o BasicLoginInformationResponsePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BasicLoginInformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// The data controller properties.
type DataControllerProperties struct {
	// Username and password for basic login authentication.
	BasicLoginInformation *BasicLoginInformation `pulumi:"basicLoginInformation"`
	// If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
	ClusterId *string `pulumi:"clusterId"`
	// If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
	ExtensionId *string `pulumi:"extensionId"`
	// The infrastructure the data controller is running on.
	Infrastructure *Infrastructure `pulumi:"infrastructure"`
	// The raw kubernetes information
	K8sRaw interface{} `pulumi:"k8sRaw"`
	// Last uploaded date from Kubernetes cluster. Defaults to current date time
	LastUploadedDate *string `pulumi:"lastUploadedDate"`
	// Log analytics workspace id and primary key
	LogAnalyticsWorkspaceConfig *LogAnalyticsWorkspaceConfig `pulumi:"logAnalyticsWorkspaceConfig"`
	// Properties from the Kubernetes data controller
	OnPremiseProperty *OnPremiseProperty `pulumi:"onPremiseProperty"`
	// Service principal for uploading billing, metrics and logs.
	UploadServicePrincipal *UploadServicePrincipal `pulumi:"uploadServicePrincipal"`
	// Properties on upload watermark.  Mostly timestamp for each upload data type
	UploadWatermark *UploadWatermark `pulumi:"uploadWatermark"`
}

// Defaults sets the appropriate defaults for DataControllerProperties
func (val *DataControllerProperties) Defaults() *DataControllerProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Infrastructure) {
		infrastructure_ := Infrastructure("other")
		tmp.Infrastructure = &infrastructure_
	}
	return &tmp
}

// DataControllerPropertiesInput is an input type that accepts DataControllerPropertiesArgs and DataControllerPropertiesOutput values.
// You can construct a concrete instance of `DataControllerPropertiesInput` via:
//
//	DataControllerPropertiesArgs{...}
type DataControllerPropertiesInput interface {
	pulumi.Input

	ToDataControllerPropertiesOutput() DataControllerPropertiesOutput
	ToDataControllerPropertiesOutputWithContext(context.Context) DataControllerPropertiesOutput
}

// The data controller properties.
type DataControllerPropertiesArgs struct {
	// Username and password for basic login authentication.
	BasicLoginInformation BasicLoginInformationPtrInput `pulumi:"basicLoginInformation"`
	// If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
	ExtensionId pulumi.StringPtrInput `pulumi:"extensionId"`
	// The infrastructure the data controller is running on.
	Infrastructure InfrastructurePtrInput `pulumi:"infrastructure"`
	// The raw kubernetes information
	K8sRaw pulumi.Input `pulumi:"k8sRaw"`
	// Last uploaded date from Kubernetes cluster. Defaults to current date time
	LastUploadedDate pulumi.StringPtrInput `pulumi:"lastUploadedDate"`
	// Log analytics workspace id and primary key
	LogAnalyticsWorkspaceConfig LogAnalyticsWorkspaceConfigPtrInput `pulumi:"logAnalyticsWorkspaceConfig"`
	// Properties from the Kubernetes data controller
	OnPremiseProperty OnPremisePropertyPtrInput `pulumi:"onPremiseProperty"`
	// Service principal for uploading billing, metrics and logs.
	UploadServicePrincipal UploadServicePrincipalPtrInput `pulumi:"uploadServicePrincipal"`
	// Properties on upload watermark.  Mostly timestamp for each upload data type
	UploadWatermark UploadWatermarkPtrInput `pulumi:"uploadWatermark"`
}

// Defaults sets the appropriate defaults for DataControllerPropertiesArgs
func (val *DataControllerPropertiesArgs) Defaults() *DataControllerPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Infrastructure) {
		tmp.Infrastructure = Infrastructure("other")
	}
	return &tmp
}
func (DataControllerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataControllerProperties)(nil)).Elem()
}

func (i DataControllerPropertiesArgs) ToDataControllerPropertiesOutput() DataControllerPropertiesOutput {
	return i.ToDataControllerPropertiesOutputWithContext(context.Background())
}

func (i DataControllerPropertiesArgs) ToDataControllerPropertiesOutputWithContext(ctx context.Context) DataControllerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataControllerPropertiesOutput)
}

// The data controller properties.
type DataControllerPropertiesOutput struct{ *pulumi.OutputState }

func (DataControllerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataControllerProperties)(nil)).Elem()
}

func (o DataControllerPropertiesOutput) ToDataControllerPropertiesOutput() DataControllerPropertiesOutput {
	return o
}

func (o DataControllerPropertiesOutput) ToDataControllerPropertiesOutputWithContext(ctx context.Context) DataControllerPropertiesOutput {
	return o
}

// Username and password for basic login authentication.
func (o DataControllerPropertiesOutput) BasicLoginInformation() BasicLoginInformationPtrOutput {
	return o.ApplyT(func(v DataControllerProperties) *BasicLoginInformation { return v.BasicLoginInformation }).(BasicLoginInformationPtrOutput)
}

// If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
func (o DataControllerPropertiesOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataControllerProperties) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
func (o DataControllerPropertiesOutput) ExtensionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataControllerProperties) *string { return v.ExtensionId }).(pulumi.StringPtrOutput)
}

// The infrastructure the data controller is running on.
func (o DataControllerPropertiesOutput) Infrastructure() InfrastructurePtrOutput {
	return o.ApplyT(func(v DataControllerProperties) *Infrastructure { return v.Infrastructure }).(InfrastructurePtrOutput)
}

// The raw kubernetes information
func (o DataControllerPropertiesOutput) K8sRaw() pulumi.AnyOutput {
	return o.ApplyT(func(v DataControllerProperties) interface{} { return v.K8sRaw }).(pulumi.AnyOutput)
}

// Last uploaded date from Kubernetes cluster. Defaults to current date time
func (o DataControllerPropertiesOutput) LastUploadedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataControllerProperties) *string { return v.LastUploadedDate }).(pulumi.StringPtrOutput)
}

// Log analytics workspace id and primary key
func (o DataControllerPropertiesOutput) LogAnalyticsWorkspaceConfig() LogAnalyticsWorkspaceConfigPtrOutput {
	return o.ApplyT(func(v DataControllerProperties) *LogAnalyticsWorkspaceConfig { return v.LogAnalyticsWorkspaceConfig }).(LogAnalyticsWorkspaceConfigPtrOutput)
}

// Properties from the Kubernetes data controller
func (o DataControllerPropertiesOutput) OnPremiseProperty() OnPremisePropertyPtrOutput {
	return o.ApplyT(func(v DataControllerProperties) *OnPremiseProperty { return v.OnPremiseProperty }).(OnPremisePropertyPtrOutput)
}

// Service principal for uploading billing, metrics and logs.
func (o DataControllerPropertiesOutput) UploadServicePrincipal() UploadServicePrincipalPtrOutput {
	return o.ApplyT(func(v DataControllerProperties) *UploadServicePrincipal { return v.UploadServicePrincipal }).(UploadServicePrincipalPtrOutput)
}

// Properties on upload watermark.  Mostly timestamp for each upload data type
func (o DataControllerPropertiesOutput) UploadWatermark() UploadWatermarkPtrOutput {
	return o.ApplyT(func(v DataControllerProperties) *UploadWatermark { return v.UploadWatermark }).(UploadWatermarkPtrOutput)
}

// The data controller properties.
type DataControllerPropertiesResponse struct {
	// Username and password for basic login authentication.
	BasicLoginInformation *BasicLoginInformationResponse `pulumi:"basicLoginInformation"`
	// If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
	ClusterId *string `pulumi:"clusterId"`
	// If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
	ExtensionId *string `pulumi:"extensionId"`
	// The infrastructure the data controller is running on.
	Infrastructure *string `pulumi:"infrastructure"`
	// The raw kubernetes information
	K8sRaw interface{} `pulumi:"k8sRaw"`
	// Last uploaded date from Kubernetes cluster. Defaults to current date time
	LastUploadedDate *string `pulumi:"lastUploadedDate"`
	// Log analytics workspace id and primary key
	LogAnalyticsWorkspaceConfig *LogAnalyticsWorkspaceConfigResponse `pulumi:"logAnalyticsWorkspaceConfig"`
	// Properties from the Kubernetes data controller
	OnPremiseProperty *OnPremisePropertyResponse `pulumi:"onPremiseProperty"`
	ProvisioningState string                     `pulumi:"provisioningState"`
	// Service principal for uploading billing, metrics and logs.
	UploadServicePrincipal *UploadServicePrincipalResponse `pulumi:"uploadServicePrincipal"`
	// Properties on upload watermark.  Mostly timestamp for each upload data type
	UploadWatermark *UploadWatermarkResponse `pulumi:"uploadWatermark"`
}

// Defaults sets the appropriate defaults for DataControllerPropertiesResponse
func (val *DataControllerPropertiesResponse) Defaults() *DataControllerPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Infrastructure) {
		infrastructure_ := "other"
		tmp.Infrastructure = &infrastructure_
	}
	return &tmp
}

// The data controller properties.
type DataControllerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (DataControllerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataControllerPropertiesResponse)(nil)).Elem()
}

func (o DataControllerPropertiesResponseOutput) ToDataControllerPropertiesResponseOutput() DataControllerPropertiesResponseOutput {
	return o
}

func (o DataControllerPropertiesResponseOutput) ToDataControllerPropertiesResponseOutputWithContext(ctx context.Context) DataControllerPropertiesResponseOutput {
	return o
}

// Username and password for basic login authentication.
func (o DataControllerPropertiesResponseOutput) BasicLoginInformation() BasicLoginInformationResponsePtrOutput {
	return o.ApplyT(func(v DataControllerPropertiesResponse) *BasicLoginInformationResponse {
		return v.BasicLoginInformation
	}).(BasicLoginInformationResponsePtrOutput)
}

// If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
func (o DataControllerPropertiesResponseOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataControllerPropertiesResponse) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
func (o DataControllerPropertiesResponseOutput) ExtensionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataControllerPropertiesResponse) *string { return v.ExtensionId }).(pulumi.StringPtrOutput)
}

// The infrastructure the data controller is running on.
func (o DataControllerPropertiesResponseOutput) Infrastructure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataControllerPropertiesResponse) *string { return v.Infrastructure }).(pulumi.StringPtrOutput)
}

// The raw kubernetes information
func (o DataControllerPropertiesResponseOutput) K8sRaw() pulumi.AnyOutput {
	return o.ApplyT(func(v DataControllerPropertiesResponse) interface{} { return v.K8sRaw }).(pulumi.AnyOutput)
}

// Last uploaded date from Kubernetes cluster. Defaults to current date time
func (o DataControllerPropertiesResponseOutput) LastUploadedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataControllerPropertiesResponse) *string { return v.LastUploadedDate }).(pulumi.StringPtrOutput)
}

// Log analytics workspace id and primary key
func (o DataControllerPropertiesResponseOutput) LogAnalyticsWorkspaceConfig() LogAnalyticsWorkspaceConfigResponsePtrOutput {
	return o.ApplyT(func(v DataControllerPropertiesResponse) *LogAnalyticsWorkspaceConfigResponse {
		return v.LogAnalyticsWorkspaceConfig
	}).(LogAnalyticsWorkspaceConfigResponsePtrOutput)
}

// Properties from the Kubernetes data controller
func (o DataControllerPropertiesResponseOutput) OnPremiseProperty() OnPremisePropertyResponsePtrOutput {
	return o.ApplyT(func(v DataControllerPropertiesResponse) *OnPremisePropertyResponse { return v.OnPremiseProperty }).(OnPremisePropertyResponsePtrOutput)
}

func (o DataControllerPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v DataControllerPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Service principal for uploading billing, metrics and logs.
func (o DataControllerPropertiesResponseOutput) UploadServicePrincipal() UploadServicePrincipalResponsePtrOutput {
	return o.ApplyT(func(v DataControllerPropertiesResponse) *UploadServicePrincipalResponse {
		return v.UploadServicePrincipal
	}).(UploadServicePrincipalResponsePtrOutput)
}

// Properties on upload watermark.  Mostly timestamp for each upload data type
func (o DataControllerPropertiesResponseOutput) UploadWatermark() UploadWatermarkResponsePtrOutput {
	return o.ApplyT(func(v DataControllerPropertiesResponse) *UploadWatermarkResponse { return v.UploadWatermark }).(UploadWatermarkResponsePtrOutput)
}

// The complex type of the extended location.
type ExtendedLocation struct {
	// The name of the extended location.
	Name *string `pulumi:"name"`
	// The type of the extended location.
	Type *string `pulumi:"type"`
}

// ExtendedLocationInput is an input type that accepts ExtendedLocationArgs and ExtendedLocationOutput values.
// You can construct a concrete instance of `ExtendedLocationInput` via:
//
//	ExtendedLocationArgs{...}
type ExtendedLocationInput interface {
	pulumi.Input

	ToExtendedLocationOutput() ExtendedLocationOutput
	ToExtendedLocationOutputWithContext(context.Context) ExtendedLocationOutput
}

// The complex type of the extended location.
type ExtendedLocationArgs struct {
	// The name of the extended location.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type of the extended location.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ExtendedLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (i ExtendedLocationArgs) ToExtendedLocationOutput() ExtendedLocationOutput {
	return i.ToExtendedLocationOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput)
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput).ToExtendedLocationPtrOutputWithContext(ctx)
}

// ExtendedLocationPtrInput is an input type that accepts ExtendedLocationArgs, ExtendedLocationPtr and ExtendedLocationPtrOutput values.
// You can construct a concrete instance of `ExtendedLocationPtrInput` via:
//
//	        ExtendedLocationArgs{...}
//
//	or:
//
//	        nil
type ExtendedLocationPtrInput interface {
	pulumi.Input

	ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput
	ToExtendedLocationPtrOutputWithContext(context.Context) ExtendedLocationPtrOutput
}

type extendedLocationPtrType ExtendedLocationArgs

func ExtendedLocationPtr(v *ExtendedLocationArgs) ExtendedLocationPtrInput {
	return (*extendedLocationPtrType)(v)
}

func (*extendedLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationPtrOutput)
}

// The complex type of the extended location.
type ExtendedLocationOutput struct{ *pulumi.OutputState }

func (ExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationOutput) ToExtendedLocationOutput() ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtendedLocation) *ExtendedLocation {
		return &v
	}).(ExtendedLocationPtrOutput)
}

// The name of the extended location.
func (o ExtendedLocationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the extended location.
func (o ExtendedLocationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocation) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExtendedLocationPtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) Elem() ExtendedLocationOutput {
	return o.ApplyT(func(v *ExtendedLocation) ExtendedLocation {
		if v != nil {
			return *v
		}
		var ret ExtendedLocation
		return ret
	}).(ExtendedLocationOutput)
}

// The name of the extended location.
func (o ExtendedLocationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of the extended location.
func (o ExtendedLocationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The complex type of the extended location.
type ExtendedLocationResponse struct {
	// The name of the extended location.
	Name *string `pulumi:"name"`
	// The type of the extended location.
	Type *string `pulumi:"type"`
}

// The complex type of the extended location.
type ExtendedLocationResponseOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutput() ExtendedLocationResponseOutput {
	return o
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutputWithContext(ctx context.Context) ExtendedLocationResponseOutput {
	return o
}

// The name of the extended location.
func (o ExtendedLocationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the extended location.
func (o ExtendedLocationResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExtendedLocationResponsePtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutput() ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutputWithContext(ctx context.Context) ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) Elem() ExtendedLocationResponseOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) ExtendedLocationResponse {
		if v != nil {
			return *v
		}
		var ret ExtendedLocationResponse
		return ret
	}).(ExtendedLocationResponseOutput)
}

// The name of the extended location.
func (o ExtendedLocationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of the extended location.
func (o ExtendedLocationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The kubernetes resource limits and requests used to restrict or reserve resource usage.
type K8sResourceRequirements struct {
	// Limits for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
	Limits map[string]string `pulumi:"limits"`
	// Requests for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
	Requests map[string]string `pulumi:"requests"`
}

// K8sResourceRequirementsInput is an input type that accepts K8sResourceRequirementsArgs and K8sResourceRequirementsOutput values.
// You can construct a concrete instance of `K8sResourceRequirementsInput` via:
//
//	K8sResourceRequirementsArgs{...}
type K8sResourceRequirementsInput interface {
	pulumi.Input

	ToK8sResourceRequirementsOutput() K8sResourceRequirementsOutput
	ToK8sResourceRequirementsOutputWithContext(context.Context) K8sResourceRequirementsOutput
}

// The kubernetes resource limits and requests used to restrict or reserve resource usage.
type K8sResourceRequirementsArgs struct {
	// Limits for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
	Limits pulumi.StringMapInput `pulumi:"limits"`
	// Requests for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
	Requests pulumi.StringMapInput `pulumi:"requests"`
}

func (K8sResourceRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sResourceRequirements)(nil)).Elem()
}

func (i K8sResourceRequirementsArgs) ToK8sResourceRequirementsOutput() K8sResourceRequirementsOutput {
	return i.ToK8sResourceRequirementsOutputWithContext(context.Background())
}

func (i K8sResourceRequirementsArgs) ToK8sResourceRequirementsOutputWithContext(ctx context.Context) K8sResourceRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sResourceRequirementsOutput)
}

func (i K8sResourceRequirementsArgs) ToK8sResourceRequirementsPtrOutput() K8sResourceRequirementsPtrOutput {
	return i.ToK8sResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i K8sResourceRequirementsArgs) ToK8sResourceRequirementsPtrOutputWithContext(ctx context.Context) K8sResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sResourceRequirementsOutput).ToK8sResourceRequirementsPtrOutputWithContext(ctx)
}

// K8sResourceRequirementsPtrInput is an input type that accepts K8sResourceRequirementsArgs, K8sResourceRequirementsPtr and K8sResourceRequirementsPtrOutput values.
// You can construct a concrete instance of `K8sResourceRequirementsPtrInput` via:
//
//	        K8sResourceRequirementsArgs{...}
//
//	or:
//
//	        nil
type K8sResourceRequirementsPtrInput interface {
	pulumi.Input

	ToK8sResourceRequirementsPtrOutput() K8sResourceRequirementsPtrOutput
	ToK8sResourceRequirementsPtrOutputWithContext(context.Context) K8sResourceRequirementsPtrOutput
}

type k8sResourceRequirementsPtrType K8sResourceRequirementsArgs

func K8sResourceRequirementsPtr(v *K8sResourceRequirementsArgs) K8sResourceRequirementsPtrInput {
	return (*k8sResourceRequirementsPtrType)(v)
}

func (*k8sResourceRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sResourceRequirements)(nil)).Elem()
}

func (i *k8sResourceRequirementsPtrType) ToK8sResourceRequirementsPtrOutput() K8sResourceRequirementsPtrOutput {
	return i.ToK8sResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i *k8sResourceRequirementsPtrType) ToK8sResourceRequirementsPtrOutputWithContext(ctx context.Context) K8sResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sResourceRequirementsPtrOutput)
}

// The kubernetes resource limits and requests used to restrict or reserve resource usage.
type K8sResourceRequirementsOutput struct{ *pulumi.OutputState }

func (K8sResourceRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sResourceRequirements)(nil)).Elem()
}

func (o K8sResourceRequirementsOutput) ToK8sResourceRequirementsOutput() K8sResourceRequirementsOutput {
	return o
}

func (o K8sResourceRequirementsOutput) ToK8sResourceRequirementsOutputWithContext(ctx context.Context) K8sResourceRequirementsOutput {
	return o
}

func (o K8sResourceRequirementsOutput) ToK8sResourceRequirementsPtrOutput() K8sResourceRequirementsPtrOutput {
	return o.ToK8sResourceRequirementsPtrOutputWithContext(context.Background())
}

func (o K8sResourceRequirementsOutput) ToK8sResourceRequirementsPtrOutputWithContext(ctx context.Context) K8sResourceRequirementsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v K8sResourceRequirements) *K8sResourceRequirements {
		return &v
	}).(K8sResourceRequirementsPtrOutput)
}

// Limits for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
func (o K8sResourceRequirementsOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v K8sResourceRequirements) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// Requests for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
func (o K8sResourceRequirementsOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v K8sResourceRequirements) map[string]string { return v.Requests }).(pulumi.StringMapOutput)
}

type K8sResourceRequirementsPtrOutput struct{ *pulumi.OutputState }

func (K8sResourceRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sResourceRequirements)(nil)).Elem()
}

func (o K8sResourceRequirementsPtrOutput) ToK8sResourceRequirementsPtrOutput() K8sResourceRequirementsPtrOutput {
	return o
}

func (o K8sResourceRequirementsPtrOutput) ToK8sResourceRequirementsPtrOutputWithContext(ctx context.Context) K8sResourceRequirementsPtrOutput {
	return o
}

func (o K8sResourceRequirementsPtrOutput) Elem() K8sResourceRequirementsOutput {
	return o.ApplyT(func(v *K8sResourceRequirements) K8sResourceRequirements {
		if v != nil {
			return *v
		}
		var ret K8sResourceRequirements
		return ret
	}).(K8sResourceRequirementsOutput)
}

// Limits for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
func (o K8sResourceRequirementsPtrOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v *K8sResourceRequirements) map[string]string {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.StringMapOutput)
}

// Requests for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
func (o K8sResourceRequirementsPtrOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v *K8sResourceRequirements) map[string]string {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.StringMapOutput)
}

// The kubernetes resource limits and requests used to restrict or reserve resource usage.
type K8sResourceRequirementsResponse struct {
	// Limits for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
	Limits map[string]string `pulumi:"limits"`
	// Requests for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
	Requests map[string]string `pulumi:"requests"`
}

// The kubernetes resource limits and requests used to restrict or reserve resource usage.
type K8sResourceRequirementsResponseOutput struct{ *pulumi.OutputState }

func (K8sResourceRequirementsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sResourceRequirementsResponse)(nil)).Elem()
}

func (o K8sResourceRequirementsResponseOutput) ToK8sResourceRequirementsResponseOutput() K8sResourceRequirementsResponseOutput {
	return o
}

func (o K8sResourceRequirementsResponseOutput) ToK8sResourceRequirementsResponseOutputWithContext(ctx context.Context) K8sResourceRequirementsResponseOutput {
	return o
}

// Limits for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
func (o K8sResourceRequirementsResponseOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v K8sResourceRequirementsResponse) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// Requests for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
func (o K8sResourceRequirementsResponseOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v K8sResourceRequirementsResponse) map[string]string { return v.Requests }).(pulumi.StringMapOutput)
}

type K8sResourceRequirementsResponsePtrOutput struct{ *pulumi.OutputState }

func (K8sResourceRequirementsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sResourceRequirementsResponse)(nil)).Elem()
}

func (o K8sResourceRequirementsResponsePtrOutput) ToK8sResourceRequirementsResponsePtrOutput() K8sResourceRequirementsResponsePtrOutput {
	return o
}

func (o K8sResourceRequirementsResponsePtrOutput) ToK8sResourceRequirementsResponsePtrOutputWithContext(ctx context.Context) K8sResourceRequirementsResponsePtrOutput {
	return o
}

func (o K8sResourceRequirementsResponsePtrOutput) Elem() K8sResourceRequirementsResponseOutput {
	return o.ApplyT(func(v *K8sResourceRequirementsResponse) K8sResourceRequirementsResponse {
		if v != nil {
			return *v
		}
		var ret K8sResourceRequirementsResponse
		return ret
	}).(K8sResourceRequirementsResponseOutput)
}

// Limits for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
func (o K8sResourceRequirementsResponsePtrOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v *K8sResourceRequirementsResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.StringMapOutput)
}

// Requests for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
func (o K8sResourceRequirementsResponsePtrOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v *K8sResourceRequirementsResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.StringMapOutput)
}

// The kubernetes scheduling information.
type K8sScheduling struct {
	// The kubernetes scheduling options. It describes restrictions used to help Kubernetes select appropriate nodes to host the database service
	Default *K8sSchedulingOptions `pulumi:"default"`
}

// K8sSchedulingInput is an input type that accepts K8sSchedulingArgs and K8sSchedulingOutput values.
// You can construct a concrete instance of `K8sSchedulingInput` via:
//
//	K8sSchedulingArgs{...}
type K8sSchedulingInput interface {
	pulumi.Input

	ToK8sSchedulingOutput() K8sSchedulingOutput
	ToK8sSchedulingOutputWithContext(context.Context) K8sSchedulingOutput
}

// The kubernetes scheduling information.
type K8sSchedulingArgs struct {
	// The kubernetes scheduling options. It describes restrictions used to help Kubernetes select appropriate nodes to host the database service
	Default K8sSchedulingOptionsPtrInput `pulumi:"default"`
}

func (K8sSchedulingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sScheduling)(nil)).Elem()
}

func (i K8sSchedulingArgs) ToK8sSchedulingOutput() K8sSchedulingOutput {
	return i.ToK8sSchedulingOutputWithContext(context.Background())
}

func (i K8sSchedulingArgs) ToK8sSchedulingOutputWithContext(ctx context.Context) K8sSchedulingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sSchedulingOutput)
}

func (i K8sSchedulingArgs) ToK8sSchedulingPtrOutput() K8sSchedulingPtrOutput {
	return i.ToK8sSchedulingPtrOutputWithContext(context.Background())
}

func (i K8sSchedulingArgs) ToK8sSchedulingPtrOutputWithContext(ctx context.Context) K8sSchedulingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sSchedulingOutput).ToK8sSchedulingPtrOutputWithContext(ctx)
}

// K8sSchedulingPtrInput is an input type that accepts K8sSchedulingArgs, K8sSchedulingPtr and K8sSchedulingPtrOutput values.
// You can construct a concrete instance of `K8sSchedulingPtrInput` via:
//
//	        K8sSchedulingArgs{...}
//
//	or:
//
//	        nil
type K8sSchedulingPtrInput interface {
	pulumi.Input

	ToK8sSchedulingPtrOutput() K8sSchedulingPtrOutput
	ToK8sSchedulingPtrOutputWithContext(context.Context) K8sSchedulingPtrOutput
}

type k8sSchedulingPtrType K8sSchedulingArgs

func K8sSchedulingPtr(v *K8sSchedulingArgs) K8sSchedulingPtrInput {
	return (*k8sSchedulingPtrType)(v)
}

func (*k8sSchedulingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sScheduling)(nil)).Elem()
}

func (i *k8sSchedulingPtrType) ToK8sSchedulingPtrOutput() K8sSchedulingPtrOutput {
	return i.ToK8sSchedulingPtrOutputWithContext(context.Background())
}

func (i *k8sSchedulingPtrType) ToK8sSchedulingPtrOutputWithContext(ctx context.Context) K8sSchedulingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sSchedulingPtrOutput)
}

// The kubernetes scheduling information.
type K8sSchedulingOutput struct{ *pulumi.OutputState }

func (K8sSchedulingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sScheduling)(nil)).Elem()
}

func (o K8sSchedulingOutput) ToK8sSchedulingOutput() K8sSchedulingOutput {
	return o
}

func (o K8sSchedulingOutput) ToK8sSchedulingOutputWithContext(ctx context.Context) K8sSchedulingOutput {
	return o
}

func (o K8sSchedulingOutput) ToK8sSchedulingPtrOutput() K8sSchedulingPtrOutput {
	return o.ToK8sSchedulingPtrOutputWithContext(context.Background())
}

func (o K8sSchedulingOutput) ToK8sSchedulingPtrOutputWithContext(ctx context.Context) K8sSchedulingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v K8sScheduling) *K8sScheduling {
		return &v
	}).(K8sSchedulingPtrOutput)
}

// The kubernetes scheduling options. It describes restrictions used to help Kubernetes select appropriate nodes to host the database service
func (o K8sSchedulingOutput) Default() K8sSchedulingOptionsPtrOutput {
	return o.ApplyT(func(v K8sScheduling) *K8sSchedulingOptions { return v.Default }).(K8sSchedulingOptionsPtrOutput)
}

type K8sSchedulingPtrOutput struct{ *pulumi.OutputState }

func (K8sSchedulingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sScheduling)(nil)).Elem()
}

func (o K8sSchedulingPtrOutput) ToK8sSchedulingPtrOutput() K8sSchedulingPtrOutput {
	return o
}

func (o K8sSchedulingPtrOutput) ToK8sSchedulingPtrOutputWithContext(ctx context.Context) K8sSchedulingPtrOutput {
	return o
}

func (o K8sSchedulingPtrOutput) Elem() K8sSchedulingOutput {
	return o.ApplyT(func(v *K8sScheduling) K8sScheduling {
		if v != nil {
			return *v
		}
		var ret K8sScheduling
		return ret
	}).(K8sSchedulingOutput)
}

// The kubernetes scheduling options. It describes restrictions used to help Kubernetes select appropriate nodes to host the database service
func (o K8sSchedulingPtrOutput) Default() K8sSchedulingOptionsPtrOutput {
	return o.ApplyT(func(v *K8sScheduling) *K8sSchedulingOptions {
		if v == nil {
			return nil
		}
		return v.Default
	}).(K8sSchedulingOptionsPtrOutput)
}

// The kubernetes scheduling options. It describes restrictions used to help Kubernetes select appropriate nodes to host the database service
type K8sSchedulingOptions struct {
	// The kubernetes resource limits and requests used to restrict or reserve resource usage.
	Resources *K8sResourceRequirements `pulumi:"resources"`
}

// K8sSchedulingOptionsInput is an input type that accepts K8sSchedulingOptionsArgs and K8sSchedulingOptionsOutput values.
// You can construct a concrete instance of `K8sSchedulingOptionsInput` via:
//
//	K8sSchedulingOptionsArgs{...}
type K8sSchedulingOptionsInput interface {
	pulumi.Input

	ToK8sSchedulingOptionsOutput() K8sSchedulingOptionsOutput
	ToK8sSchedulingOptionsOutputWithContext(context.Context) K8sSchedulingOptionsOutput
}

// The kubernetes scheduling options. It describes restrictions used to help Kubernetes select appropriate nodes to host the database service
type K8sSchedulingOptionsArgs struct {
	// The kubernetes resource limits and requests used to restrict or reserve resource usage.
	Resources K8sResourceRequirementsPtrInput `pulumi:"resources"`
}

func (K8sSchedulingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sSchedulingOptions)(nil)).Elem()
}

func (i K8sSchedulingOptionsArgs) ToK8sSchedulingOptionsOutput() K8sSchedulingOptionsOutput {
	return i.ToK8sSchedulingOptionsOutputWithContext(context.Background())
}

func (i K8sSchedulingOptionsArgs) ToK8sSchedulingOptionsOutputWithContext(ctx context.Context) K8sSchedulingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sSchedulingOptionsOutput)
}

func (i K8sSchedulingOptionsArgs) ToK8sSchedulingOptionsPtrOutput() K8sSchedulingOptionsPtrOutput {
	return i.ToK8sSchedulingOptionsPtrOutputWithContext(context.Background())
}

func (i K8sSchedulingOptionsArgs) ToK8sSchedulingOptionsPtrOutputWithContext(ctx context.Context) K8sSchedulingOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sSchedulingOptionsOutput).ToK8sSchedulingOptionsPtrOutputWithContext(ctx)
}

// K8sSchedulingOptionsPtrInput is an input type that accepts K8sSchedulingOptionsArgs, K8sSchedulingOptionsPtr and K8sSchedulingOptionsPtrOutput values.
// You can construct a concrete instance of `K8sSchedulingOptionsPtrInput` via:
//
//	        K8sSchedulingOptionsArgs{...}
//
//	or:
//
//	        nil
type K8sSchedulingOptionsPtrInput interface {
	pulumi.Input

	ToK8sSchedulingOptionsPtrOutput() K8sSchedulingOptionsPtrOutput
	ToK8sSchedulingOptionsPtrOutputWithContext(context.Context) K8sSchedulingOptionsPtrOutput
}

type k8sSchedulingOptionsPtrType K8sSchedulingOptionsArgs

func K8sSchedulingOptionsPtr(v *K8sSchedulingOptionsArgs) K8sSchedulingOptionsPtrInput {
	return (*k8sSchedulingOptionsPtrType)(v)
}

func (*k8sSchedulingOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sSchedulingOptions)(nil)).Elem()
}

func (i *k8sSchedulingOptionsPtrType) ToK8sSchedulingOptionsPtrOutput() K8sSchedulingOptionsPtrOutput {
	return i.ToK8sSchedulingOptionsPtrOutputWithContext(context.Background())
}

func (i *k8sSchedulingOptionsPtrType) ToK8sSchedulingOptionsPtrOutputWithContext(ctx context.Context) K8sSchedulingOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sSchedulingOptionsPtrOutput)
}

// The kubernetes scheduling options. It describes restrictions used to help Kubernetes select appropriate nodes to host the database service
type K8sSchedulingOptionsOutput struct{ *pulumi.OutputState }

func (K8sSchedulingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sSchedulingOptions)(nil)).Elem()
}

func (o K8sSchedulingOptionsOutput) ToK8sSchedulingOptionsOutput() K8sSchedulingOptionsOutput {
	return o
}

func (o K8sSchedulingOptionsOutput) ToK8sSchedulingOptionsOutputWithContext(ctx context.Context) K8sSchedulingOptionsOutput {
	return o
}

func (o K8sSchedulingOptionsOutput) ToK8sSchedulingOptionsPtrOutput() K8sSchedulingOptionsPtrOutput {
	return o.ToK8sSchedulingOptionsPtrOutputWithContext(context.Background())
}

func (o K8sSchedulingOptionsOutput) ToK8sSchedulingOptionsPtrOutputWithContext(ctx context.Context) K8sSchedulingOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v K8sSchedulingOptions) *K8sSchedulingOptions {
		return &v
	}).(K8sSchedulingOptionsPtrOutput)
}

// The kubernetes resource limits and requests used to restrict or reserve resource usage.
func (o K8sSchedulingOptionsOutput) Resources() K8sResourceRequirementsPtrOutput {
	return o.ApplyT(func(v K8sSchedulingOptions) *K8sResourceRequirements { return v.Resources }).(K8sResourceRequirementsPtrOutput)
}

type K8sSchedulingOptionsPtrOutput struct{ *pulumi.OutputState }

func (K8sSchedulingOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sSchedulingOptions)(nil)).Elem()
}

func (o K8sSchedulingOptionsPtrOutput) ToK8sSchedulingOptionsPtrOutput() K8sSchedulingOptionsPtrOutput {
	return o
}

func (o K8sSchedulingOptionsPtrOutput) ToK8sSchedulingOptionsPtrOutputWithContext(ctx context.Context) K8sSchedulingOptionsPtrOutput {
	return o
}

func (o K8sSchedulingOptionsPtrOutput) Elem() K8sSchedulingOptionsOutput {
	return o.ApplyT(func(v *K8sSchedulingOptions) K8sSchedulingOptions {
		if v != nil {
			return *v
		}
		var ret K8sSchedulingOptions
		return ret
	}).(K8sSchedulingOptionsOutput)
}

// The kubernetes resource limits and requests used to restrict or reserve resource usage.
func (o K8sSchedulingOptionsPtrOutput) Resources() K8sResourceRequirementsPtrOutput {
	return o.ApplyT(func(v *K8sSchedulingOptions) *K8sResourceRequirements {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(K8sResourceRequirementsPtrOutput)
}

// The kubernetes scheduling options. It describes restrictions used to help Kubernetes select appropriate nodes to host the database service
type K8sSchedulingOptionsResponse struct {
	// The kubernetes resource limits and requests used to restrict or reserve resource usage.
	Resources *K8sResourceRequirementsResponse `pulumi:"resources"`
}

// The kubernetes scheduling options. It describes restrictions used to help Kubernetes select appropriate nodes to host the database service
type K8sSchedulingOptionsResponseOutput struct{ *pulumi.OutputState }

func (K8sSchedulingOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sSchedulingOptionsResponse)(nil)).Elem()
}

func (o K8sSchedulingOptionsResponseOutput) ToK8sSchedulingOptionsResponseOutput() K8sSchedulingOptionsResponseOutput {
	return o
}

func (o K8sSchedulingOptionsResponseOutput) ToK8sSchedulingOptionsResponseOutputWithContext(ctx context.Context) K8sSchedulingOptionsResponseOutput {
	return o
}

// The kubernetes resource limits and requests used to restrict or reserve resource usage.
func (o K8sSchedulingOptionsResponseOutput) Resources() K8sResourceRequirementsResponsePtrOutput {
	return o.ApplyT(func(v K8sSchedulingOptionsResponse) *K8sResourceRequirementsResponse { return v.Resources }).(K8sResourceRequirementsResponsePtrOutput)
}

type K8sSchedulingOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (K8sSchedulingOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sSchedulingOptionsResponse)(nil)).Elem()
}

func (o K8sSchedulingOptionsResponsePtrOutput) ToK8sSchedulingOptionsResponsePtrOutput() K8sSchedulingOptionsResponsePtrOutput {
	return o
}

func (o K8sSchedulingOptionsResponsePtrOutput) ToK8sSchedulingOptionsResponsePtrOutputWithContext(ctx context.Context) K8sSchedulingOptionsResponsePtrOutput {
	return o
}

func (o K8sSchedulingOptionsResponsePtrOutput) Elem() K8sSchedulingOptionsResponseOutput {
	return o.ApplyT(func(v *K8sSchedulingOptionsResponse) K8sSchedulingOptionsResponse {
		if v != nil {
			return *v
		}
		var ret K8sSchedulingOptionsResponse
		return ret
	}).(K8sSchedulingOptionsResponseOutput)
}

// The kubernetes resource limits and requests used to restrict or reserve resource usage.
func (o K8sSchedulingOptionsResponsePtrOutput) Resources() K8sResourceRequirementsResponsePtrOutput {
	return o.ApplyT(func(v *K8sSchedulingOptionsResponse) *K8sResourceRequirementsResponse {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(K8sResourceRequirementsResponsePtrOutput)
}

// The kubernetes scheduling information.
type K8sSchedulingResponse struct {
	// The kubernetes scheduling options. It describes restrictions used to help Kubernetes select appropriate nodes to host the database service
	Default *K8sSchedulingOptionsResponse `pulumi:"default"`
}

// The kubernetes scheduling information.
type K8sSchedulingResponseOutput struct{ *pulumi.OutputState }

func (K8sSchedulingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sSchedulingResponse)(nil)).Elem()
}

func (o K8sSchedulingResponseOutput) ToK8sSchedulingResponseOutput() K8sSchedulingResponseOutput {
	return o
}

func (o K8sSchedulingResponseOutput) ToK8sSchedulingResponseOutputWithContext(ctx context.Context) K8sSchedulingResponseOutput {
	return o
}

// The kubernetes scheduling options. It describes restrictions used to help Kubernetes select appropriate nodes to host the database service
func (o K8sSchedulingResponseOutput) Default() K8sSchedulingOptionsResponsePtrOutput {
	return o.ApplyT(func(v K8sSchedulingResponse) *K8sSchedulingOptionsResponse { return v.Default }).(K8sSchedulingOptionsResponsePtrOutput)
}

type K8sSchedulingResponsePtrOutput struct{ *pulumi.OutputState }

func (K8sSchedulingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sSchedulingResponse)(nil)).Elem()
}

func (o K8sSchedulingResponsePtrOutput) ToK8sSchedulingResponsePtrOutput() K8sSchedulingResponsePtrOutput {
	return o
}

func (o K8sSchedulingResponsePtrOutput) ToK8sSchedulingResponsePtrOutputWithContext(ctx context.Context) K8sSchedulingResponsePtrOutput {
	return o
}

func (o K8sSchedulingResponsePtrOutput) Elem() K8sSchedulingResponseOutput {
	return o.ApplyT(func(v *K8sSchedulingResponse) K8sSchedulingResponse {
		if v != nil {
			return *v
		}
		var ret K8sSchedulingResponse
		return ret
	}).(K8sSchedulingResponseOutput)
}

// The kubernetes scheduling options. It describes restrictions used to help Kubernetes select appropriate nodes to host the database service
func (o K8sSchedulingResponsePtrOutput) Default() K8sSchedulingOptionsResponsePtrOutput {
	return o.ApplyT(func(v *K8sSchedulingResponse) *K8sSchedulingOptionsResponse {
		if v == nil {
			return nil
		}
		return v.Default
	}).(K8sSchedulingOptionsResponsePtrOutput)
}

// Log analytics workspace id and primary key
type LogAnalyticsWorkspaceConfig struct {
	// Primary key of the workspace
	PrimaryKey *string `pulumi:"primaryKey"`
	// Azure Log Analytics workspace ID
	WorkspaceId *string `pulumi:"workspaceId"`
}

// LogAnalyticsWorkspaceConfigInput is an input type that accepts LogAnalyticsWorkspaceConfigArgs and LogAnalyticsWorkspaceConfigOutput values.
// You can construct a concrete instance of `LogAnalyticsWorkspaceConfigInput` via:
//
//	LogAnalyticsWorkspaceConfigArgs{...}
type LogAnalyticsWorkspaceConfigInput interface {
	pulumi.Input

	ToLogAnalyticsWorkspaceConfigOutput() LogAnalyticsWorkspaceConfigOutput
	ToLogAnalyticsWorkspaceConfigOutputWithContext(context.Context) LogAnalyticsWorkspaceConfigOutput
}

// Log analytics workspace id and primary key
type LogAnalyticsWorkspaceConfigArgs struct {
	// Primary key of the workspace
	PrimaryKey pulumi.StringPtrInput `pulumi:"primaryKey"`
	// Azure Log Analytics workspace ID
	WorkspaceId pulumi.StringPtrInput `pulumi:"workspaceId"`
}

func (LogAnalyticsWorkspaceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsWorkspaceConfig)(nil)).Elem()
}

func (i LogAnalyticsWorkspaceConfigArgs) ToLogAnalyticsWorkspaceConfigOutput() LogAnalyticsWorkspaceConfigOutput {
	return i.ToLogAnalyticsWorkspaceConfigOutputWithContext(context.Background())
}

func (i LogAnalyticsWorkspaceConfigArgs) ToLogAnalyticsWorkspaceConfigOutputWithContext(ctx context.Context) LogAnalyticsWorkspaceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsWorkspaceConfigOutput)
}

func (i LogAnalyticsWorkspaceConfigArgs) ToLogAnalyticsWorkspaceConfigPtrOutput() LogAnalyticsWorkspaceConfigPtrOutput {
	return i.ToLogAnalyticsWorkspaceConfigPtrOutputWithContext(context.Background())
}

func (i LogAnalyticsWorkspaceConfigArgs) ToLogAnalyticsWorkspaceConfigPtrOutputWithContext(ctx context.Context) LogAnalyticsWorkspaceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsWorkspaceConfigOutput).ToLogAnalyticsWorkspaceConfigPtrOutputWithContext(ctx)
}

// LogAnalyticsWorkspaceConfigPtrInput is an input type that accepts LogAnalyticsWorkspaceConfigArgs, LogAnalyticsWorkspaceConfigPtr and LogAnalyticsWorkspaceConfigPtrOutput values.
// You can construct a concrete instance of `LogAnalyticsWorkspaceConfigPtrInput` via:
//
//	        LogAnalyticsWorkspaceConfigArgs{...}
//
//	or:
//
//	        nil
type LogAnalyticsWorkspaceConfigPtrInput interface {
	pulumi.Input

	ToLogAnalyticsWorkspaceConfigPtrOutput() LogAnalyticsWorkspaceConfigPtrOutput
	ToLogAnalyticsWorkspaceConfigPtrOutputWithContext(context.Context) LogAnalyticsWorkspaceConfigPtrOutput
}

type logAnalyticsWorkspaceConfigPtrType LogAnalyticsWorkspaceConfigArgs

func LogAnalyticsWorkspaceConfigPtr(v *LogAnalyticsWorkspaceConfigArgs) LogAnalyticsWorkspaceConfigPtrInput {
	return (*logAnalyticsWorkspaceConfigPtrType)(v)
}

func (*logAnalyticsWorkspaceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsWorkspaceConfig)(nil)).Elem()
}

func (i *logAnalyticsWorkspaceConfigPtrType) ToLogAnalyticsWorkspaceConfigPtrOutput() LogAnalyticsWorkspaceConfigPtrOutput {
	return i.ToLogAnalyticsWorkspaceConfigPtrOutputWithContext(context.Background())
}

func (i *logAnalyticsWorkspaceConfigPtrType) ToLogAnalyticsWorkspaceConfigPtrOutputWithContext(ctx context.Context) LogAnalyticsWorkspaceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsWorkspaceConfigPtrOutput)
}

// Log analytics workspace id and primary key
type LogAnalyticsWorkspaceConfigOutput struct{ *pulumi.OutputState }

func (LogAnalyticsWorkspaceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsWorkspaceConfig)(nil)).Elem()
}

func (o LogAnalyticsWorkspaceConfigOutput) ToLogAnalyticsWorkspaceConfigOutput() LogAnalyticsWorkspaceConfigOutput {
	return o
}

func (o LogAnalyticsWorkspaceConfigOutput) ToLogAnalyticsWorkspaceConfigOutputWithContext(ctx context.Context) LogAnalyticsWorkspaceConfigOutput {
	return o
}

func (o LogAnalyticsWorkspaceConfigOutput) ToLogAnalyticsWorkspaceConfigPtrOutput() LogAnalyticsWorkspaceConfigPtrOutput {
	return o.ToLogAnalyticsWorkspaceConfigPtrOutputWithContext(context.Background())
}

func (o LogAnalyticsWorkspaceConfigOutput) ToLogAnalyticsWorkspaceConfigPtrOutputWithContext(ctx context.Context) LogAnalyticsWorkspaceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogAnalyticsWorkspaceConfig) *LogAnalyticsWorkspaceConfig {
		return &v
	}).(LogAnalyticsWorkspaceConfigPtrOutput)
}

// Primary key of the workspace
func (o LogAnalyticsWorkspaceConfigOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsWorkspaceConfig) *string { return v.PrimaryKey }).(pulumi.StringPtrOutput)
}

// Azure Log Analytics workspace ID
func (o LogAnalyticsWorkspaceConfigOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsWorkspaceConfig) *string { return v.WorkspaceId }).(pulumi.StringPtrOutput)
}

type LogAnalyticsWorkspaceConfigPtrOutput struct{ *pulumi.OutputState }

func (LogAnalyticsWorkspaceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsWorkspaceConfig)(nil)).Elem()
}

func (o LogAnalyticsWorkspaceConfigPtrOutput) ToLogAnalyticsWorkspaceConfigPtrOutput() LogAnalyticsWorkspaceConfigPtrOutput {
	return o
}

func (o LogAnalyticsWorkspaceConfigPtrOutput) ToLogAnalyticsWorkspaceConfigPtrOutputWithContext(ctx context.Context) LogAnalyticsWorkspaceConfigPtrOutput {
	return o
}

func (o LogAnalyticsWorkspaceConfigPtrOutput) Elem() LogAnalyticsWorkspaceConfigOutput {
	return o.ApplyT(func(v *LogAnalyticsWorkspaceConfig) LogAnalyticsWorkspaceConfig {
		if v != nil {
			return *v
		}
		var ret LogAnalyticsWorkspaceConfig
		return ret
	}).(LogAnalyticsWorkspaceConfigOutput)
}

// Primary key of the workspace
func (o LogAnalyticsWorkspaceConfigPtrOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsWorkspaceConfig) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryKey
	}).(pulumi.StringPtrOutput)
}

// Azure Log Analytics workspace ID
func (o LogAnalyticsWorkspaceConfigPtrOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsWorkspaceConfig) *string {
		if v == nil {
			return nil
		}
		return v.WorkspaceId
	}).(pulumi.StringPtrOutput)
}

// Log analytics workspace id and primary key
type LogAnalyticsWorkspaceConfigResponse struct {
	// Azure Log Analytics workspace ID
	WorkspaceId *string `pulumi:"workspaceId"`
}

// Log analytics workspace id and primary key
type LogAnalyticsWorkspaceConfigResponseOutput struct{ *pulumi.OutputState }

func (LogAnalyticsWorkspaceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsWorkspaceConfigResponse)(nil)).Elem()
}

func (o LogAnalyticsWorkspaceConfigResponseOutput) ToLogAnalyticsWorkspaceConfigResponseOutput() LogAnalyticsWorkspaceConfigResponseOutput {
	return o
}

func (o LogAnalyticsWorkspaceConfigResponseOutput) ToLogAnalyticsWorkspaceConfigResponseOutputWithContext(ctx context.Context) LogAnalyticsWorkspaceConfigResponseOutput {
	return o
}

// Azure Log Analytics workspace ID
func (o LogAnalyticsWorkspaceConfigResponseOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsWorkspaceConfigResponse) *string { return v.WorkspaceId }).(pulumi.StringPtrOutput)
}

type LogAnalyticsWorkspaceConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (LogAnalyticsWorkspaceConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsWorkspaceConfigResponse)(nil)).Elem()
}

func (o LogAnalyticsWorkspaceConfigResponsePtrOutput) ToLogAnalyticsWorkspaceConfigResponsePtrOutput() LogAnalyticsWorkspaceConfigResponsePtrOutput {
	return o
}

func (o LogAnalyticsWorkspaceConfigResponsePtrOutput) ToLogAnalyticsWorkspaceConfigResponsePtrOutputWithContext(ctx context.Context) LogAnalyticsWorkspaceConfigResponsePtrOutput {
	return o
}

func (o LogAnalyticsWorkspaceConfigResponsePtrOutput) Elem() LogAnalyticsWorkspaceConfigResponseOutput {
	return o.ApplyT(func(v *LogAnalyticsWorkspaceConfigResponse) LogAnalyticsWorkspaceConfigResponse {
		if v != nil {
			return *v
		}
		var ret LogAnalyticsWorkspaceConfigResponse
		return ret
	}).(LogAnalyticsWorkspaceConfigResponseOutput)
}

// Azure Log Analytics workspace ID
func (o LogAnalyticsWorkspaceConfigResponsePtrOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsWorkspaceConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.WorkspaceId
	}).(pulumi.StringPtrOutput)
}

// Properties from the Kubernetes data controller
type OnPremiseProperty struct {
	// A globally unique ID identifying the associated Kubernetes cluster
	Id string `pulumi:"id"`
	// Certificate that contains the Kubernetes cluster public key used to verify signing
	PublicSigningKey string `pulumi:"publicSigningKey"`
	// Unique thumbprint returned to customer to verify the certificate being uploaded
	SigningCertificateThumbprint *string `pulumi:"signingCertificateThumbprint"`
}

// OnPremisePropertyInput is an input type that accepts OnPremisePropertyArgs and OnPremisePropertyOutput values.
// You can construct a concrete instance of `OnPremisePropertyInput` via:
//
//	OnPremisePropertyArgs{...}
type OnPremisePropertyInput interface {
	pulumi.Input

	ToOnPremisePropertyOutput() OnPremisePropertyOutput
	ToOnPremisePropertyOutputWithContext(context.Context) OnPremisePropertyOutput
}

// Properties from the Kubernetes data controller
type OnPremisePropertyArgs struct {
	// A globally unique ID identifying the associated Kubernetes cluster
	Id pulumi.StringInput `pulumi:"id"`
	// Certificate that contains the Kubernetes cluster public key used to verify signing
	PublicSigningKey pulumi.StringInput `pulumi:"publicSigningKey"`
	// Unique thumbprint returned to customer to verify the certificate being uploaded
	SigningCertificateThumbprint pulumi.StringPtrInput `pulumi:"signingCertificateThumbprint"`
}

func (OnPremisePropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OnPremiseProperty)(nil)).Elem()
}

func (i OnPremisePropertyArgs) ToOnPremisePropertyOutput() OnPremisePropertyOutput {
	return i.ToOnPremisePropertyOutputWithContext(context.Background())
}

func (i OnPremisePropertyArgs) ToOnPremisePropertyOutputWithContext(ctx context.Context) OnPremisePropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnPremisePropertyOutput)
}

func (i OnPremisePropertyArgs) ToOnPremisePropertyPtrOutput() OnPremisePropertyPtrOutput {
	return i.ToOnPremisePropertyPtrOutputWithContext(context.Background())
}

func (i OnPremisePropertyArgs) ToOnPremisePropertyPtrOutputWithContext(ctx context.Context) OnPremisePropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnPremisePropertyOutput).ToOnPremisePropertyPtrOutputWithContext(ctx)
}

// OnPremisePropertyPtrInput is an input type that accepts OnPremisePropertyArgs, OnPremisePropertyPtr and OnPremisePropertyPtrOutput values.
// You can construct a concrete instance of `OnPremisePropertyPtrInput` via:
//
//	        OnPremisePropertyArgs{...}
//
//	or:
//
//	        nil
type OnPremisePropertyPtrInput interface {
	pulumi.Input

	ToOnPremisePropertyPtrOutput() OnPremisePropertyPtrOutput
	ToOnPremisePropertyPtrOutputWithContext(context.Context) OnPremisePropertyPtrOutput
}

type onPremisePropertyPtrType OnPremisePropertyArgs

func OnPremisePropertyPtr(v *OnPremisePropertyArgs) OnPremisePropertyPtrInput {
	return (*onPremisePropertyPtrType)(v)
}

func (*onPremisePropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OnPremiseProperty)(nil)).Elem()
}

func (i *onPremisePropertyPtrType) ToOnPremisePropertyPtrOutput() OnPremisePropertyPtrOutput {
	return i.ToOnPremisePropertyPtrOutputWithContext(context.Background())
}

func (i *onPremisePropertyPtrType) ToOnPremisePropertyPtrOutputWithContext(ctx context.Context) OnPremisePropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnPremisePropertyPtrOutput)
}

// Properties from the Kubernetes data controller
type OnPremisePropertyOutput struct{ *pulumi.OutputState }

func (OnPremisePropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnPremiseProperty)(nil)).Elem()
}

func (o OnPremisePropertyOutput) ToOnPremisePropertyOutput() OnPremisePropertyOutput {
	return o
}

func (o OnPremisePropertyOutput) ToOnPremisePropertyOutputWithContext(ctx context.Context) OnPremisePropertyOutput {
	return o
}

func (o OnPremisePropertyOutput) ToOnPremisePropertyPtrOutput() OnPremisePropertyPtrOutput {
	return o.ToOnPremisePropertyPtrOutputWithContext(context.Background())
}

func (o OnPremisePropertyOutput) ToOnPremisePropertyPtrOutputWithContext(ctx context.Context) OnPremisePropertyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OnPremiseProperty) *OnPremiseProperty {
		return &v
	}).(OnPremisePropertyPtrOutput)
}

// A globally unique ID identifying the associated Kubernetes cluster
func (o OnPremisePropertyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v OnPremiseProperty) string { return v.Id }).(pulumi.StringOutput)
}

// Certificate that contains the Kubernetes cluster public key used to verify signing
func (o OnPremisePropertyOutput) PublicSigningKey() pulumi.StringOutput {
	return o.ApplyT(func(v OnPremiseProperty) string { return v.PublicSigningKey }).(pulumi.StringOutput)
}

// Unique thumbprint returned to customer to verify the certificate being uploaded
func (o OnPremisePropertyOutput) SigningCertificateThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnPremiseProperty) *string { return v.SigningCertificateThumbprint }).(pulumi.StringPtrOutput)
}

type OnPremisePropertyPtrOutput struct{ *pulumi.OutputState }

func (OnPremisePropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnPremiseProperty)(nil)).Elem()
}

func (o OnPremisePropertyPtrOutput) ToOnPremisePropertyPtrOutput() OnPremisePropertyPtrOutput {
	return o
}

func (o OnPremisePropertyPtrOutput) ToOnPremisePropertyPtrOutputWithContext(ctx context.Context) OnPremisePropertyPtrOutput {
	return o
}

func (o OnPremisePropertyPtrOutput) Elem() OnPremisePropertyOutput {
	return o.ApplyT(func(v *OnPremiseProperty) OnPremiseProperty {
		if v != nil {
			return *v
		}
		var ret OnPremiseProperty
		return ret
	}).(OnPremisePropertyOutput)
}

// A globally unique ID identifying the associated Kubernetes cluster
func (o OnPremisePropertyPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremiseProperty) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Certificate that contains the Kubernetes cluster public key used to verify signing
func (o OnPremisePropertyPtrOutput) PublicSigningKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremiseProperty) *string {
		if v == nil {
			return nil
		}
		return &v.PublicSigningKey
	}).(pulumi.StringPtrOutput)
}

// Unique thumbprint returned to customer to verify the certificate being uploaded
func (o OnPremisePropertyPtrOutput) SigningCertificateThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremiseProperty) *string {
		if v == nil {
			return nil
		}
		return v.SigningCertificateThumbprint
	}).(pulumi.StringPtrOutput)
}

// Properties from the Kubernetes data controller
type OnPremisePropertyResponse struct {
	// A globally unique ID identifying the associated Kubernetes cluster
	Id string `pulumi:"id"`
	// Certificate that contains the Kubernetes cluster public key used to verify signing
	PublicSigningKey string `pulumi:"publicSigningKey"`
	// Unique thumbprint returned to customer to verify the certificate being uploaded
	SigningCertificateThumbprint *string `pulumi:"signingCertificateThumbprint"`
}

// Properties from the Kubernetes data controller
type OnPremisePropertyResponseOutput struct{ *pulumi.OutputState }

func (OnPremisePropertyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnPremisePropertyResponse)(nil)).Elem()
}

func (o OnPremisePropertyResponseOutput) ToOnPremisePropertyResponseOutput() OnPremisePropertyResponseOutput {
	return o
}

func (o OnPremisePropertyResponseOutput) ToOnPremisePropertyResponseOutputWithContext(ctx context.Context) OnPremisePropertyResponseOutput {
	return o
}

// A globally unique ID identifying the associated Kubernetes cluster
func (o OnPremisePropertyResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v OnPremisePropertyResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Certificate that contains the Kubernetes cluster public key used to verify signing
func (o OnPremisePropertyResponseOutput) PublicSigningKey() pulumi.StringOutput {
	return o.ApplyT(func(v OnPremisePropertyResponse) string { return v.PublicSigningKey }).(pulumi.StringOutput)
}

// Unique thumbprint returned to customer to verify the certificate being uploaded
func (o OnPremisePropertyResponseOutput) SigningCertificateThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnPremisePropertyResponse) *string { return v.SigningCertificateThumbprint }).(pulumi.StringPtrOutput)
}

type OnPremisePropertyResponsePtrOutput struct{ *pulumi.OutputState }

func (OnPremisePropertyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnPremisePropertyResponse)(nil)).Elem()
}

func (o OnPremisePropertyResponsePtrOutput) ToOnPremisePropertyResponsePtrOutput() OnPremisePropertyResponsePtrOutput {
	return o
}

func (o OnPremisePropertyResponsePtrOutput) ToOnPremisePropertyResponsePtrOutputWithContext(ctx context.Context) OnPremisePropertyResponsePtrOutput {
	return o
}

func (o OnPremisePropertyResponsePtrOutput) Elem() OnPremisePropertyResponseOutput {
	return o.ApplyT(func(v *OnPremisePropertyResponse) OnPremisePropertyResponse {
		if v != nil {
			return *v
		}
		var ret OnPremisePropertyResponse
		return ret
	}).(OnPremisePropertyResponseOutput)
}

// A globally unique ID identifying the associated Kubernetes cluster
func (o OnPremisePropertyResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremisePropertyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Certificate that contains the Kubernetes cluster public key used to verify signing
func (o OnPremisePropertyResponsePtrOutput) PublicSigningKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremisePropertyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PublicSigningKey
	}).(pulumi.StringPtrOutput)
}

// Unique thumbprint returned to customer to verify the certificate being uploaded
func (o OnPremisePropertyResponsePtrOutput) SigningCertificateThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremisePropertyResponse) *string {
		if v == nil {
			return nil
		}
		return v.SigningCertificateThumbprint
	}).(pulumi.StringPtrOutput)
}

// The raw kubernetes information.
type SqlManagedInstanceK8sRaw struct {
	// The kubernetes spec information.
	Spec *SqlManagedInstanceK8sSpec `pulumi:"spec"`
}

// SqlManagedInstanceK8sRawInput is an input type that accepts SqlManagedInstanceK8sRawArgs and SqlManagedInstanceK8sRawOutput values.
// You can construct a concrete instance of `SqlManagedInstanceK8sRawInput` via:
//
//	SqlManagedInstanceK8sRawArgs{...}
type SqlManagedInstanceK8sRawInput interface {
	pulumi.Input

	ToSqlManagedInstanceK8sRawOutput() SqlManagedInstanceK8sRawOutput
	ToSqlManagedInstanceK8sRawOutputWithContext(context.Context) SqlManagedInstanceK8sRawOutput
}

// The raw kubernetes information.
type SqlManagedInstanceK8sRawArgs struct {
	// The kubernetes spec information.
	Spec SqlManagedInstanceK8sSpecPtrInput `pulumi:"spec"`
}

func (SqlManagedInstanceK8sRawArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagedInstanceK8sRaw)(nil)).Elem()
}

func (i SqlManagedInstanceK8sRawArgs) ToSqlManagedInstanceK8sRawOutput() SqlManagedInstanceK8sRawOutput {
	return i.ToSqlManagedInstanceK8sRawOutputWithContext(context.Background())
}

func (i SqlManagedInstanceK8sRawArgs) ToSqlManagedInstanceK8sRawOutputWithContext(ctx context.Context) SqlManagedInstanceK8sRawOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlManagedInstanceK8sRawOutput)
}

func (i SqlManagedInstanceK8sRawArgs) ToSqlManagedInstanceK8sRawPtrOutput() SqlManagedInstanceK8sRawPtrOutput {
	return i.ToSqlManagedInstanceK8sRawPtrOutputWithContext(context.Background())
}

func (i SqlManagedInstanceK8sRawArgs) ToSqlManagedInstanceK8sRawPtrOutputWithContext(ctx context.Context) SqlManagedInstanceK8sRawPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlManagedInstanceK8sRawOutput).ToSqlManagedInstanceK8sRawPtrOutputWithContext(ctx)
}

// SqlManagedInstanceK8sRawPtrInput is an input type that accepts SqlManagedInstanceK8sRawArgs, SqlManagedInstanceK8sRawPtr and SqlManagedInstanceK8sRawPtrOutput values.
// You can construct a concrete instance of `SqlManagedInstanceK8sRawPtrInput` via:
//
//	        SqlManagedInstanceK8sRawArgs{...}
//
//	or:
//
//	        nil
type SqlManagedInstanceK8sRawPtrInput interface {
	pulumi.Input

	ToSqlManagedInstanceK8sRawPtrOutput() SqlManagedInstanceK8sRawPtrOutput
	ToSqlManagedInstanceK8sRawPtrOutputWithContext(context.Context) SqlManagedInstanceK8sRawPtrOutput
}

type sqlManagedInstanceK8sRawPtrType SqlManagedInstanceK8sRawArgs

func SqlManagedInstanceK8sRawPtr(v *SqlManagedInstanceK8sRawArgs) SqlManagedInstanceK8sRawPtrInput {
	return (*sqlManagedInstanceK8sRawPtrType)(v)
}

func (*sqlManagedInstanceK8sRawPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlManagedInstanceK8sRaw)(nil)).Elem()
}

func (i *sqlManagedInstanceK8sRawPtrType) ToSqlManagedInstanceK8sRawPtrOutput() SqlManagedInstanceK8sRawPtrOutput {
	return i.ToSqlManagedInstanceK8sRawPtrOutputWithContext(context.Background())
}

func (i *sqlManagedInstanceK8sRawPtrType) ToSqlManagedInstanceK8sRawPtrOutputWithContext(ctx context.Context) SqlManagedInstanceK8sRawPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlManagedInstanceK8sRawPtrOutput)
}

// The raw kubernetes information.
type SqlManagedInstanceK8sRawOutput struct{ *pulumi.OutputState }

func (SqlManagedInstanceK8sRawOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagedInstanceK8sRaw)(nil)).Elem()
}

func (o SqlManagedInstanceK8sRawOutput) ToSqlManagedInstanceK8sRawOutput() SqlManagedInstanceK8sRawOutput {
	return o
}

func (o SqlManagedInstanceK8sRawOutput) ToSqlManagedInstanceK8sRawOutputWithContext(ctx context.Context) SqlManagedInstanceK8sRawOutput {
	return o
}

func (o SqlManagedInstanceK8sRawOutput) ToSqlManagedInstanceK8sRawPtrOutput() SqlManagedInstanceK8sRawPtrOutput {
	return o.ToSqlManagedInstanceK8sRawPtrOutputWithContext(context.Background())
}

func (o SqlManagedInstanceK8sRawOutput) ToSqlManagedInstanceK8sRawPtrOutputWithContext(ctx context.Context) SqlManagedInstanceK8sRawPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlManagedInstanceK8sRaw) *SqlManagedInstanceK8sRaw {
		return &v
	}).(SqlManagedInstanceK8sRawPtrOutput)
}

// The kubernetes spec information.
func (o SqlManagedInstanceK8sRawOutput) Spec() SqlManagedInstanceK8sSpecPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceK8sRaw) *SqlManagedInstanceK8sSpec { return v.Spec }).(SqlManagedInstanceK8sSpecPtrOutput)
}

type SqlManagedInstanceK8sRawPtrOutput struct{ *pulumi.OutputState }

func (SqlManagedInstanceK8sRawPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlManagedInstanceK8sRaw)(nil)).Elem()
}

func (o SqlManagedInstanceK8sRawPtrOutput) ToSqlManagedInstanceK8sRawPtrOutput() SqlManagedInstanceK8sRawPtrOutput {
	return o
}

func (o SqlManagedInstanceK8sRawPtrOutput) ToSqlManagedInstanceK8sRawPtrOutputWithContext(ctx context.Context) SqlManagedInstanceK8sRawPtrOutput {
	return o
}

func (o SqlManagedInstanceK8sRawPtrOutput) Elem() SqlManagedInstanceK8sRawOutput {
	return o.ApplyT(func(v *SqlManagedInstanceK8sRaw) SqlManagedInstanceK8sRaw {
		if v != nil {
			return *v
		}
		var ret SqlManagedInstanceK8sRaw
		return ret
	}).(SqlManagedInstanceK8sRawOutput)
}

// The kubernetes spec information.
func (o SqlManagedInstanceK8sRawPtrOutput) Spec() SqlManagedInstanceK8sSpecPtrOutput {
	return o.ApplyT(func(v *SqlManagedInstanceK8sRaw) *SqlManagedInstanceK8sSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(SqlManagedInstanceK8sSpecPtrOutput)
}

// The raw kubernetes information.
type SqlManagedInstanceK8sRawResponse struct {
	// The kubernetes spec information.
	Spec *SqlManagedInstanceK8sSpecResponse `pulumi:"spec"`
}

// The raw kubernetes information.
type SqlManagedInstanceK8sRawResponseOutput struct{ *pulumi.OutputState }

func (SqlManagedInstanceK8sRawResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagedInstanceK8sRawResponse)(nil)).Elem()
}

func (o SqlManagedInstanceK8sRawResponseOutput) ToSqlManagedInstanceK8sRawResponseOutput() SqlManagedInstanceK8sRawResponseOutput {
	return o
}

func (o SqlManagedInstanceK8sRawResponseOutput) ToSqlManagedInstanceK8sRawResponseOutputWithContext(ctx context.Context) SqlManagedInstanceK8sRawResponseOutput {
	return o
}

// The kubernetes spec information.
func (o SqlManagedInstanceK8sRawResponseOutput) Spec() SqlManagedInstanceK8sSpecResponsePtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceK8sRawResponse) *SqlManagedInstanceK8sSpecResponse { return v.Spec }).(SqlManagedInstanceK8sSpecResponsePtrOutput)
}

type SqlManagedInstanceK8sRawResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlManagedInstanceK8sRawResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlManagedInstanceK8sRawResponse)(nil)).Elem()
}

func (o SqlManagedInstanceK8sRawResponsePtrOutput) ToSqlManagedInstanceK8sRawResponsePtrOutput() SqlManagedInstanceK8sRawResponsePtrOutput {
	return o
}

func (o SqlManagedInstanceK8sRawResponsePtrOutput) ToSqlManagedInstanceK8sRawResponsePtrOutputWithContext(ctx context.Context) SqlManagedInstanceK8sRawResponsePtrOutput {
	return o
}

func (o SqlManagedInstanceK8sRawResponsePtrOutput) Elem() SqlManagedInstanceK8sRawResponseOutput {
	return o.ApplyT(func(v *SqlManagedInstanceK8sRawResponse) SqlManagedInstanceK8sRawResponse {
		if v != nil {
			return *v
		}
		var ret SqlManagedInstanceK8sRawResponse
		return ret
	}).(SqlManagedInstanceK8sRawResponseOutput)
}

// The kubernetes spec information.
func (o SqlManagedInstanceK8sRawResponsePtrOutput) Spec() SqlManagedInstanceK8sSpecResponsePtrOutput {
	return o.ApplyT(func(v *SqlManagedInstanceK8sRawResponse) *SqlManagedInstanceK8sSpecResponse {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(SqlManagedInstanceK8sSpecResponsePtrOutput)
}

// The kubernetes spec information.
type SqlManagedInstanceK8sSpec struct {
	// This option specifies the number of SQL Managed Instance replicas that will be deployed in your Kubernetes cluster for high availability purposes. If sku.tier is BusinessCritical, allowed values are '2' or '3' with default of '3'. If sku.tier is GeneralPurpose, replicas must be '1'.
	Replicas *int `pulumi:"replicas"`
	// The kubernetes scheduling information.
	Scheduling *K8sScheduling `pulumi:"scheduling"`
}

// SqlManagedInstanceK8sSpecInput is an input type that accepts SqlManagedInstanceK8sSpecArgs and SqlManagedInstanceK8sSpecOutput values.
// You can construct a concrete instance of `SqlManagedInstanceK8sSpecInput` via:
//
//	SqlManagedInstanceK8sSpecArgs{...}
type SqlManagedInstanceK8sSpecInput interface {
	pulumi.Input

	ToSqlManagedInstanceK8sSpecOutput() SqlManagedInstanceK8sSpecOutput
	ToSqlManagedInstanceK8sSpecOutputWithContext(context.Context) SqlManagedInstanceK8sSpecOutput
}

// The kubernetes spec information.
type SqlManagedInstanceK8sSpecArgs struct {
	// This option specifies the number of SQL Managed Instance replicas that will be deployed in your Kubernetes cluster for high availability purposes. If sku.tier is BusinessCritical, allowed values are '2' or '3' with default of '3'. If sku.tier is GeneralPurpose, replicas must be '1'.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// The kubernetes scheduling information.
	Scheduling K8sSchedulingPtrInput `pulumi:"scheduling"`
}

func (SqlManagedInstanceK8sSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagedInstanceK8sSpec)(nil)).Elem()
}

func (i SqlManagedInstanceK8sSpecArgs) ToSqlManagedInstanceK8sSpecOutput() SqlManagedInstanceK8sSpecOutput {
	return i.ToSqlManagedInstanceK8sSpecOutputWithContext(context.Background())
}

func (i SqlManagedInstanceK8sSpecArgs) ToSqlManagedInstanceK8sSpecOutputWithContext(ctx context.Context) SqlManagedInstanceK8sSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlManagedInstanceK8sSpecOutput)
}

func (i SqlManagedInstanceK8sSpecArgs) ToSqlManagedInstanceK8sSpecPtrOutput() SqlManagedInstanceK8sSpecPtrOutput {
	return i.ToSqlManagedInstanceK8sSpecPtrOutputWithContext(context.Background())
}

func (i SqlManagedInstanceK8sSpecArgs) ToSqlManagedInstanceK8sSpecPtrOutputWithContext(ctx context.Context) SqlManagedInstanceK8sSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlManagedInstanceK8sSpecOutput).ToSqlManagedInstanceK8sSpecPtrOutputWithContext(ctx)
}

// SqlManagedInstanceK8sSpecPtrInput is an input type that accepts SqlManagedInstanceK8sSpecArgs, SqlManagedInstanceK8sSpecPtr and SqlManagedInstanceK8sSpecPtrOutput values.
// You can construct a concrete instance of `SqlManagedInstanceK8sSpecPtrInput` via:
//
//	        SqlManagedInstanceK8sSpecArgs{...}
//
//	or:
//
//	        nil
type SqlManagedInstanceK8sSpecPtrInput interface {
	pulumi.Input

	ToSqlManagedInstanceK8sSpecPtrOutput() SqlManagedInstanceK8sSpecPtrOutput
	ToSqlManagedInstanceK8sSpecPtrOutputWithContext(context.Context) SqlManagedInstanceK8sSpecPtrOutput
}

type sqlManagedInstanceK8sSpecPtrType SqlManagedInstanceK8sSpecArgs

func SqlManagedInstanceK8sSpecPtr(v *SqlManagedInstanceK8sSpecArgs) SqlManagedInstanceK8sSpecPtrInput {
	return (*sqlManagedInstanceK8sSpecPtrType)(v)
}

func (*sqlManagedInstanceK8sSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlManagedInstanceK8sSpec)(nil)).Elem()
}

func (i *sqlManagedInstanceK8sSpecPtrType) ToSqlManagedInstanceK8sSpecPtrOutput() SqlManagedInstanceK8sSpecPtrOutput {
	return i.ToSqlManagedInstanceK8sSpecPtrOutputWithContext(context.Background())
}

func (i *sqlManagedInstanceK8sSpecPtrType) ToSqlManagedInstanceK8sSpecPtrOutputWithContext(ctx context.Context) SqlManagedInstanceK8sSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlManagedInstanceK8sSpecPtrOutput)
}

// The kubernetes spec information.
type SqlManagedInstanceK8sSpecOutput struct{ *pulumi.OutputState }

func (SqlManagedInstanceK8sSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagedInstanceK8sSpec)(nil)).Elem()
}

func (o SqlManagedInstanceK8sSpecOutput) ToSqlManagedInstanceK8sSpecOutput() SqlManagedInstanceK8sSpecOutput {
	return o
}

func (o SqlManagedInstanceK8sSpecOutput) ToSqlManagedInstanceK8sSpecOutputWithContext(ctx context.Context) SqlManagedInstanceK8sSpecOutput {
	return o
}

func (o SqlManagedInstanceK8sSpecOutput) ToSqlManagedInstanceK8sSpecPtrOutput() SqlManagedInstanceK8sSpecPtrOutput {
	return o.ToSqlManagedInstanceK8sSpecPtrOutputWithContext(context.Background())
}

func (o SqlManagedInstanceK8sSpecOutput) ToSqlManagedInstanceK8sSpecPtrOutputWithContext(ctx context.Context) SqlManagedInstanceK8sSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlManagedInstanceK8sSpec) *SqlManagedInstanceK8sSpec {
		return &v
	}).(SqlManagedInstanceK8sSpecPtrOutput)
}

// This option specifies the number of SQL Managed Instance replicas that will be deployed in your Kubernetes cluster for high availability purposes. If sku.tier is BusinessCritical, allowed values are '2' or '3' with default of '3'. If sku.tier is GeneralPurpose, replicas must be '1'.
func (o SqlManagedInstanceK8sSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceK8sSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// The kubernetes scheduling information.
func (o SqlManagedInstanceK8sSpecOutput) Scheduling() K8sSchedulingPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceK8sSpec) *K8sScheduling { return v.Scheduling }).(K8sSchedulingPtrOutput)
}

type SqlManagedInstanceK8sSpecPtrOutput struct{ *pulumi.OutputState }

func (SqlManagedInstanceK8sSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlManagedInstanceK8sSpec)(nil)).Elem()
}

func (o SqlManagedInstanceK8sSpecPtrOutput) ToSqlManagedInstanceK8sSpecPtrOutput() SqlManagedInstanceK8sSpecPtrOutput {
	return o
}

func (o SqlManagedInstanceK8sSpecPtrOutput) ToSqlManagedInstanceK8sSpecPtrOutputWithContext(ctx context.Context) SqlManagedInstanceK8sSpecPtrOutput {
	return o
}

func (o SqlManagedInstanceK8sSpecPtrOutput) Elem() SqlManagedInstanceK8sSpecOutput {
	return o.ApplyT(func(v *SqlManagedInstanceK8sSpec) SqlManagedInstanceK8sSpec {
		if v != nil {
			return *v
		}
		var ret SqlManagedInstanceK8sSpec
		return ret
	}).(SqlManagedInstanceK8sSpecOutput)
}

// This option specifies the number of SQL Managed Instance replicas that will be deployed in your Kubernetes cluster for high availability purposes. If sku.tier is BusinessCritical, allowed values are '2' or '3' with default of '3'. If sku.tier is GeneralPurpose, replicas must be '1'.
func (o SqlManagedInstanceK8sSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlManagedInstanceK8sSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// The kubernetes scheduling information.
func (o SqlManagedInstanceK8sSpecPtrOutput) Scheduling() K8sSchedulingPtrOutput {
	return o.ApplyT(func(v *SqlManagedInstanceK8sSpec) *K8sScheduling {
		if v == nil {
			return nil
		}
		return v.Scheduling
	}).(K8sSchedulingPtrOutput)
}

// The kubernetes spec information.
type SqlManagedInstanceK8sSpecResponse struct {
	// This option specifies the number of SQL Managed Instance replicas that will be deployed in your Kubernetes cluster for high availability purposes. If sku.tier is BusinessCritical, allowed values are '2' or '3' with default of '3'. If sku.tier is GeneralPurpose, replicas must be '1'.
	Replicas *int `pulumi:"replicas"`
	// The kubernetes scheduling information.
	Scheduling *K8sSchedulingResponse `pulumi:"scheduling"`
}

// The kubernetes spec information.
type SqlManagedInstanceK8sSpecResponseOutput struct{ *pulumi.OutputState }

func (SqlManagedInstanceK8sSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagedInstanceK8sSpecResponse)(nil)).Elem()
}

func (o SqlManagedInstanceK8sSpecResponseOutput) ToSqlManagedInstanceK8sSpecResponseOutput() SqlManagedInstanceK8sSpecResponseOutput {
	return o
}

func (o SqlManagedInstanceK8sSpecResponseOutput) ToSqlManagedInstanceK8sSpecResponseOutputWithContext(ctx context.Context) SqlManagedInstanceK8sSpecResponseOutput {
	return o
}

// This option specifies the number of SQL Managed Instance replicas that will be deployed in your Kubernetes cluster for high availability purposes. If sku.tier is BusinessCritical, allowed values are '2' or '3' with default of '3'. If sku.tier is GeneralPurpose, replicas must be '1'.
func (o SqlManagedInstanceK8sSpecResponseOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceK8sSpecResponse) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// The kubernetes scheduling information.
func (o SqlManagedInstanceK8sSpecResponseOutput) Scheduling() K8sSchedulingResponsePtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceK8sSpecResponse) *K8sSchedulingResponse { return v.Scheduling }).(K8sSchedulingResponsePtrOutput)
}

type SqlManagedInstanceK8sSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlManagedInstanceK8sSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlManagedInstanceK8sSpecResponse)(nil)).Elem()
}

func (o SqlManagedInstanceK8sSpecResponsePtrOutput) ToSqlManagedInstanceK8sSpecResponsePtrOutput() SqlManagedInstanceK8sSpecResponsePtrOutput {
	return o
}

func (o SqlManagedInstanceK8sSpecResponsePtrOutput) ToSqlManagedInstanceK8sSpecResponsePtrOutputWithContext(ctx context.Context) SqlManagedInstanceK8sSpecResponsePtrOutput {
	return o
}

func (o SqlManagedInstanceK8sSpecResponsePtrOutput) Elem() SqlManagedInstanceK8sSpecResponseOutput {
	return o.ApplyT(func(v *SqlManagedInstanceK8sSpecResponse) SqlManagedInstanceK8sSpecResponse {
		if v != nil {
			return *v
		}
		var ret SqlManagedInstanceK8sSpecResponse
		return ret
	}).(SqlManagedInstanceK8sSpecResponseOutput)
}

// This option specifies the number of SQL Managed Instance replicas that will be deployed in your Kubernetes cluster for high availability purposes. If sku.tier is BusinessCritical, allowed values are '2' or '3' with default of '3'. If sku.tier is GeneralPurpose, replicas must be '1'.
func (o SqlManagedInstanceK8sSpecResponsePtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlManagedInstanceK8sSpecResponse) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// The kubernetes scheduling information.
func (o SqlManagedInstanceK8sSpecResponsePtrOutput) Scheduling() K8sSchedulingResponsePtrOutput {
	return o.ApplyT(func(v *SqlManagedInstanceK8sSpecResponse) *K8sSchedulingResponse {
		if v == nil {
			return nil
		}
		return v.Scheduling
	}).(K8sSchedulingResponsePtrOutput)
}

// Properties of sqlManagedInstance.
type SqlManagedInstanceProperties struct {
	// The instance admin user
	Admin *string `pulumi:"admin"`
	// Username and password for basic authentication.
	BasicLoginInformation *BasicLoginInformation `pulumi:"basicLoginInformation"`
	// If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
	ClusterId *string `pulumi:"clusterId"`
	// null
	DataControllerId *string `pulumi:"dataControllerId"`
	// The instance end time
	EndTime *string `pulumi:"endTime"`
	// If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
	ExtensionId *string `pulumi:"extensionId"`
	// The raw kubernetes information
	K8sRaw *SqlManagedInstanceK8sRaw `pulumi:"k8sRaw"`
	// Last uploaded date from Kubernetes cluster. Defaults to current date time
	LastUploadedDate *string `pulumi:"lastUploadedDate"`
	// The license type to apply for this managed instance.
	LicenseType *ArcSqlManagedInstanceLicenseType `pulumi:"licenseType"`
	// The instance start time
	StartTime *string `pulumi:"startTime"`
}

// Defaults sets the appropriate defaults for SqlManagedInstanceProperties
func (val *SqlManagedInstanceProperties) Defaults() *SqlManagedInstanceProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.LicenseType) {
		licenseType_ := ArcSqlManagedInstanceLicenseType("BasePrice")
		tmp.LicenseType = &licenseType_
	}
	return &tmp
}

// SqlManagedInstancePropertiesInput is an input type that accepts SqlManagedInstancePropertiesArgs and SqlManagedInstancePropertiesOutput values.
// You can construct a concrete instance of `SqlManagedInstancePropertiesInput` via:
//
//	SqlManagedInstancePropertiesArgs{...}
type SqlManagedInstancePropertiesInput interface {
	pulumi.Input

	ToSqlManagedInstancePropertiesOutput() SqlManagedInstancePropertiesOutput
	ToSqlManagedInstancePropertiesOutputWithContext(context.Context) SqlManagedInstancePropertiesOutput
}

// Properties of sqlManagedInstance.
type SqlManagedInstancePropertiesArgs struct {
	// The instance admin user
	Admin pulumi.StringPtrInput `pulumi:"admin"`
	// Username and password for basic authentication.
	BasicLoginInformation BasicLoginInformationPtrInput `pulumi:"basicLoginInformation"`
	// If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// null
	DataControllerId pulumi.StringPtrInput `pulumi:"dataControllerId"`
	// The instance end time
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
	ExtensionId pulumi.StringPtrInput `pulumi:"extensionId"`
	// The raw kubernetes information
	K8sRaw SqlManagedInstanceK8sRawPtrInput `pulumi:"k8sRaw"`
	// Last uploaded date from Kubernetes cluster. Defaults to current date time
	LastUploadedDate pulumi.StringPtrInput `pulumi:"lastUploadedDate"`
	// The license type to apply for this managed instance.
	LicenseType ArcSqlManagedInstanceLicenseTypePtrInput `pulumi:"licenseType"`
	// The instance start time
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

// Defaults sets the appropriate defaults for SqlManagedInstancePropertiesArgs
func (val *SqlManagedInstancePropertiesArgs) Defaults() *SqlManagedInstancePropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.LicenseType) {
		tmp.LicenseType = ArcSqlManagedInstanceLicenseType("BasePrice")
	}
	return &tmp
}
func (SqlManagedInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagedInstanceProperties)(nil)).Elem()
}

func (i SqlManagedInstancePropertiesArgs) ToSqlManagedInstancePropertiesOutput() SqlManagedInstancePropertiesOutput {
	return i.ToSqlManagedInstancePropertiesOutputWithContext(context.Background())
}

func (i SqlManagedInstancePropertiesArgs) ToSqlManagedInstancePropertiesOutputWithContext(ctx context.Context) SqlManagedInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlManagedInstancePropertiesOutput)
}

// Properties of sqlManagedInstance.
type SqlManagedInstancePropertiesOutput struct{ *pulumi.OutputState }

func (SqlManagedInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagedInstanceProperties)(nil)).Elem()
}

func (o SqlManagedInstancePropertiesOutput) ToSqlManagedInstancePropertiesOutput() SqlManagedInstancePropertiesOutput {
	return o
}

func (o SqlManagedInstancePropertiesOutput) ToSqlManagedInstancePropertiesOutputWithContext(ctx context.Context) SqlManagedInstancePropertiesOutput {
	return o
}

// The instance admin user
func (o SqlManagedInstancePropertiesOutput) Admin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceProperties) *string { return v.Admin }).(pulumi.StringPtrOutput)
}

// Username and password for basic authentication.
func (o SqlManagedInstancePropertiesOutput) BasicLoginInformation() BasicLoginInformationPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceProperties) *BasicLoginInformation { return v.BasicLoginInformation }).(BasicLoginInformationPtrOutput)
}

// If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
func (o SqlManagedInstancePropertiesOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceProperties) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// null
func (o SqlManagedInstancePropertiesOutput) DataControllerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceProperties) *string { return v.DataControllerId }).(pulumi.StringPtrOutput)
}

// The instance end time
func (o SqlManagedInstancePropertiesOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceProperties) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
func (o SqlManagedInstancePropertiesOutput) ExtensionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceProperties) *string { return v.ExtensionId }).(pulumi.StringPtrOutput)
}

// The raw kubernetes information
func (o SqlManagedInstancePropertiesOutput) K8sRaw() SqlManagedInstanceK8sRawPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceProperties) *SqlManagedInstanceK8sRaw { return v.K8sRaw }).(SqlManagedInstanceK8sRawPtrOutput)
}

// Last uploaded date from Kubernetes cluster. Defaults to current date time
func (o SqlManagedInstancePropertiesOutput) LastUploadedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceProperties) *string { return v.LastUploadedDate }).(pulumi.StringPtrOutput)
}

// The license type to apply for this managed instance.
func (o SqlManagedInstancePropertiesOutput) LicenseType() ArcSqlManagedInstanceLicenseTypePtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceProperties) *ArcSqlManagedInstanceLicenseType { return v.LicenseType }).(ArcSqlManagedInstanceLicenseTypePtrOutput)
}

// The instance start time
func (o SqlManagedInstancePropertiesOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceProperties) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Properties of sqlManagedInstance.
type SqlManagedInstancePropertiesResponse struct {
	// The instance admin user
	Admin *string `pulumi:"admin"`
	// Username and password for basic authentication.
	BasicLoginInformation *BasicLoginInformationResponse `pulumi:"basicLoginInformation"`
	// If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
	ClusterId *string `pulumi:"clusterId"`
	// null
	DataControllerId *string `pulumi:"dataControllerId"`
	// The instance end time
	EndTime *string `pulumi:"endTime"`
	// If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
	ExtensionId *string `pulumi:"extensionId"`
	// The raw kubernetes information
	K8sRaw *SqlManagedInstanceK8sRawResponse `pulumi:"k8sRaw"`
	// Last uploaded date from Kubernetes cluster. Defaults to current date time
	LastUploadedDate *string `pulumi:"lastUploadedDate"`
	// The license type to apply for this managed instance.
	LicenseType       *string `pulumi:"licenseType"`
	ProvisioningState string  `pulumi:"provisioningState"`
	// The instance start time
	StartTime *string `pulumi:"startTime"`
}

// Defaults sets the appropriate defaults for SqlManagedInstancePropertiesResponse
func (val *SqlManagedInstancePropertiesResponse) Defaults() *SqlManagedInstancePropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.LicenseType) {
		licenseType_ := "BasePrice"
		tmp.LicenseType = &licenseType_
	}
	return &tmp
}

// Properties of sqlManagedInstance.
type SqlManagedInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (SqlManagedInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagedInstancePropertiesResponse)(nil)).Elem()
}

func (o SqlManagedInstancePropertiesResponseOutput) ToSqlManagedInstancePropertiesResponseOutput() SqlManagedInstancePropertiesResponseOutput {
	return o
}

func (o SqlManagedInstancePropertiesResponseOutput) ToSqlManagedInstancePropertiesResponseOutputWithContext(ctx context.Context) SqlManagedInstancePropertiesResponseOutput {
	return o
}

// The instance admin user
func (o SqlManagedInstancePropertiesResponseOutput) Admin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstancePropertiesResponse) *string { return v.Admin }).(pulumi.StringPtrOutput)
}

// Username and password for basic authentication.
func (o SqlManagedInstancePropertiesResponseOutput) BasicLoginInformation() BasicLoginInformationResponsePtrOutput {
	return o.ApplyT(func(v SqlManagedInstancePropertiesResponse) *BasicLoginInformationResponse {
		return v.BasicLoginInformation
	}).(BasicLoginInformationResponsePtrOutput)
}

// If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
func (o SqlManagedInstancePropertiesResponseOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstancePropertiesResponse) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// null
func (o SqlManagedInstancePropertiesResponseOutput) DataControllerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstancePropertiesResponse) *string { return v.DataControllerId }).(pulumi.StringPtrOutput)
}

// The instance end time
func (o SqlManagedInstancePropertiesResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstancePropertiesResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
func (o SqlManagedInstancePropertiesResponseOutput) ExtensionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstancePropertiesResponse) *string { return v.ExtensionId }).(pulumi.StringPtrOutput)
}

// The raw kubernetes information
func (o SqlManagedInstancePropertiesResponseOutput) K8sRaw() SqlManagedInstanceK8sRawResponsePtrOutput {
	return o.ApplyT(func(v SqlManagedInstancePropertiesResponse) *SqlManagedInstanceK8sRawResponse { return v.K8sRaw }).(SqlManagedInstanceK8sRawResponsePtrOutput)
}

// Last uploaded date from Kubernetes cluster. Defaults to current date time
func (o SqlManagedInstancePropertiesResponseOutput) LastUploadedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstancePropertiesResponse) *string { return v.LastUploadedDate }).(pulumi.StringPtrOutput)
}

// The license type to apply for this managed instance.
func (o SqlManagedInstancePropertiesResponseOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstancePropertiesResponse) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

func (o SqlManagedInstancePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v SqlManagedInstancePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The instance start time
func (o SqlManagedInstancePropertiesResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstancePropertiesResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The resource model definition representing SKU for Azure Managed Instance - Azure Arc
type SqlManagedInstanceSku struct {
	Capacity *int `pulumi:"capacity"`
	// Whether dev/test is enabled. When the dev field is set to true, the resource is used for dev/test purpose.
	Dev    *bool   `pulumi:"dev"`
	Family *string `pulumi:"family"`
	// The name of the SKU.
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// The pricing tier for the instance.
	Tier *SqlManagedInstanceSkuTier `pulumi:"tier"`
}

// Defaults sets the appropriate defaults for SqlManagedInstanceSku
func (val *SqlManagedInstanceSku) Defaults() *SqlManagedInstanceSku {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Dev) {
		dev_ := true
		tmp.Dev = &dev_
	}
	if isZero(tmp.Tier) {
		tier_ := SqlManagedInstanceSkuTier("GeneralPurpose")
		tmp.Tier = &tier_
	}
	return &tmp
}

// SqlManagedInstanceSkuInput is an input type that accepts SqlManagedInstanceSkuArgs and SqlManagedInstanceSkuOutput values.
// You can construct a concrete instance of `SqlManagedInstanceSkuInput` via:
//
//	SqlManagedInstanceSkuArgs{...}
type SqlManagedInstanceSkuInput interface {
	pulumi.Input

	ToSqlManagedInstanceSkuOutput() SqlManagedInstanceSkuOutput
	ToSqlManagedInstanceSkuOutputWithContext(context.Context) SqlManagedInstanceSkuOutput
}

// The resource model definition representing SKU for Azure Managed Instance - Azure Arc
type SqlManagedInstanceSkuArgs struct {
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// Whether dev/test is enabled. When the dev field is set to true, the resource is used for dev/test purpose.
	Dev    pulumi.BoolPtrInput   `pulumi:"dev"`
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The name of the SKU.
	Name pulumi.StringInput `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The pricing tier for the instance.
	Tier SqlManagedInstanceSkuTierPtrInput `pulumi:"tier"`
}

// Defaults sets the appropriate defaults for SqlManagedInstanceSkuArgs
func (val *SqlManagedInstanceSkuArgs) Defaults() *SqlManagedInstanceSkuArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Dev) {
		tmp.Dev = pulumi.BoolPtr(true)
	}
	if isZero(tmp.Tier) {
		tmp.Tier = SqlManagedInstanceSkuTier("GeneralPurpose")
	}
	return &tmp
}
func (SqlManagedInstanceSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagedInstanceSku)(nil)).Elem()
}

func (i SqlManagedInstanceSkuArgs) ToSqlManagedInstanceSkuOutput() SqlManagedInstanceSkuOutput {
	return i.ToSqlManagedInstanceSkuOutputWithContext(context.Background())
}

func (i SqlManagedInstanceSkuArgs) ToSqlManagedInstanceSkuOutputWithContext(ctx context.Context) SqlManagedInstanceSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlManagedInstanceSkuOutput)
}

func (i SqlManagedInstanceSkuArgs) ToSqlManagedInstanceSkuPtrOutput() SqlManagedInstanceSkuPtrOutput {
	return i.ToSqlManagedInstanceSkuPtrOutputWithContext(context.Background())
}

func (i SqlManagedInstanceSkuArgs) ToSqlManagedInstanceSkuPtrOutputWithContext(ctx context.Context) SqlManagedInstanceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlManagedInstanceSkuOutput).ToSqlManagedInstanceSkuPtrOutputWithContext(ctx)
}

// SqlManagedInstanceSkuPtrInput is an input type that accepts SqlManagedInstanceSkuArgs, SqlManagedInstanceSkuPtr and SqlManagedInstanceSkuPtrOutput values.
// You can construct a concrete instance of `SqlManagedInstanceSkuPtrInput` via:
//
//	        SqlManagedInstanceSkuArgs{...}
//
//	or:
//
//	        nil
type SqlManagedInstanceSkuPtrInput interface {
	pulumi.Input

	ToSqlManagedInstanceSkuPtrOutput() SqlManagedInstanceSkuPtrOutput
	ToSqlManagedInstanceSkuPtrOutputWithContext(context.Context) SqlManagedInstanceSkuPtrOutput
}

type sqlManagedInstanceSkuPtrType SqlManagedInstanceSkuArgs

func SqlManagedInstanceSkuPtr(v *SqlManagedInstanceSkuArgs) SqlManagedInstanceSkuPtrInput {
	return (*sqlManagedInstanceSkuPtrType)(v)
}

func (*sqlManagedInstanceSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlManagedInstanceSku)(nil)).Elem()
}

func (i *sqlManagedInstanceSkuPtrType) ToSqlManagedInstanceSkuPtrOutput() SqlManagedInstanceSkuPtrOutput {
	return i.ToSqlManagedInstanceSkuPtrOutputWithContext(context.Background())
}

func (i *sqlManagedInstanceSkuPtrType) ToSqlManagedInstanceSkuPtrOutputWithContext(ctx context.Context) SqlManagedInstanceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlManagedInstanceSkuPtrOutput)
}

// The resource model definition representing SKU for Azure Managed Instance - Azure Arc
type SqlManagedInstanceSkuOutput struct{ *pulumi.OutputState }

func (SqlManagedInstanceSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagedInstanceSku)(nil)).Elem()
}

func (o SqlManagedInstanceSkuOutput) ToSqlManagedInstanceSkuOutput() SqlManagedInstanceSkuOutput {
	return o
}

func (o SqlManagedInstanceSkuOutput) ToSqlManagedInstanceSkuOutputWithContext(ctx context.Context) SqlManagedInstanceSkuOutput {
	return o
}

func (o SqlManagedInstanceSkuOutput) ToSqlManagedInstanceSkuPtrOutput() SqlManagedInstanceSkuPtrOutput {
	return o.ToSqlManagedInstanceSkuPtrOutputWithContext(context.Background())
}

func (o SqlManagedInstanceSkuOutput) ToSqlManagedInstanceSkuPtrOutputWithContext(ctx context.Context) SqlManagedInstanceSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlManagedInstanceSku) *SqlManagedInstanceSku {
		return &v
	}).(SqlManagedInstanceSkuPtrOutput)
}

func (o SqlManagedInstanceSkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceSku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// Whether dev/test is enabled. When the dev field is set to true, the resource is used for dev/test purpose.
func (o SqlManagedInstanceSkuOutput) Dev() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceSku) *bool { return v.Dev }).(pulumi.BoolPtrOutput)
}

func (o SqlManagedInstanceSkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceSku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU.
func (o SqlManagedInstanceSkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SqlManagedInstanceSku) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SqlManagedInstanceSkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceSku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The pricing tier for the instance.
func (o SqlManagedInstanceSkuOutput) Tier() SqlManagedInstanceSkuTierPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceSku) *SqlManagedInstanceSkuTier { return v.Tier }).(SqlManagedInstanceSkuTierPtrOutput)
}

type SqlManagedInstanceSkuPtrOutput struct{ *pulumi.OutputState }

func (SqlManagedInstanceSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlManagedInstanceSku)(nil)).Elem()
}

func (o SqlManagedInstanceSkuPtrOutput) ToSqlManagedInstanceSkuPtrOutput() SqlManagedInstanceSkuPtrOutput {
	return o
}

func (o SqlManagedInstanceSkuPtrOutput) ToSqlManagedInstanceSkuPtrOutputWithContext(ctx context.Context) SqlManagedInstanceSkuPtrOutput {
	return o
}

func (o SqlManagedInstanceSkuPtrOutput) Elem() SqlManagedInstanceSkuOutput {
	return o.ApplyT(func(v *SqlManagedInstanceSku) SqlManagedInstanceSku {
		if v != nil {
			return *v
		}
		var ret SqlManagedInstanceSku
		return ret
	}).(SqlManagedInstanceSkuOutput)
}

func (o SqlManagedInstanceSkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlManagedInstanceSku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// Whether dev/test is enabled. When the dev field is set to true, the resource is used for dev/test purpose.
func (o SqlManagedInstanceSkuPtrOutput) Dev() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlManagedInstanceSku) *bool {
		if v == nil {
			return nil
		}
		return v.Dev
	}).(pulumi.BoolPtrOutput)
}

func (o SqlManagedInstanceSkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlManagedInstanceSku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU.
func (o SqlManagedInstanceSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlManagedInstanceSku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SqlManagedInstanceSkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlManagedInstanceSku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The pricing tier for the instance.
func (o SqlManagedInstanceSkuPtrOutput) Tier() SqlManagedInstanceSkuTierPtrOutput {
	return o.ApplyT(func(v *SqlManagedInstanceSku) *SqlManagedInstanceSkuTier {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(SqlManagedInstanceSkuTierPtrOutput)
}

// The resource model definition representing SKU for Azure Managed Instance - Azure Arc
type SqlManagedInstanceSkuResponse struct {
	Capacity *int `pulumi:"capacity"`
	// Whether dev/test is enabled. When the dev field is set to true, the resource is used for dev/test purpose.
	Dev    *bool   `pulumi:"dev"`
	Family *string `pulumi:"family"`
	// The name of the SKU.
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// The pricing tier for the instance.
	Tier *string `pulumi:"tier"`
}

// Defaults sets the appropriate defaults for SqlManagedInstanceSkuResponse
func (val *SqlManagedInstanceSkuResponse) Defaults() *SqlManagedInstanceSkuResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Dev) {
		dev_ := true
		tmp.Dev = &dev_
	}
	if isZero(tmp.Tier) {
		tier_ := "GeneralPurpose"
		tmp.Tier = &tier_
	}
	return &tmp
}

// The resource model definition representing SKU for Azure Managed Instance - Azure Arc
type SqlManagedInstanceSkuResponseOutput struct{ *pulumi.OutputState }

func (SqlManagedInstanceSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagedInstanceSkuResponse)(nil)).Elem()
}

func (o SqlManagedInstanceSkuResponseOutput) ToSqlManagedInstanceSkuResponseOutput() SqlManagedInstanceSkuResponseOutput {
	return o
}

func (o SqlManagedInstanceSkuResponseOutput) ToSqlManagedInstanceSkuResponseOutputWithContext(ctx context.Context) SqlManagedInstanceSkuResponseOutput {
	return o
}

func (o SqlManagedInstanceSkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceSkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// Whether dev/test is enabled. When the dev field is set to true, the resource is used for dev/test purpose.
func (o SqlManagedInstanceSkuResponseOutput) Dev() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceSkuResponse) *bool { return v.Dev }).(pulumi.BoolPtrOutput)
}

func (o SqlManagedInstanceSkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceSkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU.
func (o SqlManagedInstanceSkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SqlManagedInstanceSkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SqlManagedInstanceSkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceSkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The pricing tier for the instance.
func (o SqlManagedInstanceSkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlManagedInstanceSkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SqlManagedInstanceSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlManagedInstanceSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlManagedInstanceSkuResponse)(nil)).Elem()
}

func (o SqlManagedInstanceSkuResponsePtrOutput) ToSqlManagedInstanceSkuResponsePtrOutput() SqlManagedInstanceSkuResponsePtrOutput {
	return o
}

func (o SqlManagedInstanceSkuResponsePtrOutput) ToSqlManagedInstanceSkuResponsePtrOutputWithContext(ctx context.Context) SqlManagedInstanceSkuResponsePtrOutput {
	return o
}

func (o SqlManagedInstanceSkuResponsePtrOutput) Elem() SqlManagedInstanceSkuResponseOutput {
	return o.ApplyT(func(v *SqlManagedInstanceSkuResponse) SqlManagedInstanceSkuResponse {
		if v != nil {
			return *v
		}
		var ret SqlManagedInstanceSkuResponse
		return ret
	}).(SqlManagedInstanceSkuResponseOutput)
}

func (o SqlManagedInstanceSkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlManagedInstanceSkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// Whether dev/test is enabled. When the dev field is set to true, the resource is used for dev/test purpose.
func (o SqlManagedInstanceSkuResponsePtrOutput) Dev() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlManagedInstanceSkuResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Dev
	}).(pulumi.BoolPtrOutput)
}

func (o SqlManagedInstanceSkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlManagedInstanceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU.
func (o SqlManagedInstanceSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlManagedInstanceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SqlManagedInstanceSkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlManagedInstanceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The pricing tier for the instance.
func (o SqlManagedInstanceSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlManagedInstanceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Properties of SqlServerInstance.
type SqlServerInstanceProperties struct {
	// Status of Azure Defender.
	AzureDefenderStatus *string `pulumi:"azureDefenderStatus"`
	// Timestamp of last Azure Defender status update.
	AzureDefenderStatusLastUpdated *string `pulumi:"azureDefenderStatusLastUpdated"`
	// SQL Server collation.
	Collation *string `pulumi:"collation"`
	// ARM Resource id of the container resource (Azure Arc for Servers).
	ContainerResourceId string `pulumi:"containerResourceId"`
	// SQL Server current version.
	CurrentVersion *string `pulumi:"currentVersion"`
	// SQL Server edition.
	Edition *string `pulumi:"edition"`
	// SQL Server instance name.
	InstanceName *string `pulumi:"instanceName"`
	// SQL Server license type.
	LicenseType *string `pulumi:"licenseType"`
	// SQL Server update level.
	PatchLevel *string `pulumi:"patchLevel"`
	// SQL Server product ID.
	ProductId *string `pulumi:"productId"`
	// The cloud connectivity status.
	Status string `pulumi:"status"`
	// Dynamic TCP ports used by SQL Server.
	TcpDynamicPorts *string `pulumi:"tcpDynamicPorts"`
	// Static TCP ports used by SQL Server.
	TcpStaticPorts *string `pulumi:"tcpStaticPorts"`
	// The number of logical processors used by the SQL Server instance.
	VCore *string `pulumi:"vCore"`
	// SQL Server version.
	Version *string `pulumi:"version"`
}

// SqlServerInstancePropertiesInput is an input type that accepts SqlServerInstancePropertiesArgs and SqlServerInstancePropertiesOutput values.
// You can construct a concrete instance of `SqlServerInstancePropertiesInput` via:
//
//	SqlServerInstancePropertiesArgs{...}
type SqlServerInstancePropertiesInput interface {
	pulumi.Input

	ToSqlServerInstancePropertiesOutput() SqlServerInstancePropertiesOutput
	ToSqlServerInstancePropertiesOutputWithContext(context.Context) SqlServerInstancePropertiesOutput
}

// Properties of SqlServerInstance.
type SqlServerInstancePropertiesArgs struct {
	// Status of Azure Defender.
	AzureDefenderStatus pulumi.StringPtrInput `pulumi:"azureDefenderStatus"`
	// Timestamp of last Azure Defender status update.
	AzureDefenderStatusLastUpdated pulumi.StringPtrInput `pulumi:"azureDefenderStatusLastUpdated"`
	// SQL Server collation.
	Collation pulumi.StringPtrInput `pulumi:"collation"`
	// ARM Resource id of the container resource (Azure Arc for Servers).
	ContainerResourceId pulumi.StringInput `pulumi:"containerResourceId"`
	// SQL Server current version.
	CurrentVersion pulumi.StringPtrInput `pulumi:"currentVersion"`
	// SQL Server edition.
	Edition pulumi.StringPtrInput `pulumi:"edition"`
	// SQL Server instance name.
	InstanceName pulumi.StringPtrInput `pulumi:"instanceName"`
	// SQL Server license type.
	LicenseType pulumi.StringPtrInput `pulumi:"licenseType"`
	// SQL Server update level.
	PatchLevel pulumi.StringPtrInput `pulumi:"patchLevel"`
	// SQL Server product ID.
	ProductId pulumi.StringPtrInput `pulumi:"productId"`
	// The cloud connectivity status.
	Status pulumi.StringInput `pulumi:"status"`
	// Dynamic TCP ports used by SQL Server.
	TcpDynamicPorts pulumi.StringPtrInput `pulumi:"tcpDynamicPorts"`
	// Static TCP ports used by SQL Server.
	TcpStaticPorts pulumi.StringPtrInput `pulumi:"tcpStaticPorts"`
	// The number of logical processors used by the SQL Server instance.
	VCore pulumi.StringPtrInput `pulumi:"vCore"`
	// SQL Server version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (SqlServerInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerInstanceProperties)(nil)).Elem()
}

func (i SqlServerInstancePropertiesArgs) ToSqlServerInstancePropertiesOutput() SqlServerInstancePropertiesOutput {
	return i.ToSqlServerInstancePropertiesOutputWithContext(context.Background())
}

func (i SqlServerInstancePropertiesArgs) ToSqlServerInstancePropertiesOutputWithContext(ctx context.Context) SqlServerInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerInstancePropertiesOutput)
}

func (i SqlServerInstancePropertiesArgs) ToSqlServerInstancePropertiesPtrOutput() SqlServerInstancePropertiesPtrOutput {
	return i.ToSqlServerInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i SqlServerInstancePropertiesArgs) ToSqlServerInstancePropertiesPtrOutputWithContext(ctx context.Context) SqlServerInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerInstancePropertiesOutput).ToSqlServerInstancePropertiesPtrOutputWithContext(ctx)
}

// SqlServerInstancePropertiesPtrInput is an input type that accepts SqlServerInstancePropertiesArgs, SqlServerInstancePropertiesPtr and SqlServerInstancePropertiesPtrOutput values.
// You can construct a concrete instance of `SqlServerInstancePropertiesPtrInput` via:
//
//	        SqlServerInstancePropertiesArgs{...}
//
//	or:
//
//	        nil
type SqlServerInstancePropertiesPtrInput interface {
	pulumi.Input

	ToSqlServerInstancePropertiesPtrOutput() SqlServerInstancePropertiesPtrOutput
	ToSqlServerInstancePropertiesPtrOutputWithContext(context.Context) SqlServerInstancePropertiesPtrOutput
}

type sqlServerInstancePropertiesPtrType SqlServerInstancePropertiesArgs

func SqlServerInstancePropertiesPtr(v *SqlServerInstancePropertiesArgs) SqlServerInstancePropertiesPtrInput {
	return (*sqlServerInstancePropertiesPtrType)(v)
}

func (*sqlServerInstancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerInstanceProperties)(nil)).Elem()
}

func (i *sqlServerInstancePropertiesPtrType) ToSqlServerInstancePropertiesPtrOutput() SqlServerInstancePropertiesPtrOutput {
	return i.ToSqlServerInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *sqlServerInstancePropertiesPtrType) ToSqlServerInstancePropertiesPtrOutputWithContext(ctx context.Context) SqlServerInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerInstancePropertiesPtrOutput)
}

// Properties of SqlServerInstance.
type SqlServerInstancePropertiesOutput struct{ *pulumi.OutputState }

func (SqlServerInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerInstanceProperties)(nil)).Elem()
}

func (o SqlServerInstancePropertiesOutput) ToSqlServerInstancePropertiesOutput() SqlServerInstancePropertiesOutput {
	return o
}

func (o SqlServerInstancePropertiesOutput) ToSqlServerInstancePropertiesOutputWithContext(ctx context.Context) SqlServerInstancePropertiesOutput {
	return o
}

func (o SqlServerInstancePropertiesOutput) ToSqlServerInstancePropertiesPtrOutput() SqlServerInstancePropertiesPtrOutput {
	return o.ToSqlServerInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o SqlServerInstancePropertiesOutput) ToSqlServerInstancePropertiesPtrOutputWithContext(ctx context.Context) SqlServerInstancePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlServerInstanceProperties) *SqlServerInstanceProperties {
		return &v
	}).(SqlServerInstancePropertiesPtrOutput)
}

// Status of Azure Defender.
func (o SqlServerInstancePropertiesOutput) AzureDefenderStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstanceProperties) *string { return v.AzureDefenderStatus }).(pulumi.StringPtrOutput)
}

// Timestamp of last Azure Defender status update.
func (o SqlServerInstancePropertiesOutput) AzureDefenderStatusLastUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstanceProperties) *string { return v.AzureDefenderStatusLastUpdated }).(pulumi.StringPtrOutput)
}

// SQL Server collation.
func (o SqlServerInstancePropertiesOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstanceProperties) *string { return v.Collation }).(pulumi.StringPtrOutput)
}

// ARM Resource id of the container resource (Azure Arc for Servers).
func (o SqlServerInstancePropertiesOutput) ContainerResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerInstanceProperties) string { return v.ContainerResourceId }).(pulumi.StringOutput)
}

// SQL Server current version.
func (o SqlServerInstancePropertiesOutput) CurrentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstanceProperties) *string { return v.CurrentVersion }).(pulumi.StringPtrOutput)
}

// SQL Server edition.
func (o SqlServerInstancePropertiesOutput) Edition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstanceProperties) *string { return v.Edition }).(pulumi.StringPtrOutput)
}

// SQL Server instance name.
func (o SqlServerInstancePropertiesOutput) InstanceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstanceProperties) *string { return v.InstanceName }).(pulumi.StringPtrOutput)
}

// SQL Server license type.
func (o SqlServerInstancePropertiesOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstanceProperties) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// SQL Server update level.
func (o SqlServerInstancePropertiesOutput) PatchLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstanceProperties) *string { return v.PatchLevel }).(pulumi.StringPtrOutput)
}

// SQL Server product ID.
func (o SqlServerInstancePropertiesOutput) ProductId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstanceProperties) *string { return v.ProductId }).(pulumi.StringPtrOutput)
}

// The cloud connectivity status.
func (o SqlServerInstancePropertiesOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerInstanceProperties) string { return v.Status }).(pulumi.StringOutput)
}

// Dynamic TCP ports used by SQL Server.
func (o SqlServerInstancePropertiesOutput) TcpDynamicPorts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstanceProperties) *string { return v.TcpDynamicPorts }).(pulumi.StringPtrOutput)
}

// Static TCP ports used by SQL Server.
func (o SqlServerInstancePropertiesOutput) TcpStaticPorts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstanceProperties) *string { return v.TcpStaticPorts }).(pulumi.StringPtrOutput)
}

// The number of logical processors used by the SQL Server instance.
func (o SqlServerInstancePropertiesOutput) VCore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstanceProperties) *string { return v.VCore }).(pulumi.StringPtrOutput)
}

// SQL Server version.
func (o SqlServerInstancePropertiesOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstanceProperties) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type SqlServerInstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (SqlServerInstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerInstanceProperties)(nil)).Elem()
}

func (o SqlServerInstancePropertiesPtrOutput) ToSqlServerInstancePropertiesPtrOutput() SqlServerInstancePropertiesPtrOutput {
	return o
}

func (o SqlServerInstancePropertiesPtrOutput) ToSqlServerInstancePropertiesPtrOutputWithContext(ctx context.Context) SqlServerInstancePropertiesPtrOutput {
	return o
}

func (o SqlServerInstancePropertiesPtrOutput) Elem() SqlServerInstancePropertiesOutput {
	return o.ApplyT(func(v *SqlServerInstanceProperties) SqlServerInstanceProperties {
		if v != nil {
			return *v
		}
		var ret SqlServerInstanceProperties
		return ret
	}).(SqlServerInstancePropertiesOutput)
}

// Status of Azure Defender.
func (o SqlServerInstancePropertiesPtrOutput) AzureDefenderStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.AzureDefenderStatus
	}).(pulumi.StringPtrOutput)
}

// Timestamp of last Azure Defender status update.
func (o SqlServerInstancePropertiesPtrOutput) AzureDefenderStatusLastUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.AzureDefenderStatusLastUpdated
	}).(pulumi.StringPtrOutput)
}

// SQL Server collation.
func (o SqlServerInstancePropertiesPtrOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Collation
	}).(pulumi.StringPtrOutput)
}

// ARM Resource id of the container resource (Azure Arc for Servers).
func (o SqlServerInstancePropertiesPtrOutput) ContainerResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ContainerResourceId
	}).(pulumi.StringPtrOutput)
}

// SQL Server current version.
func (o SqlServerInstancePropertiesPtrOutput) CurrentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.CurrentVersion
	}).(pulumi.StringPtrOutput)
}

// SQL Server edition.
func (o SqlServerInstancePropertiesPtrOutput) Edition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Edition
	}).(pulumi.StringPtrOutput)
}

// SQL Server instance name.
func (o SqlServerInstancePropertiesPtrOutput) InstanceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.InstanceName
	}).(pulumi.StringPtrOutput)
}

// SQL Server license type.
func (o SqlServerInstancePropertiesPtrOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(pulumi.StringPtrOutput)
}

// SQL Server update level.
func (o SqlServerInstancePropertiesPtrOutput) PatchLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.PatchLevel
	}).(pulumi.StringPtrOutput)
}

// SQL Server product ID.
func (o SqlServerInstancePropertiesPtrOutput) ProductId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.ProductId
	}).(pulumi.StringPtrOutput)
}

// The cloud connectivity status.
func (o SqlServerInstancePropertiesPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Dynamic TCP ports used by SQL Server.
func (o SqlServerInstancePropertiesPtrOutput) TcpDynamicPorts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.TcpDynamicPorts
	}).(pulumi.StringPtrOutput)
}

// Static TCP ports used by SQL Server.
func (o SqlServerInstancePropertiesPtrOutput) TcpStaticPorts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.TcpStaticPorts
	}).(pulumi.StringPtrOutput)
}

// The number of logical processors used by the SQL Server instance.
func (o SqlServerInstancePropertiesPtrOutput) VCore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.VCore
	}).(pulumi.StringPtrOutput)
}

// SQL Server version.
func (o SqlServerInstancePropertiesPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Properties of SqlServerInstance.
type SqlServerInstancePropertiesResponse struct {
	// Status of Azure Defender.
	AzureDefenderStatus *string `pulumi:"azureDefenderStatus"`
	// Timestamp of last Azure Defender status update.
	AzureDefenderStatusLastUpdated *string `pulumi:"azureDefenderStatusLastUpdated"`
	// SQL Server collation.
	Collation *string `pulumi:"collation"`
	// ARM Resource id of the container resource (Azure Arc for Servers).
	ContainerResourceId string `pulumi:"containerResourceId"`
	// The time when the resource was created.
	CreateTime string `pulumi:"createTime"`
	// SQL Server current version.
	CurrentVersion *string `pulumi:"currentVersion"`
	// SQL Server edition.
	Edition *string `pulumi:"edition"`
	// SQL Server instance name.
	InstanceName *string `pulumi:"instanceName"`
	// SQL Server license type.
	LicenseType *string `pulumi:"licenseType"`
	// SQL Server update level.
	PatchLevel *string `pulumi:"patchLevel"`
	// SQL Server product ID.
	ProductId         *string `pulumi:"productId"`
	ProvisioningState string  `pulumi:"provisioningState"`
	// The cloud connectivity status.
	Status string `pulumi:"status"`
	// Dynamic TCP ports used by SQL Server.
	TcpDynamicPorts *string `pulumi:"tcpDynamicPorts"`
	// Static TCP ports used by SQL Server.
	TcpStaticPorts *string `pulumi:"tcpStaticPorts"`
	// The number of logical processors used by the SQL Server instance.
	VCore *string `pulumi:"vCore"`
	// SQL Server version.
	Version *string `pulumi:"version"`
}

// Properties of SqlServerInstance.
type SqlServerInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (SqlServerInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerInstancePropertiesResponse)(nil)).Elem()
}

func (o SqlServerInstancePropertiesResponseOutput) ToSqlServerInstancePropertiesResponseOutput() SqlServerInstancePropertiesResponseOutput {
	return o
}

func (o SqlServerInstancePropertiesResponseOutput) ToSqlServerInstancePropertiesResponseOutputWithContext(ctx context.Context) SqlServerInstancePropertiesResponseOutput {
	return o
}

// Status of Azure Defender.
func (o SqlServerInstancePropertiesResponseOutput) AzureDefenderStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstancePropertiesResponse) *string { return v.AzureDefenderStatus }).(pulumi.StringPtrOutput)
}

// Timestamp of last Azure Defender status update.
func (o SqlServerInstancePropertiesResponseOutput) AzureDefenderStatusLastUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstancePropertiesResponse) *string { return v.AzureDefenderStatusLastUpdated }).(pulumi.StringPtrOutput)
}

// SQL Server collation.
func (o SqlServerInstancePropertiesResponseOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstancePropertiesResponse) *string { return v.Collation }).(pulumi.StringPtrOutput)
}

// ARM Resource id of the container resource (Azure Arc for Servers).
func (o SqlServerInstancePropertiesResponseOutput) ContainerResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerInstancePropertiesResponse) string { return v.ContainerResourceId }).(pulumi.StringOutput)
}

// The time when the resource was created.
func (o SqlServerInstancePropertiesResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerInstancePropertiesResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// SQL Server current version.
func (o SqlServerInstancePropertiesResponseOutput) CurrentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstancePropertiesResponse) *string { return v.CurrentVersion }).(pulumi.StringPtrOutput)
}

// SQL Server edition.
func (o SqlServerInstancePropertiesResponseOutput) Edition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstancePropertiesResponse) *string { return v.Edition }).(pulumi.StringPtrOutput)
}

// SQL Server instance name.
func (o SqlServerInstancePropertiesResponseOutput) InstanceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstancePropertiesResponse) *string { return v.InstanceName }).(pulumi.StringPtrOutput)
}

// SQL Server license type.
func (o SqlServerInstancePropertiesResponseOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstancePropertiesResponse) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// SQL Server update level.
func (o SqlServerInstancePropertiesResponseOutput) PatchLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstancePropertiesResponse) *string { return v.PatchLevel }).(pulumi.StringPtrOutput)
}

// SQL Server product ID.
func (o SqlServerInstancePropertiesResponseOutput) ProductId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstancePropertiesResponse) *string { return v.ProductId }).(pulumi.StringPtrOutput)
}

func (o SqlServerInstancePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerInstancePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The cloud connectivity status.
func (o SqlServerInstancePropertiesResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerInstancePropertiesResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Dynamic TCP ports used by SQL Server.
func (o SqlServerInstancePropertiesResponseOutput) TcpDynamicPorts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstancePropertiesResponse) *string { return v.TcpDynamicPorts }).(pulumi.StringPtrOutput)
}

// Static TCP ports used by SQL Server.
func (o SqlServerInstancePropertiesResponseOutput) TcpStaticPorts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstancePropertiesResponse) *string { return v.TcpStaticPorts }).(pulumi.StringPtrOutput)
}

// The number of logical processors used by the SQL Server instance.
func (o SqlServerInstancePropertiesResponseOutput) VCore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstancePropertiesResponse) *string { return v.VCore }).(pulumi.StringPtrOutput)
}

// SQL Server version.
func (o SqlServerInstancePropertiesResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerInstancePropertiesResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// Read only system data
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC)
	CreatedAt *string `pulumi:"createdAt"`
	// An identifier for the identity that created the resource
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// An identifier for the identity that last modified the resource
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Read only system data
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC)
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// An identifier for the identity that created the resource
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// An identifier for the identity that last modified the resource
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Service principal for uploading billing, metrics and logs.
type UploadServicePrincipal struct {
	// Authority for the service principal. Example: https://login.microsoftonline.com/
	Authority *string `pulumi:"authority"`
	// Client ID of the service principal for uploading data.
	ClientId *string `pulumi:"clientId"`
	// Secret of the service principal
	ClientSecret *string `pulumi:"clientSecret"`
	// Tenant ID of the service principal.
	TenantId *string `pulumi:"tenantId"`
}

// UploadServicePrincipalInput is an input type that accepts UploadServicePrincipalArgs and UploadServicePrincipalOutput values.
// You can construct a concrete instance of `UploadServicePrincipalInput` via:
//
//	UploadServicePrincipalArgs{...}
type UploadServicePrincipalInput interface {
	pulumi.Input

	ToUploadServicePrincipalOutput() UploadServicePrincipalOutput
	ToUploadServicePrincipalOutputWithContext(context.Context) UploadServicePrincipalOutput
}

// Service principal for uploading billing, metrics and logs.
type UploadServicePrincipalArgs struct {
	// Authority for the service principal. Example: https://login.microsoftonline.com/
	Authority pulumi.StringPtrInput `pulumi:"authority"`
	// Client ID of the service principal for uploading data.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Secret of the service principal
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// Tenant ID of the service principal.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (UploadServicePrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UploadServicePrincipal)(nil)).Elem()
}

func (i UploadServicePrincipalArgs) ToUploadServicePrincipalOutput() UploadServicePrincipalOutput {
	return i.ToUploadServicePrincipalOutputWithContext(context.Background())
}

func (i UploadServicePrincipalArgs) ToUploadServicePrincipalOutputWithContext(ctx context.Context) UploadServicePrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UploadServicePrincipalOutput)
}

func (i UploadServicePrincipalArgs) ToUploadServicePrincipalPtrOutput() UploadServicePrincipalPtrOutput {
	return i.ToUploadServicePrincipalPtrOutputWithContext(context.Background())
}

func (i UploadServicePrincipalArgs) ToUploadServicePrincipalPtrOutputWithContext(ctx context.Context) UploadServicePrincipalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UploadServicePrincipalOutput).ToUploadServicePrincipalPtrOutputWithContext(ctx)
}

// UploadServicePrincipalPtrInput is an input type that accepts UploadServicePrincipalArgs, UploadServicePrincipalPtr and UploadServicePrincipalPtrOutput values.
// You can construct a concrete instance of `UploadServicePrincipalPtrInput` via:
//
//	        UploadServicePrincipalArgs{...}
//
//	or:
//
//	        nil
type UploadServicePrincipalPtrInput interface {
	pulumi.Input

	ToUploadServicePrincipalPtrOutput() UploadServicePrincipalPtrOutput
	ToUploadServicePrincipalPtrOutputWithContext(context.Context) UploadServicePrincipalPtrOutput
}

type uploadServicePrincipalPtrType UploadServicePrincipalArgs

func UploadServicePrincipalPtr(v *UploadServicePrincipalArgs) UploadServicePrincipalPtrInput {
	return (*uploadServicePrincipalPtrType)(v)
}

func (*uploadServicePrincipalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UploadServicePrincipal)(nil)).Elem()
}

func (i *uploadServicePrincipalPtrType) ToUploadServicePrincipalPtrOutput() UploadServicePrincipalPtrOutput {
	return i.ToUploadServicePrincipalPtrOutputWithContext(context.Background())
}

func (i *uploadServicePrincipalPtrType) ToUploadServicePrincipalPtrOutputWithContext(ctx context.Context) UploadServicePrincipalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UploadServicePrincipalPtrOutput)
}

// Service principal for uploading billing, metrics and logs.
type UploadServicePrincipalOutput struct{ *pulumi.OutputState }

func (UploadServicePrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UploadServicePrincipal)(nil)).Elem()
}

func (o UploadServicePrincipalOutput) ToUploadServicePrincipalOutput() UploadServicePrincipalOutput {
	return o
}

func (o UploadServicePrincipalOutput) ToUploadServicePrincipalOutputWithContext(ctx context.Context) UploadServicePrincipalOutput {
	return o
}

func (o UploadServicePrincipalOutput) ToUploadServicePrincipalPtrOutput() UploadServicePrincipalPtrOutput {
	return o.ToUploadServicePrincipalPtrOutputWithContext(context.Background())
}

func (o UploadServicePrincipalOutput) ToUploadServicePrincipalPtrOutputWithContext(ctx context.Context) UploadServicePrincipalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UploadServicePrincipal) *UploadServicePrincipal {
		return &v
	}).(UploadServicePrincipalPtrOutput)
}

// Authority for the service principal. Example: https://login.microsoftonline.com/
func (o UploadServicePrincipalOutput) Authority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UploadServicePrincipal) *string { return v.Authority }).(pulumi.StringPtrOutput)
}

// Client ID of the service principal for uploading data.
func (o UploadServicePrincipalOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UploadServicePrincipal) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Secret of the service principal
func (o UploadServicePrincipalOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UploadServicePrincipal) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Tenant ID of the service principal.
func (o UploadServicePrincipalOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UploadServicePrincipal) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type UploadServicePrincipalPtrOutput struct{ *pulumi.OutputState }

func (UploadServicePrincipalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UploadServicePrincipal)(nil)).Elem()
}

func (o UploadServicePrincipalPtrOutput) ToUploadServicePrincipalPtrOutput() UploadServicePrincipalPtrOutput {
	return o
}

func (o UploadServicePrincipalPtrOutput) ToUploadServicePrincipalPtrOutputWithContext(ctx context.Context) UploadServicePrincipalPtrOutput {
	return o
}

func (o UploadServicePrincipalPtrOutput) Elem() UploadServicePrincipalOutput {
	return o.ApplyT(func(v *UploadServicePrincipal) UploadServicePrincipal {
		if v != nil {
			return *v
		}
		var ret UploadServicePrincipal
		return ret
	}).(UploadServicePrincipalOutput)
}

// Authority for the service principal. Example: https://login.microsoftonline.com/
func (o UploadServicePrincipalPtrOutput) Authority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UploadServicePrincipal) *string {
		if v == nil {
			return nil
		}
		return v.Authority
	}).(pulumi.StringPtrOutput)
}

// Client ID of the service principal for uploading data.
func (o UploadServicePrincipalPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UploadServicePrincipal) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Secret of the service principal
func (o UploadServicePrincipalPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UploadServicePrincipal) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Tenant ID of the service principal.
func (o UploadServicePrincipalPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UploadServicePrincipal) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Service principal for uploading billing, metrics and logs.
type UploadServicePrincipalResponse struct {
	// Authority for the service principal. Example: https://login.microsoftonline.com/
	Authority *string `pulumi:"authority"`
	// Client ID of the service principal for uploading data.
	ClientId *string `pulumi:"clientId"`
	// Tenant ID of the service principal.
	TenantId *string `pulumi:"tenantId"`
}

// Service principal for uploading billing, metrics and logs.
type UploadServicePrincipalResponseOutput struct{ *pulumi.OutputState }

func (UploadServicePrincipalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UploadServicePrincipalResponse)(nil)).Elem()
}

func (o UploadServicePrincipalResponseOutput) ToUploadServicePrincipalResponseOutput() UploadServicePrincipalResponseOutput {
	return o
}

func (o UploadServicePrincipalResponseOutput) ToUploadServicePrincipalResponseOutputWithContext(ctx context.Context) UploadServicePrincipalResponseOutput {
	return o
}

// Authority for the service principal. Example: https://login.microsoftonline.com/
func (o UploadServicePrincipalResponseOutput) Authority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UploadServicePrincipalResponse) *string { return v.Authority }).(pulumi.StringPtrOutput)
}

// Client ID of the service principal for uploading data.
func (o UploadServicePrincipalResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UploadServicePrincipalResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Tenant ID of the service principal.
func (o UploadServicePrincipalResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UploadServicePrincipalResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type UploadServicePrincipalResponsePtrOutput struct{ *pulumi.OutputState }

func (UploadServicePrincipalResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UploadServicePrincipalResponse)(nil)).Elem()
}

func (o UploadServicePrincipalResponsePtrOutput) ToUploadServicePrincipalResponsePtrOutput() UploadServicePrincipalResponsePtrOutput {
	return o
}

func (o UploadServicePrincipalResponsePtrOutput) ToUploadServicePrincipalResponsePtrOutputWithContext(ctx context.Context) UploadServicePrincipalResponsePtrOutput {
	return o
}

func (o UploadServicePrincipalResponsePtrOutput) Elem() UploadServicePrincipalResponseOutput {
	return o.ApplyT(func(v *UploadServicePrincipalResponse) UploadServicePrincipalResponse {
		if v != nil {
			return *v
		}
		var ret UploadServicePrincipalResponse
		return ret
	}).(UploadServicePrincipalResponseOutput)
}

// Authority for the service principal. Example: https://login.microsoftonline.com/
func (o UploadServicePrincipalResponsePtrOutput) Authority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UploadServicePrincipalResponse) *string {
		if v == nil {
			return nil
		}
		return v.Authority
	}).(pulumi.StringPtrOutput)
}

// Client ID of the service principal for uploading data.
func (o UploadServicePrincipalResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UploadServicePrincipalResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Tenant ID of the service principal.
func (o UploadServicePrincipalResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UploadServicePrincipalResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Properties on upload watermark.  Mostly timestamp for each upload data type
type UploadWatermark struct {
	// Last uploaded date for logs from kubernetes cluster. Defaults to current date time
	Logs *string `pulumi:"logs"`
	// Last uploaded date for metrics from kubernetes cluster. Defaults to current date time
	Metrics *string `pulumi:"metrics"`
	// Last uploaded date for usages from kubernetes cluster. Defaults to current date time
	Usages *string `pulumi:"usages"`
}

// UploadWatermarkInput is an input type that accepts UploadWatermarkArgs and UploadWatermarkOutput values.
// You can construct a concrete instance of `UploadWatermarkInput` via:
//
//	UploadWatermarkArgs{...}
type UploadWatermarkInput interface {
	pulumi.Input

	ToUploadWatermarkOutput() UploadWatermarkOutput
	ToUploadWatermarkOutputWithContext(context.Context) UploadWatermarkOutput
}

// Properties on upload watermark.  Mostly timestamp for each upload data type
type UploadWatermarkArgs struct {
	// Last uploaded date for logs from kubernetes cluster. Defaults to current date time
	Logs pulumi.StringPtrInput `pulumi:"logs"`
	// Last uploaded date for metrics from kubernetes cluster. Defaults to current date time
	Metrics pulumi.StringPtrInput `pulumi:"metrics"`
	// Last uploaded date for usages from kubernetes cluster. Defaults to current date time
	Usages pulumi.StringPtrInput `pulumi:"usages"`
}

func (UploadWatermarkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UploadWatermark)(nil)).Elem()
}

func (i UploadWatermarkArgs) ToUploadWatermarkOutput() UploadWatermarkOutput {
	return i.ToUploadWatermarkOutputWithContext(context.Background())
}

func (i UploadWatermarkArgs) ToUploadWatermarkOutputWithContext(ctx context.Context) UploadWatermarkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UploadWatermarkOutput)
}

func (i UploadWatermarkArgs) ToUploadWatermarkPtrOutput() UploadWatermarkPtrOutput {
	return i.ToUploadWatermarkPtrOutputWithContext(context.Background())
}

func (i UploadWatermarkArgs) ToUploadWatermarkPtrOutputWithContext(ctx context.Context) UploadWatermarkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UploadWatermarkOutput).ToUploadWatermarkPtrOutputWithContext(ctx)
}

// UploadWatermarkPtrInput is an input type that accepts UploadWatermarkArgs, UploadWatermarkPtr and UploadWatermarkPtrOutput values.
// You can construct a concrete instance of `UploadWatermarkPtrInput` via:
//
//	        UploadWatermarkArgs{...}
//
//	or:
//
//	        nil
type UploadWatermarkPtrInput interface {
	pulumi.Input

	ToUploadWatermarkPtrOutput() UploadWatermarkPtrOutput
	ToUploadWatermarkPtrOutputWithContext(context.Context) UploadWatermarkPtrOutput
}

type uploadWatermarkPtrType UploadWatermarkArgs

func UploadWatermarkPtr(v *UploadWatermarkArgs) UploadWatermarkPtrInput {
	return (*uploadWatermarkPtrType)(v)
}

func (*uploadWatermarkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UploadWatermark)(nil)).Elem()
}

func (i *uploadWatermarkPtrType) ToUploadWatermarkPtrOutput() UploadWatermarkPtrOutput {
	return i.ToUploadWatermarkPtrOutputWithContext(context.Background())
}

func (i *uploadWatermarkPtrType) ToUploadWatermarkPtrOutputWithContext(ctx context.Context) UploadWatermarkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UploadWatermarkPtrOutput)
}

// Properties on upload watermark.  Mostly timestamp for each upload data type
type UploadWatermarkOutput struct{ *pulumi.OutputState }

func (UploadWatermarkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UploadWatermark)(nil)).Elem()
}

func (o UploadWatermarkOutput) ToUploadWatermarkOutput() UploadWatermarkOutput {
	return o
}

func (o UploadWatermarkOutput) ToUploadWatermarkOutputWithContext(ctx context.Context) UploadWatermarkOutput {
	return o
}

func (o UploadWatermarkOutput) ToUploadWatermarkPtrOutput() UploadWatermarkPtrOutput {
	return o.ToUploadWatermarkPtrOutputWithContext(context.Background())
}

func (o UploadWatermarkOutput) ToUploadWatermarkPtrOutputWithContext(ctx context.Context) UploadWatermarkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UploadWatermark) *UploadWatermark {
		return &v
	}).(UploadWatermarkPtrOutput)
}

// Last uploaded date for logs from kubernetes cluster. Defaults to current date time
func (o UploadWatermarkOutput) Logs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UploadWatermark) *string { return v.Logs }).(pulumi.StringPtrOutput)
}

// Last uploaded date for metrics from kubernetes cluster. Defaults to current date time
func (o UploadWatermarkOutput) Metrics() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UploadWatermark) *string { return v.Metrics }).(pulumi.StringPtrOutput)
}

// Last uploaded date for usages from kubernetes cluster. Defaults to current date time
func (o UploadWatermarkOutput) Usages() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UploadWatermark) *string { return v.Usages }).(pulumi.StringPtrOutput)
}

type UploadWatermarkPtrOutput struct{ *pulumi.OutputState }

func (UploadWatermarkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UploadWatermark)(nil)).Elem()
}

func (o UploadWatermarkPtrOutput) ToUploadWatermarkPtrOutput() UploadWatermarkPtrOutput {
	return o
}

func (o UploadWatermarkPtrOutput) ToUploadWatermarkPtrOutputWithContext(ctx context.Context) UploadWatermarkPtrOutput {
	return o
}

func (o UploadWatermarkPtrOutput) Elem() UploadWatermarkOutput {
	return o.ApplyT(func(v *UploadWatermark) UploadWatermark {
		if v != nil {
			return *v
		}
		var ret UploadWatermark
		return ret
	}).(UploadWatermarkOutput)
}

// Last uploaded date for logs from kubernetes cluster. Defaults to current date time
func (o UploadWatermarkPtrOutput) Logs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UploadWatermark) *string {
		if v == nil {
			return nil
		}
		return v.Logs
	}).(pulumi.StringPtrOutput)
}

// Last uploaded date for metrics from kubernetes cluster. Defaults to current date time
func (o UploadWatermarkPtrOutput) Metrics() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UploadWatermark) *string {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(pulumi.StringPtrOutput)
}

// Last uploaded date for usages from kubernetes cluster. Defaults to current date time
func (o UploadWatermarkPtrOutput) Usages() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UploadWatermark) *string {
		if v == nil {
			return nil
		}
		return v.Usages
	}).(pulumi.StringPtrOutput)
}

// Properties on upload watermark.  Mostly timestamp for each upload data type
type UploadWatermarkResponse struct {
	// Last uploaded date for logs from kubernetes cluster. Defaults to current date time
	Logs *string `pulumi:"logs"`
	// Last uploaded date for metrics from kubernetes cluster. Defaults to current date time
	Metrics *string `pulumi:"metrics"`
	// Last uploaded date for usages from kubernetes cluster. Defaults to current date time
	Usages *string `pulumi:"usages"`
}

// Properties on upload watermark.  Mostly timestamp for each upload data type
type UploadWatermarkResponseOutput struct{ *pulumi.OutputState }

func (UploadWatermarkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UploadWatermarkResponse)(nil)).Elem()
}

func (o UploadWatermarkResponseOutput) ToUploadWatermarkResponseOutput() UploadWatermarkResponseOutput {
	return o
}

func (o UploadWatermarkResponseOutput) ToUploadWatermarkResponseOutputWithContext(ctx context.Context) UploadWatermarkResponseOutput {
	return o
}

// Last uploaded date for logs from kubernetes cluster. Defaults to current date time
func (o UploadWatermarkResponseOutput) Logs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UploadWatermarkResponse) *string { return v.Logs }).(pulumi.StringPtrOutput)
}

// Last uploaded date for metrics from kubernetes cluster. Defaults to current date time
func (o UploadWatermarkResponseOutput) Metrics() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UploadWatermarkResponse) *string { return v.Metrics }).(pulumi.StringPtrOutput)
}

// Last uploaded date for usages from kubernetes cluster. Defaults to current date time
func (o UploadWatermarkResponseOutput) Usages() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UploadWatermarkResponse) *string { return v.Usages }).(pulumi.StringPtrOutput)
}

type UploadWatermarkResponsePtrOutput struct{ *pulumi.OutputState }

func (UploadWatermarkResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UploadWatermarkResponse)(nil)).Elem()
}

func (o UploadWatermarkResponsePtrOutput) ToUploadWatermarkResponsePtrOutput() UploadWatermarkResponsePtrOutput {
	return o
}

func (o UploadWatermarkResponsePtrOutput) ToUploadWatermarkResponsePtrOutputWithContext(ctx context.Context) UploadWatermarkResponsePtrOutput {
	return o
}

func (o UploadWatermarkResponsePtrOutput) Elem() UploadWatermarkResponseOutput {
	return o.ApplyT(func(v *UploadWatermarkResponse) UploadWatermarkResponse {
		if v != nil {
			return *v
		}
		var ret UploadWatermarkResponse
		return ret
	}).(UploadWatermarkResponseOutput)
}

// Last uploaded date for logs from kubernetes cluster. Defaults to current date time
func (o UploadWatermarkResponsePtrOutput) Logs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UploadWatermarkResponse) *string {
		if v == nil {
			return nil
		}
		return v.Logs
	}).(pulumi.StringPtrOutput)
}

// Last uploaded date for metrics from kubernetes cluster. Defaults to current date time
func (o UploadWatermarkResponsePtrOutput) Metrics() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UploadWatermarkResponse) *string {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(pulumi.StringPtrOutput)
}

// Last uploaded date for usages from kubernetes cluster. Defaults to current date time
func (o UploadWatermarkResponsePtrOutput) Usages() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UploadWatermarkResponse) *string {
		if v == nil {
			return nil
		}
		return v.Usages
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BasicLoginInformationOutput{})
	pulumi.RegisterOutputType(BasicLoginInformationPtrOutput{})
	pulumi.RegisterOutputType(BasicLoginInformationResponseOutput{})
	pulumi.RegisterOutputType(BasicLoginInformationResponsePtrOutput{})
	pulumi.RegisterOutputType(DataControllerPropertiesOutput{})
	pulumi.RegisterOutputType(DataControllerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ExtendedLocationOutput{})
	pulumi.RegisterOutputType(ExtendedLocationPtrOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponseOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponsePtrOutput{})
	pulumi.RegisterOutputType(K8sResourceRequirementsOutput{})
	pulumi.RegisterOutputType(K8sResourceRequirementsPtrOutput{})
	pulumi.RegisterOutputType(K8sResourceRequirementsResponseOutput{})
	pulumi.RegisterOutputType(K8sResourceRequirementsResponsePtrOutput{})
	pulumi.RegisterOutputType(K8sSchedulingOutput{})
	pulumi.RegisterOutputType(K8sSchedulingPtrOutput{})
	pulumi.RegisterOutputType(K8sSchedulingOptionsOutput{})
	pulumi.RegisterOutputType(K8sSchedulingOptionsPtrOutput{})
	pulumi.RegisterOutputType(K8sSchedulingOptionsResponseOutput{})
	pulumi.RegisterOutputType(K8sSchedulingOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(K8sSchedulingResponseOutput{})
	pulumi.RegisterOutputType(K8sSchedulingResponsePtrOutput{})
	pulumi.RegisterOutputType(LogAnalyticsWorkspaceConfigOutput{})
	pulumi.RegisterOutputType(LogAnalyticsWorkspaceConfigPtrOutput{})
	pulumi.RegisterOutputType(LogAnalyticsWorkspaceConfigResponseOutput{})
	pulumi.RegisterOutputType(LogAnalyticsWorkspaceConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(OnPremisePropertyOutput{})
	pulumi.RegisterOutputType(OnPremisePropertyPtrOutput{})
	pulumi.RegisterOutputType(OnPremisePropertyResponseOutput{})
	pulumi.RegisterOutputType(OnPremisePropertyResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlManagedInstanceK8sRawOutput{})
	pulumi.RegisterOutputType(SqlManagedInstanceK8sRawPtrOutput{})
	pulumi.RegisterOutputType(SqlManagedInstanceK8sRawResponseOutput{})
	pulumi.RegisterOutputType(SqlManagedInstanceK8sRawResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlManagedInstanceK8sSpecOutput{})
	pulumi.RegisterOutputType(SqlManagedInstanceK8sSpecPtrOutput{})
	pulumi.RegisterOutputType(SqlManagedInstanceK8sSpecResponseOutput{})
	pulumi.RegisterOutputType(SqlManagedInstanceK8sSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlManagedInstancePropertiesOutput{})
	pulumi.RegisterOutputType(SqlManagedInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(SqlManagedInstanceSkuOutput{})
	pulumi.RegisterOutputType(SqlManagedInstanceSkuPtrOutput{})
	pulumi.RegisterOutputType(SqlManagedInstanceSkuResponseOutput{})
	pulumi.RegisterOutputType(SqlManagedInstanceSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlServerInstancePropertiesOutput{})
	pulumi.RegisterOutputType(SqlServerInstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(SqlServerInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UploadServicePrincipalOutput{})
	pulumi.RegisterOutputType(UploadServicePrincipalPtrOutput{})
	pulumi.RegisterOutputType(UploadServicePrincipalResponseOutput{})
	pulumi.RegisterOutputType(UploadServicePrincipalResponsePtrOutput{})
	pulumi.RegisterOutputType(UploadWatermarkOutput{})
	pulumi.RegisterOutputType(UploadWatermarkPtrOutput{})
	pulumi.RegisterOutputType(UploadWatermarkResponseOutput{})
	pulumi.RegisterOutputType(UploadWatermarkResponsePtrOutput{})
}
