// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20210801

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A SqlManagedInstance.
type SqlManagedInstance struct {
	pulumi.CustomResourceState

	// The extendedLocation of the resource.
	ExtendedLocation ExtendedLocationResponsePtrOutput `pulumi:"extendedLocation"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// null
	Properties SqlManagedInstancePropertiesResponseOutput `pulumi:"properties"`
	// Resource sku.
	Sku SqlManagedInstanceSkuResponsePtrOutput `pulumi:"sku"`
	// Read only system data
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSqlManagedInstance registers a new resource with the given unique name, arguments, and options.
func NewSqlManagedInstance(ctx *pulumi.Context,
	name string, args *SqlManagedInstanceArgs, opts ...pulumi.ResourceOption) (*SqlManagedInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:azurearcdata/v20210801:SqlManagedInstance"),
		},
		{
			Type: pulumi.String("azure-native:azurearcdata:SqlManagedInstance"),
		},
		{
			Type: pulumi.String("azure-nextgen:azurearcdata:SqlManagedInstance"),
		},
		{
			Type: pulumi.String("azure-native:azurearcdata/v20210601preview:SqlManagedInstance"),
		},
		{
			Type: pulumi.String("azure-nextgen:azurearcdata/v20210601preview:SqlManagedInstance"),
		},
		{
			Type: pulumi.String("azure-native:azurearcdata/v20210701preview:SqlManagedInstance"),
		},
		{
			Type: pulumi.String("azure-nextgen:azurearcdata/v20210701preview:SqlManagedInstance"),
		},
	})
	opts = append(opts, aliases)
	var resource SqlManagedInstance
	err := ctx.RegisterResource("azure-native:azurearcdata/v20210801:SqlManagedInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlManagedInstance gets an existing SqlManagedInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlManagedInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlManagedInstanceState, opts ...pulumi.ResourceOption) (*SqlManagedInstance, error) {
	var resource SqlManagedInstance
	err := ctx.ReadResource("azure-native:azurearcdata/v20210801:SqlManagedInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlManagedInstance resources.
type sqlManagedInstanceState struct {
	// The extendedLocation of the resource.
	ExtendedLocation *ExtendedLocationResponse `pulumi:"extendedLocation"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// null
	Properties *SqlManagedInstancePropertiesResponse `pulumi:"properties"`
	// Resource sku.
	Sku *SqlManagedInstanceSkuResponse `pulumi:"sku"`
	// Read only system data
	SystemData *SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `pulumi:"type"`
}

type SqlManagedInstanceState struct {
	// The extendedLocation of the resource.
	ExtendedLocation ExtendedLocationResponsePtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// null
	Properties SqlManagedInstancePropertiesResponsePtrInput
	// Resource sku.
	Sku SqlManagedInstanceSkuResponsePtrInput
	// Read only system data
	SystemData SystemDataResponsePtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringPtrInput
}

func (SqlManagedInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlManagedInstanceState)(nil)).Elem()
}

type sqlManagedInstanceArgs struct {
	// The extendedLocation of the resource.
	ExtendedLocation *ExtendedLocation `pulumi:"extendedLocation"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// null
	Properties SqlManagedInstanceProperties `pulumi:"properties"`
	// The name of the Azure resource group
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource sku.
	Sku *SqlManagedInstanceSku `pulumi:"sku"`
	// The name of SQL Managed Instances
	SqlManagedInstanceName *string `pulumi:"sqlManagedInstanceName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SqlManagedInstance resource.
type SqlManagedInstanceArgs struct {
	// The extendedLocation of the resource.
	ExtendedLocation ExtendedLocationPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// null
	Properties SqlManagedInstancePropertiesInput
	// The name of the Azure resource group
	ResourceGroupName pulumi.StringInput
	// Resource sku.
	Sku SqlManagedInstanceSkuPtrInput
	// The name of SQL Managed Instances
	SqlManagedInstanceName pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (SqlManagedInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlManagedInstanceArgs)(nil)).Elem()
}

type SqlManagedInstanceInput interface {
	pulumi.Input

	ToSqlManagedInstanceOutput() SqlManagedInstanceOutput
	ToSqlManagedInstanceOutputWithContext(ctx context.Context) SqlManagedInstanceOutput
}

func (*SqlManagedInstance) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagedInstance)(nil))
}

func (i *SqlManagedInstance) ToSqlManagedInstanceOutput() SqlManagedInstanceOutput {
	return i.ToSqlManagedInstanceOutputWithContext(context.Background())
}

func (i *SqlManagedInstance) ToSqlManagedInstanceOutputWithContext(ctx context.Context) SqlManagedInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlManagedInstanceOutput)
}

type SqlManagedInstanceOutput struct {
	*pulumi.OutputState
}

func (SqlManagedInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagedInstance)(nil))
}

func (o SqlManagedInstanceOutput) ToSqlManagedInstanceOutput() SqlManagedInstanceOutput {
	return o
}

func (o SqlManagedInstanceOutput) ToSqlManagedInstanceOutputWithContext(ctx context.Context) SqlManagedInstanceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SqlManagedInstanceOutput{})
}
