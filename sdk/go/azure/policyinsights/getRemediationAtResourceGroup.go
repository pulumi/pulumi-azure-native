// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package policyinsights

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The remediation definition.
// API Version: 2019-07-01.
func LookupRemediationAtResourceGroup(ctx *pulumi.Context, args *LookupRemediationAtResourceGroupArgs, opts ...pulumi.InvokeOption) (*LookupRemediationAtResourceGroupResult, error) {
	var rv LookupRemediationAtResourceGroupResult
	err := ctx.Invoke("azure-native:policyinsights:getRemediationAtResourceGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRemediationAtResourceGroupArgs struct {
	// The name of the remediation.
	RemediationName string `pulumi:"remediationName"`
	// Resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The remediation definition.
type LookupRemediationAtResourceGroupResult struct {
	// The time at which the remediation was created.
	CreatedOn string `pulumi:"createdOn"`
	// The deployment status summary for all deployments created by the remediation.
	DeploymentStatus RemediationDeploymentSummaryResponse `pulumi:"deploymentStatus"`
	// The filters that will be applied to determine which resources to remediate.
	Filters *RemediationFiltersResponse `pulumi:"filters"`
	// The ID of the remediation.
	Id string `pulumi:"id"`
	// The time at which the remediation was last updated.
	LastUpdatedOn string `pulumi:"lastUpdatedOn"`
	// The name of the remediation.
	Name string `pulumi:"name"`
	// The resource ID of the policy assignment that should be remediated.
	PolicyAssignmentId *string `pulumi:"policyAssignmentId"`
	// The policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
	// The status of the remediation.
	ProvisioningState string `pulumi:"provisioningState"`
	// The way resources to remediate are discovered. Defaults to ExistingNonCompliant if not specified.
	ResourceDiscoveryMode *string `pulumi:"resourceDiscoveryMode"`
	// The type of the remediation.
	Type string `pulumi:"type"`
}

func LookupRemediationAtResourceGroupOutput(ctx *pulumi.Context, args LookupRemediationAtResourceGroupOutputArgs, opts ...pulumi.InvokeOption) LookupRemediationAtResourceGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRemediationAtResourceGroupResult, error) {
			args := v.(LookupRemediationAtResourceGroupArgs)
			r, err := LookupRemediationAtResourceGroup(ctx, &args, opts...)
			var s LookupRemediationAtResourceGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRemediationAtResourceGroupResultOutput)
}

type LookupRemediationAtResourceGroupOutputArgs struct {
	// The name of the remediation.
	RemediationName pulumi.StringInput `pulumi:"remediationName"`
	// Resource group name.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupRemediationAtResourceGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRemediationAtResourceGroupArgs)(nil)).Elem()
}

// The remediation definition.
type LookupRemediationAtResourceGroupResultOutput struct{ *pulumi.OutputState }

func (LookupRemediationAtResourceGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRemediationAtResourceGroupResult)(nil)).Elem()
}

func (o LookupRemediationAtResourceGroupResultOutput) ToLookupRemediationAtResourceGroupResultOutput() LookupRemediationAtResourceGroupResultOutput {
	return o
}

func (o LookupRemediationAtResourceGroupResultOutput) ToLookupRemediationAtResourceGroupResultOutputWithContext(ctx context.Context) LookupRemediationAtResourceGroupResultOutput {
	return o
}

// The time at which the remediation was created.
func (o LookupRemediationAtResourceGroupResultOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRemediationAtResourceGroupResult) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The deployment status summary for all deployments created by the remediation.
func (o LookupRemediationAtResourceGroupResultOutput) DeploymentStatus() RemediationDeploymentSummaryResponseOutput {
	return o.ApplyT(func(v LookupRemediationAtResourceGroupResult) RemediationDeploymentSummaryResponse {
		return v.DeploymentStatus
	}).(RemediationDeploymentSummaryResponseOutput)
}

// The filters that will be applied to determine which resources to remediate.
func (o LookupRemediationAtResourceGroupResultOutput) Filters() RemediationFiltersResponsePtrOutput {
	return o.ApplyT(func(v LookupRemediationAtResourceGroupResult) *RemediationFiltersResponse { return v.Filters }).(RemediationFiltersResponsePtrOutput)
}

// The ID of the remediation.
func (o LookupRemediationAtResourceGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRemediationAtResourceGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// The time at which the remediation was last updated.
func (o LookupRemediationAtResourceGroupResultOutput) LastUpdatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRemediationAtResourceGroupResult) string { return v.LastUpdatedOn }).(pulumi.StringOutput)
}

// The name of the remediation.
func (o LookupRemediationAtResourceGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRemediationAtResourceGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

// The resource ID of the policy assignment that should be remediated.
func (o LookupRemediationAtResourceGroupResultOutput) PolicyAssignmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRemediationAtResourceGroupResult) *string { return v.PolicyAssignmentId }).(pulumi.StringPtrOutput)
}

// The policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
func (o LookupRemediationAtResourceGroupResultOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRemediationAtResourceGroupResult) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

// The status of the remediation.
func (o LookupRemediationAtResourceGroupResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRemediationAtResourceGroupResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The way resources to remediate are discovered. Defaults to ExistingNonCompliant if not specified.
func (o LookupRemediationAtResourceGroupResultOutput) ResourceDiscoveryMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRemediationAtResourceGroupResult) *string { return v.ResourceDiscoveryMode }).(pulumi.StringPtrOutput)
}

// The type of the remediation.
func (o LookupRemediationAtResourceGroupResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRemediationAtResourceGroupResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRemediationAtResourceGroupResultOutput{})
}
