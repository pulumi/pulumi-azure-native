// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20210315

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// controller details
type ControllerDetailsType struct {
	// controller arm resource id
	Id *string `pulumi:"id"`
}

// ControllerDetailsTypeInput is an input type that accepts ControllerDetailsTypeArgs and ControllerDetailsTypeOutput values.
// You can construct a concrete instance of `ControllerDetailsTypeInput` via:
//
//          ControllerDetailsTypeArgs{...}
type ControllerDetailsTypeInput interface {
	pulumi.Input

	ToControllerDetailsTypeOutput() ControllerDetailsTypeOutput
	ToControllerDetailsTypeOutputWithContext(context.Context) ControllerDetailsTypeOutput
}

// controller details
type ControllerDetailsTypeArgs struct {
	// controller arm resource id
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (ControllerDetailsTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerDetailsType)(nil)).Elem()
}

func (i ControllerDetailsTypeArgs) ToControllerDetailsTypeOutput() ControllerDetailsTypeOutput {
	return i.ToControllerDetailsTypeOutputWithContext(context.Background())
}

func (i ControllerDetailsTypeArgs) ToControllerDetailsTypeOutputWithContext(ctx context.Context) ControllerDetailsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerDetailsTypeOutput)
}

func (i ControllerDetailsTypeArgs) ToControllerDetailsTypePtrOutput() ControllerDetailsTypePtrOutput {
	return i.ToControllerDetailsTypePtrOutputWithContext(context.Background())
}

func (i ControllerDetailsTypeArgs) ToControllerDetailsTypePtrOutputWithContext(ctx context.Context) ControllerDetailsTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerDetailsTypeOutput).ToControllerDetailsTypePtrOutputWithContext(ctx)
}

// ControllerDetailsTypePtrInput is an input type that accepts ControllerDetailsTypeArgs, ControllerDetailsTypePtr and ControllerDetailsTypePtrOutput values.
// You can construct a concrete instance of `ControllerDetailsTypePtrInput` via:
//
//          ControllerDetailsTypeArgs{...}
//
//  or:
//
//          nil
type ControllerDetailsTypePtrInput interface {
	pulumi.Input

	ToControllerDetailsTypePtrOutput() ControllerDetailsTypePtrOutput
	ToControllerDetailsTypePtrOutputWithContext(context.Context) ControllerDetailsTypePtrOutput
}

type controllerDetailsTypePtrType ControllerDetailsTypeArgs

func ControllerDetailsTypePtr(v *ControllerDetailsTypeArgs) ControllerDetailsTypePtrInput {
	return (*controllerDetailsTypePtrType)(v)
}

func (*controllerDetailsTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerDetailsType)(nil)).Elem()
}

func (i *controllerDetailsTypePtrType) ToControllerDetailsTypePtrOutput() ControllerDetailsTypePtrOutput {
	return i.ToControllerDetailsTypePtrOutputWithContext(context.Background())
}

func (i *controllerDetailsTypePtrType) ToControllerDetailsTypePtrOutputWithContext(ctx context.Context) ControllerDetailsTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerDetailsTypePtrOutput)
}

// controller details
type ControllerDetailsTypeOutput struct{ *pulumi.OutputState }

func (ControllerDetailsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerDetailsType)(nil)).Elem()
}

func (o ControllerDetailsTypeOutput) ToControllerDetailsTypeOutput() ControllerDetailsTypeOutput {
	return o
}

func (o ControllerDetailsTypeOutput) ToControllerDetailsTypeOutputWithContext(ctx context.Context) ControllerDetailsTypeOutput {
	return o
}

func (o ControllerDetailsTypeOutput) ToControllerDetailsTypePtrOutput() ControllerDetailsTypePtrOutput {
	return o.ToControllerDetailsTypePtrOutputWithContext(context.Background())
}

func (o ControllerDetailsTypeOutput) ToControllerDetailsTypePtrOutputWithContext(ctx context.Context) ControllerDetailsTypePtrOutput {
	return o.ApplyT(func(v ControllerDetailsType) *ControllerDetailsType {
		return &v
	}).(ControllerDetailsTypePtrOutput)
}

// controller arm resource id
func (o ControllerDetailsTypeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerDetailsType) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ControllerDetailsTypePtrOutput struct{ *pulumi.OutputState }

func (ControllerDetailsTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerDetailsType)(nil)).Elem()
}

func (o ControllerDetailsTypePtrOutput) ToControllerDetailsTypePtrOutput() ControllerDetailsTypePtrOutput {
	return o
}

func (o ControllerDetailsTypePtrOutput) ToControllerDetailsTypePtrOutputWithContext(ctx context.Context) ControllerDetailsTypePtrOutput {
	return o
}

func (o ControllerDetailsTypePtrOutput) Elem() ControllerDetailsTypeOutput {
	return o.ApplyT(func(v *ControllerDetailsType) ControllerDetailsType { return *v }).(ControllerDetailsTypeOutput)
}

// controller arm resource id
func (o ControllerDetailsTypePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerDetailsType) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// controller details
type ControllerDetailsResponse struct {
	// controller arm resource id
	Id *string `pulumi:"id"`
}

// ControllerDetailsResponseInput is an input type that accepts ControllerDetailsResponseArgs and ControllerDetailsResponseOutput values.
// You can construct a concrete instance of `ControllerDetailsResponseInput` via:
//
//          ControllerDetailsResponseArgs{...}
type ControllerDetailsResponseInput interface {
	pulumi.Input

	ToControllerDetailsResponseOutput() ControllerDetailsResponseOutput
	ToControllerDetailsResponseOutputWithContext(context.Context) ControllerDetailsResponseOutput
}

// controller details
type ControllerDetailsResponseArgs struct {
	// controller arm resource id
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (ControllerDetailsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerDetailsResponse)(nil)).Elem()
}

func (i ControllerDetailsResponseArgs) ToControllerDetailsResponseOutput() ControllerDetailsResponseOutput {
	return i.ToControllerDetailsResponseOutputWithContext(context.Background())
}

func (i ControllerDetailsResponseArgs) ToControllerDetailsResponseOutputWithContext(ctx context.Context) ControllerDetailsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerDetailsResponseOutput)
}

func (i ControllerDetailsResponseArgs) ToControllerDetailsResponsePtrOutput() ControllerDetailsResponsePtrOutput {
	return i.ToControllerDetailsResponsePtrOutputWithContext(context.Background())
}

func (i ControllerDetailsResponseArgs) ToControllerDetailsResponsePtrOutputWithContext(ctx context.Context) ControllerDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerDetailsResponseOutput).ToControllerDetailsResponsePtrOutputWithContext(ctx)
}

// ControllerDetailsResponsePtrInput is an input type that accepts ControllerDetailsResponseArgs, ControllerDetailsResponsePtr and ControllerDetailsResponsePtrOutput values.
// You can construct a concrete instance of `ControllerDetailsResponsePtrInput` via:
//
//          ControllerDetailsResponseArgs{...}
//
//  or:
//
//          nil
type ControllerDetailsResponsePtrInput interface {
	pulumi.Input

	ToControllerDetailsResponsePtrOutput() ControllerDetailsResponsePtrOutput
	ToControllerDetailsResponsePtrOutputWithContext(context.Context) ControllerDetailsResponsePtrOutput
}

type controllerDetailsResponsePtrType ControllerDetailsResponseArgs

func ControllerDetailsResponsePtr(v *ControllerDetailsResponseArgs) ControllerDetailsResponsePtrInput {
	return (*controllerDetailsResponsePtrType)(v)
}

func (*controllerDetailsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerDetailsResponse)(nil)).Elem()
}

func (i *controllerDetailsResponsePtrType) ToControllerDetailsResponsePtrOutput() ControllerDetailsResponsePtrOutput {
	return i.ToControllerDetailsResponsePtrOutputWithContext(context.Background())
}

func (i *controllerDetailsResponsePtrType) ToControllerDetailsResponsePtrOutputWithContext(ctx context.Context) ControllerDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerDetailsResponsePtrOutput)
}

// controller details
type ControllerDetailsResponseOutput struct{ *pulumi.OutputState }

func (ControllerDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerDetailsResponse)(nil)).Elem()
}

func (o ControllerDetailsResponseOutput) ToControllerDetailsResponseOutput() ControllerDetailsResponseOutput {
	return o
}

func (o ControllerDetailsResponseOutput) ToControllerDetailsResponseOutputWithContext(ctx context.Context) ControllerDetailsResponseOutput {
	return o
}

func (o ControllerDetailsResponseOutput) ToControllerDetailsResponsePtrOutput() ControllerDetailsResponsePtrOutput {
	return o.ToControllerDetailsResponsePtrOutputWithContext(context.Background())
}

func (o ControllerDetailsResponseOutput) ToControllerDetailsResponsePtrOutputWithContext(ctx context.Context) ControllerDetailsResponsePtrOutput {
	return o.ApplyT(func(v ControllerDetailsResponse) *ControllerDetailsResponse {
		return &v
	}).(ControllerDetailsResponsePtrOutput)
}

// controller arm resource id
func (o ControllerDetailsResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerDetailsResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ControllerDetailsResponsePtrOutput struct{ *pulumi.OutputState }

func (ControllerDetailsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerDetailsResponse)(nil)).Elem()
}

func (o ControllerDetailsResponsePtrOutput) ToControllerDetailsResponsePtrOutput() ControllerDetailsResponsePtrOutput {
	return o
}

func (o ControllerDetailsResponsePtrOutput) ToControllerDetailsResponsePtrOutputWithContext(ctx context.Context) ControllerDetailsResponsePtrOutput {
	return o
}

func (o ControllerDetailsResponsePtrOutput) Elem() ControllerDetailsResponseOutput {
	return o.ApplyT(func(v *ControllerDetailsResponse) ControllerDetailsResponse { return *v }).(ControllerDetailsResponseOutput)
}

// controller arm resource id
func (o ControllerDetailsResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Properties of Delegated controller resource.
type DelegatedControllerPropertiesResponse struct {
	// dnc application id should be used by customer to authenticate with dnc gateway.
	DncAppId string `pulumi:"dncAppId"`
	// dnc endpoint url that customers can use to connect to
	DncEndpoint string `pulumi:"dncEndpoint"`
	// tenant id of dnc application id
	DncTenantId string `pulumi:"dncTenantId"`
	// The current state of dnc controller resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Resource guid.
	ResourceGuid string `pulumi:"resourceGuid"`
}

// DelegatedControllerPropertiesResponseInput is an input type that accepts DelegatedControllerPropertiesResponseArgs and DelegatedControllerPropertiesResponseOutput values.
// You can construct a concrete instance of `DelegatedControllerPropertiesResponseInput` via:
//
//          DelegatedControllerPropertiesResponseArgs{...}
type DelegatedControllerPropertiesResponseInput interface {
	pulumi.Input

	ToDelegatedControllerPropertiesResponseOutput() DelegatedControllerPropertiesResponseOutput
	ToDelegatedControllerPropertiesResponseOutputWithContext(context.Context) DelegatedControllerPropertiesResponseOutput
}

// Properties of Delegated controller resource.
type DelegatedControllerPropertiesResponseArgs struct {
	// dnc application id should be used by customer to authenticate with dnc gateway.
	DncAppId pulumi.StringInput `pulumi:"dncAppId"`
	// dnc endpoint url that customers can use to connect to
	DncEndpoint pulumi.StringInput `pulumi:"dncEndpoint"`
	// tenant id of dnc application id
	DncTenantId pulumi.StringInput `pulumi:"dncTenantId"`
	// The current state of dnc controller resource.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Resource guid.
	ResourceGuid pulumi.StringInput `pulumi:"resourceGuid"`
}

func (DelegatedControllerPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DelegatedControllerPropertiesResponse)(nil)).Elem()
}

func (i DelegatedControllerPropertiesResponseArgs) ToDelegatedControllerPropertiesResponseOutput() DelegatedControllerPropertiesResponseOutput {
	return i.ToDelegatedControllerPropertiesResponseOutputWithContext(context.Background())
}

func (i DelegatedControllerPropertiesResponseArgs) ToDelegatedControllerPropertiesResponseOutputWithContext(ctx context.Context) DelegatedControllerPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelegatedControllerPropertiesResponseOutput)
}

func (i DelegatedControllerPropertiesResponseArgs) ToDelegatedControllerPropertiesResponsePtrOutput() DelegatedControllerPropertiesResponsePtrOutput {
	return i.ToDelegatedControllerPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i DelegatedControllerPropertiesResponseArgs) ToDelegatedControllerPropertiesResponsePtrOutputWithContext(ctx context.Context) DelegatedControllerPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelegatedControllerPropertiesResponseOutput).ToDelegatedControllerPropertiesResponsePtrOutputWithContext(ctx)
}

// DelegatedControllerPropertiesResponsePtrInput is an input type that accepts DelegatedControllerPropertiesResponseArgs, DelegatedControllerPropertiesResponsePtr and DelegatedControllerPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `DelegatedControllerPropertiesResponsePtrInput` via:
//
//          DelegatedControllerPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type DelegatedControllerPropertiesResponsePtrInput interface {
	pulumi.Input

	ToDelegatedControllerPropertiesResponsePtrOutput() DelegatedControllerPropertiesResponsePtrOutput
	ToDelegatedControllerPropertiesResponsePtrOutputWithContext(context.Context) DelegatedControllerPropertiesResponsePtrOutput
}

type delegatedControllerPropertiesResponsePtrType DelegatedControllerPropertiesResponseArgs

func DelegatedControllerPropertiesResponsePtr(v *DelegatedControllerPropertiesResponseArgs) DelegatedControllerPropertiesResponsePtrInput {
	return (*delegatedControllerPropertiesResponsePtrType)(v)
}

func (*delegatedControllerPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DelegatedControllerPropertiesResponse)(nil)).Elem()
}

func (i *delegatedControllerPropertiesResponsePtrType) ToDelegatedControllerPropertiesResponsePtrOutput() DelegatedControllerPropertiesResponsePtrOutput {
	return i.ToDelegatedControllerPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *delegatedControllerPropertiesResponsePtrType) ToDelegatedControllerPropertiesResponsePtrOutputWithContext(ctx context.Context) DelegatedControllerPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelegatedControllerPropertiesResponsePtrOutput)
}

// Properties of Delegated controller resource.
type DelegatedControllerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (DelegatedControllerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelegatedControllerPropertiesResponse)(nil)).Elem()
}

func (o DelegatedControllerPropertiesResponseOutput) ToDelegatedControllerPropertiesResponseOutput() DelegatedControllerPropertiesResponseOutput {
	return o
}

func (o DelegatedControllerPropertiesResponseOutput) ToDelegatedControllerPropertiesResponseOutputWithContext(ctx context.Context) DelegatedControllerPropertiesResponseOutput {
	return o
}

func (o DelegatedControllerPropertiesResponseOutput) ToDelegatedControllerPropertiesResponsePtrOutput() DelegatedControllerPropertiesResponsePtrOutput {
	return o.ToDelegatedControllerPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o DelegatedControllerPropertiesResponseOutput) ToDelegatedControllerPropertiesResponsePtrOutputWithContext(ctx context.Context) DelegatedControllerPropertiesResponsePtrOutput {
	return o.ApplyT(func(v DelegatedControllerPropertiesResponse) *DelegatedControllerPropertiesResponse {
		return &v
	}).(DelegatedControllerPropertiesResponsePtrOutput)
}

// dnc application id should be used by customer to authenticate with dnc gateway.
func (o DelegatedControllerPropertiesResponseOutput) DncAppId() pulumi.StringOutput {
	return o.ApplyT(func(v DelegatedControllerPropertiesResponse) string { return v.DncAppId }).(pulumi.StringOutput)
}

// dnc endpoint url that customers can use to connect to
func (o DelegatedControllerPropertiesResponseOutput) DncEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DelegatedControllerPropertiesResponse) string { return v.DncEndpoint }).(pulumi.StringOutput)
}

// tenant id of dnc application id
func (o DelegatedControllerPropertiesResponseOutput) DncTenantId() pulumi.StringOutput {
	return o.ApplyT(func(v DelegatedControllerPropertiesResponse) string { return v.DncTenantId }).(pulumi.StringOutput)
}

// The current state of dnc controller resource.
func (o DelegatedControllerPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v DelegatedControllerPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Resource guid.
func (o DelegatedControllerPropertiesResponseOutput) ResourceGuid() pulumi.StringOutput {
	return o.ApplyT(func(v DelegatedControllerPropertiesResponse) string { return v.ResourceGuid }).(pulumi.StringOutput)
}

type DelegatedControllerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DelegatedControllerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DelegatedControllerPropertiesResponse)(nil)).Elem()
}

func (o DelegatedControllerPropertiesResponsePtrOutput) ToDelegatedControllerPropertiesResponsePtrOutput() DelegatedControllerPropertiesResponsePtrOutput {
	return o
}

func (o DelegatedControllerPropertiesResponsePtrOutput) ToDelegatedControllerPropertiesResponsePtrOutputWithContext(ctx context.Context) DelegatedControllerPropertiesResponsePtrOutput {
	return o
}

func (o DelegatedControllerPropertiesResponsePtrOutput) Elem() DelegatedControllerPropertiesResponseOutput {
	return o.ApplyT(func(v *DelegatedControllerPropertiesResponse) DelegatedControllerPropertiesResponse { return *v }).(DelegatedControllerPropertiesResponseOutput)
}

// dnc application id should be used by customer to authenticate with dnc gateway.
func (o DelegatedControllerPropertiesResponsePtrOutput) DncAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DelegatedControllerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DncAppId
	}).(pulumi.StringPtrOutput)
}

// dnc endpoint url that customers can use to connect to
func (o DelegatedControllerPropertiesResponsePtrOutput) DncEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DelegatedControllerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DncEndpoint
	}).(pulumi.StringPtrOutput)
}

// tenant id of dnc application id
func (o DelegatedControllerPropertiesResponsePtrOutput) DncTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DelegatedControllerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DncTenantId
	}).(pulumi.StringPtrOutput)
}

// The current state of dnc controller resource.
func (o DelegatedControllerPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DelegatedControllerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Resource guid.
func (o DelegatedControllerPropertiesResponsePtrOutput) ResourceGuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DelegatedControllerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceGuid
	}).(pulumi.StringPtrOutput)
}

// Properties of delegated subnet
type DelegatedSubnetProperties struct {
	// Properties of the controller.
	ControllerDetails *ControllerDetailsType `pulumi:"controllerDetails"`
	// subnet details
	SubnetDetails *SubnetDetails `pulumi:"subnetDetails"`
}

// DelegatedSubnetPropertiesInput is an input type that accepts DelegatedSubnetPropertiesArgs and DelegatedSubnetPropertiesOutput values.
// You can construct a concrete instance of `DelegatedSubnetPropertiesInput` via:
//
//          DelegatedSubnetPropertiesArgs{...}
type DelegatedSubnetPropertiesInput interface {
	pulumi.Input

	ToDelegatedSubnetPropertiesOutput() DelegatedSubnetPropertiesOutput
	ToDelegatedSubnetPropertiesOutputWithContext(context.Context) DelegatedSubnetPropertiesOutput
}

// Properties of delegated subnet
type DelegatedSubnetPropertiesArgs struct {
	// Properties of the controller.
	ControllerDetails ControllerDetailsTypePtrInput `pulumi:"controllerDetails"`
	// subnet details
	SubnetDetails SubnetDetailsPtrInput `pulumi:"subnetDetails"`
}

func (DelegatedSubnetPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DelegatedSubnetProperties)(nil)).Elem()
}

func (i DelegatedSubnetPropertiesArgs) ToDelegatedSubnetPropertiesOutput() DelegatedSubnetPropertiesOutput {
	return i.ToDelegatedSubnetPropertiesOutputWithContext(context.Background())
}

func (i DelegatedSubnetPropertiesArgs) ToDelegatedSubnetPropertiesOutputWithContext(ctx context.Context) DelegatedSubnetPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelegatedSubnetPropertiesOutput)
}

func (i DelegatedSubnetPropertiesArgs) ToDelegatedSubnetPropertiesPtrOutput() DelegatedSubnetPropertiesPtrOutput {
	return i.ToDelegatedSubnetPropertiesPtrOutputWithContext(context.Background())
}

func (i DelegatedSubnetPropertiesArgs) ToDelegatedSubnetPropertiesPtrOutputWithContext(ctx context.Context) DelegatedSubnetPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelegatedSubnetPropertiesOutput).ToDelegatedSubnetPropertiesPtrOutputWithContext(ctx)
}

// DelegatedSubnetPropertiesPtrInput is an input type that accepts DelegatedSubnetPropertiesArgs, DelegatedSubnetPropertiesPtr and DelegatedSubnetPropertiesPtrOutput values.
// You can construct a concrete instance of `DelegatedSubnetPropertiesPtrInput` via:
//
//          DelegatedSubnetPropertiesArgs{...}
//
//  or:
//
//          nil
type DelegatedSubnetPropertiesPtrInput interface {
	pulumi.Input

	ToDelegatedSubnetPropertiesPtrOutput() DelegatedSubnetPropertiesPtrOutput
	ToDelegatedSubnetPropertiesPtrOutputWithContext(context.Context) DelegatedSubnetPropertiesPtrOutput
}

type delegatedSubnetPropertiesPtrType DelegatedSubnetPropertiesArgs

func DelegatedSubnetPropertiesPtr(v *DelegatedSubnetPropertiesArgs) DelegatedSubnetPropertiesPtrInput {
	return (*delegatedSubnetPropertiesPtrType)(v)
}

func (*delegatedSubnetPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DelegatedSubnetProperties)(nil)).Elem()
}

func (i *delegatedSubnetPropertiesPtrType) ToDelegatedSubnetPropertiesPtrOutput() DelegatedSubnetPropertiesPtrOutput {
	return i.ToDelegatedSubnetPropertiesPtrOutputWithContext(context.Background())
}

func (i *delegatedSubnetPropertiesPtrType) ToDelegatedSubnetPropertiesPtrOutputWithContext(ctx context.Context) DelegatedSubnetPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelegatedSubnetPropertiesPtrOutput)
}

// Properties of delegated subnet
type DelegatedSubnetPropertiesOutput struct{ *pulumi.OutputState }

func (DelegatedSubnetPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelegatedSubnetProperties)(nil)).Elem()
}

func (o DelegatedSubnetPropertiesOutput) ToDelegatedSubnetPropertiesOutput() DelegatedSubnetPropertiesOutput {
	return o
}

func (o DelegatedSubnetPropertiesOutput) ToDelegatedSubnetPropertiesOutputWithContext(ctx context.Context) DelegatedSubnetPropertiesOutput {
	return o
}

func (o DelegatedSubnetPropertiesOutput) ToDelegatedSubnetPropertiesPtrOutput() DelegatedSubnetPropertiesPtrOutput {
	return o.ToDelegatedSubnetPropertiesPtrOutputWithContext(context.Background())
}

func (o DelegatedSubnetPropertiesOutput) ToDelegatedSubnetPropertiesPtrOutputWithContext(ctx context.Context) DelegatedSubnetPropertiesPtrOutput {
	return o.ApplyT(func(v DelegatedSubnetProperties) *DelegatedSubnetProperties {
		return &v
	}).(DelegatedSubnetPropertiesPtrOutput)
}

// Properties of the controller.
func (o DelegatedSubnetPropertiesOutput) ControllerDetails() ControllerDetailsTypePtrOutput {
	return o.ApplyT(func(v DelegatedSubnetProperties) *ControllerDetailsType { return v.ControllerDetails }).(ControllerDetailsTypePtrOutput)
}

// subnet details
func (o DelegatedSubnetPropertiesOutput) SubnetDetails() SubnetDetailsPtrOutput {
	return o.ApplyT(func(v DelegatedSubnetProperties) *SubnetDetails { return v.SubnetDetails }).(SubnetDetailsPtrOutput)
}

type DelegatedSubnetPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DelegatedSubnetPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DelegatedSubnetProperties)(nil)).Elem()
}

func (o DelegatedSubnetPropertiesPtrOutput) ToDelegatedSubnetPropertiesPtrOutput() DelegatedSubnetPropertiesPtrOutput {
	return o
}

func (o DelegatedSubnetPropertiesPtrOutput) ToDelegatedSubnetPropertiesPtrOutputWithContext(ctx context.Context) DelegatedSubnetPropertiesPtrOutput {
	return o
}

func (o DelegatedSubnetPropertiesPtrOutput) Elem() DelegatedSubnetPropertiesOutput {
	return o.ApplyT(func(v *DelegatedSubnetProperties) DelegatedSubnetProperties { return *v }).(DelegatedSubnetPropertiesOutput)
}

// Properties of the controller.
func (o DelegatedSubnetPropertiesPtrOutput) ControllerDetails() ControllerDetailsTypePtrOutput {
	return o.ApplyT(func(v *DelegatedSubnetProperties) *ControllerDetailsType {
		if v == nil {
			return nil
		}
		return v.ControllerDetails
	}).(ControllerDetailsTypePtrOutput)
}

// subnet details
func (o DelegatedSubnetPropertiesPtrOutput) SubnetDetails() SubnetDetailsPtrOutput {
	return o.ApplyT(func(v *DelegatedSubnetProperties) *SubnetDetails {
		if v == nil {
			return nil
		}
		return v.SubnetDetails
	}).(SubnetDetailsPtrOutput)
}

// Properties of delegated subnet
type DelegatedSubnetPropertiesResponse struct {
	// Properties of the controller.
	ControllerDetails *ControllerDetailsResponse `pulumi:"controllerDetails"`
	// The current state of dnc delegated subnet resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Resource guid.
	ResourceGuid string `pulumi:"resourceGuid"`
	// subnet details
	SubnetDetails *SubnetDetailsResponse `pulumi:"subnetDetails"`
}

// DelegatedSubnetPropertiesResponseInput is an input type that accepts DelegatedSubnetPropertiesResponseArgs and DelegatedSubnetPropertiesResponseOutput values.
// You can construct a concrete instance of `DelegatedSubnetPropertiesResponseInput` via:
//
//          DelegatedSubnetPropertiesResponseArgs{...}
type DelegatedSubnetPropertiesResponseInput interface {
	pulumi.Input

	ToDelegatedSubnetPropertiesResponseOutput() DelegatedSubnetPropertiesResponseOutput
	ToDelegatedSubnetPropertiesResponseOutputWithContext(context.Context) DelegatedSubnetPropertiesResponseOutput
}

// Properties of delegated subnet
type DelegatedSubnetPropertiesResponseArgs struct {
	// Properties of the controller.
	ControllerDetails ControllerDetailsResponsePtrInput `pulumi:"controllerDetails"`
	// The current state of dnc delegated subnet resource.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Resource guid.
	ResourceGuid pulumi.StringInput `pulumi:"resourceGuid"`
	// subnet details
	SubnetDetails SubnetDetailsResponsePtrInput `pulumi:"subnetDetails"`
}

func (DelegatedSubnetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DelegatedSubnetPropertiesResponse)(nil)).Elem()
}

func (i DelegatedSubnetPropertiesResponseArgs) ToDelegatedSubnetPropertiesResponseOutput() DelegatedSubnetPropertiesResponseOutput {
	return i.ToDelegatedSubnetPropertiesResponseOutputWithContext(context.Background())
}

func (i DelegatedSubnetPropertiesResponseArgs) ToDelegatedSubnetPropertiesResponseOutputWithContext(ctx context.Context) DelegatedSubnetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelegatedSubnetPropertiesResponseOutput)
}

func (i DelegatedSubnetPropertiesResponseArgs) ToDelegatedSubnetPropertiesResponsePtrOutput() DelegatedSubnetPropertiesResponsePtrOutput {
	return i.ToDelegatedSubnetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i DelegatedSubnetPropertiesResponseArgs) ToDelegatedSubnetPropertiesResponsePtrOutputWithContext(ctx context.Context) DelegatedSubnetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelegatedSubnetPropertiesResponseOutput).ToDelegatedSubnetPropertiesResponsePtrOutputWithContext(ctx)
}

// DelegatedSubnetPropertiesResponsePtrInput is an input type that accepts DelegatedSubnetPropertiesResponseArgs, DelegatedSubnetPropertiesResponsePtr and DelegatedSubnetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `DelegatedSubnetPropertiesResponsePtrInput` via:
//
//          DelegatedSubnetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type DelegatedSubnetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToDelegatedSubnetPropertiesResponsePtrOutput() DelegatedSubnetPropertiesResponsePtrOutput
	ToDelegatedSubnetPropertiesResponsePtrOutputWithContext(context.Context) DelegatedSubnetPropertiesResponsePtrOutput
}

type delegatedSubnetPropertiesResponsePtrType DelegatedSubnetPropertiesResponseArgs

func DelegatedSubnetPropertiesResponsePtr(v *DelegatedSubnetPropertiesResponseArgs) DelegatedSubnetPropertiesResponsePtrInput {
	return (*delegatedSubnetPropertiesResponsePtrType)(v)
}

func (*delegatedSubnetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DelegatedSubnetPropertiesResponse)(nil)).Elem()
}

func (i *delegatedSubnetPropertiesResponsePtrType) ToDelegatedSubnetPropertiesResponsePtrOutput() DelegatedSubnetPropertiesResponsePtrOutput {
	return i.ToDelegatedSubnetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *delegatedSubnetPropertiesResponsePtrType) ToDelegatedSubnetPropertiesResponsePtrOutputWithContext(ctx context.Context) DelegatedSubnetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelegatedSubnetPropertiesResponsePtrOutput)
}

// Properties of delegated subnet
type DelegatedSubnetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (DelegatedSubnetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelegatedSubnetPropertiesResponse)(nil)).Elem()
}

func (o DelegatedSubnetPropertiesResponseOutput) ToDelegatedSubnetPropertiesResponseOutput() DelegatedSubnetPropertiesResponseOutput {
	return o
}

func (o DelegatedSubnetPropertiesResponseOutput) ToDelegatedSubnetPropertiesResponseOutputWithContext(ctx context.Context) DelegatedSubnetPropertiesResponseOutput {
	return o
}

func (o DelegatedSubnetPropertiesResponseOutput) ToDelegatedSubnetPropertiesResponsePtrOutput() DelegatedSubnetPropertiesResponsePtrOutput {
	return o.ToDelegatedSubnetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o DelegatedSubnetPropertiesResponseOutput) ToDelegatedSubnetPropertiesResponsePtrOutputWithContext(ctx context.Context) DelegatedSubnetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v DelegatedSubnetPropertiesResponse) *DelegatedSubnetPropertiesResponse {
		return &v
	}).(DelegatedSubnetPropertiesResponsePtrOutput)
}

// Properties of the controller.
func (o DelegatedSubnetPropertiesResponseOutput) ControllerDetails() ControllerDetailsResponsePtrOutput {
	return o.ApplyT(func(v DelegatedSubnetPropertiesResponse) *ControllerDetailsResponse { return v.ControllerDetails }).(ControllerDetailsResponsePtrOutput)
}

// The current state of dnc delegated subnet resource.
func (o DelegatedSubnetPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v DelegatedSubnetPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Resource guid.
func (o DelegatedSubnetPropertiesResponseOutput) ResourceGuid() pulumi.StringOutput {
	return o.ApplyT(func(v DelegatedSubnetPropertiesResponse) string { return v.ResourceGuid }).(pulumi.StringOutput)
}

// subnet details
func (o DelegatedSubnetPropertiesResponseOutput) SubnetDetails() SubnetDetailsResponsePtrOutput {
	return o.ApplyT(func(v DelegatedSubnetPropertiesResponse) *SubnetDetailsResponse { return v.SubnetDetails }).(SubnetDetailsResponsePtrOutput)
}

type DelegatedSubnetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DelegatedSubnetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DelegatedSubnetPropertiesResponse)(nil)).Elem()
}

func (o DelegatedSubnetPropertiesResponsePtrOutput) ToDelegatedSubnetPropertiesResponsePtrOutput() DelegatedSubnetPropertiesResponsePtrOutput {
	return o
}

func (o DelegatedSubnetPropertiesResponsePtrOutput) ToDelegatedSubnetPropertiesResponsePtrOutputWithContext(ctx context.Context) DelegatedSubnetPropertiesResponsePtrOutput {
	return o
}

func (o DelegatedSubnetPropertiesResponsePtrOutput) Elem() DelegatedSubnetPropertiesResponseOutput {
	return o.ApplyT(func(v *DelegatedSubnetPropertiesResponse) DelegatedSubnetPropertiesResponse { return *v }).(DelegatedSubnetPropertiesResponseOutput)
}

// Properties of the controller.
func (o DelegatedSubnetPropertiesResponsePtrOutput) ControllerDetails() ControllerDetailsResponsePtrOutput {
	return o.ApplyT(func(v *DelegatedSubnetPropertiesResponse) *ControllerDetailsResponse {
		if v == nil {
			return nil
		}
		return v.ControllerDetails
	}).(ControllerDetailsResponsePtrOutput)
}

// The current state of dnc delegated subnet resource.
func (o DelegatedSubnetPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DelegatedSubnetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Resource guid.
func (o DelegatedSubnetPropertiesResponsePtrOutput) ResourceGuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DelegatedSubnetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceGuid
	}).(pulumi.StringPtrOutput)
}

// subnet details
func (o DelegatedSubnetPropertiesResponsePtrOutput) SubnetDetails() SubnetDetailsResponsePtrOutput {
	return o.ApplyT(func(v *DelegatedSubnetPropertiesResponse) *SubnetDetailsResponse {
		if v == nil {
			return nil
		}
		return v.SubnetDetails
	}).(SubnetDetailsResponsePtrOutput)
}

type OrchestratorIdentity struct {
	// The type of identity used for orchestrator cluster. Type 'SystemAssigned' will use an implicitly created identity orchestrator clusters
	Type *string `pulumi:"type"`
}

// OrchestratorIdentityInput is an input type that accepts OrchestratorIdentityArgs and OrchestratorIdentityOutput values.
// You can construct a concrete instance of `OrchestratorIdentityInput` via:
//
//          OrchestratorIdentityArgs{...}
type OrchestratorIdentityInput interface {
	pulumi.Input

	ToOrchestratorIdentityOutput() OrchestratorIdentityOutput
	ToOrchestratorIdentityOutputWithContext(context.Context) OrchestratorIdentityOutput
}

type OrchestratorIdentityArgs struct {
	// The type of identity used for orchestrator cluster. Type 'SystemAssigned' will use an implicitly created identity orchestrator clusters
	Type *ResourceIdentityType `pulumi:"type"`
}

func (OrchestratorIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorIdentity)(nil)).Elem()
}

func (i OrchestratorIdentityArgs) ToOrchestratorIdentityOutput() OrchestratorIdentityOutput {
	return i.ToOrchestratorIdentityOutputWithContext(context.Background())
}

func (i OrchestratorIdentityArgs) ToOrchestratorIdentityOutputWithContext(ctx context.Context) OrchestratorIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorIdentityOutput)
}

func (i OrchestratorIdentityArgs) ToOrchestratorIdentityPtrOutput() OrchestratorIdentityPtrOutput {
	return i.ToOrchestratorIdentityPtrOutputWithContext(context.Background())
}

func (i OrchestratorIdentityArgs) ToOrchestratorIdentityPtrOutputWithContext(ctx context.Context) OrchestratorIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorIdentityOutput).ToOrchestratorIdentityPtrOutputWithContext(ctx)
}

// OrchestratorIdentityPtrInput is an input type that accepts OrchestratorIdentityArgs, OrchestratorIdentityPtr and OrchestratorIdentityPtrOutput values.
// You can construct a concrete instance of `OrchestratorIdentityPtrInput` via:
//
//          OrchestratorIdentityArgs{...}
//
//  or:
//
//          nil
type OrchestratorIdentityPtrInput interface {
	pulumi.Input

	ToOrchestratorIdentityPtrOutput() OrchestratorIdentityPtrOutput
	ToOrchestratorIdentityPtrOutputWithContext(context.Context) OrchestratorIdentityPtrOutput
}

type orchestratorIdentityPtrType OrchestratorIdentityArgs

func OrchestratorIdentityPtr(v *OrchestratorIdentityArgs) OrchestratorIdentityPtrInput {
	return (*orchestratorIdentityPtrType)(v)
}

func (*orchestratorIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorIdentity)(nil)).Elem()
}

func (i *orchestratorIdentityPtrType) ToOrchestratorIdentityPtrOutput() OrchestratorIdentityPtrOutput {
	return i.ToOrchestratorIdentityPtrOutputWithContext(context.Background())
}

func (i *orchestratorIdentityPtrType) ToOrchestratorIdentityPtrOutputWithContext(ctx context.Context) OrchestratorIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorIdentityPtrOutput)
}

type OrchestratorIdentityOutput struct{ *pulumi.OutputState }

func (OrchestratorIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorIdentity)(nil)).Elem()
}

func (o OrchestratorIdentityOutput) ToOrchestratorIdentityOutput() OrchestratorIdentityOutput {
	return o
}

func (o OrchestratorIdentityOutput) ToOrchestratorIdentityOutputWithContext(ctx context.Context) OrchestratorIdentityOutput {
	return o
}

func (o OrchestratorIdentityOutput) ToOrchestratorIdentityPtrOutput() OrchestratorIdentityPtrOutput {
	return o.ToOrchestratorIdentityPtrOutputWithContext(context.Background())
}

func (o OrchestratorIdentityOutput) ToOrchestratorIdentityPtrOutputWithContext(ctx context.Context) OrchestratorIdentityPtrOutput {
	return o.ApplyT(func(v OrchestratorIdentity) *OrchestratorIdentity {
		return &v
	}).(OrchestratorIdentityPtrOutput)
}

// The type of identity used for orchestrator cluster. Type 'SystemAssigned' will use an implicitly created identity orchestrator clusters
func (o OrchestratorIdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorIdentity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type OrchestratorIdentityPtrOutput struct{ *pulumi.OutputState }

func (OrchestratorIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorIdentity)(nil)).Elem()
}

func (o OrchestratorIdentityPtrOutput) ToOrchestratorIdentityPtrOutput() OrchestratorIdentityPtrOutput {
	return o
}

func (o OrchestratorIdentityPtrOutput) ToOrchestratorIdentityPtrOutputWithContext(ctx context.Context) OrchestratorIdentityPtrOutput {
	return o
}

func (o OrchestratorIdentityPtrOutput) Elem() OrchestratorIdentityOutput {
	return o.ApplyT(func(v *OrchestratorIdentity) OrchestratorIdentity { return *v }).(OrchestratorIdentityOutput)
}

// The type of identity used for orchestrator cluster. Type 'SystemAssigned' will use an implicitly created identity orchestrator clusters
func (o OrchestratorIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorIdentity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type OrchestratorIdentityResponse struct {
	// The principal id of the system assigned identity which is used by orchestrator.
	PrincipalId string `pulumi:"principalId"`
	// The tenant id of the system assigned identity which is used by orchestrator.
	TenantId string `pulumi:"tenantId"`
	// The type of identity used for orchestrator cluster. Type 'SystemAssigned' will use an implicitly created identity orchestrator clusters
	Type *string `pulumi:"type"`
}

// OrchestratorIdentityResponseInput is an input type that accepts OrchestratorIdentityResponseArgs and OrchestratorIdentityResponseOutput values.
// You can construct a concrete instance of `OrchestratorIdentityResponseInput` via:
//
//          OrchestratorIdentityResponseArgs{...}
type OrchestratorIdentityResponseInput interface {
	pulumi.Input

	ToOrchestratorIdentityResponseOutput() OrchestratorIdentityResponseOutput
	ToOrchestratorIdentityResponseOutputWithContext(context.Context) OrchestratorIdentityResponseOutput
}

type OrchestratorIdentityResponseArgs struct {
	// The principal id of the system assigned identity which is used by orchestrator.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The tenant id of the system assigned identity which is used by orchestrator.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The type of identity used for orchestrator cluster. Type 'SystemAssigned' will use an implicitly created identity orchestrator clusters
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (OrchestratorIdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorIdentityResponse)(nil)).Elem()
}

func (i OrchestratorIdentityResponseArgs) ToOrchestratorIdentityResponseOutput() OrchestratorIdentityResponseOutput {
	return i.ToOrchestratorIdentityResponseOutputWithContext(context.Background())
}

func (i OrchestratorIdentityResponseArgs) ToOrchestratorIdentityResponseOutputWithContext(ctx context.Context) OrchestratorIdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorIdentityResponseOutput)
}

func (i OrchestratorIdentityResponseArgs) ToOrchestratorIdentityResponsePtrOutput() OrchestratorIdentityResponsePtrOutput {
	return i.ToOrchestratorIdentityResponsePtrOutputWithContext(context.Background())
}

func (i OrchestratorIdentityResponseArgs) ToOrchestratorIdentityResponsePtrOutputWithContext(ctx context.Context) OrchestratorIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorIdentityResponseOutput).ToOrchestratorIdentityResponsePtrOutputWithContext(ctx)
}

// OrchestratorIdentityResponsePtrInput is an input type that accepts OrchestratorIdentityResponseArgs, OrchestratorIdentityResponsePtr and OrchestratorIdentityResponsePtrOutput values.
// You can construct a concrete instance of `OrchestratorIdentityResponsePtrInput` via:
//
//          OrchestratorIdentityResponseArgs{...}
//
//  or:
//
//          nil
type OrchestratorIdentityResponsePtrInput interface {
	pulumi.Input

	ToOrchestratorIdentityResponsePtrOutput() OrchestratorIdentityResponsePtrOutput
	ToOrchestratorIdentityResponsePtrOutputWithContext(context.Context) OrchestratorIdentityResponsePtrOutput
}

type orchestratorIdentityResponsePtrType OrchestratorIdentityResponseArgs

func OrchestratorIdentityResponsePtr(v *OrchestratorIdentityResponseArgs) OrchestratorIdentityResponsePtrInput {
	return (*orchestratorIdentityResponsePtrType)(v)
}

func (*orchestratorIdentityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorIdentityResponse)(nil)).Elem()
}

func (i *orchestratorIdentityResponsePtrType) ToOrchestratorIdentityResponsePtrOutput() OrchestratorIdentityResponsePtrOutput {
	return i.ToOrchestratorIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *orchestratorIdentityResponsePtrType) ToOrchestratorIdentityResponsePtrOutputWithContext(ctx context.Context) OrchestratorIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorIdentityResponsePtrOutput)
}

type OrchestratorIdentityResponseOutput struct{ *pulumi.OutputState }

func (OrchestratorIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorIdentityResponse)(nil)).Elem()
}

func (o OrchestratorIdentityResponseOutput) ToOrchestratorIdentityResponseOutput() OrchestratorIdentityResponseOutput {
	return o
}

func (o OrchestratorIdentityResponseOutput) ToOrchestratorIdentityResponseOutputWithContext(ctx context.Context) OrchestratorIdentityResponseOutput {
	return o
}

func (o OrchestratorIdentityResponseOutput) ToOrchestratorIdentityResponsePtrOutput() OrchestratorIdentityResponsePtrOutput {
	return o.ToOrchestratorIdentityResponsePtrOutputWithContext(context.Background())
}

func (o OrchestratorIdentityResponseOutput) ToOrchestratorIdentityResponsePtrOutputWithContext(ctx context.Context) OrchestratorIdentityResponsePtrOutput {
	return o.ApplyT(func(v OrchestratorIdentityResponse) *OrchestratorIdentityResponse {
		return &v
	}).(OrchestratorIdentityResponsePtrOutput)
}

// The principal id of the system assigned identity which is used by orchestrator.
func (o OrchestratorIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v OrchestratorIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id of the system assigned identity which is used by orchestrator.
func (o OrchestratorIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v OrchestratorIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for orchestrator cluster. Type 'SystemAssigned' will use an implicitly created identity orchestrator clusters
func (o OrchestratorIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type OrchestratorIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (OrchestratorIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorIdentityResponse)(nil)).Elem()
}

func (o OrchestratorIdentityResponsePtrOutput) ToOrchestratorIdentityResponsePtrOutput() OrchestratorIdentityResponsePtrOutput {
	return o
}

func (o OrchestratorIdentityResponsePtrOutput) ToOrchestratorIdentityResponsePtrOutputWithContext(ctx context.Context) OrchestratorIdentityResponsePtrOutput {
	return o
}

func (o OrchestratorIdentityResponsePtrOutput) Elem() OrchestratorIdentityResponseOutput {
	return o.ApplyT(func(v *OrchestratorIdentityResponse) OrchestratorIdentityResponse { return *v }).(OrchestratorIdentityResponseOutput)
}

// The principal id of the system assigned identity which is used by orchestrator.
func (o OrchestratorIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant id of the system assigned identity which is used by orchestrator.
func (o OrchestratorIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for orchestrator cluster. Type 'SystemAssigned' will use an implicitly created identity orchestrator clusters
func (o OrchestratorIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Properties of orchestrator
type OrchestratorResourceProperties struct {
	// K8s APIServer url. Either one of apiServerEndpoint or privateLinkResourceId can be specified
	ApiServerEndpoint *string `pulumi:"apiServerEndpoint"`
	// RootCA certificate of kubernetes cluster base64 encoded
	ClusterRootCA *string `pulumi:"clusterRootCA"`
	// Properties of the controller.
	ControllerDetails ControllerDetailsType `pulumi:"controllerDetails"`
	// AAD ID used with apiserver
	OrchestratorAppId *string `pulumi:"orchestratorAppId"`
	// TenantID of server App ID
	OrchestratorTenantId *string `pulumi:"orchestratorTenantId"`
	// private link arm resource id. Either one of apiServerEndpoint or privateLinkResourceId can be specified
	PrivateLinkResourceId *string `pulumi:"privateLinkResourceId"`
}

// OrchestratorResourcePropertiesInput is an input type that accepts OrchestratorResourcePropertiesArgs and OrchestratorResourcePropertiesOutput values.
// You can construct a concrete instance of `OrchestratorResourcePropertiesInput` via:
//
//          OrchestratorResourcePropertiesArgs{...}
type OrchestratorResourcePropertiesInput interface {
	pulumi.Input

	ToOrchestratorResourcePropertiesOutput() OrchestratorResourcePropertiesOutput
	ToOrchestratorResourcePropertiesOutputWithContext(context.Context) OrchestratorResourcePropertiesOutput
}

// Properties of orchestrator
type OrchestratorResourcePropertiesArgs struct {
	// K8s APIServer url. Either one of apiServerEndpoint or privateLinkResourceId can be specified
	ApiServerEndpoint pulumi.StringPtrInput `pulumi:"apiServerEndpoint"`
	// RootCA certificate of kubernetes cluster base64 encoded
	ClusterRootCA pulumi.StringPtrInput `pulumi:"clusterRootCA"`
	// Properties of the controller.
	ControllerDetails ControllerDetailsTypeInput `pulumi:"controllerDetails"`
	// AAD ID used with apiserver
	OrchestratorAppId pulumi.StringPtrInput `pulumi:"orchestratorAppId"`
	// TenantID of server App ID
	OrchestratorTenantId pulumi.StringPtrInput `pulumi:"orchestratorTenantId"`
	// private link arm resource id. Either one of apiServerEndpoint or privateLinkResourceId can be specified
	PrivateLinkResourceId pulumi.StringPtrInput `pulumi:"privateLinkResourceId"`
}

func (OrchestratorResourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorResourceProperties)(nil)).Elem()
}

func (i OrchestratorResourcePropertiesArgs) ToOrchestratorResourcePropertiesOutput() OrchestratorResourcePropertiesOutput {
	return i.ToOrchestratorResourcePropertiesOutputWithContext(context.Background())
}

func (i OrchestratorResourcePropertiesArgs) ToOrchestratorResourcePropertiesOutputWithContext(ctx context.Context) OrchestratorResourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorResourcePropertiesOutput)
}

func (i OrchestratorResourcePropertiesArgs) ToOrchestratorResourcePropertiesPtrOutput() OrchestratorResourcePropertiesPtrOutput {
	return i.ToOrchestratorResourcePropertiesPtrOutputWithContext(context.Background())
}

func (i OrchestratorResourcePropertiesArgs) ToOrchestratorResourcePropertiesPtrOutputWithContext(ctx context.Context) OrchestratorResourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorResourcePropertiesOutput).ToOrchestratorResourcePropertiesPtrOutputWithContext(ctx)
}

// OrchestratorResourcePropertiesPtrInput is an input type that accepts OrchestratorResourcePropertiesArgs, OrchestratorResourcePropertiesPtr and OrchestratorResourcePropertiesPtrOutput values.
// You can construct a concrete instance of `OrchestratorResourcePropertiesPtrInput` via:
//
//          OrchestratorResourcePropertiesArgs{...}
//
//  or:
//
//          nil
type OrchestratorResourcePropertiesPtrInput interface {
	pulumi.Input

	ToOrchestratorResourcePropertiesPtrOutput() OrchestratorResourcePropertiesPtrOutput
	ToOrchestratorResourcePropertiesPtrOutputWithContext(context.Context) OrchestratorResourcePropertiesPtrOutput
}

type orchestratorResourcePropertiesPtrType OrchestratorResourcePropertiesArgs

func OrchestratorResourcePropertiesPtr(v *OrchestratorResourcePropertiesArgs) OrchestratorResourcePropertiesPtrInput {
	return (*orchestratorResourcePropertiesPtrType)(v)
}

func (*orchestratorResourcePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorResourceProperties)(nil)).Elem()
}

func (i *orchestratorResourcePropertiesPtrType) ToOrchestratorResourcePropertiesPtrOutput() OrchestratorResourcePropertiesPtrOutput {
	return i.ToOrchestratorResourcePropertiesPtrOutputWithContext(context.Background())
}

func (i *orchestratorResourcePropertiesPtrType) ToOrchestratorResourcePropertiesPtrOutputWithContext(ctx context.Context) OrchestratorResourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorResourcePropertiesPtrOutput)
}

// Properties of orchestrator
type OrchestratorResourcePropertiesOutput struct{ *pulumi.OutputState }

func (OrchestratorResourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorResourceProperties)(nil)).Elem()
}

func (o OrchestratorResourcePropertiesOutput) ToOrchestratorResourcePropertiesOutput() OrchestratorResourcePropertiesOutput {
	return o
}

func (o OrchestratorResourcePropertiesOutput) ToOrchestratorResourcePropertiesOutputWithContext(ctx context.Context) OrchestratorResourcePropertiesOutput {
	return o
}

func (o OrchestratorResourcePropertiesOutput) ToOrchestratorResourcePropertiesPtrOutput() OrchestratorResourcePropertiesPtrOutput {
	return o.ToOrchestratorResourcePropertiesPtrOutputWithContext(context.Background())
}

func (o OrchestratorResourcePropertiesOutput) ToOrchestratorResourcePropertiesPtrOutputWithContext(ctx context.Context) OrchestratorResourcePropertiesPtrOutput {
	return o.ApplyT(func(v OrchestratorResourceProperties) *OrchestratorResourceProperties {
		return &v
	}).(OrchestratorResourcePropertiesPtrOutput)
}

// K8s APIServer url. Either one of apiServerEndpoint or privateLinkResourceId can be specified
func (o OrchestratorResourcePropertiesOutput) ApiServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorResourceProperties) *string { return v.ApiServerEndpoint }).(pulumi.StringPtrOutput)
}

// RootCA certificate of kubernetes cluster base64 encoded
func (o OrchestratorResourcePropertiesOutput) ClusterRootCA() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorResourceProperties) *string { return v.ClusterRootCA }).(pulumi.StringPtrOutput)
}

// Properties of the controller.
func (o OrchestratorResourcePropertiesOutput) ControllerDetails() ControllerDetailsTypeOutput {
	return o.ApplyT(func(v OrchestratorResourceProperties) ControllerDetailsType { return v.ControllerDetails }).(ControllerDetailsTypeOutput)
}

// AAD ID used with apiserver
func (o OrchestratorResourcePropertiesOutput) OrchestratorAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorResourceProperties) *string { return v.OrchestratorAppId }).(pulumi.StringPtrOutput)
}

// TenantID of server App ID
func (o OrchestratorResourcePropertiesOutput) OrchestratorTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorResourceProperties) *string { return v.OrchestratorTenantId }).(pulumi.StringPtrOutput)
}

// private link arm resource id. Either one of apiServerEndpoint or privateLinkResourceId can be specified
func (o OrchestratorResourcePropertiesOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorResourceProperties) *string { return v.PrivateLinkResourceId }).(pulumi.StringPtrOutput)
}

type OrchestratorResourcePropertiesPtrOutput struct{ *pulumi.OutputState }

func (OrchestratorResourcePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorResourceProperties)(nil)).Elem()
}

func (o OrchestratorResourcePropertiesPtrOutput) ToOrchestratorResourcePropertiesPtrOutput() OrchestratorResourcePropertiesPtrOutput {
	return o
}

func (o OrchestratorResourcePropertiesPtrOutput) ToOrchestratorResourcePropertiesPtrOutputWithContext(ctx context.Context) OrchestratorResourcePropertiesPtrOutput {
	return o
}

func (o OrchestratorResourcePropertiesPtrOutput) Elem() OrchestratorResourcePropertiesOutput {
	return o.ApplyT(func(v *OrchestratorResourceProperties) OrchestratorResourceProperties { return *v }).(OrchestratorResourcePropertiesOutput)
}

// K8s APIServer url. Either one of apiServerEndpoint or privateLinkResourceId can be specified
func (o OrchestratorResourcePropertiesPtrOutput) ApiServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorResourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.ApiServerEndpoint
	}).(pulumi.StringPtrOutput)
}

// RootCA certificate of kubernetes cluster base64 encoded
func (o OrchestratorResourcePropertiesPtrOutput) ClusterRootCA() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorResourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.ClusterRootCA
	}).(pulumi.StringPtrOutput)
}

// Properties of the controller.
func (o OrchestratorResourcePropertiesPtrOutput) ControllerDetails() ControllerDetailsTypePtrOutput {
	return o.ApplyT(func(v *OrchestratorResourceProperties) *ControllerDetailsType {
		if v == nil {
			return nil
		}
		return &v.ControllerDetails
	}).(ControllerDetailsTypePtrOutput)
}

// AAD ID used with apiserver
func (o OrchestratorResourcePropertiesPtrOutput) OrchestratorAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorResourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.OrchestratorAppId
	}).(pulumi.StringPtrOutput)
}

// TenantID of server App ID
func (o OrchestratorResourcePropertiesPtrOutput) OrchestratorTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorResourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.OrchestratorTenantId
	}).(pulumi.StringPtrOutput)
}

// private link arm resource id. Either one of apiServerEndpoint or privateLinkResourceId can be specified
func (o OrchestratorResourcePropertiesPtrOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorResourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrivateLinkResourceId
	}).(pulumi.StringPtrOutput)
}

// Properties of orchestrator
type OrchestratorResourcePropertiesResponse struct {
	// K8s APIServer url. Either one of apiServerEndpoint or privateLinkResourceId can be specified
	ApiServerEndpoint *string `pulumi:"apiServerEndpoint"`
	// RootCA certificate of kubernetes cluster base64 encoded
	ClusterRootCA *string `pulumi:"clusterRootCA"`
	// Properties of the controller.
	ControllerDetails ControllerDetailsResponse `pulumi:"controllerDetails"`
	// AAD ID used with apiserver
	OrchestratorAppId *string `pulumi:"orchestratorAppId"`
	// TenantID of server App ID
	OrchestratorTenantId *string `pulumi:"orchestratorTenantId"`
	// private link arm resource id. Either one of apiServerEndpoint or privateLinkResourceId can be specified
	PrivateLinkResourceId *string `pulumi:"privateLinkResourceId"`
	// The current state of orchestratorInstance resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Resource guid.
	ResourceGuid string `pulumi:"resourceGuid"`
}

// OrchestratorResourcePropertiesResponseInput is an input type that accepts OrchestratorResourcePropertiesResponseArgs and OrchestratorResourcePropertiesResponseOutput values.
// You can construct a concrete instance of `OrchestratorResourcePropertiesResponseInput` via:
//
//          OrchestratorResourcePropertiesResponseArgs{...}
type OrchestratorResourcePropertiesResponseInput interface {
	pulumi.Input

	ToOrchestratorResourcePropertiesResponseOutput() OrchestratorResourcePropertiesResponseOutput
	ToOrchestratorResourcePropertiesResponseOutputWithContext(context.Context) OrchestratorResourcePropertiesResponseOutput
}

// Properties of orchestrator
type OrchestratorResourcePropertiesResponseArgs struct {
	// K8s APIServer url. Either one of apiServerEndpoint or privateLinkResourceId can be specified
	ApiServerEndpoint pulumi.StringPtrInput `pulumi:"apiServerEndpoint"`
	// RootCA certificate of kubernetes cluster base64 encoded
	ClusterRootCA pulumi.StringPtrInput `pulumi:"clusterRootCA"`
	// Properties of the controller.
	ControllerDetails ControllerDetailsResponseInput `pulumi:"controllerDetails"`
	// AAD ID used with apiserver
	OrchestratorAppId pulumi.StringPtrInput `pulumi:"orchestratorAppId"`
	// TenantID of server App ID
	OrchestratorTenantId pulumi.StringPtrInput `pulumi:"orchestratorTenantId"`
	// private link arm resource id. Either one of apiServerEndpoint or privateLinkResourceId can be specified
	PrivateLinkResourceId pulumi.StringPtrInput `pulumi:"privateLinkResourceId"`
	// The current state of orchestratorInstance resource.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Resource guid.
	ResourceGuid pulumi.StringInput `pulumi:"resourceGuid"`
}

func (OrchestratorResourcePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorResourcePropertiesResponse)(nil)).Elem()
}

func (i OrchestratorResourcePropertiesResponseArgs) ToOrchestratorResourcePropertiesResponseOutput() OrchestratorResourcePropertiesResponseOutput {
	return i.ToOrchestratorResourcePropertiesResponseOutputWithContext(context.Background())
}

func (i OrchestratorResourcePropertiesResponseArgs) ToOrchestratorResourcePropertiesResponseOutputWithContext(ctx context.Context) OrchestratorResourcePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorResourcePropertiesResponseOutput)
}

func (i OrchestratorResourcePropertiesResponseArgs) ToOrchestratorResourcePropertiesResponsePtrOutput() OrchestratorResourcePropertiesResponsePtrOutput {
	return i.ToOrchestratorResourcePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i OrchestratorResourcePropertiesResponseArgs) ToOrchestratorResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) OrchestratorResourcePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorResourcePropertiesResponseOutput).ToOrchestratorResourcePropertiesResponsePtrOutputWithContext(ctx)
}

// OrchestratorResourcePropertiesResponsePtrInput is an input type that accepts OrchestratorResourcePropertiesResponseArgs, OrchestratorResourcePropertiesResponsePtr and OrchestratorResourcePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `OrchestratorResourcePropertiesResponsePtrInput` via:
//
//          OrchestratorResourcePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type OrchestratorResourcePropertiesResponsePtrInput interface {
	pulumi.Input

	ToOrchestratorResourcePropertiesResponsePtrOutput() OrchestratorResourcePropertiesResponsePtrOutput
	ToOrchestratorResourcePropertiesResponsePtrOutputWithContext(context.Context) OrchestratorResourcePropertiesResponsePtrOutput
}

type orchestratorResourcePropertiesResponsePtrType OrchestratorResourcePropertiesResponseArgs

func OrchestratorResourcePropertiesResponsePtr(v *OrchestratorResourcePropertiesResponseArgs) OrchestratorResourcePropertiesResponsePtrInput {
	return (*orchestratorResourcePropertiesResponsePtrType)(v)
}

func (*orchestratorResourcePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorResourcePropertiesResponse)(nil)).Elem()
}

func (i *orchestratorResourcePropertiesResponsePtrType) ToOrchestratorResourcePropertiesResponsePtrOutput() OrchestratorResourcePropertiesResponsePtrOutput {
	return i.ToOrchestratorResourcePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *orchestratorResourcePropertiesResponsePtrType) ToOrchestratorResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) OrchestratorResourcePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorResourcePropertiesResponsePtrOutput)
}

// Properties of orchestrator
type OrchestratorResourcePropertiesResponseOutput struct{ *pulumi.OutputState }

func (OrchestratorResourcePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorResourcePropertiesResponse)(nil)).Elem()
}

func (o OrchestratorResourcePropertiesResponseOutput) ToOrchestratorResourcePropertiesResponseOutput() OrchestratorResourcePropertiesResponseOutput {
	return o
}

func (o OrchestratorResourcePropertiesResponseOutput) ToOrchestratorResourcePropertiesResponseOutputWithContext(ctx context.Context) OrchestratorResourcePropertiesResponseOutput {
	return o
}

func (o OrchestratorResourcePropertiesResponseOutput) ToOrchestratorResourcePropertiesResponsePtrOutput() OrchestratorResourcePropertiesResponsePtrOutput {
	return o.ToOrchestratorResourcePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o OrchestratorResourcePropertiesResponseOutput) ToOrchestratorResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) OrchestratorResourcePropertiesResponsePtrOutput {
	return o.ApplyT(func(v OrchestratorResourcePropertiesResponse) *OrchestratorResourcePropertiesResponse {
		return &v
	}).(OrchestratorResourcePropertiesResponsePtrOutput)
}

// K8s APIServer url. Either one of apiServerEndpoint or privateLinkResourceId can be specified
func (o OrchestratorResourcePropertiesResponseOutput) ApiServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorResourcePropertiesResponse) *string { return v.ApiServerEndpoint }).(pulumi.StringPtrOutput)
}

// RootCA certificate of kubernetes cluster base64 encoded
func (o OrchestratorResourcePropertiesResponseOutput) ClusterRootCA() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorResourcePropertiesResponse) *string { return v.ClusterRootCA }).(pulumi.StringPtrOutput)
}

// Properties of the controller.
func (o OrchestratorResourcePropertiesResponseOutput) ControllerDetails() ControllerDetailsResponseOutput {
	return o.ApplyT(func(v OrchestratorResourcePropertiesResponse) ControllerDetailsResponse { return v.ControllerDetails }).(ControllerDetailsResponseOutput)
}

// AAD ID used with apiserver
func (o OrchestratorResourcePropertiesResponseOutput) OrchestratorAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorResourcePropertiesResponse) *string { return v.OrchestratorAppId }).(pulumi.StringPtrOutput)
}

// TenantID of server App ID
func (o OrchestratorResourcePropertiesResponseOutput) OrchestratorTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorResourcePropertiesResponse) *string { return v.OrchestratorTenantId }).(pulumi.StringPtrOutput)
}

// private link arm resource id. Either one of apiServerEndpoint or privateLinkResourceId can be specified
func (o OrchestratorResourcePropertiesResponseOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorResourcePropertiesResponse) *string { return v.PrivateLinkResourceId }).(pulumi.StringPtrOutput)
}

// The current state of orchestratorInstance resource.
func (o OrchestratorResourcePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v OrchestratorResourcePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Resource guid.
func (o OrchestratorResourcePropertiesResponseOutput) ResourceGuid() pulumi.StringOutput {
	return o.ApplyT(func(v OrchestratorResourcePropertiesResponse) string { return v.ResourceGuid }).(pulumi.StringOutput)
}

type OrchestratorResourcePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (OrchestratorResourcePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorResourcePropertiesResponse)(nil)).Elem()
}

func (o OrchestratorResourcePropertiesResponsePtrOutput) ToOrchestratorResourcePropertiesResponsePtrOutput() OrchestratorResourcePropertiesResponsePtrOutput {
	return o
}

func (o OrchestratorResourcePropertiesResponsePtrOutput) ToOrchestratorResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) OrchestratorResourcePropertiesResponsePtrOutput {
	return o
}

func (o OrchestratorResourcePropertiesResponsePtrOutput) Elem() OrchestratorResourcePropertiesResponseOutput {
	return o.ApplyT(func(v *OrchestratorResourcePropertiesResponse) OrchestratorResourcePropertiesResponse { return *v }).(OrchestratorResourcePropertiesResponseOutput)
}

// K8s APIServer url. Either one of apiServerEndpoint or privateLinkResourceId can be specified
func (o OrchestratorResourcePropertiesResponsePtrOutput) ApiServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApiServerEndpoint
	}).(pulumi.StringPtrOutput)
}

// RootCA certificate of kubernetes cluster base64 encoded
func (o OrchestratorResourcePropertiesResponsePtrOutput) ClusterRootCA() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClusterRootCA
	}).(pulumi.StringPtrOutput)
}

// Properties of the controller.
func (o OrchestratorResourcePropertiesResponsePtrOutput) ControllerDetails() ControllerDetailsResponsePtrOutput {
	return o.ApplyT(func(v *OrchestratorResourcePropertiesResponse) *ControllerDetailsResponse {
		if v == nil {
			return nil
		}
		return &v.ControllerDetails
	}).(ControllerDetailsResponsePtrOutput)
}

// AAD ID used with apiserver
func (o OrchestratorResourcePropertiesResponsePtrOutput) OrchestratorAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.OrchestratorAppId
	}).(pulumi.StringPtrOutput)
}

// TenantID of server App ID
func (o OrchestratorResourcePropertiesResponsePtrOutput) OrchestratorTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.OrchestratorTenantId
	}).(pulumi.StringPtrOutput)
}

// private link arm resource id. Either one of apiServerEndpoint or privateLinkResourceId can be specified
func (o OrchestratorResourcePropertiesResponsePtrOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrivateLinkResourceId
	}).(pulumi.StringPtrOutput)
}

// The current state of orchestratorInstance resource.
func (o OrchestratorResourcePropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Resource guid.
func (o OrchestratorResourcePropertiesResponsePtrOutput) ResourceGuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceGuid
	}).(pulumi.StringPtrOutput)
}

// Properties of orchestrator
type SubnetDetails struct {
	// subnet arm resource id
	Id *string `pulumi:"id"`
}

// SubnetDetailsInput is an input type that accepts SubnetDetailsArgs and SubnetDetailsOutput values.
// You can construct a concrete instance of `SubnetDetailsInput` via:
//
//          SubnetDetailsArgs{...}
type SubnetDetailsInput interface {
	pulumi.Input

	ToSubnetDetailsOutput() SubnetDetailsOutput
	ToSubnetDetailsOutputWithContext(context.Context) SubnetDetailsOutput
}

// Properties of orchestrator
type SubnetDetailsArgs struct {
	// subnet arm resource id
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubnetDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetDetails)(nil)).Elem()
}

func (i SubnetDetailsArgs) ToSubnetDetailsOutput() SubnetDetailsOutput {
	return i.ToSubnetDetailsOutputWithContext(context.Background())
}

func (i SubnetDetailsArgs) ToSubnetDetailsOutputWithContext(ctx context.Context) SubnetDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetDetailsOutput)
}

func (i SubnetDetailsArgs) ToSubnetDetailsPtrOutput() SubnetDetailsPtrOutput {
	return i.ToSubnetDetailsPtrOutputWithContext(context.Background())
}

func (i SubnetDetailsArgs) ToSubnetDetailsPtrOutputWithContext(ctx context.Context) SubnetDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetDetailsOutput).ToSubnetDetailsPtrOutputWithContext(ctx)
}

// SubnetDetailsPtrInput is an input type that accepts SubnetDetailsArgs, SubnetDetailsPtr and SubnetDetailsPtrOutput values.
// You can construct a concrete instance of `SubnetDetailsPtrInput` via:
//
//          SubnetDetailsArgs{...}
//
//  or:
//
//          nil
type SubnetDetailsPtrInput interface {
	pulumi.Input

	ToSubnetDetailsPtrOutput() SubnetDetailsPtrOutput
	ToSubnetDetailsPtrOutputWithContext(context.Context) SubnetDetailsPtrOutput
}

type subnetDetailsPtrType SubnetDetailsArgs

func SubnetDetailsPtr(v *SubnetDetailsArgs) SubnetDetailsPtrInput {
	return (*subnetDetailsPtrType)(v)
}

func (*subnetDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetDetails)(nil)).Elem()
}

func (i *subnetDetailsPtrType) ToSubnetDetailsPtrOutput() SubnetDetailsPtrOutput {
	return i.ToSubnetDetailsPtrOutputWithContext(context.Background())
}

func (i *subnetDetailsPtrType) ToSubnetDetailsPtrOutputWithContext(ctx context.Context) SubnetDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetDetailsPtrOutput)
}

// Properties of orchestrator
type SubnetDetailsOutput struct{ *pulumi.OutputState }

func (SubnetDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetDetails)(nil)).Elem()
}

func (o SubnetDetailsOutput) ToSubnetDetailsOutput() SubnetDetailsOutput {
	return o
}

func (o SubnetDetailsOutput) ToSubnetDetailsOutputWithContext(ctx context.Context) SubnetDetailsOutput {
	return o
}

func (o SubnetDetailsOutput) ToSubnetDetailsPtrOutput() SubnetDetailsPtrOutput {
	return o.ToSubnetDetailsPtrOutputWithContext(context.Background())
}

func (o SubnetDetailsOutput) ToSubnetDetailsPtrOutputWithContext(ctx context.Context) SubnetDetailsPtrOutput {
	return o.ApplyT(func(v SubnetDetails) *SubnetDetails {
		return &v
	}).(SubnetDetailsPtrOutput)
}

// subnet arm resource id
func (o SubnetDetailsOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetDetails) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubnetDetailsPtrOutput struct{ *pulumi.OutputState }

func (SubnetDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetDetails)(nil)).Elem()
}

func (o SubnetDetailsPtrOutput) ToSubnetDetailsPtrOutput() SubnetDetailsPtrOutput {
	return o
}

func (o SubnetDetailsPtrOutput) ToSubnetDetailsPtrOutputWithContext(ctx context.Context) SubnetDetailsPtrOutput {
	return o
}

func (o SubnetDetailsPtrOutput) Elem() SubnetDetailsOutput {
	return o.ApplyT(func(v *SubnetDetails) SubnetDetails { return *v }).(SubnetDetailsOutput)
}

// subnet arm resource id
func (o SubnetDetailsPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetDetails) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Properties of orchestrator
type SubnetDetailsResponse struct {
	// subnet arm resource id
	Id *string `pulumi:"id"`
}

// SubnetDetailsResponseInput is an input type that accepts SubnetDetailsResponseArgs and SubnetDetailsResponseOutput values.
// You can construct a concrete instance of `SubnetDetailsResponseInput` via:
//
//          SubnetDetailsResponseArgs{...}
type SubnetDetailsResponseInput interface {
	pulumi.Input

	ToSubnetDetailsResponseOutput() SubnetDetailsResponseOutput
	ToSubnetDetailsResponseOutputWithContext(context.Context) SubnetDetailsResponseOutput
}

// Properties of orchestrator
type SubnetDetailsResponseArgs struct {
	// subnet arm resource id
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubnetDetailsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetDetailsResponse)(nil)).Elem()
}

func (i SubnetDetailsResponseArgs) ToSubnetDetailsResponseOutput() SubnetDetailsResponseOutput {
	return i.ToSubnetDetailsResponseOutputWithContext(context.Background())
}

func (i SubnetDetailsResponseArgs) ToSubnetDetailsResponseOutputWithContext(ctx context.Context) SubnetDetailsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetDetailsResponseOutput)
}

func (i SubnetDetailsResponseArgs) ToSubnetDetailsResponsePtrOutput() SubnetDetailsResponsePtrOutput {
	return i.ToSubnetDetailsResponsePtrOutputWithContext(context.Background())
}

func (i SubnetDetailsResponseArgs) ToSubnetDetailsResponsePtrOutputWithContext(ctx context.Context) SubnetDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetDetailsResponseOutput).ToSubnetDetailsResponsePtrOutputWithContext(ctx)
}

// SubnetDetailsResponsePtrInput is an input type that accepts SubnetDetailsResponseArgs, SubnetDetailsResponsePtr and SubnetDetailsResponsePtrOutput values.
// You can construct a concrete instance of `SubnetDetailsResponsePtrInput` via:
//
//          SubnetDetailsResponseArgs{...}
//
//  or:
//
//          nil
type SubnetDetailsResponsePtrInput interface {
	pulumi.Input

	ToSubnetDetailsResponsePtrOutput() SubnetDetailsResponsePtrOutput
	ToSubnetDetailsResponsePtrOutputWithContext(context.Context) SubnetDetailsResponsePtrOutput
}

type subnetDetailsResponsePtrType SubnetDetailsResponseArgs

func SubnetDetailsResponsePtr(v *SubnetDetailsResponseArgs) SubnetDetailsResponsePtrInput {
	return (*subnetDetailsResponsePtrType)(v)
}

func (*subnetDetailsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetDetailsResponse)(nil)).Elem()
}

func (i *subnetDetailsResponsePtrType) ToSubnetDetailsResponsePtrOutput() SubnetDetailsResponsePtrOutput {
	return i.ToSubnetDetailsResponsePtrOutputWithContext(context.Background())
}

func (i *subnetDetailsResponsePtrType) ToSubnetDetailsResponsePtrOutputWithContext(ctx context.Context) SubnetDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetDetailsResponsePtrOutput)
}

// Properties of orchestrator
type SubnetDetailsResponseOutput struct{ *pulumi.OutputState }

func (SubnetDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetDetailsResponse)(nil)).Elem()
}

func (o SubnetDetailsResponseOutput) ToSubnetDetailsResponseOutput() SubnetDetailsResponseOutput {
	return o
}

func (o SubnetDetailsResponseOutput) ToSubnetDetailsResponseOutputWithContext(ctx context.Context) SubnetDetailsResponseOutput {
	return o
}

func (o SubnetDetailsResponseOutput) ToSubnetDetailsResponsePtrOutput() SubnetDetailsResponsePtrOutput {
	return o.ToSubnetDetailsResponsePtrOutputWithContext(context.Background())
}

func (o SubnetDetailsResponseOutput) ToSubnetDetailsResponsePtrOutputWithContext(ctx context.Context) SubnetDetailsResponsePtrOutput {
	return o.ApplyT(func(v SubnetDetailsResponse) *SubnetDetailsResponse {
		return &v
	}).(SubnetDetailsResponsePtrOutput)
}

// subnet arm resource id
func (o SubnetDetailsResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetDetailsResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubnetDetailsResponsePtrOutput struct{ *pulumi.OutputState }

func (SubnetDetailsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetDetailsResponse)(nil)).Elem()
}

func (o SubnetDetailsResponsePtrOutput) ToSubnetDetailsResponsePtrOutput() SubnetDetailsResponsePtrOutput {
	return o
}

func (o SubnetDetailsResponsePtrOutput) ToSubnetDetailsResponsePtrOutputWithContext(ctx context.Context) SubnetDetailsResponsePtrOutput {
	return o
}

func (o SubnetDetailsResponsePtrOutput) Elem() SubnetDetailsResponseOutput {
	return o.ApplyT(func(v *SubnetDetailsResponse) SubnetDetailsResponse { return *v }).(SubnetDetailsResponseOutput)
}

// subnet arm resource id
func (o SubnetDetailsResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ControllerDetailsTypeOutput{})
	pulumi.RegisterOutputType(ControllerDetailsTypePtrOutput{})
	pulumi.RegisterOutputType(ControllerDetailsResponseOutput{})
	pulumi.RegisterOutputType(ControllerDetailsResponsePtrOutput{})
	pulumi.RegisterOutputType(DelegatedControllerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DelegatedControllerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(DelegatedSubnetPropertiesOutput{})
	pulumi.RegisterOutputType(DelegatedSubnetPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DelegatedSubnetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DelegatedSubnetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(OrchestratorIdentityOutput{})
	pulumi.RegisterOutputType(OrchestratorIdentityPtrOutput{})
	pulumi.RegisterOutputType(OrchestratorIdentityResponseOutput{})
	pulumi.RegisterOutputType(OrchestratorIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(OrchestratorResourcePropertiesOutput{})
	pulumi.RegisterOutputType(OrchestratorResourcePropertiesPtrOutput{})
	pulumi.RegisterOutputType(OrchestratorResourcePropertiesResponseOutput{})
	pulumi.RegisterOutputType(OrchestratorResourcePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SubnetDetailsOutput{})
	pulumi.RegisterOutputType(SubnetDetailsPtrOutput{})
	pulumi.RegisterOutputType(SubnetDetailsResponseOutput{})
	pulumi.RegisterOutputType(SubnetDetailsResponsePtrOutput{})
}
