// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200808preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// controller details
type ControllerDetailsType struct {
	// controller arm resource id
	Id *string `pulumi:"id"`
}

// ControllerDetailsTypeInput is an input type that accepts ControllerDetailsTypeArgs and ControllerDetailsTypeOutput values.
// You can construct a concrete instance of `ControllerDetailsTypeInput` via:
//
//          ControllerDetailsTypeArgs{...}
type ControllerDetailsTypeInput interface {
	pulumi.Input

	ToControllerDetailsTypeOutput() ControllerDetailsTypeOutput
	ToControllerDetailsTypeOutputWithContext(context.Context) ControllerDetailsTypeOutput
}

// controller details
type ControllerDetailsTypeArgs struct {
	// controller arm resource id
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (ControllerDetailsTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerDetailsType)(nil)).Elem()
}

func (i ControllerDetailsTypeArgs) ToControllerDetailsTypeOutput() ControllerDetailsTypeOutput {
	return i.ToControllerDetailsTypeOutputWithContext(context.Background())
}

func (i ControllerDetailsTypeArgs) ToControllerDetailsTypeOutputWithContext(ctx context.Context) ControllerDetailsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerDetailsTypeOutput)
}

func (i ControllerDetailsTypeArgs) ToControllerDetailsTypePtrOutput() ControllerDetailsTypePtrOutput {
	return i.ToControllerDetailsTypePtrOutputWithContext(context.Background())
}

func (i ControllerDetailsTypeArgs) ToControllerDetailsTypePtrOutputWithContext(ctx context.Context) ControllerDetailsTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerDetailsTypeOutput).ToControllerDetailsTypePtrOutputWithContext(ctx)
}

// ControllerDetailsTypePtrInput is an input type that accepts ControllerDetailsTypeArgs, ControllerDetailsTypePtr and ControllerDetailsTypePtrOutput values.
// You can construct a concrete instance of `ControllerDetailsTypePtrInput` via:
//
//          ControllerDetailsTypeArgs{...}
//
//  or:
//
//          nil
type ControllerDetailsTypePtrInput interface {
	pulumi.Input

	ToControllerDetailsTypePtrOutput() ControllerDetailsTypePtrOutput
	ToControllerDetailsTypePtrOutputWithContext(context.Context) ControllerDetailsTypePtrOutput
}

type controllerDetailsTypePtrType ControllerDetailsTypeArgs

func ControllerDetailsTypePtr(v *ControllerDetailsTypeArgs) ControllerDetailsTypePtrInput {
	return (*controllerDetailsTypePtrType)(v)
}

func (*controllerDetailsTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerDetailsType)(nil)).Elem()
}

func (i *controllerDetailsTypePtrType) ToControllerDetailsTypePtrOutput() ControllerDetailsTypePtrOutput {
	return i.ToControllerDetailsTypePtrOutputWithContext(context.Background())
}

func (i *controllerDetailsTypePtrType) ToControllerDetailsTypePtrOutputWithContext(ctx context.Context) ControllerDetailsTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerDetailsTypePtrOutput)
}

// controller details
type ControllerDetailsTypeOutput struct{ *pulumi.OutputState }

func (ControllerDetailsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerDetailsType)(nil)).Elem()
}

func (o ControllerDetailsTypeOutput) ToControllerDetailsTypeOutput() ControllerDetailsTypeOutput {
	return o
}

func (o ControllerDetailsTypeOutput) ToControllerDetailsTypeOutputWithContext(ctx context.Context) ControllerDetailsTypeOutput {
	return o
}

func (o ControllerDetailsTypeOutput) ToControllerDetailsTypePtrOutput() ControllerDetailsTypePtrOutput {
	return o.ToControllerDetailsTypePtrOutputWithContext(context.Background())
}

func (o ControllerDetailsTypeOutput) ToControllerDetailsTypePtrOutputWithContext(ctx context.Context) ControllerDetailsTypePtrOutput {
	return o.ApplyT(func(v ControllerDetailsType) *ControllerDetailsType {
		return &v
	}).(ControllerDetailsTypePtrOutput)
}

// controller arm resource id
func (o ControllerDetailsTypeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerDetailsType) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ControllerDetailsTypePtrOutput struct{ *pulumi.OutputState }

func (ControllerDetailsTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerDetailsType)(nil)).Elem()
}

func (o ControllerDetailsTypePtrOutput) ToControllerDetailsTypePtrOutput() ControllerDetailsTypePtrOutput {
	return o
}

func (o ControllerDetailsTypePtrOutput) ToControllerDetailsTypePtrOutputWithContext(ctx context.Context) ControllerDetailsTypePtrOutput {
	return o
}

func (o ControllerDetailsTypePtrOutput) Elem() ControllerDetailsTypeOutput {
	return o.ApplyT(func(v *ControllerDetailsType) ControllerDetailsType { return *v }).(ControllerDetailsTypeOutput)
}

// controller arm resource id
func (o ControllerDetailsTypePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerDetailsType) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// controller details
type ControllerDetailsResponse struct {
	// controller arm resource id
	Id *string `pulumi:"id"`
}

// ControllerDetailsResponseInput is an input type that accepts ControllerDetailsResponseArgs and ControllerDetailsResponseOutput values.
// You can construct a concrete instance of `ControllerDetailsResponseInput` via:
//
//          ControllerDetailsResponseArgs{...}
type ControllerDetailsResponseInput interface {
	pulumi.Input

	ToControllerDetailsResponseOutput() ControllerDetailsResponseOutput
	ToControllerDetailsResponseOutputWithContext(context.Context) ControllerDetailsResponseOutput
}

// controller details
type ControllerDetailsResponseArgs struct {
	// controller arm resource id
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (ControllerDetailsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerDetailsResponse)(nil)).Elem()
}

func (i ControllerDetailsResponseArgs) ToControllerDetailsResponseOutput() ControllerDetailsResponseOutput {
	return i.ToControllerDetailsResponseOutputWithContext(context.Background())
}

func (i ControllerDetailsResponseArgs) ToControllerDetailsResponseOutputWithContext(ctx context.Context) ControllerDetailsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerDetailsResponseOutput)
}

func (i ControllerDetailsResponseArgs) ToControllerDetailsResponsePtrOutput() ControllerDetailsResponsePtrOutput {
	return i.ToControllerDetailsResponsePtrOutputWithContext(context.Background())
}

func (i ControllerDetailsResponseArgs) ToControllerDetailsResponsePtrOutputWithContext(ctx context.Context) ControllerDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerDetailsResponseOutput).ToControllerDetailsResponsePtrOutputWithContext(ctx)
}

// ControllerDetailsResponsePtrInput is an input type that accepts ControllerDetailsResponseArgs, ControllerDetailsResponsePtr and ControllerDetailsResponsePtrOutput values.
// You can construct a concrete instance of `ControllerDetailsResponsePtrInput` via:
//
//          ControllerDetailsResponseArgs{...}
//
//  or:
//
//          nil
type ControllerDetailsResponsePtrInput interface {
	pulumi.Input

	ToControllerDetailsResponsePtrOutput() ControllerDetailsResponsePtrOutput
	ToControllerDetailsResponsePtrOutputWithContext(context.Context) ControllerDetailsResponsePtrOutput
}

type controllerDetailsResponsePtrType ControllerDetailsResponseArgs

func ControllerDetailsResponsePtr(v *ControllerDetailsResponseArgs) ControllerDetailsResponsePtrInput {
	return (*controllerDetailsResponsePtrType)(v)
}

func (*controllerDetailsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerDetailsResponse)(nil)).Elem()
}

func (i *controllerDetailsResponsePtrType) ToControllerDetailsResponsePtrOutput() ControllerDetailsResponsePtrOutput {
	return i.ToControllerDetailsResponsePtrOutputWithContext(context.Background())
}

func (i *controllerDetailsResponsePtrType) ToControllerDetailsResponsePtrOutputWithContext(ctx context.Context) ControllerDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControllerDetailsResponsePtrOutput)
}

// controller details
type ControllerDetailsResponseOutput struct{ *pulumi.OutputState }

func (ControllerDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControllerDetailsResponse)(nil)).Elem()
}

func (o ControllerDetailsResponseOutput) ToControllerDetailsResponseOutput() ControllerDetailsResponseOutput {
	return o
}

func (o ControllerDetailsResponseOutput) ToControllerDetailsResponseOutputWithContext(ctx context.Context) ControllerDetailsResponseOutput {
	return o
}

func (o ControllerDetailsResponseOutput) ToControllerDetailsResponsePtrOutput() ControllerDetailsResponsePtrOutput {
	return o.ToControllerDetailsResponsePtrOutputWithContext(context.Background())
}

func (o ControllerDetailsResponseOutput) ToControllerDetailsResponsePtrOutputWithContext(ctx context.Context) ControllerDetailsResponsePtrOutput {
	return o.ApplyT(func(v ControllerDetailsResponse) *ControllerDetailsResponse {
		return &v
	}).(ControllerDetailsResponsePtrOutput)
}

// controller arm resource id
func (o ControllerDetailsResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControllerDetailsResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ControllerDetailsResponsePtrOutput struct{ *pulumi.OutputState }

func (ControllerDetailsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ControllerDetailsResponse)(nil)).Elem()
}

func (o ControllerDetailsResponsePtrOutput) ToControllerDetailsResponsePtrOutput() ControllerDetailsResponsePtrOutput {
	return o
}

func (o ControllerDetailsResponsePtrOutput) ToControllerDetailsResponsePtrOutputWithContext(ctx context.Context) ControllerDetailsResponsePtrOutput {
	return o
}

func (o ControllerDetailsResponsePtrOutput) Elem() ControllerDetailsResponseOutput {
	return o.ApplyT(func(v *ControllerDetailsResponse) ControllerDetailsResponse { return *v }).(ControllerDetailsResponseOutput)
}

// controller arm resource id
func (o ControllerDetailsResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ControllerDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type OrchestratorIdentity struct {
	// The type of identity used for orchestrator cluster. Type 'SystemAssigned' will use an implicitly created identity orchestrator clusters
	Type *string `pulumi:"type"`
}

// OrchestratorIdentityInput is an input type that accepts OrchestratorIdentityArgs and OrchestratorIdentityOutput values.
// You can construct a concrete instance of `OrchestratorIdentityInput` via:
//
//          OrchestratorIdentityArgs{...}
type OrchestratorIdentityInput interface {
	pulumi.Input

	ToOrchestratorIdentityOutput() OrchestratorIdentityOutput
	ToOrchestratorIdentityOutputWithContext(context.Context) OrchestratorIdentityOutput
}

type OrchestratorIdentityArgs struct {
	// The type of identity used for orchestrator cluster. Type 'SystemAssigned' will use an implicitly created identity orchestrator clusters
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (OrchestratorIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorIdentity)(nil)).Elem()
}

func (i OrchestratorIdentityArgs) ToOrchestratorIdentityOutput() OrchestratorIdentityOutput {
	return i.ToOrchestratorIdentityOutputWithContext(context.Background())
}

func (i OrchestratorIdentityArgs) ToOrchestratorIdentityOutputWithContext(ctx context.Context) OrchestratorIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorIdentityOutput)
}

func (i OrchestratorIdentityArgs) ToOrchestratorIdentityPtrOutput() OrchestratorIdentityPtrOutput {
	return i.ToOrchestratorIdentityPtrOutputWithContext(context.Background())
}

func (i OrchestratorIdentityArgs) ToOrchestratorIdentityPtrOutputWithContext(ctx context.Context) OrchestratorIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorIdentityOutput).ToOrchestratorIdentityPtrOutputWithContext(ctx)
}

// OrchestratorIdentityPtrInput is an input type that accepts OrchestratorIdentityArgs, OrchestratorIdentityPtr and OrchestratorIdentityPtrOutput values.
// You can construct a concrete instance of `OrchestratorIdentityPtrInput` via:
//
//          OrchestratorIdentityArgs{...}
//
//  or:
//
//          nil
type OrchestratorIdentityPtrInput interface {
	pulumi.Input

	ToOrchestratorIdentityPtrOutput() OrchestratorIdentityPtrOutput
	ToOrchestratorIdentityPtrOutputWithContext(context.Context) OrchestratorIdentityPtrOutput
}

type orchestratorIdentityPtrType OrchestratorIdentityArgs

func OrchestratorIdentityPtr(v *OrchestratorIdentityArgs) OrchestratorIdentityPtrInput {
	return (*orchestratorIdentityPtrType)(v)
}

func (*orchestratorIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorIdentity)(nil)).Elem()
}

func (i *orchestratorIdentityPtrType) ToOrchestratorIdentityPtrOutput() OrchestratorIdentityPtrOutput {
	return i.ToOrchestratorIdentityPtrOutputWithContext(context.Background())
}

func (i *orchestratorIdentityPtrType) ToOrchestratorIdentityPtrOutputWithContext(ctx context.Context) OrchestratorIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorIdentityPtrOutput)
}

type OrchestratorIdentityOutput struct{ *pulumi.OutputState }

func (OrchestratorIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorIdentity)(nil)).Elem()
}

func (o OrchestratorIdentityOutput) ToOrchestratorIdentityOutput() OrchestratorIdentityOutput {
	return o
}

func (o OrchestratorIdentityOutput) ToOrchestratorIdentityOutputWithContext(ctx context.Context) OrchestratorIdentityOutput {
	return o
}

func (o OrchestratorIdentityOutput) ToOrchestratorIdentityPtrOutput() OrchestratorIdentityPtrOutput {
	return o.ToOrchestratorIdentityPtrOutputWithContext(context.Background())
}

func (o OrchestratorIdentityOutput) ToOrchestratorIdentityPtrOutputWithContext(ctx context.Context) OrchestratorIdentityPtrOutput {
	return o.ApplyT(func(v OrchestratorIdentity) *OrchestratorIdentity {
		return &v
	}).(OrchestratorIdentityPtrOutput)
}

// The type of identity used for orchestrator cluster. Type 'SystemAssigned' will use an implicitly created identity orchestrator clusters
func (o OrchestratorIdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorIdentity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type OrchestratorIdentityPtrOutput struct{ *pulumi.OutputState }

func (OrchestratorIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorIdentity)(nil)).Elem()
}

func (o OrchestratorIdentityPtrOutput) ToOrchestratorIdentityPtrOutput() OrchestratorIdentityPtrOutput {
	return o
}

func (o OrchestratorIdentityPtrOutput) ToOrchestratorIdentityPtrOutputWithContext(ctx context.Context) OrchestratorIdentityPtrOutput {
	return o
}

func (o OrchestratorIdentityPtrOutput) Elem() OrchestratorIdentityOutput {
	return o.ApplyT(func(v *OrchestratorIdentity) OrchestratorIdentity { return *v }).(OrchestratorIdentityOutput)
}

// The type of identity used for orchestrator cluster. Type 'SystemAssigned' will use an implicitly created identity orchestrator clusters
func (o OrchestratorIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorIdentity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type OrchestratorIdentityResponse struct {
	// The principal id of the system assigned identity which is used by orchestrator.
	PrincipalId string `pulumi:"principalId"`
	// The tenant id of the system assigned identity which is used by orchestrator.
	TenantId string `pulumi:"tenantId"`
	// The type of identity used for orchestrator cluster. Type 'SystemAssigned' will use an implicitly created identity orchestrator clusters
	Type *string `pulumi:"type"`
}

// OrchestratorIdentityResponseInput is an input type that accepts OrchestratorIdentityResponseArgs and OrchestratorIdentityResponseOutput values.
// You can construct a concrete instance of `OrchestratorIdentityResponseInput` via:
//
//          OrchestratorIdentityResponseArgs{...}
type OrchestratorIdentityResponseInput interface {
	pulumi.Input

	ToOrchestratorIdentityResponseOutput() OrchestratorIdentityResponseOutput
	ToOrchestratorIdentityResponseOutputWithContext(context.Context) OrchestratorIdentityResponseOutput
}

type OrchestratorIdentityResponseArgs struct {
	// The principal id of the system assigned identity which is used by orchestrator.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The tenant id of the system assigned identity which is used by orchestrator.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The type of identity used for orchestrator cluster. Type 'SystemAssigned' will use an implicitly created identity orchestrator clusters
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (OrchestratorIdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorIdentityResponse)(nil)).Elem()
}

func (i OrchestratorIdentityResponseArgs) ToOrchestratorIdentityResponseOutput() OrchestratorIdentityResponseOutput {
	return i.ToOrchestratorIdentityResponseOutputWithContext(context.Background())
}

func (i OrchestratorIdentityResponseArgs) ToOrchestratorIdentityResponseOutputWithContext(ctx context.Context) OrchestratorIdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorIdentityResponseOutput)
}

func (i OrchestratorIdentityResponseArgs) ToOrchestratorIdentityResponsePtrOutput() OrchestratorIdentityResponsePtrOutput {
	return i.ToOrchestratorIdentityResponsePtrOutputWithContext(context.Background())
}

func (i OrchestratorIdentityResponseArgs) ToOrchestratorIdentityResponsePtrOutputWithContext(ctx context.Context) OrchestratorIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorIdentityResponseOutput).ToOrchestratorIdentityResponsePtrOutputWithContext(ctx)
}

// OrchestratorIdentityResponsePtrInput is an input type that accepts OrchestratorIdentityResponseArgs, OrchestratorIdentityResponsePtr and OrchestratorIdentityResponsePtrOutput values.
// You can construct a concrete instance of `OrchestratorIdentityResponsePtrInput` via:
//
//          OrchestratorIdentityResponseArgs{...}
//
//  or:
//
//          nil
type OrchestratorIdentityResponsePtrInput interface {
	pulumi.Input

	ToOrchestratorIdentityResponsePtrOutput() OrchestratorIdentityResponsePtrOutput
	ToOrchestratorIdentityResponsePtrOutputWithContext(context.Context) OrchestratorIdentityResponsePtrOutput
}

type orchestratorIdentityResponsePtrType OrchestratorIdentityResponseArgs

func OrchestratorIdentityResponsePtr(v *OrchestratorIdentityResponseArgs) OrchestratorIdentityResponsePtrInput {
	return (*orchestratorIdentityResponsePtrType)(v)
}

func (*orchestratorIdentityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorIdentityResponse)(nil)).Elem()
}

func (i *orchestratorIdentityResponsePtrType) ToOrchestratorIdentityResponsePtrOutput() OrchestratorIdentityResponsePtrOutput {
	return i.ToOrchestratorIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *orchestratorIdentityResponsePtrType) ToOrchestratorIdentityResponsePtrOutputWithContext(ctx context.Context) OrchestratorIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrchestratorIdentityResponsePtrOutput)
}

type OrchestratorIdentityResponseOutput struct{ *pulumi.OutputState }

func (OrchestratorIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrchestratorIdentityResponse)(nil)).Elem()
}

func (o OrchestratorIdentityResponseOutput) ToOrchestratorIdentityResponseOutput() OrchestratorIdentityResponseOutput {
	return o
}

func (o OrchestratorIdentityResponseOutput) ToOrchestratorIdentityResponseOutputWithContext(ctx context.Context) OrchestratorIdentityResponseOutput {
	return o
}

func (o OrchestratorIdentityResponseOutput) ToOrchestratorIdentityResponsePtrOutput() OrchestratorIdentityResponsePtrOutput {
	return o.ToOrchestratorIdentityResponsePtrOutputWithContext(context.Background())
}

func (o OrchestratorIdentityResponseOutput) ToOrchestratorIdentityResponsePtrOutputWithContext(ctx context.Context) OrchestratorIdentityResponsePtrOutput {
	return o.ApplyT(func(v OrchestratorIdentityResponse) *OrchestratorIdentityResponse {
		return &v
	}).(OrchestratorIdentityResponsePtrOutput)
}

// The principal id of the system assigned identity which is used by orchestrator.
func (o OrchestratorIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v OrchestratorIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id of the system assigned identity which is used by orchestrator.
func (o OrchestratorIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v OrchestratorIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for orchestrator cluster. Type 'SystemAssigned' will use an implicitly created identity orchestrator clusters
func (o OrchestratorIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrchestratorIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type OrchestratorIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (OrchestratorIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrchestratorIdentityResponse)(nil)).Elem()
}

func (o OrchestratorIdentityResponsePtrOutput) ToOrchestratorIdentityResponsePtrOutput() OrchestratorIdentityResponsePtrOutput {
	return o
}

func (o OrchestratorIdentityResponsePtrOutput) ToOrchestratorIdentityResponsePtrOutputWithContext(ctx context.Context) OrchestratorIdentityResponsePtrOutput {
	return o
}

func (o OrchestratorIdentityResponsePtrOutput) Elem() OrchestratorIdentityResponseOutput {
	return o.ApplyT(func(v *OrchestratorIdentityResponse) OrchestratorIdentityResponse { return *v }).(OrchestratorIdentityResponseOutput)
}

// The principal id of the system assigned identity which is used by orchestrator.
func (o OrchestratorIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant id of the system assigned identity which is used by orchestrator.
func (o OrchestratorIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for orchestrator cluster. Type 'SystemAssigned' will use an implicitly created identity orchestrator clusters
func (o OrchestratorIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrchestratorIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Properties of orchestrator
type SubnetDetails struct {
	// subnet arm resource id
	Id *string `pulumi:"id"`
}

// SubnetDetailsInput is an input type that accepts SubnetDetailsArgs and SubnetDetailsOutput values.
// You can construct a concrete instance of `SubnetDetailsInput` via:
//
//          SubnetDetailsArgs{...}
type SubnetDetailsInput interface {
	pulumi.Input

	ToSubnetDetailsOutput() SubnetDetailsOutput
	ToSubnetDetailsOutputWithContext(context.Context) SubnetDetailsOutput
}

// Properties of orchestrator
type SubnetDetailsArgs struct {
	// subnet arm resource id
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubnetDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetDetails)(nil)).Elem()
}

func (i SubnetDetailsArgs) ToSubnetDetailsOutput() SubnetDetailsOutput {
	return i.ToSubnetDetailsOutputWithContext(context.Background())
}

func (i SubnetDetailsArgs) ToSubnetDetailsOutputWithContext(ctx context.Context) SubnetDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetDetailsOutput)
}

func (i SubnetDetailsArgs) ToSubnetDetailsPtrOutput() SubnetDetailsPtrOutput {
	return i.ToSubnetDetailsPtrOutputWithContext(context.Background())
}

func (i SubnetDetailsArgs) ToSubnetDetailsPtrOutputWithContext(ctx context.Context) SubnetDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetDetailsOutput).ToSubnetDetailsPtrOutputWithContext(ctx)
}

// SubnetDetailsPtrInput is an input type that accepts SubnetDetailsArgs, SubnetDetailsPtr and SubnetDetailsPtrOutput values.
// You can construct a concrete instance of `SubnetDetailsPtrInput` via:
//
//          SubnetDetailsArgs{...}
//
//  or:
//
//          nil
type SubnetDetailsPtrInput interface {
	pulumi.Input

	ToSubnetDetailsPtrOutput() SubnetDetailsPtrOutput
	ToSubnetDetailsPtrOutputWithContext(context.Context) SubnetDetailsPtrOutput
}

type subnetDetailsPtrType SubnetDetailsArgs

func SubnetDetailsPtr(v *SubnetDetailsArgs) SubnetDetailsPtrInput {
	return (*subnetDetailsPtrType)(v)
}

func (*subnetDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetDetails)(nil)).Elem()
}

func (i *subnetDetailsPtrType) ToSubnetDetailsPtrOutput() SubnetDetailsPtrOutput {
	return i.ToSubnetDetailsPtrOutputWithContext(context.Background())
}

func (i *subnetDetailsPtrType) ToSubnetDetailsPtrOutputWithContext(ctx context.Context) SubnetDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetDetailsPtrOutput)
}

// Properties of orchestrator
type SubnetDetailsOutput struct{ *pulumi.OutputState }

func (SubnetDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetDetails)(nil)).Elem()
}

func (o SubnetDetailsOutput) ToSubnetDetailsOutput() SubnetDetailsOutput {
	return o
}

func (o SubnetDetailsOutput) ToSubnetDetailsOutputWithContext(ctx context.Context) SubnetDetailsOutput {
	return o
}

func (o SubnetDetailsOutput) ToSubnetDetailsPtrOutput() SubnetDetailsPtrOutput {
	return o.ToSubnetDetailsPtrOutputWithContext(context.Background())
}

func (o SubnetDetailsOutput) ToSubnetDetailsPtrOutputWithContext(ctx context.Context) SubnetDetailsPtrOutput {
	return o.ApplyT(func(v SubnetDetails) *SubnetDetails {
		return &v
	}).(SubnetDetailsPtrOutput)
}

// subnet arm resource id
func (o SubnetDetailsOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetDetails) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubnetDetailsPtrOutput struct{ *pulumi.OutputState }

func (SubnetDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetDetails)(nil)).Elem()
}

func (o SubnetDetailsPtrOutput) ToSubnetDetailsPtrOutput() SubnetDetailsPtrOutput {
	return o
}

func (o SubnetDetailsPtrOutput) ToSubnetDetailsPtrOutputWithContext(ctx context.Context) SubnetDetailsPtrOutput {
	return o
}

func (o SubnetDetailsPtrOutput) Elem() SubnetDetailsOutput {
	return o.ApplyT(func(v *SubnetDetails) SubnetDetails { return *v }).(SubnetDetailsOutput)
}

// subnet arm resource id
func (o SubnetDetailsPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetDetails) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Properties of orchestrator
type SubnetDetailsResponse struct {
	// subnet arm resource id
	Id *string `pulumi:"id"`
}

// SubnetDetailsResponseInput is an input type that accepts SubnetDetailsResponseArgs and SubnetDetailsResponseOutput values.
// You can construct a concrete instance of `SubnetDetailsResponseInput` via:
//
//          SubnetDetailsResponseArgs{...}
type SubnetDetailsResponseInput interface {
	pulumi.Input

	ToSubnetDetailsResponseOutput() SubnetDetailsResponseOutput
	ToSubnetDetailsResponseOutputWithContext(context.Context) SubnetDetailsResponseOutput
}

// Properties of orchestrator
type SubnetDetailsResponseArgs struct {
	// subnet arm resource id
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubnetDetailsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetDetailsResponse)(nil)).Elem()
}

func (i SubnetDetailsResponseArgs) ToSubnetDetailsResponseOutput() SubnetDetailsResponseOutput {
	return i.ToSubnetDetailsResponseOutputWithContext(context.Background())
}

func (i SubnetDetailsResponseArgs) ToSubnetDetailsResponseOutputWithContext(ctx context.Context) SubnetDetailsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetDetailsResponseOutput)
}

func (i SubnetDetailsResponseArgs) ToSubnetDetailsResponsePtrOutput() SubnetDetailsResponsePtrOutput {
	return i.ToSubnetDetailsResponsePtrOutputWithContext(context.Background())
}

func (i SubnetDetailsResponseArgs) ToSubnetDetailsResponsePtrOutputWithContext(ctx context.Context) SubnetDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetDetailsResponseOutput).ToSubnetDetailsResponsePtrOutputWithContext(ctx)
}

// SubnetDetailsResponsePtrInput is an input type that accepts SubnetDetailsResponseArgs, SubnetDetailsResponsePtr and SubnetDetailsResponsePtrOutput values.
// You can construct a concrete instance of `SubnetDetailsResponsePtrInput` via:
//
//          SubnetDetailsResponseArgs{...}
//
//  or:
//
//          nil
type SubnetDetailsResponsePtrInput interface {
	pulumi.Input

	ToSubnetDetailsResponsePtrOutput() SubnetDetailsResponsePtrOutput
	ToSubnetDetailsResponsePtrOutputWithContext(context.Context) SubnetDetailsResponsePtrOutput
}

type subnetDetailsResponsePtrType SubnetDetailsResponseArgs

func SubnetDetailsResponsePtr(v *SubnetDetailsResponseArgs) SubnetDetailsResponsePtrInput {
	return (*subnetDetailsResponsePtrType)(v)
}

func (*subnetDetailsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetDetailsResponse)(nil)).Elem()
}

func (i *subnetDetailsResponsePtrType) ToSubnetDetailsResponsePtrOutput() SubnetDetailsResponsePtrOutput {
	return i.ToSubnetDetailsResponsePtrOutputWithContext(context.Background())
}

func (i *subnetDetailsResponsePtrType) ToSubnetDetailsResponsePtrOutputWithContext(ctx context.Context) SubnetDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetDetailsResponsePtrOutput)
}

// Properties of orchestrator
type SubnetDetailsResponseOutput struct{ *pulumi.OutputState }

func (SubnetDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetDetailsResponse)(nil)).Elem()
}

func (o SubnetDetailsResponseOutput) ToSubnetDetailsResponseOutput() SubnetDetailsResponseOutput {
	return o
}

func (o SubnetDetailsResponseOutput) ToSubnetDetailsResponseOutputWithContext(ctx context.Context) SubnetDetailsResponseOutput {
	return o
}

func (o SubnetDetailsResponseOutput) ToSubnetDetailsResponsePtrOutput() SubnetDetailsResponsePtrOutput {
	return o.ToSubnetDetailsResponsePtrOutputWithContext(context.Background())
}

func (o SubnetDetailsResponseOutput) ToSubnetDetailsResponsePtrOutputWithContext(ctx context.Context) SubnetDetailsResponsePtrOutput {
	return o.ApplyT(func(v SubnetDetailsResponse) *SubnetDetailsResponse {
		return &v
	}).(SubnetDetailsResponsePtrOutput)
}

// subnet arm resource id
func (o SubnetDetailsResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetDetailsResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubnetDetailsResponsePtrOutput struct{ *pulumi.OutputState }

func (SubnetDetailsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetDetailsResponse)(nil)).Elem()
}

func (o SubnetDetailsResponsePtrOutput) ToSubnetDetailsResponsePtrOutput() SubnetDetailsResponsePtrOutput {
	return o
}

func (o SubnetDetailsResponsePtrOutput) ToSubnetDetailsResponsePtrOutputWithContext(ctx context.Context) SubnetDetailsResponsePtrOutput {
	return o
}

func (o SubnetDetailsResponsePtrOutput) Elem() SubnetDetailsResponseOutput {
	return o.ApplyT(func(v *SubnetDetailsResponse) SubnetDetailsResponse { return *v }).(SubnetDetailsResponseOutput)
}

// subnet arm resource id
func (o SubnetDetailsResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ControllerDetailsTypeOutput{})
	pulumi.RegisterOutputType(ControllerDetailsTypePtrOutput{})
	pulumi.RegisterOutputType(ControllerDetailsResponseOutput{})
	pulumi.RegisterOutputType(ControllerDetailsResponsePtrOutput{})
	pulumi.RegisterOutputType(OrchestratorIdentityOutput{})
	pulumi.RegisterOutputType(OrchestratorIdentityPtrOutput{})
	pulumi.RegisterOutputType(OrchestratorIdentityResponseOutput{})
	pulumi.RegisterOutputType(OrchestratorIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(SubnetDetailsOutput{})
	pulumi.RegisterOutputType(SubnetDetailsPtrOutput{})
	pulumi.RegisterOutputType(SubnetDetailsResponseOutput{})
	pulumi.RegisterOutputType(SubnetDetailsResponsePtrOutput{})
}
