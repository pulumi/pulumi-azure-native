// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20191101

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// State of the myscope setting.
type Setting struct {
	pulumi.CustomResourceState

	// Array of scopes with additional details used by Cost Management in the Azure portal.
	Cache SettingsPropertiesResponseCacheArrayOutput `pulumi:"cache"`
	// Resource kind.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Sets the default scope the current user will see when they sign into Azure Cost Management in the Azure portal.
	Scope pulumi.StringOutput `pulumi:"scope"`
	// Indicates what scope Cost Management in the Azure portal should default to. Allowed values: LastUsed.
	StartOn pulumi.StringPtrOutput `pulumi:"startOn"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSetting registers a new resource with the given unique name, arguments, and options.
func NewSetting(ctx *pulumi.Context,
	name string, args *SettingArgs, opts ...pulumi.ResourceOption) (*Setting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:costmanagement:Setting"),
		},
	})
	opts = append(opts, aliases)
	var resource Setting
	err := ctx.RegisterResource("azure-native:costmanagement/v20191101:Setting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSetting gets an existing Setting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SettingState, opts ...pulumi.ResourceOption) (*Setting, error) {
	var resource Setting
	err := ctx.ReadResource("azure-native:costmanagement/v20191101:Setting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Setting resources.
type settingState struct {
}

type SettingState struct {
}

func (SettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*settingState)(nil)).Elem()
}

type settingArgs struct {
	// Array of scopes with additional details used by Cost Management in the Azure portal.
	Cache []SettingsPropertiesCache `pulumi:"cache"`
	// Sets the default scope the current user will see when they sign into Azure Cost Management in the Azure portal.
	Scope string `pulumi:"scope"`
	// Name of the setting. Allowed values: myscope
	SettingName *string `pulumi:"settingName"`
	// Indicates what scope Cost Management in the Azure portal should default to. Allowed values: LastUsed.
	StartOn *string `pulumi:"startOn"`
}

// The set of arguments for constructing a Setting resource.
type SettingArgs struct {
	// Array of scopes with additional details used by Cost Management in the Azure portal.
	Cache SettingsPropertiesCacheArrayInput
	// Sets the default scope the current user will see when they sign into Azure Cost Management in the Azure portal.
	Scope pulumi.StringInput
	// Name of the setting. Allowed values: myscope
	SettingName pulumi.StringPtrInput
	// Indicates what scope Cost Management in the Azure portal should default to. Allowed values: LastUsed.
	StartOn pulumi.StringPtrInput
}

func (SettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*settingArgs)(nil)).Elem()
}

type SettingInput interface {
	pulumi.Input

	ToSettingOutput() SettingOutput
	ToSettingOutputWithContext(ctx context.Context) SettingOutput
}

func (*Setting) ElementType() reflect.Type {
	return reflect.TypeOf((**Setting)(nil)).Elem()
}

func (i *Setting) ToSettingOutput() SettingOutput {
	return i.ToSettingOutputWithContext(context.Background())
}

func (i *Setting) ToSettingOutputWithContext(ctx context.Context) SettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingOutput)
}

type SettingOutput struct{ *pulumi.OutputState }

func (SettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Setting)(nil)).Elem()
}

func (o SettingOutput) ToSettingOutput() SettingOutput {
	return o
}

func (o SettingOutput) ToSettingOutputWithContext(ctx context.Context) SettingOutput {
	return o
}

// Array of scopes with additional details used by Cost Management in the Azure portal.
func (o SettingOutput) Cache() SettingsPropertiesResponseCacheArrayOutput {
	return o.ApplyT(func(v *Setting) SettingsPropertiesResponseCacheArrayOutput { return v.Cache }).(SettingsPropertiesResponseCacheArrayOutput)
}

// Resource kind.
func (o SettingOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Resource name.
func (o SettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Sets the default scope the current user will see when they sign into Azure Cost Management in the Azure portal.
func (o SettingOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

// Indicates what scope Cost Management in the Azure portal should default to. Allowed values: LastUsed.
func (o SettingOutput) StartOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringPtrOutput { return v.StartOn }).(pulumi.StringPtrOutput)
}

// Resource type.
func (o SettingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SettingOutput{})
}
