// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190901

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The destination information for the delivery of the export.
type ExportDeliveryDestination struct {
	// The name of the container where exports will be uploaded.
	Container string `pulumi:"container"`
	// The resource id of the storage account where exports will be delivered.
	ResourceId string `pulumi:"resourceId"`
	// The name of the directory where exports will be uploaded.
	RootFolderPath *string `pulumi:"rootFolderPath"`
}

// ExportDeliveryDestinationInput is an input type that accepts ExportDeliveryDestinationArgs and ExportDeliveryDestinationOutput values.
// You can construct a concrete instance of `ExportDeliveryDestinationInput` via:
//
//          ExportDeliveryDestinationArgs{...}
type ExportDeliveryDestinationInput interface {
	pulumi.Input

	ToExportDeliveryDestinationOutput() ExportDeliveryDestinationOutput
	ToExportDeliveryDestinationOutputWithContext(context.Context) ExportDeliveryDestinationOutput
}

// The destination information for the delivery of the export.
type ExportDeliveryDestinationArgs struct {
	// The name of the container where exports will be uploaded.
	Container pulumi.StringInput `pulumi:"container"`
	// The resource id of the storage account where exports will be delivered.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The name of the directory where exports will be uploaded.
	RootFolderPath pulumi.StringPtrInput `pulumi:"rootFolderPath"`
}

func (ExportDeliveryDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryDestination)(nil)).Elem()
}

func (i ExportDeliveryDestinationArgs) ToExportDeliveryDestinationOutput() ExportDeliveryDestinationOutput {
	return i.ToExportDeliveryDestinationOutputWithContext(context.Background())
}

func (i ExportDeliveryDestinationArgs) ToExportDeliveryDestinationOutputWithContext(ctx context.Context) ExportDeliveryDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryDestinationOutput)
}

func (i ExportDeliveryDestinationArgs) ToExportDeliveryDestinationPtrOutput() ExportDeliveryDestinationPtrOutput {
	return i.ToExportDeliveryDestinationPtrOutputWithContext(context.Background())
}

func (i ExportDeliveryDestinationArgs) ToExportDeliveryDestinationPtrOutputWithContext(ctx context.Context) ExportDeliveryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryDestinationOutput).ToExportDeliveryDestinationPtrOutputWithContext(ctx)
}

// ExportDeliveryDestinationPtrInput is an input type that accepts ExportDeliveryDestinationArgs, ExportDeliveryDestinationPtr and ExportDeliveryDestinationPtrOutput values.
// You can construct a concrete instance of `ExportDeliveryDestinationPtrInput` via:
//
//          ExportDeliveryDestinationArgs{...}
//
//  or:
//
//          nil
type ExportDeliveryDestinationPtrInput interface {
	pulumi.Input

	ToExportDeliveryDestinationPtrOutput() ExportDeliveryDestinationPtrOutput
	ToExportDeliveryDestinationPtrOutputWithContext(context.Context) ExportDeliveryDestinationPtrOutput
}

type exportDeliveryDestinationPtrType ExportDeliveryDestinationArgs

func ExportDeliveryDestinationPtr(v *ExportDeliveryDestinationArgs) ExportDeliveryDestinationPtrInput {
	return (*exportDeliveryDestinationPtrType)(v)
}

func (*exportDeliveryDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDeliveryDestination)(nil)).Elem()
}

func (i *exportDeliveryDestinationPtrType) ToExportDeliveryDestinationPtrOutput() ExportDeliveryDestinationPtrOutput {
	return i.ToExportDeliveryDestinationPtrOutputWithContext(context.Background())
}

func (i *exportDeliveryDestinationPtrType) ToExportDeliveryDestinationPtrOutputWithContext(ctx context.Context) ExportDeliveryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryDestinationPtrOutput)
}

// The destination information for the delivery of the export.
type ExportDeliveryDestinationOutput struct{ *pulumi.OutputState }

func (ExportDeliveryDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryDestination)(nil)).Elem()
}

func (o ExportDeliveryDestinationOutput) ToExportDeliveryDestinationOutput() ExportDeliveryDestinationOutput {
	return o
}

func (o ExportDeliveryDestinationOutput) ToExportDeliveryDestinationOutputWithContext(ctx context.Context) ExportDeliveryDestinationOutput {
	return o
}

func (o ExportDeliveryDestinationOutput) ToExportDeliveryDestinationPtrOutput() ExportDeliveryDestinationPtrOutput {
	return o.ToExportDeliveryDestinationPtrOutputWithContext(context.Background())
}

func (o ExportDeliveryDestinationOutput) ToExportDeliveryDestinationPtrOutputWithContext(ctx context.Context) ExportDeliveryDestinationPtrOutput {
	return o.ApplyT(func(v ExportDeliveryDestination) *ExportDeliveryDestination {
		return &v
	}).(ExportDeliveryDestinationPtrOutput)
}

// The name of the container where exports will be uploaded.
func (o ExportDeliveryDestinationOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDeliveryDestination) string { return v.Container }).(pulumi.StringOutput)
}

// The resource id of the storage account where exports will be delivered.
func (o ExportDeliveryDestinationOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDeliveryDestination) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The name of the directory where exports will be uploaded.
func (o ExportDeliveryDestinationOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportDeliveryDestination) *string { return v.RootFolderPath }).(pulumi.StringPtrOutput)
}

type ExportDeliveryDestinationPtrOutput struct{ *pulumi.OutputState }

func (ExportDeliveryDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDeliveryDestination)(nil)).Elem()
}

func (o ExportDeliveryDestinationPtrOutput) ToExportDeliveryDestinationPtrOutput() ExportDeliveryDestinationPtrOutput {
	return o
}

func (o ExportDeliveryDestinationPtrOutput) ToExportDeliveryDestinationPtrOutputWithContext(ctx context.Context) ExportDeliveryDestinationPtrOutput {
	return o
}

func (o ExportDeliveryDestinationPtrOutput) Elem() ExportDeliveryDestinationOutput {
	return o.ApplyT(func(v *ExportDeliveryDestination) ExportDeliveryDestination { return *v }).(ExportDeliveryDestinationOutput)
}

// The name of the container where exports will be uploaded.
func (o ExportDeliveryDestinationPtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDeliveryDestination) *string {
		if v == nil {
			return nil
		}
		return &v.Container
	}).(pulumi.StringPtrOutput)
}

// The resource id of the storage account where exports will be delivered.
func (o ExportDeliveryDestinationPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDeliveryDestination) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The name of the directory where exports will be uploaded.
func (o ExportDeliveryDestinationPtrOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDeliveryDestination) *string {
		if v == nil {
			return nil
		}
		return v.RootFolderPath
	}).(pulumi.StringPtrOutput)
}

// The destination information for the delivery of the export.
type ExportDeliveryDestinationInvokeResponse struct {
	// The name of the container where exports will be uploaded.
	Container string `pulumi:"container"`
	// The resource id of the storage account where exports will be delivered.
	ResourceId string `pulumi:"resourceId"`
	// The name of the directory where exports will be uploaded.
	RootFolderPath *string `pulumi:"rootFolderPath"`
}

// ExportDeliveryDestinationInvokeResponseInput is an input type that accepts ExportDeliveryDestinationInvokeResponseArgs and ExportDeliveryDestinationInvokeResponseOutput values.
// You can construct a concrete instance of `ExportDeliveryDestinationInvokeResponseInput` via:
//
//          ExportDeliveryDestinationInvokeResponseArgs{...}
type ExportDeliveryDestinationInvokeResponseInput interface {
	pulumi.Input

	ToExportDeliveryDestinationInvokeResponseOutput() ExportDeliveryDestinationInvokeResponseOutput
	ToExportDeliveryDestinationInvokeResponseOutputWithContext(context.Context) ExportDeliveryDestinationInvokeResponseOutput
}

// The destination information for the delivery of the export.
type ExportDeliveryDestinationInvokeResponseArgs struct {
	// The name of the container where exports will be uploaded.
	Container pulumi.StringInput `pulumi:"container"`
	// The resource id of the storage account where exports will be delivered.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The name of the directory where exports will be uploaded.
	RootFolderPath pulumi.StringPtrInput `pulumi:"rootFolderPath"`
}

func (ExportDeliveryDestinationInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryDestinationInvokeResponse)(nil)).Elem()
}

func (i ExportDeliveryDestinationInvokeResponseArgs) ToExportDeliveryDestinationInvokeResponseOutput() ExportDeliveryDestinationInvokeResponseOutput {
	return i.ToExportDeliveryDestinationInvokeResponseOutputWithContext(context.Background())
}

func (i ExportDeliveryDestinationInvokeResponseArgs) ToExportDeliveryDestinationInvokeResponseOutputWithContext(ctx context.Context) ExportDeliveryDestinationInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryDestinationInvokeResponseOutput)
}

// The destination information for the delivery of the export.
type ExportDeliveryDestinationInvokeResponseOutput struct{ *pulumi.OutputState }

func (ExportDeliveryDestinationInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryDestinationInvokeResponse)(nil)).Elem()
}

func (o ExportDeliveryDestinationInvokeResponseOutput) ToExportDeliveryDestinationInvokeResponseOutput() ExportDeliveryDestinationInvokeResponseOutput {
	return o
}

func (o ExportDeliveryDestinationInvokeResponseOutput) ToExportDeliveryDestinationInvokeResponseOutputWithContext(ctx context.Context) ExportDeliveryDestinationInvokeResponseOutput {
	return o
}

// The name of the container where exports will be uploaded.
func (o ExportDeliveryDestinationInvokeResponseOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDeliveryDestinationInvokeResponse) string { return v.Container }).(pulumi.StringOutput)
}

// The resource id of the storage account where exports will be delivered.
func (o ExportDeliveryDestinationInvokeResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDeliveryDestinationInvokeResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The name of the directory where exports will be uploaded.
func (o ExportDeliveryDestinationInvokeResponseOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportDeliveryDestinationInvokeResponse) *string { return v.RootFolderPath }).(pulumi.StringPtrOutput)
}

// The destination information for the delivery of the export.
type ExportDeliveryDestinationResponse struct {
	// The name of the container where exports will be uploaded.
	Container string `pulumi:"container"`
	// The resource id of the storage account where exports will be delivered.
	ResourceId string `pulumi:"resourceId"`
	// The name of the directory where exports will be uploaded.
	RootFolderPath *string `pulumi:"rootFolderPath"`
}

// ExportDeliveryDestinationResponseInput is an input type that accepts ExportDeliveryDestinationResponseArgs and ExportDeliveryDestinationResponseOutput values.
// You can construct a concrete instance of `ExportDeliveryDestinationResponseInput` via:
//
//          ExportDeliveryDestinationResponseArgs{...}
type ExportDeliveryDestinationResponseInput interface {
	pulumi.Input

	ToExportDeliveryDestinationResponseOutput() ExportDeliveryDestinationResponseOutput
	ToExportDeliveryDestinationResponseOutputWithContext(context.Context) ExportDeliveryDestinationResponseOutput
}

// The destination information for the delivery of the export.
type ExportDeliveryDestinationResponseArgs struct {
	// The name of the container where exports will be uploaded.
	Container pulumi.StringInput `pulumi:"container"`
	// The resource id of the storage account where exports will be delivered.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The name of the directory where exports will be uploaded.
	RootFolderPath pulumi.StringPtrInput `pulumi:"rootFolderPath"`
}

func (ExportDeliveryDestinationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryDestinationResponse)(nil)).Elem()
}

func (i ExportDeliveryDestinationResponseArgs) ToExportDeliveryDestinationResponseOutput() ExportDeliveryDestinationResponseOutput {
	return i.ToExportDeliveryDestinationResponseOutputWithContext(context.Background())
}

func (i ExportDeliveryDestinationResponseArgs) ToExportDeliveryDestinationResponseOutputWithContext(ctx context.Context) ExportDeliveryDestinationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryDestinationResponseOutput)
}

func (i ExportDeliveryDestinationResponseArgs) ToExportDeliveryDestinationResponsePtrOutput() ExportDeliveryDestinationResponsePtrOutput {
	return i.ToExportDeliveryDestinationResponsePtrOutputWithContext(context.Background())
}

func (i ExportDeliveryDestinationResponseArgs) ToExportDeliveryDestinationResponsePtrOutputWithContext(ctx context.Context) ExportDeliveryDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryDestinationResponseOutput).ToExportDeliveryDestinationResponsePtrOutputWithContext(ctx)
}

// ExportDeliveryDestinationResponsePtrInput is an input type that accepts ExportDeliveryDestinationResponseArgs, ExportDeliveryDestinationResponsePtr and ExportDeliveryDestinationResponsePtrOutput values.
// You can construct a concrete instance of `ExportDeliveryDestinationResponsePtrInput` via:
//
//          ExportDeliveryDestinationResponseArgs{...}
//
//  or:
//
//          nil
type ExportDeliveryDestinationResponsePtrInput interface {
	pulumi.Input

	ToExportDeliveryDestinationResponsePtrOutput() ExportDeliveryDestinationResponsePtrOutput
	ToExportDeliveryDestinationResponsePtrOutputWithContext(context.Context) ExportDeliveryDestinationResponsePtrOutput
}

type exportDeliveryDestinationResponsePtrType ExportDeliveryDestinationResponseArgs

func ExportDeliveryDestinationResponsePtr(v *ExportDeliveryDestinationResponseArgs) ExportDeliveryDestinationResponsePtrInput {
	return (*exportDeliveryDestinationResponsePtrType)(v)
}

func (*exportDeliveryDestinationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDeliveryDestinationResponse)(nil)).Elem()
}

func (i *exportDeliveryDestinationResponsePtrType) ToExportDeliveryDestinationResponsePtrOutput() ExportDeliveryDestinationResponsePtrOutput {
	return i.ToExportDeliveryDestinationResponsePtrOutputWithContext(context.Background())
}

func (i *exportDeliveryDestinationResponsePtrType) ToExportDeliveryDestinationResponsePtrOutputWithContext(ctx context.Context) ExportDeliveryDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryDestinationResponsePtrOutput)
}

// The destination information for the delivery of the export.
type ExportDeliveryDestinationResponseOutput struct{ *pulumi.OutputState }

func (ExportDeliveryDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryDestinationResponse)(nil)).Elem()
}

func (o ExportDeliveryDestinationResponseOutput) ToExportDeliveryDestinationResponseOutput() ExportDeliveryDestinationResponseOutput {
	return o
}

func (o ExportDeliveryDestinationResponseOutput) ToExportDeliveryDestinationResponseOutputWithContext(ctx context.Context) ExportDeliveryDestinationResponseOutput {
	return o
}

func (o ExportDeliveryDestinationResponseOutput) ToExportDeliveryDestinationResponsePtrOutput() ExportDeliveryDestinationResponsePtrOutput {
	return o.ToExportDeliveryDestinationResponsePtrOutputWithContext(context.Background())
}

func (o ExportDeliveryDestinationResponseOutput) ToExportDeliveryDestinationResponsePtrOutputWithContext(ctx context.Context) ExportDeliveryDestinationResponsePtrOutput {
	return o.ApplyT(func(v ExportDeliveryDestinationResponse) *ExportDeliveryDestinationResponse {
		return &v
	}).(ExportDeliveryDestinationResponsePtrOutput)
}

// The name of the container where exports will be uploaded.
func (o ExportDeliveryDestinationResponseOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDeliveryDestinationResponse) string { return v.Container }).(pulumi.StringOutput)
}

// The resource id of the storage account where exports will be delivered.
func (o ExportDeliveryDestinationResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDeliveryDestinationResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The name of the directory where exports will be uploaded.
func (o ExportDeliveryDestinationResponseOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportDeliveryDestinationResponse) *string { return v.RootFolderPath }).(pulumi.StringPtrOutput)
}

type ExportDeliveryDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportDeliveryDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDeliveryDestinationResponse)(nil)).Elem()
}

func (o ExportDeliveryDestinationResponsePtrOutput) ToExportDeliveryDestinationResponsePtrOutput() ExportDeliveryDestinationResponsePtrOutput {
	return o
}

func (o ExportDeliveryDestinationResponsePtrOutput) ToExportDeliveryDestinationResponsePtrOutputWithContext(ctx context.Context) ExportDeliveryDestinationResponsePtrOutput {
	return o
}

func (o ExportDeliveryDestinationResponsePtrOutput) Elem() ExportDeliveryDestinationResponseOutput {
	return o.ApplyT(func(v *ExportDeliveryDestinationResponse) ExportDeliveryDestinationResponse { return *v }).(ExportDeliveryDestinationResponseOutput)
}

// The name of the container where exports will be uploaded.
func (o ExportDeliveryDestinationResponsePtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Container
	}).(pulumi.StringPtrOutput)
}

// The resource id of the storage account where exports will be delivered.
func (o ExportDeliveryDestinationResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The name of the directory where exports will be uploaded.
func (o ExportDeliveryDestinationResponsePtrOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RootFolderPath
	}).(pulumi.StringPtrOutput)
}

// The delivery information associated with a export.
type ExportDeliveryInfo struct {
	// Has destination for the export being delivered.
	Destination ExportDeliveryDestination `pulumi:"destination"`
}

// ExportDeliveryInfoInput is an input type that accepts ExportDeliveryInfoArgs and ExportDeliveryInfoOutput values.
// You can construct a concrete instance of `ExportDeliveryInfoInput` via:
//
//          ExportDeliveryInfoArgs{...}
type ExportDeliveryInfoInput interface {
	pulumi.Input

	ToExportDeliveryInfoOutput() ExportDeliveryInfoOutput
	ToExportDeliveryInfoOutputWithContext(context.Context) ExportDeliveryInfoOutput
}

// The delivery information associated with a export.
type ExportDeliveryInfoArgs struct {
	// Has destination for the export being delivered.
	Destination ExportDeliveryDestinationInput `pulumi:"destination"`
}

func (ExportDeliveryInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryInfo)(nil)).Elem()
}

func (i ExportDeliveryInfoArgs) ToExportDeliveryInfoOutput() ExportDeliveryInfoOutput {
	return i.ToExportDeliveryInfoOutputWithContext(context.Background())
}

func (i ExportDeliveryInfoArgs) ToExportDeliveryInfoOutputWithContext(ctx context.Context) ExportDeliveryInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryInfoOutput)
}

func (i ExportDeliveryInfoArgs) ToExportDeliveryInfoPtrOutput() ExportDeliveryInfoPtrOutput {
	return i.ToExportDeliveryInfoPtrOutputWithContext(context.Background())
}

func (i ExportDeliveryInfoArgs) ToExportDeliveryInfoPtrOutputWithContext(ctx context.Context) ExportDeliveryInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryInfoOutput).ToExportDeliveryInfoPtrOutputWithContext(ctx)
}

// ExportDeliveryInfoPtrInput is an input type that accepts ExportDeliveryInfoArgs, ExportDeliveryInfoPtr and ExportDeliveryInfoPtrOutput values.
// You can construct a concrete instance of `ExportDeliveryInfoPtrInput` via:
//
//          ExportDeliveryInfoArgs{...}
//
//  or:
//
//          nil
type ExportDeliveryInfoPtrInput interface {
	pulumi.Input

	ToExportDeliveryInfoPtrOutput() ExportDeliveryInfoPtrOutput
	ToExportDeliveryInfoPtrOutputWithContext(context.Context) ExportDeliveryInfoPtrOutput
}

type exportDeliveryInfoPtrType ExportDeliveryInfoArgs

func ExportDeliveryInfoPtr(v *ExportDeliveryInfoArgs) ExportDeliveryInfoPtrInput {
	return (*exportDeliveryInfoPtrType)(v)
}

func (*exportDeliveryInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDeliveryInfo)(nil)).Elem()
}

func (i *exportDeliveryInfoPtrType) ToExportDeliveryInfoPtrOutput() ExportDeliveryInfoPtrOutput {
	return i.ToExportDeliveryInfoPtrOutputWithContext(context.Background())
}

func (i *exportDeliveryInfoPtrType) ToExportDeliveryInfoPtrOutputWithContext(ctx context.Context) ExportDeliveryInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryInfoPtrOutput)
}

// The delivery information associated with a export.
type ExportDeliveryInfoOutput struct{ *pulumi.OutputState }

func (ExportDeliveryInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryInfo)(nil)).Elem()
}

func (o ExportDeliveryInfoOutput) ToExportDeliveryInfoOutput() ExportDeliveryInfoOutput {
	return o
}

func (o ExportDeliveryInfoOutput) ToExportDeliveryInfoOutputWithContext(ctx context.Context) ExportDeliveryInfoOutput {
	return o
}

func (o ExportDeliveryInfoOutput) ToExportDeliveryInfoPtrOutput() ExportDeliveryInfoPtrOutput {
	return o.ToExportDeliveryInfoPtrOutputWithContext(context.Background())
}

func (o ExportDeliveryInfoOutput) ToExportDeliveryInfoPtrOutputWithContext(ctx context.Context) ExportDeliveryInfoPtrOutput {
	return o.ApplyT(func(v ExportDeliveryInfo) *ExportDeliveryInfo {
		return &v
	}).(ExportDeliveryInfoPtrOutput)
}

// Has destination for the export being delivered.
func (o ExportDeliveryInfoOutput) Destination() ExportDeliveryDestinationOutput {
	return o.ApplyT(func(v ExportDeliveryInfo) ExportDeliveryDestination { return v.Destination }).(ExportDeliveryDestinationOutput)
}

type ExportDeliveryInfoPtrOutput struct{ *pulumi.OutputState }

func (ExportDeliveryInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDeliveryInfo)(nil)).Elem()
}

func (o ExportDeliveryInfoPtrOutput) ToExportDeliveryInfoPtrOutput() ExportDeliveryInfoPtrOutput {
	return o
}

func (o ExportDeliveryInfoPtrOutput) ToExportDeliveryInfoPtrOutputWithContext(ctx context.Context) ExportDeliveryInfoPtrOutput {
	return o
}

func (o ExportDeliveryInfoPtrOutput) Elem() ExportDeliveryInfoOutput {
	return o.ApplyT(func(v *ExportDeliveryInfo) ExportDeliveryInfo { return *v }).(ExportDeliveryInfoOutput)
}

// Has destination for the export being delivered.
func (o ExportDeliveryInfoPtrOutput) Destination() ExportDeliveryDestinationPtrOutput {
	return o.ApplyT(func(v *ExportDeliveryInfo) *ExportDeliveryDestination {
		if v == nil {
			return nil
		}
		return &v.Destination
	}).(ExportDeliveryDestinationPtrOutput)
}

// The delivery information associated with a export.
type ExportDeliveryInfoInvokeResponse struct {
	// Has destination for the export being delivered.
	Destination ExportDeliveryDestinationInvokeResponse `pulumi:"destination"`
}

// ExportDeliveryInfoInvokeResponseInput is an input type that accepts ExportDeliveryInfoInvokeResponseArgs and ExportDeliveryInfoInvokeResponseOutput values.
// You can construct a concrete instance of `ExportDeliveryInfoInvokeResponseInput` via:
//
//          ExportDeliveryInfoInvokeResponseArgs{...}
type ExportDeliveryInfoInvokeResponseInput interface {
	pulumi.Input

	ToExportDeliveryInfoInvokeResponseOutput() ExportDeliveryInfoInvokeResponseOutput
	ToExportDeliveryInfoInvokeResponseOutputWithContext(context.Context) ExportDeliveryInfoInvokeResponseOutput
}

// The delivery information associated with a export.
type ExportDeliveryInfoInvokeResponseArgs struct {
	// Has destination for the export being delivered.
	Destination ExportDeliveryDestinationInvokeResponseInput `pulumi:"destination"`
}

func (ExportDeliveryInfoInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryInfoInvokeResponse)(nil)).Elem()
}

func (i ExportDeliveryInfoInvokeResponseArgs) ToExportDeliveryInfoInvokeResponseOutput() ExportDeliveryInfoInvokeResponseOutput {
	return i.ToExportDeliveryInfoInvokeResponseOutputWithContext(context.Background())
}

func (i ExportDeliveryInfoInvokeResponseArgs) ToExportDeliveryInfoInvokeResponseOutputWithContext(ctx context.Context) ExportDeliveryInfoInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryInfoInvokeResponseOutput)
}

// The delivery information associated with a export.
type ExportDeliveryInfoInvokeResponseOutput struct{ *pulumi.OutputState }

func (ExportDeliveryInfoInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryInfoInvokeResponse)(nil)).Elem()
}

func (o ExportDeliveryInfoInvokeResponseOutput) ToExportDeliveryInfoInvokeResponseOutput() ExportDeliveryInfoInvokeResponseOutput {
	return o
}

func (o ExportDeliveryInfoInvokeResponseOutput) ToExportDeliveryInfoInvokeResponseOutputWithContext(ctx context.Context) ExportDeliveryInfoInvokeResponseOutput {
	return o
}

// Has destination for the export being delivered.
func (o ExportDeliveryInfoInvokeResponseOutput) Destination() ExportDeliveryDestinationInvokeResponseOutput {
	return o.ApplyT(func(v ExportDeliveryInfoInvokeResponse) ExportDeliveryDestinationInvokeResponse { return v.Destination }).(ExportDeliveryDestinationInvokeResponseOutput)
}

// The delivery information associated with a export.
type ExportDeliveryInfoResponse struct {
	// Has destination for the export being delivered.
	Destination ExportDeliveryDestinationResponse `pulumi:"destination"`
}

// ExportDeliveryInfoResponseInput is an input type that accepts ExportDeliveryInfoResponseArgs and ExportDeliveryInfoResponseOutput values.
// You can construct a concrete instance of `ExportDeliveryInfoResponseInput` via:
//
//          ExportDeliveryInfoResponseArgs{...}
type ExportDeliveryInfoResponseInput interface {
	pulumi.Input

	ToExportDeliveryInfoResponseOutput() ExportDeliveryInfoResponseOutput
	ToExportDeliveryInfoResponseOutputWithContext(context.Context) ExportDeliveryInfoResponseOutput
}

// The delivery information associated with a export.
type ExportDeliveryInfoResponseArgs struct {
	// Has destination for the export being delivered.
	Destination ExportDeliveryDestinationResponseInput `pulumi:"destination"`
}

func (ExportDeliveryInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryInfoResponse)(nil)).Elem()
}

func (i ExportDeliveryInfoResponseArgs) ToExportDeliveryInfoResponseOutput() ExportDeliveryInfoResponseOutput {
	return i.ToExportDeliveryInfoResponseOutputWithContext(context.Background())
}

func (i ExportDeliveryInfoResponseArgs) ToExportDeliveryInfoResponseOutputWithContext(ctx context.Context) ExportDeliveryInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryInfoResponseOutput)
}

func (i ExportDeliveryInfoResponseArgs) ToExportDeliveryInfoResponsePtrOutput() ExportDeliveryInfoResponsePtrOutput {
	return i.ToExportDeliveryInfoResponsePtrOutputWithContext(context.Background())
}

func (i ExportDeliveryInfoResponseArgs) ToExportDeliveryInfoResponsePtrOutputWithContext(ctx context.Context) ExportDeliveryInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryInfoResponseOutput).ToExportDeliveryInfoResponsePtrOutputWithContext(ctx)
}

// ExportDeliveryInfoResponsePtrInput is an input type that accepts ExportDeliveryInfoResponseArgs, ExportDeliveryInfoResponsePtr and ExportDeliveryInfoResponsePtrOutput values.
// You can construct a concrete instance of `ExportDeliveryInfoResponsePtrInput` via:
//
//          ExportDeliveryInfoResponseArgs{...}
//
//  or:
//
//          nil
type ExportDeliveryInfoResponsePtrInput interface {
	pulumi.Input

	ToExportDeliveryInfoResponsePtrOutput() ExportDeliveryInfoResponsePtrOutput
	ToExportDeliveryInfoResponsePtrOutputWithContext(context.Context) ExportDeliveryInfoResponsePtrOutput
}

type exportDeliveryInfoResponsePtrType ExportDeliveryInfoResponseArgs

func ExportDeliveryInfoResponsePtr(v *ExportDeliveryInfoResponseArgs) ExportDeliveryInfoResponsePtrInput {
	return (*exportDeliveryInfoResponsePtrType)(v)
}

func (*exportDeliveryInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDeliveryInfoResponse)(nil)).Elem()
}

func (i *exportDeliveryInfoResponsePtrType) ToExportDeliveryInfoResponsePtrOutput() ExportDeliveryInfoResponsePtrOutput {
	return i.ToExportDeliveryInfoResponsePtrOutputWithContext(context.Background())
}

func (i *exportDeliveryInfoResponsePtrType) ToExportDeliveryInfoResponsePtrOutputWithContext(ctx context.Context) ExportDeliveryInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryInfoResponsePtrOutput)
}

// The delivery information associated with a export.
type ExportDeliveryInfoResponseOutput struct{ *pulumi.OutputState }

func (ExportDeliveryInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryInfoResponse)(nil)).Elem()
}

func (o ExportDeliveryInfoResponseOutput) ToExportDeliveryInfoResponseOutput() ExportDeliveryInfoResponseOutput {
	return o
}

func (o ExportDeliveryInfoResponseOutput) ToExportDeliveryInfoResponseOutputWithContext(ctx context.Context) ExportDeliveryInfoResponseOutput {
	return o
}

func (o ExportDeliveryInfoResponseOutput) ToExportDeliveryInfoResponsePtrOutput() ExportDeliveryInfoResponsePtrOutput {
	return o.ToExportDeliveryInfoResponsePtrOutputWithContext(context.Background())
}

func (o ExportDeliveryInfoResponseOutput) ToExportDeliveryInfoResponsePtrOutputWithContext(ctx context.Context) ExportDeliveryInfoResponsePtrOutput {
	return o.ApplyT(func(v ExportDeliveryInfoResponse) *ExportDeliveryInfoResponse {
		return &v
	}).(ExportDeliveryInfoResponsePtrOutput)
}

// Has destination for the export being delivered.
func (o ExportDeliveryInfoResponseOutput) Destination() ExportDeliveryDestinationResponseOutput {
	return o.ApplyT(func(v ExportDeliveryInfoResponse) ExportDeliveryDestinationResponse { return v.Destination }).(ExportDeliveryDestinationResponseOutput)
}

type ExportDeliveryInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportDeliveryInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDeliveryInfoResponse)(nil)).Elem()
}

func (o ExportDeliveryInfoResponsePtrOutput) ToExportDeliveryInfoResponsePtrOutput() ExportDeliveryInfoResponsePtrOutput {
	return o
}

func (o ExportDeliveryInfoResponsePtrOutput) ToExportDeliveryInfoResponsePtrOutputWithContext(ctx context.Context) ExportDeliveryInfoResponsePtrOutput {
	return o
}

func (o ExportDeliveryInfoResponsePtrOutput) Elem() ExportDeliveryInfoResponseOutput {
	return o.ApplyT(func(v *ExportDeliveryInfoResponse) ExportDeliveryInfoResponse { return *v }).(ExportDeliveryInfoResponseOutput)
}

// Has destination for the export being delivered.
func (o ExportDeliveryInfoResponsePtrOutput) Destination() ExportDeliveryDestinationResponsePtrOutput {
	return o.ApplyT(func(v *ExportDeliveryInfoResponse) *ExportDeliveryDestinationResponse {
		if v == nil {
			return nil
		}
		return &v.Destination
	}).(ExportDeliveryDestinationResponsePtrOutput)
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriod struct {
	// The start date of recurrence.
	From string `pulumi:"from"`
	// The end date of recurrence.
	To *string `pulumi:"to"`
}

// ExportRecurrencePeriodInput is an input type that accepts ExportRecurrencePeriodArgs and ExportRecurrencePeriodOutput values.
// You can construct a concrete instance of `ExportRecurrencePeriodInput` via:
//
//          ExportRecurrencePeriodArgs{...}
type ExportRecurrencePeriodInput interface {
	pulumi.Input

	ToExportRecurrencePeriodOutput() ExportRecurrencePeriodOutput
	ToExportRecurrencePeriodOutputWithContext(context.Context) ExportRecurrencePeriodOutput
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriodArgs struct {
	// The start date of recurrence.
	From pulumi.StringInput `pulumi:"from"`
	// The end date of recurrence.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (ExportRecurrencePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportRecurrencePeriod)(nil)).Elem()
}

func (i ExportRecurrencePeriodArgs) ToExportRecurrencePeriodOutput() ExportRecurrencePeriodOutput {
	return i.ToExportRecurrencePeriodOutputWithContext(context.Background())
}

func (i ExportRecurrencePeriodArgs) ToExportRecurrencePeriodOutputWithContext(ctx context.Context) ExportRecurrencePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRecurrencePeriodOutput)
}

func (i ExportRecurrencePeriodArgs) ToExportRecurrencePeriodPtrOutput() ExportRecurrencePeriodPtrOutput {
	return i.ToExportRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (i ExportRecurrencePeriodArgs) ToExportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRecurrencePeriodOutput).ToExportRecurrencePeriodPtrOutputWithContext(ctx)
}

// ExportRecurrencePeriodPtrInput is an input type that accepts ExportRecurrencePeriodArgs, ExportRecurrencePeriodPtr and ExportRecurrencePeriodPtrOutput values.
// You can construct a concrete instance of `ExportRecurrencePeriodPtrInput` via:
//
//          ExportRecurrencePeriodArgs{...}
//
//  or:
//
//          nil
type ExportRecurrencePeriodPtrInput interface {
	pulumi.Input

	ToExportRecurrencePeriodPtrOutput() ExportRecurrencePeriodPtrOutput
	ToExportRecurrencePeriodPtrOutputWithContext(context.Context) ExportRecurrencePeriodPtrOutput
}

type exportRecurrencePeriodPtrType ExportRecurrencePeriodArgs

func ExportRecurrencePeriodPtr(v *ExportRecurrencePeriodArgs) ExportRecurrencePeriodPtrInput {
	return (*exportRecurrencePeriodPtrType)(v)
}

func (*exportRecurrencePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportRecurrencePeriod)(nil)).Elem()
}

func (i *exportRecurrencePeriodPtrType) ToExportRecurrencePeriodPtrOutput() ExportRecurrencePeriodPtrOutput {
	return i.ToExportRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (i *exportRecurrencePeriodPtrType) ToExportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRecurrencePeriodPtrOutput)
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriodOutput struct{ *pulumi.OutputState }

func (ExportRecurrencePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportRecurrencePeriod)(nil)).Elem()
}

func (o ExportRecurrencePeriodOutput) ToExportRecurrencePeriodOutput() ExportRecurrencePeriodOutput {
	return o
}

func (o ExportRecurrencePeriodOutput) ToExportRecurrencePeriodOutputWithContext(ctx context.Context) ExportRecurrencePeriodOutput {
	return o
}

func (o ExportRecurrencePeriodOutput) ToExportRecurrencePeriodPtrOutput() ExportRecurrencePeriodPtrOutput {
	return o.ToExportRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (o ExportRecurrencePeriodOutput) ToExportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodPtrOutput {
	return o.ApplyT(func(v ExportRecurrencePeriod) *ExportRecurrencePeriod {
		return &v
	}).(ExportRecurrencePeriodPtrOutput)
}

// The start date of recurrence.
func (o ExportRecurrencePeriodOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ExportRecurrencePeriod) string { return v.From }).(pulumi.StringOutput)
}

// The end date of recurrence.
func (o ExportRecurrencePeriodOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportRecurrencePeriod) *string { return v.To }).(pulumi.StringPtrOutput)
}

type ExportRecurrencePeriodPtrOutput struct{ *pulumi.OutputState }

func (ExportRecurrencePeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportRecurrencePeriod)(nil)).Elem()
}

func (o ExportRecurrencePeriodPtrOutput) ToExportRecurrencePeriodPtrOutput() ExportRecurrencePeriodPtrOutput {
	return o
}

func (o ExportRecurrencePeriodPtrOutput) ToExportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodPtrOutput {
	return o
}

func (o ExportRecurrencePeriodPtrOutput) Elem() ExportRecurrencePeriodOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriod) ExportRecurrencePeriod { return *v }).(ExportRecurrencePeriodOutput)
}

// The start date of recurrence.
func (o ExportRecurrencePeriodPtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date of recurrence.
func (o ExportRecurrencePeriodPtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriod) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriodInvokeResponse struct {
	// The start date of recurrence.
	From string `pulumi:"from"`
	// The end date of recurrence.
	To *string `pulumi:"to"`
}

// ExportRecurrencePeriodInvokeResponseInput is an input type that accepts ExportRecurrencePeriodInvokeResponseArgs and ExportRecurrencePeriodInvokeResponseOutput values.
// You can construct a concrete instance of `ExportRecurrencePeriodInvokeResponseInput` via:
//
//          ExportRecurrencePeriodInvokeResponseArgs{...}
type ExportRecurrencePeriodInvokeResponseInput interface {
	pulumi.Input

	ToExportRecurrencePeriodInvokeResponseOutput() ExportRecurrencePeriodInvokeResponseOutput
	ToExportRecurrencePeriodInvokeResponseOutputWithContext(context.Context) ExportRecurrencePeriodInvokeResponseOutput
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriodInvokeResponseArgs struct {
	// The start date of recurrence.
	From pulumi.StringInput `pulumi:"from"`
	// The end date of recurrence.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (ExportRecurrencePeriodInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportRecurrencePeriodInvokeResponse)(nil)).Elem()
}

func (i ExportRecurrencePeriodInvokeResponseArgs) ToExportRecurrencePeriodInvokeResponseOutput() ExportRecurrencePeriodInvokeResponseOutput {
	return i.ToExportRecurrencePeriodInvokeResponseOutputWithContext(context.Background())
}

func (i ExportRecurrencePeriodInvokeResponseArgs) ToExportRecurrencePeriodInvokeResponseOutputWithContext(ctx context.Context) ExportRecurrencePeriodInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRecurrencePeriodInvokeResponseOutput)
}

func (i ExportRecurrencePeriodInvokeResponseArgs) ToExportRecurrencePeriodInvokeResponsePtrOutput() ExportRecurrencePeriodInvokeResponsePtrOutput {
	return i.ToExportRecurrencePeriodInvokeResponsePtrOutputWithContext(context.Background())
}

func (i ExportRecurrencePeriodInvokeResponseArgs) ToExportRecurrencePeriodInvokeResponsePtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRecurrencePeriodInvokeResponseOutput).ToExportRecurrencePeriodInvokeResponsePtrOutputWithContext(ctx)
}

// ExportRecurrencePeriodInvokeResponsePtrInput is an input type that accepts ExportRecurrencePeriodInvokeResponseArgs, ExportRecurrencePeriodInvokeResponsePtr and ExportRecurrencePeriodInvokeResponsePtrOutput values.
// You can construct a concrete instance of `ExportRecurrencePeriodInvokeResponsePtrInput` via:
//
//          ExportRecurrencePeriodInvokeResponseArgs{...}
//
//  or:
//
//          nil
type ExportRecurrencePeriodInvokeResponsePtrInput interface {
	pulumi.Input

	ToExportRecurrencePeriodInvokeResponsePtrOutput() ExportRecurrencePeriodInvokeResponsePtrOutput
	ToExportRecurrencePeriodInvokeResponsePtrOutputWithContext(context.Context) ExportRecurrencePeriodInvokeResponsePtrOutput
}

type exportRecurrencePeriodInvokeResponsePtrType ExportRecurrencePeriodInvokeResponseArgs

func ExportRecurrencePeriodInvokeResponsePtr(v *ExportRecurrencePeriodInvokeResponseArgs) ExportRecurrencePeriodInvokeResponsePtrInput {
	return (*exportRecurrencePeriodInvokeResponsePtrType)(v)
}

func (*exportRecurrencePeriodInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportRecurrencePeriodInvokeResponse)(nil)).Elem()
}

func (i *exportRecurrencePeriodInvokeResponsePtrType) ToExportRecurrencePeriodInvokeResponsePtrOutput() ExportRecurrencePeriodInvokeResponsePtrOutput {
	return i.ToExportRecurrencePeriodInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *exportRecurrencePeriodInvokeResponsePtrType) ToExportRecurrencePeriodInvokeResponsePtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRecurrencePeriodInvokeResponsePtrOutput)
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriodInvokeResponseOutput struct{ *pulumi.OutputState }

func (ExportRecurrencePeriodInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportRecurrencePeriodInvokeResponse)(nil)).Elem()
}

func (o ExportRecurrencePeriodInvokeResponseOutput) ToExportRecurrencePeriodInvokeResponseOutput() ExportRecurrencePeriodInvokeResponseOutput {
	return o
}

func (o ExportRecurrencePeriodInvokeResponseOutput) ToExportRecurrencePeriodInvokeResponseOutputWithContext(ctx context.Context) ExportRecurrencePeriodInvokeResponseOutput {
	return o
}

func (o ExportRecurrencePeriodInvokeResponseOutput) ToExportRecurrencePeriodInvokeResponsePtrOutput() ExportRecurrencePeriodInvokeResponsePtrOutput {
	return o.ToExportRecurrencePeriodInvokeResponsePtrOutputWithContext(context.Background())
}

func (o ExportRecurrencePeriodInvokeResponseOutput) ToExportRecurrencePeriodInvokeResponsePtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodInvokeResponsePtrOutput {
	return o.ApplyT(func(v ExportRecurrencePeriodInvokeResponse) *ExportRecurrencePeriodInvokeResponse {
		return &v
	}).(ExportRecurrencePeriodInvokeResponsePtrOutput)
}

// The start date of recurrence.
func (o ExportRecurrencePeriodInvokeResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ExportRecurrencePeriodInvokeResponse) string { return v.From }).(pulumi.StringOutput)
}

// The end date of recurrence.
func (o ExportRecurrencePeriodInvokeResponseOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportRecurrencePeriodInvokeResponse) *string { return v.To }).(pulumi.StringPtrOutput)
}

type ExportRecurrencePeriodInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportRecurrencePeriodInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportRecurrencePeriodInvokeResponse)(nil)).Elem()
}

func (o ExportRecurrencePeriodInvokeResponsePtrOutput) ToExportRecurrencePeriodInvokeResponsePtrOutput() ExportRecurrencePeriodInvokeResponsePtrOutput {
	return o
}

func (o ExportRecurrencePeriodInvokeResponsePtrOutput) ToExportRecurrencePeriodInvokeResponsePtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodInvokeResponsePtrOutput {
	return o
}

func (o ExportRecurrencePeriodInvokeResponsePtrOutput) Elem() ExportRecurrencePeriodInvokeResponseOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriodInvokeResponse) ExportRecurrencePeriodInvokeResponse { return *v }).(ExportRecurrencePeriodInvokeResponseOutput)
}

// The start date of recurrence.
func (o ExportRecurrencePeriodInvokeResponsePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriodInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date of recurrence.
func (o ExportRecurrencePeriodInvokeResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriodInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriodResponse struct {
	// The start date of recurrence.
	From string `pulumi:"from"`
	// The end date of recurrence.
	To *string `pulumi:"to"`
}

// ExportRecurrencePeriodResponseInput is an input type that accepts ExportRecurrencePeriodResponseArgs and ExportRecurrencePeriodResponseOutput values.
// You can construct a concrete instance of `ExportRecurrencePeriodResponseInput` via:
//
//          ExportRecurrencePeriodResponseArgs{...}
type ExportRecurrencePeriodResponseInput interface {
	pulumi.Input

	ToExportRecurrencePeriodResponseOutput() ExportRecurrencePeriodResponseOutput
	ToExportRecurrencePeriodResponseOutputWithContext(context.Context) ExportRecurrencePeriodResponseOutput
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriodResponseArgs struct {
	// The start date of recurrence.
	From pulumi.StringInput `pulumi:"from"`
	// The end date of recurrence.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (ExportRecurrencePeriodResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportRecurrencePeriodResponse)(nil)).Elem()
}

func (i ExportRecurrencePeriodResponseArgs) ToExportRecurrencePeriodResponseOutput() ExportRecurrencePeriodResponseOutput {
	return i.ToExportRecurrencePeriodResponseOutputWithContext(context.Background())
}

func (i ExportRecurrencePeriodResponseArgs) ToExportRecurrencePeriodResponseOutputWithContext(ctx context.Context) ExportRecurrencePeriodResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRecurrencePeriodResponseOutput)
}

func (i ExportRecurrencePeriodResponseArgs) ToExportRecurrencePeriodResponsePtrOutput() ExportRecurrencePeriodResponsePtrOutput {
	return i.ToExportRecurrencePeriodResponsePtrOutputWithContext(context.Background())
}

func (i ExportRecurrencePeriodResponseArgs) ToExportRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRecurrencePeriodResponseOutput).ToExportRecurrencePeriodResponsePtrOutputWithContext(ctx)
}

// ExportRecurrencePeriodResponsePtrInput is an input type that accepts ExportRecurrencePeriodResponseArgs, ExportRecurrencePeriodResponsePtr and ExportRecurrencePeriodResponsePtrOutput values.
// You can construct a concrete instance of `ExportRecurrencePeriodResponsePtrInput` via:
//
//          ExportRecurrencePeriodResponseArgs{...}
//
//  or:
//
//          nil
type ExportRecurrencePeriodResponsePtrInput interface {
	pulumi.Input

	ToExportRecurrencePeriodResponsePtrOutput() ExportRecurrencePeriodResponsePtrOutput
	ToExportRecurrencePeriodResponsePtrOutputWithContext(context.Context) ExportRecurrencePeriodResponsePtrOutput
}

type exportRecurrencePeriodResponsePtrType ExportRecurrencePeriodResponseArgs

func ExportRecurrencePeriodResponsePtr(v *ExportRecurrencePeriodResponseArgs) ExportRecurrencePeriodResponsePtrInput {
	return (*exportRecurrencePeriodResponsePtrType)(v)
}

func (*exportRecurrencePeriodResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportRecurrencePeriodResponse)(nil)).Elem()
}

func (i *exportRecurrencePeriodResponsePtrType) ToExportRecurrencePeriodResponsePtrOutput() ExportRecurrencePeriodResponsePtrOutput {
	return i.ToExportRecurrencePeriodResponsePtrOutputWithContext(context.Background())
}

func (i *exportRecurrencePeriodResponsePtrType) ToExportRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRecurrencePeriodResponsePtrOutput)
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriodResponseOutput struct{ *pulumi.OutputState }

func (ExportRecurrencePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportRecurrencePeriodResponse)(nil)).Elem()
}

func (o ExportRecurrencePeriodResponseOutput) ToExportRecurrencePeriodResponseOutput() ExportRecurrencePeriodResponseOutput {
	return o
}

func (o ExportRecurrencePeriodResponseOutput) ToExportRecurrencePeriodResponseOutputWithContext(ctx context.Context) ExportRecurrencePeriodResponseOutput {
	return o
}

func (o ExportRecurrencePeriodResponseOutput) ToExportRecurrencePeriodResponsePtrOutput() ExportRecurrencePeriodResponsePtrOutput {
	return o.ToExportRecurrencePeriodResponsePtrOutputWithContext(context.Background())
}

func (o ExportRecurrencePeriodResponseOutput) ToExportRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v ExportRecurrencePeriodResponse) *ExportRecurrencePeriodResponse {
		return &v
	}).(ExportRecurrencePeriodResponsePtrOutput)
}

// The start date of recurrence.
func (o ExportRecurrencePeriodResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ExportRecurrencePeriodResponse) string { return v.From }).(pulumi.StringOutput)
}

// The end date of recurrence.
func (o ExportRecurrencePeriodResponseOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportRecurrencePeriodResponse) *string { return v.To }).(pulumi.StringPtrOutput)
}

type ExportRecurrencePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportRecurrencePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportRecurrencePeriodResponse)(nil)).Elem()
}

func (o ExportRecurrencePeriodResponsePtrOutput) ToExportRecurrencePeriodResponsePtrOutput() ExportRecurrencePeriodResponsePtrOutput {
	return o
}

func (o ExportRecurrencePeriodResponsePtrOutput) ToExportRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodResponsePtrOutput {
	return o
}

func (o ExportRecurrencePeriodResponsePtrOutput) Elem() ExportRecurrencePeriodResponseOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriodResponse) ExportRecurrencePeriodResponse { return *v }).(ExportRecurrencePeriodResponseOutput)
}

// The start date of recurrence.
func (o ExportRecurrencePeriodResponsePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date of recurrence.
func (o ExportRecurrencePeriodResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

// The schedule associated with a export.
type ExportSchedule struct {
	// The schedule recurrence.
	Recurrence string `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod *ExportRecurrencePeriod `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the export's scheduled execution is paused.
	Status *string `pulumi:"status"`
}

// ExportScheduleInput is an input type that accepts ExportScheduleArgs and ExportScheduleOutput values.
// You can construct a concrete instance of `ExportScheduleInput` via:
//
//          ExportScheduleArgs{...}
type ExportScheduleInput interface {
	pulumi.Input

	ToExportScheduleOutput() ExportScheduleOutput
	ToExportScheduleOutputWithContext(context.Context) ExportScheduleOutput
}

// The schedule associated with a export.
type ExportScheduleArgs struct {
	// The schedule recurrence.
	Recurrence pulumi.StringInput `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod ExportRecurrencePeriodPtrInput `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the export's scheduled execution is paused.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ExportScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportSchedule)(nil)).Elem()
}

func (i ExportScheduleArgs) ToExportScheduleOutput() ExportScheduleOutput {
	return i.ToExportScheduleOutputWithContext(context.Background())
}

func (i ExportScheduleArgs) ToExportScheduleOutputWithContext(ctx context.Context) ExportScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportScheduleOutput)
}

func (i ExportScheduleArgs) ToExportSchedulePtrOutput() ExportSchedulePtrOutput {
	return i.ToExportSchedulePtrOutputWithContext(context.Background())
}

func (i ExportScheduleArgs) ToExportSchedulePtrOutputWithContext(ctx context.Context) ExportSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportScheduleOutput).ToExportSchedulePtrOutputWithContext(ctx)
}

// ExportSchedulePtrInput is an input type that accepts ExportScheduleArgs, ExportSchedulePtr and ExportSchedulePtrOutput values.
// You can construct a concrete instance of `ExportSchedulePtrInput` via:
//
//          ExportScheduleArgs{...}
//
//  or:
//
//          nil
type ExportSchedulePtrInput interface {
	pulumi.Input

	ToExportSchedulePtrOutput() ExportSchedulePtrOutput
	ToExportSchedulePtrOutputWithContext(context.Context) ExportSchedulePtrOutput
}

type exportSchedulePtrType ExportScheduleArgs

func ExportSchedulePtr(v *ExportScheduleArgs) ExportSchedulePtrInput {
	return (*exportSchedulePtrType)(v)
}

func (*exportSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportSchedule)(nil)).Elem()
}

func (i *exportSchedulePtrType) ToExportSchedulePtrOutput() ExportSchedulePtrOutput {
	return i.ToExportSchedulePtrOutputWithContext(context.Background())
}

func (i *exportSchedulePtrType) ToExportSchedulePtrOutputWithContext(ctx context.Context) ExportSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportSchedulePtrOutput)
}

// The schedule associated with a export.
type ExportScheduleOutput struct{ *pulumi.OutputState }

func (ExportScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportSchedule)(nil)).Elem()
}

func (o ExportScheduleOutput) ToExportScheduleOutput() ExportScheduleOutput {
	return o
}

func (o ExportScheduleOutput) ToExportScheduleOutputWithContext(ctx context.Context) ExportScheduleOutput {
	return o
}

func (o ExportScheduleOutput) ToExportSchedulePtrOutput() ExportSchedulePtrOutput {
	return o.ToExportSchedulePtrOutputWithContext(context.Background())
}

func (o ExportScheduleOutput) ToExportSchedulePtrOutputWithContext(ctx context.Context) ExportSchedulePtrOutput {
	return o.ApplyT(func(v ExportSchedule) *ExportSchedule {
		return &v
	}).(ExportSchedulePtrOutput)
}

// The schedule recurrence.
func (o ExportScheduleOutput) Recurrence() pulumi.StringOutput {
	return o.ApplyT(func(v ExportSchedule) string { return v.Recurrence }).(pulumi.StringOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ExportScheduleOutput) RecurrencePeriod() ExportRecurrencePeriodPtrOutput {
	return o.ApplyT(func(v ExportSchedule) *ExportRecurrencePeriod { return v.RecurrencePeriod }).(ExportRecurrencePeriodPtrOutput)
}

// The status of the schedule. Whether active or not. If inactive, the export's scheduled execution is paused.
func (o ExportScheduleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportSchedule) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ExportSchedulePtrOutput struct{ *pulumi.OutputState }

func (ExportSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportSchedule)(nil)).Elem()
}

func (o ExportSchedulePtrOutput) ToExportSchedulePtrOutput() ExportSchedulePtrOutput {
	return o
}

func (o ExportSchedulePtrOutput) ToExportSchedulePtrOutputWithContext(ctx context.Context) ExportSchedulePtrOutput {
	return o
}

func (o ExportSchedulePtrOutput) Elem() ExportScheduleOutput {
	return o.ApplyT(func(v *ExportSchedule) ExportSchedule { return *v }).(ExportScheduleOutput)
}

// The schedule recurrence.
func (o ExportSchedulePtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ExportSchedulePtrOutput) RecurrencePeriod() ExportRecurrencePeriodPtrOutput {
	return o.ApplyT(func(v *ExportSchedule) *ExportRecurrencePeriod {
		if v == nil {
			return nil
		}
		return v.RecurrencePeriod
	}).(ExportRecurrencePeriodPtrOutput)
}

// The status of the schedule. Whether active or not. If inactive, the export's scheduled execution is paused.
func (o ExportSchedulePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportSchedule) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The schedule associated with a export.
type ExportScheduleInvokeResponse struct {
	// The schedule recurrence.
	Recurrence string `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod *ExportRecurrencePeriodInvokeResponse `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the export's scheduled execution is paused.
	Status *string `pulumi:"status"`
}

// ExportScheduleInvokeResponseInput is an input type that accepts ExportScheduleInvokeResponseArgs and ExportScheduleInvokeResponseOutput values.
// You can construct a concrete instance of `ExportScheduleInvokeResponseInput` via:
//
//          ExportScheduleInvokeResponseArgs{...}
type ExportScheduleInvokeResponseInput interface {
	pulumi.Input

	ToExportScheduleInvokeResponseOutput() ExportScheduleInvokeResponseOutput
	ToExportScheduleInvokeResponseOutputWithContext(context.Context) ExportScheduleInvokeResponseOutput
}

// The schedule associated with a export.
type ExportScheduleInvokeResponseArgs struct {
	// The schedule recurrence.
	Recurrence pulumi.StringInput `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod ExportRecurrencePeriodInvokeResponsePtrInput `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the export's scheduled execution is paused.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ExportScheduleInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportScheduleInvokeResponse)(nil)).Elem()
}

func (i ExportScheduleInvokeResponseArgs) ToExportScheduleInvokeResponseOutput() ExportScheduleInvokeResponseOutput {
	return i.ToExportScheduleInvokeResponseOutputWithContext(context.Background())
}

func (i ExportScheduleInvokeResponseArgs) ToExportScheduleInvokeResponseOutputWithContext(ctx context.Context) ExportScheduleInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportScheduleInvokeResponseOutput)
}

// The schedule associated with a export.
type ExportScheduleInvokeResponseOutput struct{ *pulumi.OutputState }

func (ExportScheduleInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportScheduleInvokeResponse)(nil)).Elem()
}

func (o ExportScheduleInvokeResponseOutput) ToExportScheduleInvokeResponseOutput() ExportScheduleInvokeResponseOutput {
	return o
}

func (o ExportScheduleInvokeResponseOutput) ToExportScheduleInvokeResponseOutputWithContext(ctx context.Context) ExportScheduleInvokeResponseOutput {
	return o
}

// The schedule recurrence.
func (o ExportScheduleInvokeResponseOutput) Recurrence() pulumi.StringOutput {
	return o.ApplyT(func(v ExportScheduleInvokeResponse) string { return v.Recurrence }).(pulumi.StringOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ExportScheduleInvokeResponseOutput) RecurrencePeriod() ExportRecurrencePeriodInvokeResponsePtrOutput {
	return o.ApplyT(func(v ExportScheduleInvokeResponse) *ExportRecurrencePeriodInvokeResponse { return v.RecurrencePeriod }).(ExportRecurrencePeriodInvokeResponsePtrOutput)
}

// The status of the schedule. Whether active or not. If inactive, the export's scheduled execution is paused.
func (o ExportScheduleInvokeResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportScheduleInvokeResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The schedule associated with a export.
type ExportScheduleResponse struct {
	// The schedule recurrence.
	Recurrence string `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod *ExportRecurrencePeriodResponse `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the export's scheduled execution is paused.
	Status *string `pulumi:"status"`
}

// ExportScheduleResponseInput is an input type that accepts ExportScheduleResponseArgs and ExportScheduleResponseOutput values.
// You can construct a concrete instance of `ExportScheduleResponseInput` via:
//
//          ExportScheduleResponseArgs{...}
type ExportScheduleResponseInput interface {
	pulumi.Input

	ToExportScheduleResponseOutput() ExportScheduleResponseOutput
	ToExportScheduleResponseOutputWithContext(context.Context) ExportScheduleResponseOutput
}

// The schedule associated with a export.
type ExportScheduleResponseArgs struct {
	// The schedule recurrence.
	Recurrence pulumi.StringInput `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod ExportRecurrencePeriodResponsePtrInput `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the export's scheduled execution is paused.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ExportScheduleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportScheduleResponse)(nil)).Elem()
}

func (i ExportScheduleResponseArgs) ToExportScheduleResponseOutput() ExportScheduleResponseOutput {
	return i.ToExportScheduleResponseOutputWithContext(context.Background())
}

func (i ExportScheduleResponseArgs) ToExportScheduleResponseOutputWithContext(ctx context.Context) ExportScheduleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportScheduleResponseOutput)
}

func (i ExportScheduleResponseArgs) ToExportScheduleResponsePtrOutput() ExportScheduleResponsePtrOutput {
	return i.ToExportScheduleResponsePtrOutputWithContext(context.Background())
}

func (i ExportScheduleResponseArgs) ToExportScheduleResponsePtrOutputWithContext(ctx context.Context) ExportScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportScheduleResponseOutput).ToExportScheduleResponsePtrOutputWithContext(ctx)
}

// ExportScheduleResponsePtrInput is an input type that accepts ExportScheduleResponseArgs, ExportScheduleResponsePtr and ExportScheduleResponsePtrOutput values.
// You can construct a concrete instance of `ExportScheduleResponsePtrInput` via:
//
//          ExportScheduleResponseArgs{...}
//
//  or:
//
//          nil
type ExportScheduleResponsePtrInput interface {
	pulumi.Input

	ToExportScheduleResponsePtrOutput() ExportScheduleResponsePtrOutput
	ToExportScheduleResponsePtrOutputWithContext(context.Context) ExportScheduleResponsePtrOutput
}

type exportScheduleResponsePtrType ExportScheduleResponseArgs

func ExportScheduleResponsePtr(v *ExportScheduleResponseArgs) ExportScheduleResponsePtrInput {
	return (*exportScheduleResponsePtrType)(v)
}

func (*exportScheduleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportScheduleResponse)(nil)).Elem()
}

func (i *exportScheduleResponsePtrType) ToExportScheduleResponsePtrOutput() ExportScheduleResponsePtrOutput {
	return i.ToExportScheduleResponsePtrOutputWithContext(context.Background())
}

func (i *exportScheduleResponsePtrType) ToExportScheduleResponsePtrOutputWithContext(ctx context.Context) ExportScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportScheduleResponsePtrOutput)
}

// The schedule associated with a export.
type ExportScheduleResponseOutput struct{ *pulumi.OutputState }

func (ExportScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportScheduleResponse)(nil)).Elem()
}

func (o ExportScheduleResponseOutput) ToExportScheduleResponseOutput() ExportScheduleResponseOutput {
	return o
}

func (o ExportScheduleResponseOutput) ToExportScheduleResponseOutputWithContext(ctx context.Context) ExportScheduleResponseOutput {
	return o
}

func (o ExportScheduleResponseOutput) ToExportScheduleResponsePtrOutput() ExportScheduleResponsePtrOutput {
	return o.ToExportScheduleResponsePtrOutputWithContext(context.Background())
}

func (o ExportScheduleResponseOutput) ToExportScheduleResponsePtrOutputWithContext(ctx context.Context) ExportScheduleResponsePtrOutput {
	return o.ApplyT(func(v ExportScheduleResponse) *ExportScheduleResponse {
		return &v
	}).(ExportScheduleResponsePtrOutput)
}

// The schedule recurrence.
func (o ExportScheduleResponseOutput) Recurrence() pulumi.StringOutput {
	return o.ApplyT(func(v ExportScheduleResponse) string { return v.Recurrence }).(pulumi.StringOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ExportScheduleResponseOutput) RecurrencePeriod() ExportRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v ExportScheduleResponse) *ExportRecurrencePeriodResponse { return v.RecurrencePeriod }).(ExportRecurrencePeriodResponsePtrOutput)
}

// The status of the schedule. Whether active or not. If inactive, the export's scheduled execution is paused.
func (o ExportScheduleResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportScheduleResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ExportScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportScheduleResponse)(nil)).Elem()
}

func (o ExportScheduleResponsePtrOutput) ToExportScheduleResponsePtrOutput() ExportScheduleResponsePtrOutput {
	return o
}

func (o ExportScheduleResponsePtrOutput) ToExportScheduleResponsePtrOutputWithContext(ctx context.Context) ExportScheduleResponsePtrOutput {
	return o
}

func (o ExportScheduleResponsePtrOutput) Elem() ExportScheduleResponseOutput {
	return o.ApplyT(func(v *ExportScheduleResponse) ExportScheduleResponse { return *v }).(ExportScheduleResponseOutput)
}

// The schedule recurrence.
func (o ExportScheduleResponsePtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ExportScheduleResponsePtrOutput) RecurrencePeriod() ExportRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v *ExportScheduleResponse) *ExportRecurrencePeriodResponse {
		if v == nil {
			return nil
		}
		return v.RecurrencePeriod
	}).(ExportRecurrencePeriodResponsePtrOutput)
}

// The status of the schedule. Whether active or not. If inactive, the export's scheduled execution is paused.
func (o ExportScheduleResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The aggregation expression to be used in the query.
type QueryAggregation struct {
	// The name of the aggregation function to use.
	Function string `pulumi:"function"`
	// The name of the column to aggregate.
	Name string `pulumi:"name"`
}

// QueryAggregationInput is an input type that accepts QueryAggregationArgs and QueryAggregationOutput values.
// You can construct a concrete instance of `QueryAggregationInput` via:
//
//          QueryAggregationArgs{...}
type QueryAggregationInput interface {
	pulumi.Input

	ToQueryAggregationOutput() QueryAggregationOutput
	ToQueryAggregationOutputWithContext(context.Context) QueryAggregationOutput
}

// The aggregation expression to be used in the query.
type QueryAggregationArgs struct {
	// The name of the aggregation function to use.
	Function pulumi.StringInput `pulumi:"function"`
	// The name of the column to aggregate.
	Name pulumi.StringInput `pulumi:"name"`
}

func (QueryAggregationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryAggregation)(nil)).Elem()
}

func (i QueryAggregationArgs) ToQueryAggregationOutput() QueryAggregationOutput {
	return i.ToQueryAggregationOutputWithContext(context.Background())
}

func (i QueryAggregationArgs) ToQueryAggregationOutputWithContext(ctx context.Context) QueryAggregationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryAggregationOutput)
}

// QueryAggregationMapInput is an input type that accepts QueryAggregationMap and QueryAggregationMapOutput values.
// You can construct a concrete instance of `QueryAggregationMapInput` via:
//
//          QueryAggregationMap{ "key": QueryAggregationArgs{...} }
type QueryAggregationMapInput interface {
	pulumi.Input

	ToQueryAggregationMapOutput() QueryAggregationMapOutput
	ToQueryAggregationMapOutputWithContext(context.Context) QueryAggregationMapOutput
}

type QueryAggregationMap map[string]QueryAggregationInput

func (QueryAggregationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]QueryAggregation)(nil)).Elem()
}

func (i QueryAggregationMap) ToQueryAggregationMapOutput() QueryAggregationMapOutput {
	return i.ToQueryAggregationMapOutputWithContext(context.Background())
}

func (i QueryAggregationMap) ToQueryAggregationMapOutputWithContext(ctx context.Context) QueryAggregationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryAggregationMapOutput)
}

// The aggregation expression to be used in the query.
type QueryAggregationOutput struct{ *pulumi.OutputState }

func (QueryAggregationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryAggregation)(nil)).Elem()
}

func (o QueryAggregationOutput) ToQueryAggregationOutput() QueryAggregationOutput {
	return o
}

func (o QueryAggregationOutput) ToQueryAggregationOutputWithContext(ctx context.Context) QueryAggregationOutput {
	return o
}

// The name of the aggregation function to use.
func (o QueryAggregationOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v QueryAggregation) string { return v.Function }).(pulumi.StringOutput)
}

// The name of the column to aggregate.
func (o QueryAggregationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueryAggregation) string { return v.Name }).(pulumi.StringOutput)
}

type QueryAggregationMapOutput struct{ *pulumi.OutputState }

func (QueryAggregationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]QueryAggregation)(nil)).Elem()
}

func (o QueryAggregationMapOutput) ToQueryAggregationMapOutput() QueryAggregationMapOutput {
	return o
}

func (o QueryAggregationMapOutput) ToQueryAggregationMapOutputWithContext(ctx context.Context) QueryAggregationMapOutput {
	return o
}

func (o QueryAggregationMapOutput) MapIndex(k pulumi.StringInput) QueryAggregationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) QueryAggregation {
		return vs[0].(map[string]QueryAggregation)[vs[1].(string)]
	}).(QueryAggregationOutput)
}

// The aggregation expression to be used in the query.
type QueryAggregationInvokeResponse struct {
	// The name of the aggregation function to use.
	Function string `pulumi:"function"`
	// The name of the column to aggregate.
	Name string `pulumi:"name"`
}

// QueryAggregationInvokeResponseInput is an input type that accepts QueryAggregationInvokeResponseArgs and QueryAggregationInvokeResponseOutput values.
// You can construct a concrete instance of `QueryAggregationInvokeResponseInput` via:
//
//          QueryAggregationInvokeResponseArgs{...}
type QueryAggregationInvokeResponseInput interface {
	pulumi.Input

	ToQueryAggregationInvokeResponseOutput() QueryAggregationInvokeResponseOutput
	ToQueryAggregationInvokeResponseOutputWithContext(context.Context) QueryAggregationInvokeResponseOutput
}

// The aggregation expression to be used in the query.
type QueryAggregationInvokeResponseArgs struct {
	// The name of the aggregation function to use.
	Function pulumi.StringInput `pulumi:"function"`
	// The name of the column to aggregate.
	Name pulumi.StringInput `pulumi:"name"`
}

func (QueryAggregationInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryAggregationInvokeResponse)(nil)).Elem()
}

func (i QueryAggregationInvokeResponseArgs) ToQueryAggregationInvokeResponseOutput() QueryAggregationInvokeResponseOutput {
	return i.ToQueryAggregationInvokeResponseOutputWithContext(context.Background())
}

func (i QueryAggregationInvokeResponseArgs) ToQueryAggregationInvokeResponseOutputWithContext(ctx context.Context) QueryAggregationInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryAggregationInvokeResponseOutput)
}

// QueryAggregationInvokeResponseMapInput is an input type that accepts QueryAggregationInvokeResponseMap and QueryAggregationInvokeResponseMapOutput values.
// You can construct a concrete instance of `QueryAggregationInvokeResponseMapInput` via:
//
//          QueryAggregationInvokeResponseMap{ "key": QueryAggregationInvokeResponseArgs{...} }
type QueryAggregationInvokeResponseMapInput interface {
	pulumi.Input

	ToQueryAggregationInvokeResponseMapOutput() QueryAggregationInvokeResponseMapOutput
	ToQueryAggregationInvokeResponseMapOutputWithContext(context.Context) QueryAggregationInvokeResponseMapOutput
}

type QueryAggregationInvokeResponseMap map[string]QueryAggregationInvokeResponseInput

func (QueryAggregationInvokeResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]QueryAggregationInvokeResponse)(nil)).Elem()
}

func (i QueryAggregationInvokeResponseMap) ToQueryAggregationInvokeResponseMapOutput() QueryAggregationInvokeResponseMapOutput {
	return i.ToQueryAggregationInvokeResponseMapOutputWithContext(context.Background())
}

func (i QueryAggregationInvokeResponseMap) ToQueryAggregationInvokeResponseMapOutputWithContext(ctx context.Context) QueryAggregationInvokeResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryAggregationInvokeResponseMapOutput)
}

// The aggregation expression to be used in the query.
type QueryAggregationInvokeResponseOutput struct{ *pulumi.OutputState }

func (QueryAggregationInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryAggregationInvokeResponse)(nil)).Elem()
}

func (o QueryAggregationInvokeResponseOutput) ToQueryAggregationInvokeResponseOutput() QueryAggregationInvokeResponseOutput {
	return o
}

func (o QueryAggregationInvokeResponseOutput) ToQueryAggregationInvokeResponseOutputWithContext(ctx context.Context) QueryAggregationInvokeResponseOutput {
	return o
}

// The name of the aggregation function to use.
func (o QueryAggregationInvokeResponseOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v QueryAggregationInvokeResponse) string { return v.Function }).(pulumi.StringOutput)
}

// The name of the column to aggregate.
func (o QueryAggregationInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueryAggregationInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

type QueryAggregationInvokeResponseMapOutput struct{ *pulumi.OutputState }

func (QueryAggregationInvokeResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]QueryAggregationInvokeResponse)(nil)).Elem()
}

func (o QueryAggregationInvokeResponseMapOutput) ToQueryAggregationInvokeResponseMapOutput() QueryAggregationInvokeResponseMapOutput {
	return o
}

func (o QueryAggregationInvokeResponseMapOutput) ToQueryAggregationInvokeResponseMapOutputWithContext(ctx context.Context) QueryAggregationInvokeResponseMapOutput {
	return o
}

func (o QueryAggregationInvokeResponseMapOutput) MapIndex(k pulumi.StringInput) QueryAggregationInvokeResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) QueryAggregationInvokeResponse {
		return vs[0].(map[string]QueryAggregationInvokeResponse)[vs[1].(string)]
	}).(QueryAggregationInvokeResponseOutput)
}

// The aggregation expression to be used in the query.
type QueryAggregationResponse struct {
	// The name of the aggregation function to use.
	Function string `pulumi:"function"`
	// The name of the column to aggregate.
	Name string `pulumi:"name"`
}

// QueryAggregationResponseInput is an input type that accepts QueryAggregationResponseArgs and QueryAggregationResponseOutput values.
// You can construct a concrete instance of `QueryAggregationResponseInput` via:
//
//          QueryAggregationResponseArgs{...}
type QueryAggregationResponseInput interface {
	pulumi.Input

	ToQueryAggregationResponseOutput() QueryAggregationResponseOutput
	ToQueryAggregationResponseOutputWithContext(context.Context) QueryAggregationResponseOutput
}

// The aggregation expression to be used in the query.
type QueryAggregationResponseArgs struct {
	// The name of the aggregation function to use.
	Function pulumi.StringInput `pulumi:"function"`
	// The name of the column to aggregate.
	Name pulumi.StringInput `pulumi:"name"`
}

func (QueryAggregationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryAggregationResponse)(nil)).Elem()
}

func (i QueryAggregationResponseArgs) ToQueryAggregationResponseOutput() QueryAggregationResponseOutput {
	return i.ToQueryAggregationResponseOutputWithContext(context.Background())
}

func (i QueryAggregationResponseArgs) ToQueryAggregationResponseOutputWithContext(ctx context.Context) QueryAggregationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryAggregationResponseOutput)
}

// QueryAggregationResponseMapInput is an input type that accepts QueryAggregationResponseMap and QueryAggregationResponseMapOutput values.
// You can construct a concrete instance of `QueryAggregationResponseMapInput` via:
//
//          QueryAggregationResponseMap{ "key": QueryAggregationResponseArgs{...} }
type QueryAggregationResponseMapInput interface {
	pulumi.Input

	ToQueryAggregationResponseMapOutput() QueryAggregationResponseMapOutput
	ToQueryAggregationResponseMapOutputWithContext(context.Context) QueryAggregationResponseMapOutput
}

type QueryAggregationResponseMap map[string]QueryAggregationResponseInput

func (QueryAggregationResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]QueryAggregationResponse)(nil)).Elem()
}

func (i QueryAggregationResponseMap) ToQueryAggregationResponseMapOutput() QueryAggregationResponseMapOutput {
	return i.ToQueryAggregationResponseMapOutputWithContext(context.Background())
}

func (i QueryAggregationResponseMap) ToQueryAggregationResponseMapOutputWithContext(ctx context.Context) QueryAggregationResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryAggregationResponseMapOutput)
}

// The aggregation expression to be used in the query.
type QueryAggregationResponseOutput struct{ *pulumi.OutputState }

func (QueryAggregationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryAggregationResponse)(nil)).Elem()
}

func (o QueryAggregationResponseOutput) ToQueryAggregationResponseOutput() QueryAggregationResponseOutput {
	return o
}

func (o QueryAggregationResponseOutput) ToQueryAggregationResponseOutputWithContext(ctx context.Context) QueryAggregationResponseOutput {
	return o
}

// The name of the aggregation function to use.
func (o QueryAggregationResponseOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v QueryAggregationResponse) string { return v.Function }).(pulumi.StringOutput)
}

// The name of the column to aggregate.
func (o QueryAggregationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueryAggregationResponse) string { return v.Name }).(pulumi.StringOutput)
}

type QueryAggregationResponseMapOutput struct{ *pulumi.OutputState }

func (QueryAggregationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]QueryAggregationResponse)(nil)).Elem()
}

func (o QueryAggregationResponseMapOutput) ToQueryAggregationResponseMapOutput() QueryAggregationResponseMapOutput {
	return o
}

func (o QueryAggregationResponseMapOutput) ToQueryAggregationResponseMapOutputWithContext(ctx context.Context) QueryAggregationResponseMapOutput {
	return o
}

func (o QueryAggregationResponseMapOutput) MapIndex(k pulumi.StringInput) QueryAggregationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) QueryAggregationResponse {
		return vs[0].(map[string]QueryAggregationResponse)[vs[1].(string)]
	}).(QueryAggregationResponseOutput)
}

// The comparison expression to be used in the query.
type QueryComparisonExpression struct {
	// The name of the column to use in comparison.
	Name string `pulumi:"name"`
	// The operator to use for comparison.
	Operator string `pulumi:"operator"`
	// Array of values to use for comparison
	Values []string `pulumi:"values"`
}

// QueryComparisonExpressionInput is an input type that accepts QueryComparisonExpressionArgs and QueryComparisonExpressionOutput values.
// You can construct a concrete instance of `QueryComparisonExpressionInput` via:
//
//          QueryComparisonExpressionArgs{...}
type QueryComparisonExpressionInput interface {
	pulumi.Input

	ToQueryComparisonExpressionOutput() QueryComparisonExpressionOutput
	ToQueryComparisonExpressionOutputWithContext(context.Context) QueryComparisonExpressionOutput
}

// The comparison expression to be used in the query.
type QueryComparisonExpressionArgs struct {
	// The name of the column to use in comparison.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator to use for comparison.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Array of values to use for comparison
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (QueryComparisonExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryComparisonExpression)(nil)).Elem()
}

func (i QueryComparisonExpressionArgs) ToQueryComparisonExpressionOutput() QueryComparisonExpressionOutput {
	return i.ToQueryComparisonExpressionOutputWithContext(context.Background())
}

func (i QueryComparisonExpressionArgs) ToQueryComparisonExpressionOutputWithContext(ctx context.Context) QueryComparisonExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryComparisonExpressionOutput)
}

func (i QueryComparisonExpressionArgs) ToQueryComparisonExpressionPtrOutput() QueryComparisonExpressionPtrOutput {
	return i.ToQueryComparisonExpressionPtrOutputWithContext(context.Background())
}

func (i QueryComparisonExpressionArgs) ToQueryComparisonExpressionPtrOutputWithContext(ctx context.Context) QueryComparisonExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryComparisonExpressionOutput).ToQueryComparisonExpressionPtrOutputWithContext(ctx)
}

// QueryComparisonExpressionPtrInput is an input type that accepts QueryComparisonExpressionArgs, QueryComparisonExpressionPtr and QueryComparisonExpressionPtrOutput values.
// You can construct a concrete instance of `QueryComparisonExpressionPtrInput` via:
//
//          QueryComparisonExpressionArgs{...}
//
//  or:
//
//          nil
type QueryComparisonExpressionPtrInput interface {
	pulumi.Input

	ToQueryComparisonExpressionPtrOutput() QueryComparisonExpressionPtrOutput
	ToQueryComparisonExpressionPtrOutputWithContext(context.Context) QueryComparisonExpressionPtrOutput
}

type queryComparisonExpressionPtrType QueryComparisonExpressionArgs

func QueryComparisonExpressionPtr(v *QueryComparisonExpressionArgs) QueryComparisonExpressionPtrInput {
	return (*queryComparisonExpressionPtrType)(v)
}

func (*queryComparisonExpressionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryComparisonExpression)(nil)).Elem()
}

func (i *queryComparisonExpressionPtrType) ToQueryComparisonExpressionPtrOutput() QueryComparisonExpressionPtrOutput {
	return i.ToQueryComparisonExpressionPtrOutputWithContext(context.Background())
}

func (i *queryComparisonExpressionPtrType) ToQueryComparisonExpressionPtrOutputWithContext(ctx context.Context) QueryComparisonExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryComparisonExpressionPtrOutput)
}

// The comparison expression to be used in the query.
type QueryComparisonExpressionOutput struct{ *pulumi.OutputState }

func (QueryComparisonExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryComparisonExpression)(nil)).Elem()
}

func (o QueryComparisonExpressionOutput) ToQueryComparisonExpressionOutput() QueryComparisonExpressionOutput {
	return o
}

func (o QueryComparisonExpressionOutput) ToQueryComparisonExpressionOutputWithContext(ctx context.Context) QueryComparisonExpressionOutput {
	return o
}

func (o QueryComparisonExpressionOutput) ToQueryComparisonExpressionPtrOutput() QueryComparisonExpressionPtrOutput {
	return o.ToQueryComparisonExpressionPtrOutputWithContext(context.Background())
}

func (o QueryComparisonExpressionOutput) ToQueryComparisonExpressionPtrOutputWithContext(ctx context.Context) QueryComparisonExpressionPtrOutput {
	return o.ApplyT(func(v QueryComparisonExpression) *QueryComparisonExpression {
		return &v
	}).(QueryComparisonExpressionPtrOutput)
}

// The name of the column to use in comparison.
func (o QueryComparisonExpressionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueryComparisonExpression) string { return v.Name }).(pulumi.StringOutput)
}

// The operator to use for comparison.
func (o QueryComparisonExpressionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v QueryComparisonExpression) string { return v.Operator }).(pulumi.StringOutput)
}

// Array of values to use for comparison
func (o QueryComparisonExpressionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v QueryComparisonExpression) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type QueryComparisonExpressionPtrOutput struct{ *pulumi.OutputState }

func (QueryComparisonExpressionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryComparisonExpression)(nil)).Elem()
}

func (o QueryComparisonExpressionPtrOutput) ToQueryComparisonExpressionPtrOutput() QueryComparisonExpressionPtrOutput {
	return o
}

func (o QueryComparisonExpressionPtrOutput) ToQueryComparisonExpressionPtrOutputWithContext(ctx context.Context) QueryComparisonExpressionPtrOutput {
	return o
}

func (o QueryComparisonExpressionPtrOutput) Elem() QueryComparisonExpressionOutput {
	return o.ApplyT(func(v *QueryComparisonExpression) QueryComparisonExpression { return *v }).(QueryComparisonExpressionOutput)
}

// The name of the column to use in comparison.
func (o QueryComparisonExpressionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryComparisonExpression) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The operator to use for comparison.
func (o QueryComparisonExpressionPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryComparisonExpression) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Array of values to use for comparison
func (o QueryComparisonExpressionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *QueryComparisonExpression) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// The comparison expression to be used in the query.
type QueryComparisonExpressionInvokeResponse struct {
	// The name of the column to use in comparison.
	Name string `pulumi:"name"`
	// The operator to use for comparison.
	Operator string `pulumi:"operator"`
	// Array of values to use for comparison
	Values []string `pulumi:"values"`
}

// QueryComparisonExpressionInvokeResponseInput is an input type that accepts QueryComparisonExpressionInvokeResponseArgs and QueryComparisonExpressionInvokeResponseOutput values.
// You can construct a concrete instance of `QueryComparisonExpressionInvokeResponseInput` via:
//
//          QueryComparisonExpressionInvokeResponseArgs{...}
type QueryComparisonExpressionInvokeResponseInput interface {
	pulumi.Input

	ToQueryComparisonExpressionInvokeResponseOutput() QueryComparisonExpressionInvokeResponseOutput
	ToQueryComparisonExpressionInvokeResponseOutputWithContext(context.Context) QueryComparisonExpressionInvokeResponseOutput
}

// The comparison expression to be used in the query.
type QueryComparisonExpressionInvokeResponseArgs struct {
	// The name of the column to use in comparison.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator to use for comparison.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Array of values to use for comparison
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (QueryComparisonExpressionInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryComparisonExpressionInvokeResponse)(nil)).Elem()
}

func (i QueryComparisonExpressionInvokeResponseArgs) ToQueryComparisonExpressionInvokeResponseOutput() QueryComparisonExpressionInvokeResponseOutput {
	return i.ToQueryComparisonExpressionInvokeResponseOutputWithContext(context.Background())
}

func (i QueryComparisonExpressionInvokeResponseArgs) ToQueryComparisonExpressionInvokeResponseOutputWithContext(ctx context.Context) QueryComparisonExpressionInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryComparisonExpressionInvokeResponseOutput)
}

func (i QueryComparisonExpressionInvokeResponseArgs) ToQueryComparisonExpressionInvokeResponsePtrOutput() QueryComparisonExpressionInvokeResponsePtrOutput {
	return i.ToQueryComparisonExpressionInvokeResponsePtrOutputWithContext(context.Background())
}

func (i QueryComparisonExpressionInvokeResponseArgs) ToQueryComparisonExpressionInvokeResponsePtrOutputWithContext(ctx context.Context) QueryComparisonExpressionInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryComparisonExpressionInvokeResponseOutput).ToQueryComparisonExpressionInvokeResponsePtrOutputWithContext(ctx)
}

// QueryComparisonExpressionInvokeResponsePtrInput is an input type that accepts QueryComparisonExpressionInvokeResponseArgs, QueryComparisonExpressionInvokeResponsePtr and QueryComparisonExpressionInvokeResponsePtrOutput values.
// You can construct a concrete instance of `QueryComparisonExpressionInvokeResponsePtrInput` via:
//
//          QueryComparisonExpressionInvokeResponseArgs{...}
//
//  or:
//
//          nil
type QueryComparisonExpressionInvokeResponsePtrInput interface {
	pulumi.Input

	ToQueryComparisonExpressionInvokeResponsePtrOutput() QueryComparisonExpressionInvokeResponsePtrOutput
	ToQueryComparisonExpressionInvokeResponsePtrOutputWithContext(context.Context) QueryComparisonExpressionInvokeResponsePtrOutput
}

type queryComparisonExpressionInvokeResponsePtrType QueryComparisonExpressionInvokeResponseArgs

func QueryComparisonExpressionInvokeResponsePtr(v *QueryComparisonExpressionInvokeResponseArgs) QueryComparisonExpressionInvokeResponsePtrInput {
	return (*queryComparisonExpressionInvokeResponsePtrType)(v)
}

func (*queryComparisonExpressionInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryComparisonExpressionInvokeResponse)(nil)).Elem()
}

func (i *queryComparisonExpressionInvokeResponsePtrType) ToQueryComparisonExpressionInvokeResponsePtrOutput() QueryComparisonExpressionInvokeResponsePtrOutput {
	return i.ToQueryComparisonExpressionInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *queryComparisonExpressionInvokeResponsePtrType) ToQueryComparisonExpressionInvokeResponsePtrOutputWithContext(ctx context.Context) QueryComparisonExpressionInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryComparisonExpressionInvokeResponsePtrOutput)
}

// The comparison expression to be used in the query.
type QueryComparisonExpressionInvokeResponseOutput struct{ *pulumi.OutputState }

func (QueryComparisonExpressionInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryComparisonExpressionInvokeResponse)(nil)).Elem()
}

func (o QueryComparisonExpressionInvokeResponseOutput) ToQueryComparisonExpressionInvokeResponseOutput() QueryComparisonExpressionInvokeResponseOutput {
	return o
}

func (o QueryComparisonExpressionInvokeResponseOutput) ToQueryComparisonExpressionInvokeResponseOutputWithContext(ctx context.Context) QueryComparisonExpressionInvokeResponseOutput {
	return o
}

func (o QueryComparisonExpressionInvokeResponseOutput) ToQueryComparisonExpressionInvokeResponsePtrOutput() QueryComparisonExpressionInvokeResponsePtrOutput {
	return o.ToQueryComparisonExpressionInvokeResponsePtrOutputWithContext(context.Background())
}

func (o QueryComparisonExpressionInvokeResponseOutput) ToQueryComparisonExpressionInvokeResponsePtrOutputWithContext(ctx context.Context) QueryComparisonExpressionInvokeResponsePtrOutput {
	return o.ApplyT(func(v QueryComparisonExpressionInvokeResponse) *QueryComparisonExpressionInvokeResponse {
		return &v
	}).(QueryComparisonExpressionInvokeResponsePtrOutput)
}

// The name of the column to use in comparison.
func (o QueryComparisonExpressionInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueryComparisonExpressionInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The operator to use for comparison.
func (o QueryComparisonExpressionInvokeResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v QueryComparisonExpressionInvokeResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Array of values to use for comparison
func (o QueryComparisonExpressionInvokeResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v QueryComparisonExpressionInvokeResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type QueryComparisonExpressionInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryComparisonExpressionInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryComparisonExpressionInvokeResponse)(nil)).Elem()
}

func (o QueryComparisonExpressionInvokeResponsePtrOutput) ToQueryComparisonExpressionInvokeResponsePtrOutput() QueryComparisonExpressionInvokeResponsePtrOutput {
	return o
}

func (o QueryComparisonExpressionInvokeResponsePtrOutput) ToQueryComparisonExpressionInvokeResponsePtrOutputWithContext(ctx context.Context) QueryComparisonExpressionInvokeResponsePtrOutput {
	return o
}

func (o QueryComparisonExpressionInvokeResponsePtrOutput) Elem() QueryComparisonExpressionInvokeResponseOutput {
	return o.ApplyT(func(v *QueryComparisonExpressionInvokeResponse) QueryComparisonExpressionInvokeResponse { return *v }).(QueryComparisonExpressionInvokeResponseOutput)
}

// The name of the column to use in comparison.
func (o QueryComparisonExpressionInvokeResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryComparisonExpressionInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The operator to use for comparison.
func (o QueryComparisonExpressionInvokeResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryComparisonExpressionInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Array of values to use for comparison
func (o QueryComparisonExpressionInvokeResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *QueryComparisonExpressionInvokeResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// The comparison expression to be used in the query.
type QueryComparisonExpressionResponse struct {
	// The name of the column to use in comparison.
	Name string `pulumi:"name"`
	// The operator to use for comparison.
	Operator string `pulumi:"operator"`
	// Array of values to use for comparison
	Values []string `pulumi:"values"`
}

// QueryComparisonExpressionResponseInput is an input type that accepts QueryComparisonExpressionResponseArgs and QueryComparisonExpressionResponseOutput values.
// You can construct a concrete instance of `QueryComparisonExpressionResponseInput` via:
//
//          QueryComparisonExpressionResponseArgs{...}
type QueryComparisonExpressionResponseInput interface {
	pulumi.Input

	ToQueryComparisonExpressionResponseOutput() QueryComparisonExpressionResponseOutput
	ToQueryComparisonExpressionResponseOutputWithContext(context.Context) QueryComparisonExpressionResponseOutput
}

// The comparison expression to be used in the query.
type QueryComparisonExpressionResponseArgs struct {
	// The name of the column to use in comparison.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator to use for comparison.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Array of values to use for comparison
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (QueryComparisonExpressionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryComparisonExpressionResponse)(nil)).Elem()
}

func (i QueryComparisonExpressionResponseArgs) ToQueryComparisonExpressionResponseOutput() QueryComparisonExpressionResponseOutput {
	return i.ToQueryComparisonExpressionResponseOutputWithContext(context.Background())
}

func (i QueryComparisonExpressionResponseArgs) ToQueryComparisonExpressionResponseOutputWithContext(ctx context.Context) QueryComparisonExpressionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryComparisonExpressionResponseOutput)
}

func (i QueryComparisonExpressionResponseArgs) ToQueryComparisonExpressionResponsePtrOutput() QueryComparisonExpressionResponsePtrOutput {
	return i.ToQueryComparisonExpressionResponsePtrOutputWithContext(context.Background())
}

func (i QueryComparisonExpressionResponseArgs) ToQueryComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) QueryComparisonExpressionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryComparisonExpressionResponseOutput).ToQueryComparisonExpressionResponsePtrOutputWithContext(ctx)
}

// QueryComparisonExpressionResponsePtrInput is an input type that accepts QueryComparisonExpressionResponseArgs, QueryComparisonExpressionResponsePtr and QueryComparisonExpressionResponsePtrOutput values.
// You can construct a concrete instance of `QueryComparisonExpressionResponsePtrInput` via:
//
//          QueryComparisonExpressionResponseArgs{...}
//
//  or:
//
//          nil
type QueryComparisonExpressionResponsePtrInput interface {
	pulumi.Input

	ToQueryComparisonExpressionResponsePtrOutput() QueryComparisonExpressionResponsePtrOutput
	ToQueryComparisonExpressionResponsePtrOutputWithContext(context.Context) QueryComparisonExpressionResponsePtrOutput
}

type queryComparisonExpressionResponsePtrType QueryComparisonExpressionResponseArgs

func QueryComparisonExpressionResponsePtr(v *QueryComparisonExpressionResponseArgs) QueryComparisonExpressionResponsePtrInput {
	return (*queryComparisonExpressionResponsePtrType)(v)
}

func (*queryComparisonExpressionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryComparisonExpressionResponse)(nil)).Elem()
}

func (i *queryComparisonExpressionResponsePtrType) ToQueryComparisonExpressionResponsePtrOutput() QueryComparisonExpressionResponsePtrOutput {
	return i.ToQueryComparisonExpressionResponsePtrOutputWithContext(context.Background())
}

func (i *queryComparisonExpressionResponsePtrType) ToQueryComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) QueryComparisonExpressionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryComparisonExpressionResponsePtrOutput)
}

// The comparison expression to be used in the query.
type QueryComparisonExpressionResponseOutput struct{ *pulumi.OutputState }

func (QueryComparisonExpressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryComparisonExpressionResponse)(nil)).Elem()
}

func (o QueryComparisonExpressionResponseOutput) ToQueryComparisonExpressionResponseOutput() QueryComparisonExpressionResponseOutput {
	return o
}

func (o QueryComparisonExpressionResponseOutput) ToQueryComparisonExpressionResponseOutputWithContext(ctx context.Context) QueryComparisonExpressionResponseOutput {
	return o
}

func (o QueryComparisonExpressionResponseOutput) ToQueryComparisonExpressionResponsePtrOutput() QueryComparisonExpressionResponsePtrOutput {
	return o.ToQueryComparisonExpressionResponsePtrOutputWithContext(context.Background())
}

func (o QueryComparisonExpressionResponseOutput) ToQueryComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) QueryComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v QueryComparisonExpressionResponse) *QueryComparisonExpressionResponse {
		return &v
	}).(QueryComparisonExpressionResponsePtrOutput)
}

// The name of the column to use in comparison.
func (o QueryComparisonExpressionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueryComparisonExpressionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The operator to use for comparison.
func (o QueryComparisonExpressionResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v QueryComparisonExpressionResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Array of values to use for comparison
func (o QueryComparisonExpressionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v QueryComparisonExpressionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type QueryComparisonExpressionResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryComparisonExpressionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryComparisonExpressionResponse)(nil)).Elem()
}

func (o QueryComparisonExpressionResponsePtrOutput) ToQueryComparisonExpressionResponsePtrOutput() QueryComparisonExpressionResponsePtrOutput {
	return o
}

func (o QueryComparisonExpressionResponsePtrOutput) ToQueryComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) QueryComparisonExpressionResponsePtrOutput {
	return o
}

func (o QueryComparisonExpressionResponsePtrOutput) Elem() QueryComparisonExpressionResponseOutput {
	return o.ApplyT(func(v *QueryComparisonExpressionResponse) QueryComparisonExpressionResponse { return *v }).(QueryComparisonExpressionResponseOutput)
}

// The name of the column to use in comparison.
func (o QueryComparisonExpressionResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryComparisonExpressionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The operator to use for comparison.
func (o QueryComparisonExpressionResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryComparisonExpressionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Array of values to use for comparison
func (o QueryComparisonExpressionResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *QueryComparisonExpressionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// The definition of data present in the query.
type QueryDataset struct {
	// Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
	Aggregation map[string]QueryAggregation `pulumi:"aggregation"`
	// Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
	Configuration *QueryDatasetConfiguration `pulumi:"configuration"`
	// Has filter expression to use in the query.
	Filter *QueryFilter `pulumi:"filter"`
	// The granularity of rows in the query.
	Granularity *string `pulumi:"granularity"`
	// Array of group by expression to use in the query. Query can have up to 2 group by clauses.
	Grouping []QueryGrouping `pulumi:"grouping"`
	// Array of sorting by columns in query.
	Sorting []QuerySortingConfiguration `pulumi:"sorting"`
}

// QueryDatasetInput is an input type that accepts QueryDatasetArgs and QueryDatasetOutput values.
// You can construct a concrete instance of `QueryDatasetInput` via:
//
//          QueryDatasetArgs{...}
type QueryDatasetInput interface {
	pulumi.Input

	ToQueryDatasetOutput() QueryDatasetOutput
	ToQueryDatasetOutputWithContext(context.Context) QueryDatasetOutput
}

// The definition of data present in the query.
type QueryDatasetArgs struct {
	// Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
	Aggregation QueryAggregationMapInput `pulumi:"aggregation"`
	// Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
	Configuration QueryDatasetConfigurationPtrInput `pulumi:"configuration"`
	// Has filter expression to use in the query.
	Filter QueryFilterPtrInput `pulumi:"filter"`
	// The granularity of rows in the query.
	Granularity pulumi.StringPtrInput `pulumi:"granularity"`
	// Array of group by expression to use in the query. Query can have up to 2 group by clauses.
	Grouping QueryGroupingArrayInput `pulumi:"grouping"`
	// Array of sorting by columns in query.
	Sorting QuerySortingConfigurationArrayInput `pulumi:"sorting"`
}

func (QueryDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDataset)(nil)).Elem()
}

func (i QueryDatasetArgs) ToQueryDatasetOutput() QueryDatasetOutput {
	return i.ToQueryDatasetOutputWithContext(context.Background())
}

func (i QueryDatasetArgs) ToQueryDatasetOutputWithContext(ctx context.Context) QueryDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetOutput)
}

func (i QueryDatasetArgs) ToQueryDatasetPtrOutput() QueryDatasetPtrOutput {
	return i.ToQueryDatasetPtrOutputWithContext(context.Background())
}

func (i QueryDatasetArgs) ToQueryDatasetPtrOutputWithContext(ctx context.Context) QueryDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetOutput).ToQueryDatasetPtrOutputWithContext(ctx)
}

// QueryDatasetPtrInput is an input type that accepts QueryDatasetArgs, QueryDatasetPtr and QueryDatasetPtrOutput values.
// You can construct a concrete instance of `QueryDatasetPtrInput` via:
//
//          QueryDatasetArgs{...}
//
//  or:
//
//          nil
type QueryDatasetPtrInput interface {
	pulumi.Input

	ToQueryDatasetPtrOutput() QueryDatasetPtrOutput
	ToQueryDatasetPtrOutputWithContext(context.Context) QueryDatasetPtrOutput
}

type queryDatasetPtrType QueryDatasetArgs

func QueryDatasetPtr(v *QueryDatasetArgs) QueryDatasetPtrInput {
	return (*queryDatasetPtrType)(v)
}

func (*queryDatasetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDataset)(nil)).Elem()
}

func (i *queryDatasetPtrType) ToQueryDatasetPtrOutput() QueryDatasetPtrOutput {
	return i.ToQueryDatasetPtrOutputWithContext(context.Background())
}

func (i *queryDatasetPtrType) ToQueryDatasetPtrOutputWithContext(ctx context.Context) QueryDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetPtrOutput)
}

// The definition of data present in the query.
type QueryDatasetOutput struct{ *pulumi.OutputState }

func (QueryDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDataset)(nil)).Elem()
}

func (o QueryDatasetOutput) ToQueryDatasetOutput() QueryDatasetOutput {
	return o
}

func (o QueryDatasetOutput) ToQueryDatasetOutputWithContext(ctx context.Context) QueryDatasetOutput {
	return o
}

func (o QueryDatasetOutput) ToQueryDatasetPtrOutput() QueryDatasetPtrOutput {
	return o.ToQueryDatasetPtrOutputWithContext(context.Background())
}

func (o QueryDatasetOutput) ToQueryDatasetPtrOutputWithContext(ctx context.Context) QueryDatasetPtrOutput {
	return o.ApplyT(func(v QueryDataset) *QueryDataset {
		return &v
	}).(QueryDatasetPtrOutput)
}

// Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
func (o QueryDatasetOutput) Aggregation() QueryAggregationMapOutput {
	return o.ApplyT(func(v QueryDataset) map[string]QueryAggregation { return v.Aggregation }).(QueryAggregationMapOutput)
}

// Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
func (o QueryDatasetOutput) Configuration() QueryDatasetConfigurationPtrOutput {
	return o.ApplyT(func(v QueryDataset) *QueryDatasetConfiguration { return v.Configuration }).(QueryDatasetConfigurationPtrOutput)
}

// Has filter expression to use in the query.
func (o QueryDatasetOutput) Filter() QueryFilterPtrOutput {
	return o.ApplyT(func(v QueryDataset) *QueryFilter { return v.Filter }).(QueryFilterPtrOutput)
}

// The granularity of rows in the query.
func (o QueryDatasetOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryDataset) *string { return v.Granularity }).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the query. Query can have up to 2 group by clauses.
func (o QueryDatasetOutput) Grouping() QueryGroupingArrayOutput {
	return o.ApplyT(func(v QueryDataset) []QueryGrouping { return v.Grouping }).(QueryGroupingArrayOutput)
}

// Array of sorting by columns in query.
func (o QueryDatasetOutput) Sorting() QuerySortingConfigurationArrayOutput {
	return o.ApplyT(func(v QueryDataset) []QuerySortingConfiguration { return v.Sorting }).(QuerySortingConfigurationArrayOutput)
}

type QueryDatasetPtrOutput struct{ *pulumi.OutputState }

func (QueryDatasetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDataset)(nil)).Elem()
}

func (o QueryDatasetPtrOutput) ToQueryDatasetPtrOutput() QueryDatasetPtrOutput {
	return o
}

func (o QueryDatasetPtrOutput) ToQueryDatasetPtrOutputWithContext(ctx context.Context) QueryDatasetPtrOutput {
	return o
}

func (o QueryDatasetPtrOutput) Elem() QueryDatasetOutput {
	return o.ApplyT(func(v *QueryDataset) QueryDataset { return *v }).(QueryDatasetOutput)
}

// Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
func (o QueryDatasetPtrOutput) Aggregation() QueryAggregationMapOutput {
	return o.ApplyT(func(v *QueryDataset) map[string]QueryAggregation {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(QueryAggregationMapOutput)
}

// Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
func (o QueryDatasetPtrOutput) Configuration() QueryDatasetConfigurationPtrOutput {
	return o.ApplyT(func(v *QueryDataset) *QueryDatasetConfiguration {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(QueryDatasetConfigurationPtrOutput)
}

// Has filter expression to use in the query.
func (o QueryDatasetPtrOutput) Filter() QueryFilterPtrOutput {
	return o.ApplyT(func(v *QueryDataset) *QueryFilter {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(QueryFilterPtrOutput)
}

// The granularity of rows in the query.
func (o QueryDatasetPtrOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryDataset) *string {
		if v == nil {
			return nil
		}
		return v.Granularity
	}).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the query. Query can have up to 2 group by clauses.
func (o QueryDatasetPtrOutput) Grouping() QueryGroupingArrayOutput {
	return o.ApplyT(func(v *QueryDataset) []QueryGrouping {
		if v == nil {
			return nil
		}
		return v.Grouping
	}).(QueryGroupingArrayOutput)
}

// Array of sorting by columns in query.
func (o QueryDatasetPtrOutput) Sorting() QuerySortingConfigurationArrayOutput {
	return o.ApplyT(func(v *QueryDataset) []QuerySortingConfiguration {
		if v == nil {
			return nil
		}
		return v.Sorting
	}).(QuerySortingConfigurationArrayOutput)
}

// The configuration of dataset in the query.
type QueryDatasetConfiguration struct {
	// Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
	Columns []string `pulumi:"columns"`
}

// QueryDatasetConfigurationInput is an input type that accepts QueryDatasetConfigurationArgs and QueryDatasetConfigurationOutput values.
// You can construct a concrete instance of `QueryDatasetConfigurationInput` via:
//
//          QueryDatasetConfigurationArgs{...}
type QueryDatasetConfigurationInput interface {
	pulumi.Input

	ToQueryDatasetConfigurationOutput() QueryDatasetConfigurationOutput
	ToQueryDatasetConfigurationOutputWithContext(context.Context) QueryDatasetConfigurationOutput
}

// The configuration of dataset in the query.
type QueryDatasetConfigurationArgs struct {
	// Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
	Columns pulumi.StringArrayInput `pulumi:"columns"`
}

func (QueryDatasetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDatasetConfiguration)(nil)).Elem()
}

func (i QueryDatasetConfigurationArgs) ToQueryDatasetConfigurationOutput() QueryDatasetConfigurationOutput {
	return i.ToQueryDatasetConfigurationOutputWithContext(context.Background())
}

func (i QueryDatasetConfigurationArgs) ToQueryDatasetConfigurationOutputWithContext(ctx context.Context) QueryDatasetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetConfigurationOutput)
}

func (i QueryDatasetConfigurationArgs) ToQueryDatasetConfigurationPtrOutput() QueryDatasetConfigurationPtrOutput {
	return i.ToQueryDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (i QueryDatasetConfigurationArgs) ToQueryDatasetConfigurationPtrOutputWithContext(ctx context.Context) QueryDatasetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetConfigurationOutput).ToQueryDatasetConfigurationPtrOutputWithContext(ctx)
}

// QueryDatasetConfigurationPtrInput is an input type that accepts QueryDatasetConfigurationArgs, QueryDatasetConfigurationPtr and QueryDatasetConfigurationPtrOutput values.
// You can construct a concrete instance of `QueryDatasetConfigurationPtrInput` via:
//
//          QueryDatasetConfigurationArgs{...}
//
//  or:
//
//          nil
type QueryDatasetConfigurationPtrInput interface {
	pulumi.Input

	ToQueryDatasetConfigurationPtrOutput() QueryDatasetConfigurationPtrOutput
	ToQueryDatasetConfigurationPtrOutputWithContext(context.Context) QueryDatasetConfigurationPtrOutput
}

type queryDatasetConfigurationPtrType QueryDatasetConfigurationArgs

func QueryDatasetConfigurationPtr(v *QueryDatasetConfigurationArgs) QueryDatasetConfigurationPtrInput {
	return (*queryDatasetConfigurationPtrType)(v)
}

func (*queryDatasetConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDatasetConfiguration)(nil)).Elem()
}

func (i *queryDatasetConfigurationPtrType) ToQueryDatasetConfigurationPtrOutput() QueryDatasetConfigurationPtrOutput {
	return i.ToQueryDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (i *queryDatasetConfigurationPtrType) ToQueryDatasetConfigurationPtrOutputWithContext(ctx context.Context) QueryDatasetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetConfigurationPtrOutput)
}

// The configuration of dataset in the query.
type QueryDatasetConfigurationOutput struct{ *pulumi.OutputState }

func (QueryDatasetConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDatasetConfiguration)(nil)).Elem()
}

func (o QueryDatasetConfigurationOutput) ToQueryDatasetConfigurationOutput() QueryDatasetConfigurationOutput {
	return o
}

func (o QueryDatasetConfigurationOutput) ToQueryDatasetConfigurationOutputWithContext(ctx context.Context) QueryDatasetConfigurationOutput {
	return o
}

func (o QueryDatasetConfigurationOutput) ToQueryDatasetConfigurationPtrOutput() QueryDatasetConfigurationPtrOutput {
	return o.ToQueryDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (o QueryDatasetConfigurationOutput) ToQueryDatasetConfigurationPtrOutputWithContext(ctx context.Context) QueryDatasetConfigurationPtrOutput {
	return o.ApplyT(func(v QueryDatasetConfiguration) *QueryDatasetConfiguration {
		return &v
	}).(QueryDatasetConfigurationPtrOutput)
}

// Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
func (o QueryDatasetConfigurationOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v QueryDatasetConfiguration) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

type QueryDatasetConfigurationPtrOutput struct{ *pulumi.OutputState }

func (QueryDatasetConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDatasetConfiguration)(nil)).Elem()
}

func (o QueryDatasetConfigurationPtrOutput) ToQueryDatasetConfigurationPtrOutput() QueryDatasetConfigurationPtrOutput {
	return o
}

func (o QueryDatasetConfigurationPtrOutput) ToQueryDatasetConfigurationPtrOutputWithContext(ctx context.Context) QueryDatasetConfigurationPtrOutput {
	return o
}

func (o QueryDatasetConfigurationPtrOutput) Elem() QueryDatasetConfigurationOutput {
	return o.ApplyT(func(v *QueryDatasetConfiguration) QueryDatasetConfiguration { return *v }).(QueryDatasetConfigurationOutput)
}

// Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
func (o QueryDatasetConfigurationPtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *QueryDatasetConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// The configuration of dataset in the query.
type QueryDatasetConfigurationInvokeResponse struct {
	// Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
	Columns []string `pulumi:"columns"`
}

// QueryDatasetConfigurationInvokeResponseInput is an input type that accepts QueryDatasetConfigurationInvokeResponseArgs and QueryDatasetConfigurationInvokeResponseOutput values.
// You can construct a concrete instance of `QueryDatasetConfigurationInvokeResponseInput` via:
//
//          QueryDatasetConfigurationInvokeResponseArgs{...}
type QueryDatasetConfigurationInvokeResponseInput interface {
	pulumi.Input

	ToQueryDatasetConfigurationInvokeResponseOutput() QueryDatasetConfigurationInvokeResponseOutput
	ToQueryDatasetConfigurationInvokeResponseOutputWithContext(context.Context) QueryDatasetConfigurationInvokeResponseOutput
}

// The configuration of dataset in the query.
type QueryDatasetConfigurationInvokeResponseArgs struct {
	// Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
	Columns pulumi.StringArrayInput `pulumi:"columns"`
}

func (QueryDatasetConfigurationInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDatasetConfigurationInvokeResponse)(nil)).Elem()
}

func (i QueryDatasetConfigurationInvokeResponseArgs) ToQueryDatasetConfigurationInvokeResponseOutput() QueryDatasetConfigurationInvokeResponseOutput {
	return i.ToQueryDatasetConfigurationInvokeResponseOutputWithContext(context.Background())
}

func (i QueryDatasetConfigurationInvokeResponseArgs) ToQueryDatasetConfigurationInvokeResponseOutputWithContext(ctx context.Context) QueryDatasetConfigurationInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetConfigurationInvokeResponseOutput)
}

func (i QueryDatasetConfigurationInvokeResponseArgs) ToQueryDatasetConfigurationInvokeResponsePtrOutput() QueryDatasetConfigurationInvokeResponsePtrOutput {
	return i.ToQueryDatasetConfigurationInvokeResponsePtrOutputWithContext(context.Background())
}

func (i QueryDatasetConfigurationInvokeResponseArgs) ToQueryDatasetConfigurationInvokeResponsePtrOutputWithContext(ctx context.Context) QueryDatasetConfigurationInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetConfigurationInvokeResponseOutput).ToQueryDatasetConfigurationInvokeResponsePtrOutputWithContext(ctx)
}

// QueryDatasetConfigurationInvokeResponsePtrInput is an input type that accepts QueryDatasetConfigurationInvokeResponseArgs, QueryDatasetConfigurationInvokeResponsePtr and QueryDatasetConfigurationInvokeResponsePtrOutput values.
// You can construct a concrete instance of `QueryDatasetConfigurationInvokeResponsePtrInput` via:
//
//          QueryDatasetConfigurationInvokeResponseArgs{...}
//
//  or:
//
//          nil
type QueryDatasetConfigurationInvokeResponsePtrInput interface {
	pulumi.Input

	ToQueryDatasetConfigurationInvokeResponsePtrOutput() QueryDatasetConfigurationInvokeResponsePtrOutput
	ToQueryDatasetConfigurationInvokeResponsePtrOutputWithContext(context.Context) QueryDatasetConfigurationInvokeResponsePtrOutput
}

type queryDatasetConfigurationInvokeResponsePtrType QueryDatasetConfigurationInvokeResponseArgs

func QueryDatasetConfigurationInvokeResponsePtr(v *QueryDatasetConfigurationInvokeResponseArgs) QueryDatasetConfigurationInvokeResponsePtrInput {
	return (*queryDatasetConfigurationInvokeResponsePtrType)(v)
}

func (*queryDatasetConfigurationInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDatasetConfigurationInvokeResponse)(nil)).Elem()
}

func (i *queryDatasetConfigurationInvokeResponsePtrType) ToQueryDatasetConfigurationInvokeResponsePtrOutput() QueryDatasetConfigurationInvokeResponsePtrOutput {
	return i.ToQueryDatasetConfigurationInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *queryDatasetConfigurationInvokeResponsePtrType) ToQueryDatasetConfigurationInvokeResponsePtrOutputWithContext(ctx context.Context) QueryDatasetConfigurationInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetConfigurationInvokeResponsePtrOutput)
}

// The configuration of dataset in the query.
type QueryDatasetConfigurationInvokeResponseOutput struct{ *pulumi.OutputState }

func (QueryDatasetConfigurationInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDatasetConfigurationInvokeResponse)(nil)).Elem()
}

func (o QueryDatasetConfigurationInvokeResponseOutput) ToQueryDatasetConfigurationInvokeResponseOutput() QueryDatasetConfigurationInvokeResponseOutput {
	return o
}

func (o QueryDatasetConfigurationInvokeResponseOutput) ToQueryDatasetConfigurationInvokeResponseOutputWithContext(ctx context.Context) QueryDatasetConfigurationInvokeResponseOutput {
	return o
}

func (o QueryDatasetConfigurationInvokeResponseOutput) ToQueryDatasetConfigurationInvokeResponsePtrOutput() QueryDatasetConfigurationInvokeResponsePtrOutput {
	return o.ToQueryDatasetConfigurationInvokeResponsePtrOutputWithContext(context.Background())
}

func (o QueryDatasetConfigurationInvokeResponseOutput) ToQueryDatasetConfigurationInvokeResponsePtrOutputWithContext(ctx context.Context) QueryDatasetConfigurationInvokeResponsePtrOutput {
	return o.ApplyT(func(v QueryDatasetConfigurationInvokeResponse) *QueryDatasetConfigurationInvokeResponse {
		return &v
	}).(QueryDatasetConfigurationInvokeResponsePtrOutput)
}

// Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
func (o QueryDatasetConfigurationInvokeResponseOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v QueryDatasetConfigurationInvokeResponse) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

type QueryDatasetConfigurationInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryDatasetConfigurationInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDatasetConfigurationInvokeResponse)(nil)).Elem()
}

func (o QueryDatasetConfigurationInvokeResponsePtrOutput) ToQueryDatasetConfigurationInvokeResponsePtrOutput() QueryDatasetConfigurationInvokeResponsePtrOutput {
	return o
}

func (o QueryDatasetConfigurationInvokeResponsePtrOutput) ToQueryDatasetConfigurationInvokeResponsePtrOutputWithContext(ctx context.Context) QueryDatasetConfigurationInvokeResponsePtrOutput {
	return o
}

func (o QueryDatasetConfigurationInvokeResponsePtrOutput) Elem() QueryDatasetConfigurationInvokeResponseOutput {
	return o.ApplyT(func(v *QueryDatasetConfigurationInvokeResponse) QueryDatasetConfigurationInvokeResponse { return *v }).(QueryDatasetConfigurationInvokeResponseOutput)
}

// Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
func (o QueryDatasetConfigurationInvokeResponsePtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *QueryDatasetConfigurationInvokeResponse) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// The configuration of dataset in the query.
type QueryDatasetConfigurationResponse struct {
	// Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
	Columns []string `pulumi:"columns"`
}

// QueryDatasetConfigurationResponseInput is an input type that accepts QueryDatasetConfigurationResponseArgs and QueryDatasetConfigurationResponseOutput values.
// You can construct a concrete instance of `QueryDatasetConfigurationResponseInput` via:
//
//          QueryDatasetConfigurationResponseArgs{...}
type QueryDatasetConfigurationResponseInput interface {
	pulumi.Input

	ToQueryDatasetConfigurationResponseOutput() QueryDatasetConfigurationResponseOutput
	ToQueryDatasetConfigurationResponseOutputWithContext(context.Context) QueryDatasetConfigurationResponseOutput
}

// The configuration of dataset in the query.
type QueryDatasetConfigurationResponseArgs struct {
	// Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
	Columns pulumi.StringArrayInput `pulumi:"columns"`
}

func (QueryDatasetConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDatasetConfigurationResponse)(nil)).Elem()
}

func (i QueryDatasetConfigurationResponseArgs) ToQueryDatasetConfigurationResponseOutput() QueryDatasetConfigurationResponseOutput {
	return i.ToQueryDatasetConfigurationResponseOutputWithContext(context.Background())
}

func (i QueryDatasetConfigurationResponseArgs) ToQueryDatasetConfigurationResponseOutputWithContext(ctx context.Context) QueryDatasetConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetConfigurationResponseOutput)
}

func (i QueryDatasetConfigurationResponseArgs) ToQueryDatasetConfigurationResponsePtrOutput() QueryDatasetConfigurationResponsePtrOutput {
	return i.ToQueryDatasetConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i QueryDatasetConfigurationResponseArgs) ToQueryDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) QueryDatasetConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetConfigurationResponseOutput).ToQueryDatasetConfigurationResponsePtrOutputWithContext(ctx)
}

// QueryDatasetConfigurationResponsePtrInput is an input type that accepts QueryDatasetConfigurationResponseArgs, QueryDatasetConfigurationResponsePtr and QueryDatasetConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `QueryDatasetConfigurationResponsePtrInput` via:
//
//          QueryDatasetConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type QueryDatasetConfigurationResponsePtrInput interface {
	pulumi.Input

	ToQueryDatasetConfigurationResponsePtrOutput() QueryDatasetConfigurationResponsePtrOutput
	ToQueryDatasetConfigurationResponsePtrOutputWithContext(context.Context) QueryDatasetConfigurationResponsePtrOutput
}

type queryDatasetConfigurationResponsePtrType QueryDatasetConfigurationResponseArgs

func QueryDatasetConfigurationResponsePtr(v *QueryDatasetConfigurationResponseArgs) QueryDatasetConfigurationResponsePtrInput {
	return (*queryDatasetConfigurationResponsePtrType)(v)
}

func (*queryDatasetConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDatasetConfigurationResponse)(nil)).Elem()
}

func (i *queryDatasetConfigurationResponsePtrType) ToQueryDatasetConfigurationResponsePtrOutput() QueryDatasetConfigurationResponsePtrOutput {
	return i.ToQueryDatasetConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *queryDatasetConfigurationResponsePtrType) ToQueryDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) QueryDatasetConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetConfigurationResponsePtrOutput)
}

// The configuration of dataset in the query.
type QueryDatasetConfigurationResponseOutput struct{ *pulumi.OutputState }

func (QueryDatasetConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDatasetConfigurationResponse)(nil)).Elem()
}

func (o QueryDatasetConfigurationResponseOutput) ToQueryDatasetConfigurationResponseOutput() QueryDatasetConfigurationResponseOutput {
	return o
}

func (o QueryDatasetConfigurationResponseOutput) ToQueryDatasetConfigurationResponseOutputWithContext(ctx context.Context) QueryDatasetConfigurationResponseOutput {
	return o
}

func (o QueryDatasetConfigurationResponseOutput) ToQueryDatasetConfigurationResponsePtrOutput() QueryDatasetConfigurationResponsePtrOutput {
	return o.ToQueryDatasetConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o QueryDatasetConfigurationResponseOutput) ToQueryDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) QueryDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v QueryDatasetConfigurationResponse) *QueryDatasetConfigurationResponse {
		return &v
	}).(QueryDatasetConfigurationResponsePtrOutput)
}

// Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
func (o QueryDatasetConfigurationResponseOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v QueryDatasetConfigurationResponse) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

type QueryDatasetConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryDatasetConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDatasetConfigurationResponse)(nil)).Elem()
}

func (o QueryDatasetConfigurationResponsePtrOutput) ToQueryDatasetConfigurationResponsePtrOutput() QueryDatasetConfigurationResponsePtrOutput {
	return o
}

func (o QueryDatasetConfigurationResponsePtrOutput) ToQueryDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) QueryDatasetConfigurationResponsePtrOutput {
	return o
}

func (o QueryDatasetConfigurationResponsePtrOutput) Elem() QueryDatasetConfigurationResponseOutput {
	return o.ApplyT(func(v *QueryDatasetConfigurationResponse) QueryDatasetConfigurationResponse { return *v }).(QueryDatasetConfigurationResponseOutput)
}

// Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
func (o QueryDatasetConfigurationResponsePtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *QueryDatasetConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// The definition of data present in the query.
type QueryDatasetInvokeResponse struct {
	// Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
	Aggregation map[string]QueryAggregationInvokeResponse `pulumi:"aggregation"`
	// Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
	Configuration *QueryDatasetConfigurationInvokeResponse `pulumi:"configuration"`
	// Has filter expression to use in the query.
	Filter *QueryFilterInvokeResponse `pulumi:"filter"`
	// The granularity of rows in the query.
	Granularity *string `pulumi:"granularity"`
	// Array of group by expression to use in the query. Query can have up to 2 group by clauses.
	Grouping []QueryGroupingInvokeResponse `pulumi:"grouping"`
	// Array of sorting by columns in query.
	Sorting []QuerySortingConfigurationInvokeResponse `pulumi:"sorting"`
}

// QueryDatasetInvokeResponseInput is an input type that accepts QueryDatasetInvokeResponseArgs and QueryDatasetInvokeResponseOutput values.
// You can construct a concrete instance of `QueryDatasetInvokeResponseInput` via:
//
//          QueryDatasetInvokeResponseArgs{...}
type QueryDatasetInvokeResponseInput interface {
	pulumi.Input

	ToQueryDatasetInvokeResponseOutput() QueryDatasetInvokeResponseOutput
	ToQueryDatasetInvokeResponseOutputWithContext(context.Context) QueryDatasetInvokeResponseOutput
}

// The definition of data present in the query.
type QueryDatasetInvokeResponseArgs struct {
	// Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
	Aggregation QueryAggregationInvokeResponseMapInput `pulumi:"aggregation"`
	// Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
	Configuration QueryDatasetConfigurationInvokeResponsePtrInput `pulumi:"configuration"`
	// Has filter expression to use in the query.
	Filter QueryFilterInvokeResponsePtrInput `pulumi:"filter"`
	// The granularity of rows in the query.
	Granularity pulumi.StringPtrInput `pulumi:"granularity"`
	// Array of group by expression to use in the query. Query can have up to 2 group by clauses.
	Grouping QueryGroupingInvokeResponseArrayInput `pulumi:"grouping"`
	// Array of sorting by columns in query.
	Sorting QuerySortingConfigurationInvokeResponseArrayInput `pulumi:"sorting"`
}

func (QueryDatasetInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDatasetInvokeResponse)(nil)).Elem()
}

func (i QueryDatasetInvokeResponseArgs) ToQueryDatasetInvokeResponseOutput() QueryDatasetInvokeResponseOutput {
	return i.ToQueryDatasetInvokeResponseOutputWithContext(context.Background())
}

func (i QueryDatasetInvokeResponseArgs) ToQueryDatasetInvokeResponseOutputWithContext(ctx context.Context) QueryDatasetInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetInvokeResponseOutput)
}

func (i QueryDatasetInvokeResponseArgs) ToQueryDatasetInvokeResponsePtrOutput() QueryDatasetInvokeResponsePtrOutput {
	return i.ToQueryDatasetInvokeResponsePtrOutputWithContext(context.Background())
}

func (i QueryDatasetInvokeResponseArgs) ToQueryDatasetInvokeResponsePtrOutputWithContext(ctx context.Context) QueryDatasetInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetInvokeResponseOutput).ToQueryDatasetInvokeResponsePtrOutputWithContext(ctx)
}

// QueryDatasetInvokeResponsePtrInput is an input type that accepts QueryDatasetInvokeResponseArgs, QueryDatasetInvokeResponsePtr and QueryDatasetInvokeResponsePtrOutput values.
// You can construct a concrete instance of `QueryDatasetInvokeResponsePtrInput` via:
//
//          QueryDatasetInvokeResponseArgs{...}
//
//  or:
//
//          nil
type QueryDatasetInvokeResponsePtrInput interface {
	pulumi.Input

	ToQueryDatasetInvokeResponsePtrOutput() QueryDatasetInvokeResponsePtrOutput
	ToQueryDatasetInvokeResponsePtrOutputWithContext(context.Context) QueryDatasetInvokeResponsePtrOutput
}

type queryDatasetInvokeResponsePtrType QueryDatasetInvokeResponseArgs

func QueryDatasetInvokeResponsePtr(v *QueryDatasetInvokeResponseArgs) QueryDatasetInvokeResponsePtrInput {
	return (*queryDatasetInvokeResponsePtrType)(v)
}

func (*queryDatasetInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDatasetInvokeResponse)(nil)).Elem()
}

func (i *queryDatasetInvokeResponsePtrType) ToQueryDatasetInvokeResponsePtrOutput() QueryDatasetInvokeResponsePtrOutput {
	return i.ToQueryDatasetInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *queryDatasetInvokeResponsePtrType) ToQueryDatasetInvokeResponsePtrOutputWithContext(ctx context.Context) QueryDatasetInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetInvokeResponsePtrOutput)
}

// The definition of data present in the query.
type QueryDatasetInvokeResponseOutput struct{ *pulumi.OutputState }

func (QueryDatasetInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDatasetInvokeResponse)(nil)).Elem()
}

func (o QueryDatasetInvokeResponseOutput) ToQueryDatasetInvokeResponseOutput() QueryDatasetInvokeResponseOutput {
	return o
}

func (o QueryDatasetInvokeResponseOutput) ToQueryDatasetInvokeResponseOutputWithContext(ctx context.Context) QueryDatasetInvokeResponseOutput {
	return o
}

func (o QueryDatasetInvokeResponseOutput) ToQueryDatasetInvokeResponsePtrOutput() QueryDatasetInvokeResponsePtrOutput {
	return o.ToQueryDatasetInvokeResponsePtrOutputWithContext(context.Background())
}

func (o QueryDatasetInvokeResponseOutput) ToQueryDatasetInvokeResponsePtrOutputWithContext(ctx context.Context) QueryDatasetInvokeResponsePtrOutput {
	return o.ApplyT(func(v QueryDatasetInvokeResponse) *QueryDatasetInvokeResponse {
		return &v
	}).(QueryDatasetInvokeResponsePtrOutput)
}

// Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
func (o QueryDatasetInvokeResponseOutput) Aggregation() QueryAggregationInvokeResponseMapOutput {
	return o.ApplyT(func(v QueryDatasetInvokeResponse) map[string]QueryAggregationInvokeResponse { return v.Aggregation }).(QueryAggregationInvokeResponseMapOutput)
}

// Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
func (o QueryDatasetInvokeResponseOutput) Configuration() QueryDatasetConfigurationInvokeResponsePtrOutput {
	return o.ApplyT(func(v QueryDatasetInvokeResponse) *QueryDatasetConfigurationInvokeResponse { return v.Configuration }).(QueryDatasetConfigurationInvokeResponsePtrOutput)
}

// Has filter expression to use in the query.
func (o QueryDatasetInvokeResponseOutput) Filter() QueryFilterInvokeResponsePtrOutput {
	return o.ApplyT(func(v QueryDatasetInvokeResponse) *QueryFilterInvokeResponse { return v.Filter }).(QueryFilterInvokeResponsePtrOutput)
}

// The granularity of rows in the query.
func (o QueryDatasetInvokeResponseOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryDatasetInvokeResponse) *string { return v.Granularity }).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the query. Query can have up to 2 group by clauses.
func (o QueryDatasetInvokeResponseOutput) Grouping() QueryGroupingInvokeResponseArrayOutput {
	return o.ApplyT(func(v QueryDatasetInvokeResponse) []QueryGroupingInvokeResponse { return v.Grouping }).(QueryGroupingInvokeResponseArrayOutput)
}

// Array of sorting by columns in query.
func (o QueryDatasetInvokeResponseOutput) Sorting() QuerySortingConfigurationInvokeResponseArrayOutput {
	return o.ApplyT(func(v QueryDatasetInvokeResponse) []QuerySortingConfigurationInvokeResponse { return v.Sorting }).(QuerySortingConfigurationInvokeResponseArrayOutput)
}

type QueryDatasetInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryDatasetInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDatasetInvokeResponse)(nil)).Elem()
}

func (o QueryDatasetInvokeResponsePtrOutput) ToQueryDatasetInvokeResponsePtrOutput() QueryDatasetInvokeResponsePtrOutput {
	return o
}

func (o QueryDatasetInvokeResponsePtrOutput) ToQueryDatasetInvokeResponsePtrOutputWithContext(ctx context.Context) QueryDatasetInvokeResponsePtrOutput {
	return o
}

func (o QueryDatasetInvokeResponsePtrOutput) Elem() QueryDatasetInvokeResponseOutput {
	return o.ApplyT(func(v *QueryDatasetInvokeResponse) QueryDatasetInvokeResponse { return *v }).(QueryDatasetInvokeResponseOutput)
}

// Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
func (o QueryDatasetInvokeResponsePtrOutput) Aggregation() QueryAggregationInvokeResponseMapOutput {
	return o.ApplyT(func(v *QueryDatasetInvokeResponse) map[string]QueryAggregationInvokeResponse {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(QueryAggregationInvokeResponseMapOutput)
}

// Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
func (o QueryDatasetInvokeResponsePtrOutput) Configuration() QueryDatasetConfigurationInvokeResponsePtrOutput {
	return o.ApplyT(func(v *QueryDatasetInvokeResponse) *QueryDatasetConfigurationInvokeResponse {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(QueryDatasetConfigurationInvokeResponsePtrOutput)
}

// Has filter expression to use in the query.
func (o QueryDatasetInvokeResponsePtrOutput) Filter() QueryFilterInvokeResponsePtrOutput {
	return o.ApplyT(func(v *QueryDatasetInvokeResponse) *QueryFilterInvokeResponse {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(QueryFilterInvokeResponsePtrOutput)
}

// The granularity of rows in the query.
func (o QueryDatasetInvokeResponsePtrOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryDatasetInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Granularity
	}).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the query. Query can have up to 2 group by clauses.
func (o QueryDatasetInvokeResponsePtrOutput) Grouping() QueryGroupingInvokeResponseArrayOutput {
	return o.ApplyT(func(v *QueryDatasetInvokeResponse) []QueryGroupingInvokeResponse {
		if v == nil {
			return nil
		}
		return v.Grouping
	}).(QueryGroupingInvokeResponseArrayOutput)
}

// Array of sorting by columns in query.
func (o QueryDatasetInvokeResponsePtrOutput) Sorting() QuerySortingConfigurationInvokeResponseArrayOutput {
	return o.ApplyT(func(v *QueryDatasetInvokeResponse) []QuerySortingConfigurationInvokeResponse {
		if v == nil {
			return nil
		}
		return v.Sorting
	}).(QuerySortingConfigurationInvokeResponseArrayOutput)
}

// The definition of data present in the query.
type QueryDatasetResponse struct {
	// Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
	Aggregation map[string]QueryAggregationResponse `pulumi:"aggregation"`
	// Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
	Configuration *QueryDatasetConfigurationResponse `pulumi:"configuration"`
	// Has filter expression to use in the query.
	Filter *QueryFilterResponse `pulumi:"filter"`
	// The granularity of rows in the query.
	Granularity *string `pulumi:"granularity"`
	// Array of group by expression to use in the query. Query can have up to 2 group by clauses.
	Grouping []QueryGroupingResponse `pulumi:"grouping"`
	// Array of sorting by columns in query.
	Sorting []QuerySortingConfigurationResponse `pulumi:"sorting"`
}

// QueryDatasetResponseInput is an input type that accepts QueryDatasetResponseArgs and QueryDatasetResponseOutput values.
// You can construct a concrete instance of `QueryDatasetResponseInput` via:
//
//          QueryDatasetResponseArgs{...}
type QueryDatasetResponseInput interface {
	pulumi.Input

	ToQueryDatasetResponseOutput() QueryDatasetResponseOutput
	ToQueryDatasetResponseOutputWithContext(context.Context) QueryDatasetResponseOutput
}

// The definition of data present in the query.
type QueryDatasetResponseArgs struct {
	// Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
	Aggregation QueryAggregationResponseMapInput `pulumi:"aggregation"`
	// Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
	Configuration QueryDatasetConfigurationResponsePtrInput `pulumi:"configuration"`
	// Has filter expression to use in the query.
	Filter QueryFilterResponsePtrInput `pulumi:"filter"`
	// The granularity of rows in the query.
	Granularity pulumi.StringPtrInput `pulumi:"granularity"`
	// Array of group by expression to use in the query. Query can have up to 2 group by clauses.
	Grouping QueryGroupingResponseArrayInput `pulumi:"grouping"`
	// Array of sorting by columns in query.
	Sorting QuerySortingConfigurationResponseArrayInput `pulumi:"sorting"`
}

func (QueryDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDatasetResponse)(nil)).Elem()
}

func (i QueryDatasetResponseArgs) ToQueryDatasetResponseOutput() QueryDatasetResponseOutput {
	return i.ToQueryDatasetResponseOutputWithContext(context.Background())
}

func (i QueryDatasetResponseArgs) ToQueryDatasetResponseOutputWithContext(ctx context.Context) QueryDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetResponseOutput)
}

func (i QueryDatasetResponseArgs) ToQueryDatasetResponsePtrOutput() QueryDatasetResponsePtrOutput {
	return i.ToQueryDatasetResponsePtrOutputWithContext(context.Background())
}

func (i QueryDatasetResponseArgs) ToQueryDatasetResponsePtrOutputWithContext(ctx context.Context) QueryDatasetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetResponseOutput).ToQueryDatasetResponsePtrOutputWithContext(ctx)
}

// QueryDatasetResponsePtrInput is an input type that accepts QueryDatasetResponseArgs, QueryDatasetResponsePtr and QueryDatasetResponsePtrOutput values.
// You can construct a concrete instance of `QueryDatasetResponsePtrInput` via:
//
//          QueryDatasetResponseArgs{...}
//
//  or:
//
//          nil
type QueryDatasetResponsePtrInput interface {
	pulumi.Input

	ToQueryDatasetResponsePtrOutput() QueryDatasetResponsePtrOutput
	ToQueryDatasetResponsePtrOutputWithContext(context.Context) QueryDatasetResponsePtrOutput
}

type queryDatasetResponsePtrType QueryDatasetResponseArgs

func QueryDatasetResponsePtr(v *QueryDatasetResponseArgs) QueryDatasetResponsePtrInput {
	return (*queryDatasetResponsePtrType)(v)
}

func (*queryDatasetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDatasetResponse)(nil)).Elem()
}

func (i *queryDatasetResponsePtrType) ToQueryDatasetResponsePtrOutput() QueryDatasetResponsePtrOutput {
	return i.ToQueryDatasetResponsePtrOutputWithContext(context.Background())
}

func (i *queryDatasetResponsePtrType) ToQueryDatasetResponsePtrOutputWithContext(ctx context.Context) QueryDatasetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetResponsePtrOutput)
}

// The definition of data present in the query.
type QueryDatasetResponseOutput struct{ *pulumi.OutputState }

func (QueryDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDatasetResponse)(nil)).Elem()
}

func (o QueryDatasetResponseOutput) ToQueryDatasetResponseOutput() QueryDatasetResponseOutput {
	return o
}

func (o QueryDatasetResponseOutput) ToQueryDatasetResponseOutputWithContext(ctx context.Context) QueryDatasetResponseOutput {
	return o
}

func (o QueryDatasetResponseOutput) ToQueryDatasetResponsePtrOutput() QueryDatasetResponsePtrOutput {
	return o.ToQueryDatasetResponsePtrOutputWithContext(context.Background())
}

func (o QueryDatasetResponseOutput) ToQueryDatasetResponsePtrOutputWithContext(ctx context.Context) QueryDatasetResponsePtrOutput {
	return o.ApplyT(func(v QueryDatasetResponse) *QueryDatasetResponse {
		return &v
	}).(QueryDatasetResponsePtrOutput)
}

// Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
func (o QueryDatasetResponseOutput) Aggregation() QueryAggregationResponseMapOutput {
	return o.ApplyT(func(v QueryDatasetResponse) map[string]QueryAggregationResponse { return v.Aggregation }).(QueryAggregationResponseMapOutput)
}

// Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
func (o QueryDatasetResponseOutput) Configuration() QueryDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v QueryDatasetResponse) *QueryDatasetConfigurationResponse { return v.Configuration }).(QueryDatasetConfigurationResponsePtrOutput)
}

// Has filter expression to use in the query.
func (o QueryDatasetResponseOutput) Filter() QueryFilterResponsePtrOutput {
	return o.ApplyT(func(v QueryDatasetResponse) *QueryFilterResponse { return v.Filter }).(QueryFilterResponsePtrOutput)
}

// The granularity of rows in the query.
func (o QueryDatasetResponseOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryDatasetResponse) *string { return v.Granularity }).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the query. Query can have up to 2 group by clauses.
func (o QueryDatasetResponseOutput) Grouping() QueryGroupingResponseArrayOutput {
	return o.ApplyT(func(v QueryDatasetResponse) []QueryGroupingResponse { return v.Grouping }).(QueryGroupingResponseArrayOutput)
}

// Array of sorting by columns in query.
func (o QueryDatasetResponseOutput) Sorting() QuerySortingConfigurationResponseArrayOutput {
	return o.ApplyT(func(v QueryDatasetResponse) []QuerySortingConfigurationResponse { return v.Sorting }).(QuerySortingConfigurationResponseArrayOutput)
}

type QueryDatasetResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryDatasetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDatasetResponse)(nil)).Elem()
}

func (o QueryDatasetResponsePtrOutput) ToQueryDatasetResponsePtrOutput() QueryDatasetResponsePtrOutput {
	return o
}

func (o QueryDatasetResponsePtrOutput) ToQueryDatasetResponsePtrOutputWithContext(ctx context.Context) QueryDatasetResponsePtrOutput {
	return o
}

func (o QueryDatasetResponsePtrOutput) Elem() QueryDatasetResponseOutput {
	return o.ApplyT(func(v *QueryDatasetResponse) QueryDatasetResponse { return *v }).(QueryDatasetResponseOutput)
}

// Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
func (o QueryDatasetResponsePtrOutput) Aggregation() QueryAggregationResponseMapOutput {
	return o.ApplyT(func(v *QueryDatasetResponse) map[string]QueryAggregationResponse {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(QueryAggregationResponseMapOutput)
}

// Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
func (o QueryDatasetResponsePtrOutput) Configuration() QueryDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *QueryDatasetResponse) *QueryDatasetConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(QueryDatasetConfigurationResponsePtrOutput)
}

// Has filter expression to use in the query.
func (o QueryDatasetResponsePtrOutput) Filter() QueryFilterResponsePtrOutput {
	return o.ApplyT(func(v *QueryDatasetResponse) *QueryFilterResponse {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(QueryFilterResponsePtrOutput)
}

// The granularity of rows in the query.
func (o QueryDatasetResponsePtrOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryDatasetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Granularity
	}).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the query. Query can have up to 2 group by clauses.
func (o QueryDatasetResponsePtrOutput) Grouping() QueryGroupingResponseArrayOutput {
	return o.ApplyT(func(v *QueryDatasetResponse) []QueryGroupingResponse {
		if v == nil {
			return nil
		}
		return v.Grouping
	}).(QueryGroupingResponseArrayOutput)
}

// Array of sorting by columns in query.
func (o QueryDatasetResponsePtrOutput) Sorting() QuerySortingConfigurationResponseArrayOutput {
	return o.ApplyT(func(v *QueryDatasetResponse) []QuerySortingConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Sorting
	}).(QuerySortingConfigurationResponseArrayOutput)
}

// The definition of a query.
type QueryDefinition struct {
	// Has definition for data in this query.
	Dataset *QueryDataset `pulumi:"dataset"`
	// Has time period for pulling data for the query.
	TimePeriod *QueryTimePeriod `pulumi:"timePeriod"`
	// The time frame for pulling data for the query. If custom, then a specific time period must be provided.
	Timeframe string `pulumi:"timeframe"`
	// The type of the query.
	Type string `pulumi:"type"`
}

// QueryDefinitionInput is an input type that accepts QueryDefinitionArgs and QueryDefinitionOutput values.
// You can construct a concrete instance of `QueryDefinitionInput` via:
//
//          QueryDefinitionArgs{...}
type QueryDefinitionInput interface {
	pulumi.Input

	ToQueryDefinitionOutput() QueryDefinitionOutput
	ToQueryDefinitionOutputWithContext(context.Context) QueryDefinitionOutput
}

// The definition of a query.
type QueryDefinitionArgs struct {
	// Has definition for data in this query.
	Dataset QueryDatasetPtrInput `pulumi:"dataset"`
	// Has time period for pulling data for the query.
	TimePeriod QueryTimePeriodPtrInput `pulumi:"timePeriod"`
	// The time frame for pulling data for the query. If custom, then a specific time period must be provided.
	Timeframe pulumi.StringInput `pulumi:"timeframe"`
	// The type of the query.
	Type pulumi.StringInput `pulumi:"type"`
}

func (QueryDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDefinition)(nil)).Elem()
}

func (i QueryDefinitionArgs) ToQueryDefinitionOutput() QueryDefinitionOutput {
	return i.ToQueryDefinitionOutputWithContext(context.Background())
}

func (i QueryDefinitionArgs) ToQueryDefinitionOutputWithContext(ctx context.Context) QueryDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDefinitionOutput)
}

func (i QueryDefinitionArgs) ToQueryDefinitionPtrOutput() QueryDefinitionPtrOutput {
	return i.ToQueryDefinitionPtrOutputWithContext(context.Background())
}

func (i QueryDefinitionArgs) ToQueryDefinitionPtrOutputWithContext(ctx context.Context) QueryDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDefinitionOutput).ToQueryDefinitionPtrOutputWithContext(ctx)
}

// QueryDefinitionPtrInput is an input type that accepts QueryDefinitionArgs, QueryDefinitionPtr and QueryDefinitionPtrOutput values.
// You can construct a concrete instance of `QueryDefinitionPtrInput` via:
//
//          QueryDefinitionArgs{...}
//
//  or:
//
//          nil
type QueryDefinitionPtrInput interface {
	pulumi.Input

	ToQueryDefinitionPtrOutput() QueryDefinitionPtrOutput
	ToQueryDefinitionPtrOutputWithContext(context.Context) QueryDefinitionPtrOutput
}

type queryDefinitionPtrType QueryDefinitionArgs

func QueryDefinitionPtr(v *QueryDefinitionArgs) QueryDefinitionPtrInput {
	return (*queryDefinitionPtrType)(v)
}

func (*queryDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDefinition)(nil)).Elem()
}

func (i *queryDefinitionPtrType) ToQueryDefinitionPtrOutput() QueryDefinitionPtrOutput {
	return i.ToQueryDefinitionPtrOutputWithContext(context.Background())
}

func (i *queryDefinitionPtrType) ToQueryDefinitionPtrOutputWithContext(ctx context.Context) QueryDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDefinitionPtrOutput)
}

// The definition of a query.
type QueryDefinitionOutput struct{ *pulumi.OutputState }

func (QueryDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDefinition)(nil)).Elem()
}

func (o QueryDefinitionOutput) ToQueryDefinitionOutput() QueryDefinitionOutput {
	return o
}

func (o QueryDefinitionOutput) ToQueryDefinitionOutputWithContext(ctx context.Context) QueryDefinitionOutput {
	return o
}

func (o QueryDefinitionOutput) ToQueryDefinitionPtrOutput() QueryDefinitionPtrOutput {
	return o.ToQueryDefinitionPtrOutputWithContext(context.Background())
}

func (o QueryDefinitionOutput) ToQueryDefinitionPtrOutputWithContext(ctx context.Context) QueryDefinitionPtrOutput {
	return o.ApplyT(func(v QueryDefinition) *QueryDefinition {
		return &v
	}).(QueryDefinitionPtrOutput)
}

// Has definition for data in this query.
func (o QueryDefinitionOutput) Dataset() QueryDatasetPtrOutput {
	return o.ApplyT(func(v QueryDefinition) *QueryDataset { return v.Dataset }).(QueryDatasetPtrOutput)
}

// Has time period for pulling data for the query.
func (o QueryDefinitionOutput) TimePeriod() QueryTimePeriodPtrOutput {
	return o.ApplyT(func(v QueryDefinition) *QueryTimePeriod { return v.TimePeriod }).(QueryTimePeriodPtrOutput)
}

// The time frame for pulling data for the query. If custom, then a specific time period must be provided.
func (o QueryDefinitionOutput) Timeframe() pulumi.StringOutput {
	return o.ApplyT(func(v QueryDefinition) string { return v.Timeframe }).(pulumi.StringOutput)
}

// The type of the query.
func (o QueryDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QueryDefinition) string { return v.Type }).(pulumi.StringOutput)
}

type QueryDefinitionPtrOutput struct{ *pulumi.OutputState }

func (QueryDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDefinition)(nil)).Elem()
}

func (o QueryDefinitionPtrOutput) ToQueryDefinitionPtrOutput() QueryDefinitionPtrOutput {
	return o
}

func (o QueryDefinitionPtrOutput) ToQueryDefinitionPtrOutputWithContext(ctx context.Context) QueryDefinitionPtrOutput {
	return o
}

func (o QueryDefinitionPtrOutput) Elem() QueryDefinitionOutput {
	return o.ApplyT(func(v *QueryDefinition) QueryDefinition { return *v }).(QueryDefinitionOutput)
}

// Has definition for data in this query.
func (o QueryDefinitionPtrOutput) Dataset() QueryDatasetPtrOutput {
	return o.ApplyT(func(v *QueryDefinition) *QueryDataset {
		if v == nil {
			return nil
		}
		return v.Dataset
	}).(QueryDatasetPtrOutput)
}

// Has time period for pulling data for the query.
func (o QueryDefinitionPtrOutput) TimePeriod() QueryTimePeriodPtrOutput {
	return o.ApplyT(func(v *QueryDefinition) *QueryTimePeriod {
		if v == nil {
			return nil
		}
		return v.TimePeriod
	}).(QueryTimePeriodPtrOutput)
}

// The time frame for pulling data for the query. If custom, then a specific time period must be provided.
func (o QueryDefinitionPtrOutput) Timeframe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.Timeframe
	}).(pulumi.StringPtrOutput)
}

// The type of the query.
func (o QueryDefinitionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The definition of a query.
type QueryDefinitionInvokeResponse struct {
	// Has definition for data in this query.
	Dataset *QueryDatasetInvokeResponse `pulumi:"dataset"`
	// Has time period for pulling data for the query.
	TimePeriod *QueryTimePeriodInvokeResponse `pulumi:"timePeriod"`
	// The time frame for pulling data for the query. If custom, then a specific time period must be provided.
	Timeframe string `pulumi:"timeframe"`
	// The type of the query.
	Type string `pulumi:"type"`
}

// QueryDefinitionInvokeResponseInput is an input type that accepts QueryDefinitionInvokeResponseArgs and QueryDefinitionInvokeResponseOutput values.
// You can construct a concrete instance of `QueryDefinitionInvokeResponseInput` via:
//
//          QueryDefinitionInvokeResponseArgs{...}
type QueryDefinitionInvokeResponseInput interface {
	pulumi.Input

	ToQueryDefinitionInvokeResponseOutput() QueryDefinitionInvokeResponseOutput
	ToQueryDefinitionInvokeResponseOutputWithContext(context.Context) QueryDefinitionInvokeResponseOutput
}

// The definition of a query.
type QueryDefinitionInvokeResponseArgs struct {
	// Has definition for data in this query.
	Dataset QueryDatasetInvokeResponsePtrInput `pulumi:"dataset"`
	// Has time period for pulling data for the query.
	TimePeriod QueryTimePeriodInvokeResponsePtrInput `pulumi:"timePeriod"`
	// The time frame for pulling data for the query. If custom, then a specific time period must be provided.
	Timeframe pulumi.StringInput `pulumi:"timeframe"`
	// The type of the query.
	Type pulumi.StringInput `pulumi:"type"`
}

func (QueryDefinitionInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDefinitionInvokeResponse)(nil)).Elem()
}

func (i QueryDefinitionInvokeResponseArgs) ToQueryDefinitionInvokeResponseOutput() QueryDefinitionInvokeResponseOutput {
	return i.ToQueryDefinitionInvokeResponseOutputWithContext(context.Background())
}

func (i QueryDefinitionInvokeResponseArgs) ToQueryDefinitionInvokeResponseOutputWithContext(ctx context.Context) QueryDefinitionInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDefinitionInvokeResponseOutput)
}

// The definition of a query.
type QueryDefinitionInvokeResponseOutput struct{ *pulumi.OutputState }

func (QueryDefinitionInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDefinitionInvokeResponse)(nil)).Elem()
}

func (o QueryDefinitionInvokeResponseOutput) ToQueryDefinitionInvokeResponseOutput() QueryDefinitionInvokeResponseOutput {
	return o
}

func (o QueryDefinitionInvokeResponseOutput) ToQueryDefinitionInvokeResponseOutputWithContext(ctx context.Context) QueryDefinitionInvokeResponseOutput {
	return o
}

// Has definition for data in this query.
func (o QueryDefinitionInvokeResponseOutput) Dataset() QueryDatasetInvokeResponsePtrOutput {
	return o.ApplyT(func(v QueryDefinitionInvokeResponse) *QueryDatasetInvokeResponse { return v.Dataset }).(QueryDatasetInvokeResponsePtrOutput)
}

// Has time period for pulling data for the query.
func (o QueryDefinitionInvokeResponseOutput) TimePeriod() QueryTimePeriodInvokeResponsePtrOutput {
	return o.ApplyT(func(v QueryDefinitionInvokeResponse) *QueryTimePeriodInvokeResponse { return v.TimePeriod }).(QueryTimePeriodInvokeResponsePtrOutput)
}

// The time frame for pulling data for the query. If custom, then a specific time period must be provided.
func (o QueryDefinitionInvokeResponseOutput) Timeframe() pulumi.StringOutput {
	return o.ApplyT(func(v QueryDefinitionInvokeResponse) string { return v.Timeframe }).(pulumi.StringOutput)
}

// The type of the query.
func (o QueryDefinitionInvokeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QueryDefinitionInvokeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The definition of a query.
type QueryDefinitionResponse struct {
	// Has definition for data in this query.
	Dataset *QueryDatasetResponse `pulumi:"dataset"`
	// Has time period for pulling data for the query.
	TimePeriod *QueryTimePeriodResponse `pulumi:"timePeriod"`
	// The time frame for pulling data for the query. If custom, then a specific time period must be provided.
	Timeframe string `pulumi:"timeframe"`
	// The type of the query.
	Type string `pulumi:"type"`
}

// QueryDefinitionResponseInput is an input type that accepts QueryDefinitionResponseArgs and QueryDefinitionResponseOutput values.
// You can construct a concrete instance of `QueryDefinitionResponseInput` via:
//
//          QueryDefinitionResponseArgs{...}
type QueryDefinitionResponseInput interface {
	pulumi.Input

	ToQueryDefinitionResponseOutput() QueryDefinitionResponseOutput
	ToQueryDefinitionResponseOutputWithContext(context.Context) QueryDefinitionResponseOutput
}

// The definition of a query.
type QueryDefinitionResponseArgs struct {
	// Has definition for data in this query.
	Dataset QueryDatasetResponsePtrInput `pulumi:"dataset"`
	// Has time period for pulling data for the query.
	TimePeriod QueryTimePeriodResponsePtrInput `pulumi:"timePeriod"`
	// The time frame for pulling data for the query. If custom, then a specific time period must be provided.
	Timeframe pulumi.StringInput `pulumi:"timeframe"`
	// The type of the query.
	Type pulumi.StringInput `pulumi:"type"`
}

func (QueryDefinitionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDefinitionResponse)(nil)).Elem()
}

func (i QueryDefinitionResponseArgs) ToQueryDefinitionResponseOutput() QueryDefinitionResponseOutput {
	return i.ToQueryDefinitionResponseOutputWithContext(context.Background())
}

func (i QueryDefinitionResponseArgs) ToQueryDefinitionResponseOutputWithContext(ctx context.Context) QueryDefinitionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDefinitionResponseOutput)
}

func (i QueryDefinitionResponseArgs) ToQueryDefinitionResponsePtrOutput() QueryDefinitionResponsePtrOutput {
	return i.ToQueryDefinitionResponsePtrOutputWithContext(context.Background())
}

func (i QueryDefinitionResponseArgs) ToQueryDefinitionResponsePtrOutputWithContext(ctx context.Context) QueryDefinitionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDefinitionResponseOutput).ToQueryDefinitionResponsePtrOutputWithContext(ctx)
}

// QueryDefinitionResponsePtrInput is an input type that accepts QueryDefinitionResponseArgs, QueryDefinitionResponsePtr and QueryDefinitionResponsePtrOutput values.
// You can construct a concrete instance of `QueryDefinitionResponsePtrInput` via:
//
//          QueryDefinitionResponseArgs{...}
//
//  or:
//
//          nil
type QueryDefinitionResponsePtrInput interface {
	pulumi.Input

	ToQueryDefinitionResponsePtrOutput() QueryDefinitionResponsePtrOutput
	ToQueryDefinitionResponsePtrOutputWithContext(context.Context) QueryDefinitionResponsePtrOutput
}

type queryDefinitionResponsePtrType QueryDefinitionResponseArgs

func QueryDefinitionResponsePtr(v *QueryDefinitionResponseArgs) QueryDefinitionResponsePtrInput {
	return (*queryDefinitionResponsePtrType)(v)
}

func (*queryDefinitionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDefinitionResponse)(nil)).Elem()
}

func (i *queryDefinitionResponsePtrType) ToQueryDefinitionResponsePtrOutput() QueryDefinitionResponsePtrOutput {
	return i.ToQueryDefinitionResponsePtrOutputWithContext(context.Background())
}

func (i *queryDefinitionResponsePtrType) ToQueryDefinitionResponsePtrOutputWithContext(ctx context.Context) QueryDefinitionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDefinitionResponsePtrOutput)
}

// The definition of a query.
type QueryDefinitionResponseOutput struct{ *pulumi.OutputState }

func (QueryDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDefinitionResponse)(nil)).Elem()
}

func (o QueryDefinitionResponseOutput) ToQueryDefinitionResponseOutput() QueryDefinitionResponseOutput {
	return o
}

func (o QueryDefinitionResponseOutput) ToQueryDefinitionResponseOutputWithContext(ctx context.Context) QueryDefinitionResponseOutput {
	return o
}

func (o QueryDefinitionResponseOutput) ToQueryDefinitionResponsePtrOutput() QueryDefinitionResponsePtrOutput {
	return o.ToQueryDefinitionResponsePtrOutputWithContext(context.Background())
}

func (o QueryDefinitionResponseOutput) ToQueryDefinitionResponsePtrOutputWithContext(ctx context.Context) QueryDefinitionResponsePtrOutput {
	return o.ApplyT(func(v QueryDefinitionResponse) *QueryDefinitionResponse {
		return &v
	}).(QueryDefinitionResponsePtrOutput)
}

// Has definition for data in this query.
func (o QueryDefinitionResponseOutput) Dataset() QueryDatasetResponsePtrOutput {
	return o.ApplyT(func(v QueryDefinitionResponse) *QueryDatasetResponse { return v.Dataset }).(QueryDatasetResponsePtrOutput)
}

// Has time period for pulling data for the query.
func (o QueryDefinitionResponseOutput) TimePeriod() QueryTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v QueryDefinitionResponse) *QueryTimePeriodResponse { return v.TimePeriod }).(QueryTimePeriodResponsePtrOutput)
}

// The time frame for pulling data for the query. If custom, then a specific time period must be provided.
func (o QueryDefinitionResponseOutput) Timeframe() pulumi.StringOutput {
	return o.ApplyT(func(v QueryDefinitionResponse) string { return v.Timeframe }).(pulumi.StringOutput)
}

// The type of the query.
func (o QueryDefinitionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QueryDefinitionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type QueryDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDefinitionResponse)(nil)).Elem()
}

func (o QueryDefinitionResponsePtrOutput) ToQueryDefinitionResponsePtrOutput() QueryDefinitionResponsePtrOutput {
	return o
}

func (o QueryDefinitionResponsePtrOutput) ToQueryDefinitionResponsePtrOutputWithContext(ctx context.Context) QueryDefinitionResponsePtrOutput {
	return o
}

func (o QueryDefinitionResponsePtrOutput) Elem() QueryDefinitionResponseOutput {
	return o.ApplyT(func(v *QueryDefinitionResponse) QueryDefinitionResponse { return *v }).(QueryDefinitionResponseOutput)
}

// Has definition for data in this query.
func (o QueryDefinitionResponsePtrOutput) Dataset() QueryDatasetResponsePtrOutput {
	return o.ApplyT(func(v *QueryDefinitionResponse) *QueryDatasetResponse {
		if v == nil {
			return nil
		}
		return v.Dataset
	}).(QueryDatasetResponsePtrOutput)
}

// Has time period for pulling data for the query.
func (o QueryDefinitionResponsePtrOutput) TimePeriod() QueryTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v *QueryDefinitionResponse) *QueryTimePeriodResponse {
		if v == nil {
			return nil
		}
		return v.TimePeriod
	}).(QueryTimePeriodResponsePtrOutput)
}

// The time frame for pulling data for the query. If custom, then a specific time period must be provided.
func (o QueryDefinitionResponsePtrOutput) Timeframe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Timeframe
	}).(pulumi.StringPtrOutput)
}

// The type of the query.
func (o QueryDefinitionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The filter expression to be used in the export.
type QueryFilter struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []QueryFilter `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension *QueryComparisonExpression `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not *QueryFilter `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or []QueryFilter `pulumi:"or"`
	// Has comparison expression for a tag
	Tag *QueryComparisonExpression `pulumi:"tag"`
}

// QueryFilterInput is an input type that accepts QueryFilterArgs and QueryFilterOutput values.
// You can construct a concrete instance of `QueryFilterInput` via:
//
//          QueryFilterArgs{...}
type QueryFilterInput interface {
	pulumi.Input

	ToQueryFilterOutput() QueryFilterOutput
	ToQueryFilterOutputWithContext(context.Context) QueryFilterOutput
}

// The filter expression to be used in the export.
type QueryFilterArgs struct {
	// The logical "AND" expression. Must have at least 2 items.
	And QueryFilterArrayInput `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension QueryComparisonExpressionPtrInput `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not QueryFilterPtrInput `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or QueryFilterArrayInput `pulumi:"or"`
	// Has comparison expression for a tag
	Tag QueryComparisonExpressionPtrInput `pulumi:"tag"`
}

func (QueryFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryFilter)(nil)).Elem()
}

func (i QueryFilterArgs) ToQueryFilterOutput() QueryFilterOutput {
	return i.ToQueryFilterOutputWithContext(context.Background())
}

func (i QueryFilterArgs) ToQueryFilterOutputWithContext(ctx context.Context) QueryFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryFilterOutput)
}

func (i QueryFilterArgs) ToQueryFilterPtrOutput() QueryFilterPtrOutput {
	return i.ToQueryFilterPtrOutputWithContext(context.Background())
}

func (i QueryFilterArgs) ToQueryFilterPtrOutputWithContext(ctx context.Context) QueryFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryFilterOutput).ToQueryFilterPtrOutputWithContext(ctx)
}

// QueryFilterPtrInput is an input type that accepts QueryFilterArgs, QueryFilterPtr and QueryFilterPtrOutput values.
// You can construct a concrete instance of `QueryFilterPtrInput` via:
//
//          QueryFilterArgs{...}
//
//  or:
//
//          nil
type QueryFilterPtrInput interface {
	pulumi.Input

	ToQueryFilterPtrOutput() QueryFilterPtrOutput
	ToQueryFilterPtrOutputWithContext(context.Context) QueryFilterPtrOutput
}

type queryFilterPtrType QueryFilterArgs

func QueryFilterPtr(v *QueryFilterArgs) QueryFilterPtrInput {
	return (*queryFilterPtrType)(v)
}

func (*queryFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryFilter)(nil)).Elem()
}

func (i *queryFilterPtrType) ToQueryFilterPtrOutput() QueryFilterPtrOutput {
	return i.ToQueryFilterPtrOutputWithContext(context.Background())
}

func (i *queryFilterPtrType) ToQueryFilterPtrOutputWithContext(ctx context.Context) QueryFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryFilterPtrOutput)
}

// QueryFilterArrayInput is an input type that accepts QueryFilterArray and QueryFilterArrayOutput values.
// You can construct a concrete instance of `QueryFilterArrayInput` via:
//
//          QueryFilterArray{ QueryFilterArgs{...} }
type QueryFilterArrayInput interface {
	pulumi.Input

	ToQueryFilterArrayOutput() QueryFilterArrayOutput
	ToQueryFilterArrayOutputWithContext(context.Context) QueryFilterArrayOutput
}

type QueryFilterArray []QueryFilterInput

func (QueryFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryFilter)(nil)).Elem()
}

func (i QueryFilterArray) ToQueryFilterArrayOutput() QueryFilterArrayOutput {
	return i.ToQueryFilterArrayOutputWithContext(context.Background())
}

func (i QueryFilterArray) ToQueryFilterArrayOutputWithContext(ctx context.Context) QueryFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryFilterArrayOutput)
}

// The filter expression to be used in the export.
type QueryFilterOutput struct{ *pulumi.OutputState }

func (QueryFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryFilter)(nil)).Elem()
}

func (o QueryFilterOutput) ToQueryFilterOutput() QueryFilterOutput {
	return o
}

func (o QueryFilterOutput) ToQueryFilterOutputWithContext(ctx context.Context) QueryFilterOutput {
	return o
}

func (o QueryFilterOutput) ToQueryFilterPtrOutput() QueryFilterPtrOutput {
	return o.ToQueryFilterPtrOutputWithContext(context.Background())
}

func (o QueryFilterOutput) ToQueryFilterPtrOutputWithContext(ctx context.Context) QueryFilterPtrOutput {
	return o.ApplyT(func(v QueryFilter) *QueryFilter {
		return &v
	}).(QueryFilterPtrOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o QueryFilterOutput) And() QueryFilterArrayOutput {
	return o.ApplyT(func(v QueryFilter) []QueryFilter { return v.And }).(QueryFilterArrayOutput)
}

// Has comparison expression for a dimension
func (o QueryFilterOutput) Dimension() QueryComparisonExpressionPtrOutput {
	return o.ApplyT(func(v QueryFilter) *QueryComparisonExpression { return v.Dimension }).(QueryComparisonExpressionPtrOutput)
}

// The logical "NOT" expression.
func (o QueryFilterOutput) Not() QueryFilterPtrOutput {
	return o.ApplyT(func(v QueryFilter) *QueryFilter { return v.Not }).(QueryFilterPtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o QueryFilterOutput) Or() QueryFilterArrayOutput {
	return o.ApplyT(func(v QueryFilter) []QueryFilter { return v.Or }).(QueryFilterArrayOutput)
}

// Has comparison expression for a tag
func (o QueryFilterOutput) Tag() QueryComparisonExpressionPtrOutput {
	return o.ApplyT(func(v QueryFilter) *QueryComparisonExpression { return v.Tag }).(QueryComparisonExpressionPtrOutput)
}

type QueryFilterPtrOutput struct{ *pulumi.OutputState }

func (QueryFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryFilter)(nil)).Elem()
}

func (o QueryFilterPtrOutput) ToQueryFilterPtrOutput() QueryFilterPtrOutput {
	return o
}

func (o QueryFilterPtrOutput) ToQueryFilterPtrOutputWithContext(ctx context.Context) QueryFilterPtrOutput {
	return o
}

func (o QueryFilterPtrOutput) Elem() QueryFilterOutput {
	return o.ApplyT(func(v *QueryFilter) QueryFilter { return *v }).(QueryFilterOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o QueryFilterPtrOutput) And() QueryFilterArrayOutput {
	return o.ApplyT(func(v *QueryFilter) []QueryFilter {
		if v == nil {
			return nil
		}
		return v.And
	}).(QueryFilterArrayOutput)
}

// Has comparison expression for a dimension
func (o QueryFilterPtrOutput) Dimension() QueryComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *QueryFilter) *QueryComparisonExpression {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(QueryComparisonExpressionPtrOutput)
}

// The logical "NOT" expression.
func (o QueryFilterPtrOutput) Not() QueryFilterPtrOutput {
	return o.ApplyT(func(v *QueryFilter) *QueryFilter {
		if v == nil {
			return nil
		}
		return v.Not
	}).(QueryFilterPtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o QueryFilterPtrOutput) Or() QueryFilterArrayOutput {
	return o.ApplyT(func(v *QueryFilter) []QueryFilter {
		if v == nil {
			return nil
		}
		return v.Or
	}).(QueryFilterArrayOutput)
}

// Has comparison expression for a tag
func (o QueryFilterPtrOutput) Tag() QueryComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *QueryFilter) *QueryComparisonExpression {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(QueryComparisonExpressionPtrOutput)
}

type QueryFilterArrayOutput struct{ *pulumi.OutputState }

func (QueryFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryFilter)(nil)).Elem()
}

func (o QueryFilterArrayOutput) ToQueryFilterArrayOutput() QueryFilterArrayOutput {
	return o
}

func (o QueryFilterArrayOutput) ToQueryFilterArrayOutputWithContext(ctx context.Context) QueryFilterArrayOutput {
	return o
}

func (o QueryFilterArrayOutput) Index(i pulumi.IntInput) QueryFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryFilter {
		return vs[0].([]QueryFilter)[vs[1].(int)]
	}).(QueryFilterOutput)
}

// The filter expression to be used in the export.
type QueryFilterInvokeResponse struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []QueryFilterInvokeResponse `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension *QueryComparisonExpressionInvokeResponse `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not *QueryFilterInvokeResponse `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or []QueryFilterInvokeResponse `pulumi:"or"`
	// Has comparison expression for a tag
	Tag *QueryComparisonExpressionInvokeResponse `pulumi:"tag"`
}

// QueryFilterInvokeResponseInput is an input type that accepts QueryFilterInvokeResponseArgs and QueryFilterInvokeResponseOutput values.
// You can construct a concrete instance of `QueryFilterInvokeResponseInput` via:
//
//          QueryFilterInvokeResponseArgs{...}
type QueryFilterInvokeResponseInput interface {
	pulumi.Input

	ToQueryFilterInvokeResponseOutput() QueryFilterInvokeResponseOutput
	ToQueryFilterInvokeResponseOutputWithContext(context.Context) QueryFilterInvokeResponseOutput
}

// The filter expression to be used in the export.
type QueryFilterInvokeResponseArgs struct {
	// The logical "AND" expression. Must have at least 2 items.
	And QueryFilterInvokeResponseArrayInput `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension QueryComparisonExpressionInvokeResponsePtrInput `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not QueryFilterInvokeResponsePtrInput `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or QueryFilterInvokeResponseArrayInput `pulumi:"or"`
	// Has comparison expression for a tag
	Tag QueryComparisonExpressionInvokeResponsePtrInput `pulumi:"tag"`
}

func (QueryFilterInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryFilterInvokeResponse)(nil)).Elem()
}

func (i QueryFilterInvokeResponseArgs) ToQueryFilterInvokeResponseOutput() QueryFilterInvokeResponseOutput {
	return i.ToQueryFilterInvokeResponseOutputWithContext(context.Background())
}

func (i QueryFilterInvokeResponseArgs) ToQueryFilterInvokeResponseOutputWithContext(ctx context.Context) QueryFilterInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryFilterInvokeResponseOutput)
}

func (i QueryFilterInvokeResponseArgs) ToQueryFilterInvokeResponsePtrOutput() QueryFilterInvokeResponsePtrOutput {
	return i.ToQueryFilterInvokeResponsePtrOutputWithContext(context.Background())
}

func (i QueryFilterInvokeResponseArgs) ToQueryFilterInvokeResponsePtrOutputWithContext(ctx context.Context) QueryFilterInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryFilterInvokeResponseOutput).ToQueryFilterInvokeResponsePtrOutputWithContext(ctx)
}

// QueryFilterInvokeResponsePtrInput is an input type that accepts QueryFilterInvokeResponseArgs, QueryFilterInvokeResponsePtr and QueryFilterInvokeResponsePtrOutput values.
// You can construct a concrete instance of `QueryFilterInvokeResponsePtrInput` via:
//
//          QueryFilterInvokeResponseArgs{...}
//
//  or:
//
//          nil
type QueryFilterInvokeResponsePtrInput interface {
	pulumi.Input

	ToQueryFilterInvokeResponsePtrOutput() QueryFilterInvokeResponsePtrOutput
	ToQueryFilterInvokeResponsePtrOutputWithContext(context.Context) QueryFilterInvokeResponsePtrOutput
}

type queryFilterInvokeResponsePtrType QueryFilterInvokeResponseArgs

func QueryFilterInvokeResponsePtr(v *QueryFilterInvokeResponseArgs) QueryFilterInvokeResponsePtrInput {
	return (*queryFilterInvokeResponsePtrType)(v)
}

func (*queryFilterInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryFilterInvokeResponse)(nil)).Elem()
}

func (i *queryFilterInvokeResponsePtrType) ToQueryFilterInvokeResponsePtrOutput() QueryFilterInvokeResponsePtrOutput {
	return i.ToQueryFilterInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *queryFilterInvokeResponsePtrType) ToQueryFilterInvokeResponsePtrOutputWithContext(ctx context.Context) QueryFilterInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryFilterInvokeResponsePtrOutput)
}

// QueryFilterInvokeResponseArrayInput is an input type that accepts QueryFilterInvokeResponseArray and QueryFilterInvokeResponseArrayOutput values.
// You can construct a concrete instance of `QueryFilterInvokeResponseArrayInput` via:
//
//          QueryFilterInvokeResponseArray{ QueryFilterInvokeResponseArgs{...} }
type QueryFilterInvokeResponseArrayInput interface {
	pulumi.Input

	ToQueryFilterInvokeResponseArrayOutput() QueryFilterInvokeResponseArrayOutput
	ToQueryFilterInvokeResponseArrayOutputWithContext(context.Context) QueryFilterInvokeResponseArrayOutput
}

type QueryFilterInvokeResponseArray []QueryFilterInvokeResponseInput

func (QueryFilterInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryFilterInvokeResponse)(nil)).Elem()
}

func (i QueryFilterInvokeResponseArray) ToQueryFilterInvokeResponseArrayOutput() QueryFilterInvokeResponseArrayOutput {
	return i.ToQueryFilterInvokeResponseArrayOutputWithContext(context.Background())
}

func (i QueryFilterInvokeResponseArray) ToQueryFilterInvokeResponseArrayOutputWithContext(ctx context.Context) QueryFilterInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryFilterInvokeResponseArrayOutput)
}

// The filter expression to be used in the export.
type QueryFilterInvokeResponseOutput struct{ *pulumi.OutputState }

func (QueryFilterInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryFilterInvokeResponse)(nil)).Elem()
}

func (o QueryFilterInvokeResponseOutput) ToQueryFilterInvokeResponseOutput() QueryFilterInvokeResponseOutput {
	return o
}

func (o QueryFilterInvokeResponseOutput) ToQueryFilterInvokeResponseOutputWithContext(ctx context.Context) QueryFilterInvokeResponseOutput {
	return o
}

func (o QueryFilterInvokeResponseOutput) ToQueryFilterInvokeResponsePtrOutput() QueryFilterInvokeResponsePtrOutput {
	return o.ToQueryFilterInvokeResponsePtrOutputWithContext(context.Background())
}

func (o QueryFilterInvokeResponseOutput) ToQueryFilterInvokeResponsePtrOutputWithContext(ctx context.Context) QueryFilterInvokeResponsePtrOutput {
	return o.ApplyT(func(v QueryFilterInvokeResponse) *QueryFilterInvokeResponse {
		return &v
	}).(QueryFilterInvokeResponsePtrOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o QueryFilterInvokeResponseOutput) And() QueryFilterInvokeResponseArrayOutput {
	return o.ApplyT(func(v QueryFilterInvokeResponse) []QueryFilterInvokeResponse { return v.And }).(QueryFilterInvokeResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o QueryFilterInvokeResponseOutput) Dimension() QueryComparisonExpressionInvokeResponsePtrOutput {
	return o.ApplyT(func(v QueryFilterInvokeResponse) *QueryComparisonExpressionInvokeResponse { return v.Dimension }).(QueryComparisonExpressionInvokeResponsePtrOutput)
}

// The logical "NOT" expression.
func (o QueryFilterInvokeResponseOutput) Not() QueryFilterInvokeResponsePtrOutput {
	return o.ApplyT(func(v QueryFilterInvokeResponse) *QueryFilterInvokeResponse { return v.Not }).(QueryFilterInvokeResponsePtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o QueryFilterInvokeResponseOutput) Or() QueryFilterInvokeResponseArrayOutput {
	return o.ApplyT(func(v QueryFilterInvokeResponse) []QueryFilterInvokeResponse { return v.Or }).(QueryFilterInvokeResponseArrayOutput)
}

// Has comparison expression for a tag
func (o QueryFilterInvokeResponseOutput) Tag() QueryComparisonExpressionInvokeResponsePtrOutput {
	return o.ApplyT(func(v QueryFilterInvokeResponse) *QueryComparisonExpressionInvokeResponse { return v.Tag }).(QueryComparisonExpressionInvokeResponsePtrOutput)
}

type QueryFilterInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryFilterInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryFilterInvokeResponse)(nil)).Elem()
}

func (o QueryFilterInvokeResponsePtrOutput) ToQueryFilterInvokeResponsePtrOutput() QueryFilterInvokeResponsePtrOutput {
	return o
}

func (o QueryFilterInvokeResponsePtrOutput) ToQueryFilterInvokeResponsePtrOutputWithContext(ctx context.Context) QueryFilterInvokeResponsePtrOutput {
	return o
}

func (o QueryFilterInvokeResponsePtrOutput) Elem() QueryFilterInvokeResponseOutput {
	return o.ApplyT(func(v *QueryFilterInvokeResponse) QueryFilterInvokeResponse { return *v }).(QueryFilterInvokeResponseOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o QueryFilterInvokeResponsePtrOutput) And() QueryFilterInvokeResponseArrayOutput {
	return o.ApplyT(func(v *QueryFilterInvokeResponse) []QueryFilterInvokeResponse {
		if v == nil {
			return nil
		}
		return v.And
	}).(QueryFilterInvokeResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o QueryFilterInvokeResponsePtrOutput) Dimension() QueryComparisonExpressionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *QueryFilterInvokeResponse) *QueryComparisonExpressionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(QueryComparisonExpressionInvokeResponsePtrOutput)
}

// The logical "NOT" expression.
func (o QueryFilterInvokeResponsePtrOutput) Not() QueryFilterInvokeResponsePtrOutput {
	return o.ApplyT(func(v *QueryFilterInvokeResponse) *QueryFilterInvokeResponse {
		if v == nil {
			return nil
		}
		return v.Not
	}).(QueryFilterInvokeResponsePtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o QueryFilterInvokeResponsePtrOutput) Or() QueryFilterInvokeResponseArrayOutput {
	return o.ApplyT(func(v *QueryFilterInvokeResponse) []QueryFilterInvokeResponse {
		if v == nil {
			return nil
		}
		return v.Or
	}).(QueryFilterInvokeResponseArrayOutput)
}

// Has comparison expression for a tag
func (o QueryFilterInvokeResponsePtrOutput) Tag() QueryComparisonExpressionInvokeResponsePtrOutput {
	return o.ApplyT(func(v *QueryFilterInvokeResponse) *QueryComparisonExpressionInvokeResponse {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(QueryComparisonExpressionInvokeResponsePtrOutput)
}

type QueryFilterInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (QueryFilterInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryFilterInvokeResponse)(nil)).Elem()
}

func (o QueryFilterInvokeResponseArrayOutput) ToQueryFilterInvokeResponseArrayOutput() QueryFilterInvokeResponseArrayOutput {
	return o
}

func (o QueryFilterInvokeResponseArrayOutput) ToQueryFilterInvokeResponseArrayOutputWithContext(ctx context.Context) QueryFilterInvokeResponseArrayOutput {
	return o
}

func (o QueryFilterInvokeResponseArrayOutput) Index(i pulumi.IntInput) QueryFilterInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryFilterInvokeResponse {
		return vs[0].([]QueryFilterInvokeResponse)[vs[1].(int)]
	}).(QueryFilterInvokeResponseOutput)
}

// The filter expression to be used in the export.
type QueryFilterResponse struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []QueryFilterResponse `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension *QueryComparisonExpressionResponse `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not *QueryFilterResponse `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or []QueryFilterResponse `pulumi:"or"`
	// Has comparison expression for a tag
	Tag *QueryComparisonExpressionResponse `pulumi:"tag"`
}

// QueryFilterResponseInput is an input type that accepts QueryFilterResponseArgs and QueryFilterResponseOutput values.
// You can construct a concrete instance of `QueryFilterResponseInput` via:
//
//          QueryFilterResponseArgs{...}
type QueryFilterResponseInput interface {
	pulumi.Input

	ToQueryFilterResponseOutput() QueryFilterResponseOutput
	ToQueryFilterResponseOutputWithContext(context.Context) QueryFilterResponseOutput
}

// The filter expression to be used in the export.
type QueryFilterResponseArgs struct {
	// The logical "AND" expression. Must have at least 2 items.
	And QueryFilterResponseArrayInput `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension QueryComparisonExpressionResponsePtrInput `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not QueryFilterResponsePtrInput `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or QueryFilterResponseArrayInput `pulumi:"or"`
	// Has comparison expression for a tag
	Tag QueryComparisonExpressionResponsePtrInput `pulumi:"tag"`
}

func (QueryFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryFilterResponse)(nil)).Elem()
}

func (i QueryFilterResponseArgs) ToQueryFilterResponseOutput() QueryFilterResponseOutput {
	return i.ToQueryFilterResponseOutputWithContext(context.Background())
}

func (i QueryFilterResponseArgs) ToQueryFilterResponseOutputWithContext(ctx context.Context) QueryFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryFilterResponseOutput)
}

func (i QueryFilterResponseArgs) ToQueryFilterResponsePtrOutput() QueryFilterResponsePtrOutput {
	return i.ToQueryFilterResponsePtrOutputWithContext(context.Background())
}

func (i QueryFilterResponseArgs) ToQueryFilterResponsePtrOutputWithContext(ctx context.Context) QueryFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryFilterResponseOutput).ToQueryFilterResponsePtrOutputWithContext(ctx)
}

// QueryFilterResponsePtrInput is an input type that accepts QueryFilterResponseArgs, QueryFilterResponsePtr and QueryFilterResponsePtrOutput values.
// You can construct a concrete instance of `QueryFilterResponsePtrInput` via:
//
//          QueryFilterResponseArgs{...}
//
//  or:
//
//          nil
type QueryFilterResponsePtrInput interface {
	pulumi.Input

	ToQueryFilterResponsePtrOutput() QueryFilterResponsePtrOutput
	ToQueryFilterResponsePtrOutputWithContext(context.Context) QueryFilterResponsePtrOutput
}

type queryFilterResponsePtrType QueryFilterResponseArgs

func QueryFilterResponsePtr(v *QueryFilterResponseArgs) QueryFilterResponsePtrInput {
	return (*queryFilterResponsePtrType)(v)
}

func (*queryFilterResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryFilterResponse)(nil)).Elem()
}

func (i *queryFilterResponsePtrType) ToQueryFilterResponsePtrOutput() QueryFilterResponsePtrOutput {
	return i.ToQueryFilterResponsePtrOutputWithContext(context.Background())
}

func (i *queryFilterResponsePtrType) ToQueryFilterResponsePtrOutputWithContext(ctx context.Context) QueryFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryFilterResponsePtrOutput)
}

// QueryFilterResponseArrayInput is an input type that accepts QueryFilterResponseArray and QueryFilterResponseArrayOutput values.
// You can construct a concrete instance of `QueryFilterResponseArrayInput` via:
//
//          QueryFilterResponseArray{ QueryFilterResponseArgs{...} }
type QueryFilterResponseArrayInput interface {
	pulumi.Input

	ToQueryFilterResponseArrayOutput() QueryFilterResponseArrayOutput
	ToQueryFilterResponseArrayOutputWithContext(context.Context) QueryFilterResponseArrayOutput
}

type QueryFilterResponseArray []QueryFilterResponseInput

func (QueryFilterResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryFilterResponse)(nil)).Elem()
}

func (i QueryFilterResponseArray) ToQueryFilterResponseArrayOutput() QueryFilterResponseArrayOutput {
	return i.ToQueryFilterResponseArrayOutputWithContext(context.Background())
}

func (i QueryFilterResponseArray) ToQueryFilterResponseArrayOutputWithContext(ctx context.Context) QueryFilterResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryFilterResponseArrayOutput)
}

// The filter expression to be used in the export.
type QueryFilterResponseOutput struct{ *pulumi.OutputState }

func (QueryFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryFilterResponse)(nil)).Elem()
}

func (o QueryFilterResponseOutput) ToQueryFilterResponseOutput() QueryFilterResponseOutput {
	return o
}

func (o QueryFilterResponseOutput) ToQueryFilterResponseOutputWithContext(ctx context.Context) QueryFilterResponseOutput {
	return o
}

func (o QueryFilterResponseOutput) ToQueryFilterResponsePtrOutput() QueryFilterResponsePtrOutput {
	return o.ToQueryFilterResponsePtrOutputWithContext(context.Background())
}

func (o QueryFilterResponseOutput) ToQueryFilterResponsePtrOutputWithContext(ctx context.Context) QueryFilterResponsePtrOutput {
	return o.ApplyT(func(v QueryFilterResponse) *QueryFilterResponse {
		return &v
	}).(QueryFilterResponsePtrOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o QueryFilterResponseOutput) And() QueryFilterResponseArrayOutput {
	return o.ApplyT(func(v QueryFilterResponse) []QueryFilterResponse { return v.And }).(QueryFilterResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o QueryFilterResponseOutput) Dimension() QueryComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v QueryFilterResponse) *QueryComparisonExpressionResponse { return v.Dimension }).(QueryComparisonExpressionResponsePtrOutput)
}

// The logical "NOT" expression.
func (o QueryFilterResponseOutput) Not() QueryFilterResponsePtrOutput {
	return o.ApplyT(func(v QueryFilterResponse) *QueryFilterResponse { return v.Not }).(QueryFilterResponsePtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o QueryFilterResponseOutput) Or() QueryFilterResponseArrayOutput {
	return o.ApplyT(func(v QueryFilterResponse) []QueryFilterResponse { return v.Or }).(QueryFilterResponseArrayOutput)
}

// Has comparison expression for a tag
func (o QueryFilterResponseOutput) Tag() QueryComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v QueryFilterResponse) *QueryComparisonExpressionResponse { return v.Tag }).(QueryComparisonExpressionResponsePtrOutput)
}

type QueryFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryFilterResponse)(nil)).Elem()
}

func (o QueryFilterResponsePtrOutput) ToQueryFilterResponsePtrOutput() QueryFilterResponsePtrOutput {
	return o
}

func (o QueryFilterResponsePtrOutput) ToQueryFilterResponsePtrOutputWithContext(ctx context.Context) QueryFilterResponsePtrOutput {
	return o
}

func (o QueryFilterResponsePtrOutput) Elem() QueryFilterResponseOutput {
	return o.ApplyT(func(v *QueryFilterResponse) QueryFilterResponse { return *v }).(QueryFilterResponseOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o QueryFilterResponsePtrOutput) And() QueryFilterResponseArrayOutput {
	return o.ApplyT(func(v *QueryFilterResponse) []QueryFilterResponse {
		if v == nil {
			return nil
		}
		return v.And
	}).(QueryFilterResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o QueryFilterResponsePtrOutput) Dimension() QueryComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *QueryFilterResponse) *QueryComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(QueryComparisonExpressionResponsePtrOutput)
}

// The logical "NOT" expression.
func (o QueryFilterResponsePtrOutput) Not() QueryFilterResponsePtrOutput {
	return o.ApplyT(func(v *QueryFilterResponse) *QueryFilterResponse {
		if v == nil {
			return nil
		}
		return v.Not
	}).(QueryFilterResponsePtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o QueryFilterResponsePtrOutput) Or() QueryFilterResponseArrayOutput {
	return o.ApplyT(func(v *QueryFilterResponse) []QueryFilterResponse {
		if v == nil {
			return nil
		}
		return v.Or
	}).(QueryFilterResponseArrayOutput)
}

// Has comparison expression for a tag
func (o QueryFilterResponsePtrOutput) Tag() QueryComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *QueryFilterResponse) *QueryComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(QueryComparisonExpressionResponsePtrOutput)
}

type QueryFilterResponseArrayOutput struct{ *pulumi.OutputState }

func (QueryFilterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryFilterResponse)(nil)).Elem()
}

func (o QueryFilterResponseArrayOutput) ToQueryFilterResponseArrayOutput() QueryFilterResponseArrayOutput {
	return o
}

func (o QueryFilterResponseArrayOutput) ToQueryFilterResponseArrayOutputWithContext(ctx context.Context) QueryFilterResponseArrayOutput {
	return o
}

func (o QueryFilterResponseArrayOutput) Index(i pulumi.IntInput) QueryFilterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryFilterResponse {
		return vs[0].([]QueryFilterResponse)[vs[1].(int)]
	}).(QueryFilterResponseOutput)
}

// The group by expression to be used in the query.
type QueryGrouping struct {
	// The name of the column to group.
	Name string `pulumi:"name"`
	// Has type of the column to group.
	Type string `pulumi:"type"`
}

// QueryGroupingInput is an input type that accepts QueryGroupingArgs and QueryGroupingOutput values.
// You can construct a concrete instance of `QueryGroupingInput` via:
//
//          QueryGroupingArgs{...}
type QueryGroupingInput interface {
	pulumi.Input

	ToQueryGroupingOutput() QueryGroupingOutput
	ToQueryGroupingOutputWithContext(context.Context) QueryGroupingOutput
}

// The group by expression to be used in the query.
type QueryGroupingArgs struct {
	// The name of the column to group.
	Name pulumi.StringInput `pulumi:"name"`
	// Has type of the column to group.
	Type pulumi.StringInput `pulumi:"type"`
}

func (QueryGroupingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryGrouping)(nil)).Elem()
}

func (i QueryGroupingArgs) ToQueryGroupingOutput() QueryGroupingOutput {
	return i.ToQueryGroupingOutputWithContext(context.Background())
}

func (i QueryGroupingArgs) ToQueryGroupingOutputWithContext(ctx context.Context) QueryGroupingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryGroupingOutput)
}

// QueryGroupingArrayInput is an input type that accepts QueryGroupingArray and QueryGroupingArrayOutput values.
// You can construct a concrete instance of `QueryGroupingArrayInput` via:
//
//          QueryGroupingArray{ QueryGroupingArgs{...} }
type QueryGroupingArrayInput interface {
	pulumi.Input

	ToQueryGroupingArrayOutput() QueryGroupingArrayOutput
	ToQueryGroupingArrayOutputWithContext(context.Context) QueryGroupingArrayOutput
}

type QueryGroupingArray []QueryGroupingInput

func (QueryGroupingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryGrouping)(nil)).Elem()
}

func (i QueryGroupingArray) ToQueryGroupingArrayOutput() QueryGroupingArrayOutput {
	return i.ToQueryGroupingArrayOutputWithContext(context.Background())
}

func (i QueryGroupingArray) ToQueryGroupingArrayOutputWithContext(ctx context.Context) QueryGroupingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryGroupingArrayOutput)
}

// The group by expression to be used in the query.
type QueryGroupingOutput struct{ *pulumi.OutputState }

func (QueryGroupingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryGrouping)(nil)).Elem()
}

func (o QueryGroupingOutput) ToQueryGroupingOutput() QueryGroupingOutput {
	return o
}

func (o QueryGroupingOutput) ToQueryGroupingOutputWithContext(ctx context.Context) QueryGroupingOutput {
	return o
}

// The name of the column to group.
func (o QueryGroupingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueryGrouping) string { return v.Name }).(pulumi.StringOutput)
}

// Has type of the column to group.
func (o QueryGroupingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QueryGrouping) string { return v.Type }).(pulumi.StringOutput)
}

type QueryGroupingArrayOutput struct{ *pulumi.OutputState }

func (QueryGroupingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryGrouping)(nil)).Elem()
}

func (o QueryGroupingArrayOutput) ToQueryGroupingArrayOutput() QueryGroupingArrayOutput {
	return o
}

func (o QueryGroupingArrayOutput) ToQueryGroupingArrayOutputWithContext(ctx context.Context) QueryGroupingArrayOutput {
	return o
}

func (o QueryGroupingArrayOutput) Index(i pulumi.IntInput) QueryGroupingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryGrouping {
		return vs[0].([]QueryGrouping)[vs[1].(int)]
	}).(QueryGroupingOutput)
}

// The group by expression to be used in the query.
type QueryGroupingInvokeResponse struct {
	// The name of the column to group.
	Name string `pulumi:"name"`
	// Has type of the column to group.
	Type string `pulumi:"type"`
}

// QueryGroupingInvokeResponseInput is an input type that accepts QueryGroupingInvokeResponseArgs and QueryGroupingInvokeResponseOutput values.
// You can construct a concrete instance of `QueryGroupingInvokeResponseInput` via:
//
//          QueryGroupingInvokeResponseArgs{...}
type QueryGroupingInvokeResponseInput interface {
	pulumi.Input

	ToQueryGroupingInvokeResponseOutput() QueryGroupingInvokeResponseOutput
	ToQueryGroupingInvokeResponseOutputWithContext(context.Context) QueryGroupingInvokeResponseOutput
}

// The group by expression to be used in the query.
type QueryGroupingInvokeResponseArgs struct {
	// The name of the column to group.
	Name pulumi.StringInput `pulumi:"name"`
	// Has type of the column to group.
	Type pulumi.StringInput `pulumi:"type"`
}

func (QueryGroupingInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryGroupingInvokeResponse)(nil)).Elem()
}

func (i QueryGroupingInvokeResponseArgs) ToQueryGroupingInvokeResponseOutput() QueryGroupingInvokeResponseOutput {
	return i.ToQueryGroupingInvokeResponseOutputWithContext(context.Background())
}

func (i QueryGroupingInvokeResponseArgs) ToQueryGroupingInvokeResponseOutputWithContext(ctx context.Context) QueryGroupingInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryGroupingInvokeResponseOutput)
}

// QueryGroupingInvokeResponseArrayInput is an input type that accepts QueryGroupingInvokeResponseArray and QueryGroupingInvokeResponseArrayOutput values.
// You can construct a concrete instance of `QueryGroupingInvokeResponseArrayInput` via:
//
//          QueryGroupingInvokeResponseArray{ QueryGroupingInvokeResponseArgs{...} }
type QueryGroupingInvokeResponseArrayInput interface {
	pulumi.Input

	ToQueryGroupingInvokeResponseArrayOutput() QueryGroupingInvokeResponseArrayOutput
	ToQueryGroupingInvokeResponseArrayOutputWithContext(context.Context) QueryGroupingInvokeResponseArrayOutput
}

type QueryGroupingInvokeResponseArray []QueryGroupingInvokeResponseInput

func (QueryGroupingInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryGroupingInvokeResponse)(nil)).Elem()
}

func (i QueryGroupingInvokeResponseArray) ToQueryGroupingInvokeResponseArrayOutput() QueryGroupingInvokeResponseArrayOutput {
	return i.ToQueryGroupingInvokeResponseArrayOutputWithContext(context.Background())
}

func (i QueryGroupingInvokeResponseArray) ToQueryGroupingInvokeResponseArrayOutputWithContext(ctx context.Context) QueryGroupingInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryGroupingInvokeResponseArrayOutput)
}

// The group by expression to be used in the query.
type QueryGroupingInvokeResponseOutput struct{ *pulumi.OutputState }

func (QueryGroupingInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryGroupingInvokeResponse)(nil)).Elem()
}

func (o QueryGroupingInvokeResponseOutput) ToQueryGroupingInvokeResponseOutput() QueryGroupingInvokeResponseOutput {
	return o
}

func (o QueryGroupingInvokeResponseOutput) ToQueryGroupingInvokeResponseOutputWithContext(ctx context.Context) QueryGroupingInvokeResponseOutput {
	return o
}

// The name of the column to group.
func (o QueryGroupingInvokeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueryGroupingInvokeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Has type of the column to group.
func (o QueryGroupingInvokeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QueryGroupingInvokeResponse) string { return v.Type }).(pulumi.StringOutput)
}

type QueryGroupingInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (QueryGroupingInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryGroupingInvokeResponse)(nil)).Elem()
}

func (o QueryGroupingInvokeResponseArrayOutput) ToQueryGroupingInvokeResponseArrayOutput() QueryGroupingInvokeResponseArrayOutput {
	return o
}

func (o QueryGroupingInvokeResponseArrayOutput) ToQueryGroupingInvokeResponseArrayOutputWithContext(ctx context.Context) QueryGroupingInvokeResponseArrayOutput {
	return o
}

func (o QueryGroupingInvokeResponseArrayOutput) Index(i pulumi.IntInput) QueryGroupingInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryGroupingInvokeResponse {
		return vs[0].([]QueryGroupingInvokeResponse)[vs[1].(int)]
	}).(QueryGroupingInvokeResponseOutput)
}

// The group by expression to be used in the query.
type QueryGroupingResponse struct {
	// The name of the column to group.
	Name string `pulumi:"name"`
	// Has type of the column to group.
	Type string `pulumi:"type"`
}

// QueryGroupingResponseInput is an input type that accepts QueryGroupingResponseArgs and QueryGroupingResponseOutput values.
// You can construct a concrete instance of `QueryGroupingResponseInput` via:
//
//          QueryGroupingResponseArgs{...}
type QueryGroupingResponseInput interface {
	pulumi.Input

	ToQueryGroupingResponseOutput() QueryGroupingResponseOutput
	ToQueryGroupingResponseOutputWithContext(context.Context) QueryGroupingResponseOutput
}

// The group by expression to be used in the query.
type QueryGroupingResponseArgs struct {
	// The name of the column to group.
	Name pulumi.StringInput `pulumi:"name"`
	// Has type of the column to group.
	Type pulumi.StringInput `pulumi:"type"`
}

func (QueryGroupingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryGroupingResponse)(nil)).Elem()
}

func (i QueryGroupingResponseArgs) ToQueryGroupingResponseOutput() QueryGroupingResponseOutput {
	return i.ToQueryGroupingResponseOutputWithContext(context.Background())
}

func (i QueryGroupingResponseArgs) ToQueryGroupingResponseOutputWithContext(ctx context.Context) QueryGroupingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryGroupingResponseOutput)
}

// QueryGroupingResponseArrayInput is an input type that accepts QueryGroupingResponseArray and QueryGroupingResponseArrayOutput values.
// You can construct a concrete instance of `QueryGroupingResponseArrayInput` via:
//
//          QueryGroupingResponseArray{ QueryGroupingResponseArgs{...} }
type QueryGroupingResponseArrayInput interface {
	pulumi.Input

	ToQueryGroupingResponseArrayOutput() QueryGroupingResponseArrayOutput
	ToQueryGroupingResponseArrayOutputWithContext(context.Context) QueryGroupingResponseArrayOutput
}

type QueryGroupingResponseArray []QueryGroupingResponseInput

func (QueryGroupingResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryGroupingResponse)(nil)).Elem()
}

func (i QueryGroupingResponseArray) ToQueryGroupingResponseArrayOutput() QueryGroupingResponseArrayOutput {
	return i.ToQueryGroupingResponseArrayOutputWithContext(context.Background())
}

func (i QueryGroupingResponseArray) ToQueryGroupingResponseArrayOutputWithContext(ctx context.Context) QueryGroupingResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryGroupingResponseArrayOutput)
}

// The group by expression to be used in the query.
type QueryGroupingResponseOutput struct{ *pulumi.OutputState }

func (QueryGroupingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryGroupingResponse)(nil)).Elem()
}

func (o QueryGroupingResponseOutput) ToQueryGroupingResponseOutput() QueryGroupingResponseOutput {
	return o
}

func (o QueryGroupingResponseOutput) ToQueryGroupingResponseOutputWithContext(ctx context.Context) QueryGroupingResponseOutput {
	return o
}

// The name of the column to group.
func (o QueryGroupingResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueryGroupingResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Has type of the column to group.
func (o QueryGroupingResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QueryGroupingResponse) string { return v.Type }).(pulumi.StringOutput)
}

type QueryGroupingResponseArrayOutput struct{ *pulumi.OutputState }

func (QueryGroupingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryGroupingResponse)(nil)).Elem()
}

func (o QueryGroupingResponseArrayOutput) ToQueryGroupingResponseArrayOutput() QueryGroupingResponseArrayOutput {
	return o
}

func (o QueryGroupingResponseArrayOutput) ToQueryGroupingResponseArrayOutputWithContext(ctx context.Context) QueryGroupingResponseArrayOutput {
	return o
}

func (o QueryGroupingResponseArrayOutput) Index(i pulumi.IntInput) QueryGroupingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryGroupingResponse {
		return vs[0].([]QueryGroupingResponse)[vs[1].(int)]
	}).(QueryGroupingResponseOutput)
}

// The configuration for sorting in the query.
type QuerySortingConfiguration struct {
	// The name of the column to use in sorting.
	Name *string `pulumi:"name"`
	// The sorting direction
	QuerySortingDirection *string `pulumi:"querySortingDirection"`
}

// QuerySortingConfigurationInput is an input type that accepts QuerySortingConfigurationArgs and QuerySortingConfigurationOutput values.
// You can construct a concrete instance of `QuerySortingConfigurationInput` via:
//
//          QuerySortingConfigurationArgs{...}
type QuerySortingConfigurationInput interface {
	pulumi.Input

	ToQuerySortingConfigurationOutput() QuerySortingConfigurationOutput
	ToQuerySortingConfigurationOutputWithContext(context.Context) QuerySortingConfigurationOutput
}

// The configuration for sorting in the query.
type QuerySortingConfigurationArgs struct {
	// The name of the column to use in sorting.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The sorting direction
	QuerySortingDirection pulumi.StringPtrInput `pulumi:"querySortingDirection"`
}

func (QuerySortingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuerySortingConfiguration)(nil)).Elem()
}

func (i QuerySortingConfigurationArgs) ToQuerySortingConfigurationOutput() QuerySortingConfigurationOutput {
	return i.ToQuerySortingConfigurationOutputWithContext(context.Background())
}

func (i QuerySortingConfigurationArgs) ToQuerySortingConfigurationOutputWithContext(ctx context.Context) QuerySortingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuerySortingConfigurationOutput)
}

// QuerySortingConfigurationArrayInput is an input type that accepts QuerySortingConfigurationArray and QuerySortingConfigurationArrayOutput values.
// You can construct a concrete instance of `QuerySortingConfigurationArrayInput` via:
//
//          QuerySortingConfigurationArray{ QuerySortingConfigurationArgs{...} }
type QuerySortingConfigurationArrayInput interface {
	pulumi.Input

	ToQuerySortingConfigurationArrayOutput() QuerySortingConfigurationArrayOutput
	ToQuerySortingConfigurationArrayOutputWithContext(context.Context) QuerySortingConfigurationArrayOutput
}

type QuerySortingConfigurationArray []QuerySortingConfigurationInput

func (QuerySortingConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuerySortingConfiguration)(nil)).Elem()
}

func (i QuerySortingConfigurationArray) ToQuerySortingConfigurationArrayOutput() QuerySortingConfigurationArrayOutput {
	return i.ToQuerySortingConfigurationArrayOutputWithContext(context.Background())
}

func (i QuerySortingConfigurationArray) ToQuerySortingConfigurationArrayOutputWithContext(ctx context.Context) QuerySortingConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuerySortingConfigurationArrayOutput)
}

// The configuration for sorting in the query.
type QuerySortingConfigurationOutput struct{ *pulumi.OutputState }

func (QuerySortingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuerySortingConfiguration)(nil)).Elem()
}

func (o QuerySortingConfigurationOutput) ToQuerySortingConfigurationOutput() QuerySortingConfigurationOutput {
	return o
}

func (o QuerySortingConfigurationOutput) ToQuerySortingConfigurationOutputWithContext(ctx context.Context) QuerySortingConfigurationOutput {
	return o
}

// The name of the column to use in sorting.
func (o QuerySortingConfigurationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuerySortingConfiguration) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sorting direction
func (o QuerySortingConfigurationOutput) QuerySortingDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuerySortingConfiguration) *string { return v.QuerySortingDirection }).(pulumi.StringPtrOutput)
}

type QuerySortingConfigurationArrayOutput struct{ *pulumi.OutputState }

func (QuerySortingConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuerySortingConfiguration)(nil)).Elem()
}

func (o QuerySortingConfigurationArrayOutput) ToQuerySortingConfigurationArrayOutput() QuerySortingConfigurationArrayOutput {
	return o
}

func (o QuerySortingConfigurationArrayOutput) ToQuerySortingConfigurationArrayOutputWithContext(ctx context.Context) QuerySortingConfigurationArrayOutput {
	return o
}

func (o QuerySortingConfigurationArrayOutput) Index(i pulumi.IntInput) QuerySortingConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QuerySortingConfiguration {
		return vs[0].([]QuerySortingConfiguration)[vs[1].(int)]
	}).(QuerySortingConfigurationOutput)
}

// The configuration for sorting in the query.
type QuerySortingConfigurationInvokeResponse struct {
	// The name of the column to use in sorting.
	Name *string `pulumi:"name"`
	// The sorting direction
	QuerySortingDirection *string `pulumi:"querySortingDirection"`
}

// QuerySortingConfigurationInvokeResponseInput is an input type that accepts QuerySortingConfigurationInvokeResponseArgs and QuerySortingConfigurationInvokeResponseOutput values.
// You can construct a concrete instance of `QuerySortingConfigurationInvokeResponseInput` via:
//
//          QuerySortingConfigurationInvokeResponseArgs{...}
type QuerySortingConfigurationInvokeResponseInput interface {
	pulumi.Input

	ToQuerySortingConfigurationInvokeResponseOutput() QuerySortingConfigurationInvokeResponseOutput
	ToQuerySortingConfigurationInvokeResponseOutputWithContext(context.Context) QuerySortingConfigurationInvokeResponseOutput
}

// The configuration for sorting in the query.
type QuerySortingConfigurationInvokeResponseArgs struct {
	// The name of the column to use in sorting.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The sorting direction
	QuerySortingDirection pulumi.StringPtrInput `pulumi:"querySortingDirection"`
}

func (QuerySortingConfigurationInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuerySortingConfigurationInvokeResponse)(nil)).Elem()
}

func (i QuerySortingConfigurationInvokeResponseArgs) ToQuerySortingConfigurationInvokeResponseOutput() QuerySortingConfigurationInvokeResponseOutput {
	return i.ToQuerySortingConfigurationInvokeResponseOutputWithContext(context.Background())
}

func (i QuerySortingConfigurationInvokeResponseArgs) ToQuerySortingConfigurationInvokeResponseOutputWithContext(ctx context.Context) QuerySortingConfigurationInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuerySortingConfigurationInvokeResponseOutput)
}

// QuerySortingConfigurationInvokeResponseArrayInput is an input type that accepts QuerySortingConfigurationInvokeResponseArray and QuerySortingConfigurationInvokeResponseArrayOutput values.
// You can construct a concrete instance of `QuerySortingConfigurationInvokeResponseArrayInput` via:
//
//          QuerySortingConfigurationInvokeResponseArray{ QuerySortingConfigurationInvokeResponseArgs{...} }
type QuerySortingConfigurationInvokeResponseArrayInput interface {
	pulumi.Input

	ToQuerySortingConfigurationInvokeResponseArrayOutput() QuerySortingConfigurationInvokeResponseArrayOutput
	ToQuerySortingConfigurationInvokeResponseArrayOutputWithContext(context.Context) QuerySortingConfigurationInvokeResponseArrayOutput
}

type QuerySortingConfigurationInvokeResponseArray []QuerySortingConfigurationInvokeResponseInput

func (QuerySortingConfigurationInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuerySortingConfigurationInvokeResponse)(nil)).Elem()
}

func (i QuerySortingConfigurationInvokeResponseArray) ToQuerySortingConfigurationInvokeResponseArrayOutput() QuerySortingConfigurationInvokeResponseArrayOutput {
	return i.ToQuerySortingConfigurationInvokeResponseArrayOutputWithContext(context.Background())
}

func (i QuerySortingConfigurationInvokeResponseArray) ToQuerySortingConfigurationInvokeResponseArrayOutputWithContext(ctx context.Context) QuerySortingConfigurationInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuerySortingConfigurationInvokeResponseArrayOutput)
}

// The configuration for sorting in the query.
type QuerySortingConfigurationInvokeResponseOutput struct{ *pulumi.OutputState }

func (QuerySortingConfigurationInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuerySortingConfigurationInvokeResponse)(nil)).Elem()
}

func (o QuerySortingConfigurationInvokeResponseOutput) ToQuerySortingConfigurationInvokeResponseOutput() QuerySortingConfigurationInvokeResponseOutput {
	return o
}

func (o QuerySortingConfigurationInvokeResponseOutput) ToQuerySortingConfigurationInvokeResponseOutputWithContext(ctx context.Context) QuerySortingConfigurationInvokeResponseOutput {
	return o
}

// The name of the column to use in sorting.
func (o QuerySortingConfigurationInvokeResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuerySortingConfigurationInvokeResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sorting direction
func (o QuerySortingConfigurationInvokeResponseOutput) QuerySortingDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuerySortingConfigurationInvokeResponse) *string { return v.QuerySortingDirection }).(pulumi.StringPtrOutput)
}

type QuerySortingConfigurationInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (QuerySortingConfigurationInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuerySortingConfigurationInvokeResponse)(nil)).Elem()
}

func (o QuerySortingConfigurationInvokeResponseArrayOutput) ToQuerySortingConfigurationInvokeResponseArrayOutput() QuerySortingConfigurationInvokeResponseArrayOutput {
	return o
}

func (o QuerySortingConfigurationInvokeResponseArrayOutput) ToQuerySortingConfigurationInvokeResponseArrayOutputWithContext(ctx context.Context) QuerySortingConfigurationInvokeResponseArrayOutput {
	return o
}

func (o QuerySortingConfigurationInvokeResponseArrayOutput) Index(i pulumi.IntInput) QuerySortingConfigurationInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QuerySortingConfigurationInvokeResponse {
		return vs[0].([]QuerySortingConfigurationInvokeResponse)[vs[1].(int)]
	}).(QuerySortingConfigurationInvokeResponseOutput)
}

// The configuration for sorting in the query.
type QuerySortingConfigurationResponse struct {
	// The name of the column to use in sorting.
	Name *string `pulumi:"name"`
	// The sorting direction
	QuerySortingDirection *string `pulumi:"querySortingDirection"`
}

// QuerySortingConfigurationResponseInput is an input type that accepts QuerySortingConfigurationResponseArgs and QuerySortingConfigurationResponseOutput values.
// You can construct a concrete instance of `QuerySortingConfigurationResponseInput` via:
//
//          QuerySortingConfigurationResponseArgs{...}
type QuerySortingConfigurationResponseInput interface {
	pulumi.Input

	ToQuerySortingConfigurationResponseOutput() QuerySortingConfigurationResponseOutput
	ToQuerySortingConfigurationResponseOutputWithContext(context.Context) QuerySortingConfigurationResponseOutput
}

// The configuration for sorting in the query.
type QuerySortingConfigurationResponseArgs struct {
	// The name of the column to use in sorting.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The sorting direction
	QuerySortingDirection pulumi.StringPtrInput `pulumi:"querySortingDirection"`
}

func (QuerySortingConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuerySortingConfigurationResponse)(nil)).Elem()
}

func (i QuerySortingConfigurationResponseArgs) ToQuerySortingConfigurationResponseOutput() QuerySortingConfigurationResponseOutput {
	return i.ToQuerySortingConfigurationResponseOutputWithContext(context.Background())
}

func (i QuerySortingConfigurationResponseArgs) ToQuerySortingConfigurationResponseOutputWithContext(ctx context.Context) QuerySortingConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuerySortingConfigurationResponseOutput)
}

// QuerySortingConfigurationResponseArrayInput is an input type that accepts QuerySortingConfigurationResponseArray and QuerySortingConfigurationResponseArrayOutput values.
// You can construct a concrete instance of `QuerySortingConfigurationResponseArrayInput` via:
//
//          QuerySortingConfigurationResponseArray{ QuerySortingConfigurationResponseArgs{...} }
type QuerySortingConfigurationResponseArrayInput interface {
	pulumi.Input

	ToQuerySortingConfigurationResponseArrayOutput() QuerySortingConfigurationResponseArrayOutput
	ToQuerySortingConfigurationResponseArrayOutputWithContext(context.Context) QuerySortingConfigurationResponseArrayOutput
}

type QuerySortingConfigurationResponseArray []QuerySortingConfigurationResponseInput

func (QuerySortingConfigurationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuerySortingConfigurationResponse)(nil)).Elem()
}

func (i QuerySortingConfigurationResponseArray) ToQuerySortingConfigurationResponseArrayOutput() QuerySortingConfigurationResponseArrayOutput {
	return i.ToQuerySortingConfigurationResponseArrayOutputWithContext(context.Background())
}

func (i QuerySortingConfigurationResponseArray) ToQuerySortingConfigurationResponseArrayOutputWithContext(ctx context.Context) QuerySortingConfigurationResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuerySortingConfigurationResponseArrayOutput)
}

// The configuration for sorting in the query.
type QuerySortingConfigurationResponseOutput struct{ *pulumi.OutputState }

func (QuerySortingConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuerySortingConfigurationResponse)(nil)).Elem()
}

func (o QuerySortingConfigurationResponseOutput) ToQuerySortingConfigurationResponseOutput() QuerySortingConfigurationResponseOutput {
	return o
}

func (o QuerySortingConfigurationResponseOutput) ToQuerySortingConfigurationResponseOutputWithContext(ctx context.Context) QuerySortingConfigurationResponseOutput {
	return o
}

// The name of the column to use in sorting.
func (o QuerySortingConfigurationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuerySortingConfigurationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sorting direction
func (o QuerySortingConfigurationResponseOutput) QuerySortingDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuerySortingConfigurationResponse) *string { return v.QuerySortingDirection }).(pulumi.StringPtrOutput)
}

type QuerySortingConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (QuerySortingConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuerySortingConfigurationResponse)(nil)).Elem()
}

func (o QuerySortingConfigurationResponseArrayOutput) ToQuerySortingConfigurationResponseArrayOutput() QuerySortingConfigurationResponseArrayOutput {
	return o
}

func (o QuerySortingConfigurationResponseArrayOutput) ToQuerySortingConfigurationResponseArrayOutputWithContext(ctx context.Context) QuerySortingConfigurationResponseArrayOutput {
	return o
}

func (o QuerySortingConfigurationResponseArrayOutput) Index(i pulumi.IntInput) QuerySortingConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QuerySortingConfigurationResponse {
		return vs[0].([]QuerySortingConfigurationResponse)[vs[1].(int)]
	}).(QuerySortingConfigurationResponseOutput)
}

// The start and end date for pulling data for the query.
type QueryTimePeriod struct {
	// The start date to pull data from.
	From string `pulumi:"from"`
	// The end date to pull data to.
	To string `pulumi:"to"`
}

// QueryTimePeriodInput is an input type that accepts QueryTimePeriodArgs and QueryTimePeriodOutput values.
// You can construct a concrete instance of `QueryTimePeriodInput` via:
//
//          QueryTimePeriodArgs{...}
type QueryTimePeriodInput interface {
	pulumi.Input

	ToQueryTimePeriodOutput() QueryTimePeriodOutput
	ToQueryTimePeriodOutputWithContext(context.Context) QueryTimePeriodOutput
}

// The start and end date for pulling data for the query.
type QueryTimePeriodArgs struct {
	// The start date to pull data from.
	From pulumi.StringInput `pulumi:"from"`
	// The end date to pull data to.
	To pulumi.StringInput `pulumi:"to"`
}

func (QueryTimePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryTimePeriod)(nil)).Elem()
}

func (i QueryTimePeriodArgs) ToQueryTimePeriodOutput() QueryTimePeriodOutput {
	return i.ToQueryTimePeriodOutputWithContext(context.Background())
}

func (i QueryTimePeriodArgs) ToQueryTimePeriodOutputWithContext(ctx context.Context) QueryTimePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryTimePeriodOutput)
}

func (i QueryTimePeriodArgs) ToQueryTimePeriodPtrOutput() QueryTimePeriodPtrOutput {
	return i.ToQueryTimePeriodPtrOutputWithContext(context.Background())
}

func (i QueryTimePeriodArgs) ToQueryTimePeriodPtrOutputWithContext(ctx context.Context) QueryTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryTimePeriodOutput).ToQueryTimePeriodPtrOutputWithContext(ctx)
}

// QueryTimePeriodPtrInput is an input type that accepts QueryTimePeriodArgs, QueryTimePeriodPtr and QueryTimePeriodPtrOutput values.
// You can construct a concrete instance of `QueryTimePeriodPtrInput` via:
//
//          QueryTimePeriodArgs{...}
//
//  or:
//
//          nil
type QueryTimePeriodPtrInput interface {
	pulumi.Input

	ToQueryTimePeriodPtrOutput() QueryTimePeriodPtrOutput
	ToQueryTimePeriodPtrOutputWithContext(context.Context) QueryTimePeriodPtrOutput
}

type queryTimePeriodPtrType QueryTimePeriodArgs

func QueryTimePeriodPtr(v *QueryTimePeriodArgs) QueryTimePeriodPtrInput {
	return (*queryTimePeriodPtrType)(v)
}

func (*queryTimePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryTimePeriod)(nil)).Elem()
}

func (i *queryTimePeriodPtrType) ToQueryTimePeriodPtrOutput() QueryTimePeriodPtrOutput {
	return i.ToQueryTimePeriodPtrOutputWithContext(context.Background())
}

func (i *queryTimePeriodPtrType) ToQueryTimePeriodPtrOutputWithContext(ctx context.Context) QueryTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryTimePeriodPtrOutput)
}

// The start and end date for pulling data for the query.
type QueryTimePeriodOutput struct{ *pulumi.OutputState }

func (QueryTimePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryTimePeriod)(nil)).Elem()
}

func (o QueryTimePeriodOutput) ToQueryTimePeriodOutput() QueryTimePeriodOutput {
	return o
}

func (o QueryTimePeriodOutput) ToQueryTimePeriodOutputWithContext(ctx context.Context) QueryTimePeriodOutput {
	return o
}

func (o QueryTimePeriodOutput) ToQueryTimePeriodPtrOutput() QueryTimePeriodPtrOutput {
	return o.ToQueryTimePeriodPtrOutputWithContext(context.Background())
}

func (o QueryTimePeriodOutput) ToQueryTimePeriodPtrOutputWithContext(ctx context.Context) QueryTimePeriodPtrOutput {
	return o.ApplyT(func(v QueryTimePeriod) *QueryTimePeriod {
		return &v
	}).(QueryTimePeriodPtrOutput)
}

// The start date to pull data from.
func (o QueryTimePeriodOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimePeriod) string { return v.From }).(pulumi.StringOutput)
}

// The end date to pull data to.
func (o QueryTimePeriodOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimePeriod) string { return v.To }).(pulumi.StringOutput)
}

type QueryTimePeriodPtrOutput struct{ *pulumi.OutputState }

func (QueryTimePeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryTimePeriod)(nil)).Elem()
}

func (o QueryTimePeriodPtrOutput) ToQueryTimePeriodPtrOutput() QueryTimePeriodPtrOutput {
	return o
}

func (o QueryTimePeriodPtrOutput) ToQueryTimePeriodPtrOutputWithContext(ctx context.Context) QueryTimePeriodPtrOutput {
	return o
}

func (o QueryTimePeriodPtrOutput) Elem() QueryTimePeriodOutput {
	return o.ApplyT(func(v *QueryTimePeriod) QueryTimePeriod { return *v }).(QueryTimePeriodOutput)
}

// The start date to pull data from.
func (o QueryTimePeriodPtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryTimePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date to pull data to.
func (o QueryTimePeriodPtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryTimePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.To
	}).(pulumi.StringPtrOutput)
}

// The start and end date for pulling data for the query.
type QueryTimePeriodInvokeResponse struct {
	// The start date to pull data from.
	From string `pulumi:"from"`
	// The end date to pull data to.
	To string `pulumi:"to"`
}

// QueryTimePeriodInvokeResponseInput is an input type that accepts QueryTimePeriodInvokeResponseArgs and QueryTimePeriodInvokeResponseOutput values.
// You can construct a concrete instance of `QueryTimePeriodInvokeResponseInput` via:
//
//          QueryTimePeriodInvokeResponseArgs{...}
type QueryTimePeriodInvokeResponseInput interface {
	pulumi.Input

	ToQueryTimePeriodInvokeResponseOutput() QueryTimePeriodInvokeResponseOutput
	ToQueryTimePeriodInvokeResponseOutputWithContext(context.Context) QueryTimePeriodInvokeResponseOutput
}

// The start and end date for pulling data for the query.
type QueryTimePeriodInvokeResponseArgs struct {
	// The start date to pull data from.
	From pulumi.StringInput `pulumi:"from"`
	// The end date to pull data to.
	To pulumi.StringInput `pulumi:"to"`
}

func (QueryTimePeriodInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryTimePeriodInvokeResponse)(nil)).Elem()
}

func (i QueryTimePeriodInvokeResponseArgs) ToQueryTimePeriodInvokeResponseOutput() QueryTimePeriodInvokeResponseOutput {
	return i.ToQueryTimePeriodInvokeResponseOutputWithContext(context.Background())
}

func (i QueryTimePeriodInvokeResponseArgs) ToQueryTimePeriodInvokeResponseOutputWithContext(ctx context.Context) QueryTimePeriodInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryTimePeriodInvokeResponseOutput)
}

func (i QueryTimePeriodInvokeResponseArgs) ToQueryTimePeriodInvokeResponsePtrOutput() QueryTimePeriodInvokeResponsePtrOutput {
	return i.ToQueryTimePeriodInvokeResponsePtrOutputWithContext(context.Background())
}

func (i QueryTimePeriodInvokeResponseArgs) ToQueryTimePeriodInvokeResponsePtrOutputWithContext(ctx context.Context) QueryTimePeriodInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryTimePeriodInvokeResponseOutput).ToQueryTimePeriodInvokeResponsePtrOutputWithContext(ctx)
}

// QueryTimePeriodInvokeResponsePtrInput is an input type that accepts QueryTimePeriodInvokeResponseArgs, QueryTimePeriodInvokeResponsePtr and QueryTimePeriodInvokeResponsePtrOutput values.
// You can construct a concrete instance of `QueryTimePeriodInvokeResponsePtrInput` via:
//
//          QueryTimePeriodInvokeResponseArgs{...}
//
//  or:
//
//          nil
type QueryTimePeriodInvokeResponsePtrInput interface {
	pulumi.Input

	ToQueryTimePeriodInvokeResponsePtrOutput() QueryTimePeriodInvokeResponsePtrOutput
	ToQueryTimePeriodInvokeResponsePtrOutputWithContext(context.Context) QueryTimePeriodInvokeResponsePtrOutput
}

type queryTimePeriodInvokeResponsePtrType QueryTimePeriodInvokeResponseArgs

func QueryTimePeriodInvokeResponsePtr(v *QueryTimePeriodInvokeResponseArgs) QueryTimePeriodInvokeResponsePtrInput {
	return (*queryTimePeriodInvokeResponsePtrType)(v)
}

func (*queryTimePeriodInvokeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryTimePeriodInvokeResponse)(nil)).Elem()
}

func (i *queryTimePeriodInvokeResponsePtrType) ToQueryTimePeriodInvokeResponsePtrOutput() QueryTimePeriodInvokeResponsePtrOutput {
	return i.ToQueryTimePeriodInvokeResponsePtrOutputWithContext(context.Background())
}

func (i *queryTimePeriodInvokeResponsePtrType) ToQueryTimePeriodInvokeResponsePtrOutputWithContext(ctx context.Context) QueryTimePeriodInvokeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryTimePeriodInvokeResponsePtrOutput)
}

// The start and end date for pulling data for the query.
type QueryTimePeriodInvokeResponseOutput struct{ *pulumi.OutputState }

func (QueryTimePeriodInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryTimePeriodInvokeResponse)(nil)).Elem()
}

func (o QueryTimePeriodInvokeResponseOutput) ToQueryTimePeriodInvokeResponseOutput() QueryTimePeriodInvokeResponseOutput {
	return o
}

func (o QueryTimePeriodInvokeResponseOutput) ToQueryTimePeriodInvokeResponseOutputWithContext(ctx context.Context) QueryTimePeriodInvokeResponseOutput {
	return o
}

func (o QueryTimePeriodInvokeResponseOutput) ToQueryTimePeriodInvokeResponsePtrOutput() QueryTimePeriodInvokeResponsePtrOutput {
	return o.ToQueryTimePeriodInvokeResponsePtrOutputWithContext(context.Background())
}

func (o QueryTimePeriodInvokeResponseOutput) ToQueryTimePeriodInvokeResponsePtrOutputWithContext(ctx context.Context) QueryTimePeriodInvokeResponsePtrOutput {
	return o.ApplyT(func(v QueryTimePeriodInvokeResponse) *QueryTimePeriodInvokeResponse {
		return &v
	}).(QueryTimePeriodInvokeResponsePtrOutput)
}

// The start date to pull data from.
func (o QueryTimePeriodInvokeResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimePeriodInvokeResponse) string { return v.From }).(pulumi.StringOutput)
}

// The end date to pull data to.
func (o QueryTimePeriodInvokeResponseOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimePeriodInvokeResponse) string { return v.To }).(pulumi.StringOutput)
}

type QueryTimePeriodInvokeResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryTimePeriodInvokeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryTimePeriodInvokeResponse)(nil)).Elem()
}

func (o QueryTimePeriodInvokeResponsePtrOutput) ToQueryTimePeriodInvokeResponsePtrOutput() QueryTimePeriodInvokeResponsePtrOutput {
	return o
}

func (o QueryTimePeriodInvokeResponsePtrOutput) ToQueryTimePeriodInvokeResponsePtrOutputWithContext(ctx context.Context) QueryTimePeriodInvokeResponsePtrOutput {
	return o
}

func (o QueryTimePeriodInvokeResponsePtrOutput) Elem() QueryTimePeriodInvokeResponseOutput {
	return o.ApplyT(func(v *QueryTimePeriodInvokeResponse) QueryTimePeriodInvokeResponse { return *v }).(QueryTimePeriodInvokeResponseOutput)
}

// The start date to pull data from.
func (o QueryTimePeriodInvokeResponsePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryTimePeriodInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date to pull data to.
func (o QueryTimePeriodInvokeResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryTimePeriodInvokeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.To
	}).(pulumi.StringPtrOutput)
}

// The start and end date for pulling data for the query.
type QueryTimePeriodResponse struct {
	// The start date to pull data from.
	From string `pulumi:"from"`
	// The end date to pull data to.
	To string `pulumi:"to"`
}

// QueryTimePeriodResponseInput is an input type that accepts QueryTimePeriodResponseArgs and QueryTimePeriodResponseOutput values.
// You can construct a concrete instance of `QueryTimePeriodResponseInput` via:
//
//          QueryTimePeriodResponseArgs{...}
type QueryTimePeriodResponseInput interface {
	pulumi.Input

	ToQueryTimePeriodResponseOutput() QueryTimePeriodResponseOutput
	ToQueryTimePeriodResponseOutputWithContext(context.Context) QueryTimePeriodResponseOutput
}

// The start and end date for pulling data for the query.
type QueryTimePeriodResponseArgs struct {
	// The start date to pull data from.
	From pulumi.StringInput `pulumi:"from"`
	// The end date to pull data to.
	To pulumi.StringInput `pulumi:"to"`
}

func (QueryTimePeriodResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryTimePeriodResponse)(nil)).Elem()
}

func (i QueryTimePeriodResponseArgs) ToQueryTimePeriodResponseOutput() QueryTimePeriodResponseOutput {
	return i.ToQueryTimePeriodResponseOutputWithContext(context.Background())
}

func (i QueryTimePeriodResponseArgs) ToQueryTimePeriodResponseOutputWithContext(ctx context.Context) QueryTimePeriodResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryTimePeriodResponseOutput)
}

func (i QueryTimePeriodResponseArgs) ToQueryTimePeriodResponsePtrOutput() QueryTimePeriodResponsePtrOutput {
	return i.ToQueryTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (i QueryTimePeriodResponseArgs) ToQueryTimePeriodResponsePtrOutputWithContext(ctx context.Context) QueryTimePeriodResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryTimePeriodResponseOutput).ToQueryTimePeriodResponsePtrOutputWithContext(ctx)
}

// QueryTimePeriodResponsePtrInput is an input type that accepts QueryTimePeriodResponseArgs, QueryTimePeriodResponsePtr and QueryTimePeriodResponsePtrOutput values.
// You can construct a concrete instance of `QueryTimePeriodResponsePtrInput` via:
//
//          QueryTimePeriodResponseArgs{...}
//
//  or:
//
//          nil
type QueryTimePeriodResponsePtrInput interface {
	pulumi.Input

	ToQueryTimePeriodResponsePtrOutput() QueryTimePeriodResponsePtrOutput
	ToQueryTimePeriodResponsePtrOutputWithContext(context.Context) QueryTimePeriodResponsePtrOutput
}

type queryTimePeriodResponsePtrType QueryTimePeriodResponseArgs

func QueryTimePeriodResponsePtr(v *QueryTimePeriodResponseArgs) QueryTimePeriodResponsePtrInput {
	return (*queryTimePeriodResponsePtrType)(v)
}

func (*queryTimePeriodResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryTimePeriodResponse)(nil)).Elem()
}

func (i *queryTimePeriodResponsePtrType) ToQueryTimePeriodResponsePtrOutput() QueryTimePeriodResponsePtrOutput {
	return i.ToQueryTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (i *queryTimePeriodResponsePtrType) ToQueryTimePeriodResponsePtrOutputWithContext(ctx context.Context) QueryTimePeriodResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryTimePeriodResponsePtrOutput)
}

// The start and end date for pulling data for the query.
type QueryTimePeriodResponseOutput struct{ *pulumi.OutputState }

func (QueryTimePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryTimePeriodResponse)(nil)).Elem()
}

func (o QueryTimePeriodResponseOutput) ToQueryTimePeriodResponseOutput() QueryTimePeriodResponseOutput {
	return o
}

func (o QueryTimePeriodResponseOutput) ToQueryTimePeriodResponseOutputWithContext(ctx context.Context) QueryTimePeriodResponseOutput {
	return o
}

func (o QueryTimePeriodResponseOutput) ToQueryTimePeriodResponsePtrOutput() QueryTimePeriodResponsePtrOutput {
	return o.ToQueryTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (o QueryTimePeriodResponseOutput) ToQueryTimePeriodResponsePtrOutputWithContext(ctx context.Context) QueryTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v QueryTimePeriodResponse) *QueryTimePeriodResponse {
		return &v
	}).(QueryTimePeriodResponsePtrOutput)
}

// The start date to pull data from.
func (o QueryTimePeriodResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimePeriodResponse) string { return v.From }).(pulumi.StringOutput)
}

// The end date to pull data to.
func (o QueryTimePeriodResponseOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimePeriodResponse) string { return v.To }).(pulumi.StringOutput)
}

type QueryTimePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryTimePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryTimePeriodResponse)(nil)).Elem()
}

func (o QueryTimePeriodResponsePtrOutput) ToQueryTimePeriodResponsePtrOutput() QueryTimePeriodResponsePtrOutput {
	return o
}

func (o QueryTimePeriodResponsePtrOutput) ToQueryTimePeriodResponsePtrOutputWithContext(ctx context.Context) QueryTimePeriodResponsePtrOutput {
	return o
}

func (o QueryTimePeriodResponsePtrOutput) Elem() QueryTimePeriodResponseOutput {
	return o.ApplyT(func(v *QueryTimePeriodResponse) QueryTimePeriodResponse { return *v }).(QueryTimePeriodResponseOutput)
}

// The start date to pull data from.
func (o QueryTimePeriodResponsePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date to pull data to.
func (o QueryTimePeriodResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.To
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ExportDeliveryDestinationOutput{})
	pulumi.RegisterOutputType(ExportDeliveryDestinationPtrOutput{})
	pulumi.RegisterOutputType(ExportDeliveryDestinationInvokeResponseOutput{})
	pulumi.RegisterOutputType(ExportDeliveryDestinationResponseOutput{})
	pulumi.RegisterOutputType(ExportDeliveryDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportDeliveryInfoOutput{})
	pulumi.RegisterOutputType(ExportDeliveryInfoPtrOutput{})
	pulumi.RegisterOutputType(ExportDeliveryInfoInvokeResponseOutput{})
	pulumi.RegisterOutputType(ExportDeliveryInfoResponseOutput{})
	pulumi.RegisterOutputType(ExportDeliveryInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportRecurrencePeriodOutput{})
	pulumi.RegisterOutputType(ExportRecurrencePeriodPtrOutput{})
	pulumi.RegisterOutputType(ExportRecurrencePeriodInvokeResponseOutput{})
	pulumi.RegisterOutputType(ExportRecurrencePeriodInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportRecurrencePeriodResponseOutput{})
	pulumi.RegisterOutputType(ExportRecurrencePeriodResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportScheduleOutput{})
	pulumi.RegisterOutputType(ExportSchedulePtrOutput{})
	pulumi.RegisterOutputType(ExportScheduleInvokeResponseOutput{})
	pulumi.RegisterOutputType(ExportScheduleResponseOutput{})
	pulumi.RegisterOutputType(ExportScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryAggregationOutput{})
	pulumi.RegisterOutputType(QueryAggregationMapOutput{})
	pulumi.RegisterOutputType(QueryAggregationInvokeResponseOutput{})
	pulumi.RegisterOutputType(QueryAggregationInvokeResponseMapOutput{})
	pulumi.RegisterOutputType(QueryAggregationResponseOutput{})
	pulumi.RegisterOutputType(QueryAggregationResponseMapOutput{})
	pulumi.RegisterOutputType(QueryComparisonExpressionOutput{})
	pulumi.RegisterOutputType(QueryComparisonExpressionPtrOutput{})
	pulumi.RegisterOutputType(QueryComparisonExpressionInvokeResponseOutput{})
	pulumi.RegisterOutputType(QueryComparisonExpressionInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryComparisonExpressionResponseOutput{})
	pulumi.RegisterOutputType(QueryComparisonExpressionResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryDatasetOutput{})
	pulumi.RegisterOutputType(QueryDatasetPtrOutput{})
	pulumi.RegisterOutputType(QueryDatasetConfigurationOutput{})
	pulumi.RegisterOutputType(QueryDatasetConfigurationPtrOutput{})
	pulumi.RegisterOutputType(QueryDatasetConfigurationInvokeResponseOutput{})
	pulumi.RegisterOutputType(QueryDatasetConfigurationInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryDatasetConfigurationResponseOutput{})
	pulumi.RegisterOutputType(QueryDatasetConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryDatasetInvokeResponseOutput{})
	pulumi.RegisterOutputType(QueryDatasetInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryDatasetResponseOutput{})
	pulumi.RegisterOutputType(QueryDatasetResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryDefinitionOutput{})
	pulumi.RegisterOutputType(QueryDefinitionPtrOutput{})
	pulumi.RegisterOutputType(QueryDefinitionInvokeResponseOutput{})
	pulumi.RegisterOutputType(QueryDefinitionResponseOutput{})
	pulumi.RegisterOutputType(QueryDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryFilterOutput{})
	pulumi.RegisterOutputType(QueryFilterPtrOutput{})
	pulumi.RegisterOutputType(QueryFilterArrayOutput{})
	pulumi.RegisterOutputType(QueryFilterInvokeResponseOutput{})
	pulumi.RegisterOutputType(QueryFilterInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryFilterInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(QueryFilterResponseOutput{})
	pulumi.RegisterOutputType(QueryFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryFilterResponseArrayOutput{})
	pulumi.RegisterOutputType(QueryGroupingOutput{})
	pulumi.RegisterOutputType(QueryGroupingArrayOutput{})
	pulumi.RegisterOutputType(QueryGroupingInvokeResponseOutput{})
	pulumi.RegisterOutputType(QueryGroupingInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(QueryGroupingResponseOutput{})
	pulumi.RegisterOutputType(QueryGroupingResponseArrayOutput{})
	pulumi.RegisterOutputType(QuerySortingConfigurationOutput{})
	pulumi.RegisterOutputType(QuerySortingConfigurationArrayOutput{})
	pulumi.RegisterOutputType(QuerySortingConfigurationInvokeResponseOutput{})
	pulumi.RegisterOutputType(QuerySortingConfigurationInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(QuerySortingConfigurationResponseOutput{})
	pulumi.RegisterOutputType(QuerySortingConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(QueryTimePeriodOutput{})
	pulumi.RegisterOutputType(QueryTimePeriodPtrOutput{})
	pulumi.RegisterOutputType(QueryTimePeriodInvokeResponseOutput{})
	pulumi.RegisterOutputType(QueryTimePeriodInvokeResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryTimePeriodResponseOutput{})
	pulumi.RegisterOutputType(QueryTimePeriodResponsePtrOutput{})
}
