// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180531

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A report config resource.
//
// Deprecated: Version 2018-05-31 will be removed in v2 of the provider.
type ReportConfig struct {
	pulumi.CustomResourceState

	// Has definition for the report config.
	Definition ReportConfigDefinitionResponseOutput `pulumi:"definition"`
	// Has delivery information for the report config.
	DeliveryInfo ReportConfigDeliveryInfoResponseOutput `pulumi:"deliveryInfo"`
	// The format of the report being delivered.
	Format pulumi.StringPtrOutput `pulumi:"format"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Has schedule information for the report config.
	Schedule ReportConfigScheduleResponsePtrOutput `pulumi:"schedule"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewReportConfig registers a new resource with the given unique name, arguments, and options.
func NewReportConfig(ctx *pulumi.Context,
	name string, args *ReportConfigArgs, opts ...pulumi.ResourceOption) (*ReportConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Definition == nil {
		return nil, errors.New("invalid value for required argument 'Definition'")
	}
	if args.DeliveryInfo == nil {
		return nil, errors.New("invalid value for required argument 'DeliveryInfo'")
	}
	var resource ReportConfig
	err := ctx.RegisterResource("azure-native:costmanagement/v20180531:ReportConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReportConfig gets an existing ReportConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReportConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReportConfigState, opts ...pulumi.ResourceOption) (*ReportConfig, error) {
	var resource ReportConfig
	err := ctx.ReadResource("azure-native:costmanagement/v20180531:ReportConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReportConfig resources.
type reportConfigState struct {
}

type ReportConfigState struct {
}

func (ReportConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*reportConfigState)(nil)).Elem()
}

type reportConfigArgs struct {
	// Has definition for the report config.
	Definition ReportConfigDefinition `pulumi:"definition"`
	// Has delivery information for the report config.
	DeliveryInfo ReportConfigDeliveryInfo `pulumi:"deliveryInfo"`
	// The format of the report being delivered.
	Format *string `pulumi:"format"`
	// Report Config Name.
	ReportConfigName *string `pulumi:"reportConfigName"`
	// Has schedule information for the report config.
	Schedule *ReportConfigSchedule `pulumi:"schedule"`
}

// The set of arguments for constructing a ReportConfig resource.
type ReportConfigArgs struct {
	// Has definition for the report config.
	Definition ReportConfigDefinitionInput
	// Has delivery information for the report config.
	DeliveryInfo ReportConfigDeliveryInfoInput
	// The format of the report being delivered.
	Format pulumi.StringPtrInput
	// Report Config Name.
	ReportConfigName pulumi.StringPtrInput
	// Has schedule information for the report config.
	Schedule ReportConfigSchedulePtrInput
}

func (ReportConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reportConfigArgs)(nil)).Elem()
}

type ReportConfigInput interface {
	pulumi.Input

	ToReportConfigOutput() ReportConfigOutput
	ToReportConfigOutputWithContext(ctx context.Context) ReportConfigOutput
}

func (*ReportConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfig)(nil)).Elem()
}

func (i *ReportConfig) ToReportConfigOutput() ReportConfigOutput {
	return i.ToReportConfigOutputWithContext(context.Background())
}

func (i *ReportConfig) ToReportConfigOutputWithContext(ctx context.Context) ReportConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigOutput)
}

type ReportConfigOutput struct{ *pulumi.OutputState }

func (ReportConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfig)(nil)).Elem()
}

func (o ReportConfigOutput) ToReportConfigOutput() ReportConfigOutput {
	return o
}

func (o ReportConfigOutput) ToReportConfigOutputWithContext(ctx context.Context) ReportConfigOutput {
	return o
}

// Has definition for the report config.
func (o ReportConfigOutput) Definition() ReportConfigDefinitionResponseOutput {
	return o.ApplyT(func(v *ReportConfig) ReportConfigDefinitionResponseOutput { return v.Definition }).(ReportConfigDefinitionResponseOutput)
}

// Has delivery information for the report config.
func (o ReportConfigOutput) DeliveryInfo() ReportConfigDeliveryInfoResponseOutput {
	return o.ApplyT(func(v *ReportConfig) ReportConfigDeliveryInfoResponseOutput { return v.DeliveryInfo }).(ReportConfigDeliveryInfoResponseOutput)
}

// The format of the report being delivered.
func (o ReportConfigOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfig) pulumi.StringPtrOutput { return v.Format }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o ReportConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Has schedule information for the report config.
func (o ReportConfigOutput) Schedule() ReportConfigScheduleResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfig) ReportConfigScheduleResponsePtrOutput { return v.Schedule }).(ReportConfigScheduleResponsePtrOutput)
}

// Resource tags.
func (o ReportConfigOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReportConfig) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type.
func (o ReportConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportConfig) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ReportConfigOutput{})
}
