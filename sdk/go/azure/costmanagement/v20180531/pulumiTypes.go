// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180531

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The aggregation expression to be used in the report.
type ReportConfigAggregation struct {
	// The name of the aggregation function to use.
	Function string `pulumi:"function"`
	// The name of the column to aggregate.
	Name string `pulumi:"name"`
}

// ReportConfigAggregationInput is an input type that accepts ReportConfigAggregationArgs and ReportConfigAggregationOutput values.
// You can construct a concrete instance of `ReportConfigAggregationInput` via:
//
//          ReportConfigAggregationArgs{...}
type ReportConfigAggregationInput interface {
	pulumi.Input

	ToReportConfigAggregationOutput() ReportConfigAggregationOutput
	ToReportConfigAggregationOutputWithContext(context.Context) ReportConfigAggregationOutput
}

// The aggregation expression to be used in the report.
type ReportConfigAggregationArgs struct {
	// The name of the aggregation function to use.
	Function pulumi.StringInput `pulumi:"function"`
	// The name of the column to aggregate.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ReportConfigAggregationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigAggregation)(nil)).Elem()
}

func (i ReportConfigAggregationArgs) ToReportConfigAggregationOutput() ReportConfigAggregationOutput {
	return i.ToReportConfigAggregationOutputWithContext(context.Background())
}

func (i ReportConfigAggregationArgs) ToReportConfigAggregationOutputWithContext(ctx context.Context) ReportConfigAggregationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigAggregationOutput)
}

// ReportConfigAggregationMapInput is an input type that accepts ReportConfigAggregationMap and ReportConfigAggregationMapOutput values.
// You can construct a concrete instance of `ReportConfigAggregationMapInput` via:
//
//          ReportConfigAggregationMap{ "key": ReportConfigAggregationArgs{...} }
type ReportConfigAggregationMapInput interface {
	pulumi.Input

	ToReportConfigAggregationMapOutput() ReportConfigAggregationMapOutput
	ToReportConfigAggregationMapOutputWithContext(context.Context) ReportConfigAggregationMapOutput
}

type ReportConfigAggregationMap map[string]ReportConfigAggregationInput

func (ReportConfigAggregationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReportConfigAggregation)(nil)).Elem()
}

func (i ReportConfigAggregationMap) ToReportConfigAggregationMapOutput() ReportConfigAggregationMapOutput {
	return i.ToReportConfigAggregationMapOutputWithContext(context.Background())
}

func (i ReportConfigAggregationMap) ToReportConfigAggregationMapOutputWithContext(ctx context.Context) ReportConfigAggregationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigAggregationMapOutput)
}

// The aggregation expression to be used in the report.
type ReportConfigAggregationOutput struct{ *pulumi.OutputState }

func (ReportConfigAggregationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigAggregation)(nil)).Elem()
}

func (o ReportConfigAggregationOutput) ToReportConfigAggregationOutput() ReportConfigAggregationOutput {
	return o
}

func (o ReportConfigAggregationOutput) ToReportConfigAggregationOutputWithContext(ctx context.Context) ReportConfigAggregationOutput {
	return o
}

// The name of the aggregation function to use.
func (o ReportConfigAggregationOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigAggregation) string { return v.Function }).(pulumi.StringOutput)
}

// The name of the column to aggregate.
func (o ReportConfigAggregationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigAggregation) string { return v.Name }).(pulumi.StringOutput)
}

type ReportConfigAggregationMapOutput struct{ *pulumi.OutputState }

func (ReportConfigAggregationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReportConfigAggregation)(nil)).Elem()
}

func (o ReportConfigAggregationMapOutput) ToReportConfigAggregationMapOutput() ReportConfigAggregationMapOutput {
	return o
}

func (o ReportConfigAggregationMapOutput) ToReportConfigAggregationMapOutputWithContext(ctx context.Context) ReportConfigAggregationMapOutput {
	return o
}

func (o ReportConfigAggregationMapOutput) MapIndex(k pulumi.StringInput) ReportConfigAggregationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ReportConfigAggregation {
		return vs[0].(map[string]ReportConfigAggregation)[vs[1].(string)]
	}).(ReportConfigAggregationOutput)
}

// The aggregation expression to be used in the report.
type ReportConfigAggregationResponse struct {
	// The name of the aggregation function to use.
	Function string `pulumi:"function"`
	// The name of the column to aggregate.
	Name string `pulumi:"name"`
}

// ReportConfigAggregationResponseInput is an input type that accepts ReportConfigAggregationResponseArgs and ReportConfigAggregationResponseOutput values.
// You can construct a concrete instance of `ReportConfigAggregationResponseInput` via:
//
//          ReportConfigAggregationResponseArgs{...}
type ReportConfigAggregationResponseInput interface {
	pulumi.Input

	ToReportConfigAggregationResponseOutput() ReportConfigAggregationResponseOutput
	ToReportConfigAggregationResponseOutputWithContext(context.Context) ReportConfigAggregationResponseOutput
}

// The aggregation expression to be used in the report.
type ReportConfigAggregationResponseArgs struct {
	// The name of the aggregation function to use.
	Function pulumi.StringInput `pulumi:"function"`
	// The name of the column to aggregate.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ReportConfigAggregationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigAggregationResponse)(nil)).Elem()
}

func (i ReportConfigAggregationResponseArgs) ToReportConfigAggregationResponseOutput() ReportConfigAggregationResponseOutput {
	return i.ToReportConfigAggregationResponseOutputWithContext(context.Background())
}

func (i ReportConfigAggregationResponseArgs) ToReportConfigAggregationResponseOutputWithContext(ctx context.Context) ReportConfigAggregationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigAggregationResponseOutput)
}

// ReportConfigAggregationResponseMapInput is an input type that accepts ReportConfigAggregationResponseMap and ReportConfigAggregationResponseMapOutput values.
// You can construct a concrete instance of `ReportConfigAggregationResponseMapInput` via:
//
//          ReportConfigAggregationResponseMap{ "key": ReportConfigAggregationResponseArgs{...} }
type ReportConfigAggregationResponseMapInput interface {
	pulumi.Input

	ToReportConfigAggregationResponseMapOutput() ReportConfigAggregationResponseMapOutput
	ToReportConfigAggregationResponseMapOutputWithContext(context.Context) ReportConfigAggregationResponseMapOutput
}

type ReportConfigAggregationResponseMap map[string]ReportConfigAggregationResponseInput

func (ReportConfigAggregationResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReportConfigAggregationResponse)(nil)).Elem()
}

func (i ReportConfigAggregationResponseMap) ToReportConfigAggregationResponseMapOutput() ReportConfigAggregationResponseMapOutput {
	return i.ToReportConfigAggregationResponseMapOutputWithContext(context.Background())
}

func (i ReportConfigAggregationResponseMap) ToReportConfigAggregationResponseMapOutputWithContext(ctx context.Context) ReportConfigAggregationResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigAggregationResponseMapOutput)
}

// The aggregation expression to be used in the report.
type ReportConfigAggregationResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigAggregationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigAggregationResponse)(nil)).Elem()
}

func (o ReportConfigAggregationResponseOutput) ToReportConfigAggregationResponseOutput() ReportConfigAggregationResponseOutput {
	return o
}

func (o ReportConfigAggregationResponseOutput) ToReportConfigAggregationResponseOutputWithContext(ctx context.Context) ReportConfigAggregationResponseOutput {
	return o
}

// The name of the aggregation function to use.
func (o ReportConfigAggregationResponseOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigAggregationResponse) string { return v.Function }).(pulumi.StringOutput)
}

// The name of the column to aggregate.
func (o ReportConfigAggregationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigAggregationResponse) string { return v.Name }).(pulumi.StringOutput)
}

type ReportConfigAggregationResponseMapOutput struct{ *pulumi.OutputState }

func (ReportConfigAggregationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReportConfigAggregationResponse)(nil)).Elem()
}

func (o ReportConfigAggregationResponseMapOutput) ToReportConfigAggregationResponseMapOutput() ReportConfigAggregationResponseMapOutput {
	return o
}

func (o ReportConfigAggregationResponseMapOutput) ToReportConfigAggregationResponseMapOutputWithContext(ctx context.Context) ReportConfigAggregationResponseMapOutput {
	return o
}

func (o ReportConfigAggregationResponseMapOutput) MapIndex(k pulumi.StringInput) ReportConfigAggregationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ReportConfigAggregationResponse {
		return vs[0].(map[string]ReportConfigAggregationResponse)[vs[1].(string)]
	}).(ReportConfigAggregationResponseOutput)
}

// The comparison expression to be used in the report.
type ReportConfigComparisonExpression struct {
	// The name of the column to use in comparison.
	Name string `pulumi:"name"`
	// The operator to use for comparison.
	Operator string `pulumi:"operator"`
	// Array of values to use for comparison
	Values []string `pulumi:"values"`
}

// ReportConfigComparisonExpressionInput is an input type that accepts ReportConfigComparisonExpressionArgs and ReportConfigComparisonExpressionOutput values.
// You can construct a concrete instance of `ReportConfigComparisonExpressionInput` via:
//
//          ReportConfigComparisonExpressionArgs{...}
type ReportConfigComparisonExpressionInput interface {
	pulumi.Input

	ToReportConfigComparisonExpressionOutput() ReportConfigComparisonExpressionOutput
	ToReportConfigComparisonExpressionOutputWithContext(context.Context) ReportConfigComparisonExpressionOutput
}

// The comparison expression to be used in the report.
type ReportConfigComparisonExpressionArgs struct {
	// The name of the column to use in comparison.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator to use for comparison.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Array of values to use for comparison
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ReportConfigComparisonExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigComparisonExpression)(nil)).Elem()
}

func (i ReportConfigComparisonExpressionArgs) ToReportConfigComparisonExpressionOutput() ReportConfigComparisonExpressionOutput {
	return i.ToReportConfigComparisonExpressionOutputWithContext(context.Background())
}

func (i ReportConfigComparisonExpressionArgs) ToReportConfigComparisonExpressionOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigComparisonExpressionOutput)
}

func (i ReportConfigComparisonExpressionArgs) ToReportConfigComparisonExpressionPtrOutput() ReportConfigComparisonExpressionPtrOutput {
	return i.ToReportConfigComparisonExpressionPtrOutputWithContext(context.Background())
}

func (i ReportConfigComparisonExpressionArgs) ToReportConfigComparisonExpressionPtrOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigComparisonExpressionOutput).ToReportConfigComparisonExpressionPtrOutputWithContext(ctx)
}

// ReportConfigComparisonExpressionPtrInput is an input type that accepts ReportConfigComparisonExpressionArgs, ReportConfigComparisonExpressionPtr and ReportConfigComparisonExpressionPtrOutput values.
// You can construct a concrete instance of `ReportConfigComparisonExpressionPtrInput` via:
//
//          ReportConfigComparisonExpressionArgs{...}
//
//  or:
//
//          nil
type ReportConfigComparisonExpressionPtrInput interface {
	pulumi.Input

	ToReportConfigComparisonExpressionPtrOutput() ReportConfigComparisonExpressionPtrOutput
	ToReportConfigComparisonExpressionPtrOutputWithContext(context.Context) ReportConfigComparisonExpressionPtrOutput
}

type reportConfigComparisonExpressionPtrType ReportConfigComparisonExpressionArgs

func ReportConfigComparisonExpressionPtr(v *ReportConfigComparisonExpressionArgs) ReportConfigComparisonExpressionPtrInput {
	return (*reportConfigComparisonExpressionPtrType)(v)
}

func (*reportConfigComparisonExpressionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigComparisonExpression)(nil)).Elem()
}

func (i *reportConfigComparisonExpressionPtrType) ToReportConfigComparisonExpressionPtrOutput() ReportConfigComparisonExpressionPtrOutput {
	return i.ToReportConfigComparisonExpressionPtrOutputWithContext(context.Background())
}

func (i *reportConfigComparisonExpressionPtrType) ToReportConfigComparisonExpressionPtrOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigComparisonExpressionPtrOutput)
}

// The comparison expression to be used in the report.
type ReportConfigComparisonExpressionOutput struct{ *pulumi.OutputState }

func (ReportConfigComparisonExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigComparisonExpression)(nil)).Elem()
}

func (o ReportConfigComparisonExpressionOutput) ToReportConfigComparisonExpressionOutput() ReportConfigComparisonExpressionOutput {
	return o
}

func (o ReportConfigComparisonExpressionOutput) ToReportConfigComparisonExpressionOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionOutput {
	return o
}

func (o ReportConfigComparisonExpressionOutput) ToReportConfigComparisonExpressionPtrOutput() ReportConfigComparisonExpressionPtrOutput {
	return o.ToReportConfigComparisonExpressionPtrOutputWithContext(context.Background())
}

func (o ReportConfigComparisonExpressionOutput) ToReportConfigComparisonExpressionPtrOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionPtrOutput {
	return o.ApplyT(func(v ReportConfigComparisonExpression) *ReportConfigComparisonExpression {
		return &v
	}).(ReportConfigComparisonExpressionPtrOutput)
}

// The name of the column to use in comparison.
func (o ReportConfigComparisonExpressionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigComparisonExpression) string { return v.Name }).(pulumi.StringOutput)
}

// The operator to use for comparison.
func (o ReportConfigComparisonExpressionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigComparisonExpression) string { return v.Operator }).(pulumi.StringOutput)
}

// Array of values to use for comparison
func (o ReportConfigComparisonExpressionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportConfigComparisonExpression) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ReportConfigComparisonExpressionPtrOutput struct{ *pulumi.OutputState }

func (ReportConfigComparisonExpressionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigComparisonExpression)(nil)).Elem()
}

func (o ReportConfigComparisonExpressionPtrOutput) ToReportConfigComparisonExpressionPtrOutput() ReportConfigComparisonExpressionPtrOutput {
	return o
}

func (o ReportConfigComparisonExpressionPtrOutput) ToReportConfigComparisonExpressionPtrOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionPtrOutput {
	return o
}

func (o ReportConfigComparisonExpressionPtrOutput) Elem() ReportConfigComparisonExpressionOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpression) ReportConfigComparisonExpression { return *v }).(ReportConfigComparisonExpressionOutput)
}

// The name of the column to use in comparison.
func (o ReportConfigComparisonExpressionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpression) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The operator to use for comparison.
func (o ReportConfigComparisonExpressionPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpression) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Array of values to use for comparison
func (o ReportConfigComparisonExpressionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpression) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// The comparison expression to be used in the report.
type ReportConfigComparisonExpressionResponse struct {
	// The name of the column to use in comparison.
	Name string `pulumi:"name"`
	// The operator to use for comparison.
	Operator string `pulumi:"operator"`
	// Array of values to use for comparison
	Values []string `pulumi:"values"`
}

// ReportConfigComparisonExpressionResponseInput is an input type that accepts ReportConfigComparisonExpressionResponseArgs and ReportConfigComparisonExpressionResponseOutput values.
// You can construct a concrete instance of `ReportConfigComparisonExpressionResponseInput` via:
//
//          ReportConfigComparisonExpressionResponseArgs{...}
type ReportConfigComparisonExpressionResponseInput interface {
	pulumi.Input

	ToReportConfigComparisonExpressionResponseOutput() ReportConfigComparisonExpressionResponseOutput
	ToReportConfigComparisonExpressionResponseOutputWithContext(context.Context) ReportConfigComparisonExpressionResponseOutput
}

// The comparison expression to be used in the report.
type ReportConfigComparisonExpressionResponseArgs struct {
	// The name of the column to use in comparison.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator to use for comparison.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Array of values to use for comparison
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ReportConfigComparisonExpressionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigComparisonExpressionResponse)(nil)).Elem()
}

func (i ReportConfigComparisonExpressionResponseArgs) ToReportConfigComparisonExpressionResponseOutput() ReportConfigComparisonExpressionResponseOutput {
	return i.ToReportConfigComparisonExpressionResponseOutputWithContext(context.Background())
}

func (i ReportConfigComparisonExpressionResponseArgs) ToReportConfigComparisonExpressionResponseOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigComparisonExpressionResponseOutput)
}

func (i ReportConfigComparisonExpressionResponseArgs) ToReportConfigComparisonExpressionResponsePtrOutput() ReportConfigComparisonExpressionResponsePtrOutput {
	return i.ToReportConfigComparisonExpressionResponsePtrOutputWithContext(context.Background())
}

func (i ReportConfigComparisonExpressionResponseArgs) ToReportConfigComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigComparisonExpressionResponseOutput).ToReportConfigComparisonExpressionResponsePtrOutputWithContext(ctx)
}

// ReportConfigComparisonExpressionResponsePtrInput is an input type that accepts ReportConfigComparisonExpressionResponseArgs, ReportConfigComparisonExpressionResponsePtr and ReportConfigComparisonExpressionResponsePtrOutput values.
// You can construct a concrete instance of `ReportConfigComparisonExpressionResponsePtrInput` via:
//
//          ReportConfigComparisonExpressionResponseArgs{...}
//
//  or:
//
//          nil
type ReportConfigComparisonExpressionResponsePtrInput interface {
	pulumi.Input

	ToReportConfigComparisonExpressionResponsePtrOutput() ReportConfigComparisonExpressionResponsePtrOutput
	ToReportConfigComparisonExpressionResponsePtrOutputWithContext(context.Context) ReportConfigComparisonExpressionResponsePtrOutput
}

type reportConfigComparisonExpressionResponsePtrType ReportConfigComparisonExpressionResponseArgs

func ReportConfigComparisonExpressionResponsePtr(v *ReportConfigComparisonExpressionResponseArgs) ReportConfigComparisonExpressionResponsePtrInput {
	return (*reportConfigComparisonExpressionResponsePtrType)(v)
}

func (*reportConfigComparisonExpressionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigComparisonExpressionResponse)(nil)).Elem()
}

func (i *reportConfigComparisonExpressionResponsePtrType) ToReportConfigComparisonExpressionResponsePtrOutput() ReportConfigComparisonExpressionResponsePtrOutput {
	return i.ToReportConfigComparisonExpressionResponsePtrOutputWithContext(context.Background())
}

func (i *reportConfigComparisonExpressionResponsePtrType) ToReportConfigComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigComparisonExpressionResponsePtrOutput)
}

// The comparison expression to be used in the report.
type ReportConfigComparisonExpressionResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigComparisonExpressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigComparisonExpressionResponse)(nil)).Elem()
}

func (o ReportConfigComparisonExpressionResponseOutput) ToReportConfigComparisonExpressionResponseOutput() ReportConfigComparisonExpressionResponseOutput {
	return o
}

func (o ReportConfigComparisonExpressionResponseOutput) ToReportConfigComparisonExpressionResponseOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionResponseOutput {
	return o
}

func (o ReportConfigComparisonExpressionResponseOutput) ToReportConfigComparisonExpressionResponsePtrOutput() ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ToReportConfigComparisonExpressionResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigComparisonExpressionResponseOutput) ToReportConfigComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigComparisonExpressionResponse) *ReportConfigComparisonExpressionResponse {
		return &v
	}).(ReportConfigComparisonExpressionResponsePtrOutput)
}

// The name of the column to use in comparison.
func (o ReportConfigComparisonExpressionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigComparisonExpressionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The operator to use for comparison.
func (o ReportConfigComparisonExpressionResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigComparisonExpressionResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Array of values to use for comparison
func (o ReportConfigComparisonExpressionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportConfigComparisonExpressionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ReportConfigComparisonExpressionResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigComparisonExpressionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigComparisonExpressionResponse)(nil)).Elem()
}

func (o ReportConfigComparisonExpressionResponsePtrOutput) ToReportConfigComparisonExpressionResponsePtrOutput() ReportConfigComparisonExpressionResponsePtrOutput {
	return o
}

func (o ReportConfigComparisonExpressionResponsePtrOutput) ToReportConfigComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionResponsePtrOutput {
	return o
}

func (o ReportConfigComparisonExpressionResponsePtrOutput) Elem() ReportConfigComparisonExpressionResponseOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpressionResponse) ReportConfigComparisonExpressionResponse { return *v }).(ReportConfigComparisonExpressionResponseOutput)
}

// The name of the column to use in comparison.
func (o ReportConfigComparisonExpressionResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpressionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The operator to use for comparison.
func (o ReportConfigComparisonExpressionResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpressionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Array of values to use for comparison
func (o ReportConfigComparisonExpressionResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpressionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// The definition of data present in the report.
type ReportConfigDataset struct {
	// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
	Aggregation map[string]ReportConfigAggregation `pulumi:"aggregation"`
	// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
	Configuration *ReportConfigDatasetConfiguration `pulumi:"configuration"`
	// Has filter expression to use in the report.
	Filter *ReportConfigFilter `pulumi:"filter"`
	// The granularity of rows in the report.
	Granularity *string `pulumi:"granularity"`
	// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
	Grouping []ReportConfigGrouping `pulumi:"grouping"`
}

// ReportConfigDatasetInput is an input type that accepts ReportConfigDatasetArgs and ReportConfigDatasetOutput values.
// You can construct a concrete instance of `ReportConfigDatasetInput` via:
//
//          ReportConfigDatasetArgs{...}
type ReportConfigDatasetInput interface {
	pulumi.Input

	ToReportConfigDatasetOutput() ReportConfigDatasetOutput
	ToReportConfigDatasetOutputWithContext(context.Context) ReportConfigDatasetOutput
}

// The definition of data present in the report.
type ReportConfigDatasetArgs struct {
	// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
	Aggregation ReportConfigAggregationMapInput `pulumi:"aggregation"`
	// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
	Configuration ReportConfigDatasetConfigurationPtrInput `pulumi:"configuration"`
	// Has filter expression to use in the report.
	Filter ReportConfigFilterPtrInput `pulumi:"filter"`
	// The granularity of rows in the report.
	Granularity pulumi.StringPtrInput `pulumi:"granularity"`
	// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
	Grouping ReportConfigGroupingArrayInput `pulumi:"grouping"`
}

func (ReportConfigDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDataset)(nil)).Elem()
}

func (i ReportConfigDatasetArgs) ToReportConfigDatasetOutput() ReportConfigDatasetOutput {
	return i.ToReportConfigDatasetOutputWithContext(context.Background())
}

func (i ReportConfigDatasetArgs) ToReportConfigDatasetOutputWithContext(ctx context.Context) ReportConfigDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetOutput)
}

func (i ReportConfigDatasetArgs) ToReportConfigDatasetPtrOutput() ReportConfigDatasetPtrOutput {
	return i.ToReportConfigDatasetPtrOutputWithContext(context.Background())
}

func (i ReportConfigDatasetArgs) ToReportConfigDatasetPtrOutputWithContext(ctx context.Context) ReportConfigDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetOutput).ToReportConfigDatasetPtrOutputWithContext(ctx)
}

// ReportConfigDatasetPtrInput is an input type that accepts ReportConfigDatasetArgs, ReportConfigDatasetPtr and ReportConfigDatasetPtrOutput values.
// You can construct a concrete instance of `ReportConfigDatasetPtrInput` via:
//
//          ReportConfigDatasetArgs{...}
//
//  or:
//
//          nil
type ReportConfigDatasetPtrInput interface {
	pulumi.Input

	ToReportConfigDatasetPtrOutput() ReportConfigDatasetPtrOutput
	ToReportConfigDatasetPtrOutputWithContext(context.Context) ReportConfigDatasetPtrOutput
}

type reportConfigDatasetPtrType ReportConfigDatasetArgs

func ReportConfigDatasetPtr(v *ReportConfigDatasetArgs) ReportConfigDatasetPtrInput {
	return (*reportConfigDatasetPtrType)(v)
}

func (*reportConfigDatasetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDataset)(nil)).Elem()
}

func (i *reportConfigDatasetPtrType) ToReportConfigDatasetPtrOutput() ReportConfigDatasetPtrOutput {
	return i.ToReportConfigDatasetPtrOutputWithContext(context.Background())
}

func (i *reportConfigDatasetPtrType) ToReportConfigDatasetPtrOutputWithContext(ctx context.Context) ReportConfigDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetPtrOutput)
}

// The definition of data present in the report.
type ReportConfigDatasetOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDataset)(nil)).Elem()
}

func (o ReportConfigDatasetOutput) ToReportConfigDatasetOutput() ReportConfigDatasetOutput {
	return o
}

func (o ReportConfigDatasetOutput) ToReportConfigDatasetOutputWithContext(ctx context.Context) ReportConfigDatasetOutput {
	return o
}

func (o ReportConfigDatasetOutput) ToReportConfigDatasetPtrOutput() ReportConfigDatasetPtrOutput {
	return o.ToReportConfigDatasetPtrOutputWithContext(context.Background())
}

func (o ReportConfigDatasetOutput) ToReportConfigDatasetPtrOutputWithContext(ctx context.Context) ReportConfigDatasetPtrOutput {
	return o.ApplyT(func(v ReportConfigDataset) *ReportConfigDataset {
		return &v
	}).(ReportConfigDatasetPtrOutput)
}

// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
func (o ReportConfigDatasetOutput) Aggregation() ReportConfigAggregationMapOutput {
	return o.ApplyT(func(v ReportConfigDataset) map[string]ReportConfigAggregation { return v.Aggregation }).(ReportConfigAggregationMapOutput)
}

// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
func (o ReportConfigDatasetOutput) Configuration() ReportConfigDatasetConfigurationPtrOutput {
	return o.ApplyT(func(v ReportConfigDataset) *ReportConfigDatasetConfiguration { return v.Configuration }).(ReportConfigDatasetConfigurationPtrOutput)
}

// Has filter expression to use in the report.
func (o ReportConfigDatasetOutput) Filter() ReportConfigFilterPtrOutput {
	return o.ApplyT(func(v ReportConfigDataset) *ReportConfigFilter { return v.Filter }).(ReportConfigFilterPtrOutput)
}

// The granularity of rows in the report.
func (o ReportConfigDatasetOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportConfigDataset) *string { return v.Granularity }).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
func (o ReportConfigDatasetOutput) Grouping() ReportConfigGroupingArrayOutput {
	return o.ApplyT(func(v ReportConfigDataset) []ReportConfigGrouping { return v.Grouping }).(ReportConfigGroupingArrayOutput)
}

type ReportConfigDatasetPtrOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDataset)(nil)).Elem()
}

func (o ReportConfigDatasetPtrOutput) ToReportConfigDatasetPtrOutput() ReportConfigDatasetPtrOutput {
	return o
}

func (o ReportConfigDatasetPtrOutput) ToReportConfigDatasetPtrOutputWithContext(ctx context.Context) ReportConfigDatasetPtrOutput {
	return o
}

func (o ReportConfigDatasetPtrOutput) Elem() ReportConfigDatasetOutput {
	return o.ApplyT(func(v *ReportConfigDataset) ReportConfigDataset { return *v }).(ReportConfigDatasetOutput)
}

// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
func (o ReportConfigDatasetPtrOutput) Aggregation() ReportConfigAggregationMapOutput {
	return o.ApplyT(func(v *ReportConfigDataset) map[string]ReportConfigAggregation {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(ReportConfigAggregationMapOutput)
}

// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
func (o ReportConfigDatasetPtrOutput) Configuration() ReportConfigDatasetConfigurationPtrOutput {
	return o.ApplyT(func(v *ReportConfigDataset) *ReportConfigDatasetConfiguration {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ReportConfigDatasetConfigurationPtrOutput)
}

// Has filter expression to use in the report.
func (o ReportConfigDatasetPtrOutput) Filter() ReportConfigFilterPtrOutput {
	return o.ApplyT(func(v *ReportConfigDataset) *ReportConfigFilter {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(ReportConfigFilterPtrOutput)
}

// The granularity of rows in the report.
func (o ReportConfigDatasetPtrOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDataset) *string {
		if v == nil {
			return nil
		}
		return v.Granularity
	}).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
func (o ReportConfigDatasetPtrOutput) Grouping() ReportConfigGroupingArrayOutput {
	return o.ApplyT(func(v *ReportConfigDataset) []ReportConfigGrouping {
		if v == nil {
			return nil
		}
		return v.Grouping
	}).(ReportConfigGroupingArrayOutput)
}

// The configuration of dataset in the report.
type ReportConfigDatasetConfiguration struct {
	// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
	Columns []string `pulumi:"columns"`
}

// ReportConfigDatasetConfigurationInput is an input type that accepts ReportConfigDatasetConfigurationArgs and ReportConfigDatasetConfigurationOutput values.
// You can construct a concrete instance of `ReportConfigDatasetConfigurationInput` via:
//
//          ReportConfigDatasetConfigurationArgs{...}
type ReportConfigDatasetConfigurationInput interface {
	pulumi.Input

	ToReportConfigDatasetConfigurationOutput() ReportConfigDatasetConfigurationOutput
	ToReportConfigDatasetConfigurationOutputWithContext(context.Context) ReportConfigDatasetConfigurationOutput
}

// The configuration of dataset in the report.
type ReportConfigDatasetConfigurationArgs struct {
	// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
	Columns pulumi.StringArrayInput `pulumi:"columns"`
}

func (ReportConfigDatasetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDatasetConfiguration)(nil)).Elem()
}

func (i ReportConfigDatasetConfigurationArgs) ToReportConfigDatasetConfigurationOutput() ReportConfigDatasetConfigurationOutput {
	return i.ToReportConfigDatasetConfigurationOutputWithContext(context.Background())
}

func (i ReportConfigDatasetConfigurationArgs) ToReportConfigDatasetConfigurationOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetConfigurationOutput)
}

func (i ReportConfigDatasetConfigurationArgs) ToReportConfigDatasetConfigurationPtrOutput() ReportConfigDatasetConfigurationPtrOutput {
	return i.ToReportConfigDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (i ReportConfigDatasetConfigurationArgs) ToReportConfigDatasetConfigurationPtrOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetConfigurationOutput).ToReportConfigDatasetConfigurationPtrOutputWithContext(ctx)
}

// ReportConfigDatasetConfigurationPtrInput is an input type that accepts ReportConfigDatasetConfigurationArgs, ReportConfigDatasetConfigurationPtr and ReportConfigDatasetConfigurationPtrOutput values.
// You can construct a concrete instance of `ReportConfigDatasetConfigurationPtrInput` via:
//
//          ReportConfigDatasetConfigurationArgs{...}
//
//  or:
//
//          nil
type ReportConfigDatasetConfigurationPtrInput interface {
	pulumi.Input

	ToReportConfigDatasetConfigurationPtrOutput() ReportConfigDatasetConfigurationPtrOutput
	ToReportConfigDatasetConfigurationPtrOutputWithContext(context.Context) ReportConfigDatasetConfigurationPtrOutput
}

type reportConfigDatasetConfigurationPtrType ReportConfigDatasetConfigurationArgs

func ReportConfigDatasetConfigurationPtr(v *ReportConfigDatasetConfigurationArgs) ReportConfigDatasetConfigurationPtrInput {
	return (*reportConfigDatasetConfigurationPtrType)(v)
}

func (*reportConfigDatasetConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDatasetConfiguration)(nil)).Elem()
}

func (i *reportConfigDatasetConfigurationPtrType) ToReportConfigDatasetConfigurationPtrOutput() ReportConfigDatasetConfigurationPtrOutput {
	return i.ToReportConfigDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (i *reportConfigDatasetConfigurationPtrType) ToReportConfigDatasetConfigurationPtrOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetConfigurationPtrOutput)
}

// The configuration of dataset in the report.
type ReportConfigDatasetConfigurationOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDatasetConfiguration)(nil)).Elem()
}

func (o ReportConfigDatasetConfigurationOutput) ToReportConfigDatasetConfigurationOutput() ReportConfigDatasetConfigurationOutput {
	return o
}

func (o ReportConfigDatasetConfigurationOutput) ToReportConfigDatasetConfigurationOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationOutput {
	return o
}

func (o ReportConfigDatasetConfigurationOutput) ToReportConfigDatasetConfigurationPtrOutput() ReportConfigDatasetConfigurationPtrOutput {
	return o.ToReportConfigDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (o ReportConfigDatasetConfigurationOutput) ToReportConfigDatasetConfigurationPtrOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationPtrOutput {
	return o.ApplyT(func(v ReportConfigDatasetConfiguration) *ReportConfigDatasetConfiguration {
		return &v
	}).(ReportConfigDatasetConfigurationPtrOutput)
}

// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
func (o ReportConfigDatasetConfigurationOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportConfigDatasetConfiguration) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

type ReportConfigDatasetConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDatasetConfiguration)(nil)).Elem()
}

func (o ReportConfigDatasetConfigurationPtrOutput) ToReportConfigDatasetConfigurationPtrOutput() ReportConfigDatasetConfigurationPtrOutput {
	return o
}

func (o ReportConfigDatasetConfigurationPtrOutput) ToReportConfigDatasetConfigurationPtrOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationPtrOutput {
	return o
}

func (o ReportConfigDatasetConfigurationPtrOutput) Elem() ReportConfigDatasetConfigurationOutput {
	return o.ApplyT(func(v *ReportConfigDatasetConfiguration) ReportConfigDatasetConfiguration { return *v }).(ReportConfigDatasetConfigurationOutput)
}

// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
func (o ReportConfigDatasetConfigurationPtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportConfigDatasetConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// The configuration of dataset in the report.
type ReportConfigDatasetConfigurationResponse struct {
	// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
	Columns []string `pulumi:"columns"`
}

// ReportConfigDatasetConfigurationResponseInput is an input type that accepts ReportConfigDatasetConfigurationResponseArgs and ReportConfigDatasetConfigurationResponseOutput values.
// You can construct a concrete instance of `ReportConfigDatasetConfigurationResponseInput` via:
//
//          ReportConfigDatasetConfigurationResponseArgs{...}
type ReportConfigDatasetConfigurationResponseInput interface {
	pulumi.Input

	ToReportConfigDatasetConfigurationResponseOutput() ReportConfigDatasetConfigurationResponseOutput
	ToReportConfigDatasetConfigurationResponseOutputWithContext(context.Context) ReportConfigDatasetConfigurationResponseOutput
}

// The configuration of dataset in the report.
type ReportConfigDatasetConfigurationResponseArgs struct {
	// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
	Columns pulumi.StringArrayInput `pulumi:"columns"`
}

func (ReportConfigDatasetConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDatasetConfigurationResponse)(nil)).Elem()
}

func (i ReportConfigDatasetConfigurationResponseArgs) ToReportConfigDatasetConfigurationResponseOutput() ReportConfigDatasetConfigurationResponseOutput {
	return i.ToReportConfigDatasetConfigurationResponseOutputWithContext(context.Background())
}

func (i ReportConfigDatasetConfigurationResponseArgs) ToReportConfigDatasetConfigurationResponseOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetConfigurationResponseOutput)
}

func (i ReportConfigDatasetConfigurationResponseArgs) ToReportConfigDatasetConfigurationResponsePtrOutput() ReportConfigDatasetConfigurationResponsePtrOutput {
	return i.ToReportConfigDatasetConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i ReportConfigDatasetConfigurationResponseArgs) ToReportConfigDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetConfigurationResponseOutput).ToReportConfigDatasetConfigurationResponsePtrOutputWithContext(ctx)
}

// ReportConfigDatasetConfigurationResponsePtrInput is an input type that accepts ReportConfigDatasetConfigurationResponseArgs, ReportConfigDatasetConfigurationResponsePtr and ReportConfigDatasetConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `ReportConfigDatasetConfigurationResponsePtrInput` via:
//
//          ReportConfigDatasetConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type ReportConfigDatasetConfigurationResponsePtrInput interface {
	pulumi.Input

	ToReportConfigDatasetConfigurationResponsePtrOutput() ReportConfigDatasetConfigurationResponsePtrOutput
	ToReportConfigDatasetConfigurationResponsePtrOutputWithContext(context.Context) ReportConfigDatasetConfigurationResponsePtrOutput
}

type reportConfigDatasetConfigurationResponsePtrType ReportConfigDatasetConfigurationResponseArgs

func ReportConfigDatasetConfigurationResponsePtr(v *ReportConfigDatasetConfigurationResponseArgs) ReportConfigDatasetConfigurationResponsePtrInput {
	return (*reportConfigDatasetConfigurationResponsePtrType)(v)
}

func (*reportConfigDatasetConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDatasetConfigurationResponse)(nil)).Elem()
}

func (i *reportConfigDatasetConfigurationResponsePtrType) ToReportConfigDatasetConfigurationResponsePtrOutput() ReportConfigDatasetConfigurationResponsePtrOutput {
	return i.ToReportConfigDatasetConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *reportConfigDatasetConfigurationResponsePtrType) ToReportConfigDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetConfigurationResponsePtrOutput)
}

// The configuration of dataset in the report.
type ReportConfigDatasetConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDatasetConfigurationResponse)(nil)).Elem()
}

func (o ReportConfigDatasetConfigurationResponseOutput) ToReportConfigDatasetConfigurationResponseOutput() ReportConfigDatasetConfigurationResponseOutput {
	return o
}

func (o ReportConfigDatasetConfigurationResponseOutput) ToReportConfigDatasetConfigurationResponseOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationResponseOutput {
	return o
}

func (o ReportConfigDatasetConfigurationResponseOutput) ToReportConfigDatasetConfigurationResponsePtrOutput() ReportConfigDatasetConfigurationResponsePtrOutput {
	return o.ToReportConfigDatasetConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigDatasetConfigurationResponseOutput) ToReportConfigDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDatasetConfigurationResponse) *ReportConfigDatasetConfigurationResponse {
		return &v
	}).(ReportConfigDatasetConfigurationResponsePtrOutput)
}

// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
func (o ReportConfigDatasetConfigurationResponseOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportConfigDatasetConfigurationResponse) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

type ReportConfigDatasetConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDatasetConfigurationResponse)(nil)).Elem()
}

func (o ReportConfigDatasetConfigurationResponsePtrOutput) ToReportConfigDatasetConfigurationResponsePtrOutput() ReportConfigDatasetConfigurationResponsePtrOutput {
	return o
}

func (o ReportConfigDatasetConfigurationResponsePtrOutput) ToReportConfigDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationResponsePtrOutput {
	return o
}

func (o ReportConfigDatasetConfigurationResponsePtrOutput) Elem() ReportConfigDatasetConfigurationResponseOutput {
	return o.ApplyT(func(v *ReportConfigDatasetConfigurationResponse) ReportConfigDatasetConfigurationResponse { return *v }).(ReportConfigDatasetConfigurationResponseOutput)
}

// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
func (o ReportConfigDatasetConfigurationResponsePtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportConfigDatasetConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// The definition of data present in the report.
type ReportConfigDatasetResponse struct {
	// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
	Aggregation map[string]ReportConfigAggregationResponse `pulumi:"aggregation"`
	// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
	Configuration *ReportConfigDatasetConfigurationResponse `pulumi:"configuration"`
	// Has filter expression to use in the report.
	Filter *ReportConfigFilterResponse `pulumi:"filter"`
	// The granularity of rows in the report.
	Granularity *string `pulumi:"granularity"`
	// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
	Grouping []ReportConfigGroupingResponse `pulumi:"grouping"`
}

// ReportConfigDatasetResponseInput is an input type that accepts ReportConfigDatasetResponseArgs and ReportConfigDatasetResponseOutput values.
// You can construct a concrete instance of `ReportConfigDatasetResponseInput` via:
//
//          ReportConfigDatasetResponseArgs{...}
type ReportConfigDatasetResponseInput interface {
	pulumi.Input

	ToReportConfigDatasetResponseOutput() ReportConfigDatasetResponseOutput
	ToReportConfigDatasetResponseOutputWithContext(context.Context) ReportConfigDatasetResponseOutput
}

// The definition of data present in the report.
type ReportConfigDatasetResponseArgs struct {
	// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
	Aggregation ReportConfigAggregationResponseMapInput `pulumi:"aggregation"`
	// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
	Configuration ReportConfigDatasetConfigurationResponsePtrInput `pulumi:"configuration"`
	// Has filter expression to use in the report.
	Filter ReportConfigFilterResponsePtrInput `pulumi:"filter"`
	// The granularity of rows in the report.
	Granularity pulumi.StringPtrInput `pulumi:"granularity"`
	// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
	Grouping ReportConfigGroupingResponseArrayInput `pulumi:"grouping"`
}

func (ReportConfigDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDatasetResponse)(nil)).Elem()
}

func (i ReportConfigDatasetResponseArgs) ToReportConfigDatasetResponseOutput() ReportConfigDatasetResponseOutput {
	return i.ToReportConfigDatasetResponseOutputWithContext(context.Background())
}

func (i ReportConfigDatasetResponseArgs) ToReportConfigDatasetResponseOutputWithContext(ctx context.Context) ReportConfigDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetResponseOutput)
}

func (i ReportConfigDatasetResponseArgs) ToReportConfigDatasetResponsePtrOutput() ReportConfigDatasetResponsePtrOutput {
	return i.ToReportConfigDatasetResponsePtrOutputWithContext(context.Background())
}

func (i ReportConfigDatasetResponseArgs) ToReportConfigDatasetResponsePtrOutputWithContext(ctx context.Context) ReportConfigDatasetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetResponseOutput).ToReportConfigDatasetResponsePtrOutputWithContext(ctx)
}

// ReportConfigDatasetResponsePtrInput is an input type that accepts ReportConfigDatasetResponseArgs, ReportConfigDatasetResponsePtr and ReportConfigDatasetResponsePtrOutput values.
// You can construct a concrete instance of `ReportConfigDatasetResponsePtrInput` via:
//
//          ReportConfigDatasetResponseArgs{...}
//
//  or:
//
//          nil
type ReportConfigDatasetResponsePtrInput interface {
	pulumi.Input

	ToReportConfigDatasetResponsePtrOutput() ReportConfigDatasetResponsePtrOutput
	ToReportConfigDatasetResponsePtrOutputWithContext(context.Context) ReportConfigDatasetResponsePtrOutput
}

type reportConfigDatasetResponsePtrType ReportConfigDatasetResponseArgs

func ReportConfigDatasetResponsePtr(v *ReportConfigDatasetResponseArgs) ReportConfigDatasetResponsePtrInput {
	return (*reportConfigDatasetResponsePtrType)(v)
}

func (*reportConfigDatasetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDatasetResponse)(nil)).Elem()
}

func (i *reportConfigDatasetResponsePtrType) ToReportConfigDatasetResponsePtrOutput() ReportConfigDatasetResponsePtrOutput {
	return i.ToReportConfigDatasetResponsePtrOutputWithContext(context.Background())
}

func (i *reportConfigDatasetResponsePtrType) ToReportConfigDatasetResponsePtrOutputWithContext(ctx context.Context) ReportConfigDatasetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetResponsePtrOutput)
}

// The definition of data present in the report.
type ReportConfigDatasetResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDatasetResponse)(nil)).Elem()
}

func (o ReportConfigDatasetResponseOutput) ToReportConfigDatasetResponseOutput() ReportConfigDatasetResponseOutput {
	return o
}

func (o ReportConfigDatasetResponseOutput) ToReportConfigDatasetResponseOutputWithContext(ctx context.Context) ReportConfigDatasetResponseOutput {
	return o
}

func (o ReportConfigDatasetResponseOutput) ToReportConfigDatasetResponsePtrOutput() ReportConfigDatasetResponsePtrOutput {
	return o.ToReportConfigDatasetResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigDatasetResponseOutput) ToReportConfigDatasetResponsePtrOutputWithContext(ctx context.Context) ReportConfigDatasetResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDatasetResponse) *ReportConfigDatasetResponse {
		return &v
	}).(ReportConfigDatasetResponsePtrOutput)
}

// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
func (o ReportConfigDatasetResponseOutput) Aggregation() ReportConfigAggregationResponseMapOutput {
	return o.ApplyT(func(v ReportConfigDatasetResponse) map[string]ReportConfigAggregationResponse { return v.Aggregation }).(ReportConfigAggregationResponseMapOutput)
}

// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
func (o ReportConfigDatasetResponseOutput) Configuration() ReportConfigDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDatasetResponse) *ReportConfigDatasetConfigurationResponse { return v.Configuration }).(ReportConfigDatasetConfigurationResponsePtrOutput)
}

// Has filter expression to use in the report.
func (o ReportConfigDatasetResponseOutput) Filter() ReportConfigFilterResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDatasetResponse) *ReportConfigFilterResponse { return v.Filter }).(ReportConfigFilterResponsePtrOutput)
}

// The granularity of rows in the report.
func (o ReportConfigDatasetResponseOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportConfigDatasetResponse) *string { return v.Granularity }).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
func (o ReportConfigDatasetResponseOutput) Grouping() ReportConfigGroupingResponseArrayOutput {
	return o.ApplyT(func(v ReportConfigDatasetResponse) []ReportConfigGroupingResponse { return v.Grouping }).(ReportConfigGroupingResponseArrayOutput)
}

type ReportConfigDatasetResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDatasetResponse)(nil)).Elem()
}

func (o ReportConfigDatasetResponsePtrOutput) ToReportConfigDatasetResponsePtrOutput() ReportConfigDatasetResponsePtrOutput {
	return o
}

func (o ReportConfigDatasetResponsePtrOutput) ToReportConfigDatasetResponsePtrOutputWithContext(ctx context.Context) ReportConfigDatasetResponsePtrOutput {
	return o
}

func (o ReportConfigDatasetResponsePtrOutput) Elem() ReportConfigDatasetResponseOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) ReportConfigDatasetResponse { return *v }).(ReportConfigDatasetResponseOutput)
}

// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
func (o ReportConfigDatasetResponsePtrOutput) Aggregation() ReportConfigAggregationResponseMapOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) map[string]ReportConfigAggregationResponse {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(ReportConfigAggregationResponseMapOutput)
}

// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
func (o ReportConfigDatasetResponsePtrOutput) Configuration() ReportConfigDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) *ReportConfigDatasetConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ReportConfigDatasetConfigurationResponsePtrOutput)
}

// Has filter expression to use in the report.
func (o ReportConfigDatasetResponsePtrOutput) Filter() ReportConfigFilterResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) *ReportConfigFilterResponse {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(ReportConfigFilterResponsePtrOutput)
}

// The granularity of rows in the report.
func (o ReportConfigDatasetResponsePtrOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Granularity
	}).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
func (o ReportConfigDatasetResponsePtrOutput) Grouping() ReportConfigGroupingResponseArrayOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) []ReportConfigGroupingResponse {
		if v == nil {
			return nil
		}
		return v.Grouping
	}).(ReportConfigGroupingResponseArrayOutput)
}

// The definition of a report config.
type ReportConfigDefinition struct {
	// Has definition for data in this report config.
	Dataset *ReportConfigDataset `pulumi:"dataset"`
	// Has time period for pulling data for the report.
	TimePeriod *ReportConfigTimePeriod `pulumi:"timePeriod"`
	// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
	Timeframe string `pulumi:"timeframe"`
	// The type of the report.
	Type string `pulumi:"type"`
}

// ReportConfigDefinitionInput is an input type that accepts ReportConfigDefinitionArgs and ReportConfigDefinitionOutput values.
// You can construct a concrete instance of `ReportConfigDefinitionInput` via:
//
//          ReportConfigDefinitionArgs{...}
type ReportConfigDefinitionInput interface {
	pulumi.Input

	ToReportConfigDefinitionOutput() ReportConfigDefinitionOutput
	ToReportConfigDefinitionOutputWithContext(context.Context) ReportConfigDefinitionOutput
}

// The definition of a report config.
type ReportConfigDefinitionArgs struct {
	// Has definition for data in this report config.
	Dataset ReportConfigDatasetPtrInput `pulumi:"dataset"`
	// Has time period for pulling data for the report.
	TimePeriod ReportConfigTimePeriodPtrInput `pulumi:"timePeriod"`
	// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
	Timeframe pulumi.StringInput `pulumi:"timeframe"`
	// The type of the report.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ReportConfigDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDefinition)(nil)).Elem()
}

func (i ReportConfigDefinitionArgs) ToReportConfigDefinitionOutput() ReportConfigDefinitionOutput {
	return i.ToReportConfigDefinitionOutputWithContext(context.Background())
}

func (i ReportConfigDefinitionArgs) ToReportConfigDefinitionOutputWithContext(ctx context.Context) ReportConfigDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDefinitionOutput)
}

func (i ReportConfigDefinitionArgs) ToReportConfigDefinitionPtrOutput() ReportConfigDefinitionPtrOutput {
	return i.ToReportConfigDefinitionPtrOutputWithContext(context.Background())
}

func (i ReportConfigDefinitionArgs) ToReportConfigDefinitionPtrOutputWithContext(ctx context.Context) ReportConfigDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDefinitionOutput).ToReportConfigDefinitionPtrOutputWithContext(ctx)
}

// ReportConfigDefinitionPtrInput is an input type that accepts ReportConfigDefinitionArgs, ReportConfigDefinitionPtr and ReportConfigDefinitionPtrOutput values.
// You can construct a concrete instance of `ReportConfigDefinitionPtrInput` via:
//
//          ReportConfigDefinitionArgs{...}
//
//  or:
//
//          nil
type ReportConfigDefinitionPtrInput interface {
	pulumi.Input

	ToReportConfigDefinitionPtrOutput() ReportConfigDefinitionPtrOutput
	ToReportConfigDefinitionPtrOutputWithContext(context.Context) ReportConfigDefinitionPtrOutput
}

type reportConfigDefinitionPtrType ReportConfigDefinitionArgs

func ReportConfigDefinitionPtr(v *ReportConfigDefinitionArgs) ReportConfigDefinitionPtrInput {
	return (*reportConfigDefinitionPtrType)(v)
}

func (*reportConfigDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDefinition)(nil)).Elem()
}

func (i *reportConfigDefinitionPtrType) ToReportConfigDefinitionPtrOutput() ReportConfigDefinitionPtrOutput {
	return i.ToReportConfigDefinitionPtrOutputWithContext(context.Background())
}

func (i *reportConfigDefinitionPtrType) ToReportConfigDefinitionPtrOutputWithContext(ctx context.Context) ReportConfigDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDefinitionPtrOutput)
}

// The definition of a report config.
type ReportConfigDefinitionOutput struct{ *pulumi.OutputState }

func (ReportConfigDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDefinition)(nil)).Elem()
}

func (o ReportConfigDefinitionOutput) ToReportConfigDefinitionOutput() ReportConfigDefinitionOutput {
	return o
}

func (o ReportConfigDefinitionOutput) ToReportConfigDefinitionOutputWithContext(ctx context.Context) ReportConfigDefinitionOutput {
	return o
}

func (o ReportConfigDefinitionOutput) ToReportConfigDefinitionPtrOutput() ReportConfigDefinitionPtrOutput {
	return o.ToReportConfigDefinitionPtrOutputWithContext(context.Background())
}

func (o ReportConfigDefinitionOutput) ToReportConfigDefinitionPtrOutputWithContext(ctx context.Context) ReportConfigDefinitionPtrOutput {
	return o.ApplyT(func(v ReportConfigDefinition) *ReportConfigDefinition {
		return &v
	}).(ReportConfigDefinitionPtrOutput)
}

// Has definition for data in this report config.
func (o ReportConfigDefinitionOutput) Dataset() ReportConfigDatasetPtrOutput {
	return o.ApplyT(func(v ReportConfigDefinition) *ReportConfigDataset { return v.Dataset }).(ReportConfigDatasetPtrOutput)
}

// Has time period for pulling data for the report.
func (o ReportConfigDefinitionOutput) TimePeriod() ReportConfigTimePeriodPtrOutput {
	return o.ApplyT(func(v ReportConfigDefinition) *ReportConfigTimePeriod { return v.TimePeriod }).(ReportConfigTimePeriodPtrOutput)
}

// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
func (o ReportConfigDefinitionOutput) Timeframe() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigDefinition) string { return v.Timeframe }).(pulumi.StringOutput)
}

// The type of the report.
func (o ReportConfigDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigDefinition) string { return v.Type }).(pulumi.StringOutput)
}

type ReportConfigDefinitionPtrOutput struct{ *pulumi.OutputState }

func (ReportConfigDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDefinition)(nil)).Elem()
}

func (o ReportConfigDefinitionPtrOutput) ToReportConfigDefinitionPtrOutput() ReportConfigDefinitionPtrOutput {
	return o
}

func (o ReportConfigDefinitionPtrOutput) ToReportConfigDefinitionPtrOutputWithContext(ctx context.Context) ReportConfigDefinitionPtrOutput {
	return o
}

func (o ReportConfigDefinitionPtrOutput) Elem() ReportConfigDefinitionOutput {
	return o.ApplyT(func(v *ReportConfigDefinition) ReportConfigDefinition { return *v }).(ReportConfigDefinitionOutput)
}

// Has definition for data in this report config.
func (o ReportConfigDefinitionPtrOutput) Dataset() ReportConfigDatasetPtrOutput {
	return o.ApplyT(func(v *ReportConfigDefinition) *ReportConfigDataset {
		if v == nil {
			return nil
		}
		return v.Dataset
	}).(ReportConfigDatasetPtrOutput)
}

// Has time period for pulling data for the report.
func (o ReportConfigDefinitionPtrOutput) TimePeriod() ReportConfigTimePeriodPtrOutput {
	return o.ApplyT(func(v *ReportConfigDefinition) *ReportConfigTimePeriod {
		if v == nil {
			return nil
		}
		return v.TimePeriod
	}).(ReportConfigTimePeriodPtrOutput)
}

// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
func (o ReportConfigDefinitionPtrOutput) Timeframe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.Timeframe
	}).(pulumi.StringPtrOutput)
}

// The type of the report.
func (o ReportConfigDefinitionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The definition of a report config.
type ReportConfigDefinitionResponse struct {
	// Has definition for data in this report config.
	Dataset *ReportConfigDatasetResponse `pulumi:"dataset"`
	// Has time period for pulling data for the report.
	TimePeriod *ReportConfigTimePeriodResponse `pulumi:"timePeriod"`
	// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
	Timeframe string `pulumi:"timeframe"`
	// The type of the report.
	Type string `pulumi:"type"`
}

// ReportConfigDefinitionResponseInput is an input type that accepts ReportConfigDefinitionResponseArgs and ReportConfigDefinitionResponseOutput values.
// You can construct a concrete instance of `ReportConfigDefinitionResponseInput` via:
//
//          ReportConfigDefinitionResponseArgs{...}
type ReportConfigDefinitionResponseInput interface {
	pulumi.Input

	ToReportConfigDefinitionResponseOutput() ReportConfigDefinitionResponseOutput
	ToReportConfigDefinitionResponseOutputWithContext(context.Context) ReportConfigDefinitionResponseOutput
}

// The definition of a report config.
type ReportConfigDefinitionResponseArgs struct {
	// Has definition for data in this report config.
	Dataset ReportConfigDatasetResponsePtrInput `pulumi:"dataset"`
	// Has time period for pulling data for the report.
	TimePeriod ReportConfigTimePeriodResponsePtrInput `pulumi:"timePeriod"`
	// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
	Timeframe pulumi.StringInput `pulumi:"timeframe"`
	// The type of the report.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ReportConfigDefinitionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDefinitionResponse)(nil)).Elem()
}

func (i ReportConfigDefinitionResponseArgs) ToReportConfigDefinitionResponseOutput() ReportConfigDefinitionResponseOutput {
	return i.ToReportConfigDefinitionResponseOutputWithContext(context.Background())
}

func (i ReportConfigDefinitionResponseArgs) ToReportConfigDefinitionResponseOutputWithContext(ctx context.Context) ReportConfigDefinitionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDefinitionResponseOutput)
}

func (i ReportConfigDefinitionResponseArgs) ToReportConfigDefinitionResponsePtrOutput() ReportConfigDefinitionResponsePtrOutput {
	return i.ToReportConfigDefinitionResponsePtrOutputWithContext(context.Background())
}

func (i ReportConfigDefinitionResponseArgs) ToReportConfigDefinitionResponsePtrOutputWithContext(ctx context.Context) ReportConfigDefinitionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDefinitionResponseOutput).ToReportConfigDefinitionResponsePtrOutputWithContext(ctx)
}

// ReportConfigDefinitionResponsePtrInput is an input type that accepts ReportConfigDefinitionResponseArgs, ReportConfigDefinitionResponsePtr and ReportConfigDefinitionResponsePtrOutput values.
// You can construct a concrete instance of `ReportConfigDefinitionResponsePtrInput` via:
//
//          ReportConfigDefinitionResponseArgs{...}
//
//  or:
//
//          nil
type ReportConfigDefinitionResponsePtrInput interface {
	pulumi.Input

	ToReportConfigDefinitionResponsePtrOutput() ReportConfigDefinitionResponsePtrOutput
	ToReportConfigDefinitionResponsePtrOutputWithContext(context.Context) ReportConfigDefinitionResponsePtrOutput
}

type reportConfigDefinitionResponsePtrType ReportConfigDefinitionResponseArgs

func ReportConfigDefinitionResponsePtr(v *ReportConfigDefinitionResponseArgs) ReportConfigDefinitionResponsePtrInput {
	return (*reportConfigDefinitionResponsePtrType)(v)
}

func (*reportConfigDefinitionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDefinitionResponse)(nil)).Elem()
}

func (i *reportConfigDefinitionResponsePtrType) ToReportConfigDefinitionResponsePtrOutput() ReportConfigDefinitionResponsePtrOutput {
	return i.ToReportConfigDefinitionResponsePtrOutputWithContext(context.Background())
}

func (i *reportConfigDefinitionResponsePtrType) ToReportConfigDefinitionResponsePtrOutputWithContext(ctx context.Context) ReportConfigDefinitionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDefinitionResponsePtrOutput)
}

// The definition of a report config.
type ReportConfigDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDefinitionResponse)(nil)).Elem()
}

func (o ReportConfigDefinitionResponseOutput) ToReportConfigDefinitionResponseOutput() ReportConfigDefinitionResponseOutput {
	return o
}

func (o ReportConfigDefinitionResponseOutput) ToReportConfigDefinitionResponseOutputWithContext(ctx context.Context) ReportConfigDefinitionResponseOutput {
	return o
}

func (o ReportConfigDefinitionResponseOutput) ToReportConfigDefinitionResponsePtrOutput() ReportConfigDefinitionResponsePtrOutput {
	return o.ToReportConfigDefinitionResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigDefinitionResponseOutput) ToReportConfigDefinitionResponsePtrOutputWithContext(ctx context.Context) ReportConfigDefinitionResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDefinitionResponse) *ReportConfigDefinitionResponse {
		return &v
	}).(ReportConfigDefinitionResponsePtrOutput)
}

// Has definition for data in this report config.
func (o ReportConfigDefinitionResponseOutput) Dataset() ReportConfigDatasetResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDefinitionResponse) *ReportConfigDatasetResponse { return v.Dataset }).(ReportConfigDatasetResponsePtrOutput)
}

// Has time period for pulling data for the report.
func (o ReportConfigDefinitionResponseOutput) TimePeriod() ReportConfigTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDefinitionResponse) *ReportConfigTimePeriodResponse { return v.TimePeriod }).(ReportConfigTimePeriodResponsePtrOutput)
}

// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
func (o ReportConfigDefinitionResponseOutput) Timeframe() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigDefinitionResponse) string { return v.Timeframe }).(pulumi.StringOutput)
}

// The type of the report.
func (o ReportConfigDefinitionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigDefinitionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ReportConfigDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDefinitionResponse)(nil)).Elem()
}

func (o ReportConfigDefinitionResponsePtrOutput) ToReportConfigDefinitionResponsePtrOutput() ReportConfigDefinitionResponsePtrOutput {
	return o
}

func (o ReportConfigDefinitionResponsePtrOutput) ToReportConfigDefinitionResponsePtrOutputWithContext(ctx context.Context) ReportConfigDefinitionResponsePtrOutput {
	return o
}

func (o ReportConfigDefinitionResponsePtrOutput) Elem() ReportConfigDefinitionResponseOutput {
	return o.ApplyT(func(v *ReportConfigDefinitionResponse) ReportConfigDefinitionResponse { return *v }).(ReportConfigDefinitionResponseOutput)
}

// Has definition for data in this report config.
func (o ReportConfigDefinitionResponsePtrOutput) Dataset() ReportConfigDatasetResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigDefinitionResponse) *ReportConfigDatasetResponse {
		if v == nil {
			return nil
		}
		return v.Dataset
	}).(ReportConfigDatasetResponsePtrOutput)
}

// Has time period for pulling data for the report.
func (o ReportConfigDefinitionResponsePtrOutput) TimePeriod() ReportConfigTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigDefinitionResponse) *ReportConfigTimePeriodResponse {
		if v == nil {
			return nil
		}
		return v.TimePeriod
	}).(ReportConfigTimePeriodResponsePtrOutput)
}

// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
func (o ReportConfigDefinitionResponsePtrOutput) Timeframe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Timeframe
	}).(pulumi.StringPtrOutput)
}

// The type of the report.
func (o ReportConfigDefinitionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The destination information for the delivery of the report.
type ReportConfigDeliveryDestination struct {
	// The name of the container where reports will be uploaded.
	Container string `pulumi:"container"`
	// The resource id of the storage account where reports will be delivered.
	ResourceId string `pulumi:"resourceId"`
	// The name of the directory where reports will be uploaded.
	RootFolderPath *string `pulumi:"rootFolderPath"`
}

// ReportConfigDeliveryDestinationInput is an input type that accepts ReportConfigDeliveryDestinationArgs and ReportConfigDeliveryDestinationOutput values.
// You can construct a concrete instance of `ReportConfigDeliveryDestinationInput` via:
//
//          ReportConfigDeliveryDestinationArgs{...}
type ReportConfigDeliveryDestinationInput interface {
	pulumi.Input

	ToReportConfigDeliveryDestinationOutput() ReportConfigDeliveryDestinationOutput
	ToReportConfigDeliveryDestinationOutputWithContext(context.Context) ReportConfigDeliveryDestinationOutput
}

// The destination information for the delivery of the report.
type ReportConfigDeliveryDestinationArgs struct {
	// The name of the container where reports will be uploaded.
	Container pulumi.StringInput `pulumi:"container"`
	// The resource id of the storage account where reports will be delivered.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The name of the directory where reports will be uploaded.
	RootFolderPath pulumi.StringPtrInput `pulumi:"rootFolderPath"`
}

func (ReportConfigDeliveryDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDeliveryDestination)(nil)).Elem()
}

func (i ReportConfigDeliveryDestinationArgs) ToReportConfigDeliveryDestinationOutput() ReportConfigDeliveryDestinationOutput {
	return i.ToReportConfigDeliveryDestinationOutputWithContext(context.Background())
}

func (i ReportConfigDeliveryDestinationArgs) ToReportConfigDeliveryDestinationOutputWithContext(ctx context.Context) ReportConfigDeliveryDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDeliveryDestinationOutput)
}

func (i ReportConfigDeliveryDestinationArgs) ToReportConfigDeliveryDestinationPtrOutput() ReportConfigDeliveryDestinationPtrOutput {
	return i.ToReportConfigDeliveryDestinationPtrOutputWithContext(context.Background())
}

func (i ReportConfigDeliveryDestinationArgs) ToReportConfigDeliveryDestinationPtrOutputWithContext(ctx context.Context) ReportConfigDeliveryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDeliveryDestinationOutput).ToReportConfigDeliveryDestinationPtrOutputWithContext(ctx)
}

// ReportConfigDeliveryDestinationPtrInput is an input type that accepts ReportConfigDeliveryDestinationArgs, ReportConfigDeliveryDestinationPtr and ReportConfigDeliveryDestinationPtrOutput values.
// You can construct a concrete instance of `ReportConfigDeliveryDestinationPtrInput` via:
//
//          ReportConfigDeliveryDestinationArgs{...}
//
//  or:
//
//          nil
type ReportConfigDeliveryDestinationPtrInput interface {
	pulumi.Input

	ToReportConfigDeliveryDestinationPtrOutput() ReportConfigDeliveryDestinationPtrOutput
	ToReportConfigDeliveryDestinationPtrOutputWithContext(context.Context) ReportConfigDeliveryDestinationPtrOutput
}

type reportConfigDeliveryDestinationPtrType ReportConfigDeliveryDestinationArgs

func ReportConfigDeliveryDestinationPtr(v *ReportConfigDeliveryDestinationArgs) ReportConfigDeliveryDestinationPtrInput {
	return (*reportConfigDeliveryDestinationPtrType)(v)
}

func (*reportConfigDeliveryDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDeliveryDestination)(nil)).Elem()
}

func (i *reportConfigDeliveryDestinationPtrType) ToReportConfigDeliveryDestinationPtrOutput() ReportConfigDeliveryDestinationPtrOutput {
	return i.ToReportConfigDeliveryDestinationPtrOutputWithContext(context.Background())
}

func (i *reportConfigDeliveryDestinationPtrType) ToReportConfigDeliveryDestinationPtrOutputWithContext(ctx context.Context) ReportConfigDeliveryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDeliveryDestinationPtrOutput)
}

// The destination information for the delivery of the report.
type ReportConfigDeliveryDestinationOutput struct{ *pulumi.OutputState }

func (ReportConfigDeliveryDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDeliveryDestination)(nil)).Elem()
}

func (o ReportConfigDeliveryDestinationOutput) ToReportConfigDeliveryDestinationOutput() ReportConfigDeliveryDestinationOutput {
	return o
}

func (o ReportConfigDeliveryDestinationOutput) ToReportConfigDeliveryDestinationOutputWithContext(ctx context.Context) ReportConfigDeliveryDestinationOutput {
	return o
}

func (o ReportConfigDeliveryDestinationOutput) ToReportConfigDeliveryDestinationPtrOutput() ReportConfigDeliveryDestinationPtrOutput {
	return o.ToReportConfigDeliveryDestinationPtrOutputWithContext(context.Background())
}

func (o ReportConfigDeliveryDestinationOutput) ToReportConfigDeliveryDestinationPtrOutputWithContext(ctx context.Context) ReportConfigDeliveryDestinationPtrOutput {
	return o.ApplyT(func(v ReportConfigDeliveryDestination) *ReportConfigDeliveryDestination {
		return &v
	}).(ReportConfigDeliveryDestinationPtrOutput)
}

// The name of the container where reports will be uploaded.
func (o ReportConfigDeliveryDestinationOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigDeliveryDestination) string { return v.Container }).(pulumi.StringOutput)
}

// The resource id of the storage account where reports will be delivered.
func (o ReportConfigDeliveryDestinationOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigDeliveryDestination) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The name of the directory where reports will be uploaded.
func (o ReportConfigDeliveryDestinationOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportConfigDeliveryDestination) *string { return v.RootFolderPath }).(pulumi.StringPtrOutput)
}

type ReportConfigDeliveryDestinationPtrOutput struct{ *pulumi.OutputState }

func (ReportConfigDeliveryDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDeliveryDestination)(nil)).Elem()
}

func (o ReportConfigDeliveryDestinationPtrOutput) ToReportConfigDeliveryDestinationPtrOutput() ReportConfigDeliveryDestinationPtrOutput {
	return o
}

func (o ReportConfigDeliveryDestinationPtrOutput) ToReportConfigDeliveryDestinationPtrOutputWithContext(ctx context.Context) ReportConfigDeliveryDestinationPtrOutput {
	return o
}

func (o ReportConfigDeliveryDestinationPtrOutput) Elem() ReportConfigDeliveryDestinationOutput {
	return o.ApplyT(func(v *ReportConfigDeliveryDestination) ReportConfigDeliveryDestination { return *v }).(ReportConfigDeliveryDestinationOutput)
}

// The name of the container where reports will be uploaded.
func (o ReportConfigDeliveryDestinationPtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDeliveryDestination) *string {
		if v == nil {
			return nil
		}
		return &v.Container
	}).(pulumi.StringPtrOutput)
}

// The resource id of the storage account where reports will be delivered.
func (o ReportConfigDeliveryDestinationPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDeliveryDestination) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The name of the directory where reports will be uploaded.
func (o ReportConfigDeliveryDestinationPtrOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDeliveryDestination) *string {
		if v == nil {
			return nil
		}
		return v.RootFolderPath
	}).(pulumi.StringPtrOutput)
}

// The destination information for the delivery of the report.
type ReportConfigDeliveryDestinationResponse struct {
	// The name of the container where reports will be uploaded.
	Container string `pulumi:"container"`
	// The resource id of the storage account where reports will be delivered.
	ResourceId string `pulumi:"resourceId"`
	// The name of the directory where reports will be uploaded.
	RootFolderPath *string `pulumi:"rootFolderPath"`
}

// ReportConfigDeliveryDestinationResponseInput is an input type that accepts ReportConfigDeliveryDestinationResponseArgs and ReportConfigDeliveryDestinationResponseOutput values.
// You can construct a concrete instance of `ReportConfigDeliveryDestinationResponseInput` via:
//
//          ReportConfigDeliveryDestinationResponseArgs{...}
type ReportConfigDeliveryDestinationResponseInput interface {
	pulumi.Input

	ToReportConfigDeliveryDestinationResponseOutput() ReportConfigDeliveryDestinationResponseOutput
	ToReportConfigDeliveryDestinationResponseOutputWithContext(context.Context) ReportConfigDeliveryDestinationResponseOutput
}

// The destination information for the delivery of the report.
type ReportConfigDeliveryDestinationResponseArgs struct {
	// The name of the container where reports will be uploaded.
	Container pulumi.StringInput `pulumi:"container"`
	// The resource id of the storage account where reports will be delivered.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The name of the directory where reports will be uploaded.
	RootFolderPath pulumi.StringPtrInput `pulumi:"rootFolderPath"`
}

func (ReportConfigDeliveryDestinationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDeliveryDestinationResponse)(nil)).Elem()
}

func (i ReportConfigDeliveryDestinationResponseArgs) ToReportConfigDeliveryDestinationResponseOutput() ReportConfigDeliveryDestinationResponseOutput {
	return i.ToReportConfigDeliveryDestinationResponseOutputWithContext(context.Background())
}

func (i ReportConfigDeliveryDestinationResponseArgs) ToReportConfigDeliveryDestinationResponseOutputWithContext(ctx context.Context) ReportConfigDeliveryDestinationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDeliveryDestinationResponseOutput)
}

func (i ReportConfigDeliveryDestinationResponseArgs) ToReportConfigDeliveryDestinationResponsePtrOutput() ReportConfigDeliveryDestinationResponsePtrOutput {
	return i.ToReportConfigDeliveryDestinationResponsePtrOutputWithContext(context.Background())
}

func (i ReportConfigDeliveryDestinationResponseArgs) ToReportConfigDeliveryDestinationResponsePtrOutputWithContext(ctx context.Context) ReportConfigDeliveryDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDeliveryDestinationResponseOutput).ToReportConfigDeliveryDestinationResponsePtrOutputWithContext(ctx)
}

// ReportConfigDeliveryDestinationResponsePtrInput is an input type that accepts ReportConfigDeliveryDestinationResponseArgs, ReportConfigDeliveryDestinationResponsePtr and ReportConfigDeliveryDestinationResponsePtrOutput values.
// You can construct a concrete instance of `ReportConfigDeliveryDestinationResponsePtrInput` via:
//
//          ReportConfigDeliveryDestinationResponseArgs{...}
//
//  or:
//
//          nil
type ReportConfigDeliveryDestinationResponsePtrInput interface {
	pulumi.Input

	ToReportConfigDeliveryDestinationResponsePtrOutput() ReportConfigDeliveryDestinationResponsePtrOutput
	ToReportConfigDeliveryDestinationResponsePtrOutputWithContext(context.Context) ReportConfigDeliveryDestinationResponsePtrOutput
}

type reportConfigDeliveryDestinationResponsePtrType ReportConfigDeliveryDestinationResponseArgs

func ReportConfigDeliveryDestinationResponsePtr(v *ReportConfigDeliveryDestinationResponseArgs) ReportConfigDeliveryDestinationResponsePtrInput {
	return (*reportConfigDeliveryDestinationResponsePtrType)(v)
}

func (*reportConfigDeliveryDestinationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDeliveryDestinationResponse)(nil)).Elem()
}

func (i *reportConfigDeliveryDestinationResponsePtrType) ToReportConfigDeliveryDestinationResponsePtrOutput() ReportConfigDeliveryDestinationResponsePtrOutput {
	return i.ToReportConfigDeliveryDestinationResponsePtrOutputWithContext(context.Background())
}

func (i *reportConfigDeliveryDestinationResponsePtrType) ToReportConfigDeliveryDestinationResponsePtrOutputWithContext(ctx context.Context) ReportConfigDeliveryDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDeliveryDestinationResponsePtrOutput)
}

// The destination information for the delivery of the report.
type ReportConfigDeliveryDestinationResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigDeliveryDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDeliveryDestinationResponse)(nil)).Elem()
}

func (o ReportConfigDeliveryDestinationResponseOutput) ToReportConfigDeliveryDestinationResponseOutput() ReportConfigDeliveryDestinationResponseOutput {
	return o
}

func (o ReportConfigDeliveryDestinationResponseOutput) ToReportConfigDeliveryDestinationResponseOutputWithContext(ctx context.Context) ReportConfigDeliveryDestinationResponseOutput {
	return o
}

func (o ReportConfigDeliveryDestinationResponseOutput) ToReportConfigDeliveryDestinationResponsePtrOutput() ReportConfigDeliveryDestinationResponsePtrOutput {
	return o.ToReportConfigDeliveryDestinationResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigDeliveryDestinationResponseOutput) ToReportConfigDeliveryDestinationResponsePtrOutputWithContext(ctx context.Context) ReportConfigDeliveryDestinationResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDeliveryDestinationResponse) *ReportConfigDeliveryDestinationResponse {
		return &v
	}).(ReportConfigDeliveryDestinationResponsePtrOutput)
}

// The name of the container where reports will be uploaded.
func (o ReportConfigDeliveryDestinationResponseOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigDeliveryDestinationResponse) string { return v.Container }).(pulumi.StringOutput)
}

// The resource id of the storage account where reports will be delivered.
func (o ReportConfigDeliveryDestinationResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigDeliveryDestinationResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The name of the directory where reports will be uploaded.
func (o ReportConfigDeliveryDestinationResponseOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportConfigDeliveryDestinationResponse) *string { return v.RootFolderPath }).(pulumi.StringPtrOutput)
}

type ReportConfigDeliveryDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigDeliveryDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDeliveryDestinationResponse)(nil)).Elem()
}

func (o ReportConfigDeliveryDestinationResponsePtrOutput) ToReportConfigDeliveryDestinationResponsePtrOutput() ReportConfigDeliveryDestinationResponsePtrOutput {
	return o
}

func (o ReportConfigDeliveryDestinationResponsePtrOutput) ToReportConfigDeliveryDestinationResponsePtrOutputWithContext(ctx context.Context) ReportConfigDeliveryDestinationResponsePtrOutput {
	return o
}

func (o ReportConfigDeliveryDestinationResponsePtrOutput) Elem() ReportConfigDeliveryDestinationResponseOutput {
	return o.ApplyT(func(v *ReportConfigDeliveryDestinationResponse) ReportConfigDeliveryDestinationResponse { return *v }).(ReportConfigDeliveryDestinationResponseOutput)
}

// The name of the container where reports will be uploaded.
func (o ReportConfigDeliveryDestinationResponsePtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Container
	}).(pulumi.StringPtrOutput)
}

// The resource id of the storage account where reports will be delivered.
func (o ReportConfigDeliveryDestinationResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The name of the directory where reports will be uploaded.
func (o ReportConfigDeliveryDestinationResponsePtrOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RootFolderPath
	}).(pulumi.StringPtrOutput)
}

// The delivery information associated with a report config.
type ReportConfigDeliveryInfo struct {
	// Has destination for the report being delivered.
	Destination ReportConfigDeliveryDestination `pulumi:"destination"`
}

// ReportConfigDeliveryInfoInput is an input type that accepts ReportConfigDeliveryInfoArgs and ReportConfigDeliveryInfoOutput values.
// You can construct a concrete instance of `ReportConfigDeliveryInfoInput` via:
//
//          ReportConfigDeliveryInfoArgs{...}
type ReportConfigDeliveryInfoInput interface {
	pulumi.Input

	ToReportConfigDeliveryInfoOutput() ReportConfigDeliveryInfoOutput
	ToReportConfigDeliveryInfoOutputWithContext(context.Context) ReportConfigDeliveryInfoOutput
}

// The delivery information associated with a report config.
type ReportConfigDeliveryInfoArgs struct {
	// Has destination for the report being delivered.
	Destination ReportConfigDeliveryDestinationInput `pulumi:"destination"`
}

func (ReportConfigDeliveryInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDeliveryInfo)(nil)).Elem()
}

func (i ReportConfigDeliveryInfoArgs) ToReportConfigDeliveryInfoOutput() ReportConfigDeliveryInfoOutput {
	return i.ToReportConfigDeliveryInfoOutputWithContext(context.Background())
}

func (i ReportConfigDeliveryInfoArgs) ToReportConfigDeliveryInfoOutputWithContext(ctx context.Context) ReportConfigDeliveryInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDeliveryInfoOutput)
}

func (i ReportConfigDeliveryInfoArgs) ToReportConfigDeliveryInfoPtrOutput() ReportConfigDeliveryInfoPtrOutput {
	return i.ToReportConfigDeliveryInfoPtrOutputWithContext(context.Background())
}

func (i ReportConfigDeliveryInfoArgs) ToReportConfigDeliveryInfoPtrOutputWithContext(ctx context.Context) ReportConfigDeliveryInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDeliveryInfoOutput).ToReportConfigDeliveryInfoPtrOutputWithContext(ctx)
}

// ReportConfigDeliveryInfoPtrInput is an input type that accepts ReportConfigDeliveryInfoArgs, ReportConfigDeliveryInfoPtr and ReportConfigDeliveryInfoPtrOutput values.
// You can construct a concrete instance of `ReportConfigDeliveryInfoPtrInput` via:
//
//          ReportConfigDeliveryInfoArgs{...}
//
//  or:
//
//          nil
type ReportConfigDeliveryInfoPtrInput interface {
	pulumi.Input

	ToReportConfigDeliveryInfoPtrOutput() ReportConfigDeliveryInfoPtrOutput
	ToReportConfigDeliveryInfoPtrOutputWithContext(context.Context) ReportConfigDeliveryInfoPtrOutput
}

type reportConfigDeliveryInfoPtrType ReportConfigDeliveryInfoArgs

func ReportConfigDeliveryInfoPtr(v *ReportConfigDeliveryInfoArgs) ReportConfigDeliveryInfoPtrInput {
	return (*reportConfigDeliveryInfoPtrType)(v)
}

func (*reportConfigDeliveryInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDeliveryInfo)(nil)).Elem()
}

func (i *reportConfigDeliveryInfoPtrType) ToReportConfigDeliveryInfoPtrOutput() ReportConfigDeliveryInfoPtrOutput {
	return i.ToReportConfigDeliveryInfoPtrOutputWithContext(context.Background())
}

func (i *reportConfigDeliveryInfoPtrType) ToReportConfigDeliveryInfoPtrOutputWithContext(ctx context.Context) ReportConfigDeliveryInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDeliveryInfoPtrOutput)
}

// The delivery information associated with a report config.
type ReportConfigDeliveryInfoOutput struct{ *pulumi.OutputState }

func (ReportConfigDeliveryInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDeliveryInfo)(nil)).Elem()
}

func (o ReportConfigDeliveryInfoOutput) ToReportConfigDeliveryInfoOutput() ReportConfigDeliveryInfoOutput {
	return o
}

func (o ReportConfigDeliveryInfoOutput) ToReportConfigDeliveryInfoOutputWithContext(ctx context.Context) ReportConfigDeliveryInfoOutput {
	return o
}

func (o ReportConfigDeliveryInfoOutput) ToReportConfigDeliveryInfoPtrOutput() ReportConfigDeliveryInfoPtrOutput {
	return o.ToReportConfigDeliveryInfoPtrOutputWithContext(context.Background())
}

func (o ReportConfigDeliveryInfoOutput) ToReportConfigDeliveryInfoPtrOutputWithContext(ctx context.Context) ReportConfigDeliveryInfoPtrOutput {
	return o.ApplyT(func(v ReportConfigDeliveryInfo) *ReportConfigDeliveryInfo {
		return &v
	}).(ReportConfigDeliveryInfoPtrOutput)
}

// Has destination for the report being delivered.
func (o ReportConfigDeliveryInfoOutput) Destination() ReportConfigDeliveryDestinationOutput {
	return o.ApplyT(func(v ReportConfigDeliveryInfo) ReportConfigDeliveryDestination { return v.Destination }).(ReportConfigDeliveryDestinationOutput)
}

type ReportConfigDeliveryInfoPtrOutput struct{ *pulumi.OutputState }

func (ReportConfigDeliveryInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDeliveryInfo)(nil)).Elem()
}

func (o ReportConfigDeliveryInfoPtrOutput) ToReportConfigDeliveryInfoPtrOutput() ReportConfigDeliveryInfoPtrOutput {
	return o
}

func (o ReportConfigDeliveryInfoPtrOutput) ToReportConfigDeliveryInfoPtrOutputWithContext(ctx context.Context) ReportConfigDeliveryInfoPtrOutput {
	return o
}

func (o ReportConfigDeliveryInfoPtrOutput) Elem() ReportConfigDeliveryInfoOutput {
	return o.ApplyT(func(v *ReportConfigDeliveryInfo) ReportConfigDeliveryInfo { return *v }).(ReportConfigDeliveryInfoOutput)
}

// Has destination for the report being delivered.
func (o ReportConfigDeliveryInfoPtrOutput) Destination() ReportConfigDeliveryDestinationPtrOutput {
	return o.ApplyT(func(v *ReportConfigDeliveryInfo) *ReportConfigDeliveryDestination {
		if v == nil {
			return nil
		}
		return &v.Destination
	}).(ReportConfigDeliveryDestinationPtrOutput)
}

// The delivery information associated with a report config.
type ReportConfigDeliveryInfoResponse struct {
	// Has destination for the report being delivered.
	Destination ReportConfigDeliveryDestinationResponse `pulumi:"destination"`
}

// ReportConfigDeliveryInfoResponseInput is an input type that accepts ReportConfigDeliveryInfoResponseArgs and ReportConfigDeliveryInfoResponseOutput values.
// You can construct a concrete instance of `ReportConfigDeliveryInfoResponseInput` via:
//
//          ReportConfigDeliveryInfoResponseArgs{...}
type ReportConfigDeliveryInfoResponseInput interface {
	pulumi.Input

	ToReportConfigDeliveryInfoResponseOutput() ReportConfigDeliveryInfoResponseOutput
	ToReportConfigDeliveryInfoResponseOutputWithContext(context.Context) ReportConfigDeliveryInfoResponseOutput
}

// The delivery information associated with a report config.
type ReportConfigDeliveryInfoResponseArgs struct {
	// Has destination for the report being delivered.
	Destination ReportConfigDeliveryDestinationResponseInput `pulumi:"destination"`
}

func (ReportConfigDeliveryInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDeliveryInfoResponse)(nil)).Elem()
}

func (i ReportConfigDeliveryInfoResponseArgs) ToReportConfigDeliveryInfoResponseOutput() ReportConfigDeliveryInfoResponseOutput {
	return i.ToReportConfigDeliveryInfoResponseOutputWithContext(context.Background())
}

func (i ReportConfigDeliveryInfoResponseArgs) ToReportConfigDeliveryInfoResponseOutputWithContext(ctx context.Context) ReportConfigDeliveryInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDeliveryInfoResponseOutput)
}

func (i ReportConfigDeliveryInfoResponseArgs) ToReportConfigDeliveryInfoResponsePtrOutput() ReportConfigDeliveryInfoResponsePtrOutput {
	return i.ToReportConfigDeliveryInfoResponsePtrOutputWithContext(context.Background())
}

func (i ReportConfigDeliveryInfoResponseArgs) ToReportConfigDeliveryInfoResponsePtrOutputWithContext(ctx context.Context) ReportConfigDeliveryInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDeliveryInfoResponseOutput).ToReportConfigDeliveryInfoResponsePtrOutputWithContext(ctx)
}

// ReportConfigDeliveryInfoResponsePtrInput is an input type that accepts ReportConfigDeliveryInfoResponseArgs, ReportConfigDeliveryInfoResponsePtr and ReportConfigDeliveryInfoResponsePtrOutput values.
// You can construct a concrete instance of `ReportConfigDeliveryInfoResponsePtrInput` via:
//
//          ReportConfigDeliveryInfoResponseArgs{...}
//
//  or:
//
//          nil
type ReportConfigDeliveryInfoResponsePtrInput interface {
	pulumi.Input

	ToReportConfigDeliveryInfoResponsePtrOutput() ReportConfigDeliveryInfoResponsePtrOutput
	ToReportConfigDeliveryInfoResponsePtrOutputWithContext(context.Context) ReportConfigDeliveryInfoResponsePtrOutput
}

type reportConfigDeliveryInfoResponsePtrType ReportConfigDeliveryInfoResponseArgs

func ReportConfigDeliveryInfoResponsePtr(v *ReportConfigDeliveryInfoResponseArgs) ReportConfigDeliveryInfoResponsePtrInput {
	return (*reportConfigDeliveryInfoResponsePtrType)(v)
}

func (*reportConfigDeliveryInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDeliveryInfoResponse)(nil)).Elem()
}

func (i *reportConfigDeliveryInfoResponsePtrType) ToReportConfigDeliveryInfoResponsePtrOutput() ReportConfigDeliveryInfoResponsePtrOutput {
	return i.ToReportConfigDeliveryInfoResponsePtrOutputWithContext(context.Background())
}

func (i *reportConfigDeliveryInfoResponsePtrType) ToReportConfigDeliveryInfoResponsePtrOutputWithContext(ctx context.Context) ReportConfigDeliveryInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDeliveryInfoResponsePtrOutput)
}

// The delivery information associated with a report config.
type ReportConfigDeliveryInfoResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigDeliveryInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDeliveryInfoResponse)(nil)).Elem()
}

func (o ReportConfigDeliveryInfoResponseOutput) ToReportConfigDeliveryInfoResponseOutput() ReportConfigDeliveryInfoResponseOutput {
	return o
}

func (o ReportConfigDeliveryInfoResponseOutput) ToReportConfigDeliveryInfoResponseOutputWithContext(ctx context.Context) ReportConfigDeliveryInfoResponseOutput {
	return o
}

func (o ReportConfigDeliveryInfoResponseOutput) ToReportConfigDeliveryInfoResponsePtrOutput() ReportConfigDeliveryInfoResponsePtrOutput {
	return o.ToReportConfigDeliveryInfoResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigDeliveryInfoResponseOutput) ToReportConfigDeliveryInfoResponsePtrOutputWithContext(ctx context.Context) ReportConfigDeliveryInfoResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDeliveryInfoResponse) *ReportConfigDeliveryInfoResponse {
		return &v
	}).(ReportConfigDeliveryInfoResponsePtrOutput)
}

// Has destination for the report being delivered.
func (o ReportConfigDeliveryInfoResponseOutput) Destination() ReportConfigDeliveryDestinationResponseOutput {
	return o.ApplyT(func(v ReportConfigDeliveryInfoResponse) ReportConfigDeliveryDestinationResponse { return v.Destination }).(ReportConfigDeliveryDestinationResponseOutput)
}

type ReportConfigDeliveryInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigDeliveryInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDeliveryInfoResponse)(nil)).Elem()
}

func (o ReportConfigDeliveryInfoResponsePtrOutput) ToReportConfigDeliveryInfoResponsePtrOutput() ReportConfigDeliveryInfoResponsePtrOutput {
	return o
}

func (o ReportConfigDeliveryInfoResponsePtrOutput) ToReportConfigDeliveryInfoResponsePtrOutputWithContext(ctx context.Context) ReportConfigDeliveryInfoResponsePtrOutput {
	return o
}

func (o ReportConfigDeliveryInfoResponsePtrOutput) Elem() ReportConfigDeliveryInfoResponseOutput {
	return o.ApplyT(func(v *ReportConfigDeliveryInfoResponse) ReportConfigDeliveryInfoResponse { return *v }).(ReportConfigDeliveryInfoResponseOutput)
}

// Has destination for the report being delivered.
func (o ReportConfigDeliveryInfoResponsePtrOutput) Destination() ReportConfigDeliveryDestinationResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigDeliveryInfoResponse) *ReportConfigDeliveryDestinationResponse {
		if v == nil {
			return nil
		}
		return &v.Destination
	}).(ReportConfigDeliveryDestinationResponsePtrOutput)
}

// The filter expression to be used in the report.
type ReportConfigFilter struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []ReportConfigFilter `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension *ReportConfigComparisonExpression `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not *ReportConfigFilter `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or []ReportConfigFilter `pulumi:"or"`
	// Has comparison expression for a tag
	Tag *ReportConfigComparisonExpression `pulumi:"tag"`
}

// ReportConfigFilterInput is an input type that accepts ReportConfigFilterArgs and ReportConfigFilterOutput values.
// You can construct a concrete instance of `ReportConfigFilterInput` via:
//
//          ReportConfigFilterArgs{...}
type ReportConfigFilterInput interface {
	pulumi.Input

	ToReportConfigFilterOutput() ReportConfigFilterOutput
	ToReportConfigFilterOutputWithContext(context.Context) ReportConfigFilterOutput
}

// The filter expression to be used in the report.
type ReportConfigFilterArgs struct {
	// The logical "AND" expression. Must have at least 2 items.
	And ReportConfigFilterArrayInput `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension ReportConfigComparisonExpressionPtrInput `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not ReportConfigFilterPtrInput `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or ReportConfigFilterArrayInput `pulumi:"or"`
	// Has comparison expression for a tag
	Tag ReportConfigComparisonExpressionPtrInput `pulumi:"tag"`
}

func (ReportConfigFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigFilter)(nil)).Elem()
}

func (i ReportConfigFilterArgs) ToReportConfigFilterOutput() ReportConfigFilterOutput {
	return i.ToReportConfigFilterOutputWithContext(context.Background())
}

func (i ReportConfigFilterArgs) ToReportConfigFilterOutputWithContext(ctx context.Context) ReportConfigFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigFilterOutput)
}

func (i ReportConfigFilterArgs) ToReportConfigFilterPtrOutput() ReportConfigFilterPtrOutput {
	return i.ToReportConfigFilterPtrOutputWithContext(context.Background())
}

func (i ReportConfigFilterArgs) ToReportConfigFilterPtrOutputWithContext(ctx context.Context) ReportConfigFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigFilterOutput).ToReportConfigFilterPtrOutputWithContext(ctx)
}

// ReportConfigFilterPtrInput is an input type that accepts ReportConfigFilterArgs, ReportConfigFilterPtr and ReportConfigFilterPtrOutput values.
// You can construct a concrete instance of `ReportConfigFilterPtrInput` via:
//
//          ReportConfigFilterArgs{...}
//
//  or:
//
//          nil
type ReportConfigFilterPtrInput interface {
	pulumi.Input

	ToReportConfigFilterPtrOutput() ReportConfigFilterPtrOutput
	ToReportConfigFilterPtrOutputWithContext(context.Context) ReportConfigFilterPtrOutput
}

type reportConfigFilterPtrType ReportConfigFilterArgs

func ReportConfigFilterPtr(v *ReportConfigFilterArgs) ReportConfigFilterPtrInput {
	return (*reportConfigFilterPtrType)(v)
}

func (*reportConfigFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigFilter)(nil)).Elem()
}

func (i *reportConfigFilterPtrType) ToReportConfigFilterPtrOutput() ReportConfigFilterPtrOutput {
	return i.ToReportConfigFilterPtrOutputWithContext(context.Background())
}

func (i *reportConfigFilterPtrType) ToReportConfigFilterPtrOutputWithContext(ctx context.Context) ReportConfigFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigFilterPtrOutput)
}

// ReportConfigFilterArrayInput is an input type that accepts ReportConfigFilterArray and ReportConfigFilterArrayOutput values.
// You can construct a concrete instance of `ReportConfigFilterArrayInput` via:
//
//          ReportConfigFilterArray{ ReportConfigFilterArgs{...} }
type ReportConfigFilterArrayInput interface {
	pulumi.Input

	ToReportConfigFilterArrayOutput() ReportConfigFilterArrayOutput
	ToReportConfigFilterArrayOutputWithContext(context.Context) ReportConfigFilterArrayOutput
}

type ReportConfigFilterArray []ReportConfigFilterInput

func (ReportConfigFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigFilter)(nil)).Elem()
}

func (i ReportConfigFilterArray) ToReportConfigFilterArrayOutput() ReportConfigFilterArrayOutput {
	return i.ToReportConfigFilterArrayOutputWithContext(context.Background())
}

func (i ReportConfigFilterArray) ToReportConfigFilterArrayOutputWithContext(ctx context.Context) ReportConfigFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigFilterArrayOutput)
}

// The filter expression to be used in the report.
type ReportConfigFilterOutput struct{ *pulumi.OutputState }

func (ReportConfigFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigFilter)(nil)).Elem()
}

func (o ReportConfigFilterOutput) ToReportConfigFilterOutput() ReportConfigFilterOutput {
	return o
}

func (o ReportConfigFilterOutput) ToReportConfigFilterOutputWithContext(ctx context.Context) ReportConfigFilterOutput {
	return o
}

func (o ReportConfigFilterOutput) ToReportConfigFilterPtrOutput() ReportConfigFilterPtrOutput {
	return o.ToReportConfigFilterPtrOutputWithContext(context.Background())
}

func (o ReportConfigFilterOutput) ToReportConfigFilterPtrOutputWithContext(ctx context.Context) ReportConfigFilterPtrOutput {
	return o.ApplyT(func(v ReportConfigFilter) *ReportConfigFilter {
		return &v
	}).(ReportConfigFilterPtrOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o ReportConfigFilterOutput) And() ReportConfigFilterArrayOutput {
	return o.ApplyT(func(v ReportConfigFilter) []ReportConfigFilter { return v.And }).(ReportConfigFilterArrayOutput)
}

// Has comparison expression for a dimension
func (o ReportConfigFilterOutput) Dimension() ReportConfigComparisonExpressionPtrOutput {
	return o.ApplyT(func(v ReportConfigFilter) *ReportConfigComparisonExpression { return v.Dimension }).(ReportConfigComparisonExpressionPtrOutput)
}

// The logical "NOT" expression.
func (o ReportConfigFilterOutput) Not() ReportConfigFilterPtrOutput {
	return o.ApplyT(func(v ReportConfigFilter) *ReportConfigFilter { return v.Not }).(ReportConfigFilterPtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o ReportConfigFilterOutput) Or() ReportConfigFilterArrayOutput {
	return o.ApplyT(func(v ReportConfigFilter) []ReportConfigFilter { return v.Or }).(ReportConfigFilterArrayOutput)
}

// Has comparison expression for a tag
func (o ReportConfigFilterOutput) Tag() ReportConfigComparisonExpressionPtrOutput {
	return o.ApplyT(func(v ReportConfigFilter) *ReportConfigComparisonExpression { return v.Tag }).(ReportConfigComparisonExpressionPtrOutput)
}

type ReportConfigFilterPtrOutput struct{ *pulumi.OutputState }

func (ReportConfigFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigFilter)(nil)).Elem()
}

func (o ReportConfigFilterPtrOutput) ToReportConfigFilterPtrOutput() ReportConfigFilterPtrOutput {
	return o
}

func (o ReportConfigFilterPtrOutput) ToReportConfigFilterPtrOutputWithContext(ctx context.Context) ReportConfigFilterPtrOutput {
	return o
}

func (o ReportConfigFilterPtrOutput) Elem() ReportConfigFilterOutput {
	return o.ApplyT(func(v *ReportConfigFilter) ReportConfigFilter { return *v }).(ReportConfigFilterOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o ReportConfigFilterPtrOutput) And() ReportConfigFilterArrayOutput {
	return o.ApplyT(func(v *ReportConfigFilter) []ReportConfigFilter {
		if v == nil {
			return nil
		}
		return v.And
	}).(ReportConfigFilterArrayOutput)
}

// Has comparison expression for a dimension
func (o ReportConfigFilterPtrOutput) Dimension() ReportConfigComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *ReportConfigFilter) *ReportConfigComparisonExpression {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(ReportConfigComparisonExpressionPtrOutput)
}

// The logical "NOT" expression.
func (o ReportConfigFilterPtrOutput) Not() ReportConfigFilterPtrOutput {
	return o.ApplyT(func(v *ReportConfigFilter) *ReportConfigFilter {
		if v == nil {
			return nil
		}
		return v.Not
	}).(ReportConfigFilterPtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o ReportConfigFilterPtrOutput) Or() ReportConfigFilterArrayOutput {
	return o.ApplyT(func(v *ReportConfigFilter) []ReportConfigFilter {
		if v == nil {
			return nil
		}
		return v.Or
	}).(ReportConfigFilterArrayOutput)
}

// Has comparison expression for a tag
func (o ReportConfigFilterPtrOutput) Tag() ReportConfigComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *ReportConfigFilter) *ReportConfigComparisonExpression {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(ReportConfigComparisonExpressionPtrOutput)
}

type ReportConfigFilterArrayOutput struct{ *pulumi.OutputState }

func (ReportConfigFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigFilter)(nil)).Elem()
}

func (o ReportConfigFilterArrayOutput) ToReportConfigFilterArrayOutput() ReportConfigFilterArrayOutput {
	return o
}

func (o ReportConfigFilterArrayOutput) ToReportConfigFilterArrayOutputWithContext(ctx context.Context) ReportConfigFilterArrayOutput {
	return o
}

func (o ReportConfigFilterArrayOutput) Index(i pulumi.IntInput) ReportConfigFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportConfigFilter {
		return vs[0].([]ReportConfigFilter)[vs[1].(int)]
	}).(ReportConfigFilterOutput)
}

// The filter expression to be used in the report.
type ReportConfigFilterResponse struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []ReportConfigFilterResponse `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension *ReportConfigComparisonExpressionResponse `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not *ReportConfigFilterResponse `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or []ReportConfigFilterResponse `pulumi:"or"`
	// Has comparison expression for a tag
	Tag *ReportConfigComparisonExpressionResponse `pulumi:"tag"`
}

// ReportConfigFilterResponseInput is an input type that accepts ReportConfigFilterResponseArgs and ReportConfigFilterResponseOutput values.
// You can construct a concrete instance of `ReportConfigFilterResponseInput` via:
//
//          ReportConfigFilterResponseArgs{...}
type ReportConfigFilterResponseInput interface {
	pulumi.Input

	ToReportConfigFilterResponseOutput() ReportConfigFilterResponseOutput
	ToReportConfigFilterResponseOutputWithContext(context.Context) ReportConfigFilterResponseOutput
}

// The filter expression to be used in the report.
type ReportConfigFilterResponseArgs struct {
	// The logical "AND" expression. Must have at least 2 items.
	And ReportConfigFilterResponseArrayInput `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension ReportConfigComparisonExpressionResponsePtrInput `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not ReportConfigFilterResponsePtrInput `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or ReportConfigFilterResponseArrayInput `pulumi:"or"`
	// Has comparison expression for a tag
	Tag ReportConfigComparisonExpressionResponsePtrInput `pulumi:"tag"`
}

func (ReportConfigFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigFilterResponse)(nil)).Elem()
}

func (i ReportConfigFilterResponseArgs) ToReportConfigFilterResponseOutput() ReportConfigFilterResponseOutput {
	return i.ToReportConfigFilterResponseOutputWithContext(context.Background())
}

func (i ReportConfigFilterResponseArgs) ToReportConfigFilterResponseOutputWithContext(ctx context.Context) ReportConfigFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigFilterResponseOutput)
}

func (i ReportConfigFilterResponseArgs) ToReportConfigFilterResponsePtrOutput() ReportConfigFilterResponsePtrOutput {
	return i.ToReportConfigFilterResponsePtrOutputWithContext(context.Background())
}

func (i ReportConfigFilterResponseArgs) ToReportConfigFilterResponsePtrOutputWithContext(ctx context.Context) ReportConfigFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigFilterResponseOutput).ToReportConfigFilterResponsePtrOutputWithContext(ctx)
}

// ReportConfigFilterResponsePtrInput is an input type that accepts ReportConfigFilterResponseArgs, ReportConfigFilterResponsePtr and ReportConfigFilterResponsePtrOutput values.
// You can construct a concrete instance of `ReportConfigFilterResponsePtrInput` via:
//
//          ReportConfigFilterResponseArgs{...}
//
//  or:
//
//          nil
type ReportConfigFilterResponsePtrInput interface {
	pulumi.Input

	ToReportConfigFilterResponsePtrOutput() ReportConfigFilterResponsePtrOutput
	ToReportConfigFilterResponsePtrOutputWithContext(context.Context) ReportConfigFilterResponsePtrOutput
}

type reportConfigFilterResponsePtrType ReportConfigFilterResponseArgs

func ReportConfigFilterResponsePtr(v *ReportConfigFilterResponseArgs) ReportConfigFilterResponsePtrInput {
	return (*reportConfigFilterResponsePtrType)(v)
}

func (*reportConfigFilterResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigFilterResponse)(nil)).Elem()
}

func (i *reportConfigFilterResponsePtrType) ToReportConfigFilterResponsePtrOutput() ReportConfigFilterResponsePtrOutput {
	return i.ToReportConfigFilterResponsePtrOutputWithContext(context.Background())
}

func (i *reportConfigFilterResponsePtrType) ToReportConfigFilterResponsePtrOutputWithContext(ctx context.Context) ReportConfigFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigFilterResponsePtrOutput)
}

// ReportConfigFilterResponseArrayInput is an input type that accepts ReportConfigFilterResponseArray and ReportConfigFilterResponseArrayOutput values.
// You can construct a concrete instance of `ReportConfigFilterResponseArrayInput` via:
//
//          ReportConfigFilterResponseArray{ ReportConfigFilterResponseArgs{...} }
type ReportConfigFilterResponseArrayInput interface {
	pulumi.Input

	ToReportConfigFilterResponseArrayOutput() ReportConfigFilterResponseArrayOutput
	ToReportConfigFilterResponseArrayOutputWithContext(context.Context) ReportConfigFilterResponseArrayOutput
}

type ReportConfigFilterResponseArray []ReportConfigFilterResponseInput

func (ReportConfigFilterResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigFilterResponse)(nil)).Elem()
}

func (i ReportConfigFilterResponseArray) ToReportConfigFilterResponseArrayOutput() ReportConfigFilterResponseArrayOutput {
	return i.ToReportConfigFilterResponseArrayOutputWithContext(context.Background())
}

func (i ReportConfigFilterResponseArray) ToReportConfigFilterResponseArrayOutputWithContext(ctx context.Context) ReportConfigFilterResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigFilterResponseArrayOutput)
}

// The filter expression to be used in the report.
type ReportConfigFilterResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigFilterResponse)(nil)).Elem()
}

func (o ReportConfigFilterResponseOutput) ToReportConfigFilterResponseOutput() ReportConfigFilterResponseOutput {
	return o
}

func (o ReportConfigFilterResponseOutput) ToReportConfigFilterResponseOutputWithContext(ctx context.Context) ReportConfigFilterResponseOutput {
	return o
}

func (o ReportConfigFilterResponseOutput) ToReportConfigFilterResponsePtrOutput() ReportConfigFilterResponsePtrOutput {
	return o.ToReportConfigFilterResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigFilterResponseOutput) ToReportConfigFilterResponsePtrOutputWithContext(ctx context.Context) ReportConfigFilterResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigFilterResponse) *ReportConfigFilterResponse {
		return &v
	}).(ReportConfigFilterResponsePtrOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o ReportConfigFilterResponseOutput) And() ReportConfigFilterResponseArrayOutput {
	return o.ApplyT(func(v ReportConfigFilterResponse) []ReportConfigFilterResponse { return v.And }).(ReportConfigFilterResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o ReportConfigFilterResponseOutput) Dimension() ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigFilterResponse) *ReportConfigComparisonExpressionResponse { return v.Dimension }).(ReportConfigComparisonExpressionResponsePtrOutput)
}

// The logical "NOT" expression.
func (o ReportConfigFilterResponseOutput) Not() ReportConfigFilterResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigFilterResponse) *ReportConfigFilterResponse { return v.Not }).(ReportConfigFilterResponsePtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o ReportConfigFilterResponseOutput) Or() ReportConfigFilterResponseArrayOutput {
	return o.ApplyT(func(v ReportConfigFilterResponse) []ReportConfigFilterResponse { return v.Or }).(ReportConfigFilterResponseArrayOutput)
}

// Has comparison expression for a tag
func (o ReportConfigFilterResponseOutput) Tag() ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigFilterResponse) *ReportConfigComparisonExpressionResponse { return v.Tag }).(ReportConfigComparisonExpressionResponsePtrOutput)
}

type ReportConfigFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigFilterResponse)(nil)).Elem()
}

func (o ReportConfigFilterResponsePtrOutput) ToReportConfigFilterResponsePtrOutput() ReportConfigFilterResponsePtrOutput {
	return o
}

func (o ReportConfigFilterResponsePtrOutput) ToReportConfigFilterResponsePtrOutputWithContext(ctx context.Context) ReportConfigFilterResponsePtrOutput {
	return o
}

func (o ReportConfigFilterResponsePtrOutput) Elem() ReportConfigFilterResponseOutput {
	return o.ApplyT(func(v *ReportConfigFilterResponse) ReportConfigFilterResponse { return *v }).(ReportConfigFilterResponseOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o ReportConfigFilterResponsePtrOutput) And() ReportConfigFilterResponseArrayOutput {
	return o.ApplyT(func(v *ReportConfigFilterResponse) []ReportConfigFilterResponse {
		if v == nil {
			return nil
		}
		return v.And
	}).(ReportConfigFilterResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o ReportConfigFilterResponsePtrOutput) Dimension() ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigFilterResponse) *ReportConfigComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(ReportConfigComparisonExpressionResponsePtrOutput)
}

// The logical "NOT" expression.
func (o ReportConfigFilterResponsePtrOutput) Not() ReportConfigFilterResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigFilterResponse) *ReportConfigFilterResponse {
		if v == nil {
			return nil
		}
		return v.Not
	}).(ReportConfigFilterResponsePtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o ReportConfigFilterResponsePtrOutput) Or() ReportConfigFilterResponseArrayOutput {
	return o.ApplyT(func(v *ReportConfigFilterResponse) []ReportConfigFilterResponse {
		if v == nil {
			return nil
		}
		return v.Or
	}).(ReportConfigFilterResponseArrayOutput)
}

// Has comparison expression for a tag
func (o ReportConfigFilterResponsePtrOutput) Tag() ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigFilterResponse) *ReportConfigComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(ReportConfigComparisonExpressionResponsePtrOutput)
}

type ReportConfigFilterResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportConfigFilterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigFilterResponse)(nil)).Elem()
}

func (o ReportConfigFilterResponseArrayOutput) ToReportConfigFilterResponseArrayOutput() ReportConfigFilterResponseArrayOutput {
	return o
}

func (o ReportConfigFilterResponseArrayOutput) ToReportConfigFilterResponseArrayOutputWithContext(ctx context.Context) ReportConfigFilterResponseArrayOutput {
	return o
}

func (o ReportConfigFilterResponseArrayOutput) Index(i pulumi.IntInput) ReportConfigFilterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportConfigFilterResponse {
		return vs[0].([]ReportConfigFilterResponse)[vs[1].(int)]
	}).(ReportConfigFilterResponseOutput)
}

// The group by expression to be used in the report.
type ReportConfigGrouping struct {
	// Has type of the column to group.
	ColumnType string `pulumi:"columnType"`
	// The name of the column to group.
	Name string `pulumi:"name"`
}

// ReportConfigGroupingInput is an input type that accepts ReportConfigGroupingArgs and ReportConfigGroupingOutput values.
// You can construct a concrete instance of `ReportConfigGroupingInput` via:
//
//          ReportConfigGroupingArgs{...}
type ReportConfigGroupingInput interface {
	pulumi.Input

	ToReportConfigGroupingOutput() ReportConfigGroupingOutput
	ToReportConfigGroupingOutputWithContext(context.Context) ReportConfigGroupingOutput
}

// The group by expression to be used in the report.
type ReportConfigGroupingArgs struct {
	// Has type of the column to group.
	ColumnType pulumi.StringInput `pulumi:"columnType"`
	// The name of the column to group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ReportConfigGroupingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigGrouping)(nil)).Elem()
}

func (i ReportConfigGroupingArgs) ToReportConfigGroupingOutput() ReportConfigGroupingOutput {
	return i.ToReportConfigGroupingOutputWithContext(context.Background())
}

func (i ReportConfigGroupingArgs) ToReportConfigGroupingOutputWithContext(ctx context.Context) ReportConfigGroupingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigGroupingOutput)
}

// ReportConfigGroupingArrayInput is an input type that accepts ReportConfigGroupingArray and ReportConfigGroupingArrayOutput values.
// You can construct a concrete instance of `ReportConfigGroupingArrayInput` via:
//
//          ReportConfigGroupingArray{ ReportConfigGroupingArgs{...} }
type ReportConfigGroupingArrayInput interface {
	pulumi.Input

	ToReportConfigGroupingArrayOutput() ReportConfigGroupingArrayOutput
	ToReportConfigGroupingArrayOutputWithContext(context.Context) ReportConfigGroupingArrayOutput
}

type ReportConfigGroupingArray []ReportConfigGroupingInput

func (ReportConfigGroupingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigGrouping)(nil)).Elem()
}

func (i ReportConfigGroupingArray) ToReportConfigGroupingArrayOutput() ReportConfigGroupingArrayOutput {
	return i.ToReportConfigGroupingArrayOutputWithContext(context.Background())
}

func (i ReportConfigGroupingArray) ToReportConfigGroupingArrayOutputWithContext(ctx context.Context) ReportConfigGroupingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigGroupingArrayOutput)
}

// The group by expression to be used in the report.
type ReportConfigGroupingOutput struct{ *pulumi.OutputState }

func (ReportConfigGroupingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigGrouping)(nil)).Elem()
}

func (o ReportConfigGroupingOutput) ToReportConfigGroupingOutput() ReportConfigGroupingOutput {
	return o
}

func (o ReportConfigGroupingOutput) ToReportConfigGroupingOutputWithContext(ctx context.Context) ReportConfigGroupingOutput {
	return o
}

// Has type of the column to group.
func (o ReportConfigGroupingOutput) ColumnType() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigGrouping) string { return v.ColumnType }).(pulumi.StringOutput)
}

// The name of the column to group.
func (o ReportConfigGroupingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigGrouping) string { return v.Name }).(pulumi.StringOutput)
}

type ReportConfigGroupingArrayOutput struct{ *pulumi.OutputState }

func (ReportConfigGroupingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigGrouping)(nil)).Elem()
}

func (o ReportConfigGroupingArrayOutput) ToReportConfigGroupingArrayOutput() ReportConfigGroupingArrayOutput {
	return o
}

func (o ReportConfigGroupingArrayOutput) ToReportConfigGroupingArrayOutputWithContext(ctx context.Context) ReportConfigGroupingArrayOutput {
	return o
}

func (o ReportConfigGroupingArrayOutput) Index(i pulumi.IntInput) ReportConfigGroupingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportConfigGrouping {
		return vs[0].([]ReportConfigGrouping)[vs[1].(int)]
	}).(ReportConfigGroupingOutput)
}

// The group by expression to be used in the report.
type ReportConfigGroupingResponse struct {
	// Has type of the column to group.
	ColumnType string `pulumi:"columnType"`
	// The name of the column to group.
	Name string `pulumi:"name"`
}

// ReportConfigGroupingResponseInput is an input type that accepts ReportConfigGroupingResponseArgs and ReportConfigGroupingResponseOutput values.
// You can construct a concrete instance of `ReportConfigGroupingResponseInput` via:
//
//          ReportConfigGroupingResponseArgs{...}
type ReportConfigGroupingResponseInput interface {
	pulumi.Input

	ToReportConfigGroupingResponseOutput() ReportConfigGroupingResponseOutput
	ToReportConfigGroupingResponseOutputWithContext(context.Context) ReportConfigGroupingResponseOutput
}

// The group by expression to be used in the report.
type ReportConfigGroupingResponseArgs struct {
	// Has type of the column to group.
	ColumnType pulumi.StringInput `pulumi:"columnType"`
	// The name of the column to group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ReportConfigGroupingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigGroupingResponse)(nil)).Elem()
}

func (i ReportConfigGroupingResponseArgs) ToReportConfigGroupingResponseOutput() ReportConfigGroupingResponseOutput {
	return i.ToReportConfigGroupingResponseOutputWithContext(context.Background())
}

func (i ReportConfigGroupingResponseArgs) ToReportConfigGroupingResponseOutputWithContext(ctx context.Context) ReportConfigGroupingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigGroupingResponseOutput)
}

// ReportConfigGroupingResponseArrayInput is an input type that accepts ReportConfigGroupingResponseArray and ReportConfigGroupingResponseArrayOutput values.
// You can construct a concrete instance of `ReportConfigGroupingResponseArrayInput` via:
//
//          ReportConfigGroupingResponseArray{ ReportConfigGroupingResponseArgs{...} }
type ReportConfigGroupingResponseArrayInput interface {
	pulumi.Input

	ToReportConfigGroupingResponseArrayOutput() ReportConfigGroupingResponseArrayOutput
	ToReportConfigGroupingResponseArrayOutputWithContext(context.Context) ReportConfigGroupingResponseArrayOutput
}

type ReportConfigGroupingResponseArray []ReportConfigGroupingResponseInput

func (ReportConfigGroupingResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigGroupingResponse)(nil)).Elem()
}

func (i ReportConfigGroupingResponseArray) ToReportConfigGroupingResponseArrayOutput() ReportConfigGroupingResponseArrayOutput {
	return i.ToReportConfigGroupingResponseArrayOutputWithContext(context.Background())
}

func (i ReportConfigGroupingResponseArray) ToReportConfigGroupingResponseArrayOutputWithContext(ctx context.Context) ReportConfigGroupingResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigGroupingResponseArrayOutput)
}

// The group by expression to be used in the report.
type ReportConfigGroupingResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigGroupingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigGroupingResponse)(nil)).Elem()
}

func (o ReportConfigGroupingResponseOutput) ToReportConfigGroupingResponseOutput() ReportConfigGroupingResponseOutput {
	return o
}

func (o ReportConfigGroupingResponseOutput) ToReportConfigGroupingResponseOutputWithContext(ctx context.Context) ReportConfigGroupingResponseOutput {
	return o
}

// Has type of the column to group.
func (o ReportConfigGroupingResponseOutput) ColumnType() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigGroupingResponse) string { return v.ColumnType }).(pulumi.StringOutput)
}

// The name of the column to group.
func (o ReportConfigGroupingResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigGroupingResponse) string { return v.Name }).(pulumi.StringOutput)
}

type ReportConfigGroupingResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportConfigGroupingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigGroupingResponse)(nil)).Elem()
}

func (o ReportConfigGroupingResponseArrayOutput) ToReportConfigGroupingResponseArrayOutput() ReportConfigGroupingResponseArrayOutput {
	return o
}

func (o ReportConfigGroupingResponseArrayOutput) ToReportConfigGroupingResponseArrayOutputWithContext(ctx context.Context) ReportConfigGroupingResponseArrayOutput {
	return o
}

func (o ReportConfigGroupingResponseArrayOutput) Index(i pulumi.IntInput) ReportConfigGroupingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportConfigGroupingResponse {
		return vs[0].([]ReportConfigGroupingResponse)[vs[1].(int)]
	}).(ReportConfigGroupingResponseOutput)
}

// The start and end date for recurrence schedule.
type ReportConfigRecurrencePeriod struct {
	// The start date of recurrence.
	From string `pulumi:"from"`
	// The end date of recurrence. If not provided, we default this to 10 years from the start date.
	To *string `pulumi:"to"`
}

// ReportConfigRecurrencePeriodInput is an input type that accepts ReportConfigRecurrencePeriodArgs and ReportConfigRecurrencePeriodOutput values.
// You can construct a concrete instance of `ReportConfigRecurrencePeriodInput` via:
//
//          ReportConfigRecurrencePeriodArgs{...}
type ReportConfigRecurrencePeriodInput interface {
	pulumi.Input

	ToReportConfigRecurrencePeriodOutput() ReportConfigRecurrencePeriodOutput
	ToReportConfigRecurrencePeriodOutputWithContext(context.Context) ReportConfigRecurrencePeriodOutput
}

// The start and end date for recurrence schedule.
type ReportConfigRecurrencePeriodArgs struct {
	// The start date of recurrence.
	From pulumi.StringInput `pulumi:"from"`
	// The end date of recurrence. If not provided, we default this to 10 years from the start date.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (ReportConfigRecurrencePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigRecurrencePeriod)(nil)).Elem()
}

func (i ReportConfigRecurrencePeriodArgs) ToReportConfigRecurrencePeriodOutput() ReportConfigRecurrencePeriodOutput {
	return i.ToReportConfigRecurrencePeriodOutputWithContext(context.Background())
}

func (i ReportConfigRecurrencePeriodArgs) ToReportConfigRecurrencePeriodOutputWithContext(ctx context.Context) ReportConfigRecurrencePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigRecurrencePeriodOutput)
}

func (i ReportConfigRecurrencePeriodArgs) ToReportConfigRecurrencePeriodPtrOutput() ReportConfigRecurrencePeriodPtrOutput {
	return i.ToReportConfigRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (i ReportConfigRecurrencePeriodArgs) ToReportConfigRecurrencePeriodPtrOutputWithContext(ctx context.Context) ReportConfigRecurrencePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigRecurrencePeriodOutput).ToReportConfigRecurrencePeriodPtrOutputWithContext(ctx)
}

// ReportConfigRecurrencePeriodPtrInput is an input type that accepts ReportConfigRecurrencePeriodArgs, ReportConfigRecurrencePeriodPtr and ReportConfigRecurrencePeriodPtrOutput values.
// You can construct a concrete instance of `ReportConfigRecurrencePeriodPtrInput` via:
//
//          ReportConfigRecurrencePeriodArgs{...}
//
//  or:
//
//          nil
type ReportConfigRecurrencePeriodPtrInput interface {
	pulumi.Input

	ToReportConfigRecurrencePeriodPtrOutput() ReportConfigRecurrencePeriodPtrOutput
	ToReportConfigRecurrencePeriodPtrOutputWithContext(context.Context) ReportConfigRecurrencePeriodPtrOutput
}

type reportConfigRecurrencePeriodPtrType ReportConfigRecurrencePeriodArgs

func ReportConfigRecurrencePeriodPtr(v *ReportConfigRecurrencePeriodArgs) ReportConfigRecurrencePeriodPtrInput {
	return (*reportConfigRecurrencePeriodPtrType)(v)
}

func (*reportConfigRecurrencePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigRecurrencePeriod)(nil)).Elem()
}

func (i *reportConfigRecurrencePeriodPtrType) ToReportConfigRecurrencePeriodPtrOutput() ReportConfigRecurrencePeriodPtrOutput {
	return i.ToReportConfigRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (i *reportConfigRecurrencePeriodPtrType) ToReportConfigRecurrencePeriodPtrOutputWithContext(ctx context.Context) ReportConfigRecurrencePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigRecurrencePeriodPtrOutput)
}

// The start and end date for recurrence schedule.
type ReportConfigRecurrencePeriodOutput struct{ *pulumi.OutputState }

func (ReportConfigRecurrencePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigRecurrencePeriod)(nil)).Elem()
}

func (o ReportConfigRecurrencePeriodOutput) ToReportConfigRecurrencePeriodOutput() ReportConfigRecurrencePeriodOutput {
	return o
}

func (o ReportConfigRecurrencePeriodOutput) ToReportConfigRecurrencePeriodOutputWithContext(ctx context.Context) ReportConfigRecurrencePeriodOutput {
	return o
}

func (o ReportConfigRecurrencePeriodOutput) ToReportConfigRecurrencePeriodPtrOutput() ReportConfigRecurrencePeriodPtrOutput {
	return o.ToReportConfigRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (o ReportConfigRecurrencePeriodOutput) ToReportConfigRecurrencePeriodPtrOutputWithContext(ctx context.Context) ReportConfigRecurrencePeriodPtrOutput {
	return o.ApplyT(func(v ReportConfigRecurrencePeriod) *ReportConfigRecurrencePeriod {
		return &v
	}).(ReportConfigRecurrencePeriodPtrOutput)
}

// The start date of recurrence.
func (o ReportConfigRecurrencePeriodOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigRecurrencePeriod) string { return v.From }).(pulumi.StringOutput)
}

// The end date of recurrence. If not provided, we default this to 10 years from the start date.
func (o ReportConfigRecurrencePeriodOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportConfigRecurrencePeriod) *string { return v.To }).(pulumi.StringPtrOutput)
}

type ReportConfigRecurrencePeriodPtrOutput struct{ *pulumi.OutputState }

func (ReportConfigRecurrencePeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigRecurrencePeriod)(nil)).Elem()
}

func (o ReportConfigRecurrencePeriodPtrOutput) ToReportConfigRecurrencePeriodPtrOutput() ReportConfigRecurrencePeriodPtrOutput {
	return o
}

func (o ReportConfigRecurrencePeriodPtrOutput) ToReportConfigRecurrencePeriodPtrOutputWithContext(ctx context.Context) ReportConfigRecurrencePeriodPtrOutput {
	return o
}

func (o ReportConfigRecurrencePeriodPtrOutput) Elem() ReportConfigRecurrencePeriodOutput {
	return o.ApplyT(func(v *ReportConfigRecurrencePeriod) ReportConfigRecurrencePeriod { return *v }).(ReportConfigRecurrencePeriodOutput)
}

// The start date of recurrence.
func (o ReportConfigRecurrencePeriodPtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigRecurrencePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date of recurrence. If not provided, we default this to 10 years from the start date.
func (o ReportConfigRecurrencePeriodPtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigRecurrencePeriod) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

// The start and end date for recurrence schedule.
type ReportConfigRecurrencePeriodResponse struct {
	// The start date of recurrence.
	From string `pulumi:"from"`
	// The end date of recurrence. If not provided, we default this to 10 years from the start date.
	To *string `pulumi:"to"`
}

// ReportConfigRecurrencePeriodResponseInput is an input type that accepts ReportConfigRecurrencePeriodResponseArgs and ReportConfigRecurrencePeriodResponseOutput values.
// You can construct a concrete instance of `ReportConfigRecurrencePeriodResponseInput` via:
//
//          ReportConfigRecurrencePeriodResponseArgs{...}
type ReportConfigRecurrencePeriodResponseInput interface {
	pulumi.Input

	ToReportConfigRecurrencePeriodResponseOutput() ReportConfigRecurrencePeriodResponseOutput
	ToReportConfigRecurrencePeriodResponseOutputWithContext(context.Context) ReportConfigRecurrencePeriodResponseOutput
}

// The start and end date for recurrence schedule.
type ReportConfigRecurrencePeriodResponseArgs struct {
	// The start date of recurrence.
	From pulumi.StringInput `pulumi:"from"`
	// The end date of recurrence. If not provided, we default this to 10 years from the start date.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (ReportConfigRecurrencePeriodResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigRecurrencePeriodResponse)(nil)).Elem()
}

func (i ReportConfigRecurrencePeriodResponseArgs) ToReportConfigRecurrencePeriodResponseOutput() ReportConfigRecurrencePeriodResponseOutput {
	return i.ToReportConfigRecurrencePeriodResponseOutputWithContext(context.Background())
}

func (i ReportConfigRecurrencePeriodResponseArgs) ToReportConfigRecurrencePeriodResponseOutputWithContext(ctx context.Context) ReportConfigRecurrencePeriodResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigRecurrencePeriodResponseOutput)
}

func (i ReportConfigRecurrencePeriodResponseArgs) ToReportConfigRecurrencePeriodResponsePtrOutput() ReportConfigRecurrencePeriodResponsePtrOutput {
	return i.ToReportConfigRecurrencePeriodResponsePtrOutputWithContext(context.Background())
}

func (i ReportConfigRecurrencePeriodResponseArgs) ToReportConfigRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ReportConfigRecurrencePeriodResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigRecurrencePeriodResponseOutput).ToReportConfigRecurrencePeriodResponsePtrOutputWithContext(ctx)
}

// ReportConfigRecurrencePeriodResponsePtrInput is an input type that accepts ReportConfigRecurrencePeriodResponseArgs, ReportConfigRecurrencePeriodResponsePtr and ReportConfigRecurrencePeriodResponsePtrOutput values.
// You can construct a concrete instance of `ReportConfigRecurrencePeriodResponsePtrInput` via:
//
//          ReportConfigRecurrencePeriodResponseArgs{...}
//
//  or:
//
//          nil
type ReportConfigRecurrencePeriodResponsePtrInput interface {
	pulumi.Input

	ToReportConfigRecurrencePeriodResponsePtrOutput() ReportConfigRecurrencePeriodResponsePtrOutput
	ToReportConfigRecurrencePeriodResponsePtrOutputWithContext(context.Context) ReportConfigRecurrencePeriodResponsePtrOutput
}

type reportConfigRecurrencePeriodResponsePtrType ReportConfigRecurrencePeriodResponseArgs

func ReportConfigRecurrencePeriodResponsePtr(v *ReportConfigRecurrencePeriodResponseArgs) ReportConfigRecurrencePeriodResponsePtrInput {
	return (*reportConfigRecurrencePeriodResponsePtrType)(v)
}

func (*reportConfigRecurrencePeriodResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigRecurrencePeriodResponse)(nil)).Elem()
}

func (i *reportConfigRecurrencePeriodResponsePtrType) ToReportConfigRecurrencePeriodResponsePtrOutput() ReportConfigRecurrencePeriodResponsePtrOutput {
	return i.ToReportConfigRecurrencePeriodResponsePtrOutputWithContext(context.Background())
}

func (i *reportConfigRecurrencePeriodResponsePtrType) ToReportConfigRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ReportConfigRecurrencePeriodResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigRecurrencePeriodResponsePtrOutput)
}

// The start and end date for recurrence schedule.
type ReportConfigRecurrencePeriodResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigRecurrencePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigRecurrencePeriodResponse)(nil)).Elem()
}

func (o ReportConfigRecurrencePeriodResponseOutput) ToReportConfigRecurrencePeriodResponseOutput() ReportConfigRecurrencePeriodResponseOutput {
	return o
}

func (o ReportConfigRecurrencePeriodResponseOutput) ToReportConfigRecurrencePeriodResponseOutputWithContext(ctx context.Context) ReportConfigRecurrencePeriodResponseOutput {
	return o
}

func (o ReportConfigRecurrencePeriodResponseOutput) ToReportConfigRecurrencePeriodResponsePtrOutput() ReportConfigRecurrencePeriodResponsePtrOutput {
	return o.ToReportConfigRecurrencePeriodResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigRecurrencePeriodResponseOutput) ToReportConfigRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ReportConfigRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigRecurrencePeriodResponse) *ReportConfigRecurrencePeriodResponse {
		return &v
	}).(ReportConfigRecurrencePeriodResponsePtrOutput)
}

// The start date of recurrence.
func (o ReportConfigRecurrencePeriodResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigRecurrencePeriodResponse) string { return v.From }).(pulumi.StringOutput)
}

// The end date of recurrence. If not provided, we default this to 10 years from the start date.
func (o ReportConfigRecurrencePeriodResponseOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportConfigRecurrencePeriodResponse) *string { return v.To }).(pulumi.StringPtrOutput)
}

type ReportConfigRecurrencePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigRecurrencePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigRecurrencePeriodResponse)(nil)).Elem()
}

func (o ReportConfigRecurrencePeriodResponsePtrOutput) ToReportConfigRecurrencePeriodResponsePtrOutput() ReportConfigRecurrencePeriodResponsePtrOutput {
	return o
}

func (o ReportConfigRecurrencePeriodResponsePtrOutput) ToReportConfigRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ReportConfigRecurrencePeriodResponsePtrOutput {
	return o
}

func (o ReportConfigRecurrencePeriodResponsePtrOutput) Elem() ReportConfigRecurrencePeriodResponseOutput {
	return o.ApplyT(func(v *ReportConfigRecurrencePeriodResponse) ReportConfigRecurrencePeriodResponse { return *v }).(ReportConfigRecurrencePeriodResponseOutput)
}

// The start date of recurrence.
func (o ReportConfigRecurrencePeriodResponsePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigRecurrencePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date of recurrence. If not provided, we default this to 10 years from the start date.
func (o ReportConfigRecurrencePeriodResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigRecurrencePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

// The schedule associated with a report config.
type ReportConfigSchedule struct {
	// The schedule recurrence.
	Recurrence string `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod ReportConfigRecurrencePeriod `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
	Status *string `pulumi:"status"`
}

// ReportConfigScheduleInput is an input type that accepts ReportConfigScheduleArgs and ReportConfigScheduleOutput values.
// You can construct a concrete instance of `ReportConfigScheduleInput` via:
//
//          ReportConfigScheduleArgs{...}
type ReportConfigScheduleInput interface {
	pulumi.Input

	ToReportConfigScheduleOutput() ReportConfigScheduleOutput
	ToReportConfigScheduleOutputWithContext(context.Context) ReportConfigScheduleOutput
}

// The schedule associated with a report config.
type ReportConfigScheduleArgs struct {
	// The schedule recurrence.
	Recurrence pulumi.StringInput `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod ReportConfigRecurrencePeriodInput `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ReportConfigScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigSchedule)(nil)).Elem()
}

func (i ReportConfigScheduleArgs) ToReportConfigScheduleOutput() ReportConfigScheduleOutput {
	return i.ToReportConfigScheduleOutputWithContext(context.Background())
}

func (i ReportConfigScheduleArgs) ToReportConfigScheduleOutputWithContext(ctx context.Context) ReportConfigScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigScheduleOutput)
}

func (i ReportConfigScheduleArgs) ToReportConfigSchedulePtrOutput() ReportConfigSchedulePtrOutput {
	return i.ToReportConfigSchedulePtrOutputWithContext(context.Background())
}

func (i ReportConfigScheduleArgs) ToReportConfigSchedulePtrOutputWithContext(ctx context.Context) ReportConfigSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigScheduleOutput).ToReportConfigSchedulePtrOutputWithContext(ctx)
}

// ReportConfigSchedulePtrInput is an input type that accepts ReportConfigScheduleArgs, ReportConfigSchedulePtr and ReportConfigSchedulePtrOutput values.
// You can construct a concrete instance of `ReportConfigSchedulePtrInput` via:
//
//          ReportConfigScheduleArgs{...}
//
//  or:
//
//          nil
type ReportConfigSchedulePtrInput interface {
	pulumi.Input

	ToReportConfigSchedulePtrOutput() ReportConfigSchedulePtrOutput
	ToReportConfigSchedulePtrOutputWithContext(context.Context) ReportConfigSchedulePtrOutput
}

type reportConfigSchedulePtrType ReportConfigScheduleArgs

func ReportConfigSchedulePtr(v *ReportConfigScheduleArgs) ReportConfigSchedulePtrInput {
	return (*reportConfigSchedulePtrType)(v)
}

func (*reportConfigSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigSchedule)(nil)).Elem()
}

func (i *reportConfigSchedulePtrType) ToReportConfigSchedulePtrOutput() ReportConfigSchedulePtrOutput {
	return i.ToReportConfigSchedulePtrOutputWithContext(context.Background())
}

func (i *reportConfigSchedulePtrType) ToReportConfigSchedulePtrOutputWithContext(ctx context.Context) ReportConfigSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigSchedulePtrOutput)
}

// The schedule associated with a report config.
type ReportConfigScheduleOutput struct{ *pulumi.OutputState }

func (ReportConfigScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigSchedule)(nil)).Elem()
}

func (o ReportConfigScheduleOutput) ToReportConfigScheduleOutput() ReportConfigScheduleOutput {
	return o
}

func (o ReportConfigScheduleOutput) ToReportConfigScheduleOutputWithContext(ctx context.Context) ReportConfigScheduleOutput {
	return o
}

func (o ReportConfigScheduleOutput) ToReportConfigSchedulePtrOutput() ReportConfigSchedulePtrOutput {
	return o.ToReportConfigSchedulePtrOutputWithContext(context.Background())
}

func (o ReportConfigScheduleOutput) ToReportConfigSchedulePtrOutputWithContext(ctx context.Context) ReportConfigSchedulePtrOutput {
	return o.ApplyT(func(v ReportConfigSchedule) *ReportConfigSchedule {
		return &v
	}).(ReportConfigSchedulePtrOutput)
}

// The schedule recurrence.
func (o ReportConfigScheduleOutput) Recurrence() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigSchedule) string { return v.Recurrence }).(pulumi.StringOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ReportConfigScheduleOutput) RecurrencePeriod() ReportConfigRecurrencePeriodOutput {
	return o.ApplyT(func(v ReportConfigSchedule) ReportConfigRecurrencePeriod { return v.RecurrencePeriod }).(ReportConfigRecurrencePeriodOutput)
}

// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
func (o ReportConfigScheduleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportConfigSchedule) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ReportConfigSchedulePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigSchedule)(nil)).Elem()
}

func (o ReportConfigSchedulePtrOutput) ToReportConfigSchedulePtrOutput() ReportConfigSchedulePtrOutput {
	return o
}

func (o ReportConfigSchedulePtrOutput) ToReportConfigSchedulePtrOutputWithContext(ctx context.Context) ReportConfigSchedulePtrOutput {
	return o
}

func (o ReportConfigSchedulePtrOutput) Elem() ReportConfigScheduleOutput {
	return o.ApplyT(func(v *ReportConfigSchedule) ReportConfigSchedule { return *v }).(ReportConfigScheduleOutput)
}

// The schedule recurrence.
func (o ReportConfigSchedulePtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ReportConfigSchedulePtrOutput) RecurrencePeriod() ReportConfigRecurrencePeriodPtrOutput {
	return o.ApplyT(func(v *ReportConfigSchedule) *ReportConfigRecurrencePeriod {
		if v == nil {
			return nil
		}
		return &v.RecurrencePeriod
	}).(ReportConfigRecurrencePeriodPtrOutput)
}

// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
func (o ReportConfigSchedulePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigSchedule) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The schedule associated with a report config.
type ReportConfigScheduleResponse struct {
	// The schedule recurrence.
	Recurrence string `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod ReportConfigRecurrencePeriodResponse `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
	Status *string `pulumi:"status"`
}

// ReportConfigScheduleResponseInput is an input type that accepts ReportConfigScheduleResponseArgs and ReportConfigScheduleResponseOutput values.
// You can construct a concrete instance of `ReportConfigScheduleResponseInput` via:
//
//          ReportConfigScheduleResponseArgs{...}
type ReportConfigScheduleResponseInput interface {
	pulumi.Input

	ToReportConfigScheduleResponseOutput() ReportConfigScheduleResponseOutput
	ToReportConfigScheduleResponseOutputWithContext(context.Context) ReportConfigScheduleResponseOutput
}

// The schedule associated with a report config.
type ReportConfigScheduleResponseArgs struct {
	// The schedule recurrence.
	Recurrence pulumi.StringInput `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod ReportConfigRecurrencePeriodResponseInput `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ReportConfigScheduleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigScheduleResponse)(nil)).Elem()
}

func (i ReportConfigScheduleResponseArgs) ToReportConfigScheduleResponseOutput() ReportConfigScheduleResponseOutput {
	return i.ToReportConfigScheduleResponseOutputWithContext(context.Background())
}

func (i ReportConfigScheduleResponseArgs) ToReportConfigScheduleResponseOutputWithContext(ctx context.Context) ReportConfigScheduleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigScheduleResponseOutput)
}

func (i ReportConfigScheduleResponseArgs) ToReportConfigScheduleResponsePtrOutput() ReportConfigScheduleResponsePtrOutput {
	return i.ToReportConfigScheduleResponsePtrOutputWithContext(context.Background())
}

func (i ReportConfigScheduleResponseArgs) ToReportConfigScheduleResponsePtrOutputWithContext(ctx context.Context) ReportConfigScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigScheduleResponseOutput).ToReportConfigScheduleResponsePtrOutputWithContext(ctx)
}

// ReportConfigScheduleResponsePtrInput is an input type that accepts ReportConfigScheduleResponseArgs, ReportConfigScheduleResponsePtr and ReportConfigScheduleResponsePtrOutput values.
// You can construct a concrete instance of `ReportConfigScheduleResponsePtrInput` via:
//
//          ReportConfigScheduleResponseArgs{...}
//
//  or:
//
//          nil
type ReportConfigScheduleResponsePtrInput interface {
	pulumi.Input

	ToReportConfigScheduleResponsePtrOutput() ReportConfigScheduleResponsePtrOutput
	ToReportConfigScheduleResponsePtrOutputWithContext(context.Context) ReportConfigScheduleResponsePtrOutput
}

type reportConfigScheduleResponsePtrType ReportConfigScheduleResponseArgs

func ReportConfigScheduleResponsePtr(v *ReportConfigScheduleResponseArgs) ReportConfigScheduleResponsePtrInput {
	return (*reportConfigScheduleResponsePtrType)(v)
}

func (*reportConfigScheduleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigScheduleResponse)(nil)).Elem()
}

func (i *reportConfigScheduleResponsePtrType) ToReportConfigScheduleResponsePtrOutput() ReportConfigScheduleResponsePtrOutput {
	return i.ToReportConfigScheduleResponsePtrOutputWithContext(context.Background())
}

func (i *reportConfigScheduleResponsePtrType) ToReportConfigScheduleResponsePtrOutputWithContext(ctx context.Context) ReportConfigScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigScheduleResponsePtrOutput)
}

// The schedule associated with a report config.
type ReportConfigScheduleResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigScheduleResponse)(nil)).Elem()
}

func (o ReportConfigScheduleResponseOutput) ToReportConfigScheduleResponseOutput() ReportConfigScheduleResponseOutput {
	return o
}

func (o ReportConfigScheduleResponseOutput) ToReportConfigScheduleResponseOutputWithContext(ctx context.Context) ReportConfigScheduleResponseOutput {
	return o
}

func (o ReportConfigScheduleResponseOutput) ToReportConfigScheduleResponsePtrOutput() ReportConfigScheduleResponsePtrOutput {
	return o.ToReportConfigScheduleResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigScheduleResponseOutput) ToReportConfigScheduleResponsePtrOutputWithContext(ctx context.Context) ReportConfigScheduleResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigScheduleResponse) *ReportConfigScheduleResponse {
		return &v
	}).(ReportConfigScheduleResponsePtrOutput)
}

// The schedule recurrence.
func (o ReportConfigScheduleResponseOutput) Recurrence() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigScheduleResponse) string { return v.Recurrence }).(pulumi.StringOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ReportConfigScheduleResponseOutput) RecurrencePeriod() ReportConfigRecurrencePeriodResponseOutput {
	return o.ApplyT(func(v ReportConfigScheduleResponse) ReportConfigRecurrencePeriodResponse { return v.RecurrencePeriod }).(ReportConfigRecurrencePeriodResponseOutput)
}

// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
func (o ReportConfigScheduleResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportConfigScheduleResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ReportConfigScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigScheduleResponse)(nil)).Elem()
}

func (o ReportConfigScheduleResponsePtrOutput) ToReportConfigScheduleResponsePtrOutput() ReportConfigScheduleResponsePtrOutput {
	return o
}

func (o ReportConfigScheduleResponsePtrOutput) ToReportConfigScheduleResponsePtrOutputWithContext(ctx context.Context) ReportConfigScheduleResponsePtrOutput {
	return o
}

func (o ReportConfigScheduleResponsePtrOutput) Elem() ReportConfigScheduleResponseOutput {
	return o.ApplyT(func(v *ReportConfigScheduleResponse) ReportConfigScheduleResponse { return *v }).(ReportConfigScheduleResponseOutput)
}

// The schedule recurrence.
func (o ReportConfigScheduleResponsePtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ReportConfigScheduleResponsePtrOutput) RecurrencePeriod() ReportConfigRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigScheduleResponse) *ReportConfigRecurrencePeriodResponse {
		if v == nil {
			return nil
		}
		return &v.RecurrencePeriod
	}).(ReportConfigRecurrencePeriodResponsePtrOutput)
}

// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
func (o ReportConfigScheduleResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The start and end date for pulling data for the report.
type ReportConfigTimePeriod struct {
	// The start date to pull data from.
	From string `pulumi:"from"`
	// The end date to pull data to.
	To string `pulumi:"to"`
}

// ReportConfigTimePeriodInput is an input type that accepts ReportConfigTimePeriodArgs and ReportConfigTimePeriodOutput values.
// You can construct a concrete instance of `ReportConfigTimePeriodInput` via:
//
//          ReportConfigTimePeriodArgs{...}
type ReportConfigTimePeriodInput interface {
	pulumi.Input

	ToReportConfigTimePeriodOutput() ReportConfigTimePeriodOutput
	ToReportConfigTimePeriodOutputWithContext(context.Context) ReportConfigTimePeriodOutput
}

// The start and end date for pulling data for the report.
type ReportConfigTimePeriodArgs struct {
	// The start date to pull data from.
	From pulumi.StringInput `pulumi:"from"`
	// The end date to pull data to.
	To pulumi.StringInput `pulumi:"to"`
}

func (ReportConfigTimePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigTimePeriod)(nil)).Elem()
}

func (i ReportConfigTimePeriodArgs) ToReportConfigTimePeriodOutput() ReportConfigTimePeriodOutput {
	return i.ToReportConfigTimePeriodOutputWithContext(context.Background())
}

func (i ReportConfigTimePeriodArgs) ToReportConfigTimePeriodOutputWithContext(ctx context.Context) ReportConfigTimePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigTimePeriodOutput)
}

func (i ReportConfigTimePeriodArgs) ToReportConfigTimePeriodPtrOutput() ReportConfigTimePeriodPtrOutput {
	return i.ToReportConfigTimePeriodPtrOutputWithContext(context.Background())
}

func (i ReportConfigTimePeriodArgs) ToReportConfigTimePeriodPtrOutputWithContext(ctx context.Context) ReportConfigTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigTimePeriodOutput).ToReportConfigTimePeriodPtrOutputWithContext(ctx)
}

// ReportConfigTimePeriodPtrInput is an input type that accepts ReportConfigTimePeriodArgs, ReportConfigTimePeriodPtr and ReportConfigTimePeriodPtrOutput values.
// You can construct a concrete instance of `ReportConfigTimePeriodPtrInput` via:
//
//          ReportConfigTimePeriodArgs{...}
//
//  or:
//
//          nil
type ReportConfigTimePeriodPtrInput interface {
	pulumi.Input

	ToReportConfigTimePeriodPtrOutput() ReportConfigTimePeriodPtrOutput
	ToReportConfigTimePeriodPtrOutputWithContext(context.Context) ReportConfigTimePeriodPtrOutput
}

type reportConfigTimePeriodPtrType ReportConfigTimePeriodArgs

func ReportConfigTimePeriodPtr(v *ReportConfigTimePeriodArgs) ReportConfigTimePeriodPtrInput {
	return (*reportConfigTimePeriodPtrType)(v)
}

func (*reportConfigTimePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigTimePeriod)(nil)).Elem()
}

func (i *reportConfigTimePeriodPtrType) ToReportConfigTimePeriodPtrOutput() ReportConfigTimePeriodPtrOutput {
	return i.ToReportConfigTimePeriodPtrOutputWithContext(context.Background())
}

func (i *reportConfigTimePeriodPtrType) ToReportConfigTimePeriodPtrOutputWithContext(ctx context.Context) ReportConfigTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigTimePeriodPtrOutput)
}

// The start and end date for pulling data for the report.
type ReportConfigTimePeriodOutput struct{ *pulumi.OutputState }

func (ReportConfigTimePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigTimePeriod)(nil)).Elem()
}

func (o ReportConfigTimePeriodOutput) ToReportConfigTimePeriodOutput() ReportConfigTimePeriodOutput {
	return o
}

func (o ReportConfigTimePeriodOutput) ToReportConfigTimePeriodOutputWithContext(ctx context.Context) ReportConfigTimePeriodOutput {
	return o
}

func (o ReportConfigTimePeriodOutput) ToReportConfigTimePeriodPtrOutput() ReportConfigTimePeriodPtrOutput {
	return o.ToReportConfigTimePeriodPtrOutputWithContext(context.Background())
}

func (o ReportConfigTimePeriodOutput) ToReportConfigTimePeriodPtrOutputWithContext(ctx context.Context) ReportConfigTimePeriodPtrOutput {
	return o.ApplyT(func(v ReportConfigTimePeriod) *ReportConfigTimePeriod {
		return &v
	}).(ReportConfigTimePeriodPtrOutput)
}

// The start date to pull data from.
func (o ReportConfigTimePeriodOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigTimePeriod) string { return v.From }).(pulumi.StringOutput)
}

// The end date to pull data to.
func (o ReportConfigTimePeriodOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigTimePeriod) string { return v.To }).(pulumi.StringOutput)
}

type ReportConfigTimePeriodPtrOutput struct{ *pulumi.OutputState }

func (ReportConfigTimePeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigTimePeriod)(nil)).Elem()
}

func (o ReportConfigTimePeriodPtrOutput) ToReportConfigTimePeriodPtrOutput() ReportConfigTimePeriodPtrOutput {
	return o
}

func (o ReportConfigTimePeriodPtrOutput) ToReportConfigTimePeriodPtrOutputWithContext(ctx context.Context) ReportConfigTimePeriodPtrOutput {
	return o
}

func (o ReportConfigTimePeriodPtrOutput) Elem() ReportConfigTimePeriodOutput {
	return o.ApplyT(func(v *ReportConfigTimePeriod) ReportConfigTimePeriod { return *v }).(ReportConfigTimePeriodOutput)
}

// The start date to pull data from.
func (o ReportConfigTimePeriodPtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigTimePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date to pull data to.
func (o ReportConfigTimePeriodPtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigTimePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.To
	}).(pulumi.StringPtrOutput)
}

// The start and end date for pulling data for the report.
type ReportConfigTimePeriodResponse struct {
	// The start date to pull data from.
	From string `pulumi:"from"`
	// The end date to pull data to.
	To string `pulumi:"to"`
}

// ReportConfigTimePeriodResponseInput is an input type that accepts ReportConfigTimePeriodResponseArgs and ReportConfigTimePeriodResponseOutput values.
// You can construct a concrete instance of `ReportConfigTimePeriodResponseInput` via:
//
//          ReportConfigTimePeriodResponseArgs{...}
type ReportConfigTimePeriodResponseInput interface {
	pulumi.Input

	ToReportConfigTimePeriodResponseOutput() ReportConfigTimePeriodResponseOutput
	ToReportConfigTimePeriodResponseOutputWithContext(context.Context) ReportConfigTimePeriodResponseOutput
}

// The start and end date for pulling data for the report.
type ReportConfigTimePeriodResponseArgs struct {
	// The start date to pull data from.
	From pulumi.StringInput `pulumi:"from"`
	// The end date to pull data to.
	To pulumi.StringInput `pulumi:"to"`
}

func (ReportConfigTimePeriodResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigTimePeriodResponse)(nil)).Elem()
}

func (i ReportConfigTimePeriodResponseArgs) ToReportConfigTimePeriodResponseOutput() ReportConfigTimePeriodResponseOutput {
	return i.ToReportConfigTimePeriodResponseOutputWithContext(context.Background())
}

func (i ReportConfigTimePeriodResponseArgs) ToReportConfigTimePeriodResponseOutputWithContext(ctx context.Context) ReportConfigTimePeriodResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigTimePeriodResponseOutput)
}

func (i ReportConfigTimePeriodResponseArgs) ToReportConfigTimePeriodResponsePtrOutput() ReportConfigTimePeriodResponsePtrOutput {
	return i.ToReportConfigTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (i ReportConfigTimePeriodResponseArgs) ToReportConfigTimePeriodResponsePtrOutputWithContext(ctx context.Context) ReportConfigTimePeriodResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigTimePeriodResponseOutput).ToReportConfigTimePeriodResponsePtrOutputWithContext(ctx)
}

// ReportConfigTimePeriodResponsePtrInput is an input type that accepts ReportConfigTimePeriodResponseArgs, ReportConfigTimePeriodResponsePtr and ReportConfigTimePeriodResponsePtrOutput values.
// You can construct a concrete instance of `ReportConfigTimePeriodResponsePtrInput` via:
//
//          ReportConfigTimePeriodResponseArgs{...}
//
//  or:
//
//          nil
type ReportConfigTimePeriodResponsePtrInput interface {
	pulumi.Input

	ToReportConfigTimePeriodResponsePtrOutput() ReportConfigTimePeriodResponsePtrOutput
	ToReportConfigTimePeriodResponsePtrOutputWithContext(context.Context) ReportConfigTimePeriodResponsePtrOutput
}

type reportConfigTimePeriodResponsePtrType ReportConfigTimePeriodResponseArgs

func ReportConfigTimePeriodResponsePtr(v *ReportConfigTimePeriodResponseArgs) ReportConfigTimePeriodResponsePtrInput {
	return (*reportConfigTimePeriodResponsePtrType)(v)
}

func (*reportConfigTimePeriodResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigTimePeriodResponse)(nil)).Elem()
}

func (i *reportConfigTimePeriodResponsePtrType) ToReportConfigTimePeriodResponsePtrOutput() ReportConfigTimePeriodResponsePtrOutput {
	return i.ToReportConfigTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (i *reportConfigTimePeriodResponsePtrType) ToReportConfigTimePeriodResponsePtrOutputWithContext(ctx context.Context) ReportConfigTimePeriodResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigTimePeriodResponsePtrOutput)
}

// The start and end date for pulling data for the report.
type ReportConfigTimePeriodResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigTimePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigTimePeriodResponse)(nil)).Elem()
}

func (o ReportConfigTimePeriodResponseOutput) ToReportConfigTimePeriodResponseOutput() ReportConfigTimePeriodResponseOutput {
	return o
}

func (o ReportConfigTimePeriodResponseOutput) ToReportConfigTimePeriodResponseOutputWithContext(ctx context.Context) ReportConfigTimePeriodResponseOutput {
	return o
}

func (o ReportConfigTimePeriodResponseOutput) ToReportConfigTimePeriodResponsePtrOutput() ReportConfigTimePeriodResponsePtrOutput {
	return o.ToReportConfigTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigTimePeriodResponseOutput) ToReportConfigTimePeriodResponsePtrOutputWithContext(ctx context.Context) ReportConfigTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigTimePeriodResponse) *ReportConfigTimePeriodResponse {
		return &v
	}).(ReportConfigTimePeriodResponsePtrOutput)
}

// The start date to pull data from.
func (o ReportConfigTimePeriodResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigTimePeriodResponse) string { return v.From }).(pulumi.StringOutput)
}

// The end date to pull data to.
func (o ReportConfigTimePeriodResponseOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigTimePeriodResponse) string { return v.To }).(pulumi.StringOutput)
}

type ReportConfigTimePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigTimePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigTimePeriodResponse)(nil)).Elem()
}

func (o ReportConfigTimePeriodResponsePtrOutput) ToReportConfigTimePeriodResponsePtrOutput() ReportConfigTimePeriodResponsePtrOutput {
	return o
}

func (o ReportConfigTimePeriodResponsePtrOutput) ToReportConfigTimePeriodResponsePtrOutputWithContext(ctx context.Context) ReportConfigTimePeriodResponsePtrOutput {
	return o
}

func (o ReportConfigTimePeriodResponsePtrOutput) Elem() ReportConfigTimePeriodResponseOutput {
	return o.ApplyT(func(v *ReportConfigTimePeriodResponse) ReportConfigTimePeriodResponse { return *v }).(ReportConfigTimePeriodResponseOutput)
}

// The start date to pull data from.
func (o ReportConfigTimePeriodResponsePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date to pull data to.
func (o ReportConfigTimePeriodResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.To
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ReportConfigAggregationOutput{})
	pulumi.RegisterOutputType(ReportConfigAggregationMapOutput{})
	pulumi.RegisterOutputType(ReportConfigAggregationResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigAggregationResponseMapOutput{})
	pulumi.RegisterOutputType(ReportConfigComparisonExpressionOutput{})
	pulumi.RegisterOutputType(ReportConfigComparisonExpressionPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigComparisonExpressionResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigComparisonExpressionResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetConfigurationOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDefinitionOutput{})
	pulumi.RegisterOutputType(ReportConfigDefinitionPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDeliveryDestinationOutput{})
	pulumi.RegisterOutputType(ReportConfigDeliveryDestinationPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDeliveryDestinationResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigDeliveryDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDeliveryInfoOutput{})
	pulumi.RegisterOutputType(ReportConfigDeliveryInfoPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDeliveryInfoResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigDeliveryInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigFilterOutput{})
	pulumi.RegisterOutputType(ReportConfigFilterPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigFilterArrayOutput{})
	pulumi.RegisterOutputType(ReportConfigFilterResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigFilterResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportConfigGroupingOutput{})
	pulumi.RegisterOutputType(ReportConfigGroupingArrayOutput{})
	pulumi.RegisterOutputType(ReportConfigGroupingResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigGroupingResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportConfigRecurrencePeriodOutput{})
	pulumi.RegisterOutputType(ReportConfigRecurrencePeriodPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigRecurrencePeriodResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigRecurrencePeriodResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigScheduleOutput{})
	pulumi.RegisterOutputType(ReportConfigSchedulePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigScheduleResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigTimePeriodOutput{})
	pulumi.RegisterOutputType(ReportConfigTimePeriodPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigTimePeriodResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigTimePeriodResponsePtrOutput{})
}
