// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200601

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Show costs accumulated over time.
type AccumulatedType string

const (
	AccumulatedTypeTrue  = AccumulatedType("true")
	AccumulatedTypeFalse = AccumulatedType("false")
)

func (AccumulatedType) ElementType() reflect.Type {
	return reflect.TypeOf((*AccumulatedType)(nil)).Elem()
}

func (e AccumulatedType) ToAccumulatedTypeOutput() AccumulatedTypeOutput {
	return pulumi.ToOutput(e).(AccumulatedTypeOutput)
}

func (e AccumulatedType) ToAccumulatedTypeOutputWithContext(ctx context.Context) AccumulatedTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AccumulatedTypeOutput)
}

func (e AccumulatedType) ToAccumulatedTypePtrOutput() AccumulatedTypePtrOutput {
	return e.ToAccumulatedTypePtrOutputWithContext(context.Background())
}

func (e AccumulatedType) ToAccumulatedTypePtrOutputWithContext(ctx context.Context) AccumulatedTypePtrOutput {
	return AccumulatedType(e).ToAccumulatedTypeOutputWithContext(ctx).ToAccumulatedTypePtrOutputWithContext(ctx)
}

func (e AccumulatedType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccumulatedType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccumulatedType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AccumulatedType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AccumulatedTypeOutput struct{ *pulumi.OutputState }

func (AccumulatedTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccumulatedType)(nil)).Elem()
}

func (o AccumulatedTypeOutput) ToAccumulatedTypeOutput() AccumulatedTypeOutput {
	return o
}

func (o AccumulatedTypeOutput) ToAccumulatedTypeOutputWithContext(ctx context.Context) AccumulatedTypeOutput {
	return o
}

func (o AccumulatedTypeOutput) ToAccumulatedTypePtrOutput() AccumulatedTypePtrOutput {
	return o.ToAccumulatedTypePtrOutputWithContext(context.Background())
}

func (o AccumulatedTypeOutput) ToAccumulatedTypePtrOutputWithContext(ctx context.Context) AccumulatedTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccumulatedType) *AccumulatedType {
		return &v
	}).(AccumulatedTypePtrOutput)
}

func (o AccumulatedTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AccumulatedTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccumulatedType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AccumulatedTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccumulatedTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccumulatedType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AccumulatedTypePtrOutput struct{ *pulumi.OutputState }

func (AccumulatedTypePtrOutput) ElementType() reflect.Type {
	return accumulatedTypePtrType
}

func (o AccumulatedTypePtrOutput) ToAccumulatedTypePtrOutput() AccumulatedTypePtrOutput {
	return o
}

func (o AccumulatedTypePtrOutput) ToAccumulatedTypePtrOutputWithContext(ctx context.Context) AccumulatedTypePtrOutput {
	return o
}

func (o AccumulatedTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccumulatedTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AccumulatedType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o AccumulatedTypePtrOutput) Elem() AccumulatedTypeOutput {
	return o.ApplyT(func(v *AccumulatedType) AccumulatedType {
		var ret AccumulatedType
		if v != nil {
			ret = *v
		}
		return ret
	}).(AccumulatedTypeOutput)
}

// AccumulatedTypeInput is an input type that accepts AccumulatedTypeArgs and AccumulatedTypeOutput values.
// You can construct a concrete instance of `AccumulatedTypeInput` via:
//
//          AccumulatedTypeArgs{...}
type AccumulatedTypeInput interface {
	pulumi.Input

	ToAccumulatedTypeOutput() AccumulatedTypeOutput
	ToAccumulatedTypeOutputWithContext(context.Context) AccumulatedTypeOutput
}

var accumulatedTypePtrType = reflect.TypeOf((**AccumulatedType)(nil)).Elem()

type AccumulatedTypePtrInput interface {
	pulumi.Input

	ToAccumulatedTypePtrOutput() AccumulatedTypePtrOutput
	ToAccumulatedTypePtrOutputWithContext(context.Context) AccumulatedTypePtrOutput
}

type accumulatedTypePtr string

func AccumulatedTypePtr(v string) AccumulatedTypePtrInput {
	return (*accumulatedTypePtr)(&v)
}

func (*accumulatedTypePtr) ElementType() reflect.Type {
	return accumulatedTypePtrType
}

func (in *accumulatedTypePtr) ToAccumulatedTypePtrOutput() AccumulatedTypePtrOutput {
	return pulumi.ToOutput(in).(AccumulatedTypePtrOutput)
}

func (in *accumulatedTypePtr) ToAccumulatedTypePtrOutputWithContext(ctx context.Context) AccumulatedTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AccumulatedTypePtrOutput)
}

// Chart type of the main view in Cost Analysis. Required.
type ChartType string

const (
	ChartTypeArea          = ChartType("Area")
	ChartTypeLine          = ChartType("Line")
	ChartTypeStackedColumn = ChartType("StackedColumn")
	ChartTypeGroupedColumn = ChartType("GroupedColumn")
	ChartTypeTable         = ChartType("Table")
)

func (ChartType) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartType)(nil)).Elem()
}

func (e ChartType) ToChartTypeOutput() ChartTypeOutput {
	return pulumi.ToOutput(e).(ChartTypeOutput)
}

func (e ChartType) ToChartTypeOutputWithContext(ctx context.Context) ChartTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ChartTypeOutput)
}

func (e ChartType) ToChartTypePtrOutput() ChartTypePtrOutput {
	return e.ToChartTypePtrOutputWithContext(context.Background())
}

func (e ChartType) ToChartTypePtrOutputWithContext(ctx context.Context) ChartTypePtrOutput {
	return ChartType(e).ToChartTypeOutputWithContext(ctx).ToChartTypePtrOutputWithContext(ctx)
}

func (e ChartType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ChartType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ChartType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ChartType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ChartTypeOutput struct{ *pulumi.OutputState }

func (ChartTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartType)(nil)).Elem()
}

func (o ChartTypeOutput) ToChartTypeOutput() ChartTypeOutput {
	return o
}

func (o ChartTypeOutput) ToChartTypeOutputWithContext(ctx context.Context) ChartTypeOutput {
	return o
}

func (o ChartTypeOutput) ToChartTypePtrOutput() ChartTypePtrOutput {
	return o.ToChartTypePtrOutputWithContext(context.Background())
}

func (o ChartTypeOutput) ToChartTypePtrOutputWithContext(ctx context.Context) ChartTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChartType) *ChartType {
		return &v
	}).(ChartTypePtrOutput)
}

func (o ChartTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ChartTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ChartType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ChartTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ChartTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ChartType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ChartTypePtrOutput struct{ *pulumi.OutputState }

func (ChartTypePtrOutput) ElementType() reflect.Type {
	return chartTypePtrType
}

func (o ChartTypePtrOutput) ToChartTypePtrOutput() ChartTypePtrOutput {
	return o
}

func (o ChartTypePtrOutput) ToChartTypePtrOutputWithContext(ctx context.Context) ChartTypePtrOutput {
	return o
}

func (o ChartTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ChartTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ChartType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o ChartTypePtrOutput) Elem() ChartTypeOutput {
	return o.ApplyT(func(v *ChartType) ChartType {
		var ret ChartType
		if v != nil {
			ret = *v
		}
		return ret
	}).(ChartTypeOutput)
}

// ChartTypeInput is an input type that accepts ChartTypeArgs and ChartTypeOutput values.
// You can construct a concrete instance of `ChartTypeInput` via:
//
//          ChartTypeArgs{...}
type ChartTypeInput interface {
	pulumi.Input

	ToChartTypeOutput() ChartTypeOutput
	ToChartTypeOutputWithContext(context.Context) ChartTypeOutput
}

var chartTypePtrType = reflect.TypeOf((**ChartType)(nil)).Elem()

type ChartTypePtrInput interface {
	pulumi.Input

	ToChartTypePtrOutput() ChartTypePtrOutput
	ToChartTypePtrOutputWithContext(context.Context) ChartTypePtrOutput
}

type chartTypePtr string

func ChartTypePtr(v string) ChartTypePtrInput {
	return (*chartTypePtr)(&v)
}

func (*chartTypePtr) ElementType() reflect.Type {
	return chartTypePtrType
}

func (in *chartTypePtr) ToChartTypePtrOutput() ChartTypePtrOutput {
	return pulumi.ToOutput(in).(ChartTypePtrOutput)
}

func (in *chartTypePtr) ToChartTypePtrOutputWithContext(ctx context.Context) ChartTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ChartTypePtrOutput)
}

// The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations.
type ExportType string

const (
	ExportTypeUsage         = ExportType("Usage")
	ExportTypeActualCost    = ExportType("ActualCost")
	ExportTypeAmortizedCost = ExportType("AmortizedCost")
)

func (ExportType) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportType)(nil)).Elem()
}

func (e ExportType) ToExportTypeOutput() ExportTypeOutput {
	return pulumi.ToOutput(e).(ExportTypeOutput)
}

func (e ExportType) ToExportTypeOutputWithContext(ctx context.Context) ExportTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ExportTypeOutput)
}

func (e ExportType) ToExportTypePtrOutput() ExportTypePtrOutput {
	return e.ToExportTypePtrOutputWithContext(context.Background())
}

func (e ExportType) ToExportTypePtrOutputWithContext(ctx context.Context) ExportTypePtrOutput {
	return ExportType(e).ToExportTypeOutputWithContext(ctx).ToExportTypePtrOutputWithContext(ctx)
}

func (e ExportType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExportType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExportType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ExportType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ExportTypeOutput struct{ *pulumi.OutputState }

func (ExportTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportType)(nil)).Elem()
}

func (o ExportTypeOutput) ToExportTypeOutput() ExportTypeOutput {
	return o
}

func (o ExportTypeOutput) ToExportTypeOutputWithContext(ctx context.Context) ExportTypeOutput {
	return o
}

func (o ExportTypeOutput) ToExportTypePtrOutput() ExportTypePtrOutput {
	return o.ToExportTypePtrOutputWithContext(context.Background())
}

func (o ExportTypeOutput) ToExportTypePtrOutputWithContext(ctx context.Context) ExportTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExportType) *ExportType {
		return &v
	}).(ExportTypePtrOutput)
}

func (o ExportTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ExportTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExportType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ExportTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExportTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExportType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ExportTypePtrOutput struct{ *pulumi.OutputState }

func (ExportTypePtrOutput) ElementType() reflect.Type {
	return exportTypePtrType
}

func (o ExportTypePtrOutput) ToExportTypePtrOutput() ExportTypePtrOutput {
	return o
}

func (o ExportTypePtrOutput) ToExportTypePtrOutputWithContext(ctx context.Context) ExportTypePtrOutput {
	return o
}

func (o ExportTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExportTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ExportType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o ExportTypePtrOutput) Elem() ExportTypeOutput {
	return o.ApplyT(func(v *ExportType) ExportType {
		var ret ExportType
		if v != nil {
			ret = *v
		}
		return ret
	}).(ExportTypeOutput)
}

// ExportTypeInput is an input type that accepts ExportTypeArgs and ExportTypeOutput values.
// You can construct a concrete instance of `ExportTypeInput` via:
//
//          ExportTypeArgs{...}
type ExportTypeInput interface {
	pulumi.Input

	ToExportTypeOutput() ExportTypeOutput
	ToExportTypeOutputWithContext(context.Context) ExportTypeOutput
}

var exportTypePtrType = reflect.TypeOf((**ExportType)(nil)).Elem()

type ExportTypePtrInput interface {
	pulumi.Input

	ToExportTypePtrOutput() ExportTypePtrOutput
	ToExportTypePtrOutputWithContext(context.Context) ExportTypePtrOutput
}

type exportTypePtr string

func ExportTypePtr(v string) ExportTypePtrInput {
	return (*exportTypePtr)(&v)
}

func (*exportTypePtr) ElementType() reflect.Type {
	return exportTypePtrType
}

func (in *exportTypePtr) ToExportTypePtrOutput() ExportTypePtrOutput {
	return pulumi.ToOutput(in).(ExportTypePtrOutput)
}

func (in *exportTypePtr) ToExportTypePtrOutputWithContext(ctx context.Context) ExportTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ExportTypePtrOutput)
}

// The format of the export being delivered. Currently only 'Csv' is supported.
type FormatType string

const (
	FormatTypeCsv = FormatType("Csv")
)

func (FormatType) ElementType() reflect.Type {
	return reflect.TypeOf((*FormatType)(nil)).Elem()
}

func (e FormatType) ToFormatTypeOutput() FormatTypeOutput {
	return pulumi.ToOutput(e).(FormatTypeOutput)
}

func (e FormatType) ToFormatTypeOutputWithContext(ctx context.Context) FormatTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FormatTypeOutput)
}

func (e FormatType) ToFormatTypePtrOutput() FormatTypePtrOutput {
	return e.ToFormatTypePtrOutputWithContext(context.Background())
}

func (e FormatType) ToFormatTypePtrOutputWithContext(ctx context.Context) FormatTypePtrOutput {
	return FormatType(e).ToFormatTypeOutputWithContext(ctx).ToFormatTypePtrOutputWithContext(ctx)
}

func (e FormatType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FormatType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FormatType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FormatType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FormatTypeOutput struct{ *pulumi.OutputState }

func (FormatTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormatType)(nil)).Elem()
}

func (o FormatTypeOutput) ToFormatTypeOutput() FormatTypeOutput {
	return o
}

func (o FormatTypeOutput) ToFormatTypeOutputWithContext(ctx context.Context) FormatTypeOutput {
	return o
}

func (o FormatTypeOutput) ToFormatTypePtrOutput() FormatTypePtrOutput {
	return o.ToFormatTypePtrOutputWithContext(context.Background())
}

func (o FormatTypeOutput) ToFormatTypePtrOutputWithContext(ctx context.Context) FormatTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FormatType) *FormatType {
		return &v
	}).(FormatTypePtrOutput)
}

func (o FormatTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FormatTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FormatType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FormatTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FormatTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FormatType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FormatTypePtrOutput struct{ *pulumi.OutputState }

func (FormatTypePtrOutput) ElementType() reflect.Type {
	return formatTypePtrType
}

func (o FormatTypePtrOutput) ToFormatTypePtrOutput() FormatTypePtrOutput {
	return o
}

func (o FormatTypePtrOutput) ToFormatTypePtrOutputWithContext(ctx context.Context) FormatTypePtrOutput {
	return o
}

func (o FormatTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FormatTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FormatType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o FormatTypePtrOutput) Elem() FormatTypeOutput {
	return o.ApplyT(func(v *FormatType) FormatType {
		var ret FormatType
		if v != nil {
			ret = *v
		}
		return ret
	}).(FormatTypeOutput)
}

// FormatTypeInput is an input type that accepts FormatTypeArgs and FormatTypeOutput values.
// You can construct a concrete instance of `FormatTypeInput` via:
//
//          FormatTypeArgs{...}
type FormatTypeInput interface {
	pulumi.Input

	ToFormatTypeOutput() FormatTypeOutput
	ToFormatTypeOutputWithContext(context.Context) FormatTypeOutput
}

var formatTypePtrType = reflect.TypeOf((**FormatType)(nil)).Elem()

type FormatTypePtrInput interface {
	pulumi.Input

	ToFormatTypePtrOutput() FormatTypePtrOutput
	ToFormatTypePtrOutputWithContext(context.Context) FormatTypePtrOutput
}

type formatTypePtr string

func FormatTypePtr(v string) FormatTypePtrInput {
	return (*formatTypePtr)(&v)
}

func (*formatTypePtr) ElementType() reflect.Type {
	return formatTypePtrType
}

func (in *formatTypePtr) ToFormatTypePtrOutput() FormatTypePtrOutput {
	return pulumi.ToOutput(in).(FormatTypePtrOutput)
}

func (in *formatTypePtr) ToFormatTypePtrOutputWithContext(ctx context.Context) FormatTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FormatTypePtrOutput)
}

// The name of the aggregation function to use.
type FunctionType string

const (
	FunctionTypeSum = FunctionType("Sum")
)

func (FunctionType) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionType)(nil)).Elem()
}

func (e FunctionType) ToFunctionTypeOutput() FunctionTypeOutput {
	return pulumi.ToOutput(e).(FunctionTypeOutput)
}

func (e FunctionType) ToFunctionTypeOutputWithContext(ctx context.Context) FunctionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FunctionTypeOutput)
}

func (e FunctionType) ToFunctionTypePtrOutput() FunctionTypePtrOutput {
	return e.ToFunctionTypePtrOutputWithContext(context.Background())
}

func (e FunctionType) ToFunctionTypePtrOutputWithContext(ctx context.Context) FunctionTypePtrOutput {
	return FunctionType(e).ToFunctionTypeOutputWithContext(ctx).ToFunctionTypePtrOutputWithContext(ctx)
}

func (e FunctionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FunctionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FunctionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FunctionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FunctionTypeOutput struct{ *pulumi.OutputState }

func (FunctionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionType)(nil)).Elem()
}

func (o FunctionTypeOutput) ToFunctionTypeOutput() FunctionTypeOutput {
	return o
}

func (o FunctionTypeOutput) ToFunctionTypeOutputWithContext(ctx context.Context) FunctionTypeOutput {
	return o
}

func (o FunctionTypeOutput) ToFunctionTypePtrOutput() FunctionTypePtrOutput {
	return o.ToFunctionTypePtrOutputWithContext(context.Background())
}

func (o FunctionTypeOutput) ToFunctionTypePtrOutputWithContext(ctx context.Context) FunctionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionType) *FunctionType {
		return &v
	}).(FunctionTypePtrOutput)
}

func (o FunctionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FunctionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FunctionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FunctionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FunctionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FunctionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FunctionTypePtrOutput struct{ *pulumi.OutputState }

func (FunctionTypePtrOutput) ElementType() reflect.Type {
	return functionTypePtrType
}

func (o FunctionTypePtrOutput) ToFunctionTypePtrOutput() FunctionTypePtrOutput {
	return o
}

func (o FunctionTypePtrOutput) ToFunctionTypePtrOutputWithContext(ctx context.Context) FunctionTypePtrOutput {
	return o
}

func (o FunctionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FunctionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FunctionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o FunctionTypePtrOutput) Elem() FunctionTypeOutput {
	return o.ApplyT(func(v *FunctionType) FunctionType {
		var ret FunctionType
		if v != nil {
			ret = *v
		}
		return ret
	}).(FunctionTypeOutput)
}

// FunctionTypeInput is an input type that accepts FunctionTypeArgs and FunctionTypeOutput values.
// You can construct a concrete instance of `FunctionTypeInput` via:
//
//          FunctionTypeArgs{...}
type FunctionTypeInput interface {
	pulumi.Input

	ToFunctionTypeOutput() FunctionTypeOutput
	ToFunctionTypeOutputWithContext(context.Context) FunctionTypeOutput
}

var functionTypePtrType = reflect.TypeOf((**FunctionType)(nil)).Elem()

type FunctionTypePtrInput interface {
	pulumi.Input

	ToFunctionTypePtrOutput() FunctionTypePtrOutput
	ToFunctionTypePtrOutputWithContext(context.Context) FunctionTypePtrOutput
}

type functionTypePtr string

func FunctionTypePtr(v string) FunctionTypePtrInput {
	return (*functionTypePtr)(&v)
}

func (*functionTypePtr) ElementType() reflect.Type {
	return functionTypePtrType
}

func (in *functionTypePtr) ToFunctionTypePtrOutput() FunctionTypePtrOutput {
	return pulumi.ToOutput(in).(FunctionTypePtrOutput)
}

func (in *functionTypePtr) ToFunctionTypePtrOutputWithContext(ctx context.Context) FunctionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FunctionTypePtrOutput)
}

// The granularity of rows in the export. Currently only 'Daily' is supported.
type GranularityType string

const (
	GranularityTypeDaily = GranularityType("Daily")
)

func (GranularityType) ElementType() reflect.Type {
	return reflect.TypeOf((*GranularityType)(nil)).Elem()
}

func (e GranularityType) ToGranularityTypeOutput() GranularityTypeOutput {
	return pulumi.ToOutput(e).(GranularityTypeOutput)
}

func (e GranularityType) ToGranularityTypeOutputWithContext(ctx context.Context) GranularityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(GranularityTypeOutput)
}

func (e GranularityType) ToGranularityTypePtrOutput() GranularityTypePtrOutput {
	return e.ToGranularityTypePtrOutputWithContext(context.Background())
}

func (e GranularityType) ToGranularityTypePtrOutputWithContext(ctx context.Context) GranularityTypePtrOutput {
	return GranularityType(e).ToGranularityTypeOutputWithContext(ctx).ToGranularityTypePtrOutputWithContext(ctx)
}

func (e GranularityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GranularityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GranularityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GranularityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type GranularityTypeOutput struct{ *pulumi.OutputState }

func (GranularityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GranularityType)(nil)).Elem()
}

func (o GranularityTypeOutput) ToGranularityTypeOutput() GranularityTypeOutput {
	return o
}

func (o GranularityTypeOutput) ToGranularityTypeOutputWithContext(ctx context.Context) GranularityTypeOutput {
	return o
}

func (o GranularityTypeOutput) ToGranularityTypePtrOutput() GranularityTypePtrOutput {
	return o.ToGranularityTypePtrOutputWithContext(context.Background())
}

func (o GranularityTypeOutput) ToGranularityTypePtrOutputWithContext(ctx context.Context) GranularityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GranularityType) *GranularityType {
		return &v
	}).(GranularityTypePtrOutput)
}

func (o GranularityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o GranularityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GranularityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o GranularityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GranularityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GranularityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type GranularityTypePtrOutput struct{ *pulumi.OutputState }

func (GranularityTypePtrOutput) ElementType() reflect.Type {
	return granularityTypePtrType
}

func (o GranularityTypePtrOutput) ToGranularityTypePtrOutput() GranularityTypePtrOutput {
	return o
}

func (o GranularityTypePtrOutput) ToGranularityTypePtrOutputWithContext(ctx context.Context) GranularityTypePtrOutput {
	return o
}

func (o GranularityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GranularityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *GranularityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o GranularityTypePtrOutput) Elem() GranularityTypeOutput {
	return o.ApplyT(func(v *GranularityType) GranularityType {
		var ret GranularityType
		if v != nil {
			ret = *v
		}
		return ret
	}).(GranularityTypeOutput)
}

// GranularityTypeInput is an input type that accepts GranularityTypeArgs and GranularityTypeOutput values.
// You can construct a concrete instance of `GranularityTypeInput` via:
//
//          GranularityTypeArgs{...}
type GranularityTypeInput interface {
	pulumi.Input

	ToGranularityTypeOutput() GranularityTypeOutput
	ToGranularityTypeOutputWithContext(context.Context) GranularityTypeOutput
}

var granularityTypePtrType = reflect.TypeOf((**GranularityType)(nil)).Elem()

type GranularityTypePtrInput interface {
	pulumi.Input

	ToGranularityTypePtrOutput() GranularityTypePtrOutput
	ToGranularityTypePtrOutputWithContext(context.Context) GranularityTypePtrOutput
}

type granularityTypePtr string

func GranularityTypePtr(v string) GranularityTypePtrInput {
	return (*granularityTypePtr)(&v)
}

func (*granularityTypePtr) ElementType() reflect.Type {
	return granularityTypePtrType
}

func (in *granularityTypePtr) ToGranularityTypePtrOutput() GranularityTypePtrOutput {
	return pulumi.ToOutput(in).(GranularityTypePtrOutput)
}

func (in *granularityTypePtr) ToGranularityTypePtrOutputWithContext(ctx context.Context) GranularityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(GranularityTypePtrOutput)
}

// KPI type (Forecast, Budget).
type KpiTypeType string

const (
	KpiTypeTypeForecast = KpiTypeType("Forecast")
	KpiTypeTypeBudget   = KpiTypeType("Budget")
)

func (KpiTypeType) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiTypeType)(nil)).Elem()
}

func (e KpiTypeType) ToKpiTypeTypeOutput() KpiTypeTypeOutput {
	return pulumi.ToOutput(e).(KpiTypeTypeOutput)
}

func (e KpiTypeType) ToKpiTypeTypeOutputWithContext(ctx context.Context) KpiTypeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(KpiTypeTypeOutput)
}

func (e KpiTypeType) ToKpiTypeTypePtrOutput() KpiTypeTypePtrOutput {
	return e.ToKpiTypeTypePtrOutputWithContext(context.Background())
}

func (e KpiTypeType) ToKpiTypeTypePtrOutputWithContext(ctx context.Context) KpiTypeTypePtrOutput {
	return KpiTypeType(e).ToKpiTypeTypeOutputWithContext(ctx).ToKpiTypeTypePtrOutputWithContext(ctx)
}

func (e KpiTypeType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e KpiTypeType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e KpiTypeType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e KpiTypeType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type KpiTypeTypeOutput struct{ *pulumi.OutputState }

func (KpiTypeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiTypeType)(nil)).Elem()
}

func (o KpiTypeTypeOutput) ToKpiTypeTypeOutput() KpiTypeTypeOutput {
	return o
}

func (o KpiTypeTypeOutput) ToKpiTypeTypeOutputWithContext(ctx context.Context) KpiTypeTypeOutput {
	return o
}

func (o KpiTypeTypeOutput) ToKpiTypeTypePtrOutput() KpiTypeTypePtrOutput {
	return o.ToKpiTypeTypePtrOutputWithContext(context.Background())
}

func (o KpiTypeTypeOutput) ToKpiTypeTypePtrOutputWithContext(ctx context.Context) KpiTypeTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KpiTypeType) *KpiTypeType {
		return &v
	}).(KpiTypeTypePtrOutput)
}

func (o KpiTypeTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o KpiTypeTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KpiTypeType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o KpiTypeTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KpiTypeTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KpiTypeType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type KpiTypeTypePtrOutput struct{ *pulumi.OutputState }

func (KpiTypeTypePtrOutput) ElementType() reflect.Type {
	return kpiTypeTypePtrType
}

func (o KpiTypeTypePtrOutput) ToKpiTypeTypePtrOutput() KpiTypeTypePtrOutput {
	return o
}

func (o KpiTypeTypePtrOutput) ToKpiTypeTypePtrOutputWithContext(ctx context.Context) KpiTypeTypePtrOutput {
	return o
}

func (o KpiTypeTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KpiTypeTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *KpiTypeType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o KpiTypeTypePtrOutput) Elem() KpiTypeTypeOutput {
	return o.ApplyT(func(v *KpiTypeType) KpiTypeType {
		var ret KpiTypeType
		if v != nil {
			ret = *v
		}
		return ret
	}).(KpiTypeTypeOutput)
}

// KpiTypeTypeInput is an input type that accepts KpiTypeTypeArgs and KpiTypeTypeOutput values.
// You can construct a concrete instance of `KpiTypeTypeInput` via:
//
//          KpiTypeTypeArgs{...}
type KpiTypeTypeInput interface {
	pulumi.Input

	ToKpiTypeTypeOutput() KpiTypeTypeOutput
	ToKpiTypeTypeOutputWithContext(context.Context) KpiTypeTypeOutput
}

var kpiTypeTypePtrType = reflect.TypeOf((**KpiTypeType)(nil)).Elem()

type KpiTypeTypePtrInput interface {
	pulumi.Input

	ToKpiTypeTypePtrOutput() KpiTypeTypePtrOutput
	ToKpiTypeTypePtrOutputWithContext(context.Context) KpiTypeTypePtrOutput
}

type kpiTypeTypePtr string

func KpiTypeTypePtr(v string) KpiTypeTypePtrInput {
	return (*kpiTypeTypePtr)(&v)
}

func (*kpiTypeTypePtr) ElementType() reflect.Type {
	return kpiTypeTypePtrType
}

func (in *kpiTypeTypePtr) ToKpiTypeTypePtrOutput() KpiTypeTypePtrOutput {
	return pulumi.ToOutput(in).(KpiTypeTypePtrOutput)
}

func (in *kpiTypeTypePtr) ToKpiTypeTypePtrOutputWithContext(ctx context.Context) KpiTypeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(KpiTypeTypePtrOutput)
}

// Metric to use when displaying costs.
type MetricType string

const (
	MetricTypeActualCost    = MetricType("ActualCost")
	MetricTypeAmortizedCost = MetricType("AmortizedCost")
	MetricTypeAHUB          = MetricType("AHUB")
)

func (MetricType) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricType)(nil)).Elem()
}

func (e MetricType) ToMetricTypeOutput() MetricTypeOutput {
	return pulumi.ToOutput(e).(MetricTypeOutput)
}

func (e MetricType) ToMetricTypeOutputWithContext(ctx context.Context) MetricTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MetricTypeOutput)
}

func (e MetricType) ToMetricTypePtrOutput() MetricTypePtrOutput {
	return e.ToMetricTypePtrOutputWithContext(context.Background())
}

func (e MetricType) ToMetricTypePtrOutputWithContext(ctx context.Context) MetricTypePtrOutput {
	return MetricType(e).ToMetricTypeOutputWithContext(ctx).ToMetricTypePtrOutputWithContext(ctx)
}

func (e MetricType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MetricType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MetricTypeOutput struct{ *pulumi.OutputState }

func (MetricTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricType)(nil)).Elem()
}

func (o MetricTypeOutput) ToMetricTypeOutput() MetricTypeOutput {
	return o
}

func (o MetricTypeOutput) ToMetricTypeOutputWithContext(ctx context.Context) MetricTypeOutput {
	return o
}

func (o MetricTypeOutput) ToMetricTypePtrOutput() MetricTypePtrOutput {
	return o.ToMetricTypePtrOutputWithContext(context.Background())
}

func (o MetricTypeOutput) ToMetricTypePtrOutputWithContext(ctx context.Context) MetricTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetricType) *MetricType {
		return &v
	}).(MetricTypePtrOutput)
}

func (o MetricTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MetricTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MetricTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MetricTypePtrOutput struct{ *pulumi.OutputState }

func (MetricTypePtrOutput) ElementType() reflect.Type {
	return metricTypePtrType
}

func (o MetricTypePtrOutput) ToMetricTypePtrOutput() MetricTypePtrOutput {
	return o
}

func (o MetricTypePtrOutput) ToMetricTypePtrOutputWithContext(ctx context.Context) MetricTypePtrOutput {
	return o
}

func (o MetricTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MetricType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o MetricTypePtrOutput) Elem() MetricTypeOutput {
	return o.ApplyT(func(v *MetricType) MetricType {
		var ret MetricType
		if v != nil {
			ret = *v
		}
		return ret
	}).(MetricTypeOutput)
}

// MetricTypeInput is an input type that accepts MetricTypeArgs and MetricTypeOutput values.
// You can construct a concrete instance of `MetricTypeInput` via:
//
//          MetricTypeArgs{...}
type MetricTypeInput interface {
	pulumi.Input

	ToMetricTypeOutput() MetricTypeOutput
	ToMetricTypeOutputWithContext(context.Context) MetricTypeOutput
}

var metricTypePtrType = reflect.TypeOf((**MetricType)(nil)).Elem()

type MetricTypePtrInput interface {
	pulumi.Input

	ToMetricTypePtrOutput() MetricTypePtrOutput
	ToMetricTypePtrOutputWithContext(context.Context) MetricTypePtrOutput
}

type metricTypePtr string

func MetricTypePtr(v string) MetricTypePtrInput {
	return (*metricTypePtr)(&v)
}

func (*metricTypePtr) ElementType() reflect.Type {
	return metricTypePtrType
}

func (in *metricTypePtr) ToMetricTypePtrOutput() MetricTypePtrOutput {
	return pulumi.ToOutput(in).(MetricTypePtrOutput)
}

func (in *metricTypePtr) ToMetricTypePtrOutputWithContext(ctx context.Context) MetricTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MetricTypePtrOutput)
}

// The operator to use for comparison.
type OperatorType string

const (
	OperatorTypeIn       = OperatorType("In")
	OperatorTypeContains = OperatorType("Contains")
)

func (OperatorType) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorType)(nil)).Elem()
}

func (e OperatorType) ToOperatorTypeOutput() OperatorTypeOutput {
	return pulumi.ToOutput(e).(OperatorTypeOutput)
}

func (e OperatorType) ToOperatorTypeOutputWithContext(ctx context.Context) OperatorTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OperatorTypeOutput)
}

func (e OperatorType) ToOperatorTypePtrOutput() OperatorTypePtrOutput {
	return e.ToOperatorTypePtrOutputWithContext(context.Background())
}

func (e OperatorType) ToOperatorTypePtrOutputWithContext(ctx context.Context) OperatorTypePtrOutput {
	return OperatorType(e).ToOperatorTypeOutputWithContext(ctx).ToOperatorTypePtrOutputWithContext(ctx)
}

func (e OperatorType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperatorType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperatorType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OperatorType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OperatorTypeOutput struct{ *pulumi.OutputState }

func (OperatorTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorType)(nil)).Elem()
}

func (o OperatorTypeOutput) ToOperatorTypeOutput() OperatorTypeOutput {
	return o
}

func (o OperatorTypeOutput) ToOperatorTypeOutputWithContext(ctx context.Context) OperatorTypeOutput {
	return o
}

func (o OperatorTypeOutput) ToOperatorTypePtrOutput() OperatorTypePtrOutput {
	return o.ToOperatorTypePtrOutputWithContext(context.Background())
}

func (o OperatorTypeOutput) ToOperatorTypePtrOutputWithContext(ctx context.Context) OperatorTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OperatorType) *OperatorType {
		return &v
	}).(OperatorTypePtrOutput)
}

func (o OperatorTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OperatorTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperatorType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OperatorTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatorTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperatorType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OperatorTypePtrOutput struct{ *pulumi.OutputState }

func (OperatorTypePtrOutput) ElementType() reflect.Type {
	return operatorTypePtrType
}

func (o OperatorTypePtrOutput) ToOperatorTypePtrOutput() OperatorTypePtrOutput {
	return o
}

func (o OperatorTypePtrOutput) ToOperatorTypePtrOutputWithContext(ctx context.Context) OperatorTypePtrOutput {
	return o
}

func (o OperatorTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatorTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OperatorType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o OperatorTypePtrOutput) Elem() OperatorTypeOutput {
	return o.ApplyT(func(v *OperatorType) OperatorType {
		var ret OperatorType
		if v != nil {
			ret = *v
		}
		return ret
	}).(OperatorTypeOutput)
}

// OperatorTypeInput is an input type that accepts OperatorTypeArgs and OperatorTypeOutput values.
// You can construct a concrete instance of `OperatorTypeInput` via:
//
//          OperatorTypeArgs{...}
type OperatorTypeInput interface {
	pulumi.Input

	ToOperatorTypeOutput() OperatorTypeOutput
	ToOperatorTypeOutputWithContext(context.Context) OperatorTypeOutput
}

var operatorTypePtrType = reflect.TypeOf((**OperatorType)(nil)).Elem()

type OperatorTypePtrInput interface {
	pulumi.Input

	ToOperatorTypePtrOutput() OperatorTypePtrOutput
	ToOperatorTypePtrOutputWithContext(context.Context) OperatorTypePtrOutput
}

type operatorTypePtr string

func OperatorTypePtr(v string) OperatorTypePtrInput {
	return (*operatorTypePtr)(&v)
}

func (*operatorTypePtr) ElementType() reflect.Type {
	return operatorTypePtrType
}

func (in *operatorTypePtr) ToOperatorTypePtrOutput() OperatorTypePtrOutput {
	return pulumi.ToOutput(in).(OperatorTypePtrOutput)
}

func (in *operatorTypePtr) ToOperatorTypePtrOutputWithContext(ctx context.Context) OperatorTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OperatorTypePtrOutput)
}

// Data type to show in view.
type PivotTypeType string

const (
	PivotTypeTypeDimension = PivotTypeType("Dimension")
	PivotTypeTypeTagKey    = PivotTypeType("TagKey")
)

func (PivotTypeType) ElementType() reflect.Type {
	return reflect.TypeOf((*PivotTypeType)(nil)).Elem()
}

func (e PivotTypeType) ToPivotTypeTypeOutput() PivotTypeTypeOutput {
	return pulumi.ToOutput(e).(PivotTypeTypeOutput)
}

func (e PivotTypeType) ToPivotTypeTypeOutputWithContext(ctx context.Context) PivotTypeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PivotTypeTypeOutput)
}

func (e PivotTypeType) ToPivotTypeTypePtrOutput() PivotTypeTypePtrOutput {
	return e.ToPivotTypeTypePtrOutputWithContext(context.Background())
}

func (e PivotTypeType) ToPivotTypeTypePtrOutputWithContext(ctx context.Context) PivotTypeTypePtrOutput {
	return PivotTypeType(e).ToPivotTypeTypeOutputWithContext(ctx).ToPivotTypeTypePtrOutputWithContext(ctx)
}

func (e PivotTypeType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PivotTypeType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PivotTypeType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PivotTypeType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PivotTypeTypeOutput struct{ *pulumi.OutputState }

func (PivotTypeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PivotTypeType)(nil)).Elem()
}

func (o PivotTypeTypeOutput) ToPivotTypeTypeOutput() PivotTypeTypeOutput {
	return o
}

func (o PivotTypeTypeOutput) ToPivotTypeTypeOutputWithContext(ctx context.Context) PivotTypeTypeOutput {
	return o
}

func (o PivotTypeTypeOutput) ToPivotTypeTypePtrOutput() PivotTypeTypePtrOutput {
	return o.ToPivotTypeTypePtrOutputWithContext(context.Background())
}

func (o PivotTypeTypeOutput) ToPivotTypeTypePtrOutputWithContext(ctx context.Context) PivotTypeTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PivotTypeType) *PivotTypeType {
		return &v
	}).(PivotTypeTypePtrOutput)
}

func (o PivotTypeTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PivotTypeTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PivotTypeType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PivotTypeTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PivotTypeTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PivotTypeType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PivotTypeTypePtrOutput struct{ *pulumi.OutputState }

func (PivotTypeTypePtrOutput) ElementType() reflect.Type {
	return pivotTypeTypePtrType
}

func (o PivotTypeTypePtrOutput) ToPivotTypeTypePtrOutput() PivotTypeTypePtrOutput {
	return o
}

func (o PivotTypeTypePtrOutput) ToPivotTypeTypePtrOutputWithContext(ctx context.Context) PivotTypeTypePtrOutput {
	return o
}

func (o PivotTypeTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PivotTypeTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PivotTypeType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o PivotTypeTypePtrOutput) Elem() PivotTypeTypeOutput {
	return o.ApplyT(func(v *PivotTypeType) PivotTypeType {
		var ret PivotTypeType
		if v != nil {
			ret = *v
		}
		return ret
	}).(PivotTypeTypeOutput)
}

// PivotTypeTypeInput is an input type that accepts PivotTypeTypeArgs and PivotTypeTypeOutput values.
// You can construct a concrete instance of `PivotTypeTypeInput` via:
//
//          PivotTypeTypeArgs{...}
type PivotTypeTypeInput interface {
	pulumi.Input

	ToPivotTypeTypeOutput() PivotTypeTypeOutput
	ToPivotTypeTypeOutputWithContext(context.Context) PivotTypeTypeOutput
}

var pivotTypeTypePtrType = reflect.TypeOf((**PivotTypeType)(nil)).Elem()

type PivotTypeTypePtrInput interface {
	pulumi.Input

	ToPivotTypeTypePtrOutput() PivotTypeTypePtrOutput
	ToPivotTypeTypePtrOutputWithContext(context.Context) PivotTypeTypePtrOutput
}

type pivotTypeTypePtr string

func PivotTypeTypePtr(v string) PivotTypeTypePtrInput {
	return (*pivotTypeTypePtr)(&v)
}

func (*pivotTypeTypePtr) ElementType() reflect.Type {
	return pivotTypeTypePtrType
}

func (in *pivotTypeTypePtr) ToPivotTypeTypePtrOutput() PivotTypeTypePtrOutput {
	return pulumi.ToOutput(in).(PivotTypeTypePtrOutput)
}

func (in *pivotTypeTypePtr) ToPivotTypeTypePtrOutputWithContext(ctx context.Context) PivotTypeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PivotTypeTypePtrOutput)
}

// The schedule recurrence.
type RecurrenceType string

const (
	RecurrenceTypeDaily    = RecurrenceType("Daily")
	RecurrenceTypeWeekly   = RecurrenceType("Weekly")
	RecurrenceTypeMonthly  = RecurrenceType("Monthly")
	RecurrenceTypeAnnually = RecurrenceType("Annually")
)

func (RecurrenceType) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceType)(nil)).Elem()
}

func (e RecurrenceType) ToRecurrenceTypeOutput() RecurrenceTypeOutput {
	return pulumi.ToOutput(e).(RecurrenceTypeOutput)
}

func (e RecurrenceType) ToRecurrenceTypeOutputWithContext(ctx context.Context) RecurrenceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RecurrenceTypeOutput)
}

func (e RecurrenceType) ToRecurrenceTypePtrOutput() RecurrenceTypePtrOutput {
	return e.ToRecurrenceTypePtrOutputWithContext(context.Background())
}

func (e RecurrenceType) ToRecurrenceTypePtrOutputWithContext(ctx context.Context) RecurrenceTypePtrOutput {
	return RecurrenceType(e).ToRecurrenceTypeOutputWithContext(ctx).ToRecurrenceTypePtrOutputWithContext(ctx)
}

func (e RecurrenceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RecurrenceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RecurrenceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RecurrenceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RecurrenceTypeOutput struct{ *pulumi.OutputState }

func (RecurrenceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceType)(nil)).Elem()
}

func (o RecurrenceTypeOutput) ToRecurrenceTypeOutput() RecurrenceTypeOutput {
	return o
}

func (o RecurrenceTypeOutput) ToRecurrenceTypeOutputWithContext(ctx context.Context) RecurrenceTypeOutput {
	return o
}

func (o RecurrenceTypeOutput) ToRecurrenceTypePtrOutput() RecurrenceTypePtrOutput {
	return o.ToRecurrenceTypePtrOutputWithContext(context.Background())
}

func (o RecurrenceTypeOutput) ToRecurrenceTypePtrOutputWithContext(ctx context.Context) RecurrenceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecurrenceType) *RecurrenceType {
		return &v
	}).(RecurrenceTypePtrOutput)
}

func (o RecurrenceTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RecurrenceTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RecurrenceType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RecurrenceTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RecurrenceTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RecurrenceType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RecurrenceTypePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceTypePtrOutput) ElementType() reflect.Type {
	return recurrenceTypePtrType
}

func (o RecurrenceTypePtrOutput) ToRecurrenceTypePtrOutput() RecurrenceTypePtrOutput {
	return o
}

func (o RecurrenceTypePtrOutput) ToRecurrenceTypePtrOutputWithContext(ctx context.Context) RecurrenceTypePtrOutput {
	return o
}

func (o RecurrenceTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RecurrenceTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RecurrenceType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o RecurrenceTypePtrOutput) Elem() RecurrenceTypeOutput {
	return o.ApplyT(func(v *RecurrenceType) RecurrenceType {
		var ret RecurrenceType
		if v != nil {
			ret = *v
		}
		return ret
	}).(RecurrenceTypeOutput)
}

// RecurrenceTypeInput is an input type that accepts RecurrenceTypeArgs and RecurrenceTypeOutput values.
// You can construct a concrete instance of `RecurrenceTypeInput` via:
//
//          RecurrenceTypeArgs{...}
type RecurrenceTypeInput interface {
	pulumi.Input

	ToRecurrenceTypeOutput() RecurrenceTypeOutput
	ToRecurrenceTypeOutputWithContext(context.Context) RecurrenceTypeOutput
}

var recurrenceTypePtrType = reflect.TypeOf((**RecurrenceType)(nil)).Elem()

type RecurrenceTypePtrInput interface {
	pulumi.Input

	ToRecurrenceTypePtrOutput() RecurrenceTypePtrOutput
	ToRecurrenceTypePtrOutputWithContext(context.Context) RecurrenceTypePtrOutput
}

type recurrenceTypePtr string

func RecurrenceTypePtr(v string) RecurrenceTypePtrInput {
	return (*recurrenceTypePtr)(&v)
}

func (*recurrenceTypePtr) ElementType() reflect.Type {
	return recurrenceTypePtrType
}

func (in *recurrenceTypePtr) ToRecurrenceTypePtrOutput() RecurrenceTypePtrOutput {
	return pulumi.ToOutput(in).(RecurrenceTypePtrOutput)
}

func (in *recurrenceTypePtr) ToRecurrenceTypePtrOutputWithContext(ctx context.Context) RecurrenceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RecurrenceTypePtrOutput)
}

// Has type of the column to group.
type ReportConfigColumnType string

const (
	ReportConfigColumnTypeTag       = ReportConfigColumnType("Tag")
	ReportConfigColumnTypeDimension = ReportConfigColumnType("Dimension")
)

func (ReportConfigColumnType) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigColumnType)(nil)).Elem()
}

func (e ReportConfigColumnType) ToReportConfigColumnTypeOutput() ReportConfigColumnTypeOutput {
	return pulumi.ToOutput(e).(ReportConfigColumnTypeOutput)
}

func (e ReportConfigColumnType) ToReportConfigColumnTypeOutputWithContext(ctx context.Context) ReportConfigColumnTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ReportConfigColumnTypeOutput)
}

func (e ReportConfigColumnType) ToReportConfigColumnTypePtrOutput() ReportConfigColumnTypePtrOutput {
	return e.ToReportConfigColumnTypePtrOutputWithContext(context.Background())
}

func (e ReportConfigColumnType) ToReportConfigColumnTypePtrOutputWithContext(ctx context.Context) ReportConfigColumnTypePtrOutput {
	return ReportConfigColumnType(e).ToReportConfigColumnTypeOutputWithContext(ctx).ToReportConfigColumnTypePtrOutputWithContext(ctx)
}

func (e ReportConfigColumnType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportConfigColumnType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportConfigColumnType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReportConfigColumnType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ReportConfigColumnTypeOutput struct{ *pulumi.OutputState }

func (ReportConfigColumnTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigColumnType)(nil)).Elem()
}

func (o ReportConfigColumnTypeOutput) ToReportConfigColumnTypeOutput() ReportConfigColumnTypeOutput {
	return o
}

func (o ReportConfigColumnTypeOutput) ToReportConfigColumnTypeOutputWithContext(ctx context.Context) ReportConfigColumnTypeOutput {
	return o
}

func (o ReportConfigColumnTypeOutput) ToReportConfigColumnTypePtrOutput() ReportConfigColumnTypePtrOutput {
	return o.ToReportConfigColumnTypePtrOutputWithContext(context.Background())
}

func (o ReportConfigColumnTypeOutput) ToReportConfigColumnTypePtrOutputWithContext(ctx context.Context) ReportConfigColumnTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportConfigColumnType) *ReportConfigColumnType {
		return &v
	}).(ReportConfigColumnTypePtrOutput)
}

func (o ReportConfigColumnTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ReportConfigColumnTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportConfigColumnType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ReportConfigColumnTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportConfigColumnTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportConfigColumnType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ReportConfigColumnTypePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigColumnTypePtrOutput) ElementType() reflect.Type {
	return reportConfigColumnTypePtrType
}

func (o ReportConfigColumnTypePtrOutput) ToReportConfigColumnTypePtrOutput() ReportConfigColumnTypePtrOutput {
	return o
}

func (o ReportConfigColumnTypePtrOutput) ToReportConfigColumnTypePtrOutputWithContext(ctx context.Context) ReportConfigColumnTypePtrOutput {
	return o
}

func (o ReportConfigColumnTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportConfigColumnTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ReportConfigColumnType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o ReportConfigColumnTypePtrOutput) Elem() ReportConfigColumnTypeOutput {
	return o.ApplyT(func(v *ReportConfigColumnType) ReportConfigColumnType {
		var ret ReportConfigColumnType
		if v != nil {
			ret = *v
		}
		return ret
	}).(ReportConfigColumnTypeOutput)
}

// ReportConfigColumnTypeInput is an input type that accepts ReportConfigColumnTypeArgs and ReportConfigColumnTypeOutput values.
// You can construct a concrete instance of `ReportConfigColumnTypeInput` via:
//
//          ReportConfigColumnTypeArgs{...}
type ReportConfigColumnTypeInput interface {
	pulumi.Input

	ToReportConfigColumnTypeOutput() ReportConfigColumnTypeOutput
	ToReportConfigColumnTypeOutputWithContext(context.Context) ReportConfigColumnTypeOutput
}

var reportConfigColumnTypePtrType = reflect.TypeOf((**ReportConfigColumnType)(nil)).Elem()

type ReportConfigColumnTypePtrInput interface {
	pulumi.Input

	ToReportConfigColumnTypePtrOutput() ReportConfigColumnTypePtrOutput
	ToReportConfigColumnTypePtrOutputWithContext(context.Context) ReportConfigColumnTypePtrOutput
}

type reportConfigColumnTypePtr string

func ReportConfigColumnTypePtr(v string) ReportConfigColumnTypePtrInput {
	return (*reportConfigColumnTypePtr)(&v)
}

func (*reportConfigColumnTypePtr) ElementType() reflect.Type {
	return reportConfigColumnTypePtrType
}

func (in *reportConfigColumnTypePtr) ToReportConfigColumnTypePtrOutput() ReportConfigColumnTypePtrOutput {
	return pulumi.ToOutput(in).(ReportConfigColumnTypePtrOutput)
}

func (in *reportConfigColumnTypePtr) ToReportConfigColumnTypePtrOutputWithContext(ctx context.Context) ReportConfigColumnTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ReportConfigColumnTypePtrOutput)
}

// The granularity of rows in the report.
type ReportGranularityType string

const (
	ReportGranularityTypeDaily   = ReportGranularityType("Daily")
	ReportGranularityTypeMonthly = ReportGranularityType("Monthly")
)

func (ReportGranularityType) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGranularityType)(nil)).Elem()
}

func (e ReportGranularityType) ToReportGranularityTypeOutput() ReportGranularityTypeOutput {
	return pulumi.ToOutput(e).(ReportGranularityTypeOutput)
}

func (e ReportGranularityType) ToReportGranularityTypeOutputWithContext(ctx context.Context) ReportGranularityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ReportGranularityTypeOutput)
}

func (e ReportGranularityType) ToReportGranularityTypePtrOutput() ReportGranularityTypePtrOutput {
	return e.ToReportGranularityTypePtrOutputWithContext(context.Background())
}

func (e ReportGranularityType) ToReportGranularityTypePtrOutputWithContext(ctx context.Context) ReportGranularityTypePtrOutput {
	return ReportGranularityType(e).ToReportGranularityTypeOutputWithContext(ctx).ToReportGranularityTypePtrOutputWithContext(ctx)
}

func (e ReportGranularityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportGranularityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportGranularityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReportGranularityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ReportGranularityTypeOutput struct{ *pulumi.OutputState }

func (ReportGranularityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGranularityType)(nil)).Elem()
}

func (o ReportGranularityTypeOutput) ToReportGranularityTypeOutput() ReportGranularityTypeOutput {
	return o
}

func (o ReportGranularityTypeOutput) ToReportGranularityTypeOutputWithContext(ctx context.Context) ReportGranularityTypeOutput {
	return o
}

func (o ReportGranularityTypeOutput) ToReportGranularityTypePtrOutput() ReportGranularityTypePtrOutput {
	return o.ToReportGranularityTypePtrOutputWithContext(context.Background())
}

func (o ReportGranularityTypeOutput) ToReportGranularityTypePtrOutputWithContext(ctx context.Context) ReportGranularityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportGranularityType) *ReportGranularityType {
		return &v
	}).(ReportGranularityTypePtrOutput)
}

func (o ReportGranularityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ReportGranularityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportGranularityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ReportGranularityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportGranularityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportGranularityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ReportGranularityTypePtrOutput struct{ *pulumi.OutputState }

func (ReportGranularityTypePtrOutput) ElementType() reflect.Type {
	return reportGranularityTypePtrType
}

func (o ReportGranularityTypePtrOutput) ToReportGranularityTypePtrOutput() ReportGranularityTypePtrOutput {
	return o
}

func (o ReportGranularityTypePtrOutput) ToReportGranularityTypePtrOutputWithContext(ctx context.Context) ReportGranularityTypePtrOutput {
	return o
}

func (o ReportGranularityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportGranularityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ReportGranularityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o ReportGranularityTypePtrOutput) Elem() ReportGranularityTypeOutput {
	return o.ApplyT(func(v *ReportGranularityType) ReportGranularityType {
		var ret ReportGranularityType
		if v != nil {
			ret = *v
		}
		return ret
	}).(ReportGranularityTypeOutput)
}

// ReportGranularityTypeInput is an input type that accepts ReportGranularityTypeArgs and ReportGranularityTypeOutput values.
// You can construct a concrete instance of `ReportGranularityTypeInput` via:
//
//          ReportGranularityTypeArgs{...}
type ReportGranularityTypeInput interface {
	pulumi.Input

	ToReportGranularityTypeOutput() ReportGranularityTypeOutput
	ToReportGranularityTypeOutputWithContext(context.Context) ReportGranularityTypeOutput
}

var reportGranularityTypePtrType = reflect.TypeOf((**ReportGranularityType)(nil)).Elem()

type ReportGranularityTypePtrInput interface {
	pulumi.Input

	ToReportGranularityTypePtrOutput() ReportGranularityTypePtrOutput
	ToReportGranularityTypePtrOutputWithContext(context.Context) ReportGranularityTypePtrOutput
}

type reportGranularityTypePtr string

func ReportGranularityTypePtr(v string) ReportGranularityTypePtrInput {
	return (*reportGranularityTypePtr)(&v)
}

func (*reportGranularityTypePtr) ElementType() reflect.Type {
	return reportGranularityTypePtrType
}

func (in *reportGranularityTypePtr) ToReportGranularityTypePtrOutput() ReportGranularityTypePtrOutput {
	return pulumi.ToOutput(in).(ReportGranularityTypePtrOutput)
}

func (in *reportGranularityTypePtr) ToReportGranularityTypePtrOutputWithContext(ctx context.Context) ReportGranularityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ReportGranularityTypePtrOutput)
}

// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
type ReportTimeframeType string

const (
	ReportTimeframeTypeWeekToDate  = ReportTimeframeType("WeekToDate")
	ReportTimeframeTypeMonthToDate = ReportTimeframeType("MonthToDate")
	ReportTimeframeTypeYearToDate  = ReportTimeframeType("YearToDate")
	ReportTimeframeTypeCustom      = ReportTimeframeType("Custom")
)

func (ReportTimeframeType) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportTimeframeType)(nil)).Elem()
}

func (e ReportTimeframeType) ToReportTimeframeTypeOutput() ReportTimeframeTypeOutput {
	return pulumi.ToOutput(e).(ReportTimeframeTypeOutput)
}

func (e ReportTimeframeType) ToReportTimeframeTypeOutputWithContext(ctx context.Context) ReportTimeframeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ReportTimeframeTypeOutput)
}

func (e ReportTimeframeType) ToReportTimeframeTypePtrOutput() ReportTimeframeTypePtrOutput {
	return e.ToReportTimeframeTypePtrOutputWithContext(context.Background())
}

func (e ReportTimeframeType) ToReportTimeframeTypePtrOutputWithContext(ctx context.Context) ReportTimeframeTypePtrOutput {
	return ReportTimeframeType(e).ToReportTimeframeTypeOutputWithContext(ctx).ToReportTimeframeTypePtrOutputWithContext(ctx)
}

func (e ReportTimeframeType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportTimeframeType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportTimeframeType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReportTimeframeType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ReportTimeframeTypeOutput struct{ *pulumi.OutputState }

func (ReportTimeframeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportTimeframeType)(nil)).Elem()
}

func (o ReportTimeframeTypeOutput) ToReportTimeframeTypeOutput() ReportTimeframeTypeOutput {
	return o
}

func (o ReportTimeframeTypeOutput) ToReportTimeframeTypeOutputWithContext(ctx context.Context) ReportTimeframeTypeOutput {
	return o
}

func (o ReportTimeframeTypeOutput) ToReportTimeframeTypePtrOutput() ReportTimeframeTypePtrOutput {
	return o.ToReportTimeframeTypePtrOutputWithContext(context.Background())
}

func (o ReportTimeframeTypeOutput) ToReportTimeframeTypePtrOutputWithContext(ctx context.Context) ReportTimeframeTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportTimeframeType) *ReportTimeframeType {
		return &v
	}).(ReportTimeframeTypePtrOutput)
}

func (o ReportTimeframeTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ReportTimeframeTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportTimeframeType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ReportTimeframeTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportTimeframeTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportTimeframeType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ReportTimeframeTypePtrOutput struct{ *pulumi.OutputState }

func (ReportTimeframeTypePtrOutput) ElementType() reflect.Type {
	return reportTimeframeTypePtrType
}

func (o ReportTimeframeTypePtrOutput) ToReportTimeframeTypePtrOutput() ReportTimeframeTypePtrOutput {
	return o
}

func (o ReportTimeframeTypePtrOutput) ToReportTimeframeTypePtrOutputWithContext(ctx context.Context) ReportTimeframeTypePtrOutput {
	return o
}

func (o ReportTimeframeTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportTimeframeTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ReportTimeframeType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o ReportTimeframeTypePtrOutput) Elem() ReportTimeframeTypeOutput {
	return o.ApplyT(func(v *ReportTimeframeType) ReportTimeframeType {
		var ret ReportTimeframeType
		if v != nil {
			ret = *v
		}
		return ret
	}).(ReportTimeframeTypeOutput)
}

// ReportTimeframeTypeInput is an input type that accepts ReportTimeframeTypeArgs and ReportTimeframeTypeOutput values.
// You can construct a concrete instance of `ReportTimeframeTypeInput` via:
//
//          ReportTimeframeTypeArgs{...}
type ReportTimeframeTypeInput interface {
	pulumi.Input

	ToReportTimeframeTypeOutput() ReportTimeframeTypeOutput
	ToReportTimeframeTypeOutputWithContext(context.Context) ReportTimeframeTypeOutput
}

var reportTimeframeTypePtrType = reflect.TypeOf((**ReportTimeframeType)(nil)).Elem()

type ReportTimeframeTypePtrInput interface {
	pulumi.Input

	ToReportTimeframeTypePtrOutput() ReportTimeframeTypePtrOutput
	ToReportTimeframeTypePtrOutputWithContext(context.Context) ReportTimeframeTypePtrOutput
}

type reportTimeframeTypePtr string

func ReportTimeframeTypePtr(v string) ReportTimeframeTypePtrInput {
	return (*reportTimeframeTypePtr)(&v)
}

func (*reportTimeframeTypePtr) ElementType() reflect.Type {
	return reportTimeframeTypePtrType
}

func (in *reportTimeframeTypePtr) ToReportTimeframeTypePtrOutput() ReportTimeframeTypePtrOutput {
	return pulumi.ToOutput(in).(ReportTimeframeTypePtrOutput)
}

func (in *reportTimeframeTypePtr) ToReportTimeframeTypePtrOutputWithContext(ctx context.Context) ReportTimeframeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ReportTimeframeTypePtrOutput)
}

// The type of the report. Usage represents actual usage, forecast represents forecasted data and UsageAndForecast represents both usage and forecasted data. Actual usage and forecasted data can be differentiated based on dates.
type ReportType string

const (
	ReportTypeUsage = ReportType("Usage")
)

func (ReportType) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportType)(nil)).Elem()
}

func (e ReportType) ToReportTypeOutput() ReportTypeOutput {
	return pulumi.ToOutput(e).(ReportTypeOutput)
}

func (e ReportType) ToReportTypeOutputWithContext(ctx context.Context) ReportTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ReportTypeOutput)
}

func (e ReportType) ToReportTypePtrOutput() ReportTypePtrOutput {
	return e.ToReportTypePtrOutputWithContext(context.Background())
}

func (e ReportType) ToReportTypePtrOutputWithContext(ctx context.Context) ReportTypePtrOutput {
	return ReportType(e).ToReportTypeOutputWithContext(ctx).ToReportTypePtrOutputWithContext(ctx)
}

func (e ReportType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReportType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReportType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ReportTypeOutput struct{ *pulumi.OutputState }

func (ReportTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportType)(nil)).Elem()
}

func (o ReportTypeOutput) ToReportTypeOutput() ReportTypeOutput {
	return o
}

func (o ReportTypeOutput) ToReportTypeOutputWithContext(ctx context.Context) ReportTypeOutput {
	return o
}

func (o ReportTypeOutput) ToReportTypePtrOutput() ReportTypePtrOutput {
	return o.ToReportTypePtrOutputWithContext(context.Background())
}

func (o ReportTypeOutput) ToReportTypePtrOutputWithContext(ctx context.Context) ReportTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportType) *ReportType {
		return &v
	}).(ReportTypePtrOutput)
}

func (o ReportTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ReportTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ReportTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReportType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ReportTypePtrOutput struct{ *pulumi.OutputState }

func (ReportTypePtrOutput) ElementType() reflect.Type {
	return reportTypePtrType
}

func (o ReportTypePtrOutput) ToReportTypePtrOutput() ReportTypePtrOutput {
	return o
}

func (o ReportTypePtrOutput) ToReportTypePtrOutputWithContext(ctx context.Context) ReportTypePtrOutput {
	return o
}

func (o ReportTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReportTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ReportType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o ReportTypePtrOutput) Elem() ReportTypeOutput {
	return o.ApplyT(func(v *ReportType) ReportType {
		var ret ReportType
		if v != nil {
			ret = *v
		}
		return ret
	}).(ReportTypeOutput)
}

// ReportTypeInput is an input type that accepts ReportTypeArgs and ReportTypeOutput values.
// You can construct a concrete instance of `ReportTypeInput` via:
//
//          ReportTypeArgs{...}
type ReportTypeInput interface {
	pulumi.Input

	ToReportTypeOutput() ReportTypeOutput
	ToReportTypeOutputWithContext(context.Context) ReportTypeOutput
}

var reportTypePtrType = reflect.TypeOf((**ReportType)(nil)).Elem()

type ReportTypePtrInput interface {
	pulumi.Input

	ToReportTypePtrOutput() ReportTypePtrOutput
	ToReportTypePtrOutputWithContext(context.Context) ReportTypePtrOutput
}

type reportTypePtr string

func ReportTypePtr(v string) ReportTypePtrInput {
	return (*reportTypePtr)(&v)
}

func (*reportTypePtr) ElementType() reflect.Type {
	return reportTypePtrType
}

func (in *reportTypePtr) ToReportTypePtrOutput() ReportTypePtrOutput {
	return pulumi.ToOutput(in).(ReportTypePtrOutput)
}

func (in *reportTypePtr) ToReportTypePtrOutputWithContext(ctx context.Context) ReportTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ReportTypePtrOutput)
}

// The status of the export's schedule. If 'Inactive', the export's schedule is paused.
type StatusType string

const (
	StatusTypeActive   = StatusType("Active")
	StatusTypeInactive = StatusType("Inactive")
)

func (StatusType) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusType)(nil)).Elem()
}

func (e StatusType) ToStatusTypeOutput() StatusTypeOutput {
	return pulumi.ToOutput(e).(StatusTypeOutput)
}

func (e StatusType) ToStatusTypeOutputWithContext(ctx context.Context) StatusTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StatusTypeOutput)
}

func (e StatusType) ToStatusTypePtrOutput() StatusTypePtrOutput {
	return e.ToStatusTypePtrOutputWithContext(context.Background())
}

func (e StatusType) ToStatusTypePtrOutputWithContext(ctx context.Context) StatusTypePtrOutput {
	return StatusType(e).ToStatusTypeOutputWithContext(ctx).ToStatusTypePtrOutputWithContext(ctx)
}

func (e StatusType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StatusType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StatusType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StatusType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StatusTypeOutput struct{ *pulumi.OutputState }

func (StatusTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusType)(nil)).Elem()
}

func (o StatusTypeOutput) ToStatusTypeOutput() StatusTypeOutput {
	return o
}

func (o StatusTypeOutput) ToStatusTypeOutputWithContext(ctx context.Context) StatusTypeOutput {
	return o
}

func (o StatusTypeOutput) ToStatusTypePtrOutput() StatusTypePtrOutput {
	return o.ToStatusTypePtrOutputWithContext(context.Background())
}

func (o StatusTypeOutput) ToStatusTypePtrOutputWithContext(ctx context.Context) StatusTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StatusType) *StatusType {
		return &v
	}).(StatusTypePtrOutput)
}

func (o StatusTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StatusTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StatusType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StatusTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StatusTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StatusType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StatusTypePtrOutput struct{ *pulumi.OutputState }

func (StatusTypePtrOutput) ElementType() reflect.Type {
	return statusTypePtrType
}

func (o StatusTypePtrOutput) ToStatusTypePtrOutput() StatusTypePtrOutput {
	return o
}

func (o StatusTypePtrOutput) ToStatusTypePtrOutputWithContext(ctx context.Context) StatusTypePtrOutput {
	return o
}

func (o StatusTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StatusTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StatusType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o StatusTypePtrOutput) Elem() StatusTypeOutput {
	return o.ApplyT(func(v *StatusType) StatusType {
		var ret StatusType
		if v != nil {
			ret = *v
		}
		return ret
	}).(StatusTypeOutput)
}

// StatusTypeInput is an input type that accepts StatusTypeArgs and StatusTypeOutput values.
// You can construct a concrete instance of `StatusTypeInput` via:
//
//          StatusTypeArgs{...}
type StatusTypeInput interface {
	pulumi.Input

	ToStatusTypeOutput() StatusTypeOutput
	ToStatusTypeOutputWithContext(context.Context) StatusTypeOutput
}

var statusTypePtrType = reflect.TypeOf((**StatusType)(nil)).Elem()

type StatusTypePtrInput interface {
	pulumi.Input

	ToStatusTypePtrOutput() StatusTypePtrOutput
	ToStatusTypePtrOutputWithContext(context.Context) StatusTypePtrOutput
}

type statusTypePtr string

func StatusTypePtr(v string) StatusTypePtrInput {
	return (*statusTypePtr)(&v)
}

func (*statusTypePtr) ElementType() reflect.Type {
	return statusTypePtrType
}

func (in *statusTypePtr) ToStatusTypePtrOutput() StatusTypePtrOutput {
	return pulumi.ToOutput(in).(StatusTypePtrOutput)
}

func (in *statusTypePtr) ToStatusTypePtrOutputWithContext(ctx context.Context) StatusTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StatusTypePtrOutput)
}

// The time frame for pulling data for the export. If custom, then a specific time period must be provided.
type TimeframeType string

const (
	TimeframeTypeMonthToDate         = TimeframeType("MonthToDate")
	TimeframeTypeBillingMonthToDate  = TimeframeType("BillingMonthToDate")
	TimeframeTypeTheLastMonth        = TimeframeType("TheLastMonth")
	TimeframeTypeTheLastBillingMonth = TimeframeType("TheLastBillingMonth")
	TimeframeTypeWeekToDate          = TimeframeType("WeekToDate")
	TimeframeTypeCustom              = TimeframeType("Custom")
)

func (TimeframeType) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeframeType)(nil)).Elem()
}

func (e TimeframeType) ToTimeframeTypeOutput() TimeframeTypeOutput {
	return pulumi.ToOutput(e).(TimeframeTypeOutput)
}

func (e TimeframeType) ToTimeframeTypeOutputWithContext(ctx context.Context) TimeframeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TimeframeTypeOutput)
}

func (e TimeframeType) ToTimeframeTypePtrOutput() TimeframeTypePtrOutput {
	return e.ToTimeframeTypePtrOutputWithContext(context.Background())
}

func (e TimeframeType) ToTimeframeTypePtrOutputWithContext(ctx context.Context) TimeframeTypePtrOutput {
	return TimeframeType(e).ToTimeframeTypeOutputWithContext(ctx).ToTimeframeTypePtrOutputWithContext(ctx)
}

func (e TimeframeType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TimeframeType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TimeframeType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TimeframeType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TimeframeTypeOutput struct{ *pulumi.OutputState }

func (TimeframeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeframeType)(nil)).Elem()
}

func (o TimeframeTypeOutput) ToTimeframeTypeOutput() TimeframeTypeOutput {
	return o
}

func (o TimeframeTypeOutput) ToTimeframeTypeOutputWithContext(ctx context.Context) TimeframeTypeOutput {
	return o
}

func (o TimeframeTypeOutput) ToTimeframeTypePtrOutput() TimeframeTypePtrOutput {
	return o.ToTimeframeTypePtrOutputWithContext(context.Background())
}

func (o TimeframeTypeOutput) ToTimeframeTypePtrOutputWithContext(ctx context.Context) TimeframeTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TimeframeType) *TimeframeType {
		return &v
	}).(TimeframeTypePtrOutput)
}

func (o TimeframeTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TimeframeTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TimeframeType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TimeframeTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TimeframeTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TimeframeType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TimeframeTypePtrOutput struct{ *pulumi.OutputState }

func (TimeframeTypePtrOutput) ElementType() reflect.Type {
	return timeframeTypePtrType
}

func (o TimeframeTypePtrOutput) ToTimeframeTypePtrOutput() TimeframeTypePtrOutput {
	return o
}

func (o TimeframeTypePtrOutput) ToTimeframeTypePtrOutputWithContext(ctx context.Context) TimeframeTypePtrOutput {
	return o
}

func (o TimeframeTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TimeframeTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TimeframeType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

func (o TimeframeTypePtrOutput) Elem() TimeframeTypeOutput {
	return o.ApplyT(func(v *TimeframeType) TimeframeType {
		var ret TimeframeType
		if v != nil {
			ret = *v
		}
		return ret
	}).(TimeframeTypeOutput)
}

// TimeframeTypeInput is an input type that accepts TimeframeTypeArgs and TimeframeTypeOutput values.
// You can construct a concrete instance of `TimeframeTypeInput` via:
//
//          TimeframeTypeArgs{...}
type TimeframeTypeInput interface {
	pulumi.Input

	ToTimeframeTypeOutput() TimeframeTypeOutput
	ToTimeframeTypeOutputWithContext(context.Context) TimeframeTypeOutput
}

var timeframeTypePtrType = reflect.TypeOf((**TimeframeType)(nil)).Elem()

type TimeframeTypePtrInput interface {
	pulumi.Input

	ToTimeframeTypePtrOutput() TimeframeTypePtrOutput
	ToTimeframeTypePtrOutputWithContext(context.Context) TimeframeTypePtrOutput
}

type timeframeTypePtr string

func TimeframeTypePtr(v string) TimeframeTypePtrInput {
	return (*timeframeTypePtr)(&v)
}

func (*timeframeTypePtr) ElementType() reflect.Type {
	return timeframeTypePtrType
}

func (in *timeframeTypePtr) ToTimeframeTypePtrOutput() TimeframeTypePtrOutput {
	return pulumi.ToOutput(in).(TimeframeTypePtrOutput)
}

func (in *timeframeTypePtr) ToTimeframeTypePtrOutputWithContext(ctx context.Context) TimeframeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TimeframeTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AccumulatedTypeOutput{})
	pulumi.RegisterOutputType(AccumulatedTypePtrOutput{})
	pulumi.RegisterOutputType(ChartTypeOutput{})
	pulumi.RegisterOutputType(ChartTypePtrOutput{})
	pulumi.RegisterOutputType(ExportTypeOutput{})
	pulumi.RegisterOutputType(ExportTypePtrOutput{})
	pulumi.RegisterOutputType(FormatTypeOutput{})
	pulumi.RegisterOutputType(FormatTypePtrOutput{})
	pulumi.RegisterOutputType(FunctionTypeOutput{})
	pulumi.RegisterOutputType(FunctionTypePtrOutput{})
	pulumi.RegisterOutputType(GranularityTypeOutput{})
	pulumi.RegisterOutputType(GranularityTypePtrOutput{})
	pulumi.RegisterOutputType(KpiTypeTypeOutput{})
	pulumi.RegisterOutputType(KpiTypeTypePtrOutput{})
	pulumi.RegisterOutputType(MetricTypeOutput{})
	pulumi.RegisterOutputType(MetricTypePtrOutput{})
	pulumi.RegisterOutputType(OperatorTypeOutput{})
	pulumi.RegisterOutputType(OperatorTypePtrOutput{})
	pulumi.RegisterOutputType(PivotTypeTypeOutput{})
	pulumi.RegisterOutputType(PivotTypeTypePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceTypeOutput{})
	pulumi.RegisterOutputType(RecurrenceTypePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigColumnTypeOutput{})
	pulumi.RegisterOutputType(ReportConfigColumnTypePtrOutput{})
	pulumi.RegisterOutputType(ReportGranularityTypeOutput{})
	pulumi.RegisterOutputType(ReportGranularityTypePtrOutput{})
	pulumi.RegisterOutputType(ReportTimeframeTypeOutput{})
	pulumi.RegisterOutputType(ReportTimeframeTypePtrOutput{})
	pulumi.RegisterOutputType(ReportTypeOutput{})
	pulumi.RegisterOutputType(ReportTypePtrOutput{})
	pulumi.RegisterOutputType(StatusTypeOutput{})
	pulumi.RegisterOutputType(StatusTypePtrOutput{})
	pulumi.RegisterOutputType(TimeframeTypeOutput{})
	pulumi.RegisterOutputType(TimeframeTypePtrOutput{})
}
