// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package costmanagement

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A report resource.
// API Version: 2018-08-01-preview.
type ReportByDepartment struct {
	pulumi.CustomResourceState

	// Has definition for the report.
	Definition ReportDefinitionResponseOutput `pulumi:"definition"`
	// Has delivery information for the report.
	DeliveryInfo ReportDeliveryInfoResponseOutput `pulumi:"deliveryInfo"`
	// The format of the report being delivered.
	Format pulumi.StringPtrOutput `pulumi:"format"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Has schedule information for the report.
	Schedule ReportScheduleResponsePtrOutput `pulumi:"schedule"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewReportByDepartment registers a new resource with the given unique name, arguments, and options.
func NewReportByDepartment(ctx *pulumi.Context,
	name string, args *ReportByDepartmentArgs, opts ...pulumi.ResourceOption) (*ReportByDepartment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Definition == nil {
		return nil, errors.New("invalid value for required argument 'Definition'")
	}
	if args.DeliveryInfo == nil {
		return nil, errors.New("invalid value for required argument 'DeliveryInfo'")
	}
	if args.DepartmentId == nil {
		return nil, errors.New("invalid value for required argument 'DepartmentId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:costmanagement/v20180801preview:ReportByDepartment"),
		},
	})
	opts = append(opts, aliases)
	var resource ReportByDepartment
	err := ctx.RegisterResource("azure-native:costmanagement:ReportByDepartment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReportByDepartment gets an existing ReportByDepartment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReportByDepartment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReportByDepartmentState, opts ...pulumi.ResourceOption) (*ReportByDepartment, error) {
	var resource ReportByDepartment
	err := ctx.ReadResource("azure-native:costmanagement:ReportByDepartment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReportByDepartment resources.
type reportByDepartmentState struct {
}

type ReportByDepartmentState struct {
}

func (ReportByDepartmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*reportByDepartmentState)(nil)).Elem()
}

type reportByDepartmentArgs struct {
	// Has definition for the report.
	Definition ReportDefinition `pulumi:"definition"`
	// Has delivery information for the report.
	DeliveryInfo ReportDeliveryInfo `pulumi:"deliveryInfo"`
	// Department ID
	DepartmentId string `pulumi:"departmentId"`
	// The format of the report being delivered.
	Format *string `pulumi:"format"`
	// Report Name.
	ReportName *string `pulumi:"reportName"`
	// Has schedule information for the report.
	Schedule *ReportSchedule `pulumi:"schedule"`
}

// The set of arguments for constructing a ReportByDepartment resource.
type ReportByDepartmentArgs struct {
	// Has definition for the report.
	Definition ReportDefinitionInput
	// Has delivery information for the report.
	DeliveryInfo ReportDeliveryInfoInput
	// Department ID
	DepartmentId pulumi.StringInput
	// The format of the report being delivered.
	Format pulumi.StringPtrInput
	// Report Name.
	ReportName pulumi.StringPtrInput
	// Has schedule information for the report.
	Schedule ReportSchedulePtrInput
}

func (ReportByDepartmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reportByDepartmentArgs)(nil)).Elem()
}

type ReportByDepartmentInput interface {
	pulumi.Input

	ToReportByDepartmentOutput() ReportByDepartmentOutput
	ToReportByDepartmentOutputWithContext(ctx context.Context) ReportByDepartmentOutput
}

func (*ReportByDepartment) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportByDepartment)(nil)).Elem()
}

func (i *ReportByDepartment) ToReportByDepartmentOutput() ReportByDepartmentOutput {
	return i.ToReportByDepartmentOutputWithContext(context.Background())
}

func (i *ReportByDepartment) ToReportByDepartmentOutputWithContext(ctx context.Context) ReportByDepartmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportByDepartmentOutput)
}

type ReportByDepartmentOutput struct{ *pulumi.OutputState }

func (ReportByDepartmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportByDepartment)(nil)).Elem()
}

func (o ReportByDepartmentOutput) ToReportByDepartmentOutput() ReportByDepartmentOutput {
	return o
}

func (o ReportByDepartmentOutput) ToReportByDepartmentOutputWithContext(ctx context.Context) ReportByDepartmentOutput {
	return o
}

// Has definition for the report.
func (o ReportByDepartmentOutput) Definition() ReportDefinitionResponseOutput {
	return o.ApplyT(func(v *ReportByDepartment) ReportDefinitionResponseOutput { return v.Definition }).(ReportDefinitionResponseOutput)
}

// Has delivery information for the report.
func (o ReportByDepartmentOutput) DeliveryInfo() ReportDeliveryInfoResponseOutput {
	return o.ApplyT(func(v *ReportByDepartment) ReportDeliveryInfoResponseOutput { return v.DeliveryInfo }).(ReportDeliveryInfoResponseOutput)
}

// The format of the report being delivered.
func (o ReportByDepartmentOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportByDepartment) pulumi.StringPtrOutput { return v.Format }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o ReportByDepartmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportByDepartment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Has schedule information for the report.
func (o ReportByDepartmentOutput) Schedule() ReportScheduleResponsePtrOutput {
	return o.ApplyT(func(v *ReportByDepartment) ReportScheduleResponsePtrOutput { return v.Schedule }).(ReportScheduleResponsePtrOutput)
}

// Resource tags.
func (o ReportByDepartmentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ReportByDepartment) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type.
func (o ReportByDepartmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportByDepartment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ReportByDepartmentOutput{})
}
