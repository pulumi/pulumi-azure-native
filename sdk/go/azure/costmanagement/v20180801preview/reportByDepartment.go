// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180801preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ReportByDepartment struct {
	pulumi.CustomResourceState

	Definition   ReportDefinitionResponseOutput   `pulumi:"definition"`
	DeliveryInfo ReportDeliveryInfoResponseOutput `pulumi:"deliveryInfo"`
	Format       pulumi.StringPtrOutput           `pulumi:"format"`
	Name         pulumi.StringOutput              `pulumi:"name"`
	Schedule     ReportScheduleResponsePtrOutput  `pulumi:"schedule"`
	Tags         pulumi.StringMapOutput           `pulumi:"tags"`
	Type         pulumi.StringOutput              `pulumi:"type"`
}

// NewReportByDepartment registers a new resource with the given unique name, arguments, and options.
func NewReportByDepartment(ctx *pulumi.Context,
	name string, args *ReportByDepartmentArgs, opts ...pulumi.ResourceOption) (*ReportByDepartment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Definition == nil {
		return nil, errors.New("invalid value for required argument 'Definition'")
	}
	if args.DeliveryInfo == nil {
		return nil, errors.New("invalid value for required argument 'DeliveryInfo'")
	}
	if args.DepartmentId == nil {
		return nil, errors.New("invalid value for required argument 'DepartmentId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:costmanagement/v20180801preview:ReportByDepartment"),
		},
		{
			Type: pulumi.String("azure-native:costmanagement:ReportByDepartment"),
		},
		{
			Type: pulumi.String("azure-nextgen:costmanagement:ReportByDepartment"),
		},
	})
	opts = append(opts, aliases)
	var resource ReportByDepartment
	err := ctx.RegisterResource("azure-native:costmanagement/v20180801preview:ReportByDepartment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReportByDepartment gets an existing ReportByDepartment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReportByDepartment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReportByDepartmentState, opts ...pulumi.ResourceOption) (*ReportByDepartment, error) {
	var resource ReportByDepartment
	err := ctx.ReadResource("azure-native:costmanagement/v20180801preview:ReportByDepartment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReportByDepartment resources.
type reportByDepartmentState struct {
}

type ReportByDepartmentState struct {
}

func (ReportByDepartmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*reportByDepartmentState)(nil)).Elem()
}

type reportByDepartmentArgs struct {
	Definition   ReportDefinition   `pulumi:"definition"`
	DeliveryInfo ReportDeliveryInfo `pulumi:"deliveryInfo"`
	DepartmentId string             `pulumi:"departmentId"`
	Format       *string            `pulumi:"format"`
	ReportName   *string            `pulumi:"reportName"`
	Schedule     *ReportSchedule    `pulumi:"schedule"`
}

// The set of arguments for constructing a ReportByDepartment resource.
type ReportByDepartmentArgs struct {
	Definition   ReportDefinitionInput
	DeliveryInfo ReportDeliveryInfoInput
	DepartmentId pulumi.StringInput
	Format       pulumi.StringPtrInput
	ReportName   pulumi.StringPtrInput
	Schedule     ReportSchedulePtrInput
}

func (ReportByDepartmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reportByDepartmentArgs)(nil)).Elem()
}

type ReportByDepartmentInput interface {
	pulumi.Input

	ToReportByDepartmentOutput() ReportByDepartmentOutput
	ToReportByDepartmentOutputWithContext(ctx context.Context) ReportByDepartmentOutput
}

func (*ReportByDepartment) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportByDepartment)(nil))
}

func (i *ReportByDepartment) ToReportByDepartmentOutput() ReportByDepartmentOutput {
	return i.ToReportByDepartmentOutputWithContext(context.Background())
}

func (i *ReportByDepartment) ToReportByDepartmentOutputWithContext(ctx context.Context) ReportByDepartmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportByDepartmentOutput)
}

type ReportByDepartmentOutput struct{ *pulumi.OutputState }

func (ReportByDepartmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportByDepartment)(nil))
}

func (o ReportByDepartmentOutput) ToReportByDepartmentOutput() ReportByDepartmentOutput {
	return o
}

func (o ReportByDepartmentOutput) ToReportByDepartmentOutputWithContext(ctx context.Context) ReportByDepartmentOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ReportByDepartmentOutput{})
}
