// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package costmanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The common properties of the export.
type CommonExportPropertiesResponse struct {
	// Has the definition for the export.
	Definition ExportDefinitionResponse `pulumi:"definition"`
	// Has delivery information for the export.
	DeliveryInfo ExportDeliveryInfoResponse `pulumi:"deliveryInfo"`
	// The format of the export being delivered. Currently only 'Csv' is supported.
	Format *string `pulumi:"format"`
	// If the export has an active schedule, provides an estimate of the next execution time.
	NextRunTimeEstimate string `pulumi:"nextRunTimeEstimate"`
	// If requested, has the most recent execution history for the export.
	RunHistory *ExportExecutionListResultResponse `pulumi:"runHistory"`
}

// The common properties of the export.
type CommonExportPropertiesResponseOutput struct{ *pulumi.OutputState }

func (CommonExportPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonExportPropertiesResponse)(nil)).Elem()
}

func (o CommonExportPropertiesResponseOutput) ToCommonExportPropertiesResponseOutput() CommonExportPropertiesResponseOutput {
	return o
}

func (o CommonExportPropertiesResponseOutput) ToCommonExportPropertiesResponseOutputWithContext(ctx context.Context) CommonExportPropertiesResponseOutput {
	return o
}

// Has the definition for the export.
func (o CommonExportPropertiesResponseOutput) Definition() ExportDefinitionResponseOutput {
	return o.ApplyT(func(v CommonExportPropertiesResponse) ExportDefinitionResponse { return v.Definition }).(ExportDefinitionResponseOutput)
}

// Has delivery information for the export.
func (o CommonExportPropertiesResponseOutput) DeliveryInfo() ExportDeliveryInfoResponseOutput {
	return o.ApplyT(func(v CommonExportPropertiesResponse) ExportDeliveryInfoResponse { return v.DeliveryInfo }).(ExportDeliveryInfoResponseOutput)
}

// The format of the export being delivered. Currently only 'Csv' is supported.
func (o CommonExportPropertiesResponseOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommonExportPropertiesResponse) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// If the export has an active schedule, provides an estimate of the next execution time.
func (o CommonExportPropertiesResponseOutput) NextRunTimeEstimate() pulumi.StringOutput {
	return o.ApplyT(func(v CommonExportPropertiesResponse) string { return v.NextRunTimeEstimate }).(pulumi.StringOutput)
}

// If requested, has the most recent execution history for the export.
func (o CommonExportPropertiesResponseOutput) RunHistory() ExportExecutionListResultResponsePtrOutput {
	return o.ApplyT(func(v CommonExportPropertiesResponse) *ExportExecutionListResultResponse { return v.RunHistory }).(ExportExecutionListResultResponsePtrOutput)
}

type CommonExportPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (CommonExportPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonExportPropertiesResponse)(nil)).Elem()
}

func (o CommonExportPropertiesResponsePtrOutput) ToCommonExportPropertiesResponsePtrOutput() CommonExportPropertiesResponsePtrOutput {
	return o
}

func (o CommonExportPropertiesResponsePtrOutput) ToCommonExportPropertiesResponsePtrOutputWithContext(ctx context.Context) CommonExportPropertiesResponsePtrOutput {
	return o
}

func (o CommonExportPropertiesResponsePtrOutput) Elem() CommonExportPropertiesResponseOutput {
	return o.ApplyT(func(v *CommonExportPropertiesResponse) CommonExportPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret CommonExportPropertiesResponse
		return ret
	}).(CommonExportPropertiesResponseOutput)
}

// Has the definition for the export.
func (o CommonExportPropertiesResponsePtrOutput) Definition() ExportDefinitionResponsePtrOutput {
	return o.ApplyT(func(v *CommonExportPropertiesResponse) *ExportDefinitionResponse {
		if v == nil {
			return nil
		}
		return &v.Definition
	}).(ExportDefinitionResponsePtrOutput)
}

// Has delivery information for the export.
func (o CommonExportPropertiesResponsePtrOutput) DeliveryInfo() ExportDeliveryInfoResponsePtrOutput {
	return o.ApplyT(func(v *CommonExportPropertiesResponse) *ExportDeliveryInfoResponse {
		if v == nil {
			return nil
		}
		return &v.DeliveryInfo
	}).(ExportDeliveryInfoResponsePtrOutput)
}

// The format of the export being delivered. Currently only 'Csv' is supported.
func (o CommonExportPropertiesResponsePtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommonExportPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Format
	}).(pulumi.StringPtrOutput)
}

// If the export has an active schedule, provides an estimate of the next execution time.
func (o CommonExportPropertiesResponsePtrOutput) NextRunTimeEstimate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommonExportPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NextRunTimeEstimate
	}).(pulumi.StringPtrOutput)
}

// If requested, has the most recent execution history for the export.
func (o CommonExportPropertiesResponsePtrOutput) RunHistory() ExportExecutionListResultResponsePtrOutput {
	return o.ApplyT(func(v *CommonExportPropertiesResponse) *ExportExecutionListResultResponse {
		if v == nil {
			return nil
		}
		return v.RunHistory
	}).(ExportExecutionListResultResponsePtrOutput)
}

// Details of any error encountered on last collection attempt
type ConnectorCollectionErrorInfoResponse struct {
	// Short error code
	ErrorCode string `pulumi:"errorCode"`
	// External Provider error message
	ErrorInnerMessage string `pulumi:"errorInnerMessage"`
	// Detailed error message
	ErrorMessage string `pulumi:"errorMessage"`
	// Time the error started occurring (Last time error occurred in lastChecked)
	ErrorStartTime string `pulumi:"errorStartTime"`
}

// Details of any error encountered on last collection attempt
type ConnectorCollectionErrorInfoResponseOutput struct{ *pulumi.OutputState }

func (ConnectorCollectionErrorInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorCollectionErrorInfoResponse)(nil)).Elem()
}

func (o ConnectorCollectionErrorInfoResponseOutput) ToConnectorCollectionErrorInfoResponseOutput() ConnectorCollectionErrorInfoResponseOutput {
	return o
}

func (o ConnectorCollectionErrorInfoResponseOutput) ToConnectorCollectionErrorInfoResponseOutputWithContext(ctx context.Context) ConnectorCollectionErrorInfoResponseOutput {
	return o
}

// Short error code
func (o ConnectorCollectionErrorInfoResponseOutput) ErrorCode() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorCollectionErrorInfoResponse) string { return v.ErrorCode }).(pulumi.StringOutput)
}

// External Provider error message
func (o ConnectorCollectionErrorInfoResponseOutput) ErrorInnerMessage() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorCollectionErrorInfoResponse) string { return v.ErrorInnerMessage }).(pulumi.StringOutput)
}

// Detailed error message
func (o ConnectorCollectionErrorInfoResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorCollectionErrorInfoResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// Time the error started occurring (Last time error occurred in lastChecked)
func (o ConnectorCollectionErrorInfoResponseOutput) ErrorStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorCollectionErrorInfoResponse) string { return v.ErrorStartTime }).(pulumi.StringOutput)
}

type ConnectorCollectionErrorInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectorCollectionErrorInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorCollectionErrorInfoResponse)(nil)).Elem()
}

func (o ConnectorCollectionErrorInfoResponsePtrOutput) ToConnectorCollectionErrorInfoResponsePtrOutput() ConnectorCollectionErrorInfoResponsePtrOutput {
	return o
}

func (o ConnectorCollectionErrorInfoResponsePtrOutput) ToConnectorCollectionErrorInfoResponsePtrOutputWithContext(ctx context.Context) ConnectorCollectionErrorInfoResponsePtrOutput {
	return o
}

func (o ConnectorCollectionErrorInfoResponsePtrOutput) Elem() ConnectorCollectionErrorInfoResponseOutput {
	return o.ApplyT(func(v *ConnectorCollectionErrorInfoResponse) ConnectorCollectionErrorInfoResponse {
		if v != nil {
			return *v
		}
		var ret ConnectorCollectionErrorInfoResponse
		return ret
	}).(ConnectorCollectionErrorInfoResponseOutput)
}

// Short error code
func (o ConnectorCollectionErrorInfoResponsePtrOutput) ErrorCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorCollectionErrorInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ErrorCode
	}).(pulumi.StringPtrOutput)
}

// External Provider error message
func (o ConnectorCollectionErrorInfoResponsePtrOutput) ErrorInnerMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorCollectionErrorInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ErrorInnerMessage
	}).(pulumi.StringPtrOutput)
}

// Detailed error message
func (o ConnectorCollectionErrorInfoResponsePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorCollectionErrorInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// Time the error started occurring (Last time error occurred in lastChecked)
func (o ConnectorCollectionErrorInfoResponsePtrOutput) ErrorStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorCollectionErrorInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ErrorStartTime
	}).(pulumi.StringPtrOutput)
}

// Collection and ingestion information
type ConnectorCollectionInfoResponse struct {
	// Error information of last collection
	Error *ConnectorCollectionErrorInfoResponse `pulumi:"error"`
	// Last time the data acquisition process initiated connecting to the external provider
	LastChecked string `pulumi:"lastChecked"`
	// Last time the external data was updated into Azure
	LastUpdated string `pulumi:"lastUpdated"`
	// Source timestamp of external data currently available in Azure (eg AWS last processed CUR file timestamp)
	SourceLastUpdated string `pulumi:"sourceLastUpdated"`
}

// Collection and ingestion information
type ConnectorCollectionInfoResponseOutput struct{ *pulumi.OutputState }

func (ConnectorCollectionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorCollectionInfoResponse)(nil)).Elem()
}

func (o ConnectorCollectionInfoResponseOutput) ToConnectorCollectionInfoResponseOutput() ConnectorCollectionInfoResponseOutput {
	return o
}

func (o ConnectorCollectionInfoResponseOutput) ToConnectorCollectionInfoResponseOutputWithContext(ctx context.Context) ConnectorCollectionInfoResponseOutput {
	return o
}

// Error information of last collection
func (o ConnectorCollectionInfoResponseOutput) Error() ConnectorCollectionErrorInfoResponsePtrOutput {
	return o.ApplyT(func(v ConnectorCollectionInfoResponse) *ConnectorCollectionErrorInfoResponse { return v.Error }).(ConnectorCollectionErrorInfoResponsePtrOutput)
}

// Last time the data acquisition process initiated connecting to the external provider
func (o ConnectorCollectionInfoResponseOutput) LastChecked() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorCollectionInfoResponse) string { return v.LastChecked }).(pulumi.StringOutput)
}

// Last time the external data was updated into Azure
func (o ConnectorCollectionInfoResponseOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorCollectionInfoResponse) string { return v.LastUpdated }).(pulumi.StringOutput)
}

// Source timestamp of external data currently available in Azure (eg AWS last processed CUR file timestamp)
func (o ConnectorCollectionInfoResponseOutput) SourceLastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorCollectionInfoResponse) string { return v.SourceLastUpdated }).(pulumi.StringOutput)
}

// Target resources and allocation
type CostAllocationProportion struct {
	// Target resource for cost allocation
	Name string `pulumi:"name"`
	// Percentage of source cost to allocate to this resource. This value can be specified to two decimal places and the total percentage of all resources in this rule must sum to 100.00.
	Percentage float64 `pulumi:"percentage"`
}

// CostAllocationProportionInput is an input type that accepts CostAllocationProportionArgs and CostAllocationProportionOutput values.
// You can construct a concrete instance of `CostAllocationProportionInput` via:
//
//	CostAllocationProportionArgs{...}
type CostAllocationProportionInput interface {
	pulumi.Input

	ToCostAllocationProportionOutput() CostAllocationProportionOutput
	ToCostAllocationProportionOutputWithContext(context.Context) CostAllocationProportionOutput
}

// Target resources and allocation
type CostAllocationProportionArgs struct {
	// Target resource for cost allocation
	Name pulumi.StringInput `pulumi:"name"`
	// Percentage of source cost to allocate to this resource. This value can be specified to two decimal places and the total percentage of all resources in this rule must sum to 100.00.
	Percentage pulumi.Float64Input `pulumi:"percentage"`
}

func (CostAllocationProportionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationProportion)(nil)).Elem()
}

func (i CostAllocationProportionArgs) ToCostAllocationProportionOutput() CostAllocationProportionOutput {
	return i.ToCostAllocationProportionOutputWithContext(context.Background())
}

func (i CostAllocationProportionArgs) ToCostAllocationProportionOutputWithContext(ctx context.Context) CostAllocationProportionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationProportionOutput)
}

// CostAllocationProportionArrayInput is an input type that accepts CostAllocationProportionArray and CostAllocationProportionArrayOutput values.
// You can construct a concrete instance of `CostAllocationProportionArrayInput` via:
//
//	CostAllocationProportionArray{ CostAllocationProportionArgs{...} }
type CostAllocationProportionArrayInput interface {
	pulumi.Input

	ToCostAllocationProportionArrayOutput() CostAllocationProportionArrayOutput
	ToCostAllocationProportionArrayOutputWithContext(context.Context) CostAllocationProportionArrayOutput
}

type CostAllocationProportionArray []CostAllocationProportionInput

func (CostAllocationProportionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CostAllocationProportion)(nil)).Elem()
}

func (i CostAllocationProportionArray) ToCostAllocationProportionArrayOutput() CostAllocationProportionArrayOutput {
	return i.ToCostAllocationProportionArrayOutputWithContext(context.Background())
}

func (i CostAllocationProportionArray) ToCostAllocationProportionArrayOutputWithContext(ctx context.Context) CostAllocationProportionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationProportionArrayOutput)
}

// Target resources and allocation
type CostAllocationProportionOutput struct{ *pulumi.OutputState }

func (CostAllocationProportionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationProportion)(nil)).Elem()
}

func (o CostAllocationProportionOutput) ToCostAllocationProportionOutput() CostAllocationProportionOutput {
	return o
}

func (o CostAllocationProportionOutput) ToCostAllocationProportionOutputWithContext(ctx context.Context) CostAllocationProportionOutput {
	return o
}

// Target resource for cost allocation
func (o CostAllocationProportionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CostAllocationProportion) string { return v.Name }).(pulumi.StringOutput)
}

// Percentage of source cost to allocate to this resource. This value can be specified to two decimal places and the total percentage of all resources in this rule must sum to 100.00.
func (o CostAllocationProportionOutput) Percentage() pulumi.Float64Output {
	return o.ApplyT(func(v CostAllocationProportion) float64 { return v.Percentage }).(pulumi.Float64Output)
}

type CostAllocationProportionArrayOutput struct{ *pulumi.OutputState }

func (CostAllocationProportionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CostAllocationProportion)(nil)).Elem()
}

func (o CostAllocationProportionArrayOutput) ToCostAllocationProportionArrayOutput() CostAllocationProportionArrayOutput {
	return o
}

func (o CostAllocationProportionArrayOutput) ToCostAllocationProportionArrayOutputWithContext(ctx context.Context) CostAllocationProportionArrayOutput {
	return o
}

func (o CostAllocationProportionArrayOutput) Index(i pulumi.IntInput) CostAllocationProportionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CostAllocationProportion {
		return vs[0].([]CostAllocationProportion)[vs[1].(int)]
	}).(CostAllocationProportionOutput)
}

// Target resources and allocation
type CostAllocationProportionResponse struct {
	// Target resource for cost allocation
	Name string `pulumi:"name"`
	// Percentage of source cost to allocate to this resource. This value can be specified to two decimal places and the total percentage of all resources in this rule must sum to 100.00.
	Percentage float64 `pulumi:"percentage"`
}

// Target resources and allocation
type CostAllocationProportionResponseOutput struct{ *pulumi.OutputState }

func (CostAllocationProportionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationProportionResponse)(nil)).Elem()
}

func (o CostAllocationProportionResponseOutput) ToCostAllocationProportionResponseOutput() CostAllocationProportionResponseOutput {
	return o
}

func (o CostAllocationProportionResponseOutput) ToCostAllocationProportionResponseOutputWithContext(ctx context.Context) CostAllocationProportionResponseOutput {
	return o
}

// Target resource for cost allocation
func (o CostAllocationProportionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CostAllocationProportionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Percentage of source cost to allocate to this resource. This value can be specified to two decimal places and the total percentage of all resources in this rule must sum to 100.00.
func (o CostAllocationProportionResponseOutput) Percentage() pulumi.Float64Output {
	return o.ApplyT(func(v CostAllocationProportionResponse) float64 { return v.Percentage }).(pulumi.Float64Output)
}

type CostAllocationProportionResponseArrayOutput struct{ *pulumi.OutputState }

func (CostAllocationProportionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CostAllocationProportionResponse)(nil)).Elem()
}

func (o CostAllocationProportionResponseArrayOutput) ToCostAllocationProportionResponseArrayOutput() CostAllocationProportionResponseArrayOutput {
	return o
}

func (o CostAllocationProportionResponseArrayOutput) ToCostAllocationProportionResponseArrayOutputWithContext(ctx context.Context) CostAllocationProportionResponseArrayOutput {
	return o
}

func (o CostAllocationProportionResponseArrayOutput) Index(i pulumi.IntInput) CostAllocationProportionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CostAllocationProportionResponse {
		return vs[0].([]CostAllocationProportionResponse)[vs[1].(int)]
	}).(CostAllocationProportionResponseOutput)
}

// Resource details of the cost allocation rule
type CostAllocationRuleDetails struct {
	// Source resources for cost allocation. At this time, this list can contain no more than one element.
	SourceResources []SourceCostAllocationResource `pulumi:"sourceResources"`
	// Target resources for cost allocation. At this time, this list can contain no more than one element.
	TargetResources []TargetCostAllocationResource `pulumi:"targetResources"`
}

// CostAllocationRuleDetailsInput is an input type that accepts CostAllocationRuleDetailsArgs and CostAllocationRuleDetailsOutput values.
// You can construct a concrete instance of `CostAllocationRuleDetailsInput` via:
//
//	CostAllocationRuleDetailsArgs{...}
type CostAllocationRuleDetailsInput interface {
	pulumi.Input

	ToCostAllocationRuleDetailsOutput() CostAllocationRuleDetailsOutput
	ToCostAllocationRuleDetailsOutputWithContext(context.Context) CostAllocationRuleDetailsOutput
}

// Resource details of the cost allocation rule
type CostAllocationRuleDetailsArgs struct {
	// Source resources for cost allocation. At this time, this list can contain no more than one element.
	SourceResources SourceCostAllocationResourceArrayInput `pulumi:"sourceResources"`
	// Target resources for cost allocation. At this time, this list can contain no more than one element.
	TargetResources TargetCostAllocationResourceArrayInput `pulumi:"targetResources"`
}

func (CostAllocationRuleDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationRuleDetails)(nil)).Elem()
}

func (i CostAllocationRuleDetailsArgs) ToCostAllocationRuleDetailsOutput() CostAllocationRuleDetailsOutput {
	return i.ToCostAllocationRuleDetailsOutputWithContext(context.Background())
}

func (i CostAllocationRuleDetailsArgs) ToCostAllocationRuleDetailsOutputWithContext(ctx context.Context) CostAllocationRuleDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationRuleDetailsOutput)
}

func (i CostAllocationRuleDetailsArgs) ToCostAllocationRuleDetailsPtrOutput() CostAllocationRuleDetailsPtrOutput {
	return i.ToCostAllocationRuleDetailsPtrOutputWithContext(context.Background())
}

func (i CostAllocationRuleDetailsArgs) ToCostAllocationRuleDetailsPtrOutputWithContext(ctx context.Context) CostAllocationRuleDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationRuleDetailsOutput).ToCostAllocationRuleDetailsPtrOutputWithContext(ctx)
}

// CostAllocationRuleDetailsPtrInput is an input type that accepts CostAllocationRuleDetailsArgs, CostAllocationRuleDetailsPtr and CostAllocationRuleDetailsPtrOutput values.
// You can construct a concrete instance of `CostAllocationRuleDetailsPtrInput` via:
//
//	        CostAllocationRuleDetailsArgs{...}
//
//	or:
//
//	        nil
type CostAllocationRuleDetailsPtrInput interface {
	pulumi.Input

	ToCostAllocationRuleDetailsPtrOutput() CostAllocationRuleDetailsPtrOutput
	ToCostAllocationRuleDetailsPtrOutputWithContext(context.Context) CostAllocationRuleDetailsPtrOutput
}

type costAllocationRuleDetailsPtrType CostAllocationRuleDetailsArgs

func CostAllocationRuleDetailsPtr(v *CostAllocationRuleDetailsArgs) CostAllocationRuleDetailsPtrInput {
	return (*costAllocationRuleDetailsPtrType)(v)
}

func (*costAllocationRuleDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostAllocationRuleDetails)(nil)).Elem()
}

func (i *costAllocationRuleDetailsPtrType) ToCostAllocationRuleDetailsPtrOutput() CostAllocationRuleDetailsPtrOutput {
	return i.ToCostAllocationRuleDetailsPtrOutputWithContext(context.Background())
}

func (i *costAllocationRuleDetailsPtrType) ToCostAllocationRuleDetailsPtrOutputWithContext(ctx context.Context) CostAllocationRuleDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationRuleDetailsPtrOutput)
}

// Resource details of the cost allocation rule
type CostAllocationRuleDetailsOutput struct{ *pulumi.OutputState }

func (CostAllocationRuleDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationRuleDetails)(nil)).Elem()
}

func (o CostAllocationRuleDetailsOutput) ToCostAllocationRuleDetailsOutput() CostAllocationRuleDetailsOutput {
	return o
}

func (o CostAllocationRuleDetailsOutput) ToCostAllocationRuleDetailsOutputWithContext(ctx context.Context) CostAllocationRuleDetailsOutput {
	return o
}

func (o CostAllocationRuleDetailsOutput) ToCostAllocationRuleDetailsPtrOutput() CostAllocationRuleDetailsPtrOutput {
	return o.ToCostAllocationRuleDetailsPtrOutputWithContext(context.Background())
}

func (o CostAllocationRuleDetailsOutput) ToCostAllocationRuleDetailsPtrOutputWithContext(ctx context.Context) CostAllocationRuleDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostAllocationRuleDetails) *CostAllocationRuleDetails {
		return &v
	}).(CostAllocationRuleDetailsPtrOutput)
}

// Source resources for cost allocation. At this time, this list can contain no more than one element.
func (o CostAllocationRuleDetailsOutput) SourceResources() SourceCostAllocationResourceArrayOutput {
	return o.ApplyT(func(v CostAllocationRuleDetails) []SourceCostAllocationResource { return v.SourceResources }).(SourceCostAllocationResourceArrayOutput)
}

// Target resources for cost allocation. At this time, this list can contain no more than one element.
func (o CostAllocationRuleDetailsOutput) TargetResources() TargetCostAllocationResourceArrayOutput {
	return o.ApplyT(func(v CostAllocationRuleDetails) []TargetCostAllocationResource { return v.TargetResources }).(TargetCostAllocationResourceArrayOutput)
}

type CostAllocationRuleDetailsPtrOutput struct{ *pulumi.OutputState }

func (CostAllocationRuleDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostAllocationRuleDetails)(nil)).Elem()
}

func (o CostAllocationRuleDetailsPtrOutput) ToCostAllocationRuleDetailsPtrOutput() CostAllocationRuleDetailsPtrOutput {
	return o
}

func (o CostAllocationRuleDetailsPtrOutput) ToCostAllocationRuleDetailsPtrOutputWithContext(ctx context.Context) CostAllocationRuleDetailsPtrOutput {
	return o
}

func (o CostAllocationRuleDetailsPtrOutput) Elem() CostAllocationRuleDetailsOutput {
	return o.ApplyT(func(v *CostAllocationRuleDetails) CostAllocationRuleDetails {
		if v != nil {
			return *v
		}
		var ret CostAllocationRuleDetails
		return ret
	}).(CostAllocationRuleDetailsOutput)
}

// Source resources for cost allocation. At this time, this list can contain no more than one element.
func (o CostAllocationRuleDetailsPtrOutput) SourceResources() SourceCostAllocationResourceArrayOutput {
	return o.ApplyT(func(v *CostAllocationRuleDetails) []SourceCostAllocationResource {
		if v == nil {
			return nil
		}
		return v.SourceResources
	}).(SourceCostAllocationResourceArrayOutput)
}

// Target resources for cost allocation. At this time, this list can contain no more than one element.
func (o CostAllocationRuleDetailsPtrOutput) TargetResources() TargetCostAllocationResourceArrayOutput {
	return o.ApplyT(func(v *CostAllocationRuleDetails) []TargetCostAllocationResource {
		if v == nil {
			return nil
		}
		return v.TargetResources
	}).(TargetCostAllocationResourceArrayOutput)
}

// Resource details of the cost allocation rule
type CostAllocationRuleDetailsResponse struct {
	// Source resources for cost allocation. At this time, this list can contain no more than one element.
	SourceResources []SourceCostAllocationResourceResponse `pulumi:"sourceResources"`
	// Target resources for cost allocation. At this time, this list can contain no more than one element.
	TargetResources []TargetCostAllocationResourceResponse `pulumi:"targetResources"`
}

// Resource details of the cost allocation rule
type CostAllocationRuleDetailsResponseOutput struct{ *pulumi.OutputState }

func (CostAllocationRuleDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationRuleDetailsResponse)(nil)).Elem()
}

func (o CostAllocationRuleDetailsResponseOutput) ToCostAllocationRuleDetailsResponseOutput() CostAllocationRuleDetailsResponseOutput {
	return o
}

func (o CostAllocationRuleDetailsResponseOutput) ToCostAllocationRuleDetailsResponseOutputWithContext(ctx context.Context) CostAllocationRuleDetailsResponseOutput {
	return o
}

// Source resources for cost allocation. At this time, this list can contain no more than one element.
func (o CostAllocationRuleDetailsResponseOutput) SourceResources() SourceCostAllocationResourceResponseArrayOutput {
	return o.ApplyT(func(v CostAllocationRuleDetailsResponse) []SourceCostAllocationResourceResponse {
		return v.SourceResources
	}).(SourceCostAllocationResourceResponseArrayOutput)
}

// Target resources for cost allocation. At this time, this list can contain no more than one element.
func (o CostAllocationRuleDetailsResponseOutput) TargetResources() TargetCostAllocationResourceResponseArrayOutput {
	return o.ApplyT(func(v CostAllocationRuleDetailsResponse) []TargetCostAllocationResourceResponse {
		return v.TargetResources
	}).(TargetCostAllocationResourceResponseArrayOutput)
}

// The properties of a cost allocation rule
type CostAllocationRuleProperties struct {
	// Description of a cost allocation rule.
	Description *string `pulumi:"description"`
	// Resource information for the cost allocation rule
	Details CostAllocationRuleDetails `pulumi:"details"`
	// Status of the rule
	Status string `pulumi:"status"`
}

// CostAllocationRulePropertiesInput is an input type that accepts CostAllocationRulePropertiesArgs and CostAllocationRulePropertiesOutput values.
// You can construct a concrete instance of `CostAllocationRulePropertiesInput` via:
//
//	CostAllocationRulePropertiesArgs{...}
type CostAllocationRulePropertiesInput interface {
	pulumi.Input

	ToCostAllocationRulePropertiesOutput() CostAllocationRulePropertiesOutput
	ToCostAllocationRulePropertiesOutputWithContext(context.Context) CostAllocationRulePropertiesOutput
}

// The properties of a cost allocation rule
type CostAllocationRulePropertiesArgs struct {
	// Description of a cost allocation rule.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Resource information for the cost allocation rule
	Details CostAllocationRuleDetailsInput `pulumi:"details"`
	// Status of the rule
	Status pulumi.StringInput `pulumi:"status"`
}

func (CostAllocationRulePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationRuleProperties)(nil)).Elem()
}

func (i CostAllocationRulePropertiesArgs) ToCostAllocationRulePropertiesOutput() CostAllocationRulePropertiesOutput {
	return i.ToCostAllocationRulePropertiesOutputWithContext(context.Background())
}

func (i CostAllocationRulePropertiesArgs) ToCostAllocationRulePropertiesOutputWithContext(ctx context.Context) CostAllocationRulePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationRulePropertiesOutput)
}

func (i CostAllocationRulePropertiesArgs) ToCostAllocationRulePropertiesPtrOutput() CostAllocationRulePropertiesPtrOutput {
	return i.ToCostAllocationRulePropertiesPtrOutputWithContext(context.Background())
}

func (i CostAllocationRulePropertiesArgs) ToCostAllocationRulePropertiesPtrOutputWithContext(ctx context.Context) CostAllocationRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationRulePropertiesOutput).ToCostAllocationRulePropertiesPtrOutputWithContext(ctx)
}

// CostAllocationRulePropertiesPtrInput is an input type that accepts CostAllocationRulePropertiesArgs, CostAllocationRulePropertiesPtr and CostAllocationRulePropertiesPtrOutput values.
// You can construct a concrete instance of `CostAllocationRulePropertiesPtrInput` via:
//
//	        CostAllocationRulePropertiesArgs{...}
//
//	or:
//
//	        nil
type CostAllocationRulePropertiesPtrInput interface {
	pulumi.Input

	ToCostAllocationRulePropertiesPtrOutput() CostAllocationRulePropertiesPtrOutput
	ToCostAllocationRulePropertiesPtrOutputWithContext(context.Context) CostAllocationRulePropertiesPtrOutput
}

type costAllocationRulePropertiesPtrType CostAllocationRulePropertiesArgs

func CostAllocationRulePropertiesPtr(v *CostAllocationRulePropertiesArgs) CostAllocationRulePropertiesPtrInput {
	return (*costAllocationRulePropertiesPtrType)(v)
}

func (*costAllocationRulePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostAllocationRuleProperties)(nil)).Elem()
}

func (i *costAllocationRulePropertiesPtrType) ToCostAllocationRulePropertiesPtrOutput() CostAllocationRulePropertiesPtrOutput {
	return i.ToCostAllocationRulePropertiesPtrOutputWithContext(context.Background())
}

func (i *costAllocationRulePropertiesPtrType) ToCostAllocationRulePropertiesPtrOutputWithContext(ctx context.Context) CostAllocationRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationRulePropertiesPtrOutput)
}

// The properties of a cost allocation rule
type CostAllocationRulePropertiesOutput struct{ *pulumi.OutputState }

func (CostAllocationRulePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationRuleProperties)(nil)).Elem()
}

func (o CostAllocationRulePropertiesOutput) ToCostAllocationRulePropertiesOutput() CostAllocationRulePropertiesOutput {
	return o
}

func (o CostAllocationRulePropertiesOutput) ToCostAllocationRulePropertiesOutputWithContext(ctx context.Context) CostAllocationRulePropertiesOutput {
	return o
}

func (o CostAllocationRulePropertiesOutput) ToCostAllocationRulePropertiesPtrOutput() CostAllocationRulePropertiesPtrOutput {
	return o.ToCostAllocationRulePropertiesPtrOutputWithContext(context.Background())
}

func (o CostAllocationRulePropertiesOutput) ToCostAllocationRulePropertiesPtrOutputWithContext(ctx context.Context) CostAllocationRulePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostAllocationRuleProperties) *CostAllocationRuleProperties {
		return &v
	}).(CostAllocationRulePropertiesPtrOutput)
}

// Description of a cost allocation rule.
func (o CostAllocationRulePropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostAllocationRuleProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Resource information for the cost allocation rule
func (o CostAllocationRulePropertiesOutput) Details() CostAllocationRuleDetailsOutput {
	return o.ApplyT(func(v CostAllocationRuleProperties) CostAllocationRuleDetails { return v.Details }).(CostAllocationRuleDetailsOutput)
}

// Status of the rule
func (o CostAllocationRulePropertiesOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v CostAllocationRuleProperties) string { return v.Status }).(pulumi.StringOutput)
}

type CostAllocationRulePropertiesPtrOutput struct{ *pulumi.OutputState }

func (CostAllocationRulePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostAllocationRuleProperties)(nil)).Elem()
}

func (o CostAllocationRulePropertiesPtrOutput) ToCostAllocationRulePropertiesPtrOutput() CostAllocationRulePropertiesPtrOutput {
	return o
}

func (o CostAllocationRulePropertiesPtrOutput) ToCostAllocationRulePropertiesPtrOutputWithContext(ctx context.Context) CostAllocationRulePropertiesPtrOutput {
	return o
}

func (o CostAllocationRulePropertiesPtrOutput) Elem() CostAllocationRulePropertiesOutput {
	return o.ApplyT(func(v *CostAllocationRuleProperties) CostAllocationRuleProperties {
		if v != nil {
			return *v
		}
		var ret CostAllocationRuleProperties
		return ret
	}).(CostAllocationRulePropertiesOutput)
}

// Description of a cost allocation rule.
func (o CostAllocationRulePropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostAllocationRuleProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Resource information for the cost allocation rule
func (o CostAllocationRulePropertiesPtrOutput) Details() CostAllocationRuleDetailsPtrOutput {
	return o.ApplyT(func(v *CostAllocationRuleProperties) *CostAllocationRuleDetails {
		if v == nil {
			return nil
		}
		return &v.Details
	}).(CostAllocationRuleDetailsPtrOutput)
}

// Status of the rule
func (o CostAllocationRulePropertiesPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostAllocationRuleProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// The properties of a cost allocation rule
type CostAllocationRulePropertiesResponse struct {
	// Time at which the rule was created. Rules that change cost for the same resource are applied in order of creation.
	CreatedDate string `pulumi:"createdDate"`
	// Description of a cost allocation rule.
	Description *string `pulumi:"description"`
	// Resource information for the cost allocation rule
	Details CostAllocationRuleDetailsResponse `pulumi:"details"`
	// Status of the rule
	Status string `pulumi:"status"`
	// Time at which the rule was last updated.
	UpdatedDate string `pulumi:"updatedDate"`
}

// The properties of a cost allocation rule
type CostAllocationRulePropertiesResponseOutput struct{ *pulumi.OutputState }

func (CostAllocationRulePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationRulePropertiesResponse)(nil)).Elem()
}

func (o CostAllocationRulePropertiesResponseOutput) ToCostAllocationRulePropertiesResponseOutput() CostAllocationRulePropertiesResponseOutput {
	return o
}

func (o CostAllocationRulePropertiesResponseOutput) ToCostAllocationRulePropertiesResponseOutputWithContext(ctx context.Context) CostAllocationRulePropertiesResponseOutput {
	return o
}

// Time at which the rule was created. Rules that change cost for the same resource are applied in order of creation.
func (o CostAllocationRulePropertiesResponseOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v CostAllocationRulePropertiesResponse) string { return v.CreatedDate }).(pulumi.StringOutput)
}

// Description of a cost allocation rule.
func (o CostAllocationRulePropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostAllocationRulePropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Resource information for the cost allocation rule
func (o CostAllocationRulePropertiesResponseOutput) Details() CostAllocationRuleDetailsResponseOutput {
	return o.ApplyT(func(v CostAllocationRulePropertiesResponse) CostAllocationRuleDetailsResponse { return v.Details }).(CostAllocationRuleDetailsResponseOutput)
}

// Status of the rule
func (o CostAllocationRulePropertiesResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v CostAllocationRulePropertiesResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Time at which the rule was last updated.
func (o CostAllocationRulePropertiesResponseOutput) UpdatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v CostAllocationRulePropertiesResponse) string { return v.UpdatedDate }).(pulumi.StringOutput)
}

// The details of the error.
type ErrorDetailsResponse struct {
	// Error code.
	Code string `pulumi:"code"`
	// Error message indicating why the operation failed.
	Message string `pulumi:"message"`
}

// The details of the error.
type ErrorDetailsResponseOutput struct{ *pulumi.OutputState }

func (ErrorDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorDetailsResponse)(nil)).Elem()
}

func (o ErrorDetailsResponseOutput) ToErrorDetailsResponseOutput() ErrorDetailsResponseOutput {
	return o
}

func (o ErrorDetailsResponseOutput) ToErrorDetailsResponseOutputWithContext(ctx context.Context) ErrorDetailsResponseOutput {
	return o
}

// Error code.
func (o ErrorDetailsResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailsResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Error message indicating why the operation failed.
func (o ErrorDetailsResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailsResponse) string { return v.Message }).(pulumi.StringOutput)
}

type ErrorDetailsResponsePtrOutput struct{ *pulumi.OutputState }

func (ErrorDetailsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorDetailsResponse)(nil)).Elem()
}

func (o ErrorDetailsResponsePtrOutput) ToErrorDetailsResponsePtrOutput() ErrorDetailsResponsePtrOutput {
	return o
}

func (o ErrorDetailsResponsePtrOutput) ToErrorDetailsResponsePtrOutputWithContext(ctx context.Context) ErrorDetailsResponsePtrOutput {
	return o
}

func (o ErrorDetailsResponsePtrOutput) Elem() ErrorDetailsResponseOutput {
	return o.ApplyT(func(v *ErrorDetailsResponse) ErrorDetailsResponse {
		if v != nil {
			return *v
		}
		var ret ErrorDetailsResponse
		return ret
	}).(ErrorDetailsResponseOutput)
}

// Error code.
func (o ErrorDetailsResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

// Error message indicating why the operation failed.
func (o ErrorDetailsResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

// The definition for data in the export.
type ExportDataset struct {
	// The export dataset configuration.
	Configuration *ExportDatasetConfiguration `pulumi:"configuration"`
	// The granularity of rows in the export. Currently only 'Daily' is supported.
	Granularity *string `pulumi:"granularity"`
}

// ExportDatasetInput is an input type that accepts ExportDatasetArgs and ExportDatasetOutput values.
// You can construct a concrete instance of `ExportDatasetInput` via:
//
//	ExportDatasetArgs{...}
type ExportDatasetInput interface {
	pulumi.Input

	ToExportDatasetOutput() ExportDatasetOutput
	ToExportDatasetOutputWithContext(context.Context) ExportDatasetOutput
}

// The definition for data in the export.
type ExportDatasetArgs struct {
	// The export dataset configuration.
	Configuration ExportDatasetConfigurationPtrInput `pulumi:"configuration"`
	// The granularity of rows in the export. Currently only 'Daily' is supported.
	Granularity pulumi.StringPtrInput `pulumi:"granularity"`
}

func (ExportDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDataset)(nil)).Elem()
}

func (i ExportDatasetArgs) ToExportDatasetOutput() ExportDatasetOutput {
	return i.ToExportDatasetOutputWithContext(context.Background())
}

func (i ExportDatasetArgs) ToExportDatasetOutputWithContext(ctx context.Context) ExportDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDatasetOutput)
}

func (i ExportDatasetArgs) ToExportDatasetPtrOutput() ExportDatasetPtrOutput {
	return i.ToExportDatasetPtrOutputWithContext(context.Background())
}

func (i ExportDatasetArgs) ToExportDatasetPtrOutputWithContext(ctx context.Context) ExportDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDatasetOutput).ToExportDatasetPtrOutputWithContext(ctx)
}

// ExportDatasetPtrInput is an input type that accepts ExportDatasetArgs, ExportDatasetPtr and ExportDatasetPtrOutput values.
// You can construct a concrete instance of `ExportDatasetPtrInput` via:
//
//	        ExportDatasetArgs{...}
//
//	or:
//
//	        nil
type ExportDatasetPtrInput interface {
	pulumi.Input

	ToExportDatasetPtrOutput() ExportDatasetPtrOutput
	ToExportDatasetPtrOutputWithContext(context.Context) ExportDatasetPtrOutput
}

type exportDatasetPtrType ExportDatasetArgs

func ExportDatasetPtr(v *ExportDatasetArgs) ExportDatasetPtrInput {
	return (*exportDatasetPtrType)(v)
}

func (*exportDatasetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDataset)(nil)).Elem()
}

func (i *exportDatasetPtrType) ToExportDatasetPtrOutput() ExportDatasetPtrOutput {
	return i.ToExportDatasetPtrOutputWithContext(context.Background())
}

func (i *exportDatasetPtrType) ToExportDatasetPtrOutputWithContext(ctx context.Context) ExportDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDatasetPtrOutput)
}

// The definition for data in the export.
type ExportDatasetOutput struct{ *pulumi.OutputState }

func (ExportDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDataset)(nil)).Elem()
}

func (o ExportDatasetOutput) ToExportDatasetOutput() ExportDatasetOutput {
	return o
}

func (o ExportDatasetOutput) ToExportDatasetOutputWithContext(ctx context.Context) ExportDatasetOutput {
	return o
}

func (o ExportDatasetOutput) ToExportDatasetPtrOutput() ExportDatasetPtrOutput {
	return o.ToExportDatasetPtrOutputWithContext(context.Background())
}

func (o ExportDatasetOutput) ToExportDatasetPtrOutputWithContext(ctx context.Context) ExportDatasetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExportDataset) *ExportDataset {
		return &v
	}).(ExportDatasetPtrOutput)
}

// The export dataset configuration.
func (o ExportDatasetOutput) Configuration() ExportDatasetConfigurationPtrOutput {
	return o.ApplyT(func(v ExportDataset) *ExportDatasetConfiguration { return v.Configuration }).(ExportDatasetConfigurationPtrOutput)
}

// The granularity of rows in the export. Currently only 'Daily' is supported.
func (o ExportDatasetOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportDataset) *string { return v.Granularity }).(pulumi.StringPtrOutput)
}

type ExportDatasetPtrOutput struct{ *pulumi.OutputState }

func (ExportDatasetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDataset)(nil)).Elem()
}

func (o ExportDatasetPtrOutput) ToExportDatasetPtrOutput() ExportDatasetPtrOutput {
	return o
}

func (o ExportDatasetPtrOutput) ToExportDatasetPtrOutputWithContext(ctx context.Context) ExportDatasetPtrOutput {
	return o
}

func (o ExportDatasetPtrOutput) Elem() ExportDatasetOutput {
	return o.ApplyT(func(v *ExportDataset) ExportDataset {
		if v != nil {
			return *v
		}
		var ret ExportDataset
		return ret
	}).(ExportDatasetOutput)
}

// The export dataset configuration.
func (o ExportDatasetPtrOutput) Configuration() ExportDatasetConfigurationPtrOutput {
	return o.ApplyT(func(v *ExportDataset) *ExportDatasetConfiguration {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ExportDatasetConfigurationPtrOutput)
}

// The granularity of rows in the export. Currently only 'Daily' is supported.
func (o ExportDatasetPtrOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDataset) *string {
		if v == nil {
			return nil
		}
		return v.Granularity
	}).(pulumi.StringPtrOutput)
}

// The export dataset configuration. Allows columns to be selected for the export. If not provided then the export will include all available columns.
type ExportDatasetConfiguration struct {
	// Array of column names to be included in the export. If not provided then the export will include all available columns. The available columns can vary by customer channel (see examples).
	Columns []string `pulumi:"columns"`
}

// ExportDatasetConfigurationInput is an input type that accepts ExportDatasetConfigurationArgs and ExportDatasetConfigurationOutput values.
// You can construct a concrete instance of `ExportDatasetConfigurationInput` via:
//
//	ExportDatasetConfigurationArgs{...}
type ExportDatasetConfigurationInput interface {
	pulumi.Input

	ToExportDatasetConfigurationOutput() ExportDatasetConfigurationOutput
	ToExportDatasetConfigurationOutputWithContext(context.Context) ExportDatasetConfigurationOutput
}

// The export dataset configuration. Allows columns to be selected for the export. If not provided then the export will include all available columns.
type ExportDatasetConfigurationArgs struct {
	// Array of column names to be included in the export. If not provided then the export will include all available columns. The available columns can vary by customer channel (see examples).
	Columns pulumi.StringArrayInput `pulumi:"columns"`
}

func (ExportDatasetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDatasetConfiguration)(nil)).Elem()
}

func (i ExportDatasetConfigurationArgs) ToExportDatasetConfigurationOutput() ExportDatasetConfigurationOutput {
	return i.ToExportDatasetConfigurationOutputWithContext(context.Background())
}

func (i ExportDatasetConfigurationArgs) ToExportDatasetConfigurationOutputWithContext(ctx context.Context) ExportDatasetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDatasetConfigurationOutput)
}

func (i ExportDatasetConfigurationArgs) ToExportDatasetConfigurationPtrOutput() ExportDatasetConfigurationPtrOutput {
	return i.ToExportDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (i ExportDatasetConfigurationArgs) ToExportDatasetConfigurationPtrOutputWithContext(ctx context.Context) ExportDatasetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDatasetConfigurationOutput).ToExportDatasetConfigurationPtrOutputWithContext(ctx)
}

// ExportDatasetConfigurationPtrInput is an input type that accepts ExportDatasetConfigurationArgs, ExportDatasetConfigurationPtr and ExportDatasetConfigurationPtrOutput values.
// You can construct a concrete instance of `ExportDatasetConfigurationPtrInput` via:
//
//	        ExportDatasetConfigurationArgs{...}
//
//	or:
//
//	        nil
type ExportDatasetConfigurationPtrInput interface {
	pulumi.Input

	ToExportDatasetConfigurationPtrOutput() ExportDatasetConfigurationPtrOutput
	ToExportDatasetConfigurationPtrOutputWithContext(context.Context) ExportDatasetConfigurationPtrOutput
}

type exportDatasetConfigurationPtrType ExportDatasetConfigurationArgs

func ExportDatasetConfigurationPtr(v *ExportDatasetConfigurationArgs) ExportDatasetConfigurationPtrInput {
	return (*exportDatasetConfigurationPtrType)(v)
}

func (*exportDatasetConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDatasetConfiguration)(nil)).Elem()
}

func (i *exportDatasetConfigurationPtrType) ToExportDatasetConfigurationPtrOutput() ExportDatasetConfigurationPtrOutput {
	return i.ToExportDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (i *exportDatasetConfigurationPtrType) ToExportDatasetConfigurationPtrOutputWithContext(ctx context.Context) ExportDatasetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDatasetConfigurationPtrOutput)
}

// The export dataset configuration. Allows columns to be selected for the export. If not provided then the export will include all available columns.
type ExportDatasetConfigurationOutput struct{ *pulumi.OutputState }

func (ExportDatasetConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDatasetConfiguration)(nil)).Elem()
}

func (o ExportDatasetConfigurationOutput) ToExportDatasetConfigurationOutput() ExportDatasetConfigurationOutput {
	return o
}

func (o ExportDatasetConfigurationOutput) ToExportDatasetConfigurationOutputWithContext(ctx context.Context) ExportDatasetConfigurationOutput {
	return o
}

func (o ExportDatasetConfigurationOutput) ToExportDatasetConfigurationPtrOutput() ExportDatasetConfigurationPtrOutput {
	return o.ToExportDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (o ExportDatasetConfigurationOutput) ToExportDatasetConfigurationPtrOutputWithContext(ctx context.Context) ExportDatasetConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExportDatasetConfiguration) *ExportDatasetConfiguration {
		return &v
	}).(ExportDatasetConfigurationPtrOutput)
}

// Array of column names to be included in the export. If not provided then the export will include all available columns. The available columns can vary by customer channel (see examples).
func (o ExportDatasetConfigurationOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExportDatasetConfiguration) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

type ExportDatasetConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ExportDatasetConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDatasetConfiguration)(nil)).Elem()
}

func (o ExportDatasetConfigurationPtrOutput) ToExportDatasetConfigurationPtrOutput() ExportDatasetConfigurationPtrOutput {
	return o
}

func (o ExportDatasetConfigurationPtrOutput) ToExportDatasetConfigurationPtrOutputWithContext(ctx context.Context) ExportDatasetConfigurationPtrOutput {
	return o
}

func (o ExportDatasetConfigurationPtrOutput) Elem() ExportDatasetConfigurationOutput {
	return o.ApplyT(func(v *ExportDatasetConfiguration) ExportDatasetConfiguration {
		if v != nil {
			return *v
		}
		var ret ExportDatasetConfiguration
		return ret
	}).(ExportDatasetConfigurationOutput)
}

// Array of column names to be included in the export. If not provided then the export will include all available columns. The available columns can vary by customer channel (see examples).
func (o ExportDatasetConfigurationPtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ExportDatasetConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// The export dataset configuration. Allows columns to be selected for the export. If not provided then the export will include all available columns.
type ExportDatasetConfigurationResponse struct {
	// Array of column names to be included in the export. If not provided then the export will include all available columns. The available columns can vary by customer channel (see examples).
	Columns []string `pulumi:"columns"`
}

// The export dataset configuration. Allows columns to be selected for the export. If not provided then the export will include all available columns.
type ExportDatasetConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ExportDatasetConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDatasetConfigurationResponse)(nil)).Elem()
}

func (o ExportDatasetConfigurationResponseOutput) ToExportDatasetConfigurationResponseOutput() ExportDatasetConfigurationResponseOutput {
	return o
}

func (o ExportDatasetConfigurationResponseOutput) ToExportDatasetConfigurationResponseOutputWithContext(ctx context.Context) ExportDatasetConfigurationResponseOutput {
	return o
}

// Array of column names to be included in the export. If not provided then the export will include all available columns. The available columns can vary by customer channel (see examples).
func (o ExportDatasetConfigurationResponseOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExportDatasetConfigurationResponse) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

type ExportDatasetConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportDatasetConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDatasetConfigurationResponse)(nil)).Elem()
}

func (o ExportDatasetConfigurationResponsePtrOutput) ToExportDatasetConfigurationResponsePtrOutput() ExportDatasetConfigurationResponsePtrOutput {
	return o
}

func (o ExportDatasetConfigurationResponsePtrOutput) ToExportDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) ExportDatasetConfigurationResponsePtrOutput {
	return o
}

func (o ExportDatasetConfigurationResponsePtrOutput) Elem() ExportDatasetConfigurationResponseOutput {
	return o.ApplyT(func(v *ExportDatasetConfigurationResponse) ExportDatasetConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ExportDatasetConfigurationResponse
		return ret
	}).(ExportDatasetConfigurationResponseOutput)
}

// Array of column names to be included in the export. If not provided then the export will include all available columns. The available columns can vary by customer channel (see examples).
func (o ExportDatasetConfigurationResponsePtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ExportDatasetConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// The definition for data in the export.
type ExportDatasetResponse struct {
	// The export dataset configuration.
	Configuration *ExportDatasetConfigurationResponse `pulumi:"configuration"`
	// The granularity of rows in the export. Currently only 'Daily' is supported.
	Granularity *string `pulumi:"granularity"`
}

// The definition for data in the export.
type ExportDatasetResponseOutput struct{ *pulumi.OutputState }

func (ExportDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDatasetResponse)(nil)).Elem()
}

func (o ExportDatasetResponseOutput) ToExportDatasetResponseOutput() ExportDatasetResponseOutput {
	return o
}

func (o ExportDatasetResponseOutput) ToExportDatasetResponseOutputWithContext(ctx context.Context) ExportDatasetResponseOutput {
	return o
}

// The export dataset configuration.
func (o ExportDatasetResponseOutput) Configuration() ExportDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ExportDatasetResponse) *ExportDatasetConfigurationResponse { return v.Configuration }).(ExportDatasetConfigurationResponsePtrOutput)
}

// The granularity of rows in the export. Currently only 'Daily' is supported.
func (o ExportDatasetResponseOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportDatasetResponse) *string { return v.Granularity }).(pulumi.StringPtrOutput)
}

type ExportDatasetResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportDatasetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDatasetResponse)(nil)).Elem()
}

func (o ExportDatasetResponsePtrOutput) ToExportDatasetResponsePtrOutput() ExportDatasetResponsePtrOutput {
	return o
}

func (o ExportDatasetResponsePtrOutput) ToExportDatasetResponsePtrOutputWithContext(ctx context.Context) ExportDatasetResponsePtrOutput {
	return o
}

func (o ExportDatasetResponsePtrOutput) Elem() ExportDatasetResponseOutput {
	return o.ApplyT(func(v *ExportDatasetResponse) ExportDatasetResponse {
		if v != nil {
			return *v
		}
		var ret ExportDatasetResponse
		return ret
	}).(ExportDatasetResponseOutput)
}

// The export dataset configuration.
func (o ExportDatasetResponsePtrOutput) Configuration() ExportDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *ExportDatasetResponse) *ExportDatasetConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ExportDatasetConfigurationResponsePtrOutput)
}

// The granularity of rows in the export. Currently only 'Daily' is supported.
func (o ExportDatasetResponsePtrOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDatasetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Granularity
	}).(pulumi.StringPtrOutput)
}

// The definition of an export.
type ExportDefinition struct {
	// The definition for data in the export.
	DataSet *ExportDataset `pulumi:"dataSet"`
	// Has time period for pulling data for the export.
	TimePeriod *ExportTimePeriod `pulumi:"timePeriod"`
	// The time frame for pulling data for the export. If custom, then a specific time period must be provided.
	Timeframe string `pulumi:"timeframe"`
	// The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations.
	Type string `pulumi:"type"`
}

// ExportDefinitionInput is an input type that accepts ExportDefinitionArgs and ExportDefinitionOutput values.
// You can construct a concrete instance of `ExportDefinitionInput` via:
//
//	ExportDefinitionArgs{...}
type ExportDefinitionInput interface {
	pulumi.Input

	ToExportDefinitionOutput() ExportDefinitionOutput
	ToExportDefinitionOutputWithContext(context.Context) ExportDefinitionOutput
}

// The definition of an export.
type ExportDefinitionArgs struct {
	// The definition for data in the export.
	DataSet ExportDatasetPtrInput `pulumi:"dataSet"`
	// Has time period for pulling data for the export.
	TimePeriod ExportTimePeriodPtrInput `pulumi:"timePeriod"`
	// The time frame for pulling data for the export. If custom, then a specific time period must be provided.
	Timeframe pulumi.StringInput `pulumi:"timeframe"`
	// The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExportDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDefinition)(nil)).Elem()
}

func (i ExportDefinitionArgs) ToExportDefinitionOutput() ExportDefinitionOutput {
	return i.ToExportDefinitionOutputWithContext(context.Background())
}

func (i ExportDefinitionArgs) ToExportDefinitionOutputWithContext(ctx context.Context) ExportDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDefinitionOutput)
}

// The definition of an export.
type ExportDefinitionOutput struct{ *pulumi.OutputState }

func (ExportDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDefinition)(nil)).Elem()
}

func (o ExportDefinitionOutput) ToExportDefinitionOutput() ExportDefinitionOutput {
	return o
}

func (o ExportDefinitionOutput) ToExportDefinitionOutputWithContext(ctx context.Context) ExportDefinitionOutput {
	return o
}

// The definition for data in the export.
func (o ExportDefinitionOutput) DataSet() ExportDatasetPtrOutput {
	return o.ApplyT(func(v ExportDefinition) *ExportDataset { return v.DataSet }).(ExportDatasetPtrOutput)
}

// Has time period for pulling data for the export.
func (o ExportDefinitionOutput) TimePeriod() ExportTimePeriodPtrOutput {
	return o.ApplyT(func(v ExportDefinition) *ExportTimePeriod { return v.TimePeriod }).(ExportTimePeriodPtrOutput)
}

// The time frame for pulling data for the export. If custom, then a specific time period must be provided.
func (o ExportDefinitionOutput) Timeframe() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDefinition) string { return v.Timeframe }).(pulumi.StringOutput)
}

// The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations.
func (o ExportDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDefinition) string { return v.Type }).(pulumi.StringOutput)
}

// The definition of an export.
type ExportDefinitionResponse struct {
	// The definition for data in the export.
	DataSet *ExportDatasetResponse `pulumi:"dataSet"`
	// Has time period for pulling data for the export.
	TimePeriod *ExportTimePeriodResponse `pulumi:"timePeriod"`
	// The time frame for pulling data for the export. If custom, then a specific time period must be provided.
	Timeframe string `pulumi:"timeframe"`
	// The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations.
	Type string `pulumi:"type"`
}

// The definition of an export.
type ExportDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ExportDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDefinitionResponse)(nil)).Elem()
}

func (o ExportDefinitionResponseOutput) ToExportDefinitionResponseOutput() ExportDefinitionResponseOutput {
	return o
}

func (o ExportDefinitionResponseOutput) ToExportDefinitionResponseOutputWithContext(ctx context.Context) ExportDefinitionResponseOutput {
	return o
}

// The definition for data in the export.
func (o ExportDefinitionResponseOutput) DataSet() ExportDatasetResponsePtrOutput {
	return o.ApplyT(func(v ExportDefinitionResponse) *ExportDatasetResponse { return v.DataSet }).(ExportDatasetResponsePtrOutput)
}

// Has time period for pulling data for the export.
func (o ExportDefinitionResponseOutput) TimePeriod() ExportTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v ExportDefinitionResponse) *ExportTimePeriodResponse { return v.TimePeriod }).(ExportTimePeriodResponsePtrOutput)
}

// The time frame for pulling data for the export. If custom, then a specific time period must be provided.
func (o ExportDefinitionResponseOutput) Timeframe() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDefinitionResponse) string { return v.Timeframe }).(pulumi.StringOutput)
}

// The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations.
func (o ExportDefinitionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDefinitionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ExportDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDefinitionResponse)(nil)).Elem()
}

func (o ExportDefinitionResponsePtrOutput) ToExportDefinitionResponsePtrOutput() ExportDefinitionResponsePtrOutput {
	return o
}

func (o ExportDefinitionResponsePtrOutput) ToExportDefinitionResponsePtrOutputWithContext(ctx context.Context) ExportDefinitionResponsePtrOutput {
	return o
}

func (o ExportDefinitionResponsePtrOutput) Elem() ExportDefinitionResponseOutput {
	return o.ApplyT(func(v *ExportDefinitionResponse) ExportDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret ExportDefinitionResponse
		return ret
	}).(ExportDefinitionResponseOutput)
}

// The definition for data in the export.
func (o ExportDefinitionResponsePtrOutput) DataSet() ExportDatasetResponsePtrOutput {
	return o.ApplyT(func(v *ExportDefinitionResponse) *ExportDatasetResponse {
		if v == nil {
			return nil
		}
		return v.DataSet
	}).(ExportDatasetResponsePtrOutput)
}

// Has time period for pulling data for the export.
func (o ExportDefinitionResponsePtrOutput) TimePeriod() ExportTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v *ExportDefinitionResponse) *ExportTimePeriodResponse {
		if v == nil {
			return nil
		}
		return v.TimePeriod
	}).(ExportTimePeriodResponsePtrOutput)
}

// The time frame for pulling data for the export. If custom, then a specific time period must be provided.
func (o ExportDefinitionResponsePtrOutput) Timeframe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Timeframe
	}).(pulumi.StringPtrOutput)
}

// The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations.
func (o ExportDefinitionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The destination information for the delivery of the export. To allow access to a storage account, you must register the account's subscription with the Microsoft.CostManagementExports resource provider. This is required once per subscription. When creating an export in the Azure portal, it is done automatically, however API users need to register the subscription. For more information see https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services .
type ExportDeliveryDestination struct {
	// The name of the container where exports will be uploaded.
	Container string `pulumi:"container"`
	// The resource id of the storage account where exports will be delivered.
	ResourceId string `pulumi:"resourceId"`
	// The name of the directory where exports will be uploaded.
	RootFolderPath *string `pulumi:"rootFolderPath"`
}

// ExportDeliveryDestinationInput is an input type that accepts ExportDeliveryDestinationArgs and ExportDeliveryDestinationOutput values.
// You can construct a concrete instance of `ExportDeliveryDestinationInput` via:
//
//	ExportDeliveryDestinationArgs{...}
type ExportDeliveryDestinationInput interface {
	pulumi.Input

	ToExportDeliveryDestinationOutput() ExportDeliveryDestinationOutput
	ToExportDeliveryDestinationOutputWithContext(context.Context) ExportDeliveryDestinationOutput
}

// The destination information for the delivery of the export. To allow access to a storage account, you must register the account's subscription with the Microsoft.CostManagementExports resource provider. This is required once per subscription. When creating an export in the Azure portal, it is done automatically, however API users need to register the subscription. For more information see https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services .
type ExportDeliveryDestinationArgs struct {
	// The name of the container where exports will be uploaded.
	Container pulumi.StringInput `pulumi:"container"`
	// The resource id of the storage account where exports will be delivered.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The name of the directory where exports will be uploaded.
	RootFolderPath pulumi.StringPtrInput `pulumi:"rootFolderPath"`
}

func (ExportDeliveryDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryDestination)(nil)).Elem()
}

func (i ExportDeliveryDestinationArgs) ToExportDeliveryDestinationOutput() ExportDeliveryDestinationOutput {
	return i.ToExportDeliveryDestinationOutputWithContext(context.Background())
}

func (i ExportDeliveryDestinationArgs) ToExportDeliveryDestinationOutputWithContext(ctx context.Context) ExportDeliveryDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryDestinationOutput)
}

// The destination information for the delivery of the export. To allow access to a storage account, you must register the account's subscription with the Microsoft.CostManagementExports resource provider. This is required once per subscription. When creating an export in the Azure portal, it is done automatically, however API users need to register the subscription. For more information see https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services .
type ExportDeliveryDestinationOutput struct{ *pulumi.OutputState }

func (ExportDeliveryDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryDestination)(nil)).Elem()
}

func (o ExportDeliveryDestinationOutput) ToExportDeliveryDestinationOutput() ExportDeliveryDestinationOutput {
	return o
}

func (o ExportDeliveryDestinationOutput) ToExportDeliveryDestinationOutputWithContext(ctx context.Context) ExportDeliveryDestinationOutput {
	return o
}

// The name of the container where exports will be uploaded.
func (o ExportDeliveryDestinationOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDeliveryDestination) string { return v.Container }).(pulumi.StringOutput)
}

// The resource id of the storage account where exports will be delivered.
func (o ExportDeliveryDestinationOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDeliveryDestination) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The name of the directory where exports will be uploaded.
func (o ExportDeliveryDestinationOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportDeliveryDestination) *string { return v.RootFolderPath }).(pulumi.StringPtrOutput)
}

// The destination information for the delivery of the export. To allow access to a storage account, you must register the account's subscription with the Microsoft.CostManagementExports resource provider. This is required once per subscription. When creating an export in the Azure portal, it is done automatically, however API users need to register the subscription. For more information see https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services .
type ExportDeliveryDestinationResponse struct {
	// The name of the container where exports will be uploaded.
	Container string `pulumi:"container"`
	// The resource id of the storage account where exports will be delivered.
	ResourceId string `pulumi:"resourceId"`
	// The name of the directory where exports will be uploaded.
	RootFolderPath *string `pulumi:"rootFolderPath"`
}

// The destination information for the delivery of the export. To allow access to a storage account, you must register the account's subscription with the Microsoft.CostManagementExports resource provider. This is required once per subscription. When creating an export in the Azure portal, it is done automatically, however API users need to register the subscription. For more information see https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services .
type ExportDeliveryDestinationResponseOutput struct{ *pulumi.OutputState }

func (ExportDeliveryDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryDestinationResponse)(nil)).Elem()
}

func (o ExportDeliveryDestinationResponseOutput) ToExportDeliveryDestinationResponseOutput() ExportDeliveryDestinationResponseOutput {
	return o
}

func (o ExportDeliveryDestinationResponseOutput) ToExportDeliveryDestinationResponseOutputWithContext(ctx context.Context) ExportDeliveryDestinationResponseOutput {
	return o
}

// The name of the container where exports will be uploaded.
func (o ExportDeliveryDestinationResponseOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDeliveryDestinationResponse) string { return v.Container }).(pulumi.StringOutput)
}

// The resource id of the storage account where exports will be delivered.
func (o ExportDeliveryDestinationResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDeliveryDestinationResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The name of the directory where exports will be uploaded.
func (o ExportDeliveryDestinationResponseOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportDeliveryDestinationResponse) *string { return v.RootFolderPath }).(pulumi.StringPtrOutput)
}

type ExportDeliveryDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportDeliveryDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDeliveryDestinationResponse)(nil)).Elem()
}

func (o ExportDeliveryDestinationResponsePtrOutput) ToExportDeliveryDestinationResponsePtrOutput() ExportDeliveryDestinationResponsePtrOutput {
	return o
}

func (o ExportDeliveryDestinationResponsePtrOutput) ToExportDeliveryDestinationResponsePtrOutputWithContext(ctx context.Context) ExportDeliveryDestinationResponsePtrOutput {
	return o
}

func (o ExportDeliveryDestinationResponsePtrOutput) Elem() ExportDeliveryDestinationResponseOutput {
	return o.ApplyT(func(v *ExportDeliveryDestinationResponse) ExportDeliveryDestinationResponse {
		if v != nil {
			return *v
		}
		var ret ExportDeliveryDestinationResponse
		return ret
	}).(ExportDeliveryDestinationResponseOutput)
}

// The name of the container where exports will be uploaded.
func (o ExportDeliveryDestinationResponsePtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Container
	}).(pulumi.StringPtrOutput)
}

// The resource id of the storage account where exports will be delivered.
func (o ExportDeliveryDestinationResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The name of the directory where exports will be uploaded.
func (o ExportDeliveryDestinationResponsePtrOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RootFolderPath
	}).(pulumi.StringPtrOutput)
}

// The delivery information associated with a export.
type ExportDeliveryInfo struct {
	// Has destination for the export being delivered.
	Destination ExportDeliveryDestination `pulumi:"destination"`
}

// ExportDeliveryInfoInput is an input type that accepts ExportDeliveryInfoArgs and ExportDeliveryInfoOutput values.
// You can construct a concrete instance of `ExportDeliveryInfoInput` via:
//
//	ExportDeliveryInfoArgs{...}
type ExportDeliveryInfoInput interface {
	pulumi.Input

	ToExportDeliveryInfoOutput() ExportDeliveryInfoOutput
	ToExportDeliveryInfoOutputWithContext(context.Context) ExportDeliveryInfoOutput
}

// The delivery information associated with a export.
type ExportDeliveryInfoArgs struct {
	// Has destination for the export being delivered.
	Destination ExportDeliveryDestinationInput `pulumi:"destination"`
}

func (ExportDeliveryInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryInfo)(nil)).Elem()
}

func (i ExportDeliveryInfoArgs) ToExportDeliveryInfoOutput() ExportDeliveryInfoOutput {
	return i.ToExportDeliveryInfoOutputWithContext(context.Background())
}

func (i ExportDeliveryInfoArgs) ToExportDeliveryInfoOutputWithContext(ctx context.Context) ExportDeliveryInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryInfoOutput)
}

// The delivery information associated with a export.
type ExportDeliveryInfoOutput struct{ *pulumi.OutputState }

func (ExportDeliveryInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryInfo)(nil)).Elem()
}

func (o ExportDeliveryInfoOutput) ToExportDeliveryInfoOutput() ExportDeliveryInfoOutput {
	return o
}

func (o ExportDeliveryInfoOutput) ToExportDeliveryInfoOutputWithContext(ctx context.Context) ExportDeliveryInfoOutput {
	return o
}

// Has destination for the export being delivered.
func (o ExportDeliveryInfoOutput) Destination() ExportDeliveryDestinationOutput {
	return o.ApplyT(func(v ExportDeliveryInfo) ExportDeliveryDestination { return v.Destination }).(ExportDeliveryDestinationOutput)
}

// The delivery information associated with a export.
type ExportDeliveryInfoResponse struct {
	// Has destination for the export being delivered.
	Destination ExportDeliveryDestinationResponse `pulumi:"destination"`
}

// The delivery information associated with a export.
type ExportDeliveryInfoResponseOutput struct{ *pulumi.OutputState }

func (ExportDeliveryInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryInfoResponse)(nil)).Elem()
}

func (o ExportDeliveryInfoResponseOutput) ToExportDeliveryInfoResponseOutput() ExportDeliveryInfoResponseOutput {
	return o
}

func (o ExportDeliveryInfoResponseOutput) ToExportDeliveryInfoResponseOutputWithContext(ctx context.Context) ExportDeliveryInfoResponseOutput {
	return o
}

// Has destination for the export being delivered.
func (o ExportDeliveryInfoResponseOutput) Destination() ExportDeliveryDestinationResponseOutput {
	return o.ApplyT(func(v ExportDeliveryInfoResponse) ExportDeliveryDestinationResponse { return v.Destination }).(ExportDeliveryDestinationResponseOutput)
}

type ExportDeliveryInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportDeliveryInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDeliveryInfoResponse)(nil)).Elem()
}

func (o ExportDeliveryInfoResponsePtrOutput) ToExportDeliveryInfoResponsePtrOutput() ExportDeliveryInfoResponsePtrOutput {
	return o
}

func (o ExportDeliveryInfoResponsePtrOutput) ToExportDeliveryInfoResponsePtrOutputWithContext(ctx context.Context) ExportDeliveryInfoResponsePtrOutput {
	return o
}

func (o ExportDeliveryInfoResponsePtrOutput) Elem() ExportDeliveryInfoResponseOutput {
	return o.ApplyT(func(v *ExportDeliveryInfoResponse) ExportDeliveryInfoResponse {
		if v != nil {
			return *v
		}
		var ret ExportDeliveryInfoResponse
		return ret
	}).(ExportDeliveryInfoResponseOutput)
}

// Has destination for the export being delivered.
func (o ExportDeliveryInfoResponsePtrOutput) Destination() ExportDeliveryDestinationResponsePtrOutput {
	return o.ApplyT(func(v *ExportDeliveryInfoResponse) *ExportDeliveryDestinationResponse {
		if v == nil {
			return nil
		}
		return &v.Destination
	}).(ExportDeliveryDestinationResponsePtrOutput)
}

// Result of listing the execution history of an export.
type ExportExecutionListResultResponse struct {
	// A list of export executions.
	Value []ExportExecutionResponse `pulumi:"value"`
}

// Result of listing the execution history of an export.
type ExportExecutionListResultResponseOutput struct{ *pulumi.OutputState }

func (ExportExecutionListResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportExecutionListResultResponse)(nil)).Elem()
}

func (o ExportExecutionListResultResponseOutput) ToExportExecutionListResultResponseOutput() ExportExecutionListResultResponseOutput {
	return o
}

func (o ExportExecutionListResultResponseOutput) ToExportExecutionListResultResponseOutputWithContext(ctx context.Context) ExportExecutionListResultResponseOutput {
	return o
}

// A list of export executions.
func (o ExportExecutionListResultResponseOutput) Value() ExportExecutionResponseArrayOutput {
	return o.ApplyT(func(v ExportExecutionListResultResponse) []ExportExecutionResponse { return v.Value }).(ExportExecutionResponseArrayOutput)
}

type ExportExecutionListResultResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportExecutionListResultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportExecutionListResultResponse)(nil)).Elem()
}

func (o ExportExecutionListResultResponsePtrOutput) ToExportExecutionListResultResponsePtrOutput() ExportExecutionListResultResponsePtrOutput {
	return o
}

func (o ExportExecutionListResultResponsePtrOutput) ToExportExecutionListResultResponsePtrOutputWithContext(ctx context.Context) ExportExecutionListResultResponsePtrOutput {
	return o
}

func (o ExportExecutionListResultResponsePtrOutput) Elem() ExportExecutionListResultResponseOutput {
	return o.ApplyT(func(v *ExportExecutionListResultResponse) ExportExecutionListResultResponse {
		if v != nil {
			return *v
		}
		var ret ExportExecutionListResultResponse
		return ret
	}).(ExportExecutionListResultResponseOutput)
}

// A list of export executions.
func (o ExportExecutionListResultResponsePtrOutput) Value() ExportExecutionResponseArrayOutput {
	return o.ApplyT(func(v *ExportExecutionListResultResponse) []ExportExecutionResponse {
		if v == nil {
			return nil
		}
		return v.Value
	}).(ExportExecutionResponseArrayOutput)
}

// An export execution.
type ExportExecutionResponse struct {
	// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
	ETag *string `pulumi:"eTag"`
	// The details of any error.
	Error *ErrorDetailsResponse `pulumi:"error"`
	// The type of the export execution.
	ExecutionType *string `pulumi:"executionType"`
	// The name of the exported file.
	FileName *string `pulumi:"fileName"`
	// Resource Id.
	Id string `pulumi:"id"`
	// Resource name.
	Name string `pulumi:"name"`
	// The time when the export execution finished.
	ProcessingEndTime *string `pulumi:"processingEndTime"`
	// The time when export was picked up to be executed.
	ProcessingStartTime *string `pulumi:"processingStartTime"`
	// The export settings that were in effect for this execution.
	RunSettings *CommonExportPropertiesResponse `pulumi:"runSettings"`
	// The last known status of the export execution.
	Status *string `pulumi:"status"`
	// The identifier for the entity that executed the export. For OnDemand executions it is the user email. For scheduled executions it is 'System'.
	SubmittedBy *string `pulumi:"submittedBy"`
	// The time when export was queued to be executed.
	SubmittedTime *string `pulumi:"submittedTime"`
	// Resource type.
	Type string `pulumi:"type"`
}

// An export execution.
type ExportExecutionResponseOutput struct{ *pulumi.OutputState }

func (ExportExecutionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportExecutionResponse)(nil)).Elem()
}

func (o ExportExecutionResponseOutput) ToExportExecutionResponseOutput() ExportExecutionResponseOutput {
	return o
}

func (o ExportExecutionResponseOutput) ToExportExecutionResponseOutputWithContext(ctx context.Context) ExportExecutionResponseOutput {
	return o
}

// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
func (o ExportExecutionResponseOutput) ETag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportExecutionResponse) *string { return v.ETag }).(pulumi.StringPtrOutput)
}

// The details of any error.
func (o ExportExecutionResponseOutput) Error() ErrorDetailsResponsePtrOutput {
	return o.ApplyT(func(v ExportExecutionResponse) *ErrorDetailsResponse { return v.Error }).(ErrorDetailsResponsePtrOutput)
}

// The type of the export execution.
func (o ExportExecutionResponseOutput) ExecutionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportExecutionResponse) *string { return v.ExecutionType }).(pulumi.StringPtrOutput)
}

// The name of the exported file.
func (o ExportExecutionResponseOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportExecutionResponse) *string { return v.FileName }).(pulumi.StringPtrOutput)
}

// Resource Id.
func (o ExportExecutionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ExportExecutionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Resource name.
func (o ExportExecutionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExportExecutionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The time when the export execution finished.
func (o ExportExecutionResponseOutput) ProcessingEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportExecutionResponse) *string { return v.ProcessingEndTime }).(pulumi.StringPtrOutput)
}

// The time when export was picked up to be executed.
func (o ExportExecutionResponseOutput) ProcessingStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportExecutionResponse) *string { return v.ProcessingStartTime }).(pulumi.StringPtrOutput)
}

// The export settings that were in effect for this execution.
func (o ExportExecutionResponseOutput) RunSettings() CommonExportPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ExportExecutionResponse) *CommonExportPropertiesResponse { return v.RunSettings }).(CommonExportPropertiesResponsePtrOutput)
}

// The last known status of the export execution.
func (o ExportExecutionResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportExecutionResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The identifier for the entity that executed the export. For OnDemand executions it is the user email. For scheduled executions it is 'System'.
func (o ExportExecutionResponseOutput) SubmittedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportExecutionResponse) *string { return v.SubmittedBy }).(pulumi.StringPtrOutput)
}

// The time when export was queued to be executed.
func (o ExportExecutionResponseOutput) SubmittedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportExecutionResponse) *string { return v.SubmittedTime }).(pulumi.StringPtrOutput)
}

// Resource type.
func (o ExportExecutionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExportExecutionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ExportExecutionResponseArrayOutput struct{ *pulumi.OutputState }

func (ExportExecutionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExportExecutionResponse)(nil)).Elem()
}

func (o ExportExecutionResponseArrayOutput) ToExportExecutionResponseArrayOutput() ExportExecutionResponseArrayOutput {
	return o
}

func (o ExportExecutionResponseArrayOutput) ToExportExecutionResponseArrayOutputWithContext(ctx context.Context) ExportExecutionResponseArrayOutput {
	return o
}

func (o ExportExecutionResponseArrayOutput) Index(i pulumi.IntInput) ExportExecutionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExportExecutionResponse {
		return vs[0].([]ExportExecutionResponse)[vs[1].(int)]
	}).(ExportExecutionResponseOutput)
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriod struct {
	// The start date of recurrence.
	From string `pulumi:"from"`
	// The end date of recurrence.
	To *string `pulumi:"to"`
}

// ExportRecurrencePeriodInput is an input type that accepts ExportRecurrencePeriodArgs and ExportRecurrencePeriodOutput values.
// You can construct a concrete instance of `ExportRecurrencePeriodInput` via:
//
//	ExportRecurrencePeriodArgs{...}
type ExportRecurrencePeriodInput interface {
	pulumi.Input

	ToExportRecurrencePeriodOutput() ExportRecurrencePeriodOutput
	ToExportRecurrencePeriodOutputWithContext(context.Context) ExportRecurrencePeriodOutput
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriodArgs struct {
	// The start date of recurrence.
	From pulumi.StringInput `pulumi:"from"`
	// The end date of recurrence.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (ExportRecurrencePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportRecurrencePeriod)(nil)).Elem()
}

func (i ExportRecurrencePeriodArgs) ToExportRecurrencePeriodOutput() ExportRecurrencePeriodOutput {
	return i.ToExportRecurrencePeriodOutputWithContext(context.Background())
}

func (i ExportRecurrencePeriodArgs) ToExportRecurrencePeriodOutputWithContext(ctx context.Context) ExportRecurrencePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRecurrencePeriodOutput)
}

func (i ExportRecurrencePeriodArgs) ToExportRecurrencePeriodPtrOutput() ExportRecurrencePeriodPtrOutput {
	return i.ToExportRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (i ExportRecurrencePeriodArgs) ToExportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRecurrencePeriodOutput).ToExportRecurrencePeriodPtrOutputWithContext(ctx)
}

// ExportRecurrencePeriodPtrInput is an input type that accepts ExportRecurrencePeriodArgs, ExportRecurrencePeriodPtr and ExportRecurrencePeriodPtrOutput values.
// You can construct a concrete instance of `ExportRecurrencePeriodPtrInput` via:
//
//	        ExportRecurrencePeriodArgs{...}
//
//	or:
//
//	        nil
type ExportRecurrencePeriodPtrInput interface {
	pulumi.Input

	ToExportRecurrencePeriodPtrOutput() ExportRecurrencePeriodPtrOutput
	ToExportRecurrencePeriodPtrOutputWithContext(context.Context) ExportRecurrencePeriodPtrOutput
}

type exportRecurrencePeriodPtrType ExportRecurrencePeriodArgs

func ExportRecurrencePeriodPtr(v *ExportRecurrencePeriodArgs) ExportRecurrencePeriodPtrInput {
	return (*exportRecurrencePeriodPtrType)(v)
}

func (*exportRecurrencePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportRecurrencePeriod)(nil)).Elem()
}

func (i *exportRecurrencePeriodPtrType) ToExportRecurrencePeriodPtrOutput() ExportRecurrencePeriodPtrOutput {
	return i.ToExportRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (i *exportRecurrencePeriodPtrType) ToExportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRecurrencePeriodPtrOutput)
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriodOutput struct{ *pulumi.OutputState }

func (ExportRecurrencePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportRecurrencePeriod)(nil)).Elem()
}

func (o ExportRecurrencePeriodOutput) ToExportRecurrencePeriodOutput() ExportRecurrencePeriodOutput {
	return o
}

func (o ExportRecurrencePeriodOutput) ToExportRecurrencePeriodOutputWithContext(ctx context.Context) ExportRecurrencePeriodOutput {
	return o
}

func (o ExportRecurrencePeriodOutput) ToExportRecurrencePeriodPtrOutput() ExportRecurrencePeriodPtrOutput {
	return o.ToExportRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (o ExportRecurrencePeriodOutput) ToExportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExportRecurrencePeriod) *ExportRecurrencePeriod {
		return &v
	}).(ExportRecurrencePeriodPtrOutput)
}

// The start date of recurrence.
func (o ExportRecurrencePeriodOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ExportRecurrencePeriod) string { return v.From }).(pulumi.StringOutput)
}

// The end date of recurrence.
func (o ExportRecurrencePeriodOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportRecurrencePeriod) *string { return v.To }).(pulumi.StringPtrOutput)
}

type ExportRecurrencePeriodPtrOutput struct{ *pulumi.OutputState }

func (ExportRecurrencePeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportRecurrencePeriod)(nil)).Elem()
}

func (o ExportRecurrencePeriodPtrOutput) ToExportRecurrencePeriodPtrOutput() ExportRecurrencePeriodPtrOutput {
	return o
}

func (o ExportRecurrencePeriodPtrOutput) ToExportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodPtrOutput {
	return o
}

func (o ExportRecurrencePeriodPtrOutput) Elem() ExportRecurrencePeriodOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriod) ExportRecurrencePeriod {
		if v != nil {
			return *v
		}
		var ret ExportRecurrencePeriod
		return ret
	}).(ExportRecurrencePeriodOutput)
}

// The start date of recurrence.
func (o ExportRecurrencePeriodPtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date of recurrence.
func (o ExportRecurrencePeriodPtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriod) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriodResponse struct {
	// The start date of recurrence.
	From string `pulumi:"from"`
	// The end date of recurrence.
	To *string `pulumi:"to"`
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriodResponseOutput struct{ *pulumi.OutputState }

func (ExportRecurrencePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportRecurrencePeriodResponse)(nil)).Elem()
}

func (o ExportRecurrencePeriodResponseOutput) ToExportRecurrencePeriodResponseOutput() ExportRecurrencePeriodResponseOutput {
	return o
}

func (o ExportRecurrencePeriodResponseOutput) ToExportRecurrencePeriodResponseOutputWithContext(ctx context.Context) ExportRecurrencePeriodResponseOutput {
	return o
}

// The start date of recurrence.
func (o ExportRecurrencePeriodResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ExportRecurrencePeriodResponse) string { return v.From }).(pulumi.StringOutput)
}

// The end date of recurrence.
func (o ExportRecurrencePeriodResponseOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportRecurrencePeriodResponse) *string { return v.To }).(pulumi.StringPtrOutput)
}

type ExportRecurrencePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportRecurrencePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportRecurrencePeriodResponse)(nil)).Elem()
}

func (o ExportRecurrencePeriodResponsePtrOutput) ToExportRecurrencePeriodResponsePtrOutput() ExportRecurrencePeriodResponsePtrOutput {
	return o
}

func (o ExportRecurrencePeriodResponsePtrOutput) ToExportRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodResponsePtrOutput {
	return o
}

func (o ExportRecurrencePeriodResponsePtrOutput) Elem() ExportRecurrencePeriodResponseOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriodResponse) ExportRecurrencePeriodResponse {
		if v != nil {
			return *v
		}
		var ret ExportRecurrencePeriodResponse
		return ret
	}).(ExportRecurrencePeriodResponseOutput)
}

// The start date of recurrence.
func (o ExportRecurrencePeriodResponsePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date of recurrence.
func (o ExportRecurrencePeriodResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

// The schedule associated with the export.
type ExportSchedule struct {
	// The schedule recurrence.
	Recurrence *string `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod *ExportRecurrencePeriod `pulumi:"recurrencePeriod"`
	// The status of the export's schedule. If 'Inactive', the export's schedule is paused.
	Status *string `pulumi:"status"`
}

// ExportScheduleInput is an input type that accepts ExportScheduleArgs and ExportScheduleOutput values.
// You can construct a concrete instance of `ExportScheduleInput` via:
//
//	ExportScheduleArgs{...}
type ExportScheduleInput interface {
	pulumi.Input

	ToExportScheduleOutput() ExportScheduleOutput
	ToExportScheduleOutputWithContext(context.Context) ExportScheduleOutput
}

// The schedule associated with the export.
type ExportScheduleArgs struct {
	// The schedule recurrence.
	Recurrence pulumi.StringPtrInput `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod ExportRecurrencePeriodPtrInput `pulumi:"recurrencePeriod"`
	// The status of the export's schedule. If 'Inactive', the export's schedule is paused.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ExportScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportSchedule)(nil)).Elem()
}

func (i ExportScheduleArgs) ToExportScheduleOutput() ExportScheduleOutput {
	return i.ToExportScheduleOutputWithContext(context.Background())
}

func (i ExportScheduleArgs) ToExportScheduleOutputWithContext(ctx context.Context) ExportScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportScheduleOutput)
}

func (i ExportScheduleArgs) ToExportSchedulePtrOutput() ExportSchedulePtrOutput {
	return i.ToExportSchedulePtrOutputWithContext(context.Background())
}

func (i ExportScheduleArgs) ToExportSchedulePtrOutputWithContext(ctx context.Context) ExportSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportScheduleOutput).ToExportSchedulePtrOutputWithContext(ctx)
}

// ExportSchedulePtrInput is an input type that accepts ExportScheduleArgs, ExportSchedulePtr and ExportSchedulePtrOutput values.
// You can construct a concrete instance of `ExportSchedulePtrInput` via:
//
//	        ExportScheduleArgs{...}
//
//	or:
//
//	        nil
type ExportSchedulePtrInput interface {
	pulumi.Input

	ToExportSchedulePtrOutput() ExportSchedulePtrOutput
	ToExportSchedulePtrOutputWithContext(context.Context) ExportSchedulePtrOutput
}

type exportSchedulePtrType ExportScheduleArgs

func ExportSchedulePtr(v *ExportScheduleArgs) ExportSchedulePtrInput {
	return (*exportSchedulePtrType)(v)
}

func (*exportSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportSchedule)(nil)).Elem()
}

func (i *exportSchedulePtrType) ToExportSchedulePtrOutput() ExportSchedulePtrOutput {
	return i.ToExportSchedulePtrOutputWithContext(context.Background())
}

func (i *exportSchedulePtrType) ToExportSchedulePtrOutputWithContext(ctx context.Context) ExportSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportSchedulePtrOutput)
}

// The schedule associated with the export.
type ExportScheduleOutput struct{ *pulumi.OutputState }

func (ExportScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportSchedule)(nil)).Elem()
}

func (o ExportScheduleOutput) ToExportScheduleOutput() ExportScheduleOutput {
	return o
}

func (o ExportScheduleOutput) ToExportScheduleOutputWithContext(ctx context.Context) ExportScheduleOutput {
	return o
}

func (o ExportScheduleOutput) ToExportSchedulePtrOutput() ExportSchedulePtrOutput {
	return o.ToExportSchedulePtrOutputWithContext(context.Background())
}

func (o ExportScheduleOutput) ToExportSchedulePtrOutputWithContext(ctx context.Context) ExportSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExportSchedule) *ExportSchedule {
		return &v
	}).(ExportSchedulePtrOutput)
}

// The schedule recurrence.
func (o ExportScheduleOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportSchedule) *string { return v.Recurrence }).(pulumi.StringPtrOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ExportScheduleOutput) RecurrencePeriod() ExportRecurrencePeriodPtrOutput {
	return o.ApplyT(func(v ExportSchedule) *ExportRecurrencePeriod { return v.RecurrencePeriod }).(ExportRecurrencePeriodPtrOutput)
}

// The status of the export's schedule. If 'Inactive', the export's schedule is paused.
func (o ExportScheduleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportSchedule) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ExportSchedulePtrOutput struct{ *pulumi.OutputState }

func (ExportSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportSchedule)(nil)).Elem()
}

func (o ExportSchedulePtrOutput) ToExportSchedulePtrOutput() ExportSchedulePtrOutput {
	return o
}

func (o ExportSchedulePtrOutput) ToExportSchedulePtrOutputWithContext(ctx context.Context) ExportSchedulePtrOutput {
	return o
}

func (o ExportSchedulePtrOutput) Elem() ExportScheduleOutput {
	return o.ApplyT(func(v *ExportSchedule) ExportSchedule {
		if v != nil {
			return *v
		}
		var ret ExportSchedule
		return ret
	}).(ExportScheduleOutput)
}

// The schedule recurrence.
func (o ExportSchedulePtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportSchedule) *string {
		if v == nil {
			return nil
		}
		return v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ExportSchedulePtrOutput) RecurrencePeriod() ExportRecurrencePeriodPtrOutput {
	return o.ApplyT(func(v *ExportSchedule) *ExportRecurrencePeriod {
		if v == nil {
			return nil
		}
		return v.RecurrencePeriod
	}).(ExportRecurrencePeriodPtrOutput)
}

// The status of the export's schedule. If 'Inactive', the export's schedule is paused.
func (o ExportSchedulePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportSchedule) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The schedule associated with the export.
type ExportScheduleResponse struct {
	// The schedule recurrence.
	Recurrence *string `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod *ExportRecurrencePeriodResponse `pulumi:"recurrencePeriod"`
	// The status of the export's schedule. If 'Inactive', the export's schedule is paused.
	Status *string `pulumi:"status"`
}

// The schedule associated with the export.
type ExportScheduleResponseOutput struct{ *pulumi.OutputState }

func (ExportScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportScheduleResponse)(nil)).Elem()
}

func (o ExportScheduleResponseOutput) ToExportScheduleResponseOutput() ExportScheduleResponseOutput {
	return o
}

func (o ExportScheduleResponseOutput) ToExportScheduleResponseOutputWithContext(ctx context.Context) ExportScheduleResponseOutput {
	return o
}

// The schedule recurrence.
func (o ExportScheduleResponseOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportScheduleResponse) *string { return v.Recurrence }).(pulumi.StringPtrOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ExportScheduleResponseOutput) RecurrencePeriod() ExportRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v ExportScheduleResponse) *ExportRecurrencePeriodResponse { return v.RecurrencePeriod }).(ExportRecurrencePeriodResponsePtrOutput)
}

// The status of the export's schedule. If 'Inactive', the export's schedule is paused.
func (o ExportScheduleResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportScheduleResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ExportScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportScheduleResponse)(nil)).Elem()
}

func (o ExportScheduleResponsePtrOutput) ToExportScheduleResponsePtrOutput() ExportScheduleResponsePtrOutput {
	return o
}

func (o ExportScheduleResponsePtrOutput) ToExportScheduleResponsePtrOutputWithContext(ctx context.Context) ExportScheduleResponsePtrOutput {
	return o
}

func (o ExportScheduleResponsePtrOutput) Elem() ExportScheduleResponseOutput {
	return o.ApplyT(func(v *ExportScheduleResponse) ExportScheduleResponse {
		if v != nil {
			return *v
		}
		var ret ExportScheduleResponse
		return ret
	}).(ExportScheduleResponseOutput)
}

// The schedule recurrence.
func (o ExportScheduleResponsePtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ExportScheduleResponsePtrOutput) RecurrencePeriod() ExportRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v *ExportScheduleResponse) *ExportRecurrencePeriodResponse {
		if v == nil {
			return nil
		}
		return v.RecurrencePeriod
	}).(ExportRecurrencePeriodResponsePtrOutput)
}

// The status of the export's schedule. If 'Inactive', the export's schedule is paused.
func (o ExportScheduleResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The date range for data in the export. This should only be specified with timeFrame set to 'Custom'. The maximum date range is 3 months.
type ExportTimePeriod struct {
	// The start date for export data.
	From string `pulumi:"from"`
	// The end date for export data.
	To string `pulumi:"to"`
}

// ExportTimePeriodInput is an input type that accepts ExportTimePeriodArgs and ExportTimePeriodOutput values.
// You can construct a concrete instance of `ExportTimePeriodInput` via:
//
//	ExportTimePeriodArgs{...}
type ExportTimePeriodInput interface {
	pulumi.Input

	ToExportTimePeriodOutput() ExportTimePeriodOutput
	ToExportTimePeriodOutputWithContext(context.Context) ExportTimePeriodOutput
}

// The date range for data in the export. This should only be specified with timeFrame set to 'Custom'. The maximum date range is 3 months.
type ExportTimePeriodArgs struct {
	// The start date for export data.
	From pulumi.StringInput `pulumi:"from"`
	// The end date for export data.
	To pulumi.StringInput `pulumi:"to"`
}

func (ExportTimePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportTimePeriod)(nil)).Elem()
}

func (i ExportTimePeriodArgs) ToExportTimePeriodOutput() ExportTimePeriodOutput {
	return i.ToExportTimePeriodOutputWithContext(context.Background())
}

func (i ExportTimePeriodArgs) ToExportTimePeriodOutputWithContext(ctx context.Context) ExportTimePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportTimePeriodOutput)
}

func (i ExportTimePeriodArgs) ToExportTimePeriodPtrOutput() ExportTimePeriodPtrOutput {
	return i.ToExportTimePeriodPtrOutputWithContext(context.Background())
}

func (i ExportTimePeriodArgs) ToExportTimePeriodPtrOutputWithContext(ctx context.Context) ExportTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportTimePeriodOutput).ToExportTimePeriodPtrOutputWithContext(ctx)
}

// ExportTimePeriodPtrInput is an input type that accepts ExportTimePeriodArgs, ExportTimePeriodPtr and ExportTimePeriodPtrOutput values.
// You can construct a concrete instance of `ExportTimePeriodPtrInput` via:
//
//	        ExportTimePeriodArgs{...}
//
//	or:
//
//	        nil
type ExportTimePeriodPtrInput interface {
	pulumi.Input

	ToExportTimePeriodPtrOutput() ExportTimePeriodPtrOutput
	ToExportTimePeriodPtrOutputWithContext(context.Context) ExportTimePeriodPtrOutput
}

type exportTimePeriodPtrType ExportTimePeriodArgs

func ExportTimePeriodPtr(v *ExportTimePeriodArgs) ExportTimePeriodPtrInput {
	return (*exportTimePeriodPtrType)(v)
}

func (*exportTimePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportTimePeriod)(nil)).Elem()
}

func (i *exportTimePeriodPtrType) ToExportTimePeriodPtrOutput() ExportTimePeriodPtrOutput {
	return i.ToExportTimePeriodPtrOutputWithContext(context.Background())
}

func (i *exportTimePeriodPtrType) ToExportTimePeriodPtrOutputWithContext(ctx context.Context) ExportTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportTimePeriodPtrOutput)
}

// The date range for data in the export. This should only be specified with timeFrame set to 'Custom'. The maximum date range is 3 months.
type ExportTimePeriodOutput struct{ *pulumi.OutputState }

func (ExportTimePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportTimePeriod)(nil)).Elem()
}

func (o ExportTimePeriodOutput) ToExportTimePeriodOutput() ExportTimePeriodOutput {
	return o
}

func (o ExportTimePeriodOutput) ToExportTimePeriodOutputWithContext(ctx context.Context) ExportTimePeriodOutput {
	return o
}

func (o ExportTimePeriodOutput) ToExportTimePeriodPtrOutput() ExportTimePeriodPtrOutput {
	return o.ToExportTimePeriodPtrOutputWithContext(context.Background())
}

func (o ExportTimePeriodOutput) ToExportTimePeriodPtrOutputWithContext(ctx context.Context) ExportTimePeriodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExportTimePeriod) *ExportTimePeriod {
		return &v
	}).(ExportTimePeriodPtrOutput)
}

// The start date for export data.
func (o ExportTimePeriodOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ExportTimePeriod) string { return v.From }).(pulumi.StringOutput)
}

// The end date for export data.
func (o ExportTimePeriodOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ExportTimePeriod) string { return v.To }).(pulumi.StringOutput)
}

type ExportTimePeriodPtrOutput struct{ *pulumi.OutputState }

func (ExportTimePeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportTimePeriod)(nil)).Elem()
}

func (o ExportTimePeriodPtrOutput) ToExportTimePeriodPtrOutput() ExportTimePeriodPtrOutput {
	return o
}

func (o ExportTimePeriodPtrOutput) ToExportTimePeriodPtrOutputWithContext(ctx context.Context) ExportTimePeriodPtrOutput {
	return o
}

func (o ExportTimePeriodPtrOutput) Elem() ExportTimePeriodOutput {
	return o.ApplyT(func(v *ExportTimePeriod) ExportTimePeriod {
		if v != nil {
			return *v
		}
		var ret ExportTimePeriod
		return ret
	}).(ExportTimePeriodOutput)
}

// The start date for export data.
func (o ExportTimePeriodPtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportTimePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date for export data.
func (o ExportTimePeriodPtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportTimePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.To
	}).(pulumi.StringPtrOutput)
}

// The date range for data in the export. This should only be specified with timeFrame set to 'Custom'. The maximum date range is 3 months.
type ExportTimePeriodResponse struct {
	// The start date for export data.
	From string `pulumi:"from"`
	// The end date for export data.
	To string `pulumi:"to"`
}

// The date range for data in the export. This should only be specified with timeFrame set to 'Custom'. The maximum date range is 3 months.
type ExportTimePeriodResponseOutput struct{ *pulumi.OutputState }

func (ExportTimePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportTimePeriodResponse)(nil)).Elem()
}

func (o ExportTimePeriodResponseOutput) ToExportTimePeriodResponseOutput() ExportTimePeriodResponseOutput {
	return o
}

func (o ExportTimePeriodResponseOutput) ToExportTimePeriodResponseOutputWithContext(ctx context.Context) ExportTimePeriodResponseOutput {
	return o
}

// The start date for export data.
func (o ExportTimePeriodResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ExportTimePeriodResponse) string { return v.From }).(pulumi.StringOutput)
}

// The end date for export data.
func (o ExportTimePeriodResponseOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ExportTimePeriodResponse) string { return v.To }).(pulumi.StringOutput)
}

type ExportTimePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportTimePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportTimePeriodResponse)(nil)).Elem()
}

func (o ExportTimePeriodResponsePtrOutput) ToExportTimePeriodResponsePtrOutput() ExportTimePeriodResponsePtrOutput {
	return o
}

func (o ExportTimePeriodResponsePtrOutput) ToExportTimePeriodResponsePtrOutputWithContext(ctx context.Context) ExportTimePeriodResponsePtrOutput {
	return o
}

func (o ExportTimePeriodResponsePtrOutput) Elem() ExportTimePeriodResponseOutput {
	return o.ApplyT(func(v *ExportTimePeriodResponse) ExportTimePeriodResponse {
		if v != nil {
			return *v
		}
		var ret ExportTimePeriodResponse
		return ret
	}).(ExportTimePeriodResponseOutput)
}

// The start date for export data.
func (o ExportTimePeriodResponsePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date for export data.
func (o ExportTimePeriodResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.To
	}).(pulumi.StringPtrOutput)
}

// Destination of the view data. Currently only csv format is supported.
type FileDestination struct {
	// Destination of the view data. Currently only csv format is supported.
	FileFormats []string `pulumi:"fileFormats"`
}

// FileDestinationInput is an input type that accepts FileDestinationArgs and FileDestinationOutput values.
// You can construct a concrete instance of `FileDestinationInput` via:
//
//	FileDestinationArgs{...}
type FileDestinationInput interface {
	pulumi.Input

	ToFileDestinationOutput() FileDestinationOutput
	ToFileDestinationOutputWithContext(context.Context) FileDestinationOutput
}

// Destination of the view data. Currently only csv format is supported.
type FileDestinationArgs struct {
	// Destination of the view data. Currently only csv format is supported.
	FileFormats pulumi.StringArrayInput `pulumi:"fileFormats"`
}

func (FileDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileDestination)(nil)).Elem()
}

func (i FileDestinationArgs) ToFileDestinationOutput() FileDestinationOutput {
	return i.ToFileDestinationOutputWithContext(context.Background())
}

func (i FileDestinationArgs) ToFileDestinationOutputWithContext(ctx context.Context) FileDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileDestinationOutput)
}

func (i FileDestinationArgs) ToFileDestinationPtrOutput() FileDestinationPtrOutput {
	return i.ToFileDestinationPtrOutputWithContext(context.Background())
}

func (i FileDestinationArgs) ToFileDestinationPtrOutputWithContext(ctx context.Context) FileDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileDestinationOutput).ToFileDestinationPtrOutputWithContext(ctx)
}

// FileDestinationPtrInput is an input type that accepts FileDestinationArgs, FileDestinationPtr and FileDestinationPtrOutput values.
// You can construct a concrete instance of `FileDestinationPtrInput` via:
//
//	        FileDestinationArgs{...}
//
//	or:
//
//	        nil
type FileDestinationPtrInput interface {
	pulumi.Input

	ToFileDestinationPtrOutput() FileDestinationPtrOutput
	ToFileDestinationPtrOutputWithContext(context.Context) FileDestinationPtrOutput
}

type fileDestinationPtrType FileDestinationArgs

func FileDestinationPtr(v *FileDestinationArgs) FileDestinationPtrInput {
	return (*fileDestinationPtrType)(v)
}

func (*fileDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileDestination)(nil)).Elem()
}

func (i *fileDestinationPtrType) ToFileDestinationPtrOutput() FileDestinationPtrOutput {
	return i.ToFileDestinationPtrOutputWithContext(context.Background())
}

func (i *fileDestinationPtrType) ToFileDestinationPtrOutputWithContext(ctx context.Context) FileDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileDestinationPtrOutput)
}

// Destination of the view data. Currently only csv format is supported.
type FileDestinationOutput struct{ *pulumi.OutputState }

func (FileDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileDestination)(nil)).Elem()
}

func (o FileDestinationOutput) ToFileDestinationOutput() FileDestinationOutput {
	return o
}

func (o FileDestinationOutput) ToFileDestinationOutputWithContext(ctx context.Context) FileDestinationOutput {
	return o
}

func (o FileDestinationOutput) ToFileDestinationPtrOutput() FileDestinationPtrOutput {
	return o.ToFileDestinationPtrOutputWithContext(context.Background())
}

func (o FileDestinationOutput) ToFileDestinationPtrOutputWithContext(ctx context.Context) FileDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileDestination) *FileDestination {
		return &v
	}).(FileDestinationPtrOutput)
}

// Destination of the view data. Currently only csv format is supported.
func (o FileDestinationOutput) FileFormats() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileDestination) []string { return v.FileFormats }).(pulumi.StringArrayOutput)
}

type FileDestinationPtrOutput struct{ *pulumi.OutputState }

func (FileDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileDestination)(nil)).Elem()
}

func (o FileDestinationPtrOutput) ToFileDestinationPtrOutput() FileDestinationPtrOutput {
	return o
}

func (o FileDestinationPtrOutput) ToFileDestinationPtrOutputWithContext(ctx context.Context) FileDestinationPtrOutput {
	return o
}

func (o FileDestinationPtrOutput) Elem() FileDestinationOutput {
	return o.ApplyT(func(v *FileDestination) FileDestination {
		if v != nil {
			return *v
		}
		var ret FileDestination
		return ret
	}).(FileDestinationOutput)
}

// Destination of the view data. Currently only csv format is supported.
func (o FileDestinationPtrOutput) FileFormats() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FileDestination) []string {
		if v == nil {
			return nil
		}
		return v.FileFormats
	}).(pulumi.StringArrayOutput)
}

// Destination of the view data. Currently only csv format is supported.
type FileDestinationResponse struct {
	// Destination of the view data. Currently only csv format is supported.
	FileFormats []string `pulumi:"fileFormats"`
}

// Destination of the view data. Currently only csv format is supported.
type FileDestinationResponseOutput struct{ *pulumi.OutputState }

func (FileDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileDestinationResponse)(nil)).Elem()
}

func (o FileDestinationResponseOutput) ToFileDestinationResponseOutput() FileDestinationResponseOutput {
	return o
}

func (o FileDestinationResponseOutput) ToFileDestinationResponseOutputWithContext(ctx context.Context) FileDestinationResponseOutput {
	return o
}

// Destination of the view data. Currently only csv format is supported.
func (o FileDestinationResponseOutput) FileFormats() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileDestinationResponse) []string { return v.FileFormats }).(pulumi.StringArrayOutput)
}

type FileDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (FileDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileDestinationResponse)(nil)).Elem()
}

func (o FileDestinationResponsePtrOutput) ToFileDestinationResponsePtrOutput() FileDestinationResponsePtrOutput {
	return o
}

func (o FileDestinationResponsePtrOutput) ToFileDestinationResponsePtrOutputWithContext(ctx context.Context) FileDestinationResponsePtrOutput {
	return o
}

func (o FileDestinationResponsePtrOutput) Elem() FileDestinationResponseOutput {
	return o.ApplyT(func(v *FileDestinationResponse) FileDestinationResponse {
		if v != nil {
			return *v
		}
		var ret FileDestinationResponse
		return ret
	}).(FileDestinationResponseOutput)
}

// Destination of the view data. Currently only csv format is supported.
func (o FileDestinationResponsePtrOutput) FileFormats() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FileDestinationResponse) []string {
		if v == nil {
			return nil
		}
		return v.FileFormats
	}).(pulumi.StringArrayOutput)
}

// Each KPI must contain a 'type' and 'enabled' key.
type KpiProperties struct {
	// show the KPI in the UI?
	Enabled *bool `pulumi:"enabled"`
	// ID of resource related to metric (budget).
	Id *string `pulumi:"id"`
	// KPI type (Forecast, Budget).
	Type *string `pulumi:"type"`
}

// KpiPropertiesInput is an input type that accepts KpiPropertiesArgs and KpiPropertiesOutput values.
// You can construct a concrete instance of `KpiPropertiesInput` via:
//
//	KpiPropertiesArgs{...}
type KpiPropertiesInput interface {
	pulumi.Input

	ToKpiPropertiesOutput() KpiPropertiesOutput
	ToKpiPropertiesOutputWithContext(context.Context) KpiPropertiesOutput
}

// Each KPI must contain a 'type' and 'enabled' key.
type KpiPropertiesArgs struct {
	// show the KPI in the UI?
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// ID of resource related to metric (budget).
	Id pulumi.StringPtrInput `pulumi:"id"`
	// KPI type (Forecast, Budget).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KpiPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiProperties)(nil)).Elem()
}

func (i KpiPropertiesArgs) ToKpiPropertiesOutput() KpiPropertiesOutput {
	return i.ToKpiPropertiesOutputWithContext(context.Background())
}

func (i KpiPropertiesArgs) ToKpiPropertiesOutputWithContext(ctx context.Context) KpiPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiPropertiesOutput)
}

// KpiPropertiesArrayInput is an input type that accepts KpiPropertiesArray and KpiPropertiesArrayOutput values.
// You can construct a concrete instance of `KpiPropertiesArrayInput` via:
//
//	KpiPropertiesArray{ KpiPropertiesArgs{...} }
type KpiPropertiesArrayInput interface {
	pulumi.Input

	ToKpiPropertiesArrayOutput() KpiPropertiesArrayOutput
	ToKpiPropertiesArrayOutputWithContext(context.Context) KpiPropertiesArrayOutput
}

type KpiPropertiesArray []KpiPropertiesInput

func (KpiPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KpiProperties)(nil)).Elem()
}

func (i KpiPropertiesArray) ToKpiPropertiesArrayOutput() KpiPropertiesArrayOutput {
	return i.ToKpiPropertiesArrayOutputWithContext(context.Background())
}

func (i KpiPropertiesArray) ToKpiPropertiesArrayOutputWithContext(ctx context.Context) KpiPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiPropertiesArrayOutput)
}

// Each KPI must contain a 'type' and 'enabled' key.
type KpiPropertiesOutput struct{ *pulumi.OutputState }

func (KpiPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiProperties)(nil)).Elem()
}

func (o KpiPropertiesOutput) ToKpiPropertiesOutput() KpiPropertiesOutput {
	return o
}

func (o KpiPropertiesOutput) ToKpiPropertiesOutputWithContext(ctx context.Context) KpiPropertiesOutput {
	return o
}

// show the KPI in the UI?
func (o KpiPropertiesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KpiProperties) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// ID of resource related to metric (budget).
func (o KpiPropertiesOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KpiProperties) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// KPI type (Forecast, Budget).
func (o KpiPropertiesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KpiProperties) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KpiPropertiesArrayOutput struct{ *pulumi.OutputState }

func (KpiPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KpiProperties)(nil)).Elem()
}

func (o KpiPropertiesArrayOutput) ToKpiPropertiesArrayOutput() KpiPropertiesArrayOutput {
	return o
}

func (o KpiPropertiesArrayOutput) ToKpiPropertiesArrayOutputWithContext(ctx context.Context) KpiPropertiesArrayOutput {
	return o
}

func (o KpiPropertiesArrayOutput) Index(i pulumi.IntInput) KpiPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KpiProperties {
		return vs[0].([]KpiProperties)[vs[1].(int)]
	}).(KpiPropertiesOutput)
}

// Each KPI must contain a 'type' and 'enabled' key.
type KpiPropertiesResponse struct {
	// show the KPI in the UI?
	Enabled *bool `pulumi:"enabled"`
	// ID of resource related to metric (budget).
	Id *string `pulumi:"id"`
	// KPI type (Forecast, Budget).
	Type *string `pulumi:"type"`
}

// Each KPI must contain a 'type' and 'enabled' key.
type KpiPropertiesResponseOutput struct{ *pulumi.OutputState }

func (KpiPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiPropertiesResponse)(nil)).Elem()
}

func (o KpiPropertiesResponseOutput) ToKpiPropertiesResponseOutput() KpiPropertiesResponseOutput {
	return o
}

func (o KpiPropertiesResponseOutput) ToKpiPropertiesResponseOutputWithContext(ctx context.Context) KpiPropertiesResponseOutput {
	return o
}

// show the KPI in the UI?
func (o KpiPropertiesResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KpiPropertiesResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// ID of resource related to metric (budget).
func (o KpiPropertiesResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KpiPropertiesResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// KPI type (Forecast, Budget).
func (o KpiPropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KpiPropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KpiPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (KpiPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KpiPropertiesResponse)(nil)).Elem()
}

func (o KpiPropertiesResponseArrayOutput) ToKpiPropertiesResponseArrayOutput() KpiPropertiesResponseArrayOutput {
	return o
}

func (o KpiPropertiesResponseArrayOutput) ToKpiPropertiesResponseArrayOutputWithContext(ctx context.Context) KpiPropertiesResponseArrayOutput {
	return o
}

func (o KpiPropertiesResponseArrayOutput) Index(i pulumi.IntInput) KpiPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KpiPropertiesResponse {
		return vs[0].([]KpiPropertiesResponse)[vs[1].(int)]
	}).(KpiPropertiesResponseOutput)
}

// The properties of the scheduled action notification.
type NotificationProperties struct {
	// Optional message to be added in the email. Length is limited to 250 characters.
	Message *string `pulumi:"message"`
	// Subject of the email. Length is limited to 70 characters.
	Subject string `pulumi:"subject"`
	// Array of email addresses.
	To []string `pulumi:"to"`
}

// NotificationPropertiesInput is an input type that accepts NotificationPropertiesArgs and NotificationPropertiesOutput values.
// You can construct a concrete instance of `NotificationPropertiesInput` via:
//
//	NotificationPropertiesArgs{...}
type NotificationPropertiesInput interface {
	pulumi.Input

	ToNotificationPropertiesOutput() NotificationPropertiesOutput
	ToNotificationPropertiesOutputWithContext(context.Context) NotificationPropertiesOutput
}

// The properties of the scheduled action notification.
type NotificationPropertiesArgs struct {
	// Optional message to be added in the email. Length is limited to 250 characters.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Subject of the email. Length is limited to 70 characters.
	Subject pulumi.StringInput `pulumi:"subject"`
	// Array of email addresses.
	To pulumi.StringArrayInput `pulumi:"to"`
}

func (NotificationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationProperties)(nil)).Elem()
}

func (i NotificationPropertiesArgs) ToNotificationPropertiesOutput() NotificationPropertiesOutput {
	return i.ToNotificationPropertiesOutputWithContext(context.Background())
}

func (i NotificationPropertiesArgs) ToNotificationPropertiesOutputWithContext(ctx context.Context) NotificationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPropertiesOutput)
}

// The properties of the scheduled action notification.
type NotificationPropertiesOutput struct{ *pulumi.OutputState }

func (NotificationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationProperties)(nil)).Elem()
}

func (o NotificationPropertiesOutput) ToNotificationPropertiesOutput() NotificationPropertiesOutput {
	return o
}

func (o NotificationPropertiesOutput) ToNotificationPropertiesOutputWithContext(ctx context.Context) NotificationPropertiesOutput {
	return o
}

// Optional message to be added in the email. Length is limited to 250 characters.
func (o NotificationPropertiesOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationProperties) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Subject of the email. Length is limited to 70 characters.
func (o NotificationPropertiesOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationProperties) string { return v.Subject }).(pulumi.StringOutput)
}

// Array of email addresses.
func (o NotificationPropertiesOutput) To() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationProperties) []string { return v.To }).(pulumi.StringArrayOutput)
}

// The properties of the scheduled action notification.
type NotificationPropertiesResponse struct {
	// Optional message to be added in the email. Length is limited to 250 characters.
	Message *string `pulumi:"message"`
	// Subject of the email. Length is limited to 70 characters.
	Subject string `pulumi:"subject"`
	// Array of email addresses.
	To []string `pulumi:"to"`
}

// The properties of the scheduled action notification.
type NotificationPropertiesResponseOutput struct{ *pulumi.OutputState }

func (NotificationPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPropertiesResponse)(nil)).Elem()
}

func (o NotificationPropertiesResponseOutput) ToNotificationPropertiesResponseOutput() NotificationPropertiesResponseOutput {
	return o
}

func (o NotificationPropertiesResponseOutput) ToNotificationPropertiesResponseOutputWithContext(ctx context.Context) NotificationPropertiesResponseOutput {
	return o
}

// Optional message to be added in the email. Length is limited to 250 characters.
func (o NotificationPropertiesResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPropertiesResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Subject of the email. Length is limited to 70 characters.
func (o NotificationPropertiesResponseOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPropertiesResponse) string { return v.Subject }).(pulumi.StringOutput)
}

// Array of email addresses.
func (o NotificationPropertiesResponseOutput) To() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPropertiesResponse) []string { return v.To }).(pulumi.StringArrayOutput)
}

// Each pivot must contain a 'type' and 'name'.
type PivotProperties struct {
	// Data field to show in view.
	Name *string `pulumi:"name"`
	// Data type to show in view.
	Type *string `pulumi:"type"`
}

// PivotPropertiesInput is an input type that accepts PivotPropertiesArgs and PivotPropertiesOutput values.
// You can construct a concrete instance of `PivotPropertiesInput` via:
//
//	PivotPropertiesArgs{...}
type PivotPropertiesInput interface {
	pulumi.Input

	ToPivotPropertiesOutput() PivotPropertiesOutput
	ToPivotPropertiesOutputWithContext(context.Context) PivotPropertiesOutput
}

// Each pivot must contain a 'type' and 'name'.
type PivotPropertiesArgs struct {
	// Data field to show in view.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Data type to show in view.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PivotPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PivotProperties)(nil)).Elem()
}

func (i PivotPropertiesArgs) ToPivotPropertiesOutput() PivotPropertiesOutput {
	return i.ToPivotPropertiesOutputWithContext(context.Background())
}

func (i PivotPropertiesArgs) ToPivotPropertiesOutputWithContext(ctx context.Context) PivotPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PivotPropertiesOutput)
}

// PivotPropertiesArrayInput is an input type that accepts PivotPropertiesArray and PivotPropertiesArrayOutput values.
// You can construct a concrete instance of `PivotPropertiesArrayInput` via:
//
//	PivotPropertiesArray{ PivotPropertiesArgs{...} }
type PivotPropertiesArrayInput interface {
	pulumi.Input

	ToPivotPropertiesArrayOutput() PivotPropertiesArrayOutput
	ToPivotPropertiesArrayOutputWithContext(context.Context) PivotPropertiesArrayOutput
}

type PivotPropertiesArray []PivotPropertiesInput

func (PivotPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PivotProperties)(nil)).Elem()
}

func (i PivotPropertiesArray) ToPivotPropertiesArrayOutput() PivotPropertiesArrayOutput {
	return i.ToPivotPropertiesArrayOutputWithContext(context.Background())
}

func (i PivotPropertiesArray) ToPivotPropertiesArrayOutputWithContext(ctx context.Context) PivotPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PivotPropertiesArrayOutput)
}

// Each pivot must contain a 'type' and 'name'.
type PivotPropertiesOutput struct{ *pulumi.OutputState }

func (PivotPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PivotProperties)(nil)).Elem()
}

func (o PivotPropertiesOutput) ToPivotPropertiesOutput() PivotPropertiesOutput {
	return o
}

func (o PivotPropertiesOutput) ToPivotPropertiesOutputWithContext(ctx context.Context) PivotPropertiesOutput {
	return o
}

// Data field to show in view.
func (o PivotPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PivotProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Data type to show in view.
func (o PivotPropertiesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PivotProperties) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PivotPropertiesArrayOutput struct{ *pulumi.OutputState }

func (PivotPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PivotProperties)(nil)).Elem()
}

func (o PivotPropertiesArrayOutput) ToPivotPropertiesArrayOutput() PivotPropertiesArrayOutput {
	return o
}

func (o PivotPropertiesArrayOutput) ToPivotPropertiesArrayOutputWithContext(ctx context.Context) PivotPropertiesArrayOutput {
	return o
}

func (o PivotPropertiesArrayOutput) Index(i pulumi.IntInput) PivotPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PivotProperties {
		return vs[0].([]PivotProperties)[vs[1].(int)]
	}).(PivotPropertiesOutput)
}

// Each pivot must contain a 'type' and 'name'.
type PivotPropertiesResponse struct {
	// Data field to show in view.
	Name *string `pulumi:"name"`
	// Data type to show in view.
	Type *string `pulumi:"type"`
}

// Each pivot must contain a 'type' and 'name'.
type PivotPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PivotPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PivotPropertiesResponse)(nil)).Elem()
}

func (o PivotPropertiesResponseOutput) ToPivotPropertiesResponseOutput() PivotPropertiesResponseOutput {
	return o
}

func (o PivotPropertiesResponseOutput) ToPivotPropertiesResponseOutputWithContext(ctx context.Context) PivotPropertiesResponseOutput {
	return o
}

// Data field to show in view.
func (o PivotPropertiesResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PivotPropertiesResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Data type to show in view.
func (o PivotPropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PivotPropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PivotPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (PivotPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PivotPropertiesResponse)(nil)).Elem()
}

func (o PivotPropertiesResponseArrayOutput) ToPivotPropertiesResponseArrayOutput() PivotPropertiesResponseArrayOutput {
	return o
}

func (o PivotPropertiesResponseArrayOutput) ToPivotPropertiesResponseArrayOutputWithContext(ctx context.Context) PivotPropertiesResponseArrayOutput {
	return o
}

func (o PivotPropertiesResponseArrayOutput) Index(i pulumi.IntInput) PivotPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PivotPropertiesResponse {
		return vs[0].([]PivotPropertiesResponse)[vs[1].(int)]
	}).(PivotPropertiesResponseOutput)
}

// The aggregation expression to be used in the report.
type ReportAggregation struct {
	// The name of the aggregation function to use.
	Function string `pulumi:"function"`
	// The name of the column to aggregate.
	Name string `pulumi:"name"`
}

// ReportAggregationInput is an input type that accepts ReportAggregationArgs and ReportAggregationOutput values.
// You can construct a concrete instance of `ReportAggregationInput` via:
//
//	ReportAggregationArgs{...}
type ReportAggregationInput interface {
	pulumi.Input

	ToReportAggregationOutput() ReportAggregationOutput
	ToReportAggregationOutputWithContext(context.Context) ReportAggregationOutput
}

// The aggregation expression to be used in the report.
type ReportAggregationArgs struct {
	// The name of the aggregation function to use.
	Function pulumi.StringInput `pulumi:"function"`
	// The name of the column to aggregate.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ReportAggregationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportAggregation)(nil)).Elem()
}

func (i ReportAggregationArgs) ToReportAggregationOutput() ReportAggregationOutput {
	return i.ToReportAggregationOutputWithContext(context.Background())
}

func (i ReportAggregationArgs) ToReportAggregationOutputWithContext(ctx context.Context) ReportAggregationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportAggregationOutput)
}

// ReportAggregationMapInput is an input type that accepts ReportAggregationMap and ReportAggregationMapOutput values.
// You can construct a concrete instance of `ReportAggregationMapInput` via:
//
//	ReportAggregationMap{ "key": ReportAggregationArgs{...} }
type ReportAggregationMapInput interface {
	pulumi.Input

	ToReportAggregationMapOutput() ReportAggregationMapOutput
	ToReportAggregationMapOutputWithContext(context.Context) ReportAggregationMapOutput
}

type ReportAggregationMap map[string]ReportAggregationInput

func (ReportAggregationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReportAggregation)(nil)).Elem()
}

func (i ReportAggregationMap) ToReportAggregationMapOutput() ReportAggregationMapOutput {
	return i.ToReportAggregationMapOutputWithContext(context.Background())
}

func (i ReportAggregationMap) ToReportAggregationMapOutputWithContext(ctx context.Context) ReportAggregationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportAggregationMapOutput)
}

// The aggregation expression to be used in the report.
type ReportAggregationOutput struct{ *pulumi.OutputState }

func (ReportAggregationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportAggregation)(nil)).Elem()
}

func (o ReportAggregationOutput) ToReportAggregationOutput() ReportAggregationOutput {
	return o
}

func (o ReportAggregationOutput) ToReportAggregationOutputWithContext(ctx context.Context) ReportAggregationOutput {
	return o
}

// The name of the aggregation function to use.
func (o ReportAggregationOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v ReportAggregation) string { return v.Function }).(pulumi.StringOutput)
}

// The name of the column to aggregate.
func (o ReportAggregationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportAggregation) string { return v.Name }).(pulumi.StringOutput)
}

type ReportAggregationMapOutput struct{ *pulumi.OutputState }

func (ReportAggregationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReportAggregation)(nil)).Elem()
}

func (o ReportAggregationMapOutput) ToReportAggregationMapOutput() ReportAggregationMapOutput {
	return o
}

func (o ReportAggregationMapOutput) ToReportAggregationMapOutputWithContext(ctx context.Context) ReportAggregationMapOutput {
	return o
}

func (o ReportAggregationMapOutput) MapIndex(k pulumi.StringInput) ReportAggregationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ReportAggregation {
		return vs[0].(map[string]ReportAggregation)[vs[1].(string)]
	}).(ReportAggregationOutput)
}

// The aggregation expression to be used in the report.
type ReportAggregationResponse struct {
	// The name of the aggregation function to use.
	Function string `pulumi:"function"`
	// The name of the column to aggregate.
	Name string `pulumi:"name"`
}

// The aggregation expression to be used in the report.
type ReportAggregationResponseOutput struct{ *pulumi.OutputState }

func (ReportAggregationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportAggregationResponse)(nil)).Elem()
}

func (o ReportAggregationResponseOutput) ToReportAggregationResponseOutput() ReportAggregationResponseOutput {
	return o
}

func (o ReportAggregationResponseOutput) ToReportAggregationResponseOutputWithContext(ctx context.Context) ReportAggregationResponseOutput {
	return o
}

// The name of the aggregation function to use.
func (o ReportAggregationResponseOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v ReportAggregationResponse) string { return v.Function }).(pulumi.StringOutput)
}

// The name of the column to aggregate.
func (o ReportAggregationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportAggregationResponse) string { return v.Name }).(pulumi.StringOutput)
}

type ReportAggregationResponseMapOutput struct{ *pulumi.OutputState }

func (ReportAggregationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReportAggregationResponse)(nil)).Elem()
}

func (o ReportAggregationResponseMapOutput) ToReportAggregationResponseMapOutput() ReportAggregationResponseMapOutput {
	return o
}

func (o ReportAggregationResponseMapOutput) ToReportAggregationResponseMapOutputWithContext(ctx context.Context) ReportAggregationResponseMapOutput {
	return o
}

func (o ReportAggregationResponseMapOutput) MapIndex(k pulumi.StringInput) ReportAggregationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ReportAggregationResponse {
		return vs[0].(map[string]ReportAggregationResponse)[vs[1].(string)]
	}).(ReportAggregationResponseOutput)
}

// The comparison expression to be used in the report.
type ReportComparisonExpression struct {
	// The name of the column to use in comparison.
	Name string `pulumi:"name"`
	// The operator to use for comparison.
	Operator string `pulumi:"operator"`
	// Array of values to use for comparison
	Values []string `pulumi:"values"`
}

// ReportComparisonExpressionInput is an input type that accepts ReportComparisonExpressionArgs and ReportComparisonExpressionOutput values.
// You can construct a concrete instance of `ReportComparisonExpressionInput` via:
//
//	ReportComparisonExpressionArgs{...}
type ReportComparisonExpressionInput interface {
	pulumi.Input

	ToReportComparisonExpressionOutput() ReportComparisonExpressionOutput
	ToReportComparisonExpressionOutputWithContext(context.Context) ReportComparisonExpressionOutput
}

// The comparison expression to be used in the report.
type ReportComparisonExpressionArgs struct {
	// The name of the column to use in comparison.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator to use for comparison.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Array of values to use for comparison
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ReportComparisonExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportComparisonExpression)(nil)).Elem()
}

func (i ReportComparisonExpressionArgs) ToReportComparisonExpressionOutput() ReportComparisonExpressionOutput {
	return i.ToReportComparisonExpressionOutputWithContext(context.Background())
}

func (i ReportComparisonExpressionArgs) ToReportComparisonExpressionOutputWithContext(ctx context.Context) ReportComparisonExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportComparisonExpressionOutput)
}

func (i ReportComparisonExpressionArgs) ToReportComparisonExpressionPtrOutput() ReportComparisonExpressionPtrOutput {
	return i.ToReportComparisonExpressionPtrOutputWithContext(context.Background())
}

func (i ReportComparisonExpressionArgs) ToReportComparisonExpressionPtrOutputWithContext(ctx context.Context) ReportComparisonExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportComparisonExpressionOutput).ToReportComparisonExpressionPtrOutputWithContext(ctx)
}

// ReportComparisonExpressionPtrInput is an input type that accepts ReportComparisonExpressionArgs, ReportComparisonExpressionPtr and ReportComparisonExpressionPtrOutput values.
// You can construct a concrete instance of `ReportComparisonExpressionPtrInput` via:
//
//	        ReportComparisonExpressionArgs{...}
//
//	or:
//
//	        nil
type ReportComparisonExpressionPtrInput interface {
	pulumi.Input

	ToReportComparisonExpressionPtrOutput() ReportComparisonExpressionPtrOutput
	ToReportComparisonExpressionPtrOutputWithContext(context.Context) ReportComparisonExpressionPtrOutput
}

type reportComparisonExpressionPtrType ReportComparisonExpressionArgs

func ReportComparisonExpressionPtr(v *ReportComparisonExpressionArgs) ReportComparisonExpressionPtrInput {
	return (*reportComparisonExpressionPtrType)(v)
}

func (*reportComparisonExpressionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportComparisonExpression)(nil)).Elem()
}

func (i *reportComparisonExpressionPtrType) ToReportComparisonExpressionPtrOutput() ReportComparisonExpressionPtrOutput {
	return i.ToReportComparisonExpressionPtrOutputWithContext(context.Background())
}

func (i *reportComparisonExpressionPtrType) ToReportComparisonExpressionPtrOutputWithContext(ctx context.Context) ReportComparisonExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportComparisonExpressionPtrOutput)
}

// The comparison expression to be used in the report.
type ReportComparisonExpressionOutput struct{ *pulumi.OutputState }

func (ReportComparisonExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportComparisonExpression)(nil)).Elem()
}

func (o ReportComparisonExpressionOutput) ToReportComparisonExpressionOutput() ReportComparisonExpressionOutput {
	return o
}

func (o ReportComparisonExpressionOutput) ToReportComparisonExpressionOutputWithContext(ctx context.Context) ReportComparisonExpressionOutput {
	return o
}

func (o ReportComparisonExpressionOutput) ToReportComparisonExpressionPtrOutput() ReportComparisonExpressionPtrOutput {
	return o.ToReportComparisonExpressionPtrOutputWithContext(context.Background())
}

func (o ReportComparisonExpressionOutput) ToReportComparisonExpressionPtrOutputWithContext(ctx context.Context) ReportComparisonExpressionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportComparisonExpression) *ReportComparisonExpression {
		return &v
	}).(ReportComparisonExpressionPtrOutput)
}

// The name of the column to use in comparison.
func (o ReportComparisonExpressionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportComparisonExpression) string { return v.Name }).(pulumi.StringOutput)
}

// The operator to use for comparison.
func (o ReportComparisonExpressionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ReportComparisonExpression) string { return v.Operator }).(pulumi.StringOutput)
}

// Array of values to use for comparison
func (o ReportComparisonExpressionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportComparisonExpression) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ReportComparisonExpressionPtrOutput struct{ *pulumi.OutputState }

func (ReportComparisonExpressionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportComparisonExpression)(nil)).Elem()
}

func (o ReportComparisonExpressionPtrOutput) ToReportComparisonExpressionPtrOutput() ReportComparisonExpressionPtrOutput {
	return o
}

func (o ReportComparisonExpressionPtrOutput) ToReportComparisonExpressionPtrOutputWithContext(ctx context.Context) ReportComparisonExpressionPtrOutput {
	return o
}

func (o ReportComparisonExpressionPtrOutput) Elem() ReportComparisonExpressionOutput {
	return o.ApplyT(func(v *ReportComparisonExpression) ReportComparisonExpression {
		if v != nil {
			return *v
		}
		var ret ReportComparisonExpression
		return ret
	}).(ReportComparisonExpressionOutput)
}

// The name of the column to use in comparison.
func (o ReportComparisonExpressionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportComparisonExpression) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The operator to use for comparison.
func (o ReportComparisonExpressionPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportComparisonExpression) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Array of values to use for comparison
func (o ReportComparisonExpressionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportComparisonExpression) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// The comparison expression to be used in the report.
type ReportComparisonExpressionResponse struct {
	// The name of the column to use in comparison.
	Name string `pulumi:"name"`
	// The operator to use for comparison.
	Operator string `pulumi:"operator"`
	// Array of values to use for comparison
	Values []string `pulumi:"values"`
}

// The comparison expression to be used in the report.
type ReportComparisonExpressionResponseOutput struct{ *pulumi.OutputState }

func (ReportComparisonExpressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportComparisonExpressionResponse)(nil)).Elem()
}

func (o ReportComparisonExpressionResponseOutput) ToReportComparisonExpressionResponseOutput() ReportComparisonExpressionResponseOutput {
	return o
}

func (o ReportComparisonExpressionResponseOutput) ToReportComparisonExpressionResponseOutputWithContext(ctx context.Context) ReportComparisonExpressionResponseOutput {
	return o
}

// The name of the column to use in comparison.
func (o ReportComparisonExpressionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportComparisonExpressionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The operator to use for comparison.
func (o ReportComparisonExpressionResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ReportComparisonExpressionResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Array of values to use for comparison
func (o ReportComparisonExpressionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportComparisonExpressionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ReportComparisonExpressionResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportComparisonExpressionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportComparisonExpressionResponse)(nil)).Elem()
}

func (o ReportComparisonExpressionResponsePtrOutput) ToReportComparisonExpressionResponsePtrOutput() ReportComparisonExpressionResponsePtrOutput {
	return o
}

func (o ReportComparisonExpressionResponsePtrOutput) ToReportComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) ReportComparisonExpressionResponsePtrOutput {
	return o
}

func (o ReportComparisonExpressionResponsePtrOutput) Elem() ReportComparisonExpressionResponseOutput {
	return o.ApplyT(func(v *ReportComparisonExpressionResponse) ReportComparisonExpressionResponse {
		if v != nil {
			return *v
		}
		var ret ReportComparisonExpressionResponse
		return ret
	}).(ReportComparisonExpressionResponseOutput)
}

// The name of the column to use in comparison.
func (o ReportComparisonExpressionResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportComparisonExpressionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The operator to use for comparison.
func (o ReportComparisonExpressionResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportComparisonExpressionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Array of values to use for comparison
func (o ReportComparisonExpressionResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportComparisonExpressionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// The aggregation expression to be used in the report.
type ReportConfigAggregation struct {
	// The name of the aggregation function to use.
	Function string `pulumi:"function"`
	// The name of the column to aggregate.
	Name string `pulumi:"name"`
}

// ReportConfigAggregationInput is an input type that accepts ReportConfigAggregationArgs and ReportConfigAggregationOutput values.
// You can construct a concrete instance of `ReportConfigAggregationInput` via:
//
//	ReportConfigAggregationArgs{...}
type ReportConfigAggregationInput interface {
	pulumi.Input

	ToReportConfigAggregationOutput() ReportConfigAggregationOutput
	ToReportConfigAggregationOutputWithContext(context.Context) ReportConfigAggregationOutput
}

// The aggregation expression to be used in the report.
type ReportConfigAggregationArgs struct {
	// The name of the aggregation function to use.
	Function pulumi.StringInput `pulumi:"function"`
	// The name of the column to aggregate.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ReportConfigAggregationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigAggregation)(nil)).Elem()
}

func (i ReportConfigAggregationArgs) ToReportConfigAggregationOutput() ReportConfigAggregationOutput {
	return i.ToReportConfigAggregationOutputWithContext(context.Background())
}

func (i ReportConfigAggregationArgs) ToReportConfigAggregationOutputWithContext(ctx context.Context) ReportConfigAggregationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigAggregationOutput)
}

// ReportConfigAggregationMapInput is an input type that accepts ReportConfigAggregationMap and ReportConfigAggregationMapOutput values.
// You can construct a concrete instance of `ReportConfigAggregationMapInput` via:
//
//	ReportConfigAggregationMap{ "key": ReportConfigAggregationArgs{...} }
type ReportConfigAggregationMapInput interface {
	pulumi.Input

	ToReportConfigAggregationMapOutput() ReportConfigAggregationMapOutput
	ToReportConfigAggregationMapOutputWithContext(context.Context) ReportConfigAggregationMapOutput
}

type ReportConfigAggregationMap map[string]ReportConfigAggregationInput

func (ReportConfigAggregationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReportConfigAggregation)(nil)).Elem()
}

func (i ReportConfigAggregationMap) ToReportConfigAggregationMapOutput() ReportConfigAggregationMapOutput {
	return i.ToReportConfigAggregationMapOutputWithContext(context.Background())
}

func (i ReportConfigAggregationMap) ToReportConfigAggregationMapOutputWithContext(ctx context.Context) ReportConfigAggregationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigAggregationMapOutput)
}

// The aggregation expression to be used in the report.
type ReportConfigAggregationOutput struct{ *pulumi.OutputState }

func (ReportConfigAggregationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigAggregation)(nil)).Elem()
}

func (o ReportConfigAggregationOutput) ToReportConfigAggregationOutput() ReportConfigAggregationOutput {
	return o
}

func (o ReportConfigAggregationOutput) ToReportConfigAggregationOutputWithContext(ctx context.Context) ReportConfigAggregationOutput {
	return o
}

// The name of the aggregation function to use.
func (o ReportConfigAggregationOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigAggregation) string { return v.Function }).(pulumi.StringOutput)
}

// The name of the column to aggregate.
func (o ReportConfigAggregationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigAggregation) string { return v.Name }).(pulumi.StringOutput)
}

type ReportConfigAggregationMapOutput struct{ *pulumi.OutputState }

func (ReportConfigAggregationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReportConfigAggregation)(nil)).Elem()
}

func (o ReportConfigAggregationMapOutput) ToReportConfigAggregationMapOutput() ReportConfigAggregationMapOutput {
	return o
}

func (o ReportConfigAggregationMapOutput) ToReportConfigAggregationMapOutputWithContext(ctx context.Context) ReportConfigAggregationMapOutput {
	return o
}

func (o ReportConfigAggregationMapOutput) MapIndex(k pulumi.StringInput) ReportConfigAggregationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ReportConfigAggregation {
		return vs[0].(map[string]ReportConfigAggregation)[vs[1].(string)]
	}).(ReportConfigAggregationOutput)
}

// The aggregation expression to be used in the report.
type ReportConfigAggregationResponse struct {
	// The name of the aggregation function to use.
	Function string `pulumi:"function"`
	// The name of the column to aggregate.
	Name string `pulumi:"name"`
}

// The aggregation expression to be used in the report.
type ReportConfigAggregationResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigAggregationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigAggregationResponse)(nil)).Elem()
}

func (o ReportConfigAggregationResponseOutput) ToReportConfigAggregationResponseOutput() ReportConfigAggregationResponseOutput {
	return o
}

func (o ReportConfigAggregationResponseOutput) ToReportConfigAggregationResponseOutputWithContext(ctx context.Context) ReportConfigAggregationResponseOutput {
	return o
}

// The name of the aggregation function to use.
func (o ReportConfigAggregationResponseOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigAggregationResponse) string { return v.Function }).(pulumi.StringOutput)
}

// The name of the column to aggregate.
func (o ReportConfigAggregationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigAggregationResponse) string { return v.Name }).(pulumi.StringOutput)
}

type ReportConfigAggregationResponseMapOutput struct{ *pulumi.OutputState }

func (ReportConfigAggregationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReportConfigAggregationResponse)(nil)).Elem()
}

func (o ReportConfigAggregationResponseMapOutput) ToReportConfigAggregationResponseMapOutput() ReportConfigAggregationResponseMapOutput {
	return o
}

func (o ReportConfigAggregationResponseMapOutput) ToReportConfigAggregationResponseMapOutputWithContext(ctx context.Context) ReportConfigAggregationResponseMapOutput {
	return o
}

func (o ReportConfigAggregationResponseMapOutput) MapIndex(k pulumi.StringInput) ReportConfigAggregationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ReportConfigAggregationResponse {
		return vs[0].(map[string]ReportConfigAggregationResponse)[vs[1].(string)]
	}).(ReportConfigAggregationResponseOutput)
}

// The comparison expression to be used in the report.
type ReportConfigComparisonExpression struct {
	// The name of the column to use in comparison.
	Name string `pulumi:"name"`
	// The operator to use for comparison.
	Operator string `pulumi:"operator"`
	// Array of values to use for comparison
	Values []string `pulumi:"values"`
}

// ReportConfigComparisonExpressionInput is an input type that accepts ReportConfigComparisonExpressionArgs and ReportConfigComparisonExpressionOutput values.
// You can construct a concrete instance of `ReportConfigComparisonExpressionInput` via:
//
//	ReportConfigComparisonExpressionArgs{...}
type ReportConfigComparisonExpressionInput interface {
	pulumi.Input

	ToReportConfigComparisonExpressionOutput() ReportConfigComparisonExpressionOutput
	ToReportConfigComparisonExpressionOutputWithContext(context.Context) ReportConfigComparisonExpressionOutput
}

// The comparison expression to be used in the report.
type ReportConfigComparisonExpressionArgs struct {
	// The name of the column to use in comparison.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator to use for comparison.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Array of values to use for comparison
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ReportConfigComparisonExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigComparisonExpression)(nil)).Elem()
}

func (i ReportConfigComparisonExpressionArgs) ToReportConfigComparisonExpressionOutput() ReportConfigComparisonExpressionOutput {
	return i.ToReportConfigComparisonExpressionOutputWithContext(context.Background())
}

func (i ReportConfigComparisonExpressionArgs) ToReportConfigComparisonExpressionOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigComparisonExpressionOutput)
}

func (i ReportConfigComparisonExpressionArgs) ToReportConfigComparisonExpressionPtrOutput() ReportConfigComparisonExpressionPtrOutput {
	return i.ToReportConfigComparisonExpressionPtrOutputWithContext(context.Background())
}

func (i ReportConfigComparisonExpressionArgs) ToReportConfigComparisonExpressionPtrOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigComparisonExpressionOutput).ToReportConfigComparisonExpressionPtrOutputWithContext(ctx)
}

// ReportConfigComparisonExpressionPtrInput is an input type that accepts ReportConfigComparisonExpressionArgs, ReportConfigComparisonExpressionPtr and ReportConfigComparisonExpressionPtrOutput values.
// You can construct a concrete instance of `ReportConfigComparisonExpressionPtrInput` via:
//
//	        ReportConfigComparisonExpressionArgs{...}
//
//	or:
//
//	        nil
type ReportConfigComparisonExpressionPtrInput interface {
	pulumi.Input

	ToReportConfigComparisonExpressionPtrOutput() ReportConfigComparisonExpressionPtrOutput
	ToReportConfigComparisonExpressionPtrOutputWithContext(context.Context) ReportConfigComparisonExpressionPtrOutput
}

type reportConfigComparisonExpressionPtrType ReportConfigComparisonExpressionArgs

func ReportConfigComparisonExpressionPtr(v *ReportConfigComparisonExpressionArgs) ReportConfigComparisonExpressionPtrInput {
	return (*reportConfigComparisonExpressionPtrType)(v)
}

func (*reportConfigComparisonExpressionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigComparisonExpression)(nil)).Elem()
}

func (i *reportConfigComparisonExpressionPtrType) ToReportConfigComparisonExpressionPtrOutput() ReportConfigComparisonExpressionPtrOutput {
	return i.ToReportConfigComparisonExpressionPtrOutputWithContext(context.Background())
}

func (i *reportConfigComparisonExpressionPtrType) ToReportConfigComparisonExpressionPtrOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigComparisonExpressionPtrOutput)
}

// The comparison expression to be used in the report.
type ReportConfigComparisonExpressionOutput struct{ *pulumi.OutputState }

func (ReportConfigComparisonExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigComparisonExpression)(nil)).Elem()
}

func (o ReportConfigComparisonExpressionOutput) ToReportConfigComparisonExpressionOutput() ReportConfigComparisonExpressionOutput {
	return o
}

func (o ReportConfigComparisonExpressionOutput) ToReportConfigComparisonExpressionOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionOutput {
	return o
}

func (o ReportConfigComparisonExpressionOutput) ToReportConfigComparisonExpressionPtrOutput() ReportConfigComparisonExpressionPtrOutput {
	return o.ToReportConfigComparisonExpressionPtrOutputWithContext(context.Background())
}

func (o ReportConfigComparisonExpressionOutput) ToReportConfigComparisonExpressionPtrOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportConfigComparisonExpression) *ReportConfigComparisonExpression {
		return &v
	}).(ReportConfigComparisonExpressionPtrOutput)
}

// The name of the column to use in comparison.
func (o ReportConfigComparisonExpressionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigComparisonExpression) string { return v.Name }).(pulumi.StringOutput)
}

// The operator to use for comparison.
func (o ReportConfigComparisonExpressionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigComparisonExpression) string { return v.Operator }).(pulumi.StringOutput)
}

// Array of values to use for comparison
func (o ReportConfigComparisonExpressionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportConfigComparisonExpression) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ReportConfigComparisonExpressionPtrOutput struct{ *pulumi.OutputState }

func (ReportConfigComparisonExpressionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigComparisonExpression)(nil)).Elem()
}

func (o ReportConfigComparisonExpressionPtrOutput) ToReportConfigComparisonExpressionPtrOutput() ReportConfigComparisonExpressionPtrOutput {
	return o
}

func (o ReportConfigComparisonExpressionPtrOutput) ToReportConfigComparisonExpressionPtrOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionPtrOutput {
	return o
}

func (o ReportConfigComparisonExpressionPtrOutput) Elem() ReportConfigComparisonExpressionOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpression) ReportConfigComparisonExpression {
		if v != nil {
			return *v
		}
		var ret ReportConfigComparisonExpression
		return ret
	}).(ReportConfigComparisonExpressionOutput)
}

// The name of the column to use in comparison.
func (o ReportConfigComparisonExpressionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpression) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The operator to use for comparison.
func (o ReportConfigComparisonExpressionPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpression) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Array of values to use for comparison
func (o ReportConfigComparisonExpressionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpression) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// The comparison expression to be used in the report.
type ReportConfigComparisonExpressionResponse struct {
	// The name of the column to use in comparison.
	Name string `pulumi:"name"`
	// The operator to use for comparison.
	Operator string `pulumi:"operator"`
	// Array of values to use for comparison
	Values []string `pulumi:"values"`
}

// The comparison expression to be used in the report.
type ReportConfigComparisonExpressionResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigComparisonExpressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigComparisonExpressionResponse)(nil)).Elem()
}

func (o ReportConfigComparisonExpressionResponseOutput) ToReportConfigComparisonExpressionResponseOutput() ReportConfigComparisonExpressionResponseOutput {
	return o
}

func (o ReportConfigComparisonExpressionResponseOutput) ToReportConfigComparisonExpressionResponseOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionResponseOutput {
	return o
}

// The name of the column to use in comparison.
func (o ReportConfigComparisonExpressionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigComparisonExpressionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The operator to use for comparison.
func (o ReportConfigComparisonExpressionResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigComparisonExpressionResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Array of values to use for comparison
func (o ReportConfigComparisonExpressionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportConfigComparisonExpressionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ReportConfigComparisonExpressionResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigComparisonExpressionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigComparisonExpressionResponse)(nil)).Elem()
}

func (o ReportConfigComparisonExpressionResponsePtrOutput) ToReportConfigComparisonExpressionResponsePtrOutput() ReportConfigComparisonExpressionResponsePtrOutput {
	return o
}

func (o ReportConfigComparisonExpressionResponsePtrOutput) ToReportConfigComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionResponsePtrOutput {
	return o
}

func (o ReportConfigComparisonExpressionResponsePtrOutput) Elem() ReportConfigComparisonExpressionResponseOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpressionResponse) ReportConfigComparisonExpressionResponse {
		if v != nil {
			return *v
		}
		var ret ReportConfigComparisonExpressionResponse
		return ret
	}).(ReportConfigComparisonExpressionResponseOutput)
}

// The name of the column to use in comparison.
func (o ReportConfigComparisonExpressionResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpressionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The operator to use for comparison.
func (o ReportConfigComparisonExpressionResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpressionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Array of values to use for comparison
func (o ReportConfigComparisonExpressionResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpressionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// The definition of data present in the report.
type ReportConfigDataset struct {
	// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
	Aggregation map[string]ReportConfigAggregation `pulumi:"aggregation"`
	// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
	Configuration *ReportConfigDatasetConfiguration `pulumi:"configuration"`
	// Has filter expression to use in the report.
	Filter *ReportConfigFilter `pulumi:"filter"`
	// The granularity of rows in the report.
	Granularity *string `pulumi:"granularity"`
	// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
	Grouping []ReportConfigGrouping `pulumi:"grouping"`
	// Array of order by expression to use in the report.
	Sorting []ReportConfigSorting `pulumi:"sorting"`
}

// ReportConfigDatasetInput is an input type that accepts ReportConfigDatasetArgs and ReportConfigDatasetOutput values.
// You can construct a concrete instance of `ReportConfigDatasetInput` via:
//
//	ReportConfigDatasetArgs{...}
type ReportConfigDatasetInput interface {
	pulumi.Input

	ToReportConfigDatasetOutput() ReportConfigDatasetOutput
	ToReportConfigDatasetOutputWithContext(context.Context) ReportConfigDatasetOutput
}

// The definition of data present in the report.
type ReportConfigDatasetArgs struct {
	// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
	Aggregation ReportConfigAggregationMapInput `pulumi:"aggregation"`
	// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
	Configuration ReportConfigDatasetConfigurationPtrInput `pulumi:"configuration"`
	// Has filter expression to use in the report.
	Filter ReportConfigFilterPtrInput `pulumi:"filter"`
	// The granularity of rows in the report.
	Granularity pulumi.StringPtrInput `pulumi:"granularity"`
	// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
	Grouping ReportConfigGroupingArrayInput `pulumi:"grouping"`
	// Array of order by expression to use in the report.
	Sorting ReportConfigSortingArrayInput `pulumi:"sorting"`
}

func (ReportConfigDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDataset)(nil)).Elem()
}

func (i ReportConfigDatasetArgs) ToReportConfigDatasetOutput() ReportConfigDatasetOutput {
	return i.ToReportConfigDatasetOutputWithContext(context.Background())
}

func (i ReportConfigDatasetArgs) ToReportConfigDatasetOutputWithContext(ctx context.Context) ReportConfigDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetOutput)
}

func (i ReportConfigDatasetArgs) ToReportConfigDatasetPtrOutput() ReportConfigDatasetPtrOutput {
	return i.ToReportConfigDatasetPtrOutputWithContext(context.Background())
}

func (i ReportConfigDatasetArgs) ToReportConfigDatasetPtrOutputWithContext(ctx context.Context) ReportConfigDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetOutput).ToReportConfigDatasetPtrOutputWithContext(ctx)
}

// ReportConfigDatasetPtrInput is an input type that accepts ReportConfigDatasetArgs, ReportConfigDatasetPtr and ReportConfigDatasetPtrOutput values.
// You can construct a concrete instance of `ReportConfigDatasetPtrInput` via:
//
//	        ReportConfigDatasetArgs{...}
//
//	or:
//
//	        nil
type ReportConfigDatasetPtrInput interface {
	pulumi.Input

	ToReportConfigDatasetPtrOutput() ReportConfigDatasetPtrOutput
	ToReportConfigDatasetPtrOutputWithContext(context.Context) ReportConfigDatasetPtrOutput
}

type reportConfigDatasetPtrType ReportConfigDatasetArgs

func ReportConfigDatasetPtr(v *ReportConfigDatasetArgs) ReportConfigDatasetPtrInput {
	return (*reportConfigDatasetPtrType)(v)
}

func (*reportConfigDatasetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDataset)(nil)).Elem()
}

func (i *reportConfigDatasetPtrType) ToReportConfigDatasetPtrOutput() ReportConfigDatasetPtrOutput {
	return i.ToReportConfigDatasetPtrOutputWithContext(context.Background())
}

func (i *reportConfigDatasetPtrType) ToReportConfigDatasetPtrOutputWithContext(ctx context.Context) ReportConfigDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetPtrOutput)
}

// The definition of data present in the report.
type ReportConfigDatasetOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDataset)(nil)).Elem()
}

func (o ReportConfigDatasetOutput) ToReportConfigDatasetOutput() ReportConfigDatasetOutput {
	return o
}

func (o ReportConfigDatasetOutput) ToReportConfigDatasetOutputWithContext(ctx context.Context) ReportConfigDatasetOutput {
	return o
}

func (o ReportConfigDatasetOutput) ToReportConfigDatasetPtrOutput() ReportConfigDatasetPtrOutput {
	return o.ToReportConfigDatasetPtrOutputWithContext(context.Background())
}

func (o ReportConfigDatasetOutput) ToReportConfigDatasetPtrOutputWithContext(ctx context.Context) ReportConfigDatasetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportConfigDataset) *ReportConfigDataset {
		return &v
	}).(ReportConfigDatasetPtrOutput)
}

// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
func (o ReportConfigDatasetOutput) Aggregation() ReportConfigAggregationMapOutput {
	return o.ApplyT(func(v ReportConfigDataset) map[string]ReportConfigAggregation { return v.Aggregation }).(ReportConfigAggregationMapOutput)
}

// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
func (o ReportConfigDatasetOutput) Configuration() ReportConfigDatasetConfigurationPtrOutput {
	return o.ApplyT(func(v ReportConfigDataset) *ReportConfigDatasetConfiguration { return v.Configuration }).(ReportConfigDatasetConfigurationPtrOutput)
}

// Has filter expression to use in the report.
func (o ReportConfigDatasetOutput) Filter() ReportConfigFilterPtrOutput {
	return o.ApplyT(func(v ReportConfigDataset) *ReportConfigFilter { return v.Filter }).(ReportConfigFilterPtrOutput)
}

// The granularity of rows in the report.
func (o ReportConfigDatasetOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportConfigDataset) *string { return v.Granularity }).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
func (o ReportConfigDatasetOutput) Grouping() ReportConfigGroupingArrayOutput {
	return o.ApplyT(func(v ReportConfigDataset) []ReportConfigGrouping { return v.Grouping }).(ReportConfigGroupingArrayOutput)
}

// Array of order by expression to use in the report.
func (o ReportConfigDatasetOutput) Sorting() ReportConfigSortingArrayOutput {
	return o.ApplyT(func(v ReportConfigDataset) []ReportConfigSorting { return v.Sorting }).(ReportConfigSortingArrayOutput)
}

type ReportConfigDatasetPtrOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDataset)(nil)).Elem()
}

func (o ReportConfigDatasetPtrOutput) ToReportConfigDatasetPtrOutput() ReportConfigDatasetPtrOutput {
	return o
}

func (o ReportConfigDatasetPtrOutput) ToReportConfigDatasetPtrOutputWithContext(ctx context.Context) ReportConfigDatasetPtrOutput {
	return o
}

func (o ReportConfigDatasetPtrOutput) Elem() ReportConfigDatasetOutput {
	return o.ApplyT(func(v *ReportConfigDataset) ReportConfigDataset {
		if v != nil {
			return *v
		}
		var ret ReportConfigDataset
		return ret
	}).(ReportConfigDatasetOutput)
}

// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
func (o ReportConfigDatasetPtrOutput) Aggregation() ReportConfigAggregationMapOutput {
	return o.ApplyT(func(v *ReportConfigDataset) map[string]ReportConfigAggregation {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(ReportConfigAggregationMapOutput)
}

// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
func (o ReportConfigDatasetPtrOutput) Configuration() ReportConfigDatasetConfigurationPtrOutput {
	return o.ApplyT(func(v *ReportConfigDataset) *ReportConfigDatasetConfiguration {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ReportConfigDatasetConfigurationPtrOutput)
}

// Has filter expression to use in the report.
func (o ReportConfigDatasetPtrOutput) Filter() ReportConfigFilterPtrOutput {
	return o.ApplyT(func(v *ReportConfigDataset) *ReportConfigFilter {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(ReportConfigFilterPtrOutput)
}

// The granularity of rows in the report.
func (o ReportConfigDatasetPtrOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDataset) *string {
		if v == nil {
			return nil
		}
		return v.Granularity
	}).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
func (o ReportConfigDatasetPtrOutput) Grouping() ReportConfigGroupingArrayOutput {
	return o.ApplyT(func(v *ReportConfigDataset) []ReportConfigGrouping {
		if v == nil {
			return nil
		}
		return v.Grouping
	}).(ReportConfigGroupingArrayOutput)
}

// Array of order by expression to use in the report.
func (o ReportConfigDatasetPtrOutput) Sorting() ReportConfigSortingArrayOutput {
	return o.ApplyT(func(v *ReportConfigDataset) []ReportConfigSorting {
		if v == nil {
			return nil
		}
		return v.Sorting
	}).(ReportConfigSortingArrayOutput)
}

// The configuration of dataset in the report.
type ReportConfigDatasetConfiguration struct {
	// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
	Columns []string `pulumi:"columns"`
}

// ReportConfigDatasetConfigurationInput is an input type that accepts ReportConfigDatasetConfigurationArgs and ReportConfigDatasetConfigurationOutput values.
// You can construct a concrete instance of `ReportConfigDatasetConfigurationInput` via:
//
//	ReportConfigDatasetConfigurationArgs{...}
type ReportConfigDatasetConfigurationInput interface {
	pulumi.Input

	ToReportConfigDatasetConfigurationOutput() ReportConfigDatasetConfigurationOutput
	ToReportConfigDatasetConfigurationOutputWithContext(context.Context) ReportConfigDatasetConfigurationOutput
}

// The configuration of dataset in the report.
type ReportConfigDatasetConfigurationArgs struct {
	// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
	Columns pulumi.StringArrayInput `pulumi:"columns"`
}

func (ReportConfigDatasetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDatasetConfiguration)(nil)).Elem()
}

func (i ReportConfigDatasetConfigurationArgs) ToReportConfigDatasetConfigurationOutput() ReportConfigDatasetConfigurationOutput {
	return i.ToReportConfigDatasetConfigurationOutputWithContext(context.Background())
}

func (i ReportConfigDatasetConfigurationArgs) ToReportConfigDatasetConfigurationOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetConfigurationOutput)
}

func (i ReportConfigDatasetConfigurationArgs) ToReportConfigDatasetConfigurationPtrOutput() ReportConfigDatasetConfigurationPtrOutput {
	return i.ToReportConfigDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (i ReportConfigDatasetConfigurationArgs) ToReportConfigDatasetConfigurationPtrOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetConfigurationOutput).ToReportConfigDatasetConfigurationPtrOutputWithContext(ctx)
}

// ReportConfigDatasetConfigurationPtrInput is an input type that accepts ReportConfigDatasetConfigurationArgs, ReportConfigDatasetConfigurationPtr and ReportConfigDatasetConfigurationPtrOutput values.
// You can construct a concrete instance of `ReportConfigDatasetConfigurationPtrInput` via:
//
//	        ReportConfigDatasetConfigurationArgs{...}
//
//	or:
//
//	        nil
type ReportConfigDatasetConfigurationPtrInput interface {
	pulumi.Input

	ToReportConfigDatasetConfigurationPtrOutput() ReportConfigDatasetConfigurationPtrOutput
	ToReportConfigDatasetConfigurationPtrOutputWithContext(context.Context) ReportConfigDatasetConfigurationPtrOutput
}

type reportConfigDatasetConfigurationPtrType ReportConfigDatasetConfigurationArgs

func ReportConfigDatasetConfigurationPtr(v *ReportConfigDatasetConfigurationArgs) ReportConfigDatasetConfigurationPtrInput {
	return (*reportConfigDatasetConfigurationPtrType)(v)
}

func (*reportConfigDatasetConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDatasetConfiguration)(nil)).Elem()
}

func (i *reportConfigDatasetConfigurationPtrType) ToReportConfigDatasetConfigurationPtrOutput() ReportConfigDatasetConfigurationPtrOutput {
	return i.ToReportConfigDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (i *reportConfigDatasetConfigurationPtrType) ToReportConfigDatasetConfigurationPtrOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetConfigurationPtrOutput)
}

// The configuration of dataset in the report.
type ReportConfigDatasetConfigurationOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDatasetConfiguration)(nil)).Elem()
}

func (o ReportConfigDatasetConfigurationOutput) ToReportConfigDatasetConfigurationOutput() ReportConfigDatasetConfigurationOutput {
	return o
}

func (o ReportConfigDatasetConfigurationOutput) ToReportConfigDatasetConfigurationOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationOutput {
	return o
}

func (o ReportConfigDatasetConfigurationOutput) ToReportConfigDatasetConfigurationPtrOutput() ReportConfigDatasetConfigurationPtrOutput {
	return o.ToReportConfigDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (o ReportConfigDatasetConfigurationOutput) ToReportConfigDatasetConfigurationPtrOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportConfigDatasetConfiguration) *ReportConfigDatasetConfiguration {
		return &v
	}).(ReportConfigDatasetConfigurationPtrOutput)
}

// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
func (o ReportConfigDatasetConfigurationOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportConfigDatasetConfiguration) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

type ReportConfigDatasetConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDatasetConfiguration)(nil)).Elem()
}

func (o ReportConfigDatasetConfigurationPtrOutput) ToReportConfigDatasetConfigurationPtrOutput() ReportConfigDatasetConfigurationPtrOutput {
	return o
}

func (o ReportConfigDatasetConfigurationPtrOutput) ToReportConfigDatasetConfigurationPtrOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationPtrOutput {
	return o
}

func (o ReportConfigDatasetConfigurationPtrOutput) Elem() ReportConfigDatasetConfigurationOutput {
	return o.ApplyT(func(v *ReportConfigDatasetConfiguration) ReportConfigDatasetConfiguration {
		if v != nil {
			return *v
		}
		var ret ReportConfigDatasetConfiguration
		return ret
	}).(ReportConfigDatasetConfigurationOutput)
}

// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
func (o ReportConfigDatasetConfigurationPtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportConfigDatasetConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// The configuration of dataset in the report.
type ReportConfigDatasetConfigurationResponse struct {
	// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
	Columns []string `pulumi:"columns"`
}

// The configuration of dataset in the report.
type ReportConfigDatasetConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDatasetConfigurationResponse)(nil)).Elem()
}

func (o ReportConfigDatasetConfigurationResponseOutput) ToReportConfigDatasetConfigurationResponseOutput() ReportConfigDatasetConfigurationResponseOutput {
	return o
}

func (o ReportConfigDatasetConfigurationResponseOutput) ToReportConfigDatasetConfigurationResponseOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationResponseOutput {
	return o
}

// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
func (o ReportConfigDatasetConfigurationResponseOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportConfigDatasetConfigurationResponse) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

type ReportConfigDatasetConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDatasetConfigurationResponse)(nil)).Elem()
}

func (o ReportConfigDatasetConfigurationResponsePtrOutput) ToReportConfigDatasetConfigurationResponsePtrOutput() ReportConfigDatasetConfigurationResponsePtrOutput {
	return o
}

func (o ReportConfigDatasetConfigurationResponsePtrOutput) ToReportConfigDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationResponsePtrOutput {
	return o
}

func (o ReportConfigDatasetConfigurationResponsePtrOutput) Elem() ReportConfigDatasetConfigurationResponseOutput {
	return o.ApplyT(func(v *ReportConfigDatasetConfigurationResponse) ReportConfigDatasetConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ReportConfigDatasetConfigurationResponse
		return ret
	}).(ReportConfigDatasetConfigurationResponseOutput)
}

// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
func (o ReportConfigDatasetConfigurationResponsePtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportConfigDatasetConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// The definition of data present in the report.
type ReportConfigDatasetResponse struct {
	// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
	Aggregation map[string]ReportConfigAggregationResponse `pulumi:"aggregation"`
	// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
	Configuration *ReportConfigDatasetConfigurationResponse `pulumi:"configuration"`
	// Has filter expression to use in the report.
	Filter *ReportConfigFilterResponse `pulumi:"filter"`
	// The granularity of rows in the report.
	Granularity *string `pulumi:"granularity"`
	// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
	Grouping []ReportConfigGroupingResponse `pulumi:"grouping"`
	// Array of order by expression to use in the report.
	Sorting []ReportConfigSortingResponse `pulumi:"sorting"`
}

// The definition of data present in the report.
type ReportConfigDatasetResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDatasetResponse)(nil)).Elem()
}

func (o ReportConfigDatasetResponseOutput) ToReportConfigDatasetResponseOutput() ReportConfigDatasetResponseOutput {
	return o
}

func (o ReportConfigDatasetResponseOutput) ToReportConfigDatasetResponseOutputWithContext(ctx context.Context) ReportConfigDatasetResponseOutput {
	return o
}

// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
func (o ReportConfigDatasetResponseOutput) Aggregation() ReportConfigAggregationResponseMapOutput {
	return o.ApplyT(func(v ReportConfigDatasetResponse) map[string]ReportConfigAggregationResponse { return v.Aggregation }).(ReportConfigAggregationResponseMapOutput)
}

// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
func (o ReportConfigDatasetResponseOutput) Configuration() ReportConfigDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDatasetResponse) *ReportConfigDatasetConfigurationResponse { return v.Configuration }).(ReportConfigDatasetConfigurationResponsePtrOutput)
}

// Has filter expression to use in the report.
func (o ReportConfigDatasetResponseOutput) Filter() ReportConfigFilterResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDatasetResponse) *ReportConfigFilterResponse { return v.Filter }).(ReportConfigFilterResponsePtrOutput)
}

// The granularity of rows in the report.
func (o ReportConfigDatasetResponseOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportConfigDatasetResponse) *string { return v.Granularity }).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
func (o ReportConfigDatasetResponseOutput) Grouping() ReportConfigGroupingResponseArrayOutput {
	return o.ApplyT(func(v ReportConfigDatasetResponse) []ReportConfigGroupingResponse { return v.Grouping }).(ReportConfigGroupingResponseArrayOutput)
}

// Array of order by expression to use in the report.
func (o ReportConfigDatasetResponseOutput) Sorting() ReportConfigSortingResponseArrayOutput {
	return o.ApplyT(func(v ReportConfigDatasetResponse) []ReportConfigSortingResponse { return v.Sorting }).(ReportConfigSortingResponseArrayOutput)
}

type ReportConfigDatasetResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDatasetResponse)(nil)).Elem()
}

func (o ReportConfigDatasetResponsePtrOutput) ToReportConfigDatasetResponsePtrOutput() ReportConfigDatasetResponsePtrOutput {
	return o
}

func (o ReportConfigDatasetResponsePtrOutput) ToReportConfigDatasetResponsePtrOutputWithContext(ctx context.Context) ReportConfigDatasetResponsePtrOutput {
	return o
}

func (o ReportConfigDatasetResponsePtrOutput) Elem() ReportConfigDatasetResponseOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) ReportConfigDatasetResponse {
		if v != nil {
			return *v
		}
		var ret ReportConfigDatasetResponse
		return ret
	}).(ReportConfigDatasetResponseOutput)
}

// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
func (o ReportConfigDatasetResponsePtrOutput) Aggregation() ReportConfigAggregationResponseMapOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) map[string]ReportConfigAggregationResponse {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(ReportConfigAggregationResponseMapOutput)
}

// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
func (o ReportConfigDatasetResponsePtrOutput) Configuration() ReportConfigDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) *ReportConfigDatasetConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ReportConfigDatasetConfigurationResponsePtrOutput)
}

// Has filter expression to use in the report.
func (o ReportConfigDatasetResponsePtrOutput) Filter() ReportConfigFilterResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) *ReportConfigFilterResponse {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(ReportConfigFilterResponsePtrOutput)
}

// The granularity of rows in the report.
func (o ReportConfigDatasetResponsePtrOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Granularity
	}).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
func (o ReportConfigDatasetResponsePtrOutput) Grouping() ReportConfigGroupingResponseArrayOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) []ReportConfigGroupingResponse {
		if v == nil {
			return nil
		}
		return v.Grouping
	}).(ReportConfigGroupingResponseArrayOutput)
}

// Array of order by expression to use in the report.
func (o ReportConfigDatasetResponsePtrOutput) Sorting() ReportConfigSortingResponseArrayOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) []ReportConfigSortingResponse {
		if v == nil {
			return nil
		}
		return v.Sorting
	}).(ReportConfigSortingResponseArrayOutput)
}

// The filter expression to be used in the report.
type ReportConfigFilter struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []ReportConfigFilter `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimensions *ReportConfigComparisonExpression `pulumi:"dimensions"`
	// The logical "OR" expression. Must have at least 2 items.
	Or []ReportConfigFilter `pulumi:"or"`
	// Has comparison expression for a tag key
	TagKey *ReportConfigComparisonExpression `pulumi:"tagKey"`
	// Has comparison expression for a tag value
	TagValue *ReportConfigComparisonExpression `pulumi:"tagValue"`
	// Has comparison expression for a tag
	Tags *ReportConfigComparisonExpression `pulumi:"tags"`
}

// ReportConfigFilterInput is an input type that accepts ReportConfigFilterArgs and ReportConfigFilterOutput values.
// You can construct a concrete instance of `ReportConfigFilterInput` via:
//
//	ReportConfigFilterArgs{...}
type ReportConfigFilterInput interface {
	pulumi.Input

	ToReportConfigFilterOutput() ReportConfigFilterOutput
	ToReportConfigFilterOutputWithContext(context.Context) ReportConfigFilterOutput
}

// The filter expression to be used in the report.
type ReportConfigFilterArgs struct {
	// The logical "AND" expression. Must have at least 2 items.
	And ReportConfigFilterArrayInput `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimensions ReportConfigComparisonExpressionPtrInput `pulumi:"dimensions"`
	// The logical "OR" expression. Must have at least 2 items.
	Or ReportConfigFilterArrayInput `pulumi:"or"`
	// Has comparison expression for a tag key
	TagKey ReportConfigComparisonExpressionPtrInput `pulumi:"tagKey"`
	// Has comparison expression for a tag value
	TagValue ReportConfigComparisonExpressionPtrInput `pulumi:"tagValue"`
	// Has comparison expression for a tag
	Tags ReportConfigComparisonExpressionPtrInput `pulumi:"tags"`
}

func (ReportConfigFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigFilter)(nil)).Elem()
}

func (i ReportConfigFilterArgs) ToReportConfigFilterOutput() ReportConfigFilterOutput {
	return i.ToReportConfigFilterOutputWithContext(context.Background())
}

func (i ReportConfigFilterArgs) ToReportConfigFilterOutputWithContext(ctx context.Context) ReportConfigFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigFilterOutput)
}

func (i ReportConfigFilterArgs) ToReportConfigFilterPtrOutput() ReportConfigFilterPtrOutput {
	return i.ToReportConfigFilterPtrOutputWithContext(context.Background())
}

func (i ReportConfigFilterArgs) ToReportConfigFilterPtrOutputWithContext(ctx context.Context) ReportConfigFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigFilterOutput).ToReportConfigFilterPtrOutputWithContext(ctx)
}

// ReportConfigFilterPtrInput is an input type that accepts ReportConfigFilterArgs, ReportConfigFilterPtr and ReportConfigFilterPtrOutput values.
// You can construct a concrete instance of `ReportConfigFilterPtrInput` via:
//
//	        ReportConfigFilterArgs{...}
//
//	or:
//
//	        nil
type ReportConfigFilterPtrInput interface {
	pulumi.Input

	ToReportConfigFilterPtrOutput() ReportConfigFilterPtrOutput
	ToReportConfigFilterPtrOutputWithContext(context.Context) ReportConfigFilterPtrOutput
}

type reportConfigFilterPtrType ReportConfigFilterArgs

func ReportConfigFilterPtr(v *ReportConfigFilterArgs) ReportConfigFilterPtrInput {
	return (*reportConfigFilterPtrType)(v)
}

func (*reportConfigFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigFilter)(nil)).Elem()
}

func (i *reportConfigFilterPtrType) ToReportConfigFilterPtrOutput() ReportConfigFilterPtrOutput {
	return i.ToReportConfigFilterPtrOutputWithContext(context.Background())
}

func (i *reportConfigFilterPtrType) ToReportConfigFilterPtrOutputWithContext(ctx context.Context) ReportConfigFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigFilterPtrOutput)
}

// ReportConfigFilterArrayInput is an input type that accepts ReportConfigFilterArray and ReportConfigFilterArrayOutput values.
// You can construct a concrete instance of `ReportConfigFilterArrayInput` via:
//
//	ReportConfigFilterArray{ ReportConfigFilterArgs{...} }
type ReportConfigFilterArrayInput interface {
	pulumi.Input

	ToReportConfigFilterArrayOutput() ReportConfigFilterArrayOutput
	ToReportConfigFilterArrayOutputWithContext(context.Context) ReportConfigFilterArrayOutput
}

type ReportConfigFilterArray []ReportConfigFilterInput

func (ReportConfigFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigFilter)(nil)).Elem()
}

func (i ReportConfigFilterArray) ToReportConfigFilterArrayOutput() ReportConfigFilterArrayOutput {
	return i.ToReportConfigFilterArrayOutputWithContext(context.Background())
}

func (i ReportConfigFilterArray) ToReportConfigFilterArrayOutputWithContext(ctx context.Context) ReportConfigFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigFilterArrayOutput)
}

// The filter expression to be used in the report.
type ReportConfigFilterOutput struct{ *pulumi.OutputState }

func (ReportConfigFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigFilter)(nil)).Elem()
}

func (o ReportConfigFilterOutput) ToReportConfigFilterOutput() ReportConfigFilterOutput {
	return o
}

func (o ReportConfigFilterOutput) ToReportConfigFilterOutputWithContext(ctx context.Context) ReportConfigFilterOutput {
	return o
}

func (o ReportConfigFilterOutput) ToReportConfigFilterPtrOutput() ReportConfigFilterPtrOutput {
	return o.ToReportConfigFilterPtrOutputWithContext(context.Background())
}

func (o ReportConfigFilterOutput) ToReportConfigFilterPtrOutputWithContext(ctx context.Context) ReportConfigFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportConfigFilter) *ReportConfigFilter {
		return &v
	}).(ReportConfigFilterPtrOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o ReportConfigFilterOutput) And() ReportConfigFilterArrayOutput {
	return o.ApplyT(func(v ReportConfigFilter) []ReportConfigFilter { return v.And }).(ReportConfigFilterArrayOutput)
}

// Has comparison expression for a dimension
func (o ReportConfigFilterOutput) Dimensions() ReportConfigComparisonExpressionPtrOutput {
	return o.ApplyT(func(v ReportConfigFilter) *ReportConfigComparisonExpression { return v.Dimensions }).(ReportConfigComparisonExpressionPtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o ReportConfigFilterOutput) Or() ReportConfigFilterArrayOutput {
	return o.ApplyT(func(v ReportConfigFilter) []ReportConfigFilter { return v.Or }).(ReportConfigFilterArrayOutput)
}

// Has comparison expression for a tag key
func (o ReportConfigFilterOutput) TagKey() ReportConfigComparisonExpressionPtrOutput {
	return o.ApplyT(func(v ReportConfigFilter) *ReportConfigComparisonExpression { return v.TagKey }).(ReportConfigComparisonExpressionPtrOutput)
}

// Has comparison expression for a tag value
func (o ReportConfigFilterOutput) TagValue() ReportConfigComparisonExpressionPtrOutput {
	return o.ApplyT(func(v ReportConfigFilter) *ReportConfigComparisonExpression { return v.TagValue }).(ReportConfigComparisonExpressionPtrOutput)
}

// Has comparison expression for a tag
func (o ReportConfigFilterOutput) Tags() ReportConfigComparisonExpressionPtrOutput {
	return o.ApplyT(func(v ReportConfigFilter) *ReportConfigComparisonExpression { return v.Tags }).(ReportConfigComparisonExpressionPtrOutput)
}

type ReportConfigFilterPtrOutput struct{ *pulumi.OutputState }

func (ReportConfigFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigFilter)(nil)).Elem()
}

func (o ReportConfigFilterPtrOutput) ToReportConfigFilterPtrOutput() ReportConfigFilterPtrOutput {
	return o
}

func (o ReportConfigFilterPtrOutput) ToReportConfigFilterPtrOutputWithContext(ctx context.Context) ReportConfigFilterPtrOutput {
	return o
}

func (o ReportConfigFilterPtrOutput) Elem() ReportConfigFilterOutput {
	return o.ApplyT(func(v *ReportConfigFilter) ReportConfigFilter {
		if v != nil {
			return *v
		}
		var ret ReportConfigFilter
		return ret
	}).(ReportConfigFilterOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o ReportConfigFilterPtrOutput) And() ReportConfigFilterArrayOutput {
	return o.ApplyT(func(v *ReportConfigFilter) []ReportConfigFilter {
		if v == nil {
			return nil
		}
		return v.And
	}).(ReportConfigFilterArrayOutput)
}

// Has comparison expression for a dimension
func (o ReportConfigFilterPtrOutput) Dimensions() ReportConfigComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *ReportConfigFilter) *ReportConfigComparisonExpression {
		if v == nil {
			return nil
		}
		return v.Dimensions
	}).(ReportConfigComparisonExpressionPtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o ReportConfigFilterPtrOutput) Or() ReportConfigFilterArrayOutput {
	return o.ApplyT(func(v *ReportConfigFilter) []ReportConfigFilter {
		if v == nil {
			return nil
		}
		return v.Or
	}).(ReportConfigFilterArrayOutput)
}

// Has comparison expression for a tag key
func (o ReportConfigFilterPtrOutput) TagKey() ReportConfigComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *ReportConfigFilter) *ReportConfigComparisonExpression {
		if v == nil {
			return nil
		}
		return v.TagKey
	}).(ReportConfigComparisonExpressionPtrOutput)
}

// Has comparison expression for a tag value
func (o ReportConfigFilterPtrOutput) TagValue() ReportConfigComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *ReportConfigFilter) *ReportConfigComparisonExpression {
		if v == nil {
			return nil
		}
		return v.TagValue
	}).(ReportConfigComparisonExpressionPtrOutput)
}

// Has comparison expression for a tag
func (o ReportConfigFilterPtrOutput) Tags() ReportConfigComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *ReportConfigFilter) *ReportConfigComparisonExpression {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(ReportConfigComparisonExpressionPtrOutput)
}

type ReportConfigFilterArrayOutput struct{ *pulumi.OutputState }

func (ReportConfigFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigFilter)(nil)).Elem()
}

func (o ReportConfigFilterArrayOutput) ToReportConfigFilterArrayOutput() ReportConfigFilterArrayOutput {
	return o
}

func (o ReportConfigFilterArrayOutput) ToReportConfigFilterArrayOutputWithContext(ctx context.Context) ReportConfigFilterArrayOutput {
	return o
}

func (o ReportConfigFilterArrayOutput) Index(i pulumi.IntInput) ReportConfigFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportConfigFilter {
		return vs[0].([]ReportConfigFilter)[vs[1].(int)]
	}).(ReportConfigFilterOutput)
}

// The filter expression to be used in the report.
type ReportConfigFilterResponse struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []ReportConfigFilterResponse `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimensions *ReportConfigComparisonExpressionResponse `pulumi:"dimensions"`
	// The logical "OR" expression. Must have at least 2 items.
	Or []ReportConfigFilterResponse `pulumi:"or"`
	// Has comparison expression for a tag key
	TagKey *ReportConfigComparisonExpressionResponse `pulumi:"tagKey"`
	// Has comparison expression for a tag value
	TagValue *ReportConfigComparisonExpressionResponse `pulumi:"tagValue"`
	// Has comparison expression for a tag
	Tags *ReportConfigComparisonExpressionResponse `pulumi:"tags"`
}

// The filter expression to be used in the report.
type ReportConfigFilterResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigFilterResponse)(nil)).Elem()
}

func (o ReportConfigFilterResponseOutput) ToReportConfigFilterResponseOutput() ReportConfigFilterResponseOutput {
	return o
}

func (o ReportConfigFilterResponseOutput) ToReportConfigFilterResponseOutputWithContext(ctx context.Context) ReportConfigFilterResponseOutput {
	return o
}

// The logical "AND" expression. Must have at least 2 items.
func (o ReportConfigFilterResponseOutput) And() ReportConfigFilterResponseArrayOutput {
	return o.ApplyT(func(v ReportConfigFilterResponse) []ReportConfigFilterResponse { return v.And }).(ReportConfigFilterResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o ReportConfigFilterResponseOutput) Dimensions() ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigFilterResponse) *ReportConfigComparisonExpressionResponse { return v.Dimensions }).(ReportConfigComparisonExpressionResponsePtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o ReportConfigFilterResponseOutput) Or() ReportConfigFilterResponseArrayOutput {
	return o.ApplyT(func(v ReportConfigFilterResponse) []ReportConfigFilterResponse { return v.Or }).(ReportConfigFilterResponseArrayOutput)
}

// Has comparison expression for a tag key
func (o ReportConfigFilterResponseOutput) TagKey() ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigFilterResponse) *ReportConfigComparisonExpressionResponse { return v.TagKey }).(ReportConfigComparisonExpressionResponsePtrOutput)
}

// Has comparison expression for a tag value
func (o ReportConfigFilterResponseOutput) TagValue() ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigFilterResponse) *ReportConfigComparisonExpressionResponse { return v.TagValue }).(ReportConfigComparisonExpressionResponsePtrOutput)
}

// Has comparison expression for a tag
func (o ReportConfigFilterResponseOutput) Tags() ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigFilterResponse) *ReportConfigComparisonExpressionResponse { return v.Tags }).(ReportConfigComparisonExpressionResponsePtrOutput)
}

type ReportConfigFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigFilterResponse)(nil)).Elem()
}

func (o ReportConfigFilterResponsePtrOutput) ToReportConfigFilterResponsePtrOutput() ReportConfigFilterResponsePtrOutput {
	return o
}

func (o ReportConfigFilterResponsePtrOutput) ToReportConfigFilterResponsePtrOutputWithContext(ctx context.Context) ReportConfigFilterResponsePtrOutput {
	return o
}

func (o ReportConfigFilterResponsePtrOutput) Elem() ReportConfigFilterResponseOutput {
	return o.ApplyT(func(v *ReportConfigFilterResponse) ReportConfigFilterResponse {
		if v != nil {
			return *v
		}
		var ret ReportConfigFilterResponse
		return ret
	}).(ReportConfigFilterResponseOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o ReportConfigFilterResponsePtrOutput) And() ReportConfigFilterResponseArrayOutput {
	return o.ApplyT(func(v *ReportConfigFilterResponse) []ReportConfigFilterResponse {
		if v == nil {
			return nil
		}
		return v.And
	}).(ReportConfigFilterResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o ReportConfigFilterResponsePtrOutput) Dimensions() ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigFilterResponse) *ReportConfigComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Dimensions
	}).(ReportConfigComparisonExpressionResponsePtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o ReportConfigFilterResponsePtrOutput) Or() ReportConfigFilterResponseArrayOutput {
	return o.ApplyT(func(v *ReportConfigFilterResponse) []ReportConfigFilterResponse {
		if v == nil {
			return nil
		}
		return v.Or
	}).(ReportConfigFilterResponseArrayOutput)
}

// Has comparison expression for a tag key
func (o ReportConfigFilterResponsePtrOutput) TagKey() ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigFilterResponse) *ReportConfigComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.TagKey
	}).(ReportConfigComparisonExpressionResponsePtrOutput)
}

// Has comparison expression for a tag value
func (o ReportConfigFilterResponsePtrOutput) TagValue() ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigFilterResponse) *ReportConfigComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.TagValue
	}).(ReportConfigComparisonExpressionResponsePtrOutput)
}

// Has comparison expression for a tag
func (o ReportConfigFilterResponsePtrOutput) Tags() ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigFilterResponse) *ReportConfigComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(ReportConfigComparisonExpressionResponsePtrOutput)
}

type ReportConfigFilterResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportConfigFilterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigFilterResponse)(nil)).Elem()
}

func (o ReportConfigFilterResponseArrayOutput) ToReportConfigFilterResponseArrayOutput() ReportConfigFilterResponseArrayOutput {
	return o
}

func (o ReportConfigFilterResponseArrayOutput) ToReportConfigFilterResponseArrayOutputWithContext(ctx context.Context) ReportConfigFilterResponseArrayOutput {
	return o
}

func (o ReportConfigFilterResponseArrayOutput) Index(i pulumi.IntInput) ReportConfigFilterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportConfigFilterResponse {
		return vs[0].([]ReportConfigFilterResponse)[vs[1].(int)]
	}).(ReportConfigFilterResponseOutput)
}

// The group by expression to be used in the report.
type ReportConfigGrouping struct {
	// The name of the column to group. This version supports subscription lowest possible grain.
	Name string `pulumi:"name"`
	// Has type of the column to group.
	Type string `pulumi:"type"`
}

// ReportConfigGroupingInput is an input type that accepts ReportConfigGroupingArgs and ReportConfigGroupingOutput values.
// You can construct a concrete instance of `ReportConfigGroupingInput` via:
//
//	ReportConfigGroupingArgs{...}
type ReportConfigGroupingInput interface {
	pulumi.Input

	ToReportConfigGroupingOutput() ReportConfigGroupingOutput
	ToReportConfigGroupingOutputWithContext(context.Context) ReportConfigGroupingOutput
}

// The group by expression to be used in the report.
type ReportConfigGroupingArgs struct {
	// The name of the column to group. This version supports subscription lowest possible grain.
	Name pulumi.StringInput `pulumi:"name"`
	// Has type of the column to group.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ReportConfigGroupingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigGrouping)(nil)).Elem()
}

func (i ReportConfigGroupingArgs) ToReportConfigGroupingOutput() ReportConfigGroupingOutput {
	return i.ToReportConfigGroupingOutputWithContext(context.Background())
}

func (i ReportConfigGroupingArgs) ToReportConfigGroupingOutputWithContext(ctx context.Context) ReportConfigGroupingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigGroupingOutput)
}

// ReportConfigGroupingArrayInput is an input type that accepts ReportConfigGroupingArray and ReportConfigGroupingArrayOutput values.
// You can construct a concrete instance of `ReportConfigGroupingArrayInput` via:
//
//	ReportConfigGroupingArray{ ReportConfigGroupingArgs{...} }
type ReportConfigGroupingArrayInput interface {
	pulumi.Input

	ToReportConfigGroupingArrayOutput() ReportConfigGroupingArrayOutput
	ToReportConfigGroupingArrayOutputWithContext(context.Context) ReportConfigGroupingArrayOutput
}

type ReportConfigGroupingArray []ReportConfigGroupingInput

func (ReportConfigGroupingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigGrouping)(nil)).Elem()
}

func (i ReportConfigGroupingArray) ToReportConfigGroupingArrayOutput() ReportConfigGroupingArrayOutput {
	return i.ToReportConfigGroupingArrayOutputWithContext(context.Background())
}

func (i ReportConfigGroupingArray) ToReportConfigGroupingArrayOutputWithContext(ctx context.Context) ReportConfigGroupingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigGroupingArrayOutput)
}

// The group by expression to be used in the report.
type ReportConfigGroupingOutput struct{ *pulumi.OutputState }

func (ReportConfigGroupingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigGrouping)(nil)).Elem()
}

func (o ReportConfigGroupingOutput) ToReportConfigGroupingOutput() ReportConfigGroupingOutput {
	return o
}

func (o ReportConfigGroupingOutput) ToReportConfigGroupingOutputWithContext(ctx context.Context) ReportConfigGroupingOutput {
	return o
}

// The name of the column to group. This version supports subscription lowest possible grain.
func (o ReportConfigGroupingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigGrouping) string { return v.Name }).(pulumi.StringOutput)
}

// Has type of the column to group.
func (o ReportConfigGroupingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigGrouping) string { return v.Type }).(pulumi.StringOutput)
}

type ReportConfigGroupingArrayOutput struct{ *pulumi.OutputState }

func (ReportConfigGroupingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigGrouping)(nil)).Elem()
}

func (o ReportConfigGroupingArrayOutput) ToReportConfigGroupingArrayOutput() ReportConfigGroupingArrayOutput {
	return o
}

func (o ReportConfigGroupingArrayOutput) ToReportConfigGroupingArrayOutputWithContext(ctx context.Context) ReportConfigGroupingArrayOutput {
	return o
}

func (o ReportConfigGroupingArrayOutput) Index(i pulumi.IntInput) ReportConfigGroupingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportConfigGrouping {
		return vs[0].([]ReportConfigGrouping)[vs[1].(int)]
	}).(ReportConfigGroupingOutput)
}

// The group by expression to be used in the report.
type ReportConfigGroupingResponse struct {
	// The name of the column to group. This version supports subscription lowest possible grain.
	Name string `pulumi:"name"`
	// Has type of the column to group.
	Type string `pulumi:"type"`
}

// The group by expression to be used in the report.
type ReportConfigGroupingResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigGroupingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigGroupingResponse)(nil)).Elem()
}

func (o ReportConfigGroupingResponseOutput) ToReportConfigGroupingResponseOutput() ReportConfigGroupingResponseOutput {
	return o
}

func (o ReportConfigGroupingResponseOutput) ToReportConfigGroupingResponseOutputWithContext(ctx context.Context) ReportConfigGroupingResponseOutput {
	return o
}

// The name of the column to group. This version supports subscription lowest possible grain.
func (o ReportConfigGroupingResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigGroupingResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Has type of the column to group.
func (o ReportConfigGroupingResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigGroupingResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ReportConfigGroupingResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportConfigGroupingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigGroupingResponse)(nil)).Elem()
}

func (o ReportConfigGroupingResponseArrayOutput) ToReportConfigGroupingResponseArrayOutput() ReportConfigGroupingResponseArrayOutput {
	return o
}

func (o ReportConfigGroupingResponseArrayOutput) ToReportConfigGroupingResponseArrayOutputWithContext(ctx context.Context) ReportConfigGroupingResponseArrayOutput {
	return o
}

func (o ReportConfigGroupingResponseArrayOutput) Index(i pulumi.IntInput) ReportConfigGroupingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportConfigGroupingResponse {
		return vs[0].([]ReportConfigGroupingResponse)[vs[1].(int)]
	}).(ReportConfigGroupingResponseOutput)
}

// The order by expression to be used in the report.
type ReportConfigSorting struct {
	// Direction of sort.
	Direction *string `pulumi:"direction"`
	// The name of the column to sort.
	Name string `pulumi:"name"`
}

// ReportConfigSortingInput is an input type that accepts ReportConfigSortingArgs and ReportConfigSortingOutput values.
// You can construct a concrete instance of `ReportConfigSortingInput` via:
//
//	ReportConfigSortingArgs{...}
type ReportConfigSortingInput interface {
	pulumi.Input

	ToReportConfigSortingOutput() ReportConfigSortingOutput
	ToReportConfigSortingOutputWithContext(context.Context) ReportConfigSortingOutput
}

// The order by expression to be used in the report.
type ReportConfigSortingArgs struct {
	// Direction of sort.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// The name of the column to sort.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ReportConfigSortingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigSorting)(nil)).Elem()
}

func (i ReportConfigSortingArgs) ToReportConfigSortingOutput() ReportConfigSortingOutput {
	return i.ToReportConfigSortingOutputWithContext(context.Background())
}

func (i ReportConfigSortingArgs) ToReportConfigSortingOutputWithContext(ctx context.Context) ReportConfigSortingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigSortingOutput)
}

// ReportConfigSortingArrayInput is an input type that accepts ReportConfigSortingArray and ReportConfigSortingArrayOutput values.
// You can construct a concrete instance of `ReportConfigSortingArrayInput` via:
//
//	ReportConfigSortingArray{ ReportConfigSortingArgs{...} }
type ReportConfigSortingArrayInput interface {
	pulumi.Input

	ToReportConfigSortingArrayOutput() ReportConfigSortingArrayOutput
	ToReportConfigSortingArrayOutputWithContext(context.Context) ReportConfigSortingArrayOutput
}

type ReportConfigSortingArray []ReportConfigSortingInput

func (ReportConfigSortingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigSorting)(nil)).Elem()
}

func (i ReportConfigSortingArray) ToReportConfigSortingArrayOutput() ReportConfigSortingArrayOutput {
	return i.ToReportConfigSortingArrayOutputWithContext(context.Background())
}

func (i ReportConfigSortingArray) ToReportConfigSortingArrayOutputWithContext(ctx context.Context) ReportConfigSortingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigSortingArrayOutput)
}

// The order by expression to be used in the report.
type ReportConfigSortingOutput struct{ *pulumi.OutputState }

func (ReportConfigSortingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigSorting)(nil)).Elem()
}

func (o ReportConfigSortingOutput) ToReportConfigSortingOutput() ReportConfigSortingOutput {
	return o
}

func (o ReportConfigSortingOutput) ToReportConfigSortingOutputWithContext(ctx context.Context) ReportConfigSortingOutput {
	return o
}

// Direction of sort.
func (o ReportConfigSortingOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportConfigSorting) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// The name of the column to sort.
func (o ReportConfigSortingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigSorting) string { return v.Name }).(pulumi.StringOutput)
}

type ReportConfigSortingArrayOutput struct{ *pulumi.OutputState }

func (ReportConfigSortingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigSorting)(nil)).Elem()
}

func (o ReportConfigSortingArrayOutput) ToReportConfigSortingArrayOutput() ReportConfigSortingArrayOutput {
	return o
}

func (o ReportConfigSortingArrayOutput) ToReportConfigSortingArrayOutputWithContext(ctx context.Context) ReportConfigSortingArrayOutput {
	return o
}

func (o ReportConfigSortingArrayOutput) Index(i pulumi.IntInput) ReportConfigSortingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportConfigSorting {
		return vs[0].([]ReportConfigSorting)[vs[1].(int)]
	}).(ReportConfigSortingOutput)
}

// The order by expression to be used in the report.
type ReportConfigSortingResponse struct {
	// Direction of sort.
	Direction *string `pulumi:"direction"`
	// The name of the column to sort.
	Name string `pulumi:"name"`
}

// The order by expression to be used in the report.
type ReportConfigSortingResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigSortingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigSortingResponse)(nil)).Elem()
}

func (o ReportConfigSortingResponseOutput) ToReportConfigSortingResponseOutput() ReportConfigSortingResponseOutput {
	return o
}

func (o ReportConfigSortingResponseOutput) ToReportConfigSortingResponseOutputWithContext(ctx context.Context) ReportConfigSortingResponseOutput {
	return o
}

// Direction of sort.
func (o ReportConfigSortingResponseOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportConfigSortingResponse) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// The name of the column to sort.
func (o ReportConfigSortingResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigSortingResponse) string { return v.Name }).(pulumi.StringOutput)
}

type ReportConfigSortingResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportConfigSortingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigSortingResponse)(nil)).Elem()
}

func (o ReportConfigSortingResponseArrayOutput) ToReportConfigSortingResponseArrayOutput() ReportConfigSortingResponseArrayOutput {
	return o
}

func (o ReportConfigSortingResponseArrayOutput) ToReportConfigSortingResponseArrayOutputWithContext(ctx context.Context) ReportConfigSortingResponseArrayOutput {
	return o
}

func (o ReportConfigSortingResponseArrayOutput) Index(i pulumi.IntInput) ReportConfigSortingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportConfigSortingResponse {
		return vs[0].([]ReportConfigSortingResponse)[vs[1].(int)]
	}).(ReportConfigSortingResponseOutput)
}

// The start and end date for pulling data for the report.
type ReportConfigTimePeriod struct {
	// The start date to pull data from.
	From string `pulumi:"from"`
	// The end date to pull data to.
	To string `pulumi:"to"`
}

// ReportConfigTimePeriodInput is an input type that accepts ReportConfigTimePeriodArgs and ReportConfigTimePeriodOutput values.
// You can construct a concrete instance of `ReportConfigTimePeriodInput` via:
//
//	ReportConfigTimePeriodArgs{...}
type ReportConfigTimePeriodInput interface {
	pulumi.Input

	ToReportConfigTimePeriodOutput() ReportConfigTimePeriodOutput
	ToReportConfigTimePeriodOutputWithContext(context.Context) ReportConfigTimePeriodOutput
}

// The start and end date for pulling data for the report.
type ReportConfigTimePeriodArgs struct {
	// The start date to pull data from.
	From pulumi.StringInput `pulumi:"from"`
	// The end date to pull data to.
	To pulumi.StringInput `pulumi:"to"`
}

func (ReportConfigTimePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigTimePeriod)(nil)).Elem()
}

func (i ReportConfigTimePeriodArgs) ToReportConfigTimePeriodOutput() ReportConfigTimePeriodOutput {
	return i.ToReportConfigTimePeriodOutputWithContext(context.Background())
}

func (i ReportConfigTimePeriodArgs) ToReportConfigTimePeriodOutputWithContext(ctx context.Context) ReportConfigTimePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigTimePeriodOutput)
}

func (i ReportConfigTimePeriodArgs) ToReportConfigTimePeriodPtrOutput() ReportConfigTimePeriodPtrOutput {
	return i.ToReportConfigTimePeriodPtrOutputWithContext(context.Background())
}

func (i ReportConfigTimePeriodArgs) ToReportConfigTimePeriodPtrOutputWithContext(ctx context.Context) ReportConfigTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigTimePeriodOutput).ToReportConfigTimePeriodPtrOutputWithContext(ctx)
}

// ReportConfigTimePeriodPtrInput is an input type that accepts ReportConfigTimePeriodArgs, ReportConfigTimePeriodPtr and ReportConfigTimePeriodPtrOutput values.
// You can construct a concrete instance of `ReportConfigTimePeriodPtrInput` via:
//
//	        ReportConfigTimePeriodArgs{...}
//
//	or:
//
//	        nil
type ReportConfigTimePeriodPtrInput interface {
	pulumi.Input

	ToReportConfigTimePeriodPtrOutput() ReportConfigTimePeriodPtrOutput
	ToReportConfigTimePeriodPtrOutputWithContext(context.Context) ReportConfigTimePeriodPtrOutput
}

type reportConfigTimePeriodPtrType ReportConfigTimePeriodArgs

func ReportConfigTimePeriodPtr(v *ReportConfigTimePeriodArgs) ReportConfigTimePeriodPtrInput {
	return (*reportConfigTimePeriodPtrType)(v)
}

func (*reportConfigTimePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigTimePeriod)(nil)).Elem()
}

func (i *reportConfigTimePeriodPtrType) ToReportConfigTimePeriodPtrOutput() ReportConfigTimePeriodPtrOutput {
	return i.ToReportConfigTimePeriodPtrOutputWithContext(context.Background())
}

func (i *reportConfigTimePeriodPtrType) ToReportConfigTimePeriodPtrOutputWithContext(ctx context.Context) ReportConfigTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigTimePeriodPtrOutput)
}

// The start and end date for pulling data for the report.
type ReportConfigTimePeriodOutput struct{ *pulumi.OutputState }

func (ReportConfigTimePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigTimePeriod)(nil)).Elem()
}

func (o ReportConfigTimePeriodOutput) ToReportConfigTimePeriodOutput() ReportConfigTimePeriodOutput {
	return o
}

func (o ReportConfigTimePeriodOutput) ToReportConfigTimePeriodOutputWithContext(ctx context.Context) ReportConfigTimePeriodOutput {
	return o
}

func (o ReportConfigTimePeriodOutput) ToReportConfigTimePeriodPtrOutput() ReportConfigTimePeriodPtrOutput {
	return o.ToReportConfigTimePeriodPtrOutputWithContext(context.Background())
}

func (o ReportConfigTimePeriodOutput) ToReportConfigTimePeriodPtrOutputWithContext(ctx context.Context) ReportConfigTimePeriodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportConfigTimePeriod) *ReportConfigTimePeriod {
		return &v
	}).(ReportConfigTimePeriodPtrOutput)
}

// The start date to pull data from.
func (o ReportConfigTimePeriodOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigTimePeriod) string { return v.From }).(pulumi.StringOutput)
}

// The end date to pull data to.
func (o ReportConfigTimePeriodOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigTimePeriod) string { return v.To }).(pulumi.StringOutput)
}

type ReportConfigTimePeriodPtrOutput struct{ *pulumi.OutputState }

func (ReportConfigTimePeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigTimePeriod)(nil)).Elem()
}

func (o ReportConfigTimePeriodPtrOutput) ToReportConfigTimePeriodPtrOutput() ReportConfigTimePeriodPtrOutput {
	return o
}

func (o ReportConfigTimePeriodPtrOutput) ToReportConfigTimePeriodPtrOutputWithContext(ctx context.Context) ReportConfigTimePeriodPtrOutput {
	return o
}

func (o ReportConfigTimePeriodPtrOutput) Elem() ReportConfigTimePeriodOutput {
	return o.ApplyT(func(v *ReportConfigTimePeriod) ReportConfigTimePeriod {
		if v != nil {
			return *v
		}
		var ret ReportConfigTimePeriod
		return ret
	}).(ReportConfigTimePeriodOutput)
}

// The start date to pull data from.
func (o ReportConfigTimePeriodPtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigTimePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date to pull data to.
func (o ReportConfigTimePeriodPtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigTimePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.To
	}).(pulumi.StringPtrOutput)
}

// The start and end date for pulling data for the report.
type ReportConfigTimePeriodResponse struct {
	// The start date to pull data from.
	From string `pulumi:"from"`
	// The end date to pull data to.
	To string `pulumi:"to"`
}

// The start and end date for pulling data for the report.
type ReportConfigTimePeriodResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigTimePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigTimePeriodResponse)(nil)).Elem()
}

func (o ReportConfigTimePeriodResponseOutput) ToReportConfigTimePeriodResponseOutput() ReportConfigTimePeriodResponseOutput {
	return o
}

func (o ReportConfigTimePeriodResponseOutput) ToReportConfigTimePeriodResponseOutputWithContext(ctx context.Context) ReportConfigTimePeriodResponseOutput {
	return o
}

// The start date to pull data from.
func (o ReportConfigTimePeriodResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigTimePeriodResponse) string { return v.From }).(pulumi.StringOutput)
}

// The end date to pull data to.
func (o ReportConfigTimePeriodResponseOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigTimePeriodResponse) string { return v.To }).(pulumi.StringOutput)
}

type ReportConfigTimePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigTimePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigTimePeriodResponse)(nil)).Elem()
}

func (o ReportConfigTimePeriodResponsePtrOutput) ToReportConfigTimePeriodResponsePtrOutput() ReportConfigTimePeriodResponsePtrOutput {
	return o
}

func (o ReportConfigTimePeriodResponsePtrOutput) ToReportConfigTimePeriodResponsePtrOutputWithContext(ctx context.Context) ReportConfigTimePeriodResponsePtrOutput {
	return o
}

func (o ReportConfigTimePeriodResponsePtrOutput) Elem() ReportConfigTimePeriodResponseOutput {
	return o.ApplyT(func(v *ReportConfigTimePeriodResponse) ReportConfigTimePeriodResponse {
		if v != nil {
			return *v
		}
		var ret ReportConfigTimePeriodResponse
		return ret
	}).(ReportConfigTimePeriodResponseOutput)
}

// The start date to pull data from.
func (o ReportConfigTimePeriodResponsePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date to pull data to.
func (o ReportConfigTimePeriodResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.To
	}).(pulumi.StringPtrOutput)
}

// The definition of data present in the report.
type ReportDataset struct {
	// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
	Aggregation map[string]ReportAggregation `pulumi:"aggregation"`
	// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
	Configuration *ReportDatasetConfiguration `pulumi:"configuration"`
	// Has filter expression to use in the report.
	Filter *ReportFilter `pulumi:"filter"`
	// The granularity of rows in the report.
	Granularity *string `pulumi:"granularity"`
	// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
	Grouping []ReportGrouping `pulumi:"grouping"`
}

// ReportDatasetInput is an input type that accepts ReportDatasetArgs and ReportDatasetOutput values.
// You can construct a concrete instance of `ReportDatasetInput` via:
//
//	ReportDatasetArgs{...}
type ReportDatasetInput interface {
	pulumi.Input

	ToReportDatasetOutput() ReportDatasetOutput
	ToReportDatasetOutputWithContext(context.Context) ReportDatasetOutput
}

// The definition of data present in the report.
type ReportDatasetArgs struct {
	// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
	Aggregation ReportAggregationMapInput `pulumi:"aggregation"`
	// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
	Configuration ReportDatasetConfigurationPtrInput `pulumi:"configuration"`
	// Has filter expression to use in the report.
	Filter ReportFilterPtrInput `pulumi:"filter"`
	// The granularity of rows in the report.
	Granularity pulumi.StringPtrInput `pulumi:"granularity"`
	// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
	Grouping ReportGroupingArrayInput `pulumi:"grouping"`
}

func (ReportDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDataset)(nil)).Elem()
}

func (i ReportDatasetArgs) ToReportDatasetOutput() ReportDatasetOutput {
	return i.ToReportDatasetOutputWithContext(context.Background())
}

func (i ReportDatasetArgs) ToReportDatasetOutputWithContext(ctx context.Context) ReportDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetOutput)
}

func (i ReportDatasetArgs) ToReportDatasetPtrOutput() ReportDatasetPtrOutput {
	return i.ToReportDatasetPtrOutputWithContext(context.Background())
}

func (i ReportDatasetArgs) ToReportDatasetPtrOutputWithContext(ctx context.Context) ReportDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetOutput).ToReportDatasetPtrOutputWithContext(ctx)
}

// ReportDatasetPtrInput is an input type that accepts ReportDatasetArgs, ReportDatasetPtr and ReportDatasetPtrOutput values.
// You can construct a concrete instance of `ReportDatasetPtrInput` via:
//
//	        ReportDatasetArgs{...}
//
//	or:
//
//	        nil
type ReportDatasetPtrInput interface {
	pulumi.Input

	ToReportDatasetPtrOutput() ReportDatasetPtrOutput
	ToReportDatasetPtrOutputWithContext(context.Context) ReportDatasetPtrOutput
}

type reportDatasetPtrType ReportDatasetArgs

func ReportDatasetPtr(v *ReportDatasetArgs) ReportDatasetPtrInput {
	return (*reportDatasetPtrType)(v)
}

func (*reportDatasetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDataset)(nil)).Elem()
}

func (i *reportDatasetPtrType) ToReportDatasetPtrOutput() ReportDatasetPtrOutput {
	return i.ToReportDatasetPtrOutputWithContext(context.Background())
}

func (i *reportDatasetPtrType) ToReportDatasetPtrOutputWithContext(ctx context.Context) ReportDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetPtrOutput)
}

// The definition of data present in the report.
type ReportDatasetOutput struct{ *pulumi.OutputState }

func (ReportDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDataset)(nil)).Elem()
}

func (o ReportDatasetOutput) ToReportDatasetOutput() ReportDatasetOutput {
	return o
}

func (o ReportDatasetOutput) ToReportDatasetOutputWithContext(ctx context.Context) ReportDatasetOutput {
	return o
}

func (o ReportDatasetOutput) ToReportDatasetPtrOutput() ReportDatasetPtrOutput {
	return o.ToReportDatasetPtrOutputWithContext(context.Background())
}

func (o ReportDatasetOutput) ToReportDatasetPtrOutputWithContext(ctx context.Context) ReportDatasetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportDataset) *ReportDataset {
		return &v
	}).(ReportDatasetPtrOutput)
}

// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
func (o ReportDatasetOutput) Aggregation() ReportAggregationMapOutput {
	return o.ApplyT(func(v ReportDataset) map[string]ReportAggregation { return v.Aggregation }).(ReportAggregationMapOutput)
}

// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
func (o ReportDatasetOutput) Configuration() ReportDatasetConfigurationPtrOutput {
	return o.ApplyT(func(v ReportDataset) *ReportDatasetConfiguration { return v.Configuration }).(ReportDatasetConfigurationPtrOutput)
}

// Has filter expression to use in the report.
func (o ReportDatasetOutput) Filter() ReportFilterPtrOutput {
	return o.ApplyT(func(v ReportDataset) *ReportFilter { return v.Filter }).(ReportFilterPtrOutput)
}

// The granularity of rows in the report.
func (o ReportDatasetOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportDataset) *string { return v.Granularity }).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
func (o ReportDatasetOutput) Grouping() ReportGroupingArrayOutput {
	return o.ApplyT(func(v ReportDataset) []ReportGrouping { return v.Grouping }).(ReportGroupingArrayOutput)
}

type ReportDatasetPtrOutput struct{ *pulumi.OutputState }

func (ReportDatasetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDataset)(nil)).Elem()
}

func (o ReportDatasetPtrOutput) ToReportDatasetPtrOutput() ReportDatasetPtrOutput {
	return o
}

func (o ReportDatasetPtrOutput) ToReportDatasetPtrOutputWithContext(ctx context.Context) ReportDatasetPtrOutput {
	return o
}

func (o ReportDatasetPtrOutput) Elem() ReportDatasetOutput {
	return o.ApplyT(func(v *ReportDataset) ReportDataset {
		if v != nil {
			return *v
		}
		var ret ReportDataset
		return ret
	}).(ReportDatasetOutput)
}

// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
func (o ReportDatasetPtrOutput) Aggregation() ReportAggregationMapOutput {
	return o.ApplyT(func(v *ReportDataset) map[string]ReportAggregation {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(ReportAggregationMapOutput)
}

// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
func (o ReportDatasetPtrOutput) Configuration() ReportDatasetConfigurationPtrOutput {
	return o.ApplyT(func(v *ReportDataset) *ReportDatasetConfiguration {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ReportDatasetConfigurationPtrOutput)
}

// Has filter expression to use in the report.
func (o ReportDatasetPtrOutput) Filter() ReportFilterPtrOutput {
	return o.ApplyT(func(v *ReportDataset) *ReportFilter {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(ReportFilterPtrOutput)
}

// The granularity of rows in the report.
func (o ReportDatasetPtrOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDataset) *string {
		if v == nil {
			return nil
		}
		return v.Granularity
	}).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
func (o ReportDatasetPtrOutput) Grouping() ReportGroupingArrayOutput {
	return o.ApplyT(func(v *ReportDataset) []ReportGrouping {
		if v == nil {
			return nil
		}
		return v.Grouping
	}).(ReportGroupingArrayOutput)
}

// The configuration of dataset in the report.
type ReportDatasetConfiguration struct {
	// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
	Columns []string `pulumi:"columns"`
}

// ReportDatasetConfigurationInput is an input type that accepts ReportDatasetConfigurationArgs and ReportDatasetConfigurationOutput values.
// You can construct a concrete instance of `ReportDatasetConfigurationInput` via:
//
//	ReportDatasetConfigurationArgs{...}
type ReportDatasetConfigurationInput interface {
	pulumi.Input

	ToReportDatasetConfigurationOutput() ReportDatasetConfigurationOutput
	ToReportDatasetConfigurationOutputWithContext(context.Context) ReportDatasetConfigurationOutput
}

// The configuration of dataset in the report.
type ReportDatasetConfigurationArgs struct {
	// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
	Columns pulumi.StringArrayInput `pulumi:"columns"`
}

func (ReportDatasetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDatasetConfiguration)(nil)).Elem()
}

func (i ReportDatasetConfigurationArgs) ToReportDatasetConfigurationOutput() ReportDatasetConfigurationOutput {
	return i.ToReportDatasetConfigurationOutputWithContext(context.Background())
}

func (i ReportDatasetConfigurationArgs) ToReportDatasetConfigurationOutputWithContext(ctx context.Context) ReportDatasetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetConfigurationOutput)
}

func (i ReportDatasetConfigurationArgs) ToReportDatasetConfigurationPtrOutput() ReportDatasetConfigurationPtrOutput {
	return i.ToReportDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (i ReportDatasetConfigurationArgs) ToReportDatasetConfigurationPtrOutputWithContext(ctx context.Context) ReportDatasetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetConfigurationOutput).ToReportDatasetConfigurationPtrOutputWithContext(ctx)
}

// ReportDatasetConfigurationPtrInput is an input type that accepts ReportDatasetConfigurationArgs, ReportDatasetConfigurationPtr and ReportDatasetConfigurationPtrOutput values.
// You can construct a concrete instance of `ReportDatasetConfigurationPtrInput` via:
//
//	        ReportDatasetConfigurationArgs{...}
//
//	or:
//
//	        nil
type ReportDatasetConfigurationPtrInput interface {
	pulumi.Input

	ToReportDatasetConfigurationPtrOutput() ReportDatasetConfigurationPtrOutput
	ToReportDatasetConfigurationPtrOutputWithContext(context.Context) ReportDatasetConfigurationPtrOutput
}

type reportDatasetConfigurationPtrType ReportDatasetConfigurationArgs

func ReportDatasetConfigurationPtr(v *ReportDatasetConfigurationArgs) ReportDatasetConfigurationPtrInput {
	return (*reportDatasetConfigurationPtrType)(v)
}

func (*reportDatasetConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDatasetConfiguration)(nil)).Elem()
}

func (i *reportDatasetConfigurationPtrType) ToReportDatasetConfigurationPtrOutput() ReportDatasetConfigurationPtrOutput {
	return i.ToReportDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (i *reportDatasetConfigurationPtrType) ToReportDatasetConfigurationPtrOutputWithContext(ctx context.Context) ReportDatasetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetConfigurationPtrOutput)
}

// The configuration of dataset in the report.
type ReportDatasetConfigurationOutput struct{ *pulumi.OutputState }

func (ReportDatasetConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDatasetConfiguration)(nil)).Elem()
}

func (o ReportDatasetConfigurationOutput) ToReportDatasetConfigurationOutput() ReportDatasetConfigurationOutput {
	return o
}

func (o ReportDatasetConfigurationOutput) ToReportDatasetConfigurationOutputWithContext(ctx context.Context) ReportDatasetConfigurationOutput {
	return o
}

func (o ReportDatasetConfigurationOutput) ToReportDatasetConfigurationPtrOutput() ReportDatasetConfigurationPtrOutput {
	return o.ToReportDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (o ReportDatasetConfigurationOutput) ToReportDatasetConfigurationPtrOutputWithContext(ctx context.Context) ReportDatasetConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportDatasetConfiguration) *ReportDatasetConfiguration {
		return &v
	}).(ReportDatasetConfigurationPtrOutput)
}

// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
func (o ReportDatasetConfigurationOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportDatasetConfiguration) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

type ReportDatasetConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ReportDatasetConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDatasetConfiguration)(nil)).Elem()
}

func (o ReportDatasetConfigurationPtrOutput) ToReportDatasetConfigurationPtrOutput() ReportDatasetConfigurationPtrOutput {
	return o
}

func (o ReportDatasetConfigurationPtrOutput) ToReportDatasetConfigurationPtrOutputWithContext(ctx context.Context) ReportDatasetConfigurationPtrOutput {
	return o
}

func (o ReportDatasetConfigurationPtrOutput) Elem() ReportDatasetConfigurationOutput {
	return o.ApplyT(func(v *ReportDatasetConfiguration) ReportDatasetConfiguration {
		if v != nil {
			return *v
		}
		var ret ReportDatasetConfiguration
		return ret
	}).(ReportDatasetConfigurationOutput)
}

// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
func (o ReportDatasetConfigurationPtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportDatasetConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// The configuration of dataset in the report.
type ReportDatasetConfigurationResponse struct {
	// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
	Columns []string `pulumi:"columns"`
}

// The configuration of dataset in the report.
type ReportDatasetConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ReportDatasetConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDatasetConfigurationResponse)(nil)).Elem()
}

func (o ReportDatasetConfigurationResponseOutput) ToReportDatasetConfigurationResponseOutput() ReportDatasetConfigurationResponseOutput {
	return o
}

func (o ReportDatasetConfigurationResponseOutput) ToReportDatasetConfigurationResponseOutputWithContext(ctx context.Context) ReportDatasetConfigurationResponseOutput {
	return o
}

// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
func (o ReportDatasetConfigurationResponseOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportDatasetConfigurationResponse) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

type ReportDatasetConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportDatasetConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDatasetConfigurationResponse)(nil)).Elem()
}

func (o ReportDatasetConfigurationResponsePtrOutput) ToReportDatasetConfigurationResponsePtrOutput() ReportDatasetConfigurationResponsePtrOutput {
	return o
}

func (o ReportDatasetConfigurationResponsePtrOutput) ToReportDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) ReportDatasetConfigurationResponsePtrOutput {
	return o
}

func (o ReportDatasetConfigurationResponsePtrOutput) Elem() ReportDatasetConfigurationResponseOutput {
	return o.ApplyT(func(v *ReportDatasetConfigurationResponse) ReportDatasetConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ReportDatasetConfigurationResponse
		return ret
	}).(ReportDatasetConfigurationResponseOutput)
}

// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
func (o ReportDatasetConfigurationResponsePtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportDatasetConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// The definition of data present in the report.
type ReportDatasetResponse struct {
	// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
	Aggregation map[string]ReportAggregationResponse `pulumi:"aggregation"`
	// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
	Configuration *ReportDatasetConfigurationResponse `pulumi:"configuration"`
	// Has filter expression to use in the report.
	Filter *ReportFilterResponse `pulumi:"filter"`
	// The granularity of rows in the report.
	Granularity *string `pulumi:"granularity"`
	// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
	Grouping []ReportGroupingResponse `pulumi:"grouping"`
}

// The definition of data present in the report.
type ReportDatasetResponseOutput struct{ *pulumi.OutputState }

func (ReportDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDatasetResponse)(nil)).Elem()
}

func (o ReportDatasetResponseOutput) ToReportDatasetResponseOutput() ReportDatasetResponseOutput {
	return o
}

func (o ReportDatasetResponseOutput) ToReportDatasetResponseOutputWithContext(ctx context.Context) ReportDatasetResponseOutput {
	return o
}

// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
func (o ReportDatasetResponseOutput) Aggregation() ReportAggregationResponseMapOutput {
	return o.ApplyT(func(v ReportDatasetResponse) map[string]ReportAggregationResponse { return v.Aggregation }).(ReportAggregationResponseMapOutput)
}

// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
func (o ReportDatasetResponseOutput) Configuration() ReportDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ReportDatasetResponse) *ReportDatasetConfigurationResponse { return v.Configuration }).(ReportDatasetConfigurationResponsePtrOutput)
}

// Has filter expression to use in the report.
func (o ReportDatasetResponseOutput) Filter() ReportFilterResponsePtrOutput {
	return o.ApplyT(func(v ReportDatasetResponse) *ReportFilterResponse { return v.Filter }).(ReportFilterResponsePtrOutput)
}

// The granularity of rows in the report.
func (o ReportDatasetResponseOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportDatasetResponse) *string { return v.Granularity }).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
func (o ReportDatasetResponseOutput) Grouping() ReportGroupingResponseArrayOutput {
	return o.ApplyT(func(v ReportDatasetResponse) []ReportGroupingResponse { return v.Grouping }).(ReportGroupingResponseArrayOutput)
}

type ReportDatasetResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportDatasetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDatasetResponse)(nil)).Elem()
}

func (o ReportDatasetResponsePtrOutput) ToReportDatasetResponsePtrOutput() ReportDatasetResponsePtrOutput {
	return o
}

func (o ReportDatasetResponsePtrOutput) ToReportDatasetResponsePtrOutputWithContext(ctx context.Context) ReportDatasetResponsePtrOutput {
	return o
}

func (o ReportDatasetResponsePtrOutput) Elem() ReportDatasetResponseOutput {
	return o.ApplyT(func(v *ReportDatasetResponse) ReportDatasetResponse {
		if v != nil {
			return *v
		}
		var ret ReportDatasetResponse
		return ret
	}).(ReportDatasetResponseOutput)
}

// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
func (o ReportDatasetResponsePtrOutput) Aggregation() ReportAggregationResponseMapOutput {
	return o.ApplyT(func(v *ReportDatasetResponse) map[string]ReportAggregationResponse {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(ReportAggregationResponseMapOutput)
}

// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
func (o ReportDatasetResponsePtrOutput) Configuration() ReportDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *ReportDatasetResponse) *ReportDatasetConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ReportDatasetConfigurationResponsePtrOutput)
}

// Has filter expression to use in the report.
func (o ReportDatasetResponsePtrOutput) Filter() ReportFilterResponsePtrOutput {
	return o.ApplyT(func(v *ReportDatasetResponse) *ReportFilterResponse {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(ReportFilterResponsePtrOutput)
}

// The granularity of rows in the report.
func (o ReportDatasetResponsePtrOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDatasetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Granularity
	}).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
func (o ReportDatasetResponsePtrOutput) Grouping() ReportGroupingResponseArrayOutput {
	return o.ApplyT(func(v *ReportDatasetResponse) []ReportGroupingResponse {
		if v == nil {
			return nil
		}
		return v.Grouping
	}).(ReportGroupingResponseArrayOutput)
}

// The definition of a report.
type ReportDefinition struct {
	// Has definition for data in this report.
	Dataset *ReportDataset `pulumi:"dataset"`
	// Has time period for pulling data for the report.
	TimePeriod *ReportTimePeriod `pulumi:"timePeriod"`
	// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
	Timeframe string `pulumi:"timeframe"`
	// The type of the report.
	Type string `pulumi:"type"`
}

// ReportDefinitionInput is an input type that accepts ReportDefinitionArgs and ReportDefinitionOutput values.
// You can construct a concrete instance of `ReportDefinitionInput` via:
//
//	ReportDefinitionArgs{...}
type ReportDefinitionInput interface {
	pulumi.Input

	ToReportDefinitionOutput() ReportDefinitionOutput
	ToReportDefinitionOutputWithContext(context.Context) ReportDefinitionOutput
}

// The definition of a report.
type ReportDefinitionArgs struct {
	// Has definition for data in this report.
	Dataset ReportDatasetPtrInput `pulumi:"dataset"`
	// Has time period for pulling data for the report.
	TimePeriod ReportTimePeriodPtrInput `pulumi:"timePeriod"`
	// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
	Timeframe pulumi.StringInput `pulumi:"timeframe"`
	// The type of the report.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ReportDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDefinition)(nil)).Elem()
}

func (i ReportDefinitionArgs) ToReportDefinitionOutput() ReportDefinitionOutput {
	return i.ToReportDefinitionOutputWithContext(context.Background())
}

func (i ReportDefinitionArgs) ToReportDefinitionOutputWithContext(ctx context.Context) ReportDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDefinitionOutput)
}

// The definition of a report.
type ReportDefinitionOutput struct{ *pulumi.OutputState }

func (ReportDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDefinition)(nil)).Elem()
}

func (o ReportDefinitionOutput) ToReportDefinitionOutput() ReportDefinitionOutput {
	return o
}

func (o ReportDefinitionOutput) ToReportDefinitionOutputWithContext(ctx context.Context) ReportDefinitionOutput {
	return o
}

// Has definition for data in this report.
func (o ReportDefinitionOutput) Dataset() ReportDatasetPtrOutput {
	return o.ApplyT(func(v ReportDefinition) *ReportDataset { return v.Dataset }).(ReportDatasetPtrOutput)
}

// Has time period for pulling data for the report.
func (o ReportDefinitionOutput) TimePeriod() ReportTimePeriodPtrOutput {
	return o.ApplyT(func(v ReportDefinition) *ReportTimePeriod { return v.TimePeriod }).(ReportTimePeriodPtrOutput)
}

// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
func (o ReportDefinitionOutput) Timeframe() pulumi.StringOutput {
	return o.ApplyT(func(v ReportDefinition) string { return v.Timeframe }).(pulumi.StringOutput)
}

// The type of the report.
func (o ReportDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReportDefinition) string { return v.Type }).(pulumi.StringOutput)
}

// The definition of a report.
type ReportDefinitionResponse struct {
	// Has definition for data in this report.
	Dataset *ReportDatasetResponse `pulumi:"dataset"`
	// Has time period for pulling data for the report.
	TimePeriod *ReportTimePeriodResponse `pulumi:"timePeriod"`
	// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
	Timeframe string `pulumi:"timeframe"`
	// The type of the report.
	Type string `pulumi:"type"`
}

// The definition of a report.
type ReportDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ReportDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDefinitionResponse)(nil)).Elem()
}

func (o ReportDefinitionResponseOutput) ToReportDefinitionResponseOutput() ReportDefinitionResponseOutput {
	return o
}

func (o ReportDefinitionResponseOutput) ToReportDefinitionResponseOutputWithContext(ctx context.Context) ReportDefinitionResponseOutput {
	return o
}

// Has definition for data in this report.
func (o ReportDefinitionResponseOutput) Dataset() ReportDatasetResponsePtrOutput {
	return o.ApplyT(func(v ReportDefinitionResponse) *ReportDatasetResponse { return v.Dataset }).(ReportDatasetResponsePtrOutput)
}

// Has time period for pulling data for the report.
func (o ReportDefinitionResponseOutput) TimePeriod() ReportTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v ReportDefinitionResponse) *ReportTimePeriodResponse { return v.TimePeriod }).(ReportTimePeriodResponsePtrOutput)
}

// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
func (o ReportDefinitionResponseOutput) Timeframe() pulumi.StringOutput {
	return o.ApplyT(func(v ReportDefinitionResponse) string { return v.Timeframe }).(pulumi.StringOutput)
}

// The type of the report.
func (o ReportDefinitionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReportDefinitionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The destination information for the delivery of the report.
type ReportDeliveryDestination struct {
	// The name of the container where reports will be uploaded.
	Container string `pulumi:"container"`
	// The resource id of the storage account where reports will be delivered.
	ResourceId string `pulumi:"resourceId"`
	// The name of the directory where reports will be uploaded.
	RootFolderPath *string `pulumi:"rootFolderPath"`
}

// ReportDeliveryDestinationInput is an input type that accepts ReportDeliveryDestinationArgs and ReportDeliveryDestinationOutput values.
// You can construct a concrete instance of `ReportDeliveryDestinationInput` via:
//
//	ReportDeliveryDestinationArgs{...}
type ReportDeliveryDestinationInput interface {
	pulumi.Input

	ToReportDeliveryDestinationOutput() ReportDeliveryDestinationOutput
	ToReportDeliveryDestinationOutputWithContext(context.Context) ReportDeliveryDestinationOutput
}

// The destination information for the delivery of the report.
type ReportDeliveryDestinationArgs struct {
	// The name of the container where reports will be uploaded.
	Container pulumi.StringInput `pulumi:"container"`
	// The resource id of the storage account where reports will be delivered.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The name of the directory where reports will be uploaded.
	RootFolderPath pulumi.StringPtrInput `pulumi:"rootFolderPath"`
}

func (ReportDeliveryDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDeliveryDestination)(nil)).Elem()
}

func (i ReportDeliveryDestinationArgs) ToReportDeliveryDestinationOutput() ReportDeliveryDestinationOutput {
	return i.ToReportDeliveryDestinationOutputWithContext(context.Background())
}

func (i ReportDeliveryDestinationArgs) ToReportDeliveryDestinationOutputWithContext(ctx context.Context) ReportDeliveryDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDeliveryDestinationOutput)
}

// The destination information for the delivery of the report.
type ReportDeliveryDestinationOutput struct{ *pulumi.OutputState }

func (ReportDeliveryDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDeliveryDestination)(nil)).Elem()
}

func (o ReportDeliveryDestinationOutput) ToReportDeliveryDestinationOutput() ReportDeliveryDestinationOutput {
	return o
}

func (o ReportDeliveryDestinationOutput) ToReportDeliveryDestinationOutputWithContext(ctx context.Context) ReportDeliveryDestinationOutput {
	return o
}

// The name of the container where reports will be uploaded.
func (o ReportDeliveryDestinationOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v ReportDeliveryDestination) string { return v.Container }).(pulumi.StringOutput)
}

// The resource id of the storage account where reports will be delivered.
func (o ReportDeliveryDestinationOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ReportDeliveryDestination) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The name of the directory where reports will be uploaded.
func (o ReportDeliveryDestinationOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportDeliveryDestination) *string { return v.RootFolderPath }).(pulumi.StringPtrOutput)
}

// The destination information for the delivery of the report.
type ReportDeliveryDestinationResponse struct {
	// The name of the container where reports will be uploaded.
	Container string `pulumi:"container"`
	// The resource id of the storage account where reports will be delivered.
	ResourceId string `pulumi:"resourceId"`
	// The name of the directory where reports will be uploaded.
	RootFolderPath *string `pulumi:"rootFolderPath"`
}

// The destination information for the delivery of the report.
type ReportDeliveryDestinationResponseOutput struct{ *pulumi.OutputState }

func (ReportDeliveryDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDeliveryDestinationResponse)(nil)).Elem()
}

func (o ReportDeliveryDestinationResponseOutput) ToReportDeliveryDestinationResponseOutput() ReportDeliveryDestinationResponseOutput {
	return o
}

func (o ReportDeliveryDestinationResponseOutput) ToReportDeliveryDestinationResponseOutputWithContext(ctx context.Context) ReportDeliveryDestinationResponseOutput {
	return o
}

// The name of the container where reports will be uploaded.
func (o ReportDeliveryDestinationResponseOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v ReportDeliveryDestinationResponse) string { return v.Container }).(pulumi.StringOutput)
}

// The resource id of the storage account where reports will be delivered.
func (o ReportDeliveryDestinationResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ReportDeliveryDestinationResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The name of the directory where reports will be uploaded.
func (o ReportDeliveryDestinationResponseOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportDeliveryDestinationResponse) *string { return v.RootFolderPath }).(pulumi.StringPtrOutput)
}

// The delivery information associated with a report.
type ReportDeliveryInfo struct {
	// Has destination for the report being delivered.
	Destination ReportDeliveryDestination `pulumi:"destination"`
}

// ReportDeliveryInfoInput is an input type that accepts ReportDeliveryInfoArgs and ReportDeliveryInfoOutput values.
// You can construct a concrete instance of `ReportDeliveryInfoInput` via:
//
//	ReportDeliveryInfoArgs{...}
type ReportDeliveryInfoInput interface {
	pulumi.Input

	ToReportDeliveryInfoOutput() ReportDeliveryInfoOutput
	ToReportDeliveryInfoOutputWithContext(context.Context) ReportDeliveryInfoOutput
}

// The delivery information associated with a report.
type ReportDeliveryInfoArgs struct {
	// Has destination for the report being delivered.
	Destination ReportDeliveryDestinationInput `pulumi:"destination"`
}

func (ReportDeliveryInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDeliveryInfo)(nil)).Elem()
}

func (i ReportDeliveryInfoArgs) ToReportDeliveryInfoOutput() ReportDeliveryInfoOutput {
	return i.ToReportDeliveryInfoOutputWithContext(context.Background())
}

func (i ReportDeliveryInfoArgs) ToReportDeliveryInfoOutputWithContext(ctx context.Context) ReportDeliveryInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDeliveryInfoOutput)
}

// The delivery information associated with a report.
type ReportDeliveryInfoOutput struct{ *pulumi.OutputState }

func (ReportDeliveryInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDeliveryInfo)(nil)).Elem()
}

func (o ReportDeliveryInfoOutput) ToReportDeliveryInfoOutput() ReportDeliveryInfoOutput {
	return o
}

func (o ReportDeliveryInfoOutput) ToReportDeliveryInfoOutputWithContext(ctx context.Context) ReportDeliveryInfoOutput {
	return o
}

// Has destination for the report being delivered.
func (o ReportDeliveryInfoOutput) Destination() ReportDeliveryDestinationOutput {
	return o.ApplyT(func(v ReportDeliveryInfo) ReportDeliveryDestination { return v.Destination }).(ReportDeliveryDestinationOutput)
}

// The delivery information associated with a report.
type ReportDeliveryInfoResponse struct {
	// Has destination for the report being delivered.
	Destination ReportDeliveryDestinationResponse `pulumi:"destination"`
}

// The delivery information associated with a report.
type ReportDeliveryInfoResponseOutput struct{ *pulumi.OutputState }

func (ReportDeliveryInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDeliveryInfoResponse)(nil)).Elem()
}

func (o ReportDeliveryInfoResponseOutput) ToReportDeliveryInfoResponseOutput() ReportDeliveryInfoResponseOutput {
	return o
}

func (o ReportDeliveryInfoResponseOutput) ToReportDeliveryInfoResponseOutputWithContext(ctx context.Context) ReportDeliveryInfoResponseOutput {
	return o
}

// Has destination for the report being delivered.
func (o ReportDeliveryInfoResponseOutput) Destination() ReportDeliveryDestinationResponseOutput {
	return o.ApplyT(func(v ReportDeliveryInfoResponse) ReportDeliveryDestinationResponse { return v.Destination }).(ReportDeliveryDestinationResponseOutput)
}

// The filter expression to be used in the report.
type ReportFilter struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []ReportFilter `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension *ReportComparisonExpression `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not *ReportFilter `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or []ReportFilter `pulumi:"or"`
	// Has comparison expression for a tag
	Tag *ReportComparisonExpression `pulumi:"tag"`
}

// ReportFilterInput is an input type that accepts ReportFilterArgs and ReportFilterOutput values.
// You can construct a concrete instance of `ReportFilterInput` via:
//
//	ReportFilterArgs{...}
type ReportFilterInput interface {
	pulumi.Input

	ToReportFilterOutput() ReportFilterOutput
	ToReportFilterOutputWithContext(context.Context) ReportFilterOutput
}

// The filter expression to be used in the report.
type ReportFilterArgs struct {
	// The logical "AND" expression. Must have at least 2 items.
	And ReportFilterArrayInput `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension ReportComparisonExpressionPtrInput `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not ReportFilterPtrInput `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or ReportFilterArrayInput `pulumi:"or"`
	// Has comparison expression for a tag
	Tag ReportComparisonExpressionPtrInput `pulumi:"tag"`
}

func (ReportFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportFilter)(nil)).Elem()
}

func (i ReportFilterArgs) ToReportFilterOutput() ReportFilterOutput {
	return i.ToReportFilterOutputWithContext(context.Background())
}

func (i ReportFilterArgs) ToReportFilterOutputWithContext(ctx context.Context) ReportFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportFilterOutput)
}

func (i ReportFilterArgs) ToReportFilterPtrOutput() ReportFilterPtrOutput {
	return i.ToReportFilterPtrOutputWithContext(context.Background())
}

func (i ReportFilterArgs) ToReportFilterPtrOutputWithContext(ctx context.Context) ReportFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportFilterOutput).ToReportFilterPtrOutputWithContext(ctx)
}

// ReportFilterPtrInput is an input type that accepts ReportFilterArgs, ReportFilterPtr and ReportFilterPtrOutput values.
// You can construct a concrete instance of `ReportFilterPtrInput` via:
//
//	        ReportFilterArgs{...}
//
//	or:
//
//	        nil
type ReportFilterPtrInput interface {
	pulumi.Input

	ToReportFilterPtrOutput() ReportFilterPtrOutput
	ToReportFilterPtrOutputWithContext(context.Context) ReportFilterPtrOutput
}

type reportFilterPtrType ReportFilterArgs

func ReportFilterPtr(v *ReportFilterArgs) ReportFilterPtrInput {
	return (*reportFilterPtrType)(v)
}

func (*reportFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportFilter)(nil)).Elem()
}

func (i *reportFilterPtrType) ToReportFilterPtrOutput() ReportFilterPtrOutput {
	return i.ToReportFilterPtrOutputWithContext(context.Background())
}

func (i *reportFilterPtrType) ToReportFilterPtrOutputWithContext(ctx context.Context) ReportFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportFilterPtrOutput)
}

// ReportFilterArrayInput is an input type that accepts ReportFilterArray and ReportFilterArrayOutput values.
// You can construct a concrete instance of `ReportFilterArrayInput` via:
//
//	ReportFilterArray{ ReportFilterArgs{...} }
type ReportFilterArrayInput interface {
	pulumi.Input

	ToReportFilterArrayOutput() ReportFilterArrayOutput
	ToReportFilterArrayOutputWithContext(context.Context) ReportFilterArrayOutput
}

type ReportFilterArray []ReportFilterInput

func (ReportFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportFilter)(nil)).Elem()
}

func (i ReportFilterArray) ToReportFilterArrayOutput() ReportFilterArrayOutput {
	return i.ToReportFilterArrayOutputWithContext(context.Background())
}

func (i ReportFilterArray) ToReportFilterArrayOutputWithContext(ctx context.Context) ReportFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportFilterArrayOutput)
}

// The filter expression to be used in the report.
type ReportFilterOutput struct{ *pulumi.OutputState }

func (ReportFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportFilter)(nil)).Elem()
}

func (o ReportFilterOutput) ToReportFilterOutput() ReportFilterOutput {
	return o
}

func (o ReportFilterOutput) ToReportFilterOutputWithContext(ctx context.Context) ReportFilterOutput {
	return o
}

func (o ReportFilterOutput) ToReportFilterPtrOutput() ReportFilterPtrOutput {
	return o.ToReportFilterPtrOutputWithContext(context.Background())
}

func (o ReportFilterOutput) ToReportFilterPtrOutputWithContext(ctx context.Context) ReportFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportFilter) *ReportFilter {
		return &v
	}).(ReportFilterPtrOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o ReportFilterOutput) And() ReportFilterArrayOutput {
	return o.ApplyT(func(v ReportFilter) []ReportFilter { return v.And }).(ReportFilterArrayOutput)
}

// Has comparison expression for a dimension
func (o ReportFilterOutput) Dimension() ReportComparisonExpressionPtrOutput {
	return o.ApplyT(func(v ReportFilter) *ReportComparisonExpression { return v.Dimension }).(ReportComparisonExpressionPtrOutput)
}

// The logical "NOT" expression.
func (o ReportFilterOutput) Not() ReportFilterPtrOutput {
	return o.ApplyT(func(v ReportFilter) *ReportFilter { return v.Not }).(ReportFilterPtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o ReportFilterOutput) Or() ReportFilterArrayOutput {
	return o.ApplyT(func(v ReportFilter) []ReportFilter { return v.Or }).(ReportFilterArrayOutput)
}

// Has comparison expression for a tag
func (o ReportFilterOutput) Tag() ReportComparisonExpressionPtrOutput {
	return o.ApplyT(func(v ReportFilter) *ReportComparisonExpression { return v.Tag }).(ReportComparisonExpressionPtrOutput)
}

type ReportFilterPtrOutput struct{ *pulumi.OutputState }

func (ReportFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportFilter)(nil)).Elem()
}

func (o ReportFilterPtrOutput) ToReportFilterPtrOutput() ReportFilterPtrOutput {
	return o
}

func (o ReportFilterPtrOutput) ToReportFilterPtrOutputWithContext(ctx context.Context) ReportFilterPtrOutput {
	return o
}

func (o ReportFilterPtrOutput) Elem() ReportFilterOutput {
	return o.ApplyT(func(v *ReportFilter) ReportFilter {
		if v != nil {
			return *v
		}
		var ret ReportFilter
		return ret
	}).(ReportFilterOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o ReportFilterPtrOutput) And() ReportFilterArrayOutput {
	return o.ApplyT(func(v *ReportFilter) []ReportFilter {
		if v == nil {
			return nil
		}
		return v.And
	}).(ReportFilterArrayOutput)
}

// Has comparison expression for a dimension
func (o ReportFilterPtrOutput) Dimension() ReportComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *ReportFilter) *ReportComparisonExpression {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(ReportComparisonExpressionPtrOutput)
}

// The logical "NOT" expression.
func (o ReportFilterPtrOutput) Not() ReportFilterPtrOutput {
	return o.ApplyT(func(v *ReportFilter) *ReportFilter {
		if v == nil {
			return nil
		}
		return v.Not
	}).(ReportFilterPtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o ReportFilterPtrOutput) Or() ReportFilterArrayOutput {
	return o.ApplyT(func(v *ReportFilter) []ReportFilter {
		if v == nil {
			return nil
		}
		return v.Or
	}).(ReportFilterArrayOutput)
}

// Has comparison expression for a tag
func (o ReportFilterPtrOutput) Tag() ReportComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *ReportFilter) *ReportComparisonExpression {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(ReportComparisonExpressionPtrOutput)
}

type ReportFilterArrayOutput struct{ *pulumi.OutputState }

func (ReportFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportFilter)(nil)).Elem()
}

func (o ReportFilterArrayOutput) ToReportFilterArrayOutput() ReportFilterArrayOutput {
	return o
}

func (o ReportFilterArrayOutput) ToReportFilterArrayOutputWithContext(ctx context.Context) ReportFilterArrayOutput {
	return o
}

func (o ReportFilterArrayOutput) Index(i pulumi.IntInput) ReportFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportFilter {
		return vs[0].([]ReportFilter)[vs[1].(int)]
	}).(ReportFilterOutput)
}

// The filter expression to be used in the report.
type ReportFilterResponse struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []ReportFilterResponse `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension *ReportComparisonExpressionResponse `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not *ReportFilterResponse `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or []ReportFilterResponse `pulumi:"or"`
	// Has comparison expression for a tag
	Tag *ReportComparisonExpressionResponse `pulumi:"tag"`
}

// The filter expression to be used in the report.
type ReportFilterResponseOutput struct{ *pulumi.OutputState }

func (ReportFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportFilterResponse)(nil)).Elem()
}

func (o ReportFilterResponseOutput) ToReportFilterResponseOutput() ReportFilterResponseOutput {
	return o
}

func (o ReportFilterResponseOutput) ToReportFilterResponseOutputWithContext(ctx context.Context) ReportFilterResponseOutput {
	return o
}

// The logical "AND" expression. Must have at least 2 items.
func (o ReportFilterResponseOutput) And() ReportFilterResponseArrayOutput {
	return o.ApplyT(func(v ReportFilterResponse) []ReportFilterResponse { return v.And }).(ReportFilterResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o ReportFilterResponseOutput) Dimension() ReportComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v ReportFilterResponse) *ReportComparisonExpressionResponse { return v.Dimension }).(ReportComparisonExpressionResponsePtrOutput)
}

// The logical "NOT" expression.
func (o ReportFilterResponseOutput) Not() ReportFilterResponsePtrOutput {
	return o.ApplyT(func(v ReportFilterResponse) *ReportFilterResponse { return v.Not }).(ReportFilterResponsePtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o ReportFilterResponseOutput) Or() ReportFilterResponseArrayOutput {
	return o.ApplyT(func(v ReportFilterResponse) []ReportFilterResponse { return v.Or }).(ReportFilterResponseArrayOutput)
}

// Has comparison expression for a tag
func (o ReportFilterResponseOutput) Tag() ReportComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v ReportFilterResponse) *ReportComparisonExpressionResponse { return v.Tag }).(ReportComparisonExpressionResponsePtrOutput)
}

type ReportFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportFilterResponse)(nil)).Elem()
}

func (o ReportFilterResponsePtrOutput) ToReportFilterResponsePtrOutput() ReportFilterResponsePtrOutput {
	return o
}

func (o ReportFilterResponsePtrOutput) ToReportFilterResponsePtrOutputWithContext(ctx context.Context) ReportFilterResponsePtrOutput {
	return o
}

func (o ReportFilterResponsePtrOutput) Elem() ReportFilterResponseOutput {
	return o.ApplyT(func(v *ReportFilterResponse) ReportFilterResponse {
		if v != nil {
			return *v
		}
		var ret ReportFilterResponse
		return ret
	}).(ReportFilterResponseOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o ReportFilterResponsePtrOutput) And() ReportFilterResponseArrayOutput {
	return o.ApplyT(func(v *ReportFilterResponse) []ReportFilterResponse {
		if v == nil {
			return nil
		}
		return v.And
	}).(ReportFilterResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o ReportFilterResponsePtrOutput) Dimension() ReportComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *ReportFilterResponse) *ReportComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(ReportComparisonExpressionResponsePtrOutput)
}

// The logical "NOT" expression.
func (o ReportFilterResponsePtrOutput) Not() ReportFilterResponsePtrOutput {
	return o.ApplyT(func(v *ReportFilterResponse) *ReportFilterResponse {
		if v == nil {
			return nil
		}
		return v.Not
	}).(ReportFilterResponsePtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o ReportFilterResponsePtrOutput) Or() ReportFilterResponseArrayOutput {
	return o.ApplyT(func(v *ReportFilterResponse) []ReportFilterResponse {
		if v == nil {
			return nil
		}
		return v.Or
	}).(ReportFilterResponseArrayOutput)
}

// Has comparison expression for a tag
func (o ReportFilterResponsePtrOutput) Tag() ReportComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *ReportFilterResponse) *ReportComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(ReportComparisonExpressionResponsePtrOutput)
}

type ReportFilterResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportFilterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportFilterResponse)(nil)).Elem()
}

func (o ReportFilterResponseArrayOutput) ToReportFilterResponseArrayOutput() ReportFilterResponseArrayOutput {
	return o
}

func (o ReportFilterResponseArrayOutput) ToReportFilterResponseArrayOutputWithContext(ctx context.Context) ReportFilterResponseArrayOutput {
	return o
}

func (o ReportFilterResponseArrayOutput) Index(i pulumi.IntInput) ReportFilterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportFilterResponse {
		return vs[0].([]ReportFilterResponse)[vs[1].(int)]
	}).(ReportFilterResponseOutput)
}

// The group by expression to be used in the report.
type ReportGrouping struct {
	// The name of the column to group.
	Name string `pulumi:"name"`
	// Has type of the column to group.
	Type string `pulumi:"type"`
}

// ReportGroupingInput is an input type that accepts ReportGroupingArgs and ReportGroupingOutput values.
// You can construct a concrete instance of `ReportGroupingInput` via:
//
//	ReportGroupingArgs{...}
type ReportGroupingInput interface {
	pulumi.Input

	ToReportGroupingOutput() ReportGroupingOutput
	ToReportGroupingOutputWithContext(context.Context) ReportGroupingOutput
}

// The group by expression to be used in the report.
type ReportGroupingArgs struct {
	// The name of the column to group.
	Name pulumi.StringInput `pulumi:"name"`
	// Has type of the column to group.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ReportGroupingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGrouping)(nil)).Elem()
}

func (i ReportGroupingArgs) ToReportGroupingOutput() ReportGroupingOutput {
	return i.ToReportGroupingOutputWithContext(context.Background())
}

func (i ReportGroupingArgs) ToReportGroupingOutputWithContext(ctx context.Context) ReportGroupingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupingOutput)
}

// ReportGroupingArrayInput is an input type that accepts ReportGroupingArray and ReportGroupingArrayOutput values.
// You can construct a concrete instance of `ReportGroupingArrayInput` via:
//
//	ReportGroupingArray{ ReportGroupingArgs{...} }
type ReportGroupingArrayInput interface {
	pulumi.Input

	ToReportGroupingArrayOutput() ReportGroupingArrayOutput
	ToReportGroupingArrayOutputWithContext(context.Context) ReportGroupingArrayOutput
}

type ReportGroupingArray []ReportGroupingInput

func (ReportGroupingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportGrouping)(nil)).Elem()
}

func (i ReportGroupingArray) ToReportGroupingArrayOutput() ReportGroupingArrayOutput {
	return i.ToReportGroupingArrayOutputWithContext(context.Background())
}

func (i ReportGroupingArray) ToReportGroupingArrayOutputWithContext(ctx context.Context) ReportGroupingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupingArrayOutput)
}

// The group by expression to be used in the report.
type ReportGroupingOutput struct{ *pulumi.OutputState }

func (ReportGroupingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGrouping)(nil)).Elem()
}

func (o ReportGroupingOutput) ToReportGroupingOutput() ReportGroupingOutput {
	return o
}

func (o ReportGroupingOutput) ToReportGroupingOutputWithContext(ctx context.Context) ReportGroupingOutput {
	return o
}

// The name of the column to group.
func (o ReportGroupingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportGrouping) string { return v.Name }).(pulumi.StringOutput)
}

// Has type of the column to group.
func (o ReportGroupingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReportGrouping) string { return v.Type }).(pulumi.StringOutput)
}

type ReportGroupingArrayOutput struct{ *pulumi.OutputState }

func (ReportGroupingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportGrouping)(nil)).Elem()
}

func (o ReportGroupingArrayOutput) ToReportGroupingArrayOutput() ReportGroupingArrayOutput {
	return o
}

func (o ReportGroupingArrayOutput) ToReportGroupingArrayOutputWithContext(ctx context.Context) ReportGroupingArrayOutput {
	return o
}

func (o ReportGroupingArrayOutput) Index(i pulumi.IntInput) ReportGroupingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportGrouping {
		return vs[0].([]ReportGrouping)[vs[1].(int)]
	}).(ReportGroupingOutput)
}

// The group by expression to be used in the report.
type ReportGroupingResponse struct {
	// The name of the column to group.
	Name string `pulumi:"name"`
	// Has type of the column to group.
	Type string `pulumi:"type"`
}

// The group by expression to be used in the report.
type ReportGroupingResponseOutput struct{ *pulumi.OutputState }

func (ReportGroupingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGroupingResponse)(nil)).Elem()
}

func (o ReportGroupingResponseOutput) ToReportGroupingResponseOutput() ReportGroupingResponseOutput {
	return o
}

func (o ReportGroupingResponseOutput) ToReportGroupingResponseOutputWithContext(ctx context.Context) ReportGroupingResponseOutput {
	return o
}

// The name of the column to group.
func (o ReportGroupingResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportGroupingResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Has type of the column to group.
func (o ReportGroupingResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReportGroupingResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ReportGroupingResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportGroupingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportGroupingResponse)(nil)).Elem()
}

func (o ReportGroupingResponseArrayOutput) ToReportGroupingResponseArrayOutput() ReportGroupingResponseArrayOutput {
	return o
}

func (o ReportGroupingResponseArrayOutput) ToReportGroupingResponseArrayOutputWithContext(ctx context.Context) ReportGroupingResponseArrayOutput {
	return o
}

func (o ReportGroupingResponseArrayOutput) Index(i pulumi.IntInput) ReportGroupingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportGroupingResponse {
		return vs[0].([]ReportGroupingResponse)[vs[1].(int)]
	}).(ReportGroupingResponseOutput)
}

// The start and end date for recurrence schedule.
type ReportRecurrencePeriod struct {
	// The start date of recurrence.
	From string `pulumi:"from"`
	// The end date of recurrence.
	To *string `pulumi:"to"`
}

// ReportRecurrencePeriodInput is an input type that accepts ReportRecurrencePeriodArgs and ReportRecurrencePeriodOutput values.
// You can construct a concrete instance of `ReportRecurrencePeriodInput` via:
//
//	ReportRecurrencePeriodArgs{...}
type ReportRecurrencePeriodInput interface {
	pulumi.Input

	ToReportRecurrencePeriodOutput() ReportRecurrencePeriodOutput
	ToReportRecurrencePeriodOutputWithContext(context.Context) ReportRecurrencePeriodOutput
}

// The start and end date for recurrence schedule.
type ReportRecurrencePeriodArgs struct {
	// The start date of recurrence.
	From pulumi.StringInput `pulumi:"from"`
	// The end date of recurrence.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (ReportRecurrencePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportRecurrencePeriod)(nil)).Elem()
}

func (i ReportRecurrencePeriodArgs) ToReportRecurrencePeriodOutput() ReportRecurrencePeriodOutput {
	return i.ToReportRecurrencePeriodOutputWithContext(context.Background())
}

func (i ReportRecurrencePeriodArgs) ToReportRecurrencePeriodOutputWithContext(ctx context.Context) ReportRecurrencePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportRecurrencePeriodOutput)
}

func (i ReportRecurrencePeriodArgs) ToReportRecurrencePeriodPtrOutput() ReportRecurrencePeriodPtrOutput {
	return i.ToReportRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (i ReportRecurrencePeriodArgs) ToReportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ReportRecurrencePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportRecurrencePeriodOutput).ToReportRecurrencePeriodPtrOutputWithContext(ctx)
}

// ReportRecurrencePeriodPtrInput is an input type that accepts ReportRecurrencePeriodArgs, ReportRecurrencePeriodPtr and ReportRecurrencePeriodPtrOutput values.
// You can construct a concrete instance of `ReportRecurrencePeriodPtrInput` via:
//
//	        ReportRecurrencePeriodArgs{...}
//
//	or:
//
//	        nil
type ReportRecurrencePeriodPtrInput interface {
	pulumi.Input

	ToReportRecurrencePeriodPtrOutput() ReportRecurrencePeriodPtrOutput
	ToReportRecurrencePeriodPtrOutputWithContext(context.Context) ReportRecurrencePeriodPtrOutput
}

type reportRecurrencePeriodPtrType ReportRecurrencePeriodArgs

func ReportRecurrencePeriodPtr(v *ReportRecurrencePeriodArgs) ReportRecurrencePeriodPtrInput {
	return (*reportRecurrencePeriodPtrType)(v)
}

func (*reportRecurrencePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportRecurrencePeriod)(nil)).Elem()
}

func (i *reportRecurrencePeriodPtrType) ToReportRecurrencePeriodPtrOutput() ReportRecurrencePeriodPtrOutput {
	return i.ToReportRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (i *reportRecurrencePeriodPtrType) ToReportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ReportRecurrencePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportRecurrencePeriodPtrOutput)
}

// The start and end date for recurrence schedule.
type ReportRecurrencePeriodOutput struct{ *pulumi.OutputState }

func (ReportRecurrencePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportRecurrencePeriod)(nil)).Elem()
}

func (o ReportRecurrencePeriodOutput) ToReportRecurrencePeriodOutput() ReportRecurrencePeriodOutput {
	return o
}

func (o ReportRecurrencePeriodOutput) ToReportRecurrencePeriodOutputWithContext(ctx context.Context) ReportRecurrencePeriodOutput {
	return o
}

func (o ReportRecurrencePeriodOutput) ToReportRecurrencePeriodPtrOutput() ReportRecurrencePeriodPtrOutput {
	return o.ToReportRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (o ReportRecurrencePeriodOutput) ToReportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ReportRecurrencePeriodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportRecurrencePeriod) *ReportRecurrencePeriod {
		return &v
	}).(ReportRecurrencePeriodPtrOutput)
}

// The start date of recurrence.
func (o ReportRecurrencePeriodOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ReportRecurrencePeriod) string { return v.From }).(pulumi.StringOutput)
}

// The end date of recurrence.
func (o ReportRecurrencePeriodOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportRecurrencePeriod) *string { return v.To }).(pulumi.StringPtrOutput)
}

type ReportRecurrencePeriodPtrOutput struct{ *pulumi.OutputState }

func (ReportRecurrencePeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportRecurrencePeriod)(nil)).Elem()
}

func (o ReportRecurrencePeriodPtrOutput) ToReportRecurrencePeriodPtrOutput() ReportRecurrencePeriodPtrOutput {
	return o
}

func (o ReportRecurrencePeriodPtrOutput) ToReportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ReportRecurrencePeriodPtrOutput {
	return o
}

func (o ReportRecurrencePeriodPtrOutput) Elem() ReportRecurrencePeriodOutput {
	return o.ApplyT(func(v *ReportRecurrencePeriod) ReportRecurrencePeriod {
		if v != nil {
			return *v
		}
		var ret ReportRecurrencePeriod
		return ret
	}).(ReportRecurrencePeriodOutput)
}

// The start date of recurrence.
func (o ReportRecurrencePeriodPtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportRecurrencePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date of recurrence.
func (o ReportRecurrencePeriodPtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportRecurrencePeriod) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

// The start and end date for recurrence schedule.
type ReportRecurrencePeriodResponse struct {
	// The start date of recurrence.
	From string `pulumi:"from"`
	// The end date of recurrence.
	To *string `pulumi:"to"`
}

// The start and end date for recurrence schedule.
type ReportRecurrencePeriodResponseOutput struct{ *pulumi.OutputState }

func (ReportRecurrencePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportRecurrencePeriodResponse)(nil)).Elem()
}

func (o ReportRecurrencePeriodResponseOutput) ToReportRecurrencePeriodResponseOutput() ReportRecurrencePeriodResponseOutput {
	return o
}

func (o ReportRecurrencePeriodResponseOutput) ToReportRecurrencePeriodResponseOutputWithContext(ctx context.Context) ReportRecurrencePeriodResponseOutput {
	return o
}

// The start date of recurrence.
func (o ReportRecurrencePeriodResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ReportRecurrencePeriodResponse) string { return v.From }).(pulumi.StringOutput)
}

// The end date of recurrence.
func (o ReportRecurrencePeriodResponseOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportRecurrencePeriodResponse) *string { return v.To }).(pulumi.StringPtrOutput)
}

type ReportRecurrencePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportRecurrencePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportRecurrencePeriodResponse)(nil)).Elem()
}

func (o ReportRecurrencePeriodResponsePtrOutput) ToReportRecurrencePeriodResponsePtrOutput() ReportRecurrencePeriodResponsePtrOutput {
	return o
}

func (o ReportRecurrencePeriodResponsePtrOutput) ToReportRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ReportRecurrencePeriodResponsePtrOutput {
	return o
}

func (o ReportRecurrencePeriodResponsePtrOutput) Elem() ReportRecurrencePeriodResponseOutput {
	return o.ApplyT(func(v *ReportRecurrencePeriodResponse) ReportRecurrencePeriodResponse {
		if v != nil {
			return *v
		}
		var ret ReportRecurrencePeriodResponse
		return ret
	}).(ReportRecurrencePeriodResponseOutput)
}

// The start date of recurrence.
func (o ReportRecurrencePeriodResponsePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportRecurrencePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date of recurrence.
func (o ReportRecurrencePeriodResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportRecurrencePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

// The schedule associated with a report.
type ReportSchedule struct {
	// The schedule recurrence.
	Recurrence string `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod *ReportRecurrencePeriod `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
	Status *string `pulumi:"status"`
}

// ReportScheduleInput is an input type that accepts ReportScheduleArgs and ReportScheduleOutput values.
// You can construct a concrete instance of `ReportScheduleInput` via:
//
//	ReportScheduleArgs{...}
type ReportScheduleInput interface {
	pulumi.Input

	ToReportScheduleOutput() ReportScheduleOutput
	ToReportScheduleOutputWithContext(context.Context) ReportScheduleOutput
}

// The schedule associated with a report.
type ReportScheduleArgs struct {
	// The schedule recurrence.
	Recurrence pulumi.StringInput `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod ReportRecurrencePeriodPtrInput `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ReportScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSchedule)(nil)).Elem()
}

func (i ReportScheduleArgs) ToReportScheduleOutput() ReportScheduleOutput {
	return i.ToReportScheduleOutputWithContext(context.Background())
}

func (i ReportScheduleArgs) ToReportScheduleOutputWithContext(ctx context.Context) ReportScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportScheduleOutput)
}

func (i ReportScheduleArgs) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return i.ToReportSchedulePtrOutputWithContext(context.Background())
}

func (i ReportScheduleArgs) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportScheduleOutput).ToReportSchedulePtrOutputWithContext(ctx)
}

// ReportSchedulePtrInput is an input type that accepts ReportScheduleArgs, ReportSchedulePtr and ReportSchedulePtrOutput values.
// You can construct a concrete instance of `ReportSchedulePtrInput` via:
//
//	        ReportScheduleArgs{...}
//
//	or:
//
//	        nil
type ReportSchedulePtrInput interface {
	pulumi.Input

	ToReportSchedulePtrOutput() ReportSchedulePtrOutput
	ToReportSchedulePtrOutputWithContext(context.Context) ReportSchedulePtrOutput
}

type reportSchedulePtrType ReportScheduleArgs

func ReportSchedulePtr(v *ReportScheduleArgs) ReportSchedulePtrInput {
	return (*reportSchedulePtrType)(v)
}

func (*reportSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportSchedule)(nil)).Elem()
}

func (i *reportSchedulePtrType) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return i.ToReportSchedulePtrOutputWithContext(context.Background())
}

func (i *reportSchedulePtrType) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportSchedulePtrOutput)
}

// The schedule associated with a report.
type ReportScheduleOutput struct{ *pulumi.OutputState }

func (ReportScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSchedule)(nil)).Elem()
}

func (o ReportScheduleOutput) ToReportScheduleOutput() ReportScheduleOutput {
	return o
}

func (o ReportScheduleOutput) ToReportScheduleOutputWithContext(ctx context.Context) ReportScheduleOutput {
	return o
}

func (o ReportScheduleOutput) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return o.ToReportSchedulePtrOutputWithContext(context.Background())
}

func (o ReportScheduleOutput) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportSchedule) *ReportSchedule {
		return &v
	}).(ReportSchedulePtrOutput)
}

// The schedule recurrence.
func (o ReportScheduleOutput) Recurrence() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSchedule) string { return v.Recurrence }).(pulumi.StringOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ReportScheduleOutput) RecurrencePeriod() ReportRecurrencePeriodPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *ReportRecurrencePeriod { return v.RecurrencePeriod }).(ReportRecurrencePeriodPtrOutput)
}

// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
func (o ReportScheduleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ReportSchedulePtrOutput struct{ *pulumi.OutputState }

func (ReportSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportSchedule)(nil)).Elem()
}

func (o ReportSchedulePtrOutput) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return o
}

func (o ReportSchedulePtrOutput) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return o
}

func (o ReportSchedulePtrOutput) Elem() ReportScheduleOutput {
	return o.ApplyT(func(v *ReportSchedule) ReportSchedule {
		if v != nil {
			return *v
		}
		var ret ReportSchedule
		return ret
	}).(ReportScheduleOutput)
}

// The schedule recurrence.
func (o ReportSchedulePtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ReportSchedulePtrOutput) RecurrencePeriod() ReportRecurrencePeriodPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *ReportRecurrencePeriod {
		if v == nil {
			return nil
		}
		return v.RecurrencePeriod
	}).(ReportRecurrencePeriodPtrOutput)
}

// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
func (o ReportSchedulePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The schedule associated with a report.
type ReportScheduleResponse struct {
	// The schedule recurrence.
	Recurrence string `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod *ReportRecurrencePeriodResponse `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
	Status *string `pulumi:"status"`
}

// The schedule associated with a report.
type ReportScheduleResponseOutput struct{ *pulumi.OutputState }

func (ReportScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportScheduleResponse)(nil)).Elem()
}

func (o ReportScheduleResponseOutput) ToReportScheduleResponseOutput() ReportScheduleResponseOutput {
	return o
}

func (o ReportScheduleResponseOutput) ToReportScheduleResponseOutputWithContext(ctx context.Context) ReportScheduleResponseOutput {
	return o
}

// The schedule recurrence.
func (o ReportScheduleResponseOutput) Recurrence() pulumi.StringOutput {
	return o.ApplyT(func(v ReportScheduleResponse) string { return v.Recurrence }).(pulumi.StringOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ReportScheduleResponseOutput) RecurrencePeriod() ReportRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v ReportScheduleResponse) *ReportRecurrencePeriodResponse { return v.RecurrencePeriod }).(ReportRecurrencePeriodResponsePtrOutput)
}

// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
func (o ReportScheduleResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportScheduleResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ReportScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportScheduleResponse)(nil)).Elem()
}

func (o ReportScheduleResponsePtrOutput) ToReportScheduleResponsePtrOutput() ReportScheduleResponsePtrOutput {
	return o
}

func (o ReportScheduleResponsePtrOutput) ToReportScheduleResponsePtrOutputWithContext(ctx context.Context) ReportScheduleResponsePtrOutput {
	return o
}

func (o ReportScheduleResponsePtrOutput) Elem() ReportScheduleResponseOutput {
	return o.ApplyT(func(v *ReportScheduleResponse) ReportScheduleResponse {
		if v != nil {
			return *v
		}
		var ret ReportScheduleResponse
		return ret
	}).(ReportScheduleResponseOutput)
}

// The schedule recurrence.
func (o ReportScheduleResponsePtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ReportScheduleResponsePtrOutput) RecurrencePeriod() ReportRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v *ReportScheduleResponse) *ReportRecurrencePeriodResponse {
		if v == nil {
			return nil
		}
		return v.RecurrencePeriod
	}).(ReportRecurrencePeriodResponsePtrOutput)
}

// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
func (o ReportScheduleResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The start and end date for pulling data for the report.
type ReportTimePeriod struct {
	// The start date to pull data from.
	From string `pulumi:"from"`
	// The end date to pull data to.
	To string `pulumi:"to"`
}

// ReportTimePeriodInput is an input type that accepts ReportTimePeriodArgs and ReportTimePeriodOutput values.
// You can construct a concrete instance of `ReportTimePeriodInput` via:
//
//	ReportTimePeriodArgs{...}
type ReportTimePeriodInput interface {
	pulumi.Input

	ToReportTimePeriodOutput() ReportTimePeriodOutput
	ToReportTimePeriodOutputWithContext(context.Context) ReportTimePeriodOutput
}

// The start and end date for pulling data for the report.
type ReportTimePeriodArgs struct {
	// The start date to pull data from.
	From pulumi.StringInput `pulumi:"from"`
	// The end date to pull data to.
	To pulumi.StringInput `pulumi:"to"`
}

func (ReportTimePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportTimePeriod)(nil)).Elem()
}

func (i ReportTimePeriodArgs) ToReportTimePeriodOutput() ReportTimePeriodOutput {
	return i.ToReportTimePeriodOutputWithContext(context.Background())
}

func (i ReportTimePeriodArgs) ToReportTimePeriodOutputWithContext(ctx context.Context) ReportTimePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportTimePeriodOutput)
}

func (i ReportTimePeriodArgs) ToReportTimePeriodPtrOutput() ReportTimePeriodPtrOutput {
	return i.ToReportTimePeriodPtrOutputWithContext(context.Background())
}

func (i ReportTimePeriodArgs) ToReportTimePeriodPtrOutputWithContext(ctx context.Context) ReportTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportTimePeriodOutput).ToReportTimePeriodPtrOutputWithContext(ctx)
}

// ReportTimePeriodPtrInput is an input type that accepts ReportTimePeriodArgs, ReportTimePeriodPtr and ReportTimePeriodPtrOutput values.
// You can construct a concrete instance of `ReportTimePeriodPtrInput` via:
//
//	        ReportTimePeriodArgs{...}
//
//	or:
//
//	        nil
type ReportTimePeriodPtrInput interface {
	pulumi.Input

	ToReportTimePeriodPtrOutput() ReportTimePeriodPtrOutput
	ToReportTimePeriodPtrOutputWithContext(context.Context) ReportTimePeriodPtrOutput
}

type reportTimePeriodPtrType ReportTimePeriodArgs

func ReportTimePeriodPtr(v *ReportTimePeriodArgs) ReportTimePeriodPtrInput {
	return (*reportTimePeriodPtrType)(v)
}

func (*reportTimePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportTimePeriod)(nil)).Elem()
}

func (i *reportTimePeriodPtrType) ToReportTimePeriodPtrOutput() ReportTimePeriodPtrOutput {
	return i.ToReportTimePeriodPtrOutputWithContext(context.Background())
}

func (i *reportTimePeriodPtrType) ToReportTimePeriodPtrOutputWithContext(ctx context.Context) ReportTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportTimePeriodPtrOutput)
}

// The start and end date for pulling data for the report.
type ReportTimePeriodOutput struct{ *pulumi.OutputState }

func (ReportTimePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportTimePeriod)(nil)).Elem()
}

func (o ReportTimePeriodOutput) ToReportTimePeriodOutput() ReportTimePeriodOutput {
	return o
}

func (o ReportTimePeriodOutput) ToReportTimePeriodOutputWithContext(ctx context.Context) ReportTimePeriodOutput {
	return o
}

func (o ReportTimePeriodOutput) ToReportTimePeriodPtrOutput() ReportTimePeriodPtrOutput {
	return o.ToReportTimePeriodPtrOutputWithContext(context.Background())
}

func (o ReportTimePeriodOutput) ToReportTimePeriodPtrOutputWithContext(ctx context.Context) ReportTimePeriodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportTimePeriod) *ReportTimePeriod {
		return &v
	}).(ReportTimePeriodPtrOutput)
}

// The start date to pull data from.
func (o ReportTimePeriodOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ReportTimePeriod) string { return v.From }).(pulumi.StringOutput)
}

// The end date to pull data to.
func (o ReportTimePeriodOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ReportTimePeriod) string { return v.To }).(pulumi.StringOutput)
}

type ReportTimePeriodPtrOutput struct{ *pulumi.OutputState }

func (ReportTimePeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportTimePeriod)(nil)).Elem()
}

func (o ReportTimePeriodPtrOutput) ToReportTimePeriodPtrOutput() ReportTimePeriodPtrOutput {
	return o
}

func (o ReportTimePeriodPtrOutput) ToReportTimePeriodPtrOutputWithContext(ctx context.Context) ReportTimePeriodPtrOutput {
	return o
}

func (o ReportTimePeriodPtrOutput) Elem() ReportTimePeriodOutput {
	return o.ApplyT(func(v *ReportTimePeriod) ReportTimePeriod {
		if v != nil {
			return *v
		}
		var ret ReportTimePeriod
		return ret
	}).(ReportTimePeriodOutput)
}

// The start date to pull data from.
func (o ReportTimePeriodPtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportTimePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date to pull data to.
func (o ReportTimePeriodPtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportTimePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.To
	}).(pulumi.StringPtrOutput)
}

// The start and end date for pulling data for the report.
type ReportTimePeriodResponse struct {
	// The start date to pull data from.
	From string `pulumi:"from"`
	// The end date to pull data to.
	To string `pulumi:"to"`
}

// The start and end date for pulling data for the report.
type ReportTimePeriodResponseOutput struct{ *pulumi.OutputState }

func (ReportTimePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportTimePeriodResponse)(nil)).Elem()
}

func (o ReportTimePeriodResponseOutput) ToReportTimePeriodResponseOutput() ReportTimePeriodResponseOutput {
	return o
}

func (o ReportTimePeriodResponseOutput) ToReportTimePeriodResponseOutputWithContext(ctx context.Context) ReportTimePeriodResponseOutput {
	return o
}

// The start date to pull data from.
func (o ReportTimePeriodResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ReportTimePeriodResponse) string { return v.From }).(pulumi.StringOutput)
}

// The end date to pull data to.
func (o ReportTimePeriodResponseOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ReportTimePeriodResponse) string { return v.To }).(pulumi.StringOutput)
}

type ReportTimePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportTimePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportTimePeriodResponse)(nil)).Elem()
}

func (o ReportTimePeriodResponsePtrOutput) ToReportTimePeriodResponsePtrOutput() ReportTimePeriodResponsePtrOutput {
	return o
}

func (o ReportTimePeriodResponsePtrOutput) ToReportTimePeriodResponsePtrOutputWithContext(ctx context.Context) ReportTimePeriodResponsePtrOutput {
	return o
}

func (o ReportTimePeriodResponsePtrOutput) Elem() ReportTimePeriodResponseOutput {
	return o.ApplyT(func(v *ReportTimePeriodResponse) ReportTimePeriodResponse {
		if v != nil {
			return *v
		}
		var ret ReportTimePeriodResponse
		return ret
	}).(ReportTimePeriodResponseOutput)
}

// The start date to pull data from.
func (o ReportTimePeriodResponsePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date to pull data to.
func (o ReportTimePeriodResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.To
	}).(pulumi.StringPtrOutput)
}

// The properties of the schedule.
type ScheduleProperties struct {
	// UTC day on which cost analysis data will be emailed. Must be between 1 and 31. This property is applicable when frequency is Monthly and overrides weeksOfMonth or daysOfWeek.
	DayOfMonth *int `pulumi:"dayOfMonth"`
	// Day names in english on which cost analysis data will be emailed. This property is applicable when frequency is Weekly or Monthly.
	DaysOfWeek []string `pulumi:"daysOfWeek"`
	// The end date and time of the scheduled action (UTC).
	EndDate string `pulumi:"endDate"`
	// Frequency of the schedule.
	Frequency string `pulumi:"frequency"`
	// UTC time at which cost analysis data will be emailed.
	HourOfDay *int `pulumi:"hourOfDay"`
	// The start date and time of the scheduled action (UTC).
	StartDate string `pulumi:"startDate"`
	// Weeks in which cost analysis data will be emailed. This property is applicable when frequency is Monthly and used in combination with daysOfWeek.
	WeeksOfMonth []string `pulumi:"weeksOfMonth"`
}

// SchedulePropertiesInput is an input type that accepts SchedulePropertiesArgs and SchedulePropertiesOutput values.
// You can construct a concrete instance of `SchedulePropertiesInput` via:
//
//	SchedulePropertiesArgs{...}
type SchedulePropertiesInput interface {
	pulumi.Input

	ToSchedulePropertiesOutput() SchedulePropertiesOutput
	ToSchedulePropertiesOutputWithContext(context.Context) SchedulePropertiesOutput
}

// The properties of the schedule.
type SchedulePropertiesArgs struct {
	// UTC day on which cost analysis data will be emailed. Must be between 1 and 31. This property is applicable when frequency is Monthly and overrides weeksOfMonth or daysOfWeek.
	DayOfMonth pulumi.IntPtrInput `pulumi:"dayOfMonth"`
	// Day names in english on which cost analysis data will be emailed. This property is applicable when frequency is Weekly or Monthly.
	DaysOfWeek pulumi.StringArrayInput `pulumi:"daysOfWeek"`
	// The end date and time of the scheduled action (UTC).
	EndDate pulumi.StringInput `pulumi:"endDate"`
	// Frequency of the schedule.
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// UTC time at which cost analysis data will be emailed.
	HourOfDay pulumi.IntPtrInput `pulumi:"hourOfDay"`
	// The start date and time of the scheduled action (UTC).
	StartDate pulumi.StringInput `pulumi:"startDate"`
	// Weeks in which cost analysis data will be emailed. This property is applicable when frequency is Monthly and used in combination with daysOfWeek.
	WeeksOfMonth pulumi.StringArrayInput `pulumi:"weeksOfMonth"`
}

func (SchedulePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleProperties)(nil)).Elem()
}

func (i SchedulePropertiesArgs) ToSchedulePropertiesOutput() SchedulePropertiesOutput {
	return i.ToSchedulePropertiesOutputWithContext(context.Background())
}

func (i SchedulePropertiesArgs) ToSchedulePropertiesOutputWithContext(ctx context.Context) SchedulePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulePropertiesOutput)
}

// The properties of the schedule.
type SchedulePropertiesOutput struct{ *pulumi.OutputState }

func (SchedulePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleProperties)(nil)).Elem()
}

func (o SchedulePropertiesOutput) ToSchedulePropertiesOutput() SchedulePropertiesOutput {
	return o
}

func (o SchedulePropertiesOutput) ToSchedulePropertiesOutputWithContext(ctx context.Context) SchedulePropertiesOutput {
	return o
}

// UTC day on which cost analysis data will be emailed. Must be between 1 and 31. This property is applicable when frequency is Monthly and overrides weeksOfMonth or daysOfWeek.
func (o SchedulePropertiesOutput) DayOfMonth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScheduleProperties) *int { return v.DayOfMonth }).(pulumi.IntPtrOutput)
}

// Day names in english on which cost analysis data will be emailed. This property is applicable when frequency is Weekly or Monthly.
func (o SchedulePropertiesOutput) DaysOfWeek() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleProperties) []string { return v.DaysOfWeek }).(pulumi.StringArrayOutput)
}

// The end date and time of the scheduled action (UTC).
func (o SchedulePropertiesOutput) EndDate() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleProperties) string { return v.EndDate }).(pulumi.StringOutput)
}

// Frequency of the schedule.
func (o SchedulePropertiesOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleProperties) string { return v.Frequency }).(pulumi.StringOutput)
}

// UTC time at which cost analysis data will be emailed.
func (o SchedulePropertiesOutput) HourOfDay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScheduleProperties) *int { return v.HourOfDay }).(pulumi.IntPtrOutput)
}

// The start date and time of the scheduled action (UTC).
func (o SchedulePropertiesOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleProperties) string { return v.StartDate }).(pulumi.StringOutput)
}

// Weeks in which cost analysis data will be emailed. This property is applicable when frequency is Monthly and used in combination with daysOfWeek.
func (o SchedulePropertiesOutput) WeeksOfMonth() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleProperties) []string { return v.WeeksOfMonth }).(pulumi.StringArrayOutput)
}

// The properties of the schedule.
type SchedulePropertiesResponse struct {
	// UTC day on which cost analysis data will be emailed. Must be between 1 and 31. This property is applicable when frequency is Monthly and overrides weeksOfMonth or daysOfWeek.
	DayOfMonth *int `pulumi:"dayOfMonth"`
	// Day names in english on which cost analysis data will be emailed. This property is applicable when frequency is Weekly or Monthly.
	DaysOfWeek []string `pulumi:"daysOfWeek"`
	// The end date and time of the scheduled action (UTC).
	EndDate string `pulumi:"endDate"`
	// Frequency of the schedule.
	Frequency string `pulumi:"frequency"`
	// UTC time at which cost analysis data will be emailed.
	HourOfDay *int `pulumi:"hourOfDay"`
	// The start date and time of the scheduled action (UTC).
	StartDate string `pulumi:"startDate"`
	// Weeks in which cost analysis data will be emailed. This property is applicable when frequency is Monthly and used in combination with daysOfWeek.
	WeeksOfMonth []string `pulumi:"weeksOfMonth"`
}

// The properties of the schedule.
type SchedulePropertiesResponseOutput struct{ *pulumi.OutputState }

func (SchedulePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulePropertiesResponse)(nil)).Elem()
}

func (o SchedulePropertiesResponseOutput) ToSchedulePropertiesResponseOutput() SchedulePropertiesResponseOutput {
	return o
}

func (o SchedulePropertiesResponseOutput) ToSchedulePropertiesResponseOutputWithContext(ctx context.Context) SchedulePropertiesResponseOutput {
	return o
}

// UTC day on which cost analysis data will be emailed. Must be between 1 and 31. This property is applicable when frequency is Monthly and overrides weeksOfMonth or daysOfWeek.
func (o SchedulePropertiesResponseOutput) DayOfMonth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SchedulePropertiesResponse) *int { return v.DayOfMonth }).(pulumi.IntPtrOutput)
}

// Day names in english on which cost analysis data will be emailed. This property is applicable when frequency is Weekly or Monthly.
func (o SchedulePropertiesResponseOutput) DaysOfWeek() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SchedulePropertiesResponse) []string { return v.DaysOfWeek }).(pulumi.StringArrayOutput)
}

// The end date and time of the scheduled action (UTC).
func (o SchedulePropertiesResponseOutput) EndDate() pulumi.StringOutput {
	return o.ApplyT(func(v SchedulePropertiesResponse) string { return v.EndDate }).(pulumi.StringOutput)
}

// Frequency of the schedule.
func (o SchedulePropertiesResponseOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v SchedulePropertiesResponse) string { return v.Frequency }).(pulumi.StringOutput)
}

// UTC time at which cost analysis data will be emailed.
func (o SchedulePropertiesResponseOutput) HourOfDay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SchedulePropertiesResponse) *int { return v.HourOfDay }).(pulumi.IntPtrOutput)
}

// The start date and time of the scheduled action (UTC).
func (o SchedulePropertiesResponseOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v SchedulePropertiesResponse) string { return v.StartDate }).(pulumi.StringOutput)
}

// Weeks in which cost analysis data will be emailed. This property is applicable when frequency is Monthly and used in combination with daysOfWeek.
func (o SchedulePropertiesResponseOutput) WeeksOfMonth() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SchedulePropertiesResponse) []string { return v.WeeksOfMonth }).(pulumi.StringArrayOutput)
}

type SettingsPropertiesCache struct {
	// Indicates the account type. Allowed values include: EA, PAYG, Modern, Internal, Unknown.
	Channel string `pulumi:"channel"`
	// Resource ID used by Resource Manager to uniquely identify the scope.
	Id string `pulumi:"id"`
	// Display name for the scope.
	Name string `pulumi:"name"`
	// Resource ID of the parent scope. For instance, subscription's resource ID for a resource group or a management group resource ID for a subscription.
	Parent *string `pulumi:"parent"`
	// Indicates the status of the scope. Status only applies to subscriptions and billing accounts.
	Status *string `pulumi:"status"`
	// Indicates the type of modern account. Allowed values include: Individual, Enterprise, Partner, Indirect, NotApplicable
	Subchannel string `pulumi:"subchannel"`
}

// SettingsPropertiesCacheInput is an input type that accepts SettingsPropertiesCacheArgs and SettingsPropertiesCacheOutput values.
// You can construct a concrete instance of `SettingsPropertiesCacheInput` via:
//
//	SettingsPropertiesCacheArgs{...}
type SettingsPropertiesCacheInput interface {
	pulumi.Input

	ToSettingsPropertiesCacheOutput() SettingsPropertiesCacheOutput
	ToSettingsPropertiesCacheOutputWithContext(context.Context) SettingsPropertiesCacheOutput
}

type SettingsPropertiesCacheArgs struct {
	// Indicates the account type. Allowed values include: EA, PAYG, Modern, Internal, Unknown.
	Channel pulumi.StringInput `pulumi:"channel"`
	// Resource ID used by Resource Manager to uniquely identify the scope.
	Id pulumi.StringInput `pulumi:"id"`
	// Display name for the scope.
	Name pulumi.StringInput `pulumi:"name"`
	// Resource ID of the parent scope. For instance, subscription's resource ID for a resource group or a management group resource ID for a subscription.
	Parent pulumi.StringPtrInput `pulumi:"parent"`
	// Indicates the status of the scope. Status only applies to subscriptions and billing accounts.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Indicates the type of modern account. Allowed values include: Individual, Enterprise, Partner, Indirect, NotApplicable
	Subchannel pulumi.StringInput `pulumi:"subchannel"`
}

func (SettingsPropertiesCacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingsPropertiesCache)(nil)).Elem()
}

func (i SettingsPropertiesCacheArgs) ToSettingsPropertiesCacheOutput() SettingsPropertiesCacheOutput {
	return i.ToSettingsPropertiesCacheOutputWithContext(context.Background())
}

func (i SettingsPropertiesCacheArgs) ToSettingsPropertiesCacheOutputWithContext(ctx context.Context) SettingsPropertiesCacheOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsPropertiesCacheOutput)
}

// SettingsPropertiesCacheArrayInput is an input type that accepts SettingsPropertiesCacheArray and SettingsPropertiesCacheArrayOutput values.
// You can construct a concrete instance of `SettingsPropertiesCacheArrayInput` via:
//
//	SettingsPropertiesCacheArray{ SettingsPropertiesCacheArgs{...} }
type SettingsPropertiesCacheArrayInput interface {
	pulumi.Input

	ToSettingsPropertiesCacheArrayOutput() SettingsPropertiesCacheArrayOutput
	ToSettingsPropertiesCacheArrayOutputWithContext(context.Context) SettingsPropertiesCacheArrayOutput
}

type SettingsPropertiesCacheArray []SettingsPropertiesCacheInput

func (SettingsPropertiesCacheArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingsPropertiesCache)(nil)).Elem()
}

func (i SettingsPropertiesCacheArray) ToSettingsPropertiesCacheArrayOutput() SettingsPropertiesCacheArrayOutput {
	return i.ToSettingsPropertiesCacheArrayOutputWithContext(context.Background())
}

func (i SettingsPropertiesCacheArray) ToSettingsPropertiesCacheArrayOutputWithContext(ctx context.Context) SettingsPropertiesCacheArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsPropertiesCacheArrayOutput)
}

type SettingsPropertiesCacheOutput struct{ *pulumi.OutputState }

func (SettingsPropertiesCacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingsPropertiesCache)(nil)).Elem()
}

func (o SettingsPropertiesCacheOutput) ToSettingsPropertiesCacheOutput() SettingsPropertiesCacheOutput {
	return o
}

func (o SettingsPropertiesCacheOutput) ToSettingsPropertiesCacheOutputWithContext(ctx context.Context) SettingsPropertiesCacheOutput {
	return o
}

// Indicates the account type. Allowed values include: EA, PAYG, Modern, Internal, Unknown.
func (o SettingsPropertiesCacheOutput) Channel() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsPropertiesCache) string { return v.Channel }).(pulumi.StringOutput)
}

// Resource ID used by Resource Manager to uniquely identify the scope.
func (o SettingsPropertiesCacheOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsPropertiesCache) string { return v.Id }).(pulumi.StringOutput)
}

// Display name for the scope.
func (o SettingsPropertiesCacheOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsPropertiesCache) string { return v.Name }).(pulumi.StringOutput)
}

// Resource ID of the parent scope. For instance, subscription's resource ID for a resource group or a management group resource ID for a subscription.
func (o SettingsPropertiesCacheOutput) Parent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingsPropertiesCache) *string { return v.Parent }).(pulumi.StringPtrOutput)
}

// Indicates the status of the scope. Status only applies to subscriptions and billing accounts.
func (o SettingsPropertiesCacheOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingsPropertiesCache) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates the type of modern account. Allowed values include: Individual, Enterprise, Partner, Indirect, NotApplicable
func (o SettingsPropertiesCacheOutput) Subchannel() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsPropertiesCache) string { return v.Subchannel }).(pulumi.StringOutput)
}

type SettingsPropertiesCacheArrayOutput struct{ *pulumi.OutputState }

func (SettingsPropertiesCacheArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingsPropertiesCache)(nil)).Elem()
}

func (o SettingsPropertiesCacheArrayOutput) ToSettingsPropertiesCacheArrayOutput() SettingsPropertiesCacheArrayOutput {
	return o
}

func (o SettingsPropertiesCacheArrayOutput) ToSettingsPropertiesCacheArrayOutputWithContext(ctx context.Context) SettingsPropertiesCacheArrayOutput {
	return o
}

func (o SettingsPropertiesCacheArrayOutput) Index(i pulumi.IntInput) SettingsPropertiesCacheOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingsPropertiesCache {
		return vs[0].([]SettingsPropertiesCache)[vs[1].(int)]
	}).(SettingsPropertiesCacheOutput)
}

type SettingsPropertiesResponseCache struct {
	// Indicates the account type. Allowed values include: EA, PAYG, Modern, Internal, Unknown.
	Channel string `pulumi:"channel"`
	// Resource ID used by Resource Manager to uniquely identify the scope.
	Id string `pulumi:"id"`
	// Display name for the scope.
	Name string `pulumi:"name"`
	// Resource ID of the parent scope. For instance, subscription's resource ID for a resource group or a management group resource ID for a subscription.
	Parent *string `pulumi:"parent"`
	// Indicates the status of the scope. Status only applies to subscriptions and billing accounts.
	Status *string `pulumi:"status"`
	// Indicates the type of modern account. Allowed values include: Individual, Enterprise, Partner, Indirect, NotApplicable
	Subchannel string `pulumi:"subchannel"`
}

type SettingsPropertiesResponseCacheOutput struct{ *pulumi.OutputState }

func (SettingsPropertiesResponseCacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingsPropertiesResponseCache)(nil)).Elem()
}

func (o SettingsPropertiesResponseCacheOutput) ToSettingsPropertiesResponseCacheOutput() SettingsPropertiesResponseCacheOutput {
	return o
}

func (o SettingsPropertiesResponseCacheOutput) ToSettingsPropertiesResponseCacheOutputWithContext(ctx context.Context) SettingsPropertiesResponseCacheOutput {
	return o
}

// Indicates the account type. Allowed values include: EA, PAYG, Modern, Internal, Unknown.
func (o SettingsPropertiesResponseCacheOutput) Channel() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsPropertiesResponseCache) string { return v.Channel }).(pulumi.StringOutput)
}

// Resource ID used by Resource Manager to uniquely identify the scope.
func (o SettingsPropertiesResponseCacheOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsPropertiesResponseCache) string { return v.Id }).(pulumi.StringOutput)
}

// Display name for the scope.
func (o SettingsPropertiesResponseCacheOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsPropertiesResponseCache) string { return v.Name }).(pulumi.StringOutput)
}

// Resource ID of the parent scope. For instance, subscription's resource ID for a resource group or a management group resource ID for a subscription.
func (o SettingsPropertiesResponseCacheOutput) Parent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingsPropertiesResponseCache) *string { return v.Parent }).(pulumi.StringPtrOutput)
}

// Indicates the status of the scope. Status only applies to subscriptions and billing accounts.
func (o SettingsPropertiesResponseCacheOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingsPropertiesResponseCache) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates the type of modern account. Allowed values include: Individual, Enterprise, Partner, Indirect, NotApplicable
func (o SettingsPropertiesResponseCacheOutput) Subchannel() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsPropertiesResponseCache) string { return v.Subchannel }).(pulumi.StringOutput)
}

type SettingsPropertiesResponseCacheArrayOutput struct{ *pulumi.OutputState }

func (SettingsPropertiesResponseCacheArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingsPropertiesResponseCache)(nil)).Elem()
}

func (o SettingsPropertiesResponseCacheArrayOutput) ToSettingsPropertiesResponseCacheArrayOutput() SettingsPropertiesResponseCacheArrayOutput {
	return o
}

func (o SettingsPropertiesResponseCacheArrayOutput) ToSettingsPropertiesResponseCacheArrayOutputWithContext(ctx context.Context) SettingsPropertiesResponseCacheArrayOutput {
	return o
}

func (o SettingsPropertiesResponseCacheArrayOutput) Index(i pulumi.IntInput) SettingsPropertiesResponseCacheOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingsPropertiesResponseCache {
		return vs[0].([]SettingsPropertiesResponseCache)[vs[1].(int)]
	}).(SettingsPropertiesResponseCacheOutput)
}

// Source resources for cost allocation
type SourceCostAllocationResource struct {
	// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
	Name string `pulumi:"name"`
	// Type of resources contained in this cost allocation rule
	ResourceType string `pulumi:"resourceType"`
	// Source Resources for cost allocation. This list cannot contain more than 25 values.
	Values []string `pulumi:"values"`
}

// SourceCostAllocationResourceInput is an input type that accepts SourceCostAllocationResourceArgs and SourceCostAllocationResourceOutput values.
// You can construct a concrete instance of `SourceCostAllocationResourceInput` via:
//
//	SourceCostAllocationResourceArgs{...}
type SourceCostAllocationResourceInput interface {
	pulumi.Input

	ToSourceCostAllocationResourceOutput() SourceCostAllocationResourceOutput
	ToSourceCostAllocationResourceOutputWithContext(context.Context) SourceCostAllocationResourceOutput
}

// Source resources for cost allocation
type SourceCostAllocationResourceArgs struct {
	// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
	Name pulumi.StringInput `pulumi:"name"`
	// Type of resources contained in this cost allocation rule
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
	// Source Resources for cost allocation. This list cannot contain more than 25 values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (SourceCostAllocationResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceCostAllocationResource)(nil)).Elem()
}

func (i SourceCostAllocationResourceArgs) ToSourceCostAllocationResourceOutput() SourceCostAllocationResourceOutput {
	return i.ToSourceCostAllocationResourceOutputWithContext(context.Background())
}

func (i SourceCostAllocationResourceArgs) ToSourceCostAllocationResourceOutputWithContext(ctx context.Context) SourceCostAllocationResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceCostAllocationResourceOutput)
}

// SourceCostAllocationResourceArrayInput is an input type that accepts SourceCostAllocationResourceArray and SourceCostAllocationResourceArrayOutput values.
// You can construct a concrete instance of `SourceCostAllocationResourceArrayInput` via:
//
//	SourceCostAllocationResourceArray{ SourceCostAllocationResourceArgs{...} }
type SourceCostAllocationResourceArrayInput interface {
	pulumi.Input

	ToSourceCostAllocationResourceArrayOutput() SourceCostAllocationResourceArrayOutput
	ToSourceCostAllocationResourceArrayOutputWithContext(context.Context) SourceCostAllocationResourceArrayOutput
}

type SourceCostAllocationResourceArray []SourceCostAllocationResourceInput

func (SourceCostAllocationResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceCostAllocationResource)(nil)).Elem()
}

func (i SourceCostAllocationResourceArray) ToSourceCostAllocationResourceArrayOutput() SourceCostAllocationResourceArrayOutput {
	return i.ToSourceCostAllocationResourceArrayOutputWithContext(context.Background())
}

func (i SourceCostAllocationResourceArray) ToSourceCostAllocationResourceArrayOutputWithContext(ctx context.Context) SourceCostAllocationResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceCostAllocationResourceArrayOutput)
}

// Source resources for cost allocation
type SourceCostAllocationResourceOutput struct{ *pulumi.OutputState }

func (SourceCostAllocationResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceCostAllocationResource)(nil)).Elem()
}

func (o SourceCostAllocationResourceOutput) ToSourceCostAllocationResourceOutput() SourceCostAllocationResourceOutput {
	return o
}

func (o SourceCostAllocationResourceOutput) ToSourceCostAllocationResourceOutputWithContext(ctx context.Context) SourceCostAllocationResourceOutput {
	return o
}

// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
func (o SourceCostAllocationResourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SourceCostAllocationResource) string { return v.Name }).(pulumi.StringOutput)
}

// Type of resources contained in this cost allocation rule
func (o SourceCostAllocationResourceOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v SourceCostAllocationResource) string { return v.ResourceType }).(pulumi.StringOutput)
}

// Source Resources for cost allocation. This list cannot contain more than 25 values.
func (o SourceCostAllocationResourceOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SourceCostAllocationResource) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type SourceCostAllocationResourceArrayOutput struct{ *pulumi.OutputState }

func (SourceCostAllocationResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceCostAllocationResource)(nil)).Elem()
}

func (o SourceCostAllocationResourceArrayOutput) ToSourceCostAllocationResourceArrayOutput() SourceCostAllocationResourceArrayOutput {
	return o
}

func (o SourceCostAllocationResourceArrayOutput) ToSourceCostAllocationResourceArrayOutputWithContext(ctx context.Context) SourceCostAllocationResourceArrayOutput {
	return o
}

func (o SourceCostAllocationResourceArrayOutput) Index(i pulumi.IntInput) SourceCostAllocationResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceCostAllocationResource {
		return vs[0].([]SourceCostAllocationResource)[vs[1].(int)]
	}).(SourceCostAllocationResourceOutput)
}

// Source resources for cost allocation
type SourceCostAllocationResourceResponse struct {
	// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
	Name string `pulumi:"name"`
	// Type of resources contained in this cost allocation rule
	ResourceType string `pulumi:"resourceType"`
	// Source Resources for cost allocation. This list cannot contain more than 25 values.
	Values []string `pulumi:"values"`
}

// Source resources for cost allocation
type SourceCostAllocationResourceResponseOutput struct{ *pulumi.OutputState }

func (SourceCostAllocationResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceCostAllocationResourceResponse)(nil)).Elem()
}

func (o SourceCostAllocationResourceResponseOutput) ToSourceCostAllocationResourceResponseOutput() SourceCostAllocationResourceResponseOutput {
	return o
}

func (o SourceCostAllocationResourceResponseOutput) ToSourceCostAllocationResourceResponseOutputWithContext(ctx context.Context) SourceCostAllocationResourceResponseOutput {
	return o
}

// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
func (o SourceCostAllocationResourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SourceCostAllocationResourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of resources contained in this cost allocation rule
func (o SourceCostAllocationResourceResponseOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v SourceCostAllocationResourceResponse) string { return v.ResourceType }).(pulumi.StringOutput)
}

// Source Resources for cost allocation. This list cannot contain more than 25 values.
func (o SourceCostAllocationResourceResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SourceCostAllocationResourceResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type SourceCostAllocationResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (SourceCostAllocationResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceCostAllocationResourceResponse)(nil)).Elem()
}

func (o SourceCostAllocationResourceResponseArrayOutput) ToSourceCostAllocationResourceResponseArrayOutput() SourceCostAllocationResourceResponseArrayOutput {
	return o
}

func (o SourceCostAllocationResourceResponseArrayOutput) ToSourceCostAllocationResourceResponseArrayOutputWithContext(ctx context.Context) SourceCostAllocationResourceResponseArrayOutput {
	return o
}

func (o SourceCostAllocationResourceResponseArrayOutput) Index(i pulumi.IntInput) SourceCostAllocationResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceCostAllocationResourceResponse {
		return vs[0].([]SourceCostAllocationResourceResponse)[vs[1].(int)]
	}).(SourceCostAllocationResourceResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Target resources for cost allocation.
type TargetCostAllocationResource struct {
	// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
	Name string `pulumi:"name"`
	// Method of cost allocation for the rule
	PolicyType string `pulumi:"policyType"`
	// Type of resources contained in this cost allocation rule
	ResourceType string `pulumi:"resourceType"`
	// Target resources for cost allocation. This list cannot contain more than 25 values.
	Values []CostAllocationProportion `pulumi:"values"`
}

// TargetCostAllocationResourceInput is an input type that accepts TargetCostAllocationResourceArgs and TargetCostAllocationResourceOutput values.
// You can construct a concrete instance of `TargetCostAllocationResourceInput` via:
//
//	TargetCostAllocationResourceArgs{...}
type TargetCostAllocationResourceInput interface {
	pulumi.Input

	ToTargetCostAllocationResourceOutput() TargetCostAllocationResourceOutput
	ToTargetCostAllocationResourceOutputWithContext(context.Context) TargetCostAllocationResourceOutput
}

// Target resources for cost allocation.
type TargetCostAllocationResourceArgs struct {
	// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
	Name pulumi.StringInput `pulumi:"name"`
	// Method of cost allocation for the rule
	PolicyType pulumi.StringInput `pulumi:"policyType"`
	// Type of resources contained in this cost allocation rule
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
	// Target resources for cost allocation. This list cannot contain more than 25 values.
	Values CostAllocationProportionArrayInput `pulumi:"values"`
}

func (TargetCostAllocationResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetCostAllocationResource)(nil)).Elem()
}

func (i TargetCostAllocationResourceArgs) ToTargetCostAllocationResourceOutput() TargetCostAllocationResourceOutput {
	return i.ToTargetCostAllocationResourceOutputWithContext(context.Background())
}

func (i TargetCostAllocationResourceArgs) ToTargetCostAllocationResourceOutputWithContext(ctx context.Context) TargetCostAllocationResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetCostAllocationResourceOutput)
}

// TargetCostAllocationResourceArrayInput is an input type that accepts TargetCostAllocationResourceArray and TargetCostAllocationResourceArrayOutput values.
// You can construct a concrete instance of `TargetCostAllocationResourceArrayInput` via:
//
//	TargetCostAllocationResourceArray{ TargetCostAllocationResourceArgs{...} }
type TargetCostAllocationResourceArrayInput interface {
	pulumi.Input

	ToTargetCostAllocationResourceArrayOutput() TargetCostAllocationResourceArrayOutput
	ToTargetCostAllocationResourceArrayOutputWithContext(context.Context) TargetCostAllocationResourceArrayOutput
}

type TargetCostAllocationResourceArray []TargetCostAllocationResourceInput

func (TargetCostAllocationResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetCostAllocationResource)(nil)).Elem()
}

func (i TargetCostAllocationResourceArray) ToTargetCostAllocationResourceArrayOutput() TargetCostAllocationResourceArrayOutput {
	return i.ToTargetCostAllocationResourceArrayOutputWithContext(context.Background())
}

func (i TargetCostAllocationResourceArray) ToTargetCostAllocationResourceArrayOutputWithContext(ctx context.Context) TargetCostAllocationResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetCostAllocationResourceArrayOutput)
}

// Target resources for cost allocation.
type TargetCostAllocationResourceOutput struct{ *pulumi.OutputState }

func (TargetCostAllocationResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetCostAllocationResource)(nil)).Elem()
}

func (o TargetCostAllocationResourceOutput) ToTargetCostAllocationResourceOutput() TargetCostAllocationResourceOutput {
	return o
}

func (o TargetCostAllocationResourceOutput) ToTargetCostAllocationResourceOutputWithContext(ctx context.Context) TargetCostAllocationResourceOutput {
	return o
}

// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
func (o TargetCostAllocationResourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TargetCostAllocationResource) string { return v.Name }).(pulumi.StringOutput)
}

// Method of cost allocation for the rule
func (o TargetCostAllocationResourceOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v TargetCostAllocationResource) string { return v.PolicyType }).(pulumi.StringOutput)
}

// Type of resources contained in this cost allocation rule
func (o TargetCostAllocationResourceOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v TargetCostAllocationResource) string { return v.ResourceType }).(pulumi.StringOutput)
}

// Target resources for cost allocation. This list cannot contain more than 25 values.
func (o TargetCostAllocationResourceOutput) Values() CostAllocationProportionArrayOutput {
	return o.ApplyT(func(v TargetCostAllocationResource) []CostAllocationProportion { return v.Values }).(CostAllocationProportionArrayOutput)
}

type TargetCostAllocationResourceArrayOutput struct{ *pulumi.OutputState }

func (TargetCostAllocationResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetCostAllocationResource)(nil)).Elem()
}

func (o TargetCostAllocationResourceArrayOutput) ToTargetCostAllocationResourceArrayOutput() TargetCostAllocationResourceArrayOutput {
	return o
}

func (o TargetCostAllocationResourceArrayOutput) ToTargetCostAllocationResourceArrayOutputWithContext(ctx context.Context) TargetCostAllocationResourceArrayOutput {
	return o
}

func (o TargetCostAllocationResourceArrayOutput) Index(i pulumi.IntInput) TargetCostAllocationResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TargetCostAllocationResource {
		return vs[0].([]TargetCostAllocationResource)[vs[1].(int)]
	}).(TargetCostAllocationResourceOutput)
}

// Target resources for cost allocation.
type TargetCostAllocationResourceResponse struct {
	// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
	Name string `pulumi:"name"`
	// Method of cost allocation for the rule
	PolicyType string `pulumi:"policyType"`
	// Type of resources contained in this cost allocation rule
	ResourceType string `pulumi:"resourceType"`
	// Target resources for cost allocation. This list cannot contain more than 25 values.
	Values []CostAllocationProportionResponse `pulumi:"values"`
}

// Target resources for cost allocation.
type TargetCostAllocationResourceResponseOutput struct{ *pulumi.OutputState }

func (TargetCostAllocationResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetCostAllocationResourceResponse)(nil)).Elem()
}

func (o TargetCostAllocationResourceResponseOutput) ToTargetCostAllocationResourceResponseOutput() TargetCostAllocationResourceResponseOutput {
	return o
}

func (o TargetCostAllocationResourceResponseOutput) ToTargetCostAllocationResourceResponseOutputWithContext(ctx context.Context) TargetCostAllocationResourceResponseOutput {
	return o
}

// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
func (o TargetCostAllocationResourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TargetCostAllocationResourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Method of cost allocation for the rule
func (o TargetCostAllocationResourceResponseOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v TargetCostAllocationResourceResponse) string { return v.PolicyType }).(pulumi.StringOutput)
}

// Type of resources contained in this cost allocation rule
func (o TargetCostAllocationResourceResponseOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v TargetCostAllocationResourceResponse) string { return v.ResourceType }).(pulumi.StringOutput)
}

// Target resources for cost allocation. This list cannot contain more than 25 values.
func (o TargetCostAllocationResourceResponseOutput) Values() CostAllocationProportionResponseArrayOutput {
	return o.ApplyT(func(v TargetCostAllocationResourceResponse) []CostAllocationProportionResponse { return v.Values }).(CostAllocationProportionResponseArrayOutput)
}

type TargetCostAllocationResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (TargetCostAllocationResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetCostAllocationResourceResponse)(nil)).Elem()
}

func (o TargetCostAllocationResourceResponseArrayOutput) ToTargetCostAllocationResourceResponseArrayOutput() TargetCostAllocationResourceResponseArrayOutput {
	return o
}

func (o TargetCostAllocationResourceResponseArrayOutput) ToTargetCostAllocationResourceResponseArrayOutputWithContext(ctx context.Context) TargetCostAllocationResourceResponseArrayOutput {
	return o
}

func (o TargetCostAllocationResourceResponseArrayOutput) Index(i pulumi.IntInput) TargetCostAllocationResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TargetCostAllocationResourceResponse {
		return vs[0].([]TargetCostAllocationResourceResponse)[vs[1].(int)]
	}).(TargetCostAllocationResourceResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(CommonExportPropertiesResponseOutput{})
	pulumi.RegisterOutputType(CommonExportPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectorCollectionErrorInfoResponseOutput{})
	pulumi.RegisterOutputType(ConnectorCollectionErrorInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectorCollectionInfoResponseOutput{})
	pulumi.RegisterOutputType(CostAllocationProportionOutput{})
	pulumi.RegisterOutputType(CostAllocationProportionArrayOutput{})
	pulumi.RegisterOutputType(CostAllocationProportionResponseOutput{})
	pulumi.RegisterOutputType(CostAllocationProportionResponseArrayOutput{})
	pulumi.RegisterOutputType(CostAllocationRuleDetailsOutput{})
	pulumi.RegisterOutputType(CostAllocationRuleDetailsPtrOutput{})
	pulumi.RegisterOutputType(CostAllocationRuleDetailsResponseOutput{})
	pulumi.RegisterOutputType(CostAllocationRulePropertiesOutput{})
	pulumi.RegisterOutputType(CostAllocationRulePropertiesPtrOutput{})
	pulumi.RegisterOutputType(CostAllocationRulePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ErrorDetailsResponseOutput{})
	pulumi.RegisterOutputType(ErrorDetailsResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportDatasetOutput{})
	pulumi.RegisterOutputType(ExportDatasetPtrOutput{})
	pulumi.RegisterOutputType(ExportDatasetConfigurationOutput{})
	pulumi.RegisterOutputType(ExportDatasetConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ExportDatasetConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ExportDatasetConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportDatasetResponseOutput{})
	pulumi.RegisterOutputType(ExportDatasetResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportDefinitionOutput{})
	pulumi.RegisterOutputType(ExportDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ExportDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportDeliveryDestinationOutput{})
	pulumi.RegisterOutputType(ExportDeliveryDestinationResponseOutput{})
	pulumi.RegisterOutputType(ExportDeliveryDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportDeliveryInfoOutput{})
	pulumi.RegisterOutputType(ExportDeliveryInfoResponseOutput{})
	pulumi.RegisterOutputType(ExportDeliveryInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportExecutionListResultResponseOutput{})
	pulumi.RegisterOutputType(ExportExecutionListResultResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportExecutionResponseOutput{})
	pulumi.RegisterOutputType(ExportExecutionResponseArrayOutput{})
	pulumi.RegisterOutputType(ExportRecurrencePeriodOutput{})
	pulumi.RegisterOutputType(ExportRecurrencePeriodPtrOutput{})
	pulumi.RegisterOutputType(ExportRecurrencePeriodResponseOutput{})
	pulumi.RegisterOutputType(ExportRecurrencePeriodResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportScheduleOutput{})
	pulumi.RegisterOutputType(ExportSchedulePtrOutput{})
	pulumi.RegisterOutputType(ExportScheduleResponseOutput{})
	pulumi.RegisterOutputType(ExportScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportTimePeriodOutput{})
	pulumi.RegisterOutputType(ExportTimePeriodPtrOutput{})
	pulumi.RegisterOutputType(ExportTimePeriodResponseOutput{})
	pulumi.RegisterOutputType(ExportTimePeriodResponsePtrOutput{})
	pulumi.RegisterOutputType(FileDestinationOutput{})
	pulumi.RegisterOutputType(FileDestinationPtrOutput{})
	pulumi.RegisterOutputType(FileDestinationResponseOutput{})
	pulumi.RegisterOutputType(FileDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(KpiPropertiesOutput{})
	pulumi.RegisterOutputType(KpiPropertiesArrayOutput{})
	pulumi.RegisterOutputType(KpiPropertiesResponseOutput{})
	pulumi.RegisterOutputType(KpiPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(NotificationPropertiesOutput{})
	pulumi.RegisterOutputType(NotificationPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PivotPropertiesOutput{})
	pulumi.RegisterOutputType(PivotPropertiesArrayOutput{})
	pulumi.RegisterOutputType(PivotPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PivotPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportAggregationOutput{})
	pulumi.RegisterOutputType(ReportAggregationMapOutput{})
	pulumi.RegisterOutputType(ReportAggregationResponseOutput{})
	pulumi.RegisterOutputType(ReportAggregationResponseMapOutput{})
	pulumi.RegisterOutputType(ReportComparisonExpressionOutput{})
	pulumi.RegisterOutputType(ReportComparisonExpressionPtrOutput{})
	pulumi.RegisterOutputType(ReportComparisonExpressionResponseOutput{})
	pulumi.RegisterOutputType(ReportComparisonExpressionResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigAggregationOutput{})
	pulumi.RegisterOutputType(ReportConfigAggregationMapOutput{})
	pulumi.RegisterOutputType(ReportConfigAggregationResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigAggregationResponseMapOutput{})
	pulumi.RegisterOutputType(ReportConfigComparisonExpressionOutput{})
	pulumi.RegisterOutputType(ReportConfigComparisonExpressionPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigComparisonExpressionResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigComparisonExpressionResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetConfigurationOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigFilterOutput{})
	pulumi.RegisterOutputType(ReportConfigFilterPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigFilterArrayOutput{})
	pulumi.RegisterOutputType(ReportConfigFilterResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigFilterResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportConfigGroupingOutput{})
	pulumi.RegisterOutputType(ReportConfigGroupingArrayOutput{})
	pulumi.RegisterOutputType(ReportConfigGroupingResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigGroupingResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportConfigSortingOutput{})
	pulumi.RegisterOutputType(ReportConfigSortingArrayOutput{})
	pulumi.RegisterOutputType(ReportConfigSortingResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigSortingResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportConfigTimePeriodOutput{})
	pulumi.RegisterOutputType(ReportConfigTimePeriodPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigTimePeriodResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigTimePeriodResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportDatasetOutput{})
	pulumi.RegisterOutputType(ReportDatasetPtrOutput{})
	pulumi.RegisterOutputType(ReportDatasetConfigurationOutput{})
	pulumi.RegisterOutputType(ReportDatasetConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ReportDatasetConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ReportDatasetConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportDatasetResponseOutput{})
	pulumi.RegisterOutputType(ReportDatasetResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportDefinitionOutput{})
	pulumi.RegisterOutputType(ReportDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ReportDeliveryDestinationOutput{})
	pulumi.RegisterOutputType(ReportDeliveryDestinationResponseOutput{})
	pulumi.RegisterOutputType(ReportDeliveryInfoOutput{})
	pulumi.RegisterOutputType(ReportDeliveryInfoResponseOutput{})
	pulumi.RegisterOutputType(ReportFilterOutput{})
	pulumi.RegisterOutputType(ReportFilterPtrOutput{})
	pulumi.RegisterOutputType(ReportFilterArrayOutput{})
	pulumi.RegisterOutputType(ReportFilterResponseOutput{})
	pulumi.RegisterOutputType(ReportFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportFilterResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportGroupingOutput{})
	pulumi.RegisterOutputType(ReportGroupingArrayOutput{})
	pulumi.RegisterOutputType(ReportGroupingResponseOutput{})
	pulumi.RegisterOutputType(ReportGroupingResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportRecurrencePeriodOutput{})
	pulumi.RegisterOutputType(ReportRecurrencePeriodPtrOutput{})
	pulumi.RegisterOutputType(ReportRecurrencePeriodResponseOutput{})
	pulumi.RegisterOutputType(ReportRecurrencePeriodResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportScheduleOutput{})
	pulumi.RegisterOutputType(ReportSchedulePtrOutput{})
	pulumi.RegisterOutputType(ReportScheduleResponseOutput{})
	pulumi.RegisterOutputType(ReportScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportTimePeriodOutput{})
	pulumi.RegisterOutputType(ReportTimePeriodPtrOutput{})
	pulumi.RegisterOutputType(ReportTimePeriodResponseOutput{})
	pulumi.RegisterOutputType(ReportTimePeriodResponsePtrOutput{})
	pulumi.RegisterOutputType(SchedulePropertiesOutput{})
	pulumi.RegisterOutputType(SchedulePropertiesResponseOutput{})
	pulumi.RegisterOutputType(SettingsPropertiesCacheOutput{})
	pulumi.RegisterOutputType(SettingsPropertiesCacheArrayOutput{})
	pulumi.RegisterOutputType(SettingsPropertiesResponseCacheOutput{})
	pulumi.RegisterOutputType(SettingsPropertiesResponseCacheArrayOutput{})
	pulumi.RegisterOutputType(SourceCostAllocationResourceOutput{})
	pulumi.RegisterOutputType(SourceCostAllocationResourceArrayOutput{})
	pulumi.RegisterOutputType(SourceCostAllocationResourceResponseOutput{})
	pulumi.RegisterOutputType(SourceCostAllocationResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TargetCostAllocationResourceOutput{})
	pulumi.RegisterOutputType(TargetCostAllocationResourceArrayOutput{})
	pulumi.RegisterOutputType(TargetCostAllocationResourceResponseOutput{})
	pulumi.RegisterOutputType(TargetCostAllocationResourceResponseArrayOutput{})
}
