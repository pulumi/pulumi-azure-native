// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package logic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The agreement type.
type AgreementType string

const (
	AgreementTypeNotSpecified = AgreementType("NotSpecified")
	AgreementTypeAS2          = AgreementType("AS2")
	AgreementTypeX12          = AgreementType("X12")
	AgreementTypeEdifact      = AgreementType("Edifact")
)

func (AgreementType) ElementType() reflect.Type {
	return reflect.TypeOf((*AgreementType)(nil)).Elem()
}

func (e AgreementType) ToAgreementTypeOutput() AgreementTypeOutput {
	return pulumi.ToOutput(e).(AgreementTypeOutput)
}

func (e AgreementType) ToAgreementTypeOutputWithContext(ctx context.Context) AgreementTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AgreementTypeOutput)
}

func (e AgreementType) ToAgreementTypePtrOutput() AgreementTypePtrOutput {
	return e.ToAgreementTypePtrOutputWithContext(context.Background())
}

func (e AgreementType) ToAgreementTypePtrOutputWithContext(ctx context.Context) AgreementTypePtrOutput {
	return AgreementType(e).ToAgreementTypeOutputWithContext(ctx).ToAgreementTypePtrOutputWithContext(ctx)
}

func (e AgreementType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AgreementType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AgreementType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AgreementType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AgreementTypeOutput struct{ *pulumi.OutputState }

func (AgreementTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgreementType)(nil)).Elem()
}

func (o AgreementTypeOutput) ToAgreementTypeOutput() AgreementTypeOutput {
	return o
}

func (o AgreementTypeOutput) ToAgreementTypeOutputWithContext(ctx context.Context) AgreementTypeOutput {
	return o
}

func (o AgreementTypeOutput) ToAgreementTypePtrOutput() AgreementTypePtrOutput {
	return o.ToAgreementTypePtrOutputWithContext(context.Background())
}

func (o AgreementTypeOutput) ToAgreementTypePtrOutputWithContext(ctx context.Context) AgreementTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AgreementType) *AgreementType {
		return &v
	}).(AgreementTypePtrOutput)
}

func (o AgreementTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AgreementTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AgreementType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AgreementTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AgreementTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AgreementType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AgreementTypePtrOutput struct{ *pulumi.OutputState }

func (AgreementTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgreementType)(nil)).Elem()
}

func (o AgreementTypePtrOutput) ToAgreementTypePtrOutput() AgreementTypePtrOutput {
	return o
}

func (o AgreementTypePtrOutput) ToAgreementTypePtrOutputWithContext(ctx context.Context) AgreementTypePtrOutput {
	return o
}

func (o AgreementTypePtrOutput) Elem() AgreementTypeOutput {
	return o.ApplyT(func(v *AgreementType) AgreementType {
		if v != nil {
			return *v
		}
		var ret AgreementType
		return ret
	}).(AgreementTypeOutput)
}

func (o AgreementTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AgreementTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AgreementType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AgreementTypeInput is an input type that accepts AgreementTypeArgs and AgreementTypeOutput values.
// You can construct a concrete instance of `AgreementTypeInput` via:
//
//	AgreementTypeArgs{...}
type AgreementTypeInput interface {
	pulumi.Input

	ToAgreementTypeOutput() AgreementTypeOutput
	ToAgreementTypeOutputWithContext(context.Context) AgreementTypeOutput
}

var agreementTypePtrType = reflect.TypeOf((**AgreementType)(nil)).Elem()

type AgreementTypePtrInput interface {
	pulumi.Input

	ToAgreementTypePtrOutput() AgreementTypePtrOutput
	ToAgreementTypePtrOutputWithContext(context.Context) AgreementTypePtrOutput
}

type agreementTypePtr string

func AgreementTypePtr(v string) AgreementTypePtrInput {
	return (*agreementTypePtr)(&v)
}

func (*agreementTypePtr) ElementType() reflect.Type {
	return agreementTypePtrType
}

func (in *agreementTypePtr) ToAgreementTypePtrOutput() AgreementTypePtrOutput {
	return pulumi.ToOutput(in).(AgreementTypePtrOutput)
}

func (in *agreementTypePtr) ToAgreementTypePtrOutputWithContext(ctx context.Context) AgreementTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AgreementTypePtrOutput)
}

// The day of the week.
type DayOfWeek string

const (
	DayOfWeekSunday    = DayOfWeek("Sunday")
	DayOfWeekMonday    = DayOfWeek("Monday")
	DayOfWeekTuesday   = DayOfWeek("Tuesday")
	DayOfWeekWednesday = DayOfWeek("Wednesday")
	DayOfWeekThursday  = DayOfWeek("Thursday")
	DayOfWeekFriday    = DayOfWeek("Friday")
	DayOfWeekSaturday  = DayOfWeek("Saturday")
)

func (DayOfWeek) ElementType() reflect.Type {
	return reflect.TypeOf((*DayOfWeek)(nil)).Elem()
}

func (e DayOfWeek) ToDayOfWeekOutput() DayOfWeekOutput {
	return pulumi.ToOutput(e).(DayOfWeekOutput)
}

func (e DayOfWeek) ToDayOfWeekOutputWithContext(ctx context.Context) DayOfWeekOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DayOfWeekOutput)
}

func (e DayOfWeek) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return e.ToDayOfWeekPtrOutputWithContext(context.Background())
}

func (e DayOfWeek) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return DayOfWeek(e).ToDayOfWeekOutputWithContext(ctx).ToDayOfWeekPtrOutputWithContext(ctx)
}

func (e DayOfWeek) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DayOfWeek) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DayOfWeek) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DayOfWeek) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DayOfWeekOutput struct{ *pulumi.OutputState }

func (DayOfWeekOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DayOfWeek)(nil)).Elem()
}

func (o DayOfWeekOutput) ToDayOfWeekOutput() DayOfWeekOutput {
	return o
}

func (o DayOfWeekOutput) ToDayOfWeekOutputWithContext(ctx context.Context) DayOfWeekOutput {
	return o
}

func (o DayOfWeekOutput) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return o.ToDayOfWeekPtrOutputWithContext(context.Background())
}

func (o DayOfWeekOutput) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DayOfWeek) *DayOfWeek {
		return &v
	}).(DayOfWeekPtrOutput)
}

func (o DayOfWeekOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DayOfWeekOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DayOfWeek) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DayOfWeekOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DayOfWeekOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DayOfWeek) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DayOfWeekPtrOutput struct{ *pulumi.OutputState }

func (DayOfWeekPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DayOfWeek)(nil)).Elem()
}

func (o DayOfWeekPtrOutput) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return o
}

func (o DayOfWeekPtrOutput) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return o
}

func (o DayOfWeekPtrOutput) Elem() DayOfWeekOutput {
	return o.ApplyT(func(v *DayOfWeek) DayOfWeek {
		if v != nil {
			return *v
		}
		var ret DayOfWeek
		return ret
	}).(DayOfWeekOutput)
}

func (o DayOfWeekPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DayOfWeekPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DayOfWeek) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DayOfWeekInput is an input type that accepts DayOfWeekArgs and DayOfWeekOutput values.
// You can construct a concrete instance of `DayOfWeekInput` via:
//
//	DayOfWeekArgs{...}
type DayOfWeekInput interface {
	pulumi.Input

	ToDayOfWeekOutput() DayOfWeekOutput
	ToDayOfWeekOutputWithContext(context.Context) DayOfWeekOutput
}

var dayOfWeekPtrType = reflect.TypeOf((**DayOfWeek)(nil)).Elem()

type DayOfWeekPtrInput interface {
	pulumi.Input

	ToDayOfWeekPtrOutput() DayOfWeekPtrOutput
	ToDayOfWeekPtrOutputWithContext(context.Context) DayOfWeekPtrOutput
}

type dayOfWeekPtr string

func DayOfWeekPtr(v string) DayOfWeekPtrInput {
	return (*dayOfWeekPtr)(&v)
}

func (*dayOfWeekPtr) ElementType() reflect.Type {
	return dayOfWeekPtrType
}

func (in *dayOfWeekPtr) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return pulumi.ToOutput(in).(DayOfWeekPtrOutput)
}

func (in *dayOfWeekPtr) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DayOfWeekPtrOutput)
}

type DaysOfWeek string

const (
	DaysOfWeekSunday    = DaysOfWeek("Sunday")
	DaysOfWeekMonday    = DaysOfWeek("Monday")
	DaysOfWeekTuesday   = DaysOfWeek("Tuesday")
	DaysOfWeekWednesday = DaysOfWeek("Wednesday")
	DaysOfWeekThursday  = DaysOfWeek("Thursday")
	DaysOfWeekFriday    = DaysOfWeek("Friday")
	DaysOfWeekSaturday  = DaysOfWeek("Saturday")
)

func (DaysOfWeek) ElementType() reflect.Type {
	return reflect.TypeOf((*DaysOfWeek)(nil)).Elem()
}

func (e DaysOfWeek) ToDaysOfWeekOutput() DaysOfWeekOutput {
	return pulumi.ToOutput(e).(DaysOfWeekOutput)
}

func (e DaysOfWeek) ToDaysOfWeekOutputWithContext(ctx context.Context) DaysOfWeekOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DaysOfWeekOutput)
}

func (e DaysOfWeek) ToDaysOfWeekPtrOutput() DaysOfWeekPtrOutput {
	return e.ToDaysOfWeekPtrOutputWithContext(context.Background())
}

func (e DaysOfWeek) ToDaysOfWeekPtrOutputWithContext(ctx context.Context) DaysOfWeekPtrOutput {
	return DaysOfWeek(e).ToDaysOfWeekOutputWithContext(ctx).ToDaysOfWeekPtrOutputWithContext(ctx)
}

func (e DaysOfWeek) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DaysOfWeek) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DaysOfWeek) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DaysOfWeek) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DaysOfWeekOutput struct{ *pulumi.OutputState }

func (DaysOfWeekOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DaysOfWeek)(nil)).Elem()
}

func (o DaysOfWeekOutput) ToDaysOfWeekOutput() DaysOfWeekOutput {
	return o
}

func (o DaysOfWeekOutput) ToDaysOfWeekOutputWithContext(ctx context.Context) DaysOfWeekOutput {
	return o
}

func (o DaysOfWeekOutput) ToDaysOfWeekPtrOutput() DaysOfWeekPtrOutput {
	return o.ToDaysOfWeekPtrOutputWithContext(context.Background())
}

func (o DaysOfWeekOutput) ToDaysOfWeekPtrOutputWithContext(ctx context.Context) DaysOfWeekPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DaysOfWeek) *DaysOfWeek {
		return &v
	}).(DaysOfWeekPtrOutput)
}

func (o DaysOfWeekOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DaysOfWeekOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DaysOfWeek) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DaysOfWeekOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DaysOfWeekOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DaysOfWeek) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DaysOfWeekPtrOutput struct{ *pulumi.OutputState }

func (DaysOfWeekPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DaysOfWeek)(nil)).Elem()
}

func (o DaysOfWeekPtrOutput) ToDaysOfWeekPtrOutput() DaysOfWeekPtrOutput {
	return o
}

func (o DaysOfWeekPtrOutput) ToDaysOfWeekPtrOutputWithContext(ctx context.Context) DaysOfWeekPtrOutput {
	return o
}

func (o DaysOfWeekPtrOutput) Elem() DaysOfWeekOutput {
	return o.ApplyT(func(v *DaysOfWeek) DaysOfWeek {
		if v != nil {
			return *v
		}
		var ret DaysOfWeek
		return ret
	}).(DaysOfWeekOutput)
}

func (o DaysOfWeekPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DaysOfWeekPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DaysOfWeek) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DaysOfWeekInput is an input type that accepts DaysOfWeekArgs and DaysOfWeekOutput values.
// You can construct a concrete instance of `DaysOfWeekInput` via:
//
//	DaysOfWeekArgs{...}
type DaysOfWeekInput interface {
	pulumi.Input

	ToDaysOfWeekOutput() DaysOfWeekOutput
	ToDaysOfWeekOutputWithContext(context.Context) DaysOfWeekOutput
}

var daysOfWeekPtrType = reflect.TypeOf((**DaysOfWeek)(nil)).Elem()

type DaysOfWeekPtrInput interface {
	pulumi.Input

	ToDaysOfWeekPtrOutput() DaysOfWeekPtrOutput
	ToDaysOfWeekPtrOutputWithContext(context.Context) DaysOfWeekPtrOutput
}

type daysOfWeekPtr string

func DaysOfWeekPtr(v string) DaysOfWeekPtrInput {
	return (*daysOfWeekPtr)(&v)
}

func (*daysOfWeekPtr) ElementType() reflect.Type {
	return daysOfWeekPtrType
}

func (in *daysOfWeekPtr) ToDaysOfWeekPtrOutput() DaysOfWeekPtrOutput {
	return pulumi.ToOutput(in).(DaysOfWeekPtrOutput)
}

func (in *daysOfWeekPtr) ToDaysOfWeekPtrOutputWithContext(ctx context.Context) DaysOfWeekPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DaysOfWeekPtrOutput)
}

// DaysOfWeekArrayInput is an input type that accepts DaysOfWeekArray and DaysOfWeekArrayOutput values.
// You can construct a concrete instance of `DaysOfWeekArrayInput` via:
//
//	DaysOfWeekArray{ DaysOfWeekArgs{...} }
type DaysOfWeekArrayInput interface {
	pulumi.Input

	ToDaysOfWeekArrayOutput() DaysOfWeekArrayOutput
	ToDaysOfWeekArrayOutputWithContext(context.Context) DaysOfWeekArrayOutput
}

type DaysOfWeekArray []DaysOfWeek

func (DaysOfWeekArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DaysOfWeek)(nil)).Elem()
}

func (i DaysOfWeekArray) ToDaysOfWeekArrayOutput() DaysOfWeekArrayOutput {
	return i.ToDaysOfWeekArrayOutputWithContext(context.Background())
}

func (i DaysOfWeekArray) ToDaysOfWeekArrayOutputWithContext(ctx context.Context) DaysOfWeekArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaysOfWeekArrayOutput)
}

type DaysOfWeekArrayOutput struct{ *pulumi.OutputState }

func (DaysOfWeekArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DaysOfWeek)(nil)).Elem()
}

func (o DaysOfWeekArrayOutput) ToDaysOfWeekArrayOutput() DaysOfWeekArrayOutput {
	return o
}

func (o DaysOfWeekArrayOutput) ToDaysOfWeekArrayOutputWithContext(ctx context.Context) DaysOfWeekArrayOutput {
	return o
}

func (o DaysOfWeekArrayOutput) Index(i pulumi.IntInput) DaysOfWeekOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DaysOfWeek {
		return vs[0].([]DaysOfWeek)[vs[1].(int)]
	}).(DaysOfWeekOutput)
}

// The EDIFACT frame setting characterSet.
type EdifactCharacterSet string

const (
	EdifactCharacterSetNotSpecified = EdifactCharacterSet("NotSpecified")
	EdifactCharacterSetUNOB         = EdifactCharacterSet("UNOB")
	EdifactCharacterSetUNOA         = EdifactCharacterSet("UNOA")
	EdifactCharacterSetUNOC         = EdifactCharacterSet("UNOC")
	EdifactCharacterSetUNOD         = EdifactCharacterSet("UNOD")
	EdifactCharacterSetUNOE         = EdifactCharacterSet("UNOE")
	EdifactCharacterSetUNOF         = EdifactCharacterSet("UNOF")
	EdifactCharacterSetUNOG         = EdifactCharacterSet("UNOG")
	EdifactCharacterSetUNOH         = EdifactCharacterSet("UNOH")
	EdifactCharacterSetUNOI         = EdifactCharacterSet("UNOI")
	EdifactCharacterSetUNOJ         = EdifactCharacterSet("UNOJ")
	EdifactCharacterSetUNOK         = EdifactCharacterSet("UNOK")
	EdifactCharacterSetUNOX         = EdifactCharacterSet("UNOX")
	EdifactCharacterSetUNOY         = EdifactCharacterSet("UNOY")
	EdifactCharacterSetKECA         = EdifactCharacterSet("KECA")
)

// The EDIFACT frame setting decimal indicator.
type EdifactDecimalIndicator string

const (
	EdifactDecimalIndicatorNotSpecified = EdifactDecimalIndicator("NotSpecified")
	EdifactDecimalIndicatorComma        = EdifactDecimalIndicator("Comma")
	EdifactDecimalIndicatorDecimal      = EdifactDecimalIndicator("Decimal")
)

func (EdifactDecimalIndicator) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactDecimalIndicator)(nil)).Elem()
}

func (e EdifactDecimalIndicator) ToEdifactDecimalIndicatorOutput() EdifactDecimalIndicatorOutput {
	return pulumi.ToOutput(e).(EdifactDecimalIndicatorOutput)
}

func (e EdifactDecimalIndicator) ToEdifactDecimalIndicatorOutputWithContext(ctx context.Context) EdifactDecimalIndicatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EdifactDecimalIndicatorOutput)
}

func (e EdifactDecimalIndicator) ToEdifactDecimalIndicatorPtrOutput() EdifactDecimalIndicatorPtrOutput {
	return e.ToEdifactDecimalIndicatorPtrOutputWithContext(context.Background())
}

func (e EdifactDecimalIndicator) ToEdifactDecimalIndicatorPtrOutputWithContext(ctx context.Context) EdifactDecimalIndicatorPtrOutput {
	return EdifactDecimalIndicator(e).ToEdifactDecimalIndicatorOutputWithContext(ctx).ToEdifactDecimalIndicatorPtrOutputWithContext(ctx)
}

func (e EdifactDecimalIndicator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EdifactDecimalIndicator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EdifactDecimalIndicator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EdifactDecimalIndicator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EdifactDecimalIndicatorOutput struct{ *pulumi.OutputState }

func (EdifactDecimalIndicatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactDecimalIndicator)(nil)).Elem()
}

func (o EdifactDecimalIndicatorOutput) ToEdifactDecimalIndicatorOutput() EdifactDecimalIndicatorOutput {
	return o
}

func (o EdifactDecimalIndicatorOutput) ToEdifactDecimalIndicatorOutputWithContext(ctx context.Context) EdifactDecimalIndicatorOutput {
	return o
}

func (o EdifactDecimalIndicatorOutput) ToEdifactDecimalIndicatorPtrOutput() EdifactDecimalIndicatorPtrOutput {
	return o.ToEdifactDecimalIndicatorPtrOutputWithContext(context.Background())
}

func (o EdifactDecimalIndicatorOutput) ToEdifactDecimalIndicatorPtrOutputWithContext(ctx context.Context) EdifactDecimalIndicatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdifactDecimalIndicator) *EdifactDecimalIndicator {
		return &v
	}).(EdifactDecimalIndicatorPtrOutput)
}

func (o EdifactDecimalIndicatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EdifactDecimalIndicatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EdifactDecimalIndicator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EdifactDecimalIndicatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EdifactDecimalIndicatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EdifactDecimalIndicator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EdifactDecimalIndicatorPtrOutput struct{ *pulumi.OutputState }

func (EdifactDecimalIndicatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactDecimalIndicator)(nil)).Elem()
}

func (o EdifactDecimalIndicatorPtrOutput) ToEdifactDecimalIndicatorPtrOutput() EdifactDecimalIndicatorPtrOutput {
	return o
}

func (o EdifactDecimalIndicatorPtrOutput) ToEdifactDecimalIndicatorPtrOutputWithContext(ctx context.Context) EdifactDecimalIndicatorPtrOutput {
	return o
}

func (o EdifactDecimalIndicatorPtrOutput) Elem() EdifactDecimalIndicatorOutput {
	return o.ApplyT(func(v *EdifactDecimalIndicator) EdifactDecimalIndicator {
		if v != nil {
			return *v
		}
		var ret EdifactDecimalIndicator
		return ret
	}).(EdifactDecimalIndicatorOutput)
}

func (o EdifactDecimalIndicatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EdifactDecimalIndicatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EdifactDecimalIndicator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EdifactDecimalIndicatorInput is an input type that accepts EdifactDecimalIndicatorArgs and EdifactDecimalIndicatorOutput values.
// You can construct a concrete instance of `EdifactDecimalIndicatorInput` via:
//
//	EdifactDecimalIndicatorArgs{...}
type EdifactDecimalIndicatorInput interface {
	pulumi.Input

	ToEdifactDecimalIndicatorOutput() EdifactDecimalIndicatorOutput
	ToEdifactDecimalIndicatorOutputWithContext(context.Context) EdifactDecimalIndicatorOutput
}

var edifactDecimalIndicatorPtrType = reflect.TypeOf((**EdifactDecimalIndicator)(nil)).Elem()

type EdifactDecimalIndicatorPtrInput interface {
	pulumi.Input

	ToEdifactDecimalIndicatorPtrOutput() EdifactDecimalIndicatorPtrOutput
	ToEdifactDecimalIndicatorPtrOutputWithContext(context.Context) EdifactDecimalIndicatorPtrOutput
}

type edifactDecimalIndicatorPtr string

func EdifactDecimalIndicatorPtr(v string) EdifactDecimalIndicatorPtrInput {
	return (*edifactDecimalIndicatorPtr)(&v)
}

func (*edifactDecimalIndicatorPtr) ElementType() reflect.Type {
	return edifactDecimalIndicatorPtrType
}

func (in *edifactDecimalIndicatorPtr) ToEdifactDecimalIndicatorPtrOutput() EdifactDecimalIndicatorPtrOutput {
	return pulumi.ToOutput(in).(EdifactDecimalIndicatorPtrOutput)
}

func (in *edifactDecimalIndicatorPtr) ToEdifactDecimalIndicatorPtrOutputWithContext(ctx context.Context) EdifactDecimalIndicatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EdifactDecimalIndicatorPtrOutput)
}

// The encryption algorithm.
type EncryptionAlgorithm string

const (
	EncryptionAlgorithmNotSpecified = EncryptionAlgorithm("NotSpecified")
	EncryptionAlgorithmNone         = EncryptionAlgorithm("None")
	EncryptionAlgorithmDES3         = EncryptionAlgorithm("DES3")
	EncryptionAlgorithmRC2          = EncryptionAlgorithm("RC2")
	EncryptionAlgorithmAES128       = EncryptionAlgorithm("AES128")
	EncryptionAlgorithmAES192       = EncryptionAlgorithm("AES192")
	EncryptionAlgorithmAES256       = EncryptionAlgorithm("AES256")
)

// The signing or hashing algorithm.
type HashingAlgorithm string

const (
	HashingAlgorithmNotSpecified = HashingAlgorithm("NotSpecified")
	HashingAlgorithmNone         = HashingAlgorithm("None")
	HashingAlgorithmMD5          = HashingAlgorithm("MD5")
	HashingAlgorithmSHA1         = HashingAlgorithm("SHA1")
	HashingAlgorithmSHA2256      = HashingAlgorithm("SHA2256")
	HashingAlgorithmSHA2384      = HashingAlgorithm("SHA2384")
	HashingAlgorithmSHA2512      = HashingAlgorithm("SHA2512")
)

// The sku name.
type IntegrationAccountSkuName string

const (
	IntegrationAccountSkuNameNotSpecified = IntegrationAccountSkuName("NotSpecified")
	IntegrationAccountSkuNameFree         = IntegrationAccountSkuName("Free")
	IntegrationAccountSkuNameBasic        = IntegrationAccountSkuName("Basic")
	IntegrationAccountSkuNameStandard     = IntegrationAccountSkuName("Standard")
)

// The access endpoint type.
type IntegrationServiceEnvironmentAccessEndpointType string

const (
	IntegrationServiceEnvironmentAccessEndpointTypeNotSpecified = IntegrationServiceEnvironmentAccessEndpointType("NotSpecified")
	IntegrationServiceEnvironmentAccessEndpointTypeExternal     = IntegrationServiceEnvironmentAccessEndpointType("External")
	IntegrationServiceEnvironmentAccessEndpointTypeInternal     = IntegrationServiceEnvironmentAccessEndpointType("Internal")
)

// The sku name.
type IntegrationServiceEnvironmentSkuName string

const (
	IntegrationServiceEnvironmentSkuNameNotSpecified = IntegrationServiceEnvironmentSkuName("NotSpecified")
	IntegrationServiceEnvironmentSkuNamePremium      = IntegrationServiceEnvironmentSkuName("Premium")
	IntegrationServiceEnvironmentSkuNameDeveloper    = IntegrationServiceEnvironmentSkuName("Developer")
)

// The key type.
type KeyType string

const (
	KeyTypeNotSpecified = KeyType("NotSpecified")
	KeyTypePrimary      = KeyType("Primary")
	KeyTypeSecondary    = KeyType("Secondary")
)

// Type of managed service identity. The type 'SystemAssigned' includes an implicitly created identity. The type 'None' will remove any identities from the resource.
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityTypeSystemAssigned = ManagedServiceIdentityType("SystemAssigned")
	ManagedServiceIdentityTypeUserAssigned   = ManagedServiceIdentityType("UserAssigned")
	ManagedServiceIdentityTypeNone           = ManagedServiceIdentityType("None")
)

// The map type.
type MapType string

const (
	MapTypeNotSpecified = MapType("NotSpecified")
	MapTypeXslt         = MapType("Xslt")
	MapTypeXslt20       = MapType("Xslt20")
	MapTypeXslt30       = MapType("Xslt30")
	MapTypeLiquid       = MapType("Liquid")
)

// The message filter type.
type MessageFilterType string

const (
	MessageFilterTypeNotSpecified = MessageFilterType("NotSpecified")
	MessageFilterTypeInclude      = MessageFilterType("Include")
	MessageFilterTypeExclude      = MessageFilterType("Exclude")
)

// Type of provider for OAuth.
type OpenAuthenticationProviderType string

const (
	OpenAuthenticationProviderTypeAAD = OpenAuthenticationProviderType("AAD")
)

// The type.
type ParameterType string

const (
	ParameterTypeNotSpecified = ParameterType("NotSpecified")
	ParameterTypeString       = ParameterType("String")
	ParameterTypeSecureString = ParameterType("SecureString")
	ParameterTypeInt          = ParameterType("Int")
	ParameterTypeFloat        = ParameterType("Float")
	ParameterTypeBool         = ParameterType("Bool")
	ParameterTypeArray        = ParameterType("Array")
	ParameterTypeObject       = ParameterType("Object")
	ParameterTypeSecureObject = ParameterType("SecureObject")
)

// The partner type.
type PartnerType string

const (
	PartnerTypeNotSpecified = PartnerType("NotSpecified")
	PartnerTypeB2B          = PartnerType("B2B")
)

// The frequency.
type RecurrenceFrequency string

const (
	RecurrenceFrequencyNotSpecified = RecurrenceFrequency("NotSpecified")
	RecurrenceFrequencySecond       = RecurrenceFrequency("Second")
	RecurrenceFrequencyMinute       = RecurrenceFrequency("Minute")
	RecurrenceFrequencyHour         = RecurrenceFrequency("Hour")
	RecurrenceFrequencyDay          = RecurrenceFrequency("Day")
	RecurrenceFrequencyWeek         = RecurrenceFrequency("Week")
	RecurrenceFrequencyMonth        = RecurrenceFrequency("Month")
	RecurrenceFrequencyYear         = RecurrenceFrequency("Year")
)

// The value indicating whether the RosettaNet PIP is used for a single action.
type RosettaNetActionType string

const (
	RosettaNetActionTypeNotSpecified = RosettaNetActionType("NotSpecified")
	RosettaNetActionTypeSingleAction = RosettaNetActionType("SingleAction")
	RosettaNetActionTypeDoubleAction = RosettaNetActionType("DoubleAction")
)

func (RosettaNetActionType) ElementType() reflect.Type {
	return reflect.TypeOf((*RosettaNetActionType)(nil)).Elem()
}

func (e RosettaNetActionType) ToRosettaNetActionTypeOutput() RosettaNetActionTypeOutput {
	return pulumi.ToOutput(e).(RosettaNetActionTypeOutput)
}

func (e RosettaNetActionType) ToRosettaNetActionTypeOutputWithContext(ctx context.Context) RosettaNetActionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RosettaNetActionTypeOutput)
}

func (e RosettaNetActionType) ToRosettaNetActionTypePtrOutput() RosettaNetActionTypePtrOutput {
	return e.ToRosettaNetActionTypePtrOutputWithContext(context.Background())
}

func (e RosettaNetActionType) ToRosettaNetActionTypePtrOutputWithContext(ctx context.Context) RosettaNetActionTypePtrOutput {
	return RosettaNetActionType(e).ToRosettaNetActionTypeOutputWithContext(ctx).ToRosettaNetActionTypePtrOutputWithContext(ctx)
}

func (e RosettaNetActionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RosettaNetActionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RosettaNetActionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RosettaNetActionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RosettaNetActionTypeOutput struct{ *pulumi.OutputState }

func (RosettaNetActionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RosettaNetActionType)(nil)).Elem()
}

func (o RosettaNetActionTypeOutput) ToRosettaNetActionTypeOutput() RosettaNetActionTypeOutput {
	return o
}

func (o RosettaNetActionTypeOutput) ToRosettaNetActionTypeOutputWithContext(ctx context.Context) RosettaNetActionTypeOutput {
	return o
}

func (o RosettaNetActionTypeOutput) ToRosettaNetActionTypePtrOutput() RosettaNetActionTypePtrOutput {
	return o.ToRosettaNetActionTypePtrOutputWithContext(context.Background())
}

func (o RosettaNetActionTypeOutput) ToRosettaNetActionTypePtrOutputWithContext(ctx context.Context) RosettaNetActionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RosettaNetActionType) *RosettaNetActionType {
		return &v
	}).(RosettaNetActionTypePtrOutput)
}

func (o RosettaNetActionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RosettaNetActionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RosettaNetActionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RosettaNetActionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RosettaNetActionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RosettaNetActionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RosettaNetActionTypePtrOutput struct{ *pulumi.OutputState }

func (RosettaNetActionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RosettaNetActionType)(nil)).Elem()
}

func (o RosettaNetActionTypePtrOutput) ToRosettaNetActionTypePtrOutput() RosettaNetActionTypePtrOutput {
	return o
}

func (o RosettaNetActionTypePtrOutput) ToRosettaNetActionTypePtrOutputWithContext(ctx context.Context) RosettaNetActionTypePtrOutput {
	return o
}

func (o RosettaNetActionTypePtrOutput) Elem() RosettaNetActionTypeOutput {
	return o.ApplyT(func(v *RosettaNetActionType) RosettaNetActionType {
		if v != nil {
			return *v
		}
		var ret RosettaNetActionType
		return ret
	}).(RosettaNetActionTypeOutput)
}

func (o RosettaNetActionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RosettaNetActionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RosettaNetActionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RosettaNetActionTypeInput is an input type that accepts RosettaNetActionTypeArgs and RosettaNetActionTypeOutput values.
// You can construct a concrete instance of `RosettaNetActionTypeInput` via:
//
//	RosettaNetActionTypeArgs{...}
type RosettaNetActionTypeInput interface {
	pulumi.Input

	ToRosettaNetActionTypeOutput() RosettaNetActionTypeOutput
	ToRosettaNetActionTypeOutputWithContext(context.Context) RosettaNetActionTypeOutput
}

var rosettaNetActionTypePtrType = reflect.TypeOf((**RosettaNetActionType)(nil)).Elem()

type RosettaNetActionTypePtrInput interface {
	pulumi.Input

	ToRosettaNetActionTypePtrOutput() RosettaNetActionTypePtrOutput
	ToRosettaNetActionTypePtrOutputWithContext(context.Context) RosettaNetActionTypePtrOutput
}

type rosettaNetActionTypePtr string

func RosettaNetActionTypePtr(v string) RosettaNetActionTypePtrInput {
	return (*rosettaNetActionTypePtr)(&v)
}

func (*rosettaNetActionTypePtr) ElementType() reflect.Type {
	return rosettaNetActionTypePtrType
}

func (in *rosettaNetActionTypePtr) ToRosettaNetActionTypePtrOutput() RosettaNetActionTypePtrOutput {
	return pulumi.ToOutput(in).(RosettaNetActionTypePtrOutput)
}

func (in *rosettaNetActionTypePtr) ToRosettaNetActionTypePtrOutputWithContext(ctx context.Context) RosettaNetActionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RosettaNetActionTypePtrOutput)
}

// The RosettaNet ProcessConfiguration activity type.
type RosettaNetPipActivityType string

const (
	RosettaNetPipActivityTypeNotSpecified            = RosettaNetPipActivityType("NotSpecified")
	RosettaNetPipActivityTypeInformationDistribution = RosettaNetPipActivityType("InformationDistribution")
	RosettaNetPipActivityTypeBusinessTransaction     = RosettaNetPipActivityType("BusinessTransaction")
	RosettaNetPipActivityTypeNotification            = RosettaNetPipActivityType("Notification")
	RosettaNetPipActivityTypeQueryResponse           = RosettaNetPipActivityType("QueryResponse")
	RosettaNetPipActivityTypeRequestConfirm          = RosettaNetPipActivityType("RequestConfirm")
	RosettaNetPipActivityTypeRequestResponse         = RosettaNetPipActivityType("RequestResponse")
)

func (RosettaNetPipActivityType) ElementType() reflect.Type {
	return reflect.TypeOf((*RosettaNetPipActivityType)(nil)).Elem()
}

func (e RosettaNetPipActivityType) ToRosettaNetPipActivityTypeOutput() RosettaNetPipActivityTypeOutput {
	return pulumi.ToOutput(e).(RosettaNetPipActivityTypeOutput)
}

func (e RosettaNetPipActivityType) ToRosettaNetPipActivityTypeOutputWithContext(ctx context.Context) RosettaNetPipActivityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RosettaNetPipActivityTypeOutput)
}

func (e RosettaNetPipActivityType) ToRosettaNetPipActivityTypePtrOutput() RosettaNetPipActivityTypePtrOutput {
	return e.ToRosettaNetPipActivityTypePtrOutputWithContext(context.Background())
}

func (e RosettaNetPipActivityType) ToRosettaNetPipActivityTypePtrOutputWithContext(ctx context.Context) RosettaNetPipActivityTypePtrOutput {
	return RosettaNetPipActivityType(e).ToRosettaNetPipActivityTypeOutputWithContext(ctx).ToRosettaNetPipActivityTypePtrOutputWithContext(ctx)
}

func (e RosettaNetPipActivityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RosettaNetPipActivityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RosettaNetPipActivityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RosettaNetPipActivityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RosettaNetPipActivityTypeOutput struct{ *pulumi.OutputState }

func (RosettaNetPipActivityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RosettaNetPipActivityType)(nil)).Elem()
}

func (o RosettaNetPipActivityTypeOutput) ToRosettaNetPipActivityTypeOutput() RosettaNetPipActivityTypeOutput {
	return o
}

func (o RosettaNetPipActivityTypeOutput) ToRosettaNetPipActivityTypeOutputWithContext(ctx context.Context) RosettaNetPipActivityTypeOutput {
	return o
}

func (o RosettaNetPipActivityTypeOutput) ToRosettaNetPipActivityTypePtrOutput() RosettaNetPipActivityTypePtrOutput {
	return o.ToRosettaNetPipActivityTypePtrOutputWithContext(context.Background())
}

func (o RosettaNetPipActivityTypeOutput) ToRosettaNetPipActivityTypePtrOutputWithContext(ctx context.Context) RosettaNetPipActivityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RosettaNetPipActivityType) *RosettaNetPipActivityType {
		return &v
	}).(RosettaNetPipActivityTypePtrOutput)
}

func (o RosettaNetPipActivityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RosettaNetPipActivityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RosettaNetPipActivityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RosettaNetPipActivityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RosettaNetPipActivityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RosettaNetPipActivityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RosettaNetPipActivityTypePtrOutput struct{ *pulumi.OutputState }

func (RosettaNetPipActivityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RosettaNetPipActivityType)(nil)).Elem()
}

func (o RosettaNetPipActivityTypePtrOutput) ToRosettaNetPipActivityTypePtrOutput() RosettaNetPipActivityTypePtrOutput {
	return o
}

func (o RosettaNetPipActivityTypePtrOutput) ToRosettaNetPipActivityTypePtrOutputWithContext(ctx context.Context) RosettaNetPipActivityTypePtrOutput {
	return o
}

func (o RosettaNetPipActivityTypePtrOutput) Elem() RosettaNetPipActivityTypeOutput {
	return o.ApplyT(func(v *RosettaNetPipActivityType) RosettaNetPipActivityType {
		if v != nil {
			return *v
		}
		var ret RosettaNetPipActivityType
		return ret
	}).(RosettaNetPipActivityTypeOutput)
}

func (o RosettaNetPipActivityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RosettaNetPipActivityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RosettaNetPipActivityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RosettaNetPipActivityTypeInput is an input type that accepts RosettaNetPipActivityTypeArgs and RosettaNetPipActivityTypeOutput values.
// You can construct a concrete instance of `RosettaNetPipActivityTypeInput` via:
//
//	RosettaNetPipActivityTypeArgs{...}
type RosettaNetPipActivityTypeInput interface {
	pulumi.Input

	ToRosettaNetPipActivityTypeOutput() RosettaNetPipActivityTypeOutput
	ToRosettaNetPipActivityTypeOutputWithContext(context.Context) RosettaNetPipActivityTypeOutput
}

var rosettaNetPipActivityTypePtrType = reflect.TypeOf((**RosettaNetPipActivityType)(nil)).Elem()

type RosettaNetPipActivityTypePtrInput interface {
	pulumi.Input

	ToRosettaNetPipActivityTypePtrOutput() RosettaNetPipActivityTypePtrOutput
	ToRosettaNetPipActivityTypePtrOutputWithContext(context.Context) RosettaNetPipActivityTypePtrOutput
}

type rosettaNetPipActivityTypePtr string

func RosettaNetPipActivityTypePtr(v string) RosettaNetPipActivityTypePtrInput {
	return (*rosettaNetPipActivityTypePtr)(&v)
}

func (*rosettaNetPipActivityTypePtr) ElementType() reflect.Type {
	return rosettaNetPipActivityTypePtrType
}

func (in *rosettaNetPipActivityTypePtr) ToRosettaNetPipActivityTypePtrOutput() RosettaNetPipActivityTypePtrOutput {
	return pulumi.ToOutput(in).(RosettaNetPipActivityTypePtrOutput)
}

func (in *rosettaNetPipActivityTypePtr) ToRosettaNetPipActivityTypePtrOutputWithContext(ctx context.Context) RosettaNetPipActivityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RosettaNetPipActivityTypePtrOutput)
}

// The persistent confidentiality encryption scope.
type RosettaNetPipConfidentialityScope string

const (
	RosettaNetPipConfidentialityScopeNotSpecified     = RosettaNetPipConfidentialityScope("NotSpecified")
	RosettaNetPipConfidentialityScopeNone             = RosettaNetPipConfidentialityScope("None")
	RosettaNetPipConfidentialityScopePayload          = RosettaNetPipConfidentialityScope("Payload")
	RosettaNetPipConfidentialityScopePayloadContainer = RosettaNetPipConfidentialityScope("PayloadContainer")
)

func (RosettaNetPipConfidentialityScope) ElementType() reflect.Type {
	return reflect.TypeOf((*RosettaNetPipConfidentialityScope)(nil)).Elem()
}

func (e RosettaNetPipConfidentialityScope) ToRosettaNetPipConfidentialityScopeOutput() RosettaNetPipConfidentialityScopeOutput {
	return pulumi.ToOutput(e).(RosettaNetPipConfidentialityScopeOutput)
}

func (e RosettaNetPipConfidentialityScope) ToRosettaNetPipConfidentialityScopeOutputWithContext(ctx context.Context) RosettaNetPipConfidentialityScopeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RosettaNetPipConfidentialityScopeOutput)
}

func (e RosettaNetPipConfidentialityScope) ToRosettaNetPipConfidentialityScopePtrOutput() RosettaNetPipConfidentialityScopePtrOutput {
	return e.ToRosettaNetPipConfidentialityScopePtrOutputWithContext(context.Background())
}

func (e RosettaNetPipConfidentialityScope) ToRosettaNetPipConfidentialityScopePtrOutputWithContext(ctx context.Context) RosettaNetPipConfidentialityScopePtrOutput {
	return RosettaNetPipConfidentialityScope(e).ToRosettaNetPipConfidentialityScopeOutputWithContext(ctx).ToRosettaNetPipConfidentialityScopePtrOutputWithContext(ctx)
}

func (e RosettaNetPipConfidentialityScope) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RosettaNetPipConfidentialityScope) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RosettaNetPipConfidentialityScope) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RosettaNetPipConfidentialityScope) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RosettaNetPipConfidentialityScopeOutput struct{ *pulumi.OutputState }

func (RosettaNetPipConfidentialityScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RosettaNetPipConfidentialityScope)(nil)).Elem()
}

func (o RosettaNetPipConfidentialityScopeOutput) ToRosettaNetPipConfidentialityScopeOutput() RosettaNetPipConfidentialityScopeOutput {
	return o
}

func (o RosettaNetPipConfidentialityScopeOutput) ToRosettaNetPipConfidentialityScopeOutputWithContext(ctx context.Context) RosettaNetPipConfidentialityScopeOutput {
	return o
}

func (o RosettaNetPipConfidentialityScopeOutput) ToRosettaNetPipConfidentialityScopePtrOutput() RosettaNetPipConfidentialityScopePtrOutput {
	return o.ToRosettaNetPipConfidentialityScopePtrOutputWithContext(context.Background())
}

func (o RosettaNetPipConfidentialityScopeOutput) ToRosettaNetPipConfidentialityScopePtrOutputWithContext(ctx context.Context) RosettaNetPipConfidentialityScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RosettaNetPipConfidentialityScope) *RosettaNetPipConfidentialityScope {
		return &v
	}).(RosettaNetPipConfidentialityScopePtrOutput)
}

func (o RosettaNetPipConfidentialityScopeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RosettaNetPipConfidentialityScopeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RosettaNetPipConfidentialityScope) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RosettaNetPipConfidentialityScopeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RosettaNetPipConfidentialityScopeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RosettaNetPipConfidentialityScope) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RosettaNetPipConfidentialityScopePtrOutput struct{ *pulumi.OutputState }

func (RosettaNetPipConfidentialityScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RosettaNetPipConfidentialityScope)(nil)).Elem()
}

func (o RosettaNetPipConfidentialityScopePtrOutput) ToRosettaNetPipConfidentialityScopePtrOutput() RosettaNetPipConfidentialityScopePtrOutput {
	return o
}

func (o RosettaNetPipConfidentialityScopePtrOutput) ToRosettaNetPipConfidentialityScopePtrOutputWithContext(ctx context.Context) RosettaNetPipConfidentialityScopePtrOutput {
	return o
}

func (o RosettaNetPipConfidentialityScopePtrOutput) Elem() RosettaNetPipConfidentialityScopeOutput {
	return o.ApplyT(func(v *RosettaNetPipConfidentialityScope) RosettaNetPipConfidentialityScope {
		if v != nil {
			return *v
		}
		var ret RosettaNetPipConfidentialityScope
		return ret
	}).(RosettaNetPipConfidentialityScopeOutput)
}

func (o RosettaNetPipConfidentialityScopePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RosettaNetPipConfidentialityScopePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RosettaNetPipConfidentialityScope) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RosettaNetPipConfidentialityScopeInput is an input type that accepts RosettaNetPipConfidentialityScopeArgs and RosettaNetPipConfidentialityScopeOutput values.
// You can construct a concrete instance of `RosettaNetPipConfidentialityScopeInput` via:
//
//	RosettaNetPipConfidentialityScopeArgs{...}
type RosettaNetPipConfidentialityScopeInput interface {
	pulumi.Input

	ToRosettaNetPipConfidentialityScopeOutput() RosettaNetPipConfidentialityScopeOutput
	ToRosettaNetPipConfidentialityScopeOutputWithContext(context.Context) RosettaNetPipConfidentialityScopeOutput
}

var rosettaNetPipConfidentialityScopePtrType = reflect.TypeOf((**RosettaNetPipConfidentialityScope)(nil)).Elem()

type RosettaNetPipConfidentialityScopePtrInput interface {
	pulumi.Input

	ToRosettaNetPipConfidentialityScopePtrOutput() RosettaNetPipConfidentialityScopePtrOutput
	ToRosettaNetPipConfidentialityScopePtrOutputWithContext(context.Context) RosettaNetPipConfidentialityScopePtrOutput
}

type rosettaNetPipConfidentialityScopePtr string

func RosettaNetPipConfidentialityScopePtr(v string) RosettaNetPipConfidentialityScopePtrInput {
	return (*rosettaNetPipConfidentialityScopePtr)(&v)
}

func (*rosettaNetPipConfidentialityScopePtr) ElementType() reflect.Type {
	return rosettaNetPipConfidentialityScopePtrType
}

func (in *rosettaNetPipConfidentialityScopePtr) ToRosettaNetPipConfidentialityScopePtrOutput() RosettaNetPipConfidentialityScopePtrOutput {
	return pulumi.ToOutput(in).(RosettaNetPipConfidentialityScopePtrOutput)
}

func (in *rosettaNetPipConfidentialityScopePtr) ToRosettaNetPipConfidentialityScopePtrOutputWithContext(ctx context.Context) RosettaNetPipConfidentialityScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RosettaNetPipConfidentialityScopePtrOutput)
}

// The RosettaNet ProcessConfiguration role type.
type RosettaNetPipRoleType string

const (
	RosettaNetPipRoleTypeNotSpecified   = RosettaNetPipRoleType("NotSpecified")
	RosettaNetPipRoleTypeFunctional     = RosettaNetPipRoleType("Functional")
	RosettaNetPipRoleTypeOrganizational = RosettaNetPipRoleType("Organizational")
	RosettaNetPipRoleTypeEmployee       = RosettaNetPipRoleType("Employee")
)

func (RosettaNetPipRoleType) ElementType() reflect.Type {
	return reflect.TypeOf((*RosettaNetPipRoleType)(nil)).Elem()
}

func (e RosettaNetPipRoleType) ToRosettaNetPipRoleTypeOutput() RosettaNetPipRoleTypeOutput {
	return pulumi.ToOutput(e).(RosettaNetPipRoleTypeOutput)
}

func (e RosettaNetPipRoleType) ToRosettaNetPipRoleTypeOutputWithContext(ctx context.Context) RosettaNetPipRoleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RosettaNetPipRoleTypeOutput)
}

func (e RosettaNetPipRoleType) ToRosettaNetPipRoleTypePtrOutput() RosettaNetPipRoleTypePtrOutput {
	return e.ToRosettaNetPipRoleTypePtrOutputWithContext(context.Background())
}

func (e RosettaNetPipRoleType) ToRosettaNetPipRoleTypePtrOutputWithContext(ctx context.Context) RosettaNetPipRoleTypePtrOutput {
	return RosettaNetPipRoleType(e).ToRosettaNetPipRoleTypeOutputWithContext(ctx).ToRosettaNetPipRoleTypePtrOutputWithContext(ctx)
}

func (e RosettaNetPipRoleType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RosettaNetPipRoleType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RosettaNetPipRoleType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RosettaNetPipRoleType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RosettaNetPipRoleTypeOutput struct{ *pulumi.OutputState }

func (RosettaNetPipRoleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RosettaNetPipRoleType)(nil)).Elem()
}

func (o RosettaNetPipRoleTypeOutput) ToRosettaNetPipRoleTypeOutput() RosettaNetPipRoleTypeOutput {
	return o
}

func (o RosettaNetPipRoleTypeOutput) ToRosettaNetPipRoleTypeOutputWithContext(ctx context.Context) RosettaNetPipRoleTypeOutput {
	return o
}

func (o RosettaNetPipRoleTypeOutput) ToRosettaNetPipRoleTypePtrOutput() RosettaNetPipRoleTypePtrOutput {
	return o.ToRosettaNetPipRoleTypePtrOutputWithContext(context.Background())
}

func (o RosettaNetPipRoleTypeOutput) ToRosettaNetPipRoleTypePtrOutputWithContext(ctx context.Context) RosettaNetPipRoleTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RosettaNetPipRoleType) *RosettaNetPipRoleType {
		return &v
	}).(RosettaNetPipRoleTypePtrOutput)
}

func (o RosettaNetPipRoleTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RosettaNetPipRoleTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RosettaNetPipRoleType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RosettaNetPipRoleTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RosettaNetPipRoleTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RosettaNetPipRoleType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RosettaNetPipRoleTypePtrOutput struct{ *pulumi.OutputState }

func (RosettaNetPipRoleTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RosettaNetPipRoleType)(nil)).Elem()
}

func (o RosettaNetPipRoleTypePtrOutput) ToRosettaNetPipRoleTypePtrOutput() RosettaNetPipRoleTypePtrOutput {
	return o
}

func (o RosettaNetPipRoleTypePtrOutput) ToRosettaNetPipRoleTypePtrOutputWithContext(ctx context.Context) RosettaNetPipRoleTypePtrOutput {
	return o
}

func (o RosettaNetPipRoleTypePtrOutput) Elem() RosettaNetPipRoleTypeOutput {
	return o.ApplyT(func(v *RosettaNetPipRoleType) RosettaNetPipRoleType {
		if v != nil {
			return *v
		}
		var ret RosettaNetPipRoleType
		return ret
	}).(RosettaNetPipRoleTypeOutput)
}

func (o RosettaNetPipRoleTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RosettaNetPipRoleTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RosettaNetPipRoleType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RosettaNetPipRoleTypeInput is an input type that accepts RosettaNetPipRoleTypeArgs and RosettaNetPipRoleTypeOutput values.
// You can construct a concrete instance of `RosettaNetPipRoleTypeInput` via:
//
//	RosettaNetPipRoleTypeArgs{...}
type RosettaNetPipRoleTypeInput interface {
	pulumi.Input

	ToRosettaNetPipRoleTypeOutput() RosettaNetPipRoleTypeOutput
	ToRosettaNetPipRoleTypeOutputWithContext(context.Context) RosettaNetPipRoleTypeOutput
}

var rosettaNetPipRoleTypePtrType = reflect.TypeOf((**RosettaNetPipRoleType)(nil)).Elem()

type RosettaNetPipRoleTypePtrInput interface {
	pulumi.Input

	ToRosettaNetPipRoleTypePtrOutput() RosettaNetPipRoleTypePtrOutput
	ToRosettaNetPipRoleTypePtrOutputWithContext(context.Context) RosettaNetPipRoleTypePtrOutput
}

type rosettaNetPipRoleTypePtr string

func RosettaNetPipRoleTypePtr(v string) RosettaNetPipRoleTypePtrInput {
	return (*rosettaNetPipRoleTypePtr)(&v)
}

func (*rosettaNetPipRoleTypePtr) ElementType() reflect.Type {
	return rosettaNetPipRoleTypePtrType
}

func (in *rosettaNetPipRoleTypePtr) ToRosettaNetPipRoleTypePtrOutput() RosettaNetPipRoleTypePtrOutput {
	return pulumi.ToOutput(in).(RosettaNetPipRoleTypePtrOutput)
}

func (in *rosettaNetPipRoleTypePtr) ToRosettaNetPipRoleTypePtrOutputWithContext(ctx context.Context) RosettaNetPipRoleTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RosettaNetPipRoleTypePtrOutput)
}

// The value indicating whether the RosettaNet PIP communication is synchronous.
type RosettaNetResponseType string

const (
	RosettaNetResponseTypeNotSpecified = RosettaNetResponseType("NotSpecified")
	RosettaNetResponseTypeSync         = RosettaNetResponseType("Sync")
	RosettaNetResponseTypeAsync        = RosettaNetResponseType("Async")
)

func (RosettaNetResponseType) ElementType() reflect.Type {
	return reflect.TypeOf((*RosettaNetResponseType)(nil)).Elem()
}

func (e RosettaNetResponseType) ToRosettaNetResponseTypeOutput() RosettaNetResponseTypeOutput {
	return pulumi.ToOutput(e).(RosettaNetResponseTypeOutput)
}

func (e RosettaNetResponseType) ToRosettaNetResponseTypeOutputWithContext(ctx context.Context) RosettaNetResponseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RosettaNetResponseTypeOutput)
}

func (e RosettaNetResponseType) ToRosettaNetResponseTypePtrOutput() RosettaNetResponseTypePtrOutput {
	return e.ToRosettaNetResponseTypePtrOutputWithContext(context.Background())
}

func (e RosettaNetResponseType) ToRosettaNetResponseTypePtrOutputWithContext(ctx context.Context) RosettaNetResponseTypePtrOutput {
	return RosettaNetResponseType(e).ToRosettaNetResponseTypeOutputWithContext(ctx).ToRosettaNetResponseTypePtrOutputWithContext(ctx)
}

func (e RosettaNetResponseType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RosettaNetResponseType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RosettaNetResponseType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RosettaNetResponseType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RosettaNetResponseTypeOutput struct{ *pulumi.OutputState }

func (RosettaNetResponseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RosettaNetResponseType)(nil)).Elem()
}

func (o RosettaNetResponseTypeOutput) ToRosettaNetResponseTypeOutput() RosettaNetResponseTypeOutput {
	return o
}

func (o RosettaNetResponseTypeOutput) ToRosettaNetResponseTypeOutputWithContext(ctx context.Context) RosettaNetResponseTypeOutput {
	return o
}

func (o RosettaNetResponseTypeOutput) ToRosettaNetResponseTypePtrOutput() RosettaNetResponseTypePtrOutput {
	return o.ToRosettaNetResponseTypePtrOutputWithContext(context.Background())
}

func (o RosettaNetResponseTypeOutput) ToRosettaNetResponseTypePtrOutputWithContext(ctx context.Context) RosettaNetResponseTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RosettaNetResponseType) *RosettaNetResponseType {
		return &v
	}).(RosettaNetResponseTypePtrOutput)
}

func (o RosettaNetResponseTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RosettaNetResponseTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RosettaNetResponseType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RosettaNetResponseTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RosettaNetResponseTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RosettaNetResponseType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RosettaNetResponseTypePtrOutput struct{ *pulumi.OutputState }

func (RosettaNetResponseTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RosettaNetResponseType)(nil)).Elem()
}

func (o RosettaNetResponseTypePtrOutput) ToRosettaNetResponseTypePtrOutput() RosettaNetResponseTypePtrOutput {
	return o
}

func (o RosettaNetResponseTypePtrOutput) ToRosettaNetResponseTypePtrOutputWithContext(ctx context.Context) RosettaNetResponseTypePtrOutput {
	return o
}

func (o RosettaNetResponseTypePtrOutput) Elem() RosettaNetResponseTypeOutput {
	return o.ApplyT(func(v *RosettaNetResponseType) RosettaNetResponseType {
		if v != nil {
			return *v
		}
		var ret RosettaNetResponseType
		return ret
	}).(RosettaNetResponseTypeOutput)
}

func (o RosettaNetResponseTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RosettaNetResponseTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RosettaNetResponseType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RosettaNetResponseTypeInput is an input type that accepts RosettaNetResponseTypeArgs and RosettaNetResponseTypeOutput values.
// You can construct a concrete instance of `RosettaNetResponseTypeInput` via:
//
//	RosettaNetResponseTypeArgs{...}
type RosettaNetResponseTypeInput interface {
	pulumi.Input

	ToRosettaNetResponseTypeOutput() RosettaNetResponseTypeOutput
	ToRosettaNetResponseTypeOutputWithContext(context.Context) RosettaNetResponseTypeOutput
}

var rosettaNetResponseTypePtrType = reflect.TypeOf((**RosettaNetResponseType)(nil)).Elem()

type RosettaNetResponseTypePtrInput interface {
	pulumi.Input

	ToRosettaNetResponseTypePtrOutput() RosettaNetResponseTypePtrOutput
	ToRosettaNetResponseTypePtrOutputWithContext(context.Context) RosettaNetResponseTypePtrOutput
}

type rosettaNetResponseTypePtr string

func RosettaNetResponseTypePtr(v string) RosettaNetResponseTypePtrInput {
	return (*rosettaNetResponseTypePtr)(&v)
}

func (*rosettaNetResponseTypePtr) ElementType() reflect.Type {
	return rosettaNetResponseTypePtrType
}

func (in *rosettaNetResponseTypePtr) ToRosettaNetResponseTypePtrOutput() RosettaNetResponseTypePtrOutput {
	return pulumi.ToOutput(in).(RosettaNetResponseTypePtrOutput)
}

func (in *rosettaNetResponseTypePtr) ToRosettaNetResponseTypePtrOutputWithContext(ctx context.Context) RosettaNetResponseTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RosettaNetResponseTypePtrOutput)
}

// The schema type.
type SchemaType string

const (
	SchemaTypeNotSpecified = SchemaType("NotSpecified")
	SchemaTypeXml          = SchemaType("Xml")
)

// The segment terminator suffix.
type SegmentTerminatorSuffix string

const (
	SegmentTerminatorSuffixNotSpecified = SegmentTerminatorSuffix("NotSpecified")
	SegmentTerminatorSuffixNone         = SegmentTerminatorSuffix("None")
	SegmentTerminatorSuffixCR           = SegmentTerminatorSuffix("CR")
	SegmentTerminatorSuffixLF           = SegmentTerminatorSuffix("LF")
	SegmentTerminatorSuffixCRLF         = SegmentTerminatorSuffix("CRLF")
)

func (SegmentTerminatorSuffix) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentTerminatorSuffix)(nil)).Elem()
}

func (e SegmentTerminatorSuffix) ToSegmentTerminatorSuffixOutput() SegmentTerminatorSuffixOutput {
	return pulumi.ToOutput(e).(SegmentTerminatorSuffixOutput)
}

func (e SegmentTerminatorSuffix) ToSegmentTerminatorSuffixOutputWithContext(ctx context.Context) SegmentTerminatorSuffixOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SegmentTerminatorSuffixOutput)
}

func (e SegmentTerminatorSuffix) ToSegmentTerminatorSuffixPtrOutput() SegmentTerminatorSuffixPtrOutput {
	return e.ToSegmentTerminatorSuffixPtrOutputWithContext(context.Background())
}

func (e SegmentTerminatorSuffix) ToSegmentTerminatorSuffixPtrOutputWithContext(ctx context.Context) SegmentTerminatorSuffixPtrOutput {
	return SegmentTerminatorSuffix(e).ToSegmentTerminatorSuffixOutputWithContext(ctx).ToSegmentTerminatorSuffixPtrOutputWithContext(ctx)
}

func (e SegmentTerminatorSuffix) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SegmentTerminatorSuffix) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SegmentTerminatorSuffix) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SegmentTerminatorSuffix) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SegmentTerminatorSuffixOutput struct{ *pulumi.OutputState }

func (SegmentTerminatorSuffixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentTerminatorSuffix)(nil)).Elem()
}

func (o SegmentTerminatorSuffixOutput) ToSegmentTerminatorSuffixOutput() SegmentTerminatorSuffixOutput {
	return o
}

func (o SegmentTerminatorSuffixOutput) ToSegmentTerminatorSuffixOutputWithContext(ctx context.Context) SegmentTerminatorSuffixOutput {
	return o
}

func (o SegmentTerminatorSuffixOutput) ToSegmentTerminatorSuffixPtrOutput() SegmentTerminatorSuffixPtrOutput {
	return o.ToSegmentTerminatorSuffixPtrOutputWithContext(context.Background())
}

func (o SegmentTerminatorSuffixOutput) ToSegmentTerminatorSuffixPtrOutputWithContext(ctx context.Context) SegmentTerminatorSuffixPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SegmentTerminatorSuffix) *SegmentTerminatorSuffix {
		return &v
	}).(SegmentTerminatorSuffixPtrOutput)
}

func (o SegmentTerminatorSuffixOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SegmentTerminatorSuffixOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SegmentTerminatorSuffix) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SegmentTerminatorSuffixOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SegmentTerminatorSuffixOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SegmentTerminatorSuffix) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SegmentTerminatorSuffixPtrOutput struct{ *pulumi.OutputState }

func (SegmentTerminatorSuffixPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentTerminatorSuffix)(nil)).Elem()
}

func (o SegmentTerminatorSuffixPtrOutput) ToSegmentTerminatorSuffixPtrOutput() SegmentTerminatorSuffixPtrOutput {
	return o
}

func (o SegmentTerminatorSuffixPtrOutput) ToSegmentTerminatorSuffixPtrOutputWithContext(ctx context.Context) SegmentTerminatorSuffixPtrOutput {
	return o
}

func (o SegmentTerminatorSuffixPtrOutput) Elem() SegmentTerminatorSuffixOutput {
	return o.ApplyT(func(v *SegmentTerminatorSuffix) SegmentTerminatorSuffix {
		if v != nil {
			return *v
		}
		var ret SegmentTerminatorSuffix
		return ret
	}).(SegmentTerminatorSuffixOutput)
}

func (o SegmentTerminatorSuffixPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SegmentTerminatorSuffixPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SegmentTerminatorSuffix) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SegmentTerminatorSuffixInput is an input type that accepts SegmentTerminatorSuffixArgs and SegmentTerminatorSuffixOutput values.
// You can construct a concrete instance of `SegmentTerminatorSuffixInput` via:
//
//	SegmentTerminatorSuffixArgs{...}
type SegmentTerminatorSuffixInput interface {
	pulumi.Input

	ToSegmentTerminatorSuffixOutput() SegmentTerminatorSuffixOutput
	ToSegmentTerminatorSuffixOutputWithContext(context.Context) SegmentTerminatorSuffixOutput
}

var segmentTerminatorSuffixPtrType = reflect.TypeOf((**SegmentTerminatorSuffix)(nil)).Elem()

type SegmentTerminatorSuffixPtrInput interface {
	pulumi.Input

	ToSegmentTerminatorSuffixPtrOutput() SegmentTerminatorSuffixPtrOutput
	ToSegmentTerminatorSuffixPtrOutputWithContext(context.Context) SegmentTerminatorSuffixPtrOutput
}

type segmentTerminatorSuffixPtr string

func SegmentTerminatorSuffixPtr(v string) SegmentTerminatorSuffixPtrInput {
	return (*segmentTerminatorSuffixPtr)(&v)
}

func (*segmentTerminatorSuffixPtr) ElementType() reflect.Type {
	return segmentTerminatorSuffixPtrType
}

func (in *segmentTerminatorSuffixPtr) ToSegmentTerminatorSuffixPtrOutput() SegmentTerminatorSuffixPtrOutput {
	return pulumi.ToOutput(in).(SegmentTerminatorSuffixPtrOutput)
}

func (in *segmentTerminatorSuffixPtr) ToSegmentTerminatorSuffixPtrOutputWithContext(ctx context.Context) SegmentTerminatorSuffixPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SegmentTerminatorSuffixPtrOutput)
}

// The signing algorithm.
type SigningAlgorithm string

const (
	SigningAlgorithmNotSpecified = SigningAlgorithm("NotSpecified")
	SigningAlgorithmDefault      = SigningAlgorithm("Default")
	SigningAlgorithmSHA1         = SigningAlgorithm("SHA1")
	SigningAlgorithmSHA2256      = SigningAlgorithm("SHA2256")
	SigningAlgorithmSHA2384      = SigningAlgorithm("SHA2384")
	SigningAlgorithmSHA2512      = SigningAlgorithm("SHA2512")
)

// The trailing separator policy.
type TrailingSeparatorPolicy string

const (
	TrailingSeparatorPolicyNotSpecified = TrailingSeparatorPolicy("NotSpecified")
	TrailingSeparatorPolicyNotAllowed   = TrailingSeparatorPolicy("NotAllowed")
	TrailingSeparatorPolicyOptional     = TrailingSeparatorPolicy("Optional")
	TrailingSeparatorPolicyMandatory    = TrailingSeparatorPolicy("Mandatory")
)

// The usage indicator.
type UsageIndicator string

const (
	UsageIndicatorNotSpecified = UsageIndicator("NotSpecified")
	UsageIndicatorTest         = UsageIndicator("Test")
	UsageIndicatorInformation  = UsageIndicator("Information")
	UsageIndicatorProduction   = UsageIndicator("Production")
)

// The provisioning state.
type WorkflowProvisioningState string

const (
	WorkflowProvisioningStateNotSpecified  = WorkflowProvisioningState("NotSpecified")
	WorkflowProvisioningStateAccepted      = WorkflowProvisioningState("Accepted")
	WorkflowProvisioningStateRunning       = WorkflowProvisioningState("Running")
	WorkflowProvisioningStateReady         = WorkflowProvisioningState("Ready")
	WorkflowProvisioningStateCreating      = WorkflowProvisioningState("Creating")
	WorkflowProvisioningStateCreated       = WorkflowProvisioningState("Created")
	WorkflowProvisioningStateDeleting      = WorkflowProvisioningState("Deleting")
	WorkflowProvisioningStateDeleted       = WorkflowProvisioningState("Deleted")
	WorkflowProvisioningStateCanceled      = WorkflowProvisioningState("Canceled")
	WorkflowProvisioningStateFailed        = WorkflowProvisioningState("Failed")
	WorkflowProvisioningStateSucceeded     = WorkflowProvisioningState("Succeeded")
	WorkflowProvisioningStateMoving        = WorkflowProvisioningState("Moving")
	WorkflowProvisioningStateUpdating      = WorkflowProvisioningState("Updating")
	WorkflowProvisioningStateRegistering   = WorkflowProvisioningState("Registering")
	WorkflowProvisioningStateRegistered    = WorkflowProvisioningState("Registered")
	WorkflowProvisioningStateUnregistering = WorkflowProvisioningState("Unregistering")
	WorkflowProvisioningStateUnregistered  = WorkflowProvisioningState("Unregistered")
	WorkflowProvisioningStateCompleted     = WorkflowProvisioningState("Completed")
	WorkflowProvisioningStateRenewing      = WorkflowProvisioningState("Renewing")
	WorkflowProvisioningStatePending       = WorkflowProvisioningState("Pending")
	WorkflowProvisioningStateWaiting       = WorkflowProvisioningState("Waiting")
	WorkflowProvisioningStateInProgress    = WorkflowProvisioningState("InProgress")
)

// The state.
type WorkflowStateEnum string

const (
	WorkflowStateEnumNotSpecified = WorkflowStateEnum("NotSpecified")
	WorkflowStateEnumCompleted    = WorkflowStateEnum("Completed")
	WorkflowStateEnumEnabled      = WorkflowStateEnum("Enabled")
	WorkflowStateEnumDisabled     = WorkflowStateEnum("Disabled")
	WorkflowStateEnumDeleted      = WorkflowStateEnum("Deleted")
	WorkflowStateEnumSuspended    = WorkflowStateEnum("Suspended")
)

// The X12 character set.
type X12CharacterSet string

const (
	X12CharacterSetNotSpecified = X12CharacterSet("NotSpecified")
	X12CharacterSetBasic        = X12CharacterSet("Basic")
	X12CharacterSetExtended     = X12CharacterSet("Extended")
	X12CharacterSetUTF8         = X12CharacterSet("UTF8")
)

// The group header date format.
type X12DateFormat string

const (
	X12DateFormatNotSpecified = X12DateFormat("NotSpecified")
	X12DateFormatCCYYMMDD     = X12DateFormat("CCYYMMDD")
	X12DateFormatYYMMDD       = X12DateFormat("YYMMDD")
)

// The group header time format.
type X12TimeFormat string

const (
	X12TimeFormatNotSpecified = X12TimeFormat("NotSpecified")
	X12TimeFormatHHMM         = X12TimeFormat("HHMM")
	X12TimeFormatHHMMSS       = X12TimeFormat("HHMMSS")
	X12TimeFormatHHMMSSdd     = X12TimeFormat("HHMMSSdd")
	X12TimeFormatHHMMSSd      = X12TimeFormat("HHMMSSd")
)

func init() {
	pulumi.RegisterOutputType(AgreementTypeOutput{})
	pulumi.RegisterOutputType(AgreementTypePtrOutput{})
	pulumi.RegisterOutputType(DayOfWeekOutput{})
	pulumi.RegisterOutputType(DayOfWeekPtrOutput{})
	pulumi.RegisterOutputType(DaysOfWeekOutput{})
	pulumi.RegisterOutputType(DaysOfWeekPtrOutput{})
	pulumi.RegisterOutputType(DaysOfWeekArrayOutput{})
	pulumi.RegisterOutputType(EdifactDecimalIndicatorOutput{})
	pulumi.RegisterOutputType(EdifactDecimalIndicatorPtrOutput{})
	pulumi.RegisterOutputType(RosettaNetActionTypeOutput{})
	pulumi.RegisterOutputType(RosettaNetActionTypePtrOutput{})
	pulumi.RegisterOutputType(RosettaNetPipActivityTypeOutput{})
	pulumi.RegisterOutputType(RosettaNetPipActivityTypePtrOutput{})
	pulumi.RegisterOutputType(RosettaNetPipConfidentialityScopeOutput{})
	pulumi.RegisterOutputType(RosettaNetPipConfidentialityScopePtrOutput{})
	pulumi.RegisterOutputType(RosettaNetPipRoleTypeOutput{})
	pulumi.RegisterOutputType(RosettaNetPipRoleTypePtrOutput{})
	pulumi.RegisterOutputType(RosettaNetResponseTypeOutput{})
	pulumi.RegisterOutputType(RosettaNetResponseTypePtrOutput{})
	pulumi.RegisterOutputType(SegmentTerminatorSuffixOutput{})
	pulumi.RegisterOutputType(SegmentTerminatorSuffixPtrOutput{})
}
