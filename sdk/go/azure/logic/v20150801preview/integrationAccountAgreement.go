// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20150801preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type IntegrationAccountAgreement struct {
	pulumi.CustomResourceState

	// The agreement type.
	AgreementType pulumi.StringPtrOutput `pulumi:"agreementType"`
	// The changed time.
	ChangedTime pulumi.StringOutput `pulumi:"changedTime"`
	// The agreement content.
	Content AgreementContentResponsePtrOutput `pulumi:"content"`
	// The created time.
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// The guest identity.
	GuestIdentity BusinessIdentityResponsePtrOutput `pulumi:"guestIdentity"`
	// The guest partner.
	GuestPartner pulumi.StringPtrOutput `pulumi:"guestPartner"`
	// The host identity.
	HostIdentity BusinessIdentityResponsePtrOutput `pulumi:"hostIdentity"`
	// The host partner.
	HostPartner pulumi.StringPtrOutput `pulumi:"hostPartner"`
	// The resource location.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The metadata.
	Metadata pulumi.AnyOutput `pulumi:"metadata"`
	// The resource name.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The resource type.
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewIntegrationAccountAgreement registers a new resource with the given unique name, arguments, and options.
func NewIntegrationAccountAgreement(ctx *pulumi.Context,
	name string, args *IntegrationAccountAgreementArgs, opts ...pulumi.ResourceOption) (*IntegrationAccountAgreement, error) {
	if args == nil || args.AgreementName == nil {
		return nil, errors.New("missing required argument 'AgreementName'")
	}
	if args == nil || args.IntegrationAccountName == nil {
		return nil, errors.New("missing required argument 'IntegrationAccountName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &IntegrationAccountAgreementArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:logic/latest:IntegrationAccountAgreement"),
		},
		{
			Type: pulumi.String("azure-nextgen:logic/v20160601:IntegrationAccountAgreement"),
		},
		{
			Type: pulumi.String("azure-nextgen:logic/v20180701preview:IntegrationAccountAgreement"),
		},
		{
			Type: pulumi.String("azure-nextgen:logic/v20190501:IntegrationAccountAgreement"),
		},
	})
	opts = append(opts, aliases)
	var resource IntegrationAccountAgreement
	err := ctx.RegisterResource("azure-nextgen:logic/v20150801preview:IntegrationAccountAgreement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationAccountAgreement gets an existing IntegrationAccountAgreement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationAccountAgreement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationAccountAgreementState, opts ...pulumi.ResourceOption) (*IntegrationAccountAgreement, error) {
	var resource IntegrationAccountAgreement
	err := ctx.ReadResource("azure-nextgen:logic/v20150801preview:IntegrationAccountAgreement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationAccountAgreement resources.
type integrationAccountAgreementState struct {
	// The agreement type.
	AgreementType *string `pulumi:"agreementType"`
	// The changed time.
	ChangedTime *string `pulumi:"changedTime"`
	// The agreement content.
	Content *AgreementContentResponse `pulumi:"content"`
	// The created time.
	CreatedTime *string `pulumi:"createdTime"`
	// The guest identity.
	GuestIdentity *BusinessIdentityResponse `pulumi:"guestIdentity"`
	// The guest partner.
	GuestPartner *string `pulumi:"guestPartner"`
	// The host identity.
	HostIdentity *BusinessIdentityResponse `pulumi:"hostIdentity"`
	// The host partner.
	HostPartner *string `pulumi:"hostPartner"`
	// The resource location.
	Location *string `pulumi:"location"`
	// The metadata.
	Metadata interface{} `pulumi:"metadata"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The resource type.
	Type *string `pulumi:"type"`
}

type IntegrationAccountAgreementState struct {
	// The agreement type.
	AgreementType pulumi.StringPtrInput
	// The changed time.
	ChangedTime pulumi.StringPtrInput
	// The agreement content.
	Content AgreementContentResponsePtrInput
	// The created time.
	CreatedTime pulumi.StringPtrInput
	// The guest identity.
	GuestIdentity BusinessIdentityResponsePtrInput
	// The guest partner.
	GuestPartner pulumi.StringPtrInput
	// The host identity.
	HostIdentity BusinessIdentityResponsePtrInput
	// The host partner.
	HostPartner pulumi.StringPtrInput
	// The resource location.
	Location pulumi.StringPtrInput
	// The metadata.
	Metadata pulumi.Input
	// The resource name.
	Name pulumi.StringPtrInput
	// The resource tags.
	Tags pulumi.StringMapInput
	// The resource type.
	Type pulumi.StringPtrInput
}

func (IntegrationAccountAgreementState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationAccountAgreementState)(nil)).Elem()
}

type integrationAccountAgreementArgs struct {
	// The integration account agreement name.
	AgreementName string `pulumi:"agreementName"`
	// The agreement type.
	AgreementType *string `pulumi:"agreementType"`
	// The agreement content.
	Content *AgreementContent `pulumi:"content"`
	// The guest identity.
	GuestIdentity *BusinessIdentity `pulumi:"guestIdentity"`
	// The guest partner.
	GuestPartner *string `pulumi:"guestPartner"`
	// The host identity.
	HostIdentity *BusinessIdentity `pulumi:"hostIdentity"`
	// The host partner.
	HostPartner *string `pulumi:"hostPartner"`
	// The resource id.
	Id *string `pulumi:"id"`
	// The integration account name.
	IntegrationAccountName string `pulumi:"integrationAccountName"`
	// The resource location.
	Location *string `pulumi:"location"`
	// The metadata.
	Metadata interface{} `pulumi:"metadata"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The resource type.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a IntegrationAccountAgreement resource.
type IntegrationAccountAgreementArgs struct {
	// The integration account agreement name.
	AgreementName pulumi.StringInput
	// The agreement type.
	AgreementType pulumi.StringPtrInput
	// The agreement content.
	Content AgreementContentPtrInput
	// The guest identity.
	GuestIdentity BusinessIdentityPtrInput
	// The guest partner.
	GuestPartner pulumi.StringPtrInput
	// The host identity.
	HostIdentity BusinessIdentityPtrInput
	// The host partner.
	HostPartner pulumi.StringPtrInput
	// The resource id.
	Id pulumi.StringPtrInput
	// The integration account name.
	IntegrationAccountName pulumi.StringInput
	// The resource location.
	Location pulumi.StringPtrInput
	// The metadata.
	Metadata pulumi.Input
	// The resource name.
	Name pulumi.StringPtrInput
	// The resource group name.
	ResourceGroupName pulumi.StringInput
	// The resource tags.
	Tags pulumi.StringMapInput
	// The resource type.
	Type pulumi.StringPtrInput
}

func (IntegrationAccountAgreementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationAccountAgreementArgs)(nil)).Elem()
}
