// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20150801preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupIntegrationAccountMap(ctx *pulumi.Context, args *LookupIntegrationAccountMapArgs, opts ...pulumi.InvokeOption) (*LookupIntegrationAccountMapResult, error) {
	var rv LookupIntegrationAccountMapResult
	err := ctx.Invoke("azure-native:logic/v20150801preview:getIntegrationAccountMap", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupIntegrationAccountMapArgs struct {
	// The integration account name.
	IntegrationAccountName string `pulumi:"integrationAccountName"`
	// The integration account map name.
	MapName string `pulumi:"mapName"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

type LookupIntegrationAccountMapResult struct {
	// The changed time.
	ChangedTime string `pulumi:"changedTime"`
	// The content.
	Content interface{} `pulumi:"content"`
	// The content link.
	ContentLink IntegrationAccountContentLinkResponse `pulumi:"contentLink"`
	// The content type.
	ContentType *string `pulumi:"contentType"`
	// The created time.
	CreatedTime string `pulumi:"createdTime"`
	// The resource id.
	Id *string `pulumi:"id"`
	// The resource location.
	Location *string `pulumi:"location"`
	// The map type.
	MapType *string `pulumi:"mapType"`
	// The metadata.
	Metadata interface{} `pulumi:"metadata"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The resource type.
	Type *string `pulumi:"type"`
}

func LookupIntegrationAccountMapOutput(ctx *pulumi.Context, args LookupIntegrationAccountMapOutputArgs, opts ...pulumi.InvokeOption) LookupIntegrationAccountMapResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIntegrationAccountMapResult, error) {
			args := v.(LookupIntegrationAccountMapArgs)
			r, err := LookupIntegrationAccountMap(ctx, &args, opts...)
			var s LookupIntegrationAccountMapResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIntegrationAccountMapResultOutput)
}

type LookupIntegrationAccountMapOutputArgs struct {
	// The integration account name.
	IntegrationAccountName pulumi.StringInput `pulumi:"integrationAccountName"`
	// The integration account map name.
	MapName pulumi.StringInput `pulumi:"mapName"`
	// The resource group name.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupIntegrationAccountMapOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIntegrationAccountMapArgs)(nil)).Elem()
}

type LookupIntegrationAccountMapResultOutput struct{ *pulumi.OutputState }

func (LookupIntegrationAccountMapResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIntegrationAccountMapResult)(nil)).Elem()
}

func (o LookupIntegrationAccountMapResultOutput) ToLookupIntegrationAccountMapResultOutput() LookupIntegrationAccountMapResultOutput {
	return o
}

func (o LookupIntegrationAccountMapResultOutput) ToLookupIntegrationAccountMapResultOutputWithContext(ctx context.Context) LookupIntegrationAccountMapResultOutput {
	return o
}

// The changed time.
func (o LookupIntegrationAccountMapResultOutput) ChangedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIntegrationAccountMapResult) string { return v.ChangedTime }).(pulumi.StringOutput)
}

// The content.
func (o LookupIntegrationAccountMapResultOutput) Content() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupIntegrationAccountMapResult) interface{} { return v.Content }).(pulumi.AnyOutput)
}

// The content link.
func (o LookupIntegrationAccountMapResultOutput) ContentLink() IntegrationAccountContentLinkResponseOutput {
	return o.ApplyT(func(v LookupIntegrationAccountMapResult) IntegrationAccountContentLinkResponse { return v.ContentLink }).(IntegrationAccountContentLinkResponseOutput)
}

// The content type.
func (o LookupIntegrationAccountMapResultOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIntegrationAccountMapResult) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// The created time.
func (o LookupIntegrationAccountMapResultOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIntegrationAccountMapResult) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// The resource id.
func (o LookupIntegrationAccountMapResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIntegrationAccountMapResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The resource location.
func (o LookupIntegrationAccountMapResultOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIntegrationAccountMapResult) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The map type.
func (o LookupIntegrationAccountMapResultOutput) MapType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIntegrationAccountMapResult) *string { return v.MapType }).(pulumi.StringPtrOutput)
}

// The metadata.
func (o LookupIntegrationAccountMapResultOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupIntegrationAccountMapResult) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

// The resource name.
func (o LookupIntegrationAccountMapResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIntegrationAccountMapResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource tags.
func (o LookupIntegrationAccountMapResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupIntegrationAccountMapResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The resource type.
func (o LookupIntegrationAccountMapResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIntegrationAccountMapResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIntegrationAccountMapResultOutput{})
}
