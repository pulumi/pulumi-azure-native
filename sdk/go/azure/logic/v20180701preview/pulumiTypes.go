// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180701preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The AS2 agreement acknowledgement connection settings.
type AS2AcknowledgementConnectionSettings struct {
	// The value indicating whether to ignore mismatch in certificate name.
	IgnoreCertificateNameMismatch bool `pulumi:"ignoreCertificateNameMismatch"`
	// The value indicating whether to keep the connection alive.
	KeepHttpConnectionAlive bool `pulumi:"keepHttpConnectionAlive"`
	// The value indicating whether to support HTTP status code 'CONTINUE'.
	SupportHttpStatusCodeContinue bool `pulumi:"supportHttpStatusCodeContinue"`
	// The value indicating whether to unfold the HTTP headers.
	UnfoldHttpHeaders bool `pulumi:"unfoldHttpHeaders"`
}

// AS2AcknowledgementConnectionSettingsInput is an input type that accepts AS2AcknowledgementConnectionSettingsArgs and AS2AcknowledgementConnectionSettingsOutput values.
// You can construct a concrete instance of `AS2AcknowledgementConnectionSettingsInput` via:
//
//          AS2AcknowledgementConnectionSettingsArgs{...}
type AS2AcknowledgementConnectionSettingsInput interface {
	pulumi.Input

	ToAS2AcknowledgementConnectionSettingsOutput() AS2AcknowledgementConnectionSettingsOutput
	ToAS2AcknowledgementConnectionSettingsOutputWithContext(context.Context) AS2AcknowledgementConnectionSettingsOutput
}

// The AS2 agreement acknowledgement connection settings.
type AS2AcknowledgementConnectionSettingsArgs struct {
	// The value indicating whether to ignore mismatch in certificate name.
	IgnoreCertificateNameMismatch pulumi.BoolInput `pulumi:"ignoreCertificateNameMismatch"`
	// The value indicating whether to keep the connection alive.
	KeepHttpConnectionAlive pulumi.BoolInput `pulumi:"keepHttpConnectionAlive"`
	// The value indicating whether to support HTTP status code 'CONTINUE'.
	SupportHttpStatusCodeContinue pulumi.BoolInput `pulumi:"supportHttpStatusCodeContinue"`
	// The value indicating whether to unfold the HTTP headers.
	UnfoldHttpHeaders pulumi.BoolInput `pulumi:"unfoldHttpHeaders"`
}

func (AS2AcknowledgementConnectionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2AcknowledgementConnectionSettings)(nil)).Elem()
}

func (i AS2AcknowledgementConnectionSettingsArgs) ToAS2AcknowledgementConnectionSettingsOutput() AS2AcknowledgementConnectionSettingsOutput {
	return i.ToAS2AcknowledgementConnectionSettingsOutputWithContext(context.Background())
}

func (i AS2AcknowledgementConnectionSettingsArgs) ToAS2AcknowledgementConnectionSettingsOutputWithContext(ctx context.Context) AS2AcknowledgementConnectionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2AcknowledgementConnectionSettingsOutput)
}

func (i AS2AcknowledgementConnectionSettingsArgs) ToAS2AcknowledgementConnectionSettingsPtrOutput() AS2AcknowledgementConnectionSettingsPtrOutput {
	return i.ToAS2AcknowledgementConnectionSettingsPtrOutputWithContext(context.Background())
}

func (i AS2AcknowledgementConnectionSettingsArgs) ToAS2AcknowledgementConnectionSettingsPtrOutputWithContext(ctx context.Context) AS2AcknowledgementConnectionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2AcknowledgementConnectionSettingsOutput).ToAS2AcknowledgementConnectionSettingsPtrOutputWithContext(ctx)
}

// AS2AcknowledgementConnectionSettingsPtrInput is an input type that accepts AS2AcknowledgementConnectionSettingsArgs, AS2AcknowledgementConnectionSettingsPtr and AS2AcknowledgementConnectionSettingsPtrOutput values.
// You can construct a concrete instance of `AS2AcknowledgementConnectionSettingsPtrInput` via:
//
//          AS2AcknowledgementConnectionSettingsArgs{...}
//
//  or:
//
//          nil
type AS2AcknowledgementConnectionSettingsPtrInput interface {
	pulumi.Input

	ToAS2AcknowledgementConnectionSettingsPtrOutput() AS2AcknowledgementConnectionSettingsPtrOutput
	ToAS2AcknowledgementConnectionSettingsPtrOutputWithContext(context.Context) AS2AcknowledgementConnectionSettingsPtrOutput
}

type as2acknowledgementConnectionSettingsPtrType AS2AcknowledgementConnectionSettingsArgs

func AS2AcknowledgementConnectionSettingsPtr(v *AS2AcknowledgementConnectionSettingsArgs) AS2AcknowledgementConnectionSettingsPtrInput {
	return (*as2acknowledgementConnectionSettingsPtrType)(v)
}

func (*as2acknowledgementConnectionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2AcknowledgementConnectionSettings)(nil)).Elem()
}

func (i *as2acknowledgementConnectionSettingsPtrType) ToAS2AcknowledgementConnectionSettingsPtrOutput() AS2AcknowledgementConnectionSettingsPtrOutput {
	return i.ToAS2AcknowledgementConnectionSettingsPtrOutputWithContext(context.Background())
}

func (i *as2acknowledgementConnectionSettingsPtrType) ToAS2AcknowledgementConnectionSettingsPtrOutputWithContext(ctx context.Context) AS2AcknowledgementConnectionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2AcknowledgementConnectionSettingsPtrOutput)
}

// The AS2 agreement acknowledgement connection settings.
type AS2AcknowledgementConnectionSettingsOutput struct{ *pulumi.OutputState }

func (AS2AcknowledgementConnectionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2AcknowledgementConnectionSettings)(nil)).Elem()
}

func (o AS2AcknowledgementConnectionSettingsOutput) ToAS2AcknowledgementConnectionSettingsOutput() AS2AcknowledgementConnectionSettingsOutput {
	return o
}

func (o AS2AcknowledgementConnectionSettingsOutput) ToAS2AcknowledgementConnectionSettingsOutputWithContext(ctx context.Context) AS2AcknowledgementConnectionSettingsOutput {
	return o
}

func (o AS2AcknowledgementConnectionSettingsOutput) ToAS2AcknowledgementConnectionSettingsPtrOutput() AS2AcknowledgementConnectionSettingsPtrOutput {
	return o.ToAS2AcknowledgementConnectionSettingsPtrOutputWithContext(context.Background())
}

func (o AS2AcknowledgementConnectionSettingsOutput) ToAS2AcknowledgementConnectionSettingsPtrOutputWithContext(ctx context.Context) AS2AcknowledgementConnectionSettingsPtrOutput {
	return o.ApplyT(func(v AS2AcknowledgementConnectionSettings) *AS2AcknowledgementConnectionSettings {
		return &v
	}).(AS2AcknowledgementConnectionSettingsPtrOutput)
}

// The value indicating whether to ignore mismatch in certificate name.
func (o AS2AcknowledgementConnectionSettingsOutput) IgnoreCertificateNameMismatch() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2AcknowledgementConnectionSettings) bool { return v.IgnoreCertificateNameMismatch }).(pulumi.BoolOutput)
}

// The value indicating whether to keep the connection alive.
func (o AS2AcknowledgementConnectionSettingsOutput) KeepHttpConnectionAlive() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2AcknowledgementConnectionSettings) bool { return v.KeepHttpConnectionAlive }).(pulumi.BoolOutput)
}

// The value indicating whether to support HTTP status code 'CONTINUE'.
func (o AS2AcknowledgementConnectionSettingsOutput) SupportHttpStatusCodeContinue() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2AcknowledgementConnectionSettings) bool { return v.SupportHttpStatusCodeContinue }).(pulumi.BoolOutput)
}

// The value indicating whether to unfold the HTTP headers.
func (o AS2AcknowledgementConnectionSettingsOutput) UnfoldHttpHeaders() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2AcknowledgementConnectionSettings) bool { return v.UnfoldHttpHeaders }).(pulumi.BoolOutput)
}

type AS2AcknowledgementConnectionSettingsPtrOutput struct{ *pulumi.OutputState }

func (AS2AcknowledgementConnectionSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2AcknowledgementConnectionSettings)(nil)).Elem()
}

func (o AS2AcknowledgementConnectionSettingsPtrOutput) ToAS2AcknowledgementConnectionSettingsPtrOutput() AS2AcknowledgementConnectionSettingsPtrOutput {
	return o
}

func (o AS2AcknowledgementConnectionSettingsPtrOutput) ToAS2AcknowledgementConnectionSettingsPtrOutputWithContext(ctx context.Context) AS2AcknowledgementConnectionSettingsPtrOutput {
	return o
}

func (o AS2AcknowledgementConnectionSettingsPtrOutput) Elem() AS2AcknowledgementConnectionSettingsOutput {
	return o.ApplyT(func(v *AS2AcknowledgementConnectionSettings) AS2AcknowledgementConnectionSettings { return *v }).(AS2AcknowledgementConnectionSettingsOutput)
}

// The value indicating whether to ignore mismatch in certificate name.
func (o AS2AcknowledgementConnectionSettingsPtrOutput) IgnoreCertificateNameMismatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2AcknowledgementConnectionSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.IgnoreCertificateNameMismatch
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to keep the connection alive.
func (o AS2AcknowledgementConnectionSettingsPtrOutput) KeepHttpConnectionAlive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2AcknowledgementConnectionSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.KeepHttpConnectionAlive
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to support HTTP status code 'CONTINUE'.
func (o AS2AcknowledgementConnectionSettingsPtrOutput) SupportHttpStatusCodeContinue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2AcknowledgementConnectionSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.SupportHttpStatusCodeContinue
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to unfold the HTTP headers.
func (o AS2AcknowledgementConnectionSettingsPtrOutput) UnfoldHttpHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2AcknowledgementConnectionSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.UnfoldHttpHeaders
	}).(pulumi.BoolPtrOutput)
}

// The AS2 agreement acknowledgement connection settings.
type AS2AcknowledgementConnectionSettingsResponse struct {
	// The value indicating whether to ignore mismatch in certificate name.
	IgnoreCertificateNameMismatch bool `pulumi:"ignoreCertificateNameMismatch"`
	// The value indicating whether to keep the connection alive.
	KeepHttpConnectionAlive bool `pulumi:"keepHttpConnectionAlive"`
	// The value indicating whether to support HTTP status code 'CONTINUE'.
	SupportHttpStatusCodeContinue bool `pulumi:"supportHttpStatusCodeContinue"`
	// The value indicating whether to unfold the HTTP headers.
	UnfoldHttpHeaders bool `pulumi:"unfoldHttpHeaders"`
}

// AS2AcknowledgementConnectionSettingsResponseInput is an input type that accepts AS2AcknowledgementConnectionSettingsResponseArgs and AS2AcknowledgementConnectionSettingsResponseOutput values.
// You can construct a concrete instance of `AS2AcknowledgementConnectionSettingsResponseInput` via:
//
//          AS2AcknowledgementConnectionSettingsResponseArgs{...}
type AS2AcknowledgementConnectionSettingsResponseInput interface {
	pulumi.Input

	ToAS2AcknowledgementConnectionSettingsResponseOutput() AS2AcknowledgementConnectionSettingsResponseOutput
	ToAS2AcknowledgementConnectionSettingsResponseOutputWithContext(context.Context) AS2AcknowledgementConnectionSettingsResponseOutput
}

// The AS2 agreement acknowledgement connection settings.
type AS2AcknowledgementConnectionSettingsResponseArgs struct {
	// The value indicating whether to ignore mismatch in certificate name.
	IgnoreCertificateNameMismatch pulumi.BoolInput `pulumi:"ignoreCertificateNameMismatch"`
	// The value indicating whether to keep the connection alive.
	KeepHttpConnectionAlive pulumi.BoolInput `pulumi:"keepHttpConnectionAlive"`
	// The value indicating whether to support HTTP status code 'CONTINUE'.
	SupportHttpStatusCodeContinue pulumi.BoolInput `pulumi:"supportHttpStatusCodeContinue"`
	// The value indicating whether to unfold the HTTP headers.
	UnfoldHttpHeaders pulumi.BoolInput `pulumi:"unfoldHttpHeaders"`
}

func (AS2AcknowledgementConnectionSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2AcknowledgementConnectionSettingsResponse)(nil)).Elem()
}

func (i AS2AcknowledgementConnectionSettingsResponseArgs) ToAS2AcknowledgementConnectionSettingsResponseOutput() AS2AcknowledgementConnectionSettingsResponseOutput {
	return i.ToAS2AcknowledgementConnectionSettingsResponseOutputWithContext(context.Background())
}

func (i AS2AcknowledgementConnectionSettingsResponseArgs) ToAS2AcknowledgementConnectionSettingsResponseOutputWithContext(ctx context.Context) AS2AcknowledgementConnectionSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2AcknowledgementConnectionSettingsResponseOutput)
}

func (i AS2AcknowledgementConnectionSettingsResponseArgs) ToAS2AcknowledgementConnectionSettingsResponsePtrOutput() AS2AcknowledgementConnectionSettingsResponsePtrOutput {
	return i.ToAS2AcknowledgementConnectionSettingsResponsePtrOutputWithContext(context.Background())
}

func (i AS2AcknowledgementConnectionSettingsResponseArgs) ToAS2AcknowledgementConnectionSettingsResponsePtrOutputWithContext(ctx context.Context) AS2AcknowledgementConnectionSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2AcknowledgementConnectionSettingsResponseOutput).ToAS2AcknowledgementConnectionSettingsResponsePtrOutputWithContext(ctx)
}

// AS2AcknowledgementConnectionSettingsResponsePtrInput is an input type that accepts AS2AcknowledgementConnectionSettingsResponseArgs, AS2AcknowledgementConnectionSettingsResponsePtr and AS2AcknowledgementConnectionSettingsResponsePtrOutput values.
// You can construct a concrete instance of `AS2AcknowledgementConnectionSettingsResponsePtrInput` via:
//
//          AS2AcknowledgementConnectionSettingsResponseArgs{...}
//
//  or:
//
//          nil
type AS2AcknowledgementConnectionSettingsResponsePtrInput interface {
	pulumi.Input

	ToAS2AcknowledgementConnectionSettingsResponsePtrOutput() AS2AcknowledgementConnectionSettingsResponsePtrOutput
	ToAS2AcknowledgementConnectionSettingsResponsePtrOutputWithContext(context.Context) AS2AcknowledgementConnectionSettingsResponsePtrOutput
}

type as2acknowledgementConnectionSettingsResponsePtrType AS2AcknowledgementConnectionSettingsResponseArgs

func AS2AcknowledgementConnectionSettingsResponsePtr(v *AS2AcknowledgementConnectionSettingsResponseArgs) AS2AcknowledgementConnectionSettingsResponsePtrInput {
	return (*as2acknowledgementConnectionSettingsResponsePtrType)(v)
}

func (*as2acknowledgementConnectionSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2AcknowledgementConnectionSettingsResponse)(nil)).Elem()
}

func (i *as2acknowledgementConnectionSettingsResponsePtrType) ToAS2AcknowledgementConnectionSettingsResponsePtrOutput() AS2AcknowledgementConnectionSettingsResponsePtrOutput {
	return i.ToAS2AcknowledgementConnectionSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *as2acknowledgementConnectionSettingsResponsePtrType) ToAS2AcknowledgementConnectionSettingsResponsePtrOutputWithContext(ctx context.Context) AS2AcknowledgementConnectionSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2AcknowledgementConnectionSettingsResponsePtrOutput)
}

// The AS2 agreement acknowledgement connection settings.
type AS2AcknowledgementConnectionSettingsResponseOutput struct{ *pulumi.OutputState }

func (AS2AcknowledgementConnectionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2AcknowledgementConnectionSettingsResponse)(nil)).Elem()
}

func (o AS2AcknowledgementConnectionSettingsResponseOutput) ToAS2AcknowledgementConnectionSettingsResponseOutput() AS2AcknowledgementConnectionSettingsResponseOutput {
	return o
}

func (o AS2AcknowledgementConnectionSettingsResponseOutput) ToAS2AcknowledgementConnectionSettingsResponseOutputWithContext(ctx context.Context) AS2AcknowledgementConnectionSettingsResponseOutput {
	return o
}

func (o AS2AcknowledgementConnectionSettingsResponseOutput) ToAS2AcknowledgementConnectionSettingsResponsePtrOutput() AS2AcknowledgementConnectionSettingsResponsePtrOutput {
	return o.ToAS2AcknowledgementConnectionSettingsResponsePtrOutputWithContext(context.Background())
}

func (o AS2AcknowledgementConnectionSettingsResponseOutput) ToAS2AcknowledgementConnectionSettingsResponsePtrOutputWithContext(ctx context.Context) AS2AcknowledgementConnectionSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2AcknowledgementConnectionSettingsResponse) *AS2AcknowledgementConnectionSettingsResponse {
		return &v
	}).(AS2AcknowledgementConnectionSettingsResponsePtrOutput)
}

// The value indicating whether to ignore mismatch in certificate name.
func (o AS2AcknowledgementConnectionSettingsResponseOutput) IgnoreCertificateNameMismatch() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2AcknowledgementConnectionSettingsResponse) bool { return v.IgnoreCertificateNameMismatch }).(pulumi.BoolOutput)
}

// The value indicating whether to keep the connection alive.
func (o AS2AcknowledgementConnectionSettingsResponseOutput) KeepHttpConnectionAlive() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2AcknowledgementConnectionSettingsResponse) bool { return v.KeepHttpConnectionAlive }).(pulumi.BoolOutput)
}

// The value indicating whether to support HTTP status code 'CONTINUE'.
func (o AS2AcknowledgementConnectionSettingsResponseOutput) SupportHttpStatusCodeContinue() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2AcknowledgementConnectionSettingsResponse) bool { return v.SupportHttpStatusCodeContinue }).(pulumi.BoolOutput)
}

// The value indicating whether to unfold the HTTP headers.
func (o AS2AcknowledgementConnectionSettingsResponseOutput) UnfoldHttpHeaders() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2AcknowledgementConnectionSettingsResponse) bool { return v.UnfoldHttpHeaders }).(pulumi.BoolOutput)
}

type AS2AcknowledgementConnectionSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2AcknowledgementConnectionSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2AcknowledgementConnectionSettingsResponse)(nil)).Elem()
}

func (o AS2AcknowledgementConnectionSettingsResponsePtrOutput) ToAS2AcknowledgementConnectionSettingsResponsePtrOutput() AS2AcknowledgementConnectionSettingsResponsePtrOutput {
	return o
}

func (o AS2AcknowledgementConnectionSettingsResponsePtrOutput) ToAS2AcknowledgementConnectionSettingsResponsePtrOutputWithContext(ctx context.Context) AS2AcknowledgementConnectionSettingsResponsePtrOutput {
	return o
}

func (o AS2AcknowledgementConnectionSettingsResponsePtrOutput) Elem() AS2AcknowledgementConnectionSettingsResponseOutput {
	return o.ApplyT(func(v *AS2AcknowledgementConnectionSettingsResponse) AS2AcknowledgementConnectionSettingsResponse {
		return *v
	}).(AS2AcknowledgementConnectionSettingsResponseOutput)
}

// The value indicating whether to ignore mismatch in certificate name.
func (o AS2AcknowledgementConnectionSettingsResponsePtrOutput) IgnoreCertificateNameMismatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2AcknowledgementConnectionSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IgnoreCertificateNameMismatch
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to keep the connection alive.
func (o AS2AcknowledgementConnectionSettingsResponsePtrOutput) KeepHttpConnectionAlive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2AcknowledgementConnectionSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.KeepHttpConnectionAlive
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to support HTTP status code 'CONTINUE'.
func (o AS2AcknowledgementConnectionSettingsResponsePtrOutput) SupportHttpStatusCodeContinue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2AcknowledgementConnectionSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.SupportHttpStatusCodeContinue
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to unfold the HTTP headers.
func (o AS2AcknowledgementConnectionSettingsResponsePtrOutput) UnfoldHttpHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2AcknowledgementConnectionSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.UnfoldHttpHeaders
	}).(pulumi.BoolPtrOutput)
}

// The integration account AS2 agreement content.
type AS2AgreementContent struct {
	// The AS2 one-way receive agreement.
	ReceiveAgreement AS2OneWayAgreement `pulumi:"receiveAgreement"`
	// The AS2 one-way send agreement.
	SendAgreement AS2OneWayAgreement `pulumi:"sendAgreement"`
}

// AS2AgreementContentInput is an input type that accepts AS2AgreementContentArgs and AS2AgreementContentOutput values.
// You can construct a concrete instance of `AS2AgreementContentInput` via:
//
//          AS2AgreementContentArgs{...}
type AS2AgreementContentInput interface {
	pulumi.Input

	ToAS2AgreementContentOutput() AS2AgreementContentOutput
	ToAS2AgreementContentOutputWithContext(context.Context) AS2AgreementContentOutput
}

// The integration account AS2 agreement content.
type AS2AgreementContentArgs struct {
	// The AS2 one-way receive agreement.
	ReceiveAgreement AS2OneWayAgreementInput `pulumi:"receiveAgreement"`
	// The AS2 one-way send agreement.
	SendAgreement AS2OneWayAgreementInput `pulumi:"sendAgreement"`
}

func (AS2AgreementContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2AgreementContent)(nil)).Elem()
}

func (i AS2AgreementContentArgs) ToAS2AgreementContentOutput() AS2AgreementContentOutput {
	return i.ToAS2AgreementContentOutputWithContext(context.Background())
}

func (i AS2AgreementContentArgs) ToAS2AgreementContentOutputWithContext(ctx context.Context) AS2AgreementContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2AgreementContentOutput)
}

func (i AS2AgreementContentArgs) ToAS2AgreementContentPtrOutput() AS2AgreementContentPtrOutput {
	return i.ToAS2AgreementContentPtrOutputWithContext(context.Background())
}

func (i AS2AgreementContentArgs) ToAS2AgreementContentPtrOutputWithContext(ctx context.Context) AS2AgreementContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2AgreementContentOutput).ToAS2AgreementContentPtrOutputWithContext(ctx)
}

// AS2AgreementContentPtrInput is an input type that accepts AS2AgreementContentArgs, AS2AgreementContentPtr and AS2AgreementContentPtrOutput values.
// You can construct a concrete instance of `AS2AgreementContentPtrInput` via:
//
//          AS2AgreementContentArgs{...}
//
//  or:
//
//          nil
type AS2AgreementContentPtrInput interface {
	pulumi.Input

	ToAS2AgreementContentPtrOutput() AS2AgreementContentPtrOutput
	ToAS2AgreementContentPtrOutputWithContext(context.Context) AS2AgreementContentPtrOutput
}

type as2agreementContentPtrType AS2AgreementContentArgs

func AS2AgreementContentPtr(v *AS2AgreementContentArgs) AS2AgreementContentPtrInput {
	return (*as2agreementContentPtrType)(v)
}

func (*as2agreementContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2AgreementContent)(nil)).Elem()
}

func (i *as2agreementContentPtrType) ToAS2AgreementContentPtrOutput() AS2AgreementContentPtrOutput {
	return i.ToAS2AgreementContentPtrOutputWithContext(context.Background())
}

func (i *as2agreementContentPtrType) ToAS2AgreementContentPtrOutputWithContext(ctx context.Context) AS2AgreementContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2AgreementContentPtrOutput)
}

// The integration account AS2 agreement content.
type AS2AgreementContentOutput struct{ *pulumi.OutputState }

func (AS2AgreementContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2AgreementContent)(nil)).Elem()
}

func (o AS2AgreementContentOutput) ToAS2AgreementContentOutput() AS2AgreementContentOutput {
	return o
}

func (o AS2AgreementContentOutput) ToAS2AgreementContentOutputWithContext(ctx context.Context) AS2AgreementContentOutput {
	return o
}

func (o AS2AgreementContentOutput) ToAS2AgreementContentPtrOutput() AS2AgreementContentPtrOutput {
	return o.ToAS2AgreementContentPtrOutputWithContext(context.Background())
}

func (o AS2AgreementContentOutput) ToAS2AgreementContentPtrOutputWithContext(ctx context.Context) AS2AgreementContentPtrOutput {
	return o.ApplyT(func(v AS2AgreementContent) *AS2AgreementContent {
		return &v
	}).(AS2AgreementContentPtrOutput)
}

// The AS2 one-way receive agreement.
func (o AS2AgreementContentOutput) ReceiveAgreement() AS2OneWayAgreementOutput {
	return o.ApplyT(func(v AS2AgreementContent) AS2OneWayAgreement { return v.ReceiveAgreement }).(AS2OneWayAgreementOutput)
}

// The AS2 one-way send agreement.
func (o AS2AgreementContentOutput) SendAgreement() AS2OneWayAgreementOutput {
	return o.ApplyT(func(v AS2AgreementContent) AS2OneWayAgreement { return v.SendAgreement }).(AS2OneWayAgreementOutput)
}

type AS2AgreementContentPtrOutput struct{ *pulumi.OutputState }

func (AS2AgreementContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2AgreementContent)(nil)).Elem()
}

func (o AS2AgreementContentPtrOutput) ToAS2AgreementContentPtrOutput() AS2AgreementContentPtrOutput {
	return o
}

func (o AS2AgreementContentPtrOutput) ToAS2AgreementContentPtrOutputWithContext(ctx context.Context) AS2AgreementContentPtrOutput {
	return o
}

func (o AS2AgreementContentPtrOutput) Elem() AS2AgreementContentOutput {
	return o.ApplyT(func(v *AS2AgreementContent) AS2AgreementContent { return *v }).(AS2AgreementContentOutput)
}

// The AS2 one-way receive agreement.
func (o AS2AgreementContentPtrOutput) ReceiveAgreement() AS2OneWayAgreementPtrOutput {
	return o.ApplyT(func(v *AS2AgreementContent) *AS2OneWayAgreement {
		if v == nil {
			return nil
		}
		return &v.ReceiveAgreement
	}).(AS2OneWayAgreementPtrOutput)
}

// The AS2 one-way send agreement.
func (o AS2AgreementContentPtrOutput) SendAgreement() AS2OneWayAgreementPtrOutput {
	return o.ApplyT(func(v *AS2AgreementContent) *AS2OneWayAgreement {
		if v == nil {
			return nil
		}
		return &v.SendAgreement
	}).(AS2OneWayAgreementPtrOutput)
}

// The integration account AS2 agreement content.
type AS2AgreementContentResponse struct {
	// The AS2 one-way receive agreement.
	ReceiveAgreement AS2OneWayAgreementResponse `pulumi:"receiveAgreement"`
	// The AS2 one-way send agreement.
	SendAgreement AS2OneWayAgreementResponse `pulumi:"sendAgreement"`
}

// AS2AgreementContentResponseInput is an input type that accepts AS2AgreementContentResponseArgs and AS2AgreementContentResponseOutput values.
// You can construct a concrete instance of `AS2AgreementContentResponseInput` via:
//
//          AS2AgreementContentResponseArgs{...}
type AS2AgreementContentResponseInput interface {
	pulumi.Input

	ToAS2AgreementContentResponseOutput() AS2AgreementContentResponseOutput
	ToAS2AgreementContentResponseOutputWithContext(context.Context) AS2AgreementContentResponseOutput
}

// The integration account AS2 agreement content.
type AS2AgreementContentResponseArgs struct {
	// The AS2 one-way receive agreement.
	ReceiveAgreement AS2OneWayAgreementResponseInput `pulumi:"receiveAgreement"`
	// The AS2 one-way send agreement.
	SendAgreement AS2OneWayAgreementResponseInput `pulumi:"sendAgreement"`
}

func (AS2AgreementContentResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2AgreementContentResponse)(nil)).Elem()
}

func (i AS2AgreementContentResponseArgs) ToAS2AgreementContentResponseOutput() AS2AgreementContentResponseOutput {
	return i.ToAS2AgreementContentResponseOutputWithContext(context.Background())
}

func (i AS2AgreementContentResponseArgs) ToAS2AgreementContentResponseOutputWithContext(ctx context.Context) AS2AgreementContentResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2AgreementContentResponseOutput)
}

func (i AS2AgreementContentResponseArgs) ToAS2AgreementContentResponsePtrOutput() AS2AgreementContentResponsePtrOutput {
	return i.ToAS2AgreementContentResponsePtrOutputWithContext(context.Background())
}

func (i AS2AgreementContentResponseArgs) ToAS2AgreementContentResponsePtrOutputWithContext(ctx context.Context) AS2AgreementContentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2AgreementContentResponseOutput).ToAS2AgreementContentResponsePtrOutputWithContext(ctx)
}

// AS2AgreementContentResponsePtrInput is an input type that accepts AS2AgreementContentResponseArgs, AS2AgreementContentResponsePtr and AS2AgreementContentResponsePtrOutput values.
// You can construct a concrete instance of `AS2AgreementContentResponsePtrInput` via:
//
//          AS2AgreementContentResponseArgs{...}
//
//  or:
//
//          nil
type AS2AgreementContentResponsePtrInput interface {
	pulumi.Input

	ToAS2AgreementContentResponsePtrOutput() AS2AgreementContentResponsePtrOutput
	ToAS2AgreementContentResponsePtrOutputWithContext(context.Context) AS2AgreementContentResponsePtrOutput
}

type as2agreementContentResponsePtrType AS2AgreementContentResponseArgs

func AS2AgreementContentResponsePtr(v *AS2AgreementContentResponseArgs) AS2AgreementContentResponsePtrInput {
	return (*as2agreementContentResponsePtrType)(v)
}

func (*as2agreementContentResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2AgreementContentResponse)(nil)).Elem()
}

func (i *as2agreementContentResponsePtrType) ToAS2AgreementContentResponsePtrOutput() AS2AgreementContentResponsePtrOutput {
	return i.ToAS2AgreementContentResponsePtrOutputWithContext(context.Background())
}

func (i *as2agreementContentResponsePtrType) ToAS2AgreementContentResponsePtrOutputWithContext(ctx context.Context) AS2AgreementContentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2AgreementContentResponsePtrOutput)
}

// The integration account AS2 agreement content.
type AS2AgreementContentResponseOutput struct{ *pulumi.OutputState }

func (AS2AgreementContentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2AgreementContentResponse)(nil)).Elem()
}

func (o AS2AgreementContentResponseOutput) ToAS2AgreementContentResponseOutput() AS2AgreementContentResponseOutput {
	return o
}

func (o AS2AgreementContentResponseOutput) ToAS2AgreementContentResponseOutputWithContext(ctx context.Context) AS2AgreementContentResponseOutput {
	return o
}

func (o AS2AgreementContentResponseOutput) ToAS2AgreementContentResponsePtrOutput() AS2AgreementContentResponsePtrOutput {
	return o.ToAS2AgreementContentResponsePtrOutputWithContext(context.Background())
}

func (o AS2AgreementContentResponseOutput) ToAS2AgreementContentResponsePtrOutputWithContext(ctx context.Context) AS2AgreementContentResponsePtrOutput {
	return o.ApplyT(func(v AS2AgreementContentResponse) *AS2AgreementContentResponse {
		return &v
	}).(AS2AgreementContentResponsePtrOutput)
}

// The AS2 one-way receive agreement.
func (o AS2AgreementContentResponseOutput) ReceiveAgreement() AS2OneWayAgreementResponseOutput {
	return o.ApplyT(func(v AS2AgreementContentResponse) AS2OneWayAgreementResponse { return v.ReceiveAgreement }).(AS2OneWayAgreementResponseOutput)
}

// The AS2 one-way send agreement.
func (o AS2AgreementContentResponseOutput) SendAgreement() AS2OneWayAgreementResponseOutput {
	return o.ApplyT(func(v AS2AgreementContentResponse) AS2OneWayAgreementResponse { return v.SendAgreement }).(AS2OneWayAgreementResponseOutput)
}

type AS2AgreementContentResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2AgreementContentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2AgreementContentResponse)(nil)).Elem()
}

func (o AS2AgreementContentResponsePtrOutput) ToAS2AgreementContentResponsePtrOutput() AS2AgreementContentResponsePtrOutput {
	return o
}

func (o AS2AgreementContentResponsePtrOutput) ToAS2AgreementContentResponsePtrOutputWithContext(ctx context.Context) AS2AgreementContentResponsePtrOutput {
	return o
}

func (o AS2AgreementContentResponsePtrOutput) Elem() AS2AgreementContentResponseOutput {
	return o.ApplyT(func(v *AS2AgreementContentResponse) AS2AgreementContentResponse { return *v }).(AS2AgreementContentResponseOutput)
}

// The AS2 one-way receive agreement.
func (o AS2AgreementContentResponsePtrOutput) ReceiveAgreement() AS2OneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v *AS2AgreementContentResponse) *AS2OneWayAgreementResponse {
		if v == nil {
			return nil
		}
		return &v.ReceiveAgreement
	}).(AS2OneWayAgreementResponsePtrOutput)
}

// The AS2 one-way send agreement.
func (o AS2AgreementContentResponsePtrOutput) SendAgreement() AS2OneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v *AS2AgreementContentResponse) *AS2OneWayAgreementResponse {
		if v == nil {
			return nil
		}
		return &v.SendAgreement
	}).(AS2OneWayAgreementResponsePtrOutput)
}

// The AS2 agreement envelope settings.
type AS2EnvelopeSettings struct {
	// The value indicating whether to auto generate file name.
	AutogenerateFileName bool `pulumi:"autogenerateFileName"`
	// The template for file name.
	FileNameTemplate string `pulumi:"fileNameTemplate"`
	// The message content type.
	MessageContentType string `pulumi:"messageContentType"`
	// The value indicating whether to suspend message on file name generation error.
	SuspendMessageOnFileNameGenerationError bool `pulumi:"suspendMessageOnFileNameGenerationError"`
	// The value indicating whether to transmit file name in mime header.
	TransmitFileNameInMimeHeader bool `pulumi:"transmitFileNameInMimeHeader"`
}

// AS2EnvelopeSettingsInput is an input type that accepts AS2EnvelopeSettingsArgs and AS2EnvelopeSettingsOutput values.
// You can construct a concrete instance of `AS2EnvelopeSettingsInput` via:
//
//          AS2EnvelopeSettingsArgs{...}
type AS2EnvelopeSettingsInput interface {
	pulumi.Input

	ToAS2EnvelopeSettingsOutput() AS2EnvelopeSettingsOutput
	ToAS2EnvelopeSettingsOutputWithContext(context.Context) AS2EnvelopeSettingsOutput
}

// The AS2 agreement envelope settings.
type AS2EnvelopeSettingsArgs struct {
	// The value indicating whether to auto generate file name.
	AutogenerateFileName pulumi.BoolInput `pulumi:"autogenerateFileName"`
	// The template for file name.
	FileNameTemplate pulumi.StringInput `pulumi:"fileNameTemplate"`
	// The message content type.
	MessageContentType pulumi.StringInput `pulumi:"messageContentType"`
	// The value indicating whether to suspend message on file name generation error.
	SuspendMessageOnFileNameGenerationError pulumi.BoolInput `pulumi:"suspendMessageOnFileNameGenerationError"`
	// The value indicating whether to transmit file name in mime header.
	TransmitFileNameInMimeHeader pulumi.BoolInput `pulumi:"transmitFileNameInMimeHeader"`
}

func (AS2EnvelopeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2EnvelopeSettings)(nil)).Elem()
}

func (i AS2EnvelopeSettingsArgs) ToAS2EnvelopeSettingsOutput() AS2EnvelopeSettingsOutput {
	return i.ToAS2EnvelopeSettingsOutputWithContext(context.Background())
}

func (i AS2EnvelopeSettingsArgs) ToAS2EnvelopeSettingsOutputWithContext(ctx context.Context) AS2EnvelopeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2EnvelopeSettingsOutput)
}

func (i AS2EnvelopeSettingsArgs) ToAS2EnvelopeSettingsPtrOutput() AS2EnvelopeSettingsPtrOutput {
	return i.ToAS2EnvelopeSettingsPtrOutputWithContext(context.Background())
}

func (i AS2EnvelopeSettingsArgs) ToAS2EnvelopeSettingsPtrOutputWithContext(ctx context.Context) AS2EnvelopeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2EnvelopeSettingsOutput).ToAS2EnvelopeSettingsPtrOutputWithContext(ctx)
}

// AS2EnvelopeSettingsPtrInput is an input type that accepts AS2EnvelopeSettingsArgs, AS2EnvelopeSettingsPtr and AS2EnvelopeSettingsPtrOutput values.
// You can construct a concrete instance of `AS2EnvelopeSettingsPtrInput` via:
//
//          AS2EnvelopeSettingsArgs{...}
//
//  or:
//
//          nil
type AS2EnvelopeSettingsPtrInput interface {
	pulumi.Input

	ToAS2EnvelopeSettingsPtrOutput() AS2EnvelopeSettingsPtrOutput
	ToAS2EnvelopeSettingsPtrOutputWithContext(context.Context) AS2EnvelopeSettingsPtrOutput
}

type as2envelopeSettingsPtrType AS2EnvelopeSettingsArgs

func AS2EnvelopeSettingsPtr(v *AS2EnvelopeSettingsArgs) AS2EnvelopeSettingsPtrInput {
	return (*as2envelopeSettingsPtrType)(v)
}

func (*as2envelopeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2EnvelopeSettings)(nil)).Elem()
}

func (i *as2envelopeSettingsPtrType) ToAS2EnvelopeSettingsPtrOutput() AS2EnvelopeSettingsPtrOutput {
	return i.ToAS2EnvelopeSettingsPtrOutputWithContext(context.Background())
}

func (i *as2envelopeSettingsPtrType) ToAS2EnvelopeSettingsPtrOutputWithContext(ctx context.Context) AS2EnvelopeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2EnvelopeSettingsPtrOutput)
}

// The AS2 agreement envelope settings.
type AS2EnvelopeSettingsOutput struct{ *pulumi.OutputState }

func (AS2EnvelopeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2EnvelopeSettings)(nil)).Elem()
}

func (o AS2EnvelopeSettingsOutput) ToAS2EnvelopeSettingsOutput() AS2EnvelopeSettingsOutput {
	return o
}

func (o AS2EnvelopeSettingsOutput) ToAS2EnvelopeSettingsOutputWithContext(ctx context.Context) AS2EnvelopeSettingsOutput {
	return o
}

func (o AS2EnvelopeSettingsOutput) ToAS2EnvelopeSettingsPtrOutput() AS2EnvelopeSettingsPtrOutput {
	return o.ToAS2EnvelopeSettingsPtrOutputWithContext(context.Background())
}

func (o AS2EnvelopeSettingsOutput) ToAS2EnvelopeSettingsPtrOutputWithContext(ctx context.Context) AS2EnvelopeSettingsPtrOutput {
	return o.ApplyT(func(v AS2EnvelopeSettings) *AS2EnvelopeSettings {
		return &v
	}).(AS2EnvelopeSettingsPtrOutput)
}

// The value indicating whether to auto generate file name.
func (o AS2EnvelopeSettingsOutput) AutogenerateFileName() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2EnvelopeSettings) bool { return v.AutogenerateFileName }).(pulumi.BoolOutput)
}

// The template for file name.
func (o AS2EnvelopeSettingsOutput) FileNameTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v AS2EnvelopeSettings) string { return v.FileNameTemplate }).(pulumi.StringOutput)
}

// The message content type.
func (o AS2EnvelopeSettingsOutput) MessageContentType() pulumi.StringOutput {
	return o.ApplyT(func(v AS2EnvelopeSettings) string { return v.MessageContentType }).(pulumi.StringOutput)
}

// The value indicating whether to suspend message on file name generation error.
func (o AS2EnvelopeSettingsOutput) SuspendMessageOnFileNameGenerationError() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2EnvelopeSettings) bool { return v.SuspendMessageOnFileNameGenerationError }).(pulumi.BoolOutput)
}

// The value indicating whether to transmit file name in mime header.
func (o AS2EnvelopeSettingsOutput) TransmitFileNameInMimeHeader() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2EnvelopeSettings) bool { return v.TransmitFileNameInMimeHeader }).(pulumi.BoolOutput)
}

type AS2EnvelopeSettingsPtrOutput struct{ *pulumi.OutputState }

func (AS2EnvelopeSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2EnvelopeSettings)(nil)).Elem()
}

func (o AS2EnvelopeSettingsPtrOutput) ToAS2EnvelopeSettingsPtrOutput() AS2EnvelopeSettingsPtrOutput {
	return o
}

func (o AS2EnvelopeSettingsPtrOutput) ToAS2EnvelopeSettingsPtrOutputWithContext(ctx context.Context) AS2EnvelopeSettingsPtrOutput {
	return o
}

func (o AS2EnvelopeSettingsPtrOutput) Elem() AS2EnvelopeSettingsOutput {
	return o.ApplyT(func(v *AS2EnvelopeSettings) AS2EnvelopeSettings { return *v }).(AS2EnvelopeSettingsOutput)
}

// The value indicating whether to auto generate file name.
func (o AS2EnvelopeSettingsPtrOutput) AutogenerateFileName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2EnvelopeSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.AutogenerateFileName
	}).(pulumi.BoolPtrOutput)
}

// The template for file name.
func (o AS2EnvelopeSettingsPtrOutput) FileNameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2EnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return &v.FileNameTemplate
	}).(pulumi.StringPtrOutput)
}

// The message content type.
func (o AS2EnvelopeSettingsPtrOutput) MessageContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2EnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return &v.MessageContentType
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to suspend message on file name generation error.
func (o AS2EnvelopeSettingsPtrOutput) SuspendMessageOnFileNameGenerationError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2EnvelopeSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.SuspendMessageOnFileNameGenerationError
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to transmit file name in mime header.
func (o AS2EnvelopeSettingsPtrOutput) TransmitFileNameInMimeHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2EnvelopeSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.TransmitFileNameInMimeHeader
	}).(pulumi.BoolPtrOutput)
}

// The AS2 agreement envelope settings.
type AS2EnvelopeSettingsResponse struct {
	// The value indicating whether to auto generate file name.
	AutogenerateFileName bool `pulumi:"autogenerateFileName"`
	// The template for file name.
	FileNameTemplate string `pulumi:"fileNameTemplate"`
	// The message content type.
	MessageContentType string `pulumi:"messageContentType"`
	// The value indicating whether to suspend message on file name generation error.
	SuspendMessageOnFileNameGenerationError bool `pulumi:"suspendMessageOnFileNameGenerationError"`
	// The value indicating whether to transmit file name in mime header.
	TransmitFileNameInMimeHeader bool `pulumi:"transmitFileNameInMimeHeader"`
}

// AS2EnvelopeSettingsResponseInput is an input type that accepts AS2EnvelopeSettingsResponseArgs and AS2EnvelopeSettingsResponseOutput values.
// You can construct a concrete instance of `AS2EnvelopeSettingsResponseInput` via:
//
//          AS2EnvelopeSettingsResponseArgs{...}
type AS2EnvelopeSettingsResponseInput interface {
	pulumi.Input

	ToAS2EnvelopeSettingsResponseOutput() AS2EnvelopeSettingsResponseOutput
	ToAS2EnvelopeSettingsResponseOutputWithContext(context.Context) AS2EnvelopeSettingsResponseOutput
}

// The AS2 agreement envelope settings.
type AS2EnvelopeSettingsResponseArgs struct {
	// The value indicating whether to auto generate file name.
	AutogenerateFileName pulumi.BoolInput `pulumi:"autogenerateFileName"`
	// The template for file name.
	FileNameTemplate pulumi.StringInput `pulumi:"fileNameTemplate"`
	// The message content type.
	MessageContentType pulumi.StringInput `pulumi:"messageContentType"`
	// The value indicating whether to suspend message on file name generation error.
	SuspendMessageOnFileNameGenerationError pulumi.BoolInput `pulumi:"suspendMessageOnFileNameGenerationError"`
	// The value indicating whether to transmit file name in mime header.
	TransmitFileNameInMimeHeader pulumi.BoolInput `pulumi:"transmitFileNameInMimeHeader"`
}

func (AS2EnvelopeSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2EnvelopeSettingsResponse)(nil)).Elem()
}

func (i AS2EnvelopeSettingsResponseArgs) ToAS2EnvelopeSettingsResponseOutput() AS2EnvelopeSettingsResponseOutput {
	return i.ToAS2EnvelopeSettingsResponseOutputWithContext(context.Background())
}

func (i AS2EnvelopeSettingsResponseArgs) ToAS2EnvelopeSettingsResponseOutputWithContext(ctx context.Context) AS2EnvelopeSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2EnvelopeSettingsResponseOutput)
}

func (i AS2EnvelopeSettingsResponseArgs) ToAS2EnvelopeSettingsResponsePtrOutput() AS2EnvelopeSettingsResponsePtrOutput {
	return i.ToAS2EnvelopeSettingsResponsePtrOutputWithContext(context.Background())
}

func (i AS2EnvelopeSettingsResponseArgs) ToAS2EnvelopeSettingsResponsePtrOutputWithContext(ctx context.Context) AS2EnvelopeSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2EnvelopeSettingsResponseOutput).ToAS2EnvelopeSettingsResponsePtrOutputWithContext(ctx)
}

// AS2EnvelopeSettingsResponsePtrInput is an input type that accepts AS2EnvelopeSettingsResponseArgs, AS2EnvelopeSettingsResponsePtr and AS2EnvelopeSettingsResponsePtrOutput values.
// You can construct a concrete instance of `AS2EnvelopeSettingsResponsePtrInput` via:
//
//          AS2EnvelopeSettingsResponseArgs{...}
//
//  or:
//
//          nil
type AS2EnvelopeSettingsResponsePtrInput interface {
	pulumi.Input

	ToAS2EnvelopeSettingsResponsePtrOutput() AS2EnvelopeSettingsResponsePtrOutput
	ToAS2EnvelopeSettingsResponsePtrOutputWithContext(context.Context) AS2EnvelopeSettingsResponsePtrOutput
}

type as2envelopeSettingsResponsePtrType AS2EnvelopeSettingsResponseArgs

func AS2EnvelopeSettingsResponsePtr(v *AS2EnvelopeSettingsResponseArgs) AS2EnvelopeSettingsResponsePtrInput {
	return (*as2envelopeSettingsResponsePtrType)(v)
}

func (*as2envelopeSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2EnvelopeSettingsResponse)(nil)).Elem()
}

func (i *as2envelopeSettingsResponsePtrType) ToAS2EnvelopeSettingsResponsePtrOutput() AS2EnvelopeSettingsResponsePtrOutput {
	return i.ToAS2EnvelopeSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *as2envelopeSettingsResponsePtrType) ToAS2EnvelopeSettingsResponsePtrOutputWithContext(ctx context.Context) AS2EnvelopeSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2EnvelopeSettingsResponsePtrOutput)
}

// The AS2 agreement envelope settings.
type AS2EnvelopeSettingsResponseOutput struct{ *pulumi.OutputState }

func (AS2EnvelopeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2EnvelopeSettingsResponse)(nil)).Elem()
}

func (o AS2EnvelopeSettingsResponseOutput) ToAS2EnvelopeSettingsResponseOutput() AS2EnvelopeSettingsResponseOutput {
	return o
}

func (o AS2EnvelopeSettingsResponseOutput) ToAS2EnvelopeSettingsResponseOutputWithContext(ctx context.Context) AS2EnvelopeSettingsResponseOutput {
	return o
}

func (o AS2EnvelopeSettingsResponseOutput) ToAS2EnvelopeSettingsResponsePtrOutput() AS2EnvelopeSettingsResponsePtrOutput {
	return o.ToAS2EnvelopeSettingsResponsePtrOutputWithContext(context.Background())
}

func (o AS2EnvelopeSettingsResponseOutput) ToAS2EnvelopeSettingsResponsePtrOutputWithContext(ctx context.Context) AS2EnvelopeSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2EnvelopeSettingsResponse) *AS2EnvelopeSettingsResponse {
		return &v
	}).(AS2EnvelopeSettingsResponsePtrOutput)
}

// The value indicating whether to auto generate file name.
func (o AS2EnvelopeSettingsResponseOutput) AutogenerateFileName() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2EnvelopeSettingsResponse) bool { return v.AutogenerateFileName }).(pulumi.BoolOutput)
}

// The template for file name.
func (o AS2EnvelopeSettingsResponseOutput) FileNameTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v AS2EnvelopeSettingsResponse) string { return v.FileNameTemplate }).(pulumi.StringOutput)
}

// The message content type.
func (o AS2EnvelopeSettingsResponseOutput) MessageContentType() pulumi.StringOutput {
	return o.ApplyT(func(v AS2EnvelopeSettingsResponse) string { return v.MessageContentType }).(pulumi.StringOutput)
}

// The value indicating whether to suspend message on file name generation error.
func (o AS2EnvelopeSettingsResponseOutput) SuspendMessageOnFileNameGenerationError() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2EnvelopeSettingsResponse) bool { return v.SuspendMessageOnFileNameGenerationError }).(pulumi.BoolOutput)
}

// The value indicating whether to transmit file name in mime header.
func (o AS2EnvelopeSettingsResponseOutput) TransmitFileNameInMimeHeader() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2EnvelopeSettingsResponse) bool { return v.TransmitFileNameInMimeHeader }).(pulumi.BoolOutput)
}

type AS2EnvelopeSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2EnvelopeSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2EnvelopeSettingsResponse)(nil)).Elem()
}

func (o AS2EnvelopeSettingsResponsePtrOutput) ToAS2EnvelopeSettingsResponsePtrOutput() AS2EnvelopeSettingsResponsePtrOutput {
	return o
}

func (o AS2EnvelopeSettingsResponsePtrOutput) ToAS2EnvelopeSettingsResponsePtrOutputWithContext(ctx context.Context) AS2EnvelopeSettingsResponsePtrOutput {
	return o
}

func (o AS2EnvelopeSettingsResponsePtrOutput) Elem() AS2EnvelopeSettingsResponseOutput {
	return o.ApplyT(func(v *AS2EnvelopeSettingsResponse) AS2EnvelopeSettingsResponse { return *v }).(AS2EnvelopeSettingsResponseOutput)
}

// The value indicating whether to auto generate file name.
func (o AS2EnvelopeSettingsResponsePtrOutput) AutogenerateFileName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2EnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.AutogenerateFileName
	}).(pulumi.BoolPtrOutput)
}

// The template for file name.
func (o AS2EnvelopeSettingsResponsePtrOutput) FileNameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FileNameTemplate
	}).(pulumi.StringPtrOutput)
}

// The message content type.
func (o AS2EnvelopeSettingsResponsePtrOutput) MessageContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MessageContentType
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to suspend message on file name generation error.
func (o AS2EnvelopeSettingsResponsePtrOutput) SuspendMessageOnFileNameGenerationError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2EnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.SuspendMessageOnFileNameGenerationError
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to transmit file name in mime header.
func (o AS2EnvelopeSettingsResponsePtrOutput) TransmitFileNameInMimeHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2EnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.TransmitFileNameInMimeHeader
	}).(pulumi.BoolPtrOutput)
}

// The AS2 agreement error settings.
type AS2ErrorSettings struct {
	// The value indicating whether to resend message If MDN is not received.
	ResendIfMDNNotReceived bool `pulumi:"resendIfMDNNotReceived"`
	// The value indicating whether to suspend duplicate message.
	SuspendDuplicateMessage bool `pulumi:"suspendDuplicateMessage"`
}

// AS2ErrorSettingsInput is an input type that accepts AS2ErrorSettingsArgs and AS2ErrorSettingsOutput values.
// You can construct a concrete instance of `AS2ErrorSettingsInput` via:
//
//          AS2ErrorSettingsArgs{...}
type AS2ErrorSettingsInput interface {
	pulumi.Input

	ToAS2ErrorSettingsOutput() AS2ErrorSettingsOutput
	ToAS2ErrorSettingsOutputWithContext(context.Context) AS2ErrorSettingsOutput
}

// The AS2 agreement error settings.
type AS2ErrorSettingsArgs struct {
	// The value indicating whether to resend message If MDN is not received.
	ResendIfMDNNotReceived pulumi.BoolInput `pulumi:"resendIfMDNNotReceived"`
	// The value indicating whether to suspend duplicate message.
	SuspendDuplicateMessage pulumi.BoolInput `pulumi:"suspendDuplicateMessage"`
}

func (AS2ErrorSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2ErrorSettings)(nil)).Elem()
}

func (i AS2ErrorSettingsArgs) ToAS2ErrorSettingsOutput() AS2ErrorSettingsOutput {
	return i.ToAS2ErrorSettingsOutputWithContext(context.Background())
}

func (i AS2ErrorSettingsArgs) ToAS2ErrorSettingsOutputWithContext(ctx context.Context) AS2ErrorSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ErrorSettingsOutput)
}

func (i AS2ErrorSettingsArgs) ToAS2ErrorSettingsPtrOutput() AS2ErrorSettingsPtrOutput {
	return i.ToAS2ErrorSettingsPtrOutputWithContext(context.Background())
}

func (i AS2ErrorSettingsArgs) ToAS2ErrorSettingsPtrOutputWithContext(ctx context.Context) AS2ErrorSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ErrorSettingsOutput).ToAS2ErrorSettingsPtrOutputWithContext(ctx)
}

// AS2ErrorSettingsPtrInput is an input type that accepts AS2ErrorSettingsArgs, AS2ErrorSettingsPtr and AS2ErrorSettingsPtrOutput values.
// You can construct a concrete instance of `AS2ErrorSettingsPtrInput` via:
//
//          AS2ErrorSettingsArgs{...}
//
//  or:
//
//          nil
type AS2ErrorSettingsPtrInput interface {
	pulumi.Input

	ToAS2ErrorSettingsPtrOutput() AS2ErrorSettingsPtrOutput
	ToAS2ErrorSettingsPtrOutputWithContext(context.Context) AS2ErrorSettingsPtrOutput
}

type as2errorSettingsPtrType AS2ErrorSettingsArgs

func AS2ErrorSettingsPtr(v *AS2ErrorSettingsArgs) AS2ErrorSettingsPtrInput {
	return (*as2errorSettingsPtrType)(v)
}

func (*as2errorSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2ErrorSettings)(nil)).Elem()
}

func (i *as2errorSettingsPtrType) ToAS2ErrorSettingsPtrOutput() AS2ErrorSettingsPtrOutput {
	return i.ToAS2ErrorSettingsPtrOutputWithContext(context.Background())
}

func (i *as2errorSettingsPtrType) ToAS2ErrorSettingsPtrOutputWithContext(ctx context.Context) AS2ErrorSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ErrorSettingsPtrOutput)
}

// The AS2 agreement error settings.
type AS2ErrorSettingsOutput struct{ *pulumi.OutputState }

func (AS2ErrorSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2ErrorSettings)(nil)).Elem()
}

func (o AS2ErrorSettingsOutput) ToAS2ErrorSettingsOutput() AS2ErrorSettingsOutput {
	return o
}

func (o AS2ErrorSettingsOutput) ToAS2ErrorSettingsOutputWithContext(ctx context.Context) AS2ErrorSettingsOutput {
	return o
}

func (o AS2ErrorSettingsOutput) ToAS2ErrorSettingsPtrOutput() AS2ErrorSettingsPtrOutput {
	return o.ToAS2ErrorSettingsPtrOutputWithContext(context.Background())
}

func (o AS2ErrorSettingsOutput) ToAS2ErrorSettingsPtrOutputWithContext(ctx context.Context) AS2ErrorSettingsPtrOutput {
	return o.ApplyT(func(v AS2ErrorSettings) *AS2ErrorSettings {
		return &v
	}).(AS2ErrorSettingsPtrOutput)
}

// The value indicating whether to resend message If MDN is not received.
func (o AS2ErrorSettingsOutput) ResendIfMDNNotReceived() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2ErrorSettings) bool { return v.ResendIfMDNNotReceived }).(pulumi.BoolOutput)
}

// The value indicating whether to suspend duplicate message.
func (o AS2ErrorSettingsOutput) SuspendDuplicateMessage() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2ErrorSettings) bool { return v.SuspendDuplicateMessage }).(pulumi.BoolOutput)
}

type AS2ErrorSettingsPtrOutput struct{ *pulumi.OutputState }

func (AS2ErrorSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2ErrorSettings)(nil)).Elem()
}

func (o AS2ErrorSettingsPtrOutput) ToAS2ErrorSettingsPtrOutput() AS2ErrorSettingsPtrOutput {
	return o
}

func (o AS2ErrorSettingsPtrOutput) ToAS2ErrorSettingsPtrOutputWithContext(ctx context.Context) AS2ErrorSettingsPtrOutput {
	return o
}

func (o AS2ErrorSettingsPtrOutput) Elem() AS2ErrorSettingsOutput {
	return o.ApplyT(func(v *AS2ErrorSettings) AS2ErrorSettings { return *v }).(AS2ErrorSettingsOutput)
}

// The value indicating whether to resend message If MDN is not received.
func (o AS2ErrorSettingsPtrOutput) ResendIfMDNNotReceived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ErrorSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.ResendIfMDNNotReceived
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to suspend duplicate message.
func (o AS2ErrorSettingsPtrOutput) SuspendDuplicateMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ErrorSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.SuspendDuplicateMessage
	}).(pulumi.BoolPtrOutput)
}

// The AS2 agreement error settings.
type AS2ErrorSettingsResponse struct {
	// The value indicating whether to resend message If MDN is not received.
	ResendIfMDNNotReceived bool `pulumi:"resendIfMDNNotReceived"`
	// The value indicating whether to suspend duplicate message.
	SuspendDuplicateMessage bool `pulumi:"suspendDuplicateMessage"`
}

// AS2ErrorSettingsResponseInput is an input type that accepts AS2ErrorSettingsResponseArgs and AS2ErrorSettingsResponseOutput values.
// You can construct a concrete instance of `AS2ErrorSettingsResponseInput` via:
//
//          AS2ErrorSettingsResponseArgs{...}
type AS2ErrorSettingsResponseInput interface {
	pulumi.Input

	ToAS2ErrorSettingsResponseOutput() AS2ErrorSettingsResponseOutput
	ToAS2ErrorSettingsResponseOutputWithContext(context.Context) AS2ErrorSettingsResponseOutput
}

// The AS2 agreement error settings.
type AS2ErrorSettingsResponseArgs struct {
	// The value indicating whether to resend message If MDN is not received.
	ResendIfMDNNotReceived pulumi.BoolInput `pulumi:"resendIfMDNNotReceived"`
	// The value indicating whether to suspend duplicate message.
	SuspendDuplicateMessage pulumi.BoolInput `pulumi:"suspendDuplicateMessage"`
}

func (AS2ErrorSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2ErrorSettingsResponse)(nil)).Elem()
}

func (i AS2ErrorSettingsResponseArgs) ToAS2ErrorSettingsResponseOutput() AS2ErrorSettingsResponseOutput {
	return i.ToAS2ErrorSettingsResponseOutputWithContext(context.Background())
}

func (i AS2ErrorSettingsResponseArgs) ToAS2ErrorSettingsResponseOutputWithContext(ctx context.Context) AS2ErrorSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ErrorSettingsResponseOutput)
}

func (i AS2ErrorSettingsResponseArgs) ToAS2ErrorSettingsResponsePtrOutput() AS2ErrorSettingsResponsePtrOutput {
	return i.ToAS2ErrorSettingsResponsePtrOutputWithContext(context.Background())
}

func (i AS2ErrorSettingsResponseArgs) ToAS2ErrorSettingsResponsePtrOutputWithContext(ctx context.Context) AS2ErrorSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ErrorSettingsResponseOutput).ToAS2ErrorSettingsResponsePtrOutputWithContext(ctx)
}

// AS2ErrorSettingsResponsePtrInput is an input type that accepts AS2ErrorSettingsResponseArgs, AS2ErrorSettingsResponsePtr and AS2ErrorSettingsResponsePtrOutput values.
// You can construct a concrete instance of `AS2ErrorSettingsResponsePtrInput` via:
//
//          AS2ErrorSettingsResponseArgs{...}
//
//  or:
//
//          nil
type AS2ErrorSettingsResponsePtrInput interface {
	pulumi.Input

	ToAS2ErrorSettingsResponsePtrOutput() AS2ErrorSettingsResponsePtrOutput
	ToAS2ErrorSettingsResponsePtrOutputWithContext(context.Context) AS2ErrorSettingsResponsePtrOutput
}

type as2errorSettingsResponsePtrType AS2ErrorSettingsResponseArgs

func AS2ErrorSettingsResponsePtr(v *AS2ErrorSettingsResponseArgs) AS2ErrorSettingsResponsePtrInput {
	return (*as2errorSettingsResponsePtrType)(v)
}

func (*as2errorSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2ErrorSettingsResponse)(nil)).Elem()
}

func (i *as2errorSettingsResponsePtrType) ToAS2ErrorSettingsResponsePtrOutput() AS2ErrorSettingsResponsePtrOutput {
	return i.ToAS2ErrorSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *as2errorSettingsResponsePtrType) ToAS2ErrorSettingsResponsePtrOutputWithContext(ctx context.Context) AS2ErrorSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ErrorSettingsResponsePtrOutput)
}

// The AS2 agreement error settings.
type AS2ErrorSettingsResponseOutput struct{ *pulumi.OutputState }

func (AS2ErrorSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2ErrorSettingsResponse)(nil)).Elem()
}

func (o AS2ErrorSettingsResponseOutput) ToAS2ErrorSettingsResponseOutput() AS2ErrorSettingsResponseOutput {
	return o
}

func (o AS2ErrorSettingsResponseOutput) ToAS2ErrorSettingsResponseOutputWithContext(ctx context.Context) AS2ErrorSettingsResponseOutput {
	return o
}

func (o AS2ErrorSettingsResponseOutput) ToAS2ErrorSettingsResponsePtrOutput() AS2ErrorSettingsResponsePtrOutput {
	return o.ToAS2ErrorSettingsResponsePtrOutputWithContext(context.Background())
}

func (o AS2ErrorSettingsResponseOutput) ToAS2ErrorSettingsResponsePtrOutputWithContext(ctx context.Context) AS2ErrorSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2ErrorSettingsResponse) *AS2ErrorSettingsResponse {
		return &v
	}).(AS2ErrorSettingsResponsePtrOutput)
}

// The value indicating whether to resend message If MDN is not received.
func (o AS2ErrorSettingsResponseOutput) ResendIfMDNNotReceived() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2ErrorSettingsResponse) bool { return v.ResendIfMDNNotReceived }).(pulumi.BoolOutput)
}

// The value indicating whether to suspend duplicate message.
func (o AS2ErrorSettingsResponseOutput) SuspendDuplicateMessage() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2ErrorSettingsResponse) bool { return v.SuspendDuplicateMessage }).(pulumi.BoolOutput)
}

type AS2ErrorSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2ErrorSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2ErrorSettingsResponse)(nil)).Elem()
}

func (o AS2ErrorSettingsResponsePtrOutput) ToAS2ErrorSettingsResponsePtrOutput() AS2ErrorSettingsResponsePtrOutput {
	return o
}

func (o AS2ErrorSettingsResponsePtrOutput) ToAS2ErrorSettingsResponsePtrOutputWithContext(ctx context.Context) AS2ErrorSettingsResponsePtrOutput {
	return o
}

func (o AS2ErrorSettingsResponsePtrOutput) Elem() AS2ErrorSettingsResponseOutput {
	return o.ApplyT(func(v *AS2ErrorSettingsResponse) AS2ErrorSettingsResponse { return *v }).(AS2ErrorSettingsResponseOutput)
}

// The value indicating whether to resend message If MDN is not received.
func (o AS2ErrorSettingsResponsePtrOutput) ResendIfMDNNotReceived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ErrorSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ResendIfMDNNotReceived
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to suspend duplicate message.
func (o AS2ErrorSettingsResponsePtrOutput) SuspendDuplicateMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ErrorSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.SuspendDuplicateMessage
	}).(pulumi.BoolPtrOutput)
}

// The AS2 agreement mdn settings.
type AS2MdnSettings struct {
	// The disposition notification to header value.
	DispositionNotificationTo *string `pulumi:"dispositionNotificationTo"`
	// The MDN text.
	MdnText *string `pulumi:"mdnText"`
	// The signing or hashing algorithm.
	MicHashingAlgorithm string `pulumi:"micHashingAlgorithm"`
	// The value indicating whether to send or request a MDN.
	NeedMDN bool `pulumi:"needMDN"`
	// The receipt delivery URL.
	ReceiptDeliveryUrl *string `pulumi:"receiptDeliveryUrl"`
	// The value indicating whether to send inbound MDN to message box.
	SendInboundMDNToMessageBox bool `pulumi:"sendInboundMDNToMessageBox"`
	// The value indicating whether to send the asynchronous MDN.
	SendMDNAsynchronously bool `pulumi:"sendMDNAsynchronously"`
	// The value indicating whether the MDN needs to be signed or not.
	SignMDN bool `pulumi:"signMDN"`
	// The value indicating whether to sign the outbound MDN if optional.
	SignOutboundMDNIfOptional bool `pulumi:"signOutboundMDNIfOptional"`
}

// AS2MdnSettingsInput is an input type that accepts AS2MdnSettingsArgs and AS2MdnSettingsOutput values.
// You can construct a concrete instance of `AS2MdnSettingsInput` via:
//
//          AS2MdnSettingsArgs{...}
type AS2MdnSettingsInput interface {
	pulumi.Input

	ToAS2MdnSettingsOutput() AS2MdnSettingsOutput
	ToAS2MdnSettingsOutputWithContext(context.Context) AS2MdnSettingsOutput
}

// The AS2 agreement mdn settings.
type AS2MdnSettingsArgs struct {
	// The disposition notification to header value.
	DispositionNotificationTo pulumi.StringPtrInput `pulumi:"dispositionNotificationTo"`
	// The MDN text.
	MdnText pulumi.StringPtrInput `pulumi:"mdnText"`
	// The signing or hashing algorithm.
	MicHashingAlgorithm pulumi.StringInput `pulumi:"micHashingAlgorithm"`
	// The value indicating whether to send or request a MDN.
	NeedMDN pulumi.BoolInput `pulumi:"needMDN"`
	// The receipt delivery URL.
	ReceiptDeliveryUrl pulumi.StringPtrInput `pulumi:"receiptDeliveryUrl"`
	// The value indicating whether to send inbound MDN to message box.
	SendInboundMDNToMessageBox pulumi.BoolInput `pulumi:"sendInboundMDNToMessageBox"`
	// The value indicating whether to send the asynchronous MDN.
	SendMDNAsynchronously pulumi.BoolInput `pulumi:"sendMDNAsynchronously"`
	// The value indicating whether the MDN needs to be signed or not.
	SignMDN pulumi.BoolInput `pulumi:"signMDN"`
	// The value indicating whether to sign the outbound MDN if optional.
	SignOutboundMDNIfOptional pulumi.BoolInput `pulumi:"signOutboundMDNIfOptional"`
}

func (AS2MdnSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2MdnSettings)(nil)).Elem()
}

func (i AS2MdnSettingsArgs) ToAS2MdnSettingsOutput() AS2MdnSettingsOutput {
	return i.ToAS2MdnSettingsOutputWithContext(context.Background())
}

func (i AS2MdnSettingsArgs) ToAS2MdnSettingsOutputWithContext(ctx context.Context) AS2MdnSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2MdnSettingsOutput)
}

func (i AS2MdnSettingsArgs) ToAS2MdnSettingsPtrOutput() AS2MdnSettingsPtrOutput {
	return i.ToAS2MdnSettingsPtrOutputWithContext(context.Background())
}

func (i AS2MdnSettingsArgs) ToAS2MdnSettingsPtrOutputWithContext(ctx context.Context) AS2MdnSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2MdnSettingsOutput).ToAS2MdnSettingsPtrOutputWithContext(ctx)
}

// AS2MdnSettingsPtrInput is an input type that accepts AS2MdnSettingsArgs, AS2MdnSettingsPtr and AS2MdnSettingsPtrOutput values.
// You can construct a concrete instance of `AS2MdnSettingsPtrInput` via:
//
//          AS2MdnSettingsArgs{...}
//
//  or:
//
//          nil
type AS2MdnSettingsPtrInput interface {
	pulumi.Input

	ToAS2MdnSettingsPtrOutput() AS2MdnSettingsPtrOutput
	ToAS2MdnSettingsPtrOutputWithContext(context.Context) AS2MdnSettingsPtrOutput
}

type as2mdnSettingsPtrType AS2MdnSettingsArgs

func AS2MdnSettingsPtr(v *AS2MdnSettingsArgs) AS2MdnSettingsPtrInput {
	return (*as2mdnSettingsPtrType)(v)
}

func (*as2mdnSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2MdnSettings)(nil)).Elem()
}

func (i *as2mdnSettingsPtrType) ToAS2MdnSettingsPtrOutput() AS2MdnSettingsPtrOutput {
	return i.ToAS2MdnSettingsPtrOutputWithContext(context.Background())
}

func (i *as2mdnSettingsPtrType) ToAS2MdnSettingsPtrOutputWithContext(ctx context.Context) AS2MdnSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2MdnSettingsPtrOutput)
}

// The AS2 agreement mdn settings.
type AS2MdnSettingsOutput struct{ *pulumi.OutputState }

func (AS2MdnSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2MdnSettings)(nil)).Elem()
}

func (o AS2MdnSettingsOutput) ToAS2MdnSettingsOutput() AS2MdnSettingsOutput {
	return o
}

func (o AS2MdnSettingsOutput) ToAS2MdnSettingsOutputWithContext(ctx context.Context) AS2MdnSettingsOutput {
	return o
}

func (o AS2MdnSettingsOutput) ToAS2MdnSettingsPtrOutput() AS2MdnSettingsPtrOutput {
	return o.ToAS2MdnSettingsPtrOutputWithContext(context.Background())
}

func (o AS2MdnSettingsOutput) ToAS2MdnSettingsPtrOutputWithContext(ctx context.Context) AS2MdnSettingsPtrOutput {
	return o.ApplyT(func(v AS2MdnSettings) *AS2MdnSettings {
		return &v
	}).(AS2MdnSettingsPtrOutput)
}

// The disposition notification to header value.
func (o AS2MdnSettingsOutput) DispositionNotificationTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2MdnSettings) *string { return v.DispositionNotificationTo }).(pulumi.StringPtrOutput)
}

// The MDN text.
func (o AS2MdnSettingsOutput) MdnText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2MdnSettings) *string { return v.MdnText }).(pulumi.StringPtrOutput)
}

// The signing or hashing algorithm.
func (o AS2MdnSettingsOutput) MicHashingAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v AS2MdnSettings) string { return v.MicHashingAlgorithm }).(pulumi.StringOutput)
}

// The value indicating whether to send or request a MDN.
func (o AS2MdnSettingsOutput) NeedMDN() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2MdnSettings) bool { return v.NeedMDN }).(pulumi.BoolOutput)
}

// The receipt delivery URL.
func (o AS2MdnSettingsOutput) ReceiptDeliveryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2MdnSettings) *string { return v.ReceiptDeliveryUrl }).(pulumi.StringPtrOutput)
}

// The value indicating whether to send inbound MDN to message box.
func (o AS2MdnSettingsOutput) SendInboundMDNToMessageBox() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2MdnSettings) bool { return v.SendInboundMDNToMessageBox }).(pulumi.BoolOutput)
}

// The value indicating whether to send the asynchronous MDN.
func (o AS2MdnSettingsOutput) SendMDNAsynchronously() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2MdnSettings) bool { return v.SendMDNAsynchronously }).(pulumi.BoolOutput)
}

// The value indicating whether the MDN needs to be signed or not.
func (o AS2MdnSettingsOutput) SignMDN() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2MdnSettings) bool { return v.SignMDN }).(pulumi.BoolOutput)
}

// The value indicating whether to sign the outbound MDN if optional.
func (o AS2MdnSettingsOutput) SignOutboundMDNIfOptional() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2MdnSettings) bool { return v.SignOutboundMDNIfOptional }).(pulumi.BoolOutput)
}

type AS2MdnSettingsPtrOutput struct{ *pulumi.OutputState }

func (AS2MdnSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2MdnSettings)(nil)).Elem()
}

func (o AS2MdnSettingsPtrOutput) ToAS2MdnSettingsPtrOutput() AS2MdnSettingsPtrOutput {
	return o
}

func (o AS2MdnSettingsPtrOutput) ToAS2MdnSettingsPtrOutputWithContext(ctx context.Context) AS2MdnSettingsPtrOutput {
	return o
}

func (o AS2MdnSettingsPtrOutput) Elem() AS2MdnSettingsOutput {
	return o.ApplyT(func(v *AS2MdnSettings) AS2MdnSettings { return *v }).(AS2MdnSettingsOutput)
}

// The disposition notification to header value.
func (o AS2MdnSettingsPtrOutput) DispositionNotificationTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettings) *string {
		if v == nil {
			return nil
		}
		return v.DispositionNotificationTo
	}).(pulumi.StringPtrOutput)
}

// The MDN text.
func (o AS2MdnSettingsPtrOutput) MdnText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettings) *string {
		if v == nil {
			return nil
		}
		return v.MdnText
	}).(pulumi.StringPtrOutput)
}

// The signing or hashing algorithm.
func (o AS2MdnSettingsPtrOutput) MicHashingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettings) *string {
		if v == nil {
			return nil
		}
		return &v.MicHashingAlgorithm
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to send or request a MDN.
func (o AS2MdnSettingsPtrOutput) NeedMDN() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.NeedMDN
	}).(pulumi.BoolPtrOutput)
}

// The receipt delivery URL.
func (o AS2MdnSettingsPtrOutput) ReceiptDeliveryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettings) *string {
		if v == nil {
			return nil
		}
		return v.ReceiptDeliveryUrl
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to send inbound MDN to message box.
func (o AS2MdnSettingsPtrOutput) SendInboundMDNToMessageBox() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.SendInboundMDNToMessageBox
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to send the asynchronous MDN.
func (o AS2MdnSettingsPtrOutput) SendMDNAsynchronously() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.SendMDNAsynchronously
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether the MDN needs to be signed or not.
func (o AS2MdnSettingsPtrOutput) SignMDN() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.SignMDN
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to sign the outbound MDN if optional.
func (o AS2MdnSettingsPtrOutput) SignOutboundMDNIfOptional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.SignOutboundMDNIfOptional
	}).(pulumi.BoolPtrOutput)
}

// The AS2 agreement mdn settings.
type AS2MdnSettingsResponse struct {
	// The disposition notification to header value.
	DispositionNotificationTo *string `pulumi:"dispositionNotificationTo"`
	// The MDN text.
	MdnText *string `pulumi:"mdnText"`
	// The signing or hashing algorithm.
	MicHashingAlgorithm string `pulumi:"micHashingAlgorithm"`
	// The value indicating whether to send or request a MDN.
	NeedMDN bool `pulumi:"needMDN"`
	// The receipt delivery URL.
	ReceiptDeliveryUrl *string `pulumi:"receiptDeliveryUrl"`
	// The value indicating whether to send inbound MDN to message box.
	SendInboundMDNToMessageBox bool `pulumi:"sendInboundMDNToMessageBox"`
	// The value indicating whether to send the asynchronous MDN.
	SendMDNAsynchronously bool `pulumi:"sendMDNAsynchronously"`
	// The value indicating whether the MDN needs to be signed or not.
	SignMDN bool `pulumi:"signMDN"`
	// The value indicating whether to sign the outbound MDN if optional.
	SignOutboundMDNIfOptional bool `pulumi:"signOutboundMDNIfOptional"`
}

// AS2MdnSettingsResponseInput is an input type that accepts AS2MdnSettingsResponseArgs and AS2MdnSettingsResponseOutput values.
// You can construct a concrete instance of `AS2MdnSettingsResponseInput` via:
//
//          AS2MdnSettingsResponseArgs{...}
type AS2MdnSettingsResponseInput interface {
	pulumi.Input

	ToAS2MdnSettingsResponseOutput() AS2MdnSettingsResponseOutput
	ToAS2MdnSettingsResponseOutputWithContext(context.Context) AS2MdnSettingsResponseOutput
}

// The AS2 agreement mdn settings.
type AS2MdnSettingsResponseArgs struct {
	// The disposition notification to header value.
	DispositionNotificationTo pulumi.StringPtrInput `pulumi:"dispositionNotificationTo"`
	// The MDN text.
	MdnText pulumi.StringPtrInput `pulumi:"mdnText"`
	// The signing or hashing algorithm.
	MicHashingAlgorithm pulumi.StringInput `pulumi:"micHashingAlgorithm"`
	// The value indicating whether to send or request a MDN.
	NeedMDN pulumi.BoolInput `pulumi:"needMDN"`
	// The receipt delivery URL.
	ReceiptDeliveryUrl pulumi.StringPtrInput `pulumi:"receiptDeliveryUrl"`
	// The value indicating whether to send inbound MDN to message box.
	SendInboundMDNToMessageBox pulumi.BoolInput `pulumi:"sendInboundMDNToMessageBox"`
	// The value indicating whether to send the asynchronous MDN.
	SendMDNAsynchronously pulumi.BoolInput `pulumi:"sendMDNAsynchronously"`
	// The value indicating whether the MDN needs to be signed or not.
	SignMDN pulumi.BoolInput `pulumi:"signMDN"`
	// The value indicating whether to sign the outbound MDN if optional.
	SignOutboundMDNIfOptional pulumi.BoolInput `pulumi:"signOutboundMDNIfOptional"`
}

func (AS2MdnSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2MdnSettingsResponse)(nil)).Elem()
}

func (i AS2MdnSettingsResponseArgs) ToAS2MdnSettingsResponseOutput() AS2MdnSettingsResponseOutput {
	return i.ToAS2MdnSettingsResponseOutputWithContext(context.Background())
}

func (i AS2MdnSettingsResponseArgs) ToAS2MdnSettingsResponseOutputWithContext(ctx context.Context) AS2MdnSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2MdnSettingsResponseOutput)
}

func (i AS2MdnSettingsResponseArgs) ToAS2MdnSettingsResponsePtrOutput() AS2MdnSettingsResponsePtrOutput {
	return i.ToAS2MdnSettingsResponsePtrOutputWithContext(context.Background())
}

func (i AS2MdnSettingsResponseArgs) ToAS2MdnSettingsResponsePtrOutputWithContext(ctx context.Context) AS2MdnSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2MdnSettingsResponseOutput).ToAS2MdnSettingsResponsePtrOutputWithContext(ctx)
}

// AS2MdnSettingsResponsePtrInput is an input type that accepts AS2MdnSettingsResponseArgs, AS2MdnSettingsResponsePtr and AS2MdnSettingsResponsePtrOutput values.
// You can construct a concrete instance of `AS2MdnSettingsResponsePtrInput` via:
//
//          AS2MdnSettingsResponseArgs{...}
//
//  or:
//
//          nil
type AS2MdnSettingsResponsePtrInput interface {
	pulumi.Input

	ToAS2MdnSettingsResponsePtrOutput() AS2MdnSettingsResponsePtrOutput
	ToAS2MdnSettingsResponsePtrOutputWithContext(context.Context) AS2MdnSettingsResponsePtrOutput
}

type as2mdnSettingsResponsePtrType AS2MdnSettingsResponseArgs

func AS2MdnSettingsResponsePtr(v *AS2MdnSettingsResponseArgs) AS2MdnSettingsResponsePtrInput {
	return (*as2mdnSettingsResponsePtrType)(v)
}

func (*as2mdnSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2MdnSettingsResponse)(nil)).Elem()
}

func (i *as2mdnSettingsResponsePtrType) ToAS2MdnSettingsResponsePtrOutput() AS2MdnSettingsResponsePtrOutput {
	return i.ToAS2MdnSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *as2mdnSettingsResponsePtrType) ToAS2MdnSettingsResponsePtrOutputWithContext(ctx context.Context) AS2MdnSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2MdnSettingsResponsePtrOutput)
}

// The AS2 agreement mdn settings.
type AS2MdnSettingsResponseOutput struct{ *pulumi.OutputState }

func (AS2MdnSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2MdnSettingsResponse)(nil)).Elem()
}

func (o AS2MdnSettingsResponseOutput) ToAS2MdnSettingsResponseOutput() AS2MdnSettingsResponseOutput {
	return o
}

func (o AS2MdnSettingsResponseOutput) ToAS2MdnSettingsResponseOutputWithContext(ctx context.Context) AS2MdnSettingsResponseOutput {
	return o
}

func (o AS2MdnSettingsResponseOutput) ToAS2MdnSettingsResponsePtrOutput() AS2MdnSettingsResponsePtrOutput {
	return o.ToAS2MdnSettingsResponsePtrOutputWithContext(context.Background())
}

func (o AS2MdnSettingsResponseOutput) ToAS2MdnSettingsResponsePtrOutputWithContext(ctx context.Context) AS2MdnSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) *AS2MdnSettingsResponse {
		return &v
	}).(AS2MdnSettingsResponsePtrOutput)
}

// The disposition notification to header value.
func (o AS2MdnSettingsResponseOutput) DispositionNotificationTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) *string { return v.DispositionNotificationTo }).(pulumi.StringPtrOutput)
}

// The MDN text.
func (o AS2MdnSettingsResponseOutput) MdnText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) *string { return v.MdnText }).(pulumi.StringPtrOutput)
}

// The signing or hashing algorithm.
func (o AS2MdnSettingsResponseOutput) MicHashingAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) string { return v.MicHashingAlgorithm }).(pulumi.StringOutput)
}

// The value indicating whether to send or request a MDN.
func (o AS2MdnSettingsResponseOutput) NeedMDN() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) bool { return v.NeedMDN }).(pulumi.BoolOutput)
}

// The receipt delivery URL.
func (o AS2MdnSettingsResponseOutput) ReceiptDeliveryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) *string { return v.ReceiptDeliveryUrl }).(pulumi.StringPtrOutput)
}

// The value indicating whether to send inbound MDN to message box.
func (o AS2MdnSettingsResponseOutput) SendInboundMDNToMessageBox() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) bool { return v.SendInboundMDNToMessageBox }).(pulumi.BoolOutput)
}

// The value indicating whether to send the asynchronous MDN.
func (o AS2MdnSettingsResponseOutput) SendMDNAsynchronously() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) bool { return v.SendMDNAsynchronously }).(pulumi.BoolOutput)
}

// The value indicating whether the MDN needs to be signed or not.
func (o AS2MdnSettingsResponseOutput) SignMDN() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) bool { return v.SignMDN }).(pulumi.BoolOutput)
}

// The value indicating whether to sign the outbound MDN if optional.
func (o AS2MdnSettingsResponseOutput) SignOutboundMDNIfOptional() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) bool { return v.SignOutboundMDNIfOptional }).(pulumi.BoolOutput)
}

type AS2MdnSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2MdnSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2MdnSettingsResponse)(nil)).Elem()
}

func (o AS2MdnSettingsResponsePtrOutput) ToAS2MdnSettingsResponsePtrOutput() AS2MdnSettingsResponsePtrOutput {
	return o
}

func (o AS2MdnSettingsResponsePtrOutput) ToAS2MdnSettingsResponsePtrOutputWithContext(ctx context.Context) AS2MdnSettingsResponsePtrOutput {
	return o
}

func (o AS2MdnSettingsResponsePtrOutput) Elem() AS2MdnSettingsResponseOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) AS2MdnSettingsResponse { return *v }).(AS2MdnSettingsResponseOutput)
}

// The disposition notification to header value.
func (o AS2MdnSettingsResponsePtrOutput) DispositionNotificationTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.DispositionNotificationTo
	}).(pulumi.StringPtrOutput)
}

// The MDN text.
func (o AS2MdnSettingsResponsePtrOutput) MdnText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.MdnText
	}).(pulumi.StringPtrOutput)
}

// The signing or hashing algorithm.
func (o AS2MdnSettingsResponsePtrOutput) MicHashingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MicHashingAlgorithm
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to send or request a MDN.
func (o AS2MdnSettingsResponsePtrOutput) NeedMDN() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.NeedMDN
	}).(pulumi.BoolPtrOutput)
}

// The receipt delivery URL.
func (o AS2MdnSettingsResponsePtrOutput) ReceiptDeliveryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReceiptDeliveryUrl
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to send inbound MDN to message box.
func (o AS2MdnSettingsResponsePtrOutput) SendInboundMDNToMessageBox() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.SendInboundMDNToMessageBox
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to send the asynchronous MDN.
func (o AS2MdnSettingsResponsePtrOutput) SendMDNAsynchronously() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.SendMDNAsynchronously
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether the MDN needs to be signed or not.
func (o AS2MdnSettingsResponsePtrOutput) SignMDN() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.SignMDN
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to sign the outbound MDN if optional.
func (o AS2MdnSettingsResponsePtrOutput) SignOutboundMDNIfOptional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.SignOutboundMDNIfOptional
	}).(pulumi.BoolPtrOutput)
}

// The AS2 agreement message connection settings.
type AS2MessageConnectionSettings struct {
	// The value indicating whether to ignore mismatch in certificate name.
	IgnoreCertificateNameMismatch bool `pulumi:"ignoreCertificateNameMismatch"`
	// The value indicating whether to keep the connection alive.
	KeepHttpConnectionAlive bool `pulumi:"keepHttpConnectionAlive"`
	// The value indicating whether to support HTTP status code 'CONTINUE'.
	SupportHttpStatusCodeContinue bool `pulumi:"supportHttpStatusCodeContinue"`
	// The value indicating whether to unfold the HTTP headers.
	UnfoldHttpHeaders bool `pulumi:"unfoldHttpHeaders"`
}

// AS2MessageConnectionSettingsInput is an input type that accepts AS2MessageConnectionSettingsArgs and AS2MessageConnectionSettingsOutput values.
// You can construct a concrete instance of `AS2MessageConnectionSettingsInput` via:
//
//          AS2MessageConnectionSettingsArgs{...}
type AS2MessageConnectionSettingsInput interface {
	pulumi.Input

	ToAS2MessageConnectionSettingsOutput() AS2MessageConnectionSettingsOutput
	ToAS2MessageConnectionSettingsOutputWithContext(context.Context) AS2MessageConnectionSettingsOutput
}

// The AS2 agreement message connection settings.
type AS2MessageConnectionSettingsArgs struct {
	// The value indicating whether to ignore mismatch in certificate name.
	IgnoreCertificateNameMismatch pulumi.BoolInput `pulumi:"ignoreCertificateNameMismatch"`
	// The value indicating whether to keep the connection alive.
	KeepHttpConnectionAlive pulumi.BoolInput `pulumi:"keepHttpConnectionAlive"`
	// The value indicating whether to support HTTP status code 'CONTINUE'.
	SupportHttpStatusCodeContinue pulumi.BoolInput `pulumi:"supportHttpStatusCodeContinue"`
	// The value indicating whether to unfold the HTTP headers.
	UnfoldHttpHeaders pulumi.BoolInput `pulumi:"unfoldHttpHeaders"`
}

func (AS2MessageConnectionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2MessageConnectionSettings)(nil)).Elem()
}

func (i AS2MessageConnectionSettingsArgs) ToAS2MessageConnectionSettingsOutput() AS2MessageConnectionSettingsOutput {
	return i.ToAS2MessageConnectionSettingsOutputWithContext(context.Background())
}

func (i AS2MessageConnectionSettingsArgs) ToAS2MessageConnectionSettingsOutputWithContext(ctx context.Context) AS2MessageConnectionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2MessageConnectionSettingsOutput)
}

func (i AS2MessageConnectionSettingsArgs) ToAS2MessageConnectionSettingsPtrOutput() AS2MessageConnectionSettingsPtrOutput {
	return i.ToAS2MessageConnectionSettingsPtrOutputWithContext(context.Background())
}

func (i AS2MessageConnectionSettingsArgs) ToAS2MessageConnectionSettingsPtrOutputWithContext(ctx context.Context) AS2MessageConnectionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2MessageConnectionSettingsOutput).ToAS2MessageConnectionSettingsPtrOutputWithContext(ctx)
}

// AS2MessageConnectionSettingsPtrInput is an input type that accepts AS2MessageConnectionSettingsArgs, AS2MessageConnectionSettingsPtr and AS2MessageConnectionSettingsPtrOutput values.
// You can construct a concrete instance of `AS2MessageConnectionSettingsPtrInput` via:
//
//          AS2MessageConnectionSettingsArgs{...}
//
//  or:
//
//          nil
type AS2MessageConnectionSettingsPtrInput interface {
	pulumi.Input

	ToAS2MessageConnectionSettingsPtrOutput() AS2MessageConnectionSettingsPtrOutput
	ToAS2MessageConnectionSettingsPtrOutputWithContext(context.Context) AS2MessageConnectionSettingsPtrOutput
}

type as2messageConnectionSettingsPtrType AS2MessageConnectionSettingsArgs

func AS2MessageConnectionSettingsPtr(v *AS2MessageConnectionSettingsArgs) AS2MessageConnectionSettingsPtrInput {
	return (*as2messageConnectionSettingsPtrType)(v)
}

func (*as2messageConnectionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2MessageConnectionSettings)(nil)).Elem()
}

func (i *as2messageConnectionSettingsPtrType) ToAS2MessageConnectionSettingsPtrOutput() AS2MessageConnectionSettingsPtrOutput {
	return i.ToAS2MessageConnectionSettingsPtrOutputWithContext(context.Background())
}

func (i *as2messageConnectionSettingsPtrType) ToAS2MessageConnectionSettingsPtrOutputWithContext(ctx context.Context) AS2MessageConnectionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2MessageConnectionSettingsPtrOutput)
}

// The AS2 agreement message connection settings.
type AS2MessageConnectionSettingsOutput struct{ *pulumi.OutputState }

func (AS2MessageConnectionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2MessageConnectionSettings)(nil)).Elem()
}

func (o AS2MessageConnectionSettingsOutput) ToAS2MessageConnectionSettingsOutput() AS2MessageConnectionSettingsOutput {
	return o
}

func (o AS2MessageConnectionSettingsOutput) ToAS2MessageConnectionSettingsOutputWithContext(ctx context.Context) AS2MessageConnectionSettingsOutput {
	return o
}

func (o AS2MessageConnectionSettingsOutput) ToAS2MessageConnectionSettingsPtrOutput() AS2MessageConnectionSettingsPtrOutput {
	return o.ToAS2MessageConnectionSettingsPtrOutputWithContext(context.Background())
}

func (o AS2MessageConnectionSettingsOutput) ToAS2MessageConnectionSettingsPtrOutputWithContext(ctx context.Context) AS2MessageConnectionSettingsPtrOutput {
	return o.ApplyT(func(v AS2MessageConnectionSettings) *AS2MessageConnectionSettings {
		return &v
	}).(AS2MessageConnectionSettingsPtrOutput)
}

// The value indicating whether to ignore mismatch in certificate name.
func (o AS2MessageConnectionSettingsOutput) IgnoreCertificateNameMismatch() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2MessageConnectionSettings) bool { return v.IgnoreCertificateNameMismatch }).(pulumi.BoolOutput)
}

// The value indicating whether to keep the connection alive.
func (o AS2MessageConnectionSettingsOutput) KeepHttpConnectionAlive() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2MessageConnectionSettings) bool { return v.KeepHttpConnectionAlive }).(pulumi.BoolOutput)
}

// The value indicating whether to support HTTP status code 'CONTINUE'.
func (o AS2MessageConnectionSettingsOutput) SupportHttpStatusCodeContinue() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2MessageConnectionSettings) bool { return v.SupportHttpStatusCodeContinue }).(pulumi.BoolOutput)
}

// The value indicating whether to unfold the HTTP headers.
func (o AS2MessageConnectionSettingsOutput) UnfoldHttpHeaders() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2MessageConnectionSettings) bool { return v.UnfoldHttpHeaders }).(pulumi.BoolOutput)
}

type AS2MessageConnectionSettingsPtrOutput struct{ *pulumi.OutputState }

func (AS2MessageConnectionSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2MessageConnectionSettings)(nil)).Elem()
}

func (o AS2MessageConnectionSettingsPtrOutput) ToAS2MessageConnectionSettingsPtrOutput() AS2MessageConnectionSettingsPtrOutput {
	return o
}

func (o AS2MessageConnectionSettingsPtrOutput) ToAS2MessageConnectionSettingsPtrOutputWithContext(ctx context.Context) AS2MessageConnectionSettingsPtrOutput {
	return o
}

func (o AS2MessageConnectionSettingsPtrOutput) Elem() AS2MessageConnectionSettingsOutput {
	return o.ApplyT(func(v *AS2MessageConnectionSettings) AS2MessageConnectionSettings { return *v }).(AS2MessageConnectionSettingsOutput)
}

// The value indicating whether to ignore mismatch in certificate name.
func (o AS2MessageConnectionSettingsPtrOutput) IgnoreCertificateNameMismatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MessageConnectionSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.IgnoreCertificateNameMismatch
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to keep the connection alive.
func (o AS2MessageConnectionSettingsPtrOutput) KeepHttpConnectionAlive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MessageConnectionSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.KeepHttpConnectionAlive
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to support HTTP status code 'CONTINUE'.
func (o AS2MessageConnectionSettingsPtrOutput) SupportHttpStatusCodeContinue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MessageConnectionSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.SupportHttpStatusCodeContinue
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to unfold the HTTP headers.
func (o AS2MessageConnectionSettingsPtrOutput) UnfoldHttpHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MessageConnectionSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.UnfoldHttpHeaders
	}).(pulumi.BoolPtrOutput)
}

// The AS2 agreement message connection settings.
type AS2MessageConnectionSettingsResponse struct {
	// The value indicating whether to ignore mismatch in certificate name.
	IgnoreCertificateNameMismatch bool `pulumi:"ignoreCertificateNameMismatch"`
	// The value indicating whether to keep the connection alive.
	KeepHttpConnectionAlive bool `pulumi:"keepHttpConnectionAlive"`
	// The value indicating whether to support HTTP status code 'CONTINUE'.
	SupportHttpStatusCodeContinue bool `pulumi:"supportHttpStatusCodeContinue"`
	// The value indicating whether to unfold the HTTP headers.
	UnfoldHttpHeaders bool `pulumi:"unfoldHttpHeaders"`
}

// AS2MessageConnectionSettingsResponseInput is an input type that accepts AS2MessageConnectionSettingsResponseArgs and AS2MessageConnectionSettingsResponseOutput values.
// You can construct a concrete instance of `AS2MessageConnectionSettingsResponseInput` via:
//
//          AS2MessageConnectionSettingsResponseArgs{...}
type AS2MessageConnectionSettingsResponseInput interface {
	pulumi.Input

	ToAS2MessageConnectionSettingsResponseOutput() AS2MessageConnectionSettingsResponseOutput
	ToAS2MessageConnectionSettingsResponseOutputWithContext(context.Context) AS2MessageConnectionSettingsResponseOutput
}

// The AS2 agreement message connection settings.
type AS2MessageConnectionSettingsResponseArgs struct {
	// The value indicating whether to ignore mismatch in certificate name.
	IgnoreCertificateNameMismatch pulumi.BoolInput `pulumi:"ignoreCertificateNameMismatch"`
	// The value indicating whether to keep the connection alive.
	KeepHttpConnectionAlive pulumi.BoolInput `pulumi:"keepHttpConnectionAlive"`
	// The value indicating whether to support HTTP status code 'CONTINUE'.
	SupportHttpStatusCodeContinue pulumi.BoolInput `pulumi:"supportHttpStatusCodeContinue"`
	// The value indicating whether to unfold the HTTP headers.
	UnfoldHttpHeaders pulumi.BoolInput `pulumi:"unfoldHttpHeaders"`
}

func (AS2MessageConnectionSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2MessageConnectionSettingsResponse)(nil)).Elem()
}

func (i AS2MessageConnectionSettingsResponseArgs) ToAS2MessageConnectionSettingsResponseOutput() AS2MessageConnectionSettingsResponseOutput {
	return i.ToAS2MessageConnectionSettingsResponseOutputWithContext(context.Background())
}

func (i AS2MessageConnectionSettingsResponseArgs) ToAS2MessageConnectionSettingsResponseOutputWithContext(ctx context.Context) AS2MessageConnectionSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2MessageConnectionSettingsResponseOutput)
}

func (i AS2MessageConnectionSettingsResponseArgs) ToAS2MessageConnectionSettingsResponsePtrOutput() AS2MessageConnectionSettingsResponsePtrOutput {
	return i.ToAS2MessageConnectionSettingsResponsePtrOutputWithContext(context.Background())
}

func (i AS2MessageConnectionSettingsResponseArgs) ToAS2MessageConnectionSettingsResponsePtrOutputWithContext(ctx context.Context) AS2MessageConnectionSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2MessageConnectionSettingsResponseOutput).ToAS2MessageConnectionSettingsResponsePtrOutputWithContext(ctx)
}

// AS2MessageConnectionSettingsResponsePtrInput is an input type that accepts AS2MessageConnectionSettingsResponseArgs, AS2MessageConnectionSettingsResponsePtr and AS2MessageConnectionSettingsResponsePtrOutput values.
// You can construct a concrete instance of `AS2MessageConnectionSettingsResponsePtrInput` via:
//
//          AS2MessageConnectionSettingsResponseArgs{...}
//
//  or:
//
//          nil
type AS2MessageConnectionSettingsResponsePtrInput interface {
	pulumi.Input

	ToAS2MessageConnectionSettingsResponsePtrOutput() AS2MessageConnectionSettingsResponsePtrOutput
	ToAS2MessageConnectionSettingsResponsePtrOutputWithContext(context.Context) AS2MessageConnectionSettingsResponsePtrOutput
}

type as2messageConnectionSettingsResponsePtrType AS2MessageConnectionSettingsResponseArgs

func AS2MessageConnectionSettingsResponsePtr(v *AS2MessageConnectionSettingsResponseArgs) AS2MessageConnectionSettingsResponsePtrInput {
	return (*as2messageConnectionSettingsResponsePtrType)(v)
}

func (*as2messageConnectionSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2MessageConnectionSettingsResponse)(nil)).Elem()
}

func (i *as2messageConnectionSettingsResponsePtrType) ToAS2MessageConnectionSettingsResponsePtrOutput() AS2MessageConnectionSettingsResponsePtrOutput {
	return i.ToAS2MessageConnectionSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *as2messageConnectionSettingsResponsePtrType) ToAS2MessageConnectionSettingsResponsePtrOutputWithContext(ctx context.Context) AS2MessageConnectionSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2MessageConnectionSettingsResponsePtrOutput)
}

// The AS2 agreement message connection settings.
type AS2MessageConnectionSettingsResponseOutput struct{ *pulumi.OutputState }

func (AS2MessageConnectionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2MessageConnectionSettingsResponse)(nil)).Elem()
}

func (o AS2MessageConnectionSettingsResponseOutput) ToAS2MessageConnectionSettingsResponseOutput() AS2MessageConnectionSettingsResponseOutput {
	return o
}

func (o AS2MessageConnectionSettingsResponseOutput) ToAS2MessageConnectionSettingsResponseOutputWithContext(ctx context.Context) AS2MessageConnectionSettingsResponseOutput {
	return o
}

func (o AS2MessageConnectionSettingsResponseOutput) ToAS2MessageConnectionSettingsResponsePtrOutput() AS2MessageConnectionSettingsResponsePtrOutput {
	return o.ToAS2MessageConnectionSettingsResponsePtrOutputWithContext(context.Background())
}

func (o AS2MessageConnectionSettingsResponseOutput) ToAS2MessageConnectionSettingsResponsePtrOutputWithContext(ctx context.Context) AS2MessageConnectionSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2MessageConnectionSettingsResponse) *AS2MessageConnectionSettingsResponse {
		return &v
	}).(AS2MessageConnectionSettingsResponsePtrOutput)
}

// The value indicating whether to ignore mismatch in certificate name.
func (o AS2MessageConnectionSettingsResponseOutput) IgnoreCertificateNameMismatch() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2MessageConnectionSettingsResponse) bool { return v.IgnoreCertificateNameMismatch }).(pulumi.BoolOutput)
}

// The value indicating whether to keep the connection alive.
func (o AS2MessageConnectionSettingsResponseOutput) KeepHttpConnectionAlive() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2MessageConnectionSettingsResponse) bool { return v.KeepHttpConnectionAlive }).(pulumi.BoolOutput)
}

// The value indicating whether to support HTTP status code 'CONTINUE'.
func (o AS2MessageConnectionSettingsResponseOutput) SupportHttpStatusCodeContinue() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2MessageConnectionSettingsResponse) bool { return v.SupportHttpStatusCodeContinue }).(pulumi.BoolOutput)
}

// The value indicating whether to unfold the HTTP headers.
func (o AS2MessageConnectionSettingsResponseOutput) UnfoldHttpHeaders() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2MessageConnectionSettingsResponse) bool { return v.UnfoldHttpHeaders }).(pulumi.BoolOutput)
}

type AS2MessageConnectionSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2MessageConnectionSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2MessageConnectionSettingsResponse)(nil)).Elem()
}

func (o AS2MessageConnectionSettingsResponsePtrOutput) ToAS2MessageConnectionSettingsResponsePtrOutput() AS2MessageConnectionSettingsResponsePtrOutput {
	return o
}

func (o AS2MessageConnectionSettingsResponsePtrOutput) ToAS2MessageConnectionSettingsResponsePtrOutputWithContext(ctx context.Context) AS2MessageConnectionSettingsResponsePtrOutput {
	return o
}

func (o AS2MessageConnectionSettingsResponsePtrOutput) Elem() AS2MessageConnectionSettingsResponseOutput {
	return o.ApplyT(func(v *AS2MessageConnectionSettingsResponse) AS2MessageConnectionSettingsResponse { return *v }).(AS2MessageConnectionSettingsResponseOutput)
}

// The value indicating whether to ignore mismatch in certificate name.
func (o AS2MessageConnectionSettingsResponsePtrOutput) IgnoreCertificateNameMismatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MessageConnectionSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IgnoreCertificateNameMismatch
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to keep the connection alive.
func (o AS2MessageConnectionSettingsResponsePtrOutput) KeepHttpConnectionAlive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MessageConnectionSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.KeepHttpConnectionAlive
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to support HTTP status code 'CONTINUE'.
func (o AS2MessageConnectionSettingsResponsePtrOutput) SupportHttpStatusCodeContinue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MessageConnectionSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.SupportHttpStatusCodeContinue
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to unfold the HTTP headers.
func (o AS2MessageConnectionSettingsResponsePtrOutput) UnfoldHttpHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MessageConnectionSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.UnfoldHttpHeaders
	}).(pulumi.BoolPtrOutput)
}

// The integration account AS2 one-way agreement.
type AS2OneWayAgreement struct {
	// The AS2 protocol settings.
	ProtocolSettings AS2ProtocolSettings `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity BusinessIdentity `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity BusinessIdentity `pulumi:"senderBusinessIdentity"`
}

// AS2OneWayAgreementInput is an input type that accepts AS2OneWayAgreementArgs and AS2OneWayAgreementOutput values.
// You can construct a concrete instance of `AS2OneWayAgreementInput` via:
//
//          AS2OneWayAgreementArgs{...}
type AS2OneWayAgreementInput interface {
	pulumi.Input

	ToAS2OneWayAgreementOutput() AS2OneWayAgreementOutput
	ToAS2OneWayAgreementOutputWithContext(context.Context) AS2OneWayAgreementOutput
}

// The integration account AS2 one-way agreement.
type AS2OneWayAgreementArgs struct {
	// The AS2 protocol settings.
	ProtocolSettings AS2ProtocolSettingsInput `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity BusinessIdentityInput `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity BusinessIdentityInput `pulumi:"senderBusinessIdentity"`
}

func (AS2OneWayAgreementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2OneWayAgreement)(nil)).Elem()
}

func (i AS2OneWayAgreementArgs) ToAS2OneWayAgreementOutput() AS2OneWayAgreementOutput {
	return i.ToAS2OneWayAgreementOutputWithContext(context.Background())
}

func (i AS2OneWayAgreementArgs) ToAS2OneWayAgreementOutputWithContext(ctx context.Context) AS2OneWayAgreementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2OneWayAgreementOutput)
}

func (i AS2OneWayAgreementArgs) ToAS2OneWayAgreementPtrOutput() AS2OneWayAgreementPtrOutput {
	return i.ToAS2OneWayAgreementPtrOutputWithContext(context.Background())
}

func (i AS2OneWayAgreementArgs) ToAS2OneWayAgreementPtrOutputWithContext(ctx context.Context) AS2OneWayAgreementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2OneWayAgreementOutput).ToAS2OneWayAgreementPtrOutputWithContext(ctx)
}

// AS2OneWayAgreementPtrInput is an input type that accepts AS2OneWayAgreementArgs, AS2OneWayAgreementPtr and AS2OneWayAgreementPtrOutput values.
// You can construct a concrete instance of `AS2OneWayAgreementPtrInput` via:
//
//          AS2OneWayAgreementArgs{...}
//
//  or:
//
//          nil
type AS2OneWayAgreementPtrInput interface {
	pulumi.Input

	ToAS2OneWayAgreementPtrOutput() AS2OneWayAgreementPtrOutput
	ToAS2OneWayAgreementPtrOutputWithContext(context.Context) AS2OneWayAgreementPtrOutput
}

type as2oneWayAgreementPtrType AS2OneWayAgreementArgs

func AS2OneWayAgreementPtr(v *AS2OneWayAgreementArgs) AS2OneWayAgreementPtrInput {
	return (*as2oneWayAgreementPtrType)(v)
}

func (*as2oneWayAgreementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2OneWayAgreement)(nil)).Elem()
}

func (i *as2oneWayAgreementPtrType) ToAS2OneWayAgreementPtrOutput() AS2OneWayAgreementPtrOutput {
	return i.ToAS2OneWayAgreementPtrOutputWithContext(context.Background())
}

func (i *as2oneWayAgreementPtrType) ToAS2OneWayAgreementPtrOutputWithContext(ctx context.Context) AS2OneWayAgreementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2OneWayAgreementPtrOutput)
}

// The integration account AS2 one-way agreement.
type AS2OneWayAgreementOutput struct{ *pulumi.OutputState }

func (AS2OneWayAgreementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2OneWayAgreement)(nil)).Elem()
}

func (o AS2OneWayAgreementOutput) ToAS2OneWayAgreementOutput() AS2OneWayAgreementOutput {
	return o
}

func (o AS2OneWayAgreementOutput) ToAS2OneWayAgreementOutputWithContext(ctx context.Context) AS2OneWayAgreementOutput {
	return o
}

func (o AS2OneWayAgreementOutput) ToAS2OneWayAgreementPtrOutput() AS2OneWayAgreementPtrOutput {
	return o.ToAS2OneWayAgreementPtrOutputWithContext(context.Background())
}

func (o AS2OneWayAgreementOutput) ToAS2OneWayAgreementPtrOutputWithContext(ctx context.Context) AS2OneWayAgreementPtrOutput {
	return o.ApplyT(func(v AS2OneWayAgreement) *AS2OneWayAgreement {
		return &v
	}).(AS2OneWayAgreementPtrOutput)
}

// The AS2 protocol settings.
func (o AS2OneWayAgreementOutput) ProtocolSettings() AS2ProtocolSettingsOutput {
	return o.ApplyT(func(v AS2OneWayAgreement) AS2ProtocolSettings { return v.ProtocolSettings }).(AS2ProtocolSettingsOutput)
}

// The receiver business identity
func (o AS2OneWayAgreementOutput) ReceiverBusinessIdentity() BusinessIdentityOutput {
	return o.ApplyT(func(v AS2OneWayAgreement) BusinessIdentity { return v.ReceiverBusinessIdentity }).(BusinessIdentityOutput)
}

// The sender business identity
func (o AS2OneWayAgreementOutput) SenderBusinessIdentity() BusinessIdentityOutput {
	return o.ApplyT(func(v AS2OneWayAgreement) BusinessIdentity { return v.SenderBusinessIdentity }).(BusinessIdentityOutput)
}

type AS2OneWayAgreementPtrOutput struct{ *pulumi.OutputState }

func (AS2OneWayAgreementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2OneWayAgreement)(nil)).Elem()
}

func (o AS2OneWayAgreementPtrOutput) ToAS2OneWayAgreementPtrOutput() AS2OneWayAgreementPtrOutput {
	return o
}

func (o AS2OneWayAgreementPtrOutput) ToAS2OneWayAgreementPtrOutputWithContext(ctx context.Context) AS2OneWayAgreementPtrOutput {
	return o
}

func (o AS2OneWayAgreementPtrOutput) Elem() AS2OneWayAgreementOutput {
	return o.ApplyT(func(v *AS2OneWayAgreement) AS2OneWayAgreement { return *v }).(AS2OneWayAgreementOutput)
}

// The AS2 protocol settings.
func (o AS2OneWayAgreementPtrOutput) ProtocolSettings() AS2ProtocolSettingsPtrOutput {
	return o.ApplyT(func(v *AS2OneWayAgreement) *AS2ProtocolSettings {
		if v == nil {
			return nil
		}
		return &v.ProtocolSettings
	}).(AS2ProtocolSettingsPtrOutput)
}

// The receiver business identity
func (o AS2OneWayAgreementPtrOutput) ReceiverBusinessIdentity() BusinessIdentityPtrOutput {
	return o.ApplyT(func(v *AS2OneWayAgreement) *BusinessIdentity {
		if v == nil {
			return nil
		}
		return &v.ReceiverBusinessIdentity
	}).(BusinessIdentityPtrOutput)
}

// The sender business identity
func (o AS2OneWayAgreementPtrOutput) SenderBusinessIdentity() BusinessIdentityPtrOutput {
	return o.ApplyT(func(v *AS2OneWayAgreement) *BusinessIdentity {
		if v == nil {
			return nil
		}
		return &v.SenderBusinessIdentity
	}).(BusinessIdentityPtrOutput)
}

// The integration account AS2 one-way agreement.
type AS2OneWayAgreementResponse struct {
	// The AS2 protocol settings.
	ProtocolSettings AS2ProtocolSettingsResponse `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity BusinessIdentityResponse `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity BusinessIdentityResponse `pulumi:"senderBusinessIdentity"`
}

// AS2OneWayAgreementResponseInput is an input type that accepts AS2OneWayAgreementResponseArgs and AS2OneWayAgreementResponseOutput values.
// You can construct a concrete instance of `AS2OneWayAgreementResponseInput` via:
//
//          AS2OneWayAgreementResponseArgs{...}
type AS2OneWayAgreementResponseInput interface {
	pulumi.Input

	ToAS2OneWayAgreementResponseOutput() AS2OneWayAgreementResponseOutput
	ToAS2OneWayAgreementResponseOutputWithContext(context.Context) AS2OneWayAgreementResponseOutput
}

// The integration account AS2 one-way agreement.
type AS2OneWayAgreementResponseArgs struct {
	// The AS2 protocol settings.
	ProtocolSettings AS2ProtocolSettingsResponseInput `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity BusinessIdentityResponseInput `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity BusinessIdentityResponseInput `pulumi:"senderBusinessIdentity"`
}

func (AS2OneWayAgreementResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2OneWayAgreementResponse)(nil)).Elem()
}

func (i AS2OneWayAgreementResponseArgs) ToAS2OneWayAgreementResponseOutput() AS2OneWayAgreementResponseOutput {
	return i.ToAS2OneWayAgreementResponseOutputWithContext(context.Background())
}

func (i AS2OneWayAgreementResponseArgs) ToAS2OneWayAgreementResponseOutputWithContext(ctx context.Context) AS2OneWayAgreementResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2OneWayAgreementResponseOutput)
}

func (i AS2OneWayAgreementResponseArgs) ToAS2OneWayAgreementResponsePtrOutput() AS2OneWayAgreementResponsePtrOutput {
	return i.ToAS2OneWayAgreementResponsePtrOutputWithContext(context.Background())
}

func (i AS2OneWayAgreementResponseArgs) ToAS2OneWayAgreementResponsePtrOutputWithContext(ctx context.Context) AS2OneWayAgreementResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2OneWayAgreementResponseOutput).ToAS2OneWayAgreementResponsePtrOutputWithContext(ctx)
}

// AS2OneWayAgreementResponsePtrInput is an input type that accepts AS2OneWayAgreementResponseArgs, AS2OneWayAgreementResponsePtr and AS2OneWayAgreementResponsePtrOutput values.
// You can construct a concrete instance of `AS2OneWayAgreementResponsePtrInput` via:
//
//          AS2OneWayAgreementResponseArgs{...}
//
//  or:
//
//          nil
type AS2OneWayAgreementResponsePtrInput interface {
	pulumi.Input

	ToAS2OneWayAgreementResponsePtrOutput() AS2OneWayAgreementResponsePtrOutput
	ToAS2OneWayAgreementResponsePtrOutputWithContext(context.Context) AS2OneWayAgreementResponsePtrOutput
}

type as2oneWayAgreementResponsePtrType AS2OneWayAgreementResponseArgs

func AS2OneWayAgreementResponsePtr(v *AS2OneWayAgreementResponseArgs) AS2OneWayAgreementResponsePtrInput {
	return (*as2oneWayAgreementResponsePtrType)(v)
}

func (*as2oneWayAgreementResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2OneWayAgreementResponse)(nil)).Elem()
}

func (i *as2oneWayAgreementResponsePtrType) ToAS2OneWayAgreementResponsePtrOutput() AS2OneWayAgreementResponsePtrOutput {
	return i.ToAS2OneWayAgreementResponsePtrOutputWithContext(context.Background())
}

func (i *as2oneWayAgreementResponsePtrType) ToAS2OneWayAgreementResponsePtrOutputWithContext(ctx context.Context) AS2OneWayAgreementResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2OneWayAgreementResponsePtrOutput)
}

// The integration account AS2 one-way agreement.
type AS2OneWayAgreementResponseOutput struct{ *pulumi.OutputState }

func (AS2OneWayAgreementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2OneWayAgreementResponse)(nil)).Elem()
}

func (o AS2OneWayAgreementResponseOutput) ToAS2OneWayAgreementResponseOutput() AS2OneWayAgreementResponseOutput {
	return o
}

func (o AS2OneWayAgreementResponseOutput) ToAS2OneWayAgreementResponseOutputWithContext(ctx context.Context) AS2OneWayAgreementResponseOutput {
	return o
}

func (o AS2OneWayAgreementResponseOutput) ToAS2OneWayAgreementResponsePtrOutput() AS2OneWayAgreementResponsePtrOutput {
	return o.ToAS2OneWayAgreementResponsePtrOutputWithContext(context.Background())
}

func (o AS2OneWayAgreementResponseOutput) ToAS2OneWayAgreementResponsePtrOutputWithContext(ctx context.Context) AS2OneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v AS2OneWayAgreementResponse) *AS2OneWayAgreementResponse {
		return &v
	}).(AS2OneWayAgreementResponsePtrOutput)
}

// The AS2 protocol settings.
func (o AS2OneWayAgreementResponseOutput) ProtocolSettings() AS2ProtocolSettingsResponseOutput {
	return o.ApplyT(func(v AS2OneWayAgreementResponse) AS2ProtocolSettingsResponse { return v.ProtocolSettings }).(AS2ProtocolSettingsResponseOutput)
}

// The receiver business identity
func (o AS2OneWayAgreementResponseOutput) ReceiverBusinessIdentity() BusinessIdentityResponseOutput {
	return o.ApplyT(func(v AS2OneWayAgreementResponse) BusinessIdentityResponse { return v.ReceiverBusinessIdentity }).(BusinessIdentityResponseOutput)
}

// The sender business identity
func (o AS2OneWayAgreementResponseOutput) SenderBusinessIdentity() BusinessIdentityResponseOutput {
	return o.ApplyT(func(v AS2OneWayAgreementResponse) BusinessIdentityResponse { return v.SenderBusinessIdentity }).(BusinessIdentityResponseOutput)
}

type AS2OneWayAgreementResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2OneWayAgreementResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2OneWayAgreementResponse)(nil)).Elem()
}

func (o AS2OneWayAgreementResponsePtrOutput) ToAS2OneWayAgreementResponsePtrOutput() AS2OneWayAgreementResponsePtrOutput {
	return o
}

func (o AS2OneWayAgreementResponsePtrOutput) ToAS2OneWayAgreementResponsePtrOutputWithContext(ctx context.Context) AS2OneWayAgreementResponsePtrOutput {
	return o
}

func (o AS2OneWayAgreementResponsePtrOutput) Elem() AS2OneWayAgreementResponseOutput {
	return o.ApplyT(func(v *AS2OneWayAgreementResponse) AS2OneWayAgreementResponse { return *v }).(AS2OneWayAgreementResponseOutput)
}

// The AS2 protocol settings.
func (o AS2OneWayAgreementResponsePtrOutput) ProtocolSettings() AS2ProtocolSettingsResponsePtrOutput {
	return o.ApplyT(func(v *AS2OneWayAgreementResponse) *AS2ProtocolSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.ProtocolSettings
	}).(AS2ProtocolSettingsResponsePtrOutput)
}

// The receiver business identity
func (o AS2OneWayAgreementResponsePtrOutput) ReceiverBusinessIdentity() BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v *AS2OneWayAgreementResponse) *BusinessIdentityResponse {
		if v == nil {
			return nil
		}
		return &v.ReceiverBusinessIdentity
	}).(BusinessIdentityResponsePtrOutput)
}

// The sender business identity
func (o AS2OneWayAgreementResponsePtrOutput) SenderBusinessIdentity() BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v *AS2OneWayAgreementResponse) *BusinessIdentityResponse {
		if v == nil {
			return nil
		}
		return &v.SenderBusinessIdentity
	}).(BusinessIdentityResponsePtrOutput)
}

// The AS2 agreement protocol settings.
type AS2ProtocolSettings struct {
	// The acknowledgement connection settings.
	AcknowledgementConnectionSettings AS2AcknowledgementConnectionSettings `pulumi:"acknowledgementConnectionSettings"`
	// The envelope settings.
	EnvelopeSettings AS2EnvelopeSettings `pulumi:"envelopeSettings"`
	// The error settings.
	ErrorSettings AS2ErrorSettings `pulumi:"errorSettings"`
	// The MDN settings.
	MdnSettings AS2MdnSettings `pulumi:"mdnSettings"`
	// The message connection settings.
	MessageConnectionSettings AS2MessageConnectionSettings `pulumi:"messageConnectionSettings"`
	// The security settings.
	SecuritySettings AS2SecuritySettings `pulumi:"securitySettings"`
	// The validation settings.
	ValidationSettings AS2ValidationSettings `pulumi:"validationSettings"`
}

// AS2ProtocolSettingsInput is an input type that accepts AS2ProtocolSettingsArgs and AS2ProtocolSettingsOutput values.
// You can construct a concrete instance of `AS2ProtocolSettingsInput` via:
//
//          AS2ProtocolSettingsArgs{...}
type AS2ProtocolSettingsInput interface {
	pulumi.Input

	ToAS2ProtocolSettingsOutput() AS2ProtocolSettingsOutput
	ToAS2ProtocolSettingsOutputWithContext(context.Context) AS2ProtocolSettingsOutput
}

// The AS2 agreement protocol settings.
type AS2ProtocolSettingsArgs struct {
	// The acknowledgement connection settings.
	AcknowledgementConnectionSettings AS2AcknowledgementConnectionSettingsInput `pulumi:"acknowledgementConnectionSettings"`
	// The envelope settings.
	EnvelopeSettings AS2EnvelopeSettingsInput `pulumi:"envelopeSettings"`
	// The error settings.
	ErrorSettings AS2ErrorSettingsInput `pulumi:"errorSettings"`
	// The MDN settings.
	MdnSettings AS2MdnSettingsInput `pulumi:"mdnSettings"`
	// The message connection settings.
	MessageConnectionSettings AS2MessageConnectionSettingsInput `pulumi:"messageConnectionSettings"`
	// The security settings.
	SecuritySettings AS2SecuritySettingsInput `pulumi:"securitySettings"`
	// The validation settings.
	ValidationSettings AS2ValidationSettingsInput `pulumi:"validationSettings"`
}

func (AS2ProtocolSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2ProtocolSettings)(nil)).Elem()
}

func (i AS2ProtocolSettingsArgs) ToAS2ProtocolSettingsOutput() AS2ProtocolSettingsOutput {
	return i.ToAS2ProtocolSettingsOutputWithContext(context.Background())
}

func (i AS2ProtocolSettingsArgs) ToAS2ProtocolSettingsOutputWithContext(ctx context.Context) AS2ProtocolSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ProtocolSettingsOutput)
}

func (i AS2ProtocolSettingsArgs) ToAS2ProtocolSettingsPtrOutput() AS2ProtocolSettingsPtrOutput {
	return i.ToAS2ProtocolSettingsPtrOutputWithContext(context.Background())
}

func (i AS2ProtocolSettingsArgs) ToAS2ProtocolSettingsPtrOutputWithContext(ctx context.Context) AS2ProtocolSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ProtocolSettingsOutput).ToAS2ProtocolSettingsPtrOutputWithContext(ctx)
}

// AS2ProtocolSettingsPtrInput is an input type that accepts AS2ProtocolSettingsArgs, AS2ProtocolSettingsPtr and AS2ProtocolSettingsPtrOutput values.
// You can construct a concrete instance of `AS2ProtocolSettingsPtrInput` via:
//
//          AS2ProtocolSettingsArgs{...}
//
//  or:
//
//          nil
type AS2ProtocolSettingsPtrInput interface {
	pulumi.Input

	ToAS2ProtocolSettingsPtrOutput() AS2ProtocolSettingsPtrOutput
	ToAS2ProtocolSettingsPtrOutputWithContext(context.Context) AS2ProtocolSettingsPtrOutput
}

type as2protocolSettingsPtrType AS2ProtocolSettingsArgs

func AS2ProtocolSettingsPtr(v *AS2ProtocolSettingsArgs) AS2ProtocolSettingsPtrInput {
	return (*as2protocolSettingsPtrType)(v)
}

func (*as2protocolSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2ProtocolSettings)(nil)).Elem()
}

func (i *as2protocolSettingsPtrType) ToAS2ProtocolSettingsPtrOutput() AS2ProtocolSettingsPtrOutput {
	return i.ToAS2ProtocolSettingsPtrOutputWithContext(context.Background())
}

func (i *as2protocolSettingsPtrType) ToAS2ProtocolSettingsPtrOutputWithContext(ctx context.Context) AS2ProtocolSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ProtocolSettingsPtrOutput)
}

// The AS2 agreement protocol settings.
type AS2ProtocolSettingsOutput struct{ *pulumi.OutputState }

func (AS2ProtocolSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2ProtocolSettings)(nil)).Elem()
}

func (o AS2ProtocolSettingsOutput) ToAS2ProtocolSettingsOutput() AS2ProtocolSettingsOutput {
	return o
}

func (o AS2ProtocolSettingsOutput) ToAS2ProtocolSettingsOutputWithContext(ctx context.Context) AS2ProtocolSettingsOutput {
	return o
}

func (o AS2ProtocolSettingsOutput) ToAS2ProtocolSettingsPtrOutput() AS2ProtocolSettingsPtrOutput {
	return o.ToAS2ProtocolSettingsPtrOutputWithContext(context.Background())
}

func (o AS2ProtocolSettingsOutput) ToAS2ProtocolSettingsPtrOutputWithContext(ctx context.Context) AS2ProtocolSettingsPtrOutput {
	return o.ApplyT(func(v AS2ProtocolSettings) *AS2ProtocolSettings {
		return &v
	}).(AS2ProtocolSettingsPtrOutput)
}

// The acknowledgement connection settings.
func (o AS2ProtocolSettingsOutput) AcknowledgementConnectionSettings() AS2AcknowledgementConnectionSettingsOutput {
	return o.ApplyT(func(v AS2ProtocolSettings) AS2AcknowledgementConnectionSettings {
		return v.AcknowledgementConnectionSettings
	}).(AS2AcknowledgementConnectionSettingsOutput)
}

// The envelope settings.
func (o AS2ProtocolSettingsOutput) EnvelopeSettings() AS2EnvelopeSettingsOutput {
	return o.ApplyT(func(v AS2ProtocolSettings) AS2EnvelopeSettings { return v.EnvelopeSettings }).(AS2EnvelopeSettingsOutput)
}

// The error settings.
func (o AS2ProtocolSettingsOutput) ErrorSettings() AS2ErrorSettingsOutput {
	return o.ApplyT(func(v AS2ProtocolSettings) AS2ErrorSettings { return v.ErrorSettings }).(AS2ErrorSettingsOutput)
}

// The MDN settings.
func (o AS2ProtocolSettingsOutput) MdnSettings() AS2MdnSettingsOutput {
	return o.ApplyT(func(v AS2ProtocolSettings) AS2MdnSettings { return v.MdnSettings }).(AS2MdnSettingsOutput)
}

// The message connection settings.
func (o AS2ProtocolSettingsOutput) MessageConnectionSettings() AS2MessageConnectionSettingsOutput {
	return o.ApplyT(func(v AS2ProtocolSettings) AS2MessageConnectionSettings { return v.MessageConnectionSettings }).(AS2MessageConnectionSettingsOutput)
}

// The security settings.
func (o AS2ProtocolSettingsOutput) SecuritySettings() AS2SecuritySettingsOutput {
	return o.ApplyT(func(v AS2ProtocolSettings) AS2SecuritySettings { return v.SecuritySettings }).(AS2SecuritySettingsOutput)
}

// The validation settings.
func (o AS2ProtocolSettingsOutput) ValidationSettings() AS2ValidationSettingsOutput {
	return o.ApplyT(func(v AS2ProtocolSettings) AS2ValidationSettings { return v.ValidationSettings }).(AS2ValidationSettingsOutput)
}

type AS2ProtocolSettingsPtrOutput struct{ *pulumi.OutputState }

func (AS2ProtocolSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2ProtocolSettings)(nil)).Elem()
}

func (o AS2ProtocolSettingsPtrOutput) ToAS2ProtocolSettingsPtrOutput() AS2ProtocolSettingsPtrOutput {
	return o
}

func (o AS2ProtocolSettingsPtrOutput) ToAS2ProtocolSettingsPtrOutputWithContext(ctx context.Context) AS2ProtocolSettingsPtrOutput {
	return o
}

func (o AS2ProtocolSettingsPtrOutput) Elem() AS2ProtocolSettingsOutput {
	return o.ApplyT(func(v *AS2ProtocolSettings) AS2ProtocolSettings { return *v }).(AS2ProtocolSettingsOutput)
}

// The acknowledgement connection settings.
func (o AS2ProtocolSettingsPtrOutput) AcknowledgementConnectionSettings() AS2AcknowledgementConnectionSettingsPtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettings) *AS2AcknowledgementConnectionSettings {
		if v == nil {
			return nil
		}
		return &v.AcknowledgementConnectionSettings
	}).(AS2AcknowledgementConnectionSettingsPtrOutput)
}

// The envelope settings.
func (o AS2ProtocolSettingsPtrOutput) EnvelopeSettings() AS2EnvelopeSettingsPtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettings) *AS2EnvelopeSettings {
		if v == nil {
			return nil
		}
		return &v.EnvelopeSettings
	}).(AS2EnvelopeSettingsPtrOutput)
}

// The error settings.
func (o AS2ProtocolSettingsPtrOutput) ErrorSettings() AS2ErrorSettingsPtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettings) *AS2ErrorSettings {
		if v == nil {
			return nil
		}
		return &v.ErrorSettings
	}).(AS2ErrorSettingsPtrOutput)
}

// The MDN settings.
func (o AS2ProtocolSettingsPtrOutput) MdnSettings() AS2MdnSettingsPtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettings) *AS2MdnSettings {
		if v == nil {
			return nil
		}
		return &v.MdnSettings
	}).(AS2MdnSettingsPtrOutput)
}

// The message connection settings.
func (o AS2ProtocolSettingsPtrOutput) MessageConnectionSettings() AS2MessageConnectionSettingsPtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettings) *AS2MessageConnectionSettings {
		if v == nil {
			return nil
		}
		return &v.MessageConnectionSettings
	}).(AS2MessageConnectionSettingsPtrOutput)
}

// The security settings.
func (o AS2ProtocolSettingsPtrOutput) SecuritySettings() AS2SecuritySettingsPtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettings) *AS2SecuritySettings {
		if v == nil {
			return nil
		}
		return &v.SecuritySettings
	}).(AS2SecuritySettingsPtrOutput)
}

// The validation settings.
func (o AS2ProtocolSettingsPtrOutput) ValidationSettings() AS2ValidationSettingsPtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettings) *AS2ValidationSettings {
		if v == nil {
			return nil
		}
		return &v.ValidationSettings
	}).(AS2ValidationSettingsPtrOutput)
}

// The AS2 agreement protocol settings.
type AS2ProtocolSettingsResponse struct {
	// The acknowledgement connection settings.
	AcknowledgementConnectionSettings AS2AcknowledgementConnectionSettingsResponse `pulumi:"acknowledgementConnectionSettings"`
	// The envelope settings.
	EnvelopeSettings AS2EnvelopeSettingsResponse `pulumi:"envelopeSettings"`
	// The error settings.
	ErrorSettings AS2ErrorSettingsResponse `pulumi:"errorSettings"`
	// The MDN settings.
	MdnSettings AS2MdnSettingsResponse `pulumi:"mdnSettings"`
	// The message connection settings.
	MessageConnectionSettings AS2MessageConnectionSettingsResponse `pulumi:"messageConnectionSettings"`
	// The security settings.
	SecuritySettings AS2SecuritySettingsResponse `pulumi:"securitySettings"`
	// The validation settings.
	ValidationSettings AS2ValidationSettingsResponse `pulumi:"validationSettings"`
}

// AS2ProtocolSettingsResponseInput is an input type that accepts AS2ProtocolSettingsResponseArgs and AS2ProtocolSettingsResponseOutput values.
// You can construct a concrete instance of `AS2ProtocolSettingsResponseInput` via:
//
//          AS2ProtocolSettingsResponseArgs{...}
type AS2ProtocolSettingsResponseInput interface {
	pulumi.Input

	ToAS2ProtocolSettingsResponseOutput() AS2ProtocolSettingsResponseOutput
	ToAS2ProtocolSettingsResponseOutputWithContext(context.Context) AS2ProtocolSettingsResponseOutput
}

// The AS2 agreement protocol settings.
type AS2ProtocolSettingsResponseArgs struct {
	// The acknowledgement connection settings.
	AcknowledgementConnectionSettings AS2AcknowledgementConnectionSettingsResponseInput `pulumi:"acknowledgementConnectionSettings"`
	// The envelope settings.
	EnvelopeSettings AS2EnvelopeSettingsResponseInput `pulumi:"envelopeSettings"`
	// The error settings.
	ErrorSettings AS2ErrorSettingsResponseInput `pulumi:"errorSettings"`
	// The MDN settings.
	MdnSettings AS2MdnSettingsResponseInput `pulumi:"mdnSettings"`
	// The message connection settings.
	MessageConnectionSettings AS2MessageConnectionSettingsResponseInput `pulumi:"messageConnectionSettings"`
	// The security settings.
	SecuritySettings AS2SecuritySettingsResponseInput `pulumi:"securitySettings"`
	// The validation settings.
	ValidationSettings AS2ValidationSettingsResponseInput `pulumi:"validationSettings"`
}

func (AS2ProtocolSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2ProtocolSettingsResponse)(nil)).Elem()
}

func (i AS2ProtocolSettingsResponseArgs) ToAS2ProtocolSettingsResponseOutput() AS2ProtocolSettingsResponseOutput {
	return i.ToAS2ProtocolSettingsResponseOutputWithContext(context.Background())
}

func (i AS2ProtocolSettingsResponseArgs) ToAS2ProtocolSettingsResponseOutputWithContext(ctx context.Context) AS2ProtocolSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ProtocolSettingsResponseOutput)
}

func (i AS2ProtocolSettingsResponseArgs) ToAS2ProtocolSettingsResponsePtrOutput() AS2ProtocolSettingsResponsePtrOutput {
	return i.ToAS2ProtocolSettingsResponsePtrOutputWithContext(context.Background())
}

func (i AS2ProtocolSettingsResponseArgs) ToAS2ProtocolSettingsResponsePtrOutputWithContext(ctx context.Context) AS2ProtocolSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ProtocolSettingsResponseOutput).ToAS2ProtocolSettingsResponsePtrOutputWithContext(ctx)
}

// AS2ProtocolSettingsResponsePtrInput is an input type that accepts AS2ProtocolSettingsResponseArgs, AS2ProtocolSettingsResponsePtr and AS2ProtocolSettingsResponsePtrOutput values.
// You can construct a concrete instance of `AS2ProtocolSettingsResponsePtrInput` via:
//
//          AS2ProtocolSettingsResponseArgs{...}
//
//  or:
//
//          nil
type AS2ProtocolSettingsResponsePtrInput interface {
	pulumi.Input

	ToAS2ProtocolSettingsResponsePtrOutput() AS2ProtocolSettingsResponsePtrOutput
	ToAS2ProtocolSettingsResponsePtrOutputWithContext(context.Context) AS2ProtocolSettingsResponsePtrOutput
}

type as2protocolSettingsResponsePtrType AS2ProtocolSettingsResponseArgs

func AS2ProtocolSettingsResponsePtr(v *AS2ProtocolSettingsResponseArgs) AS2ProtocolSettingsResponsePtrInput {
	return (*as2protocolSettingsResponsePtrType)(v)
}

func (*as2protocolSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2ProtocolSettingsResponse)(nil)).Elem()
}

func (i *as2protocolSettingsResponsePtrType) ToAS2ProtocolSettingsResponsePtrOutput() AS2ProtocolSettingsResponsePtrOutput {
	return i.ToAS2ProtocolSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *as2protocolSettingsResponsePtrType) ToAS2ProtocolSettingsResponsePtrOutputWithContext(ctx context.Context) AS2ProtocolSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ProtocolSettingsResponsePtrOutput)
}

// The AS2 agreement protocol settings.
type AS2ProtocolSettingsResponseOutput struct{ *pulumi.OutputState }

func (AS2ProtocolSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2ProtocolSettingsResponse)(nil)).Elem()
}

func (o AS2ProtocolSettingsResponseOutput) ToAS2ProtocolSettingsResponseOutput() AS2ProtocolSettingsResponseOutput {
	return o
}

func (o AS2ProtocolSettingsResponseOutput) ToAS2ProtocolSettingsResponseOutputWithContext(ctx context.Context) AS2ProtocolSettingsResponseOutput {
	return o
}

func (o AS2ProtocolSettingsResponseOutput) ToAS2ProtocolSettingsResponsePtrOutput() AS2ProtocolSettingsResponsePtrOutput {
	return o.ToAS2ProtocolSettingsResponsePtrOutputWithContext(context.Background())
}

func (o AS2ProtocolSettingsResponseOutput) ToAS2ProtocolSettingsResponsePtrOutputWithContext(ctx context.Context) AS2ProtocolSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2ProtocolSettingsResponse) *AS2ProtocolSettingsResponse {
		return &v
	}).(AS2ProtocolSettingsResponsePtrOutput)
}

// The acknowledgement connection settings.
func (o AS2ProtocolSettingsResponseOutput) AcknowledgementConnectionSettings() AS2AcknowledgementConnectionSettingsResponseOutput {
	return o.ApplyT(func(v AS2ProtocolSettingsResponse) AS2AcknowledgementConnectionSettingsResponse {
		return v.AcknowledgementConnectionSettings
	}).(AS2AcknowledgementConnectionSettingsResponseOutput)
}

// The envelope settings.
func (o AS2ProtocolSettingsResponseOutput) EnvelopeSettings() AS2EnvelopeSettingsResponseOutput {
	return o.ApplyT(func(v AS2ProtocolSettingsResponse) AS2EnvelopeSettingsResponse { return v.EnvelopeSettings }).(AS2EnvelopeSettingsResponseOutput)
}

// The error settings.
func (o AS2ProtocolSettingsResponseOutput) ErrorSettings() AS2ErrorSettingsResponseOutput {
	return o.ApplyT(func(v AS2ProtocolSettingsResponse) AS2ErrorSettingsResponse { return v.ErrorSettings }).(AS2ErrorSettingsResponseOutput)
}

// The MDN settings.
func (o AS2ProtocolSettingsResponseOutput) MdnSettings() AS2MdnSettingsResponseOutput {
	return o.ApplyT(func(v AS2ProtocolSettingsResponse) AS2MdnSettingsResponse { return v.MdnSettings }).(AS2MdnSettingsResponseOutput)
}

// The message connection settings.
func (o AS2ProtocolSettingsResponseOutput) MessageConnectionSettings() AS2MessageConnectionSettingsResponseOutput {
	return o.ApplyT(func(v AS2ProtocolSettingsResponse) AS2MessageConnectionSettingsResponse {
		return v.MessageConnectionSettings
	}).(AS2MessageConnectionSettingsResponseOutput)
}

// The security settings.
func (o AS2ProtocolSettingsResponseOutput) SecuritySettings() AS2SecuritySettingsResponseOutput {
	return o.ApplyT(func(v AS2ProtocolSettingsResponse) AS2SecuritySettingsResponse { return v.SecuritySettings }).(AS2SecuritySettingsResponseOutput)
}

// The validation settings.
func (o AS2ProtocolSettingsResponseOutput) ValidationSettings() AS2ValidationSettingsResponseOutput {
	return o.ApplyT(func(v AS2ProtocolSettingsResponse) AS2ValidationSettingsResponse { return v.ValidationSettings }).(AS2ValidationSettingsResponseOutput)
}

type AS2ProtocolSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2ProtocolSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2ProtocolSettingsResponse)(nil)).Elem()
}

func (o AS2ProtocolSettingsResponsePtrOutput) ToAS2ProtocolSettingsResponsePtrOutput() AS2ProtocolSettingsResponsePtrOutput {
	return o
}

func (o AS2ProtocolSettingsResponsePtrOutput) ToAS2ProtocolSettingsResponsePtrOutputWithContext(ctx context.Context) AS2ProtocolSettingsResponsePtrOutput {
	return o
}

func (o AS2ProtocolSettingsResponsePtrOutput) Elem() AS2ProtocolSettingsResponseOutput {
	return o.ApplyT(func(v *AS2ProtocolSettingsResponse) AS2ProtocolSettingsResponse { return *v }).(AS2ProtocolSettingsResponseOutput)
}

// The acknowledgement connection settings.
func (o AS2ProtocolSettingsResponsePtrOutput) AcknowledgementConnectionSettings() AS2AcknowledgementConnectionSettingsResponsePtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettingsResponse) *AS2AcknowledgementConnectionSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.AcknowledgementConnectionSettings
	}).(AS2AcknowledgementConnectionSettingsResponsePtrOutput)
}

// The envelope settings.
func (o AS2ProtocolSettingsResponsePtrOutput) EnvelopeSettings() AS2EnvelopeSettingsResponsePtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettingsResponse) *AS2EnvelopeSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.EnvelopeSettings
	}).(AS2EnvelopeSettingsResponsePtrOutput)
}

// The error settings.
func (o AS2ProtocolSettingsResponsePtrOutput) ErrorSettings() AS2ErrorSettingsResponsePtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettingsResponse) *AS2ErrorSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.ErrorSettings
	}).(AS2ErrorSettingsResponsePtrOutput)
}

// The MDN settings.
func (o AS2ProtocolSettingsResponsePtrOutput) MdnSettings() AS2MdnSettingsResponsePtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettingsResponse) *AS2MdnSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.MdnSettings
	}).(AS2MdnSettingsResponsePtrOutput)
}

// The message connection settings.
func (o AS2ProtocolSettingsResponsePtrOutput) MessageConnectionSettings() AS2MessageConnectionSettingsResponsePtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettingsResponse) *AS2MessageConnectionSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.MessageConnectionSettings
	}).(AS2MessageConnectionSettingsResponsePtrOutput)
}

// The security settings.
func (o AS2ProtocolSettingsResponsePtrOutput) SecuritySettings() AS2SecuritySettingsResponsePtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettingsResponse) *AS2SecuritySettingsResponse {
		if v == nil {
			return nil
		}
		return &v.SecuritySettings
	}).(AS2SecuritySettingsResponsePtrOutput)
}

// The validation settings.
func (o AS2ProtocolSettingsResponsePtrOutput) ValidationSettings() AS2ValidationSettingsResponsePtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettingsResponse) *AS2ValidationSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.ValidationSettings
	}).(AS2ValidationSettingsResponsePtrOutput)
}

// The AS2 agreement security settings.
type AS2SecuritySettings struct {
	// The value indicating whether to enable NRR for inbound decoded messages.
	EnableNRRForInboundDecodedMessages bool `pulumi:"enableNRRForInboundDecodedMessages"`
	// The value indicating whether to enable NRR for inbound encoded messages.
	EnableNRRForInboundEncodedMessages bool `pulumi:"enableNRRForInboundEncodedMessages"`
	// The value indicating whether to enable NRR for inbound MDN.
	EnableNRRForInboundMDN bool `pulumi:"enableNRRForInboundMDN"`
	// The value indicating whether to enable NRR for outbound decoded messages.
	EnableNRRForOutboundDecodedMessages bool `pulumi:"enableNRRForOutboundDecodedMessages"`
	// The value indicating whether to enable NRR for outbound encoded messages.
	EnableNRRForOutboundEncodedMessages bool `pulumi:"enableNRRForOutboundEncodedMessages"`
	// The value indicating whether to enable NRR for outbound MDN.
	EnableNRRForOutboundMDN bool `pulumi:"enableNRRForOutboundMDN"`
	// The name of the encryption certificate.
	EncryptionCertificateName *string `pulumi:"encryptionCertificateName"`
	// The value indicating whether to send or request a MDN.
	OverrideGroupSigningCertificate bool `pulumi:"overrideGroupSigningCertificate"`
	// The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
	Sha2AlgorithmFormat *string `pulumi:"sha2AlgorithmFormat"`
	// The name of the signing certificate.
	SigningCertificateName *string `pulumi:"signingCertificateName"`
}

// AS2SecuritySettingsInput is an input type that accepts AS2SecuritySettingsArgs and AS2SecuritySettingsOutput values.
// You can construct a concrete instance of `AS2SecuritySettingsInput` via:
//
//          AS2SecuritySettingsArgs{...}
type AS2SecuritySettingsInput interface {
	pulumi.Input

	ToAS2SecuritySettingsOutput() AS2SecuritySettingsOutput
	ToAS2SecuritySettingsOutputWithContext(context.Context) AS2SecuritySettingsOutput
}

// The AS2 agreement security settings.
type AS2SecuritySettingsArgs struct {
	// The value indicating whether to enable NRR for inbound decoded messages.
	EnableNRRForInboundDecodedMessages pulumi.BoolInput `pulumi:"enableNRRForInboundDecodedMessages"`
	// The value indicating whether to enable NRR for inbound encoded messages.
	EnableNRRForInboundEncodedMessages pulumi.BoolInput `pulumi:"enableNRRForInboundEncodedMessages"`
	// The value indicating whether to enable NRR for inbound MDN.
	EnableNRRForInboundMDN pulumi.BoolInput `pulumi:"enableNRRForInboundMDN"`
	// The value indicating whether to enable NRR for outbound decoded messages.
	EnableNRRForOutboundDecodedMessages pulumi.BoolInput `pulumi:"enableNRRForOutboundDecodedMessages"`
	// The value indicating whether to enable NRR for outbound encoded messages.
	EnableNRRForOutboundEncodedMessages pulumi.BoolInput `pulumi:"enableNRRForOutboundEncodedMessages"`
	// The value indicating whether to enable NRR for outbound MDN.
	EnableNRRForOutboundMDN pulumi.BoolInput `pulumi:"enableNRRForOutboundMDN"`
	// The name of the encryption certificate.
	EncryptionCertificateName pulumi.StringPtrInput `pulumi:"encryptionCertificateName"`
	// The value indicating whether to send or request a MDN.
	OverrideGroupSigningCertificate pulumi.BoolInput `pulumi:"overrideGroupSigningCertificate"`
	// The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
	Sha2AlgorithmFormat pulumi.StringPtrInput `pulumi:"sha2AlgorithmFormat"`
	// The name of the signing certificate.
	SigningCertificateName pulumi.StringPtrInput `pulumi:"signingCertificateName"`
}

func (AS2SecuritySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2SecuritySettings)(nil)).Elem()
}

func (i AS2SecuritySettingsArgs) ToAS2SecuritySettingsOutput() AS2SecuritySettingsOutput {
	return i.ToAS2SecuritySettingsOutputWithContext(context.Background())
}

func (i AS2SecuritySettingsArgs) ToAS2SecuritySettingsOutputWithContext(ctx context.Context) AS2SecuritySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2SecuritySettingsOutput)
}

func (i AS2SecuritySettingsArgs) ToAS2SecuritySettingsPtrOutput() AS2SecuritySettingsPtrOutput {
	return i.ToAS2SecuritySettingsPtrOutputWithContext(context.Background())
}

func (i AS2SecuritySettingsArgs) ToAS2SecuritySettingsPtrOutputWithContext(ctx context.Context) AS2SecuritySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2SecuritySettingsOutput).ToAS2SecuritySettingsPtrOutputWithContext(ctx)
}

// AS2SecuritySettingsPtrInput is an input type that accepts AS2SecuritySettingsArgs, AS2SecuritySettingsPtr and AS2SecuritySettingsPtrOutput values.
// You can construct a concrete instance of `AS2SecuritySettingsPtrInput` via:
//
//          AS2SecuritySettingsArgs{...}
//
//  or:
//
//          nil
type AS2SecuritySettingsPtrInput interface {
	pulumi.Input

	ToAS2SecuritySettingsPtrOutput() AS2SecuritySettingsPtrOutput
	ToAS2SecuritySettingsPtrOutputWithContext(context.Context) AS2SecuritySettingsPtrOutput
}

type as2securitySettingsPtrType AS2SecuritySettingsArgs

func AS2SecuritySettingsPtr(v *AS2SecuritySettingsArgs) AS2SecuritySettingsPtrInput {
	return (*as2securitySettingsPtrType)(v)
}

func (*as2securitySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2SecuritySettings)(nil)).Elem()
}

func (i *as2securitySettingsPtrType) ToAS2SecuritySettingsPtrOutput() AS2SecuritySettingsPtrOutput {
	return i.ToAS2SecuritySettingsPtrOutputWithContext(context.Background())
}

func (i *as2securitySettingsPtrType) ToAS2SecuritySettingsPtrOutputWithContext(ctx context.Context) AS2SecuritySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2SecuritySettingsPtrOutput)
}

// The AS2 agreement security settings.
type AS2SecuritySettingsOutput struct{ *pulumi.OutputState }

func (AS2SecuritySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2SecuritySettings)(nil)).Elem()
}

func (o AS2SecuritySettingsOutput) ToAS2SecuritySettingsOutput() AS2SecuritySettingsOutput {
	return o
}

func (o AS2SecuritySettingsOutput) ToAS2SecuritySettingsOutputWithContext(ctx context.Context) AS2SecuritySettingsOutput {
	return o
}

func (o AS2SecuritySettingsOutput) ToAS2SecuritySettingsPtrOutput() AS2SecuritySettingsPtrOutput {
	return o.ToAS2SecuritySettingsPtrOutputWithContext(context.Background())
}

func (o AS2SecuritySettingsOutput) ToAS2SecuritySettingsPtrOutputWithContext(ctx context.Context) AS2SecuritySettingsPtrOutput {
	return o.ApplyT(func(v AS2SecuritySettings) *AS2SecuritySettings {
		return &v
	}).(AS2SecuritySettingsPtrOutput)
}

// The value indicating whether to enable NRR for inbound decoded messages.
func (o AS2SecuritySettingsOutput) EnableNRRForInboundDecodedMessages() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2SecuritySettings) bool { return v.EnableNRRForInboundDecodedMessages }).(pulumi.BoolOutput)
}

// The value indicating whether to enable NRR for inbound encoded messages.
func (o AS2SecuritySettingsOutput) EnableNRRForInboundEncodedMessages() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2SecuritySettings) bool { return v.EnableNRRForInboundEncodedMessages }).(pulumi.BoolOutput)
}

// The value indicating whether to enable NRR for inbound MDN.
func (o AS2SecuritySettingsOutput) EnableNRRForInboundMDN() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2SecuritySettings) bool { return v.EnableNRRForInboundMDN }).(pulumi.BoolOutput)
}

// The value indicating whether to enable NRR for outbound decoded messages.
func (o AS2SecuritySettingsOutput) EnableNRRForOutboundDecodedMessages() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2SecuritySettings) bool { return v.EnableNRRForOutboundDecodedMessages }).(pulumi.BoolOutput)
}

// The value indicating whether to enable NRR for outbound encoded messages.
func (o AS2SecuritySettingsOutput) EnableNRRForOutboundEncodedMessages() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2SecuritySettings) bool { return v.EnableNRRForOutboundEncodedMessages }).(pulumi.BoolOutput)
}

// The value indicating whether to enable NRR for outbound MDN.
func (o AS2SecuritySettingsOutput) EnableNRRForOutboundMDN() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2SecuritySettings) bool { return v.EnableNRRForOutboundMDN }).(pulumi.BoolOutput)
}

// The name of the encryption certificate.
func (o AS2SecuritySettingsOutput) EncryptionCertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2SecuritySettings) *string { return v.EncryptionCertificateName }).(pulumi.StringPtrOutput)
}

// The value indicating whether to send or request a MDN.
func (o AS2SecuritySettingsOutput) OverrideGroupSigningCertificate() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2SecuritySettings) bool { return v.OverrideGroupSigningCertificate }).(pulumi.BoolOutput)
}

// The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
func (o AS2SecuritySettingsOutput) Sha2AlgorithmFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2SecuritySettings) *string { return v.Sha2AlgorithmFormat }).(pulumi.StringPtrOutput)
}

// The name of the signing certificate.
func (o AS2SecuritySettingsOutput) SigningCertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2SecuritySettings) *string { return v.SigningCertificateName }).(pulumi.StringPtrOutput)
}

type AS2SecuritySettingsPtrOutput struct{ *pulumi.OutputState }

func (AS2SecuritySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2SecuritySettings)(nil)).Elem()
}

func (o AS2SecuritySettingsPtrOutput) ToAS2SecuritySettingsPtrOutput() AS2SecuritySettingsPtrOutput {
	return o
}

func (o AS2SecuritySettingsPtrOutput) ToAS2SecuritySettingsPtrOutputWithContext(ctx context.Context) AS2SecuritySettingsPtrOutput {
	return o
}

func (o AS2SecuritySettingsPtrOutput) Elem() AS2SecuritySettingsOutput {
	return o.ApplyT(func(v *AS2SecuritySettings) AS2SecuritySettings { return *v }).(AS2SecuritySettingsOutput)
}

// The value indicating whether to enable NRR for inbound decoded messages.
func (o AS2SecuritySettingsPtrOutput) EnableNRRForInboundDecodedMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettings) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableNRRForInboundDecodedMessages
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for inbound encoded messages.
func (o AS2SecuritySettingsPtrOutput) EnableNRRForInboundEncodedMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettings) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableNRRForInboundEncodedMessages
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for inbound MDN.
func (o AS2SecuritySettingsPtrOutput) EnableNRRForInboundMDN() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettings) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableNRRForInboundMDN
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for outbound decoded messages.
func (o AS2SecuritySettingsPtrOutput) EnableNRRForOutboundDecodedMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettings) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableNRRForOutboundDecodedMessages
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for outbound encoded messages.
func (o AS2SecuritySettingsPtrOutput) EnableNRRForOutboundEncodedMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettings) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableNRRForOutboundEncodedMessages
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for outbound MDN.
func (o AS2SecuritySettingsPtrOutput) EnableNRRForOutboundMDN() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettings) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableNRRForOutboundMDN
	}).(pulumi.BoolPtrOutput)
}

// The name of the encryption certificate.
func (o AS2SecuritySettingsPtrOutput) EncryptionCertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettings) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionCertificateName
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to send or request a MDN.
func (o AS2SecuritySettingsPtrOutput) OverrideGroupSigningCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettings) *bool {
		if v == nil {
			return nil
		}
		return &v.OverrideGroupSigningCertificate
	}).(pulumi.BoolPtrOutput)
}

// The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
func (o AS2SecuritySettingsPtrOutput) Sha2AlgorithmFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettings) *string {
		if v == nil {
			return nil
		}
		return v.Sha2AlgorithmFormat
	}).(pulumi.StringPtrOutput)
}

// The name of the signing certificate.
func (o AS2SecuritySettingsPtrOutput) SigningCertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettings) *string {
		if v == nil {
			return nil
		}
		return v.SigningCertificateName
	}).(pulumi.StringPtrOutput)
}

// The AS2 agreement security settings.
type AS2SecuritySettingsResponse struct {
	// The value indicating whether to enable NRR for inbound decoded messages.
	EnableNRRForInboundDecodedMessages bool `pulumi:"enableNRRForInboundDecodedMessages"`
	// The value indicating whether to enable NRR for inbound encoded messages.
	EnableNRRForInboundEncodedMessages bool `pulumi:"enableNRRForInboundEncodedMessages"`
	// The value indicating whether to enable NRR for inbound MDN.
	EnableNRRForInboundMDN bool `pulumi:"enableNRRForInboundMDN"`
	// The value indicating whether to enable NRR for outbound decoded messages.
	EnableNRRForOutboundDecodedMessages bool `pulumi:"enableNRRForOutboundDecodedMessages"`
	// The value indicating whether to enable NRR for outbound encoded messages.
	EnableNRRForOutboundEncodedMessages bool `pulumi:"enableNRRForOutboundEncodedMessages"`
	// The value indicating whether to enable NRR for outbound MDN.
	EnableNRRForOutboundMDN bool `pulumi:"enableNRRForOutboundMDN"`
	// The name of the encryption certificate.
	EncryptionCertificateName *string `pulumi:"encryptionCertificateName"`
	// The value indicating whether to send or request a MDN.
	OverrideGroupSigningCertificate bool `pulumi:"overrideGroupSigningCertificate"`
	// The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
	Sha2AlgorithmFormat *string `pulumi:"sha2AlgorithmFormat"`
	// The name of the signing certificate.
	SigningCertificateName *string `pulumi:"signingCertificateName"`
}

// AS2SecuritySettingsResponseInput is an input type that accepts AS2SecuritySettingsResponseArgs and AS2SecuritySettingsResponseOutput values.
// You can construct a concrete instance of `AS2SecuritySettingsResponseInput` via:
//
//          AS2SecuritySettingsResponseArgs{...}
type AS2SecuritySettingsResponseInput interface {
	pulumi.Input

	ToAS2SecuritySettingsResponseOutput() AS2SecuritySettingsResponseOutput
	ToAS2SecuritySettingsResponseOutputWithContext(context.Context) AS2SecuritySettingsResponseOutput
}

// The AS2 agreement security settings.
type AS2SecuritySettingsResponseArgs struct {
	// The value indicating whether to enable NRR for inbound decoded messages.
	EnableNRRForInboundDecodedMessages pulumi.BoolInput `pulumi:"enableNRRForInboundDecodedMessages"`
	// The value indicating whether to enable NRR for inbound encoded messages.
	EnableNRRForInboundEncodedMessages pulumi.BoolInput `pulumi:"enableNRRForInboundEncodedMessages"`
	// The value indicating whether to enable NRR for inbound MDN.
	EnableNRRForInboundMDN pulumi.BoolInput `pulumi:"enableNRRForInboundMDN"`
	// The value indicating whether to enable NRR for outbound decoded messages.
	EnableNRRForOutboundDecodedMessages pulumi.BoolInput `pulumi:"enableNRRForOutboundDecodedMessages"`
	// The value indicating whether to enable NRR for outbound encoded messages.
	EnableNRRForOutboundEncodedMessages pulumi.BoolInput `pulumi:"enableNRRForOutboundEncodedMessages"`
	// The value indicating whether to enable NRR for outbound MDN.
	EnableNRRForOutboundMDN pulumi.BoolInput `pulumi:"enableNRRForOutboundMDN"`
	// The name of the encryption certificate.
	EncryptionCertificateName pulumi.StringPtrInput `pulumi:"encryptionCertificateName"`
	// The value indicating whether to send or request a MDN.
	OverrideGroupSigningCertificate pulumi.BoolInput `pulumi:"overrideGroupSigningCertificate"`
	// The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
	Sha2AlgorithmFormat pulumi.StringPtrInput `pulumi:"sha2AlgorithmFormat"`
	// The name of the signing certificate.
	SigningCertificateName pulumi.StringPtrInput `pulumi:"signingCertificateName"`
}

func (AS2SecuritySettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2SecuritySettingsResponse)(nil)).Elem()
}

func (i AS2SecuritySettingsResponseArgs) ToAS2SecuritySettingsResponseOutput() AS2SecuritySettingsResponseOutput {
	return i.ToAS2SecuritySettingsResponseOutputWithContext(context.Background())
}

func (i AS2SecuritySettingsResponseArgs) ToAS2SecuritySettingsResponseOutputWithContext(ctx context.Context) AS2SecuritySettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2SecuritySettingsResponseOutput)
}

func (i AS2SecuritySettingsResponseArgs) ToAS2SecuritySettingsResponsePtrOutput() AS2SecuritySettingsResponsePtrOutput {
	return i.ToAS2SecuritySettingsResponsePtrOutputWithContext(context.Background())
}

func (i AS2SecuritySettingsResponseArgs) ToAS2SecuritySettingsResponsePtrOutputWithContext(ctx context.Context) AS2SecuritySettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2SecuritySettingsResponseOutput).ToAS2SecuritySettingsResponsePtrOutputWithContext(ctx)
}

// AS2SecuritySettingsResponsePtrInput is an input type that accepts AS2SecuritySettingsResponseArgs, AS2SecuritySettingsResponsePtr and AS2SecuritySettingsResponsePtrOutput values.
// You can construct a concrete instance of `AS2SecuritySettingsResponsePtrInput` via:
//
//          AS2SecuritySettingsResponseArgs{...}
//
//  or:
//
//          nil
type AS2SecuritySettingsResponsePtrInput interface {
	pulumi.Input

	ToAS2SecuritySettingsResponsePtrOutput() AS2SecuritySettingsResponsePtrOutput
	ToAS2SecuritySettingsResponsePtrOutputWithContext(context.Context) AS2SecuritySettingsResponsePtrOutput
}

type as2securitySettingsResponsePtrType AS2SecuritySettingsResponseArgs

func AS2SecuritySettingsResponsePtr(v *AS2SecuritySettingsResponseArgs) AS2SecuritySettingsResponsePtrInput {
	return (*as2securitySettingsResponsePtrType)(v)
}

func (*as2securitySettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2SecuritySettingsResponse)(nil)).Elem()
}

func (i *as2securitySettingsResponsePtrType) ToAS2SecuritySettingsResponsePtrOutput() AS2SecuritySettingsResponsePtrOutput {
	return i.ToAS2SecuritySettingsResponsePtrOutputWithContext(context.Background())
}

func (i *as2securitySettingsResponsePtrType) ToAS2SecuritySettingsResponsePtrOutputWithContext(ctx context.Context) AS2SecuritySettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2SecuritySettingsResponsePtrOutput)
}

// The AS2 agreement security settings.
type AS2SecuritySettingsResponseOutput struct{ *pulumi.OutputState }

func (AS2SecuritySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2SecuritySettingsResponse)(nil)).Elem()
}

func (o AS2SecuritySettingsResponseOutput) ToAS2SecuritySettingsResponseOutput() AS2SecuritySettingsResponseOutput {
	return o
}

func (o AS2SecuritySettingsResponseOutput) ToAS2SecuritySettingsResponseOutputWithContext(ctx context.Context) AS2SecuritySettingsResponseOutput {
	return o
}

func (o AS2SecuritySettingsResponseOutput) ToAS2SecuritySettingsResponsePtrOutput() AS2SecuritySettingsResponsePtrOutput {
	return o.ToAS2SecuritySettingsResponsePtrOutputWithContext(context.Background())
}

func (o AS2SecuritySettingsResponseOutput) ToAS2SecuritySettingsResponsePtrOutputWithContext(ctx context.Context) AS2SecuritySettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) *AS2SecuritySettingsResponse {
		return &v
	}).(AS2SecuritySettingsResponsePtrOutput)
}

// The value indicating whether to enable NRR for inbound decoded messages.
func (o AS2SecuritySettingsResponseOutput) EnableNRRForInboundDecodedMessages() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) bool { return v.EnableNRRForInboundDecodedMessages }).(pulumi.BoolOutput)
}

// The value indicating whether to enable NRR for inbound encoded messages.
func (o AS2SecuritySettingsResponseOutput) EnableNRRForInboundEncodedMessages() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) bool { return v.EnableNRRForInboundEncodedMessages }).(pulumi.BoolOutput)
}

// The value indicating whether to enable NRR for inbound MDN.
func (o AS2SecuritySettingsResponseOutput) EnableNRRForInboundMDN() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) bool { return v.EnableNRRForInboundMDN }).(pulumi.BoolOutput)
}

// The value indicating whether to enable NRR for outbound decoded messages.
func (o AS2SecuritySettingsResponseOutput) EnableNRRForOutboundDecodedMessages() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) bool { return v.EnableNRRForOutboundDecodedMessages }).(pulumi.BoolOutput)
}

// The value indicating whether to enable NRR for outbound encoded messages.
func (o AS2SecuritySettingsResponseOutput) EnableNRRForOutboundEncodedMessages() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) bool { return v.EnableNRRForOutboundEncodedMessages }).(pulumi.BoolOutput)
}

// The value indicating whether to enable NRR for outbound MDN.
func (o AS2SecuritySettingsResponseOutput) EnableNRRForOutboundMDN() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) bool { return v.EnableNRRForOutboundMDN }).(pulumi.BoolOutput)
}

// The name of the encryption certificate.
func (o AS2SecuritySettingsResponseOutput) EncryptionCertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) *string { return v.EncryptionCertificateName }).(pulumi.StringPtrOutput)
}

// The value indicating whether to send or request a MDN.
func (o AS2SecuritySettingsResponseOutput) OverrideGroupSigningCertificate() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) bool { return v.OverrideGroupSigningCertificate }).(pulumi.BoolOutput)
}

// The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
func (o AS2SecuritySettingsResponseOutput) Sha2AlgorithmFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) *string { return v.Sha2AlgorithmFormat }).(pulumi.StringPtrOutput)
}

// The name of the signing certificate.
func (o AS2SecuritySettingsResponseOutput) SigningCertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) *string { return v.SigningCertificateName }).(pulumi.StringPtrOutput)
}

type AS2SecuritySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2SecuritySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2SecuritySettingsResponse)(nil)).Elem()
}

func (o AS2SecuritySettingsResponsePtrOutput) ToAS2SecuritySettingsResponsePtrOutput() AS2SecuritySettingsResponsePtrOutput {
	return o
}

func (o AS2SecuritySettingsResponsePtrOutput) ToAS2SecuritySettingsResponsePtrOutputWithContext(ctx context.Context) AS2SecuritySettingsResponsePtrOutput {
	return o
}

func (o AS2SecuritySettingsResponsePtrOutput) Elem() AS2SecuritySettingsResponseOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) AS2SecuritySettingsResponse { return *v }).(AS2SecuritySettingsResponseOutput)
}

// The value indicating whether to enable NRR for inbound decoded messages.
func (o AS2SecuritySettingsResponsePtrOutput) EnableNRRForInboundDecodedMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableNRRForInboundDecodedMessages
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for inbound encoded messages.
func (o AS2SecuritySettingsResponsePtrOutput) EnableNRRForInboundEncodedMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableNRRForInboundEncodedMessages
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for inbound MDN.
func (o AS2SecuritySettingsResponsePtrOutput) EnableNRRForInboundMDN() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableNRRForInboundMDN
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for outbound decoded messages.
func (o AS2SecuritySettingsResponsePtrOutput) EnableNRRForOutboundDecodedMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableNRRForOutboundDecodedMessages
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for outbound encoded messages.
func (o AS2SecuritySettingsResponsePtrOutput) EnableNRRForOutboundEncodedMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableNRRForOutboundEncodedMessages
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for outbound MDN.
func (o AS2SecuritySettingsResponsePtrOutput) EnableNRRForOutboundMDN() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableNRRForOutboundMDN
	}).(pulumi.BoolPtrOutput)
}

// The name of the encryption certificate.
func (o AS2SecuritySettingsResponsePtrOutput) EncryptionCertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionCertificateName
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to send or request a MDN.
func (o AS2SecuritySettingsResponsePtrOutput) OverrideGroupSigningCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.OverrideGroupSigningCertificate
	}).(pulumi.BoolPtrOutput)
}

// The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
func (o AS2SecuritySettingsResponsePtrOutput) Sha2AlgorithmFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Sha2AlgorithmFormat
	}).(pulumi.StringPtrOutput)
}

// The name of the signing certificate.
func (o AS2SecuritySettingsResponsePtrOutput) SigningCertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SigningCertificateName
	}).(pulumi.StringPtrOutput)
}

// The AS2 agreement validation settings.
type AS2ValidationSettings struct {
	// The value indicating whether to check for certificate revocation list on receive.
	CheckCertificateRevocationListOnReceive bool `pulumi:"checkCertificateRevocationListOnReceive"`
	// The value indicating whether to check for certificate revocation list on send.
	CheckCertificateRevocationListOnSend bool `pulumi:"checkCertificateRevocationListOnSend"`
	// The value indicating whether to check for duplicate message.
	CheckDuplicateMessage bool `pulumi:"checkDuplicateMessage"`
	// The value indicating whether the message has to be compressed.
	CompressMessage bool `pulumi:"compressMessage"`
	// The value indicating whether the message has to be encrypted.
	EncryptMessage bool `pulumi:"encryptMessage"`
	// The encryption algorithm.
	EncryptionAlgorithm string `pulumi:"encryptionAlgorithm"`
	// The number of days to look back for duplicate interchange.
	InterchangeDuplicatesValidityDays int `pulumi:"interchangeDuplicatesValidityDays"`
	// The value indicating whether to override incoming message properties with those in agreement.
	OverrideMessageProperties bool `pulumi:"overrideMessageProperties"`
	// The value indicating whether the message has to be signed.
	SignMessage bool `pulumi:"signMessage"`
	// The signing algorithm.
	SigningAlgorithm *string `pulumi:"signingAlgorithm"`
}

// AS2ValidationSettingsInput is an input type that accepts AS2ValidationSettingsArgs and AS2ValidationSettingsOutput values.
// You can construct a concrete instance of `AS2ValidationSettingsInput` via:
//
//          AS2ValidationSettingsArgs{...}
type AS2ValidationSettingsInput interface {
	pulumi.Input

	ToAS2ValidationSettingsOutput() AS2ValidationSettingsOutput
	ToAS2ValidationSettingsOutputWithContext(context.Context) AS2ValidationSettingsOutput
}

// The AS2 agreement validation settings.
type AS2ValidationSettingsArgs struct {
	// The value indicating whether to check for certificate revocation list on receive.
	CheckCertificateRevocationListOnReceive pulumi.BoolInput `pulumi:"checkCertificateRevocationListOnReceive"`
	// The value indicating whether to check for certificate revocation list on send.
	CheckCertificateRevocationListOnSend pulumi.BoolInput `pulumi:"checkCertificateRevocationListOnSend"`
	// The value indicating whether to check for duplicate message.
	CheckDuplicateMessage pulumi.BoolInput `pulumi:"checkDuplicateMessage"`
	// The value indicating whether the message has to be compressed.
	CompressMessage pulumi.BoolInput `pulumi:"compressMessage"`
	// The value indicating whether the message has to be encrypted.
	EncryptMessage pulumi.BoolInput `pulumi:"encryptMessage"`
	// The encryption algorithm.
	EncryptionAlgorithm pulumi.StringInput `pulumi:"encryptionAlgorithm"`
	// The number of days to look back for duplicate interchange.
	InterchangeDuplicatesValidityDays pulumi.IntInput `pulumi:"interchangeDuplicatesValidityDays"`
	// The value indicating whether to override incoming message properties with those in agreement.
	OverrideMessageProperties pulumi.BoolInput `pulumi:"overrideMessageProperties"`
	// The value indicating whether the message has to be signed.
	SignMessage pulumi.BoolInput `pulumi:"signMessage"`
	// The signing algorithm.
	SigningAlgorithm pulumi.StringPtrInput `pulumi:"signingAlgorithm"`
}

func (AS2ValidationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2ValidationSettings)(nil)).Elem()
}

func (i AS2ValidationSettingsArgs) ToAS2ValidationSettingsOutput() AS2ValidationSettingsOutput {
	return i.ToAS2ValidationSettingsOutputWithContext(context.Background())
}

func (i AS2ValidationSettingsArgs) ToAS2ValidationSettingsOutputWithContext(ctx context.Context) AS2ValidationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ValidationSettingsOutput)
}

func (i AS2ValidationSettingsArgs) ToAS2ValidationSettingsPtrOutput() AS2ValidationSettingsPtrOutput {
	return i.ToAS2ValidationSettingsPtrOutputWithContext(context.Background())
}

func (i AS2ValidationSettingsArgs) ToAS2ValidationSettingsPtrOutputWithContext(ctx context.Context) AS2ValidationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ValidationSettingsOutput).ToAS2ValidationSettingsPtrOutputWithContext(ctx)
}

// AS2ValidationSettingsPtrInput is an input type that accepts AS2ValidationSettingsArgs, AS2ValidationSettingsPtr and AS2ValidationSettingsPtrOutput values.
// You can construct a concrete instance of `AS2ValidationSettingsPtrInput` via:
//
//          AS2ValidationSettingsArgs{...}
//
//  or:
//
//          nil
type AS2ValidationSettingsPtrInput interface {
	pulumi.Input

	ToAS2ValidationSettingsPtrOutput() AS2ValidationSettingsPtrOutput
	ToAS2ValidationSettingsPtrOutputWithContext(context.Context) AS2ValidationSettingsPtrOutput
}

type as2validationSettingsPtrType AS2ValidationSettingsArgs

func AS2ValidationSettingsPtr(v *AS2ValidationSettingsArgs) AS2ValidationSettingsPtrInput {
	return (*as2validationSettingsPtrType)(v)
}

func (*as2validationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2ValidationSettings)(nil)).Elem()
}

func (i *as2validationSettingsPtrType) ToAS2ValidationSettingsPtrOutput() AS2ValidationSettingsPtrOutput {
	return i.ToAS2ValidationSettingsPtrOutputWithContext(context.Background())
}

func (i *as2validationSettingsPtrType) ToAS2ValidationSettingsPtrOutputWithContext(ctx context.Context) AS2ValidationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ValidationSettingsPtrOutput)
}

// The AS2 agreement validation settings.
type AS2ValidationSettingsOutput struct{ *pulumi.OutputState }

func (AS2ValidationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2ValidationSettings)(nil)).Elem()
}

func (o AS2ValidationSettingsOutput) ToAS2ValidationSettingsOutput() AS2ValidationSettingsOutput {
	return o
}

func (o AS2ValidationSettingsOutput) ToAS2ValidationSettingsOutputWithContext(ctx context.Context) AS2ValidationSettingsOutput {
	return o
}

func (o AS2ValidationSettingsOutput) ToAS2ValidationSettingsPtrOutput() AS2ValidationSettingsPtrOutput {
	return o.ToAS2ValidationSettingsPtrOutputWithContext(context.Background())
}

func (o AS2ValidationSettingsOutput) ToAS2ValidationSettingsPtrOutputWithContext(ctx context.Context) AS2ValidationSettingsPtrOutput {
	return o.ApplyT(func(v AS2ValidationSettings) *AS2ValidationSettings {
		return &v
	}).(AS2ValidationSettingsPtrOutput)
}

// The value indicating whether to check for certificate revocation list on receive.
func (o AS2ValidationSettingsOutput) CheckCertificateRevocationListOnReceive() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2ValidationSettings) bool { return v.CheckCertificateRevocationListOnReceive }).(pulumi.BoolOutput)
}

// The value indicating whether to check for certificate revocation list on send.
func (o AS2ValidationSettingsOutput) CheckCertificateRevocationListOnSend() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2ValidationSettings) bool { return v.CheckCertificateRevocationListOnSend }).(pulumi.BoolOutput)
}

// The value indicating whether to check for duplicate message.
func (o AS2ValidationSettingsOutput) CheckDuplicateMessage() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2ValidationSettings) bool { return v.CheckDuplicateMessage }).(pulumi.BoolOutput)
}

// The value indicating whether the message has to be compressed.
func (o AS2ValidationSettingsOutput) CompressMessage() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2ValidationSettings) bool { return v.CompressMessage }).(pulumi.BoolOutput)
}

// The value indicating whether the message has to be encrypted.
func (o AS2ValidationSettingsOutput) EncryptMessage() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2ValidationSettings) bool { return v.EncryptMessage }).(pulumi.BoolOutput)
}

// The encryption algorithm.
func (o AS2ValidationSettingsOutput) EncryptionAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v AS2ValidationSettings) string { return v.EncryptionAlgorithm }).(pulumi.StringOutput)
}

// The number of days to look back for duplicate interchange.
func (o AS2ValidationSettingsOutput) InterchangeDuplicatesValidityDays() pulumi.IntOutput {
	return o.ApplyT(func(v AS2ValidationSettings) int { return v.InterchangeDuplicatesValidityDays }).(pulumi.IntOutput)
}

// The value indicating whether to override incoming message properties with those in agreement.
func (o AS2ValidationSettingsOutput) OverrideMessageProperties() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2ValidationSettings) bool { return v.OverrideMessageProperties }).(pulumi.BoolOutput)
}

// The value indicating whether the message has to be signed.
func (o AS2ValidationSettingsOutput) SignMessage() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2ValidationSettings) bool { return v.SignMessage }).(pulumi.BoolOutput)
}

// The signing algorithm.
func (o AS2ValidationSettingsOutput) SigningAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2ValidationSettings) *string { return v.SigningAlgorithm }).(pulumi.StringPtrOutput)
}

type AS2ValidationSettingsPtrOutput struct{ *pulumi.OutputState }

func (AS2ValidationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2ValidationSettings)(nil)).Elem()
}

func (o AS2ValidationSettingsPtrOutput) ToAS2ValidationSettingsPtrOutput() AS2ValidationSettingsPtrOutput {
	return o
}

func (o AS2ValidationSettingsPtrOutput) ToAS2ValidationSettingsPtrOutputWithContext(ctx context.Context) AS2ValidationSettingsPtrOutput {
	return o
}

func (o AS2ValidationSettingsPtrOutput) Elem() AS2ValidationSettingsOutput {
	return o.ApplyT(func(v *AS2ValidationSettings) AS2ValidationSettings { return *v }).(AS2ValidationSettingsOutput)
}

// The value indicating whether to check for certificate revocation list on receive.
func (o AS2ValidationSettingsPtrOutput) CheckCertificateRevocationListOnReceive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.CheckCertificateRevocationListOnReceive
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for certificate revocation list on send.
func (o AS2ValidationSettingsPtrOutput) CheckCertificateRevocationListOnSend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.CheckCertificateRevocationListOnSend
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate message.
func (o AS2ValidationSettingsPtrOutput) CheckDuplicateMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.CheckDuplicateMessage
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether the message has to be compressed.
func (o AS2ValidationSettingsPtrOutput) CompressMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.CompressMessage
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether the message has to be encrypted.
func (o AS2ValidationSettingsPtrOutput) EncryptMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.EncryptMessage
	}).(pulumi.BoolPtrOutput)
}

// The encryption algorithm.
func (o AS2ValidationSettingsPtrOutput) EncryptionAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettings) *string {
		if v == nil {
			return nil
		}
		return &v.EncryptionAlgorithm
	}).(pulumi.StringPtrOutput)
}

// The number of days to look back for duplicate interchange.
func (o AS2ValidationSettingsPtrOutput) InterchangeDuplicatesValidityDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettings) *int {
		if v == nil {
			return nil
		}
		return &v.InterchangeDuplicatesValidityDays
	}).(pulumi.IntPtrOutput)
}

// The value indicating whether to override incoming message properties with those in agreement.
func (o AS2ValidationSettingsPtrOutput) OverrideMessageProperties() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.OverrideMessageProperties
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether the message has to be signed.
func (o AS2ValidationSettingsPtrOutput) SignMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.SignMessage
	}).(pulumi.BoolPtrOutput)
}

// The signing algorithm.
func (o AS2ValidationSettingsPtrOutput) SigningAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettings) *string {
		if v == nil {
			return nil
		}
		return v.SigningAlgorithm
	}).(pulumi.StringPtrOutput)
}

// The AS2 agreement validation settings.
type AS2ValidationSettingsResponse struct {
	// The value indicating whether to check for certificate revocation list on receive.
	CheckCertificateRevocationListOnReceive bool `pulumi:"checkCertificateRevocationListOnReceive"`
	// The value indicating whether to check for certificate revocation list on send.
	CheckCertificateRevocationListOnSend bool `pulumi:"checkCertificateRevocationListOnSend"`
	// The value indicating whether to check for duplicate message.
	CheckDuplicateMessage bool `pulumi:"checkDuplicateMessage"`
	// The value indicating whether the message has to be compressed.
	CompressMessage bool `pulumi:"compressMessage"`
	// The value indicating whether the message has to be encrypted.
	EncryptMessage bool `pulumi:"encryptMessage"`
	// The encryption algorithm.
	EncryptionAlgorithm string `pulumi:"encryptionAlgorithm"`
	// The number of days to look back for duplicate interchange.
	InterchangeDuplicatesValidityDays int `pulumi:"interchangeDuplicatesValidityDays"`
	// The value indicating whether to override incoming message properties with those in agreement.
	OverrideMessageProperties bool `pulumi:"overrideMessageProperties"`
	// The value indicating whether the message has to be signed.
	SignMessage bool `pulumi:"signMessage"`
	// The signing algorithm.
	SigningAlgorithm *string `pulumi:"signingAlgorithm"`
}

// AS2ValidationSettingsResponseInput is an input type that accepts AS2ValidationSettingsResponseArgs and AS2ValidationSettingsResponseOutput values.
// You can construct a concrete instance of `AS2ValidationSettingsResponseInput` via:
//
//          AS2ValidationSettingsResponseArgs{...}
type AS2ValidationSettingsResponseInput interface {
	pulumi.Input

	ToAS2ValidationSettingsResponseOutput() AS2ValidationSettingsResponseOutput
	ToAS2ValidationSettingsResponseOutputWithContext(context.Context) AS2ValidationSettingsResponseOutput
}

// The AS2 agreement validation settings.
type AS2ValidationSettingsResponseArgs struct {
	// The value indicating whether to check for certificate revocation list on receive.
	CheckCertificateRevocationListOnReceive pulumi.BoolInput `pulumi:"checkCertificateRevocationListOnReceive"`
	// The value indicating whether to check for certificate revocation list on send.
	CheckCertificateRevocationListOnSend pulumi.BoolInput `pulumi:"checkCertificateRevocationListOnSend"`
	// The value indicating whether to check for duplicate message.
	CheckDuplicateMessage pulumi.BoolInput `pulumi:"checkDuplicateMessage"`
	// The value indicating whether the message has to be compressed.
	CompressMessage pulumi.BoolInput `pulumi:"compressMessage"`
	// The value indicating whether the message has to be encrypted.
	EncryptMessage pulumi.BoolInput `pulumi:"encryptMessage"`
	// The encryption algorithm.
	EncryptionAlgorithm pulumi.StringInput `pulumi:"encryptionAlgorithm"`
	// The number of days to look back for duplicate interchange.
	InterchangeDuplicatesValidityDays pulumi.IntInput `pulumi:"interchangeDuplicatesValidityDays"`
	// The value indicating whether to override incoming message properties with those in agreement.
	OverrideMessageProperties pulumi.BoolInput `pulumi:"overrideMessageProperties"`
	// The value indicating whether the message has to be signed.
	SignMessage pulumi.BoolInput `pulumi:"signMessage"`
	// The signing algorithm.
	SigningAlgorithm pulumi.StringPtrInput `pulumi:"signingAlgorithm"`
}

func (AS2ValidationSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2ValidationSettingsResponse)(nil)).Elem()
}

func (i AS2ValidationSettingsResponseArgs) ToAS2ValidationSettingsResponseOutput() AS2ValidationSettingsResponseOutput {
	return i.ToAS2ValidationSettingsResponseOutputWithContext(context.Background())
}

func (i AS2ValidationSettingsResponseArgs) ToAS2ValidationSettingsResponseOutputWithContext(ctx context.Context) AS2ValidationSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ValidationSettingsResponseOutput)
}

func (i AS2ValidationSettingsResponseArgs) ToAS2ValidationSettingsResponsePtrOutput() AS2ValidationSettingsResponsePtrOutput {
	return i.ToAS2ValidationSettingsResponsePtrOutputWithContext(context.Background())
}

func (i AS2ValidationSettingsResponseArgs) ToAS2ValidationSettingsResponsePtrOutputWithContext(ctx context.Context) AS2ValidationSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ValidationSettingsResponseOutput).ToAS2ValidationSettingsResponsePtrOutputWithContext(ctx)
}

// AS2ValidationSettingsResponsePtrInput is an input type that accepts AS2ValidationSettingsResponseArgs, AS2ValidationSettingsResponsePtr and AS2ValidationSettingsResponsePtrOutput values.
// You can construct a concrete instance of `AS2ValidationSettingsResponsePtrInput` via:
//
//          AS2ValidationSettingsResponseArgs{...}
//
//  or:
//
//          nil
type AS2ValidationSettingsResponsePtrInput interface {
	pulumi.Input

	ToAS2ValidationSettingsResponsePtrOutput() AS2ValidationSettingsResponsePtrOutput
	ToAS2ValidationSettingsResponsePtrOutputWithContext(context.Context) AS2ValidationSettingsResponsePtrOutput
}

type as2validationSettingsResponsePtrType AS2ValidationSettingsResponseArgs

func AS2ValidationSettingsResponsePtr(v *AS2ValidationSettingsResponseArgs) AS2ValidationSettingsResponsePtrInput {
	return (*as2validationSettingsResponsePtrType)(v)
}

func (*as2validationSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2ValidationSettingsResponse)(nil)).Elem()
}

func (i *as2validationSettingsResponsePtrType) ToAS2ValidationSettingsResponsePtrOutput() AS2ValidationSettingsResponsePtrOutput {
	return i.ToAS2ValidationSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *as2validationSettingsResponsePtrType) ToAS2ValidationSettingsResponsePtrOutputWithContext(ctx context.Context) AS2ValidationSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ValidationSettingsResponsePtrOutput)
}

// The AS2 agreement validation settings.
type AS2ValidationSettingsResponseOutput struct{ *pulumi.OutputState }

func (AS2ValidationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2ValidationSettingsResponse)(nil)).Elem()
}

func (o AS2ValidationSettingsResponseOutput) ToAS2ValidationSettingsResponseOutput() AS2ValidationSettingsResponseOutput {
	return o
}

func (o AS2ValidationSettingsResponseOutput) ToAS2ValidationSettingsResponseOutputWithContext(ctx context.Context) AS2ValidationSettingsResponseOutput {
	return o
}

func (o AS2ValidationSettingsResponseOutput) ToAS2ValidationSettingsResponsePtrOutput() AS2ValidationSettingsResponsePtrOutput {
	return o.ToAS2ValidationSettingsResponsePtrOutputWithContext(context.Background())
}

func (o AS2ValidationSettingsResponseOutput) ToAS2ValidationSettingsResponsePtrOutputWithContext(ctx context.Context) AS2ValidationSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) *AS2ValidationSettingsResponse {
		return &v
	}).(AS2ValidationSettingsResponsePtrOutput)
}

// The value indicating whether to check for certificate revocation list on receive.
func (o AS2ValidationSettingsResponseOutput) CheckCertificateRevocationListOnReceive() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) bool { return v.CheckCertificateRevocationListOnReceive }).(pulumi.BoolOutput)
}

// The value indicating whether to check for certificate revocation list on send.
func (o AS2ValidationSettingsResponseOutput) CheckCertificateRevocationListOnSend() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) bool { return v.CheckCertificateRevocationListOnSend }).(pulumi.BoolOutput)
}

// The value indicating whether to check for duplicate message.
func (o AS2ValidationSettingsResponseOutput) CheckDuplicateMessage() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) bool { return v.CheckDuplicateMessage }).(pulumi.BoolOutput)
}

// The value indicating whether the message has to be compressed.
func (o AS2ValidationSettingsResponseOutput) CompressMessage() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) bool { return v.CompressMessage }).(pulumi.BoolOutput)
}

// The value indicating whether the message has to be encrypted.
func (o AS2ValidationSettingsResponseOutput) EncryptMessage() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) bool { return v.EncryptMessage }).(pulumi.BoolOutput)
}

// The encryption algorithm.
func (o AS2ValidationSettingsResponseOutput) EncryptionAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) string { return v.EncryptionAlgorithm }).(pulumi.StringOutput)
}

// The number of days to look back for duplicate interchange.
func (o AS2ValidationSettingsResponseOutput) InterchangeDuplicatesValidityDays() pulumi.IntOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) int { return v.InterchangeDuplicatesValidityDays }).(pulumi.IntOutput)
}

// The value indicating whether to override incoming message properties with those in agreement.
func (o AS2ValidationSettingsResponseOutput) OverrideMessageProperties() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) bool { return v.OverrideMessageProperties }).(pulumi.BoolOutput)
}

// The value indicating whether the message has to be signed.
func (o AS2ValidationSettingsResponseOutput) SignMessage() pulumi.BoolOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) bool { return v.SignMessage }).(pulumi.BoolOutput)
}

// The signing algorithm.
func (o AS2ValidationSettingsResponseOutput) SigningAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) *string { return v.SigningAlgorithm }).(pulumi.StringPtrOutput)
}

type AS2ValidationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2ValidationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2ValidationSettingsResponse)(nil)).Elem()
}

func (o AS2ValidationSettingsResponsePtrOutput) ToAS2ValidationSettingsResponsePtrOutput() AS2ValidationSettingsResponsePtrOutput {
	return o
}

func (o AS2ValidationSettingsResponsePtrOutput) ToAS2ValidationSettingsResponsePtrOutputWithContext(ctx context.Context) AS2ValidationSettingsResponsePtrOutput {
	return o
}

func (o AS2ValidationSettingsResponsePtrOutput) Elem() AS2ValidationSettingsResponseOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) AS2ValidationSettingsResponse { return *v }).(AS2ValidationSettingsResponseOutput)
}

// The value indicating whether to check for certificate revocation list on receive.
func (o AS2ValidationSettingsResponsePtrOutput) CheckCertificateRevocationListOnReceive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CheckCertificateRevocationListOnReceive
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for certificate revocation list on send.
func (o AS2ValidationSettingsResponsePtrOutput) CheckCertificateRevocationListOnSend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CheckCertificateRevocationListOnSend
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate message.
func (o AS2ValidationSettingsResponsePtrOutput) CheckDuplicateMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CheckDuplicateMessage
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether the message has to be compressed.
func (o AS2ValidationSettingsResponsePtrOutput) CompressMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CompressMessage
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether the message has to be encrypted.
func (o AS2ValidationSettingsResponsePtrOutput) EncryptMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EncryptMessage
	}).(pulumi.BoolPtrOutput)
}

// The encryption algorithm.
func (o AS2ValidationSettingsResponsePtrOutput) EncryptionAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EncryptionAlgorithm
	}).(pulumi.StringPtrOutput)
}

// The number of days to look back for duplicate interchange.
func (o AS2ValidationSettingsResponsePtrOutput) InterchangeDuplicatesValidityDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.InterchangeDuplicatesValidityDays
	}).(pulumi.IntPtrOutput)
}

// The value indicating whether to override incoming message properties with those in agreement.
func (o AS2ValidationSettingsResponsePtrOutput) OverrideMessageProperties() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.OverrideMessageProperties
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether the message has to be signed.
func (o AS2ValidationSettingsResponsePtrOutput) SignMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.SignMessage
	}).(pulumi.BoolPtrOutput)
}

// The signing algorithm.
func (o AS2ValidationSettingsResponsePtrOutput) SigningAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SigningAlgorithm
	}).(pulumi.StringPtrOutput)
}

// The integration account agreement content.
type AgreementContent struct {
	// The AS2 agreement content.
	AS2 *AS2AgreementContent `pulumi:"aS2"`
	// The EDIFACT agreement content.
	Edifact *EdifactAgreementContent `pulumi:"edifact"`
	// The X12 agreement content.
	X12 *X12AgreementContent `pulumi:"x12"`
}

// AgreementContentInput is an input type that accepts AgreementContentArgs and AgreementContentOutput values.
// You can construct a concrete instance of `AgreementContentInput` via:
//
//          AgreementContentArgs{...}
type AgreementContentInput interface {
	pulumi.Input

	ToAgreementContentOutput() AgreementContentOutput
	ToAgreementContentOutputWithContext(context.Context) AgreementContentOutput
}

// The integration account agreement content.
type AgreementContentArgs struct {
	// The AS2 agreement content.
	AS2 AS2AgreementContentPtrInput `pulumi:"aS2"`
	// The EDIFACT agreement content.
	Edifact EdifactAgreementContentPtrInput `pulumi:"edifact"`
	// The X12 agreement content.
	X12 X12AgreementContentPtrInput `pulumi:"x12"`
}

func (AgreementContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgreementContent)(nil)).Elem()
}

func (i AgreementContentArgs) ToAgreementContentOutput() AgreementContentOutput {
	return i.ToAgreementContentOutputWithContext(context.Background())
}

func (i AgreementContentArgs) ToAgreementContentOutputWithContext(ctx context.Context) AgreementContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgreementContentOutput)
}

func (i AgreementContentArgs) ToAgreementContentPtrOutput() AgreementContentPtrOutput {
	return i.ToAgreementContentPtrOutputWithContext(context.Background())
}

func (i AgreementContentArgs) ToAgreementContentPtrOutputWithContext(ctx context.Context) AgreementContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgreementContentOutput).ToAgreementContentPtrOutputWithContext(ctx)
}

// AgreementContentPtrInput is an input type that accepts AgreementContentArgs, AgreementContentPtr and AgreementContentPtrOutput values.
// You can construct a concrete instance of `AgreementContentPtrInput` via:
//
//          AgreementContentArgs{...}
//
//  or:
//
//          nil
type AgreementContentPtrInput interface {
	pulumi.Input

	ToAgreementContentPtrOutput() AgreementContentPtrOutput
	ToAgreementContentPtrOutputWithContext(context.Context) AgreementContentPtrOutput
}

type agreementContentPtrType AgreementContentArgs

func AgreementContentPtr(v *AgreementContentArgs) AgreementContentPtrInput {
	return (*agreementContentPtrType)(v)
}

func (*agreementContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AgreementContent)(nil)).Elem()
}

func (i *agreementContentPtrType) ToAgreementContentPtrOutput() AgreementContentPtrOutput {
	return i.ToAgreementContentPtrOutputWithContext(context.Background())
}

func (i *agreementContentPtrType) ToAgreementContentPtrOutputWithContext(ctx context.Context) AgreementContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgreementContentPtrOutput)
}

// The integration account agreement content.
type AgreementContentOutput struct{ *pulumi.OutputState }

func (AgreementContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgreementContent)(nil)).Elem()
}

func (o AgreementContentOutput) ToAgreementContentOutput() AgreementContentOutput {
	return o
}

func (o AgreementContentOutput) ToAgreementContentOutputWithContext(ctx context.Context) AgreementContentOutput {
	return o
}

func (o AgreementContentOutput) ToAgreementContentPtrOutput() AgreementContentPtrOutput {
	return o.ToAgreementContentPtrOutputWithContext(context.Background())
}

func (o AgreementContentOutput) ToAgreementContentPtrOutputWithContext(ctx context.Context) AgreementContentPtrOutput {
	return o.ApplyT(func(v AgreementContent) *AgreementContent {
		return &v
	}).(AgreementContentPtrOutput)
}

// The AS2 agreement content.
func (o AgreementContentOutput) AS2() AS2AgreementContentPtrOutput {
	return o.ApplyT(func(v AgreementContent) *AS2AgreementContent { return v.AS2 }).(AS2AgreementContentPtrOutput)
}

// The EDIFACT agreement content.
func (o AgreementContentOutput) Edifact() EdifactAgreementContentPtrOutput {
	return o.ApplyT(func(v AgreementContent) *EdifactAgreementContent { return v.Edifact }).(EdifactAgreementContentPtrOutput)
}

// The X12 agreement content.
func (o AgreementContentOutput) X12() X12AgreementContentPtrOutput {
	return o.ApplyT(func(v AgreementContent) *X12AgreementContent { return v.X12 }).(X12AgreementContentPtrOutput)
}

type AgreementContentPtrOutput struct{ *pulumi.OutputState }

func (AgreementContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgreementContent)(nil)).Elem()
}

func (o AgreementContentPtrOutput) ToAgreementContentPtrOutput() AgreementContentPtrOutput {
	return o
}

func (o AgreementContentPtrOutput) ToAgreementContentPtrOutputWithContext(ctx context.Context) AgreementContentPtrOutput {
	return o
}

func (o AgreementContentPtrOutput) Elem() AgreementContentOutput {
	return o.ApplyT(func(v *AgreementContent) AgreementContent { return *v }).(AgreementContentOutput)
}

// The AS2 agreement content.
func (o AgreementContentPtrOutput) AS2() AS2AgreementContentPtrOutput {
	return o.ApplyT(func(v *AgreementContent) *AS2AgreementContent {
		if v == nil {
			return nil
		}
		return v.AS2
	}).(AS2AgreementContentPtrOutput)
}

// The EDIFACT agreement content.
func (o AgreementContentPtrOutput) Edifact() EdifactAgreementContentPtrOutput {
	return o.ApplyT(func(v *AgreementContent) *EdifactAgreementContent {
		if v == nil {
			return nil
		}
		return v.Edifact
	}).(EdifactAgreementContentPtrOutput)
}

// The X12 agreement content.
func (o AgreementContentPtrOutput) X12() X12AgreementContentPtrOutput {
	return o.ApplyT(func(v *AgreementContent) *X12AgreementContent {
		if v == nil {
			return nil
		}
		return v.X12
	}).(X12AgreementContentPtrOutput)
}

// The integration account agreement content.
type AgreementContentResponse struct {
	// The AS2 agreement content.
	AS2 *AS2AgreementContentResponse `pulumi:"aS2"`
	// The EDIFACT agreement content.
	Edifact *EdifactAgreementContentResponse `pulumi:"edifact"`
	// The X12 agreement content.
	X12 *X12AgreementContentResponse `pulumi:"x12"`
}

// AgreementContentResponseInput is an input type that accepts AgreementContentResponseArgs and AgreementContentResponseOutput values.
// You can construct a concrete instance of `AgreementContentResponseInput` via:
//
//          AgreementContentResponseArgs{...}
type AgreementContentResponseInput interface {
	pulumi.Input

	ToAgreementContentResponseOutput() AgreementContentResponseOutput
	ToAgreementContentResponseOutputWithContext(context.Context) AgreementContentResponseOutput
}

// The integration account agreement content.
type AgreementContentResponseArgs struct {
	// The AS2 agreement content.
	AS2 AS2AgreementContentResponsePtrInput `pulumi:"aS2"`
	// The EDIFACT agreement content.
	Edifact EdifactAgreementContentResponsePtrInput `pulumi:"edifact"`
	// The X12 agreement content.
	X12 X12AgreementContentResponsePtrInput `pulumi:"x12"`
}

func (AgreementContentResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgreementContentResponse)(nil)).Elem()
}

func (i AgreementContentResponseArgs) ToAgreementContentResponseOutput() AgreementContentResponseOutput {
	return i.ToAgreementContentResponseOutputWithContext(context.Background())
}

func (i AgreementContentResponseArgs) ToAgreementContentResponseOutputWithContext(ctx context.Context) AgreementContentResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgreementContentResponseOutput)
}

func (i AgreementContentResponseArgs) ToAgreementContentResponsePtrOutput() AgreementContentResponsePtrOutput {
	return i.ToAgreementContentResponsePtrOutputWithContext(context.Background())
}

func (i AgreementContentResponseArgs) ToAgreementContentResponsePtrOutputWithContext(ctx context.Context) AgreementContentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgreementContentResponseOutput).ToAgreementContentResponsePtrOutputWithContext(ctx)
}

// AgreementContentResponsePtrInput is an input type that accepts AgreementContentResponseArgs, AgreementContentResponsePtr and AgreementContentResponsePtrOutput values.
// You can construct a concrete instance of `AgreementContentResponsePtrInput` via:
//
//          AgreementContentResponseArgs{...}
//
//  or:
//
//          nil
type AgreementContentResponsePtrInput interface {
	pulumi.Input

	ToAgreementContentResponsePtrOutput() AgreementContentResponsePtrOutput
	ToAgreementContentResponsePtrOutputWithContext(context.Context) AgreementContentResponsePtrOutput
}

type agreementContentResponsePtrType AgreementContentResponseArgs

func AgreementContentResponsePtr(v *AgreementContentResponseArgs) AgreementContentResponsePtrInput {
	return (*agreementContentResponsePtrType)(v)
}

func (*agreementContentResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AgreementContentResponse)(nil)).Elem()
}

func (i *agreementContentResponsePtrType) ToAgreementContentResponsePtrOutput() AgreementContentResponsePtrOutput {
	return i.ToAgreementContentResponsePtrOutputWithContext(context.Background())
}

func (i *agreementContentResponsePtrType) ToAgreementContentResponsePtrOutputWithContext(ctx context.Context) AgreementContentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgreementContentResponsePtrOutput)
}

// The integration account agreement content.
type AgreementContentResponseOutput struct{ *pulumi.OutputState }

func (AgreementContentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgreementContentResponse)(nil)).Elem()
}

func (o AgreementContentResponseOutput) ToAgreementContentResponseOutput() AgreementContentResponseOutput {
	return o
}

func (o AgreementContentResponseOutput) ToAgreementContentResponseOutputWithContext(ctx context.Context) AgreementContentResponseOutput {
	return o
}

func (o AgreementContentResponseOutput) ToAgreementContentResponsePtrOutput() AgreementContentResponsePtrOutput {
	return o.ToAgreementContentResponsePtrOutputWithContext(context.Background())
}

func (o AgreementContentResponseOutput) ToAgreementContentResponsePtrOutputWithContext(ctx context.Context) AgreementContentResponsePtrOutput {
	return o.ApplyT(func(v AgreementContentResponse) *AgreementContentResponse {
		return &v
	}).(AgreementContentResponsePtrOutput)
}

// The AS2 agreement content.
func (o AgreementContentResponseOutput) AS2() AS2AgreementContentResponsePtrOutput {
	return o.ApplyT(func(v AgreementContentResponse) *AS2AgreementContentResponse { return v.AS2 }).(AS2AgreementContentResponsePtrOutput)
}

// The EDIFACT agreement content.
func (o AgreementContentResponseOutput) Edifact() EdifactAgreementContentResponsePtrOutput {
	return o.ApplyT(func(v AgreementContentResponse) *EdifactAgreementContentResponse { return v.Edifact }).(EdifactAgreementContentResponsePtrOutput)
}

// The X12 agreement content.
func (o AgreementContentResponseOutput) X12() X12AgreementContentResponsePtrOutput {
	return o.ApplyT(func(v AgreementContentResponse) *X12AgreementContentResponse { return v.X12 }).(X12AgreementContentResponsePtrOutput)
}

type AgreementContentResponsePtrOutput struct{ *pulumi.OutputState }

func (AgreementContentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgreementContentResponse)(nil)).Elem()
}

func (o AgreementContentResponsePtrOutput) ToAgreementContentResponsePtrOutput() AgreementContentResponsePtrOutput {
	return o
}

func (o AgreementContentResponsePtrOutput) ToAgreementContentResponsePtrOutputWithContext(ctx context.Context) AgreementContentResponsePtrOutput {
	return o
}

func (o AgreementContentResponsePtrOutput) Elem() AgreementContentResponseOutput {
	return o.ApplyT(func(v *AgreementContentResponse) AgreementContentResponse { return *v }).(AgreementContentResponseOutput)
}

// The AS2 agreement content.
func (o AgreementContentResponsePtrOutput) AS2() AS2AgreementContentResponsePtrOutput {
	return o.ApplyT(func(v *AgreementContentResponse) *AS2AgreementContentResponse {
		if v == nil {
			return nil
		}
		return v.AS2
	}).(AS2AgreementContentResponsePtrOutput)
}

// The EDIFACT agreement content.
func (o AgreementContentResponsePtrOutput) Edifact() EdifactAgreementContentResponsePtrOutput {
	return o.ApplyT(func(v *AgreementContentResponse) *EdifactAgreementContentResponse {
		if v == nil {
			return nil
		}
		return v.Edifact
	}).(EdifactAgreementContentResponsePtrOutput)
}

// The X12 agreement content.
func (o AgreementContentResponsePtrOutput) X12() X12AgreementContentResponsePtrOutput {
	return o.ApplyT(func(v *AgreementContentResponse) *X12AgreementContentResponse {
		if v == nil {
			return nil
		}
		return v.X12
	}).(X12AgreementContentResponsePtrOutput)
}

// The assembly properties definition.
type AssemblyProperties struct {
	// The assembly culture.
	AssemblyCulture *string `pulumi:"assemblyCulture"`
	// The assembly name.
	AssemblyName string `pulumi:"assemblyName"`
	// The assembly public key token.
	AssemblyPublicKeyToken *string `pulumi:"assemblyPublicKeyToken"`
	// The assembly version.
	AssemblyVersion *string `pulumi:"assemblyVersion"`
	// The artifact changed time.
	ChangedTime *string     `pulumi:"changedTime"`
	Content     interface{} `pulumi:"content"`
	// The content link.
	ContentLink *ContentLink `pulumi:"contentLink"`
	// The content type.
	ContentType *string `pulumi:"contentType"`
	// The artifact creation time.
	CreatedTime *string     `pulumi:"createdTime"`
	Metadata    interface{} `pulumi:"metadata"`
}

// AssemblyPropertiesInput is an input type that accepts AssemblyPropertiesArgs and AssemblyPropertiesOutput values.
// You can construct a concrete instance of `AssemblyPropertiesInput` via:
//
//          AssemblyPropertiesArgs{...}
type AssemblyPropertiesInput interface {
	pulumi.Input

	ToAssemblyPropertiesOutput() AssemblyPropertiesOutput
	ToAssemblyPropertiesOutputWithContext(context.Context) AssemblyPropertiesOutput
}

// The assembly properties definition.
type AssemblyPropertiesArgs struct {
	// The assembly culture.
	AssemblyCulture pulumi.StringPtrInput `pulumi:"assemblyCulture"`
	// The assembly name.
	AssemblyName pulumi.StringInput `pulumi:"assemblyName"`
	// The assembly public key token.
	AssemblyPublicKeyToken pulumi.StringPtrInput `pulumi:"assemblyPublicKeyToken"`
	// The assembly version.
	AssemblyVersion pulumi.StringPtrInput `pulumi:"assemblyVersion"`
	// The artifact changed time.
	ChangedTime pulumi.StringPtrInput `pulumi:"changedTime"`
	Content     pulumi.Input          `pulumi:"content"`
	// The content link.
	ContentLink ContentLinkPtrInput `pulumi:"contentLink"`
	// The content type.
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// The artifact creation time.
	CreatedTime pulumi.StringPtrInput `pulumi:"createdTime"`
	Metadata    pulumi.Input          `pulumi:"metadata"`
}

func (AssemblyPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssemblyProperties)(nil)).Elem()
}

func (i AssemblyPropertiesArgs) ToAssemblyPropertiesOutput() AssemblyPropertiesOutput {
	return i.ToAssemblyPropertiesOutputWithContext(context.Background())
}

func (i AssemblyPropertiesArgs) ToAssemblyPropertiesOutputWithContext(ctx context.Context) AssemblyPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssemblyPropertiesOutput)
}

func (i AssemblyPropertiesArgs) ToAssemblyPropertiesPtrOutput() AssemblyPropertiesPtrOutput {
	return i.ToAssemblyPropertiesPtrOutputWithContext(context.Background())
}

func (i AssemblyPropertiesArgs) ToAssemblyPropertiesPtrOutputWithContext(ctx context.Context) AssemblyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssemblyPropertiesOutput).ToAssemblyPropertiesPtrOutputWithContext(ctx)
}

// AssemblyPropertiesPtrInput is an input type that accepts AssemblyPropertiesArgs, AssemblyPropertiesPtr and AssemblyPropertiesPtrOutput values.
// You can construct a concrete instance of `AssemblyPropertiesPtrInput` via:
//
//          AssemblyPropertiesArgs{...}
//
//  or:
//
//          nil
type AssemblyPropertiesPtrInput interface {
	pulumi.Input

	ToAssemblyPropertiesPtrOutput() AssemblyPropertiesPtrOutput
	ToAssemblyPropertiesPtrOutputWithContext(context.Context) AssemblyPropertiesPtrOutput
}

type assemblyPropertiesPtrType AssemblyPropertiesArgs

func AssemblyPropertiesPtr(v *AssemblyPropertiesArgs) AssemblyPropertiesPtrInput {
	return (*assemblyPropertiesPtrType)(v)
}

func (*assemblyPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssemblyProperties)(nil)).Elem()
}

func (i *assemblyPropertiesPtrType) ToAssemblyPropertiesPtrOutput() AssemblyPropertiesPtrOutput {
	return i.ToAssemblyPropertiesPtrOutputWithContext(context.Background())
}

func (i *assemblyPropertiesPtrType) ToAssemblyPropertiesPtrOutputWithContext(ctx context.Context) AssemblyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssemblyPropertiesPtrOutput)
}

// The assembly properties definition.
type AssemblyPropertiesOutput struct{ *pulumi.OutputState }

func (AssemblyPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssemblyProperties)(nil)).Elem()
}

func (o AssemblyPropertiesOutput) ToAssemblyPropertiesOutput() AssemblyPropertiesOutput {
	return o
}

func (o AssemblyPropertiesOutput) ToAssemblyPropertiesOutputWithContext(ctx context.Context) AssemblyPropertiesOutput {
	return o
}

func (o AssemblyPropertiesOutput) ToAssemblyPropertiesPtrOutput() AssemblyPropertiesPtrOutput {
	return o.ToAssemblyPropertiesPtrOutputWithContext(context.Background())
}

func (o AssemblyPropertiesOutput) ToAssemblyPropertiesPtrOutputWithContext(ctx context.Context) AssemblyPropertiesPtrOutput {
	return o.ApplyT(func(v AssemblyProperties) *AssemblyProperties {
		return &v
	}).(AssemblyPropertiesPtrOutput)
}

// The assembly culture.
func (o AssemblyPropertiesOutput) AssemblyCulture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssemblyProperties) *string { return v.AssemblyCulture }).(pulumi.StringPtrOutput)
}

// The assembly name.
func (o AssemblyPropertiesOutput) AssemblyName() pulumi.StringOutput {
	return o.ApplyT(func(v AssemblyProperties) string { return v.AssemblyName }).(pulumi.StringOutput)
}

// The assembly public key token.
func (o AssemblyPropertiesOutput) AssemblyPublicKeyToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssemblyProperties) *string { return v.AssemblyPublicKeyToken }).(pulumi.StringPtrOutput)
}

// The assembly version.
func (o AssemblyPropertiesOutput) AssemblyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssemblyProperties) *string { return v.AssemblyVersion }).(pulumi.StringPtrOutput)
}

// The artifact changed time.
func (o AssemblyPropertiesOutput) ChangedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssemblyProperties) *string { return v.ChangedTime }).(pulumi.StringPtrOutput)
}

func (o AssemblyPropertiesOutput) Content() pulumi.AnyOutput {
	return o.ApplyT(func(v AssemblyProperties) interface{} { return v.Content }).(pulumi.AnyOutput)
}

// The content link.
func (o AssemblyPropertiesOutput) ContentLink() ContentLinkPtrOutput {
	return o.ApplyT(func(v AssemblyProperties) *ContentLink { return v.ContentLink }).(ContentLinkPtrOutput)
}

// The content type.
func (o AssemblyPropertiesOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssemblyProperties) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// The artifact creation time.
func (o AssemblyPropertiesOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssemblyProperties) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

func (o AssemblyPropertiesOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v AssemblyProperties) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

type AssemblyPropertiesPtrOutput struct{ *pulumi.OutputState }

func (AssemblyPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssemblyProperties)(nil)).Elem()
}

func (o AssemblyPropertiesPtrOutput) ToAssemblyPropertiesPtrOutput() AssemblyPropertiesPtrOutput {
	return o
}

func (o AssemblyPropertiesPtrOutput) ToAssemblyPropertiesPtrOutputWithContext(ctx context.Context) AssemblyPropertiesPtrOutput {
	return o
}

func (o AssemblyPropertiesPtrOutput) Elem() AssemblyPropertiesOutput {
	return o.ApplyT(func(v *AssemblyProperties) AssemblyProperties { return *v }).(AssemblyPropertiesOutput)
}

// The assembly culture.
func (o AssemblyPropertiesPtrOutput) AssemblyCulture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssemblyProperties) *string {
		if v == nil {
			return nil
		}
		return v.AssemblyCulture
	}).(pulumi.StringPtrOutput)
}

// The assembly name.
func (o AssemblyPropertiesPtrOutput) AssemblyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssemblyProperties) *string {
		if v == nil {
			return nil
		}
		return &v.AssemblyName
	}).(pulumi.StringPtrOutput)
}

// The assembly public key token.
func (o AssemblyPropertiesPtrOutput) AssemblyPublicKeyToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssemblyProperties) *string {
		if v == nil {
			return nil
		}
		return v.AssemblyPublicKeyToken
	}).(pulumi.StringPtrOutput)
}

// The assembly version.
func (o AssemblyPropertiesPtrOutput) AssemblyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssemblyProperties) *string {
		if v == nil {
			return nil
		}
		return v.AssemblyVersion
	}).(pulumi.StringPtrOutput)
}

// The artifact changed time.
func (o AssemblyPropertiesPtrOutput) ChangedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssemblyProperties) *string {
		if v == nil {
			return nil
		}
		return v.ChangedTime
	}).(pulumi.StringPtrOutput)
}

func (o AssemblyPropertiesPtrOutput) Content() pulumi.AnyOutput {
	return o.ApplyT(func(v *AssemblyProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.Content
	}).(pulumi.AnyOutput)
}

// The content link.
func (o AssemblyPropertiesPtrOutput) ContentLink() ContentLinkPtrOutput {
	return o.ApplyT(func(v *AssemblyProperties) *ContentLink {
		if v == nil {
			return nil
		}
		return v.ContentLink
	}).(ContentLinkPtrOutput)
}

// The content type.
func (o AssemblyPropertiesPtrOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssemblyProperties) *string {
		if v == nil {
			return nil
		}
		return v.ContentType
	}).(pulumi.StringPtrOutput)
}

// The artifact creation time.
func (o AssemblyPropertiesPtrOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssemblyProperties) *string {
		if v == nil {
			return nil
		}
		return v.CreatedTime
	}).(pulumi.StringPtrOutput)
}

func (o AssemblyPropertiesPtrOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v *AssemblyProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.AnyOutput)
}

// The assembly properties definition.
type AssemblyPropertiesResponse struct {
	// The assembly culture.
	AssemblyCulture *string `pulumi:"assemblyCulture"`
	// The assembly name.
	AssemblyName string `pulumi:"assemblyName"`
	// The assembly public key token.
	AssemblyPublicKeyToken *string `pulumi:"assemblyPublicKeyToken"`
	// The assembly version.
	AssemblyVersion *string `pulumi:"assemblyVersion"`
	// The artifact changed time.
	ChangedTime *string     `pulumi:"changedTime"`
	Content     interface{} `pulumi:"content"`
	// The content link.
	ContentLink *ContentLinkResponse `pulumi:"contentLink"`
	// The content type.
	ContentType *string `pulumi:"contentType"`
	// The artifact creation time.
	CreatedTime *string     `pulumi:"createdTime"`
	Metadata    interface{} `pulumi:"metadata"`
}

// AssemblyPropertiesResponseInput is an input type that accepts AssemblyPropertiesResponseArgs and AssemblyPropertiesResponseOutput values.
// You can construct a concrete instance of `AssemblyPropertiesResponseInput` via:
//
//          AssemblyPropertiesResponseArgs{...}
type AssemblyPropertiesResponseInput interface {
	pulumi.Input

	ToAssemblyPropertiesResponseOutput() AssemblyPropertiesResponseOutput
	ToAssemblyPropertiesResponseOutputWithContext(context.Context) AssemblyPropertiesResponseOutput
}

// The assembly properties definition.
type AssemblyPropertiesResponseArgs struct {
	// The assembly culture.
	AssemblyCulture pulumi.StringPtrInput `pulumi:"assemblyCulture"`
	// The assembly name.
	AssemblyName pulumi.StringInput `pulumi:"assemblyName"`
	// The assembly public key token.
	AssemblyPublicKeyToken pulumi.StringPtrInput `pulumi:"assemblyPublicKeyToken"`
	// The assembly version.
	AssemblyVersion pulumi.StringPtrInput `pulumi:"assemblyVersion"`
	// The artifact changed time.
	ChangedTime pulumi.StringPtrInput `pulumi:"changedTime"`
	Content     pulumi.Input          `pulumi:"content"`
	// The content link.
	ContentLink ContentLinkResponsePtrInput `pulumi:"contentLink"`
	// The content type.
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// The artifact creation time.
	CreatedTime pulumi.StringPtrInput `pulumi:"createdTime"`
	Metadata    pulumi.Input          `pulumi:"metadata"`
}

func (AssemblyPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssemblyPropertiesResponse)(nil)).Elem()
}

func (i AssemblyPropertiesResponseArgs) ToAssemblyPropertiesResponseOutput() AssemblyPropertiesResponseOutput {
	return i.ToAssemblyPropertiesResponseOutputWithContext(context.Background())
}

func (i AssemblyPropertiesResponseArgs) ToAssemblyPropertiesResponseOutputWithContext(ctx context.Context) AssemblyPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssemblyPropertiesResponseOutput)
}

func (i AssemblyPropertiesResponseArgs) ToAssemblyPropertiesResponsePtrOutput() AssemblyPropertiesResponsePtrOutput {
	return i.ToAssemblyPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i AssemblyPropertiesResponseArgs) ToAssemblyPropertiesResponsePtrOutputWithContext(ctx context.Context) AssemblyPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssemblyPropertiesResponseOutput).ToAssemblyPropertiesResponsePtrOutputWithContext(ctx)
}

// AssemblyPropertiesResponsePtrInput is an input type that accepts AssemblyPropertiesResponseArgs, AssemblyPropertiesResponsePtr and AssemblyPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `AssemblyPropertiesResponsePtrInput` via:
//
//          AssemblyPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type AssemblyPropertiesResponsePtrInput interface {
	pulumi.Input

	ToAssemblyPropertiesResponsePtrOutput() AssemblyPropertiesResponsePtrOutput
	ToAssemblyPropertiesResponsePtrOutputWithContext(context.Context) AssemblyPropertiesResponsePtrOutput
}

type assemblyPropertiesResponsePtrType AssemblyPropertiesResponseArgs

func AssemblyPropertiesResponsePtr(v *AssemblyPropertiesResponseArgs) AssemblyPropertiesResponsePtrInput {
	return (*assemblyPropertiesResponsePtrType)(v)
}

func (*assemblyPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssemblyPropertiesResponse)(nil)).Elem()
}

func (i *assemblyPropertiesResponsePtrType) ToAssemblyPropertiesResponsePtrOutput() AssemblyPropertiesResponsePtrOutput {
	return i.ToAssemblyPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *assemblyPropertiesResponsePtrType) ToAssemblyPropertiesResponsePtrOutputWithContext(ctx context.Context) AssemblyPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssemblyPropertiesResponsePtrOutput)
}

// The assembly properties definition.
type AssemblyPropertiesResponseOutput struct{ *pulumi.OutputState }

func (AssemblyPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssemblyPropertiesResponse)(nil)).Elem()
}

func (o AssemblyPropertiesResponseOutput) ToAssemblyPropertiesResponseOutput() AssemblyPropertiesResponseOutput {
	return o
}

func (o AssemblyPropertiesResponseOutput) ToAssemblyPropertiesResponseOutputWithContext(ctx context.Context) AssemblyPropertiesResponseOutput {
	return o
}

func (o AssemblyPropertiesResponseOutput) ToAssemblyPropertiesResponsePtrOutput() AssemblyPropertiesResponsePtrOutput {
	return o.ToAssemblyPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o AssemblyPropertiesResponseOutput) ToAssemblyPropertiesResponsePtrOutputWithContext(ctx context.Context) AssemblyPropertiesResponsePtrOutput {
	return o.ApplyT(func(v AssemblyPropertiesResponse) *AssemblyPropertiesResponse {
		return &v
	}).(AssemblyPropertiesResponsePtrOutput)
}

// The assembly culture.
func (o AssemblyPropertiesResponseOutput) AssemblyCulture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssemblyPropertiesResponse) *string { return v.AssemblyCulture }).(pulumi.StringPtrOutput)
}

// The assembly name.
func (o AssemblyPropertiesResponseOutput) AssemblyName() pulumi.StringOutput {
	return o.ApplyT(func(v AssemblyPropertiesResponse) string { return v.AssemblyName }).(pulumi.StringOutput)
}

// The assembly public key token.
func (o AssemblyPropertiesResponseOutput) AssemblyPublicKeyToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssemblyPropertiesResponse) *string { return v.AssemblyPublicKeyToken }).(pulumi.StringPtrOutput)
}

// The assembly version.
func (o AssemblyPropertiesResponseOutput) AssemblyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssemblyPropertiesResponse) *string { return v.AssemblyVersion }).(pulumi.StringPtrOutput)
}

// The artifact changed time.
func (o AssemblyPropertiesResponseOutput) ChangedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssemblyPropertiesResponse) *string { return v.ChangedTime }).(pulumi.StringPtrOutput)
}

func (o AssemblyPropertiesResponseOutput) Content() pulumi.AnyOutput {
	return o.ApplyT(func(v AssemblyPropertiesResponse) interface{} { return v.Content }).(pulumi.AnyOutput)
}

// The content link.
func (o AssemblyPropertiesResponseOutput) ContentLink() ContentLinkResponsePtrOutput {
	return o.ApplyT(func(v AssemblyPropertiesResponse) *ContentLinkResponse { return v.ContentLink }).(ContentLinkResponsePtrOutput)
}

// The content type.
func (o AssemblyPropertiesResponseOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssemblyPropertiesResponse) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// The artifact creation time.
func (o AssemblyPropertiesResponseOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssemblyPropertiesResponse) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

func (o AssemblyPropertiesResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v AssemblyPropertiesResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

type AssemblyPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AssemblyPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssemblyPropertiesResponse)(nil)).Elem()
}

func (o AssemblyPropertiesResponsePtrOutput) ToAssemblyPropertiesResponsePtrOutput() AssemblyPropertiesResponsePtrOutput {
	return o
}

func (o AssemblyPropertiesResponsePtrOutput) ToAssemblyPropertiesResponsePtrOutputWithContext(ctx context.Context) AssemblyPropertiesResponsePtrOutput {
	return o
}

func (o AssemblyPropertiesResponsePtrOutput) Elem() AssemblyPropertiesResponseOutput {
	return o.ApplyT(func(v *AssemblyPropertiesResponse) AssemblyPropertiesResponse { return *v }).(AssemblyPropertiesResponseOutput)
}

// The assembly culture.
func (o AssemblyPropertiesResponsePtrOutput) AssemblyCulture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssemblyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AssemblyCulture
	}).(pulumi.StringPtrOutput)
}

// The assembly name.
func (o AssemblyPropertiesResponsePtrOutput) AssemblyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssemblyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AssemblyName
	}).(pulumi.StringPtrOutput)
}

// The assembly public key token.
func (o AssemblyPropertiesResponsePtrOutput) AssemblyPublicKeyToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssemblyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AssemblyPublicKeyToken
	}).(pulumi.StringPtrOutput)
}

// The assembly version.
func (o AssemblyPropertiesResponsePtrOutput) AssemblyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssemblyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AssemblyVersion
	}).(pulumi.StringPtrOutput)
}

// The artifact changed time.
func (o AssemblyPropertiesResponsePtrOutput) ChangedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssemblyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ChangedTime
	}).(pulumi.StringPtrOutput)
}

func (o AssemblyPropertiesResponsePtrOutput) Content() pulumi.AnyOutput {
	return o.ApplyT(func(v *AssemblyPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Content
	}).(pulumi.AnyOutput)
}

// The content link.
func (o AssemblyPropertiesResponsePtrOutput) ContentLink() ContentLinkResponsePtrOutput {
	return o.ApplyT(func(v *AssemblyPropertiesResponse) *ContentLinkResponse {
		if v == nil {
			return nil
		}
		return v.ContentLink
	}).(ContentLinkResponsePtrOutput)
}

// The content type.
func (o AssemblyPropertiesResponsePtrOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssemblyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContentType
	}).(pulumi.StringPtrOutput)
}

// The artifact creation time.
func (o AssemblyPropertiesResponsePtrOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssemblyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedTime
	}).(pulumi.StringPtrOutput)
}

func (o AssemblyPropertiesResponsePtrOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v *AssemblyPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.AnyOutput)
}

// The azure resource error info.
type AzureResourceErrorInfoResponse struct {
	// The error code.
	Code string `pulumi:"code"`
	// The error details.
	Details []AzureResourceErrorInfoResponse `pulumi:"details"`
	// The error message.
	Message string `pulumi:"message"`
}

// AzureResourceErrorInfoResponseInput is an input type that accepts AzureResourceErrorInfoResponseArgs and AzureResourceErrorInfoResponseOutput values.
// You can construct a concrete instance of `AzureResourceErrorInfoResponseInput` via:
//
//          AzureResourceErrorInfoResponseArgs{...}
type AzureResourceErrorInfoResponseInput interface {
	pulumi.Input

	ToAzureResourceErrorInfoResponseOutput() AzureResourceErrorInfoResponseOutput
	ToAzureResourceErrorInfoResponseOutputWithContext(context.Context) AzureResourceErrorInfoResponseOutput
}

// The azure resource error info.
type AzureResourceErrorInfoResponseArgs struct {
	// The error code.
	Code pulumi.StringInput `pulumi:"code"`
	// The error details.
	Details AzureResourceErrorInfoResponseArrayInput `pulumi:"details"`
	// The error message.
	Message pulumi.StringInput `pulumi:"message"`
}

func (AzureResourceErrorInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureResourceErrorInfoResponse)(nil)).Elem()
}

func (i AzureResourceErrorInfoResponseArgs) ToAzureResourceErrorInfoResponseOutput() AzureResourceErrorInfoResponseOutput {
	return i.ToAzureResourceErrorInfoResponseOutputWithContext(context.Background())
}

func (i AzureResourceErrorInfoResponseArgs) ToAzureResourceErrorInfoResponseOutputWithContext(ctx context.Context) AzureResourceErrorInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureResourceErrorInfoResponseOutput)
}

func (i AzureResourceErrorInfoResponseArgs) ToAzureResourceErrorInfoResponsePtrOutput() AzureResourceErrorInfoResponsePtrOutput {
	return i.ToAzureResourceErrorInfoResponsePtrOutputWithContext(context.Background())
}

func (i AzureResourceErrorInfoResponseArgs) ToAzureResourceErrorInfoResponsePtrOutputWithContext(ctx context.Context) AzureResourceErrorInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureResourceErrorInfoResponseOutput).ToAzureResourceErrorInfoResponsePtrOutputWithContext(ctx)
}

// AzureResourceErrorInfoResponsePtrInput is an input type that accepts AzureResourceErrorInfoResponseArgs, AzureResourceErrorInfoResponsePtr and AzureResourceErrorInfoResponsePtrOutput values.
// You can construct a concrete instance of `AzureResourceErrorInfoResponsePtrInput` via:
//
//          AzureResourceErrorInfoResponseArgs{...}
//
//  or:
//
//          nil
type AzureResourceErrorInfoResponsePtrInput interface {
	pulumi.Input

	ToAzureResourceErrorInfoResponsePtrOutput() AzureResourceErrorInfoResponsePtrOutput
	ToAzureResourceErrorInfoResponsePtrOutputWithContext(context.Context) AzureResourceErrorInfoResponsePtrOutput
}

type azureResourceErrorInfoResponsePtrType AzureResourceErrorInfoResponseArgs

func AzureResourceErrorInfoResponsePtr(v *AzureResourceErrorInfoResponseArgs) AzureResourceErrorInfoResponsePtrInput {
	return (*azureResourceErrorInfoResponsePtrType)(v)
}

func (*azureResourceErrorInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureResourceErrorInfoResponse)(nil)).Elem()
}

func (i *azureResourceErrorInfoResponsePtrType) ToAzureResourceErrorInfoResponsePtrOutput() AzureResourceErrorInfoResponsePtrOutput {
	return i.ToAzureResourceErrorInfoResponsePtrOutputWithContext(context.Background())
}

func (i *azureResourceErrorInfoResponsePtrType) ToAzureResourceErrorInfoResponsePtrOutputWithContext(ctx context.Context) AzureResourceErrorInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureResourceErrorInfoResponsePtrOutput)
}

// AzureResourceErrorInfoResponseArrayInput is an input type that accepts AzureResourceErrorInfoResponseArray and AzureResourceErrorInfoResponseArrayOutput values.
// You can construct a concrete instance of `AzureResourceErrorInfoResponseArrayInput` via:
//
//          AzureResourceErrorInfoResponseArray{ AzureResourceErrorInfoResponseArgs{...} }
type AzureResourceErrorInfoResponseArrayInput interface {
	pulumi.Input

	ToAzureResourceErrorInfoResponseArrayOutput() AzureResourceErrorInfoResponseArrayOutput
	ToAzureResourceErrorInfoResponseArrayOutputWithContext(context.Context) AzureResourceErrorInfoResponseArrayOutput
}

type AzureResourceErrorInfoResponseArray []AzureResourceErrorInfoResponseInput

func (AzureResourceErrorInfoResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureResourceErrorInfoResponse)(nil)).Elem()
}

func (i AzureResourceErrorInfoResponseArray) ToAzureResourceErrorInfoResponseArrayOutput() AzureResourceErrorInfoResponseArrayOutput {
	return i.ToAzureResourceErrorInfoResponseArrayOutputWithContext(context.Background())
}

func (i AzureResourceErrorInfoResponseArray) ToAzureResourceErrorInfoResponseArrayOutputWithContext(ctx context.Context) AzureResourceErrorInfoResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureResourceErrorInfoResponseArrayOutput)
}

// The azure resource error info.
type AzureResourceErrorInfoResponseOutput struct{ *pulumi.OutputState }

func (AzureResourceErrorInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureResourceErrorInfoResponse)(nil)).Elem()
}

func (o AzureResourceErrorInfoResponseOutput) ToAzureResourceErrorInfoResponseOutput() AzureResourceErrorInfoResponseOutput {
	return o
}

func (o AzureResourceErrorInfoResponseOutput) ToAzureResourceErrorInfoResponseOutputWithContext(ctx context.Context) AzureResourceErrorInfoResponseOutput {
	return o
}

func (o AzureResourceErrorInfoResponseOutput) ToAzureResourceErrorInfoResponsePtrOutput() AzureResourceErrorInfoResponsePtrOutput {
	return o.ToAzureResourceErrorInfoResponsePtrOutputWithContext(context.Background())
}

func (o AzureResourceErrorInfoResponseOutput) ToAzureResourceErrorInfoResponsePtrOutputWithContext(ctx context.Context) AzureResourceErrorInfoResponsePtrOutput {
	return o.ApplyT(func(v AzureResourceErrorInfoResponse) *AzureResourceErrorInfoResponse {
		return &v
	}).(AzureResourceErrorInfoResponsePtrOutput)
}

// The error code.
func (o AzureResourceErrorInfoResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v AzureResourceErrorInfoResponse) string { return v.Code }).(pulumi.StringOutput)
}

// The error details.
func (o AzureResourceErrorInfoResponseOutput) Details() AzureResourceErrorInfoResponseArrayOutput {
	return o.ApplyT(func(v AzureResourceErrorInfoResponse) []AzureResourceErrorInfoResponse { return v.Details }).(AzureResourceErrorInfoResponseArrayOutput)
}

// The error message.
func (o AzureResourceErrorInfoResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v AzureResourceErrorInfoResponse) string { return v.Message }).(pulumi.StringOutput)
}

type AzureResourceErrorInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureResourceErrorInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureResourceErrorInfoResponse)(nil)).Elem()
}

func (o AzureResourceErrorInfoResponsePtrOutput) ToAzureResourceErrorInfoResponsePtrOutput() AzureResourceErrorInfoResponsePtrOutput {
	return o
}

func (o AzureResourceErrorInfoResponsePtrOutput) ToAzureResourceErrorInfoResponsePtrOutputWithContext(ctx context.Context) AzureResourceErrorInfoResponsePtrOutput {
	return o
}

func (o AzureResourceErrorInfoResponsePtrOutput) Elem() AzureResourceErrorInfoResponseOutput {
	return o.ApplyT(func(v *AzureResourceErrorInfoResponse) AzureResourceErrorInfoResponse { return *v }).(AzureResourceErrorInfoResponseOutput)
}

// The error code.
func (o AzureResourceErrorInfoResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureResourceErrorInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

// The error details.
func (o AzureResourceErrorInfoResponsePtrOutput) Details() AzureResourceErrorInfoResponseArrayOutput {
	return o.ApplyT(func(v *AzureResourceErrorInfoResponse) []AzureResourceErrorInfoResponse {
		if v == nil {
			return nil
		}
		return v.Details
	}).(AzureResourceErrorInfoResponseArrayOutput)
}

// The error message.
func (o AzureResourceErrorInfoResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureResourceErrorInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

type AzureResourceErrorInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureResourceErrorInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureResourceErrorInfoResponse)(nil)).Elem()
}

func (o AzureResourceErrorInfoResponseArrayOutput) ToAzureResourceErrorInfoResponseArrayOutput() AzureResourceErrorInfoResponseArrayOutput {
	return o
}

func (o AzureResourceErrorInfoResponseArrayOutput) ToAzureResourceErrorInfoResponseArrayOutputWithContext(ctx context.Context) AzureResourceErrorInfoResponseArrayOutput {
	return o
}

func (o AzureResourceErrorInfoResponseArrayOutput) Index(i pulumi.IntInput) AzureResourceErrorInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureResourceErrorInfoResponse {
		return vs[0].([]AzureResourceErrorInfoResponse)[vs[1].(int)]
	}).(AzureResourceErrorInfoResponseOutput)
}

// The B2B partner content.
type B2BPartnerContent struct {
	// The list of partner business identities.
	BusinessIdentities []BusinessIdentity `pulumi:"businessIdentities"`
}

// B2BPartnerContentInput is an input type that accepts B2BPartnerContentArgs and B2BPartnerContentOutput values.
// You can construct a concrete instance of `B2BPartnerContentInput` via:
//
//          B2BPartnerContentArgs{...}
type B2BPartnerContentInput interface {
	pulumi.Input

	ToB2BPartnerContentOutput() B2BPartnerContentOutput
	ToB2BPartnerContentOutputWithContext(context.Context) B2BPartnerContentOutput
}

// The B2B partner content.
type B2BPartnerContentArgs struct {
	// The list of partner business identities.
	BusinessIdentities BusinessIdentityArrayInput `pulumi:"businessIdentities"`
}

func (B2BPartnerContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*B2BPartnerContent)(nil)).Elem()
}

func (i B2BPartnerContentArgs) ToB2BPartnerContentOutput() B2BPartnerContentOutput {
	return i.ToB2BPartnerContentOutputWithContext(context.Background())
}

func (i B2BPartnerContentArgs) ToB2BPartnerContentOutputWithContext(ctx context.Context) B2BPartnerContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(B2BPartnerContentOutput)
}

func (i B2BPartnerContentArgs) ToB2BPartnerContentPtrOutput() B2BPartnerContentPtrOutput {
	return i.ToB2BPartnerContentPtrOutputWithContext(context.Background())
}

func (i B2BPartnerContentArgs) ToB2BPartnerContentPtrOutputWithContext(ctx context.Context) B2BPartnerContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(B2BPartnerContentOutput).ToB2BPartnerContentPtrOutputWithContext(ctx)
}

// B2BPartnerContentPtrInput is an input type that accepts B2BPartnerContentArgs, B2BPartnerContentPtr and B2BPartnerContentPtrOutput values.
// You can construct a concrete instance of `B2BPartnerContentPtrInput` via:
//
//          B2BPartnerContentArgs{...}
//
//  or:
//
//          nil
type B2BPartnerContentPtrInput interface {
	pulumi.Input

	ToB2BPartnerContentPtrOutput() B2BPartnerContentPtrOutput
	ToB2BPartnerContentPtrOutputWithContext(context.Context) B2BPartnerContentPtrOutput
}

type b2bpartnerContentPtrType B2BPartnerContentArgs

func B2BPartnerContentPtr(v *B2BPartnerContentArgs) B2BPartnerContentPtrInput {
	return (*b2bpartnerContentPtrType)(v)
}

func (*b2bpartnerContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**B2BPartnerContent)(nil)).Elem()
}

func (i *b2bpartnerContentPtrType) ToB2BPartnerContentPtrOutput() B2BPartnerContentPtrOutput {
	return i.ToB2BPartnerContentPtrOutputWithContext(context.Background())
}

func (i *b2bpartnerContentPtrType) ToB2BPartnerContentPtrOutputWithContext(ctx context.Context) B2BPartnerContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(B2BPartnerContentPtrOutput)
}

// The B2B partner content.
type B2BPartnerContentOutput struct{ *pulumi.OutputState }

func (B2BPartnerContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*B2BPartnerContent)(nil)).Elem()
}

func (o B2BPartnerContentOutput) ToB2BPartnerContentOutput() B2BPartnerContentOutput {
	return o
}

func (o B2BPartnerContentOutput) ToB2BPartnerContentOutputWithContext(ctx context.Context) B2BPartnerContentOutput {
	return o
}

func (o B2BPartnerContentOutput) ToB2BPartnerContentPtrOutput() B2BPartnerContentPtrOutput {
	return o.ToB2BPartnerContentPtrOutputWithContext(context.Background())
}

func (o B2BPartnerContentOutput) ToB2BPartnerContentPtrOutputWithContext(ctx context.Context) B2BPartnerContentPtrOutput {
	return o.ApplyT(func(v B2BPartnerContent) *B2BPartnerContent {
		return &v
	}).(B2BPartnerContentPtrOutput)
}

// The list of partner business identities.
func (o B2BPartnerContentOutput) BusinessIdentities() BusinessIdentityArrayOutput {
	return o.ApplyT(func(v B2BPartnerContent) []BusinessIdentity { return v.BusinessIdentities }).(BusinessIdentityArrayOutput)
}

type B2BPartnerContentPtrOutput struct{ *pulumi.OutputState }

func (B2BPartnerContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**B2BPartnerContent)(nil)).Elem()
}

func (o B2BPartnerContentPtrOutput) ToB2BPartnerContentPtrOutput() B2BPartnerContentPtrOutput {
	return o
}

func (o B2BPartnerContentPtrOutput) ToB2BPartnerContentPtrOutputWithContext(ctx context.Context) B2BPartnerContentPtrOutput {
	return o
}

func (o B2BPartnerContentPtrOutput) Elem() B2BPartnerContentOutput {
	return o.ApplyT(func(v *B2BPartnerContent) B2BPartnerContent { return *v }).(B2BPartnerContentOutput)
}

// The list of partner business identities.
func (o B2BPartnerContentPtrOutput) BusinessIdentities() BusinessIdentityArrayOutput {
	return o.ApplyT(func(v *B2BPartnerContent) []BusinessIdentity {
		if v == nil {
			return nil
		}
		return v.BusinessIdentities
	}).(BusinessIdentityArrayOutput)
}

// The B2B partner content.
type B2BPartnerContentResponse struct {
	// The list of partner business identities.
	BusinessIdentities []BusinessIdentityResponse `pulumi:"businessIdentities"`
}

// B2BPartnerContentResponseInput is an input type that accepts B2BPartnerContentResponseArgs and B2BPartnerContentResponseOutput values.
// You can construct a concrete instance of `B2BPartnerContentResponseInput` via:
//
//          B2BPartnerContentResponseArgs{...}
type B2BPartnerContentResponseInput interface {
	pulumi.Input

	ToB2BPartnerContentResponseOutput() B2BPartnerContentResponseOutput
	ToB2BPartnerContentResponseOutputWithContext(context.Context) B2BPartnerContentResponseOutput
}

// The B2B partner content.
type B2BPartnerContentResponseArgs struct {
	// The list of partner business identities.
	BusinessIdentities BusinessIdentityResponseArrayInput `pulumi:"businessIdentities"`
}

func (B2BPartnerContentResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*B2BPartnerContentResponse)(nil)).Elem()
}

func (i B2BPartnerContentResponseArgs) ToB2BPartnerContentResponseOutput() B2BPartnerContentResponseOutput {
	return i.ToB2BPartnerContentResponseOutputWithContext(context.Background())
}

func (i B2BPartnerContentResponseArgs) ToB2BPartnerContentResponseOutputWithContext(ctx context.Context) B2BPartnerContentResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(B2BPartnerContentResponseOutput)
}

func (i B2BPartnerContentResponseArgs) ToB2BPartnerContentResponsePtrOutput() B2BPartnerContentResponsePtrOutput {
	return i.ToB2BPartnerContentResponsePtrOutputWithContext(context.Background())
}

func (i B2BPartnerContentResponseArgs) ToB2BPartnerContentResponsePtrOutputWithContext(ctx context.Context) B2BPartnerContentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(B2BPartnerContentResponseOutput).ToB2BPartnerContentResponsePtrOutputWithContext(ctx)
}

// B2BPartnerContentResponsePtrInput is an input type that accepts B2BPartnerContentResponseArgs, B2BPartnerContentResponsePtr and B2BPartnerContentResponsePtrOutput values.
// You can construct a concrete instance of `B2BPartnerContentResponsePtrInput` via:
//
//          B2BPartnerContentResponseArgs{...}
//
//  or:
//
//          nil
type B2BPartnerContentResponsePtrInput interface {
	pulumi.Input

	ToB2BPartnerContentResponsePtrOutput() B2BPartnerContentResponsePtrOutput
	ToB2BPartnerContentResponsePtrOutputWithContext(context.Context) B2BPartnerContentResponsePtrOutput
}

type b2bpartnerContentResponsePtrType B2BPartnerContentResponseArgs

func B2BPartnerContentResponsePtr(v *B2BPartnerContentResponseArgs) B2BPartnerContentResponsePtrInput {
	return (*b2bpartnerContentResponsePtrType)(v)
}

func (*b2bpartnerContentResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**B2BPartnerContentResponse)(nil)).Elem()
}

func (i *b2bpartnerContentResponsePtrType) ToB2BPartnerContentResponsePtrOutput() B2BPartnerContentResponsePtrOutput {
	return i.ToB2BPartnerContentResponsePtrOutputWithContext(context.Background())
}

func (i *b2bpartnerContentResponsePtrType) ToB2BPartnerContentResponsePtrOutputWithContext(ctx context.Context) B2BPartnerContentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(B2BPartnerContentResponsePtrOutput)
}

// The B2B partner content.
type B2BPartnerContentResponseOutput struct{ *pulumi.OutputState }

func (B2BPartnerContentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*B2BPartnerContentResponse)(nil)).Elem()
}

func (o B2BPartnerContentResponseOutput) ToB2BPartnerContentResponseOutput() B2BPartnerContentResponseOutput {
	return o
}

func (o B2BPartnerContentResponseOutput) ToB2BPartnerContentResponseOutputWithContext(ctx context.Context) B2BPartnerContentResponseOutput {
	return o
}

func (o B2BPartnerContentResponseOutput) ToB2BPartnerContentResponsePtrOutput() B2BPartnerContentResponsePtrOutput {
	return o.ToB2BPartnerContentResponsePtrOutputWithContext(context.Background())
}

func (o B2BPartnerContentResponseOutput) ToB2BPartnerContentResponsePtrOutputWithContext(ctx context.Context) B2BPartnerContentResponsePtrOutput {
	return o.ApplyT(func(v B2BPartnerContentResponse) *B2BPartnerContentResponse {
		return &v
	}).(B2BPartnerContentResponsePtrOutput)
}

// The list of partner business identities.
func (o B2BPartnerContentResponseOutput) BusinessIdentities() BusinessIdentityResponseArrayOutput {
	return o.ApplyT(func(v B2BPartnerContentResponse) []BusinessIdentityResponse { return v.BusinessIdentities }).(BusinessIdentityResponseArrayOutput)
}

type B2BPartnerContentResponsePtrOutput struct{ *pulumi.OutputState }

func (B2BPartnerContentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**B2BPartnerContentResponse)(nil)).Elem()
}

func (o B2BPartnerContentResponsePtrOutput) ToB2BPartnerContentResponsePtrOutput() B2BPartnerContentResponsePtrOutput {
	return o
}

func (o B2BPartnerContentResponsePtrOutput) ToB2BPartnerContentResponsePtrOutputWithContext(ctx context.Context) B2BPartnerContentResponsePtrOutput {
	return o
}

func (o B2BPartnerContentResponsePtrOutput) Elem() B2BPartnerContentResponseOutput {
	return o.ApplyT(func(v *B2BPartnerContentResponse) B2BPartnerContentResponse { return *v }).(B2BPartnerContentResponseOutput)
}

// The list of partner business identities.
func (o B2BPartnerContentResponsePtrOutput) BusinessIdentities() BusinessIdentityResponseArrayOutput {
	return o.ApplyT(func(v *B2BPartnerContentResponse) []BusinessIdentityResponse {
		if v == nil {
			return nil
		}
		return v.BusinessIdentities
	}).(BusinessIdentityResponseArrayOutput)
}

// The batch configuration properties definition.
type BatchConfigurationProperties struct {
	// The name of the batch group.
	BatchGroupName string `pulumi:"batchGroupName"`
	// The artifact changed time.
	ChangedTime *string `pulumi:"changedTime"`
	// The artifact creation time.
	CreatedTime *string     `pulumi:"createdTime"`
	Metadata    interface{} `pulumi:"metadata"`
	// The batch release criteria.
	ReleaseCriteria BatchReleaseCriteria `pulumi:"releaseCriteria"`
}

// BatchConfigurationPropertiesInput is an input type that accepts BatchConfigurationPropertiesArgs and BatchConfigurationPropertiesOutput values.
// You can construct a concrete instance of `BatchConfigurationPropertiesInput` via:
//
//          BatchConfigurationPropertiesArgs{...}
type BatchConfigurationPropertiesInput interface {
	pulumi.Input

	ToBatchConfigurationPropertiesOutput() BatchConfigurationPropertiesOutput
	ToBatchConfigurationPropertiesOutputWithContext(context.Context) BatchConfigurationPropertiesOutput
}

// The batch configuration properties definition.
type BatchConfigurationPropertiesArgs struct {
	// The name of the batch group.
	BatchGroupName pulumi.StringInput `pulumi:"batchGroupName"`
	// The artifact changed time.
	ChangedTime pulumi.StringPtrInput `pulumi:"changedTime"`
	// The artifact creation time.
	CreatedTime pulumi.StringPtrInput `pulumi:"createdTime"`
	Metadata    pulumi.Input          `pulumi:"metadata"`
	// The batch release criteria.
	ReleaseCriteria BatchReleaseCriteriaInput `pulumi:"releaseCriteria"`
}

func (BatchConfigurationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchConfigurationProperties)(nil)).Elem()
}

func (i BatchConfigurationPropertiesArgs) ToBatchConfigurationPropertiesOutput() BatchConfigurationPropertiesOutput {
	return i.ToBatchConfigurationPropertiesOutputWithContext(context.Background())
}

func (i BatchConfigurationPropertiesArgs) ToBatchConfigurationPropertiesOutputWithContext(ctx context.Context) BatchConfigurationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchConfigurationPropertiesOutput)
}

func (i BatchConfigurationPropertiesArgs) ToBatchConfigurationPropertiesPtrOutput() BatchConfigurationPropertiesPtrOutput {
	return i.ToBatchConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i BatchConfigurationPropertiesArgs) ToBatchConfigurationPropertiesPtrOutputWithContext(ctx context.Context) BatchConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchConfigurationPropertiesOutput).ToBatchConfigurationPropertiesPtrOutputWithContext(ctx)
}

// BatchConfigurationPropertiesPtrInput is an input type that accepts BatchConfigurationPropertiesArgs, BatchConfigurationPropertiesPtr and BatchConfigurationPropertiesPtrOutput values.
// You can construct a concrete instance of `BatchConfigurationPropertiesPtrInput` via:
//
//          BatchConfigurationPropertiesArgs{...}
//
//  or:
//
//          nil
type BatchConfigurationPropertiesPtrInput interface {
	pulumi.Input

	ToBatchConfigurationPropertiesPtrOutput() BatchConfigurationPropertiesPtrOutput
	ToBatchConfigurationPropertiesPtrOutputWithContext(context.Context) BatchConfigurationPropertiesPtrOutput
}

type batchConfigurationPropertiesPtrType BatchConfigurationPropertiesArgs

func BatchConfigurationPropertiesPtr(v *BatchConfigurationPropertiesArgs) BatchConfigurationPropertiesPtrInput {
	return (*batchConfigurationPropertiesPtrType)(v)
}

func (*batchConfigurationPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchConfigurationProperties)(nil)).Elem()
}

func (i *batchConfigurationPropertiesPtrType) ToBatchConfigurationPropertiesPtrOutput() BatchConfigurationPropertiesPtrOutput {
	return i.ToBatchConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (i *batchConfigurationPropertiesPtrType) ToBatchConfigurationPropertiesPtrOutputWithContext(ctx context.Context) BatchConfigurationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchConfigurationPropertiesPtrOutput)
}

// The batch configuration properties definition.
type BatchConfigurationPropertiesOutput struct{ *pulumi.OutputState }

func (BatchConfigurationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchConfigurationProperties)(nil)).Elem()
}

func (o BatchConfigurationPropertiesOutput) ToBatchConfigurationPropertiesOutput() BatchConfigurationPropertiesOutput {
	return o
}

func (o BatchConfigurationPropertiesOutput) ToBatchConfigurationPropertiesOutputWithContext(ctx context.Context) BatchConfigurationPropertiesOutput {
	return o
}

func (o BatchConfigurationPropertiesOutput) ToBatchConfigurationPropertiesPtrOutput() BatchConfigurationPropertiesPtrOutput {
	return o.ToBatchConfigurationPropertiesPtrOutputWithContext(context.Background())
}

func (o BatchConfigurationPropertiesOutput) ToBatchConfigurationPropertiesPtrOutputWithContext(ctx context.Context) BatchConfigurationPropertiesPtrOutput {
	return o.ApplyT(func(v BatchConfigurationProperties) *BatchConfigurationProperties {
		return &v
	}).(BatchConfigurationPropertiesPtrOutput)
}

// The name of the batch group.
func (o BatchConfigurationPropertiesOutput) BatchGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v BatchConfigurationProperties) string { return v.BatchGroupName }).(pulumi.StringOutput)
}

// The artifact changed time.
func (o BatchConfigurationPropertiesOutput) ChangedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchConfigurationProperties) *string { return v.ChangedTime }).(pulumi.StringPtrOutput)
}

// The artifact creation time.
func (o BatchConfigurationPropertiesOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchConfigurationProperties) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

func (o BatchConfigurationPropertiesOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v BatchConfigurationProperties) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

// The batch release criteria.
func (o BatchConfigurationPropertiesOutput) ReleaseCriteria() BatchReleaseCriteriaOutput {
	return o.ApplyT(func(v BatchConfigurationProperties) BatchReleaseCriteria { return v.ReleaseCriteria }).(BatchReleaseCriteriaOutput)
}

type BatchConfigurationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (BatchConfigurationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchConfigurationProperties)(nil)).Elem()
}

func (o BatchConfigurationPropertiesPtrOutput) ToBatchConfigurationPropertiesPtrOutput() BatchConfigurationPropertiesPtrOutput {
	return o
}

func (o BatchConfigurationPropertiesPtrOutput) ToBatchConfigurationPropertiesPtrOutputWithContext(ctx context.Context) BatchConfigurationPropertiesPtrOutput {
	return o
}

func (o BatchConfigurationPropertiesPtrOutput) Elem() BatchConfigurationPropertiesOutput {
	return o.ApplyT(func(v *BatchConfigurationProperties) BatchConfigurationProperties { return *v }).(BatchConfigurationPropertiesOutput)
}

// The name of the batch group.
func (o BatchConfigurationPropertiesPtrOutput) BatchGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchConfigurationProperties) *string {
		if v == nil {
			return nil
		}
		return &v.BatchGroupName
	}).(pulumi.StringPtrOutput)
}

// The artifact changed time.
func (o BatchConfigurationPropertiesPtrOutput) ChangedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchConfigurationProperties) *string {
		if v == nil {
			return nil
		}
		return v.ChangedTime
	}).(pulumi.StringPtrOutput)
}

// The artifact creation time.
func (o BatchConfigurationPropertiesPtrOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchConfigurationProperties) *string {
		if v == nil {
			return nil
		}
		return v.CreatedTime
	}).(pulumi.StringPtrOutput)
}

func (o BatchConfigurationPropertiesPtrOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v *BatchConfigurationProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.AnyOutput)
}

// The batch release criteria.
func (o BatchConfigurationPropertiesPtrOutput) ReleaseCriteria() BatchReleaseCriteriaPtrOutput {
	return o.ApplyT(func(v *BatchConfigurationProperties) *BatchReleaseCriteria {
		if v == nil {
			return nil
		}
		return &v.ReleaseCriteria
	}).(BatchReleaseCriteriaPtrOutput)
}

// The batch configuration properties definition.
type BatchConfigurationPropertiesResponse struct {
	// The name of the batch group.
	BatchGroupName string `pulumi:"batchGroupName"`
	// The artifact changed time.
	ChangedTime *string `pulumi:"changedTime"`
	// The artifact creation time.
	CreatedTime *string     `pulumi:"createdTime"`
	Metadata    interface{} `pulumi:"metadata"`
	// The batch release criteria.
	ReleaseCriteria BatchReleaseCriteriaResponse `pulumi:"releaseCriteria"`
}

// BatchConfigurationPropertiesResponseInput is an input type that accepts BatchConfigurationPropertiesResponseArgs and BatchConfigurationPropertiesResponseOutput values.
// You can construct a concrete instance of `BatchConfigurationPropertiesResponseInput` via:
//
//          BatchConfigurationPropertiesResponseArgs{...}
type BatchConfigurationPropertiesResponseInput interface {
	pulumi.Input

	ToBatchConfigurationPropertiesResponseOutput() BatchConfigurationPropertiesResponseOutput
	ToBatchConfigurationPropertiesResponseOutputWithContext(context.Context) BatchConfigurationPropertiesResponseOutput
}

// The batch configuration properties definition.
type BatchConfigurationPropertiesResponseArgs struct {
	// The name of the batch group.
	BatchGroupName pulumi.StringInput `pulumi:"batchGroupName"`
	// The artifact changed time.
	ChangedTime pulumi.StringPtrInput `pulumi:"changedTime"`
	// The artifact creation time.
	CreatedTime pulumi.StringPtrInput `pulumi:"createdTime"`
	Metadata    pulumi.Input          `pulumi:"metadata"`
	// The batch release criteria.
	ReleaseCriteria BatchReleaseCriteriaResponseInput `pulumi:"releaseCriteria"`
}

func (BatchConfigurationPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchConfigurationPropertiesResponse)(nil)).Elem()
}

func (i BatchConfigurationPropertiesResponseArgs) ToBatchConfigurationPropertiesResponseOutput() BatchConfigurationPropertiesResponseOutput {
	return i.ToBatchConfigurationPropertiesResponseOutputWithContext(context.Background())
}

func (i BatchConfigurationPropertiesResponseArgs) ToBatchConfigurationPropertiesResponseOutputWithContext(ctx context.Context) BatchConfigurationPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchConfigurationPropertiesResponseOutput)
}

func (i BatchConfigurationPropertiesResponseArgs) ToBatchConfigurationPropertiesResponsePtrOutput() BatchConfigurationPropertiesResponsePtrOutput {
	return i.ToBatchConfigurationPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i BatchConfigurationPropertiesResponseArgs) ToBatchConfigurationPropertiesResponsePtrOutputWithContext(ctx context.Context) BatchConfigurationPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchConfigurationPropertiesResponseOutput).ToBatchConfigurationPropertiesResponsePtrOutputWithContext(ctx)
}

// BatchConfigurationPropertiesResponsePtrInput is an input type that accepts BatchConfigurationPropertiesResponseArgs, BatchConfigurationPropertiesResponsePtr and BatchConfigurationPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `BatchConfigurationPropertiesResponsePtrInput` via:
//
//          BatchConfigurationPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type BatchConfigurationPropertiesResponsePtrInput interface {
	pulumi.Input

	ToBatchConfigurationPropertiesResponsePtrOutput() BatchConfigurationPropertiesResponsePtrOutput
	ToBatchConfigurationPropertiesResponsePtrOutputWithContext(context.Context) BatchConfigurationPropertiesResponsePtrOutput
}

type batchConfigurationPropertiesResponsePtrType BatchConfigurationPropertiesResponseArgs

func BatchConfigurationPropertiesResponsePtr(v *BatchConfigurationPropertiesResponseArgs) BatchConfigurationPropertiesResponsePtrInput {
	return (*batchConfigurationPropertiesResponsePtrType)(v)
}

func (*batchConfigurationPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchConfigurationPropertiesResponse)(nil)).Elem()
}

func (i *batchConfigurationPropertiesResponsePtrType) ToBatchConfigurationPropertiesResponsePtrOutput() BatchConfigurationPropertiesResponsePtrOutput {
	return i.ToBatchConfigurationPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *batchConfigurationPropertiesResponsePtrType) ToBatchConfigurationPropertiesResponsePtrOutputWithContext(ctx context.Context) BatchConfigurationPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchConfigurationPropertiesResponsePtrOutput)
}

// The batch configuration properties definition.
type BatchConfigurationPropertiesResponseOutput struct{ *pulumi.OutputState }

func (BatchConfigurationPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchConfigurationPropertiesResponse)(nil)).Elem()
}

func (o BatchConfigurationPropertiesResponseOutput) ToBatchConfigurationPropertiesResponseOutput() BatchConfigurationPropertiesResponseOutput {
	return o
}

func (o BatchConfigurationPropertiesResponseOutput) ToBatchConfigurationPropertiesResponseOutputWithContext(ctx context.Context) BatchConfigurationPropertiesResponseOutput {
	return o
}

func (o BatchConfigurationPropertiesResponseOutput) ToBatchConfigurationPropertiesResponsePtrOutput() BatchConfigurationPropertiesResponsePtrOutput {
	return o.ToBatchConfigurationPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o BatchConfigurationPropertiesResponseOutput) ToBatchConfigurationPropertiesResponsePtrOutputWithContext(ctx context.Context) BatchConfigurationPropertiesResponsePtrOutput {
	return o.ApplyT(func(v BatchConfigurationPropertiesResponse) *BatchConfigurationPropertiesResponse {
		return &v
	}).(BatchConfigurationPropertiesResponsePtrOutput)
}

// The name of the batch group.
func (o BatchConfigurationPropertiesResponseOutput) BatchGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v BatchConfigurationPropertiesResponse) string { return v.BatchGroupName }).(pulumi.StringOutput)
}

// The artifact changed time.
func (o BatchConfigurationPropertiesResponseOutput) ChangedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchConfigurationPropertiesResponse) *string { return v.ChangedTime }).(pulumi.StringPtrOutput)
}

// The artifact creation time.
func (o BatchConfigurationPropertiesResponseOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchConfigurationPropertiesResponse) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

func (o BatchConfigurationPropertiesResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v BatchConfigurationPropertiesResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

// The batch release criteria.
func (o BatchConfigurationPropertiesResponseOutput) ReleaseCriteria() BatchReleaseCriteriaResponseOutput {
	return o.ApplyT(func(v BatchConfigurationPropertiesResponse) BatchReleaseCriteriaResponse { return v.ReleaseCriteria }).(BatchReleaseCriteriaResponseOutput)
}

type BatchConfigurationPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (BatchConfigurationPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchConfigurationPropertiesResponse)(nil)).Elem()
}

func (o BatchConfigurationPropertiesResponsePtrOutput) ToBatchConfigurationPropertiesResponsePtrOutput() BatchConfigurationPropertiesResponsePtrOutput {
	return o
}

func (o BatchConfigurationPropertiesResponsePtrOutput) ToBatchConfigurationPropertiesResponsePtrOutputWithContext(ctx context.Context) BatchConfigurationPropertiesResponsePtrOutput {
	return o
}

func (o BatchConfigurationPropertiesResponsePtrOutput) Elem() BatchConfigurationPropertiesResponseOutput {
	return o.ApplyT(func(v *BatchConfigurationPropertiesResponse) BatchConfigurationPropertiesResponse { return *v }).(BatchConfigurationPropertiesResponseOutput)
}

// The name of the batch group.
func (o BatchConfigurationPropertiesResponsePtrOutput) BatchGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchConfigurationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BatchGroupName
	}).(pulumi.StringPtrOutput)
}

// The artifact changed time.
func (o BatchConfigurationPropertiesResponsePtrOutput) ChangedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchConfigurationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ChangedTime
	}).(pulumi.StringPtrOutput)
}

// The artifact creation time.
func (o BatchConfigurationPropertiesResponsePtrOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchConfigurationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedTime
	}).(pulumi.StringPtrOutput)
}

func (o BatchConfigurationPropertiesResponsePtrOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v *BatchConfigurationPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.AnyOutput)
}

// The batch release criteria.
func (o BatchConfigurationPropertiesResponsePtrOutput) ReleaseCriteria() BatchReleaseCriteriaResponsePtrOutput {
	return o.ApplyT(func(v *BatchConfigurationPropertiesResponse) *BatchReleaseCriteriaResponse {
		if v == nil {
			return nil
		}
		return &v.ReleaseCriteria
	}).(BatchReleaseCriteriaResponsePtrOutput)
}

// The batch release criteria.
type BatchReleaseCriteria struct {
	// The batch size in bytes.
	BatchSize *int `pulumi:"batchSize"`
	// The message count.
	MessageCount *int `pulumi:"messageCount"`
	// The recurrence.
	Recurrence *WorkflowTriggerRecurrence `pulumi:"recurrence"`
}

// BatchReleaseCriteriaInput is an input type that accepts BatchReleaseCriteriaArgs and BatchReleaseCriteriaOutput values.
// You can construct a concrete instance of `BatchReleaseCriteriaInput` via:
//
//          BatchReleaseCriteriaArgs{...}
type BatchReleaseCriteriaInput interface {
	pulumi.Input

	ToBatchReleaseCriteriaOutput() BatchReleaseCriteriaOutput
	ToBatchReleaseCriteriaOutputWithContext(context.Context) BatchReleaseCriteriaOutput
}

// The batch release criteria.
type BatchReleaseCriteriaArgs struct {
	// The batch size in bytes.
	BatchSize pulumi.IntPtrInput `pulumi:"batchSize"`
	// The message count.
	MessageCount pulumi.IntPtrInput `pulumi:"messageCount"`
	// The recurrence.
	Recurrence WorkflowTriggerRecurrencePtrInput `pulumi:"recurrence"`
}

func (BatchReleaseCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchReleaseCriteria)(nil)).Elem()
}

func (i BatchReleaseCriteriaArgs) ToBatchReleaseCriteriaOutput() BatchReleaseCriteriaOutput {
	return i.ToBatchReleaseCriteriaOutputWithContext(context.Background())
}

func (i BatchReleaseCriteriaArgs) ToBatchReleaseCriteriaOutputWithContext(ctx context.Context) BatchReleaseCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchReleaseCriteriaOutput)
}

func (i BatchReleaseCriteriaArgs) ToBatchReleaseCriteriaPtrOutput() BatchReleaseCriteriaPtrOutput {
	return i.ToBatchReleaseCriteriaPtrOutputWithContext(context.Background())
}

func (i BatchReleaseCriteriaArgs) ToBatchReleaseCriteriaPtrOutputWithContext(ctx context.Context) BatchReleaseCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchReleaseCriteriaOutput).ToBatchReleaseCriteriaPtrOutputWithContext(ctx)
}

// BatchReleaseCriteriaPtrInput is an input type that accepts BatchReleaseCriteriaArgs, BatchReleaseCriteriaPtr and BatchReleaseCriteriaPtrOutput values.
// You can construct a concrete instance of `BatchReleaseCriteriaPtrInput` via:
//
//          BatchReleaseCriteriaArgs{...}
//
//  or:
//
//          nil
type BatchReleaseCriteriaPtrInput interface {
	pulumi.Input

	ToBatchReleaseCriteriaPtrOutput() BatchReleaseCriteriaPtrOutput
	ToBatchReleaseCriteriaPtrOutputWithContext(context.Context) BatchReleaseCriteriaPtrOutput
}

type batchReleaseCriteriaPtrType BatchReleaseCriteriaArgs

func BatchReleaseCriteriaPtr(v *BatchReleaseCriteriaArgs) BatchReleaseCriteriaPtrInput {
	return (*batchReleaseCriteriaPtrType)(v)
}

func (*batchReleaseCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchReleaseCriteria)(nil)).Elem()
}

func (i *batchReleaseCriteriaPtrType) ToBatchReleaseCriteriaPtrOutput() BatchReleaseCriteriaPtrOutput {
	return i.ToBatchReleaseCriteriaPtrOutputWithContext(context.Background())
}

func (i *batchReleaseCriteriaPtrType) ToBatchReleaseCriteriaPtrOutputWithContext(ctx context.Context) BatchReleaseCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchReleaseCriteriaPtrOutput)
}

// The batch release criteria.
type BatchReleaseCriteriaOutput struct{ *pulumi.OutputState }

func (BatchReleaseCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchReleaseCriteria)(nil)).Elem()
}

func (o BatchReleaseCriteriaOutput) ToBatchReleaseCriteriaOutput() BatchReleaseCriteriaOutput {
	return o
}

func (o BatchReleaseCriteriaOutput) ToBatchReleaseCriteriaOutputWithContext(ctx context.Context) BatchReleaseCriteriaOutput {
	return o
}

func (o BatchReleaseCriteriaOutput) ToBatchReleaseCriteriaPtrOutput() BatchReleaseCriteriaPtrOutput {
	return o.ToBatchReleaseCriteriaPtrOutputWithContext(context.Background())
}

func (o BatchReleaseCriteriaOutput) ToBatchReleaseCriteriaPtrOutputWithContext(ctx context.Context) BatchReleaseCriteriaPtrOutput {
	return o.ApplyT(func(v BatchReleaseCriteria) *BatchReleaseCriteria {
		return &v
	}).(BatchReleaseCriteriaPtrOutput)
}

// The batch size in bytes.
func (o BatchReleaseCriteriaOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchReleaseCriteria) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

// The message count.
func (o BatchReleaseCriteriaOutput) MessageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchReleaseCriteria) *int { return v.MessageCount }).(pulumi.IntPtrOutput)
}

// The recurrence.
func (o BatchReleaseCriteriaOutput) Recurrence() WorkflowTriggerRecurrencePtrOutput {
	return o.ApplyT(func(v BatchReleaseCriteria) *WorkflowTriggerRecurrence { return v.Recurrence }).(WorkflowTriggerRecurrencePtrOutput)
}

type BatchReleaseCriteriaPtrOutput struct{ *pulumi.OutputState }

func (BatchReleaseCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchReleaseCriteria)(nil)).Elem()
}

func (o BatchReleaseCriteriaPtrOutput) ToBatchReleaseCriteriaPtrOutput() BatchReleaseCriteriaPtrOutput {
	return o
}

func (o BatchReleaseCriteriaPtrOutput) ToBatchReleaseCriteriaPtrOutputWithContext(ctx context.Context) BatchReleaseCriteriaPtrOutput {
	return o
}

func (o BatchReleaseCriteriaPtrOutput) Elem() BatchReleaseCriteriaOutput {
	return o.ApplyT(func(v *BatchReleaseCriteria) BatchReleaseCriteria { return *v }).(BatchReleaseCriteriaOutput)
}

// The batch size in bytes.
func (o BatchReleaseCriteriaPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchReleaseCriteria) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// The message count.
func (o BatchReleaseCriteriaPtrOutput) MessageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchReleaseCriteria) *int {
		if v == nil {
			return nil
		}
		return v.MessageCount
	}).(pulumi.IntPtrOutput)
}

// The recurrence.
func (o BatchReleaseCriteriaPtrOutput) Recurrence() WorkflowTriggerRecurrencePtrOutput {
	return o.ApplyT(func(v *BatchReleaseCriteria) *WorkflowTriggerRecurrence {
		if v == nil {
			return nil
		}
		return v.Recurrence
	}).(WorkflowTriggerRecurrencePtrOutput)
}

// The batch release criteria.
type BatchReleaseCriteriaResponse struct {
	// The batch size in bytes.
	BatchSize *int `pulumi:"batchSize"`
	// The message count.
	MessageCount *int `pulumi:"messageCount"`
	// The recurrence.
	Recurrence *WorkflowTriggerRecurrenceResponse `pulumi:"recurrence"`
}

// BatchReleaseCriteriaResponseInput is an input type that accepts BatchReleaseCriteriaResponseArgs and BatchReleaseCriteriaResponseOutput values.
// You can construct a concrete instance of `BatchReleaseCriteriaResponseInput` via:
//
//          BatchReleaseCriteriaResponseArgs{...}
type BatchReleaseCriteriaResponseInput interface {
	pulumi.Input

	ToBatchReleaseCriteriaResponseOutput() BatchReleaseCriteriaResponseOutput
	ToBatchReleaseCriteriaResponseOutputWithContext(context.Context) BatchReleaseCriteriaResponseOutput
}

// The batch release criteria.
type BatchReleaseCriteriaResponseArgs struct {
	// The batch size in bytes.
	BatchSize pulumi.IntPtrInput `pulumi:"batchSize"`
	// The message count.
	MessageCount pulumi.IntPtrInput `pulumi:"messageCount"`
	// The recurrence.
	Recurrence WorkflowTriggerRecurrenceResponsePtrInput `pulumi:"recurrence"`
}

func (BatchReleaseCriteriaResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchReleaseCriteriaResponse)(nil)).Elem()
}

func (i BatchReleaseCriteriaResponseArgs) ToBatchReleaseCriteriaResponseOutput() BatchReleaseCriteriaResponseOutput {
	return i.ToBatchReleaseCriteriaResponseOutputWithContext(context.Background())
}

func (i BatchReleaseCriteriaResponseArgs) ToBatchReleaseCriteriaResponseOutputWithContext(ctx context.Context) BatchReleaseCriteriaResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchReleaseCriteriaResponseOutput)
}

func (i BatchReleaseCriteriaResponseArgs) ToBatchReleaseCriteriaResponsePtrOutput() BatchReleaseCriteriaResponsePtrOutput {
	return i.ToBatchReleaseCriteriaResponsePtrOutputWithContext(context.Background())
}

func (i BatchReleaseCriteriaResponseArgs) ToBatchReleaseCriteriaResponsePtrOutputWithContext(ctx context.Context) BatchReleaseCriteriaResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchReleaseCriteriaResponseOutput).ToBatchReleaseCriteriaResponsePtrOutputWithContext(ctx)
}

// BatchReleaseCriteriaResponsePtrInput is an input type that accepts BatchReleaseCriteriaResponseArgs, BatchReleaseCriteriaResponsePtr and BatchReleaseCriteriaResponsePtrOutput values.
// You can construct a concrete instance of `BatchReleaseCriteriaResponsePtrInput` via:
//
//          BatchReleaseCriteriaResponseArgs{...}
//
//  or:
//
//          nil
type BatchReleaseCriteriaResponsePtrInput interface {
	pulumi.Input

	ToBatchReleaseCriteriaResponsePtrOutput() BatchReleaseCriteriaResponsePtrOutput
	ToBatchReleaseCriteriaResponsePtrOutputWithContext(context.Context) BatchReleaseCriteriaResponsePtrOutput
}

type batchReleaseCriteriaResponsePtrType BatchReleaseCriteriaResponseArgs

func BatchReleaseCriteriaResponsePtr(v *BatchReleaseCriteriaResponseArgs) BatchReleaseCriteriaResponsePtrInput {
	return (*batchReleaseCriteriaResponsePtrType)(v)
}

func (*batchReleaseCriteriaResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchReleaseCriteriaResponse)(nil)).Elem()
}

func (i *batchReleaseCriteriaResponsePtrType) ToBatchReleaseCriteriaResponsePtrOutput() BatchReleaseCriteriaResponsePtrOutput {
	return i.ToBatchReleaseCriteriaResponsePtrOutputWithContext(context.Background())
}

func (i *batchReleaseCriteriaResponsePtrType) ToBatchReleaseCriteriaResponsePtrOutputWithContext(ctx context.Context) BatchReleaseCriteriaResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchReleaseCriteriaResponsePtrOutput)
}

// The batch release criteria.
type BatchReleaseCriteriaResponseOutput struct{ *pulumi.OutputState }

func (BatchReleaseCriteriaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchReleaseCriteriaResponse)(nil)).Elem()
}

func (o BatchReleaseCriteriaResponseOutput) ToBatchReleaseCriteriaResponseOutput() BatchReleaseCriteriaResponseOutput {
	return o
}

func (o BatchReleaseCriteriaResponseOutput) ToBatchReleaseCriteriaResponseOutputWithContext(ctx context.Context) BatchReleaseCriteriaResponseOutput {
	return o
}

func (o BatchReleaseCriteriaResponseOutput) ToBatchReleaseCriteriaResponsePtrOutput() BatchReleaseCriteriaResponsePtrOutput {
	return o.ToBatchReleaseCriteriaResponsePtrOutputWithContext(context.Background())
}

func (o BatchReleaseCriteriaResponseOutput) ToBatchReleaseCriteriaResponsePtrOutputWithContext(ctx context.Context) BatchReleaseCriteriaResponsePtrOutput {
	return o.ApplyT(func(v BatchReleaseCriteriaResponse) *BatchReleaseCriteriaResponse {
		return &v
	}).(BatchReleaseCriteriaResponsePtrOutput)
}

// The batch size in bytes.
func (o BatchReleaseCriteriaResponseOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchReleaseCriteriaResponse) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

// The message count.
func (o BatchReleaseCriteriaResponseOutput) MessageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchReleaseCriteriaResponse) *int { return v.MessageCount }).(pulumi.IntPtrOutput)
}

// The recurrence.
func (o BatchReleaseCriteriaResponseOutput) Recurrence() WorkflowTriggerRecurrenceResponsePtrOutput {
	return o.ApplyT(func(v BatchReleaseCriteriaResponse) *WorkflowTriggerRecurrenceResponse { return v.Recurrence }).(WorkflowTriggerRecurrenceResponsePtrOutput)
}

type BatchReleaseCriteriaResponsePtrOutput struct{ *pulumi.OutputState }

func (BatchReleaseCriteriaResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchReleaseCriteriaResponse)(nil)).Elem()
}

func (o BatchReleaseCriteriaResponsePtrOutput) ToBatchReleaseCriteriaResponsePtrOutput() BatchReleaseCriteriaResponsePtrOutput {
	return o
}

func (o BatchReleaseCriteriaResponsePtrOutput) ToBatchReleaseCriteriaResponsePtrOutputWithContext(ctx context.Context) BatchReleaseCriteriaResponsePtrOutput {
	return o
}

func (o BatchReleaseCriteriaResponsePtrOutput) Elem() BatchReleaseCriteriaResponseOutput {
	return o.ApplyT(func(v *BatchReleaseCriteriaResponse) BatchReleaseCriteriaResponse { return *v }).(BatchReleaseCriteriaResponseOutput)
}

// The batch size in bytes.
func (o BatchReleaseCriteriaResponsePtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchReleaseCriteriaResponse) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// The message count.
func (o BatchReleaseCriteriaResponsePtrOutput) MessageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchReleaseCriteriaResponse) *int {
		if v == nil {
			return nil
		}
		return v.MessageCount
	}).(pulumi.IntPtrOutput)
}

// The recurrence.
func (o BatchReleaseCriteriaResponsePtrOutput) Recurrence() WorkflowTriggerRecurrenceResponsePtrOutput {
	return o.ApplyT(func(v *BatchReleaseCriteriaResponse) *WorkflowTriggerRecurrenceResponse {
		if v == nil {
			return nil
		}
		return v.Recurrence
	}).(WorkflowTriggerRecurrenceResponsePtrOutput)
}

// The integration account partner's business identity.
type BusinessIdentity struct {
	// The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
	Qualifier string `pulumi:"qualifier"`
	// The user defined business identity value.
	Value string `pulumi:"value"`
}

// BusinessIdentityInput is an input type that accepts BusinessIdentityArgs and BusinessIdentityOutput values.
// You can construct a concrete instance of `BusinessIdentityInput` via:
//
//          BusinessIdentityArgs{...}
type BusinessIdentityInput interface {
	pulumi.Input

	ToBusinessIdentityOutput() BusinessIdentityOutput
	ToBusinessIdentityOutputWithContext(context.Context) BusinessIdentityOutput
}

// The integration account partner's business identity.
type BusinessIdentityArgs struct {
	// The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
	Qualifier pulumi.StringInput `pulumi:"qualifier"`
	// The user defined business identity value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (BusinessIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessIdentity)(nil)).Elem()
}

func (i BusinessIdentityArgs) ToBusinessIdentityOutput() BusinessIdentityOutput {
	return i.ToBusinessIdentityOutputWithContext(context.Background())
}

func (i BusinessIdentityArgs) ToBusinessIdentityOutputWithContext(ctx context.Context) BusinessIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessIdentityOutput)
}

func (i BusinessIdentityArgs) ToBusinessIdentityPtrOutput() BusinessIdentityPtrOutput {
	return i.ToBusinessIdentityPtrOutputWithContext(context.Background())
}

func (i BusinessIdentityArgs) ToBusinessIdentityPtrOutputWithContext(ctx context.Context) BusinessIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessIdentityOutput).ToBusinessIdentityPtrOutputWithContext(ctx)
}

// BusinessIdentityPtrInput is an input type that accepts BusinessIdentityArgs, BusinessIdentityPtr and BusinessIdentityPtrOutput values.
// You can construct a concrete instance of `BusinessIdentityPtrInput` via:
//
//          BusinessIdentityArgs{...}
//
//  or:
//
//          nil
type BusinessIdentityPtrInput interface {
	pulumi.Input

	ToBusinessIdentityPtrOutput() BusinessIdentityPtrOutput
	ToBusinessIdentityPtrOutputWithContext(context.Context) BusinessIdentityPtrOutput
}

type businessIdentityPtrType BusinessIdentityArgs

func BusinessIdentityPtr(v *BusinessIdentityArgs) BusinessIdentityPtrInput {
	return (*businessIdentityPtrType)(v)
}

func (*businessIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessIdentity)(nil)).Elem()
}

func (i *businessIdentityPtrType) ToBusinessIdentityPtrOutput() BusinessIdentityPtrOutput {
	return i.ToBusinessIdentityPtrOutputWithContext(context.Background())
}

func (i *businessIdentityPtrType) ToBusinessIdentityPtrOutputWithContext(ctx context.Context) BusinessIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessIdentityPtrOutput)
}

// BusinessIdentityArrayInput is an input type that accepts BusinessIdentityArray and BusinessIdentityArrayOutput values.
// You can construct a concrete instance of `BusinessIdentityArrayInput` via:
//
//          BusinessIdentityArray{ BusinessIdentityArgs{...} }
type BusinessIdentityArrayInput interface {
	pulumi.Input

	ToBusinessIdentityArrayOutput() BusinessIdentityArrayOutput
	ToBusinessIdentityArrayOutputWithContext(context.Context) BusinessIdentityArrayOutput
}

type BusinessIdentityArray []BusinessIdentityInput

func (BusinessIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BusinessIdentity)(nil)).Elem()
}

func (i BusinessIdentityArray) ToBusinessIdentityArrayOutput() BusinessIdentityArrayOutput {
	return i.ToBusinessIdentityArrayOutputWithContext(context.Background())
}

func (i BusinessIdentityArray) ToBusinessIdentityArrayOutputWithContext(ctx context.Context) BusinessIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessIdentityArrayOutput)
}

// The integration account partner's business identity.
type BusinessIdentityOutput struct{ *pulumi.OutputState }

func (BusinessIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessIdentity)(nil)).Elem()
}

func (o BusinessIdentityOutput) ToBusinessIdentityOutput() BusinessIdentityOutput {
	return o
}

func (o BusinessIdentityOutput) ToBusinessIdentityOutputWithContext(ctx context.Context) BusinessIdentityOutput {
	return o
}

func (o BusinessIdentityOutput) ToBusinessIdentityPtrOutput() BusinessIdentityPtrOutput {
	return o.ToBusinessIdentityPtrOutputWithContext(context.Background())
}

func (o BusinessIdentityOutput) ToBusinessIdentityPtrOutputWithContext(ctx context.Context) BusinessIdentityPtrOutput {
	return o.ApplyT(func(v BusinessIdentity) *BusinessIdentity {
		return &v
	}).(BusinessIdentityPtrOutput)
}

// The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
func (o BusinessIdentityOutput) Qualifier() pulumi.StringOutput {
	return o.ApplyT(func(v BusinessIdentity) string { return v.Qualifier }).(pulumi.StringOutput)
}

// The user defined business identity value.
func (o BusinessIdentityOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v BusinessIdentity) string { return v.Value }).(pulumi.StringOutput)
}

type BusinessIdentityPtrOutput struct{ *pulumi.OutputState }

func (BusinessIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessIdentity)(nil)).Elem()
}

func (o BusinessIdentityPtrOutput) ToBusinessIdentityPtrOutput() BusinessIdentityPtrOutput {
	return o
}

func (o BusinessIdentityPtrOutput) ToBusinessIdentityPtrOutputWithContext(ctx context.Context) BusinessIdentityPtrOutput {
	return o
}

func (o BusinessIdentityPtrOutput) Elem() BusinessIdentityOutput {
	return o.ApplyT(func(v *BusinessIdentity) BusinessIdentity { return *v }).(BusinessIdentityOutput)
}

// The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
func (o BusinessIdentityPtrOutput) Qualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Qualifier
	}).(pulumi.StringPtrOutput)
}

// The user defined business identity value.
func (o BusinessIdentityPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

type BusinessIdentityArrayOutput struct{ *pulumi.OutputState }

func (BusinessIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BusinessIdentity)(nil)).Elem()
}

func (o BusinessIdentityArrayOutput) ToBusinessIdentityArrayOutput() BusinessIdentityArrayOutput {
	return o
}

func (o BusinessIdentityArrayOutput) ToBusinessIdentityArrayOutputWithContext(ctx context.Context) BusinessIdentityArrayOutput {
	return o
}

func (o BusinessIdentityArrayOutput) Index(i pulumi.IntInput) BusinessIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BusinessIdentity {
		return vs[0].([]BusinessIdentity)[vs[1].(int)]
	}).(BusinessIdentityOutput)
}

// The integration account partner's business identity.
type BusinessIdentityResponse struct {
	// The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
	Qualifier string `pulumi:"qualifier"`
	// The user defined business identity value.
	Value string `pulumi:"value"`
}

// BusinessIdentityResponseInput is an input type that accepts BusinessIdentityResponseArgs and BusinessIdentityResponseOutput values.
// You can construct a concrete instance of `BusinessIdentityResponseInput` via:
//
//          BusinessIdentityResponseArgs{...}
type BusinessIdentityResponseInput interface {
	pulumi.Input

	ToBusinessIdentityResponseOutput() BusinessIdentityResponseOutput
	ToBusinessIdentityResponseOutputWithContext(context.Context) BusinessIdentityResponseOutput
}

// The integration account partner's business identity.
type BusinessIdentityResponseArgs struct {
	// The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
	Qualifier pulumi.StringInput `pulumi:"qualifier"`
	// The user defined business identity value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (BusinessIdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessIdentityResponse)(nil)).Elem()
}

func (i BusinessIdentityResponseArgs) ToBusinessIdentityResponseOutput() BusinessIdentityResponseOutput {
	return i.ToBusinessIdentityResponseOutputWithContext(context.Background())
}

func (i BusinessIdentityResponseArgs) ToBusinessIdentityResponseOutputWithContext(ctx context.Context) BusinessIdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessIdentityResponseOutput)
}

func (i BusinessIdentityResponseArgs) ToBusinessIdentityResponsePtrOutput() BusinessIdentityResponsePtrOutput {
	return i.ToBusinessIdentityResponsePtrOutputWithContext(context.Background())
}

func (i BusinessIdentityResponseArgs) ToBusinessIdentityResponsePtrOutputWithContext(ctx context.Context) BusinessIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessIdentityResponseOutput).ToBusinessIdentityResponsePtrOutputWithContext(ctx)
}

// BusinessIdentityResponsePtrInput is an input type that accepts BusinessIdentityResponseArgs, BusinessIdentityResponsePtr and BusinessIdentityResponsePtrOutput values.
// You can construct a concrete instance of `BusinessIdentityResponsePtrInput` via:
//
//          BusinessIdentityResponseArgs{...}
//
//  or:
//
//          nil
type BusinessIdentityResponsePtrInput interface {
	pulumi.Input

	ToBusinessIdentityResponsePtrOutput() BusinessIdentityResponsePtrOutput
	ToBusinessIdentityResponsePtrOutputWithContext(context.Context) BusinessIdentityResponsePtrOutput
}

type businessIdentityResponsePtrType BusinessIdentityResponseArgs

func BusinessIdentityResponsePtr(v *BusinessIdentityResponseArgs) BusinessIdentityResponsePtrInput {
	return (*businessIdentityResponsePtrType)(v)
}

func (*businessIdentityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessIdentityResponse)(nil)).Elem()
}

func (i *businessIdentityResponsePtrType) ToBusinessIdentityResponsePtrOutput() BusinessIdentityResponsePtrOutput {
	return i.ToBusinessIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *businessIdentityResponsePtrType) ToBusinessIdentityResponsePtrOutputWithContext(ctx context.Context) BusinessIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessIdentityResponsePtrOutput)
}

// BusinessIdentityResponseArrayInput is an input type that accepts BusinessIdentityResponseArray and BusinessIdentityResponseArrayOutput values.
// You can construct a concrete instance of `BusinessIdentityResponseArrayInput` via:
//
//          BusinessIdentityResponseArray{ BusinessIdentityResponseArgs{...} }
type BusinessIdentityResponseArrayInput interface {
	pulumi.Input

	ToBusinessIdentityResponseArrayOutput() BusinessIdentityResponseArrayOutput
	ToBusinessIdentityResponseArrayOutputWithContext(context.Context) BusinessIdentityResponseArrayOutput
}

type BusinessIdentityResponseArray []BusinessIdentityResponseInput

func (BusinessIdentityResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BusinessIdentityResponse)(nil)).Elem()
}

func (i BusinessIdentityResponseArray) ToBusinessIdentityResponseArrayOutput() BusinessIdentityResponseArrayOutput {
	return i.ToBusinessIdentityResponseArrayOutputWithContext(context.Background())
}

func (i BusinessIdentityResponseArray) ToBusinessIdentityResponseArrayOutputWithContext(ctx context.Context) BusinessIdentityResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessIdentityResponseArrayOutput)
}

// The integration account partner's business identity.
type BusinessIdentityResponseOutput struct{ *pulumi.OutputState }

func (BusinessIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessIdentityResponse)(nil)).Elem()
}

func (o BusinessIdentityResponseOutput) ToBusinessIdentityResponseOutput() BusinessIdentityResponseOutput {
	return o
}

func (o BusinessIdentityResponseOutput) ToBusinessIdentityResponseOutputWithContext(ctx context.Context) BusinessIdentityResponseOutput {
	return o
}

func (o BusinessIdentityResponseOutput) ToBusinessIdentityResponsePtrOutput() BusinessIdentityResponsePtrOutput {
	return o.ToBusinessIdentityResponsePtrOutputWithContext(context.Background())
}

func (o BusinessIdentityResponseOutput) ToBusinessIdentityResponsePtrOutputWithContext(ctx context.Context) BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v BusinessIdentityResponse) *BusinessIdentityResponse {
		return &v
	}).(BusinessIdentityResponsePtrOutput)
}

// The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
func (o BusinessIdentityResponseOutput) Qualifier() pulumi.StringOutput {
	return o.ApplyT(func(v BusinessIdentityResponse) string { return v.Qualifier }).(pulumi.StringOutput)
}

// The user defined business identity value.
func (o BusinessIdentityResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v BusinessIdentityResponse) string { return v.Value }).(pulumi.StringOutput)
}

type BusinessIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (BusinessIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessIdentityResponse)(nil)).Elem()
}

func (o BusinessIdentityResponsePtrOutput) ToBusinessIdentityResponsePtrOutput() BusinessIdentityResponsePtrOutput {
	return o
}

func (o BusinessIdentityResponsePtrOutput) ToBusinessIdentityResponsePtrOutputWithContext(ctx context.Context) BusinessIdentityResponsePtrOutput {
	return o
}

func (o BusinessIdentityResponsePtrOutput) Elem() BusinessIdentityResponseOutput {
	return o.ApplyT(func(v *BusinessIdentityResponse) BusinessIdentityResponse { return *v }).(BusinessIdentityResponseOutput)
}

// The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
func (o BusinessIdentityResponsePtrOutput) Qualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Qualifier
	}).(pulumi.StringPtrOutput)
}

// The user defined business identity value.
func (o BusinessIdentityResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

type BusinessIdentityResponseArrayOutput struct{ *pulumi.OutputState }

func (BusinessIdentityResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BusinessIdentityResponse)(nil)).Elem()
}

func (o BusinessIdentityResponseArrayOutput) ToBusinessIdentityResponseArrayOutput() BusinessIdentityResponseArrayOutput {
	return o
}

func (o BusinessIdentityResponseArrayOutput) ToBusinessIdentityResponseArrayOutputWithContext(ctx context.Context) BusinessIdentityResponseArrayOutput {
	return o
}

func (o BusinessIdentityResponseArrayOutput) Index(i pulumi.IntInput) BusinessIdentityResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BusinessIdentityResponse {
		return vs[0].([]BusinessIdentityResponse)[vs[1].(int)]
	}).(BusinessIdentityResponseOutput)
}

// The content hash.
type ContentHash struct {
	// The algorithm of the content hash.
	Algorithm *string `pulumi:"algorithm"`
	// The value of the content hash.
	Value *string `pulumi:"value"`
}

// ContentHashInput is an input type that accepts ContentHashArgs and ContentHashOutput values.
// You can construct a concrete instance of `ContentHashInput` via:
//
//          ContentHashArgs{...}
type ContentHashInput interface {
	pulumi.Input

	ToContentHashOutput() ContentHashOutput
	ToContentHashOutputWithContext(context.Context) ContentHashOutput
}

// The content hash.
type ContentHashArgs struct {
	// The algorithm of the content hash.
	Algorithm pulumi.StringPtrInput `pulumi:"algorithm"`
	// The value of the content hash.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ContentHashArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentHash)(nil)).Elem()
}

func (i ContentHashArgs) ToContentHashOutput() ContentHashOutput {
	return i.ToContentHashOutputWithContext(context.Background())
}

func (i ContentHashArgs) ToContentHashOutputWithContext(ctx context.Context) ContentHashOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentHashOutput)
}

func (i ContentHashArgs) ToContentHashPtrOutput() ContentHashPtrOutput {
	return i.ToContentHashPtrOutputWithContext(context.Background())
}

func (i ContentHashArgs) ToContentHashPtrOutputWithContext(ctx context.Context) ContentHashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentHashOutput).ToContentHashPtrOutputWithContext(ctx)
}

// ContentHashPtrInput is an input type that accepts ContentHashArgs, ContentHashPtr and ContentHashPtrOutput values.
// You can construct a concrete instance of `ContentHashPtrInput` via:
//
//          ContentHashArgs{...}
//
//  or:
//
//          nil
type ContentHashPtrInput interface {
	pulumi.Input

	ToContentHashPtrOutput() ContentHashPtrOutput
	ToContentHashPtrOutputWithContext(context.Context) ContentHashPtrOutput
}

type contentHashPtrType ContentHashArgs

func ContentHashPtr(v *ContentHashArgs) ContentHashPtrInput {
	return (*contentHashPtrType)(v)
}

func (*contentHashPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentHash)(nil)).Elem()
}

func (i *contentHashPtrType) ToContentHashPtrOutput() ContentHashPtrOutput {
	return i.ToContentHashPtrOutputWithContext(context.Background())
}

func (i *contentHashPtrType) ToContentHashPtrOutputWithContext(ctx context.Context) ContentHashPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentHashPtrOutput)
}

// The content hash.
type ContentHashOutput struct{ *pulumi.OutputState }

func (ContentHashOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentHash)(nil)).Elem()
}

func (o ContentHashOutput) ToContentHashOutput() ContentHashOutput {
	return o
}

func (o ContentHashOutput) ToContentHashOutputWithContext(ctx context.Context) ContentHashOutput {
	return o
}

func (o ContentHashOutput) ToContentHashPtrOutput() ContentHashPtrOutput {
	return o.ToContentHashPtrOutputWithContext(context.Background())
}

func (o ContentHashOutput) ToContentHashPtrOutputWithContext(ctx context.Context) ContentHashPtrOutput {
	return o.ApplyT(func(v ContentHash) *ContentHash {
		return &v
	}).(ContentHashPtrOutput)
}

// The algorithm of the content hash.
func (o ContentHashOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentHash) *string { return v.Algorithm }).(pulumi.StringPtrOutput)
}

// The value of the content hash.
func (o ContentHashOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentHash) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ContentHashPtrOutput struct{ *pulumi.OutputState }

func (ContentHashPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentHash)(nil)).Elem()
}

func (o ContentHashPtrOutput) ToContentHashPtrOutput() ContentHashPtrOutput {
	return o
}

func (o ContentHashPtrOutput) ToContentHashPtrOutputWithContext(ctx context.Context) ContentHashPtrOutput {
	return o
}

func (o ContentHashPtrOutput) Elem() ContentHashOutput {
	return o.ApplyT(func(v *ContentHash) ContentHash { return *v }).(ContentHashOutput)
}

// The algorithm of the content hash.
func (o ContentHashPtrOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentHash) *string {
		if v == nil {
			return nil
		}
		return v.Algorithm
	}).(pulumi.StringPtrOutput)
}

// The value of the content hash.
func (o ContentHashPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentHash) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// The content hash.
type ContentHashResponse struct {
	// The algorithm of the content hash.
	Algorithm *string `pulumi:"algorithm"`
	// The value of the content hash.
	Value *string `pulumi:"value"`
}

// ContentHashResponseInput is an input type that accepts ContentHashResponseArgs and ContentHashResponseOutput values.
// You can construct a concrete instance of `ContentHashResponseInput` via:
//
//          ContentHashResponseArgs{...}
type ContentHashResponseInput interface {
	pulumi.Input

	ToContentHashResponseOutput() ContentHashResponseOutput
	ToContentHashResponseOutputWithContext(context.Context) ContentHashResponseOutput
}

// The content hash.
type ContentHashResponseArgs struct {
	// The algorithm of the content hash.
	Algorithm pulumi.StringPtrInput `pulumi:"algorithm"`
	// The value of the content hash.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ContentHashResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentHashResponse)(nil)).Elem()
}

func (i ContentHashResponseArgs) ToContentHashResponseOutput() ContentHashResponseOutput {
	return i.ToContentHashResponseOutputWithContext(context.Background())
}

func (i ContentHashResponseArgs) ToContentHashResponseOutputWithContext(ctx context.Context) ContentHashResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentHashResponseOutput)
}

func (i ContentHashResponseArgs) ToContentHashResponsePtrOutput() ContentHashResponsePtrOutput {
	return i.ToContentHashResponsePtrOutputWithContext(context.Background())
}

func (i ContentHashResponseArgs) ToContentHashResponsePtrOutputWithContext(ctx context.Context) ContentHashResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentHashResponseOutput).ToContentHashResponsePtrOutputWithContext(ctx)
}

// ContentHashResponsePtrInput is an input type that accepts ContentHashResponseArgs, ContentHashResponsePtr and ContentHashResponsePtrOutput values.
// You can construct a concrete instance of `ContentHashResponsePtrInput` via:
//
//          ContentHashResponseArgs{...}
//
//  or:
//
//          nil
type ContentHashResponsePtrInput interface {
	pulumi.Input

	ToContentHashResponsePtrOutput() ContentHashResponsePtrOutput
	ToContentHashResponsePtrOutputWithContext(context.Context) ContentHashResponsePtrOutput
}

type contentHashResponsePtrType ContentHashResponseArgs

func ContentHashResponsePtr(v *ContentHashResponseArgs) ContentHashResponsePtrInput {
	return (*contentHashResponsePtrType)(v)
}

func (*contentHashResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentHashResponse)(nil)).Elem()
}

func (i *contentHashResponsePtrType) ToContentHashResponsePtrOutput() ContentHashResponsePtrOutput {
	return i.ToContentHashResponsePtrOutputWithContext(context.Background())
}

func (i *contentHashResponsePtrType) ToContentHashResponsePtrOutputWithContext(ctx context.Context) ContentHashResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentHashResponsePtrOutput)
}

// The content hash.
type ContentHashResponseOutput struct{ *pulumi.OutputState }

func (ContentHashResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentHashResponse)(nil)).Elem()
}

func (o ContentHashResponseOutput) ToContentHashResponseOutput() ContentHashResponseOutput {
	return o
}

func (o ContentHashResponseOutput) ToContentHashResponseOutputWithContext(ctx context.Context) ContentHashResponseOutput {
	return o
}

func (o ContentHashResponseOutput) ToContentHashResponsePtrOutput() ContentHashResponsePtrOutput {
	return o.ToContentHashResponsePtrOutputWithContext(context.Background())
}

func (o ContentHashResponseOutput) ToContentHashResponsePtrOutputWithContext(ctx context.Context) ContentHashResponsePtrOutput {
	return o.ApplyT(func(v ContentHashResponse) *ContentHashResponse {
		return &v
	}).(ContentHashResponsePtrOutput)
}

// The algorithm of the content hash.
func (o ContentHashResponseOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentHashResponse) *string { return v.Algorithm }).(pulumi.StringPtrOutput)
}

// The value of the content hash.
func (o ContentHashResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentHashResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ContentHashResponsePtrOutput struct{ *pulumi.OutputState }

func (ContentHashResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentHashResponse)(nil)).Elem()
}

func (o ContentHashResponsePtrOutput) ToContentHashResponsePtrOutput() ContentHashResponsePtrOutput {
	return o
}

func (o ContentHashResponsePtrOutput) ToContentHashResponsePtrOutputWithContext(ctx context.Context) ContentHashResponsePtrOutput {
	return o
}

func (o ContentHashResponsePtrOutput) Elem() ContentHashResponseOutput {
	return o.ApplyT(func(v *ContentHashResponse) ContentHashResponse { return *v }).(ContentHashResponseOutput)
}

// The algorithm of the content hash.
func (o ContentHashResponsePtrOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentHashResponse) *string {
		if v == nil {
			return nil
		}
		return v.Algorithm
	}).(pulumi.StringPtrOutput)
}

// The value of the content hash.
func (o ContentHashResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentHashResponse) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// The content link.
type ContentLink struct {
	// The content hash.
	ContentHash *ContentHash `pulumi:"contentHash"`
	// The content size.
	ContentSize *int `pulumi:"contentSize"`
	// The content version.
	ContentVersion *string `pulumi:"contentVersion"`
	// The metadata.
	Metadata interface{} `pulumi:"metadata"`
	// The content link URI.
	Uri *string `pulumi:"uri"`
}

// ContentLinkInput is an input type that accepts ContentLinkArgs and ContentLinkOutput values.
// You can construct a concrete instance of `ContentLinkInput` via:
//
//          ContentLinkArgs{...}
type ContentLinkInput interface {
	pulumi.Input

	ToContentLinkOutput() ContentLinkOutput
	ToContentLinkOutputWithContext(context.Context) ContentLinkOutput
}

// The content link.
type ContentLinkArgs struct {
	// The content hash.
	ContentHash ContentHashPtrInput `pulumi:"contentHash"`
	// The content size.
	ContentSize pulumi.IntPtrInput `pulumi:"contentSize"`
	// The content version.
	ContentVersion pulumi.StringPtrInput `pulumi:"contentVersion"`
	// The metadata.
	Metadata pulumi.Input `pulumi:"metadata"`
	// The content link URI.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (ContentLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentLink)(nil)).Elem()
}

func (i ContentLinkArgs) ToContentLinkOutput() ContentLinkOutput {
	return i.ToContentLinkOutputWithContext(context.Background())
}

func (i ContentLinkArgs) ToContentLinkOutputWithContext(ctx context.Context) ContentLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentLinkOutput)
}

func (i ContentLinkArgs) ToContentLinkPtrOutput() ContentLinkPtrOutput {
	return i.ToContentLinkPtrOutputWithContext(context.Background())
}

func (i ContentLinkArgs) ToContentLinkPtrOutputWithContext(ctx context.Context) ContentLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentLinkOutput).ToContentLinkPtrOutputWithContext(ctx)
}

// ContentLinkPtrInput is an input type that accepts ContentLinkArgs, ContentLinkPtr and ContentLinkPtrOutput values.
// You can construct a concrete instance of `ContentLinkPtrInput` via:
//
//          ContentLinkArgs{...}
//
//  or:
//
//          nil
type ContentLinkPtrInput interface {
	pulumi.Input

	ToContentLinkPtrOutput() ContentLinkPtrOutput
	ToContentLinkPtrOutputWithContext(context.Context) ContentLinkPtrOutput
}

type contentLinkPtrType ContentLinkArgs

func ContentLinkPtr(v *ContentLinkArgs) ContentLinkPtrInput {
	return (*contentLinkPtrType)(v)
}

func (*contentLinkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentLink)(nil)).Elem()
}

func (i *contentLinkPtrType) ToContentLinkPtrOutput() ContentLinkPtrOutput {
	return i.ToContentLinkPtrOutputWithContext(context.Background())
}

func (i *contentLinkPtrType) ToContentLinkPtrOutputWithContext(ctx context.Context) ContentLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentLinkPtrOutput)
}

// The content link.
type ContentLinkOutput struct{ *pulumi.OutputState }

func (ContentLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentLink)(nil)).Elem()
}

func (o ContentLinkOutput) ToContentLinkOutput() ContentLinkOutput {
	return o
}

func (o ContentLinkOutput) ToContentLinkOutputWithContext(ctx context.Context) ContentLinkOutput {
	return o
}

func (o ContentLinkOutput) ToContentLinkPtrOutput() ContentLinkPtrOutput {
	return o.ToContentLinkPtrOutputWithContext(context.Background())
}

func (o ContentLinkOutput) ToContentLinkPtrOutputWithContext(ctx context.Context) ContentLinkPtrOutput {
	return o.ApplyT(func(v ContentLink) *ContentLink {
		return &v
	}).(ContentLinkPtrOutput)
}

// The content hash.
func (o ContentLinkOutput) ContentHash() ContentHashPtrOutput {
	return o.ApplyT(func(v ContentLink) *ContentHash { return v.ContentHash }).(ContentHashPtrOutput)
}

// The content size.
func (o ContentLinkOutput) ContentSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentLink) *int { return v.ContentSize }).(pulumi.IntPtrOutput)
}

// The content version.
func (o ContentLinkOutput) ContentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentLink) *string { return v.ContentVersion }).(pulumi.StringPtrOutput)
}

// The metadata.
func (o ContentLinkOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v ContentLink) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

// The content link URI.
func (o ContentLinkOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentLink) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type ContentLinkPtrOutput struct{ *pulumi.OutputState }

func (ContentLinkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentLink)(nil)).Elem()
}

func (o ContentLinkPtrOutput) ToContentLinkPtrOutput() ContentLinkPtrOutput {
	return o
}

func (o ContentLinkPtrOutput) ToContentLinkPtrOutputWithContext(ctx context.Context) ContentLinkPtrOutput {
	return o
}

func (o ContentLinkPtrOutput) Elem() ContentLinkOutput {
	return o.ApplyT(func(v *ContentLink) ContentLink { return *v }).(ContentLinkOutput)
}

// The content hash.
func (o ContentLinkPtrOutput) ContentHash() ContentHashPtrOutput {
	return o.ApplyT(func(v *ContentLink) *ContentHash {
		if v == nil {
			return nil
		}
		return v.ContentHash
	}).(ContentHashPtrOutput)
}

// The content size.
func (o ContentLinkPtrOutput) ContentSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentLink) *int {
		if v == nil {
			return nil
		}
		return v.ContentSize
	}).(pulumi.IntPtrOutput)
}

// The content version.
func (o ContentLinkPtrOutput) ContentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentLink) *string {
		if v == nil {
			return nil
		}
		return v.ContentVersion
	}).(pulumi.StringPtrOutput)
}

// The metadata.
func (o ContentLinkPtrOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v *ContentLink) interface{} {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.AnyOutput)
}

// The content link URI.
func (o ContentLinkPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentLink) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// The content link.
type ContentLinkResponse struct {
	// The content hash.
	ContentHash *ContentHashResponse `pulumi:"contentHash"`
	// The content size.
	ContentSize *int `pulumi:"contentSize"`
	// The content version.
	ContentVersion *string `pulumi:"contentVersion"`
	// The metadata.
	Metadata interface{} `pulumi:"metadata"`
	// The content link URI.
	Uri *string `pulumi:"uri"`
}

// ContentLinkResponseInput is an input type that accepts ContentLinkResponseArgs and ContentLinkResponseOutput values.
// You can construct a concrete instance of `ContentLinkResponseInput` via:
//
//          ContentLinkResponseArgs{...}
type ContentLinkResponseInput interface {
	pulumi.Input

	ToContentLinkResponseOutput() ContentLinkResponseOutput
	ToContentLinkResponseOutputWithContext(context.Context) ContentLinkResponseOutput
}

// The content link.
type ContentLinkResponseArgs struct {
	// The content hash.
	ContentHash ContentHashResponsePtrInput `pulumi:"contentHash"`
	// The content size.
	ContentSize pulumi.IntPtrInput `pulumi:"contentSize"`
	// The content version.
	ContentVersion pulumi.StringPtrInput `pulumi:"contentVersion"`
	// The metadata.
	Metadata pulumi.Input `pulumi:"metadata"`
	// The content link URI.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (ContentLinkResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentLinkResponse)(nil)).Elem()
}

func (i ContentLinkResponseArgs) ToContentLinkResponseOutput() ContentLinkResponseOutput {
	return i.ToContentLinkResponseOutputWithContext(context.Background())
}

func (i ContentLinkResponseArgs) ToContentLinkResponseOutputWithContext(ctx context.Context) ContentLinkResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentLinkResponseOutput)
}

func (i ContentLinkResponseArgs) ToContentLinkResponsePtrOutput() ContentLinkResponsePtrOutput {
	return i.ToContentLinkResponsePtrOutputWithContext(context.Background())
}

func (i ContentLinkResponseArgs) ToContentLinkResponsePtrOutputWithContext(ctx context.Context) ContentLinkResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentLinkResponseOutput).ToContentLinkResponsePtrOutputWithContext(ctx)
}

// ContentLinkResponsePtrInput is an input type that accepts ContentLinkResponseArgs, ContentLinkResponsePtr and ContentLinkResponsePtrOutput values.
// You can construct a concrete instance of `ContentLinkResponsePtrInput` via:
//
//          ContentLinkResponseArgs{...}
//
//  or:
//
//          nil
type ContentLinkResponsePtrInput interface {
	pulumi.Input

	ToContentLinkResponsePtrOutput() ContentLinkResponsePtrOutput
	ToContentLinkResponsePtrOutputWithContext(context.Context) ContentLinkResponsePtrOutput
}

type contentLinkResponsePtrType ContentLinkResponseArgs

func ContentLinkResponsePtr(v *ContentLinkResponseArgs) ContentLinkResponsePtrInput {
	return (*contentLinkResponsePtrType)(v)
}

func (*contentLinkResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentLinkResponse)(nil)).Elem()
}

func (i *contentLinkResponsePtrType) ToContentLinkResponsePtrOutput() ContentLinkResponsePtrOutput {
	return i.ToContentLinkResponsePtrOutputWithContext(context.Background())
}

func (i *contentLinkResponsePtrType) ToContentLinkResponsePtrOutputWithContext(ctx context.Context) ContentLinkResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentLinkResponsePtrOutput)
}

// The content link.
type ContentLinkResponseOutput struct{ *pulumi.OutputState }

func (ContentLinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentLinkResponse)(nil)).Elem()
}

func (o ContentLinkResponseOutput) ToContentLinkResponseOutput() ContentLinkResponseOutput {
	return o
}

func (o ContentLinkResponseOutput) ToContentLinkResponseOutputWithContext(ctx context.Context) ContentLinkResponseOutput {
	return o
}

func (o ContentLinkResponseOutput) ToContentLinkResponsePtrOutput() ContentLinkResponsePtrOutput {
	return o.ToContentLinkResponsePtrOutputWithContext(context.Background())
}

func (o ContentLinkResponseOutput) ToContentLinkResponsePtrOutputWithContext(ctx context.Context) ContentLinkResponsePtrOutput {
	return o.ApplyT(func(v ContentLinkResponse) *ContentLinkResponse {
		return &v
	}).(ContentLinkResponsePtrOutput)
}

// The content hash.
func (o ContentLinkResponseOutput) ContentHash() ContentHashResponsePtrOutput {
	return o.ApplyT(func(v ContentLinkResponse) *ContentHashResponse { return v.ContentHash }).(ContentHashResponsePtrOutput)
}

// The content size.
func (o ContentLinkResponseOutput) ContentSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentLinkResponse) *int { return v.ContentSize }).(pulumi.IntPtrOutput)
}

// The content version.
func (o ContentLinkResponseOutput) ContentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentLinkResponse) *string { return v.ContentVersion }).(pulumi.StringPtrOutput)
}

// The metadata.
func (o ContentLinkResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v ContentLinkResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

// The content link URI.
func (o ContentLinkResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentLinkResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type ContentLinkResponsePtrOutput struct{ *pulumi.OutputState }

func (ContentLinkResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentLinkResponse)(nil)).Elem()
}

func (o ContentLinkResponsePtrOutput) ToContentLinkResponsePtrOutput() ContentLinkResponsePtrOutput {
	return o
}

func (o ContentLinkResponsePtrOutput) ToContentLinkResponsePtrOutputWithContext(ctx context.Context) ContentLinkResponsePtrOutput {
	return o
}

func (o ContentLinkResponsePtrOutput) Elem() ContentLinkResponseOutput {
	return o.ApplyT(func(v *ContentLinkResponse) ContentLinkResponse { return *v }).(ContentLinkResponseOutput)
}

// The content hash.
func (o ContentLinkResponsePtrOutput) ContentHash() ContentHashResponsePtrOutput {
	return o.ApplyT(func(v *ContentLinkResponse) *ContentHashResponse {
		if v == nil {
			return nil
		}
		return v.ContentHash
	}).(ContentHashResponsePtrOutput)
}

// The content size.
func (o ContentLinkResponsePtrOutput) ContentSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentLinkResponse) *int {
		if v == nil {
			return nil
		}
		return v.ContentSize
	}).(pulumi.IntPtrOutput)
}

// The content version.
func (o ContentLinkResponsePtrOutput) ContentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentLinkResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContentVersion
	}).(pulumi.StringPtrOutput)
}

// The metadata.
func (o ContentLinkResponsePtrOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v *ContentLinkResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.AnyOutput)
}

// The content link URI.
func (o ContentLinkResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentLinkResponse) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// The Edifact agreement acknowledgement settings.
type EdifactAcknowledgementSettings struct {
	// The acknowledgement control number lower bound.
	AcknowledgementControlNumberLowerBound int `pulumi:"acknowledgementControlNumberLowerBound"`
	// The acknowledgement control number prefix.
	AcknowledgementControlNumberPrefix *string `pulumi:"acknowledgementControlNumberPrefix"`
	// The acknowledgement control number suffix.
	AcknowledgementControlNumberSuffix *string `pulumi:"acknowledgementControlNumberSuffix"`
	// The acknowledgement control number upper bound.
	AcknowledgementControlNumberUpperBound int `pulumi:"acknowledgementControlNumberUpperBound"`
	// The value indicating whether to batch functional acknowledgements.
	BatchFunctionalAcknowledgements bool `pulumi:"batchFunctionalAcknowledgements"`
	// The value indicating whether to batch the technical acknowledgements.
	BatchTechnicalAcknowledgements bool `pulumi:"batchTechnicalAcknowledgements"`
	// The value indicating whether functional acknowledgement is needed.
	NeedFunctionalAcknowledgement bool `pulumi:"needFunctionalAcknowledgement"`
	// The value indicating whether a loop is needed for valid messages.
	NeedLoopForValidMessages bool `pulumi:"needLoopForValidMessages"`
	// The value indicating whether technical acknowledgement is needed.
	NeedTechnicalAcknowledgement bool `pulumi:"needTechnicalAcknowledgement"`
	// The value indicating whether to rollover acknowledgement control number.
	RolloverAcknowledgementControlNumber bool `pulumi:"rolloverAcknowledgementControlNumber"`
	// The value indicating whether to send synchronous acknowledgement.
	SendSynchronousAcknowledgement bool `pulumi:"sendSynchronousAcknowledgement"`
}

// EdifactAcknowledgementSettingsInput is an input type that accepts EdifactAcknowledgementSettingsArgs and EdifactAcknowledgementSettingsOutput values.
// You can construct a concrete instance of `EdifactAcknowledgementSettingsInput` via:
//
//          EdifactAcknowledgementSettingsArgs{...}
type EdifactAcknowledgementSettingsInput interface {
	pulumi.Input

	ToEdifactAcknowledgementSettingsOutput() EdifactAcknowledgementSettingsOutput
	ToEdifactAcknowledgementSettingsOutputWithContext(context.Context) EdifactAcknowledgementSettingsOutput
}

// The Edifact agreement acknowledgement settings.
type EdifactAcknowledgementSettingsArgs struct {
	// The acknowledgement control number lower bound.
	AcknowledgementControlNumberLowerBound pulumi.IntInput `pulumi:"acknowledgementControlNumberLowerBound"`
	// The acknowledgement control number prefix.
	AcknowledgementControlNumberPrefix pulumi.StringPtrInput `pulumi:"acknowledgementControlNumberPrefix"`
	// The acknowledgement control number suffix.
	AcknowledgementControlNumberSuffix pulumi.StringPtrInput `pulumi:"acknowledgementControlNumberSuffix"`
	// The acknowledgement control number upper bound.
	AcknowledgementControlNumberUpperBound pulumi.IntInput `pulumi:"acknowledgementControlNumberUpperBound"`
	// The value indicating whether to batch functional acknowledgements.
	BatchFunctionalAcknowledgements pulumi.BoolInput `pulumi:"batchFunctionalAcknowledgements"`
	// The value indicating whether to batch the technical acknowledgements.
	BatchTechnicalAcknowledgements pulumi.BoolInput `pulumi:"batchTechnicalAcknowledgements"`
	// The value indicating whether functional acknowledgement is needed.
	NeedFunctionalAcknowledgement pulumi.BoolInput `pulumi:"needFunctionalAcknowledgement"`
	// The value indicating whether a loop is needed for valid messages.
	NeedLoopForValidMessages pulumi.BoolInput `pulumi:"needLoopForValidMessages"`
	// The value indicating whether technical acknowledgement is needed.
	NeedTechnicalAcknowledgement pulumi.BoolInput `pulumi:"needTechnicalAcknowledgement"`
	// The value indicating whether to rollover acknowledgement control number.
	RolloverAcknowledgementControlNumber pulumi.BoolInput `pulumi:"rolloverAcknowledgementControlNumber"`
	// The value indicating whether to send synchronous acknowledgement.
	SendSynchronousAcknowledgement pulumi.BoolInput `pulumi:"sendSynchronousAcknowledgement"`
}

func (EdifactAcknowledgementSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactAcknowledgementSettings)(nil)).Elem()
}

func (i EdifactAcknowledgementSettingsArgs) ToEdifactAcknowledgementSettingsOutput() EdifactAcknowledgementSettingsOutput {
	return i.ToEdifactAcknowledgementSettingsOutputWithContext(context.Background())
}

func (i EdifactAcknowledgementSettingsArgs) ToEdifactAcknowledgementSettingsOutputWithContext(ctx context.Context) EdifactAcknowledgementSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactAcknowledgementSettingsOutput)
}

func (i EdifactAcknowledgementSettingsArgs) ToEdifactAcknowledgementSettingsPtrOutput() EdifactAcknowledgementSettingsPtrOutput {
	return i.ToEdifactAcknowledgementSettingsPtrOutputWithContext(context.Background())
}

func (i EdifactAcknowledgementSettingsArgs) ToEdifactAcknowledgementSettingsPtrOutputWithContext(ctx context.Context) EdifactAcknowledgementSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactAcknowledgementSettingsOutput).ToEdifactAcknowledgementSettingsPtrOutputWithContext(ctx)
}

// EdifactAcknowledgementSettingsPtrInput is an input type that accepts EdifactAcknowledgementSettingsArgs, EdifactAcknowledgementSettingsPtr and EdifactAcknowledgementSettingsPtrOutput values.
// You can construct a concrete instance of `EdifactAcknowledgementSettingsPtrInput` via:
//
//          EdifactAcknowledgementSettingsArgs{...}
//
//  or:
//
//          nil
type EdifactAcknowledgementSettingsPtrInput interface {
	pulumi.Input

	ToEdifactAcknowledgementSettingsPtrOutput() EdifactAcknowledgementSettingsPtrOutput
	ToEdifactAcknowledgementSettingsPtrOutputWithContext(context.Context) EdifactAcknowledgementSettingsPtrOutput
}

type edifactAcknowledgementSettingsPtrType EdifactAcknowledgementSettingsArgs

func EdifactAcknowledgementSettingsPtr(v *EdifactAcknowledgementSettingsArgs) EdifactAcknowledgementSettingsPtrInput {
	return (*edifactAcknowledgementSettingsPtrType)(v)
}

func (*edifactAcknowledgementSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactAcknowledgementSettings)(nil)).Elem()
}

func (i *edifactAcknowledgementSettingsPtrType) ToEdifactAcknowledgementSettingsPtrOutput() EdifactAcknowledgementSettingsPtrOutput {
	return i.ToEdifactAcknowledgementSettingsPtrOutputWithContext(context.Background())
}

func (i *edifactAcknowledgementSettingsPtrType) ToEdifactAcknowledgementSettingsPtrOutputWithContext(ctx context.Context) EdifactAcknowledgementSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactAcknowledgementSettingsPtrOutput)
}

// The Edifact agreement acknowledgement settings.
type EdifactAcknowledgementSettingsOutput struct{ *pulumi.OutputState }

func (EdifactAcknowledgementSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactAcknowledgementSettings)(nil)).Elem()
}

func (o EdifactAcknowledgementSettingsOutput) ToEdifactAcknowledgementSettingsOutput() EdifactAcknowledgementSettingsOutput {
	return o
}

func (o EdifactAcknowledgementSettingsOutput) ToEdifactAcknowledgementSettingsOutputWithContext(ctx context.Context) EdifactAcknowledgementSettingsOutput {
	return o
}

func (o EdifactAcknowledgementSettingsOutput) ToEdifactAcknowledgementSettingsPtrOutput() EdifactAcknowledgementSettingsPtrOutput {
	return o.ToEdifactAcknowledgementSettingsPtrOutputWithContext(context.Background())
}

func (o EdifactAcknowledgementSettingsOutput) ToEdifactAcknowledgementSettingsPtrOutputWithContext(ctx context.Context) EdifactAcknowledgementSettingsPtrOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettings) *EdifactAcknowledgementSettings {
		return &v
	}).(EdifactAcknowledgementSettingsPtrOutput)
}

// The acknowledgement control number lower bound.
func (o EdifactAcknowledgementSettingsOutput) AcknowledgementControlNumberLowerBound() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettings) int { return v.AcknowledgementControlNumberLowerBound }).(pulumi.IntOutput)
}

// The acknowledgement control number prefix.
func (o EdifactAcknowledgementSettingsOutput) AcknowledgementControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettings) *string { return v.AcknowledgementControlNumberPrefix }).(pulumi.StringPtrOutput)
}

// The acknowledgement control number suffix.
func (o EdifactAcknowledgementSettingsOutput) AcknowledgementControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettings) *string { return v.AcknowledgementControlNumberSuffix }).(pulumi.StringPtrOutput)
}

// The acknowledgement control number upper bound.
func (o EdifactAcknowledgementSettingsOutput) AcknowledgementControlNumberUpperBound() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettings) int { return v.AcknowledgementControlNumberUpperBound }).(pulumi.IntOutput)
}

// The value indicating whether to batch functional acknowledgements.
func (o EdifactAcknowledgementSettingsOutput) BatchFunctionalAcknowledgements() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettings) bool { return v.BatchFunctionalAcknowledgements }).(pulumi.BoolOutput)
}

// The value indicating whether to batch the technical acknowledgements.
func (o EdifactAcknowledgementSettingsOutput) BatchTechnicalAcknowledgements() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettings) bool { return v.BatchTechnicalAcknowledgements }).(pulumi.BoolOutput)
}

// The value indicating whether functional acknowledgement is needed.
func (o EdifactAcknowledgementSettingsOutput) NeedFunctionalAcknowledgement() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettings) bool { return v.NeedFunctionalAcknowledgement }).(pulumi.BoolOutput)
}

// The value indicating whether a loop is needed for valid messages.
func (o EdifactAcknowledgementSettingsOutput) NeedLoopForValidMessages() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettings) bool { return v.NeedLoopForValidMessages }).(pulumi.BoolOutput)
}

// The value indicating whether technical acknowledgement is needed.
func (o EdifactAcknowledgementSettingsOutput) NeedTechnicalAcknowledgement() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettings) bool { return v.NeedTechnicalAcknowledgement }).(pulumi.BoolOutput)
}

// The value indicating whether to rollover acknowledgement control number.
func (o EdifactAcknowledgementSettingsOutput) RolloverAcknowledgementControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettings) bool { return v.RolloverAcknowledgementControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to send synchronous acknowledgement.
func (o EdifactAcknowledgementSettingsOutput) SendSynchronousAcknowledgement() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettings) bool { return v.SendSynchronousAcknowledgement }).(pulumi.BoolOutput)
}

type EdifactAcknowledgementSettingsPtrOutput struct{ *pulumi.OutputState }

func (EdifactAcknowledgementSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactAcknowledgementSettings)(nil)).Elem()
}

func (o EdifactAcknowledgementSettingsPtrOutput) ToEdifactAcknowledgementSettingsPtrOutput() EdifactAcknowledgementSettingsPtrOutput {
	return o
}

func (o EdifactAcknowledgementSettingsPtrOutput) ToEdifactAcknowledgementSettingsPtrOutputWithContext(ctx context.Context) EdifactAcknowledgementSettingsPtrOutput {
	return o
}

func (o EdifactAcknowledgementSettingsPtrOutput) Elem() EdifactAcknowledgementSettingsOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettings) EdifactAcknowledgementSettings { return *v }).(EdifactAcknowledgementSettingsOutput)
}

// The acknowledgement control number lower bound.
func (o EdifactAcknowledgementSettingsPtrOutput) AcknowledgementControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettings) *int {
		if v == nil {
			return nil
		}
		return &v.AcknowledgementControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The acknowledgement control number prefix.
func (o EdifactAcknowledgementSettingsPtrOutput) AcknowledgementControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettings) *string {
		if v == nil {
			return nil
		}
		return v.AcknowledgementControlNumberPrefix
	}).(pulumi.StringPtrOutput)
}

// The acknowledgement control number suffix.
func (o EdifactAcknowledgementSettingsPtrOutput) AcknowledgementControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettings) *string {
		if v == nil {
			return nil
		}
		return v.AcknowledgementControlNumberSuffix
	}).(pulumi.StringPtrOutput)
}

// The acknowledgement control number upper bound.
func (o EdifactAcknowledgementSettingsPtrOutput) AcknowledgementControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettings) *int {
		if v == nil {
			return nil
		}
		return &v.AcknowledgementControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The value indicating whether to batch functional acknowledgements.
func (o EdifactAcknowledgementSettingsPtrOutput) BatchFunctionalAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.BatchFunctionalAcknowledgements
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to batch the technical acknowledgements.
func (o EdifactAcknowledgementSettingsPtrOutput) BatchTechnicalAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.BatchTechnicalAcknowledgements
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether functional acknowledgement is needed.
func (o EdifactAcknowledgementSettingsPtrOutput) NeedFunctionalAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.NeedFunctionalAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether a loop is needed for valid messages.
func (o EdifactAcknowledgementSettingsPtrOutput) NeedLoopForValidMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.NeedLoopForValidMessages
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether technical acknowledgement is needed.
func (o EdifactAcknowledgementSettingsPtrOutput) NeedTechnicalAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.NeedTechnicalAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover acknowledgement control number.
func (o EdifactAcknowledgementSettingsPtrOutput) RolloverAcknowledgementControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.RolloverAcknowledgementControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to send synchronous acknowledgement.
func (o EdifactAcknowledgementSettingsPtrOutput) SendSynchronousAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.SendSynchronousAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

// The Edifact agreement acknowledgement settings.
type EdifactAcknowledgementSettingsResponse struct {
	// The acknowledgement control number lower bound.
	AcknowledgementControlNumberLowerBound int `pulumi:"acknowledgementControlNumberLowerBound"`
	// The acknowledgement control number prefix.
	AcknowledgementControlNumberPrefix *string `pulumi:"acknowledgementControlNumberPrefix"`
	// The acknowledgement control number suffix.
	AcknowledgementControlNumberSuffix *string `pulumi:"acknowledgementControlNumberSuffix"`
	// The acknowledgement control number upper bound.
	AcknowledgementControlNumberUpperBound int `pulumi:"acknowledgementControlNumberUpperBound"`
	// The value indicating whether to batch functional acknowledgements.
	BatchFunctionalAcknowledgements bool `pulumi:"batchFunctionalAcknowledgements"`
	// The value indicating whether to batch the technical acknowledgements.
	BatchTechnicalAcknowledgements bool `pulumi:"batchTechnicalAcknowledgements"`
	// The value indicating whether functional acknowledgement is needed.
	NeedFunctionalAcknowledgement bool `pulumi:"needFunctionalAcknowledgement"`
	// The value indicating whether a loop is needed for valid messages.
	NeedLoopForValidMessages bool `pulumi:"needLoopForValidMessages"`
	// The value indicating whether technical acknowledgement is needed.
	NeedTechnicalAcknowledgement bool `pulumi:"needTechnicalAcknowledgement"`
	// The value indicating whether to rollover acknowledgement control number.
	RolloverAcknowledgementControlNumber bool `pulumi:"rolloverAcknowledgementControlNumber"`
	// The value indicating whether to send synchronous acknowledgement.
	SendSynchronousAcknowledgement bool `pulumi:"sendSynchronousAcknowledgement"`
}

// EdifactAcknowledgementSettingsResponseInput is an input type that accepts EdifactAcknowledgementSettingsResponseArgs and EdifactAcknowledgementSettingsResponseOutput values.
// You can construct a concrete instance of `EdifactAcknowledgementSettingsResponseInput` via:
//
//          EdifactAcknowledgementSettingsResponseArgs{...}
type EdifactAcknowledgementSettingsResponseInput interface {
	pulumi.Input

	ToEdifactAcknowledgementSettingsResponseOutput() EdifactAcknowledgementSettingsResponseOutput
	ToEdifactAcknowledgementSettingsResponseOutputWithContext(context.Context) EdifactAcknowledgementSettingsResponseOutput
}

// The Edifact agreement acknowledgement settings.
type EdifactAcknowledgementSettingsResponseArgs struct {
	// The acknowledgement control number lower bound.
	AcknowledgementControlNumberLowerBound pulumi.IntInput `pulumi:"acknowledgementControlNumberLowerBound"`
	// The acknowledgement control number prefix.
	AcknowledgementControlNumberPrefix pulumi.StringPtrInput `pulumi:"acknowledgementControlNumberPrefix"`
	// The acknowledgement control number suffix.
	AcknowledgementControlNumberSuffix pulumi.StringPtrInput `pulumi:"acknowledgementControlNumberSuffix"`
	// The acknowledgement control number upper bound.
	AcknowledgementControlNumberUpperBound pulumi.IntInput `pulumi:"acknowledgementControlNumberUpperBound"`
	// The value indicating whether to batch functional acknowledgements.
	BatchFunctionalAcknowledgements pulumi.BoolInput `pulumi:"batchFunctionalAcknowledgements"`
	// The value indicating whether to batch the technical acknowledgements.
	BatchTechnicalAcknowledgements pulumi.BoolInput `pulumi:"batchTechnicalAcknowledgements"`
	// The value indicating whether functional acknowledgement is needed.
	NeedFunctionalAcknowledgement pulumi.BoolInput `pulumi:"needFunctionalAcknowledgement"`
	// The value indicating whether a loop is needed for valid messages.
	NeedLoopForValidMessages pulumi.BoolInput `pulumi:"needLoopForValidMessages"`
	// The value indicating whether technical acknowledgement is needed.
	NeedTechnicalAcknowledgement pulumi.BoolInput `pulumi:"needTechnicalAcknowledgement"`
	// The value indicating whether to rollover acknowledgement control number.
	RolloverAcknowledgementControlNumber pulumi.BoolInput `pulumi:"rolloverAcknowledgementControlNumber"`
	// The value indicating whether to send synchronous acknowledgement.
	SendSynchronousAcknowledgement pulumi.BoolInput `pulumi:"sendSynchronousAcknowledgement"`
}

func (EdifactAcknowledgementSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactAcknowledgementSettingsResponse)(nil)).Elem()
}

func (i EdifactAcknowledgementSettingsResponseArgs) ToEdifactAcknowledgementSettingsResponseOutput() EdifactAcknowledgementSettingsResponseOutput {
	return i.ToEdifactAcknowledgementSettingsResponseOutputWithContext(context.Background())
}

func (i EdifactAcknowledgementSettingsResponseArgs) ToEdifactAcknowledgementSettingsResponseOutputWithContext(ctx context.Context) EdifactAcknowledgementSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactAcknowledgementSettingsResponseOutput)
}

func (i EdifactAcknowledgementSettingsResponseArgs) ToEdifactAcknowledgementSettingsResponsePtrOutput() EdifactAcknowledgementSettingsResponsePtrOutput {
	return i.ToEdifactAcknowledgementSettingsResponsePtrOutputWithContext(context.Background())
}

func (i EdifactAcknowledgementSettingsResponseArgs) ToEdifactAcknowledgementSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactAcknowledgementSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactAcknowledgementSettingsResponseOutput).ToEdifactAcknowledgementSettingsResponsePtrOutputWithContext(ctx)
}

// EdifactAcknowledgementSettingsResponsePtrInput is an input type that accepts EdifactAcknowledgementSettingsResponseArgs, EdifactAcknowledgementSettingsResponsePtr and EdifactAcknowledgementSettingsResponsePtrOutput values.
// You can construct a concrete instance of `EdifactAcknowledgementSettingsResponsePtrInput` via:
//
//          EdifactAcknowledgementSettingsResponseArgs{...}
//
//  or:
//
//          nil
type EdifactAcknowledgementSettingsResponsePtrInput interface {
	pulumi.Input

	ToEdifactAcknowledgementSettingsResponsePtrOutput() EdifactAcknowledgementSettingsResponsePtrOutput
	ToEdifactAcknowledgementSettingsResponsePtrOutputWithContext(context.Context) EdifactAcknowledgementSettingsResponsePtrOutput
}

type edifactAcknowledgementSettingsResponsePtrType EdifactAcknowledgementSettingsResponseArgs

func EdifactAcknowledgementSettingsResponsePtr(v *EdifactAcknowledgementSettingsResponseArgs) EdifactAcknowledgementSettingsResponsePtrInput {
	return (*edifactAcknowledgementSettingsResponsePtrType)(v)
}

func (*edifactAcknowledgementSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactAcknowledgementSettingsResponse)(nil)).Elem()
}

func (i *edifactAcknowledgementSettingsResponsePtrType) ToEdifactAcknowledgementSettingsResponsePtrOutput() EdifactAcknowledgementSettingsResponsePtrOutput {
	return i.ToEdifactAcknowledgementSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *edifactAcknowledgementSettingsResponsePtrType) ToEdifactAcknowledgementSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactAcknowledgementSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactAcknowledgementSettingsResponsePtrOutput)
}

// The Edifact agreement acknowledgement settings.
type EdifactAcknowledgementSettingsResponseOutput struct{ *pulumi.OutputState }

func (EdifactAcknowledgementSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactAcknowledgementSettingsResponse)(nil)).Elem()
}

func (o EdifactAcknowledgementSettingsResponseOutput) ToEdifactAcknowledgementSettingsResponseOutput() EdifactAcknowledgementSettingsResponseOutput {
	return o
}

func (o EdifactAcknowledgementSettingsResponseOutput) ToEdifactAcknowledgementSettingsResponseOutputWithContext(ctx context.Context) EdifactAcknowledgementSettingsResponseOutput {
	return o
}

func (o EdifactAcknowledgementSettingsResponseOutput) ToEdifactAcknowledgementSettingsResponsePtrOutput() EdifactAcknowledgementSettingsResponsePtrOutput {
	return o.ToEdifactAcknowledgementSettingsResponsePtrOutputWithContext(context.Background())
}

func (o EdifactAcknowledgementSettingsResponseOutput) ToEdifactAcknowledgementSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactAcknowledgementSettingsResponsePtrOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) *EdifactAcknowledgementSettingsResponse {
		return &v
	}).(EdifactAcknowledgementSettingsResponsePtrOutput)
}

// The acknowledgement control number lower bound.
func (o EdifactAcknowledgementSettingsResponseOutput) AcknowledgementControlNumberLowerBound() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) int { return v.AcknowledgementControlNumberLowerBound }).(pulumi.IntOutput)
}

// The acknowledgement control number prefix.
func (o EdifactAcknowledgementSettingsResponseOutput) AcknowledgementControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) *string { return v.AcknowledgementControlNumberPrefix }).(pulumi.StringPtrOutput)
}

// The acknowledgement control number suffix.
func (o EdifactAcknowledgementSettingsResponseOutput) AcknowledgementControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) *string { return v.AcknowledgementControlNumberSuffix }).(pulumi.StringPtrOutput)
}

// The acknowledgement control number upper bound.
func (o EdifactAcknowledgementSettingsResponseOutput) AcknowledgementControlNumberUpperBound() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) int { return v.AcknowledgementControlNumberUpperBound }).(pulumi.IntOutput)
}

// The value indicating whether to batch functional acknowledgements.
func (o EdifactAcknowledgementSettingsResponseOutput) BatchFunctionalAcknowledgements() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) bool { return v.BatchFunctionalAcknowledgements }).(pulumi.BoolOutput)
}

// The value indicating whether to batch the technical acknowledgements.
func (o EdifactAcknowledgementSettingsResponseOutput) BatchTechnicalAcknowledgements() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) bool { return v.BatchTechnicalAcknowledgements }).(pulumi.BoolOutput)
}

// The value indicating whether functional acknowledgement is needed.
func (o EdifactAcknowledgementSettingsResponseOutput) NeedFunctionalAcknowledgement() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) bool { return v.NeedFunctionalAcknowledgement }).(pulumi.BoolOutput)
}

// The value indicating whether a loop is needed for valid messages.
func (o EdifactAcknowledgementSettingsResponseOutput) NeedLoopForValidMessages() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) bool { return v.NeedLoopForValidMessages }).(pulumi.BoolOutput)
}

// The value indicating whether technical acknowledgement is needed.
func (o EdifactAcknowledgementSettingsResponseOutput) NeedTechnicalAcknowledgement() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) bool { return v.NeedTechnicalAcknowledgement }).(pulumi.BoolOutput)
}

// The value indicating whether to rollover acknowledgement control number.
func (o EdifactAcknowledgementSettingsResponseOutput) RolloverAcknowledgementControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) bool { return v.RolloverAcknowledgementControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to send synchronous acknowledgement.
func (o EdifactAcknowledgementSettingsResponseOutput) SendSynchronousAcknowledgement() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) bool { return v.SendSynchronousAcknowledgement }).(pulumi.BoolOutput)
}

type EdifactAcknowledgementSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (EdifactAcknowledgementSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactAcknowledgementSettingsResponse)(nil)).Elem()
}

func (o EdifactAcknowledgementSettingsResponsePtrOutput) ToEdifactAcknowledgementSettingsResponsePtrOutput() EdifactAcknowledgementSettingsResponsePtrOutput {
	return o
}

func (o EdifactAcknowledgementSettingsResponsePtrOutput) ToEdifactAcknowledgementSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactAcknowledgementSettingsResponsePtrOutput {
	return o
}

func (o EdifactAcknowledgementSettingsResponsePtrOutput) Elem() EdifactAcknowledgementSettingsResponseOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) EdifactAcknowledgementSettingsResponse { return *v }).(EdifactAcknowledgementSettingsResponseOutput)
}

// The acknowledgement control number lower bound.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) AcknowledgementControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.AcknowledgementControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The acknowledgement control number prefix.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) AcknowledgementControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AcknowledgementControlNumberPrefix
	}).(pulumi.StringPtrOutput)
}

// The acknowledgement control number suffix.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) AcknowledgementControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AcknowledgementControlNumberSuffix
	}).(pulumi.StringPtrOutput)
}

// The acknowledgement control number upper bound.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) AcknowledgementControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.AcknowledgementControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The value indicating whether to batch functional acknowledgements.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) BatchFunctionalAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.BatchFunctionalAcknowledgements
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to batch the technical acknowledgements.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) BatchTechnicalAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.BatchTechnicalAcknowledgements
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether functional acknowledgement is needed.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) NeedFunctionalAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.NeedFunctionalAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether a loop is needed for valid messages.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) NeedLoopForValidMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.NeedLoopForValidMessages
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether technical acknowledgement is needed.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) NeedTechnicalAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.NeedTechnicalAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover acknowledgement control number.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) RolloverAcknowledgementControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.RolloverAcknowledgementControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to send synchronous acknowledgement.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) SendSynchronousAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.SendSynchronousAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

// The Edifact agreement content.
type EdifactAgreementContent struct {
	// The EDIFACT one-way receive agreement.
	ReceiveAgreement EdifactOneWayAgreement `pulumi:"receiveAgreement"`
	// The EDIFACT one-way send agreement.
	SendAgreement EdifactOneWayAgreement `pulumi:"sendAgreement"`
}

// EdifactAgreementContentInput is an input type that accepts EdifactAgreementContentArgs and EdifactAgreementContentOutput values.
// You can construct a concrete instance of `EdifactAgreementContentInput` via:
//
//          EdifactAgreementContentArgs{...}
type EdifactAgreementContentInput interface {
	pulumi.Input

	ToEdifactAgreementContentOutput() EdifactAgreementContentOutput
	ToEdifactAgreementContentOutputWithContext(context.Context) EdifactAgreementContentOutput
}

// The Edifact agreement content.
type EdifactAgreementContentArgs struct {
	// The EDIFACT one-way receive agreement.
	ReceiveAgreement EdifactOneWayAgreementInput `pulumi:"receiveAgreement"`
	// The EDIFACT one-way send agreement.
	SendAgreement EdifactOneWayAgreementInput `pulumi:"sendAgreement"`
}

func (EdifactAgreementContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactAgreementContent)(nil)).Elem()
}

func (i EdifactAgreementContentArgs) ToEdifactAgreementContentOutput() EdifactAgreementContentOutput {
	return i.ToEdifactAgreementContentOutputWithContext(context.Background())
}

func (i EdifactAgreementContentArgs) ToEdifactAgreementContentOutputWithContext(ctx context.Context) EdifactAgreementContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactAgreementContentOutput)
}

func (i EdifactAgreementContentArgs) ToEdifactAgreementContentPtrOutput() EdifactAgreementContentPtrOutput {
	return i.ToEdifactAgreementContentPtrOutputWithContext(context.Background())
}

func (i EdifactAgreementContentArgs) ToEdifactAgreementContentPtrOutputWithContext(ctx context.Context) EdifactAgreementContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactAgreementContentOutput).ToEdifactAgreementContentPtrOutputWithContext(ctx)
}

// EdifactAgreementContentPtrInput is an input type that accepts EdifactAgreementContentArgs, EdifactAgreementContentPtr and EdifactAgreementContentPtrOutput values.
// You can construct a concrete instance of `EdifactAgreementContentPtrInput` via:
//
//          EdifactAgreementContentArgs{...}
//
//  or:
//
//          nil
type EdifactAgreementContentPtrInput interface {
	pulumi.Input

	ToEdifactAgreementContentPtrOutput() EdifactAgreementContentPtrOutput
	ToEdifactAgreementContentPtrOutputWithContext(context.Context) EdifactAgreementContentPtrOutput
}

type edifactAgreementContentPtrType EdifactAgreementContentArgs

func EdifactAgreementContentPtr(v *EdifactAgreementContentArgs) EdifactAgreementContentPtrInput {
	return (*edifactAgreementContentPtrType)(v)
}

func (*edifactAgreementContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactAgreementContent)(nil)).Elem()
}

func (i *edifactAgreementContentPtrType) ToEdifactAgreementContentPtrOutput() EdifactAgreementContentPtrOutput {
	return i.ToEdifactAgreementContentPtrOutputWithContext(context.Background())
}

func (i *edifactAgreementContentPtrType) ToEdifactAgreementContentPtrOutputWithContext(ctx context.Context) EdifactAgreementContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactAgreementContentPtrOutput)
}

// The Edifact agreement content.
type EdifactAgreementContentOutput struct{ *pulumi.OutputState }

func (EdifactAgreementContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactAgreementContent)(nil)).Elem()
}

func (o EdifactAgreementContentOutput) ToEdifactAgreementContentOutput() EdifactAgreementContentOutput {
	return o
}

func (o EdifactAgreementContentOutput) ToEdifactAgreementContentOutputWithContext(ctx context.Context) EdifactAgreementContentOutput {
	return o
}

func (o EdifactAgreementContentOutput) ToEdifactAgreementContentPtrOutput() EdifactAgreementContentPtrOutput {
	return o.ToEdifactAgreementContentPtrOutputWithContext(context.Background())
}

func (o EdifactAgreementContentOutput) ToEdifactAgreementContentPtrOutputWithContext(ctx context.Context) EdifactAgreementContentPtrOutput {
	return o.ApplyT(func(v EdifactAgreementContent) *EdifactAgreementContent {
		return &v
	}).(EdifactAgreementContentPtrOutput)
}

// The EDIFACT one-way receive agreement.
func (o EdifactAgreementContentOutput) ReceiveAgreement() EdifactOneWayAgreementOutput {
	return o.ApplyT(func(v EdifactAgreementContent) EdifactOneWayAgreement { return v.ReceiveAgreement }).(EdifactOneWayAgreementOutput)
}

// The EDIFACT one-way send agreement.
func (o EdifactAgreementContentOutput) SendAgreement() EdifactOneWayAgreementOutput {
	return o.ApplyT(func(v EdifactAgreementContent) EdifactOneWayAgreement { return v.SendAgreement }).(EdifactOneWayAgreementOutput)
}

type EdifactAgreementContentPtrOutput struct{ *pulumi.OutputState }

func (EdifactAgreementContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactAgreementContent)(nil)).Elem()
}

func (o EdifactAgreementContentPtrOutput) ToEdifactAgreementContentPtrOutput() EdifactAgreementContentPtrOutput {
	return o
}

func (o EdifactAgreementContentPtrOutput) ToEdifactAgreementContentPtrOutputWithContext(ctx context.Context) EdifactAgreementContentPtrOutput {
	return o
}

func (o EdifactAgreementContentPtrOutput) Elem() EdifactAgreementContentOutput {
	return o.ApplyT(func(v *EdifactAgreementContent) EdifactAgreementContent { return *v }).(EdifactAgreementContentOutput)
}

// The EDIFACT one-way receive agreement.
func (o EdifactAgreementContentPtrOutput) ReceiveAgreement() EdifactOneWayAgreementPtrOutput {
	return o.ApplyT(func(v *EdifactAgreementContent) *EdifactOneWayAgreement {
		if v == nil {
			return nil
		}
		return &v.ReceiveAgreement
	}).(EdifactOneWayAgreementPtrOutput)
}

// The EDIFACT one-way send agreement.
func (o EdifactAgreementContentPtrOutput) SendAgreement() EdifactOneWayAgreementPtrOutput {
	return o.ApplyT(func(v *EdifactAgreementContent) *EdifactOneWayAgreement {
		if v == nil {
			return nil
		}
		return &v.SendAgreement
	}).(EdifactOneWayAgreementPtrOutput)
}

// The Edifact agreement content.
type EdifactAgreementContentResponse struct {
	// The EDIFACT one-way receive agreement.
	ReceiveAgreement EdifactOneWayAgreementResponse `pulumi:"receiveAgreement"`
	// The EDIFACT one-way send agreement.
	SendAgreement EdifactOneWayAgreementResponse `pulumi:"sendAgreement"`
}

// EdifactAgreementContentResponseInput is an input type that accepts EdifactAgreementContentResponseArgs and EdifactAgreementContentResponseOutput values.
// You can construct a concrete instance of `EdifactAgreementContentResponseInput` via:
//
//          EdifactAgreementContentResponseArgs{...}
type EdifactAgreementContentResponseInput interface {
	pulumi.Input

	ToEdifactAgreementContentResponseOutput() EdifactAgreementContentResponseOutput
	ToEdifactAgreementContentResponseOutputWithContext(context.Context) EdifactAgreementContentResponseOutput
}

// The Edifact agreement content.
type EdifactAgreementContentResponseArgs struct {
	// The EDIFACT one-way receive agreement.
	ReceiveAgreement EdifactOneWayAgreementResponseInput `pulumi:"receiveAgreement"`
	// The EDIFACT one-way send agreement.
	SendAgreement EdifactOneWayAgreementResponseInput `pulumi:"sendAgreement"`
}

func (EdifactAgreementContentResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactAgreementContentResponse)(nil)).Elem()
}

func (i EdifactAgreementContentResponseArgs) ToEdifactAgreementContentResponseOutput() EdifactAgreementContentResponseOutput {
	return i.ToEdifactAgreementContentResponseOutputWithContext(context.Background())
}

func (i EdifactAgreementContentResponseArgs) ToEdifactAgreementContentResponseOutputWithContext(ctx context.Context) EdifactAgreementContentResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactAgreementContentResponseOutput)
}

func (i EdifactAgreementContentResponseArgs) ToEdifactAgreementContentResponsePtrOutput() EdifactAgreementContentResponsePtrOutput {
	return i.ToEdifactAgreementContentResponsePtrOutputWithContext(context.Background())
}

func (i EdifactAgreementContentResponseArgs) ToEdifactAgreementContentResponsePtrOutputWithContext(ctx context.Context) EdifactAgreementContentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactAgreementContentResponseOutput).ToEdifactAgreementContentResponsePtrOutputWithContext(ctx)
}

// EdifactAgreementContentResponsePtrInput is an input type that accepts EdifactAgreementContentResponseArgs, EdifactAgreementContentResponsePtr and EdifactAgreementContentResponsePtrOutput values.
// You can construct a concrete instance of `EdifactAgreementContentResponsePtrInput` via:
//
//          EdifactAgreementContentResponseArgs{...}
//
//  or:
//
//          nil
type EdifactAgreementContentResponsePtrInput interface {
	pulumi.Input

	ToEdifactAgreementContentResponsePtrOutput() EdifactAgreementContentResponsePtrOutput
	ToEdifactAgreementContentResponsePtrOutputWithContext(context.Context) EdifactAgreementContentResponsePtrOutput
}

type edifactAgreementContentResponsePtrType EdifactAgreementContentResponseArgs

func EdifactAgreementContentResponsePtr(v *EdifactAgreementContentResponseArgs) EdifactAgreementContentResponsePtrInput {
	return (*edifactAgreementContentResponsePtrType)(v)
}

func (*edifactAgreementContentResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactAgreementContentResponse)(nil)).Elem()
}

func (i *edifactAgreementContentResponsePtrType) ToEdifactAgreementContentResponsePtrOutput() EdifactAgreementContentResponsePtrOutput {
	return i.ToEdifactAgreementContentResponsePtrOutputWithContext(context.Background())
}

func (i *edifactAgreementContentResponsePtrType) ToEdifactAgreementContentResponsePtrOutputWithContext(ctx context.Context) EdifactAgreementContentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactAgreementContentResponsePtrOutput)
}

// The Edifact agreement content.
type EdifactAgreementContentResponseOutput struct{ *pulumi.OutputState }

func (EdifactAgreementContentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactAgreementContentResponse)(nil)).Elem()
}

func (o EdifactAgreementContentResponseOutput) ToEdifactAgreementContentResponseOutput() EdifactAgreementContentResponseOutput {
	return o
}

func (o EdifactAgreementContentResponseOutput) ToEdifactAgreementContentResponseOutputWithContext(ctx context.Context) EdifactAgreementContentResponseOutput {
	return o
}

func (o EdifactAgreementContentResponseOutput) ToEdifactAgreementContentResponsePtrOutput() EdifactAgreementContentResponsePtrOutput {
	return o.ToEdifactAgreementContentResponsePtrOutputWithContext(context.Background())
}

func (o EdifactAgreementContentResponseOutput) ToEdifactAgreementContentResponsePtrOutputWithContext(ctx context.Context) EdifactAgreementContentResponsePtrOutput {
	return o.ApplyT(func(v EdifactAgreementContentResponse) *EdifactAgreementContentResponse {
		return &v
	}).(EdifactAgreementContentResponsePtrOutput)
}

// The EDIFACT one-way receive agreement.
func (o EdifactAgreementContentResponseOutput) ReceiveAgreement() EdifactOneWayAgreementResponseOutput {
	return o.ApplyT(func(v EdifactAgreementContentResponse) EdifactOneWayAgreementResponse { return v.ReceiveAgreement }).(EdifactOneWayAgreementResponseOutput)
}

// The EDIFACT one-way send agreement.
func (o EdifactAgreementContentResponseOutput) SendAgreement() EdifactOneWayAgreementResponseOutput {
	return o.ApplyT(func(v EdifactAgreementContentResponse) EdifactOneWayAgreementResponse { return v.SendAgreement }).(EdifactOneWayAgreementResponseOutput)
}

type EdifactAgreementContentResponsePtrOutput struct{ *pulumi.OutputState }

func (EdifactAgreementContentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactAgreementContentResponse)(nil)).Elem()
}

func (o EdifactAgreementContentResponsePtrOutput) ToEdifactAgreementContentResponsePtrOutput() EdifactAgreementContentResponsePtrOutput {
	return o
}

func (o EdifactAgreementContentResponsePtrOutput) ToEdifactAgreementContentResponsePtrOutputWithContext(ctx context.Context) EdifactAgreementContentResponsePtrOutput {
	return o
}

func (o EdifactAgreementContentResponsePtrOutput) Elem() EdifactAgreementContentResponseOutput {
	return o.ApplyT(func(v *EdifactAgreementContentResponse) EdifactAgreementContentResponse { return *v }).(EdifactAgreementContentResponseOutput)
}

// The EDIFACT one-way receive agreement.
func (o EdifactAgreementContentResponsePtrOutput) ReceiveAgreement() EdifactOneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v *EdifactAgreementContentResponse) *EdifactOneWayAgreementResponse {
		if v == nil {
			return nil
		}
		return &v.ReceiveAgreement
	}).(EdifactOneWayAgreementResponsePtrOutput)
}

// The EDIFACT one-way send agreement.
func (o EdifactAgreementContentResponsePtrOutput) SendAgreement() EdifactOneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v *EdifactAgreementContentResponse) *EdifactOneWayAgreementResponse {
		if v == nil {
			return nil
		}
		return &v.SendAgreement
	}).(EdifactOneWayAgreementResponsePtrOutput)
}

// The Edifact delimiter override settings.
type EdifactDelimiterOverride struct {
	// The component separator.
	ComponentSeparator int `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator int `pulumi:"dataElementSeparator"`
	// The decimal point indicator.
	DecimalPointIndicator string `pulumi:"decimalPointIndicator"`
	// The message association assigned code.
	MessageAssociationAssignedCode *string `pulumi:"messageAssociationAssignedCode"`
	// The message id.
	MessageId *string `pulumi:"messageId"`
	// The message release.
	MessageRelease *string `pulumi:"messageRelease"`
	// The message version.
	MessageVersion *string `pulumi:"messageVersion"`
	// The release indicator.
	ReleaseIndicator int `pulumi:"releaseIndicator"`
	// The repetition separator.
	RepetitionSeparator int `pulumi:"repetitionSeparator"`
	// The segment terminator.
	SegmentTerminator int `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix string `pulumi:"segmentTerminatorSuffix"`
	// The target namespace on which this delimiter settings has to be applied.
	TargetNamespace *string `pulumi:"targetNamespace"`
}

// EdifactDelimiterOverrideInput is an input type that accepts EdifactDelimiterOverrideArgs and EdifactDelimiterOverrideOutput values.
// You can construct a concrete instance of `EdifactDelimiterOverrideInput` via:
//
//          EdifactDelimiterOverrideArgs{...}
type EdifactDelimiterOverrideInput interface {
	pulumi.Input

	ToEdifactDelimiterOverrideOutput() EdifactDelimiterOverrideOutput
	ToEdifactDelimiterOverrideOutputWithContext(context.Context) EdifactDelimiterOverrideOutput
}

// The Edifact delimiter override settings.
type EdifactDelimiterOverrideArgs struct {
	// The component separator.
	ComponentSeparator pulumi.IntInput `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator pulumi.IntInput `pulumi:"dataElementSeparator"`
	// The decimal point indicator.
	DecimalPointIndicator pulumi.StringInput `pulumi:"decimalPointIndicator"`
	// The message association assigned code.
	MessageAssociationAssignedCode pulumi.StringPtrInput `pulumi:"messageAssociationAssignedCode"`
	// The message id.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
	// The message release.
	MessageRelease pulumi.StringPtrInput `pulumi:"messageRelease"`
	// The message version.
	MessageVersion pulumi.StringPtrInput `pulumi:"messageVersion"`
	// The release indicator.
	ReleaseIndicator pulumi.IntInput `pulumi:"releaseIndicator"`
	// The repetition separator.
	RepetitionSeparator pulumi.IntInput `pulumi:"repetitionSeparator"`
	// The segment terminator.
	SegmentTerminator pulumi.IntInput `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix pulumi.StringInput `pulumi:"segmentTerminatorSuffix"`
	// The target namespace on which this delimiter settings has to be applied.
	TargetNamespace pulumi.StringPtrInput `pulumi:"targetNamespace"`
}

func (EdifactDelimiterOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactDelimiterOverride)(nil)).Elem()
}

func (i EdifactDelimiterOverrideArgs) ToEdifactDelimiterOverrideOutput() EdifactDelimiterOverrideOutput {
	return i.ToEdifactDelimiterOverrideOutputWithContext(context.Background())
}

func (i EdifactDelimiterOverrideArgs) ToEdifactDelimiterOverrideOutputWithContext(ctx context.Context) EdifactDelimiterOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactDelimiterOverrideOutput)
}

// EdifactDelimiterOverrideArrayInput is an input type that accepts EdifactDelimiterOverrideArray and EdifactDelimiterOverrideArrayOutput values.
// You can construct a concrete instance of `EdifactDelimiterOverrideArrayInput` via:
//
//          EdifactDelimiterOverrideArray{ EdifactDelimiterOverrideArgs{...} }
type EdifactDelimiterOverrideArrayInput interface {
	pulumi.Input

	ToEdifactDelimiterOverrideArrayOutput() EdifactDelimiterOverrideArrayOutput
	ToEdifactDelimiterOverrideArrayOutputWithContext(context.Context) EdifactDelimiterOverrideArrayOutput
}

type EdifactDelimiterOverrideArray []EdifactDelimiterOverrideInput

func (EdifactDelimiterOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactDelimiterOverride)(nil)).Elem()
}

func (i EdifactDelimiterOverrideArray) ToEdifactDelimiterOverrideArrayOutput() EdifactDelimiterOverrideArrayOutput {
	return i.ToEdifactDelimiterOverrideArrayOutputWithContext(context.Background())
}

func (i EdifactDelimiterOverrideArray) ToEdifactDelimiterOverrideArrayOutputWithContext(ctx context.Context) EdifactDelimiterOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactDelimiterOverrideArrayOutput)
}

// The Edifact delimiter override settings.
type EdifactDelimiterOverrideOutput struct{ *pulumi.OutputState }

func (EdifactDelimiterOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactDelimiterOverride)(nil)).Elem()
}

func (o EdifactDelimiterOverrideOutput) ToEdifactDelimiterOverrideOutput() EdifactDelimiterOverrideOutput {
	return o
}

func (o EdifactDelimiterOverrideOutput) ToEdifactDelimiterOverrideOutputWithContext(ctx context.Context) EdifactDelimiterOverrideOutput {
	return o
}

// The component separator.
func (o EdifactDelimiterOverrideOutput) ComponentSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactDelimiterOverride) int { return v.ComponentSeparator }).(pulumi.IntOutput)
}

// The data element separator.
func (o EdifactDelimiterOverrideOutput) DataElementSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactDelimiterOverride) int { return v.DataElementSeparator }).(pulumi.IntOutput)
}

// The decimal point indicator.
func (o EdifactDelimiterOverrideOutput) DecimalPointIndicator() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactDelimiterOverride) string { return v.DecimalPointIndicator }).(pulumi.StringOutput)
}

// The message association assigned code.
func (o EdifactDelimiterOverrideOutput) MessageAssociationAssignedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverride) *string { return v.MessageAssociationAssignedCode }).(pulumi.StringPtrOutput)
}

// The message id.
func (o EdifactDelimiterOverrideOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverride) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// The message release.
func (o EdifactDelimiterOverrideOutput) MessageRelease() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverride) *string { return v.MessageRelease }).(pulumi.StringPtrOutput)
}

// The message version.
func (o EdifactDelimiterOverrideOutput) MessageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverride) *string { return v.MessageVersion }).(pulumi.StringPtrOutput)
}

// The release indicator.
func (o EdifactDelimiterOverrideOutput) ReleaseIndicator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactDelimiterOverride) int { return v.ReleaseIndicator }).(pulumi.IntOutput)
}

// The repetition separator.
func (o EdifactDelimiterOverrideOutput) RepetitionSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactDelimiterOverride) int { return v.RepetitionSeparator }).(pulumi.IntOutput)
}

// The segment terminator.
func (o EdifactDelimiterOverrideOutput) SegmentTerminator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactDelimiterOverride) int { return v.SegmentTerminator }).(pulumi.IntOutput)
}

// The segment terminator suffix.
func (o EdifactDelimiterOverrideOutput) SegmentTerminatorSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactDelimiterOverride) string { return v.SegmentTerminatorSuffix }).(pulumi.StringOutput)
}

// The target namespace on which this delimiter settings has to be applied.
func (o EdifactDelimiterOverrideOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverride) *string { return v.TargetNamespace }).(pulumi.StringPtrOutput)
}

type EdifactDelimiterOverrideArrayOutput struct{ *pulumi.OutputState }

func (EdifactDelimiterOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactDelimiterOverride)(nil)).Elem()
}

func (o EdifactDelimiterOverrideArrayOutput) ToEdifactDelimiterOverrideArrayOutput() EdifactDelimiterOverrideArrayOutput {
	return o
}

func (o EdifactDelimiterOverrideArrayOutput) ToEdifactDelimiterOverrideArrayOutputWithContext(ctx context.Context) EdifactDelimiterOverrideArrayOutput {
	return o
}

func (o EdifactDelimiterOverrideArrayOutput) Index(i pulumi.IntInput) EdifactDelimiterOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdifactDelimiterOverride {
		return vs[0].([]EdifactDelimiterOverride)[vs[1].(int)]
	}).(EdifactDelimiterOverrideOutput)
}

// The Edifact delimiter override settings.
type EdifactDelimiterOverrideResponse struct {
	// The component separator.
	ComponentSeparator int `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator int `pulumi:"dataElementSeparator"`
	// The decimal point indicator.
	DecimalPointIndicator string `pulumi:"decimalPointIndicator"`
	// The message association assigned code.
	MessageAssociationAssignedCode *string `pulumi:"messageAssociationAssignedCode"`
	// The message id.
	MessageId *string `pulumi:"messageId"`
	// The message release.
	MessageRelease *string `pulumi:"messageRelease"`
	// The message version.
	MessageVersion *string `pulumi:"messageVersion"`
	// The release indicator.
	ReleaseIndicator int `pulumi:"releaseIndicator"`
	// The repetition separator.
	RepetitionSeparator int `pulumi:"repetitionSeparator"`
	// The segment terminator.
	SegmentTerminator int `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix string `pulumi:"segmentTerminatorSuffix"`
	// The target namespace on which this delimiter settings has to be applied.
	TargetNamespace *string `pulumi:"targetNamespace"`
}

// EdifactDelimiterOverrideResponseInput is an input type that accepts EdifactDelimiterOverrideResponseArgs and EdifactDelimiterOverrideResponseOutput values.
// You can construct a concrete instance of `EdifactDelimiterOverrideResponseInput` via:
//
//          EdifactDelimiterOverrideResponseArgs{...}
type EdifactDelimiterOverrideResponseInput interface {
	pulumi.Input

	ToEdifactDelimiterOverrideResponseOutput() EdifactDelimiterOverrideResponseOutput
	ToEdifactDelimiterOverrideResponseOutputWithContext(context.Context) EdifactDelimiterOverrideResponseOutput
}

// The Edifact delimiter override settings.
type EdifactDelimiterOverrideResponseArgs struct {
	// The component separator.
	ComponentSeparator pulumi.IntInput `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator pulumi.IntInput `pulumi:"dataElementSeparator"`
	// The decimal point indicator.
	DecimalPointIndicator pulumi.StringInput `pulumi:"decimalPointIndicator"`
	// The message association assigned code.
	MessageAssociationAssignedCode pulumi.StringPtrInput `pulumi:"messageAssociationAssignedCode"`
	// The message id.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
	// The message release.
	MessageRelease pulumi.StringPtrInput `pulumi:"messageRelease"`
	// The message version.
	MessageVersion pulumi.StringPtrInput `pulumi:"messageVersion"`
	// The release indicator.
	ReleaseIndicator pulumi.IntInput `pulumi:"releaseIndicator"`
	// The repetition separator.
	RepetitionSeparator pulumi.IntInput `pulumi:"repetitionSeparator"`
	// The segment terminator.
	SegmentTerminator pulumi.IntInput `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix pulumi.StringInput `pulumi:"segmentTerminatorSuffix"`
	// The target namespace on which this delimiter settings has to be applied.
	TargetNamespace pulumi.StringPtrInput `pulumi:"targetNamespace"`
}

func (EdifactDelimiterOverrideResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactDelimiterOverrideResponse)(nil)).Elem()
}

func (i EdifactDelimiterOverrideResponseArgs) ToEdifactDelimiterOverrideResponseOutput() EdifactDelimiterOverrideResponseOutput {
	return i.ToEdifactDelimiterOverrideResponseOutputWithContext(context.Background())
}

func (i EdifactDelimiterOverrideResponseArgs) ToEdifactDelimiterOverrideResponseOutputWithContext(ctx context.Context) EdifactDelimiterOverrideResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactDelimiterOverrideResponseOutput)
}

// EdifactDelimiterOverrideResponseArrayInput is an input type that accepts EdifactDelimiterOverrideResponseArray and EdifactDelimiterOverrideResponseArrayOutput values.
// You can construct a concrete instance of `EdifactDelimiterOverrideResponseArrayInput` via:
//
//          EdifactDelimiterOverrideResponseArray{ EdifactDelimiterOverrideResponseArgs{...} }
type EdifactDelimiterOverrideResponseArrayInput interface {
	pulumi.Input

	ToEdifactDelimiterOverrideResponseArrayOutput() EdifactDelimiterOverrideResponseArrayOutput
	ToEdifactDelimiterOverrideResponseArrayOutputWithContext(context.Context) EdifactDelimiterOverrideResponseArrayOutput
}

type EdifactDelimiterOverrideResponseArray []EdifactDelimiterOverrideResponseInput

func (EdifactDelimiterOverrideResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactDelimiterOverrideResponse)(nil)).Elem()
}

func (i EdifactDelimiterOverrideResponseArray) ToEdifactDelimiterOverrideResponseArrayOutput() EdifactDelimiterOverrideResponseArrayOutput {
	return i.ToEdifactDelimiterOverrideResponseArrayOutputWithContext(context.Background())
}

func (i EdifactDelimiterOverrideResponseArray) ToEdifactDelimiterOverrideResponseArrayOutputWithContext(ctx context.Context) EdifactDelimiterOverrideResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactDelimiterOverrideResponseArrayOutput)
}

// The Edifact delimiter override settings.
type EdifactDelimiterOverrideResponseOutput struct{ *pulumi.OutputState }

func (EdifactDelimiterOverrideResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactDelimiterOverrideResponse)(nil)).Elem()
}

func (o EdifactDelimiterOverrideResponseOutput) ToEdifactDelimiterOverrideResponseOutput() EdifactDelimiterOverrideResponseOutput {
	return o
}

func (o EdifactDelimiterOverrideResponseOutput) ToEdifactDelimiterOverrideResponseOutputWithContext(ctx context.Context) EdifactDelimiterOverrideResponseOutput {
	return o
}

// The component separator.
func (o EdifactDelimiterOverrideResponseOutput) ComponentSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) int { return v.ComponentSeparator }).(pulumi.IntOutput)
}

// The data element separator.
func (o EdifactDelimiterOverrideResponseOutput) DataElementSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) int { return v.DataElementSeparator }).(pulumi.IntOutput)
}

// The decimal point indicator.
func (o EdifactDelimiterOverrideResponseOutput) DecimalPointIndicator() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) string { return v.DecimalPointIndicator }).(pulumi.StringOutput)
}

// The message association assigned code.
func (o EdifactDelimiterOverrideResponseOutput) MessageAssociationAssignedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) *string { return v.MessageAssociationAssignedCode }).(pulumi.StringPtrOutput)
}

// The message id.
func (o EdifactDelimiterOverrideResponseOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// The message release.
func (o EdifactDelimiterOverrideResponseOutput) MessageRelease() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) *string { return v.MessageRelease }).(pulumi.StringPtrOutput)
}

// The message version.
func (o EdifactDelimiterOverrideResponseOutput) MessageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) *string { return v.MessageVersion }).(pulumi.StringPtrOutput)
}

// The release indicator.
func (o EdifactDelimiterOverrideResponseOutput) ReleaseIndicator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) int { return v.ReleaseIndicator }).(pulumi.IntOutput)
}

// The repetition separator.
func (o EdifactDelimiterOverrideResponseOutput) RepetitionSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) int { return v.RepetitionSeparator }).(pulumi.IntOutput)
}

// The segment terminator.
func (o EdifactDelimiterOverrideResponseOutput) SegmentTerminator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) int { return v.SegmentTerminator }).(pulumi.IntOutput)
}

// The segment terminator suffix.
func (o EdifactDelimiterOverrideResponseOutput) SegmentTerminatorSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) string { return v.SegmentTerminatorSuffix }).(pulumi.StringOutput)
}

// The target namespace on which this delimiter settings has to be applied.
func (o EdifactDelimiterOverrideResponseOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) *string { return v.TargetNamespace }).(pulumi.StringPtrOutput)
}

type EdifactDelimiterOverrideResponseArrayOutput struct{ *pulumi.OutputState }

func (EdifactDelimiterOverrideResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactDelimiterOverrideResponse)(nil)).Elem()
}

func (o EdifactDelimiterOverrideResponseArrayOutput) ToEdifactDelimiterOverrideResponseArrayOutput() EdifactDelimiterOverrideResponseArrayOutput {
	return o
}

func (o EdifactDelimiterOverrideResponseArrayOutput) ToEdifactDelimiterOverrideResponseArrayOutputWithContext(ctx context.Context) EdifactDelimiterOverrideResponseArrayOutput {
	return o
}

func (o EdifactDelimiterOverrideResponseArrayOutput) Index(i pulumi.IntInput) EdifactDelimiterOverrideResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdifactDelimiterOverrideResponse {
		return vs[0].([]EdifactDelimiterOverrideResponse)[vs[1].(int)]
	}).(EdifactDelimiterOverrideResponseOutput)
}

// The Edifact envelope override settings.
type EdifactEnvelopeOverride struct {
	// The application password.
	ApplicationPassword *string `pulumi:"applicationPassword"`
	// The association assigned code.
	AssociationAssignedCode *string `pulumi:"associationAssignedCode"`
	// The controlling agency code.
	ControllingAgencyCode *string `pulumi:"controllingAgencyCode"`
	// The functional group id.
	FunctionalGroupId *string `pulumi:"functionalGroupId"`
	// The group header message release.
	GroupHeaderMessageRelease *string `pulumi:"groupHeaderMessageRelease"`
	// The group header message version.
	GroupHeaderMessageVersion *string `pulumi:"groupHeaderMessageVersion"`
	// The message association assigned code.
	MessageAssociationAssignedCode *string `pulumi:"messageAssociationAssignedCode"`
	// The message id on which this envelope settings has to be applied.
	MessageId *string `pulumi:"messageId"`
	// The message release version on which this envelope settings has to be applied.
	MessageRelease *string `pulumi:"messageRelease"`
	// The message version on which this envelope settings has to be applied.
	MessageVersion *string `pulumi:"messageVersion"`
	// The receiver application id.
	ReceiverApplicationId *string `pulumi:"receiverApplicationId"`
	// The receiver application qualifier.
	ReceiverApplicationQualifier *string `pulumi:"receiverApplicationQualifier"`
	// The sender application id.
	SenderApplicationId *string `pulumi:"senderApplicationId"`
	// The sender application qualifier.
	SenderApplicationQualifier *string `pulumi:"senderApplicationQualifier"`
	// The target namespace on which this envelope settings has to be applied.
	TargetNamespace *string `pulumi:"targetNamespace"`
}

// EdifactEnvelopeOverrideInput is an input type that accepts EdifactEnvelopeOverrideArgs and EdifactEnvelopeOverrideOutput values.
// You can construct a concrete instance of `EdifactEnvelopeOverrideInput` via:
//
//          EdifactEnvelopeOverrideArgs{...}
type EdifactEnvelopeOverrideInput interface {
	pulumi.Input

	ToEdifactEnvelopeOverrideOutput() EdifactEnvelopeOverrideOutput
	ToEdifactEnvelopeOverrideOutputWithContext(context.Context) EdifactEnvelopeOverrideOutput
}

// The Edifact envelope override settings.
type EdifactEnvelopeOverrideArgs struct {
	// The application password.
	ApplicationPassword pulumi.StringPtrInput `pulumi:"applicationPassword"`
	// The association assigned code.
	AssociationAssignedCode pulumi.StringPtrInput `pulumi:"associationAssignedCode"`
	// The controlling agency code.
	ControllingAgencyCode pulumi.StringPtrInput `pulumi:"controllingAgencyCode"`
	// The functional group id.
	FunctionalGroupId pulumi.StringPtrInput `pulumi:"functionalGroupId"`
	// The group header message release.
	GroupHeaderMessageRelease pulumi.StringPtrInput `pulumi:"groupHeaderMessageRelease"`
	// The group header message version.
	GroupHeaderMessageVersion pulumi.StringPtrInput `pulumi:"groupHeaderMessageVersion"`
	// The message association assigned code.
	MessageAssociationAssignedCode pulumi.StringPtrInput `pulumi:"messageAssociationAssignedCode"`
	// The message id on which this envelope settings has to be applied.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
	// The message release version on which this envelope settings has to be applied.
	MessageRelease pulumi.StringPtrInput `pulumi:"messageRelease"`
	// The message version on which this envelope settings has to be applied.
	MessageVersion pulumi.StringPtrInput `pulumi:"messageVersion"`
	// The receiver application id.
	ReceiverApplicationId pulumi.StringPtrInput `pulumi:"receiverApplicationId"`
	// The receiver application qualifier.
	ReceiverApplicationQualifier pulumi.StringPtrInput `pulumi:"receiverApplicationQualifier"`
	// The sender application id.
	SenderApplicationId pulumi.StringPtrInput `pulumi:"senderApplicationId"`
	// The sender application qualifier.
	SenderApplicationQualifier pulumi.StringPtrInput `pulumi:"senderApplicationQualifier"`
	// The target namespace on which this envelope settings has to be applied.
	TargetNamespace pulumi.StringPtrInput `pulumi:"targetNamespace"`
}

func (EdifactEnvelopeOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactEnvelopeOverride)(nil)).Elem()
}

func (i EdifactEnvelopeOverrideArgs) ToEdifactEnvelopeOverrideOutput() EdifactEnvelopeOverrideOutput {
	return i.ToEdifactEnvelopeOverrideOutputWithContext(context.Background())
}

func (i EdifactEnvelopeOverrideArgs) ToEdifactEnvelopeOverrideOutputWithContext(ctx context.Context) EdifactEnvelopeOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactEnvelopeOverrideOutput)
}

// EdifactEnvelopeOverrideArrayInput is an input type that accepts EdifactEnvelopeOverrideArray and EdifactEnvelopeOverrideArrayOutput values.
// You can construct a concrete instance of `EdifactEnvelopeOverrideArrayInput` via:
//
//          EdifactEnvelopeOverrideArray{ EdifactEnvelopeOverrideArgs{...} }
type EdifactEnvelopeOverrideArrayInput interface {
	pulumi.Input

	ToEdifactEnvelopeOverrideArrayOutput() EdifactEnvelopeOverrideArrayOutput
	ToEdifactEnvelopeOverrideArrayOutputWithContext(context.Context) EdifactEnvelopeOverrideArrayOutput
}

type EdifactEnvelopeOverrideArray []EdifactEnvelopeOverrideInput

func (EdifactEnvelopeOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactEnvelopeOverride)(nil)).Elem()
}

func (i EdifactEnvelopeOverrideArray) ToEdifactEnvelopeOverrideArrayOutput() EdifactEnvelopeOverrideArrayOutput {
	return i.ToEdifactEnvelopeOverrideArrayOutputWithContext(context.Background())
}

func (i EdifactEnvelopeOverrideArray) ToEdifactEnvelopeOverrideArrayOutputWithContext(ctx context.Context) EdifactEnvelopeOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactEnvelopeOverrideArrayOutput)
}

// The Edifact envelope override settings.
type EdifactEnvelopeOverrideOutput struct{ *pulumi.OutputState }

func (EdifactEnvelopeOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactEnvelopeOverride)(nil)).Elem()
}

func (o EdifactEnvelopeOverrideOutput) ToEdifactEnvelopeOverrideOutput() EdifactEnvelopeOverrideOutput {
	return o
}

func (o EdifactEnvelopeOverrideOutput) ToEdifactEnvelopeOverrideOutputWithContext(ctx context.Context) EdifactEnvelopeOverrideOutput {
	return o
}

// The application password.
func (o EdifactEnvelopeOverrideOutput) ApplicationPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverride) *string { return v.ApplicationPassword }).(pulumi.StringPtrOutput)
}

// The association assigned code.
func (o EdifactEnvelopeOverrideOutput) AssociationAssignedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverride) *string { return v.AssociationAssignedCode }).(pulumi.StringPtrOutput)
}

// The controlling agency code.
func (o EdifactEnvelopeOverrideOutput) ControllingAgencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverride) *string { return v.ControllingAgencyCode }).(pulumi.StringPtrOutput)
}

// The functional group id.
func (o EdifactEnvelopeOverrideOutput) FunctionalGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverride) *string { return v.FunctionalGroupId }).(pulumi.StringPtrOutput)
}

// The group header message release.
func (o EdifactEnvelopeOverrideOutput) GroupHeaderMessageRelease() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverride) *string { return v.GroupHeaderMessageRelease }).(pulumi.StringPtrOutput)
}

// The group header message version.
func (o EdifactEnvelopeOverrideOutput) GroupHeaderMessageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverride) *string { return v.GroupHeaderMessageVersion }).(pulumi.StringPtrOutput)
}

// The message association assigned code.
func (o EdifactEnvelopeOverrideOutput) MessageAssociationAssignedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverride) *string { return v.MessageAssociationAssignedCode }).(pulumi.StringPtrOutput)
}

// The message id on which this envelope settings has to be applied.
func (o EdifactEnvelopeOverrideOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverride) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// The message release version on which this envelope settings has to be applied.
func (o EdifactEnvelopeOverrideOutput) MessageRelease() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverride) *string { return v.MessageRelease }).(pulumi.StringPtrOutput)
}

// The message version on which this envelope settings has to be applied.
func (o EdifactEnvelopeOverrideOutput) MessageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverride) *string { return v.MessageVersion }).(pulumi.StringPtrOutput)
}

// The receiver application id.
func (o EdifactEnvelopeOverrideOutput) ReceiverApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverride) *string { return v.ReceiverApplicationId }).(pulumi.StringPtrOutput)
}

// The receiver application qualifier.
func (o EdifactEnvelopeOverrideOutput) ReceiverApplicationQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverride) *string { return v.ReceiverApplicationQualifier }).(pulumi.StringPtrOutput)
}

// The sender application id.
func (o EdifactEnvelopeOverrideOutput) SenderApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverride) *string { return v.SenderApplicationId }).(pulumi.StringPtrOutput)
}

// The sender application qualifier.
func (o EdifactEnvelopeOverrideOutput) SenderApplicationQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverride) *string { return v.SenderApplicationQualifier }).(pulumi.StringPtrOutput)
}

// The target namespace on which this envelope settings has to be applied.
func (o EdifactEnvelopeOverrideOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverride) *string { return v.TargetNamespace }).(pulumi.StringPtrOutput)
}

type EdifactEnvelopeOverrideArrayOutput struct{ *pulumi.OutputState }

func (EdifactEnvelopeOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactEnvelopeOverride)(nil)).Elem()
}

func (o EdifactEnvelopeOverrideArrayOutput) ToEdifactEnvelopeOverrideArrayOutput() EdifactEnvelopeOverrideArrayOutput {
	return o
}

func (o EdifactEnvelopeOverrideArrayOutput) ToEdifactEnvelopeOverrideArrayOutputWithContext(ctx context.Context) EdifactEnvelopeOverrideArrayOutput {
	return o
}

func (o EdifactEnvelopeOverrideArrayOutput) Index(i pulumi.IntInput) EdifactEnvelopeOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdifactEnvelopeOverride {
		return vs[0].([]EdifactEnvelopeOverride)[vs[1].(int)]
	}).(EdifactEnvelopeOverrideOutput)
}

// The Edifact envelope override settings.
type EdifactEnvelopeOverrideResponse struct {
	// The application password.
	ApplicationPassword *string `pulumi:"applicationPassword"`
	// The association assigned code.
	AssociationAssignedCode *string `pulumi:"associationAssignedCode"`
	// The controlling agency code.
	ControllingAgencyCode *string `pulumi:"controllingAgencyCode"`
	// The functional group id.
	FunctionalGroupId *string `pulumi:"functionalGroupId"`
	// The group header message release.
	GroupHeaderMessageRelease *string `pulumi:"groupHeaderMessageRelease"`
	// The group header message version.
	GroupHeaderMessageVersion *string `pulumi:"groupHeaderMessageVersion"`
	// The message association assigned code.
	MessageAssociationAssignedCode *string `pulumi:"messageAssociationAssignedCode"`
	// The message id on which this envelope settings has to be applied.
	MessageId *string `pulumi:"messageId"`
	// The message release version on which this envelope settings has to be applied.
	MessageRelease *string `pulumi:"messageRelease"`
	// The message version on which this envelope settings has to be applied.
	MessageVersion *string `pulumi:"messageVersion"`
	// The receiver application id.
	ReceiverApplicationId *string `pulumi:"receiverApplicationId"`
	// The receiver application qualifier.
	ReceiverApplicationQualifier *string `pulumi:"receiverApplicationQualifier"`
	// The sender application id.
	SenderApplicationId *string `pulumi:"senderApplicationId"`
	// The sender application qualifier.
	SenderApplicationQualifier *string `pulumi:"senderApplicationQualifier"`
	// The target namespace on which this envelope settings has to be applied.
	TargetNamespace *string `pulumi:"targetNamespace"`
}

// EdifactEnvelopeOverrideResponseInput is an input type that accepts EdifactEnvelopeOverrideResponseArgs and EdifactEnvelopeOverrideResponseOutput values.
// You can construct a concrete instance of `EdifactEnvelopeOverrideResponseInput` via:
//
//          EdifactEnvelopeOverrideResponseArgs{...}
type EdifactEnvelopeOverrideResponseInput interface {
	pulumi.Input

	ToEdifactEnvelopeOverrideResponseOutput() EdifactEnvelopeOverrideResponseOutput
	ToEdifactEnvelopeOverrideResponseOutputWithContext(context.Context) EdifactEnvelopeOverrideResponseOutput
}

// The Edifact envelope override settings.
type EdifactEnvelopeOverrideResponseArgs struct {
	// The application password.
	ApplicationPassword pulumi.StringPtrInput `pulumi:"applicationPassword"`
	// The association assigned code.
	AssociationAssignedCode pulumi.StringPtrInput `pulumi:"associationAssignedCode"`
	// The controlling agency code.
	ControllingAgencyCode pulumi.StringPtrInput `pulumi:"controllingAgencyCode"`
	// The functional group id.
	FunctionalGroupId pulumi.StringPtrInput `pulumi:"functionalGroupId"`
	// The group header message release.
	GroupHeaderMessageRelease pulumi.StringPtrInput `pulumi:"groupHeaderMessageRelease"`
	// The group header message version.
	GroupHeaderMessageVersion pulumi.StringPtrInput `pulumi:"groupHeaderMessageVersion"`
	// The message association assigned code.
	MessageAssociationAssignedCode pulumi.StringPtrInput `pulumi:"messageAssociationAssignedCode"`
	// The message id on which this envelope settings has to be applied.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
	// The message release version on which this envelope settings has to be applied.
	MessageRelease pulumi.StringPtrInput `pulumi:"messageRelease"`
	// The message version on which this envelope settings has to be applied.
	MessageVersion pulumi.StringPtrInput `pulumi:"messageVersion"`
	// The receiver application id.
	ReceiverApplicationId pulumi.StringPtrInput `pulumi:"receiverApplicationId"`
	// The receiver application qualifier.
	ReceiverApplicationQualifier pulumi.StringPtrInput `pulumi:"receiverApplicationQualifier"`
	// The sender application id.
	SenderApplicationId pulumi.StringPtrInput `pulumi:"senderApplicationId"`
	// The sender application qualifier.
	SenderApplicationQualifier pulumi.StringPtrInput `pulumi:"senderApplicationQualifier"`
	// The target namespace on which this envelope settings has to be applied.
	TargetNamespace pulumi.StringPtrInput `pulumi:"targetNamespace"`
}

func (EdifactEnvelopeOverrideResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactEnvelopeOverrideResponse)(nil)).Elem()
}

func (i EdifactEnvelopeOverrideResponseArgs) ToEdifactEnvelopeOverrideResponseOutput() EdifactEnvelopeOverrideResponseOutput {
	return i.ToEdifactEnvelopeOverrideResponseOutputWithContext(context.Background())
}

func (i EdifactEnvelopeOverrideResponseArgs) ToEdifactEnvelopeOverrideResponseOutputWithContext(ctx context.Context) EdifactEnvelopeOverrideResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactEnvelopeOverrideResponseOutput)
}

// EdifactEnvelopeOverrideResponseArrayInput is an input type that accepts EdifactEnvelopeOverrideResponseArray and EdifactEnvelopeOverrideResponseArrayOutput values.
// You can construct a concrete instance of `EdifactEnvelopeOverrideResponseArrayInput` via:
//
//          EdifactEnvelopeOverrideResponseArray{ EdifactEnvelopeOverrideResponseArgs{...} }
type EdifactEnvelopeOverrideResponseArrayInput interface {
	pulumi.Input

	ToEdifactEnvelopeOverrideResponseArrayOutput() EdifactEnvelopeOverrideResponseArrayOutput
	ToEdifactEnvelopeOverrideResponseArrayOutputWithContext(context.Context) EdifactEnvelopeOverrideResponseArrayOutput
}

type EdifactEnvelopeOverrideResponseArray []EdifactEnvelopeOverrideResponseInput

func (EdifactEnvelopeOverrideResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactEnvelopeOverrideResponse)(nil)).Elem()
}

func (i EdifactEnvelopeOverrideResponseArray) ToEdifactEnvelopeOverrideResponseArrayOutput() EdifactEnvelopeOverrideResponseArrayOutput {
	return i.ToEdifactEnvelopeOverrideResponseArrayOutputWithContext(context.Background())
}

func (i EdifactEnvelopeOverrideResponseArray) ToEdifactEnvelopeOverrideResponseArrayOutputWithContext(ctx context.Context) EdifactEnvelopeOverrideResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactEnvelopeOverrideResponseArrayOutput)
}

// The Edifact envelope override settings.
type EdifactEnvelopeOverrideResponseOutput struct{ *pulumi.OutputState }

func (EdifactEnvelopeOverrideResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactEnvelopeOverrideResponse)(nil)).Elem()
}

func (o EdifactEnvelopeOverrideResponseOutput) ToEdifactEnvelopeOverrideResponseOutput() EdifactEnvelopeOverrideResponseOutput {
	return o
}

func (o EdifactEnvelopeOverrideResponseOutput) ToEdifactEnvelopeOverrideResponseOutputWithContext(ctx context.Context) EdifactEnvelopeOverrideResponseOutput {
	return o
}

// The application password.
func (o EdifactEnvelopeOverrideResponseOutput) ApplicationPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.ApplicationPassword }).(pulumi.StringPtrOutput)
}

// The association assigned code.
func (o EdifactEnvelopeOverrideResponseOutput) AssociationAssignedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.AssociationAssignedCode }).(pulumi.StringPtrOutput)
}

// The controlling agency code.
func (o EdifactEnvelopeOverrideResponseOutput) ControllingAgencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.ControllingAgencyCode }).(pulumi.StringPtrOutput)
}

// The functional group id.
func (o EdifactEnvelopeOverrideResponseOutput) FunctionalGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.FunctionalGroupId }).(pulumi.StringPtrOutput)
}

// The group header message release.
func (o EdifactEnvelopeOverrideResponseOutput) GroupHeaderMessageRelease() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.GroupHeaderMessageRelease }).(pulumi.StringPtrOutput)
}

// The group header message version.
func (o EdifactEnvelopeOverrideResponseOutput) GroupHeaderMessageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.GroupHeaderMessageVersion }).(pulumi.StringPtrOutput)
}

// The message association assigned code.
func (o EdifactEnvelopeOverrideResponseOutput) MessageAssociationAssignedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.MessageAssociationAssignedCode }).(pulumi.StringPtrOutput)
}

// The message id on which this envelope settings has to be applied.
func (o EdifactEnvelopeOverrideResponseOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// The message release version on which this envelope settings has to be applied.
func (o EdifactEnvelopeOverrideResponseOutput) MessageRelease() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.MessageRelease }).(pulumi.StringPtrOutput)
}

// The message version on which this envelope settings has to be applied.
func (o EdifactEnvelopeOverrideResponseOutput) MessageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.MessageVersion }).(pulumi.StringPtrOutput)
}

// The receiver application id.
func (o EdifactEnvelopeOverrideResponseOutput) ReceiverApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.ReceiverApplicationId }).(pulumi.StringPtrOutput)
}

// The receiver application qualifier.
func (o EdifactEnvelopeOverrideResponseOutput) ReceiverApplicationQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.ReceiverApplicationQualifier }).(pulumi.StringPtrOutput)
}

// The sender application id.
func (o EdifactEnvelopeOverrideResponseOutput) SenderApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.SenderApplicationId }).(pulumi.StringPtrOutput)
}

// The sender application qualifier.
func (o EdifactEnvelopeOverrideResponseOutput) SenderApplicationQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.SenderApplicationQualifier }).(pulumi.StringPtrOutput)
}

// The target namespace on which this envelope settings has to be applied.
func (o EdifactEnvelopeOverrideResponseOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.TargetNamespace }).(pulumi.StringPtrOutput)
}

type EdifactEnvelopeOverrideResponseArrayOutput struct{ *pulumi.OutputState }

func (EdifactEnvelopeOverrideResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactEnvelopeOverrideResponse)(nil)).Elem()
}

func (o EdifactEnvelopeOverrideResponseArrayOutput) ToEdifactEnvelopeOverrideResponseArrayOutput() EdifactEnvelopeOverrideResponseArrayOutput {
	return o
}

func (o EdifactEnvelopeOverrideResponseArrayOutput) ToEdifactEnvelopeOverrideResponseArrayOutputWithContext(ctx context.Context) EdifactEnvelopeOverrideResponseArrayOutput {
	return o
}

func (o EdifactEnvelopeOverrideResponseArrayOutput) Index(i pulumi.IntInput) EdifactEnvelopeOverrideResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdifactEnvelopeOverrideResponse {
		return vs[0].([]EdifactEnvelopeOverrideResponse)[vs[1].(int)]
	}).(EdifactEnvelopeOverrideResponseOutput)
}

// The Edifact agreement envelope settings.
type EdifactEnvelopeSettings struct {
	// The application reference id.
	ApplicationReferenceId *string `pulumi:"applicationReferenceId"`
	// The value indicating whether to apply delimiter string advice.
	ApplyDelimiterStringAdvice bool `pulumi:"applyDelimiterStringAdvice"`
	// The communication agreement id.
	CommunicationAgreementId *string `pulumi:"communicationAgreementId"`
	// The value indicating whether to create grouping segments.
	CreateGroupingSegments bool `pulumi:"createGroupingSegments"`
	// The value indicating whether to enable default group headers.
	EnableDefaultGroupHeaders bool `pulumi:"enableDefaultGroupHeaders"`
	// The functional group id.
	FunctionalGroupId *string `pulumi:"functionalGroupId"`
	// The group application password.
	GroupApplicationPassword *string `pulumi:"groupApplicationPassword"`
	// The group application receiver id.
	GroupApplicationReceiverId *string `pulumi:"groupApplicationReceiverId"`
	// The group application receiver qualifier.
	GroupApplicationReceiverQualifier *string `pulumi:"groupApplicationReceiverQualifier"`
	// The group application sender id.
	GroupApplicationSenderId *string `pulumi:"groupApplicationSenderId"`
	// The group application sender qualifier.
	GroupApplicationSenderQualifier *string `pulumi:"groupApplicationSenderQualifier"`
	// The group association assigned code.
	GroupAssociationAssignedCode *string `pulumi:"groupAssociationAssignedCode"`
	// The group control number lower bound.
	GroupControlNumberLowerBound int `pulumi:"groupControlNumberLowerBound"`
	// The group control number prefix.
	GroupControlNumberPrefix *string `pulumi:"groupControlNumberPrefix"`
	// The group control number suffix.
	GroupControlNumberSuffix *string `pulumi:"groupControlNumberSuffix"`
	// The group control number upper bound.
	GroupControlNumberUpperBound int `pulumi:"groupControlNumberUpperBound"`
	// The group controlling agency code.
	GroupControllingAgencyCode *string `pulumi:"groupControllingAgencyCode"`
	// The group message release.
	GroupMessageRelease *string `pulumi:"groupMessageRelease"`
	// The group message version.
	GroupMessageVersion *string `pulumi:"groupMessageVersion"`
	// The interchange control number lower bound.
	InterchangeControlNumberLowerBound int `pulumi:"interchangeControlNumberLowerBound"`
	// The interchange control number prefix.
	InterchangeControlNumberPrefix *string `pulumi:"interchangeControlNumberPrefix"`
	// The interchange control number suffix.
	InterchangeControlNumberSuffix *string `pulumi:"interchangeControlNumberSuffix"`
	// The interchange control number upper bound.
	InterchangeControlNumberUpperBound int `pulumi:"interchangeControlNumberUpperBound"`
	// The value indicating whether the message is a test interchange.
	IsTestInterchange bool `pulumi:"isTestInterchange"`
	// The value indicating whether to overwrite existing transaction set control number.
	OverwriteExistingTransactionSetControlNumber bool `pulumi:"overwriteExistingTransactionSetControlNumber"`
	// The processing priority code.
	ProcessingPriorityCode *string `pulumi:"processingPriorityCode"`
	// The receiver internal identification.
	ReceiverInternalIdentification *string `pulumi:"receiverInternalIdentification"`
	// The receiver internal sub identification.
	ReceiverInternalSubIdentification *string `pulumi:"receiverInternalSubIdentification"`
	// The receiver reverse routing address.
	ReceiverReverseRoutingAddress *string `pulumi:"receiverReverseRoutingAddress"`
	// The recipient reference password qualifier.
	RecipientReferencePasswordQualifier *string `pulumi:"recipientReferencePasswordQualifier"`
	// The recipient reference password value.
	RecipientReferencePasswordValue *string `pulumi:"recipientReferencePasswordValue"`
	// The value indicating whether to rollover group control number.
	RolloverGroupControlNumber bool `pulumi:"rolloverGroupControlNumber"`
	// The value indicating whether to rollover interchange control number.
	RolloverInterchangeControlNumber bool `pulumi:"rolloverInterchangeControlNumber"`
	// The value indicating whether to rollover transaction set control number.
	RolloverTransactionSetControlNumber bool `pulumi:"rolloverTransactionSetControlNumber"`
	// The sender internal identification.
	SenderInternalIdentification *string `pulumi:"senderInternalIdentification"`
	// The sender internal sub identification.
	SenderInternalSubIdentification *string `pulumi:"senderInternalSubIdentification"`
	// The sender reverse routing address.
	SenderReverseRoutingAddress *string `pulumi:"senderReverseRoutingAddress"`
	// The transaction set control number lower bound.
	TransactionSetControlNumberLowerBound int `pulumi:"transactionSetControlNumberLowerBound"`
	// The transaction set control number prefix.
	TransactionSetControlNumberPrefix *string `pulumi:"transactionSetControlNumberPrefix"`
	// The transaction set control number suffix.
	TransactionSetControlNumberSuffix *string `pulumi:"transactionSetControlNumberSuffix"`
	// The transaction set control number upper bound.
	TransactionSetControlNumberUpperBound int `pulumi:"transactionSetControlNumberUpperBound"`
}

// EdifactEnvelopeSettingsInput is an input type that accepts EdifactEnvelopeSettingsArgs and EdifactEnvelopeSettingsOutput values.
// You can construct a concrete instance of `EdifactEnvelopeSettingsInput` via:
//
//          EdifactEnvelopeSettingsArgs{...}
type EdifactEnvelopeSettingsInput interface {
	pulumi.Input

	ToEdifactEnvelopeSettingsOutput() EdifactEnvelopeSettingsOutput
	ToEdifactEnvelopeSettingsOutputWithContext(context.Context) EdifactEnvelopeSettingsOutput
}

// The Edifact agreement envelope settings.
type EdifactEnvelopeSettingsArgs struct {
	// The application reference id.
	ApplicationReferenceId pulumi.StringPtrInput `pulumi:"applicationReferenceId"`
	// The value indicating whether to apply delimiter string advice.
	ApplyDelimiterStringAdvice pulumi.BoolInput `pulumi:"applyDelimiterStringAdvice"`
	// The communication agreement id.
	CommunicationAgreementId pulumi.StringPtrInput `pulumi:"communicationAgreementId"`
	// The value indicating whether to create grouping segments.
	CreateGroupingSegments pulumi.BoolInput `pulumi:"createGroupingSegments"`
	// The value indicating whether to enable default group headers.
	EnableDefaultGroupHeaders pulumi.BoolInput `pulumi:"enableDefaultGroupHeaders"`
	// The functional group id.
	FunctionalGroupId pulumi.StringPtrInput `pulumi:"functionalGroupId"`
	// The group application password.
	GroupApplicationPassword pulumi.StringPtrInput `pulumi:"groupApplicationPassword"`
	// The group application receiver id.
	GroupApplicationReceiverId pulumi.StringPtrInput `pulumi:"groupApplicationReceiverId"`
	// The group application receiver qualifier.
	GroupApplicationReceiverQualifier pulumi.StringPtrInput `pulumi:"groupApplicationReceiverQualifier"`
	// The group application sender id.
	GroupApplicationSenderId pulumi.StringPtrInput `pulumi:"groupApplicationSenderId"`
	// The group application sender qualifier.
	GroupApplicationSenderQualifier pulumi.StringPtrInput `pulumi:"groupApplicationSenderQualifier"`
	// The group association assigned code.
	GroupAssociationAssignedCode pulumi.StringPtrInput `pulumi:"groupAssociationAssignedCode"`
	// The group control number lower bound.
	GroupControlNumberLowerBound pulumi.IntInput `pulumi:"groupControlNumberLowerBound"`
	// The group control number prefix.
	GroupControlNumberPrefix pulumi.StringPtrInput `pulumi:"groupControlNumberPrefix"`
	// The group control number suffix.
	GroupControlNumberSuffix pulumi.StringPtrInput `pulumi:"groupControlNumberSuffix"`
	// The group control number upper bound.
	GroupControlNumberUpperBound pulumi.IntInput `pulumi:"groupControlNumberUpperBound"`
	// The group controlling agency code.
	GroupControllingAgencyCode pulumi.StringPtrInput `pulumi:"groupControllingAgencyCode"`
	// The group message release.
	GroupMessageRelease pulumi.StringPtrInput `pulumi:"groupMessageRelease"`
	// The group message version.
	GroupMessageVersion pulumi.StringPtrInput `pulumi:"groupMessageVersion"`
	// The interchange control number lower bound.
	InterchangeControlNumberLowerBound pulumi.IntInput `pulumi:"interchangeControlNumberLowerBound"`
	// The interchange control number prefix.
	InterchangeControlNumberPrefix pulumi.StringPtrInput `pulumi:"interchangeControlNumberPrefix"`
	// The interchange control number suffix.
	InterchangeControlNumberSuffix pulumi.StringPtrInput `pulumi:"interchangeControlNumberSuffix"`
	// The interchange control number upper bound.
	InterchangeControlNumberUpperBound pulumi.IntInput `pulumi:"interchangeControlNumberUpperBound"`
	// The value indicating whether the message is a test interchange.
	IsTestInterchange pulumi.BoolInput `pulumi:"isTestInterchange"`
	// The value indicating whether to overwrite existing transaction set control number.
	OverwriteExistingTransactionSetControlNumber pulumi.BoolInput `pulumi:"overwriteExistingTransactionSetControlNumber"`
	// The processing priority code.
	ProcessingPriorityCode pulumi.StringPtrInput `pulumi:"processingPriorityCode"`
	// The receiver internal identification.
	ReceiverInternalIdentification pulumi.StringPtrInput `pulumi:"receiverInternalIdentification"`
	// The receiver internal sub identification.
	ReceiverInternalSubIdentification pulumi.StringPtrInput `pulumi:"receiverInternalSubIdentification"`
	// The receiver reverse routing address.
	ReceiverReverseRoutingAddress pulumi.StringPtrInput `pulumi:"receiverReverseRoutingAddress"`
	// The recipient reference password qualifier.
	RecipientReferencePasswordQualifier pulumi.StringPtrInput `pulumi:"recipientReferencePasswordQualifier"`
	// The recipient reference password value.
	RecipientReferencePasswordValue pulumi.StringPtrInput `pulumi:"recipientReferencePasswordValue"`
	// The value indicating whether to rollover group control number.
	RolloverGroupControlNumber pulumi.BoolInput `pulumi:"rolloverGroupControlNumber"`
	// The value indicating whether to rollover interchange control number.
	RolloverInterchangeControlNumber pulumi.BoolInput `pulumi:"rolloverInterchangeControlNumber"`
	// The value indicating whether to rollover transaction set control number.
	RolloverTransactionSetControlNumber pulumi.BoolInput `pulumi:"rolloverTransactionSetControlNumber"`
	// The sender internal identification.
	SenderInternalIdentification pulumi.StringPtrInput `pulumi:"senderInternalIdentification"`
	// The sender internal sub identification.
	SenderInternalSubIdentification pulumi.StringPtrInput `pulumi:"senderInternalSubIdentification"`
	// The sender reverse routing address.
	SenderReverseRoutingAddress pulumi.StringPtrInput `pulumi:"senderReverseRoutingAddress"`
	// The transaction set control number lower bound.
	TransactionSetControlNumberLowerBound pulumi.IntInput `pulumi:"transactionSetControlNumberLowerBound"`
	// The transaction set control number prefix.
	TransactionSetControlNumberPrefix pulumi.StringPtrInput `pulumi:"transactionSetControlNumberPrefix"`
	// The transaction set control number suffix.
	TransactionSetControlNumberSuffix pulumi.StringPtrInput `pulumi:"transactionSetControlNumberSuffix"`
	// The transaction set control number upper bound.
	TransactionSetControlNumberUpperBound pulumi.IntInput `pulumi:"transactionSetControlNumberUpperBound"`
}

func (EdifactEnvelopeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactEnvelopeSettings)(nil)).Elem()
}

func (i EdifactEnvelopeSettingsArgs) ToEdifactEnvelopeSettingsOutput() EdifactEnvelopeSettingsOutput {
	return i.ToEdifactEnvelopeSettingsOutputWithContext(context.Background())
}

func (i EdifactEnvelopeSettingsArgs) ToEdifactEnvelopeSettingsOutputWithContext(ctx context.Context) EdifactEnvelopeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactEnvelopeSettingsOutput)
}

func (i EdifactEnvelopeSettingsArgs) ToEdifactEnvelopeSettingsPtrOutput() EdifactEnvelopeSettingsPtrOutput {
	return i.ToEdifactEnvelopeSettingsPtrOutputWithContext(context.Background())
}

func (i EdifactEnvelopeSettingsArgs) ToEdifactEnvelopeSettingsPtrOutputWithContext(ctx context.Context) EdifactEnvelopeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactEnvelopeSettingsOutput).ToEdifactEnvelopeSettingsPtrOutputWithContext(ctx)
}

// EdifactEnvelopeSettingsPtrInput is an input type that accepts EdifactEnvelopeSettingsArgs, EdifactEnvelopeSettingsPtr and EdifactEnvelopeSettingsPtrOutput values.
// You can construct a concrete instance of `EdifactEnvelopeSettingsPtrInput` via:
//
//          EdifactEnvelopeSettingsArgs{...}
//
//  or:
//
//          nil
type EdifactEnvelopeSettingsPtrInput interface {
	pulumi.Input

	ToEdifactEnvelopeSettingsPtrOutput() EdifactEnvelopeSettingsPtrOutput
	ToEdifactEnvelopeSettingsPtrOutputWithContext(context.Context) EdifactEnvelopeSettingsPtrOutput
}

type edifactEnvelopeSettingsPtrType EdifactEnvelopeSettingsArgs

func EdifactEnvelopeSettingsPtr(v *EdifactEnvelopeSettingsArgs) EdifactEnvelopeSettingsPtrInput {
	return (*edifactEnvelopeSettingsPtrType)(v)
}

func (*edifactEnvelopeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactEnvelopeSettings)(nil)).Elem()
}

func (i *edifactEnvelopeSettingsPtrType) ToEdifactEnvelopeSettingsPtrOutput() EdifactEnvelopeSettingsPtrOutput {
	return i.ToEdifactEnvelopeSettingsPtrOutputWithContext(context.Background())
}

func (i *edifactEnvelopeSettingsPtrType) ToEdifactEnvelopeSettingsPtrOutputWithContext(ctx context.Context) EdifactEnvelopeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactEnvelopeSettingsPtrOutput)
}

// The Edifact agreement envelope settings.
type EdifactEnvelopeSettingsOutput struct{ *pulumi.OutputState }

func (EdifactEnvelopeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactEnvelopeSettings)(nil)).Elem()
}

func (o EdifactEnvelopeSettingsOutput) ToEdifactEnvelopeSettingsOutput() EdifactEnvelopeSettingsOutput {
	return o
}

func (o EdifactEnvelopeSettingsOutput) ToEdifactEnvelopeSettingsOutputWithContext(ctx context.Context) EdifactEnvelopeSettingsOutput {
	return o
}

func (o EdifactEnvelopeSettingsOutput) ToEdifactEnvelopeSettingsPtrOutput() EdifactEnvelopeSettingsPtrOutput {
	return o.ToEdifactEnvelopeSettingsPtrOutputWithContext(context.Background())
}

func (o EdifactEnvelopeSettingsOutput) ToEdifactEnvelopeSettingsPtrOutputWithContext(ctx context.Context) EdifactEnvelopeSettingsPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *EdifactEnvelopeSettings {
		return &v
	}).(EdifactEnvelopeSettingsPtrOutput)
}

// The application reference id.
func (o EdifactEnvelopeSettingsOutput) ApplicationReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.ApplicationReferenceId }).(pulumi.StringPtrOutput)
}

// The value indicating whether to apply delimiter string advice.
func (o EdifactEnvelopeSettingsOutput) ApplyDelimiterStringAdvice() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) bool { return v.ApplyDelimiterStringAdvice }).(pulumi.BoolOutput)
}

// The communication agreement id.
func (o EdifactEnvelopeSettingsOutput) CommunicationAgreementId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.CommunicationAgreementId }).(pulumi.StringPtrOutput)
}

// The value indicating whether to create grouping segments.
func (o EdifactEnvelopeSettingsOutput) CreateGroupingSegments() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) bool { return v.CreateGroupingSegments }).(pulumi.BoolOutput)
}

// The value indicating whether to enable default group headers.
func (o EdifactEnvelopeSettingsOutput) EnableDefaultGroupHeaders() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) bool { return v.EnableDefaultGroupHeaders }).(pulumi.BoolOutput)
}

// The functional group id.
func (o EdifactEnvelopeSettingsOutput) FunctionalGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.FunctionalGroupId }).(pulumi.StringPtrOutput)
}

// The group application password.
func (o EdifactEnvelopeSettingsOutput) GroupApplicationPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.GroupApplicationPassword }).(pulumi.StringPtrOutput)
}

// The group application receiver id.
func (o EdifactEnvelopeSettingsOutput) GroupApplicationReceiverId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.GroupApplicationReceiverId }).(pulumi.StringPtrOutput)
}

// The group application receiver qualifier.
func (o EdifactEnvelopeSettingsOutput) GroupApplicationReceiverQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.GroupApplicationReceiverQualifier }).(pulumi.StringPtrOutput)
}

// The group application sender id.
func (o EdifactEnvelopeSettingsOutput) GroupApplicationSenderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.GroupApplicationSenderId }).(pulumi.StringPtrOutput)
}

// The group application sender qualifier.
func (o EdifactEnvelopeSettingsOutput) GroupApplicationSenderQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.GroupApplicationSenderQualifier }).(pulumi.StringPtrOutput)
}

// The group association assigned code.
func (o EdifactEnvelopeSettingsOutput) GroupAssociationAssignedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.GroupAssociationAssignedCode }).(pulumi.StringPtrOutput)
}

// The group control number lower bound.
func (o EdifactEnvelopeSettingsOutput) GroupControlNumberLowerBound() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) int { return v.GroupControlNumberLowerBound }).(pulumi.IntOutput)
}

// The group control number prefix.
func (o EdifactEnvelopeSettingsOutput) GroupControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.GroupControlNumberPrefix }).(pulumi.StringPtrOutput)
}

// The group control number suffix.
func (o EdifactEnvelopeSettingsOutput) GroupControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.GroupControlNumberSuffix }).(pulumi.StringPtrOutput)
}

// The group control number upper bound.
func (o EdifactEnvelopeSettingsOutput) GroupControlNumberUpperBound() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) int { return v.GroupControlNumberUpperBound }).(pulumi.IntOutput)
}

// The group controlling agency code.
func (o EdifactEnvelopeSettingsOutput) GroupControllingAgencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.GroupControllingAgencyCode }).(pulumi.StringPtrOutput)
}

// The group message release.
func (o EdifactEnvelopeSettingsOutput) GroupMessageRelease() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.GroupMessageRelease }).(pulumi.StringPtrOutput)
}

// The group message version.
func (o EdifactEnvelopeSettingsOutput) GroupMessageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.GroupMessageVersion }).(pulumi.StringPtrOutput)
}

// The interchange control number lower bound.
func (o EdifactEnvelopeSettingsOutput) InterchangeControlNumberLowerBound() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) int { return v.InterchangeControlNumberLowerBound }).(pulumi.IntOutput)
}

// The interchange control number prefix.
func (o EdifactEnvelopeSettingsOutput) InterchangeControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.InterchangeControlNumberPrefix }).(pulumi.StringPtrOutput)
}

// The interchange control number suffix.
func (o EdifactEnvelopeSettingsOutput) InterchangeControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.InterchangeControlNumberSuffix }).(pulumi.StringPtrOutput)
}

// The interchange control number upper bound.
func (o EdifactEnvelopeSettingsOutput) InterchangeControlNumberUpperBound() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) int { return v.InterchangeControlNumberUpperBound }).(pulumi.IntOutput)
}

// The value indicating whether the message is a test interchange.
func (o EdifactEnvelopeSettingsOutput) IsTestInterchange() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) bool { return v.IsTestInterchange }).(pulumi.BoolOutput)
}

// The value indicating whether to overwrite existing transaction set control number.
func (o EdifactEnvelopeSettingsOutput) OverwriteExistingTransactionSetControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) bool { return v.OverwriteExistingTransactionSetControlNumber }).(pulumi.BoolOutput)
}

// The processing priority code.
func (o EdifactEnvelopeSettingsOutput) ProcessingPriorityCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.ProcessingPriorityCode }).(pulumi.StringPtrOutput)
}

// The receiver internal identification.
func (o EdifactEnvelopeSettingsOutput) ReceiverInternalIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.ReceiverInternalIdentification }).(pulumi.StringPtrOutput)
}

// The receiver internal sub identification.
func (o EdifactEnvelopeSettingsOutput) ReceiverInternalSubIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.ReceiverInternalSubIdentification }).(pulumi.StringPtrOutput)
}

// The receiver reverse routing address.
func (o EdifactEnvelopeSettingsOutput) ReceiverReverseRoutingAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.ReceiverReverseRoutingAddress }).(pulumi.StringPtrOutput)
}

// The recipient reference password qualifier.
func (o EdifactEnvelopeSettingsOutput) RecipientReferencePasswordQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.RecipientReferencePasswordQualifier }).(pulumi.StringPtrOutput)
}

// The recipient reference password value.
func (o EdifactEnvelopeSettingsOutput) RecipientReferencePasswordValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.RecipientReferencePasswordValue }).(pulumi.StringPtrOutput)
}

// The value indicating whether to rollover group control number.
func (o EdifactEnvelopeSettingsOutput) RolloverGroupControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) bool { return v.RolloverGroupControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to rollover interchange control number.
func (o EdifactEnvelopeSettingsOutput) RolloverInterchangeControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) bool { return v.RolloverInterchangeControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to rollover transaction set control number.
func (o EdifactEnvelopeSettingsOutput) RolloverTransactionSetControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) bool { return v.RolloverTransactionSetControlNumber }).(pulumi.BoolOutput)
}

// The sender internal identification.
func (o EdifactEnvelopeSettingsOutput) SenderInternalIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.SenderInternalIdentification }).(pulumi.StringPtrOutput)
}

// The sender internal sub identification.
func (o EdifactEnvelopeSettingsOutput) SenderInternalSubIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.SenderInternalSubIdentification }).(pulumi.StringPtrOutput)
}

// The sender reverse routing address.
func (o EdifactEnvelopeSettingsOutput) SenderReverseRoutingAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.SenderReverseRoutingAddress }).(pulumi.StringPtrOutput)
}

// The transaction set control number lower bound.
func (o EdifactEnvelopeSettingsOutput) TransactionSetControlNumberLowerBound() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) int { return v.TransactionSetControlNumberLowerBound }).(pulumi.IntOutput)
}

// The transaction set control number prefix.
func (o EdifactEnvelopeSettingsOutput) TransactionSetControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.TransactionSetControlNumberPrefix }).(pulumi.StringPtrOutput)
}

// The transaction set control number suffix.
func (o EdifactEnvelopeSettingsOutput) TransactionSetControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) *string { return v.TransactionSetControlNumberSuffix }).(pulumi.StringPtrOutput)
}

// The transaction set control number upper bound.
func (o EdifactEnvelopeSettingsOutput) TransactionSetControlNumberUpperBound() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettings) int { return v.TransactionSetControlNumberUpperBound }).(pulumi.IntOutput)
}

type EdifactEnvelopeSettingsPtrOutput struct{ *pulumi.OutputState }

func (EdifactEnvelopeSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactEnvelopeSettings)(nil)).Elem()
}

func (o EdifactEnvelopeSettingsPtrOutput) ToEdifactEnvelopeSettingsPtrOutput() EdifactEnvelopeSettingsPtrOutput {
	return o
}

func (o EdifactEnvelopeSettingsPtrOutput) ToEdifactEnvelopeSettingsPtrOutputWithContext(ctx context.Context) EdifactEnvelopeSettingsPtrOutput {
	return o
}

func (o EdifactEnvelopeSettingsPtrOutput) Elem() EdifactEnvelopeSettingsOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) EdifactEnvelopeSettings { return *v }).(EdifactEnvelopeSettingsOutput)
}

// The application reference id.
func (o EdifactEnvelopeSettingsPtrOutput) ApplicationReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationReferenceId
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to apply delimiter string advice.
func (o EdifactEnvelopeSettingsPtrOutput) ApplyDelimiterStringAdvice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.ApplyDelimiterStringAdvice
	}).(pulumi.BoolPtrOutput)
}

// The communication agreement id.
func (o EdifactEnvelopeSettingsPtrOutput) CommunicationAgreementId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.CommunicationAgreementId
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to create grouping segments.
func (o EdifactEnvelopeSettingsPtrOutput) CreateGroupingSegments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.CreateGroupingSegments
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable default group headers.
func (o EdifactEnvelopeSettingsPtrOutput) EnableDefaultGroupHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableDefaultGroupHeaders
	}).(pulumi.BoolPtrOutput)
}

// The functional group id.
func (o EdifactEnvelopeSettingsPtrOutput) FunctionalGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.FunctionalGroupId
	}).(pulumi.StringPtrOutput)
}

// The group application password.
func (o EdifactEnvelopeSettingsPtrOutput) GroupApplicationPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupApplicationPassword
	}).(pulumi.StringPtrOutput)
}

// The group application receiver id.
func (o EdifactEnvelopeSettingsPtrOutput) GroupApplicationReceiverId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupApplicationReceiverId
	}).(pulumi.StringPtrOutput)
}

// The group application receiver qualifier.
func (o EdifactEnvelopeSettingsPtrOutput) GroupApplicationReceiverQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupApplicationReceiverQualifier
	}).(pulumi.StringPtrOutput)
}

// The group application sender id.
func (o EdifactEnvelopeSettingsPtrOutput) GroupApplicationSenderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupApplicationSenderId
	}).(pulumi.StringPtrOutput)
}

// The group application sender qualifier.
func (o EdifactEnvelopeSettingsPtrOutput) GroupApplicationSenderQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupApplicationSenderQualifier
	}).(pulumi.StringPtrOutput)
}

// The group association assigned code.
func (o EdifactEnvelopeSettingsPtrOutput) GroupAssociationAssignedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupAssociationAssignedCode
	}).(pulumi.StringPtrOutput)
}

// The group control number lower bound.
func (o EdifactEnvelopeSettingsPtrOutput) GroupControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *int {
		if v == nil {
			return nil
		}
		return &v.GroupControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The group control number prefix.
func (o EdifactEnvelopeSettingsPtrOutput) GroupControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupControlNumberPrefix
	}).(pulumi.StringPtrOutput)
}

// The group control number suffix.
func (o EdifactEnvelopeSettingsPtrOutput) GroupControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupControlNumberSuffix
	}).(pulumi.StringPtrOutput)
}

// The group control number upper bound.
func (o EdifactEnvelopeSettingsPtrOutput) GroupControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *int {
		if v == nil {
			return nil
		}
		return &v.GroupControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The group controlling agency code.
func (o EdifactEnvelopeSettingsPtrOutput) GroupControllingAgencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupControllingAgencyCode
	}).(pulumi.StringPtrOutput)
}

// The group message release.
func (o EdifactEnvelopeSettingsPtrOutput) GroupMessageRelease() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupMessageRelease
	}).(pulumi.StringPtrOutput)
}

// The group message version.
func (o EdifactEnvelopeSettingsPtrOutput) GroupMessageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupMessageVersion
	}).(pulumi.StringPtrOutput)
}

// The interchange control number lower bound.
func (o EdifactEnvelopeSettingsPtrOutput) InterchangeControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *int {
		if v == nil {
			return nil
		}
		return &v.InterchangeControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The interchange control number prefix.
func (o EdifactEnvelopeSettingsPtrOutput) InterchangeControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.InterchangeControlNumberPrefix
	}).(pulumi.StringPtrOutput)
}

// The interchange control number suffix.
func (o EdifactEnvelopeSettingsPtrOutput) InterchangeControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.InterchangeControlNumberSuffix
	}).(pulumi.StringPtrOutput)
}

// The interchange control number upper bound.
func (o EdifactEnvelopeSettingsPtrOutput) InterchangeControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *int {
		if v == nil {
			return nil
		}
		return &v.InterchangeControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The value indicating whether the message is a test interchange.
func (o EdifactEnvelopeSettingsPtrOutput) IsTestInterchange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.IsTestInterchange
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to overwrite existing transaction set control number.
func (o EdifactEnvelopeSettingsPtrOutput) OverwriteExistingTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.OverwriteExistingTransactionSetControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The processing priority code.
func (o EdifactEnvelopeSettingsPtrOutput) ProcessingPriorityCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.ProcessingPriorityCode
	}).(pulumi.StringPtrOutput)
}

// The receiver internal identification.
func (o EdifactEnvelopeSettingsPtrOutput) ReceiverInternalIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.ReceiverInternalIdentification
	}).(pulumi.StringPtrOutput)
}

// The receiver internal sub identification.
func (o EdifactEnvelopeSettingsPtrOutput) ReceiverInternalSubIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.ReceiverInternalSubIdentification
	}).(pulumi.StringPtrOutput)
}

// The receiver reverse routing address.
func (o EdifactEnvelopeSettingsPtrOutput) ReceiverReverseRoutingAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.ReceiverReverseRoutingAddress
	}).(pulumi.StringPtrOutput)
}

// The recipient reference password qualifier.
func (o EdifactEnvelopeSettingsPtrOutput) RecipientReferencePasswordQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.RecipientReferencePasswordQualifier
	}).(pulumi.StringPtrOutput)
}

// The recipient reference password value.
func (o EdifactEnvelopeSettingsPtrOutput) RecipientReferencePasswordValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.RecipientReferencePasswordValue
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to rollover group control number.
func (o EdifactEnvelopeSettingsPtrOutput) RolloverGroupControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.RolloverGroupControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover interchange control number.
func (o EdifactEnvelopeSettingsPtrOutput) RolloverInterchangeControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.RolloverInterchangeControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover transaction set control number.
func (o EdifactEnvelopeSettingsPtrOutput) RolloverTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.RolloverTransactionSetControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The sender internal identification.
func (o EdifactEnvelopeSettingsPtrOutput) SenderInternalIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.SenderInternalIdentification
	}).(pulumi.StringPtrOutput)
}

// The sender internal sub identification.
func (o EdifactEnvelopeSettingsPtrOutput) SenderInternalSubIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.SenderInternalSubIdentification
	}).(pulumi.StringPtrOutput)
}

// The sender reverse routing address.
func (o EdifactEnvelopeSettingsPtrOutput) SenderReverseRoutingAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.SenderReverseRoutingAddress
	}).(pulumi.StringPtrOutput)
}

// The transaction set control number lower bound.
func (o EdifactEnvelopeSettingsPtrOutput) TransactionSetControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *int {
		if v == nil {
			return nil
		}
		return &v.TransactionSetControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The transaction set control number prefix.
func (o EdifactEnvelopeSettingsPtrOutput) TransactionSetControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.TransactionSetControlNumberPrefix
	}).(pulumi.StringPtrOutput)
}

// The transaction set control number suffix.
func (o EdifactEnvelopeSettingsPtrOutput) TransactionSetControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.TransactionSetControlNumberSuffix
	}).(pulumi.StringPtrOutput)
}

// The transaction set control number upper bound.
func (o EdifactEnvelopeSettingsPtrOutput) TransactionSetControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettings) *int {
		if v == nil {
			return nil
		}
		return &v.TransactionSetControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The Edifact agreement envelope settings.
type EdifactEnvelopeSettingsResponse struct {
	// The application reference id.
	ApplicationReferenceId *string `pulumi:"applicationReferenceId"`
	// The value indicating whether to apply delimiter string advice.
	ApplyDelimiterStringAdvice bool `pulumi:"applyDelimiterStringAdvice"`
	// The communication agreement id.
	CommunicationAgreementId *string `pulumi:"communicationAgreementId"`
	// The value indicating whether to create grouping segments.
	CreateGroupingSegments bool `pulumi:"createGroupingSegments"`
	// The value indicating whether to enable default group headers.
	EnableDefaultGroupHeaders bool `pulumi:"enableDefaultGroupHeaders"`
	// The functional group id.
	FunctionalGroupId *string `pulumi:"functionalGroupId"`
	// The group application password.
	GroupApplicationPassword *string `pulumi:"groupApplicationPassword"`
	// The group application receiver id.
	GroupApplicationReceiverId *string `pulumi:"groupApplicationReceiverId"`
	// The group application receiver qualifier.
	GroupApplicationReceiverQualifier *string `pulumi:"groupApplicationReceiverQualifier"`
	// The group application sender id.
	GroupApplicationSenderId *string `pulumi:"groupApplicationSenderId"`
	// The group application sender qualifier.
	GroupApplicationSenderQualifier *string `pulumi:"groupApplicationSenderQualifier"`
	// The group association assigned code.
	GroupAssociationAssignedCode *string `pulumi:"groupAssociationAssignedCode"`
	// The group control number lower bound.
	GroupControlNumberLowerBound int `pulumi:"groupControlNumberLowerBound"`
	// The group control number prefix.
	GroupControlNumberPrefix *string `pulumi:"groupControlNumberPrefix"`
	// The group control number suffix.
	GroupControlNumberSuffix *string `pulumi:"groupControlNumberSuffix"`
	// The group control number upper bound.
	GroupControlNumberUpperBound int `pulumi:"groupControlNumberUpperBound"`
	// The group controlling agency code.
	GroupControllingAgencyCode *string `pulumi:"groupControllingAgencyCode"`
	// The group message release.
	GroupMessageRelease *string `pulumi:"groupMessageRelease"`
	// The group message version.
	GroupMessageVersion *string `pulumi:"groupMessageVersion"`
	// The interchange control number lower bound.
	InterchangeControlNumberLowerBound int `pulumi:"interchangeControlNumberLowerBound"`
	// The interchange control number prefix.
	InterchangeControlNumberPrefix *string `pulumi:"interchangeControlNumberPrefix"`
	// The interchange control number suffix.
	InterchangeControlNumberSuffix *string `pulumi:"interchangeControlNumberSuffix"`
	// The interchange control number upper bound.
	InterchangeControlNumberUpperBound int `pulumi:"interchangeControlNumberUpperBound"`
	// The value indicating whether the message is a test interchange.
	IsTestInterchange bool `pulumi:"isTestInterchange"`
	// The value indicating whether to overwrite existing transaction set control number.
	OverwriteExistingTransactionSetControlNumber bool `pulumi:"overwriteExistingTransactionSetControlNumber"`
	// The processing priority code.
	ProcessingPriorityCode *string `pulumi:"processingPriorityCode"`
	// The receiver internal identification.
	ReceiverInternalIdentification *string `pulumi:"receiverInternalIdentification"`
	// The receiver internal sub identification.
	ReceiverInternalSubIdentification *string `pulumi:"receiverInternalSubIdentification"`
	// The receiver reverse routing address.
	ReceiverReverseRoutingAddress *string `pulumi:"receiverReverseRoutingAddress"`
	// The recipient reference password qualifier.
	RecipientReferencePasswordQualifier *string `pulumi:"recipientReferencePasswordQualifier"`
	// The recipient reference password value.
	RecipientReferencePasswordValue *string `pulumi:"recipientReferencePasswordValue"`
	// The value indicating whether to rollover group control number.
	RolloverGroupControlNumber bool `pulumi:"rolloverGroupControlNumber"`
	// The value indicating whether to rollover interchange control number.
	RolloverInterchangeControlNumber bool `pulumi:"rolloverInterchangeControlNumber"`
	// The value indicating whether to rollover transaction set control number.
	RolloverTransactionSetControlNumber bool `pulumi:"rolloverTransactionSetControlNumber"`
	// The sender internal identification.
	SenderInternalIdentification *string `pulumi:"senderInternalIdentification"`
	// The sender internal sub identification.
	SenderInternalSubIdentification *string `pulumi:"senderInternalSubIdentification"`
	// The sender reverse routing address.
	SenderReverseRoutingAddress *string `pulumi:"senderReverseRoutingAddress"`
	// The transaction set control number lower bound.
	TransactionSetControlNumberLowerBound int `pulumi:"transactionSetControlNumberLowerBound"`
	// The transaction set control number prefix.
	TransactionSetControlNumberPrefix *string `pulumi:"transactionSetControlNumberPrefix"`
	// The transaction set control number suffix.
	TransactionSetControlNumberSuffix *string `pulumi:"transactionSetControlNumberSuffix"`
	// The transaction set control number upper bound.
	TransactionSetControlNumberUpperBound int `pulumi:"transactionSetControlNumberUpperBound"`
}

// EdifactEnvelopeSettingsResponseInput is an input type that accepts EdifactEnvelopeSettingsResponseArgs and EdifactEnvelopeSettingsResponseOutput values.
// You can construct a concrete instance of `EdifactEnvelopeSettingsResponseInput` via:
//
//          EdifactEnvelopeSettingsResponseArgs{...}
type EdifactEnvelopeSettingsResponseInput interface {
	pulumi.Input

	ToEdifactEnvelopeSettingsResponseOutput() EdifactEnvelopeSettingsResponseOutput
	ToEdifactEnvelopeSettingsResponseOutputWithContext(context.Context) EdifactEnvelopeSettingsResponseOutput
}

// The Edifact agreement envelope settings.
type EdifactEnvelopeSettingsResponseArgs struct {
	// The application reference id.
	ApplicationReferenceId pulumi.StringPtrInput `pulumi:"applicationReferenceId"`
	// The value indicating whether to apply delimiter string advice.
	ApplyDelimiterStringAdvice pulumi.BoolInput `pulumi:"applyDelimiterStringAdvice"`
	// The communication agreement id.
	CommunicationAgreementId pulumi.StringPtrInput `pulumi:"communicationAgreementId"`
	// The value indicating whether to create grouping segments.
	CreateGroupingSegments pulumi.BoolInput `pulumi:"createGroupingSegments"`
	// The value indicating whether to enable default group headers.
	EnableDefaultGroupHeaders pulumi.BoolInput `pulumi:"enableDefaultGroupHeaders"`
	// The functional group id.
	FunctionalGroupId pulumi.StringPtrInput `pulumi:"functionalGroupId"`
	// The group application password.
	GroupApplicationPassword pulumi.StringPtrInput `pulumi:"groupApplicationPassword"`
	// The group application receiver id.
	GroupApplicationReceiverId pulumi.StringPtrInput `pulumi:"groupApplicationReceiverId"`
	// The group application receiver qualifier.
	GroupApplicationReceiverQualifier pulumi.StringPtrInput `pulumi:"groupApplicationReceiverQualifier"`
	// The group application sender id.
	GroupApplicationSenderId pulumi.StringPtrInput `pulumi:"groupApplicationSenderId"`
	// The group application sender qualifier.
	GroupApplicationSenderQualifier pulumi.StringPtrInput `pulumi:"groupApplicationSenderQualifier"`
	// The group association assigned code.
	GroupAssociationAssignedCode pulumi.StringPtrInput `pulumi:"groupAssociationAssignedCode"`
	// The group control number lower bound.
	GroupControlNumberLowerBound pulumi.IntInput `pulumi:"groupControlNumberLowerBound"`
	// The group control number prefix.
	GroupControlNumberPrefix pulumi.StringPtrInput `pulumi:"groupControlNumberPrefix"`
	// The group control number suffix.
	GroupControlNumberSuffix pulumi.StringPtrInput `pulumi:"groupControlNumberSuffix"`
	// The group control number upper bound.
	GroupControlNumberUpperBound pulumi.IntInput `pulumi:"groupControlNumberUpperBound"`
	// The group controlling agency code.
	GroupControllingAgencyCode pulumi.StringPtrInput `pulumi:"groupControllingAgencyCode"`
	// The group message release.
	GroupMessageRelease pulumi.StringPtrInput `pulumi:"groupMessageRelease"`
	// The group message version.
	GroupMessageVersion pulumi.StringPtrInput `pulumi:"groupMessageVersion"`
	// The interchange control number lower bound.
	InterchangeControlNumberLowerBound pulumi.IntInput `pulumi:"interchangeControlNumberLowerBound"`
	// The interchange control number prefix.
	InterchangeControlNumberPrefix pulumi.StringPtrInput `pulumi:"interchangeControlNumberPrefix"`
	// The interchange control number suffix.
	InterchangeControlNumberSuffix pulumi.StringPtrInput `pulumi:"interchangeControlNumberSuffix"`
	// The interchange control number upper bound.
	InterchangeControlNumberUpperBound pulumi.IntInput `pulumi:"interchangeControlNumberUpperBound"`
	// The value indicating whether the message is a test interchange.
	IsTestInterchange pulumi.BoolInput `pulumi:"isTestInterchange"`
	// The value indicating whether to overwrite existing transaction set control number.
	OverwriteExistingTransactionSetControlNumber pulumi.BoolInput `pulumi:"overwriteExistingTransactionSetControlNumber"`
	// The processing priority code.
	ProcessingPriorityCode pulumi.StringPtrInput `pulumi:"processingPriorityCode"`
	// The receiver internal identification.
	ReceiverInternalIdentification pulumi.StringPtrInput `pulumi:"receiverInternalIdentification"`
	// The receiver internal sub identification.
	ReceiverInternalSubIdentification pulumi.StringPtrInput `pulumi:"receiverInternalSubIdentification"`
	// The receiver reverse routing address.
	ReceiverReverseRoutingAddress pulumi.StringPtrInput `pulumi:"receiverReverseRoutingAddress"`
	// The recipient reference password qualifier.
	RecipientReferencePasswordQualifier pulumi.StringPtrInput `pulumi:"recipientReferencePasswordQualifier"`
	// The recipient reference password value.
	RecipientReferencePasswordValue pulumi.StringPtrInput `pulumi:"recipientReferencePasswordValue"`
	// The value indicating whether to rollover group control number.
	RolloverGroupControlNumber pulumi.BoolInput `pulumi:"rolloverGroupControlNumber"`
	// The value indicating whether to rollover interchange control number.
	RolloverInterchangeControlNumber pulumi.BoolInput `pulumi:"rolloverInterchangeControlNumber"`
	// The value indicating whether to rollover transaction set control number.
	RolloverTransactionSetControlNumber pulumi.BoolInput `pulumi:"rolloverTransactionSetControlNumber"`
	// The sender internal identification.
	SenderInternalIdentification pulumi.StringPtrInput `pulumi:"senderInternalIdentification"`
	// The sender internal sub identification.
	SenderInternalSubIdentification pulumi.StringPtrInput `pulumi:"senderInternalSubIdentification"`
	// The sender reverse routing address.
	SenderReverseRoutingAddress pulumi.StringPtrInput `pulumi:"senderReverseRoutingAddress"`
	// The transaction set control number lower bound.
	TransactionSetControlNumberLowerBound pulumi.IntInput `pulumi:"transactionSetControlNumberLowerBound"`
	// The transaction set control number prefix.
	TransactionSetControlNumberPrefix pulumi.StringPtrInput `pulumi:"transactionSetControlNumberPrefix"`
	// The transaction set control number suffix.
	TransactionSetControlNumberSuffix pulumi.StringPtrInput `pulumi:"transactionSetControlNumberSuffix"`
	// The transaction set control number upper bound.
	TransactionSetControlNumberUpperBound pulumi.IntInput `pulumi:"transactionSetControlNumberUpperBound"`
}

func (EdifactEnvelopeSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactEnvelopeSettingsResponse)(nil)).Elem()
}

func (i EdifactEnvelopeSettingsResponseArgs) ToEdifactEnvelopeSettingsResponseOutput() EdifactEnvelopeSettingsResponseOutput {
	return i.ToEdifactEnvelopeSettingsResponseOutputWithContext(context.Background())
}

func (i EdifactEnvelopeSettingsResponseArgs) ToEdifactEnvelopeSettingsResponseOutputWithContext(ctx context.Context) EdifactEnvelopeSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactEnvelopeSettingsResponseOutput)
}

func (i EdifactEnvelopeSettingsResponseArgs) ToEdifactEnvelopeSettingsResponsePtrOutput() EdifactEnvelopeSettingsResponsePtrOutput {
	return i.ToEdifactEnvelopeSettingsResponsePtrOutputWithContext(context.Background())
}

func (i EdifactEnvelopeSettingsResponseArgs) ToEdifactEnvelopeSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactEnvelopeSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactEnvelopeSettingsResponseOutput).ToEdifactEnvelopeSettingsResponsePtrOutputWithContext(ctx)
}

// EdifactEnvelopeSettingsResponsePtrInput is an input type that accepts EdifactEnvelopeSettingsResponseArgs, EdifactEnvelopeSettingsResponsePtr and EdifactEnvelopeSettingsResponsePtrOutput values.
// You can construct a concrete instance of `EdifactEnvelopeSettingsResponsePtrInput` via:
//
//          EdifactEnvelopeSettingsResponseArgs{...}
//
//  or:
//
//          nil
type EdifactEnvelopeSettingsResponsePtrInput interface {
	pulumi.Input

	ToEdifactEnvelopeSettingsResponsePtrOutput() EdifactEnvelopeSettingsResponsePtrOutput
	ToEdifactEnvelopeSettingsResponsePtrOutputWithContext(context.Context) EdifactEnvelopeSettingsResponsePtrOutput
}

type edifactEnvelopeSettingsResponsePtrType EdifactEnvelopeSettingsResponseArgs

func EdifactEnvelopeSettingsResponsePtr(v *EdifactEnvelopeSettingsResponseArgs) EdifactEnvelopeSettingsResponsePtrInput {
	return (*edifactEnvelopeSettingsResponsePtrType)(v)
}

func (*edifactEnvelopeSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactEnvelopeSettingsResponse)(nil)).Elem()
}

func (i *edifactEnvelopeSettingsResponsePtrType) ToEdifactEnvelopeSettingsResponsePtrOutput() EdifactEnvelopeSettingsResponsePtrOutput {
	return i.ToEdifactEnvelopeSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *edifactEnvelopeSettingsResponsePtrType) ToEdifactEnvelopeSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactEnvelopeSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactEnvelopeSettingsResponsePtrOutput)
}

// The Edifact agreement envelope settings.
type EdifactEnvelopeSettingsResponseOutput struct{ *pulumi.OutputState }

func (EdifactEnvelopeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactEnvelopeSettingsResponse)(nil)).Elem()
}

func (o EdifactEnvelopeSettingsResponseOutput) ToEdifactEnvelopeSettingsResponseOutput() EdifactEnvelopeSettingsResponseOutput {
	return o
}

func (o EdifactEnvelopeSettingsResponseOutput) ToEdifactEnvelopeSettingsResponseOutputWithContext(ctx context.Context) EdifactEnvelopeSettingsResponseOutput {
	return o
}

func (o EdifactEnvelopeSettingsResponseOutput) ToEdifactEnvelopeSettingsResponsePtrOutput() EdifactEnvelopeSettingsResponsePtrOutput {
	return o.ToEdifactEnvelopeSettingsResponsePtrOutputWithContext(context.Background())
}

func (o EdifactEnvelopeSettingsResponseOutput) ToEdifactEnvelopeSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactEnvelopeSettingsResponsePtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *EdifactEnvelopeSettingsResponse {
		return &v
	}).(EdifactEnvelopeSettingsResponsePtrOutput)
}

// The application reference id.
func (o EdifactEnvelopeSettingsResponseOutput) ApplicationReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.ApplicationReferenceId }).(pulumi.StringPtrOutput)
}

// The value indicating whether to apply delimiter string advice.
func (o EdifactEnvelopeSettingsResponseOutput) ApplyDelimiterStringAdvice() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) bool { return v.ApplyDelimiterStringAdvice }).(pulumi.BoolOutput)
}

// The communication agreement id.
func (o EdifactEnvelopeSettingsResponseOutput) CommunicationAgreementId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.CommunicationAgreementId }).(pulumi.StringPtrOutput)
}

// The value indicating whether to create grouping segments.
func (o EdifactEnvelopeSettingsResponseOutput) CreateGroupingSegments() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) bool { return v.CreateGroupingSegments }).(pulumi.BoolOutput)
}

// The value indicating whether to enable default group headers.
func (o EdifactEnvelopeSettingsResponseOutput) EnableDefaultGroupHeaders() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) bool { return v.EnableDefaultGroupHeaders }).(pulumi.BoolOutput)
}

// The functional group id.
func (o EdifactEnvelopeSettingsResponseOutput) FunctionalGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.FunctionalGroupId }).(pulumi.StringPtrOutput)
}

// The group application password.
func (o EdifactEnvelopeSettingsResponseOutput) GroupApplicationPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupApplicationPassword }).(pulumi.StringPtrOutput)
}

// The group application receiver id.
func (o EdifactEnvelopeSettingsResponseOutput) GroupApplicationReceiverId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupApplicationReceiverId }).(pulumi.StringPtrOutput)
}

// The group application receiver qualifier.
func (o EdifactEnvelopeSettingsResponseOutput) GroupApplicationReceiverQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupApplicationReceiverQualifier }).(pulumi.StringPtrOutput)
}

// The group application sender id.
func (o EdifactEnvelopeSettingsResponseOutput) GroupApplicationSenderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupApplicationSenderId }).(pulumi.StringPtrOutput)
}

// The group application sender qualifier.
func (o EdifactEnvelopeSettingsResponseOutput) GroupApplicationSenderQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupApplicationSenderQualifier }).(pulumi.StringPtrOutput)
}

// The group association assigned code.
func (o EdifactEnvelopeSettingsResponseOutput) GroupAssociationAssignedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupAssociationAssignedCode }).(pulumi.StringPtrOutput)
}

// The group control number lower bound.
func (o EdifactEnvelopeSettingsResponseOutput) GroupControlNumberLowerBound() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) int { return v.GroupControlNumberLowerBound }).(pulumi.IntOutput)
}

// The group control number prefix.
func (o EdifactEnvelopeSettingsResponseOutput) GroupControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupControlNumberPrefix }).(pulumi.StringPtrOutput)
}

// The group control number suffix.
func (o EdifactEnvelopeSettingsResponseOutput) GroupControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupControlNumberSuffix }).(pulumi.StringPtrOutput)
}

// The group control number upper bound.
func (o EdifactEnvelopeSettingsResponseOutput) GroupControlNumberUpperBound() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) int { return v.GroupControlNumberUpperBound }).(pulumi.IntOutput)
}

// The group controlling agency code.
func (o EdifactEnvelopeSettingsResponseOutput) GroupControllingAgencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupControllingAgencyCode }).(pulumi.StringPtrOutput)
}

// The group message release.
func (o EdifactEnvelopeSettingsResponseOutput) GroupMessageRelease() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupMessageRelease }).(pulumi.StringPtrOutput)
}

// The group message version.
func (o EdifactEnvelopeSettingsResponseOutput) GroupMessageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupMessageVersion }).(pulumi.StringPtrOutput)
}

// The interchange control number lower bound.
func (o EdifactEnvelopeSettingsResponseOutput) InterchangeControlNumberLowerBound() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) int { return v.InterchangeControlNumberLowerBound }).(pulumi.IntOutput)
}

// The interchange control number prefix.
func (o EdifactEnvelopeSettingsResponseOutput) InterchangeControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.InterchangeControlNumberPrefix }).(pulumi.StringPtrOutput)
}

// The interchange control number suffix.
func (o EdifactEnvelopeSettingsResponseOutput) InterchangeControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.InterchangeControlNumberSuffix }).(pulumi.StringPtrOutput)
}

// The interchange control number upper bound.
func (o EdifactEnvelopeSettingsResponseOutput) InterchangeControlNumberUpperBound() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) int { return v.InterchangeControlNumberUpperBound }).(pulumi.IntOutput)
}

// The value indicating whether the message is a test interchange.
func (o EdifactEnvelopeSettingsResponseOutput) IsTestInterchange() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) bool { return v.IsTestInterchange }).(pulumi.BoolOutput)
}

// The value indicating whether to overwrite existing transaction set control number.
func (o EdifactEnvelopeSettingsResponseOutput) OverwriteExistingTransactionSetControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) bool { return v.OverwriteExistingTransactionSetControlNumber }).(pulumi.BoolOutput)
}

// The processing priority code.
func (o EdifactEnvelopeSettingsResponseOutput) ProcessingPriorityCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.ProcessingPriorityCode }).(pulumi.StringPtrOutput)
}

// The receiver internal identification.
func (o EdifactEnvelopeSettingsResponseOutput) ReceiverInternalIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.ReceiverInternalIdentification }).(pulumi.StringPtrOutput)
}

// The receiver internal sub identification.
func (o EdifactEnvelopeSettingsResponseOutput) ReceiverInternalSubIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.ReceiverInternalSubIdentification }).(pulumi.StringPtrOutput)
}

// The receiver reverse routing address.
func (o EdifactEnvelopeSettingsResponseOutput) ReceiverReverseRoutingAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.ReceiverReverseRoutingAddress }).(pulumi.StringPtrOutput)
}

// The recipient reference password qualifier.
func (o EdifactEnvelopeSettingsResponseOutput) RecipientReferencePasswordQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.RecipientReferencePasswordQualifier }).(pulumi.StringPtrOutput)
}

// The recipient reference password value.
func (o EdifactEnvelopeSettingsResponseOutput) RecipientReferencePasswordValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.RecipientReferencePasswordValue }).(pulumi.StringPtrOutput)
}

// The value indicating whether to rollover group control number.
func (o EdifactEnvelopeSettingsResponseOutput) RolloverGroupControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) bool { return v.RolloverGroupControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to rollover interchange control number.
func (o EdifactEnvelopeSettingsResponseOutput) RolloverInterchangeControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) bool { return v.RolloverInterchangeControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to rollover transaction set control number.
func (o EdifactEnvelopeSettingsResponseOutput) RolloverTransactionSetControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) bool { return v.RolloverTransactionSetControlNumber }).(pulumi.BoolOutput)
}

// The sender internal identification.
func (o EdifactEnvelopeSettingsResponseOutput) SenderInternalIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.SenderInternalIdentification }).(pulumi.StringPtrOutput)
}

// The sender internal sub identification.
func (o EdifactEnvelopeSettingsResponseOutput) SenderInternalSubIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.SenderInternalSubIdentification }).(pulumi.StringPtrOutput)
}

// The sender reverse routing address.
func (o EdifactEnvelopeSettingsResponseOutput) SenderReverseRoutingAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.SenderReverseRoutingAddress }).(pulumi.StringPtrOutput)
}

// The transaction set control number lower bound.
func (o EdifactEnvelopeSettingsResponseOutput) TransactionSetControlNumberLowerBound() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) int { return v.TransactionSetControlNumberLowerBound }).(pulumi.IntOutput)
}

// The transaction set control number prefix.
func (o EdifactEnvelopeSettingsResponseOutput) TransactionSetControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.TransactionSetControlNumberPrefix }).(pulumi.StringPtrOutput)
}

// The transaction set control number suffix.
func (o EdifactEnvelopeSettingsResponseOutput) TransactionSetControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.TransactionSetControlNumberSuffix }).(pulumi.StringPtrOutput)
}

// The transaction set control number upper bound.
func (o EdifactEnvelopeSettingsResponseOutput) TransactionSetControlNumberUpperBound() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) int { return v.TransactionSetControlNumberUpperBound }).(pulumi.IntOutput)
}

type EdifactEnvelopeSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (EdifactEnvelopeSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactEnvelopeSettingsResponse)(nil)).Elem()
}

func (o EdifactEnvelopeSettingsResponsePtrOutput) ToEdifactEnvelopeSettingsResponsePtrOutput() EdifactEnvelopeSettingsResponsePtrOutput {
	return o
}

func (o EdifactEnvelopeSettingsResponsePtrOutput) ToEdifactEnvelopeSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactEnvelopeSettingsResponsePtrOutput {
	return o
}

func (o EdifactEnvelopeSettingsResponsePtrOutput) Elem() EdifactEnvelopeSettingsResponseOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) EdifactEnvelopeSettingsResponse { return *v }).(EdifactEnvelopeSettingsResponseOutput)
}

// The application reference id.
func (o EdifactEnvelopeSettingsResponsePtrOutput) ApplicationReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationReferenceId
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to apply delimiter string advice.
func (o EdifactEnvelopeSettingsResponsePtrOutput) ApplyDelimiterStringAdvice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ApplyDelimiterStringAdvice
	}).(pulumi.BoolPtrOutput)
}

// The communication agreement id.
func (o EdifactEnvelopeSettingsResponsePtrOutput) CommunicationAgreementId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommunicationAgreementId
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to create grouping segments.
func (o EdifactEnvelopeSettingsResponsePtrOutput) CreateGroupingSegments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CreateGroupingSegments
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable default group headers.
func (o EdifactEnvelopeSettingsResponsePtrOutput) EnableDefaultGroupHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableDefaultGroupHeaders
	}).(pulumi.BoolPtrOutput)
}

// The functional group id.
func (o EdifactEnvelopeSettingsResponsePtrOutput) FunctionalGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.FunctionalGroupId
	}).(pulumi.StringPtrOutput)
}

// The group application password.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupApplicationPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupApplicationPassword
	}).(pulumi.StringPtrOutput)
}

// The group application receiver id.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupApplicationReceiverId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupApplicationReceiverId
	}).(pulumi.StringPtrOutput)
}

// The group application receiver qualifier.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupApplicationReceiverQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupApplicationReceiverQualifier
	}).(pulumi.StringPtrOutput)
}

// The group application sender id.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupApplicationSenderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupApplicationSenderId
	}).(pulumi.StringPtrOutput)
}

// The group application sender qualifier.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupApplicationSenderQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupApplicationSenderQualifier
	}).(pulumi.StringPtrOutput)
}

// The group association assigned code.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupAssociationAssignedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupAssociationAssignedCode
	}).(pulumi.StringPtrOutput)
}

// The group control number lower bound.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.GroupControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The group control number prefix.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupControlNumberPrefix
	}).(pulumi.StringPtrOutput)
}

// The group control number suffix.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupControlNumberSuffix
	}).(pulumi.StringPtrOutput)
}

// The group control number upper bound.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.GroupControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The group controlling agency code.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupControllingAgencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupControllingAgencyCode
	}).(pulumi.StringPtrOutput)
}

// The group message release.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupMessageRelease() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupMessageRelease
	}).(pulumi.StringPtrOutput)
}

// The group message version.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupMessageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupMessageVersion
	}).(pulumi.StringPtrOutput)
}

// The interchange control number lower bound.
func (o EdifactEnvelopeSettingsResponsePtrOutput) InterchangeControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.InterchangeControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The interchange control number prefix.
func (o EdifactEnvelopeSettingsResponsePtrOutput) InterchangeControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.InterchangeControlNumberPrefix
	}).(pulumi.StringPtrOutput)
}

// The interchange control number suffix.
func (o EdifactEnvelopeSettingsResponsePtrOutput) InterchangeControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.InterchangeControlNumberSuffix
	}).(pulumi.StringPtrOutput)
}

// The interchange control number upper bound.
func (o EdifactEnvelopeSettingsResponsePtrOutput) InterchangeControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.InterchangeControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The value indicating whether the message is a test interchange.
func (o EdifactEnvelopeSettingsResponsePtrOutput) IsTestInterchange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsTestInterchange
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to overwrite existing transaction set control number.
func (o EdifactEnvelopeSettingsResponsePtrOutput) OverwriteExistingTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.OverwriteExistingTransactionSetControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The processing priority code.
func (o EdifactEnvelopeSettingsResponsePtrOutput) ProcessingPriorityCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProcessingPriorityCode
	}).(pulumi.StringPtrOutput)
}

// The receiver internal identification.
func (o EdifactEnvelopeSettingsResponsePtrOutput) ReceiverInternalIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReceiverInternalIdentification
	}).(pulumi.StringPtrOutput)
}

// The receiver internal sub identification.
func (o EdifactEnvelopeSettingsResponsePtrOutput) ReceiverInternalSubIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReceiverInternalSubIdentification
	}).(pulumi.StringPtrOutput)
}

// The receiver reverse routing address.
func (o EdifactEnvelopeSettingsResponsePtrOutput) ReceiverReverseRoutingAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReceiverReverseRoutingAddress
	}).(pulumi.StringPtrOutput)
}

// The recipient reference password qualifier.
func (o EdifactEnvelopeSettingsResponsePtrOutput) RecipientReferencePasswordQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.RecipientReferencePasswordQualifier
	}).(pulumi.StringPtrOutput)
}

// The recipient reference password value.
func (o EdifactEnvelopeSettingsResponsePtrOutput) RecipientReferencePasswordValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.RecipientReferencePasswordValue
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to rollover group control number.
func (o EdifactEnvelopeSettingsResponsePtrOutput) RolloverGroupControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.RolloverGroupControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover interchange control number.
func (o EdifactEnvelopeSettingsResponsePtrOutput) RolloverInterchangeControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.RolloverInterchangeControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover transaction set control number.
func (o EdifactEnvelopeSettingsResponsePtrOutput) RolloverTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.RolloverTransactionSetControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The sender internal identification.
func (o EdifactEnvelopeSettingsResponsePtrOutput) SenderInternalIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SenderInternalIdentification
	}).(pulumi.StringPtrOutput)
}

// The sender internal sub identification.
func (o EdifactEnvelopeSettingsResponsePtrOutput) SenderInternalSubIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SenderInternalSubIdentification
	}).(pulumi.StringPtrOutput)
}

// The sender reverse routing address.
func (o EdifactEnvelopeSettingsResponsePtrOutput) SenderReverseRoutingAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SenderReverseRoutingAddress
	}).(pulumi.StringPtrOutput)
}

// The transaction set control number lower bound.
func (o EdifactEnvelopeSettingsResponsePtrOutput) TransactionSetControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TransactionSetControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The transaction set control number prefix.
func (o EdifactEnvelopeSettingsResponsePtrOutput) TransactionSetControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TransactionSetControlNumberPrefix
	}).(pulumi.StringPtrOutput)
}

// The transaction set control number suffix.
func (o EdifactEnvelopeSettingsResponsePtrOutput) TransactionSetControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TransactionSetControlNumberSuffix
	}).(pulumi.StringPtrOutput)
}

// The transaction set control number upper bound.
func (o EdifactEnvelopeSettingsResponsePtrOutput) TransactionSetControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TransactionSetControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The Edifact agreement framing settings.
type EdifactFramingSettings struct {
	// The character encoding.
	CharacterEncoding *string `pulumi:"characterEncoding"`
	// The EDIFACT frame setting characterSet.
	CharacterSet string `pulumi:"characterSet"`
	// The component separator.
	ComponentSeparator int `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator int `pulumi:"dataElementSeparator"`
	// The EDIFACT frame setting decimal indicator.
	DecimalPointIndicator string `pulumi:"decimalPointIndicator"`
	// The protocol version.
	ProtocolVersion int `pulumi:"protocolVersion"`
	// The release indicator.
	ReleaseIndicator int `pulumi:"releaseIndicator"`
	// The repetition separator.
	RepetitionSeparator int `pulumi:"repetitionSeparator"`
	// The segment terminator.
	SegmentTerminator int `pulumi:"segmentTerminator"`
	// The EDIFACT frame setting segment terminator suffix.
	SegmentTerminatorSuffix string `pulumi:"segmentTerminatorSuffix"`
	// The service code list directory version.
	ServiceCodeListDirectoryVersion *string `pulumi:"serviceCodeListDirectoryVersion"`
}

// EdifactFramingSettingsInput is an input type that accepts EdifactFramingSettingsArgs and EdifactFramingSettingsOutput values.
// You can construct a concrete instance of `EdifactFramingSettingsInput` via:
//
//          EdifactFramingSettingsArgs{...}
type EdifactFramingSettingsInput interface {
	pulumi.Input

	ToEdifactFramingSettingsOutput() EdifactFramingSettingsOutput
	ToEdifactFramingSettingsOutputWithContext(context.Context) EdifactFramingSettingsOutput
}

// The Edifact agreement framing settings.
type EdifactFramingSettingsArgs struct {
	// The character encoding.
	CharacterEncoding pulumi.StringPtrInput `pulumi:"characterEncoding"`
	// The EDIFACT frame setting characterSet.
	CharacterSet pulumi.StringInput `pulumi:"characterSet"`
	// The component separator.
	ComponentSeparator pulumi.IntInput `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator pulumi.IntInput `pulumi:"dataElementSeparator"`
	// The EDIFACT frame setting decimal indicator.
	DecimalPointIndicator pulumi.StringInput `pulumi:"decimalPointIndicator"`
	// The protocol version.
	ProtocolVersion pulumi.IntInput `pulumi:"protocolVersion"`
	// The release indicator.
	ReleaseIndicator pulumi.IntInput `pulumi:"releaseIndicator"`
	// The repetition separator.
	RepetitionSeparator pulumi.IntInput `pulumi:"repetitionSeparator"`
	// The segment terminator.
	SegmentTerminator pulumi.IntInput `pulumi:"segmentTerminator"`
	// The EDIFACT frame setting segment terminator suffix.
	SegmentTerminatorSuffix pulumi.StringInput `pulumi:"segmentTerminatorSuffix"`
	// The service code list directory version.
	ServiceCodeListDirectoryVersion pulumi.StringPtrInput `pulumi:"serviceCodeListDirectoryVersion"`
}

func (EdifactFramingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactFramingSettings)(nil)).Elem()
}

func (i EdifactFramingSettingsArgs) ToEdifactFramingSettingsOutput() EdifactFramingSettingsOutput {
	return i.ToEdifactFramingSettingsOutputWithContext(context.Background())
}

func (i EdifactFramingSettingsArgs) ToEdifactFramingSettingsOutputWithContext(ctx context.Context) EdifactFramingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactFramingSettingsOutput)
}

func (i EdifactFramingSettingsArgs) ToEdifactFramingSettingsPtrOutput() EdifactFramingSettingsPtrOutput {
	return i.ToEdifactFramingSettingsPtrOutputWithContext(context.Background())
}

func (i EdifactFramingSettingsArgs) ToEdifactFramingSettingsPtrOutputWithContext(ctx context.Context) EdifactFramingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactFramingSettingsOutput).ToEdifactFramingSettingsPtrOutputWithContext(ctx)
}

// EdifactFramingSettingsPtrInput is an input type that accepts EdifactFramingSettingsArgs, EdifactFramingSettingsPtr and EdifactFramingSettingsPtrOutput values.
// You can construct a concrete instance of `EdifactFramingSettingsPtrInput` via:
//
//          EdifactFramingSettingsArgs{...}
//
//  or:
//
//          nil
type EdifactFramingSettingsPtrInput interface {
	pulumi.Input

	ToEdifactFramingSettingsPtrOutput() EdifactFramingSettingsPtrOutput
	ToEdifactFramingSettingsPtrOutputWithContext(context.Context) EdifactFramingSettingsPtrOutput
}

type edifactFramingSettingsPtrType EdifactFramingSettingsArgs

func EdifactFramingSettingsPtr(v *EdifactFramingSettingsArgs) EdifactFramingSettingsPtrInput {
	return (*edifactFramingSettingsPtrType)(v)
}

func (*edifactFramingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactFramingSettings)(nil)).Elem()
}

func (i *edifactFramingSettingsPtrType) ToEdifactFramingSettingsPtrOutput() EdifactFramingSettingsPtrOutput {
	return i.ToEdifactFramingSettingsPtrOutputWithContext(context.Background())
}

func (i *edifactFramingSettingsPtrType) ToEdifactFramingSettingsPtrOutputWithContext(ctx context.Context) EdifactFramingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactFramingSettingsPtrOutput)
}

// The Edifact agreement framing settings.
type EdifactFramingSettingsOutput struct{ *pulumi.OutputState }

func (EdifactFramingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactFramingSettings)(nil)).Elem()
}

func (o EdifactFramingSettingsOutput) ToEdifactFramingSettingsOutput() EdifactFramingSettingsOutput {
	return o
}

func (o EdifactFramingSettingsOutput) ToEdifactFramingSettingsOutputWithContext(ctx context.Context) EdifactFramingSettingsOutput {
	return o
}

func (o EdifactFramingSettingsOutput) ToEdifactFramingSettingsPtrOutput() EdifactFramingSettingsPtrOutput {
	return o.ToEdifactFramingSettingsPtrOutputWithContext(context.Background())
}

func (o EdifactFramingSettingsOutput) ToEdifactFramingSettingsPtrOutputWithContext(ctx context.Context) EdifactFramingSettingsPtrOutput {
	return o.ApplyT(func(v EdifactFramingSettings) *EdifactFramingSettings {
		return &v
	}).(EdifactFramingSettingsPtrOutput)
}

// The character encoding.
func (o EdifactFramingSettingsOutput) CharacterEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactFramingSettings) *string { return v.CharacterEncoding }).(pulumi.StringPtrOutput)
}

// The EDIFACT frame setting characterSet.
func (o EdifactFramingSettingsOutput) CharacterSet() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactFramingSettings) string { return v.CharacterSet }).(pulumi.StringOutput)
}

// The component separator.
func (o EdifactFramingSettingsOutput) ComponentSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactFramingSettings) int { return v.ComponentSeparator }).(pulumi.IntOutput)
}

// The data element separator.
func (o EdifactFramingSettingsOutput) DataElementSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactFramingSettings) int { return v.DataElementSeparator }).(pulumi.IntOutput)
}

// The EDIFACT frame setting decimal indicator.
func (o EdifactFramingSettingsOutput) DecimalPointIndicator() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactFramingSettings) string { return v.DecimalPointIndicator }).(pulumi.StringOutput)
}

// The protocol version.
func (o EdifactFramingSettingsOutput) ProtocolVersion() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactFramingSettings) int { return v.ProtocolVersion }).(pulumi.IntOutput)
}

// The release indicator.
func (o EdifactFramingSettingsOutput) ReleaseIndicator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactFramingSettings) int { return v.ReleaseIndicator }).(pulumi.IntOutput)
}

// The repetition separator.
func (o EdifactFramingSettingsOutput) RepetitionSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactFramingSettings) int { return v.RepetitionSeparator }).(pulumi.IntOutput)
}

// The segment terminator.
func (o EdifactFramingSettingsOutput) SegmentTerminator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactFramingSettings) int { return v.SegmentTerminator }).(pulumi.IntOutput)
}

// The EDIFACT frame setting segment terminator suffix.
func (o EdifactFramingSettingsOutput) SegmentTerminatorSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactFramingSettings) string { return v.SegmentTerminatorSuffix }).(pulumi.StringOutput)
}

// The service code list directory version.
func (o EdifactFramingSettingsOutput) ServiceCodeListDirectoryVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactFramingSettings) *string { return v.ServiceCodeListDirectoryVersion }).(pulumi.StringPtrOutput)
}

type EdifactFramingSettingsPtrOutput struct{ *pulumi.OutputState }

func (EdifactFramingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactFramingSettings)(nil)).Elem()
}

func (o EdifactFramingSettingsPtrOutput) ToEdifactFramingSettingsPtrOutput() EdifactFramingSettingsPtrOutput {
	return o
}

func (o EdifactFramingSettingsPtrOutput) ToEdifactFramingSettingsPtrOutputWithContext(ctx context.Context) EdifactFramingSettingsPtrOutput {
	return o
}

func (o EdifactFramingSettingsPtrOutput) Elem() EdifactFramingSettingsOutput {
	return o.ApplyT(func(v *EdifactFramingSettings) EdifactFramingSettings { return *v }).(EdifactFramingSettingsOutput)
}

// The character encoding.
func (o EdifactFramingSettingsPtrOutput) CharacterEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettings) *string {
		if v == nil {
			return nil
		}
		return v.CharacterEncoding
	}).(pulumi.StringPtrOutput)
}

// The EDIFACT frame setting characterSet.
func (o EdifactFramingSettingsPtrOutput) CharacterSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettings) *string {
		if v == nil {
			return nil
		}
		return &v.CharacterSet
	}).(pulumi.StringPtrOutput)
}

// The component separator.
func (o EdifactFramingSettingsPtrOutput) ComponentSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettings) *int {
		if v == nil {
			return nil
		}
		return &v.ComponentSeparator
	}).(pulumi.IntPtrOutput)
}

// The data element separator.
func (o EdifactFramingSettingsPtrOutput) DataElementSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettings) *int {
		if v == nil {
			return nil
		}
		return &v.DataElementSeparator
	}).(pulumi.IntPtrOutput)
}

// The EDIFACT frame setting decimal indicator.
func (o EdifactFramingSettingsPtrOutput) DecimalPointIndicator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettings) *string {
		if v == nil {
			return nil
		}
		return &v.DecimalPointIndicator
	}).(pulumi.StringPtrOutput)
}

// The protocol version.
func (o EdifactFramingSettingsPtrOutput) ProtocolVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettings) *int {
		if v == nil {
			return nil
		}
		return &v.ProtocolVersion
	}).(pulumi.IntPtrOutput)
}

// The release indicator.
func (o EdifactFramingSettingsPtrOutput) ReleaseIndicator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettings) *int {
		if v == nil {
			return nil
		}
		return &v.ReleaseIndicator
	}).(pulumi.IntPtrOutput)
}

// The repetition separator.
func (o EdifactFramingSettingsPtrOutput) RepetitionSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettings) *int {
		if v == nil {
			return nil
		}
		return &v.RepetitionSeparator
	}).(pulumi.IntPtrOutput)
}

// The segment terminator.
func (o EdifactFramingSettingsPtrOutput) SegmentTerminator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettings) *int {
		if v == nil {
			return nil
		}
		return &v.SegmentTerminator
	}).(pulumi.IntPtrOutput)
}

// The EDIFACT frame setting segment terminator suffix.
func (o EdifactFramingSettingsPtrOutput) SegmentTerminatorSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettings) *string {
		if v == nil {
			return nil
		}
		return &v.SegmentTerminatorSuffix
	}).(pulumi.StringPtrOutput)
}

// The service code list directory version.
func (o EdifactFramingSettingsPtrOutput) ServiceCodeListDirectoryVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettings) *string {
		if v == nil {
			return nil
		}
		return v.ServiceCodeListDirectoryVersion
	}).(pulumi.StringPtrOutput)
}

// The Edifact agreement framing settings.
type EdifactFramingSettingsResponse struct {
	// The character encoding.
	CharacterEncoding *string `pulumi:"characterEncoding"`
	// The EDIFACT frame setting characterSet.
	CharacterSet string `pulumi:"characterSet"`
	// The component separator.
	ComponentSeparator int `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator int `pulumi:"dataElementSeparator"`
	// The EDIFACT frame setting decimal indicator.
	DecimalPointIndicator string `pulumi:"decimalPointIndicator"`
	// The protocol version.
	ProtocolVersion int `pulumi:"protocolVersion"`
	// The release indicator.
	ReleaseIndicator int `pulumi:"releaseIndicator"`
	// The repetition separator.
	RepetitionSeparator int `pulumi:"repetitionSeparator"`
	// The segment terminator.
	SegmentTerminator int `pulumi:"segmentTerminator"`
	// The EDIFACT frame setting segment terminator suffix.
	SegmentTerminatorSuffix string `pulumi:"segmentTerminatorSuffix"`
	// The service code list directory version.
	ServiceCodeListDirectoryVersion *string `pulumi:"serviceCodeListDirectoryVersion"`
}

// EdifactFramingSettingsResponseInput is an input type that accepts EdifactFramingSettingsResponseArgs and EdifactFramingSettingsResponseOutput values.
// You can construct a concrete instance of `EdifactFramingSettingsResponseInput` via:
//
//          EdifactFramingSettingsResponseArgs{...}
type EdifactFramingSettingsResponseInput interface {
	pulumi.Input

	ToEdifactFramingSettingsResponseOutput() EdifactFramingSettingsResponseOutput
	ToEdifactFramingSettingsResponseOutputWithContext(context.Context) EdifactFramingSettingsResponseOutput
}

// The Edifact agreement framing settings.
type EdifactFramingSettingsResponseArgs struct {
	// The character encoding.
	CharacterEncoding pulumi.StringPtrInput `pulumi:"characterEncoding"`
	// The EDIFACT frame setting characterSet.
	CharacterSet pulumi.StringInput `pulumi:"characterSet"`
	// The component separator.
	ComponentSeparator pulumi.IntInput `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator pulumi.IntInput `pulumi:"dataElementSeparator"`
	// The EDIFACT frame setting decimal indicator.
	DecimalPointIndicator pulumi.StringInput `pulumi:"decimalPointIndicator"`
	// The protocol version.
	ProtocolVersion pulumi.IntInput `pulumi:"protocolVersion"`
	// The release indicator.
	ReleaseIndicator pulumi.IntInput `pulumi:"releaseIndicator"`
	// The repetition separator.
	RepetitionSeparator pulumi.IntInput `pulumi:"repetitionSeparator"`
	// The segment terminator.
	SegmentTerminator pulumi.IntInput `pulumi:"segmentTerminator"`
	// The EDIFACT frame setting segment terminator suffix.
	SegmentTerminatorSuffix pulumi.StringInput `pulumi:"segmentTerminatorSuffix"`
	// The service code list directory version.
	ServiceCodeListDirectoryVersion pulumi.StringPtrInput `pulumi:"serviceCodeListDirectoryVersion"`
}

func (EdifactFramingSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactFramingSettingsResponse)(nil)).Elem()
}

func (i EdifactFramingSettingsResponseArgs) ToEdifactFramingSettingsResponseOutput() EdifactFramingSettingsResponseOutput {
	return i.ToEdifactFramingSettingsResponseOutputWithContext(context.Background())
}

func (i EdifactFramingSettingsResponseArgs) ToEdifactFramingSettingsResponseOutputWithContext(ctx context.Context) EdifactFramingSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactFramingSettingsResponseOutput)
}

func (i EdifactFramingSettingsResponseArgs) ToEdifactFramingSettingsResponsePtrOutput() EdifactFramingSettingsResponsePtrOutput {
	return i.ToEdifactFramingSettingsResponsePtrOutputWithContext(context.Background())
}

func (i EdifactFramingSettingsResponseArgs) ToEdifactFramingSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactFramingSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactFramingSettingsResponseOutput).ToEdifactFramingSettingsResponsePtrOutputWithContext(ctx)
}

// EdifactFramingSettingsResponsePtrInput is an input type that accepts EdifactFramingSettingsResponseArgs, EdifactFramingSettingsResponsePtr and EdifactFramingSettingsResponsePtrOutput values.
// You can construct a concrete instance of `EdifactFramingSettingsResponsePtrInput` via:
//
//          EdifactFramingSettingsResponseArgs{...}
//
//  or:
//
//          nil
type EdifactFramingSettingsResponsePtrInput interface {
	pulumi.Input

	ToEdifactFramingSettingsResponsePtrOutput() EdifactFramingSettingsResponsePtrOutput
	ToEdifactFramingSettingsResponsePtrOutputWithContext(context.Context) EdifactFramingSettingsResponsePtrOutput
}

type edifactFramingSettingsResponsePtrType EdifactFramingSettingsResponseArgs

func EdifactFramingSettingsResponsePtr(v *EdifactFramingSettingsResponseArgs) EdifactFramingSettingsResponsePtrInput {
	return (*edifactFramingSettingsResponsePtrType)(v)
}

func (*edifactFramingSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactFramingSettingsResponse)(nil)).Elem()
}

func (i *edifactFramingSettingsResponsePtrType) ToEdifactFramingSettingsResponsePtrOutput() EdifactFramingSettingsResponsePtrOutput {
	return i.ToEdifactFramingSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *edifactFramingSettingsResponsePtrType) ToEdifactFramingSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactFramingSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactFramingSettingsResponsePtrOutput)
}

// The Edifact agreement framing settings.
type EdifactFramingSettingsResponseOutput struct{ *pulumi.OutputState }

func (EdifactFramingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactFramingSettingsResponse)(nil)).Elem()
}

func (o EdifactFramingSettingsResponseOutput) ToEdifactFramingSettingsResponseOutput() EdifactFramingSettingsResponseOutput {
	return o
}

func (o EdifactFramingSettingsResponseOutput) ToEdifactFramingSettingsResponseOutputWithContext(ctx context.Context) EdifactFramingSettingsResponseOutput {
	return o
}

func (o EdifactFramingSettingsResponseOutput) ToEdifactFramingSettingsResponsePtrOutput() EdifactFramingSettingsResponsePtrOutput {
	return o.ToEdifactFramingSettingsResponsePtrOutputWithContext(context.Background())
}

func (o EdifactFramingSettingsResponseOutput) ToEdifactFramingSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactFramingSettingsResponsePtrOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) *EdifactFramingSettingsResponse {
		return &v
	}).(EdifactFramingSettingsResponsePtrOutput)
}

// The character encoding.
func (o EdifactFramingSettingsResponseOutput) CharacterEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) *string { return v.CharacterEncoding }).(pulumi.StringPtrOutput)
}

// The EDIFACT frame setting characterSet.
func (o EdifactFramingSettingsResponseOutput) CharacterSet() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) string { return v.CharacterSet }).(pulumi.StringOutput)
}

// The component separator.
func (o EdifactFramingSettingsResponseOutput) ComponentSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) int { return v.ComponentSeparator }).(pulumi.IntOutput)
}

// The data element separator.
func (o EdifactFramingSettingsResponseOutput) DataElementSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) int { return v.DataElementSeparator }).(pulumi.IntOutput)
}

// The EDIFACT frame setting decimal indicator.
func (o EdifactFramingSettingsResponseOutput) DecimalPointIndicator() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) string { return v.DecimalPointIndicator }).(pulumi.StringOutput)
}

// The protocol version.
func (o EdifactFramingSettingsResponseOutput) ProtocolVersion() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) int { return v.ProtocolVersion }).(pulumi.IntOutput)
}

// The release indicator.
func (o EdifactFramingSettingsResponseOutput) ReleaseIndicator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) int { return v.ReleaseIndicator }).(pulumi.IntOutput)
}

// The repetition separator.
func (o EdifactFramingSettingsResponseOutput) RepetitionSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) int { return v.RepetitionSeparator }).(pulumi.IntOutput)
}

// The segment terminator.
func (o EdifactFramingSettingsResponseOutput) SegmentTerminator() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) int { return v.SegmentTerminator }).(pulumi.IntOutput)
}

// The EDIFACT frame setting segment terminator suffix.
func (o EdifactFramingSettingsResponseOutput) SegmentTerminatorSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) string { return v.SegmentTerminatorSuffix }).(pulumi.StringOutput)
}

// The service code list directory version.
func (o EdifactFramingSettingsResponseOutput) ServiceCodeListDirectoryVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) *string { return v.ServiceCodeListDirectoryVersion }).(pulumi.StringPtrOutput)
}

type EdifactFramingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (EdifactFramingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactFramingSettingsResponse)(nil)).Elem()
}

func (o EdifactFramingSettingsResponsePtrOutput) ToEdifactFramingSettingsResponsePtrOutput() EdifactFramingSettingsResponsePtrOutput {
	return o
}

func (o EdifactFramingSettingsResponsePtrOutput) ToEdifactFramingSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactFramingSettingsResponsePtrOutput {
	return o
}

func (o EdifactFramingSettingsResponsePtrOutput) Elem() EdifactFramingSettingsResponseOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) EdifactFramingSettingsResponse { return *v }).(EdifactFramingSettingsResponseOutput)
}

// The character encoding.
func (o EdifactFramingSettingsResponsePtrOutput) CharacterEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CharacterEncoding
	}).(pulumi.StringPtrOutput)
}

// The EDIFACT frame setting characterSet.
func (o EdifactFramingSettingsResponsePtrOutput) CharacterSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CharacterSet
	}).(pulumi.StringPtrOutput)
}

// The component separator.
func (o EdifactFramingSettingsResponsePtrOutput) ComponentSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ComponentSeparator
	}).(pulumi.IntPtrOutput)
}

// The data element separator.
func (o EdifactFramingSettingsResponsePtrOutput) DataElementSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DataElementSeparator
	}).(pulumi.IntPtrOutput)
}

// The EDIFACT frame setting decimal indicator.
func (o EdifactFramingSettingsResponsePtrOutput) DecimalPointIndicator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DecimalPointIndicator
	}).(pulumi.StringPtrOutput)
}

// The protocol version.
func (o EdifactFramingSettingsResponsePtrOutput) ProtocolVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ProtocolVersion
	}).(pulumi.IntPtrOutput)
}

// The release indicator.
func (o EdifactFramingSettingsResponsePtrOutput) ReleaseIndicator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ReleaseIndicator
	}).(pulumi.IntPtrOutput)
}

// The repetition separator.
func (o EdifactFramingSettingsResponsePtrOutput) RepetitionSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.RepetitionSeparator
	}).(pulumi.IntPtrOutput)
}

// The segment terminator.
func (o EdifactFramingSettingsResponsePtrOutput) SegmentTerminator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.SegmentTerminator
	}).(pulumi.IntPtrOutput)
}

// The EDIFACT frame setting segment terminator suffix.
func (o EdifactFramingSettingsResponsePtrOutput) SegmentTerminatorSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SegmentTerminatorSuffix
	}).(pulumi.StringPtrOutput)
}

// The service code list directory version.
func (o EdifactFramingSettingsResponsePtrOutput) ServiceCodeListDirectoryVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceCodeListDirectoryVersion
	}).(pulumi.StringPtrOutput)
}

// The Edifact message filter for odata query.
type EdifactMessageFilter struct {
	// The message filter type.
	MessageFilterType string `pulumi:"messageFilterType"`
}

// EdifactMessageFilterInput is an input type that accepts EdifactMessageFilterArgs and EdifactMessageFilterOutput values.
// You can construct a concrete instance of `EdifactMessageFilterInput` via:
//
//          EdifactMessageFilterArgs{...}
type EdifactMessageFilterInput interface {
	pulumi.Input

	ToEdifactMessageFilterOutput() EdifactMessageFilterOutput
	ToEdifactMessageFilterOutputWithContext(context.Context) EdifactMessageFilterOutput
}

// The Edifact message filter for odata query.
type EdifactMessageFilterArgs struct {
	// The message filter type.
	MessageFilterType pulumi.StringInput `pulumi:"messageFilterType"`
}

func (EdifactMessageFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactMessageFilter)(nil)).Elem()
}

func (i EdifactMessageFilterArgs) ToEdifactMessageFilterOutput() EdifactMessageFilterOutput {
	return i.ToEdifactMessageFilterOutputWithContext(context.Background())
}

func (i EdifactMessageFilterArgs) ToEdifactMessageFilterOutputWithContext(ctx context.Context) EdifactMessageFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactMessageFilterOutput)
}

func (i EdifactMessageFilterArgs) ToEdifactMessageFilterPtrOutput() EdifactMessageFilterPtrOutput {
	return i.ToEdifactMessageFilterPtrOutputWithContext(context.Background())
}

func (i EdifactMessageFilterArgs) ToEdifactMessageFilterPtrOutputWithContext(ctx context.Context) EdifactMessageFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactMessageFilterOutput).ToEdifactMessageFilterPtrOutputWithContext(ctx)
}

// EdifactMessageFilterPtrInput is an input type that accepts EdifactMessageFilterArgs, EdifactMessageFilterPtr and EdifactMessageFilterPtrOutput values.
// You can construct a concrete instance of `EdifactMessageFilterPtrInput` via:
//
//          EdifactMessageFilterArgs{...}
//
//  or:
//
//          nil
type EdifactMessageFilterPtrInput interface {
	pulumi.Input

	ToEdifactMessageFilterPtrOutput() EdifactMessageFilterPtrOutput
	ToEdifactMessageFilterPtrOutputWithContext(context.Context) EdifactMessageFilterPtrOutput
}

type edifactMessageFilterPtrType EdifactMessageFilterArgs

func EdifactMessageFilterPtr(v *EdifactMessageFilterArgs) EdifactMessageFilterPtrInput {
	return (*edifactMessageFilterPtrType)(v)
}

func (*edifactMessageFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactMessageFilter)(nil)).Elem()
}

func (i *edifactMessageFilterPtrType) ToEdifactMessageFilterPtrOutput() EdifactMessageFilterPtrOutput {
	return i.ToEdifactMessageFilterPtrOutputWithContext(context.Background())
}

func (i *edifactMessageFilterPtrType) ToEdifactMessageFilterPtrOutputWithContext(ctx context.Context) EdifactMessageFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactMessageFilterPtrOutput)
}

// The Edifact message filter for odata query.
type EdifactMessageFilterOutput struct{ *pulumi.OutputState }

func (EdifactMessageFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactMessageFilter)(nil)).Elem()
}

func (o EdifactMessageFilterOutput) ToEdifactMessageFilterOutput() EdifactMessageFilterOutput {
	return o
}

func (o EdifactMessageFilterOutput) ToEdifactMessageFilterOutputWithContext(ctx context.Context) EdifactMessageFilterOutput {
	return o
}

func (o EdifactMessageFilterOutput) ToEdifactMessageFilterPtrOutput() EdifactMessageFilterPtrOutput {
	return o.ToEdifactMessageFilterPtrOutputWithContext(context.Background())
}

func (o EdifactMessageFilterOutput) ToEdifactMessageFilterPtrOutputWithContext(ctx context.Context) EdifactMessageFilterPtrOutput {
	return o.ApplyT(func(v EdifactMessageFilter) *EdifactMessageFilter {
		return &v
	}).(EdifactMessageFilterPtrOutput)
}

// The message filter type.
func (o EdifactMessageFilterOutput) MessageFilterType() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactMessageFilter) string { return v.MessageFilterType }).(pulumi.StringOutput)
}

type EdifactMessageFilterPtrOutput struct{ *pulumi.OutputState }

func (EdifactMessageFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactMessageFilter)(nil)).Elem()
}

func (o EdifactMessageFilterPtrOutput) ToEdifactMessageFilterPtrOutput() EdifactMessageFilterPtrOutput {
	return o
}

func (o EdifactMessageFilterPtrOutput) ToEdifactMessageFilterPtrOutputWithContext(ctx context.Context) EdifactMessageFilterPtrOutput {
	return o
}

func (o EdifactMessageFilterPtrOutput) Elem() EdifactMessageFilterOutput {
	return o.ApplyT(func(v *EdifactMessageFilter) EdifactMessageFilter { return *v }).(EdifactMessageFilterOutput)
}

// The message filter type.
func (o EdifactMessageFilterPtrOutput) MessageFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactMessageFilter) *string {
		if v == nil {
			return nil
		}
		return &v.MessageFilterType
	}).(pulumi.StringPtrOutput)
}

// The Edifact message filter for odata query.
type EdifactMessageFilterResponse struct {
	// The message filter type.
	MessageFilterType string `pulumi:"messageFilterType"`
}

// EdifactMessageFilterResponseInput is an input type that accepts EdifactMessageFilterResponseArgs and EdifactMessageFilterResponseOutput values.
// You can construct a concrete instance of `EdifactMessageFilterResponseInput` via:
//
//          EdifactMessageFilterResponseArgs{...}
type EdifactMessageFilterResponseInput interface {
	pulumi.Input

	ToEdifactMessageFilterResponseOutput() EdifactMessageFilterResponseOutput
	ToEdifactMessageFilterResponseOutputWithContext(context.Context) EdifactMessageFilterResponseOutput
}

// The Edifact message filter for odata query.
type EdifactMessageFilterResponseArgs struct {
	// The message filter type.
	MessageFilterType pulumi.StringInput `pulumi:"messageFilterType"`
}

func (EdifactMessageFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactMessageFilterResponse)(nil)).Elem()
}

func (i EdifactMessageFilterResponseArgs) ToEdifactMessageFilterResponseOutput() EdifactMessageFilterResponseOutput {
	return i.ToEdifactMessageFilterResponseOutputWithContext(context.Background())
}

func (i EdifactMessageFilterResponseArgs) ToEdifactMessageFilterResponseOutputWithContext(ctx context.Context) EdifactMessageFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactMessageFilterResponseOutput)
}

func (i EdifactMessageFilterResponseArgs) ToEdifactMessageFilterResponsePtrOutput() EdifactMessageFilterResponsePtrOutput {
	return i.ToEdifactMessageFilterResponsePtrOutputWithContext(context.Background())
}

func (i EdifactMessageFilterResponseArgs) ToEdifactMessageFilterResponsePtrOutputWithContext(ctx context.Context) EdifactMessageFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactMessageFilterResponseOutput).ToEdifactMessageFilterResponsePtrOutputWithContext(ctx)
}

// EdifactMessageFilterResponsePtrInput is an input type that accepts EdifactMessageFilterResponseArgs, EdifactMessageFilterResponsePtr and EdifactMessageFilterResponsePtrOutput values.
// You can construct a concrete instance of `EdifactMessageFilterResponsePtrInput` via:
//
//          EdifactMessageFilterResponseArgs{...}
//
//  or:
//
//          nil
type EdifactMessageFilterResponsePtrInput interface {
	pulumi.Input

	ToEdifactMessageFilterResponsePtrOutput() EdifactMessageFilterResponsePtrOutput
	ToEdifactMessageFilterResponsePtrOutputWithContext(context.Context) EdifactMessageFilterResponsePtrOutput
}

type edifactMessageFilterResponsePtrType EdifactMessageFilterResponseArgs

func EdifactMessageFilterResponsePtr(v *EdifactMessageFilterResponseArgs) EdifactMessageFilterResponsePtrInput {
	return (*edifactMessageFilterResponsePtrType)(v)
}

func (*edifactMessageFilterResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactMessageFilterResponse)(nil)).Elem()
}

func (i *edifactMessageFilterResponsePtrType) ToEdifactMessageFilterResponsePtrOutput() EdifactMessageFilterResponsePtrOutput {
	return i.ToEdifactMessageFilterResponsePtrOutputWithContext(context.Background())
}

func (i *edifactMessageFilterResponsePtrType) ToEdifactMessageFilterResponsePtrOutputWithContext(ctx context.Context) EdifactMessageFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactMessageFilterResponsePtrOutput)
}

// The Edifact message filter for odata query.
type EdifactMessageFilterResponseOutput struct{ *pulumi.OutputState }

func (EdifactMessageFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactMessageFilterResponse)(nil)).Elem()
}

func (o EdifactMessageFilterResponseOutput) ToEdifactMessageFilterResponseOutput() EdifactMessageFilterResponseOutput {
	return o
}

func (o EdifactMessageFilterResponseOutput) ToEdifactMessageFilterResponseOutputWithContext(ctx context.Context) EdifactMessageFilterResponseOutput {
	return o
}

func (o EdifactMessageFilterResponseOutput) ToEdifactMessageFilterResponsePtrOutput() EdifactMessageFilterResponsePtrOutput {
	return o.ToEdifactMessageFilterResponsePtrOutputWithContext(context.Background())
}

func (o EdifactMessageFilterResponseOutput) ToEdifactMessageFilterResponsePtrOutputWithContext(ctx context.Context) EdifactMessageFilterResponsePtrOutput {
	return o.ApplyT(func(v EdifactMessageFilterResponse) *EdifactMessageFilterResponse {
		return &v
	}).(EdifactMessageFilterResponsePtrOutput)
}

// The message filter type.
func (o EdifactMessageFilterResponseOutput) MessageFilterType() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactMessageFilterResponse) string { return v.MessageFilterType }).(pulumi.StringOutput)
}

type EdifactMessageFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (EdifactMessageFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactMessageFilterResponse)(nil)).Elem()
}

func (o EdifactMessageFilterResponsePtrOutput) ToEdifactMessageFilterResponsePtrOutput() EdifactMessageFilterResponsePtrOutput {
	return o
}

func (o EdifactMessageFilterResponsePtrOutput) ToEdifactMessageFilterResponsePtrOutputWithContext(ctx context.Context) EdifactMessageFilterResponsePtrOutput {
	return o
}

func (o EdifactMessageFilterResponsePtrOutput) Elem() EdifactMessageFilterResponseOutput {
	return o.ApplyT(func(v *EdifactMessageFilterResponse) EdifactMessageFilterResponse { return *v }).(EdifactMessageFilterResponseOutput)
}

// The message filter type.
func (o EdifactMessageFilterResponsePtrOutput) MessageFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactMessageFilterResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MessageFilterType
	}).(pulumi.StringPtrOutput)
}

// The Edifact message identifier.
type EdifactMessageIdentifier struct {
	// The message id on which this envelope settings has to be applied.
	MessageId string `pulumi:"messageId"`
}

// EdifactMessageIdentifierInput is an input type that accepts EdifactMessageIdentifierArgs and EdifactMessageIdentifierOutput values.
// You can construct a concrete instance of `EdifactMessageIdentifierInput` via:
//
//          EdifactMessageIdentifierArgs{...}
type EdifactMessageIdentifierInput interface {
	pulumi.Input

	ToEdifactMessageIdentifierOutput() EdifactMessageIdentifierOutput
	ToEdifactMessageIdentifierOutputWithContext(context.Context) EdifactMessageIdentifierOutput
}

// The Edifact message identifier.
type EdifactMessageIdentifierArgs struct {
	// The message id on which this envelope settings has to be applied.
	MessageId pulumi.StringInput `pulumi:"messageId"`
}

func (EdifactMessageIdentifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactMessageIdentifier)(nil)).Elem()
}

func (i EdifactMessageIdentifierArgs) ToEdifactMessageIdentifierOutput() EdifactMessageIdentifierOutput {
	return i.ToEdifactMessageIdentifierOutputWithContext(context.Background())
}

func (i EdifactMessageIdentifierArgs) ToEdifactMessageIdentifierOutputWithContext(ctx context.Context) EdifactMessageIdentifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactMessageIdentifierOutput)
}

// EdifactMessageIdentifierArrayInput is an input type that accepts EdifactMessageIdentifierArray and EdifactMessageIdentifierArrayOutput values.
// You can construct a concrete instance of `EdifactMessageIdentifierArrayInput` via:
//
//          EdifactMessageIdentifierArray{ EdifactMessageIdentifierArgs{...} }
type EdifactMessageIdentifierArrayInput interface {
	pulumi.Input

	ToEdifactMessageIdentifierArrayOutput() EdifactMessageIdentifierArrayOutput
	ToEdifactMessageIdentifierArrayOutputWithContext(context.Context) EdifactMessageIdentifierArrayOutput
}

type EdifactMessageIdentifierArray []EdifactMessageIdentifierInput

func (EdifactMessageIdentifierArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactMessageIdentifier)(nil)).Elem()
}

func (i EdifactMessageIdentifierArray) ToEdifactMessageIdentifierArrayOutput() EdifactMessageIdentifierArrayOutput {
	return i.ToEdifactMessageIdentifierArrayOutputWithContext(context.Background())
}

func (i EdifactMessageIdentifierArray) ToEdifactMessageIdentifierArrayOutputWithContext(ctx context.Context) EdifactMessageIdentifierArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactMessageIdentifierArrayOutput)
}

// The Edifact message identifier.
type EdifactMessageIdentifierOutput struct{ *pulumi.OutputState }

func (EdifactMessageIdentifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactMessageIdentifier)(nil)).Elem()
}

func (o EdifactMessageIdentifierOutput) ToEdifactMessageIdentifierOutput() EdifactMessageIdentifierOutput {
	return o
}

func (o EdifactMessageIdentifierOutput) ToEdifactMessageIdentifierOutputWithContext(ctx context.Context) EdifactMessageIdentifierOutput {
	return o
}

// The message id on which this envelope settings has to be applied.
func (o EdifactMessageIdentifierOutput) MessageId() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactMessageIdentifier) string { return v.MessageId }).(pulumi.StringOutput)
}

type EdifactMessageIdentifierArrayOutput struct{ *pulumi.OutputState }

func (EdifactMessageIdentifierArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactMessageIdentifier)(nil)).Elem()
}

func (o EdifactMessageIdentifierArrayOutput) ToEdifactMessageIdentifierArrayOutput() EdifactMessageIdentifierArrayOutput {
	return o
}

func (o EdifactMessageIdentifierArrayOutput) ToEdifactMessageIdentifierArrayOutputWithContext(ctx context.Context) EdifactMessageIdentifierArrayOutput {
	return o
}

func (o EdifactMessageIdentifierArrayOutput) Index(i pulumi.IntInput) EdifactMessageIdentifierOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdifactMessageIdentifier {
		return vs[0].([]EdifactMessageIdentifier)[vs[1].(int)]
	}).(EdifactMessageIdentifierOutput)
}

// The Edifact message identifier.
type EdifactMessageIdentifierResponse struct {
	// The message id on which this envelope settings has to be applied.
	MessageId string `pulumi:"messageId"`
}

// EdifactMessageIdentifierResponseInput is an input type that accepts EdifactMessageIdentifierResponseArgs and EdifactMessageIdentifierResponseOutput values.
// You can construct a concrete instance of `EdifactMessageIdentifierResponseInput` via:
//
//          EdifactMessageIdentifierResponseArgs{...}
type EdifactMessageIdentifierResponseInput interface {
	pulumi.Input

	ToEdifactMessageIdentifierResponseOutput() EdifactMessageIdentifierResponseOutput
	ToEdifactMessageIdentifierResponseOutputWithContext(context.Context) EdifactMessageIdentifierResponseOutput
}

// The Edifact message identifier.
type EdifactMessageIdentifierResponseArgs struct {
	// The message id on which this envelope settings has to be applied.
	MessageId pulumi.StringInput `pulumi:"messageId"`
}

func (EdifactMessageIdentifierResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactMessageIdentifierResponse)(nil)).Elem()
}

func (i EdifactMessageIdentifierResponseArgs) ToEdifactMessageIdentifierResponseOutput() EdifactMessageIdentifierResponseOutput {
	return i.ToEdifactMessageIdentifierResponseOutputWithContext(context.Background())
}

func (i EdifactMessageIdentifierResponseArgs) ToEdifactMessageIdentifierResponseOutputWithContext(ctx context.Context) EdifactMessageIdentifierResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactMessageIdentifierResponseOutput)
}

// EdifactMessageIdentifierResponseArrayInput is an input type that accepts EdifactMessageIdentifierResponseArray and EdifactMessageIdentifierResponseArrayOutput values.
// You can construct a concrete instance of `EdifactMessageIdentifierResponseArrayInput` via:
//
//          EdifactMessageIdentifierResponseArray{ EdifactMessageIdentifierResponseArgs{...} }
type EdifactMessageIdentifierResponseArrayInput interface {
	pulumi.Input

	ToEdifactMessageIdentifierResponseArrayOutput() EdifactMessageIdentifierResponseArrayOutput
	ToEdifactMessageIdentifierResponseArrayOutputWithContext(context.Context) EdifactMessageIdentifierResponseArrayOutput
}

type EdifactMessageIdentifierResponseArray []EdifactMessageIdentifierResponseInput

func (EdifactMessageIdentifierResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactMessageIdentifierResponse)(nil)).Elem()
}

func (i EdifactMessageIdentifierResponseArray) ToEdifactMessageIdentifierResponseArrayOutput() EdifactMessageIdentifierResponseArrayOutput {
	return i.ToEdifactMessageIdentifierResponseArrayOutputWithContext(context.Background())
}

func (i EdifactMessageIdentifierResponseArray) ToEdifactMessageIdentifierResponseArrayOutputWithContext(ctx context.Context) EdifactMessageIdentifierResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactMessageIdentifierResponseArrayOutput)
}

// The Edifact message identifier.
type EdifactMessageIdentifierResponseOutput struct{ *pulumi.OutputState }

func (EdifactMessageIdentifierResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactMessageIdentifierResponse)(nil)).Elem()
}

func (o EdifactMessageIdentifierResponseOutput) ToEdifactMessageIdentifierResponseOutput() EdifactMessageIdentifierResponseOutput {
	return o
}

func (o EdifactMessageIdentifierResponseOutput) ToEdifactMessageIdentifierResponseOutputWithContext(ctx context.Context) EdifactMessageIdentifierResponseOutput {
	return o
}

// The message id on which this envelope settings has to be applied.
func (o EdifactMessageIdentifierResponseOutput) MessageId() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactMessageIdentifierResponse) string { return v.MessageId }).(pulumi.StringOutput)
}

type EdifactMessageIdentifierResponseArrayOutput struct{ *pulumi.OutputState }

func (EdifactMessageIdentifierResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactMessageIdentifierResponse)(nil)).Elem()
}

func (o EdifactMessageIdentifierResponseArrayOutput) ToEdifactMessageIdentifierResponseArrayOutput() EdifactMessageIdentifierResponseArrayOutput {
	return o
}

func (o EdifactMessageIdentifierResponseArrayOutput) ToEdifactMessageIdentifierResponseArrayOutputWithContext(ctx context.Context) EdifactMessageIdentifierResponseArrayOutput {
	return o
}

func (o EdifactMessageIdentifierResponseArrayOutput) Index(i pulumi.IntInput) EdifactMessageIdentifierResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdifactMessageIdentifierResponse {
		return vs[0].([]EdifactMessageIdentifierResponse)[vs[1].(int)]
	}).(EdifactMessageIdentifierResponseOutput)
}

// The Edifact one way agreement.
type EdifactOneWayAgreement struct {
	// The EDIFACT protocol settings.
	ProtocolSettings EdifactProtocolSettings `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity BusinessIdentity `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity BusinessIdentity `pulumi:"senderBusinessIdentity"`
}

// EdifactOneWayAgreementInput is an input type that accepts EdifactOneWayAgreementArgs and EdifactOneWayAgreementOutput values.
// You can construct a concrete instance of `EdifactOneWayAgreementInput` via:
//
//          EdifactOneWayAgreementArgs{...}
type EdifactOneWayAgreementInput interface {
	pulumi.Input

	ToEdifactOneWayAgreementOutput() EdifactOneWayAgreementOutput
	ToEdifactOneWayAgreementOutputWithContext(context.Context) EdifactOneWayAgreementOutput
}

// The Edifact one way agreement.
type EdifactOneWayAgreementArgs struct {
	// The EDIFACT protocol settings.
	ProtocolSettings EdifactProtocolSettingsInput `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity BusinessIdentityInput `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity BusinessIdentityInput `pulumi:"senderBusinessIdentity"`
}

func (EdifactOneWayAgreementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactOneWayAgreement)(nil)).Elem()
}

func (i EdifactOneWayAgreementArgs) ToEdifactOneWayAgreementOutput() EdifactOneWayAgreementOutput {
	return i.ToEdifactOneWayAgreementOutputWithContext(context.Background())
}

func (i EdifactOneWayAgreementArgs) ToEdifactOneWayAgreementOutputWithContext(ctx context.Context) EdifactOneWayAgreementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactOneWayAgreementOutput)
}

func (i EdifactOneWayAgreementArgs) ToEdifactOneWayAgreementPtrOutput() EdifactOneWayAgreementPtrOutput {
	return i.ToEdifactOneWayAgreementPtrOutputWithContext(context.Background())
}

func (i EdifactOneWayAgreementArgs) ToEdifactOneWayAgreementPtrOutputWithContext(ctx context.Context) EdifactOneWayAgreementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactOneWayAgreementOutput).ToEdifactOneWayAgreementPtrOutputWithContext(ctx)
}

// EdifactOneWayAgreementPtrInput is an input type that accepts EdifactOneWayAgreementArgs, EdifactOneWayAgreementPtr and EdifactOneWayAgreementPtrOutput values.
// You can construct a concrete instance of `EdifactOneWayAgreementPtrInput` via:
//
//          EdifactOneWayAgreementArgs{...}
//
//  or:
//
//          nil
type EdifactOneWayAgreementPtrInput interface {
	pulumi.Input

	ToEdifactOneWayAgreementPtrOutput() EdifactOneWayAgreementPtrOutput
	ToEdifactOneWayAgreementPtrOutputWithContext(context.Context) EdifactOneWayAgreementPtrOutput
}

type edifactOneWayAgreementPtrType EdifactOneWayAgreementArgs

func EdifactOneWayAgreementPtr(v *EdifactOneWayAgreementArgs) EdifactOneWayAgreementPtrInput {
	return (*edifactOneWayAgreementPtrType)(v)
}

func (*edifactOneWayAgreementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactOneWayAgreement)(nil)).Elem()
}

func (i *edifactOneWayAgreementPtrType) ToEdifactOneWayAgreementPtrOutput() EdifactOneWayAgreementPtrOutput {
	return i.ToEdifactOneWayAgreementPtrOutputWithContext(context.Background())
}

func (i *edifactOneWayAgreementPtrType) ToEdifactOneWayAgreementPtrOutputWithContext(ctx context.Context) EdifactOneWayAgreementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactOneWayAgreementPtrOutput)
}

// The Edifact one way agreement.
type EdifactOneWayAgreementOutput struct{ *pulumi.OutputState }

func (EdifactOneWayAgreementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactOneWayAgreement)(nil)).Elem()
}

func (o EdifactOneWayAgreementOutput) ToEdifactOneWayAgreementOutput() EdifactOneWayAgreementOutput {
	return o
}

func (o EdifactOneWayAgreementOutput) ToEdifactOneWayAgreementOutputWithContext(ctx context.Context) EdifactOneWayAgreementOutput {
	return o
}

func (o EdifactOneWayAgreementOutput) ToEdifactOneWayAgreementPtrOutput() EdifactOneWayAgreementPtrOutput {
	return o.ToEdifactOneWayAgreementPtrOutputWithContext(context.Background())
}

func (o EdifactOneWayAgreementOutput) ToEdifactOneWayAgreementPtrOutputWithContext(ctx context.Context) EdifactOneWayAgreementPtrOutput {
	return o.ApplyT(func(v EdifactOneWayAgreement) *EdifactOneWayAgreement {
		return &v
	}).(EdifactOneWayAgreementPtrOutput)
}

// The EDIFACT protocol settings.
func (o EdifactOneWayAgreementOutput) ProtocolSettings() EdifactProtocolSettingsOutput {
	return o.ApplyT(func(v EdifactOneWayAgreement) EdifactProtocolSettings { return v.ProtocolSettings }).(EdifactProtocolSettingsOutput)
}

// The receiver business identity
func (o EdifactOneWayAgreementOutput) ReceiverBusinessIdentity() BusinessIdentityOutput {
	return o.ApplyT(func(v EdifactOneWayAgreement) BusinessIdentity { return v.ReceiverBusinessIdentity }).(BusinessIdentityOutput)
}

// The sender business identity
func (o EdifactOneWayAgreementOutput) SenderBusinessIdentity() BusinessIdentityOutput {
	return o.ApplyT(func(v EdifactOneWayAgreement) BusinessIdentity { return v.SenderBusinessIdentity }).(BusinessIdentityOutput)
}

type EdifactOneWayAgreementPtrOutput struct{ *pulumi.OutputState }

func (EdifactOneWayAgreementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactOneWayAgreement)(nil)).Elem()
}

func (o EdifactOneWayAgreementPtrOutput) ToEdifactOneWayAgreementPtrOutput() EdifactOneWayAgreementPtrOutput {
	return o
}

func (o EdifactOneWayAgreementPtrOutput) ToEdifactOneWayAgreementPtrOutputWithContext(ctx context.Context) EdifactOneWayAgreementPtrOutput {
	return o
}

func (o EdifactOneWayAgreementPtrOutput) Elem() EdifactOneWayAgreementOutput {
	return o.ApplyT(func(v *EdifactOneWayAgreement) EdifactOneWayAgreement { return *v }).(EdifactOneWayAgreementOutput)
}

// The EDIFACT protocol settings.
func (o EdifactOneWayAgreementPtrOutput) ProtocolSettings() EdifactProtocolSettingsPtrOutput {
	return o.ApplyT(func(v *EdifactOneWayAgreement) *EdifactProtocolSettings {
		if v == nil {
			return nil
		}
		return &v.ProtocolSettings
	}).(EdifactProtocolSettingsPtrOutput)
}

// The receiver business identity
func (o EdifactOneWayAgreementPtrOutput) ReceiverBusinessIdentity() BusinessIdentityPtrOutput {
	return o.ApplyT(func(v *EdifactOneWayAgreement) *BusinessIdentity {
		if v == nil {
			return nil
		}
		return &v.ReceiverBusinessIdentity
	}).(BusinessIdentityPtrOutput)
}

// The sender business identity
func (o EdifactOneWayAgreementPtrOutput) SenderBusinessIdentity() BusinessIdentityPtrOutput {
	return o.ApplyT(func(v *EdifactOneWayAgreement) *BusinessIdentity {
		if v == nil {
			return nil
		}
		return &v.SenderBusinessIdentity
	}).(BusinessIdentityPtrOutput)
}

// The Edifact one way agreement.
type EdifactOneWayAgreementResponse struct {
	// The EDIFACT protocol settings.
	ProtocolSettings EdifactProtocolSettingsResponse `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity BusinessIdentityResponse `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity BusinessIdentityResponse `pulumi:"senderBusinessIdentity"`
}

// EdifactOneWayAgreementResponseInput is an input type that accepts EdifactOneWayAgreementResponseArgs and EdifactOneWayAgreementResponseOutput values.
// You can construct a concrete instance of `EdifactOneWayAgreementResponseInput` via:
//
//          EdifactOneWayAgreementResponseArgs{...}
type EdifactOneWayAgreementResponseInput interface {
	pulumi.Input

	ToEdifactOneWayAgreementResponseOutput() EdifactOneWayAgreementResponseOutput
	ToEdifactOneWayAgreementResponseOutputWithContext(context.Context) EdifactOneWayAgreementResponseOutput
}

// The Edifact one way agreement.
type EdifactOneWayAgreementResponseArgs struct {
	// The EDIFACT protocol settings.
	ProtocolSettings EdifactProtocolSettingsResponseInput `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity BusinessIdentityResponseInput `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity BusinessIdentityResponseInput `pulumi:"senderBusinessIdentity"`
}

func (EdifactOneWayAgreementResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactOneWayAgreementResponse)(nil)).Elem()
}

func (i EdifactOneWayAgreementResponseArgs) ToEdifactOneWayAgreementResponseOutput() EdifactOneWayAgreementResponseOutput {
	return i.ToEdifactOneWayAgreementResponseOutputWithContext(context.Background())
}

func (i EdifactOneWayAgreementResponseArgs) ToEdifactOneWayAgreementResponseOutputWithContext(ctx context.Context) EdifactOneWayAgreementResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactOneWayAgreementResponseOutput)
}

func (i EdifactOneWayAgreementResponseArgs) ToEdifactOneWayAgreementResponsePtrOutput() EdifactOneWayAgreementResponsePtrOutput {
	return i.ToEdifactOneWayAgreementResponsePtrOutputWithContext(context.Background())
}

func (i EdifactOneWayAgreementResponseArgs) ToEdifactOneWayAgreementResponsePtrOutputWithContext(ctx context.Context) EdifactOneWayAgreementResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactOneWayAgreementResponseOutput).ToEdifactOneWayAgreementResponsePtrOutputWithContext(ctx)
}

// EdifactOneWayAgreementResponsePtrInput is an input type that accepts EdifactOneWayAgreementResponseArgs, EdifactOneWayAgreementResponsePtr and EdifactOneWayAgreementResponsePtrOutput values.
// You can construct a concrete instance of `EdifactOneWayAgreementResponsePtrInput` via:
//
//          EdifactOneWayAgreementResponseArgs{...}
//
//  or:
//
//          nil
type EdifactOneWayAgreementResponsePtrInput interface {
	pulumi.Input

	ToEdifactOneWayAgreementResponsePtrOutput() EdifactOneWayAgreementResponsePtrOutput
	ToEdifactOneWayAgreementResponsePtrOutputWithContext(context.Context) EdifactOneWayAgreementResponsePtrOutput
}

type edifactOneWayAgreementResponsePtrType EdifactOneWayAgreementResponseArgs

func EdifactOneWayAgreementResponsePtr(v *EdifactOneWayAgreementResponseArgs) EdifactOneWayAgreementResponsePtrInput {
	return (*edifactOneWayAgreementResponsePtrType)(v)
}

func (*edifactOneWayAgreementResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactOneWayAgreementResponse)(nil)).Elem()
}

func (i *edifactOneWayAgreementResponsePtrType) ToEdifactOneWayAgreementResponsePtrOutput() EdifactOneWayAgreementResponsePtrOutput {
	return i.ToEdifactOneWayAgreementResponsePtrOutputWithContext(context.Background())
}

func (i *edifactOneWayAgreementResponsePtrType) ToEdifactOneWayAgreementResponsePtrOutputWithContext(ctx context.Context) EdifactOneWayAgreementResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactOneWayAgreementResponsePtrOutput)
}

// The Edifact one way agreement.
type EdifactOneWayAgreementResponseOutput struct{ *pulumi.OutputState }

func (EdifactOneWayAgreementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactOneWayAgreementResponse)(nil)).Elem()
}

func (o EdifactOneWayAgreementResponseOutput) ToEdifactOneWayAgreementResponseOutput() EdifactOneWayAgreementResponseOutput {
	return o
}

func (o EdifactOneWayAgreementResponseOutput) ToEdifactOneWayAgreementResponseOutputWithContext(ctx context.Context) EdifactOneWayAgreementResponseOutput {
	return o
}

func (o EdifactOneWayAgreementResponseOutput) ToEdifactOneWayAgreementResponsePtrOutput() EdifactOneWayAgreementResponsePtrOutput {
	return o.ToEdifactOneWayAgreementResponsePtrOutputWithContext(context.Background())
}

func (o EdifactOneWayAgreementResponseOutput) ToEdifactOneWayAgreementResponsePtrOutputWithContext(ctx context.Context) EdifactOneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v EdifactOneWayAgreementResponse) *EdifactOneWayAgreementResponse {
		return &v
	}).(EdifactOneWayAgreementResponsePtrOutput)
}

// The EDIFACT protocol settings.
func (o EdifactOneWayAgreementResponseOutput) ProtocolSettings() EdifactProtocolSettingsResponseOutput {
	return o.ApplyT(func(v EdifactOneWayAgreementResponse) EdifactProtocolSettingsResponse { return v.ProtocolSettings }).(EdifactProtocolSettingsResponseOutput)
}

// The receiver business identity
func (o EdifactOneWayAgreementResponseOutput) ReceiverBusinessIdentity() BusinessIdentityResponseOutput {
	return o.ApplyT(func(v EdifactOneWayAgreementResponse) BusinessIdentityResponse { return v.ReceiverBusinessIdentity }).(BusinessIdentityResponseOutput)
}

// The sender business identity
func (o EdifactOneWayAgreementResponseOutput) SenderBusinessIdentity() BusinessIdentityResponseOutput {
	return o.ApplyT(func(v EdifactOneWayAgreementResponse) BusinessIdentityResponse { return v.SenderBusinessIdentity }).(BusinessIdentityResponseOutput)
}

type EdifactOneWayAgreementResponsePtrOutput struct{ *pulumi.OutputState }

func (EdifactOneWayAgreementResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactOneWayAgreementResponse)(nil)).Elem()
}

func (o EdifactOneWayAgreementResponsePtrOutput) ToEdifactOneWayAgreementResponsePtrOutput() EdifactOneWayAgreementResponsePtrOutput {
	return o
}

func (o EdifactOneWayAgreementResponsePtrOutput) ToEdifactOneWayAgreementResponsePtrOutputWithContext(ctx context.Context) EdifactOneWayAgreementResponsePtrOutput {
	return o
}

func (o EdifactOneWayAgreementResponsePtrOutput) Elem() EdifactOneWayAgreementResponseOutput {
	return o.ApplyT(func(v *EdifactOneWayAgreementResponse) EdifactOneWayAgreementResponse { return *v }).(EdifactOneWayAgreementResponseOutput)
}

// The EDIFACT protocol settings.
func (o EdifactOneWayAgreementResponsePtrOutput) ProtocolSettings() EdifactProtocolSettingsResponsePtrOutput {
	return o.ApplyT(func(v *EdifactOneWayAgreementResponse) *EdifactProtocolSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.ProtocolSettings
	}).(EdifactProtocolSettingsResponsePtrOutput)
}

// The receiver business identity
func (o EdifactOneWayAgreementResponsePtrOutput) ReceiverBusinessIdentity() BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v *EdifactOneWayAgreementResponse) *BusinessIdentityResponse {
		if v == nil {
			return nil
		}
		return &v.ReceiverBusinessIdentity
	}).(BusinessIdentityResponsePtrOutput)
}

// The sender business identity
func (o EdifactOneWayAgreementResponsePtrOutput) SenderBusinessIdentity() BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v *EdifactOneWayAgreementResponse) *BusinessIdentityResponse {
		if v == nil {
			return nil
		}
		return &v.SenderBusinessIdentity
	}).(BusinessIdentityResponsePtrOutput)
}

// The Edifact agreement protocol settings.
type EdifactProcessingSettings struct {
	// The value indicating whether to create empty xml tags for trailing separators.
	CreateEmptyXmlTagsForTrailingSeparators bool `pulumi:"createEmptyXmlTagsForTrailingSeparators"`
	// The value indicating whether to mask security information.
	MaskSecurityInfo bool `pulumi:"maskSecurityInfo"`
	// The value indicating whether to preserve interchange.
	PreserveInterchange bool `pulumi:"preserveInterchange"`
	// The value indicating whether to suspend interchange on error.
	SuspendInterchangeOnError bool `pulumi:"suspendInterchangeOnError"`
	// The value indicating whether to use dot as decimal separator.
	UseDotAsDecimalSeparator bool `pulumi:"useDotAsDecimalSeparator"`
}

// EdifactProcessingSettingsInput is an input type that accepts EdifactProcessingSettingsArgs and EdifactProcessingSettingsOutput values.
// You can construct a concrete instance of `EdifactProcessingSettingsInput` via:
//
//          EdifactProcessingSettingsArgs{...}
type EdifactProcessingSettingsInput interface {
	pulumi.Input

	ToEdifactProcessingSettingsOutput() EdifactProcessingSettingsOutput
	ToEdifactProcessingSettingsOutputWithContext(context.Context) EdifactProcessingSettingsOutput
}

// The Edifact agreement protocol settings.
type EdifactProcessingSettingsArgs struct {
	// The value indicating whether to create empty xml tags for trailing separators.
	CreateEmptyXmlTagsForTrailingSeparators pulumi.BoolInput `pulumi:"createEmptyXmlTagsForTrailingSeparators"`
	// The value indicating whether to mask security information.
	MaskSecurityInfo pulumi.BoolInput `pulumi:"maskSecurityInfo"`
	// The value indicating whether to preserve interchange.
	PreserveInterchange pulumi.BoolInput `pulumi:"preserveInterchange"`
	// The value indicating whether to suspend interchange on error.
	SuspendInterchangeOnError pulumi.BoolInput `pulumi:"suspendInterchangeOnError"`
	// The value indicating whether to use dot as decimal separator.
	UseDotAsDecimalSeparator pulumi.BoolInput `pulumi:"useDotAsDecimalSeparator"`
}

func (EdifactProcessingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactProcessingSettings)(nil)).Elem()
}

func (i EdifactProcessingSettingsArgs) ToEdifactProcessingSettingsOutput() EdifactProcessingSettingsOutput {
	return i.ToEdifactProcessingSettingsOutputWithContext(context.Background())
}

func (i EdifactProcessingSettingsArgs) ToEdifactProcessingSettingsOutputWithContext(ctx context.Context) EdifactProcessingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactProcessingSettingsOutput)
}

func (i EdifactProcessingSettingsArgs) ToEdifactProcessingSettingsPtrOutput() EdifactProcessingSettingsPtrOutput {
	return i.ToEdifactProcessingSettingsPtrOutputWithContext(context.Background())
}

func (i EdifactProcessingSettingsArgs) ToEdifactProcessingSettingsPtrOutputWithContext(ctx context.Context) EdifactProcessingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactProcessingSettingsOutput).ToEdifactProcessingSettingsPtrOutputWithContext(ctx)
}

// EdifactProcessingSettingsPtrInput is an input type that accepts EdifactProcessingSettingsArgs, EdifactProcessingSettingsPtr and EdifactProcessingSettingsPtrOutput values.
// You can construct a concrete instance of `EdifactProcessingSettingsPtrInput` via:
//
//          EdifactProcessingSettingsArgs{...}
//
//  or:
//
//          nil
type EdifactProcessingSettingsPtrInput interface {
	pulumi.Input

	ToEdifactProcessingSettingsPtrOutput() EdifactProcessingSettingsPtrOutput
	ToEdifactProcessingSettingsPtrOutputWithContext(context.Context) EdifactProcessingSettingsPtrOutput
}

type edifactProcessingSettingsPtrType EdifactProcessingSettingsArgs

func EdifactProcessingSettingsPtr(v *EdifactProcessingSettingsArgs) EdifactProcessingSettingsPtrInput {
	return (*edifactProcessingSettingsPtrType)(v)
}

func (*edifactProcessingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactProcessingSettings)(nil)).Elem()
}

func (i *edifactProcessingSettingsPtrType) ToEdifactProcessingSettingsPtrOutput() EdifactProcessingSettingsPtrOutput {
	return i.ToEdifactProcessingSettingsPtrOutputWithContext(context.Background())
}

func (i *edifactProcessingSettingsPtrType) ToEdifactProcessingSettingsPtrOutputWithContext(ctx context.Context) EdifactProcessingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactProcessingSettingsPtrOutput)
}

// The Edifact agreement protocol settings.
type EdifactProcessingSettingsOutput struct{ *pulumi.OutputState }

func (EdifactProcessingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactProcessingSettings)(nil)).Elem()
}

func (o EdifactProcessingSettingsOutput) ToEdifactProcessingSettingsOutput() EdifactProcessingSettingsOutput {
	return o
}

func (o EdifactProcessingSettingsOutput) ToEdifactProcessingSettingsOutputWithContext(ctx context.Context) EdifactProcessingSettingsOutput {
	return o
}

func (o EdifactProcessingSettingsOutput) ToEdifactProcessingSettingsPtrOutput() EdifactProcessingSettingsPtrOutput {
	return o.ToEdifactProcessingSettingsPtrOutputWithContext(context.Background())
}

func (o EdifactProcessingSettingsOutput) ToEdifactProcessingSettingsPtrOutputWithContext(ctx context.Context) EdifactProcessingSettingsPtrOutput {
	return o.ApplyT(func(v EdifactProcessingSettings) *EdifactProcessingSettings {
		return &v
	}).(EdifactProcessingSettingsPtrOutput)
}

// The value indicating whether to create empty xml tags for trailing separators.
func (o EdifactProcessingSettingsOutput) CreateEmptyXmlTagsForTrailingSeparators() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactProcessingSettings) bool { return v.CreateEmptyXmlTagsForTrailingSeparators }).(pulumi.BoolOutput)
}

// The value indicating whether to mask security information.
func (o EdifactProcessingSettingsOutput) MaskSecurityInfo() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactProcessingSettings) bool { return v.MaskSecurityInfo }).(pulumi.BoolOutput)
}

// The value indicating whether to preserve interchange.
func (o EdifactProcessingSettingsOutput) PreserveInterchange() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactProcessingSettings) bool { return v.PreserveInterchange }).(pulumi.BoolOutput)
}

// The value indicating whether to suspend interchange on error.
func (o EdifactProcessingSettingsOutput) SuspendInterchangeOnError() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactProcessingSettings) bool { return v.SuspendInterchangeOnError }).(pulumi.BoolOutput)
}

// The value indicating whether to use dot as decimal separator.
func (o EdifactProcessingSettingsOutput) UseDotAsDecimalSeparator() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactProcessingSettings) bool { return v.UseDotAsDecimalSeparator }).(pulumi.BoolOutput)
}

type EdifactProcessingSettingsPtrOutput struct{ *pulumi.OutputState }

func (EdifactProcessingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactProcessingSettings)(nil)).Elem()
}

func (o EdifactProcessingSettingsPtrOutput) ToEdifactProcessingSettingsPtrOutput() EdifactProcessingSettingsPtrOutput {
	return o
}

func (o EdifactProcessingSettingsPtrOutput) ToEdifactProcessingSettingsPtrOutputWithContext(ctx context.Context) EdifactProcessingSettingsPtrOutput {
	return o
}

func (o EdifactProcessingSettingsPtrOutput) Elem() EdifactProcessingSettingsOutput {
	return o.ApplyT(func(v *EdifactProcessingSettings) EdifactProcessingSettings { return *v }).(EdifactProcessingSettingsOutput)
}

// The value indicating whether to create empty xml tags for trailing separators.
func (o EdifactProcessingSettingsPtrOutput) CreateEmptyXmlTagsForTrailingSeparators() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactProcessingSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.CreateEmptyXmlTagsForTrailingSeparators
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to mask security information.
func (o EdifactProcessingSettingsPtrOutput) MaskSecurityInfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactProcessingSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.MaskSecurityInfo
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to preserve interchange.
func (o EdifactProcessingSettingsPtrOutput) PreserveInterchange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactProcessingSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.PreserveInterchange
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to suspend interchange on error.
func (o EdifactProcessingSettingsPtrOutput) SuspendInterchangeOnError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactProcessingSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.SuspendInterchangeOnError
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to use dot as decimal separator.
func (o EdifactProcessingSettingsPtrOutput) UseDotAsDecimalSeparator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactProcessingSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.UseDotAsDecimalSeparator
	}).(pulumi.BoolPtrOutput)
}

// The Edifact agreement protocol settings.
type EdifactProcessingSettingsResponse struct {
	// The value indicating whether to create empty xml tags for trailing separators.
	CreateEmptyXmlTagsForTrailingSeparators bool `pulumi:"createEmptyXmlTagsForTrailingSeparators"`
	// The value indicating whether to mask security information.
	MaskSecurityInfo bool `pulumi:"maskSecurityInfo"`
	// The value indicating whether to preserve interchange.
	PreserveInterchange bool `pulumi:"preserveInterchange"`
	// The value indicating whether to suspend interchange on error.
	SuspendInterchangeOnError bool `pulumi:"suspendInterchangeOnError"`
	// The value indicating whether to use dot as decimal separator.
	UseDotAsDecimalSeparator bool `pulumi:"useDotAsDecimalSeparator"`
}

// EdifactProcessingSettingsResponseInput is an input type that accepts EdifactProcessingSettingsResponseArgs and EdifactProcessingSettingsResponseOutput values.
// You can construct a concrete instance of `EdifactProcessingSettingsResponseInput` via:
//
//          EdifactProcessingSettingsResponseArgs{...}
type EdifactProcessingSettingsResponseInput interface {
	pulumi.Input

	ToEdifactProcessingSettingsResponseOutput() EdifactProcessingSettingsResponseOutput
	ToEdifactProcessingSettingsResponseOutputWithContext(context.Context) EdifactProcessingSettingsResponseOutput
}

// The Edifact agreement protocol settings.
type EdifactProcessingSettingsResponseArgs struct {
	// The value indicating whether to create empty xml tags for trailing separators.
	CreateEmptyXmlTagsForTrailingSeparators pulumi.BoolInput `pulumi:"createEmptyXmlTagsForTrailingSeparators"`
	// The value indicating whether to mask security information.
	MaskSecurityInfo pulumi.BoolInput `pulumi:"maskSecurityInfo"`
	// The value indicating whether to preserve interchange.
	PreserveInterchange pulumi.BoolInput `pulumi:"preserveInterchange"`
	// The value indicating whether to suspend interchange on error.
	SuspendInterchangeOnError pulumi.BoolInput `pulumi:"suspendInterchangeOnError"`
	// The value indicating whether to use dot as decimal separator.
	UseDotAsDecimalSeparator pulumi.BoolInput `pulumi:"useDotAsDecimalSeparator"`
}

func (EdifactProcessingSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactProcessingSettingsResponse)(nil)).Elem()
}

func (i EdifactProcessingSettingsResponseArgs) ToEdifactProcessingSettingsResponseOutput() EdifactProcessingSettingsResponseOutput {
	return i.ToEdifactProcessingSettingsResponseOutputWithContext(context.Background())
}

func (i EdifactProcessingSettingsResponseArgs) ToEdifactProcessingSettingsResponseOutputWithContext(ctx context.Context) EdifactProcessingSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactProcessingSettingsResponseOutput)
}

func (i EdifactProcessingSettingsResponseArgs) ToEdifactProcessingSettingsResponsePtrOutput() EdifactProcessingSettingsResponsePtrOutput {
	return i.ToEdifactProcessingSettingsResponsePtrOutputWithContext(context.Background())
}

func (i EdifactProcessingSettingsResponseArgs) ToEdifactProcessingSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactProcessingSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactProcessingSettingsResponseOutput).ToEdifactProcessingSettingsResponsePtrOutputWithContext(ctx)
}

// EdifactProcessingSettingsResponsePtrInput is an input type that accepts EdifactProcessingSettingsResponseArgs, EdifactProcessingSettingsResponsePtr and EdifactProcessingSettingsResponsePtrOutput values.
// You can construct a concrete instance of `EdifactProcessingSettingsResponsePtrInput` via:
//
//          EdifactProcessingSettingsResponseArgs{...}
//
//  or:
//
//          nil
type EdifactProcessingSettingsResponsePtrInput interface {
	pulumi.Input

	ToEdifactProcessingSettingsResponsePtrOutput() EdifactProcessingSettingsResponsePtrOutput
	ToEdifactProcessingSettingsResponsePtrOutputWithContext(context.Context) EdifactProcessingSettingsResponsePtrOutput
}

type edifactProcessingSettingsResponsePtrType EdifactProcessingSettingsResponseArgs

func EdifactProcessingSettingsResponsePtr(v *EdifactProcessingSettingsResponseArgs) EdifactProcessingSettingsResponsePtrInput {
	return (*edifactProcessingSettingsResponsePtrType)(v)
}

func (*edifactProcessingSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactProcessingSettingsResponse)(nil)).Elem()
}

func (i *edifactProcessingSettingsResponsePtrType) ToEdifactProcessingSettingsResponsePtrOutput() EdifactProcessingSettingsResponsePtrOutput {
	return i.ToEdifactProcessingSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *edifactProcessingSettingsResponsePtrType) ToEdifactProcessingSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactProcessingSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactProcessingSettingsResponsePtrOutput)
}

// The Edifact agreement protocol settings.
type EdifactProcessingSettingsResponseOutput struct{ *pulumi.OutputState }

func (EdifactProcessingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactProcessingSettingsResponse)(nil)).Elem()
}

func (o EdifactProcessingSettingsResponseOutput) ToEdifactProcessingSettingsResponseOutput() EdifactProcessingSettingsResponseOutput {
	return o
}

func (o EdifactProcessingSettingsResponseOutput) ToEdifactProcessingSettingsResponseOutputWithContext(ctx context.Context) EdifactProcessingSettingsResponseOutput {
	return o
}

func (o EdifactProcessingSettingsResponseOutput) ToEdifactProcessingSettingsResponsePtrOutput() EdifactProcessingSettingsResponsePtrOutput {
	return o.ToEdifactProcessingSettingsResponsePtrOutputWithContext(context.Background())
}

func (o EdifactProcessingSettingsResponseOutput) ToEdifactProcessingSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactProcessingSettingsResponsePtrOutput {
	return o.ApplyT(func(v EdifactProcessingSettingsResponse) *EdifactProcessingSettingsResponse {
		return &v
	}).(EdifactProcessingSettingsResponsePtrOutput)
}

// The value indicating whether to create empty xml tags for trailing separators.
func (o EdifactProcessingSettingsResponseOutput) CreateEmptyXmlTagsForTrailingSeparators() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactProcessingSettingsResponse) bool { return v.CreateEmptyXmlTagsForTrailingSeparators }).(pulumi.BoolOutput)
}

// The value indicating whether to mask security information.
func (o EdifactProcessingSettingsResponseOutput) MaskSecurityInfo() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactProcessingSettingsResponse) bool { return v.MaskSecurityInfo }).(pulumi.BoolOutput)
}

// The value indicating whether to preserve interchange.
func (o EdifactProcessingSettingsResponseOutput) PreserveInterchange() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactProcessingSettingsResponse) bool { return v.PreserveInterchange }).(pulumi.BoolOutput)
}

// The value indicating whether to suspend interchange on error.
func (o EdifactProcessingSettingsResponseOutput) SuspendInterchangeOnError() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactProcessingSettingsResponse) bool { return v.SuspendInterchangeOnError }).(pulumi.BoolOutput)
}

// The value indicating whether to use dot as decimal separator.
func (o EdifactProcessingSettingsResponseOutput) UseDotAsDecimalSeparator() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactProcessingSettingsResponse) bool { return v.UseDotAsDecimalSeparator }).(pulumi.BoolOutput)
}

type EdifactProcessingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (EdifactProcessingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactProcessingSettingsResponse)(nil)).Elem()
}

func (o EdifactProcessingSettingsResponsePtrOutput) ToEdifactProcessingSettingsResponsePtrOutput() EdifactProcessingSettingsResponsePtrOutput {
	return o
}

func (o EdifactProcessingSettingsResponsePtrOutput) ToEdifactProcessingSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactProcessingSettingsResponsePtrOutput {
	return o
}

func (o EdifactProcessingSettingsResponsePtrOutput) Elem() EdifactProcessingSettingsResponseOutput {
	return o.ApplyT(func(v *EdifactProcessingSettingsResponse) EdifactProcessingSettingsResponse { return *v }).(EdifactProcessingSettingsResponseOutput)
}

// The value indicating whether to create empty xml tags for trailing separators.
func (o EdifactProcessingSettingsResponsePtrOutput) CreateEmptyXmlTagsForTrailingSeparators() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CreateEmptyXmlTagsForTrailingSeparators
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to mask security information.
func (o EdifactProcessingSettingsResponsePtrOutput) MaskSecurityInfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.MaskSecurityInfo
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to preserve interchange.
func (o EdifactProcessingSettingsResponsePtrOutput) PreserveInterchange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.PreserveInterchange
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to suspend interchange on error.
func (o EdifactProcessingSettingsResponsePtrOutput) SuspendInterchangeOnError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.SuspendInterchangeOnError
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to use dot as decimal separator.
func (o EdifactProcessingSettingsResponsePtrOutput) UseDotAsDecimalSeparator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.UseDotAsDecimalSeparator
	}).(pulumi.BoolPtrOutput)
}

// The Edifact agreement protocol settings.
type EdifactProtocolSettings struct {
	// The EDIFACT acknowledgement settings.
	AcknowledgementSettings EdifactAcknowledgementSettings `pulumi:"acknowledgementSettings"`
	// The EDIFACT delimiter override settings.
	EdifactDelimiterOverrides []EdifactDelimiterOverride `pulumi:"edifactDelimiterOverrides"`
	// The EDIFACT envelope override settings.
	EnvelopeOverrides []EdifactEnvelopeOverride `pulumi:"envelopeOverrides"`
	// The EDIFACT envelope settings.
	EnvelopeSettings EdifactEnvelopeSettings `pulumi:"envelopeSettings"`
	// The EDIFACT framing settings.
	FramingSettings EdifactFramingSettings `pulumi:"framingSettings"`
	// The EDIFACT message filter.
	MessageFilter EdifactMessageFilter `pulumi:"messageFilter"`
	// The EDIFACT message filter list.
	MessageFilterList []EdifactMessageIdentifier `pulumi:"messageFilterList"`
	// The EDIFACT processing Settings.
	ProcessingSettings EdifactProcessingSettings `pulumi:"processingSettings"`
	// The EDIFACT schema references.
	SchemaReferences []EdifactSchemaReference `pulumi:"schemaReferences"`
	// The EDIFACT validation override settings.
	ValidationOverrides []EdifactValidationOverride `pulumi:"validationOverrides"`
	// The EDIFACT validation settings.
	ValidationSettings EdifactValidationSettings `pulumi:"validationSettings"`
}

// EdifactProtocolSettingsInput is an input type that accepts EdifactProtocolSettingsArgs and EdifactProtocolSettingsOutput values.
// You can construct a concrete instance of `EdifactProtocolSettingsInput` via:
//
//          EdifactProtocolSettingsArgs{...}
type EdifactProtocolSettingsInput interface {
	pulumi.Input

	ToEdifactProtocolSettingsOutput() EdifactProtocolSettingsOutput
	ToEdifactProtocolSettingsOutputWithContext(context.Context) EdifactProtocolSettingsOutput
}

// The Edifact agreement protocol settings.
type EdifactProtocolSettingsArgs struct {
	// The EDIFACT acknowledgement settings.
	AcknowledgementSettings EdifactAcknowledgementSettingsInput `pulumi:"acknowledgementSettings"`
	// The EDIFACT delimiter override settings.
	EdifactDelimiterOverrides EdifactDelimiterOverrideArrayInput `pulumi:"edifactDelimiterOverrides"`
	// The EDIFACT envelope override settings.
	EnvelopeOverrides EdifactEnvelopeOverrideArrayInput `pulumi:"envelopeOverrides"`
	// The EDIFACT envelope settings.
	EnvelopeSettings EdifactEnvelopeSettingsInput `pulumi:"envelopeSettings"`
	// The EDIFACT framing settings.
	FramingSettings EdifactFramingSettingsInput `pulumi:"framingSettings"`
	// The EDIFACT message filter.
	MessageFilter EdifactMessageFilterInput `pulumi:"messageFilter"`
	// The EDIFACT message filter list.
	MessageFilterList EdifactMessageIdentifierArrayInput `pulumi:"messageFilterList"`
	// The EDIFACT processing Settings.
	ProcessingSettings EdifactProcessingSettingsInput `pulumi:"processingSettings"`
	// The EDIFACT schema references.
	SchemaReferences EdifactSchemaReferenceArrayInput `pulumi:"schemaReferences"`
	// The EDIFACT validation override settings.
	ValidationOverrides EdifactValidationOverrideArrayInput `pulumi:"validationOverrides"`
	// The EDIFACT validation settings.
	ValidationSettings EdifactValidationSettingsInput `pulumi:"validationSettings"`
}

func (EdifactProtocolSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactProtocolSettings)(nil)).Elem()
}

func (i EdifactProtocolSettingsArgs) ToEdifactProtocolSettingsOutput() EdifactProtocolSettingsOutput {
	return i.ToEdifactProtocolSettingsOutputWithContext(context.Background())
}

func (i EdifactProtocolSettingsArgs) ToEdifactProtocolSettingsOutputWithContext(ctx context.Context) EdifactProtocolSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactProtocolSettingsOutput)
}

func (i EdifactProtocolSettingsArgs) ToEdifactProtocolSettingsPtrOutput() EdifactProtocolSettingsPtrOutput {
	return i.ToEdifactProtocolSettingsPtrOutputWithContext(context.Background())
}

func (i EdifactProtocolSettingsArgs) ToEdifactProtocolSettingsPtrOutputWithContext(ctx context.Context) EdifactProtocolSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactProtocolSettingsOutput).ToEdifactProtocolSettingsPtrOutputWithContext(ctx)
}

// EdifactProtocolSettingsPtrInput is an input type that accepts EdifactProtocolSettingsArgs, EdifactProtocolSettingsPtr and EdifactProtocolSettingsPtrOutput values.
// You can construct a concrete instance of `EdifactProtocolSettingsPtrInput` via:
//
//          EdifactProtocolSettingsArgs{...}
//
//  or:
//
//          nil
type EdifactProtocolSettingsPtrInput interface {
	pulumi.Input

	ToEdifactProtocolSettingsPtrOutput() EdifactProtocolSettingsPtrOutput
	ToEdifactProtocolSettingsPtrOutputWithContext(context.Context) EdifactProtocolSettingsPtrOutput
}

type edifactProtocolSettingsPtrType EdifactProtocolSettingsArgs

func EdifactProtocolSettingsPtr(v *EdifactProtocolSettingsArgs) EdifactProtocolSettingsPtrInput {
	return (*edifactProtocolSettingsPtrType)(v)
}

func (*edifactProtocolSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactProtocolSettings)(nil)).Elem()
}

func (i *edifactProtocolSettingsPtrType) ToEdifactProtocolSettingsPtrOutput() EdifactProtocolSettingsPtrOutput {
	return i.ToEdifactProtocolSettingsPtrOutputWithContext(context.Background())
}

func (i *edifactProtocolSettingsPtrType) ToEdifactProtocolSettingsPtrOutputWithContext(ctx context.Context) EdifactProtocolSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactProtocolSettingsPtrOutput)
}

// The Edifact agreement protocol settings.
type EdifactProtocolSettingsOutput struct{ *pulumi.OutputState }

func (EdifactProtocolSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactProtocolSettings)(nil)).Elem()
}

func (o EdifactProtocolSettingsOutput) ToEdifactProtocolSettingsOutput() EdifactProtocolSettingsOutput {
	return o
}

func (o EdifactProtocolSettingsOutput) ToEdifactProtocolSettingsOutputWithContext(ctx context.Context) EdifactProtocolSettingsOutput {
	return o
}

func (o EdifactProtocolSettingsOutput) ToEdifactProtocolSettingsPtrOutput() EdifactProtocolSettingsPtrOutput {
	return o.ToEdifactProtocolSettingsPtrOutputWithContext(context.Background())
}

func (o EdifactProtocolSettingsOutput) ToEdifactProtocolSettingsPtrOutputWithContext(ctx context.Context) EdifactProtocolSettingsPtrOutput {
	return o.ApplyT(func(v EdifactProtocolSettings) *EdifactProtocolSettings {
		return &v
	}).(EdifactProtocolSettingsPtrOutput)
}

// The EDIFACT acknowledgement settings.
func (o EdifactProtocolSettingsOutput) AcknowledgementSettings() EdifactAcknowledgementSettingsOutput {
	return o.ApplyT(func(v EdifactProtocolSettings) EdifactAcknowledgementSettings { return v.AcknowledgementSettings }).(EdifactAcknowledgementSettingsOutput)
}

// The EDIFACT delimiter override settings.
func (o EdifactProtocolSettingsOutput) EdifactDelimiterOverrides() EdifactDelimiterOverrideArrayOutput {
	return o.ApplyT(func(v EdifactProtocolSettings) []EdifactDelimiterOverride { return v.EdifactDelimiterOverrides }).(EdifactDelimiterOverrideArrayOutput)
}

// The EDIFACT envelope override settings.
func (o EdifactProtocolSettingsOutput) EnvelopeOverrides() EdifactEnvelopeOverrideArrayOutput {
	return o.ApplyT(func(v EdifactProtocolSettings) []EdifactEnvelopeOverride { return v.EnvelopeOverrides }).(EdifactEnvelopeOverrideArrayOutput)
}

// The EDIFACT envelope settings.
func (o EdifactProtocolSettingsOutput) EnvelopeSettings() EdifactEnvelopeSettingsOutput {
	return o.ApplyT(func(v EdifactProtocolSettings) EdifactEnvelopeSettings { return v.EnvelopeSettings }).(EdifactEnvelopeSettingsOutput)
}

// The EDIFACT framing settings.
func (o EdifactProtocolSettingsOutput) FramingSettings() EdifactFramingSettingsOutput {
	return o.ApplyT(func(v EdifactProtocolSettings) EdifactFramingSettings { return v.FramingSettings }).(EdifactFramingSettingsOutput)
}

// The EDIFACT message filter.
func (o EdifactProtocolSettingsOutput) MessageFilter() EdifactMessageFilterOutput {
	return o.ApplyT(func(v EdifactProtocolSettings) EdifactMessageFilter { return v.MessageFilter }).(EdifactMessageFilterOutput)
}

// The EDIFACT message filter list.
func (o EdifactProtocolSettingsOutput) MessageFilterList() EdifactMessageIdentifierArrayOutput {
	return o.ApplyT(func(v EdifactProtocolSettings) []EdifactMessageIdentifier { return v.MessageFilterList }).(EdifactMessageIdentifierArrayOutput)
}

// The EDIFACT processing Settings.
func (o EdifactProtocolSettingsOutput) ProcessingSettings() EdifactProcessingSettingsOutput {
	return o.ApplyT(func(v EdifactProtocolSettings) EdifactProcessingSettings { return v.ProcessingSettings }).(EdifactProcessingSettingsOutput)
}

// The EDIFACT schema references.
func (o EdifactProtocolSettingsOutput) SchemaReferences() EdifactSchemaReferenceArrayOutput {
	return o.ApplyT(func(v EdifactProtocolSettings) []EdifactSchemaReference { return v.SchemaReferences }).(EdifactSchemaReferenceArrayOutput)
}

// The EDIFACT validation override settings.
func (o EdifactProtocolSettingsOutput) ValidationOverrides() EdifactValidationOverrideArrayOutput {
	return o.ApplyT(func(v EdifactProtocolSettings) []EdifactValidationOverride { return v.ValidationOverrides }).(EdifactValidationOverrideArrayOutput)
}

// The EDIFACT validation settings.
func (o EdifactProtocolSettingsOutput) ValidationSettings() EdifactValidationSettingsOutput {
	return o.ApplyT(func(v EdifactProtocolSettings) EdifactValidationSettings { return v.ValidationSettings }).(EdifactValidationSettingsOutput)
}

type EdifactProtocolSettingsPtrOutput struct{ *pulumi.OutputState }

func (EdifactProtocolSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactProtocolSettings)(nil)).Elem()
}

func (o EdifactProtocolSettingsPtrOutput) ToEdifactProtocolSettingsPtrOutput() EdifactProtocolSettingsPtrOutput {
	return o
}

func (o EdifactProtocolSettingsPtrOutput) ToEdifactProtocolSettingsPtrOutputWithContext(ctx context.Context) EdifactProtocolSettingsPtrOutput {
	return o
}

func (o EdifactProtocolSettingsPtrOutput) Elem() EdifactProtocolSettingsOutput {
	return o.ApplyT(func(v *EdifactProtocolSettings) EdifactProtocolSettings { return *v }).(EdifactProtocolSettingsOutput)
}

// The EDIFACT acknowledgement settings.
func (o EdifactProtocolSettingsPtrOutput) AcknowledgementSettings() EdifactAcknowledgementSettingsPtrOutput {
	return o.ApplyT(func(v *EdifactProtocolSettings) *EdifactAcknowledgementSettings {
		if v == nil {
			return nil
		}
		return &v.AcknowledgementSettings
	}).(EdifactAcknowledgementSettingsPtrOutput)
}

// The EDIFACT delimiter override settings.
func (o EdifactProtocolSettingsPtrOutput) EdifactDelimiterOverrides() EdifactDelimiterOverrideArrayOutput {
	return o.ApplyT(func(v *EdifactProtocolSettings) []EdifactDelimiterOverride {
		if v == nil {
			return nil
		}
		return v.EdifactDelimiterOverrides
	}).(EdifactDelimiterOverrideArrayOutput)
}

// The EDIFACT envelope override settings.
func (o EdifactProtocolSettingsPtrOutput) EnvelopeOverrides() EdifactEnvelopeOverrideArrayOutput {
	return o.ApplyT(func(v *EdifactProtocolSettings) []EdifactEnvelopeOverride {
		if v == nil {
			return nil
		}
		return v.EnvelopeOverrides
	}).(EdifactEnvelopeOverrideArrayOutput)
}

// The EDIFACT envelope settings.
func (o EdifactProtocolSettingsPtrOutput) EnvelopeSettings() EdifactEnvelopeSettingsPtrOutput {
	return o.ApplyT(func(v *EdifactProtocolSettings) *EdifactEnvelopeSettings {
		if v == nil {
			return nil
		}
		return &v.EnvelopeSettings
	}).(EdifactEnvelopeSettingsPtrOutput)
}

// The EDIFACT framing settings.
func (o EdifactProtocolSettingsPtrOutput) FramingSettings() EdifactFramingSettingsPtrOutput {
	return o.ApplyT(func(v *EdifactProtocolSettings) *EdifactFramingSettings {
		if v == nil {
			return nil
		}
		return &v.FramingSettings
	}).(EdifactFramingSettingsPtrOutput)
}

// The EDIFACT message filter.
func (o EdifactProtocolSettingsPtrOutput) MessageFilter() EdifactMessageFilterPtrOutput {
	return o.ApplyT(func(v *EdifactProtocolSettings) *EdifactMessageFilter {
		if v == nil {
			return nil
		}
		return &v.MessageFilter
	}).(EdifactMessageFilterPtrOutput)
}

// The EDIFACT message filter list.
func (o EdifactProtocolSettingsPtrOutput) MessageFilterList() EdifactMessageIdentifierArrayOutput {
	return o.ApplyT(func(v *EdifactProtocolSettings) []EdifactMessageIdentifier {
		if v == nil {
			return nil
		}
		return v.MessageFilterList
	}).(EdifactMessageIdentifierArrayOutput)
}

// The EDIFACT processing Settings.
func (o EdifactProtocolSettingsPtrOutput) ProcessingSettings() EdifactProcessingSettingsPtrOutput {
	return o.ApplyT(func(v *EdifactProtocolSettings) *EdifactProcessingSettings {
		if v == nil {
			return nil
		}
		return &v.ProcessingSettings
	}).(EdifactProcessingSettingsPtrOutput)
}

// The EDIFACT schema references.
func (o EdifactProtocolSettingsPtrOutput) SchemaReferences() EdifactSchemaReferenceArrayOutput {
	return o.ApplyT(func(v *EdifactProtocolSettings) []EdifactSchemaReference {
		if v == nil {
			return nil
		}
		return v.SchemaReferences
	}).(EdifactSchemaReferenceArrayOutput)
}

// The EDIFACT validation override settings.
func (o EdifactProtocolSettingsPtrOutput) ValidationOverrides() EdifactValidationOverrideArrayOutput {
	return o.ApplyT(func(v *EdifactProtocolSettings) []EdifactValidationOverride {
		if v == nil {
			return nil
		}
		return v.ValidationOverrides
	}).(EdifactValidationOverrideArrayOutput)
}

// The EDIFACT validation settings.
func (o EdifactProtocolSettingsPtrOutput) ValidationSettings() EdifactValidationSettingsPtrOutput {
	return o.ApplyT(func(v *EdifactProtocolSettings) *EdifactValidationSettings {
		if v == nil {
			return nil
		}
		return &v.ValidationSettings
	}).(EdifactValidationSettingsPtrOutput)
}

// The Edifact agreement protocol settings.
type EdifactProtocolSettingsResponse struct {
	// The EDIFACT acknowledgement settings.
	AcknowledgementSettings EdifactAcknowledgementSettingsResponse `pulumi:"acknowledgementSettings"`
	// The EDIFACT delimiter override settings.
	EdifactDelimiterOverrides []EdifactDelimiterOverrideResponse `pulumi:"edifactDelimiterOverrides"`
	// The EDIFACT envelope override settings.
	EnvelopeOverrides []EdifactEnvelopeOverrideResponse `pulumi:"envelopeOverrides"`
	// The EDIFACT envelope settings.
	EnvelopeSettings EdifactEnvelopeSettingsResponse `pulumi:"envelopeSettings"`
	// The EDIFACT framing settings.
	FramingSettings EdifactFramingSettingsResponse `pulumi:"framingSettings"`
	// The EDIFACT message filter.
	MessageFilter EdifactMessageFilterResponse `pulumi:"messageFilter"`
	// The EDIFACT message filter list.
	MessageFilterList []EdifactMessageIdentifierResponse `pulumi:"messageFilterList"`
	// The EDIFACT processing Settings.
	ProcessingSettings EdifactProcessingSettingsResponse `pulumi:"processingSettings"`
	// The EDIFACT schema references.
	SchemaReferences []EdifactSchemaReferenceResponse `pulumi:"schemaReferences"`
	// The EDIFACT validation override settings.
	ValidationOverrides []EdifactValidationOverrideResponse `pulumi:"validationOverrides"`
	// The EDIFACT validation settings.
	ValidationSettings EdifactValidationSettingsResponse `pulumi:"validationSettings"`
}

// EdifactProtocolSettingsResponseInput is an input type that accepts EdifactProtocolSettingsResponseArgs and EdifactProtocolSettingsResponseOutput values.
// You can construct a concrete instance of `EdifactProtocolSettingsResponseInput` via:
//
//          EdifactProtocolSettingsResponseArgs{...}
type EdifactProtocolSettingsResponseInput interface {
	pulumi.Input

	ToEdifactProtocolSettingsResponseOutput() EdifactProtocolSettingsResponseOutput
	ToEdifactProtocolSettingsResponseOutputWithContext(context.Context) EdifactProtocolSettingsResponseOutput
}

// The Edifact agreement protocol settings.
type EdifactProtocolSettingsResponseArgs struct {
	// The EDIFACT acknowledgement settings.
	AcknowledgementSettings EdifactAcknowledgementSettingsResponseInput `pulumi:"acknowledgementSettings"`
	// The EDIFACT delimiter override settings.
	EdifactDelimiterOverrides EdifactDelimiterOverrideResponseArrayInput `pulumi:"edifactDelimiterOverrides"`
	// The EDIFACT envelope override settings.
	EnvelopeOverrides EdifactEnvelopeOverrideResponseArrayInput `pulumi:"envelopeOverrides"`
	// The EDIFACT envelope settings.
	EnvelopeSettings EdifactEnvelopeSettingsResponseInput `pulumi:"envelopeSettings"`
	// The EDIFACT framing settings.
	FramingSettings EdifactFramingSettingsResponseInput `pulumi:"framingSettings"`
	// The EDIFACT message filter.
	MessageFilter EdifactMessageFilterResponseInput `pulumi:"messageFilter"`
	// The EDIFACT message filter list.
	MessageFilterList EdifactMessageIdentifierResponseArrayInput `pulumi:"messageFilterList"`
	// The EDIFACT processing Settings.
	ProcessingSettings EdifactProcessingSettingsResponseInput `pulumi:"processingSettings"`
	// The EDIFACT schema references.
	SchemaReferences EdifactSchemaReferenceResponseArrayInput `pulumi:"schemaReferences"`
	// The EDIFACT validation override settings.
	ValidationOverrides EdifactValidationOverrideResponseArrayInput `pulumi:"validationOverrides"`
	// The EDIFACT validation settings.
	ValidationSettings EdifactValidationSettingsResponseInput `pulumi:"validationSettings"`
}

func (EdifactProtocolSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactProtocolSettingsResponse)(nil)).Elem()
}

func (i EdifactProtocolSettingsResponseArgs) ToEdifactProtocolSettingsResponseOutput() EdifactProtocolSettingsResponseOutput {
	return i.ToEdifactProtocolSettingsResponseOutputWithContext(context.Background())
}

func (i EdifactProtocolSettingsResponseArgs) ToEdifactProtocolSettingsResponseOutputWithContext(ctx context.Context) EdifactProtocolSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactProtocolSettingsResponseOutput)
}

func (i EdifactProtocolSettingsResponseArgs) ToEdifactProtocolSettingsResponsePtrOutput() EdifactProtocolSettingsResponsePtrOutput {
	return i.ToEdifactProtocolSettingsResponsePtrOutputWithContext(context.Background())
}

func (i EdifactProtocolSettingsResponseArgs) ToEdifactProtocolSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactProtocolSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactProtocolSettingsResponseOutput).ToEdifactProtocolSettingsResponsePtrOutputWithContext(ctx)
}

// EdifactProtocolSettingsResponsePtrInput is an input type that accepts EdifactProtocolSettingsResponseArgs, EdifactProtocolSettingsResponsePtr and EdifactProtocolSettingsResponsePtrOutput values.
// You can construct a concrete instance of `EdifactProtocolSettingsResponsePtrInput` via:
//
//          EdifactProtocolSettingsResponseArgs{...}
//
//  or:
//
//          nil
type EdifactProtocolSettingsResponsePtrInput interface {
	pulumi.Input

	ToEdifactProtocolSettingsResponsePtrOutput() EdifactProtocolSettingsResponsePtrOutput
	ToEdifactProtocolSettingsResponsePtrOutputWithContext(context.Context) EdifactProtocolSettingsResponsePtrOutput
}

type edifactProtocolSettingsResponsePtrType EdifactProtocolSettingsResponseArgs

func EdifactProtocolSettingsResponsePtr(v *EdifactProtocolSettingsResponseArgs) EdifactProtocolSettingsResponsePtrInput {
	return (*edifactProtocolSettingsResponsePtrType)(v)
}

func (*edifactProtocolSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactProtocolSettingsResponse)(nil)).Elem()
}

func (i *edifactProtocolSettingsResponsePtrType) ToEdifactProtocolSettingsResponsePtrOutput() EdifactProtocolSettingsResponsePtrOutput {
	return i.ToEdifactProtocolSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *edifactProtocolSettingsResponsePtrType) ToEdifactProtocolSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactProtocolSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactProtocolSettingsResponsePtrOutput)
}

// The Edifact agreement protocol settings.
type EdifactProtocolSettingsResponseOutput struct{ *pulumi.OutputState }

func (EdifactProtocolSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactProtocolSettingsResponse)(nil)).Elem()
}

func (o EdifactProtocolSettingsResponseOutput) ToEdifactProtocolSettingsResponseOutput() EdifactProtocolSettingsResponseOutput {
	return o
}

func (o EdifactProtocolSettingsResponseOutput) ToEdifactProtocolSettingsResponseOutputWithContext(ctx context.Context) EdifactProtocolSettingsResponseOutput {
	return o
}

func (o EdifactProtocolSettingsResponseOutput) ToEdifactProtocolSettingsResponsePtrOutput() EdifactProtocolSettingsResponsePtrOutput {
	return o.ToEdifactProtocolSettingsResponsePtrOutputWithContext(context.Background())
}

func (o EdifactProtocolSettingsResponseOutput) ToEdifactProtocolSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactProtocolSettingsResponsePtrOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) *EdifactProtocolSettingsResponse {
		return &v
	}).(EdifactProtocolSettingsResponsePtrOutput)
}

// The EDIFACT acknowledgement settings.
func (o EdifactProtocolSettingsResponseOutput) AcknowledgementSettings() EdifactAcknowledgementSettingsResponseOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) EdifactAcknowledgementSettingsResponse {
		return v.AcknowledgementSettings
	}).(EdifactAcknowledgementSettingsResponseOutput)
}

// The EDIFACT delimiter override settings.
func (o EdifactProtocolSettingsResponseOutput) EdifactDelimiterOverrides() EdifactDelimiterOverrideResponseArrayOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) []EdifactDelimiterOverrideResponse {
		return v.EdifactDelimiterOverrides
	}).(EdifactDelimiterOverrideResponseArrayOutput)
}

// The EDIFACT envelope override settings.
func (o EdifactProtocolSettingsResponseOutput) EnvelopeOverrides() EdifactEnvelopeOverrideResponseArrayOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) []EdifactEnvelopeOverrideResponse { return v.EnvelopeOverrides }).(EdifactEnvelopeOverrideResponseArrayOutput)
}

// The EDIFACT envelope settings.
func (o EdifactProtocolSettingsResponseOutput) EnvelopeSettings() EdifactEnvelopeSettingsResponseOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) EdifactEnvelopeSettingsResponse { return v.EnvelopeSettings }).(EdifactEnvelopeSettingsResponseOutput)
}

// The EDIFACT framing settings.
func (o EdifactProtocolSettingsResponseOutput) FramingSettings() EdifactFramingSettingsResponseOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) EdifactFramingSettingsResponse { return v.FramingSettings }).(EdifactFramingSettingsResponseOutput)
}

// The EDIFACT message filter.
func (o EdifactProtocolSettingsResponseOutput) MessageFilter() EdifactMessageFilterResponseOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) EdifactMessageFilterResponse { return v.MessageFilter }).(EdifactMessageFilterResponseOutput)
}

// The EDIFACT message filter list.
func (o EdifactProtocolSettingsResponseOutput) MessageFilterList() EdifactMessageIdentifierResponseArrayOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) []EdifactMessageIdentifierResponse { return v.MessageFilterList }).(EdifactMessageIdentifierResponseArrayOutput)
}

// The EDIFACT processing Settings.
func (o EdifactProtocolSettingsResponseOutput) ProcessingSettings() EdifactProcessingSettingsResponseOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) EdifactProcessingSettingsResponse { return v.ProcessingSettings }).(EdifactProcessingSettingsResponseOutput)
}

// The EDIFACT schema references.
func (o EdifactProtocolSettingsResponseOutput) SchemaReferences() EdifactSchemaReferenceResponseArrayOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) []EdifactSchemaReferenceResponse { return v.SchemaReferences }).(EdifactSchemaReferenceResponseArrayOutput)
}

// The EDIFACT validation override settings.
func (o EdifactProtocolSettingsResponseOutput) ValidationOverrides() EdifactValidationOverrideResponseArrayOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) []EdifactValidationOverrideResponse {
		return v.ValidationOverrides
	}).(EdifactValidationOverrideResponseArrayOutput)
}

// The EDIFACT validation settings.
func (o EdifactProtocolSettingsResponseOutput) ValidationSettings() EdifactValidationSettingsResponseOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) EdifactValidationSettingsResponse { return v.ValidationSettings }).(EdifactValidationSettingsResponseOutput)
}

type EdifactProtocolSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (EdifactProtocolSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactProtocolSettingsResponse)(nil)).Elem()
}

func (o EdifactProtocolSettingsResponsePtrOutput) ToEdifactProtocolSettingsResponsePtrOutput() EdifactProtocolSettingsResponsePtrOutput {
	return o
}

func (o EdifactProtocolSettingsResponsePtrOutput) ToEdifactProtocolSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactProtocolSettingsResponsePtrOutput {
	return o
}

func (o EdifactProtocolSettingsResponsePtrOutput) Elem() EdifactProtocolSettingsResponseOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) EdifactProtocolSettingsResponse { return *v }).(EdifactProtocolSettingsResponseOutput)
}

// The EDIFACT acknowledgement settings.
func (o EdifactProtocolSettingsResponsePtrOutput) AcknowledgementSettings() EdifactAcknowledgementSettingsResponsePtrOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) *EdifactAcknowledgementSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.AcknowledgementSettings
	}).(EdifactAcknowledgementSettingsResponsePtrOutput)
}

// The EDIFACT delimiter override settings.
func (o EdifactProtocolSettingsResponsePtrOutput) EdifactDelimiterOverrides() EdifactDelimiterOverrideResponseArrayOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) []EdifactDelimiterOverrideResponse {
		if v == nil {
			return nil
		}
		return v.EdifactDelimiterOverrides
	}).(EdifactDelimiterOverrideResponseArrayOutput)
}

// The EDIFACT envelope override settings.
func (o EdifactProtocolSettingsResponsePtrOutput) EnvelopeOverrides() EdifactEnvelopeOverrideResponseArrayOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) []EdifactEnvelopeOverrideResponse {
		if v == nil {
			return nil
		}
		return v.EnvelopeOverrides
	}).(EdifactEnvelopeOverrideResponseArrayOutput)
}

// The EDIFACT envelope settings.
func (o EdifactProtocolSettingsResponsePtrOutput) EnvelopeSettings() EdifactEnvelopeSettingsResponsePtrOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) *EdifactEnvelopeSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.EnvelopeSettings
	}).(EdifactEnvelopeSettingsResponsePtrOutput)
}

// The EDIFACT framing settings.
func (o EdifactProtocolSettingsResponsePtrOutput) FramingSettings() EdifactFramingSettingsResponsePtrOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) *EdifactFramingSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.FramingSettings
	}).(EdifactFramingSettingsResponsePtrOutput)
}

// The EDIFACT message filter.
func (o EdifactProtocolSettingsResponsePtrOutput) MessageFilter() EdifactMessageFilterResponsePtrOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) *EdifactMessageFilterResponse {
		if v == nil {
			return nil
		}
		return &v.MessageFilter
	}).(EdifactMessageFilterResponsePtrOutput)
}

// The EDIFACT message filter list.
func (o EdifactProtocolSettingsResponsePtrOutput) MessageFilterList() EdifactMessageIdentifierResponseArrayOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) []EdifactMessageIdentifierResponse {
		if v == nil {
			return nil
		}
		return v.MessageFilterList
	}).(EdifactMessageIdentifierResponseArrayOutput)
}

// The EDIFACT processing Settings.
func (o EdifactProtocolSettingsResponsePtrOutput) ProcessingSettings() EdifactProcessingSettingsResponsePtrOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) *EdifactProcessingSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.ProcessingSettings
	}).(EdifactProcessingSettingsResponsePtrOutput)
}

// The EDIFACT schema references.
func (o EdifactProtocolSettingsResponsePtrOutput) SchemaReferences() EdifactSchemaReferenceResponseArrayOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) []EdifactSchemaReferenceResponse {
		if v == nil {
			return nil
		}
		return v.SchemaReferences
	}).(EdifactSchemaReferenceResponseArrayOutput)
}

// The EDIFACT validation override settings.
func (o EdifactProtocolSettingsResponsePtrOutput) ValidationOverrides() EdifactValidationOverrideResponseArrayOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) []EdifactValidationOverrideResponse {
		if v == nil {
			return nil
		}
		return v.ValidationOverrides
	}).(EdifactValidationOverrideResponseArrayOutput)
}

// The EDIFACT validation settings.
func (o EdifactProtocolSettingsResponsePtrOutput) ValidationSettings() EdifactValidationSettingsResponsePtrOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) *EdifactValidationSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.ValidationSettings
	}).(EdifactValidationSettingsResponsePtrOutput)
}

// The Edifact schema reference.
type EdifactSchemaReference struct {
	// The association assigned code.
	AssociationAssignedCode *string `pulumi:"associationAssignedCode"`
	// The message id.
	MessageId string `pulumi:"messageId"`
	// The message release version.
	MessageRelease string `pulumi:"messageRelease"`
	// The message version.
	MessageVersion string `pulumi:"messageVersion"`
	// The schema name.
	SchemaName string `pulumi:"schemaName"`
	// The sender application id.
	SenderApplicationId *string `pulumi:"senderApplicationId"`
	// The sender application qualifier.
	SenderApplicationQualifier *string `pulumi:"senderApplicationQualifier"`
}

// EdifactSchemaReferenceInput is an input type that accepts EdifactSchemaReferenceArgs and EdifactSchemaReferenceOutput values.
// You can construct a concrete instance of `EdifactSchemaReferenceInput` via:
//
//          EdifactSchemaReferenceArgs{...}
type EdifactSchemaReferenceInput interface {
	pulumi.Input

	ToEdifactSchemaReferenceOutput() EdifactSchemaReferenceOutput
	ToEdifactSchemaReferenceOutputWithContext(context.Context) EdifactSchemaReferenceOutput
}

// The Edifact schema reference.
type EdifactSchemaReferenceArgs struct {
	// The association assigned code.
	AssociationAssignedCode pulumi.StringPtrInput `pulumi:"associationAssignedCode"`
	// The message id.
	MessageId pulumi.StringInput `pulumi:"messageId"`
	// The message release version.
	MessageRelease pulumi.StringInput `pulumi:"messageRelease"`
	// The message version.
	MessageVersion pulumi.StringInput `pulumi:"messageVersion"`
	// The schema name.
	SchemaName pulumi.StringInput `pulumi:"schemaName"`
	// The sender application id.
	SenderApplicationId pulumi.StringPtrInput `pulumi:"senderApplicationId"`
	// The sender application qualifier.
	SenderApplicationQualifier pulumi.StringPtrInput `pulumi:"senderApplicationQualifier"`
}

func (EdifactSchemaReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactSchemaReference)(nil)).Elem()
}

func (i EdifactSchemaReferenceArgs) ToEdifactSchemaReferenceOutput() EdifactSchemaReferenceOutput {
	return i.ToEdifactSchemaReferenceOutputWithContext(context.Background())
}

func (i EdifactSchemaReferenceArgs) ToEdifactSchemaReferenceOutputWithContext(ctx context.Context) EdifactSchemaReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactSchemaReferenceOutput)
}

// EdifactSchemaReferenceArrayInput is an input type that accepts EdifactSchemaReferenceArray and EdifactSchemaReferenceArrayOutput values.
// You can construct a concrete instance of `EdifactSchemaReferenceArrayInput` via:
//
//          EdifactSchemaReferenceArray{ EdifactSchemaReferenceArgs{...} }
type EdifactSchemaReferenceArrayInput interface {
	pulumi.Input

	ToEdifactSchemaReferenceArrayOutput() EdifactSchemaReferenceArrayOutput
	ToEdifactSchemaReferenceArrayOutputWithContext(context.Context) EdifactSchemaReferenceArrayOutput
}

type EdifactSchemaReferenceArray []EdifactSchemaReferenceInput

func (EdifactSchemaReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactSchemaReference)(nil)).Elem()
}

func (i EdifactSchemaReferenceArray) ToEdifactSchemaReferenceArrayOutput() EdifactSchemaReferenceArrayOutput {
	return i.ToEdifactSchemaReferenceArrayOutputWithContext(context.Background())
}

func (i EdifactSchemaReferenceArray) ToEdifactSchemaReferenceArrayOutputWithContext(ctx context.Context) EdifactSchemaReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactSchemaReferenceArrayOutput)
}

// The Edifact schema reference.
type EdifactSchemaReferenceOutput struct{ *pulumi.OutputState }

func (EdifactSchemaReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactSchemaReference)(nil)).Elem()
}

func (o EdifactSchemaReferenceOutput) ToEdifactSchemaReferenceOutput() EdifactSchemaReferenceOutput {
	return o
}

func (o EdifactSchemaReferenceOutput) ToEdifactSchemaReferenceOutputWithContext(ctx context.Context) EdifactSchemaReferenceOutput {
	return o
}

// The association assigned code.
func (o EdifactSchemaReferenceOutput) AssociationAssignedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactSchemaReference) *string { return v.AssociationAssignedCode }).(pulumi.StringPtrOutput)
}

// The message id.
func (o EdifactSchemaReferenceOutput) MessageId() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactSchemaReference) string { return v.MessageId }).(pulumi.StringOutput)
}

// The message release version.
func (o EdifactSchemaReferenceOutput) MessageRelease() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactSchemaReference) string { return v.MessageRelease }).(pulumi.StringOutput)
}

// The message version.
func (o EdifactSchemaReferenceOutput) MessageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactSchemaReference) string { return v.MessageVersion }).(pulumi.StringOutput)
}

// The schema name.
func (o EdifactSchemaReferenceOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactSchemaReference) string { return v.SchemaName }).(pulumi.StringOutput)
}

// The sender application id.
func (o EdifactSchemaReferenceOutput) SenderApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactSchemaReference) *string { return v.SenderApplicationId }).(pulumi.StringPtrOutput)
}

// The sender application qualifier.
func (o EdifactSchemaReferenceOutput) SenderApplicationQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactSchemaReference) *string { return v.SenderApplicationQualifier }).(pulumi.StringPtrOutput)
}

type EdifactSchemaReferenceArrayOutput struct{ *pulumi.OutputState }

func (EdifactSchemaReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactSchemaReference)(nil)).Elem()
}

func (o EdifactSchemaReferenceArrayOutput) ToEdifactSchemaReferenceArrayOutput() EdifactSchemaReferenceArrayOutput {
	return o
}

func (o EdifactSchemaReferenceArrayOutput) ToEdifactSchemaReferenceArrayOutputWithContext(ctx context.Context) EdifactSchemaReferenceArrayOutput {
	return o
}

func (o EdifactSchemaReferenceArrayOutput) Index(i pulumi.IntInput) EdifactSchemaReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdifactSchemaReference {
		return vs[0].([]EdifactSchemaReference)[vs[1].(int)]
	}).(EdifactSchemaReferenceOutput)
}

// The Edifact schema reference.
type EdifactSchemaReferenceResponse struct {
	// The association assigned code.
	AssociationAssignedCode *string `pulumi:"associationAssignedCode"`
	// The message id.
	MessageId string `pulumi:"messageId"`
	// The message release version.
	MessageRelease string `pulumi:"messageRelease"`
	// The message version.
	MessageVersion string `pulumi:"messageVersion"`
	// The schema name.
	SchemaName string `pulumi:"schemaName"`
	// The sender application id.
	SenderApplicationId *string `pulumi:"senderApplicationId"`
	// The sender application qualifier.
	SenderApplicationQualifier *string `pulumi:"senderApplicationQualifier"`
}

// EdifactSchemaReferenceResponseInput is an input type that accepts EdifactSchemaReferenceResponseArgs and EdifactSchemaReferenceResponseOutput values.
// You can construct a concrete instance of `EdifactSchemaReferenceResponseInput` via:
//
//          EdifactSchemaReferenceResponseArgs{...}
type EdifactSchemaReferenceResponseInput interface {
	pulumi.Input

	ToEdifactSchemaReferenceResponseOutput() EdifactSchemaReferenceResponseOutput
	ToEdifactSchemaReferenceResponseOutputWithContext(context.Context) EdifactSchemaReferenceResponseOutput
}

// The Edifact schema reference.
type EdifactSchemaReferenceResponseArgs struct {
	// The association assigned code.
	AssociationAssignedCode pulumi.StringPtrInput `pulumi:"associationAssignedCode"`
	// The message id.
	MessageId pulumi.StringInput `pulumi:"messageId"`
	// The message release version.
	MessageRelease pulumi.StringInput `pulumi:"messageRelease"`
	// The message version.
	MessageVersion pulumi.StringInput `pulumi:"messageVersion"`
	// The schema name.
	SchemaName pulumi.StringInput `pulumi:"schemaName"`
	// The sender application id.
	SenderApplicationId pulumi.StringPtrInput `pulumi:"senderApplicationId"`
	// The sender application qualifier.
	SenderApplicationQualifier pulumi.StringPtrInput `pulumi:"senderApplicationQualifier"`
}

func (EdifactSchemaReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactSchemaReferenceResponse)(nil)).Elem()
}

func (i EdifactSchemaReferenceResponseArgs) ToEdifactSchemaReferenceResponseOutput() EdifactSchemaReferenceResponseOutput {
	return i.ToEdifactSchemaReferenceResponseOutputWithContext(context.Background())
}

func (i EdifactSchemaReferenceResponseArgs) ToEdifactSchemaReferenceResponseOutputWithContext(ctx context.Context) EdifactSchemaReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactSchemaReferenceResponseOutput)
}

// EdifactSchemaReferenceResponseArrayInput is an input type that accepts EdifactSchemaReferenceResponseArray and EdifactSchemaReferenceResponseArrayOutput values.
// You can construct a concrete instance of `EdifactSchemaReferenceResponseArrayInput` via:
//
//          EdifactSchemaReferenceResponseArray{ EdifactSchemaReferenceResponseArgs{...} }
type EdifactSchemaReferenceResponseArrayInput interface {
	pulumi.Input

	ToEdifactSchemaReferenceResponseArrayOutput() EdifactSchemaReferenceResponseArrayOutput
	ToEdifactSchemaReferenceResponseArrayOutputWithContext(context.Context) EdifactSchemaReferenceResponseArrayOutput
}

type EdifactSchemaReferenceResponseArray []EdifactSchemaReferenceResponseInput

func (EdifactSchemaReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactSchemaReferenceResponse)(nil)).Elem()
}

func (i EdifactSchemaReferenceResponseArray) ToEdifactSchemaReferenceResponseArrayOutput() EdifactSchemaReferenceResponseArrayOutput {
	return i.ToEdifactSchemaReferenceResponseArrayOutputWithContext(context.Background())
}

func (i EdifactSchemaReferenceResponseArray) ToEdifactSchemaReferenceResponseArrayOutputWithContext(ctx context.Context) EdifactSchemaReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactSchemaReferenceResponseArrayOutput)
}

// The Edifact schema reference.
type EdifactSchemaReferenceResponseOutput struct{ *pulumi.OutputState }

func (EdifactSchemaReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactSchemaReferenceResponse)(nil)).Elem()
}

func (o EdifactSchemaReferenceResponseOutput) ToEdifactSchemaReferenceResponseOutput() EdifactSchemaReferenceResponseOutput {
	return o
}

func (o EdifactSchemaReferenceResponseOutput) ToEdifactSchemaReferenceResponseOutputWithContext(ctx context.Context) EdifactSchemaReferenceResponseOutput {
	return o
}

// The association assigned code.
func (o EdifactSchemaReferenceResponseOutput) AssociationAssignedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactSchemaReferenceResponse) *string { return v.AssociationAssignedCode }).(pulumi.StringPtrOutput)
}

// The message id.
func (o EdifactSchemaReferenceResponseOutput) MessageId() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactSchemaReferenceResponse) string { return v.MessageId }).(pulumi.StringOutput)
}

// The message release version.
func (o EdifactSchemaReferenceResponseOutput) MessageRelease() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactSchemaReferenceResponse) string { return v.MessageRelease }).(pulumi.StringOutput)
}

// The message version.
func (o EdifactSchemaReferenceResponseOutput) MessageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactSchemaReferenceResponse) string { return v.MessageVersion }).(pulumi.StringOutput)
}

// The schema name.
func (o EdifactSchemaReferenceResponseOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactSchemaReferenceResponse) string { return v.SchemaName }).(pulumi.StringOutput)
}

// The sender application id.
func (o EdifactSchemaReferenceResponseOutput) SenderApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactSchemaReferenceResponse) *string { return v.SenderApplicationId }).(pulumi.StringPtrOutput)
}

// The sender application qualifier.
func (o EdifactSchemaReferenceResponseOutput) SenderApplicationQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactSchemaReferenceResponse) *string { return v.SenderApplicationQualifier }).(pulumi.StringPtrOutput)
}

type EdifactSchemaReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (EdifactSchemaReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactSchemaReferenceResponse)(nil)).Elem()
}

func (o EdifactSchemaReferenceResponseArrayOutput) ToEdifactSchemaReferenceResponseArrayOutput() EdifactSchemaReferenceResponseArrayOutput {
	return o
}

func (o EdifactSchemaReferenceResponseArrayOutput) ToEdifactSchemaReferenceResponseArrayOutputWithContext(ctx context.Context) EdifactSchemaReferenceResponseArrayOutput {
	return o
}

func (o EdifactSchemaReferenceResponseArrayOutput) Index(i pulumi.IntInput) EdifactSchemaReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdifactSchemaReferenceResponse {
		return vs[0].([]EdifactSchemaReferenceResponse)[vs[1].(int)]
	}).(EdifactSchemaReferenceResponseOutput)
}

// The Edifact validation override settings.
type EdifactValidationOverride struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes bool `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character Set.
	EnforceCharacterSet bool `pulumi:"enforceCharacterSet"`
	// The message id on which the validation settings has to be applied.
	MessageId string `pulumi:"messageId"`
	// The trailing separator policy.
	TrailingSeparatorPolicy string `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes bool `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate EDI types.
	ValidateEDITypes bool `pulumi:"validateEDITypes"`
	// The value indicating whether to validate XSD types.
	ValidateXSDTypes bool `pulumi:"validateXSDTypes"`
}

// EdifactValidationOverrideInput is an input type that accepts EdifactValidationOverrideArgs and EdifactValidationOverrideOutput values.
// You can construct a concrete instance of `EdifactValidationOverrideInput` via:
//
//          EdifactValidationOverrideArgs{...}
type EdifactValidationOverrideInput interface {
	pulumi.Input

	ToEdifactValidationOverrideOutput() EdifactValidationOverrideOutput
	ToEdifactValidationOverrideOutputWithContext(context.Context) EdifactValidationOverrideOutput
}

// The Edifact validation override settings.
type EdifactValidationOverrideArgs struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes pulumi.BoolInput `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character Set.
	EnforceCharacterSet pulumi.BoolInput `pulumi:"enforceCharacterSet"`
	// The message id on which the validation settings has to be applied.
	MessageId pulumi.StringInput `pulumi:"messageId"`
	// The trailing separator policy.
	TrailingSeparatorPolicy pulumi.StringInput `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes pulumi.BoolInput `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate EDI types.
	ValidateEDITypes pulumi.BoolInput `pulumi:"validateEDITypes"`
	// The value indicating whether to validate XSD types.
	ValidateXSDTypes pulumi.BoolInput `pulumi:"validateXSDTypes"`
}

func (EdifactValidationOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactValidationOverride)(nil)).Elem()
}

func (i EdifactValidationOverrideArgs) ToEdifactValidationOverrideOutput() EdifactValidationOverrideOutput {
	return i.ToEdifactValidationOverrideOutputWithContext(context.Background())
}

func (i EdifactValidationOverrideArgs) ToEdifactValidationOverrideOutputWithContext(ctx context.Context) EdifactValidationOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactValidationOverrideOutput)
}

// EdifactValidationOverrideArrayInput is an input type that accepts EdifactValidationOverrideArray and EdifactValidationOverrideArrayOutput values.
// You can construct a concrete instance of `EdifactValidationOverrideArrayInput` via:
//
//          EdifactValidationOverrideArray{ EdifactValidationOverrideArgs{...} }
type EdifactValidationOverrideArrayInput interface {
	pulumi.Input

	ToEdifactValidationOverrideArrayOutput() EdifactValidationOverrideArrayOutput
	ToEdifactValidationOverrideArrayOutputWithContext(context.Context) EdifactValidationOverrideArrayOutput
}

type EdifactValidationOverrideArray []EdifactValidationOverrideInput

func (EdifactValidationOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactValidationOverride)(nil)).Elem()
}

func (i EdifactValidationOverrideArray) ToEdifactValidationOverrideArrayOutput() EdifactValidationOverrideArrayOutput {
	return i.ToEdifactValidationOverrideArrayOutputWithContext(context.Background())
}

func (i EdifactValidationOverrideArray) ToEdifactValidationOverrideArrayOutputWithContext(ctx context.Context) EdifactValidationOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactValidationOverrideArrayOutput)
}

// The Edifact validation override settings.
type EdifactValidationOverrideOutput struct{ *pulumi.OutputState }

func (EdifactValidationOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactValidationOverride)(nil)).Elem()
}

func (o EdifactValidationOverrideOutput) ToEdifactValidationOverrideOutput() EdifactValidationOverrideOutput {
	return o
}

func (o EdifactValidationOverrideOutput) ToEdifactValidationOverrideOutputWithContext(ctx context.Context) EdifactValidationOverrideOutput {
	return o
}

// The value indicating whether to allow leading and trailing spaces and zeroes.
func (o EdifactValidationOverrideOutput) AllowLeadingAndTrailingSpacesAndZeroes() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationOverride) bool { return v.AllowLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolOutput)
}

// The value indicating whether to validate character Set.
func (o EdifactValidationOverrideOutput) EnforceCharacterSet() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationOverride) bool { return v.EnforceCharacterSet }).(pulumi.BoolOutput)
}

// The message id on which the validation settings has to be applied.
func (o EdifactValidationOverrideOutput) MessageId() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactValidationOverride) string { return v.MessageId }).(pulumi.StringOutput)
}

// The trailing separator policy.
func (o EdifactValidationOverrideOutput) TrailingSeparatorPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactValidationOverride) string { return v.TrailingSeparatorPolicy }).(pulumi.StringOutput)
}

// The value indicating whether to trim leading and trailing spaces and zeroes.
func (o EdifactValidationOverrideOutput) TrimLeadingAndTrailingSpacesAndZeroes() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationOverride) bool { return v.TrimLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolOutput)
}

// The value indicating whether to validate EDI types.
func (o EdifactValidationOverrideOutput) ValidateEDITypes() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationOverride) bool { return v.ValidateEDITypes }).(pulumi.BoolOutput)
}

// The value indicating whether to validate XSD types.
func (o EdifactValidationOverrideOutput) ValidateXSDTypes() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationOverride) bool { return v.ValidateXSDTypes }).(pulumi.BoolOutput)
}

type EdifactValidationOverrideArrayOutput struct{ *pulumi.OutputState }

func (EdifactValidationOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactValidationOverride)(nil)).Elem()
}

func (o EdifactValidationOverrideArrayOutput) ToEdifactValidationOverrideArrayOutput() EdifactValidationOverrideArrayOutput {
	return o
}

func (o EdifactValidationOverrideArrayOutput) ToEdifactValidationOverrideArrayOutputWithContext(ctx context.Context) EdifactValidationOverrideArrayOutput {
	return o
}

func (o EdifactValidationOverrideArrayOutput) Index(i pulumi.IntInput) EdifactValidationOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdifactValidationOverride {
		return vs[0].([]EdifactValidationOverride)[vs[1].(int)]
	}).(EdifactValidationOverrideOutput)
}

// The Edifact validation override settings.
type EdifactValidationOverrideResponse struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes bool `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character Set.
	EnforceCharacterSet bool `pulumi:"enforceCharacterSet"`
	// The message id on which the validation settings has to be applied.
	MessageId string `pulumi:"messageId"`
	// The trailing separator policy.
	TrailingSeparatorPolicy string `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes bool `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate EDI types.
	ValidateEDITypes bool `pulumi:"validateEDITypes"`
	// The value indicating whether to validate XSD types.
	ValidateXSDTypes bool `pulumi:"validateXSDTypes"`
}

// EdifactValidationOverrideResponseInput is an input type that accepts EdifactValidationOverrideResponseArgs and EdifactValidationOverrideResponseOutput values.
// You can construct a concrete instance of `EdifactValidationOverrideResponseInput` via:
//
//          EdifactValidationOverrideResponseArgs{...}
type EdifactValidationOverrideResponseInput interface {
	pulumi.Input

	ToEdifactValidationOverrideResponseOutput() EdifactValidationOverrideResponseOutput
	ToEdifactValidationOverrideResponseOutputWithContext(context.Context) EdifactValidationOverrideResponseOutput
}

// The Edifact validation override settings.
type EdifactValidationOverrideResponseArgs struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes pulumi.BoolInput `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character Set.
	EnforceCharacterSet pulumi.BoolInput `pulumi:"enforceCharacterSet"`
	// The message id on which the validation settings has to be applied.
	MessageId pulumi.StringInput `pulumi:"messageId"`
	// The trailing separator policy.
	TrailingSeparatorPolicy pulumi.StringInput `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes pulumi.BoolInput `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate EDI types.
	ValidateEDITypes pulumi.BoolInput `pulumi:"validateEDITypes"`
	// The value indicating whether to validate XSD types.
	ValidateXSDTypes pulumi.BoolInput `pulumi:"validateXSDTypes"`
}

func (EdifactValidationOverrideResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactValidationOverrideResponse)(nil)).Elem()
}

func (i EdifactValidationOverrideResponseArgs) ToEdifactValidationOverrideResponseOutput() EdifactValidationOverrideResponseOutput {
	return i.ToEdifactValidationOverrideResponseOutputWithContext(context.Background())
}

func (i EdifactValidationOverrideResponseArgs) ToEdifactValidationOverrideResponseOutputWithContext(ctx context.Context) EdifactValidationOverrideResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactValidationOverrideResponseOutput)
}

// EdifactValidationOverrideResponseArrayInput is an input type that accepts EdifactValidationOverrideResponseArray and EdifactValidationOverrideResponseArrayOutput values.
// You can construct a concrete instance of `EdifactValidationOverrideResponseArrayInput` via:
//
//          EdifactValidationOverrideResponseArray{ EdifactValidationOverrideResponseArgs{...} }
type EdifactValidationOverrideResponseArrayInput interface {
	pulumi.Input

	ToEdifactValidationOverrideResponseArrayOutput() EdifactValidationOverrideResponseArrayOutput
	ToEdifactValidationOverrideResponseArrayOutputWithContext(context.Context) EdifactValidationOverrideResponseArrayOutput
}

type EdifactValidationOverrideResponseArray []EdifactValidationOverrideResponseInput

func (EdifactValidationOverrideResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactValidationOverrideResponse)(nil)).Elem()
}

func (i EdifactValidationOverrideResponseArray) ToEdifactValidationOverrideResponseArrayOutput() EdifactValidationOverrideResponseArrayOutput {
	return i.ToEdifactValidationOverrideResponseArrayOutputWithContext(context.Background())
}

func (i EdifactValidationOverrideResponseArray) ToEdifactValidationOverrideResponseArrayOutputWithContext(ctx context.Context) EdifactValidationOverrideResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactValidationOverrideResponseArrayOutput)
}

// The Edifact validation override settings.
type EdifactValidationOverrideResponseOutput struct{ *pulumi.OutputState }

func (EdifactValidationOverrideResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactValidationOverrideResponse)(nil)).Elem()
}

func (o EdifactValidationOverrideResponseOutput) ToEdifactValidationOverrideResponseOutput() EdifactValidationOverrideResponseOutput {
	return o
}

func (o EdifactValidationOverrideResponseOutput) ToEdifactValidationOverrideResponseOutputWithContext(ctx context.Context) EdifactValidationOverrideResponseOutput {
	return o
}

// The value indicating whether to allow leading and trailing spaces and zeroes.
func (o EdifactValidationOverrideResponseOutput) AllowLeadingAndTrailingSpacesAndZeroes() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationOverrideResponse) bool { return v.AllowLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolOutput)
}

// The value indicating whether to validate character Set.
func (o EdifactValidationOverrideResponseOutput) EnforceCharacterSet() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationOverrideResponse) bool { return v.EnforceCharacterSet }).(pulumi.BoolOutput)
}

// The message id on which the validation settings has to be applied.
func (o EdifactValidationOverrideResponseOutput) MessageId() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactValidationOverrideResponse) string { return v.MessageId }).(pulumi.StringOutput)
}

// The trailing separator policy.
func (o EdifactValidationOverrideResponseOutput) TrailingSeparatorPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactValidationOverrideResponse) string { return v.TrailingSeparatorPolicy }).(pulumi.StringOutput)
}

// The value indicating whether to trim leading and trailing spaces and zeroes.
func (o EdifactValidationOverrideResponseOutput) TrimLeadingAndTrailingSpacesAndZeroes() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationOverrideResponse) bool { return v.TrimLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolOutput)
}

// The value indicating whether to validate EDI types.
func (o EdifactValidationOverrideResponseOutput) ValidateEDITypes() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationOverrideResponse) bool { return v.ValidateEDITypes }).(pulumi.BoolOutput)
}

// The value indicating whether to validate XSD types.
func (o EdifactValidationOverrideResponseOutput) ValidateXSDTypes() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationOverrideResponse) bool { return v.ValidateXSDTypes }).(pulumi.BoolOutput)
}

type EdifactValidationOverrideResponseArrayOutput struct{ *pulumi.OutputState }

func (EdifactValidationOverrideResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactValidationOverrideResponse)(nil)).Elem()
}

func (o EdifactValidationOverrideResponseArrayOutput) ToEdifactValidationOverrideResponseArrayOutput() EdifactValidationOverrideResponseArrayOutput {
	return o
}

func (o EdifactValidationOverrideResponseArrayOutput) ToEdifactValidationOverrideResponseArrayOutputWithContext(ctx context.Context) EdifactValidationOverrideResponseArrayOutput {
	return o
}

func (o EdifactValidationOverrideResponseArrayOutput) Index(i pulumi.IntInput) EdifactValidationOverrideResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdifactValidationOverrideResponse {
		return vs[0].([]EdifactValidationOverrideResponse)[vs[1].(int)]
	}).(EdifactValidationOverrideResponseOutput)
}

// The Edifact agreement validation settings.
type EdifactValidationSettings struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes bool `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to check for duplicate group control number.
	CheckDuplicateGroupControlNumber bool `pulumi:"checkDuplicateGroupControlNumber"`
	// The value indicating whether to check for duplicate interchange control number.
	CheckDuplicateInterchangeControlNumber bool `pulumi:"checkDuplicateInterchangeControlNumber"`
	// The value indicating whether to check for duplicate transaction set control number.
	CheckDuplicateTransactionSetControlNumber bool `pulumi:"checkDuplicateTransactionSetControlNumber"`
	// The validity period of interchange control number.
	InterchangeControlNumberValidityDays int `pulumi:"interchangeControlNumberValidityDays"`
	// The trailing separator policy.
	TrailingSeparatorPolicy string `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes bool `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character set in the message.
	ValidateCharacterSet bool `pulumi:"validateCharacterSet"`
	// The value indicating whether to Whether to validate EDI types.
	ValidateEDITypes bool `pulumi:"validateEDITypes"`
	// The value indicating whether to Whether to validate XSD types.
	ValidateXSDTypes bool `pulumi:"validateXSDTypes"`
}

// EdifactValidationSettingsInput is an input type that accepts EdifactValidationSettingsArgs and EdifactValidationSettingsOutput values.
// You can construct a concrete instance of `EdifactValidationSettingsInput` via:
//
//          EdifactValidationSettingsArgs{...}
type EdifactValidationSettingsInput interface {
	pulumi.Input

	ToEdifactValidationSettingsOutput() EdifactValidationSettingsOutput
	ToEdifactValidationSettingsOutputWithContext(context.Context) EdifactValidationSettingsOutput
}

// The Edifact agreement validation settings.
type EdifactValidationSettingsArgs struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes pulumi.BoolInput `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to check for duplicate group control number.
	CheckDuplicateGroupControlNumber pulumi.BoolInput `pulumi:"checkDuplicateGroupControlNumber"`
	// The value indicating whether to check for duplicate interchange control number.
	CheckDuplicateInterchangeControlNumber pulumi.BoolInput `pulumi:"checkDuplicateInterchangeControlNumber"`
	// The value indicating whether to check for duplicate transaction set control number.
	CheckDuplicateTransactionSetControlNumber pulumi.BoolInput `pulumi:"checkDuplicateTransactionSetControlNumber"`
	// The validity period of interchange control number.
	InterchangeControlNumberValidityDays pulumi.IntInput `pulumi:"interchangeControlNumberValidityDays"`
	// The trailing separator policy.
	TrailingSeparatorPolicy pulumi.StringInput `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes pulumi.BoolInput `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character set in the message.
	ValidateCharacterSet pulumi.BoolInput `pulumi:"validateCharacterSet"`
	// The value indicating whether to Whether to validate EDI types.
	ValidateEDITypes pulumi.BoolInput `pulumi:"validateEDITypes"`
	// The value indicating whether to Whether to validate XSD types.
	ValidateXSDTypes pulumi.BoolInput `pulumi:"validateXSDTypes"`
}

func (EdifactValidationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactValidationSettings)(nil)).Elem()
}

func (i EdifactValidationSettingsArgs) ToEdifactValidationSettingsOutput() EdifactValidationSettingsOutput {
	return i.ToEdifactValidationSettingsOutputWithContext(context.Background())
}

func (i EdifactValidationSettingsArgs) ToEdifactValidationSettingsOutputWithContext(ctx context.Context) EdifactValidationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactValidationSettingsOutput)
}

func (i EdifactValidationSettingsArgs) ToEdifactValidationSettingsPtrOutput() EdifactValidationSettingsPtrOutput {
	return i.ToEdifactValidationSettingsPtrOutputWithContext(context.Background())
}

func (i EdifactValidationSettingsArgs) ToEdifactValidationSettingsPtrOutputWithContext(ctx context.Context) EdifactValidationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactValidationSettingsOutput).ToEdifactValidationSettingsPtrOutputWithContext(ctx)
}

// EdifactValidationSettingsPtrInput is an input type that accepts EdifactValidationSettingsArgs, EdifactValidationSettingsPtr and EdifactValidationSettingsPtrOutput values.
// You can construct a concrete instance of `EdifactValidationSettingsPtrInput` via:
//
//          EdifactValidationSettingsArgs{...}
//
//  or:
//
//          nil
type EdifactValidationSettingsPtrInput interface {
	pulumi.Input

	ToEdifactValidationSettingsPtrOutput() EdifactValidationSettingsPtrOutput
	ToEdifactValidationSettingsPtrOutputWithContext(context.Context) EdifactValidationSettingsPtrOutput
}

type edifactValidationSettingsPtrType EdifactValidationSettingsArgs

func EdifactValidationSettingsPtr(v *EdifactValidationSettingsArgs) EdifactValidationSettingsPtrInput {
	return (*edifactValidationSettingsPtrType)(v)
}

func (*edifactValidationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactValidationSettings)(nil)).Elem()
}

func (i *edifactValidationSettingsPtrType) ToEdifactValidationSettingsPtrOutput() EdifactValidationSettingsPtrOutput {
	return i.ToEdifactValidationSettingsPtrOutputWithContext(context.Background())
}

func (i *edifactValidationSettingsPtrType) ToEdifactValidationSettingsPtrOutputWithContext(ctx context.Context) EdifactValidationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactValidationSettingsPtrOutput)
}

// The Edifact agreement validation settings.
type EdifactValidationSettingsOutput struct{ *pulumi.OutputState }

func (EdifactValidationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactValidationSettings)(nil)).Elem()
}

func (o EdifactValidationSettingsOutput) ToEdifactValidationSettingsOutput() EdifactValidationSettingsOutput {
	return o
}

func (o EdifactValidationSettingsOutput) ToEdifactValidationSettingsOutputWithContext(ctx context.Context) EdifactValidationSettingsOutput {
	return o
}

func (o EdifactValidationSettingsOutput) ToEdifactValidationSettingsPtrOutput() EdifactValidationSettingsPtrOutput {
	return o.ToEdifactValidationSettingsPtrOutputWithContext(context.Background())
}

func (o EdifactValidationSettingsOutput) ToEdifactValidationSettingsPtrOutputWithContext(ctx context.Context) EdifactValidationSettingsPtrOutput {
	return o.ApplyT(func(v EdifactValidationSettings) *EdifactValidationSettings {
		return &v
	}).(EdifactValidationSettingsPtrOutput)
}

// The value indicating whether to allow leading and trailing spaces and zeroes.
func (o EdifactValidationSettingsOutput) AllowLeadingAndTrailingSpacesAndZeroes() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationSettings) bool { return v.AllowLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolOutput)
}

// The value indicating whether to check for duplicate group control number.
func (o EdifactValidationSettingsOutput) CheckDuplicateGroupControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationSettings) bool { return v.CheckDuplicateGroupControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to check for duplicate interchange control number.
func (o EdifactValidationSettingsOutput) CheckDuplicateInterchangeControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationSettings) bool { return v.CheckDuplicateInterchangeControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to check for duplicate transaction set control number.
func (o EdifactValidationSettingsOutput) CheckDuplicateTransactionSetControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationSettings) bool { return v.CheckDuplicateTransactionSetControlNumber }).(pulumi.BoolOutput)
}

// The validity period of interchange control number.
func (o EdifactValidationSettingsOutput) InterchangeControlNumberValidityDays() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactValidationSettings) int { return v.InterchangeControlNumberValidityDays }).(pulumi.IntOutput)
}

// The trailing separator policy.
func (o EdifactValidationSettingsOutput) TrailingSeparatorPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactValidationSettings) string { return v.TrailingSeparatorPolicy }).(pulumi.StringOutput)
}

// The value indicating whether to trim leading and trailing spaces and zeroes.
func (o EdifactValidationSettingsOutput) TrimLeadingAndTrailingSpacesAndZeroes() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationSettings) bool { return v.TrimLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolOutput)
}

// The value indicating whether to validate character set in the message.
func (o EdifactValidationSettingsOutput) ValidateCharacterSet() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationSettings) bool { return v.ValidateCharacterSet }).(pulumi.BoolOutput)
}

// The value indicating whether to Whether to validate EDI types.
func (o EdifactValidationSettingsOutput) ValidateEDITypes() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationSettings) bool { return v.ValidateEDITypes }).(pulumi.BoolOutput)
}

// The value indicating whether to Whether to validate XSD types.
func (o EdifactValidationSettingsOutput) ValidateXSDTypes() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationSettings) bool { return v.ValidateXSDTypes }).(pulumi.BoolOutput)
}

type EdifactValidationSettingsPtrOutput struct{ *pulumi.OutputState }

func (EdifactValidationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactValidationSettings)(nil)).Elem()
}

func (o EdifactValidationSettingsPtrOutput) ToEdifactValidationSettingsPtrOutput() EdifactValidationSettingsPtrOutput {
	return o
}

func (o EdifactValidationSettingsPtrOutput) ToEdifactValidationSettingsPtrOutputWithContext(ctx context.Context) EdifactValidationSettingsPtrOutput {
	return o
}

func (o EdifactValidationSettingsPtrOutput) Elem() EdifactValidationSettingsOutput {
	return o.ApplyT(func(v *EdifactValidationSettings) EdifactValidationSettings { return *v }).(EdifactValidationSettingsOutput)
}

// The value indicating whether to allow leading and trailing spaces and zeroes.
func (o EdifactValidationSettingsPtrOutput) AllowLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowLeadingAndTrailingSpacesAndZeroes
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate group control number.
func (o EdifactValidationSettingsPtrOutput) CheckDuplicateGroupControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.CheckDuplicateGroupControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate interchange control number.
func (o EdifactValidationSettingsPtrOutput) CheckDuplicateInterchangeControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.CheckDuplicateInterchangeControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate transaction set control number.
func (o EdifactValidationSettingsPtrOutput) CheckDuplicateTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.CheckDuplicateTransactionSetControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The validity period of interchange control number.
func (o EdifactValidationSettingsPtrOutput) InterchangeControlNumberValidityDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettings) *int {
		if v == nil {
			return nil
		}
		return &v.InterchangeControlNumberValidityDays
	}).(pulumi.IntPtrOutput)
}

// The trailing separator policy.
func (o EdifactValidationSettingsPtrOutput) TrailingSeparatorPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettings) *string {
		if v == nil {
			return nil
		}
		return &v.TrailingSeparatorPolicy
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to trim leading and trailing spaces and zeroes.
func (o EdifactValidationSettingsPtrOutput) TrimLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.TrimLeadingAndTrailingSpacesAndZeroes
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to validate character set in the message.
func (o EdifactValidationSettingsPtrOutput) ValidateCharacterSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.ValidateCharacterSet
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to Whether to validate EDI types.
func (o EdifactValidationSettingsPtrOutput) ValidateEDITypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.ValidateEDITypes
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to Whether to validate XSD types.
func (o EdifactValidationSettingsPtrOutput) ValidateXSDTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.ValidateXSDTypes
	}).(pulumi.BoolPtrOutput)
}

// The Edifact agreement validation settings.
type EdifactValidationSettingsResponse struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes bool `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to check for duplicate group control number.
	CheckDuplicateGroupControlNumber bool `pulumi:"checkDuplicateGroupControlNumber"`
	// The value indicating whether to check for duplicate interchange control number.
	CheckDuplicateInterchangeControlNumber bool `pulumi:"checkDuplicateInterchangeControlNumber"`
	// The value indicating whether to check for duplicate transaction set control number.
	CheckDuplicateTransactionSetControlNumber bool `pulumi:"checkDuplicateTransactionSetControlNumber"`
	// The validity period of interchange control number.
	InterchangeControlNumberValidityDays int `pulumi:"interchangeControlNumberValidityDays"`
	// The trailing separator policy.
	TrailingSeparatorPolicy string `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes bool `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character set in the message.
	ValidateCharacterSet bool `pulumi:"validateCharacterSet"`
	// The value indicating whether to Whether to validate EDI types.
	ValidateEDITypes bool `pulumi:"validateEDITypes"`
	// The value indicating whether to Whether to validate XSD types.
	ValidateXSDTypes bool `pulumi:"validateXSDTypes"`
}

// EdifactValidationSettingsResponseInput is an input type that accepts EdifactValidationSettingsResponseArgs and EdifactValidationSettingsResponseOutput values.
// You can construct a concrete instance of `EdifactValidationSettingsResponseInput` via:
//
//          EdifactValidationSettingsResponseArgs{...}
type EdifactValidationSettingsResponseInput interface {
	pulumi.Input

	ToEdifactValidationSettingsResponseOutput() EdifactValidationSettingsResponseOutput
	ToEdifactValidationSettingsResponseOutputWithContext(context.Context) EdifactValidationSettingsResponseOutput
}

// The Edifact agreement validation settings.
type EdifactValidationSettingsResponseArgs struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes pulumi.BoolInput `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to check for duplicate group control number.
	CheckDuplicateGroupControlNumber pulumi.BoolInput `pulumi:"checkDuplicateGroupControlNumber"`
	// The value indicating whether to check for duplicate interchange control number.
	CheckDuplicateInterchangeControlNumber pulumi.BoolInput `pulumi:"checkDuplicateInterchangeControlNumber"`
	// The value indicating whether to check for duplicate transaction set control number.
	CheckDuplicateTransactionSetControlNumber pulumi.BoolInput `pulumi:"checkDuplicateTransactionSetControlNumber"`
	// The validity period of interchange control number.
	InterchangeControlNumberValidityDays pulumi.IntInput `pulumi:"interchangeControlNumberValidityDays"`
	// The trailing separator policy.
	TrailingSeparatorPolicy pulumi.StringInput `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes pulumi.BoolInput `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character set in the message.
	ValidateCharacterSet pulumi.BoolInput `pulumi:"validateCharacterSet"`
	// The value indicating whether to Whether to validate EDI types.
	ValidateEDITypes pulumi.BoolInput `pulumi:"validateEDITypes"`
	// The value indicating whether to Whether to validate XSD types.
	ValidateXSDTypes pulumi.BoolInput `pulumi:"validateXSDTypes"`
}

func (EdifactValidationSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactValidationSettingsResponse)(nil)).Elem()
}

func (i EdifactValidationSettingsResponseArgs) ToEdifactValidationSettingsResponseOutput() EdifactValidationSettingsResponseOutput {
	return i.ToEdifactValidationSettingsResponseOutputWithContext(context.Background())
}

func (i EdifactValidationSettingsResponseArgs) ToEdifactValidationSettingsResponseOutputWithContext(ctx context.Context) EdifactValidationSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactValidationSettingsResponseOutput)
}

func (i EdifactValidationSettingsResponseArgs) ToEdifactValidationSettingsResponsePtrOutput() EdifactValidationSettingsResponsePtrOutput {
	return i.ToEdifactValidationSettingsResponsePtrOutputWithContext(context.Background())
}

func (i EdifactValidationSettingsResponseArgs) ToEdifactValidationSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactValidationSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactValidationSettingsResponseOutput).ToEdifactValidationSettingsResponsePtrOutputWithContext(ctx)
}

// EdifactValidationSettingsResponsePtrInput is an input type that accepts EdifactValidationSettingsResponseArgs, EdifactValidationSettingsResponsePtr and EdifactValidationSettingsResponsePtrOutput values.
// You can construct a concrete instance of `EdifactValidationSettingsResponsePtrInput` via:
//
//          EdifactValidationSettingsResponseArgs{...}
//
//  or:
//
//          nil
type EdifactValidationSettingsResponsePtrInput interface {
	pulumi.Input

	ToEdifactValidationSettingsResponsePtrOutput() EdifactValidationSettingsResponsePtrOutput
	ToEdifactValidationSettingsResponsePtrOutputWithContext(context.Context) EdifactValidationSettingsResponsePtrOutput
}

type edifactValidationSettingsResponsePtrType EdifactValidationSettingsResponseArgs

func EdifactValidationSettingsResponsePtr(v *EdifactValidationSettingsResponseArgs) EdifactValidationSettingsResponsePtrInput {
	return (*edifactValidationSettingsResponsePtrType)(v)
}

func (*edifactValidationSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactValidationSettingsResponse)(nil)).Elem()
}

func (i *edifactValidationSettingsResponsePtrType) ToEdifactValidationSettingsResponsePtrOutput() EdifactValidationSettingsResponsePtrOutput {
	return i.ToEdifactValidationSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *edifactValidationSettingsResponsePtrType) ToEdifactValidationSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactValidationSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactValidationSettingsResponsePtrOutput)
}

// The Edifact agreement validation settings.
type EdifactValidationSettingsResponseOutput struct{ *pulumi.OutputState }

func (EdifactValidationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactValidationSettingsResponse)(nil)).Elem()
}

func (o EdifactValidationSettingsResponseOutput) ToEdifactValidationSettingsResponseOutput() EdifactValidationSettingsResponseOutput {
	return o
}

func (o EdifactValidationSettingsResponseOutput) ToEdifactValidationSettingsResponseOutputWithContext(ctx context.Context) EdifactValidationSettingsResponseOutput {
	return o
}

func (o EdifactValidationSettingsResponseOutput) ToEdifactValidationSettingsResponsePtrOutput() EdifactValidationSettingsResponsePtrOutput {
	return o.ToEdifactValidationSettingsResponsePtrOutputWithContext(context.Background())
}

func (o EdifactValidationSettingsResponseOutput) ToEdifactValidationSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactValidationSettingsResponsePtrOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) *EdifactValidationSettingsResponse {
		return &v
	}).(EdifactValidationSettingsResponsePtrOutput)
}

// The value indicating whether to allow leading and trailing spaces and zeroes.
func (o EdifactValidationSettingsResponseOutput) AllowLeadingAndTrailingSpacesAndZeroes() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) bool { return v.AllowLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolOutput)
}

// The value indicating whether to check for duplicate group control number.
func (o EdifactValidationSettingsResponseOutput) CheckDuplicateGroupControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) bool { return v.CheckDuplicateGroupControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to check for duplicate interchange control number.
func (o EdifactValidationSettingsResponseOutput) CheckDuplicateInterchangeControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) bool { return v.CheckDuplicateInterchangeControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to check for duplicate transaction set control number.
func (o EdifactValidationSettingsResponseOutput) CheckDuplicateTransactionSetControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) bool { return v.CheckDuplicateTransactionSetControlNumber }).(pulumi.BoolOutput)
}

// The validity period of interchange control number.
func (o EdifactValidationSettingsResponseOutput) InterchangeControlNumberValidityDays() pulumi.IntOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) int { return v.InterchangeControlNumberValidityDays }).(pulumi.IntOutput)
}

// The trailing separator policy.
func (o EdifactValidationSettingsResponseOutput) TrailingSeparatorPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) string { return v.TrailingSeparatorPolicy }).(pulumi.StringOutput)
}

// The value indicating whether to trim leading and trailing spaces and zeroes.
func (o EdifactValidationSettingsResponseOutput) TrimLeadingAndTrailingSpacesAndZeroes() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) bool { return v.TrimLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolOutput)
}

// The value indicating whether to validate character set in the message.
func (o EdifactValidationSettingsResponseOutput) ValidateCharacterSet() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) bool { return v.ValidateCharacterSet }).(pulumi.BoolOutput)
}

// The value indicating whether to Whether to validate EDI types.
func (o EdifactValidationSettingsResponseOutput) ValidateEDITypes() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) bool { return v.ValidateEDITypes }).(pulumi.BoolOutput)
}

// The value indicating whether to Whether to validate XSD types.
func (o EdifactValidationSettingsResponseOutput) ValidateXSDTypes() pulumi.BoolOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) bool { return v.ValidateXSDTypes }).(pulumi.BoolOutput)
}

type EdifactValidationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (EdifactValidationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactValidationSettingsResponse)(nil)).Elem()
}

func (o EdifactValidationSettingsResponsePtrOutput) ToEdifactValidationSettingsResponsePtrOutput() EdifactValidationSettingsResponsePtrOutput {
	return o
}

func (o EdifactValidationSettingsResponsePtrOutput) ToEdifactValidationSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactValidationSettingsResponsePtrOutput {
	return o
}

func (o EdifactValidationSettingsResponsePtrOutput) Elem() EdifactValidationSettingsResponseOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) EdifactValidationSettingsResponse { return *v }).(EdifactValidationSettingsResponseOutput)
}

// The value indicating whether to allow leading and trailing spaces and zeroes.
func (o EdifactValidationSettingsResponsePtrOutput) AllowLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowLeadingAndTrailingSpacesAndZeroes
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate group control number.
func (o EdifactValidationSettingsResponsePtrOutput) CheckDuplicateGroupControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CheckDuplicateGroupControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate interchange control number.
func (o EdifactValidationSettingsResponsePtrOutput) CheckDuplicateInterchangeControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CheckDuplicateInterchangeControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate transaction set control number.
func (o EdifactValidationSettingsResponsePtrOutput) CheckDuplicateTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CheckDuplicateTransactionSetControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The validity period of interchange control number.
func (o EdifactValidationSettingsResponsePtrOutput) InterchangeControlNumberValidityDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.InterchangeControlNumberValidityDays
	}).(pulumi.IntPtrOutput)
}

// The trailing separator policy.
func (o EdifactValidationSettingsResponsePtrOutput) TrailingSeparatorPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TrailingSeparatorPolicy
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to trim leading and trailing spaces and zeroes.
func (o EdifactValidationSettingsResponsePtrOutput) TrimLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.TrimLeadingAndTrailingSpacesAndZeroes
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to validate character set in the message.
func (o EdifactValidationSettingsResponsePtrOutput) ValidateCharacterSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ValidateCharacterSet
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to Whether to validate EDI types.
func (o EdifactValidationSettingsResponsePtrOutput) ValidateEDITypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ValidateEDITypes
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to Whether to validate XSD types.
func (o EdifactValidationSettingsResponsePtrOutput) ValidateXSDTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ValidateXSDTypes
	}).(pulumi.BoolPtrOutput)
}

type ExpressionResponse struct {
	// The azure resource error info.
	Error          *AzureResourceErrorInfoResponse `pulumi:"error"`
	Subexpressions []ExpressionResponse            `pulumi:"subexpressions"`
	Text           *string                         `pulumi:"text"`
	Value          interface{}                     `pulumi:"value"`
}

// ExpressionResponseInput is an input type that accepts ExpressionResponseArgs and ExpressionResponseOutput values.
// You can construct a concrete instance of `ExpressionResponseInput` via:
//
//          ExpressionResponseArgs{...}
type ExpressionResponseInput interface {
	pulumi.Input

	ToExpressionResponseOutput() ExpressionResponseOutput
	ToExpressionResponseOutputWithContext(context.Context) ExpressionResponseOutput
}

type ExpressionResponseArgs struct {
	// The azure resource error info.
	Error          AzureResourceErrorInfoResponsePtrInput `pulumi:"error"`
	Subexpressions ExpressionResponseArrayInput           `pulumi:"subexpressions"`
	Text           pulumi.StringPtrInput                  `pulumi:"text"`
	Value          pulumi.Input                           `pulumi:"value"`
}

func (ExpressionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpressionResponse)(nil)).Elem()
}

func (i ExpressionResponseArgs) ToExpressionResponseOutput() ExpressionResponseOutput {
	return i.ToExpressionResponseOutputWithContext(context.Background())
}

func (i ExpressionResponseArgs) ToExpressionResponseOutputWithContext(ctx context.Context) ExpressionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressionResponseOutput)
}

// ExpressionResponseArrayInput is an input type that accepts ExpressionResponseArray and ExpressionResponseArrayOutput values.
// You can construct a concrete instance of `ExpressionResponseArrayInput` via:
//
//          ExpressionResponseArray{ ExpressionResponseArgs{...} }
type ExpressionResponseArrayInput interface {
	pulumi.Input

	ToExpressionResponseArrayOutput() ExpressionResponseArrayOutput
	ToExpressionResponseArrayOutputWithContext(context.Context) ExpressionResponseArrayOutput
}

type ExpressionResponseArray []ExpressionResponseInput

func (ExpressionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExpressionResponse)(nil)).Elem()
}

func (i ExpressionResponseArray) ToExpressionResponseArrayOutput() ExpressionResponseArrayOutput {
	return i.ToExpressionResponseArrayOutputWithContext(context.Background())
}

func (i ExpressionResponseArray) ToExpressionResponseArrayOutputWithContext(ctx context.Context) ExpressionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressionResponseArrayOutput)
}

type ExpressionResponseOutput struct{ *pulumi.OutputState }

func (ExpressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpressionResponse)(nil)).Elem()
}

func (o ExpressionResponseOutput) ToExpressionResponseOutput() ExpressionResponseOutput {
	return o
}

func (o ExpressionResponseOutput) ToExpressionResponseOutputWithContext(ctx context.Context) ExpressionResponseOutput {
	return o
}

// The azure resource error info.
func (o ExpressionResponseOutput) Error() AzureResourceErrorInfoResponsePtrOutput {
	return o.ApplyT(func(v ExpressionResponse) *AzureResourceErrorInfoResponse { return v.Error }).(AzureResourceErrorInfoResponsePtrOutput)
}

func (o ExpressionResponseOutput) Subexpressions() ExpressionResponseArrayOutput {
	return o.ApplyT(func(v ExpressionResponse) []ExpressionResponse { return v.Subexpressions }).(ExpressionResponseArrayOutput)
}

func (o ExpressionResponseOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpressionResponse) *string { return v.Text }).(pulumi.StringPtrOutput)
}

func (o ExpressionResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v ExpressionResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type ExpressionResponseArrayOutput struct{ *pulumi.OutputState }

func (ExpressionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExpressionResponse)(nil)).Elem()
}

func (o ExpressionResponseArrayOutput) ToExpressionResponseArrayOutput() ExpressionResponseArrayOutput {
	return o
}

func (o ExpressionResponseArrayOutput) ToExpressionResponseArrayOutputWithContext(ctx context.Context) ExpressionResponseArrayOutput {
	return o
}

func (o ExpressionResponseArrayOutput) Index(i pulumi.IntInput) ExpressionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExpressionResponse {
		return vs[0].([]ExpressionResponse)[vs[1].(int)]
	}).(ExpressionResponseOutput)
}

type ExpressionRootResponse struct {
	// The azure resource error info.
	Error *AzureResourceErrorInfoResponse `pulumi:"error"`
	// The path.
	Path           *string              `pulumi:"path"`
	Subexpressions []ExpressionResponse `pulumi:"subexpressions"`
	Text           *string              `pulumi:"text"`
	Value          interface{}          `pulumi:"value"`
}

// ExpressionRootResponseInput is an input type that accepts ExpressionRootResponseArgs and ExpressionRootResponseOutput values.
// You can construct a concrete instance of `ExpressionRootResponseInput` via:
//
//          ExpressionRootResponseArgs{...}
type ExpressionRootResponseInput interface {
	pulumi.Input

	ToExpressionRootResponseOutput() ExpressionRootResponseOutput
	ToExpressionRootResponseOutputWithContext(context.Context) ExpressionRootResponseOutput
}

type ExpressionRootResponseArgs struct {
	// The azure resource error info.
	Error AzureResourceErrorInfoResponsePtrInput `pulumi:"error"`
	// The path.
	Path           pulumi.StringPtrInput        `pulumi:"path"`
	Subexpressions ExpressionResponseArrayInput `pulumi:"subexpressions"`
	Text           pulumi.StringPtrInput        `pulumi:"text"`
	Value          pulumi.Input                 `pulumi:"value"`
}

func (ExpressionRootResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpressionRootResponse)(nil)).Elem()
}

func (i ExpressionRootResponseArgs) ToExpressionRootResponseOutput() ExpressionRootResponseOutput {
	return i.ToExpressionRootResponseOutputWithContext(context.Background())
}

func (i ExpressionRootResponseArgs) ToExpressionRootResponseOutputWithContext(ctx context.Context) ExpressionRootResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressionRootResponseOutput)
}

// ExpressionRootResponseArrayInput is an input type that accepts ExpressionRootResponseArray and ExpressionRootResponseArrayOutput values.
// You can construct a concrete instance of `ExpressionRootResponseArrayInput` via:
//
//          ExpressionRootResponseArray{ ExpressionRootResponseArgs{...} }
type ExpressionRootResponseArrayInput interface {
	pulumi.Input

	ToExpressionRootResponseArrayOutput() ExpressionRootResponseArrayOutput
	ToExpressionRootResponseArrayOutputWithContext(context.Context) ExpressionRootResponseArrayOutput
}

type ExpressionRootResponseArray []ExpressionRootResponseInput

func (ExpressionRootResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExpressionRootResponse)(nil)).Elem()
}

func (i ExpressionRootResponseArray) ToExpressionRootResponseArrayOutput() ExpressionRootResponseArrayOutput {
	return i.ToExpressionRootResponseArrayOutputWithContext(context.Background())
}

func (i ExpressionRootResponseArray) ToExpressionRootResponseArrayOutputWithContext(ctx context.Context) ExpressionRootResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressionRootResponseArrayOutput)
}

type ExpressionRootResponseOutput struct{ *pulumi.OutputState }

func (ExpressionRootResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpressionRootResponse)(nil)).Elem()
}

func (o ExpressionRootResponseOutput) ToExpressionRootResponseOutput() ExpressionRootResponseOutput {
	return o
}

func (o ExpressionRootResponseOutput) ToExpressionRootResponseOutputWithContext(ctx context.Context) ExpressionRootResponseOutput {
	return o
}

// The azure resource error info.
func (o ExpressionRootResponseOutput) Error() AzureResourceErrorInfoResponsePtrOutput {
	return o.ApplyT(func(v ExpressionRootResponse) *AzureResourceErrorInfoResponse { return v.Error }).(AzureResourceErrorInfoResponsePtrOutput)
}

// The path.
func (o ExpressionRootResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpressionRootResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o ExpressionRootResponseOutput) Subexpressions() ExpressionResponseArrayOutput {
	return o.ApplyT(func(v ExpressionRootResponse) []ExpressionResponse { return v.Subexpressions }).(ExpressionResponseArrayOutput)
}

func (o ExpressionRootResponseOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpressionRootResponse) *string { return v.Text }).(pulumi.StringPtrOutput)
}

func (o ExpressionRootResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v ExpressionRootResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type ExpressionRootResponseArrayOutput struct{ *pulumi.OutputState }

func (ExpressionRootResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExpressionRootResponse)(nil)).Elem()
}

func (o ExpressionRootResponseArrayOutput) ToExpressionRootResponseArrayOutput() ExpressionRootResponseArrayOutput {
	return o
}

func (o ExpressionRootResponseArrayOutput) ToExpressionRootResponseArrayOutputWithContext(ctx context.Context) ExpressionRootResponseArrayOutput {
	return o
}

func (o ExpressionRootResponseArrayOutput) Index(i pulumi.IntInput) ExpressionRootResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExpressionRootResponse {
		return vs[0].([]ExpressionRootResponse)[vs[1].(int)]
	}).(ExpressionRootResponseOutput)
}

// The parameters schema of integration account map.
type IntegrationAccountMapPropertiesParametersSchema struct {
	// The reference name.
	Ref *string `pulumi:"ref"`
}

// IntegrationAccountMapPropertiesParametersSchemaInput is an input type that accepts IntegrationAccountMapPropertiesParametersSchemaArgs and IntegrationAccountMapPropertiesParametersSchemaOutput values.
// You can construct a concrete instance of `IntegrationAccountMapPropertiesParametersSchemaInput` via:
//
//          IntegrationAccountMapPropertiesParametersSchemaArgs{...}
type IntegrationAccountMapPropertiesParametersSchemaInput interface {
	pulumi.Input

	ToIntegrationAccountMapPropertiesParametersSchemaOutput() IntegrationAccountMapPropertiesParametersSchemaOutput
	ToIntegrationAccountMapPropertiesParametersSchemaOutputWithContext(context.Context) IntegrationAccountMapPropertiesParametersSchemaOutput
}

// The parameters schema of integration account map.
type IntegrationAccountMapPropertiesParametersSchemaArgs struct {
	// The reference name.
	Ref pulumi.StringPtrInput `pulumi:"ref"`
}

func (IntegrationAccountMapPropertiesParametersSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationAccountMapPropertiesParametersSchema)(nil)).Elem()
}

func (i IntegrationAccountMapPropertiesParametersSchemaArgs) ToIntegrationAccountMapPropertiesParametersSchemaOutput() IntegrationAccountMapPropertiesParametersSchemaOutput {
	return i.ToIntegrationAccountMapPropertiesParametersSchemaOutputWithContext(context.Background())
}

func (i IntegrationAccountMapPropertiesParametersSchemaArgs) ToIntegrationAccountMapPropertiesParametersSchemaOutputWithContext(ctx context.Context) IntegrationAccountMapPropertiesParametersSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountMapPropertiesParametersSchemaOutput)
}

func (i IntegrationAccountMapPropertiesParametersSchemaArgs) ToIntegrationAccountMapPropertiesParametersSchemaPtrOutput() IntegrationAccountMapPropertiesParametersSchemaPtrOutput {
	return i.ToIntegrationAccountMapPropertiesParametersSchemaPtrOutputWithContext(context.Background())
}

func (i IntegrationAccountMapPropertiesParametersSchemaArgs) ToIntegrationAccountMapPropertiesParametersSchemaPtrOutputWithContext(ctx context.Context) IntegrationAccountMapPropertiesParametersSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountMapPropertiesParametersSchemaOutput).ToIntegrationAccountMapPropertiesParametersSchemaPtrOutputWithContext(ctx)
}

// IntegrationAccountMapPropertiesParametersSchemaPtrInput is an input type that accepts IntegrationAccountMapPropertiesParametersSchemaArgs, IntegrationAccountMapPropertiesParametersSchemaPtr and IntegrationAccountMapPropertiesParametersSchemaPtrOutput values.
// You can construct a concrete instance of `IntegrationAccountMapPropertiesParametersSchemaPtrInput` via:
//
//          IntegrationAccountMapPropertiesParametersSchemaArgs{...}
//
//  or:
//
//          nil
type IntegrationAccountMapPropertiesParametersSchemaPtrInput interface {
	pulumi.Input

	ToIntegrationAccountMapPropertiesParametersSchemaPtrOutput() IntegrationAccountMapPropertiesParametersSchemaPtrOutput
	ToIntegrationAccountMapPropertiesParametersSchemaPtrOutputWithContext(context.Context) IntegrationAccountMapPropertiesParametersSchemaPtrOutput
}

type integrationAccountMapPropertiesParametersSchemaPtrType IntegrationAccountMapPropertiesParametersSchemaArgs

func IntegrationAccountMapPropertiesParametersSchemaPtr(v *IntegrationAccountMapPropertiesParametersSchemaArgs) IntegrationAccountMapPropertiesParametersSchemaPtrInput {
	return (*integrationAccountMapPropertiesParametersSchemaPtrType)(v)
}

func (*integrationAccountMapPropertiesParametersSchemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountMapPropertiesParametersSchema)(nil)).Elem()
}

func (i *integrationAccountMapPropertiesParametersSchemaPtrType) ToIntegrationAccountMapPropertiesParametersSchemaPtrOutput() IntegrationAccountMapPropertiesParametersSchemaPtrOutput {
	return i.ToIntegrationAccountMapPropertiesParametersSchemaPtrOutputWithContext(context.Background())
}

func (i *integrationAccountMapPropertiesParametersSchemaPtrType) ToIntegrationAccountMapPropertiesParametersSchemaPtrOutputWithContext(ctx context.Context) IntegrationAccountMapPropertiesParametersSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountMapPropertiesParametersSchemaPtrOutput)
}

// The parameters schema of integration account map.
type IntegrationAccountMapPropertiesParametersSchemaOutput struct{ *pulumi.OutputState }

func (IntegrationAccountMapPropertiesParametersSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationAccountMapPropertiesParametersSchema)(nil)).Elem()
}

func (o IntegrationAccountMapPropertiesParametersSchemaOutput) ToIntegrationAccountMapPropertiesParametersSchemaOutput() IntegrationAccountMapPropertiesParametersSchemaOutput {
	return o
}

func (o IntegrationAccountMapPropertiesParametersSchemaOutput) ToIntegrationAccountMapPropertiesParametersSchemaOutputWithContext(ctx context.Context) IntegrationAccountMapPropertiesParametersSchemaOutput {
	return o
}

func (o IntegrationAccountMapPropertiesParametersSchemaOutput) ToIntegrationAccountMapPropertiesParametersSchemaPtrOutput() IntegrationAccountMapPropertiesParametersSchemaPtrOutput {
	return o.ToIntegrationAccountMapPropertiesParametersSchemaPtrOutputWithContext(context.Background())
}

func (o IntegrationAccountMapPropertiesParametersSchemaOutput) ToIntegrationAccountMapPropertiesParametersSchemaPtrOutputWithContext(ctx context.Context) IntegrationAccountMapPropertiesParametersSchemaPtrOutput {
	return o.ApplyT(func(v IntegrationAccountMapPropertiesParametersSchema) *IntegrationAccountMapPropertiesParametersSchema {
		return &v
	}).(IntegrationAccountMapPropertiesParametersSchemaPtrOutput)
}

// The reference name.
func (o IntegrationAccountMapPropertiesParametersSchemaOutput) Ref() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationAccountMapPropertiesParametersSchema) *string { return v.Ref }).(pulumi.StringPtrOutput)
}

type IntegrationAccountMapPropertiesParametersSchemaPtrOutput struct{ *pulumi.OutputState }

func (IntegrationAccountMapPropertiesParametersSchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountMapPropertiesParametersSchema)(nil)).Elem()
}

func (o IntegrationAccountMapPropertiesParametersSchemaPtrOutput) ToIntegrationAccountMapPropertiesParametersSchemaPtrOutput() IntegrationAccountMapPropertiesParametersSchemaPtrOutput {
	return o
}

func (o IntegrationAccountMapPropertiesParametersSchemaPtrOutput) ToIntegrationAccountMapPropertiesParametersSchemaPtrOutputWithContext(ctx context.Context) IntegrationAccountMapPropertiesParametersSchemaPtrOutput {
	return o
}

func (o IntegrationAccountMapPropertiesParametersSchemaPtrOutput) Elem() IntegrationAccountMapPropertiesParametersSchemaOutput {
	return o.ApplyT(func(v *IntegrationAccountMapPropertiesParametersSchema) IntegrationAccountMapPropertiesParametersSchema {
		return *v
	}).(IntegrationAccountMapPropertiesParametersSchemaOutput)
}

// The reference name.
func (o IntegrationAccountMapPropertiesParametersSchemaPtrOutput) Ref() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationAccountMapPropertiesParametersSchema) *string {
		if v == nil {
			return nil
		}
		return v.Ref
	}).(pulumi.StringPtrOutput)
}

// The parameters schema of integration account map.
type IntegrationAccountMapPropertiesResponseParametersSchema struct {
	// The reference name.
	Ref *string `pulumi:"ref"`
}

// IntegrationAccountMapPropertiesResponseParametersSchemaInput is an input type that accepts IntegrationAccountMapPropertiesResponseParametersSchemaArgs and IntegrationAccountMapPropertiesResponseParametersSchemaOutput values.
// You can construct a concrete instance of `IntegrationAccountMapPropertiesResponseParametersSchemaInput` via:
//
//          IntegrationAccountMapPropertiesResponseParametersSchemaArgs{...}
type IntegrationAccountMapPropertiesResponseParametersSchemaInput interface {
	pulumi.Input

	ToIntegrationAccountMapPropertiesResponseParametersSchemaOutput() IntegrationAccountMapPropertiesResponseParametersSchemaOutput
	ToIntegrationAccountMapPropertiesResponseParametersSchemaOutputWithContext(context.Context) IntegrationAccountMapPropertiesResponseParametersSchemaOutput
}

// The parameters schema of integration account map.
type IntegrationAccountMapPropertiesResponseParametersSchemaArgs struct {
	// The reference name.
	Ref pulumi.StringPtrInput `pulumi:"ref"`
}

func (IntegrationAccountMapPropertiesResponseParametersSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationAccountMapPropertiesResponseParametersSchema)(nil)).Elem()
}

func (i IntegrationAccountMapPropertiesResponseParametersSchemaArgs) ToIntegrationAccountMapPropertiesResponseParametersSchemaOutput() IntegrationAccountMapPropertiesResponseParametersSchemaOutput {
	return i.ToIntegrationAccountMapPropertiesResponseParametersSchemaOutputWithContext(context.Background())
}

func (i IntegrationAccountMapPropertiesResponseParametersSchemaArgs) ToIntegrationAccountMapPropertiesResponseParametersSchemaOutputWithContext(ctx context.Context) IntegrationAccountMapPropertiesResponseParametersSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountMapPropertiesResponseParametersSchemaOutput)
}

func (i IntegrationAccountMapPropertiesResponseParametersSchemaArgs) ToIntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput() IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput {
	return i.ToIntegrationAccountMapPropertiesResponseParametersSchemaPtrOutputWithContext(context.Background())
}

func (i IntegrationAccountMapPropertiesResponseParametersSchemaArgs) ToIntegrationAccountMapPropertiesResponseParametersSchemaPtrOutputWithContext(ctx context.Context) IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountMapPropertiesResponseParametersSchemaOutput).ToIntegrationAccountMapPropertiesResponseParametersSchemaPtrOutputWithContext(ctx)
}

// IntegrationAccountMapPropertiesResponseParametersSchemaPtrInput is an input type that accepts IntegrationAccountMapPropertiesResponseParametersSchemaArgs, IntegrationAccountMapPropertiesResponseParametersSchemaPtr and IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput values.
// You can construct a concrete instance of `IntegrationAccountMapPropertiesResponseParametersSchemaPtrInput` via:
//
//          IntegrationAccountMapPropertiesResponseParametersSchemaArgs{...}
//
//  or:
//
//          nil
type IntegrationAccountMapPropertiesResponseParametersSchemaPtrInput interface {
	pulumi.Input

	ToIntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput() IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput
	ToIntegrationAccountMapPropertiesResponseParametersSchemaPtrOutputWithContext(context.Context) IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput
}

type integrationAccountMapPropertiesResponseParametersSchemaPtrType IntegrationAccountMapPropertiesResponseParametersSchemaArgs

func IntegrationAccountMapPropertiesResponseParametersSchemaPtr(v *IntegrationAccountMapPropertiesResponseParametersSchemaArgs) IntegrationAccountMapPropertiesResponseParametersSchemaPtrInput {
	return (*integrationAccountMapPropertiesResponseParametersSchemaPtrType)(v)
}

func (*integrationAccountMapPropertiesResponseParametersSchemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountMapPropertiesResponseParametersSchema)(nil)).Elem()
}

func (i *integrationAccountMapPropertiesResponseParametersSchemaPtrType) ToIntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput() IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput {
	return i.ToIntegrationAccountMapPropertiesResponseParametersSchemaPtrOutputWithContext(context.Background())
}

func (i *integrationAccountMapPropertiesResponseParametersSchemaPtrType) ToIntegrationAccountMapPropertiesResponseParametersSchemaPtrOutputWithContext(ctx context.Context) IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput)
}

// The parameters schema of integration account map.
type IntegrationAccountMapPropertiesResponseParametersSchemaOutput struct{ *pulumi.OutputState }

func (IntegrationAccountMapPropertiesResponseParametersSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationAccountMapPropertiesResponseParametersSchema)(nil)).Elem()
}

func (o IntegrationAccountMapPropertiesResponseParametersSchemaOutput) ToIntegrationAccountMapPropertiesResponseParametersSchemaOutput() IntegrationAccountMapPropertiesResponseParametersSchemaOutput {
	return o
}

func (o IntegrationAccountMapPropertiesResponseParametersSchemaOutput) ToIntegrationAccountMapPropertiesResponseParametersSchemaOutputWithContext(ctx context.Context) IntegrationAccountMapPropertiesResponseParametersSchemaOutput {
	return o
}

func (o IntegrationAccountMapPropertiesResponseParametersSchemaOutput) ToIntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput() IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput {
	return o.ToIntegrationAccountMapPropertiesResponseParametersSchemaPtrOutputWithContext(context.Background())
}

func (o IntegrationAccountMapPropertiesResponseParametersSchemaOutput) ToIntegrationAccountMapPropertiesResponseParametersSchemaPtrOutputWithContext(ctx context.Context) IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput {
	return o.ApplyT(func(v IntegrationAccountMapPropertiesResponseParametersSchema) *IntegrationAccountMapPropertiesResponseParametersSchema {
		return &v
	}).(IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput)
}

// The reference name.
func (o IntegrationAccountMapPropertiesResponseParametersSchemaOutput) Ref() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationAccountMapPropertiesResponseParametersSchema) *string { return v.Ref }).(pulumi.StringPtrOutput)
}

type IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput struct{ *pulumi.OutputState }

func (IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountMapPropertiesResponseParametersSchema)(nil)).Elem()
}

func (o IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput) ToIntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput() IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput {
	return o
}

func (o IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput) ToIntegrationAccountMapPropertiesResponseParametersSchemaPtrOutputWithContext(ctx context.Context) IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput {
	return o
}

func (o IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput) Elem() IntegrationAccountMapPropertiesResponseParametersSchemaOutput {
	return o.ApplyT(func(v *IntegrationAccountMapPropertiesResponseParametersSchema) IntegrationAccountMapPropertiesResponseParametersSchema {
		return *v
	}).(IntegrationAccountMapPropertiesResponseParametersSchemaOutput)
}

// The reference name.
func (o IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput) Ref() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationAccountMapPropertiesResponseParametersSchema) *string {
		if v == nil {
			return nil
		}
		return v.Ref
	}).(pulumi.StringPtrOutput)
}

// The integration account sku.
type IntegrationAccountSku struct {
	// The sku name.
	Name string `pulumi:"name"`
}

// IntegrationAccountSkuInput is an input type that accepts IntegrationAccountSkuArgs and IntegrationAccountSkuOutput values.
// You can construct a concrete instance of `IntegrationAccountSkuInput` via:
//
//          IntegrationAccountSkuArgs{...}
type IntegrationAccountSkuInput interface {
	pulumi.Input

	ToIntegrationAccountSkuOutput() IntegrationAccountSkuOutput
	ToIntegrationAccountSkuOutputWithContext(context.Context) IntegrationAccountSkuOutput
}

// The integration account sku.
type IntegrationAccountSkuArgs struct {
	// The sku name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (IntegrationAccountSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationAccountSku)(nil)).Elem()
}

func (i IntegrationAccountSkuArgs) ToIntegrationAccountSkuOutput() IntegrationAccountSkuOutput {
	return i.ToIntegrationAccountSkuOutputWithContext(context.Background())
}

func (i IntegrationAccountSkuArgs) ToIntegrationAccountSkuOutputWithContext(ctx context.Context) IntegrationAccountSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountSkuOutput)
}

func (i IntegrationAccountSkuArgs) ToIntegrationAccountSkuPtrOutput() IntegrationAccountSkuPtrOutput {
	return i.ToIntegrationAccountSkuPtrOutputWithContext(context.Background())
}

func (i IntegrationAccountSkuArgs) ToIntegrationAccountSkuPtrOutputWithContext(ctx context.Context) IntegrationAccountSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountSkuOutput).ToIntegrationAccountSkuPtrOutputWithContext(ctx)
}

// IntegrationAccountSkuPtrInput is an input type that accepts IntegrationAccountSkuArgs, IntegrationAccountSkuPtr and IntegrationAccountSkuPtrOutput values.
// You can construct a concrete instance of `IntegrationAccountSkuPtrInput` via:
//
//          IntegrationAccountSkuArgs{...}
//
//  or:
//
//          nil
type IntegrationAccountSkuPtrInput interface {
	pulumi.Input

	ToIntegrationAccountSkuPtrOutput() IntegrationAccountSkuPtrOutput
	ToIntegrationAccountSkuPtrOutputWithContext(context.Context) IntegrationAccountSkuPtrOutput
}

type integrationAccountSkuPtrType IntegrationAccountSkuArgs

func IntegrationAccountSkuPtr(v *IntegrationAccountSkuArgs) IntegrationAccountSkuPtrInput {
	return (*integrationAccountSkuPtrType)(v)
}

func (*integrationAccountSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountSku)(nil)).Elem()
}

func (i *integrationAccountSkuPtrType) ToIntegrationAccountSkuPtrOutput() IntegrationAccountSkuPtrOutput {
	return i.ToIntegrationAccountSkuPtrOutputWithContext(context.Background())
}

func (i *integrationAccountSkuPtrType) ToIntegrationAccountSkuPtrOutputWithContext(ctx context.Context) IntegrationAccountSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountSkuPtrOutput)
}

// The integration account sku.
type IntegrationAccountSkuOutput struct{ *pulumi.OutputState }

func (IntegrationAccountSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationAccountSku)(nil)).Elem()
}

func (o IntegrationAccountSkuOutput) ToIntegrationAccountSkuOutput() IntegrationAccountSkuOutput {
	return o
}

func (o IntegrationAccountSkuOutput) ToIntegrationAccountSkuOutputWithContext(ctx context.Context) IntegrationAccountSkuOutput {
	return o
}

func (o IntegrationAccountSkuOutput) ToIntegrationAccountSkuPtrOutput() IntegrationAccountSkuPtrOutput {
	return o.ToIntegrationAccountSkuPtrOutputWithContext(context.Background())
}

func (o IntegrationAccountSkuOutput) ToIntegrationAccountSkuPtrOutputWithContext(ctx context.Context) IntegrationAccountSkuPtrOutput {
	return o.ApplyT(func(v IntegrationAccountSku) *IntegrationAccountSku {
		return &v
	}).(IntegrationAccountSkuPtrOutput)
}

// The sku name.
func (o IntegrationAccountSkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationAccountSku) string { return v.Name }).(pulumi.StringOutput)
}

type IntegrationAccountSkuPtrOutput struct{ *pulumi.OutputState }

func (IntegrationAccountSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountSku)(nil)).Elem()
}

func (o IntegrationAccountSkuPtrOutput) ToIntegrationAccountSkuPtrOutput() IntegrationAccountSkuPtrOutput {
	return o
}

func (o IntegrationAccountSkuPtrOutput) ToIntegrationAccountSkuPtrOutputWithContext(ctx context.Context) IntegrationAccountSkuPtrOutput {
	return o
}

func (o IntegrationAccountSkuPtrOutput) Elem() IntegrationAccountSkuOutput {
	return o.ApplyT(func(v *IntegrationAccountSku) IntegrationAccountSku { return *v }).(IntegrationAccountSkuOutput)
}

// The sku name.
func (o IntegrationAccountSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationAccountSku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The integration account sku.
type IntegrationAccountSkuResponse struct {
	// The sku name.
	Name string `pulumi:"name"`
}

// IntegrationAccountSkuResponseInput is an input type that accepts IntegrationAccountSkuResponseArgs and IntegrationAccountSkuResponseOutput values.
// You can construct a concrete instance of `IntegrationAccountSkuResponseInput` via:
//
//          IntegrationAccountSkuResponseArgs{...}
type IntegrationAccountSkuResponseInput interface {
	pulumi.Input

	ToIntegrationAccountSkuResponseOutput() IntegrationAccountSkuResponseOutput
	ToIntegrationAccountSkuResponseOutputWithContext(context.Context) IntegrationAccountSkuResponseOutput
}

// The integration account sku.
type IntegrationAccountSkuResponseArgs struct {
	// The sku name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (IntegrationAccountSkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationAccountSkuResponse)(nil)).Elem()
}

func (i IntegrationAccountSkuResponseArgs) ToIntegrationAccountSkuResponseOutput() IntegrationAccountSkuResponseOutput {
	return i.ToIntegrationAccountSkuResponseOutputWithContext(context.Background())
}

func (i IntegrationAccountSkuResponseArgs) ToIntegrationAccountSkuResponseOutputWithContext(ctx context.Context) IntegrationAccountSkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountSkuResponseOutput)
}

func (i IntegrationAccountSkuResponseArgs) ToIntegrationAccountSkuResponsePtrOutput() IntegrationAccountSkuResponsePtrOutput {
	return i.ToIntegrationAccountSkuResponsePtrOutputWithContext(context.Background())
}

func (i IntegrationAccountSkuResponseArgs) ToIntegrationAccountSkuResponsePtrOutputWithContext(ctx context.Context) IntegrationAccountSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountSkuResponseOutput).ToIntegrationAccountSkuResponsePtrOutputWithContext(ctx)
}

// IntegrationAccountSkuResponsePtrInput is an input type that accepts IntegrationAccountSkuResponseArgs, IntegrationAccountSkuResponsePtr and IntegrationAccountSkuResponsePtrOutput values.
// You can construct a concrete instance of `IntegrationAccountSkuResponsePtrInput` via:
//
//          IntegrationAccountSkuResponseArgs{...}
//
//  or:
//
//          nil
type IntegrationAccountSkuResponsePtrInput interface {
	pulumi.Input

	ToIntegrationAccountSkuResponsePtrOutput() IntegrationAccountSkuResponsePtrOutput
	ToIntegrationAccountSkuResponsePtrOutputWithContext(context.Context) IntegrationAccountSkuResponsePtrOutput
}

type integrationAccountSkuResponsePtrType IntegrationAccountSkuResponseArgs

func IntegrationAccountSkuResponsePtr(v *IntegrationAccountSkuResponseArgs) IntegrationAccountSkuResponsePtrInput {
	return (*integrationAccountSkuResponsePtrType)(v)
}

func (*integrationAccountSkuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountSkuResponse)(nil)).Elem()
}

func (i *integrationAccountSkuResponsePtrType) ToIntegrationAccountSkuResponsePtrOutput() IntegrationAccountSkuResponsePtrOutput {
	return i.ToIntegrationAccountSkuResponsePtrOutputWithContext(context.Background())
}

func (i *integrationAccountSkuResponsePtrType) ToIntegrationAccountSkuResponsePtrOutputWithContext(ctx context.Context) IntegrationAccountSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountSkuResponsePtrOutput)
}

// The integration account sku.
type IntegrationAccountSkuResponseOutput struct{ *pulumi.OutputState }

func (IntegrationAccountSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationAccountSkuResponse)(nil)).Elem()
}

func (o IntegrationAccountSkuResponseOutput) ToIntegrationAccountSkuResponseOutput() IntegrationAccountSkuResponseOutput {
	return o
}

func (o IntegrationAccountSkuResponseOutput) ToIntegrationAccountSkuResponseOutputWithContext(ctx context.Context) IntegrationAccountSkuResponseOutput {
	return o
}

func (o IntegrationAccountSkuResponseOutput) ToIntegrationAccountSkuResponsePtrOutput() IntegrationAccountSkuResponsePtrOutput {
	return o.ToIntegrationAccountSkuResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationAccountSkuResponseOutput) ToIntegrationAccountSkuResponsePtrOutputWithContext(ctx context.Context) IntegrationAccountSkuResponsePtrOutput {
	return o.ApplyT(func(v IntegrationAccountSkuResponse) *IntegrationAccountSkuResponse {
		return &v
	}).(IntegrationAccountSkuResponsePtrOutput)
}

// The sku name.
func (o IntegrationAccountSkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationAccountSkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

type IntegrationAccountSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationAccountSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountSkuResponse)(nil)).Elem()
}

func (o IntegrationAccountSkuResponsePtrOutput) ToIntegrationAccountSkuResponsePtrOutput() IntegrationAccountSkuResponsePtrOutput {
	return o
}

func (o IntegrationAccountSkuResponsePtrOutput) ToIntegrationAccountSkuResponsePtrOutputWithContext(ctx context.Context) IntegrationAccountSkuResponsePtrOutput {
	return o
}

func (o IntegrationAccountSkuResponsePtrOutput) Elem() IntegrationAccountSkuResponseOutput {
	return o.ApplyT(func(v *IntegrationAccountSkuResponse) IntegrationAccountSkuResponse { return *v }).(IntegrationAccountSkuResponseOutput)
}

// The sku name.
func (o IntegrationAccountSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationAccountSkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The reference to the key vault key.
type KeyVaultKeyReference struct {
	// The private key name in key vault.
	KeyName string `pulumi:"keyName"`
	// The key vault reference.
	KeyVault KeyVaultKeyReferenceKeyVault `pulumi:"keyVault"`
	// The private key version in key vault.
	KeyVersion *string `pulumi:"keyVersion"`
}

// KeyVaultKeyReferenceInput is an input type that accepts KeyVaultKeyReferenceArgs and KeyVaultKeyReferenceOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceInput` via:
//
//          KeyVaultKeyReferenceArgs{...}
type KeyVaultKeyReferenceInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceOutput() KeyVaultKeyReferenceOutput
	ToKeyVaultKeyReferenceOutputWithContext(context.Context) KeyVaultKeyReferenceOutput
}

// The reference to the key vault key.
type KeyVaultKeyReferenceArgs struct {
	// The private key name in key vault.
	KeyName pulumi.StringInput `pulumi:"keyName"`
	// The key vault reference.
	KeyVault KeyVaultKeyReferenceKeyVaultInput `pulumi:"keyVault"`
	// The private key version in key vault.
	KeyVersion pulumi.StringPtrInput `pulumi:"keyVersion"`
}

func (KeyVaultKeyReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReference)(nil)).Elem()
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferenceOutput() KeyVaultKeyReferenceOutput {
	return i.ToKeyVaultKeyReferenceOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferenceOutputWithContext(ctx context.Context) KeyVaultKeyReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceOutput)
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return i.ToKeyVaultKeyReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceOutput).ToKeyVaultKeyReferencePtrOutputWithContext(ctx)
}

// KeyVaultKeyReferencePtrInput is an input type that accepts KeyVaultKeyReferenceArgs, KeyVaultKeyReferencePtr and KeyVaultKeyReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferencePtrInput` via:
//
//          KeyVaultKeyReferenceArgs{...}
//
//  or:
//
//          nil
type KeyVaultKeyReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput
	ToKeyVaultKeyReferencePtrOutputWithContext(context.Context) KeyVaultKeyReferencePtrOutput
}

type keyVaultKeyReferencePtrType KeyVaultKeyReferenceArgs

func KeyVaultKeyReferencePtr(v *KeyVaultKeyReferenceArgs) KeyVaultKeyReferencePtrInput {
	return (*keyVaultKeyReferencePtrType)(v)
}

func (*keyVaultKeyReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReference)(nil)).Elem()
}

func (i *keyVaultKeyReferencePtrType) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return i.ToKeyVaultKeyReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultKeyReferencePtrType) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferencePtrOutput)
}

// The reference to the key vault key.
type KeyVaultKeyReferenceOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReference)(nil)).Elem()
}

func (o KeyVaultKeyReferenceOutput) ToKeyVaultKeyReferenceOutput() KeyVaultKeyReferenceOutput {
	return o
}

func (o KeyVaultKeyReferenceOutput) ToKeyVaultKeyReferenceOutputWithContext(ctx context.Context) KeyVaultKeyReferenceOutput {
	return o
}

func (o KeyVaultKeyReferenceOutput) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return o.ToKeyVaultKeyReferencePtrOutputWithContext(context.Background())
}

func (o KeyVaultKeyReferenceOutput) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReference) *KeyVaultKeyReference {
		return &v
	}).(KeyVaultKeyReferencePtrOutput)
}

// The private key name in key vault.
func (o KeyVaultKeyReferenceOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultKeyReference) string { return v.KeyName }).(pulumi.StringOutput)
}

// The key vault reference.
func (o KeyVaultKeyReferenceOutput) KeyVault() KeyVaultKeyReferenceKeyVaultOutput {
	return o.ApplyT(func(v KeyVaultKeyReference) KeyVaultKeyReferenceKeyVault { return v.KeyVault }).(KeyVaultKeyReferenceKeyVaultOutput)
}

// The private key version in key vault.
func (o KeyVaultKeyReferenceOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReference) *string { return v.KeyVersion }).(pulumi.StringPtrOutput)
}

type KeyVaultKeyReferencePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReference)(nil)).Elem()
}

func (o KeyVaultKeyReferencePtrOutput) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return o
}

func (o KeyVaultKeyReferencePtrOutput) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return o
}

func (o KeyVaultKeyReferencePtrOutput) Elem() KeyVaultKeyReferenceOutput {
	return o.ApplyT(func(v *KeyVaultKeyReference) KeyVaultKeyReference { return *v }).(KeyVaultKeyReferenceOutput)
}

// The private key name in key vault.
func (o KeyVaultKeyReferencePtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReference) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// The key vault reference.
func (o KeyVaultKeyReferencePtrOutput) KeyVault() KeyVaultKeyReferenceKeyVaultPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReference) *KeyVaultKeyReferenceKeyVault {
		if v == nil {
			return nil
		}
		return &v.KeyVault
	}).(KeyVaultKeyReferenceKeyVaultPtrOutput)
}

// The private key version in key vault.
func (o KeyVaultKeyReferencePtrOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReference) *string {
		if v == nil {
			return nil
		}
		return v.KeyVersion
	}).(pulumi.StringPtrOutput)
}

// The key vault reference.
type KeyVaultKeyReferenceKeyVault struct {
	// The resource id.
	Id *string `pulumi:"id"`
}

// KeyVaultKeyReferenceKeyVaultInput is an input type that accepts KeyVaultKeyReferenceKeyVaultArgs and KeyVaultKeyReferenceKeyVaultOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceKeyVaultInput` via:
//
//          KeyVaultKeyReferenceKeyVaultArgs{...}
type KeyVaultKeyReferenceKeyVaultInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceKeyVaultOutput() KeyVaultKeyReferenceKeyVaultOutput
	ToKeyVaultKeyReferenceKeyVaultOutputWithContext(context.Context) KeyVaultKeyReferenceKeyVaultOutput
}

// The key vault reference.
type KeyVaultKeyReferenceKeyVaultArgs struct {
	// The resource id.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (KeyVaultKeyReferenceKeyVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceKeyVault)(nil)).Elem()
}

func (i KeyVaultKeyReferenceKeyVaultArgs) ToKeyVaultKeyReferenceKeyVaultOutput() KeyVaultKeyReferenceKeyVaultOutput {
	return i.ToKeyVaultKeyReferenceKeyVaultOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceKeyVaultArgs) ToKeyVaultKeyReferenceKeyVaultOutputWithContext(ctx context.Context) KeyVaultKeyReferenceKeyVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceKeyVaultOutput)
}

func (i KeyVaultKeyReferenceKeyVaultArgs) ToKeyVaultKeyReferenceKeyVaultPtrOutput() KeyVaultKeyReferenceKeyVaultPtrOutput {
	return i.ToKeyVaultKeyReferenceKeyVaultPtrOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceKeyVaultArgs) ToKeyVaultKeyReferenceKeyVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceKeyVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceKeyVaultOutput).ToKeyVaultKeyReferenceKeyVaultPtrOutputWithContext(ctx)
}

// KeyVaultKeyReferenceKeyVaultPtrInput is an input type that accepts KeyVaultKeyReferenceKeyVaultArgs, KeyVaultKeyReferenceKeyVaultPtr and KeyVaultKeyReferenceKeyVaultPtrOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceKeyVaultPtrInput` via:
//
//          KeyVaultKeyReferenceKeyVaultArgs{...}
//
//  or:
//
//          nil
type KeyVaultKeyReferenceKeyVaultPtrInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceKeyVaultPtrOutput() KeyVaultKeyReferenceKeyVaultPtrOutput
	ToKeyVaultKeyReferenceKeyVaultPtrOutputWithContext(context.Context) KeyVaultKeyReferenceKeyVaultPtrOutput
}

type keyVaultKeyReferenceKeyVaultPtrType KeyVaultKeyReferenceKeyVaultArgs

func KeyVaultKeyReferenceKeyVaultPtr(v *KeyVaultKeyReferenceKeyVaultArgs) KeyVaultKeyReferenceKeyVaultPtrInput {
	return (*keyVaultKeyReferenceKeyVaultPtrType)(v)
}

func (*keyVaultKeyReferenceKeyVaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceKeyVault)(nil)).Elem()
}

func (i *keyVaultKeyReferenceKeyVaultPtrType) ToKeyVaultKeyReferenceKeyVaultPtrOutput() KeyVaultKeyReferenceKeyVaultPtrOutput {
	return i.ToKeyVaultKeyReferenceKeyVaultPtrOutputWithContext(context.Background())
}

func (i *keyVaultKeyReferenceKeyVaultPtrType) ToKeyVaultKeyReferenceKeyVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceKeyVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceKeyVaultPtrOutput)
}

// The key vault reference.
type KeyVaultKeyReferenceKeyVaultOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceKeyVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceKeyVault)(nil)).Elem()
}

func (o KeyVaultKeyReferenceKeyVaultOutput) ToKeyVaultKeyReferenceKeyVaultOutput() KeyVaultKeyReferenceKeyVaultOutput {
	return o
}

func (o KeyVaultKeyReferenceKeyVaultOutput) ToKeyVaultKeyReferenceKeyVaultOutputWithContext(ctx context.Context) KeyVaultKeyReferenceKeyVaultOutput {
	return o
}

func (o KeyVaultKeyReferenceKeyVaultOutput) ToKeyVaultKeyReferenceKeyVaultPtrOutput() KeyVaultKeyReferenceKeyVaultPtrOutput {
	return o.ToKeyVaultKeyReferenceKeyVaultPtrOutputWithContext(context.Background())
}

func (o KeyVaultKeyReferenceKeyVaultOutput) ToKeyVaultKeyReferenceKeyVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceKeyVaultPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceKeyVault) *KeyVaultKeyReferenceKeyVault {
		return &v
	}).(KeyVaultKeyReferenceKeyVaultPtrOutput)
}

// The resource id.
func (o KeyVaultKeyReferenceKeyVaultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceKeyVault) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type KeyVaultKeyReferenceKeyVaultPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceKeyVaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceKeyVault)(nil)).Elem()
}

func (o KeyVaultKeyReferenceKeyVaultPtrOutput) ToKeyVaultKeyReferenceKeyVaultPtrOutput() KeyVaultKeyReferenceKeyVaultPtrOutput {
	return o
}

func (o KeyVaultKeyReferenceKeyVaultPtrOutput) ToKeyVaultKeyReferenceKeyVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceKeyVaultPtrOutput {
	return o
}

func (o KeyVaultKeyReferenceKeyVaultPtrOutput) Elem() KeyVaultKeyReferenceKeyVaultOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceKeyVault) KeyVaultKeyReferenceKeyVault { return *v }).(KeyVaultKeyReferenceKeyVaultOutput)
}

// The resource id.
func (o KeyVaultKeyReferenceKeyVaultPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceKeyVault) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The reference to the key vault key.
type KeyVaultKeyReferenceResponse struct {
	// The private key name in key vault.
	KeyName string `pulumi:"keyName"`
	// The key vault reference.
	KeyVault KeyVaultKeyReferenceResponseKeyVault `pulumi:"keyVault"`
	// The private key version in key vault.
	KeyVersion *string `pulumi:"keyVersion"`
}

// KeyVaultKeyReferenceResponseInput is an input type that accepts KeyVaultKeyReferenceResponseArgs and KeyVaultKeyReferenceResponseOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceResponseInput` via:
//
//          KeyVaultKeyReferenceResponseArgs{...}
type KeyVaultKeyReferenceResponseInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceResponseOutput() KeyVaultKeyReferenceResponseOutput
	ToKeyVaultKeyReferenceResponseOutputWithContext(context.Context) KeyVaultKeyReferenceResponseOutput
}

// The reference to the key vault key.
type KeyVaultKeyReferenceResponseArgs struct {
	// The private key name in key vault.
	KeyName pulumi.StringInput `pulumi:"keyName"`
	// The key vault reference.
	KeyVault KeyVaultKeyReferenceResponseKeyVaultInput `pulumi:"keyVault"`
	// The private key version in key vault.
	KeyVersion pulumi.StringPtrInput `pulumi:"keyVersion"`
}

func (KeyVaultKeyReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceResponse)(nil)).Elem()
}

func (i KeyVaultKeyReferenceResponseArgs) ToKeyVaultKeyReferenceResponseOutput() KeyVaultKeyReferenceResponseOutput {
	return i.ToKeyVaultKeyReferenceResponseOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceResponseArgs) ToKeyVaultKeyReferenceResponseOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceResponseOutput)
}

func (i KeyVaultKeyReferenceResponseArgs) ToKeyVaultKeyReferenceResponsePtrOutput() KeyVaultKeyReferenceResponsePtrOutput {
	return i.ToKeyVaultKeyReferenceResponsePtrOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceResponseArgs) ToKeyVaultKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceResponseOutput).ToKeyVaultKeyReferenceResponsePtrOutputWithContext(ctx)
}

// KeyVaultKeyReferenceResponsePtrInput is an input type that accepts KeyVaultKeyReferenceResponseArgs, KeyVaultKeyReferenceResponsePtr and KeyVaultKeyReferenceResponsePtrOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceResponsePtrInput` via:
//
//          KeyVaultKeyReferenceResponseArgs{...}
//
//  or:
//
//          nil
type KeyVaultKeyReferenceResponsePtrInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceResponsePtrOutput() KeyVaultKeyReferenceResponsePtrOutput
	ToKeyVaultKeyReferenceResponsePtrOutputWithContext(context.Context) KeyVaultKeyReferenceResponsePtrOutput
}

type keyVaultKeyReferenceResponsePtrType KeyVaultKeyReferenceResponseArgs

func KeyVaultKeyReferenceResponsePtr(v *KeyVaultKeyReferenceResponseArgs) KeyVaultKeyReferenceResponsePtrInput {
	return (*keyVaultKeyReferenceResponsePtrType)(v)
}

func (*keyVaultKeyReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceResponse)(nil)).Elem()
}

func (i *keyVaultKeyReferenceResponsePtrType) ToKeyVaultKeyReferenceResponsePtrOutput() KeyVaultKeyReferenceResponsePtrOutput {
	return i.ToKeyVaultKeyReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *keyVaultKeyReferenceResponsePtrType) ToKeyVaultKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceResponsePtrOutput)
}

// The reference to the key vault key.
type KeyVaultKeyReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponseOutput() KeyVaultKeyReferenceResponseOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponseOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponsePtrOutput() KeyVaultKeyReferenceResponsePtrOutput {
	return o.ToKeyVaultKeyReferenceResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponse) *KeyVaultKeyReferenceResponse {
		return &v
	}).(KeyVaultKeyReferenceResponsePtrOutput)
}

// The private key name in key vault.
func (o KeyVaultKeyReferenceResponseOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponse) string { return v.KeyName }).(pulumi.StringOutput)
}

// The key vault reference.
func (o KeyVaultKeyReferenceResponseOutput) KeyVault() KeyVaultKeyReferenceResponseKeyVaultOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponse) KeyVaultKeyReferenceResponseKeyVault { return v.KeyVault }).(KeyVaultKeyReferenceResponseKeyVaultOutput)
}

// The private key version in key vault.
func (o KeyVaultKeyReferenceResponseOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponse) *string { return v.KeyVersion }).(pulumi.StringPtrOutput)
}

type KeyVaultKeyReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponsePtrOutput) ToKeyVaultKeyReferenceResponsePtrOutput() KeyVaultKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponsePtrOutput) ToKeyVaultKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponsePtrOutput) Elem() KeyVaultKeyReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) KeyVaultKeyReferenceResponse { return *v }).(KeyVaultKeyReferenceResponseOutput)
}

// The private key name in key vault.
func (o KeyVaultKeyReferenceResponsePtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// The key vault reference.
func (o KeyVaultKeyReferenceResponsePtrOutput) KeyVault() KeyVaultKeyReferenceResponseKeyVaultPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) *KeyVaultKeyReferenceResponseKeyVault {
		if v == nil {
			return nil
		}
		return &v.KeyVault
	}).(KeyVaultKeyReferenceResponseKeyVaultPtrOutput)
}

// The private key version in key vault.
func (o KeyVaultKeyReferenceResponsePtrOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyVersion
	}).(pulumi.StringPtrOutput)
}

// The key vault reference.
type KeyVaultKeyReferenceResponseKeyVault struct {
	// The resource id.
	Id *string `pulumi:"id"`
	// The resource name.
	Name string `pulumi:"name"`
	// The resource type.
	Type string `pulumi:"type"`
}

// KeyVaultKeyReferenceResponseKeyVaultInput is an input type that accepts KeyVaultKeyReferenceResponseKeyVaultArgs and KeyVaultKeyReferenceResponseKeyVaultOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceResponseKeyVaultInput` via:
//
//          KeyVaultKeyReferenceResponseKeyVaultArgs{...}
type KeyVaultKeyReferenceResponseKeyVaultInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceResponseKeyVaultOutput() KeyVaultKeyReferenceResponseKeyVaultOutput
	ToKeyVaultKeyReferenceResponseKeyVaultOutputWithContext(context.Context) KeyVaultKeyReferenceResponseKeyVaultOutput
}

// The key vault reference.
type KeyVaultKeyReferenceResponseKeyVaultArgs struct {
	// The resource id.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// The resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (KeyVaultKeyReferenceResponseKeyVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceResponseKeyVault)(nil)).Elem()
}

func (i KeyVaultKeyReferenceResponseKeyVaultArgs) ToKeyVaultKeyReferenceResponseKeyVaultOutput() KeyVaultKeyReferenceResponseKeyVaultOutput {
	return i.ToKeyVaultKeyReferenceResponseKeyVaultOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceResponseKeyVaultArgs) ToKeyVaultKeyReferenceResponseKeyVaultOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseKeyVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceResponseKeyVaultOutput)
}

func (i KeyVaultKeyReferenceResponseKeyVaultArgs) ToKeyVaultKeyReferenceResponseKeyVaultPtrOutput() KeyVaultKeyReferenceResponseKeyVaultPtrOutput {
	return i.ToKeyVaultKeyReferenceResponseKeyVaultPtrOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceResponseKeyVaultArgs) ToKeyVaultKeyReferenceResponseKeyVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseKeyVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceResponseKeyVaultOutput).ToKeyVaultKeyReferenceResponseKeyVaultPtrOutputWithContext(ctx)
}

// KeyVaultKeyReferenceResponseKeyVaultPtrInput is an input type that accepts KeyVaultKeyReferenceResponseKeyVaultArgs, KeyVaultKeyReferenceResponseKeyVaultPtr and KeyVaultKeyReferenceResponseKeyVaultPtrOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceResponseKeyVaultPtrInput` via:
//
//          KeyVaultKeyReferenceResponseKeyVaultArgs{...}
//
//  or:
//
//          nil
type KeyVaultKeyReferenceResponseKeyVaultPtrInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceResponseKeyVaultPtrOutput() KeyVaultKeyReferenceResponseKeyVaultPtrOutput
	ToKeyVaultKeyReferenceResponseKeyVaultPtrOutputWithContext(context.Context) KeyVaultKeyReferenceResponseKeyVaultPtrOutput
}

type keyVaultKeyReferenceResponseKeyVaultPtrType KeyVaultKeyReferenceResponseKeyVaultArgs

func KeyVaultKeyReferenceResponseKeyVaultPtr(v *KeyVaultKeyReferenceResponseKeyVaultArgs) KeyVaultKeyReferenceResponseKeyVaultPtrInput {
	return (*keyVaultKeyReferenceResponseKeyVaultPtrType)(v)
}

func (*keyVaultKeyReferenceResponseKeyVaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceResponseKeyVault)(nil)).Elem()
}

func (i *keyVaultKeyReferenceResponseKeyVaultPtrType) ToKeyVaultKeyReferenceResponseKeyVaultPtrOutput() KeyVaultKeyReferenceResponseKeyVaultPtrOutput {
	return i.ToKeyVaultKeyReferenceResponseKeyVaultPtrOutputWithContext(context.Background())
}

func (i *keyVaultKeyReferenceResponseKeyVaultPtrType) ToKeyVaultKeyReferenceResponseKeyVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseKeyVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceResponseKeyVaultPtrOutput)
}

// The key vault reference.
type KeyVaultKeyReferenceResponseKeyVaultOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponseKeyVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceResponseKeyVault)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponseKeyVaultOutput) ToKeyVaultKeyReferenceResponseKeyVaultOutput() KeyVaultKeyReferenceResponseKeyVaultOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseKeyVaultOutput) ToKeyVaultKeyReferenceResponseKeyVaultOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseKeyVaultOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseKeyVaultOutput) ToKeyVaultKeyReferenceResponseKeyVaultPtrOutput() KeyVaultKeyReferenceResponseKeyVaultPtrOutput {
	return o.ToKeyVaultKeyReferenceResponseKeyVaultPtrOutputWithContext(context.Background())
}

func (o KeyVaultKeyReferenceResponseKeyVaultOutput) ToKeyVaultKeyReferenceResponseKeyVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseKeyVaultPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponseKeyVault) *KeyVaultKeyReferenceResponseKeyVault {
		return &v
	}).(KeyVaultKeyReferenceResponseKeyVaultPtrOutput)
}

// The resource id.
func (o KeyVaultKeyReferenceResponseKeyVaultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponseKeyVault) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The resource name.
func (o KeyVaultKeyReferenceResponseKeyVaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponseKeyVault) string { return v.Name }).(pulumi.StringOutput)
}

// The resource type.
func (o KeyVaultKeyReferenceResponseKeyVaultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponseKeyVault) string { return v.Type }).(pulumi.StringOutput)
}

type KeyVaultKeyReferenceResponseKeyVaultPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponseKeyVaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceResponseKeyVault)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponseKeyVaultPtrOutput) ToKeyVaultKeyReferenceResponseKeyVaultPtrOutput() KeyVaultKeyReferenceResponseKeyVaultPtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseKeyVaultPtrOutput) ToKeyVaultKeyReferenceResponseKeyVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseKeyVaultPtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseKeyVaultPtrOutput) Elem() KeyVaultKeyReferenceResponseKeyVaultOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponseKeyVault) KeyVaultKeyReferenceResponseKeyVault { return *v }).(KeyVaultKeyReferenceResponseKeyVaultOutput)
}

// The resource id.
func (o KeyVaultKeyReferenceResponseKeyVaultPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponseKeyVault) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The resource name.
func (o KeyVaultKeyReferenceResponseKeyVaultPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponseKeyVault) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The resource type.
func (o KeyVaultKeyReferenceResponseKeyVaultPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponseKeyVault) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The key vault key.
type KeyVaultKeyResponse struct {
	// The key attributes.
	Attributes *KeyVaultKeyResponseAttributes `pulumi:"attributes"`
	// The key id.
	Kid *string `pulumi:"kid"`
}

// KeyVaultKeyResponseInput is an input type that accepts KeyVaultKeyResponseArgs and KeyVaultKeyResponseOutput values.
// You can construct a concrete instance of `KeyVaultKeyResponseInput` via:
//
//          KeyVaultKeyResponseArgs{...}
type KeyVaultKeyResponseInput interface {
	pulumi.Input

	ToKeyVaultKeyResponseOutput() KeyVaultKeyResponseOutput
	ToKeyVaultKeyResponseOutputWithContext(context.Context) KeyVaultKeyResponseOutput
}

// The key vault key.
type KeyVaultKeyResponseArgs struct {
	// The key attributes.
	Attributes KeyVaultKeyResponseAttributesPtrInput `pulumi:"attributes"`
	// The key id.
	Kid pulumi.StringPtrInput `pulumi:"kid"`
}

func (KeyVaultKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyResponse)(nil)).Elem()
}

func (i KeyVaultKeyResponseArgs) ToKeyVaultKeyResponseOutput() KeyVaultKeyResponseOutput {
	return i.ToKeyVaultKeyResponseOutputWithContext(context.Background())
}

func (i KeyVaultKeyResponseArgs) ToKeyVaultKeyResponseOutputWithContext(ctx context.Context) KeyVaultKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyResponseOutput)
}

// KeyVaultKeyResponseArrayInput is an input type that accepts KeyVaultKeyResponseArray and KeyVaultKeyResponseArrayOutput values.
// You can construct a concrete instance of `KeyVaultKeyResponseArrayInput` via:
//
//          KeyVaultKeyResponseArray{ KeyVaultKeyResponseArgs{...} }
type KeyVaultKeyResponseArrayInput interface {
	pulumi.Input

	ToKeyVaultKeyResponseArrayOutput() KeyVaultKeyResponseArrayOutput
	ToKeyVaultKeyResponseArrayOutputWithContext(context.Context) KeyVaultKeyResponseArrayOutput
}

type KeyVaultKeyResponseArray []KeyVaultKeyResponseInput

func (KeyVaultKeyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyVaultKeyResponse)(nil)).Elem()
}

func (i KeyVaultKeyResponseArray) ToKeyVaultKeyResponseArrayOutput() KeyVaultKeyResponseArrayOutput {
	return i.ToKeyVaultKeyResponseArrayOutputWithContext(context.Background())
}

func (i KeyVaultKeyResponseArray) ToKeyVaultKeyResponseArrayOutputWithContext(ctx context.Context) KeyVaultKeyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyResponseArrayOutput)
}

// The key vault key.
type KeyVaultKeyResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyResponse)(nil)).Elem()
}

func (o KeyVaultKeyResponseOutput) ToKeyVaultKeyResponseOutput() KeyVaultKeyResponseOutput {
	return o
}

func (o KeyVaultKeyResponseOutput) ToKeyVaultKeyResponseOutputWithContext(ctx context.Context) KeyVaultKeyResponseOutput {
	return o
}

// The key attributes.
func (o KeyVaultKeyResponseOutput) Attributes() KeyVaultKeyResponseAttributesPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyResponse) *KeyVaultKeyResponseAttributes { return v.Attributes }).(KeyVaultKeyResponseAttributesPtrOutput)
}

// The key id.
func (o KeyVaultKeyResponseOutput) Kid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyResponse) *string { return v.Kid }).(pulumi.StringPtrOutput)
}

type KeyVaultKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyVaultKeyResponse)(nil)).Elem()
}

func (o KeyVaultKeyResponseArrayOutput) ToKeyVaultKeyResponseArrayOutput() KeyVaultKeyResponseArrayOutput {
	return o
}

func (o KeyVaultKeyResponseArrayOutput) ToKeyVaultKeyResponseArrayOutputWithContext(ctx context.Context) KeyVaultKeyResponseArrayOutput {
	return o
}

func (o KeyVaultKeyResponseArrayOutput) Index(i pulumi.IntInput) KeyVaultKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyVaultKeyResponse {
		return vs[0].([]KeyVaultKeyResponse)[vs[1].(int)]
	}).(KeyVaultKeyResponseOutput)
}

// The key attributes.
type KeyVaultKeyResponseAttributes struct {
	// When the key was created.
	Created *int `pulumi:"created"`
	// Whether the key is enabled or not.
	Enabled *bool `pulumi:"enabled"`
	// When the key was updated.
	Updated *int `pulumi:"updated"`
}

// KeyVaultKeyResponseAttributesInput is an input type that accepts KeyVaultKeyResponseAttributesArgs and KeyVaultKeyResponseAttributesOutput values.
// You can construct a concrete instance of `KeyVaultKeyResponseAttributesInput` via:
//
//          KeyVaultKeyResponseAttributesArgs{...}
type KeyVaultKeyResponseAttributesInput interface {
	pulumi.Input

	ToKeyVaultKeyResponseAttributesOutput() KeyVaultKeyResponseAttributesOutput
	ToKeyVaultKeyResponseAttributesOutputWithContext(context.Context) KeyVaultKeyResponseAttributesOutput
}

// The key attributes.
type KeyVaultKeyResponseAttributesArgs struct {
	// When the key was created.
	Created pulumi.IntPtrInput `pulumi:"created"`
	// Whether the key is enabled or not.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// When the key was updated.
	Updated pulumi.IntPtrInput `pulumi:"updated"`
}

func (KeyVaultKeyResponseAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyResponseAttributes)(nil)).Elem()
}

func (i KeyVaultKeyResponseAttributesArgs) ToKeyVaultKeyResponseAttributesOutput() KeyVaultKeyResponseAttributesOutput {
	return i.ToKeyVaultKeyResponseAttributesOutputWithContext(context.Background())
}

func (i KeyVaultKeyResponseAttributesArgs) ToKeyVaultKeyResponseAttributesOutputWithContext(ctx context.Context) KeyVaultKeyResponseAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyResponseAttributesOutput)
}

func (i KeyVaultKeyResponseAttributesArgs) ToKeyVaultKeyResponseAttributesPtrOutput() KeyVaultKeyResponseAttributesPtrOutput {
	return i.ToKeyVaultKeyResponseAttributesPtrOutputWithContext(context.Background())
}

func (i KeyVaultKeyResponseAttributesArgs) ToKeyVaultKeyResponseAttributesPtrOutputWithContext(ctx context.Context) KeyVaultKeyResponseAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyResponseAttributesOutput).ToKeyVaultKeyResponseAttributesPtrOutputWithContext(ctx)
}

// KeyVaultKeyResponseAttributesPtrInput is an input type that accepts KeyVaultKeyResponseAttributesArgs, KeyVaultKeyResponseAttributesPtr and KeyVaultKeyResponseAttributesPtrOutput values.
// You can construct a concrete instance of `KeyVaultKeyResponseAttributesPtrInput` via:
//
//          KeyVaultKeyResponseAttributesArgs{...}
//
//  or:
//
//          nil
type KeyVaultKeyResponseAttributesPtrInput interface {
	pulumi.Input

	ToKeyVaultKeyResponseAttributesPtrOutput() KeyVaultKeyResponseAttributesPtrOutput
	ToKeyVaultKeyResponseAttributesPtrOutputWithContext(context.Context) KeyVaultKeyResponseAttributesPtrOutput
}

type keyVaultKeyResponseAttributesPtrType KeyVaultKeyResponseAttributesArgs

func KeyVaultKeyResponseAttributesPtr(v *KeyVaultKeyResponseAttributesArgs) KeyVaultKeyResponseAttributesPtrInput {
	return (*keyVaultKeyResponseAttributesPtrType)(v)
}

func (*keyVaultKeyResponseAttributesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyResponseAttributes)(nil)).Elem()
}

func (i *keyVaultKeyResponseAttributesPtrType) ToKeyVaultKeyResponseAttributesPtrOutput() KeyVaultKeyResponseAttributesPtrOutput {
	return i.ToKeyVaultKeyResponseAttributesPtrOutputWithContext(context.Background())
}

func (i *keyVaultKeyResponseAttributesPtrType) ToKeyVaultKeyResponseAttributesPtrOutputWithContext(ctx context.Context) KeyVaultKeyResponseAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyResponseAttributesPtrOutput)
}

// The key attributes.
type KeyVaultKeyResponseAttributesOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyResponseAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyResponseAttributes)(nil)).Elem()
}

func (o KeyVaultKeyResponseAttributesOutput) ToKeyVaultKeyResponseAttributesOutput() KeyVaultKeyResponseAttributesOutput {
	return o
}

func (o KeyVaultKeyResponseAttributesOutput) ToKeyVaultKeyResponseAttributesOutputWithContext(ctx context.Context) KeyVaultKeyResponseAttributesOutput {
	return o
}

func (o KeyVaultKeyResponseAttributesOutput) ToKeyVaultKeyResponseAttributesPtrOutput() KeyVaultKeyResponseAttributesPtrOutput {
	return o.ToKeyVaultKeyResponseAttributesPtrOutputWithContext(context.Background())
}

func (o KeyVaultKeyResponseAttributesOutput) ToKeyVaultKeyResponseAttributesPtrOutputWithContext(ctx context.Context) KeyVaultKeyResponseAttributesPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyResponseAttributes) *KeyVaultKeyResponseAttributes {
		return &v
	}).(KeyVaultKeyResponseAttributesPtrOutput)
}

// When the key was created.
func (o KeyVaultKeyResponseAttributesOutput) Created() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyResponseAttributes) *int { return v.Created }).(pulumi.IntPtrOutput)
}

// Whether the key is enabled or not.
func (o KeyVaultKeyResponseAttributesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyResponseAttributes) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// When the key was updated.
func (o KeyVaultKeyResponseAttributesOutput) Updated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyResponseAttributes) *int { return v.Updated }).(pulumi.IntPtrOutput)
}

type KeyVaultKeyResponseAttributesPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyResponseAttributesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyResponseAttributes)(nil)).Elem()
}

func (o KeyVaultKeyResponseAttributesPtrOutput) ToKeyVaultKeyResponseAttributesPtrOutput() KeyVaultKeyResponseAttributesPtrOutput {
	return o
}

func (o KeyVaultKeyResponseAttributesPtrOutput) ToKeyVaultKeyResponseAttributesPtrOutputWithContext(ctx context.Context) KeyVaultKeyResponseAttributesPtrOutput {
	return o
}

func (o KeyVaultKeyResponseAttributesPtrOutput) Elem() KeyVaultKeyResponseAttributesOutput {
	return o.ApplyT(func(v *KeyVaultKeyResponseAttributes) KeyVaultKeyResponseAttributes { return *v }).(KeyVaultKeyResponseAttributesOutput)
}

// When the key was created.
func (o KeyVaultKeyResponseAttributesPtrOutput) Created() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyResponseAttributes) *int {
		if v == nil {
			return nil
		}
		return v.Created
	}).(pulumi.IntPtrOutput)
}

// Whether the key is enabled or not.
func (o KeyVaultKeyResponseAttributesPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyResponseAttributes) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// When the key was updated.
func (o KeyVaultKeyResponseAttributesPtrOutput) Updated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyResponseAttributes) *int {
		if v == nil {
			return nil
		}
		return v.Updated
	}).(pulumi.IntPtrOutput)
}

// The key vault reference.
type KeyVaultReference struct {
	// The resource id.
	Id *string `pulumi:"id"`
	// The key vault name.
	Name *string `pulumi:"name"`
}

// KeyVaultReferenceInput is an input type that accepts KeyVaultReferenceArgs and KeyVaultReferenceOutput values.
// You can construct a concrete instance of `KeyVaultReferenceInput` via:
//
//          KeyVaultReferenceArgs{...}
type KeyVaultReferenceInput interface {
	pulumi.Input

	ToKeyVaultReferenceOutput() KeyVaultReferenceOutput
	ToKeyVaultReferenceOutputWithContext(context.Context) KeyVaultReferenceOutput
}

// The key vault reference.
type KeyVaultReferenceArgs struct {
	// The resource id.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The key vault name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (KeyVaultReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultReference)(nil)).Elem()
}

func (i KeyVaultReferenceArgs) ToKeyVaultReferenceOutput() KeyVaultReferenceOutput {
	return i.ToKeyVaultReferenceOutputWithContext(context.Background())
}

func (i KeyVaultReferenceArgs) ToKeyVaultReferenceOutputWithContext(ctx context.Context) KeyVaultReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultReferenceOutput)
}

// The key vault reference.
type KeyVaultReferenceOutput struct{ *pulumi.OutputState }

func (KeyVaultReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultReference)(nil)).Elem()
}

func (o KeyVaultReferenceOutput) ToKeyVaultReferenceOutput() KeyVaultReferenceOutput {
	return o
}

func (o KeyVaultReferenceOutput) ToKeyVaultReferenceOutputWithContext(ctx context.Context) KeyVaultReferenceOutput {
	return o
}

// The resource id.
func (o KeyVaultReferenceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultReference) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The key vault name.
func (o KeyVaultReferenceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultReference) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The integration account partner content.
type PartnerContent struct {
	// The B2B partner content.
	B2b *B2BPartnerContent `pulumi:"b2b"`
}

// PartnerContentInput is an input type that accepts PartnerContentArgs and PartnerContentOutput values.
// You can construct a concrete instance of `PartnerContentInput` via:
//
//          PartnerContentArgs{...}
type PartnerContentInput interface {
	pulumi.Input

	ToPartnerContentOutput() PartnerContentOutput
	ToPartnerContentOutputWithContext(context.Context) PartnerContentOutput
}

// The integration account partner content.
type PartnerContentArgs struct {
	// The B2B partner content.
	B2b B2BPartnerContentPtrInput `pulumi:"b2b"`
}

func (PartnerContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerContent)(nil)).Elem()
}

func (i PartnerContentArgs) ToPartnerContentOutput() PartnerContentOutput {
	return i.ToPartnerContentOutputWithContext(context.Background())
}

func (i PartnerContentArgs) ToPartnerContentOutputWithContext(ctx context.Context) PartnerContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerContentOutput)
}

func (i PartnerContentArgs) ToPartnerContentPtrOutput() PartnerContentPtrOutput {
	return i.ToPartnerContentPtrOutputWithContext(context.Background())
}

func (i PartnerContentArgs) ToPartnerContentPtrOutputWithContext(ctx context.Context) PartnerContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerContentOutput).ToPartnerContentPtrOutputWithContext(ctx)
}

// PartnerContentPtrInput is an input type that accepts PartnerContentArgs, PartnerContentPtr and PartnerContentPtrOutput values.
// You can construct a concrete instance of `PartnerContentPtrInput` via:
//
//          PartnerContentArgs{...}
//
//  or:
//
//          nil
type PartnerContentPtrInput interface {
	pulumi.Input

	ToPartnerContentPtrOutput() PartnerContentPtrOutput
	ToPartnerContentPtrOutputWithContext(context.Context) PartnerContentPtrOutput
}

type partnerContentPtrType PartnerContentArgs

func PartnerContentPtr(v *PartnerContentArgs) PartnerContentPtrInput {
	return (*partnerContentPtrType)(v)
}

func (*partnerContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerContent)(nil)).Elem()
}

func (i *partnerContentPtrType) ToPartnerContentPtrOutput() PartnerContentPtrOutput {
	return i.ToPartnerContentPtrOutputWithContext(context.Background())
}

func (i *partnerContentPtrType) ToPartnerContentPtrOutputWithContext(ctx context.Context) PartnerContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerContentPtrOutput)
}

// The integration account partner content.
type PartnerContentOutput struct{ *pulumi.OutputState }

func (PartnerContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerContent)(nil)).Elem()
}

func (o PartnerContentOutput) ToPartnerContentOutput() PartnerContentOutput {
	return o
}

func (o PartnerContentOutput) ToPartnerContentOutputWithContext(ctx context.Context) PartnerContentOutput {
	return o
}

func (o PartnerContentOutput) ToPartnerContentPtrOutput() PartnerContentPtrOutput {
	return o.ToPartnerContentPtrOutputWithContext(context.Background())
}

func (o PartnerContentOutput) ToPartnerContentPtrOutputWithContext(ctx context.Context) PartnerContentPtrOutput {
	return o.ApplyT(func(v PartnerContent) *PartnerContent {
		return &v
	}).(PartnerContentPtrOutput)
}

// The B2B partner content.
func (o PartnerContentOutput) B2b() B2BPartnerContentPtrOutput {
	return o.ApplyT(func(v PartnerContent) *B2BPartnerContent { return v.B2b }).(B2BPartnerContentPtrOutput)
}

type PartnerContentPtrOutput struct{ *pulumi.OutputState }

func (PartnerContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerContent)(nil)).Elem()
}

func (o PartnerContentPtrOutput) ToPartnerContentPtrOutput() PartnerContentPtrOutput {
	return o
}

func (o PartnerContentPtrOutput) ToPartnerContentPtrOutputWithContext(ctx context.Context) PartnerContentPtrOutput {
	return o
}

func (o PartnerContentPtrOutput) Elem() PartnerContentOutput {
	return o.ApplyT(func(v *PartnerContent) PartnerContent { return *v }).(PartnerContentOutput)
}

// The B2B partner content.
func (o PartnerContentPtrOutput) B2b() B2BPartnerContentPtrOutput {
	return o.ApplyT(func(v *PartnerContent) *B2BPartnerContent {
		if v == nil {
			return nil
		}
		return v.B2b
	}).(B2BPartnerContentPtrOutput)
}

// The integration account partner content.
type PartnerContentResponse struct {
	// The B2B partner content.
	B2b *B2BPartnerContentResponse `pulumi:"b2b"`
}

// PartnerContentResponseInput is an input type that accepts PartnerContentResponseArgs and PartnerContentResponseOutput values.
// You can construct a concrete instance of `PartnerContentResponseInput` via:
//
//          PartnerContentResponseArgs{...}
type PartnerContentResponseInput interface {
	pulumi.Input

	ToPartnerContentResponseOutput() PartnerContentResponseOutput
	ToPartnerContentResponseOutputWithContext(context.Context) PartnerContentResponseOutput
}

// The integration account partner content.
type PartnerContentResponseArgs struct {
	// The B2B partner content.
	B2b B2BPartnerContentResponsePtrInput `pulumi:"b2b"`
}

func (PartnerContentResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerContentResponse)(nil)).Elem()
}

func (i PartnerContentResponseArgs) ToPartnerContentResponseOutput() PartnerContentResponseOutput {
	return i.ToPartnerContentResponseOutputWithContext(context.Background())
}

func (i PartnerContentResponseArgs) ToPartnerContentResponseOutputWithContext(ctx context.Context) PartnerContentResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerContentResponseOutput)
}

func (i PartnerContentResponseArgs) ToPartnerContentResponsePtrOutput() PartnerContentResponsePtrOutput {
	return i.ToPartnerContentResponsePtrOutputWithContext(context.Background())
}

func (i PartnerContentResponseArgs) ToPartnerContentResponsePtrOutputWithContext(ctx context.Context) PartnerContentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerContentResponseOutput).ToPartnerContentResponsePtrOutputWithContext(ctx)
}

// PartnerContentResponsePtrInput is an input type that accepts PartnerContentResponseArgs, PartnerContentResponsePtr and PartnerContentResponsePtrOutput values.
// You can construct a concrete instance of `PartnerContentResponsePtrInput` via:
//
//          PartnerContentResponseArgs{...}
//
//  or:
//
//          nil
type PartnerContentResponsePtrInput interface {
	pulumi.Input

	ToPartnerContentResponsePtrOutput() PartnerContentResponsePtrOutput
	ToPartnerContentResponsePtrOutputWithContext(context.Context) PartnerContentResponsePtrOutput
}

type partnerContentResponsePtrType PartnerContentResponseArgs

func PartnerContentResponsePtr(v *PartnerContentResponseArgs) PartnerContentResponsePtrInput {
	return (*partnerContentResponsePtrType)(v)
}

func (*partnerContentResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerContentResponse)(nil)).Elem()
}

func (i *partnerContentResponsePtrType) ToPartnerContentResponsePtrOutput() PartnerContentResponsePtrOutput {
	return i.ToPartnerContentResponsePtrOutputWithContext(context.Background())
}

func (i *partnerContentResponsePtrType) ToPartnerContentResponsePtrOutputWithContext(ctx context.Context) PartnerContentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerContentResponsePtrOutput)
}

// The integration account partner content.
type PartnerContentResponseOutput struct{ *pulumi.OutputState }

func (PartnerContentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerContentResponse)(nil)).Elem()
}

func (o PartnerContentResponseOutput) ToPartnerContentResponseOutput() PartnerContentResponseOutput {
	return o
}

func (o PartnerContentResponseOutput) ToPartnerContentResponseOutputWithContext(ctx context.Context) PartnerContentResponseOutput {
	return o
}

func (o PartnerContentResponseOutput) ToPartnerContentResponsePtrOutput() PartnerContentResponsePtrOutput {
	return o.ToPartnerContentResponsePtrOutputWithContext(context.Background())
}

func (o PartnerContentResponseOutput) ToPartnerContentResponsePtrOutputWithContext(ctx context.Context) PartnerContentResponsePtrOutput {
	return o.ApplyT(func(v PartnerContentResponse) *PartnerContentResponse {
		return &v
	}).(PartnerContentResponsePtrOutput)
}

// The B2B partner content.
func (o PartnerContentResponseOutput) B2b() B2BPartnerContentResponsePtrOutput {
	return o.ApplyT(func(v PartnerContentResponse) *B2BPartnerContentResponse { return v.B2b }).(B2BPartnerContentResponsePtrOutput)
}

type PartnerContentResponsePtrOutput struct{ *pulumi.OutputState }

func (PartnerContentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerContentResponse)(nil)).Elem()
}

func (o PartnerContentResponsePtrOutput) ToPartnerContentResponsePtrOutput() PartnerContentResponsePtrOutput {
	return o
}

func (o PartnerContentResponsePtrOutput) ToPartnerContentResponsePtrOutputWithContext(ctx context.Context) PartnerContentResponsePtrOutput {
	return o
}

func (o PartnerContentResponsePtrOutput) Elem() PartnerContentResponseOutput {
	return o.ApplyT(func(v *PartnerContentResponse) PartnerContentResponse { return *v }).(PartnerContentResponseOutput)
}

// The B2B partner content.
func (o PartnerContentResponsePtrOutput) B2b() B2BPartnerContentResponsePtrOutput {
	return o.ApplyT(func(v *PartnerContentResponse) *B2BPartnerContentResponse {
		if v == nil {
			return nil
		}
		return v.B2b
	}).(B2BPartnerContentResponsePtrOutput)
}

// The recurrence schedule.
type RecurrenceSchedule struct {
	// The hours.
	Hours []int `pulumi:"hours"`
	// The minutes.
	Minutes []int `pulumi:"minutes"`
	// The month days.
	MonthDays []int `pulumi:"monthDays"`
	// The monthly occurrences.
	MonthlyOccurrences []RecurrenceScheduleOccurrence `pulumi:"monthlyOccurrences"`
	// The days of the week.
	WeekDays []string `pulumi:"weekDays"`
}

// RecurrenceScheduleInput is an input type that accepts RecurrenceScheduleArgs and RecurrenceScheduleOutput values.
// You can construct a concrete instance of `RecurrenceScheduleInput` via:
//
//          RecurrenceScheduleArgs{...}
type RecurrenceScheduleInput interface {
	pulumi.Input

	ToRecurrenceScheduleOutput() RecurrenceScheduleOutput
	ToRecurrenceScheduleOutputWithContext(context.Context) RecurrenceScheduleOutput
}

// The recurrence schedule.
type RecurrenceScheduleArgs struct {
	// The hours.
	Hours pulumi.IntArrayInput `pulumi:"hours"`
	// The minutes.
	Minutes pulumi.IntArrayInput `pulumi:"minutes"`
	// The month days.
	MonthDays pulumi.IntArrayInput `pulumi:"monthDays"`
	// The monthly occurrences.
	MonthlyOccurrences RecurrenceScheduleOccurrenceArrayInput `pulumi:"monthlyOccurrences"`
	// The days of the week.
	WeekDays pulumi.StringArrayInput `pulumi:"weekDays"`
}

func (RecurrenceScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceSchedule)(nil)).Elem()
}

func (i RecurrenceScheduleArgs) ToRecurrenceScheduleOutput() RecurrenceScheduleOutput {
	return i.ToRecurrenceScheduleOutputWithContext(context.Background())
}

func (i RecurrenceScheduleArgs) ToRecurrenceScheduleOutputWithContext(ctx context.Context) RecurrenceScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleOutput)
}

func (i RecurrenceScheduleArgs) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return i.ToRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (i RecurrenceScheduleArgs) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleOutput).ToRecurrenceSchedulePtrOutputWithContext(ctx)
}

// RecurrenceSchedulePtrInput is an input type that accepts RecurrenceScheduleArgs, RecurrenceSchedulePtr and RecurrenceSchedulePtrOutput values.
// You can construct a concrete instance of `RecurrenceSchedulePtrInput` via:
//
//          RecurrenceScheduleArgs{...}
//
//  or:
//
//          nil
type RecurrenceSchedulePtrInput interface {
	pulumi.Input

	ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput
	ToRecurrenceSchedulePtrOutputWithContext(context.Context) RecurrenceSchedulePtrOutput
}

type recurrenceSchedulePtrType RecurrenceScheduleArgs

func RecurrenceSchedulePtr(v *RecurrenceScheduleArgs) RecurrenceSchedulePtrInput {
	return (*recurrenceSchedulePtrType)(v)
}

func (*recurrenceSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceSchedule)(nil)).Elem()
}

func (i *recurrenceSchedulePtrType) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return i.ToRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (i *recurrenceSchedulePtrType) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceSchedulePtrOutput)
}

// The recurrence schedule.
type RecurrenceScheduleOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceSchedule)(nil)).Elem()
}

func (o RecurrenceScheduleOutput) ToRecurrenceScheduleOutput() RecurrenceScheduleOutput {
	return o
}

func (o RecurrenceScheduleOutput) ToRecurrenceScheduleOutputWithContext(ctx context.Context) RecurrenceScheduleOutput {
	return o
}

func (o RecurrenceScheduleOutput) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return o.ToRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (o RecurrenceScheduleOutput) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return o.ApplyT(func(v RecurrenceSchedule) *RecurrenceSchedule {
		return &v
	}).(RecurrenceSchedulePtrOutput)
}

// The hours.
func (o RecurrenceScheduleOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []int { return v.Hours }).(pulumi.IntArrayOutput)
}

// The minutes.
func (o RecurrenceScheduleOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []int { return v.Minutes }).(pulumi.IntArrayOutput)
}

// The month days.
func (o RecurrenceScheduleOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []int { return v.MonthDays }).(pulumi.IntArrayOutput)
}

// The monthly occurrences.
func (o RecurrenceScheduleOutput) MonthlyOccurrences() RecurrenceScheduleOccurrenceArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []RecurrenceScheduleOccurrence { return v.MonthlyOccurrences }).(RecurrenceScheduleOccurrenceArrayOutput)
}

// The days of the week.
func (o RecurrenceScheduleOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []string { return v.WeekDays }).(pulumi.StringArrayOutput)
}

type RecurrenceSchedulePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceSchedule)(nil)).Elem()
}

func (o RecurrenceSchedulePtrOutput) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return o
}

func (o RecurrenceSchedulePtrOutput) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return o
}

func (o RecurrenceSchedulePtrOutput) Elem() RecurrenceScheduleOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) RecurrenceSchedule { return *v }).(RecurrenceScheduleOutput)
}

// The hours.
func (o RecurrenceSchedulePtrOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntArrayOutput)
}

// The minutes.
func (o RecurrenceSchedulePtrOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntArrayOutput)
}

// The month days.
func (o RecurrenceSchedulePtrOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []int {
		if v == nil {
			return nil
		}
		return v.MonthDays
	}).(pulumi.IntArrayOutput)
}

// The monthly occurrences.
func (o RecurrenceSchedulePtrOutput) MonthlyOccurrences() RecurrenceScheduleOccurrenceArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []RecurrenceScheduleOccurrence {
		if v == nil {
			return nil
		}
		return v.MonthlyOccurrences
	}).(RecurrenceScheduleOccurrenceArrayOutput)
}

// The days of the week.
func (o RecurrenceSchedulePtrOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []string {
		if v == nil {
			return nil
		}
		return v.WeekDays
	}).(pulumi.StringArrayOutput)
}

// The recurrence schedule occurrence.
type RecurrenceScheduleOccurrence struct {
	// The day of the week.
	Day *string `pulumi:"day"`
	// The occurrence.
	Occurrence *int `pulumi:"occurrence"`
}

// RecurrenceScheduleOccurrenceInput is an input type that accepts RecurrenceScheduleOccurrenceArgs and RecurrenceScheduleOccurrenceOutput values.
// You can construct a concrete instance of `RecurrenceScheduleOccurrenceInput` via:
//
//          RecurrenceScheduleOccurrenceArgs{...}
type RecurrenceScheduleOccurrenceInput interface {
	pulumi.Input

	ToRecurrenceScheduleOccurrenceOutput() RecurrenceScheduleOccurrenceOutput
	ToRecurrenceScheduleOccurrenceOutputWithContext(context.Context) RecurrenceScheduleOccurrenceOutput
}

// The recurrence schedule occurrence.
type RecurrenceScheduleOccurrenceArgs struct {
	// The day of the week.
	Day pulumi.StringPtrInput `pulumi:"day"`
	// The occurrence.
	Occurrence pulumi.IntPtrInput `pulumi:"occurrence"`
}

func (RecurrenceScheduleOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceScheduleOccurrence)(nil)).Elem()
}

func (i RecurrenceScheduleOccurrenceArgs) ToRecurrenceScheduleOccurrenceOutput() RecurrenceScheduleOccurrenceOutput {
	return i.ToRecurrenceScheduleOccurrenceOutputWithContext(context.Background())
}

func (i RecurrenceScheduleOccurrenceArgs) ToRecurrenceScheduleOccurrenceOutputWithContext(ctx context.Context) RecurrenceScheduleOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleOccurrenceOutput)
}

// RecurrenceScheduleOccurrenceArrayInput is an input type that accepts RecurrenceScheduleOccurrenceArray and RecurrenceScheduleOccurrenceArrayOutput values.
// You can construct a concrete instance of `RecurrenceScheduleOccurrenceArrayInput` via:
//
//          RecurrenceScheduleOccurrenceArray{ RecurrenceScheduleOccurrenceArgs{...} }
type RecurrenceScheduleOccurrenceArrayInput interface {
	pulumi.Input

	ToRecurrenceScheduleOccurrenceArrayOutput() RecurrenceScheduleOccurrenceArrayOutput
	ToRecurrenceScheduleOccurrenceArrayOutputWithContext(context.Context) RecurrenceScheduleOccurrenceArrayOutput
}

type RecurrenceScheduleOccurrenceArray []RecurrenceScheduleOccurrenceInput

func (RecurrenceScheduleOccurrenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecurrenceScheduleOccurrence)(nil)).Elem()
}

func (i RecurrenceScheduleOccurrenceArray) ToRecurrenceScheduleOccurrenceArrayOutput() RecurrenceScheduleOccurrenceArrayOutput {
	return i.ToRecurrenceScheduleOccurrenceArrayOutputWithContext(context.Background())
}

func (i RecurrenceScheduleOccurrenceArray) ToRecurrenceScheduleOccurrenceArrayOutputWithContext(ctx context.Context) RecurrenceScheduleOccurrenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleOccurrenceArrayOutput)
}

// The recurrence schedule occurrence.
type RecurrenceScheduleOccurrenceOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceScheduleOccurrence)(nil)).Elem()
}

func (o RecurrenceScheduleOccurrenceOutput) ToRecurrenceScheduleOccurrenceOutput() RecurrenceScheduleOccurrenceOutput {
	return o
}

func (o RecurrenceScheduleOccurrenceOutput) ToRecurrenceScheduleOccurrenceOutputWithContext(ctx context.Context) RecurrenceScheduleOccurrenceOutput {
	return o
}

// The day of the week.
func (o RecurrenceScheduleOccurrenceOutput) Day() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceScheduleOccurrence) *string { return v.Day }).(pulumi.StringPtrOutput)
}

// The occurrence.
func (o RecurrenceScheduleOccurrenceOutput) Occurrence() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecurrenceScheduleOccurrence) *int { return v.Occurrence }).(pulumi.IntPtrOutput)
}

type RecurrenceScheduleOccurrenceArrayOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleOccurrenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecurrenceScheduleOccurrence)(nil)).Elem()
}

func (o RecurrenceScheduleOccurrenceArrayOutput) ToRecurrenceScheduleOccurrenceArrayOutput() RecurrenceScheduleOccurrenceArrayOutput {
	return o
}

func (o RecurrenceScheduleOccurrenceArrayOutput) ToRecurrenceScheduleOccurrenceArrayOutputWithContext(ctx context.Context) RecurrenceScheduleOccurrenceArrayOutput {
	return o
}

func (o RecurrenceScheduleOccurrenceArrayOutput) Index(i pulumi.IntInput) RecurrenceScheduleOccurrenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecurrenceScheduleOccurrence {
		return vs[0].([]RecurrenceScheduleOccurrence)[vs[1].(int)]
	}).(RecurrenceScheduleOccurrenceOutput)
}

// The recurrence schedule occurrence.
type RecurrenceScheduleOccurrenceResponse struct {
	// The day of the week.
	Day *string `pulumi:"day"`
	// The occurrence.
	Occurrence *int `pulumi:"occurrence"`
}

// RecurrenceScheduleOccurrenceResponseInput is an input type that accepts RecurrenceScheduleOccurrenceResponseArgs and RecurrenceScheduleOccurrenceResponseOutput values.
// You can construct a concrete instance of `RecurrenceScheduleOccurrenceResponseInput` via:
//
//          RecurrenceScheduleOccurrenceResponseArgs{...}
type RecurrenceScheduleOccurrenceResponseInput interface {
	pulumi.Input

	ToRecurrenceScheduleOccurrenceResponseOutput() RecurrenceScheduleOccurrenceResponseOutput
	ToRecurrenceScheduleOccurrenceResponseOutputWithContext(context.Context) RecurrenceScheduleOccurrenceResponseOutput
}

// The recurrence schedule occurrence.
type RecurrenceScheduleOccurrenceResponseArgs struct {
	// The day of the week.
	Day pulumi.StringPtrInput `pulumi:"day"`
	// The occurrence.
	Occurrence pulumi.IntPtrInput `pulumi:"occurrence"`
}

func (RecurrenceScheduleOccurrenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceScheduleOccurrenceResponse)(nil)).Elem()
}

func (i RecurrenceScheduleOccurrenceResponseArgs) ToRecurrenceScheduleOccurrenceResponseOutput() RecurrenceScheduleOccurrenceResponseOutput {
	return i.ToRecurrenceScheduleOccurrenceResponseOutputWithContext(context.Background())
}

func (i RecurrenceScheduleOccurrenceResponseArgs) ToRecurrenceScheduleOccurrenceResponseOutputWithContext(ctx context.Context) RecurrenceScheduleOccurrenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleOccurrenceResponseOutput)
}

// RecurrenceScheduleOccurrenceResponseArrayInput is an input type that accepts RecurrenceScheduleOccurrenceResponseArray and RecurrenceScheduleOccurrenceResponseArrayOutput values.
// You can construct a concrete instance of `RecurrenceScheduleOccurrenceResponseArrayInput` via:
//
//          RecurrenceScheduleOccurrenceResponseArray{ RecurrenceScheduleOccurrenceResponseArgs{...} }
type RecurrenceScheduleOccurrenceResponseArrayInput interface {
	pulumi.Input

	ToRecurrenceScheduleOccurrenceResponseArrayOutput() RecurrenceScheduleOccurrenceResponseArrayOutput
	ToRecurrenceScheduleOccurrenceResponseArrayOutputWithContext(context.Context) RecurrenceScheduleOccurrenceResponseArrayOutput
}

type RecurrenceScheduleOccurrenceResponseArray []RecurrenceScheduleOccurrenceResponseInput

func (RecurrenceScheduleOccurrenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecurrenceScheduleOccurrenceResponse)(nil)).Elem()
}

func (i RecurrenceScheduleOccurrenceResponseArray) ToRecurrenceScheduleOccurrenceResponseArrayOutput() RecurrenceScheduleOccurrenceResponseArrayOutput {
	return i.ToRecurrenceScheduleOccurrenceResponseArrayOutputWithContext(context.Background())
}

func (i RecurrenceScheduleOccurrenceResponseArray) ToRecurrenceScheduleOccurrenceResponseArrayOutputWithContext(ctx context.Context) RecurrenceScheduleOccurrenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleOccurrenceResponseArrayOutput)
}

// The recurrence schedule occurrence.
type RecurrenceScheduleOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceScheduleOccurrenceResponse)(nil)).Elem()
}

func (o RecurrenceScheduleOccurrenceResponseOutput) ToRecurrenceScheduleOccurrenceResponseOutput() RecurrenceScheduleOccurrenceResponseOutput {
	return o
}

func (o RecurrenceScheduleOccurrenceResponseOutput) ToRecurrenceScheduleOccurrenceResponseOutputWithContext(ctx context.Context) RecurrenceScheduleOccurrenceResponseOutput {
	return o
}

// The day of the week.
func (o RecurrenceScheduleOccurrenceResponseOutput) Day() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceScheduleOccurrenceResponse) *string { return v.Day }).(pulumi.StringPtrOutput)
}

// The occurrence.
func (o RecurrenceScheduleOccurrenceResponseOutput) Occurrence() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecurrenceScheduleOccurrenceResponse) *int { return v.Occurrence }).(pulumi.IntPtrOutput)
}

type RecurrenceScheduleOccurrenceResponseArrayOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleOccurrenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecurrenceScheduleOccurrenceResponse)(nil)).Elem()
}

func (o RecurrenceScheduleOccurrenceResponseArrayOutput) ToRecurrenceScheduleOccurrenceResponseArrayOutput() RecurrenceScheduleOccurrenceResponseArrayOutput {
	return o
}

func (o RecurrenceScheduleOccurrenceResponseArrayOutput) ToRecurrenceScheduleOccurrenceResponseArrayOutputWithContext(ctx context.Context) RecurrenceScheduleOccurrenceResponseArrayOutput {
	return o
}

func (o RecurrenceScheduleOccurrenceResponseArrayOutput) Index(i pulumi.IntInput) RecurrenceScheduleOccurrenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecurrenceScheduleOccurrenceResponse {
		return vs[0].([]RecurrenceScheduleOccurrenceResponse)[vs[1].(int)]
	}).(RecurrenceScheduleOccurrenceResponseOutput)
}

// The recurrence schedule.
type RecurrenceScheduleResponse struct {
	// The hours.
	Hours []int `pulumi:"hours"`
	// The minutes.
	Minutes []int `pulumi:"minutes"`
	// The month days.
	MonthDays []int `pulumi:"monthDays"`
	// The monthly occurrences.
	MonthlyOccurrences []RecurrenceScheduleOccurrenceResponse `pulumi:"monthlyOccurrences"`
	// The days of the week.
	WeekDays []string `pulumi:"weekDays"`
}

// RecurrenceScheduleResponseInput is an input type that accepts RecurrenceScheduleResponseArgs and RecurrenceScheduleResponseOutput values.
// You can construct a concrete instance of `RecurrenceScheduleResponseInput` via:
//
//          RecurrenceScheduleResponseArgs{...}
type RecurrenceScheduleResponseInput interface {
	pulumi.Input

	ToRecurrenceScheduleResponseOutput() RecurrenceScheduleResponseOutput
	ToRecurrenceScheduleResponseOutputWithContext(context.Context) RecurrenceScheduleResponseOutput
}

// The recurrence schedule.
type RecurrenceScheduleResponseArgs struct {
	// The hours.
	Hours pulumi.IntArrayInput `pulumi:"hours"`
	// The minutes.
	Minutes pulumi.IntArrayInput `pulumi:"minutes"`
	// The month days.
	MonthDays pulumi.IntArrayInput `pulumi:"monthDays"`
	// The monthly occurrences.
	MonthlyOccurrences RecurrenceScheduleOccurrenceResponseArrayInput `pulumi:"monthlyOccurrences"`
	// The days of the week.
	WeekDays pulumi.StringArrayInput `pulumi:"weekDays"`
}

func (RecurrenceScheduleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceScheduleResponse)(nil)).Elem()
}

func (i RecurrenceScheduleResponseArgs) ToRecurrenceScheduleResponseOutput() RecurrenceScheduleResponseOutput {
	return i.ToRecurrenceScheduleResponseOutputWithContext(context.Background())
}

func (i RecurrenceScheduleResponseArgs) ToRecurrenceScheduleResponseOutputWithContext(ctx context.Context) RecurrenceScheduleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleResponseOutput)
}

func (i RecurrenceScheduleResponseArgs) ToRecurrenceScheduleResponsePtrOutput() RecurrenceScheduleResponsePtrOutput {
	return i.ToRecurrenceScheduleResponsePtrOutputWithContext(context.Background())
}

func (i RecurrenceScheduleResponseArgs) ToRecurrenceScheduleResponsePtrOutputWithContext(ctx context.Context) RecurrenceScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleResponseOutput).ToRecurrenceScheduleResponsePtrOutputWithContext(ctx)
}

// RecurrenceScheduleResponsePtrInput is an input type that accepts RecurrenceScheduleResponseArgs, RecurrenceScheduleResponsePtr and RecurrenceScheduleResponsePtrOutput values.
// You can construct a concrete instance of `RecurrenceScheduleResponsePtrInput` via:
//
//          RecurrenceScheduleResponseArgs{...}
//
//  or:
//
//          nil
type RecurrenceScheduleResponsePtrInput interface {
	pulumi.Input

	ToRecurrenceScheduleResponsePtrOutput() RecurrenceScheduleResponsePtrOutput
	ToRecurrenceScheduleResponsePtrOutputWithContext(context.Context) RecurrenceScheduleResponsePtrOutput
}

type recurrenceScheduleResponsePtrType RecurrenceScheduleResponseArgs

func RecurrenceScheduleResponsePtr(v *RecurrenceScheduleResponseArgs) RecurrenceScheduleResponsePtrInput {
	return (*recurrenceScheduleResponsePtrType)(v)
}

func (*recurrenceScheduleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceScheduleResponse)(nil)).Elem()
}

func (i *recurrenceScheduleResponsePtrType) ToRecurrenceScheduleResponsePtrOutput() RecurrenceScheduleResponsePtrOutput {
	return i.ToRecurrenceScheduleResponsePtrOutputWithContext(context.Background())
}

func (i *recurrenceScheduleResponsePtrType) ToRecurrenceScheduleResponsePtrOutputWithContext(ctx context.Context) RecurrenceScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleResponsePtrOutput)
}

// The recurrence schedule.
type RecurrenceScheduleResponseOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceScheduleResponse)(nil)).Elem()
}

func (o RecurrenceScheduleResponseOutput) ToRecurrenceScheduleResponseOutput() RecurrenceScheduleResponseOutput {
	return o
}

func (o RecurrenceScheduleResponseOutput) ToRecurrenceScheduleResponseOutputWithContext(ctx context.Context) RecurrenceScheduleResponseOutput {
	return o
}

func (o RecurrenceScheduleResponseOutput) ToRecurrenceScheduleResponsePtrOutput() RecurrenceScheduleResponsePtrOutput {
	return o.ToRecurrenceScheduleResponsePtrOutputWithContext(context.Background())
}

func (o RecurrenceScheduleResponseOutput) ToRecurrenceScheduleResponsePtrOutputWithContext(ctx context.Context) RecurrenceScheduleResponsePtrOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) *RecurrenceScheduleResponse {
		return &v
	}).(RecurrenceScheduleResponsePtrOutput)
}

// The hours.
func (o RecurrenceScheduleResponseOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []int { return v.Hours }).(pulumi.IntArrayOutput)
}

// The minutes.
func (o RecurrenceScheduleResponseOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []int { return v.Minutes }).(pulumi.IntArrayOutput)
}

// The month days.
func (o RecurrenceScheduleResponseOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []int { return v.MonthDays }).(pulumi.IntArrayOutput)
}

// The monthly occurrences.
func (o RecurrenceScheduleResponseOutput) MonthlyOccurrences() RecurrenceScheduleOccurrenceResponseArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []RecurrenceScheduleOccurrenceResponse { return v.MonthlyOccurrences }).(RecurrenceScheduleOccurrenceResponseArrayOutput)
}

// The days of the week.
func (o RecurrenceScheduleResponseOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []string { return v.WeekDays }).(pulumi.StringArrayOutput)
}

type RecurrenceScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceScheduleResponse)(nil)).Elem()
}

func (o RecurrenceScheduleResponsePtrOutput) ToRecurrenceScheduleResponsePtrOutput() RecurrenceScheduleResponsePtrOutput {
	return o
}

func (o RecurrenceScheduleResponsePtrOutput) ToRecurrenceScheduleResponsePtrOutputWithContext(ctx context.Context) RecurrenceScheduleResponsePtrOutput {
	return o
}

func (o RecurrenceScheduleResponsePtrOutput) Elem() RecurrenceScheduleResponseOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) RecurrenceScheduleResponse { return *v }).(RecurrenceScheduleResponseOutput)
}

// The hours.
func (o RecurrenceScheduleResponsePtrOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntArrayOutput)
}

// The minutes.
func (o RecurrenceScheduleResponsePtrOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntArrayOutput)
}

// The month days.
func (o RecurrenceScheduleResponsePtrOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.MonthDays
	}).(pulumi.IntArrayOutput)
}

// The monthly occurrences.
func (o RecurrenceScheduleResponsePtrOutput) MonthlyOccurrences() RecurrenceScheduleOccurrenceResponseArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []RecurrenceScheduleOccurrenceResponse {
		if v == nil {
			return nil
		}
		return v.MonthlyOccurrences
	}).(RecurrenceScheduleOccurrenceResponseArrayOutput)
}

// The days of the week.
func (o RecurrenceScheduleResponsePtrOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []string {
		if v == nil {
			return nil
		}
		return v.WeekDays
	}).(pulumi.StringArrayOutput)
}

// The resource reference.
type ResourceReference struct {
	// The resource id.
	Id *string `pulumi:"id"`
}

// ResourceReferenceInput is an input type that accepts ResourceReferenceArgs and ResourceReferenceOutput values.
// You can construct a concrete instance of `ResourceReferenceInput` via:
//
//          ResourceReferenceArgs{...}
type ResourceReferenceInput interface {
	pulumi.Input

	ToResourceReferenceOutput() ResourceReferenceOutput
	ToResourceReferenceOutputWithContext(context.Context) ResourceReferenceOutput
}

// The resource reference.
type ResourceReferenceArgs struct {
	// The resource id.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (ResourceReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceReference)(nil)).Elem()
}

func (i ResourceReferenceArgs) ToResourceReferenceOutput() ResourceReferenceOutput {
	return i.ToResourceReferenceOutputWithContext(context.Background())
}

func (i ResourceReferenceArgs) ToResourceReferenceOutputWithContext(ctx context.Context) ResourceReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceReferenceOutput)
}

func (i ResourceReferenceArgs) ToResourceReferencePtrOutput() ResourceReferencePtrOutput {
	return i.ToResourceReferencePtrOutputWithContext(context.Background())
}

func (i ResourceReferenceArgs) ToResourceReferencePtrOutputWithContext(ctx context.Context) ResourceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceReferenceOutput).ToResourceReferencePtrOutputWithContext(ctx)
}

// ResourceReferencePtrInput is an input type that accepts ResourceReferenceArgs, ResourceReferencePtr and ResourceReferencePtrOutput values.
// You can construct a concrete instance of `ResourceReferencePtrInput` via:
//
//          ResourceReferenceArgs{...}
//
//  or:
//
//          nil
type ResourceReferencePtrInput interface {
	pulumi.Input

	ToResourceReferencePtrOutput() ResourceReferencePtrOutput
	ToResourceReferencePtrOutputWithContext(context.Context) ResourceReferencePtrOutput
}

type resourceReferencePtrType ResourceReferenceArgs

func ResourceReferencePtr(v *ResourceReferenceArgs) ResourceReferencePtrInput {
	return (*resourceReferencePtrType)(v)
}

func (*resourceReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceReference)(nil)).Elem()
}

func (i *resourceReferencePtrType) ToResourceReferencePtrOutput() ResourceReferencePtrOutput {
	return i.ToResourceReferencePtrOutputWithContext(context.Background())
}

func (i *resourceReferencePtrType) ToResourceReferencePtrOutputWithContext(ctx context.Context) ResourceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceReferencePtrOutput)
}

// The resource reference.
type ResourceReferenceOutput struct{ *pulumi.OutputState }

func (ResourceReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceReference)(nil)).Elem()
}

func (o ResourceReferenceOutput) ToResourceReferenceOutput() ResourceReferenceOutput {
	return o
}

func (o ResourceReferenceOutput) ToResourceReferenceOutputWithContext(ctx context.Context) ResourceReferenceOutput {
	return o
}

func (o ResourceReferenceOutput) ToResourceReferencePtrOutput() ResourceReferencePtrOutput {
	return o.ToResourceReferencePtrOutputWithContext(context.Background())
}

func (o ResourceReferenceOutput) ToResourceReferencePtrOutputWithContext(ctx context.Context) ResourceReferencePtrOutput {
	return o.ApplyT(func(v ResourceReference) *ResourceReference {
		return &v
	}).(ResourceReferencePtrOutput)
}

// The resource id.
func (o ResourceReferenceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceReference) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ResourceReferencePtrOutput struct{ *pulumi.OutputState }

func (ResourceReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceReference)(nil)).Elem()
}

func (o ResourceReferencePtrOutput) ToResourceReferencePtrOutput() ResourceReferencePtrOutput {
	return o
}

func (o ResourceReferencePtrOutput) ToResourceReferencePtrOutputWithContext(ctx context.Context) ResourceReferencePtrOutput {
	return o
}

func (o ResourceReferencePtrOutput) Elem() ResourceReferenceOutput {
	return o.ApplyT(func(v *ResourceReference) ResourceReference { return *v }).(ResourceReferenceOutput)
}

// The resource id.
func (o ResourceReferencePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceReference) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The resource reference.
type ResourceReferenceResponse struct {
	// The resource id.
	Id *string `pulumi:"id"`
	// Gets the resource name.
	Name string `pulumi:"name"`
	// Gets the resource type.
	Type string `pulumi:"type"`
}

// ResourceReferenceResponseInput is an input type that accepts ResourceReferenceResponseArgs and ResourceReferenceResponseOutput values.
// You can construct a concrete instance of `ResourceReferenceResponseInput` via:
//
//          ResourceReferenceResponseArgs{...}
type ResourceReferenceResponseInput interface {
	pulumi.Input

	ToResourceReferenceResponseOutput() ResourceReferenceResponseOutput
	ToResourceReferenceResponseOutputWithContext(context.Context) ResourceReferenceResponseOutput
}

// The resource reference.
type ResourceReferenceResponseArgs struct {
	// The resource id.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Gets the resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// Gets the resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ResourceReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceReferenceResponse)(nil)).Elem()
}

func (i ResourceReferenceResponseArgs) ToResourceReferenceResponseOutput() ResourceReferenceResponseOutput {
	return i.ToResourceReferenceResponseOutputWithContext(context.Background())
}

func (i ResourceReferenceResponseArgs) ToResourceReferenceResponseOutputWithContext(ctx context.Context) ResourceReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceReferenceResponseOutput)
}

func (i ResourceReferenceResponseArgs) ToResourceReferenceResponsePtrOutput() ResourceReferenceResponsePtrOutput {
	return i.ToResourceReferenceResponsePtrOutputWithContext(context.Background())
}

func (i ResourceReferenceResponseArgs) ToResourceReferenceResponsePtrOutputWithContext(ctx context.Context) ResourceReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceReferenceResponseOutput).ToResourceReferenceResponsePtrOutputWithContext(ctx)
}

// ResourceReferenceResponsePtrInput is an input type that accepts ResourceReferenceResponseArgs, ResourceReferenceResponsePtr and ResourceReferenceResponsePtrOutput values.
// You can construct a concrete instance of `ResourceReferenceResponsePtrInput` via:
//
//          ResourceReferenceResponseArgs{...}
//
//  or:
//
//          nil
type ResourceReferenceResponsePtrInput interface {
	pulumi.Input

	ToResourceReferenceResponsePtrOutput() ResourceReferenceResponsePtrOutput
	ToResourceReferenceResponsePtrOutputWithContext(context.Context) ResourceReferenceResponsePtrOutput
}

type resourceReferenceResponsePtrType ResourceReferenceResponseArgs

func ResourceReferenceResponsePtr(v *ResourceReferenceResponseArgs) ResourceReferenceResponsePtrInput {
	return (*resourceReferenceResponsePtrType)(v)
}

func (*resourceReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceReferenceResponse)(nil)).Elem()
}

func (i *resourceReferenceResponsePtrType) ToResourceReferenceResponsePtrOutput() ResourceReferenceResponsePtrOutput {
	return i.ToResourceReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *resourceReferenceResponsePtrType) ToResourceReferenceResponsePtrOutputWithContext(ctx context.Context) ResourceReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceReferenceResponsePtrOutput)
}

// The resource reference.
type ResourceReferenceResponseOutput struct{ *pulumi.OutputState }

func (ResourceReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceReferenceResponse)(nil)).Elem()
}

func (o ResourceReferenceResponseOutput) ToResourceReferenceResponseOutput() ResourceReferenceResponseOutput {
	return o
}

func (o ResourceReferenceResponseOutput) ToResourceReferenceResponseOutputWithContext(ctx context.Context) ResourceReferenceResponseOutput {
	return o
}

func (o ResourceReferenceResponseOutput) ToResourceReferenceResponsePtrOutput() ResourceReferenceResponsePtrOutput {
	return o.ToResourceReferenceResponsePtrOutputWithContext(context.Background())
}

func (o ResourceReferenceResponseOutput) ToResourceReferenceResponsePtrOutputWithContext(ctx context.Context) ResourceReferenceResponsePtrOutput {
	return o.ApplyT(func(v ResourceReferenceResponse) *ResourceReferenceResponse {
		return &v
	}).(ResourceReferenceResponsePtrOutput)
}

// The resource id.
func (o ResourceReferenceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceReferenceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Gets the resource name.
func (o ResourceReferenceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceReferenceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Gets the resource type.
func (o ResourceReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ResourceReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceReferenceResponse)(nil)).Elem()
}

func (o ResourceReferenceResponsePtrOutput) ToResourceReferenceResponsePtrOutput() ResourceReferenceResponsePtrOutput {
	return o
}

func (o ResourceReferenceResponsePtrOutput) ToResourceReferenceResponsePtrOutputWithContext(ctx context.Context) ResourceReferenceResponsePtrOutput {
	return o
}

func (o ResourceReferenceResponsePtrOutput) Elem() ResourceReferenceResponseOutput {
	return o.ApplyT(func(v *ResourceReferenceResponse) ResourceReferenceResponse { return *v }).(ResourceReferenceResponseOutput)
}

// The resource id.
func (o ResourceReferenceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Gets the resource name.
func (o ResourceReferenceResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Gets the resource type.
func (o ResourceReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The sku type.
type Sku struct {
	// The name.
	Name string `pulumi:"name"`
	// The reference to plan.
	Plan *ResourceReference `pulumi:"plan"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//          SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The sku type.
type SkuArgs struct {
	// The name.
	Name pulumi.StringInput `pulumi:"name"`
	// The reference to plan.
	Plan ResourceReferencePtrInput `pulumi:"plan"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//          SkuArgs{...}
//
//  or:
//
//          nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// The sku type.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyT(func(v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// The name.
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

// The reference to plan.
func (o SkuOutput) Plan() ResourceReferencePtrOutput {
	return o.ApplyT(func(v Sku) *ResourceReference { return v.Plan }).(ResourceReferencePtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku { return *v }).(SkuOutput)
}

// The name.
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The reference to plan.
func (o SkuPtrOutput) Plan() ResourceReferencePtrOutput {
	return o.ApplyT(func(v *Sku) *ResourceReference {
		if v == nil {
			return nil
		}
		return v.Plan
	}).(ResourceReferencePtrOutput)
}

// The sku type.
type SkuResponse struct {
	// The name.
	Name string `pulumi:"name"`
	// The reference to plan.
	Plan *ResourceReferenceResponse `pulumi:"plan"`
}

// SkuResponseInput is an input type that accepts SkuResponseArgs and SkuResponseOutput values.
// You can construct a concrete instance of `SkuResponseInput` via:
//
//          SkuResponseArgs{...}
type SkuResponseInput interface {
	pulumi.Input

	ToSkuResponseOutput() SkuResponseOutput
	ToSkuResponseOutputWithContext(context.Context) SkuResponseOutput
}

// The sku type.
type SkuResponseArgs struct {
	// The name.
	Name pulumi.StringInput `pulumi:"name"`
	// The reference to plan.
	Plan ResourceReferenceResponsePtrInput `pulumi:"plan"`
}

func (SkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (i SkuResponseArgs) ToSkuResponseOutput() SkuResponseOutput {
	return i.ToSkuResponseOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput)
}

func (i SkuResponseArgs) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput).ToSkuResponsePtrOutputWithContext(ctx)
}

// SkuResponsePtrInput is an input type that accepts SkuResponseArgs, SkuResponsePtr and SkuResponsePtrOutput values.
// You can construct a concrete instance of `SkuResponsePtrInput` via:
//
//          SkuResponseArgs{...}
//
//  or:
//
//          nil
type SkuResponsePtrInput interface {
	pulumi.Input

	ToSkuResponsePtrOutput() SkuResponsePtrOutput
	ToSkuResponsePtrOutputWithContext(context.Context) SkuResponsePtrOutput
}

type skuResponsePtrType SkuResponseArgs

func SkuResponsePtr(v *SkuResponseArgs) SkuResponsePtrInput {
	return (*skuResponsePtrType)(v)
}

func (*skuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponsePtrOutput)
}

// The sku type.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (o SkuResponseOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o.ApplyT(func(v SkuResponse) *SkuResponse {
		return &v
	}).(SkuResponsePtrOutput)
}

// The name.
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The reference to plan.
func (o SkuResponseOutput) Plan() ResourceReferenceResponsePtrOutput {
	return o.ApplyT(func(v SkuResponse) *ResourceReferenceResponse { return v.Plan }).(ResourceReferenceResponsePtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse { return *v }).(SkuResponseOutput)
}

// The name.
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The reference to plan.
func (o SkuResponsePtrOutput) Plan() ResourceReferenceResponsePtrOutput {
	return o.ApplyT(func(v *SkuResponse) *ResourceReferenceResponse {
		if v == nil {
			return nil
		}
		return v.Plan
	}).(ResourceReferenceResponsePtrOutput)
}

// The workflow parameters.
type WorkflowParameter struct {
	// The description.
	Description *string `pulumi:"description"`
	// The metadata.
	Metadata interface{} `pulumi:"metadata"`
	// The type.
	Type *string `pulumi:"type"`
	// The value.
	Value interface{} `pulumi:"value"`
}

// WorkflowParameterInput is an input type that accepts WorkflowParameterArgs and WorkflowParameterOutput values.
// You can construct a concrete instance of `WorkflowParameterInput` via:
//
//          WorkflowParameterArgs{...}
type WorkflowParameterInput interface {
	pulumi.Input

	ToWorkflowParameterOutput() WorkflowParameterOutput
	ToWorkflowParameterOutputWithContext(context.Context) WorkflowParameterOutput
}

// The workflow parameters.
type WorkflowParameterArgs struct {
	// The description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The metadata.
	Metadata pulumi.Input `pulumi:"metadata"`
	// The type.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The value.
	Value pulumi.Input `pulumi:"value"`
}

func (WorkflowParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowParameter)(nil)).Elem()
}

func (i WorkflowParameterArgs) ToWorkflowParameterOutput() WorkflowParameterOutput {
	return i.ToWorkflowParameterOutputWithContext(context.Background())
}

func (i WorkflowParameterArgs) ToWorkflowParameterOutputWithContext(ctx context.Context) WorkflowParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowParameterOutput)
}

// WorkflowParameterMapInput is an input type that accepts WorkflowParameterMap and WorkflowParameterMapOutput values.
// You can construct a concrete instance of `WorkflowParameterMapInput` via:
//
//          WorkflowParameterMap{ "key": WorkflowParameterArgs{...} }
type WorkflowParameterMapInput interface {
	pulumi.Input

	ToWorkflowParameterMapOutput() WorkflowParameterMapOutput
	ToWorkflowParameterMapOutputWithContext(context.Context) WorkflowParameterMapOutput
}

type WorkflowParameterMap map[string]WorkflowParameterInput

func (WorkflowParameterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WorkflowParameter)(nil)).Elem()
}

func (i WorkflowParameterMap) ToWorkflowParameterMapOutput() WorkflowParameterMapOutput {
	return i.ToWorkflowParameterMapOutputWithContext(context.Background())
}

func (i WorkflowParameterMap) ToWorkflowParameterMapOutputWithContext(ctx context.Context) WorkflowParameterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowParameterMapOutput)
}

// The workflow parameters.
type WorkflowParameterOutput struct{ *pulumi.OutputState }

func (WorkflowParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowParameter)(nil)).Elem()
}

func (o WorkflowParameterOutput) ToWorkflowParameterOutput() WorkflowParameterOutput {
	return o
}

func (o WorkflowParameterOutput) ToWorkflowParameterOutputWithContext(ctx context.Context) WorkflowParameterOutput {
	return o
}

// The description.
func (o WorkflowParameterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowParameter) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The metadata.
func (o WorkflowParameterOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v WorkflowParameter) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

// The type.
func (o WorkflowParameterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowParameter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The value.
func (o WorkflowParameterOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v WorkflowParameter) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type WorkflowParameterMapOutput struct{ *pulumi.OutputState }

func (WorkflowParameterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WorkflowParameter)(nil)).Elem()
}

func (o WorkflowParameterMapOutput) ToWorkflowParameterMapOutput() WorkflowParameterMapOutput {
	return o
}

func (o WorkflowParameterMapOutput) ToWorkflowParameterMapOutputWithContext(ctx context.Context) WorkflowParameterMapOutput {
	return o
}

func (o WorkflowParameterMapOutput) MapIndex(k pulumi.StringInput) WorkflowParameterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) WorkflowParameter {
		return vs[0].(map[string]WorkflowParameter)[vs[1].(string)]
	}).(WorkflowParameterOutput)
}

// The workflow parameters.
type WorkflowParameterResponse struct {
	// The description.
	Description *string `pulumi:"description"`
	// The metadata.
	Metadata interface{} `pulumi:"metadata"`
	// The type.
	Type *string `pulumi:"type"`
	// The value.
	Value interface{} `pulumi:"value"`
}

// WorkflowParameterResponseInput is an input type that accepts WorkflowParameterResponseArgs and WorkflowParameterResponseOutput values.
// You can construct a concrete instance of `WorkflowParameterResponseInput` via:
//
//          WorkflowParameterResponseArgs{...}
type WorkflowParameterResponseInput interface {
	pulumi.Input

	ToWorkflowParameterResponseOutput() WorkflowParameterResponseOutput
	ToWorkflowParameterResponseOutputWithContext(context.Context) WorkflowParameterResponseOutput
}

// The workflow parameters.
type WorkflowParameterResponseArgs struct {
	// The description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The metadata.
	Metadata pulumi.Input `pulumi:"metadata"`
	// The type.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The value.
	Value pulumi.Input `pulumi:"value"`
}

func (WorkflowParameterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowParameterResponse)(nil)).Elem()
}

func (i WorkflowParameterResponseArgs) ToWorkflowParameterResponseOutput() WorkflowParameterResponseOutput {
	return i.ToWorkflowParameterResponseOutputWithContext(context.Background())
}

func (i WorkflowParameterResponseArgs) ToWorkflowParameterResponseOutputWithContext(ctx context.Context) WorkflowParameterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowParameterResponseOutput)
}

// WorkflowParameterResponseMapInput is an input type that accepts WorkflowParameterResponseMap and WorkflowParameterResponseMapOutput values.
// You can construct a concrete instance of `WorkflowParameterResponseMapInput` via:
//
//          WorkflowParameterResponseMap{ "key": WorkflowParameterResponseArgs{...} }
type WorkflowParameterResponseMapInput interface {
	pulumi.Input

	ToWorkflowParameterResponseMapOutput() WorkflowParameterResponseMapOutput
	ToWorkflowParameterResponseMapOutputWithContext(context.Context) WorkflowParameterResponseMapOutput
}

type WorkflowParameterResponseMap map[string]WorkflowParameterResponseInput

func (WorkflowParameterResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WorkflowParameterResponse)(nil)).Elem()
}

func (i WorkflowParameterResponseMap) ToWorkflowParameterResponseMapOutput() WorkflowParameterResponseMapOutput {
	return i.ToWorkflowParameterResponseMapOutputWithContext(context.Background())
}

func (i WorkflowParameterResponseMap) ToWorkflowParameterResponseMapOutputWithContext(ctx context.Context) WorkflowParameterResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowParameterResponseMapOutput)
}

// The workflow parameters.
type WorkflowParameterResponseOutput struct{ *pulumi.OutputState }

func (WorkflowParameterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowParameterResponse)(nil)).Elem()
}

func (o WorkflowParameterResponseOutput) ToWorkflowParameterResponseOutput() WorkflowParameterResponseOutput {
	return o
}

func (o WorkflowParameterResponseOutput) ToWorkflowParameterResponseOutputWithContext(ctx context.Context) WorkflowParameterResponseOutput {
	return o
}

// The description.
func (o WorkflowParameterResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowParameterResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The metadata.
func (o WorkflowParameterResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v WorkflowParameterResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

// The type.
func (o WorkflowParameterResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowParameterResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The value.
func (o WorkflowParameterResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v WorkflowParameterResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type WorkflowParameterResponseMapOutput struct{ *pulumi.OutputState }

func (WorkflowParameterResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WorkflowParameterResponse)(nil)).Elem()
}

func (o WorkflowParameterResponseMapOutput) ToWorkflowParameterResponseMapOutput() WorkflowParameterResponseMapOutput {
	return o
}

func (o WorkflowParameterResponseMapOutput) ToWorkflowParameterResponseMapOutputWithContext(ctx context.Context) WorkflowParameterResponseMapOutput {
	return o
}

func (o WorkflowParameterResponseMapOutput) MapIndex(k pulumi.StringInput) WorkflowParameterResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) WorkflowParameterResponse {
		return vs[0].(map[string]WorkflowParameterResponse)[vs[1].(string)]
	}).(WorkflowParameterResponseOutput)
}

// Gets the workflow trigger callback URL query parameters.
type WorkflowTriggerListCallbackUrlQueriesResponse struct {
	// The api version.
	ApiVersion *string `pulumi:"apiVersion"`
	// The SAS timestamp.
	Se *string `pulumi:"se"`
	// The SAS signature.
	Sig *string `pulumi:"sig"`
	// The SAS permissions.
	Sp *string `pulumi:"sp"`
	// The SAS version.
	Sv *string `pulumi:"sv"`
}

// WorkflowTriggerListCallbackUrlQueriesResponseInput is an input type that accepts WorkflowTriggerListCallbackUrlQueriesResponseArgs and WorkflowTriggerListCallbackUrlQueriesResponseOutput values.
// You can construct a concrete instance of `WorkflowTriggerListCallbackUrlQueriesResponseInput` via:
//
//          WorkflowTriggerListCallbackUrlQueriesResponseArgs{...}
type WorkflowTriggerListCallbackUrlQueriesResponseInput interface {
	pulumi.Input

	ToWorkflowTriggerListCallbackUrlQueriesResponseOutput() WorkflowTriggerListCallbackUrlQueriesResponseOutput
	ToWorkflowTriggerListCallbackUrlQueriesResponseOutputWithContext(context.Context) WorkflowTriggerListCallbackUrlQueriesResponseOutput
}

// Gets the workflow trigger callback URL query parameters.
type WorkflowTriggerListCallbackUrlQueriesResponseArgs struct {
	// The api version.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// The SAS timestamp.
	Se pulumi.StringPtrInput `pulumi:"se"`
	// The SAS signature.
	Sig pulumi.StringPtrInput `pulumi:"sig"`
	// The SAS permissions.
	Sp pulumi.StringPtrInput `pulumi:"sp"`
	// The SAS version.
	Sv pulumi.StringPtrInput `pulumi:"sv"`
}

func (WorkflowTriggerListCallbackUrlQueriesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowTriggerListCallbackUrlQueriesResponse)(nil)).Elem()
}

func (i WorkflowTriggerListCallbackUrlQueriesResponseArgs) ToWorkflowTriggerListCallbackUrlQueriesResponseOutput() WorkflowTriggerListCallbackUrlQueriesResponseOutput {
	return i.ToWorkflowTriggerListCallbackUrlQueriesResponseOutputWithContext(context.Background())
}

func (i WorkflowTriggerListCallbackUrlQueriesResponseArgs) ToWorkflowTriggerListCallbackUrlQueriesResponseOutputWithContext(ctx context.Context) WorkflowTriggerListCallbackUrlQueriesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTriggerListCallbackUrlQueriesResponseOutput)
}

// Gets the workflow trigger callback URL query parameters.
type WorkflowTriggerListCallbackUrlQueriesResponseOutput struct{ *pulumi.OutputState }

func (WorkflowTriggerListCallbackUrlQueriesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowTriggerListCallbackUrlQueriesResponse)(nil)).Elem()
}

func (o WorkflowTriggerListCallbackUrlQueriesResponseOutput) ToWorkflowTriggerListCallbackUrlQueriesResponseOutput() WorkflowTriggerListCallbackUrlQueriesResponseOutput {
	return o
}

func (o WorkflowTriggerListCallbackUrlQueriesResponseOutput) ToWorkflowTriggerListCallbackUrlQueriesResponseOutputWithContext(ctx context.Context) WorkflowTriggerListCallbackUrlQueriesResponseOutput {
	return o
}

// The api version.
func (o WorkflowTriggerListCallbackUrlQueriesResponseOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowTriggerListCallbackUrlQueriesResponse) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// The SAS timestamp.
func (o WorkflowTriggerListCallbackUrlQueriesResponseOutput) Se() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowTriggerListCallbackUrlQueriesResponse) *string { return v.Se }).(pulumi.StringPtrOutput)
}

// The SAS signature.
func (o WorkflowTriggerListCallbackUrlQueriesResponseOutput) Sig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowTriggerListCallbackUrlQueriesResponse) *string { return v.Sig }).(pulumi.StringPtrOutput)
}

// The SAS permissions.
func (o WorkflowTriggerListCallbackUrlQueriesResponseOutput) Sp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowTriggerListCallbackUrlQueriesResponse) *string { return v.Sp }).(pulumi.StringPtrOutput)
}

// The SAS version.
func (o WorkflowTriggerListCallbackUrlQueriesResponseOutput) Sv() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowTriggerListCallbackUrlQueriesResponse) *string { return v.Sv }).(pulumi.StringPtrOutput)
}

// The workflow trigger recurrence.
type WorkflowTriggerRecurrence struct {
	// The end time.
	EndTime *string `pulumi:"endTime"`
	// The frequency.
	Frequency *string `pulumi:"frequency"`
	// The interval.
	Interval *int `pulumi:"interval"`
	// The recurrence schedule.
	Schedule *RecurrenceSchedule `pulumi:"schedule"`
	// The start time.
	StartTime *string `pulumi:"startTime"`
	// The time zone.
	TimeZone *string `pulumi:"timeZone"`
}

// WorkflowTriggerRecurrenceInput is an input type that accepts WorkflowTriggerRecurrenceArgs and WorkflowTriggerRecurrenceOutput values.
// You can construct a concrete instance of `WorkflowTriggerRecurrenceInput` via:
//
//          WorkflowTriggerRecurrenceArgs{...}
type WorkflowTriggerRecurrenceInput interface {
	pulumi.Input

	ToWorkflowTriggerRecurrenceOutput() WorkflowTriggerRecurrenceOutput
	ToWorkflowTriggerRecurrenceOutputWithContext(context.Context) WorkflowTriggerRecurrenceOutput
}

// The workflow trigger recurrence.
type WorkflowTriggerRecurrenceArgs struct {
	// The end time.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// The frequency.
	Frequency pulumi.StringPtrInput `pulumi:"frequency"`
	// The interval.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// The recurrence schedule.
	Schedule RecurrenceSchedulePtrInput `pulumi:"schedule"`
	// The start time.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The time zone.
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

func (WorkflowTriggerRecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowTriggerRecurrence)(nil)).Elem()
}

func (i WorkflowTriggerRecurrenceArgs) ToWorkflowTriggerRecurrenceOutput() WorkflowTriggerRecurrenceOutput {
	return i.ToWorkflowTriggerRecurrenceOutputWithContext(context.Background())
}

func (i WorkflowTriggerRecurrenceArgs) ToWorkflowTriggerRecurrenceOutputWithContext(ctx context.Context) WorkflowTriggerRecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTriggerRecurrenceOutput)
}

func (i WorkflowTriggerRecurrenceArgs) ToWorkflowTriggerRecurrencePtrOutput() WorkflowTriggerRecurrencePtrOutput {
	return i.ToWorkflowTriggerRecurrencePtrOutputWithContext(context.Background())
}

func (i WorkflowTriggerRecurrenceArgs) ToWorkflowTriggerRecurrencePtrOutputWithContext(ctx context.Context) WorkflowTriggerRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTriggerRecurrenceOutput).ToWorkflowTriggerRecurrencePtrOutputWithContext(ctx)
}

// WorkflowTriggerRecurrencePtrInput is an input type that accepts WorkflowTriggerRecurrenceArgs, WorkflowTriggerRecurrencePtr and WorkflowTriggerRecurrencePtrOutput values.
// You can construct a concrete instance of `WorkflowTriggerRecurrencePtrInput` via:
//
//          WorkflowTriggerRecurrenceArgs{...}
//
//  or:
//
//          nil
type WorkflowTriggerRecurrencePtrInput interface {
	pulumi.Input

	ToWorkflowTriggerRecurrencePtrOutput() WorkflowTriggerRecurrencePtrOutput
	ToWorkflowTriggerRecurrencePtrOutputWithContext(context.Context) WorkflowTriggerRecurrencePtrOutput
}

type workflowTriggerRecurrencePtrType WorkflowTriggerRecurrenceArgs

func WorkflowTriggerRecurrencePtr(v *WorkflowTriggerRecurrenceArgs) WorkflowTriggerRecurrencePtrInput {
	return (*workflowTriggerRecurrencePtrType)(v)
}

func (*workflowTriggerRecurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTriggerRecurrence)(nil)).Elem()
}

func (i *workflowTriggerRecurrencePtrType) ToWorkflowTriggerRecurrencePtrOutput() WorkflowTriggerRecurrencePtrOutput {
	return i.ToWorkflowTriggerRecurrencePtrOutputWithContext(context.Background())
}

func (i *workflowTriggerRecurrencePtrType) ToWorkflowTriggerRecurrencePtrOutputWithContext(ctx context.Context) WorkflowTriggerRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTriggerRecurrencePtrOutput)
}

// The workflow trigger recurrence.
type WorkflowTriggerRecurrenceOutput struct{ *pulumi.OutputState }

func (WorkflowTriggerRecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowTriggerRecurrence)(nil)).Elem()
}

func (o WorkflowTriggerRecurrenceOutput) ToWorkflowTriggerRecurrenceOutput() WorkflowTriggerRecurrenceOutput {
	return o
}

func (o WorkflowTriggerRecurrenceOutput) ToWorkflowTriggerRecurrenceOutputWithContext(ctx context.Context) WorkflowTriggerRecurrenceOutput {
	return o
}

func (o WorkflowTriggerRecurrenceOutput) ToWorkflowTriggerRecurrencePtrOutput() WorkflowTriggerRecurrencePtrOutput {
	return o.ToWorkflowTriggerRecurrencePtrOutputWithContext(context.Background())
}

func (o WorkflowTriggerRecurrenceOutput) ToWorkflowTriggerRecurrencePtrOutputWithContext(ctx context.Context) WorkflowTriggerRecurrencePtrOutput {
	return o.ApplyT(func(v WorkflowTriggerRecurrence) *WorkflowTriggerRecurrence {
		return &v
	}).(WorkflowTriggerRecurrencePtrOutput)
}

// The end time.
func (o WorkflowTriggerRecurrenceOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowTriggerRecurrence) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The frequency.
func (o WorkflowTriggerRecurrenceOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowTriggerRecurrence) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// The interval.
func (o WorkflowTriggerRecurrenceOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkflowTriggerRecurrence) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The recurrence schedule.
func (o WorkflowTriggerRecurrenceOutput) Schedule() RecurrenceSchedulePtrOutput {
	return o.ApplyT(func(v WorkflowTriggerRecurrence) *RecurrenceSchedule { return v.Schedule }).(RecurrenceSchedulePtrOutput)
}

// The start time.
func (o WorkflowTriggerRecurrenceOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowTriggerRecurrence) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The time zone.
func (o WorkflowTriggerRecurrenceOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowTriggerRecurrence) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type WorkflowTriggerRecurrencePtrOutput struct{ *pulumi.OutputState }

func (WorkflowTriggerRecurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTriggerRecurrence)(nil)).Elem()
}

func (o WorkflowTriggerRecurrencePtrOutput) ToWorkflowTriggerRecurrencePtrOutput() WorkflowTriggerRecurrencePtrOutput {
	return o
}

func (o WorkflowTriggerRecurrencePtrOutput) ToWorkflowTriggerRecurrencePtrOutputWithContext(ctx context.Context) WorkflowTriggerRecurrencePtrOutput {
	return o
}

func (o WorkflowTriggerRecurrencePtrOutput) Elem() WorkflowTriggerRecurrenceOutput {
	return o.ApplyT(func(v *WorkflowTriggerRecurrence) WorkflowTriggerRecurrence { return *v }).(WorkflowTriggerRecurrenceOutput)
}

// The end time.
func (o WorkflowTriggerRecurrencePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowTriggerRecurrence) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// The frequency.
func (o WorkflowTriggerRecurrencePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowTriggerRecurrence) *string {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.StringPtrOutput)
}

// The interval.
func (o WorkflowTriggerRecurrencePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkflowTriggerRecurrence) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// The recurrence schedule.
func (o WorkflowTriggerRecurrencePtrOutput) Schedule() RecurrenceSchedulePtrOutput {
	return o.ApplyT(func(v *WorkflowTriggerRecurrence) *RecurrenceSchedule {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(RecurrenceSchedulePtrOutput)
}

// The start time.
func (o WorkflowTriggerRecurrencePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowTriggerRecurrence) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The time zone.
func (o WorkflowTriggerRecurrencePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowTriggerRecurrence) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// The workflow trigger recurrence.
type WorkflowTriggerRecurrenceResponse struct {
	// The end time.
	EndTime *string `pulumi:"endTime"`
	// The frequency.
	Frequency *string `pulumi:"frequency"`
	// The interval.
	Interval *int `pulumi:"interval"`
	// The recurrence schedule.
	Schedule *RecurrenceScheduleResponse `pulumi:"schedule"`
	// The start time.
	StartTime *string `pulumi:"startTime"`
	// The time zone.
	TimeZone *string `pulumi:"timeZone"`
}

// WorkflowTriggerRecurrenceResponseInput is an input type that accepts WorkflowTriggerRecurrenceResponseArgs and WorkflowTriggerRecurrenceResponseOutput values.
// You can construct a concrete instance of `WorkflowTriggerRecurrenceResponseInput` via:
//
//          WorkflowTriggerRecurrenceResponseArgs{...}
type WorkflowTriggerRecurrenceResponseInput interface {
	pulumi.Input

	ToWorkflowTriggerRecurrenceResponseOutput() WorkflowTriggerRecurrenceResponseOutput
	ToWorkflowTriggerRecurrenceResponseOutputWithContext(context.Context) WorkflowTriggerRecurrenceResponseOutput
}

// The workflow trigger recurrence.
type WorkflowTriggerRecurrenceResponseArgs struct {
	// The end time.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// The frequency.
	Frequency pulumi.StringPtrInput `pulumi:"frequency"`
	// The interval.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// The recurrence schedule.
	Schedule RecurrenceScheduleResponsePtrInput `pulumi:"schedule"`
	// The start time.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The time zone.
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

func (WorkflowTriggerRecurrenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowTriggerRecurrenceResponse)(nil)).Elem()
}

func (i WorkflowTriggerRecurrenceResponseArgs) ToWorkflowTriggerRecurrenceResponseOutput() WorkflowTriggerRecurrenceResponseOutput {
	return i.ToWorkflowTriggerRecurrenceResponseOutputWithContext(context.Background())
}

func (i WorkflowTriggerRecurrenceResponseArgs) ToWorkflowTriggerRecurrenceResponseOutputWithContext(ctx context.Context) WorkflowTriggerRecurrenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTriggerRecurrenceResponseOutput)
}

func (i WorkflowTriggerRecurrenceResponseArgs) ToWorkflowTriggerRecurrenceResponsePtrOutput() WorkflowTriggerRecurrenceResponsePtrOutput {
	return i.ToWorkflowTriggerRecurrenceResponsePtrOutputWithContext(context.Background())
}

func (i WorkflowTriggerRecurrenceResponseArgs) ToWorkflowTriggerRecurrenceResponsePtrOutputWithContext(ctx context.Context) WorkflowTriggerRecurrenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTriggerRecurrenceResponseOutput).ToWorkflowTriggerRecurrenceResponsePtrOutputWithContext(ctx)
}

// WorkflowTriggerRecurrenceResponsePtrInput is an input type that accepts WorkflowTriggerRecurrenceResponseArgs, WorkflowTriggerRecurrenceResponsePtr and WorkflowTriggerRecurrenceResponsePtrOutput values.
// You can construct a concrete instance of `WorkflowTriggerRecurrenceResponsePtrInput` via:
//
//          WorkflowTriggerRecurrenceResponseArgs{...}
//
//  or:
//
//          nil
type WorkflowTriggerRecurrenceResponsePtrInput interface {
	pulumi.Input

	ToWorkflowTriggerRecurrenceResponsePtrOutput() WorkflowTriggerRecurrenceResponsePtrOutput
	ToWorkflowTriggerRecurrenceResponsePtrOutputWithContext(context.Context) WorkflowTriggerRecurrenceResponsePtrOutput
}

type workflowTriggerRecurrenceResponsePtrType WorkflowTriggerRecurrenceResponseArgs

func WorkflowTriggerRecurrenceResponsePtr(v *WorkflowTriggerRecurrenceResponseArgs) WorkflowTriggerRecurrenceResponsePtrInput {
	return (*workflowTriggerRecurrenceResponsePtrType)(v)
}

func (*workflowTriggerRecurrenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTriggerRecurrenceResponse)(nil)).Elem()
}

func (i *workflowTriggerRecurrenceResponsePtrType) ToWorkflowTriggerRecurrenceResponsePtrOutput() WorkflowTriggerRecurrenceResponsePtrOutput {
	return i.ToWorkflowTriggerRecurrenceResponsePtrOutputWithContext(context.Background())
}

func (i *workflowTriggerRecurrenceResponsePtrType) ToWorkflowTriggerRecurrenceResponsePtrOutputWithContext(ctx context.Context) WorkflowTriggerRecurrenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTriggerRecurrenceResponsePtrOutput)
}

// The workflow trigger recurrence.
type WorkflowTriggerRecurrenceResponseOutput struct{ *pulumi.OutputState }

func (WorkflowTriggerRecurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowTriggerRecurrenceResponse)(nil)).Elem()
}

func (o WorkflowTriggerRecurrenceResponseOutput) ToWorkflowTriggerRecurrenceResponseOutput() WorkflowTriggerRecurrenceResponseOutput {
	return o
}

func (o WorkflowTriggerRecurrenceResponseOutput) ToWorkflowTriggerRecurrenceResponseOutputWithContext(ctx context.Context) WorkflowTriggerRecurrenceResponseOutput {
	return o
}

func (o WorkflowTriggerRecurrenceResponseOutput) ToWorkflowTriggerRecurrenceResponsePtrOutput() WorkflowTriggerRecurrenceResponsePtrOutput {
	return o.ToWorkflowTriggerRecurrenceResponsePtrOutputWithContext(context.Background())
}

func (o WorkflowTriggerRecurrenceResponseOutput) ToWorkflowTriggerRecurrenceResponsePtrOutputWithContext(ctx context.Context) WorkflowTriggerRecurrenceResponsePtrOutput {
	return o.ApplyT(func(v WorkflowTriggerRecurrenceResponse) *WorkflowTriggerRecurrenceResponse {
		return &v
	}).(WorkflowTriggerRecurrenceResponsePtrOutput)
}

// The end time.
func (o WorkflowTriggerRecurrenceResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowTriggerRecurrenceResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The frequency.
func (o WorkflowTriggerRecurrenceResponseOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowTriggerRecurrenceResponse) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// The interval.
func (o WorkflowTriggerRecurrenceResponseOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkflowTriggerRecurrenceResponse) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The recurrence schedule.
func (o WorkflowTriggerRecurrenceResponseOutput) Schedule() RecurrenceScheduleResponsePtrOutput {
	return o.ApplyT(func(v WorkflowTriggerRecurrenceResponse) *RecurrenceScheduleResponse { return v.Schedule }).(RecurrenceScheduleResponsePtrOutput)
}

// The start time.
func (o WorkflowTriggerRecurrenceResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowTriggerRecurrenceResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The time zone.
func (o WorkflowTriggerRecurrenceResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowTriggerRecurrenceResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type WorkflowTriggerRecurrenceResponsePtrOutput struct{ *pulumi.OutputState }

func (WorkflowTriggerRecurrenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTriggerRecurrenceResponse)(nil)).Elem()
}

func (o WorkflowTriggerRecurrenceResponsePtrOutput) ToWorkflowTriggerRecurrenceResponsePtrOutput() WorkflowTriggerRecurrenceResponsePtrOutput {
	return o
}

func (o WorkflowTriggerRecurrenceResponsePtrOutput) ToWorkflowTriggerRecurrenceResponsePtrOutputWithContext(ctx context.Context) WorkflowTriggerRecurrenceResponsePtrOutput {
	return o
}

func (o WorkflowTriggerRecurrenceResponsePtrOutput) Elem() WorkflowTriggerRecurrenceResponseOutput {
	return o.ApplyT(func(v *WorkflowTriggerRecurrenceResponse) WorkflowTriggerRecurrenceResponse { return *v }).(WorkflowTriggerRecurrenceResponseOutput)
}

// The end time.
func (o WorkflowTriggerRecurrenceResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowTriggerRecurrenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// The frequency.
func (o WorkflowTriggerRecurrenceResponsePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowTriggerRecurrenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.StringPtrOutput)
}

// The interval.
func (o WorkflowTriggerRecurrenceResponsePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkflowTriggerRecurrenceResponse) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// The recurrence schedule.
func (o WorkflowTriggerRecurrenceResponsePtrOutput) Schedule() RecurrenceScheduleResponsePtrOutput {
	return o.ApplyT(func(v *WorkflowTriggerRecurrenceResponse) *RecurrenceScheduleResponse {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(RecurrenceScheduleResponsePtrOutput)
}

// The start time.
func (o WorkflowTriggerRecurrenceResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowTriggerRecurrenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The time zone.
func (o WorkflowTriggerRecurrenceResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowTriggerRecurrenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// The X12 agreement acknowledgement settings.
type X12AcknowledgementSettings struct {
	// The acknowledgement control number lower bound.
	AcknowledgementControlNumberLowerBound int `pulumi:"acknowledgementControlNumberLowerBound"`
	// The acknowledgement control number prefix.
	AcknowledgementControlNumberPrefix *string `pulumi:"acknowledgementControlNumberPrefix"`
	// The acknowledgement control number suffix.
	AcknowledgementControlNumberSuffix *string `pulumi:"acknowledgementControlNumberSuffix"`
	// The acknowledgement control number upper bound.
	AcknowledgementControlNumberUpperBound int `pulumi:"acknowledgementControlNumberUpperBound"`
	// The value indicating whether to batch functional acknowledgements.
	BatchFunctionalAcknowledgements bool `pulumi:"batchFunctionalAcknowledgements"`
	// The value indicating whether to batch implementation acknowledgements.
	BatchImplementationAcknowledgements bool `pulumi:"batchImplementationAcknowledgements"`
	// The value indicating whether to batch the technical acknowledgements.
	BatchTechnicalAcknowledgements bool `pulumi:"batchTechnicalAcknowledgements"`
	// The functional acknowledgement version.
	FunctionalAcknowledgementVersion *string `pulumi:"functionalAcknowledgementVersion"`
	// The implementation acknowledgement version.
	ImplementationAcknowledgementVersion *string `pulumi:"implementationAcknowledgementVersion"`
	// The value indicating whether functional acknowledgement is needed.
	NeedFunctionalAcknowledgement bool `pulumi:"needFunctionalAcknowledgement"`
	// The value indicating whether implementation acknowledgement is needed.
	NeedImplementationAcknowledgement bool `pulumi:"needImplementationAcknowledgement"`
	// The value indicating whether a loop is needed for valid messages.
	NeedLoopForValidMessages bool `pulumi:"needLoopForValidMessages"`
	// The value indicating whether technical acknowledgement is needed.
	NeedTechnicalAcknowledgement bool `pulumi:"needTechnicalAcknowledgement"`
	// The value indicating whether to rollover acknowledgement control number.
	RolloverAcknowledgementControlNumber bool `pulumi:"rolloverAcknowledgementControlNumber"`
	// The value indicating whether to send synchronous acknowledgement.
	SendSynchronousAcknowledgement bool `pulumi:"sendSynchronousAcknowledgement"`
}

// X12AcknowledgementSettingsInput is an input type that accepts X12AcknowledgementSettingsArgs and X12AcknowledgementSettingsOutput values.
// You can construct a concrete instance of `X12AcknowledgementSettingsInput` via:
//
//          X12AcknowledgementSettingsArgs{...}
type X12AcknowledgementSettingsInput interface {
	pulumi.Input

	ToX12AcknowledgementSettingsOutput() X12AcknowledgementSettingsOutput
	ToX12AcknowledgementSettingsOutputWithContext(context.Context) X12AcknowledgementSettingsOutput
}

// The X12 agreement acknowledgement settings.
type X12AcknowledgementSettingsArgs struct {
	// The acknowledgement control number lower bound.
	AcknowledgementControlNumberLowerBound pulumi.IntInput `pulumi:"acknowledgementControlNumberLowerBound"`
	// The acknowledgement control number prefix.
	AcknowledgementControlNumberPrefix pulumi.StringPtrInput `pulumi:"acknowledgementControlNumberPrefix"`
	// The acknowledgement control number suffix.
	AcknowledgementControlNumberSuffix pulumi.StringPtrInput `pulumi:"acknowledgementControlNumberSuffix"`
	// The acknowledgement control number upper bound.
	AcknowledgementControlNumberUpperBound pulumi.IntInput `pulumi:"acknowledgementControlNumberUpperBound"`
	// The value indicating whether to batch functional acknowledgements.
	BatchFunctionalAcknowledgements pulumi.BoolInput `pulumi:"batchFunctionalAcknowledgements"`
	// The value indicating whether to batch implementation acknowledgements.
	BatchImplementationAcknowledgements pulumi.BoolInput `pulumi:"batchImplementationAcknowledgements"`
	// The value indicating whether to batch the technical acknowledgements.
	BatchTechnicalAcknowledgements pulumi.BoolInput `pulumi:"batchTechnicalAcknowledgements"`
	// The functional acknowledgement version.
	FunctionalAcknowledgementVersion pulumi.StringPtrInput `pulumi:"functionalAcknowledgementVersion"`
	// The implementation acknowledgement version.
	ImplementationAcknowledgementVersion pulumi.StringPtrInput `pulumi:"implementationAcknowledgementVersion"`
	// The value indicating whether functional acknowledgement is needed.
	NeedFunctionalAcknowledgement pulumi.BoolInput `pulumi:"needFunctionalAcknowledgement"`
	// The value indicating whether implementation acknowledgement is needed.
	NeedImplementationAcknowledgement pulumi.BoolInput `pulumi:"needImplementationAcknowledgement"`
	// The value indicating whether a loop is needed for valid messages.
	NeedLoopForValidMessages pulumi.BoolInput `pulumi:"needLoopForValidMessages"`
	// The value indicating whether technical acknowledgement is needed.
	NeedTechnicalAcknowledgement pulumi.BoolInput `pulumi:"needTechnicalAcknowledgement"`
	// The value indicating whether to rollover acknowledgement control number.
	RolloverAcknowledgementControlNumber pulumi.BoolInput `pulumi:"rolloverAcknowledgementControlNumber"`
	// The value indicating whether to send synchronous acknowledgement.
	SendSynchronousAcknowledgement pulumi.BoolInput `pulumi:"sendSynchronousAcknowledgement"`
}

func (X12AcknowledgementSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12AcknowledgementSettings)(nil)).Elem()
}

func (i X12AcknowledgementSettingsArgs) ToX12AcknowledgementSettingsOutput() X12AcknowledgementSettingsOutput {
	return i.ToX12AcknowledgementSettingsOutputWithContext(context.Background())
}

func (i X12AcknowledgementSettingsArgs) ToX12AcknowledgementSettingsOutputWithContext(ctx context.Context) X12AcknowledgementSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12AcknowledgementSettingsOutput)
}

func (i X12AcknowledgementSettingsArgs) ToX12AcknowledgementSettingsPtrOutput() X12AcknowledgementSettingsPtrOutput {
	return i.ToX12AcknowledgementSettingsPtrOutputWithContext(context.Background())
}

func (i X12AcknowledgementSettingsArgs) ToX12AcknowledgementSettingsPtrOutputWithContext(ctx context.Context) X12AcknowledgementSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12AcknowledgementSettingsOutput).ToX12AcknowledgementSettingsPtrOutputWithContext(ctx)
}

// X12AcknowledgementSettingsPtrInput is an input type that accepts X12AcknowledgementSettingsArgs, X12AcknowledgementSettingsPtr and X12AcknowledgementSettingsPtrOutput values.
// You can construct a concrete instance of `X12AcknowledgementSettingsPtrInput` via:
//
//          X12AcknowledgementSettingsArgs{...}
//
//  or:
//
//          nil
type X12AcknowledgementSettingsPtrInput interface {
	pulumi.Input

	ToX12AcknowledgementSettingsPtrOutput() X12AcknowledgementSettingsPtrOutput
	ToX12AcknowledgementSettingsPtrOutputWithContext(context.Context) X12AcknowledgementSettingsPtrOutput
}

type x12acknowledgementSettingsPtrType X12AcknowledgementSettingsArgs

func X12AcknowledgementSettingsPtr(v *X12AcknowledgementSettingsArgs) X12AcknowledgementSettingsPtrInput {
	return (*x12acknowledgementSettingsPtrType)(v)
}

func (*x12acknowledgementSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12AcknowledgementSettings)(nil)).Elem()
}

func (i *x12acknowledgementSettingsPtrType) ToX12AcknowledgementSettingsPtrOutput() X12AcknowledgementSettingsPtrOutput {
	return i.ToX12AcknowledgementSettingsPtrOutputWithContext(context.Background())
}

func (i *x12acknowledgementSettingsPtrType) ToX12AcknowledgementSettingsPtrOutputWithContext(ctx context.Context) X12AcknowledgementSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12AcknowledgementSettingsPtrOutput)
}

// The X12 agreement acknowledgement settings.
type X12AcknowledgementSettingsOutput struct{ *pulumi.OutputState }

func (X12AcknowledgementSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12AcknowledgementSettings)(nil)).Elem()
}

func (o X12AcknowledgementSettingsOutput) ToX12AcknowledgementSettingsOutput() X12AcknowledgementSettingsOutput {
	return o
}

func (o X12AcknowledgementSettingsOutput) ToX12AcknowledgementSettingsOutputWithContext(ctx context.Context) X12AcknowledgementSettingsOutput {
	return o
}

func (o X12AcknowledgementSettingsOutput) ToX12AcknowledgementSettingsPtrOutput() X12AcknowledgementSettingsPtrOutput {
	return o.ToX12AcknowledgementSettingsPtrOutputWithContext(context.Background())
}

func (o X12AcknowledgementSettingsOutput) ToX12AcknowledgementSettingsPtrOutputWithContext(ctx context.Context) X12AcknowledgementSettingsPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettings) *X12AcknowledgementSettings {
		return &v
	}).(X12AcknowledgementSettingsPtrOutput)
}

// The acknowledgement control number lower bound.
func (o X12AcknowledgementSettingsOutput) AcknowledgementControlNumberLowerBound() pulumi.IntOutput {
	return o.ApplyT(func(v X12AcknowledgementSettings) int { return v.AcknowledgementControlNumberLowerBound }).(pulumi.IntOutput)
}

// The acknowledgement control number prefix.
func (o X12AcknowledgementSettingsOutput) AcknowledgementControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettings) *string { return v.AcknowledgementControlNumberPrefix }).(pulumi.StringPtrOutput)
}

// The acknowledgement control number suffix.
func (o X12AcknowledgementSettingsOutput) AcknowledgementControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettings) *string { return v.AcknowledgementControlNumberSuffix }).(pulumi.StringPtrOutput)
}

// The acknowledgement control number upper bound.
func (o X12AcknowledgementSettingsOutput) AcknowledgementControlNumberUpperBound() pulumi.IntOutput {
	return o.ApplyT(func(v X12AcknowledgementSettings) int { return v.AcknowledgementControlNumberUpperBound }).(pulumi.IntOutput)
}

// The value indicating whether to batch functional acknowledgements.
func (o X12AcknowledgementSettingsOutput) BatchFunctionalAcknowledgements() pulumi.BoolOutput {
	return o.ApplyT(func(v X12AcknowledgementSettings) bool { return v.BatchFunctionalAcknowledgements }).(pulumi.BoolOutput)
}

// The value indicating whether to batch implementation acknowledgements.
func (o X12AcknowledgementSettingsOutput) BatchImplementationAcknowledgements() pulumi.BoolOutput {
	return o.ApplyT(func(v X12AcknowledgementSettings) bool { return v.BatchImplementationAcknowledgements }).(pulumi.BoolOutput)
}

// The value indicating whether to batch the technical acknowledgements.
func (o X12AcknowledgementSettingsOutput) BatchTechnicalAcknowledgements() pulumi.BoolOutput {
	return o.ApplyT(func(v X12AcknowledgementSettings) bool { return v.BatchTechnicalAcknowledgements }).(pulumi.BoolOutput)
}

// The functional acknowledgement version.
func (o X12AcknowledgementSettingsOutput) FunctionalAcknowledgementVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettings) *string { return v.FunctionalAcknowledgementVersion }).(pulumi.StringPtrOutput)
}

// The implementation acknowledgement version.
func (o X12AcknowledgementSettingsOutput) ImplementationAcknowledgementVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettings) *string { return v.ImplementationAcknowledgementVersion }).(pulumi.StringPtrOutput)
}

// The value indicating whether functional acknowledgement is needed.
func (o X12AcknowledgementSettingsOutput) NeedFunctionalAcknowledgement() pulumi.BoolOutput {
	return o.ApplyT(func(v X12AcknowledgementSettings) bool { return v.NeedFunctionalAcknowledgement }).(pulumi.BoolOutput)
}

// The value indicating whether implementation acknowledgement is needed.
func (o X12AcknowledgementSettingsOutput) NeedImplementationAcknowledgement() pulumi.BoolOutput {
	return o.ApplyT(func(v X12AcknowledgementSettings) bool { return v.NeedImplementationAcknowledgement }).(pulumi.BoolOutput)
}

// The value indicating whether a loop is needed for valid messages.
func (o X12AcknowledgementSettingsOutput) NeedLoopForValidMessages() pulumi.BoolOutput {
	return o.ApplyT(func(v X12AcknowledgementSettings) bool { return v.NeedLoopForValidMessages }).(pulumi.BoolOutput)
}

// The value indicating whether technical acknowledgement is needed.
func (o X12AcknowledgementSettingsOutput) NeedTechnicalAcknowledgement() pulumi.BoolOutput {
	return o.ApplyT(func(v X12AcknowledgementSettings) bool { return v.NeedTechnicalAcknowledgement }).(pulumi.BoolOutput)
}

// The value indicating whether to rollover acknowledgement control number.
func (o X12AcknowledgementSettingsOutput) RolloverAcknowledgementControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v X12AcknowledgementSettings) bool { return v.RolloverAcknowledgementControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to send synchronous acknowledgement.
func (o X12AcknowledgementSettingsOutput) SendSynchronousAcknowledgement() pulumi.BoolOutput {
	return o.ApplyT(func(v X12AcknowledgementSettings) bool { return v.SendSynchronousAcknowledgement }).(pulumi.BoolOutput)
}

type X12AcknowledgementSettingsPtrOutput struct{ *pulumi.OutputState }

func (X12AcknowledgementSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12AcknowledgementSettings)(nil)).Elem()
}

func (o X12AcknowledgementSettingsPtrOutput) ToX12AcknowledgementSettingsPtrOutput() X12AcknowledgementSettingsPtrOutput {
	return o
}

func (o X12AcknowledgementSettingsPtrOutput) ToX12AcknowledgementSettingsPtrOutputWithContext(ctx context.Context) X12AcknowledgementSettingsPtrOutput {
	return o
}

func (o X12AcknowledgementSettingsPtrOutput) Elem() X12AcknowledgementSettingsOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettings) X12AcknowledgementSettings { return *v }).(X12AcknowledgementSettingsOutput)
}

// The acknowledgement control number lower bound.
func (o X12AcknowledgementSettingsPtrOutput) AcknowledgementControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettings) *int {
		if v == nil {
			return nil
		}
		return &v.AcknowledgementControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The acknowledgement control number prefix.
func (o X12AcknowledgementSettingsPtrOutput) AcknowledgementControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettings) *string {
		if v == nil {
			return nil
		}
		return v.AcknowledgementControlNumberPrefix
	}).(pulumi.StringPtrOutput)
}

// The acknowledgement control number suffix.
func (o X12AcknowledgementSettingsPtrOutput) AcknowledgementControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettings) *string {
		if v == nil {
			return nil
		}
		return v.AcknowledgementControlNumberSuffix
	}).(pulumi.StringPtrOutput)
}

// The acknowledgement control number upper bound.
func (o X12AcknowledgementSettingsPtrOutput) AcknowledgementControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettings) *int {
		if v == nil {
			return nil
		}
		return &v.AcknowledgementControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The value indicating whether to batch functional acknowledgements.
func (o X12AcknowledgementSettingsPtrOutput) BatchFunctionalAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.BatchFunctionalAcknowledgements
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to batch implementation acknowledgements.
func (o X12AcknowledgementSettingsPtrOutput) BatchImplementationAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.BatchImplementationAcknowledgements
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to batch the technical acknowledgements.
func (o X12AcknowledgementSettingsPtrOutput) BatchTechnicalAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.BatchTechnicalAcknowledgements
	}).(pulumi.BoolPtrOutput)
}

// The functional acknowledgement version.
func (o X12AcknowledgementSettingsPtrOutput) FunctionalAcknowledgementVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettings) *string {
		if v == nil {
			return nil
		}
		return v.FunctionalAcknowledgementVersion
	}).(pulumi.StringPtrOutput)
}

// The implementation acknowledgement version.
func (o X12AcknowledgementSettingsPtrOutput) ImplementationAcknowledgementVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettings) *string {
		if v == nil {
			return nil
		}
		return v.ImplementationAcknowledgementVersion
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether functional acknowledgement is needed.
func (o X12AcknowledgementSettingsPtrOutput) NeedFunctionalAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.NeedFunctionalAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether implementation acknowledgement is needed.
func (o X12AcknowledgementSettingsPtrOutput) NeedImplementationAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.NeedImplementationAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether a loop is needed for valid messages.
func (o X12AcknowledgementSettingsPtrOutput) NeedLoopForValidMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.NeedLoopForValidMessages
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether technical acknowledgement is needed.
func (o X12AcknowledgementSettingsPtrOutput) NeedTechnicalAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.NeedTechnicalAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover acknowledgement control number.
func (o X12AcknowledgementSettingsPtrOutput) RolloverAcknowledgementControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.RolloverAcknowledgementControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to send synchronous acknowledgement.
func (o X12AcknowledgementSettingsPtrOutput) SendSynchronousAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.SendSynchronousAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

// The X12 agreement acknowledgement settings.
type X12AcknowledgementSettingsResponse struct {
	// The acknowledgement control number lower bound.
	AcknowledgementControlNumberLowerBound int `pulumi:"acknowledgementControlNumberLowerBound"`
	// The acknowledgement control number prefix.
	AcknowledgementControlNumberPrefix *string `pulumi:"acknowledgementControlNumberPrefix"`
	// The acknowledgement control number suffix.
	AcknowledgementControlNumberSuffix *string `pulumi:"acknowledgementControlNumberSuffix"`
	// The acknowledgement control number upper bound.
	AcknowledgementControlNumberUpperBound int `pulumi:"acknowledgementControlNumberUpperBound"`
	// The value indicating whether to batch functional acknowledgements.
	BatchFunctionalAcknowledgements bool `pulumi:"batchFunctionalAcknowledgements"`
	// The value indicating whether to batch implementation acknowledgements.
	BatchImplementationAcknowledgements bool `pulumi:"batchImplementationAcknowledgements"`
	// The value indicating whether to batch the technical acknowledgements.
	BatchTechnicalAcknowledgements bool `pulumi:"batchTechnicalAcknowledgements"`
	// The functional acknowledgement version.
	FunctionalAcknowledgementVersion *string `pulumi:"functionalAcknowledgementVersion"`
	// The implementation acknowledgement version.
	ImplementationAcknowledgementVersion *string `pulumi:"implementationAcknowledgementVersion"`
	// The value indicating whether functional acknowledgement is needed.
	NeedFunctionalAcknowledgement bool `pulumi:"needFunctionalAcknowledgement"`
	// The value indicating whether implementation acknowledgement is needed.
	NeedImplementationAcknowledgement bool `pulumi:"needImplementationAcknowledgement"`
	// The value indicating whether a loop is needed for valid messages.
	NeedLoopForValidMessages bool `pulumi:"needLoopForValidMessages"`
	// The value indicating whether technical acknowledgement is needed.
	NeedTechnicalAcknowledgement bool `pulumi:"needTechnicalAcknowledgement"`
	// The value indicating whether to rollover acknowledgement control number.
	RolloverAcknowledgementControlNumber bool `pulumi:"rolloverAcknowledgementControlNumber"`
	// The value indicating whether to send synchronous acknowledgement.
	SendSynchronousAcknowledgement bool `pulumi:"sendSynchronousAcknowledgement"`
}

// X12AcknowledgementSettingsResponseInput is an input type that accepts X12AcknowledgementSettingsResponseArgs and X12AcknowledgementSettingsResponseOutput values.
// You can construct a concrete instance of `X12AcknowledgementSettingsResponseInput` via:
//
//          X12AcknowledgementSettingsResponseArgs{...}
type X12AcknowledgementSettingsResponseInput interface {
	pulumi.Input

	ToX12AcknowledgementSettingsResponseOutput() X12AcknowledgementSettingsResponseOutput
	ToX12AcknowledgementSettingsResponseOutputWithContext(context.Context) X12AcknowledgementSettingsResponseOutput
}

// The X12 agreement acknowledgement settings.
type X12AcknowledgementSettingsResponseArgs struct {
	// The acknowledgement control number lower bound.
	AcknowledgementControlNumberLowerBound pulumi.IntInput `pulumi:"acknowledgementControlNumberLowerBound"`
	// The acknowledgement control number prefix.
	AcknowledgementControlNumberPrefix pulumi.StringPtrInput `pulumi:"acknowledgementControlNumberPrefix"`
	// The acknowledgement control number suffix.
	AcknowledgementControlNumberSuffix pulumi.StringPtrInput `pulumi:"acknowledgementControlNumberSuffix"`
	// The acknowledgement control number upper bound.
	AcknowledgementControlNumberUpperBound pulumi.IntInput `pulumi:"acknowledgementControlNumberUpperBound"`
	// The value indicating whether to batch functional acknowledgements.
	BatchFunctionalAcknowledgements pulumi.BoolInput `pulumi:"batchFunctionalAcknowledgements"`
	// The value indicating whether to batch implementation acknowledgements.
	BatchImplementationAcknowledgements pulumi.BoolInput `pulumi:"batchImplementationAcknowledgements"`
	// The value indicating whether to batch the technical acknowledgements.
	BatchTechnicalAcknowledgements pulumi.BoolInput `pulumi:"batchTechnicalAcknowledgements"`
	// The functional acknowledgement version.
	FunctionalAcknowledgementVersion pulumi.StringPtrInput `pulumi:"functionalAcknowledgementVersion"`
	// The implementation acknowledgement version.
	ImplementationAcknowledgementVersion pulumi.StringPtrInput `pulumi:"implementationAcknowledgementVersion"`
	// The value indicating whether functional acknowledgement is needed.
	NeedFunctionalAcknowledgement pulumi.BoolInput `pulumi:"needFunctionalAcknowledgement"`
	// The value indicating whether implementation acknowledgement is needed.
	NeedImplementationAcknowledgement pulumi.BoolInput `pulumi:"needImplementationAcknowledgement"`
	// The value indicating whether a loop is needed for valid messages.
	NeedLoopForValidMessages pulumi.BoolInput `pulumi:"needLoopForValidMessages"`
	// The value indicating whether technical acknowledgement is needed.
	NeedTechnicalAcknowledgement pulumi.BoolInput `pulumi:"needTechnicalAcknowledgement"`
	// The value indicating whether to rollover acknowledgement control number.
	RolloverAcknowledgementControlNumber pulumi.BoolInput `pulumi:"rolloverAcknowledgementControlNumber"`
	// The value indicating whether to send synchronous acknowledgement.
	SendSynchronousAcknowledgement pulumi.BoolInput `pulumi:"sendSynchronousAcknowledgement"`
}

func (X12AcknowledgementSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12AcknowledgementSettingsResponse)(nil)).Elem()
}

func (i X12AcknowledgementSettingsResponseArgs) ToX12AcknowledgementSettingsResponseOutput() X12AcknowledgementSettingsResponseOutput {
	return i.ToX12AcknowledgementSettingsResponseOutputWithContext(context.Background())
}

func (i X12AcknowledgementSettingsResponseArgs) ToX12AcknowledgementSettingsResponseOutputWithContext(ctx context.Context) X12AcknowledgementSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12AcknowledgementSettingsResponseOutput)
}

func (i X12AcknowledgementSettingsResponseArgs) ToX12AcknowledgementSettingsResponsePtrOutput() X12AcknowledgementSettingsResponsePtrOutput {
	return i.ToX12AcknowledgementSettingsResponsePtrOutputWithContext(context.Background())
}

func (i X12AcknowledgementSettingsResponseArgs) ToX12AcknowledgementSettingsResponsePtrOutputWithContext(ctx context.Context) X12AcknowledgementSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12AcknowledgementSettingsResponseOutput).ToX12AcknowledgementSettingsResponsePtrOutputWithContext(ctx)
}

// X12AcknowledgementSettingsResponsePtrInput is an input type that accepts X12AcknowledgementSettingsResponseArgs, X12AcknowledgementSettingsResponsePtr and X12AcknowledgementSettingsResponsePtrOutput values.
// You can construct a concrete instance of `X12AcknowledgementSettingsResponsePtrInput` via:
//
//          X12AcknowledgementSettingsResponseArgs{...}
//
//  or:
//
//          nil
type X12AcknowledgementSettingsResponsePtrInput interface {
	pulumi.Input

	ToX12AcknowledgementSettingsResponsePtrOutput() X12AcknowledgementSettingsResponsePtrOutput
	ToX12AcknowledgementSettingsResponsePtrOutputWithContext(context.Context) X12AcknowledgementSettingsResponsePtrOutput
}

type x12acknowledgementSettingsResponsePtrType X12AcknowledgementSettingsResponseArgs

func X12AcknowledgementSettingsResponsePtr(v *X12AcknowledgementSettingsResponseArgs) X12AcknowledgementSettingsResponsePtrInput {
	return (*x12acknowledgementSettingsResponsePtrType)(v)
}

func (*x12acknowledgementSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12AcknowledgementSettingsResponse)(nil)).Elem()
}

func (i *x12acknowledgementSettingsResponsePtrType) ToX12AcknowledgementSettingsResponsePtrOutput() X12AcknowledgementSettingsResponsePtrOutput {
	return i.ToX12AcknowledgementSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *x12acknowledgementSettingsResponsePtrType) ToX12AcknowledgementSettingsResponsePtrOutputWithContext(ctx context.Context) X12AcknowledgementSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12AcknowledgementSettingsResponsePtrOutput)
}

// The X12 agreement acknowledgement settings.
type X12AcknowledgementSettingsResponseOutput struct{ *pulumi.OutputState }

func (X12AcknowledgementSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12AcknowledgementSettingsResponse)(nil)).Elem()
}

func (o X12AcknowledgementSettingsResponseOutput) ToX12AcknowledgementSettingsResponseOutput() X12AcknowledgementSettingsResponseOutput {
	return o
}

func (o X12AcknowledgementSettingsResponseOutput) ToX12AcknowledgementSettingsResponseOutputWithContext(ctx context.Context) X12AcknowledgementSettingsResponseOutput {
	return o
}

func (o X12AcknowledgementSettingsResponseOutput) ToX12AcknowledgementSettingsResponsePtrOutput() X12AcknowledgementSettingsResponsePtrOutput {
	return o.ToX12AcknowledgementSettingsResponsePtrOutputWithContext(context.Background())
}

func (o X12AcknowledgementSettingsResponseOutput) ToX12AcknowledgementSettingsResponsePtrOutputWithContext(ctx context.Context) X12AcknowledgementSettingsResponsePtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *X12AcknowledgementSettingsResponse {
		return &v
	}).(X12AcknowledgementSettingsResponsePtrOutput)
}

// The acknowledgement control number lower bound.
func (o X12AcknowledgementSettingsResponseOutput) AcknowledgementControlNumberLowerBound() pulumi.IntOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) int { return v.AcknowledgementControlNumberLowerBound }).(pulumi.IntOutput)
}

// The acknowledgement control number prefix.
func (o X12AcknowledgementSettingsResponseOutput) AcknowledgementControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *string { return v.AcknowledgementControlNumberPrefix }).(pulumi.StringPtrOutput)
}

// The acknowledgement control number suffix.
func (o X12AcknowledgementSettingsResponseOutput) AcknowledgementControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *string { return v.AcknowledgementControlNumberSuffix }).(pulumi.StringPtrOutput)
}

// The acknowledgement control number upper bound.
func (o X12AcknowledgementSettingsResponseOutput) AcknowledgementControlNumberUpperBound() pulumi.IntOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) int { return v.AcknowledgementControlNumberUpperBound }).(pulumi.IntOutput)
}

// The value indicating whether to batch functional acknowledgements.
func (o X12AcknowledgementSettingsResponseOutput) BatchFunctionalAcknowledgements() pulumi.BoolOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) bool { return v.BatchFunctionalAcknowledgements }).(pulumi.BoolOutput)
}

// The value indicating whether to batch implementation acknowledgements.
func (o X12AcknowledgementSettingsResponseOutput) BatchImplementationAcknowledgements() pulumi.BoolOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) bool { return v.BatchImplementationAcknowledgements }).(pulumi.BoolOutput)
}

// The value indicating whether to batch the technical acknowledgements.
func (o X12AcknowledgementSettingsResponseOutput) BatchTechnicalAcknowledgements() pulumi.BoolOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) bool { return v.BatchTechnicalAcknowledgements }).(pulumi.BoolOutput)
}

// The functional acknowledgement version.
func (o X12AcknowledgementSettingsResponseOutput) FunctionalAcknowledgementVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *string { return v.FunctionalAcknowledgementVersion }).(pulumi.StringPtrOutput)
}

// The implementation acknowledgement version.
func (o X12AcknowledgementSettingsResponseOutput) ImplementationAcknowledgementVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *string { return v.ImplementationAcknowledgementVersion }).(pulumi.StringPtrOutput)
}

// The value indicating whether functional acknowledgement is needed.
func (o X12AcknowledgementSettingsResponseOutput) NeedFunctionalAcknowledgement() pulumi.BoolOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) bool { return v.NeedFunctionalAcknowledgement }).(pulumi.BoolOutput)
}

// The value indicating whether implementation acknowledgement is needed.
func (o X12AcknowledgementSettingsResponseOutput) NeedImplementationAcknowledgement() pulumi.BoolOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) bool { return v.NeedImplementationAcknowledgement }).(pulumi.BoolOutput)
}

// The value indicating whether a loop is needed for valid messages.
func (o X12AcknowledgementSettingsResponseOutput) NeedLoopForValidMessages() pulumi.BoolOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) bool { return v.NeedLoopForValidMessages }).(pulumi.BoolOutput)
}

// The value indicating whether technical acknowledgement is needed.
func (o X12AcknowledgementSettingsResponseOutput) NeedTechnicalAcknowledgement() pulumi.BoolOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) bool { return v.NeedTechnicalAcknowledgement }).(pulumi.BoolOutput)
}

// The value indicating whether to rollover acknowledgement control number.
func (o X12AcknowledgementSettingsResponseOutput) RolloverAcknowledgementControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) bool { return v.RolloverAcknowledgementControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to send synchronous acknowledgement.
func (o X12AcknowledgementSettingsResponseOutput) SendSynchronousAcknowledgement() pulumi.BoolOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) bool { return v.SendSynchronousAcknowledgement }).(pulumi.BoolOutput)
}

type X12AcknowledgementSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (X12AcknowledgementSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12AcknowledgementSettingsResponse)(nil)).Elem()
}

func (o X12AcknowledgementSettingsResponsePtrOutput) ToX12AcknowledgementSettingsResponsePtrOutput() X12AcknowledgementSettingsResponsePtrOutput {
	return o
}

func (o X12AcknowledgementSettingsResponsePtrOutput) ToX12AcknowledgementSettingsResponsePtrOutputWithContext(ctx context.Context) X12AcknowledgementSettingsResponsePtrOutput {
	return o
}

func (o X12AcknowledgementSettingsResponsePtrOutput) Elem() X12AcknowledgementSettingsResponseOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) X12AcknowledgementSettingsResponse { return *v }).(X12AcknowledgementSettingsResponseOutput)
}

// The acknowledgement control number lower bound.
func (o X12AcknowledgementSettingsResponsePtrOutput) AcknowledgementControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.AcknowledgementControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The acknowledgement control number prefix.
func (o X12AcknowledgementSettingsResponsePtrOutput) AcknowledgementControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AcknowledgementControlNumberPrefix
	}).(pulumi.StringPtrOutput)
}

// The acknowledgement control number suffix.
func (o X12AcknowledgementSettingsResponsePtrOutput) AcknowledgementControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AcknowledgementControlNumberSuffix
	}).(pulumi.StringPtrOutput)
}

// The acknowledgement control number upper bound.
func (o X12AcknowledgementSettingsResponsePtrOutput) AcknowledgementControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.AcknowledgementControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The value indicating whether to batch functional acknowledgements.
func (o X12AcknowledgementSettingsResponsePtrOutput) BatchFunctionalAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.BatchFunctionalAcknowledgements
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to batch implementation acknowledgements.
func (o X12AcknowledgementSettingsResponsePtrOutput) BatchImplementationAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.BatchImplementationAcknowledgements
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to batch the technical acknowledgements.
func (o X12AcknowledgementSettingsResponsePtrOutput) BatchTechnicalAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.BatchTechnicalAcknowledgements
	}).(pulumi.BoolPtrOutput)
}

// The functional acknowledgement version.
func (o X12AcknowledgementSettingsResponsePtrOutput) FunctionalAcknowledgementVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.FunctionalAcknowledgementVersion
	}).(pulumi.StringPtrOutput)
}

// The implementation acknowledgement version.
func (o X12AcknowledgementSettingsResponsePtrOutput) ImplementationAcknowledgementVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ImplementationAcknowledgementVersion
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether functional acknowledgement is needed.
func (o X12AcknowledgementSettingsResponsePtrOutput) NeedFunctionalAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.NeedFunctionalAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether implementation acknowledgement is needed.
func (o X12AcknowledgementSettingsResponsePtrOutput) NeedImplementationAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.NeedImplementationAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether a loop is needed for valid messages.
func (o X12AcknowledgementSettingsResponsePtrOutput) NeedLoopForValidMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.NeedLoopForValidMessages
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether technical acknowledgement is needed.
func (o X12AcknowledgementSettingsResponsePtrOutput) NeedTechnicalAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.NeedTechnicalAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover acknowledgement control number.
func (o X12AcknowledgementSettingsResponsePtrOutput) RolloverAcknowledgementControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.RolloverAcknowledgementControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to send synchronous acknowledgement.
func (o X12AcknowledgementSettingsResponsePtrOutput) SendSynchronousAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.SendSynchronousAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

// The X12 agreement content.
type X12AgreementContent struct {
	// The X12 one-way receive agreement.
	ReceiveAgreement X12OneWayAgreement `pulumi:"receiveAgreement"`
	// The X12 one-way send agreement.
	SendAgreement X12OneWayAgreement `pulumi:"sendAgreement"`
}

// X12AgreementContentInput is an input type that accepts X12AgreementContentArgs and X12AgreementContentOutput values.
// You can construct a concrete instance of `X12AgreementContentInput` via:
//
//          X12AgreementContentArgs{...}
type X12AgreementContentInput interface {
	pulumi.Input

	ToX12AgreementContentOutput() X12AgreementContentOutput
	ToX12AgreementContentOutputWithContext(context.Context) X12AgreementContentOutput
}

// The X12 agreement content.
type X12AgreementContentArgs struct {
	// The X12 one-way receive agreement.
	ReceiveAgreement X12OneWayAgreementInput `pulumi:"receiveAgreement"`
	// The X12 one-way send agreement.
	SendAgreement X12OneWayAgreementInput `pulumi:"sendAgreement"`
}

func (X12AgreementContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12AgreementContent)(nil)).Elem()
}

func (i X12AgreementContentArgs) ToX12AgreementContentOutput() X12AgreementContentOutput {
	return i.ToX12AgreementContentOutputWithContext(context.Background())
}

func (i X12AgreementContentArgs) ToX12AgreementContentOutputWithContext(ctx context.Context) X12AgreementContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12AgreementContentOutput)
}

func (i X12AgreementContentArgs) ToX12AgreementContentPtrOutput() X12AgreementContentPtrOutput {
	return i.ToX12AgreementContentPtrOutputWithContext(context.Background())
}

func (i X12AgreementContentArgs) ToX12AgreementContentPtrOutputWithContext(ctx context.Context) X12AgreementContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12AgreementContentOutput).ToX12AgreementContentPtrOutputWithContext(ctx)
}

// X12AgreementContentPtrInput is an input type that accepts X12AgreementContentArgs, X12AgreementContentPtr and X12AgreementContentPtrOutput values.
// You can construct a concrete instance of `X12AgreementContentPtrInput` via:
//
//          X12AgreementContentArgs{...}
//
//  or:
//
//          nil
type X12AgreementContentPtrInput interface {
	pulumi.Input

	ToX12AgreementContentPtrOutput() X12AgreementContentPtrOutput
	ToX12AgreementContentPtrOutputWithContext(context.Context) X12AgreementContentPtrOutput
}

type x12agreementContentPtrType X12AgreementContentArgs

func X12AgreementContentPtr(v *X12AgreementContentArgs) X12AgreementContentPtrInput {
	return (*x12agreementContentPtrType)(v)
}

func (*x12agreementContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12AgreementContent)(nil)).Elem()
}

func (i *x12agreementContentPtrType) ToX12AgreementContentPtrOutput() X12AgreementContentPtrOutput {
	return i.ToX12AgreementContentPtrOutputWithContext(context.Background())
}

func (i *x12agreementContentPtrType) ToX12AgreementContentPtrOutputWithContext(ctx context.Context) X12AgreementContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12AgreementContentPtrOutput)
}

// The X12 agreement content.
type X12AgreementContentOutput struct{ *pulumi.OutputState }

func (X12AgreementContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12AgreementContent)(nil)).Elem()
}

func (o X12AgreementContentOutput) ToX12AgreementContentOutput() X12AgreementContentOutput {
	return o
}

func (o X12AgreementContentOutput) ToX12AgreementContentOutputWithContext(ctx context.Context) X12AgreementContentOutput {
	return o
}

func (o X12AgreementContentOutput) ToX12AgreementContentPtrOutput() X12AgreementContentPtrOutput {
	return o.ToX12AgreementContentPtrOutputWithContext(context.Background())
}

func (o X12AgreementContentOutput) ToX12AgreementContentPtrOutputWithContext(ctx context.Context) X12AgreementContentPtrOutput {
	return o.ApplyT(func(v X12AgreementContent) *X12AgreementContent {
		return &v
	}).(X12AgreementContentPtrOutput)
}

// The X12 one-way receive agreement.
func (o X12AgreementContentOutput) ReceiveAgreement() X12OneWayAgreementOutput {
	return o.ApplyT(func(v X12AgreementContent) X12OneWayAgreement { return v.ReceiveAgreement }).(X12OneWayAgreementOutput)
}

// The X12 one-way send agreement.
func (o X12AgreementContentOutput) SendAgreement() X12OneWayAgreementOutput {
	return o.ApplyT(func(v X12AgreementContent) X12OneWayAgreement { return v.SendAgreement }).(X12OneWayAgreementOutput)
}

type X12AgreementContentPtrOutput struct{ *pulumi.OutputState }

func (X12AgreementContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12AgreementContent)(nil)).Elem()
}

func (o X12AgreementContentPtrOutput) ToX12AgreementContentPtrOutput() X12AgreementContentPtrOutput {
	return o
}

func (o X12AgreementContentPtrOutput) ToX12AgreementContentPtrOutputWithContext(ctx context.Context) X12AgreementContentPtrOutput {
	return o
}

func (o X12AgreementContentPtrOutput) Elem() X12AgreementContentOutput {
	return o.ApplyT(func(v *X12AgreementContent) X12AgreementContent { return *v }).(X12AgreementContentOutput)
}

// The X12 one-way receive agreement.
func (o X12AgreementContentPtrOutput) ReceiveAgreement() X12OneWayAgreementPtrOutput {
	return o.ApplyT(func(v *X12AgreementContent) *X12OneWayAgreement {
		if v == nil {
			return nil
		}
		return &v.ReceiveAgreement
	}).(X12OneWayAgreementPtrOutput)
}

// The X12 one-way send agreement.
func (o X12AgreementContentPtrOutput) SendAgreement() X12OneWayAgreementPtrOutput {
	return o.ApplyT(func(v *X12AgreementContent) *X12OneWayAgreement {
		if v == nil {
			return nil
		}
		return &v.SendAgreement
	}).(X12OneWayAgreementPtrOutput)
}

// The X12 agreement content.
type X12AgreementContentResponse struct {
	// The X12 one-way receive agreement.
	ReceiveAgreement X12OneWayAgreementResponse `pulumi:"receiveAgreement"`
	// The X12 one-way send agreement.
	SendAgreement X12OneWayAgreementResponse `pulumi:"sendAgreement"`
}

// X12AgreementContentResponseInput is an input type that accepts X12AgreementContentResponseArgs and X12AgreementContentResponseOutput values.
// You can construct a concrete instance of `X12AgreementContentResponseInput` via:
//
//          X12AgreementContentResponseArgs{...}
type X12AgreementContentResponseInput interface {
	pulumi.Input

	ToX12AgreementContentResponseOutput() X12AgreementContentResponseOutput
	ToX12AgreementContentResponseOutputWithContext(context.Context) X12AgreementContentResponseOutput
}

// The X12 agreement content.
type X12AgreementContentResponseArgs struct {
	// The X12 one-way receive agreement.
	ReceiveAgreement X12OneWayAgreementResponseInput `pulumi:"receiveAgreement"`
	// The X12 one-way send agreement.
	SendAgreement X12OneWayAgreementResponseInput `pulumi:"sendAgreement"`
}

func (X12AgreementContentResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12AgreementContentResponse)(nil)).Elem()
}

func (i X12AgreementContentResponseArgs) ToX12AgreementContentResponseOutput() X12AgreementContentResponseOutput {
	return i.ToX12AgreementContentResponseOutputWithContext(context.Background())
}

func (i X12AgreementContentResponseArgs) ToX12AgreementContentResponseOutputWithContext(ctx context.Context) X12AgreementContentResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12AgreementContentResponseOutput)
}

func (i X12AgreementContentResponseArgs) ToX12AgreementContentResponsePtrOutput() X12AgreementContentResponsePtrOutput {
	return i.ToX12AgreementContentResponsePtrOutputWithContext(context.Background())
}

func (i X12AgreementContentResponseArgs) ToX12AgreementContentResponsePtrOutputWithContext(ctx context.Context) X12AgreementContentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12AgreementContentResponseOutput).ToX12AgreementContentResponsePtrOutputWithContext(ctx)
}

// X12AgreementContentResponsePtrInput is an input type that accepts X12AgreementContentResponseArgs, X12AgreementContentResponsePtr and X12AgreementContentResponsePtrOutput values.
// You can construct a concrete instance of `X12AgreementContentResponsePtrInput` via:
//
//          X12AgreementContentResponseArgs{...}
//
//  or:
//
//          nil
type X12AgreementContentResponsePtrInput interface {
	pulumi.Input

	ToX12AgreementContentResponsePtrOutput() X12AgreementContentResponsePtrOutput
	ToX12AgreementContentResponsePtrOutputWithContext(context.Context) X12AgreementContentResponsePtrOutput
}

type x12agreementContentResponsePtrType X12AgreementContentResponseArgs

func X12AgreementContentResponsePtr(v *X12AgreementContentResponseArgs) X12AgreementContentResponsePtrInput {
	return (*x12agreementContentResponsePtrType)(v)
}

func (*x12agreementContentResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12AgreementContentResponse)(nil)).Elem()
}

func (i *x12agreementContentResponsePtrType) ToX12AgreementContentResponsePtrOutput() X12AgreementContentResponsePtrOutput {
	return i.ToX12AgreementContentResponsePtrOutputWithContext(context.Background())
}

func (i *x12agreementContentResponsePtrType) ToX12AgreementContentResponsePtrOutputWithContext(ctx context.Context) X12AgreementContentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12AgreementContentResponsePtrOutput)
}

// The X12 agreement content.
type X12AgreementContentResponseOutput struct{ *pulumi.OutputState }

func (X12AgreementContentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12AgreementContentResponse)(nil)).Elem()
}

func (o X12AgreementContentResponseOutput) ToX12AgreementContentResponseOutput() X12AgreementContentResponseOutput {
	return o
}

func (o X12AgreementContentResponseOutput) ToX12AgreementContentResponseOutputWithContext(ctx context.Context) X12AgreementContentResponseOutput {
	return o
}

func (o X12AgreementContentResponseOutput) ToX12AgreementContentResponsePtrOutput() X12AgreementContentResponsePtrOutput {
	return o.ToX12AgreementContentResponsePtrOutputWithContext(context.Background())
}

func (o X12AgreementContentResponseOutput) ToX12AgreementContentResponsePtrOutputWithContext(ctx context.Context) X12AgreementContentResponsePtrOutput {
	return o.ApplyT(func(v X12AgreementContentResponse) *X12AgreementContentResponse {
		return &v
	}).(X12AgreementContentResponsePtrOutput)
}

// The X12 one-way receive agreement.
func (o X12AgreementContentResponseOutput) ReceiveAgreement() X12OneWayAgreementResponseOutput {
	return o.ApplyT(func(v X12AgreementContentResponse) X12OneWayAgreementResponse { return v.ReceiveAgreement }).(X12OneWayAgreementResponseOutput)
}

// The X12 one-way send agreement.
func (o X12AgreementContentResponseOutput) SendAgreement() X12OneWayAgreementResponseOutput {
	return o.ApplyT(func(v X12AgreementContentResponse) X12OneWayAgreementResponse { return v.SendAgreement }).(X12OneWayAgreementResponseOutput)
}

type X12AgreementContentResponsePtrOutput struct{ *pulumi.OutputState }

func (X12AgreementContentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12AgreementContentResponse)(nil)).Elem()
}

func (o X12AgreementContentResponsePtrOutput) ToX12AgreementContentResponsePtrOutput() X12AgreementContentResponsePtrOutput {
	return o
}

func (o X12AgreementContentResponsePtrOutput) ToX12AgreementContentResponsePtrOutputWithContext(ctx context.Context) X12AgreementContentResponsePtrOutput {
	return o
}

func (o X12AgreementContentResponsePtrOutput) Elem() X12AgreementContentResponseOutput {
	return o.ApplyT(func(v *X12AgreementContentResponse) X12AgreementContentResponse { return *v }).(X12AgreementContentResponseOutput)
}

// The X12 one-way receive agreement.
func (o X12AgreementContentResponsePtrOutput) ReceiveAgreement() X12OneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v *X12AgreementContentResponse) *X12OneWayAgreementResponse {
		if v == nil {
			return nil
		}
		return &v.ReceiveAgreement
	}).(X12OneWayAgreementResponsePtrOutput)
}

// The X12 one-way send agreement.
func (o X12AgreementContentResponsePtrOutput) SendAgreement() X12OneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v *X12AgreementContentResponse) *X12OneWayAgreementResponse {
		if v == nil {
			return nil
		}
		return &v.SendAgreement
	}).(X12OneWayAgreementResponsePtrOutput)
}

// The X12 delimiter override settings.
type X12DelimiterOverrides struct {
	// The component separator.
	ComponentSeparator int `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator int `pulumi:"dataElementSeparator"`
	// The message id.
	MessageId *string `pulumi:"messageId"`
	// The protocol version.
	ProtocolVersion *string `pulumi:"protocolVersion"`
	// The replacement character.
	ReplaceCharacter int `pulumi:"replaceCharacter"`
	// The value indicating whether to replace separators in payload.
	ReplaceSeparatorsInPayload bool `pulumi:"replaceSeparatorsInPayload"`
	// The segment terminator.
	SegmentTerminator int `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix string `pulumi:"segmentTerminatorSuffix"`
	// The target namespace on which this delimiter settings has to be applied.
	TargetNamespace *string `pulumi:"targetNamespace"`
}

// X12DelimiterOverridesInput is an input type that accepts X12DelimiterOverridesArgs and X12DelimiterOverridesOutput values.
// You can construct a concrete instance of `X12DelimiterOverridesInput` via:
//
//          X12DelimiterOverridesArgs{...}
type X12DelimiterOverridesInput interface {
	pulumi.Input

	ToX12DelimiterOverridesOutput() X12DelimiterOverridesOutput
	ToX12DelimiterOverridesOutputWithContext(context.Context) X12DelimiterOverridesOutput
}

// The X12 delimiter override settings.
type X12DelimiterOverridesArgs struct {
	// The component separator.
	ComponentSeparator pulumi.IntInput `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator pulumi.IntInput `pulumi:"dataElementSeparator"`
	// The message id.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
	// The protocol version.
	ProtocolVersion pulumi.StringPtrInput `pulumi:"protocolVersion"`
	// The replacement character.
	ReplaceCharacter pulumi.IntInput `pulumi:"replaceCharacter"`
	// The value indicating whether to replace separators in payload.
	ReplaceSeparatorsInPayload pulumi.BoolInput `pulumi:"replaceSeparatorsInPayload"`
	// The segment terminator.
	SegmentTerminator pulumi.IntInput `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix pulumi.StringInput `pulumi:"segmentTerminatorSuffix"`
	// The target namespace on which this delimiter settings has to be applied.
	TargetNamespace pulumi.StringPtrInput `pulumi:"targetNamespace"`
}

func (X12DelimiterOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12DelimiterOverrides)(nil)).Elem()
}

func (i X12DelimiterOverridesArgs) ToX12DelimiterOverridesOutput() X12DelimiterOverridesOutput {
	return i.ToX12DelimiterOverridesOutputWithContext(context.Background())
}

func (i X12DelimiterOverridesArgs) ToX12DelimiterOverridesOutputWithContext(ctx context.Context) X12DelimiterOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12DelimiterOverridesOutput)
}

// X12DelimiterOverridesArrayInput is an input type that accepts X12DelimiterOverridesArray and X12DelimiterOverridesArrayOutput values.
// You can construct a concrete instance of `X12DelimiterOverridesArrayInput` via:
//
//          X12DelimiterOverridesArray{ X12DelimiterOverridesArgs{...} }
type X12DelimiterOverridesArrayInput interface {
	pulumi.Input

	ToX12DelimiterOverridesArrayOutput() X12DelimiterOverridesArrayOutput
	ToX12DelimiterOverridesArrayOutputWithContext(context.Context) X12DelimiterOverridesArrayOutput
}

type X12DelimiterOverridesArray []X12DelimiterOverridesInput

func (X12DelimiterOverridesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12DelimiterOverrides)(nil)).Elem()
}

func (i X12DelimiterOverridesArray) ToX12DelimiterOverridesArrayOutput() X12DelimiterOverridesArrayOutput {
	return i.ToX12DelimiterOverridesArrayOutputWithContext(context.Background())
}

func (i X12DelimiterOverridesArray) ToX12DelimiterOverridesArrayOutputWithContext(ctx context.Context) X12DelimiterOverridesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12DelimiterOverridesArrayOutput)
}

// The X12 delimiter override settings.
type X12DelimiterOverridesOutput struct{ *pulumi.OutputState }

func (X12DelimiterOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12DelimiterOverrides)(nil)).Elem()
}

func (o X12DelimiterOverridesOutput) ToX12DelimiterOverridesOutput() X12DelimiterOverridesOutput {
	return o
}

func (o X12DelimiterOverridesOutput) ToX12DelimiterOverridesOutputWithContext(ctx context.Context) X12DelimiterOverridesOutput {
	return o
}

// The component separator.
func (o X12DelimiterOverridesOutput) ComponentSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v X12DelimiterOverrides) int { return v.ComponentSeparator }).(pulumi.IntOutput)
}

// The data element separator.
func (o X12DelimiterOverridesOutput) DataElementSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v X12DelimiterOverrides) int { return v.DataElementSeparator }).(pulumi.IntOutput)
}

// The message id.
func (o X12DelimiterOverridesOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12DelimiterOverrides) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// The protocol version.
func (o X12DelimiterOverridesOutput) ProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12DelimiterOverrides) *string { return v.ProtocolVersion }).(pulumi.StringPtrOutput)
}

// The replacement character.
func (o X12DelimiterOverridesOutput) ReplaceCharacter() pulumi.IntOutput {
	return o.ApplyT(func(v X12DelimiterOverrides) int { return v.ReplaceCharacter }).(pulumi.IntOutput)
}

// The value indicating whether to replace separators in payload.
func (o X12DelimiterOverridesOutput) ReplaceSeparatorsInPayload() pulumi.BoolOutput {
	return o.ApplyT(func(v X12DelimiterOverrides) bool { return v.ReplaceSeparatorsInPayload }).(pulumi.BoolOutput)
}

// The segment terminator.
func (o X12DelimiterOverridesOutput) SegmentTerminator() pulumi.IntOutput {
	return o.ApplyT(func(v X12DelimiterOverrides) int { return v.SegmentTerminator }).(pulumi.IntOutput)
}

// The segment terminator suffix.
func (o X12DelimiterOverridesOutput) SegmentTerminatorSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v X12DelimiterOverrides) string { return v.SegmentTerminatorSuffix }).(pulumi.StringOutput)
}

// The target namespace on which this delimiter settings has to be applied.
func (o X12DelimiterOverridesOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12DelimiterOverrides) *string { return v.TargetNamespace }).(pulumi.StringPtrOutput)
}

type X12DelimiterOverridesArrayOutput struct{ *pulumi.OutputState }

func (X12DelimiterOverridesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12DelimiterOverrides)(nil)).Elem()
}

func (o X12DelimiterOverridesArrayOutput) ToX12DelimiterOverridesArrayOutput() X12DelimiterOverridesArrayOutput {
	return o
}

func (o X12DelimiterOverridesArrayOutput) ToX12DelimiterOverridesArrayOutputWithContext(ctx context.Context) X12DelimiterOverridesArrayOutput {
	return o
}

func (o X12DelimiterOverridesArrayOutput) Index(i pulumi.IntInput) X12DelimiterOverridesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X12DelimiterOverrides {
		return vs[0].([]X12DelimiterOverrides)[vs[1].(int)]
	}).(X12DelimiterOverridesOutput)
}

// The X12 delimiter override settings.
type X12DelimiterOverridesResponse struct {
	// The component separator.
	ComponentSeparator int `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator int `pulumi:"dataElementSeparator"`
	// The message id.
	MessageId *string `pulumi:"messageId"`
	// The protocol version.
	ProtocolVersion *string `pulumi:"protocolVersion"`
	// The replacement character.
	ReplaceCharacter int `pulumi:"replaceCharacter"`
	// The value indicating whether to replace separators in payload.
	ReplaceSeparatorsInPayload bool `pulumi:"replaceSeparatorsInPayload"`
	// The segment terminator.
	SegmentTerminator int `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix string `pulumi:"segmentTerminatorSuffix"`
	// The target namespace on which this delimiter settings has to be applied.
	TargetNamespace *string `pulumi:"targetNamespace"`
}

// X12DelimiterOverridesResponseInput is an input type that accepts X12DelimiterOverridesResponseArgs and X12DelimiterOverridesResponseOutput values.
// You can construct a concrete instance of `X12DelimiterOverridesResponseInput` via:
//
//          X12DelimiterOverridesResponseArgs{...}
type X12DelimiterOverridesResponseInput interface {
	pulumi.Input

	ToX12DelimiterOverridesResponseOutput() X12DelimiterOverridesResponseOutput
	ToX12DelimiterOverridesResponseOutputWithContext(context.Context) X12DelimiterOverridesResponseOutput
}

// The X12 delimiter override settings.
type X12DelimiterOverridesResponseArgs struct {
	// The component separator.
	ComponentSeparator pulumi.IntInput `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator pulumi.IntInput `pulumi:"dataElementSeparator"`
	// The message id.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
	// The protocol version.
	ProtocolVersion pulumi.StringPtrInput `pulumi:"protocolVersion"`
	// The replacement character.
	ReplaceCharacter pulumi.IntInput `pulumi:"replaceCharacter"`
	// The value indicating whether to replace separators in payload.
	ReplaceSeparatorsInPayload pulumi.BoolInput `pulumi:"replaceSeparatorsInPayload"`
	// The segment terminator.
	SegmentTerminator pulumi.IntInput `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix pulumi.StringInput `pulumi:"segmentTerminatorSuffix"`
	// The target namespace on which this delimiter settings has to be applied.
	TargetNamespace pulumi.StringPtrInput `pulumi:"targetNamespace"`
}

func (X12DelimiterOverridesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12DelimiterOverridesResponse)(nil)).Elem()
}

func (i X12DelimiterOverridesResponseArgs) ToX12DelimiterOverridesResponseOutput() X12DelimiterOverridesResponseOutput {
	return i.ToX12DelimiterOverridesResponseOutputWithContext(context.Background())
}

func (i X12DelimiterOverridesResponseArgs) ToX12DelimiterOverridesResponseOutputWithContext(ctx context.Context) X12DelimiterOverridesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12DelimiterOverridesResponseOutput)
}

// X12DelimiterOverridesResponseArrayInput is an input type that accepts X12DelimiterOverridesResponseArray and X12DelimiterOverridesResponseArrayOutput values.
// You can construct a concrete instance of `X12DelimiterOverridesResponseArrayInput` via:
//
//          X12DelimiterOverridesResponseArray{ X12DelimiterOverridesResponseArgs{...} }
type X12DelimiterOverridesResponseArrayInput interface {
	pulumi.Input

	ToX12DelimiterOverridesResponseArrayOutput() X12DelimiterOverridesResponseArrayOutput
	ToX12DelimiterOverridesResponseArrayOutputWithContext(context.Context) X12DelimiterOverridesResponseArrayOutput
}

type X12DelimiterOverridesResponseArray []X12DelimiterOverridesResponseInput

func (X12DelimiterOverridesResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12DelimiterOverridesResponse)(nil)).Elem()
}

func (i X12DelimiterOverridesResponseArray) ToX12DelimiterOverridesResponseArrayOutput() X12DelimiterOverridesResponseArrayOutput {
	return i.ToX12DelimiterOverridesResponseArrayOutputWithContext(context.Background())
}

func (i X12DelimiterOverridesResponseArray) ToX12DelimiterOverridesResponseArrayOutputWithContext(ctx context.Context) X12DelimiterOverridesResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12DelimiterOverridesResponseArrayOutput)
}

// The X12 delimiter override settings.
type X12DelimiterOverridesResponseOutput struct{ *pulumi.OutputState }

func (X12DelimiterOverridesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12DelimiterOverridesResponse)(nil)).Elem()
}

func (o X12DelimiterOverridesResponseOutput) ToX12DelimiterOverridesResponseOutput() X12DelimiterOverridesResponseOutput {
	return o
}

func (o X12DelimiterOverridesResponseOutput) ToX12DelimiterOverridesResponseOutputWithContext(ctx context.Context) X12DelimiterOverridesResponseOutput {
	return o
}

// The component separator.
func (o X12DelimiterOverridesResponseOutput) ComponentSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v X12DelimiterOverridesResponse) int { return v.ComponentSeparator }).(pulumi.IntOutput)
}

// The data element separator.
func (o X12DelimiterOverridesResponseOutput) DataElementSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v X12DelimiterOverridesResponse) int { return v.DataElementSeparator }).(pulumi.IntOutput)
}

// The message id.
func (o X12DelimiterOverridesResponseOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12DelimiterOverridesResponse) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// The protocol version.
func (o X12DelimiterOverridesResponseOutput) ProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12DelimiterOverridesResponse) *string { return v.ProtocolVersion }).(pulumi.StringPtrOutput)
}

// The replacement character.
func (o X12DelimiterOverridesResponseOutput) ReplaceCharacter() pulumi.IntOutput {
	return o.ApplyT(func(v X12DelimiterOverridesResponse) int { return v.ReplaceCharacter }).(pulumi.IntOutput)
}

// The value indicating whether to replace separators in payload.
func (o X12DelimiterOverridesResponseOutput) ReplaceSeparatorsInPayload() pulumi.BoolOutput {
	return o.ApplyT(func(v X12DelimiterOverridesResponse) bool { return v.ReplaceSeparatorsInPayload }).(pulumi.BoolOutput)
}

// The segment terminator.
func (o X12DelimiterOverridesResponseOutput) SegmentTerminator() pulumi.IntOutput {
	return o.ApplyT(func(v X12DelimiterOverridesResponse) int { return v.SegmentTerminator }).(pulumi.IntOutput)
}

// The segment terminator suffix.
func (o X12DelimiterOverridesResponseOutput) SegmentTerminatorSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v X12DelimiterOverridesResponse) string { return v.SegmentTerminatorSuffix }).(pulumi.StringOutput)
}

// The target namespace on which this delimiter settings has to be applied.
func (o X12DelimiterOverridesResponseOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12DelimiterOverridesResponse) *string { return v.TargetNamespace }).(pulumi.StringPtrOutput)
}

type X12DelimiterOverridesResponseArrayOutput struct{ *pulumi.OutputState }

func (X12DelimiterOverridesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12DelimiterOverridesResponse)(nil)).Elem()
}

func (o X12DelimiterOverridesResponseArrayOutput) ToX12DelimiterOverridesResponseArrayOutput() X12DelimiterOverridesResponseArrayOutput {
	return o
}

func (o X12DelimiterOverridesResponseArrayOutput) ToX12DelimiterOverridesResponseArrayOutputWithContext(ctx context.Context) X12DelimiterOverridesResponseArrayOutput {
	return o
}

func (o X12DelimiterOverridesResponseArrayOutput) Index(i pulumi.IntInput) X12DelimiterOverridesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X12DelimiterOverridesResponse {
		return vs[0].([]X12DelimiterOverridesResponse)[vs[1].(int)]
	}).(X12DelimiterOverridesResponseOutput)
}

// The X12 envelope override settings.
type X12EnvelopeOverride struct {
	// The date format.
	DateFormat string `pulumi:"dateFormat"`
	// The functional identifier code.
	FunctionalIdentifierCode *string `pulumi:"functionalIdentifierCode"`
	// The header version.
	HeaderVersion string `pulumi:"headerVersion"`
	// The message id on which this envelope settings has to be applied.
	MessageId string `pulumi:"messageId"`
	// The protocol version on which this envelope settings has to be applied.
	ProtocolVersion string `pulumi:"protocolVersion"`
	// The receiver application id.
	ReceiverApplicationId string `pulumi:"receiverApplicationId"`
	// The responsible agency code.
	ResponsibleAgencyCode string `pulumi:"responsibleAgencyCode"`
	// The sender application id.
	SenderApplicationId string `pulumi:"senderApplicationId"`
	// The target namespace on which this envelope settings has to be applied.
	TargetNamespace string `pulumi:"targetNamespace"`
	// The time format.
	TimeFormat string `pulumi:"timeFormat"`
}

// X12EnvelopeOverrideInput is an input type that accepts X12EnvelopeOverrideArgs and X12EnvelopeOverrideOutput values.
// You can construct a concrete instance of `X12EnvelopeOverrideInput` via:
//
//          X12EnvelopeOverrideArgs{...}
type X12EnvelopeOverrideInput interface {
	pulumi.Input

	ToX12EnvelopeOverrideOutput() X12EnvelopeOverrideOutput
	ToX12EnvelopeOverrideOutputWithContext(context.Context) X12EnvelopeOverrideOutput
}

// The X12 envelope override settings.
type X12EnvelopeOverrideArgs struct {
	// The date format.
	DateFormat pulumi.StringInput `pulumi:"dateFormat"`
	// The functional identifier code.
	FunctionalIdentifierCode pulumi.StringPtrInput `pulumi:"functionalIdentifierCode"`
	// The header version.
	HeaderVersion pulumi.StringInput `pulumi:"headerVersion"`
	// The message id on which this envelope settings has to be applied.
	MessageId pulumi.StringInput `pulumi:"messageId"`
	// The protocol version on which this envelope settings has to be applied.
	ProtocolVersion pulumi.StringInput `pulumi:"protocolVersion"`
	// The receiver application id.
	ReceiverApplicationId pulumi.StringInput `pulumi:"receiverApplicationId"`
	// The responsible agency code.
	ResponsibleAgencyCode pulumi.StringInput `pulumi:"responsibleAgencyCode"`
	// The sender application id.
	SenderApplicationId pulumi.StringInput `pulumi:"senderApplicationId"`
	// The target namespace on which this envelope settings has to be applied.
	TargetNamespace pulumi.StringInput `pulumi:"targetNamespace"`
	// The time format.
	TimeFormat pulumi.StringInput `pulumi:"timeFormat"`
}

func (X12EnvelopeOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12EnvelopeOverride)(nil)).Elem()
}

func (i X12EnvelopeOverrideArgs) ToX12EnvelopeOverrideOutput() X12EnvelopeOverrideOutput {
	return i.ToX12EnvelopeOverrideOutputWithContext(context.Background())
}

func (i X12EnvelopeOverrideArgs) ToX12EnvelopeOverrideOutputWithContext(ctx context.Context) X12EnvelopeOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12EnvelopeOverrideOutput)
}

// X12EnvelopeOverrideArrayInput is an input type that accepts X12EnvelopeOverrideArray and X12EnvelopeOverrideArrayOutput values.
// You can construct a concrete instance of `X12EnvelopeOverrideArrayInput` via:
//
//          X12EnvelopeOverrideArray{ X12EnvelopeOverrideArgs{...} }
type X12EnvelopeOverrideArrayInput interface {
	pulumi.Input

	ToX12EnvelopeOverrideArrayOutput() X12EnvelopeOverrideArrayOutput
	ToX12EnvelopeOverrideArrayOutputWithContext(context.Context) X12EnvelopeOverrideArrayOutput
}

type X12EnvelopeOverrideArray []X12EnvelopeOverrideInput

func (X12EnvelopeOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12EnvelopeOverride)(nil)).Elem()
}

func (i X12EnvelopeOverrideArray) ToX12EnvelopeOverrideArrayOutput() X12EnvelopeOverrideArrayOutput {
	return i.ToX12EnvelopeOverrideArrayOutputWithContext(context.Background())
}

func (i X12EnvelopeOverrideArray) ToX12EnvelopeOverrideArrayOutputWithContext(ctx context.Context) X12EnvelopeOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12EnvelopeOverrideArrayOutput)
}

// The X12 envelope override settings.
type X12EnvelopeOverrideOutput struct{ *pulumi.OutputState }

func (X12EnvelopeOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12EnvelopeOverride)(nil)).Elem()
}

func (o X12EnvelopeOverrideOutput) ToX12EnvelopeOverrideOutput() X12EnvelopeOverrideOutput {
	return o
}

func (o X12EnvelopeOverrideOutput) ToX12EnvelopeOverrideOutputWithContext(ctx context.Context) X12EnvelopeOverrideOutput {
	return o
}

// The date format.
func (o X12EnvelopeOverrideOutput) DateFormat() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeOverride) string { return v.DateFormat }).(pulumi.StringOutput)
}

// The functional identifier code.
func (o X12EnvelopeOverrideOutput) FunctionalIdentifierCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeOverride) *string { return v.FunctionalIdentifierCode }).(pulumi.StringPtrOutput)
}

// The header version.
func (o X12EnvelopeOverrideOutput) HeaderVersion() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeOverride) string { return v.HeaderVersion }).(pulumi.StringOutput)
}

// The message id on which this envelope settings has to be applied.
func (o X12EnvelopeOverrideOutput) MessageId() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeOverride) string { return v.MessageId }).(pulumi.StringOutput)
}

// The protocol version on which this envelope settings has to be applied.
func (o X12EnvelopeOverrideOutput) ProtocolVersion() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeOverride) string { return v.ProtocolVersion }).(pulumi.StringOutput)
}

// The receiver application id.
func (o X12EnvelopeOverrideOutput) ReceiverApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeOverride) string { return v.ReceiverApplicationId }).(pulumi.StringOutput)
}

// The responsible agency code.
func (o X12EnvelopeOverrideOutput) ResponsibleAgencyCode() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeOverride) string { return v.ResponsibleAgencyCode }).(pulumi.StringOutput)
}

// The sender application id.
func (o X12EnvelopeOverrideOutput) SenderApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeOverride) string { return v.SenderApplicationId }).(pulumi.StringOutput)
}

// The target namespace on which this envelope settings has to be applied.
func (o X12EnvelopeOverrideOutput) TargetNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeOverride) string { return v.TargetNamespace }).(pulumi.StringOutput)
}

// The time format.
func (o X12EnvelopeOverrideOutput) TimeFormat() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeOverride) string { return v.TimeFormat }).(pulumi.StringOutput)
}

type X12EnvelopeOverrideArrayOutput struct{ *pulumi.OutputState }

func (X12EnvelopeOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12EnvelopeOverride)(nil)).Elem()
}

func (o X12EnvelopeOverrideArrayOutput) ToX12EnvelopeOverrideArrayOutput() X12EnvelopeOverrideArrayOutput {
	return o
}

func (o X12EnvelopeOverrideArrayOutput) ToX12EnvelopeOverrideArrayOutputWithContext(ctx context.Context) X12EnvelopeOverrideArrayOutput {
	return o
}

func (o X12EnvelopeOverrideArrayOutput) Index(i pulumi.IntInput) X12EnvelopeOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X12EnvelopeOverride {
		return vs[0].([]X12EnvelopeOverride)[vs[1].(int)]
	}).(X12EnvelopeOverrideOutput)
}

// The X12 envelope override settings.
type X12EnvelopeOverrideResponse struct {
	// The date format.
	DateFormat string `pulumi:"dateFormat"`
	// The functional identifier code.
	FunctionalIdentifierCode *string `pulumi:"functionalIdentifierCode"`
	// The header version.
	HeaderVersion string `pulumi:"headerVersion"`
	// The message id on which this envelope settings has to be applied.
	MessageId string `pulumi:"messageId"`
	// The protocol version on which this envelope settings has to be applied.
	ProtocolVersion string `pulumi:"protocolVersion"`
	// The receiver application id.
	ReceiverApplicationId string `pulumi:"receiverApplicationId"`
	// The responsible agency code.
	ResponsibleAgencyCode string `pulumi:"responsibleAgencyCode"`
	// The sender application id.
	SenderApplicationId string `pulumi:"senderApplicationId"`
	// The target namespace on which this envelope settings has to be applied.
	TargetNamespace string `pulumi:"targetNamespace"`
	// The time format.
	TimeFormat string `pulumi:"timeFormat"`
}

// X12EnvelopeOverrideResponseInput is an input type that accepts X12EnvelopeOverrideResponseArgs and X12EnvelopeOverrideResponseOutput values.
// You can construct a concrete instance of `X12EnvelopeOverrideResponseInput` via:
//
//          X12EnvelopeOverrideResponseArgs{...}
type X12EnvelopeOverrideResponseInput interface {
	pulumi.Input

	ToX12EnvelopeOverrideResponseOutput() X12EnvelopeOverrideResponseOutput
	ToX12EnvelopeOverrideResponseOutputWithContext(context.Context) X12EnvelopeOverrideResponseOutput
}

// The X12 envelope override settings.
type X12EnvelopeOverrideResponseArgs struct {
	// The date format.
	DateFormat pulumi.StringInput `pulumi:"dateFormat"`
	// The functional identifier code.
	FunctionalIdentifierCode pulumi.StringPtrInput `pulumi:"functionalIdentifierCode"`
	// The header version.
	HeaderVersion pulumi.StringInput `pulumi:"headerVersion"`
	// The message id on which this envelope settings has to be applied.
	MessageId pulumi.StringInput `pulumi:"messageId"`
	// The protocol version on which this envelope settings has to be applied.
	ProtocolVersion pulumi.StringInput `pulumi:"protocolVersion"`
	// The receiver application id.
	ReceiverApplicationId pulumi.StringInput `pulumi:"receiverApplicationId"`
	// The responsible agency code.
	ResponsibleAgencyCode pulumi.StringInput `pulumi:"responsibleAgencyCode"`
	// The sender application id.
	SenderApplicationId pulumi.StringInput `pulumi:"senderApplicationId"`
	// The target namespace on which this envelope settings has to be applied.
	TargetNamespace pulumi.StringInput `pulumi:"targetNamespace"`
	// The time format.
	TimeFormat pulumi.StringInput `pulumi:"timeFormat"`
}

func (X12EnvelopeOverrideResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12EnvelopeOverrideResponse)(nil)).Elem()
}

func (i X12EnvelopeOverrideResponseArgs) ToX12EnvelopeOverrideResponseOutput() X12EnvelopeOverrideResponseOutput {
	return i.ToX12EnvelopeOverrideResponseOutputWithContext(context.Background())
}

func (i X12EnvelopeOverrideResponseArgs) ToX12EnvelopeOverrideResponseOutputWithContext(ctx context.Context) X12EnvelopeOverrideResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12EnvelopeOverrideResponseOutput)
}

// X12EnvelopeOverrideResponseArrayInput is an input type that accepts X12EnvelopeOverrideResponseArray and X12EnvelopeOverrideResponseArrayOutput values.
// You can construct a concrete instance of `X12EnvelopeOverrideResponseArrayInput` via:
//
//          X12EnvelopeOverrideResponseArray{ X12EnvelopeOverrideResponseArgs{...} }
type X12EnvelopeOverrideResponseArrayInput interface {
	pulumi.Input

	ToX12EnvelopeOverrideResponseArrayOutput() X12EnvelopeOverrideResponseArrayOutput
	ToX12EnvelopeOverrideResponseArrayOutputWithContext(context.Context) X12EnvelopeOverrideResponseArrayOutput
}

type X12EnvelopeOverrideResponseArray []X12EnvelopeOverrideResponseInput

func (X12EnvelopeOverrideResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12EnvelopeOverrideResponse)(nil)).Elem()
}

func (i X12EnvelopeOverrideResponseArray) ToX12EnvelopeOverrideResponseArrayOutput() X12EnvelopeOverrideResponseArrayOutput {
	return i.ToX12EnvelopeOverrideResponseArrayOutputWithContext(context.Background())
}

func (i X12EnvelopeOverrideResponseArray) ToX12EnvelopeOverrideResponseArrayOutputWithContext(ctx context.Context) X12EnvelopeOverrideResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12EnvelopeOverrideResponseArrayOutput)
}

// The X12 envelope override settings.
type X12EnvelopeOverrideResponseOutput struct{ *pulumi.OutputState }

func (X12EnvelopeOverrideResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12EnvelopeOverrideResponse)(nil)).Elem()
}

func (o X12EnvelopeOverrideResponseOutput) ToX12EnvelopeOverrideResponseOutput() X12EnvelopeOverrideResponseOutput {
	return o
}

func (o X12EnvelopeOverrideResponseOutput) ToX12EnvelopeOverrideResponseOutputWithContext(ctx context.Context) X12EnvelopeOverrideResponseOutput {
	return o
}

// The date format.
func (o X12EnvelopeOverrideResponseOutput) DateFormat() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) string { return v.DateFormat }).(pulumi.StringOutput)
}

// The functional identifier code.
func (o X12EnvelopeOverrideResponseOutput) FunctionalIdentifierCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) *string { return v.FunctionalIdentifierCode }).(pulumi.StringPtrOutput)
}

// The header version.
func (o X12EnvelopeOverrideResponseOutput) HeaderVersion() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) string { return v.HeaderVersion }).(pulumi.StringOutput)
}

// The message id on which this envelope settings has to be applied.
func (o X12EnvelopeOverrideResponseOutput) MessageId() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) string { return v.MessageId }).(pulumi.StringOutput)
}

// The protocol version on which this envelope settings has to be applied.
func (o X12EnvelopeOverrideResponseOutput) ProtocolVersion() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) string { return v.ProtocolVersion }).(pulumi.StringOutput)
}

// The receiver application id.
func (o X12EnvelopeOverrideResponseOutput) ReceiverApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) string { return v.ReceiverApplicationId }).(pulumi.StringOutput)
}

// The responsible agency code.
func (o X12EnvelopeOverrideResponseOutput) ResponsibleAgencyCode() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) string { return v.ResponsibleAgencyCode }).(pulumi.StringOutput)
}

// The sender application id.
func (o X12EnvelopeOverrideResponseOutput) SenderApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) string { return v.SenderApplicationId }).(pulumi.StringOutput)
}

// The target namespace on which this envelope settings has to be applied.
func (o X12EnvelopeOverrideResponseOutput) TargetNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) string { return v.TargetNamespace }).(pulumi.StringOutput)
}

// The time format.
func (o X12EnvelopeOverrideResponseOutput) TimeFormat() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) string { return v.TimeFormat }).(pulumi.StringOutput)
}

type X12EnvelopeOverrideResponseArrayOutput struct{ *pulumi.OutputState }

func (X12EnvelopeOverrideResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12EnvelopeOverrideResponse)(nil)).Elem()
}

func (o X12EnvelopeOverrideResponseArrayOutput) ToX12EnvelopeOverrideResponseArrayOutput() X12EnvelopeOverrideResponseArrayOutput {
	return o
}

func (o X12EnvelopeOverrideResponseArrayOutput) ToX12EnvelopeOverrideResponseArrayOutputWithContext(ctx context.Context) X12EnvelopeOverrideResponseArrayOutput {
	return o
}

func (o X12EnvelopeOverrideResponseArrayOutput) Index(i pulumi.IntInput) X12EnvelopeOverrideResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X12EnvelopeOverrideResponse {
		return vs[0].([]X12EnvelopeOverrideResponse)[vs[1].(int)]
	}).(X12EnvelopeOverrideResponseOutput)
}

// The X12 agreement envelope settings.
type X12EnvelopeSettings struct {
	// The controls standards id.
	ControlStandardsId int `pulumi:"controlStandardsId"`
	// The control version number.
	ControlVersionNumber string `pulumi:"controlVersionNumber"`
	// The value indicating whether to enable default group headers.
	EnableDefaultGroupHeaders bool `pulumi:"enableDefaultGroupHeaders"`
	// The functional group id.
	FunctionalGroupId *string `pulumi:"functionalGroupId"`
	// The group control number lower bound.
	GroupControlNumberLowerBound int `pulumi:"groupControlNumberLowerBound"`
	// The group control number upper bound.
	GroupControlNumberUpperBound int `pulumi:"groupControlNumberUpperBound"`
	// The group header agency code.
	GroupHeaderAgencyCode string `pulumi:"groupHeaderAgencyCode"`
	// The group header date format.
	GroupHeaderDateFormat string `pulumi:"groupHeaderDateFormat"`
	// The group header time format.
	GroupHeaderTimeFormat string `pulumi:"groupHeaderTimeFormat"`
	// The group header version.
	GroupHeaderVersion string `pulumi:"groupHeaderVersion"`
	// The interchange  control number lower bound.
	InterchangeControlNumberLowerBound int `pulumi:"interchangeControlNumberLowerBound"`
	// The interchange  control number upper bound.
	InterchangeControlNumberUpperBound int `pulumi:"interchangeControlNumberUpperBound"`
	// The value indicating whether to overwrite existing transaction set control number.
	OverwriteExistingTransactionSetControlNumber bool `pulumi:"overwriteExistingTransactionSetControlNumber"`
	// The receiver application id.
	ReceiverApplicationId string `pulumi:"receiverApplicationId"`
	// The value indicating whether to rollover group control number.
	RolloverGroupControlNumber bool `pulumi:"rolloverGroupControlNumber"`
	// The value indicating whether to rollover interchange control number.
	RolloverInterchangeControlNumber bool `pulumi:"rolloverInterchangeControlNumber"`
	// The value indicating whether to rollover transaction set control number.
	RolloverTransactionSetControlNumber bool `pulumi:"rolloverTransactionSetControlNumber"`
	// The sender application id.
	SenderApplicationId string `pulumi:"senderApplicationId"`
	// The transaction set control number lower bound.
	TransactionSetControlNumberLowerBound int `pulumi:"transactionSetControlNumberLowerBound"`
	// The transaction set control number prefix.
	TransactionSetControlNumberPrefix *string `pulumi:"transactionSetControlNumberPrefix"`
	// The transaction set control number suffix.
	TransactionSetControlNumberSuffix *string `pulumi:"transactionSetControlNumberSuffix"`
	// The transaction set control number upper bound.
	TransactionSetControlNumberUpperBound int `pulumi:"transactionSetControlNumberUpperBound"`
	// The usage indicator.
	UsageIndicator string `pulumi:"usageIndicator"`
	// The value indicating whether to use control standards id as repetition character.
	UseControlStandardsIdAsRepetitionCharacter bool `pulumi:"useControlStandardsIdAsRepetitionCharacter"`
}

// X12EnvelopeSettingsInput is an input type that accepts X12EnvelopeSettingsArgs and X12EnvelopeSettingsOutput values.
// You can construct a concrete instance of `X12EnvelopeSettingsInput` via:
//
//          X12EnvelopeSettingsArgs{...}
type X12EnvelopeSettingsInput interface {
	pulumi.Input

	ToX12EnvelopeSettingsOutput() X12EnvelopeSettingsOutput
	ToX12EnvelopeSettingsOutputWithContext(context.Context) X12EnvelopeSettingsOutput
}

// The X12 agreement envelope settings.
type X12EnvelopeSettingsArgs struct {
	// The controls standards id.
	ControlStandardsId pulumi.IntInput `pulumi:"controlStandardsId"`
	// The control version number.
	ControlVersionNumber pulumi.StringInput `pulumi:"controlVersionNumber"`
	// The value indicating whether to enable default group headers.
	EnableDefaultGroupHeaders pulumi.BoolInput `pulumi:"enableDefaultGroupHeaders"`
	// The functional group id.
	FunctionalGroupId pulumi.StringPtrInput `pulumi:"functionalGroupId"`
	// The group control number lower bound.
	GroupControlNumberLowerBound pulumi.IntInput `pulumi:"groupControlNumberLowerBound"`
	// The group control number upper bound.
	GroupControlNumberUpperBound pulumi.IntInput `pulumi:"groupControlNumberUpperBound"`
	// The group header agency code.
	GroupHeaderAgencyCode pulumi.StringInput `pulumi:"groupHeaderAgencyCode"`
	// The group header date format.
	GroupHeaderDateFormat pulumi.StringInput `pulumi:"groupHeaderDateFormat"`
	// The group header time format.
	GroupHeaderTimeFormat pulumi.StringInput `pulumi:"groupHeaderTimeFormat"`
	// The group header version.
	GroupHeaderVersion pulumi.StringInput `pulumi:"groupHeaderVersion"`
	// The interchange  control number lower bound.
	InterchangeControlNumberLowerBound pulumi.IntInput `pulumi:"interchangeControlNumberLowerBound"`
	// The interchange  control number upper bound.
	InterchangeControlNumberUpperBound pulumi.IntInput `pulumi:"interchangeControlNumberUpperBound"`
	// The value indicating whether to overwrite existing transaction set control number.
	OverwriteExistingTransactionSetControlNumber pulumi.BoolInput `pulumi:"overwriteExistingTransactionSetControlNumber"`
	// The receiver application id.
	ReceiverApplicationId pulumi.StringInput `pulumi:"receiverApplicationId"`
	// The value indicating whether to rollover group control number.
	RolloverGroupControlNumber pulumi.BoolInput `pulumi:"rolloverGroupControlNumber"`
	// The value indicating whether to rollover interchange control number.
	RolloverInterchangeControlNumber pulumi.BoolInput `pulumi:"rolloverInterchangeControlNumber"`
	// The value indicating whether to rollover transaction set control number.
	RolloverTransactionSetControlNumber pulumi.BoolInput `pulumi:"rolloverTransactionSetControlNumber"`
	// The sender application id.
	SenderApplicationId pulumi.StringInput `pulumi:"senderApplicationId"`
	// The transaction set control number lower bound.
	TransactionSetControlNumberLowerBound pulumi.IntInput `pulumi:"transactionSetControlNumberLowerBound"`
	// The transaction set control number prefix.
	TransactionSetControlNumberPrefix pulumi.StringPtrInput `pulumi:"transactionSetControlNumberPrefix"`
	// The transaction set control number suffix.
	TransactionSetControlNumberSuffix pulumi.StringPtrInput `pulumi:"transactionSetControlNumberSuffix"`
	// The transaction set control number upper bound.
	TransactionSetControlNumberUpperBound pulumi.IntInput `pulumi:"transactionSetControlNumberUpperBound"`
	// The usage indicator.
	UsageIndicator pulumi.StringInput `pulumi:"usageIndicator"`
	// The value indicating whether to use control standards id as repetition character.
	UseControlStandardsIdAsRepetitionCharacter pulumi.BoolInput `pulumi:"useControlStandardsIdAsRepetitionCharacter"`
}

func (X12EnvelopeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12EnvelopeSettings)(nil)).Elem()
}

func (i X12EnvelopeSettingsArgs) ToX12EnvelopeSettingsOutput() X12EnvelopeSettingsOutput {
	return i.ToX12EnvelopeSettingsOutputWithContext(context.Background())
}

func (i X12EnvelopeSettingsArgs) ToX12EnvelopeSettingsOutputWithContext(ctx context.Context) X12EnvelopeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12EnvelopeSettingsOutput)
}

func (i X12EnvelopeSettingsArgs) ToX12EnvelopeSettingsPtrOutput() X12EnvelopeSettingsPtrOutput {
	return i.ToX12EnvelopeSettingsPtrOutputWithContext(context.Background())
}

func (i X12EnvelopeSettingsArgs) ToX12EnvelopeSettingsPtrOutputWithContext(ctx context.Context) X12EnvelopeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12EnvelopeSettingsOutput).ToX12EnvelopeSettingsPtrOutputWithContext(ctx)
}

// X12EnvelopeSettingsPtrInput is an input type that accepts X12EnvelopeSettingsArgs, X12EnvelopeSettingsPtr and X12EnvelopeSettingsPtrOutput values.
// You can construct a concrete instance of `X12EnvelopeSettingsPtrInput` via:
//
//          X12EnvelopeSettingsArgs{...}
//
//  or:
//
//          nil
type X12EnvelopeSettingsPtrInput interface {
	pulumi.Input

	ToX12EnvelopeSettingsPtrOutput() X12EnvelopeSettingsPtrOutput
	ToX12EnvelopeSettingsPtrOutputWithContext(context.Context) X12EnvelopeSettingsPtrOutput
}

type x12envelopeSettingsPtrType X12EnvelopeSettingsArgs

func X12EnvelopeSettingsPtr(v *X12EnvelopeSettingsArgs) X12EnvelopeSettingsPtrInput {
	return (*x12envelopeSettingsPtrType)(v)
}

func (*x12envelopeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12EnvelopeSettings)(nil)).Elem()
}

func (i *x12envelopeSettingsPtrType) ToX12EnvelopeSettingsPtrOutput() X12EnvelopeSettingsPtrOutput {
	return i.ToX12EnvelopeSettingsPtrOutputWithContext(context.Background())
}

func (i *x12envelopeSettingsPtrType) ToX12EnvelopeSettingsPtrOutputWithContext(ctx context.Context) X12EnvelopeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12EnvelopeSettingsPtrOutput)
}

// The X12 agreement envelope settings.
type X12EnvelopeSettingsOutput struct{ *pulumi.OutputState }

func (X12EnvelopeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12EnvelopeSettings)(nil)).Elem()
}

func (o X12EnvelopeSettingsOutput) ToX12EnvelopeSettingsOutput() X12EnvelopeSettingsOutput {
	return o
}

func (o X12EnvelopeSettingsOutput) ToX12EnvelopeSettingsOutputWithContext(ctx context.Context) X12EnvelopeSettingsOutput {
	return o
}

func (o X12EnvelopeSettingsOutput) ToX12EnvelopeSettingsPtrOutput() X12EnvelopeSettingsPtrOutput {
	return o.ToX12EnvelopeSettingsPtrOutputWithContext(context.Background())
}

func (o X12EnvelopeSettingsOutput) ToX12EnvelopeSettingsPtrOutputWithContext(ctx context.Context) X12EnvelopeSettingsPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) *X12EnvelopeSettings {
		return &v
	}).(X12EnvelopeSettingsPtrOutput)
}

// The controls standards id.
func (o X12EnvelopeSettingsOutput) ControlStandardsId() pulumi.IntOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) int { return v.ControlStandardsId }).(pulumi.IntOutput)
}

// The control version number.
func (o X12EnvelopeSettingsOutput) ControlVersionNumber() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) string { return v.ControlVersionNumber }).(pulumi.StringOutput)
}

// The value indicating whether to enable default group headers.
func (o X12EnvelopeSettingsOutput) EnableDefaultGroupHeaders() pulumi.BoolOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) bool { return v.EnableDefaultGroupHeaders }).(pulumi.BoolOutput)
}

// The functional group id.
func (o X12EnvelopeSettingsOutput) FunctionalGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) *string { return v.FunctionalGroupId }).(pulumi.StringPtrOutput)
}

// The group control number lower bound.
func (o X12EnvelopeSettingsOutput) GroupControlNumberLowerBound() pulumi.IntOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) int { return v.GroupControlNumberLowerBound }).(pulumi.IntOutput)
}

// The group control number upper bound.
func (o X12EnvelopeSettingsOutput) GroupControlNumberUpperBound() pulumi.IntOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) int { return v.GroupControlNumberUpperBound }).(pulumi.IntOutput)
}

// The group header agency code.
func (o X12EnvelopeSettingsOutput) GroupHeaderAgencyCode() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) string { return v.GroupHeaderAgencyCode }).(pulumi.StringOutput)
}

// The group header date format.
func (o X12EnvelopeSettingsOutput) GroupHeaderDateFormat() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) string { return v.GroupHeaderDateFormat }).(pulumi.StringOutput)
}

// The group header time format.
func (o X12EnvelopeSettingsOutput) GroupHeaderTimeFormat() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) string { return v.GroupHeaderTimeFormat }).(pulumi.StringOutput)
}

// The group header version.
func (o X12EnvelopeSettingsOutput) GroupHeaderVersion() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) string { return v.GroupHeaderVersion }).(pulumi.StringOutput)
}

// The interchange  control number lower bound.
func (o X12EnvelopeSettingsOutput) InterchangeControlNumberLowerBound() pulumi.IntOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) int { return v.InterchangeControlNumberLowerBound }).(pulumi.IntOutput)
}

// The interchange  control number upper bound.
func (o X12EnvelopeSettingsOutput) InterchangeControlNumberUpperBound() pulumi.IntOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) int { return v.InterchangeControlNumberUpperBound }).(pulumi.IntOutput)
}

// The value indicating whether to overwrite existing transaction set control number.
func (o X12EnvelopeSettingsOutput) OverwriteExistingTransactionSetControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) bool { return v.OverwriteExistingTransactionSetControlNumber }).(pulumi.BoolOutput)
}

// The receiver application id.
func (o X12EnvelopeSettingsOutput) ReceiverApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) string { return v.ReceiverApplicationId }).(pulumi.StringOutput)
}

// The value indicating whether to rollover group control number.
func (o X12EnvelopeSettingsOutput) RolloverGroupControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) bool { return v.RolloverGroupControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to rollover interchange control number.
func (o X12EnvelopeSettingsOutput) RolloverInterchangeControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) bool { return v.RolloverInterchangeControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to rollover transaction set control number.
func (o X12EnvelopeSettingsOutput) RolloverTransactionSetControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) bool { return v.RolloverTransactionSetControlNumber }).(pulumi.BoolOutput)
}

// The sender application id.
func (o X12EnvelopeSettingsOutput) SenderApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) string { return v.SenderApplicationId }).(pulumi.StringOutput)
}

// The transaction set control number lower bound.
func (o X12EnvelopeSettingsOutput) TransactionSetControlNumberLowerBound() pulumi.IntOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) int { return v.TransactionSetControlNumberLowerBound }).(pulumi.IntOutput)
}

// The transaction set control number prefix.
func (o X12EnvelopeSettingsOutput) TransactionSetControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) *string { return v.TransactionSetControlNumberPrefix }).(pulumi.StringPtrOutput)
}

// The transaction set control number suffix.
func (o X12EnvelopeSettingsOutput) TransactionSetControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) *string { return v.TransactionSetControlNumberSuffix }).(pulumi.StringPtrOutput)
}

// The transaction set control number upper bound.
func (o X12EnvelopeSettingsOutput) TransactionSetControlNumberUpperBound() pulumi.IntOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) int { return v.TransactionSetControlNumberUpperBound }).(pulumi.IntOutput)
}

// The usage indicator.
func (o X12EnvelopeSettingsOutput) UsageIndicator() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) string { return v.UsageIndicator }).(pulumi.StringOutput)
}

// The value indicating whether to use control standards id as repetition character.
func (o X12EnvelopeSettingsOutput) UseControlStandardsIdAsRepetitionCharacter() pulumi.BoolOutput {
	return o.ApplyT(func(v X12EnvelopeSettings) bool { return v.UseControlStandardsIdAsRepetitionCharacter }).(pulumi.BoolOutput)
}

type X12EnvelopeSettingsPtrOutput struct{ *pulumi.OutputState }

func (X12EnvelopeSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12EnvelopeSettings)(nil)).Elem()
}

func (o X12EnvelopeSettingsPtrOutput) ToX12EnvelopeSettingsPtrOutput() X12EnvelopeSettingsPtrOutput {
	return o
}

func (o X12EnvelopeSettingsPtrOutput) ToX12EnvelopeSettingsPtrOutputWithContext(ctx context.Context) X12EnvelopeSettingsPtrOutput {
	return o
}

func (o X12EnvelopeSettingsPtrOutput) Elem() X12EnvelopeSettingsOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) X12EnvelopeSettings { return *v }).(X12EnvelopeSettingsOutput)
}

// The controls standards id.
func (o X12EnvelopeSettingsPtrOutput) ControlStandardsId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *int {
		if v == nil {
			return nil
		}
		return &v.ControlStandardsId
	}).(pulumi.IntPtrOutput)
}

// The control version number.
func (o X12EnvelopeSettingsPtrOutput) ControlVersionNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return &v.ControlVersionNumber
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to enable default group headers.
func (o X12EnvelopeSettingsPtrOutput) EnableDefaultGroupHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableDefaultGroupHeaders
	}).(pulumi.BoolPtrOutput)
}

// The functional group id.
func (o X12EnvelopeSettingsPtrOutput) FunctionalGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.FunctionalGroupId
	}).(pulumi.StringPtrOutput)
}

// The group control number lower bound.
func (o X12EnvelopeSettingsPtrOutput) GroupControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *int {
		if v == nil {
			return nil
		}
		return &v.GroupControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The group control number upper bound.
func (o X12EnvelopeSettingsPtrOutput) GroupControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *int {
		if v == nil {
			return nil
		}
		return &v.GroupControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The group header agency code.
func (o X12EnvelopeSettingsPtrOutput) GroupHeaderAgencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return &v.GroupHeaderAgencyCode
	}).(pulumi.StringPtrOutput)
}

// The group header date format.
func (o X12EnvelopeSettingsPtrOutput) GroupHeaderDateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return &v.GroupHeaderDateFormat
	}).(pulumi.StringPtrOutput)
}

// The group header time format.
func (o X12EnvelopeSettingsPtrOutput) GroupHeaderTimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return &v.GroupHeaderTimeFormat
	}).(pulumi.StringPtrOutput)
}

// The group header version.
func (o X12EnvelopeSettingsPtrOutput) GroupHeaderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return &v.GroupHeaderVersion
	}).(pulumi.StringPtrOutput)
}

// The interchange  control number lower bound.
func (o X12EnvelopeSettingsPtrOutput) InterchangeControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *int {
		if v == nil {
			return nil
		}
		return &v.InterchangeControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The interchange  control number upper bound.
func (o X12EnvelopeSettingsPtrOutput) InterchangeControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *int {
		if v == nil {
			return nil
		}
		return &v.InterchangeControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The value indicating whether to overwrite existing transaction set control number.
func (o X12EnvelopeSettingsPtrOutput) OverwriteExistingTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.OverwriteExistingTransactionSetControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The receiver application id.
func (o X12EnvelopeSettingsPtrOutput) ReceiverApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return &v.ReceiverApplicationId
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to rollover group control number.
func (o X12EnvelopeSettingsPtrOutput) RolloverGroupControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.RolloverGroupControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover interchange control number.
func (o X12EnvelopeSettingsPtrOutput) RolloverInterchangeControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.RolloverInterchangeControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover transaction set control number.
func (o X12EnvelopeSettingsPtrOutput) RolloverTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.RolloverTransactionSetControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The sender application id.
func (o X12EnvelopeSettingsPtrOutput) SenderApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return &v.SenderApplicationId
	}).(pulumi.StringPtrOutput)
}

// The transaction set control number lower bound.
func (o X12EnvelopeSettingsPtrOutput) TransactionSetControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *int {
		if v == nil {
			return nil
		}
		return &v.TransactionSetControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The transaction set control number prefix.
func (o X12EnvelopeSettingsPtrOutput) TransactionSetControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.TransactionSetControlNumberPrefix
	}).(pulumi.StringPtrOutput)
}

// The transaction set control number suffix.
func (o X12EnvelopeSettingsPtrOutput) TransactionSetControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return v.TransactionSetControlNumberSuffix
	}).(pulumi.StringPtrOutput)
}

// The transaction set control number upper bound.
func (o X12EnvelopeSettingsPtrOutput) TransactionSetControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *int {
		if v == nil {
			return nil
		}
		return &v.TransactionSetControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The usage indicator.
func (o X12EnvelopeSettingsPtrOutput) UsageIndicator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *string {
		if v == nil {
			return nil
		}
		return &v.UsageIndicator
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to use control standards id as repetition character.
func (o X12EnvelopeSettingsPtrOutput) UseControlStandardsIdAsRepetitionCharacter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.UseControlStandardsIdAsRepetitionCharacter
	}).(pulumi.BoolPtrOutput)
}

// The X12 agreement envelope settings.
type X12EnvelopeSettingsResponse struct {
	// The controls standards id.
	ControlStandardsId int `pulumi:"controlStandardsId"`
	// The control version number.
	ControlVersionNumber string `pulumi:"controlVersionNumber"`
	// The value indicating whether to enable default group headers.
	EnableDefaultGroupHeaders bool `pulumi:"enableDefaultGroupHeaders"`
	// The functional group id.
	FunctionalGroupId *string `pulumi:"functionalGroupId"`
	// The group control number lower bound.
	GroupControlNumberLowerBound int `pulumi:"groupControlNumberLowerBound"`
	// The group control number upper bound.
	GroupControlNumberUpperBound int `pulumi:"groupControlNumberUpperBound"`
	// The group header agency code.
	GroupHeaderAgencyCode string `pulumi:"groupHeaderAgencyCode"`
	// The group header date format.
	GroupHeaderDateFormat string `pulumi:"groupHeaderDateFormat"`
	// The group header time format.
	GroupHeaderTimeFormat string `pulumi:"groupHeaderTimeFormat"`
	// The group header version.
	GroupHeaderVersion string `pulumi:"groupHeaderVersion"`
	// The interchange  control number lower bound.
	InterchangeControlNumberLowerBound int `pulumi:"interchangeControlNumberLowerBound"`
	// The interchange  control number upper bound.
	InterchangeControlNumberUpperBound int `pulumi:"interchangeControlNumberUpperBound"`
	// The value indicating whether to overwrite existing transaction set control number.
	OverwriteExistingTransactionSetControlNumber bool `pulumi:"overwriteExistingTransactionSetControlNumber"`
	// The receiver application id.
	ReceiverApplicationId string `pulumi:"receiverApplicationId"`
	// The value indicating whether to rollover group control number.
	RolloverGroupControlNumber bool `pulumi:"rolloverGroupControlNumber"`
	// The value indicating whether to rollover interchange control number.
	RolloverInterchangeControlNumber bool `pulumi:"rolloverInterchangeControlNumber"`
	// The value indicating whether to rollover transaction set control number.
	RolloverTransactionSetControlNumber bool `pulumi:"rolloverTransactionSetControlNumber"`
	// The sender application id.
	SenderApplicationId string `pulumi:"senderApplicationId"`
	// The transaction set control number lower bound.
	TransactionSetControlNumberLowerBound int `pulumi:"transactionSetControlNumberLowerBound"`
	// The transaction set control number prefix.
	TransactionSetControlNumberPrefix *string `pulumi:"transactionSetControlNumberPrefix"`
	// The transaction set control number suffix.
	TransactionSetControlNumberSuffix *string `pulumi:"transactionSetControlNumberSuffix"`
	// The transaction set control number upper bound.
	TransactionSetControlNumberUpperBound int `pulumi:"transactionSetControlNumberUpperBound"`
	// The usage indicator.
	UsageIndicator string `pulumi:"usageIndicator"`
	// The value indicating whether to use control standards id as repetition character.
	UseControlStandardsIdAsRepetitionCharacter bool `pulumi:"useControlStandardsIdAsRepetitionCharacter"`
}

// X12EnvelopeSettingsResponseInput is an input type that accepts X12EnvelopeSettingsResponseArgs and X12EnvelopeSettingsResponseOutput values.
// You can construct a concrete instance of `X12EnvelopeSettingsResponseInput` via:
//
//          X12EnvelopeSettingsResponseArgs{...}
type X12EnvelopeSettingsResponseInput interface {
	pulumi.Input

	ToX12EnvelopeSettingsResponseOutput() X12EnvelopeSettingsResponseOutput
	ToX12EnvelopeSettingsResponseOutputWithContext(context.Context) X12EnvelopeSettingsResponseOutput
}

// The X12 agreement envelope settings.
type X12EnvelopeSettingsResponseArgs struct {
	// The controls standards id.
	ControlStandardsId pulumi.IntInput `pulumi:"controlStandardsId"`
	// The control version number.
	ControlVersionNumber pulumi.StringInput `pulumi:"controlVersionNumber"`
	// The value indicating whether to enable default group headers.
	EnableDefaultGroupHeaders pulumi.BoolInput `pulumi:"enableDefaultGroupHeaders"`
	// The functional group id.
	FunctionalGroupId pulumi.StringPtrInput `pulumi:"functionalGroupId"`
	// The group control number lower bound.
	GroupControlNumberLowerBound pulumi.IntInput `pulumi:"groupControlNumberLowerBound"`
	// The group control number upper bound.
	GroupControlNumberUpperBound pulumi.IntInput `pulumi:"groupControlNumberUpperBound"`
	// The group header agency code.
	GroupHeaderAgencyCode pulumi.StringInput `pulumi:"groupHeaderAgencyCode"`
	// The group header date format.
	GroupHeaderDateFormat pulumi.StringInput `pulumi:"groupHeaderDateFormat"`
	// The group header time format.
	GroupHeaderTimeFormat pulumi.StringInput `pulumi:"groupHeaderTimeFormat"`
	// The group header version.
	GroupHeaderVersion pulumi.StringInput `pulumi:"groupHeaderVersion"`
	// The interchange  control number lower bound.
	InterchangeControlNumberLowerBound pulumi.IntInput `pulumi:"interchangeControlNumberLowerBound"`
	// The interchange  control number upper bound.
	InterchangeControlNumberUpperBound pulumi.IntInput `pulumi:"interchangeControlNumberUpperBound"`
	// The value indicating whether to overwrite existing transaction set control number.
	OverwriteExistingTransactionSetControlNumber pulumi.BoolInput `pulumi:"overwriteExistingTransactionSetControlNumber"`
	// The receiver application id.
	ReceiverApplicationId pulumi.StringInput `pulumi:"receiverApplicationId"`
	// The value indicating whether to rollover group control number.
	RolloverGroupControlNumber pulumi.BoolInput `pulumi:"rolloverGroupControlNumber"`
	// The value indicating whether to rollover interchange control number.
	RolloverInterchangeControlNumber pulumi.BoolInput `pulumi:"rolloverInterchangeControlNumber"`
	// The value indicating whether to rollover transaction set control number.
	RolloverTransactionSetControlNumber pulumi.BoolInput `pulumi:"rolloverTransactionSetControlNumber"`
	// The sender application id.
	SenderApplicationId pulumi.StringInput `pulumi:"senderApplicationId"`
	// The transaction set control number lower bound.
	TransactionSetControlNumberLowerBound pulumi.IntInput `pulumi:"transactionSetControlNumberLowerBound"`
	// The transaction set control number prefix.
	TransactionSetControlNumberPrefix pulumi.StringPtrInput `pulumi:"transactionSetControlNumberPrefix"`
	// The transaction set control number suffix.
	TransactionSetControlNumberSuffix pulumi.StringPtrInput `pulumi:"transactionSetControlNumberSuffix"`
	// The transaction set control number upper bound.
	TransactionSetControlNumberUpperBound pulumi.IntInput `pulumi:"transactionSetControlNumberUpperBound"`
	// The usage indicator.
	UsageIndicator pulumi.StringInput `pulumi:"usageIndicator"`
	// The value indicating whether to use control standards id as repetition character.
	UseControlStandardsIdAsRepetitionCharacter pulumi.BoolInput `pulumi:"useControlStandardsIdAsRepetitionCharacter"`
}

func (X12EnvelopeSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12EnvelopeSettingsResponse)(nil)).Elem()
}

func (i X12EnvelopeSettingsResponseArgs) ToX12EnvelopeSettingsResponseOutput() X12EnvelopeSettingsResponseOutput {
	return i.ToX12EnvelopeSettingsResponseOutputWithContext(context.Background())
}

func (i X12EnvelopeSettingsResponseArgs) ToX12EnvelopeSettingsResponseOutputWithContext(ctx context.Context) X12EnvelopeSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12EnvelopeSettingsResponseOutput)
}

func (i X12EnvelopeSettingsResponseArgs) ToX12EnvelopeSettingsResponsePtrOutput() X12EnvelopeSettingsResponsePtrOutput {
	return i.ToX12EnvelopeSettingsResponsePtrOutputWithContext(context.Background())
}

func (i X12EnvelopeSettingsResponseArgs) ToX12EnvelopeSettingsResponsePtrOutputWithContext(ctx context.Context) X12EnvelopeSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12EnvelopeSettingsResponseOutput).ToX12EnvelopeSettingsResponsePtrOutputWithContext(ctx)
}

// X12EnvelopeSettingsResponsePtrInput is an input type that accepts X12EnvelopeSettingsResponseArgs, X12EnvelopeSettingsResponsePtr and X12EnvelopeSettingsResponsePtrOutput values.
// You can construct a concrete instance of `X12EnvelopeSettingsResponsePtrInput` via:
//
//          X12EnvelopeSettingsResponseArgs{...}
//
//  or:
//
//          nil
type X12EnvelopeSettingsResponsePtrInput interface {
	pulumi.Input

	ToX12EnvelopeSettingsResponsePtrOutput() X12EnvelopeSettingsResponsePtrOutput
	ToX12EnvelopeSettingsResponsePtrOutputWithContext(context.Context) X12EnvelopeSettingsResponsePtrOutput
}

type x12envelopeSettingsResponsePtrType X12EnvelopeSettingsResponseArgs

func X12EnvelopeSettingsResponsePtr(v *X12EnvelopeSettingsResponseArgs) X12EnvelopeSettingsResponsePtrInput {
	return (*x12envelopeSettingsResponsePtrType)(v)
}

func (*x12envelopeSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12EnvelopeSettingsResponse)(nil)).Elem()
}

func (i *x12envelopeSettingsResponsePtrType) ToX12EnvelopeSettingsResponsePtrOutput() X12EnvelopeSettingsResponsePtrOutput {
	return i.ToX12EnvelopeSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *x12envelopeSettingsResponsePtrType) ToX12EnvelopeSettingsResponsePtrOutputWithContext(ctx context.Context) X12EnvelopeSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12EnvelopeSettingsResponsePtrOutput)
}

// The X12 agreement envelope settings.
type X12EnvelopeSettingsResponseOutput struct{ *pulumi.OutputState }

func (X12EnvelopeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12EnvelopeSettingsResponse)(nil)).Elem()
}

func (o X12EnvelopeSettingsResponseOutput) ToX12EnvelopeSettingsResponseOutput() X12EnvelopeSettingsResponseOutput {
	return o
}

func (o X12EnvelopeSettingsResponseOutput) ToX12EnvelopeSettingsResponseOutputWithContext(ctx context.Context) X12EnvelopeSettingsResponseOutput {
	return o
}

func (o X12EnvelopeSettingsResponseOutput) ToX12EnvelopeSettingsResponsePtrOutput() X12EnvelopeSettingsResponsePtrOutput {
	return o.ToX12EnvelopeSettingsResponsePtrOutputWithContext(context.Background())
}

func (o X12EnvelopeSettingsResponseOutput) ToX12EnvelopeSettingsResponsePtrOutputWithContext(ctx context.Context) X12EnvelopeSettingsResponsePtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *X12EnvelopeSettingsResponse {
		return &v
	}).(X12EnvelopeSettingsResponsePtrOutput)
}

// The controls standards id.
func (o X12EnvelopeSettingsResponseOutput) ControlStandardsId() pulumi.IntOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) int { return v.ControlStandardsId }).(pulumi.IntOutput)
}

// The control version number.
func (o X12EnvelopeSettingsResponseOutput) ControlVersionNumber() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) string { return v.ControlVersionNumber }).(pulumi.StringOutput)
}

// The value indicating whether to enable default group headers.
func (o X12EnvelopeSettingsResponseOutput) EnableDefaultGroupHeaders() pulumi.BoolOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) bool { return v.EnableDefaultGroupHeaders }).(pulumi.BoolOutput)
}

// The functional group id.
func (o X12EnvelopeSettingsResponseOutput) FunctionalGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *string { return v.FunctionalGroupId }).(pulumi.StringPtrOutput)
}

// The group control number lower bound.
func (o X12EnvelopeSettingsResponseOutput) GroupControlNumberLowerBound() pulumi.IntOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) int { return v.GroupControlNumberLowerBound }).(pulumi.IntOutput)
}

// The group control number upper bound.
func (o X12EnvelopeSettingsResponseOutput) GroupControlNumberUpperBound() pulumi.IntOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) int { return v.GroupControlNumberUpperBound }).(pulumi.IntOutput)
}

// The group header agency code.
func (o X12EnvelopeSettingsResponseOutput) GroupHeaderAgencyCode() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) string { return v.GroupHeaderAgencyCode }).(pulumi.StringOutput)
}

// The group header date format.
func (o X12EnvelopeSettingsResponseOutput) GroupHeaderDateFormat() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) string { return v.GroupHeaderDateFormat }).(pulumi.StringOutput)
}

// The group header time format.
func (o X12EnvelopeSettingsResponseOutput) GroupHeaderTimeFormat() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) string { return v.GroupHeaderTimeFormat }).(pulumi.StringOutput)
}

// The group header version.
func (o X12EnvelopeSettingsResponseOutput) GroupHeaderVersion() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) string { return v.GroupHeaderVersion }).(pulumi.StringOutput)
}

// The interchange  control number lower bound.
func (o X12EnvelopeSettingsResponseOutput) InterchangeControlNumberLowerBound() pulumi.IntOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) int { return v.InterchangeControlNumberLowerBound }).(pulumi.IntOutput)
}

// The interchange  control number upper bound.
func (o X12EnvelopeSettingsResponseOutput) InterchangeControlNumberUpperBound() pulumi.IntOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) int { return v.InterchangeControlNumberUpperBound }).(pulumi.IntOutput)
}

// The value indicating whether to overwrite existing transaction set control number.
func (o X12EnvelopeSettingsResponseOutput) OverwriteExistingTransactionSetControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) bool { return v.OverwriteExistingTransactionSetControlNumber }).(pulumi.BoolOutput)
}

// The receiver application id.
func (o X12EnvelopeSettingsResponseOutput) ReceiverApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) string { return v.ReceiverApplicationId }).(pulumi.StringOutput)
}

// The value indicating whether to rollover group control number.
func (o X12EnvelopeSettingsResponseOutput) RolloverGroupControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) bool { return v.RolloverGroupControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to rollover interchange control number.
func (o X12EnvelopeSettingsResponseOutput) RolloverInterchangeControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) bool { return v.RolloverInterchangeControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to rollover transaction set control number.
func (o X12EnvelopeSettingsResponseOutput) RolloverTransactionSetControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) bool { return v.RolloverTransactionSetControlNumber }).(pulumi.BoolOutput)
}

// The sender application id.
func (o X12EnvelopeSettingsResponseOutput) SenderApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) string { return v.SenderApplicationId }).(pulumi.StringOutput)
}

// The transaction set control number lower bound.
func (o X12EnvelopeSettingsResponseOutput) TransactionSetControlNumberLowerBound() pulumi.IntOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) int { return v.TransactionSetControlNumberLowerBound }).(pulumi.IntOutput)
}

// The transaction set control number prefix.
func (o X12EnvelopeSettingsResponseOutput) TransactionSetControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *string { return v.TransactionSetControlNumberPrefix }).(pulumi.StringPtrOutput)
}

// The transaction set control number suffix.
func (o X12EnvelopeSettingsResponseOutput) TransactionSetControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *string { return v.TransactionSetControlNumberSuffix }).(pulumi.StringPtrOutput)
}

// The transaction set control number upper bound.
func (o X12EnvelopeSettingsResponseOutput) TransactionSetControlNumberUpperBound() pulumi.IntOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) int { return v.TransactionSetControlNumberUpperBound }).(pulumi.IntOutput)
}

// The usage indicator.
func (o X12EnvelopeSettingsResponseOutput) UsageIndicator() pulumi.StringOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) string { return v.UsageIndicator }).(pulumi.StringOutput)
}

// The value indicating whether to use control standards id as repetition character.
func (o X12EnvelopeSettingsResponseOutput) UseControlStandardsIdAsRepetitionCharacter() pulumi.BoolOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) bool { return v.UseControlStandardsIdAsRepetitionCharacter }).(pulumi.BoolOutput)
}

type X12EnvelopeSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (X12EnvelopeSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12EnvelopeSettingsResponse)(nil)).Elem()
}

func (o X12EnvelopeSettingsResponsePtrOutput) ToX12EnvelopeSettingsResponsePtrOutput() X12EnvelopeSettingsResponsePtrOutput {
	return o
}

func (o X12EnvelopeSettingsResponsePtrOutput) ToX12EnvelopeSettingsResponsePtrOutputWithContext(ctx context.Context) X12EnvelopeSettingsResponsePtrOutput {
	return o
}

func (o X12EnvelopeSettingsResponsePtrOutput) Elem() X12EnvelopeSettingsResponseOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) X12EnvelopeSettingsResponse { return *v }).(X12EnvelopeSettingsResponseOutput)
}

// The controls standards id.
func (o X12EnvelopeSettingsResponsePtrOutput) ControlStandardsId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ControlStandardsId
	}).(pulumi.IntPtrOutput)
}

// The control version number.
func (o X12EnvelopeSettingsResponsePtrOutput) ControlVersionNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ControlVersionNumber
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to enable default group headers.
func (o X12EnvelopeSettingsResponsePtrOutput) EnableDefaultGroupHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableDefaultGroupHeaders
	}).(pulumi.BoolPtrOutput)
}

// The functional group id.
func (o X12EnvelopeSettingsResponsePtrOutput) FunctionalGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.FunctionalGroupId
	}).(pulumi.StringPtrOutput)
}

// The group control number lower bound.
func (o X12EnvelopeSettingsResponsePtrOutput) GroupControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.GroupControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The group control number upper bound.
func (o X12EnvelopeSettingsResponsePtrOutput) GroupControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.GroupControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The group header agency code.
func (o X12EnvelopeSettingsResponsePtrOutput) GroupHeaderAgencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.GroupHeaderAgencyCode
	}).(pulumi.StringPtrOutput)
}

// The group header date format.
func (o X12EnvelopeSettingsResponsePtrOutput) GroupHeaderDateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.GroupHeaderDateFormat
	}).(pulumi.StringPtrOutput)
}

// The group header time format.
func (o X12EnvelopeSettingsResponsePtrOutput) GroupHeaderTimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.GroupHeaderTimeFormat
	}).(pulumi.StringPtrOutput)
}

// The group header version.
func (o X12EnvelopeSettingsResponsePtrOutput) GroupHeaderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.GroupHeaderVersion
	}).(pulumi.StringPtrOutput)
}

// The interchange  control number lower bound.
func (o X12EnvelopeSettingsResponsePtrOutput) InterchangeControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.InterchangeControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The interchange  control number upper bound.
func (o X12EnvelopeSettingsResponsePtrOutput) InterchangeControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.InterchangeControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The value indicating whether to overwrite existing transaction set control number.
func (o X12EnvelopeSettingsResponsePtrOutput) OverwriteExistingTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.OverwriteExistingTransactionSetControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The receiver application id.
func (o X12EnvelopeSettingsResponsePtrOutput) ReceiverApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReceiverApplicationId
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to rollover group control number.
func (o X12EnvelopeSettingsResponsePtrOutput) RolloverGroupControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.RolloverGroupControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover interchange control number.
func (o X12EnvelopeSettingsResponsePtrOutput) RolloverInterchangeControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.RolloverInterchangeControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover transaction set control number.
func (o X12EnvelopeSettingsResponsePtrOutput) RolloverTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.RolloverTransactionSetControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The sender application id.
func (o X12EnvelopeSettingsResponsePtrOutput) SenderApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SenderApplicationId
	}).(pulumi.StringPtrOutput)
}

// The transaction set control number lower bound.
func (o X12EnvelopeSettingsResponsePtrOutput) TransactionSetControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TransactionSetControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The transaction set control number prefix.
func (o X12EnvelopeSettingsResponsePtrOutput) TransactionSetControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TransactionSetControlNumberPrefix
	}).(pulumi.StringPtrOutput)
}

// The transaction set control number suffix.
func (o X12EnvelopeSettingsResponsePtrOutput) TransactionSetControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TransactionSetControlNumberSuffix
	}).(pulumi.StringPtrOutput)
}

// The transaction set control number upper bound.
func (o X12EnvelopeSettingsResponsePtrOutput) TransactionSetControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TransactionSetControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The usage indicator.
func (o X12EnvelopeSettingsResponsePtrOutput) UsageIndicator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UsageIndicator
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to use control standards id as repetition character.
func (o X12EnvelopeSettingsResponsePtrOutput) UseControlStandardsIdAsRepetitionCharacter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.UseControlStandardsIdAsRepetitionCharacter
	}).(pulumi.BoolPtrOutput)
}

// The X12 agreement framing settings.
type X12FramingSettings struct {
	// The X12 character set.
	CharacterSet string `pulumi:"characterSet"`
	// The component separator.
	ComponentSeparator int `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator int `pulumi:"dataElementSeparator"`
	// The replacement character.
	ReplaceCharacter int `pulumi:"replaceCharacter"`
	// The value indicating whether to replace separators in payload.
	ReplaceSeparatorsInPayload bool `pulumi:"replaceSeparatorsInPayload"`
	// The segment terminator.
	SegmentTerminator int `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix string `pulumi:"segmentTerminatorSuffix"`
}

// X12FramingSettingsInput is an input type that accepts X12FramingSettingsArgs and X12FramingSettingsOutput values.
// You can construct a concrete instance of `X12FramingSettingsInput` via:
//
//          X12FramingSettingsArgs{...}
type X12FramingSettingsInput interface {
	pulumi.Input

	ToX12FramingSettingsOutput() X12FramingSettingsOutput
	ToX12FramingSettingsOutputWithContext(context.Context) X12FramingSettingsOutput
}

// The X12 agreement framing settings.
type X12FramingSettingsArgs struct {
	// The X12 character set.
	CharacterSet pulumi.StringInput `pulumi:"characterSet"`
	// The component separator.
	ComponentSeparator pulumi.IntInput `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator pulumi.IntInput `pulumi:"dataElementSeparator"`
	// The replacement character.
	ReplaceCharacter pulumi.IntInput `pulumi:"replaceCharacter"`
	// The value indicating whether to replace separators in payload.
	ReplaceSeparatorsInPayload pulumi.BoolInput `pulumi:"replaceSeparatorsInPayload"`
	// The segment terminator.
	SegmentTerminator pulumi.IntInput `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix pulumi.StringInput `pulumi:"segmentTerminatorSuffix"`
}

func (X12FramingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12FramingSettings)(nil)).Elem()
}

func (i X12FramingSettingsArgs) ToX12FramingSettingsOutput() X12FramingSettingsOutput {
	return i.ToX12FramingSettingsOutputWithContext(context.Background())
}

func (i X12FramingSettingsArgs) ToX12FramingSettingsOutputWithContext(ctx context.Context) X12FramingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12FramingSettingsOutput)
}

func (i X12FramingSettingsArgs) ToX12FramingSettingsPtrOutput() X12FramingSettingsPtrOutput {
	return i.ToX12FramingSettingsPtrOutputWithContext(context.Background())
}

func (i X12FramingSettingsArgs) ToX12FramingSettingsPtrOutputWithContext(ctx context.Context) X12FramingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12FramingSettingsOutput).ToX12FramingSettingsPtrOutputWithContext(ctx)
}

// X12FramingSettingsPtrInput is an input type that accepts X12FramingSettingsArgs, X12FramingSettingsPtr and X12FramingSettingsPtrOutput values.
// You can construct a concrete instance of `X12FramingSettingsPtrInput` via:
//
//          X12FramingSettingsArgs{...}
//
//  or:
//
//          nil
type X12FramingSettingsPtrInput interface {
	pulumi.Input

	ToX12FramingSettingsPtrOutput() X12FramingSettingsPtrOutput
	ToX12FramingSettingsPtrOutputWithContext(context.Context) X12FramingSettingsPtrOutput
}

type x12framingSettingsPtrType X12FramingSettingsArgs

func X12FramingSettingsPtr(v *X12FramingSettingsArgs) X12FramingSettingsPtrInput {
	return (*x12framingSettingsPtrType)(v)
}

func (*x12framingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12FramingSettings)(nil)).Elem()
}

func (i *x12framingSettingsPtrType) ToX12FramingSettingsPtrOutput() X12FramingSettingsPtrOutput {
	return i.ToX12FramingSettingsPtrOutputWithContext(context.Background())
}

func (i *x12framingSettingsPtrType) ToX12FramingSettingsPtrOutputWithContext(ctx context.Context) X12FramingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12FramingSettingsPtrOutput)
}

// The X12 agreement framing settings.
type X12FramingSettingsOutput struct{ *pulumi.OutputState }

func (X12FramingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12FramingSettings)(nil)).Elem()
}

func (o X12FramingSettingsOutput) ToX12FramingSettingsOutput() X12FramingSettingsOutput {
	return o
}

func (o X12FramingSettingsOutput) ToX12FramingSettingsOutputWithContext(ctx context.Context) X12FramingSettingsOutput {
	return o
}

func (o X12FramingSettingsOutput) ToX12FramingSettingsPtrOutput() X12FramingSettingsPtrOutput {
	return o.ToX12FramingSettingsPtrOutputWithContext(context.Background())
}

func (o X12FramingSettingsOutput) ToX12FramingSettingsPtrOutputWithContext(ctx context.Context) X12FramingSettingsPtrOutput {
	return o.ApplyT(func(v X12FramingSettings) *X12FramingSettings {
		return &v
	}).(X12FramingSettingsPtrOutput)
}

// The X12 character set.
func (o X12FramingSettingsOutput) CharacterSet() pulumi.StringOutput {
	return o.ApplyT(func(v X12FramingSettings) string { return v.CharacterSet }).(pulumi.StringOutput)
}

// The component separator.
func (o X12FramingSettingsOutput) ComponentSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v X12FramingSettings) int { return v.ComponentSeparator }).(pulumi.IntOutput)
}

// The data element separator.
func (o X12FramingSettingsOutput) DataElementSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v X12FramingSettings) int { return v.DataElementSeparator }).(pulumi.IntOutput)
}

// The replacement character.
func (o X12FramingSettingsOutput) ReplaceCharacter() pulumi.IntOutput {
	return o.ApplyT(func(v X12FramingSettings) int { return v.ReplaceCharacter }).(pulumi.IntOutput)
}

// The value indicating whether to replace separators in payload.
func (o X12FramingSettingsOutput) ReplaceSeparatorsInPayload() pulumi.BoolOutput {
	return o.ApplyT(func(v X12FramingSettings) bool { return v.ReplaceSeparatorsInPayload }).(pulumi.BoolOutput)
}

// The segment terminator.
func (o X12FramingSettingsOutput) SegmentTerminator() pulumi.IntOutput {
	return o.ApplyT(func(v X12FramingSettings) int { return v.SegmentTerminator }).(pulumi.IntOutput)
}

// The segment terminator suffix.
func (o X12FramingSettingsOutput) SegmentTerminatorSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v X12FramingSettings) string { return v.SegmentTerminatorSuffix }).(pulumi.StringOutput)
}

type X12FramingSettingsPtrOutput struct{ *pulumi.OutputState }

func (X12FramingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12FramingSettings)(nil)).Elem()
}

func (o X12FramingSettingsPtrOutput) ToX12FramingSettingsPtrOutput() X12FramingSettingsPtrOutput {
	return o
}

func (o X12FramingSettingsPtrOutput) ToX12FramingSettingsPtrOutputWithContext(ctx context.Context) X12FramingSettingsPtrOutput {
	return o
}

func (o X12FramingSettingsPtrOutput) Elem() X12FramingSettingsOutput {
	return o.ApplyT(func(v *X12FramingSettings) X12FramingSettings { return *v }).(X12FramingSettingsOutput)
}

// The X12 character set.
func (o X12FramingSettingsPtrOutput) CharacterSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12FramingSettings) *string {
		if v == nil {
			return nil
		}
		return &v.CharacterSet
	}).(pulumi.StringPtrOutput)
}

// The component separator.
func (o X12FramingSettingsPtrOutput) ComponentSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12FramingSettings) *int {
		if v == nil {
			return nil
		}
		return &v.ComponentSeparator
	}).(pulumi.IntPtrOutput)
}

// The data element separator.
func (o X12FramingSettingsPtrOutput) DataElementSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12FramingSettings) *int {
		if v == nil {
			return nil
		}
		return &v.DataElementSeparator
	}).(pulumi.IntPtrOutput)
}

// The replacement character.
func (o X12FramingSettingsPtrOutput) ReplaceCharacter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12FramingSettings) *int {
		if v == nil {
			return nil
		}
		return &v.ReplaceCharacter
	}).(pulumi.IntPtrOutput)
}

// The value indicating whether to replace separators in payload.
func (o X12FramingSettingsPtrOutput) ReplaceSeparatorsInPayload() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12FramingSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.ReplaceSeparatorsInPayload
	}).(pulumi.BoolPtrOutput)
}

// The segment terminator.
func (o X12FramingSettingsPtrOutput) SegmentTerminator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12FramingSettings) *int {
		if v == nil {
			return nil
		}
		return &v.SegmentTerminator
	}).(pulumi.IntPtrOutput)
}

// The segment terminator suffix.
func (o X12FramingSettingsPtrOutput) SegmentTerminatorSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12FramingSettings) *string {
		if v == nil {
			return nil
		}
		return &v.SegmentTerminatorSuffix
	}).(pulumi.StringPtrOutput)
}

// The X12 agreement framing settings.
type X12FramingSettingsResponse struct {
	// The X12 character set.
	CharacterSet string `pulumi:"characterSet"`
	// The component separator.
	ComponentSeparator int `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator int `pulumi:"dataElementSeparator"`
	// The replacement character.
	ReplaceCharacter int `pulumi:"replaceCharacter"`
	// The value indicating whether to replace separators in payload.
	ReplaceSeparatorsInPayload bool `pulumi:"replaceSeparatorsInPayload"`
	// The segment terminator.
	SegmentTerminator int `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix string `pulumi:"segmentTerminatorSuffix"`
}

// X12FramingSettingsResponseInput is an input type that accepts X12FramingSettingsResponseArgs and X12FramingSettingsResponseOutput values.
// You can construct a concrete instance of `X12FramingSettingsResponseInput` via:
//
//          X12FramingSettingsResponseArgs{...}
type X12FramingSettingsResponseInput interface {
	pulumi.Input

	ToX12FramingSettingsResponseOutput() X12FramingSettingsResponseOutput
	ToX12FramingSettingsResponseOutputWithContext(context.Context) X12FramingSettingsResponseOutput
}

// The X12 agreement framing settings.
type X12FramingSettingsResponseArgs struct {
	// The X12 character set.
	CharacterSet pulumi.StringInput `pulumi:"characterSet"`
	// The component separator.
	ComponentSeparator pulumi.IntInput `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator pulumi.IntInput `pulumi:"dataElementSeparator"`
	// The replacement character.
	ReplaceCharacter pulumi.IntInput `pulumi:"replaceCharacter"`
	// The value indicating whether to replace separators in payload.
	ReplaceSeparatorsInPayload pulumi.BoolInput `pulumi:"replaceSeparatorsInPayload"`
	// The segment terminator.
	SegmentTerminator pulumi.IntInput `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix pulumi.StringInput `pulumi:"segmentTerminatorSuffix"`
}

func (X12FramingSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12FramingSettingsResponse)(nil)).Elem()
}

func (i X12FramingSettingsResponseArgs) ToX12FramingSettingsResponseOutput() X12FramingSettingsResponseOutput {
	return i.ToX12FramingSettingsResponseOutputWithContext(context.Background())
}

func (i X12FramingSettingsResponseArgs) ToX12FramingSettingsResponseOutputWithContext(ctx context.Context) X12FramingSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12FramingSettingsResponseOutput)
}

func (i X12FramingSettingsResponseArgs) ToX12FramingSettingsResponsePtrOutput() X12FramingSettingsResponsePtrOutput {
	return i.ToX12FramingSettingsResponsePtrOutputWithContext(context.Background())
}

func (i X12FramingSettingsResponseArgs) ToX12FramingSettingsResponsePtrOutputWithContext(ctx context.Context) X12FramingSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12FramingSettingsResponseOutput).ToX12FramingSettingsResponsePtrOutputWithContext(ctx)
}

// X12FramingSettingsResponsePtrInput is an input type that accepts X12FramingSettingsResponseArgs, X12FramingSettingsResponsePtr and X12FramingSettingsResponsePtrOutput values.
// You can construct a concrete instance of `X12FramingSettingsResponsePtrInput` via:
//
//          X12FramingSettingsResponseArgs{...}
//
//  or:
//
//          nil
type X12FramingSettingsResponsePtrInput interface {
	pulumi.Input

	ToX12FramingSettingsResponsePtrOutput() X12FramingSettingsResponsePtrOutput
	ToX12FramingSettingsResponsePtrOutputWithContext(context.Context) X12FramingSettingsResponsePtrOutput
}

type x12framingSettingsResponsePtrType X12FramingSettingsResponseArgs

func X12FramingSettingsResponsePtr(v *X12FramingSettingsResponseArgs) X12FramingSettingsResponsePtrInput {
	return (*x12framingSettingsResponsePtrType)(v)
}

func (*x12framingSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12FramingSettingsResponse)(nil)).Elem()
}

func (i *x12framingSettingsResponsePtrType) ToX12FramingSettingsResponsePtrOutput() X12FramingSettingsResponsePtrOutput {
	return i.ToX12FramingSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *x12framingSettingsResponsePtrType) ToX12FramingSettingsResponsePtrOutputWithContext(ctx context.Context) X12FramingSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12FramingSettingsResponsePtrOutput)
}

// The X12 agreement framing settings.
type X12FramingSettingsResponseOutput struct{ *pulumi.OutputState }

func (X12FramingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12FramingSettingsResponse)(nil)).Elem()
}

func (o X12FramingSettingsResponseOutput) ToX12FramingSettingsResponseOutput() X12FramingSettingsResponseOutput {
	return o
}

func (o X12FramingSettingsResponseOutput) ToX12FramingSettingsResponseOutputWithContext(ctx context.Context) X12FramingSettingsResponseOutput {
	return o
}

func (o X12FramingSettingsResponseOutput) ToX12FramingSettingsResponsePtrOutput() X12FramingSettingsResponsePtrOutput {
	return o.ToX12FramingSettingsResponsePtrOutputWithContext(context.Background())
}

func (o X12FramingSettingsResponseOutput) ToX12FramingSettingsResponsePtrOutputWithContext(ctx context.Context) X12FramingSettingsResponsePtrOutput {
	return o.ApplyT(func(v X12FramingSettingsResponse) *X12FramingSettingsResponse {
		return &v
	}).(X12FramingSettingsResponsePtrOutput)
}

// The X12 character set.
func (o X12FramingSettingsResponseOutput) CharacterSet() pulumi.StringOutput {
	return o.ApplyT(func(v X12FramingSettingsResponse) string { return v.CharacterSet }).(pulumi.StringOutput)
}

// The component separator.
func (o X12FramingSettingsResponseOutput) ComponentSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v X12FramingSettingsResponse) int { return v.ComponentSeparator }).(pulumi.IntOutput)
}

// The data element separator.
func (o X12FramingSettingsResponseOutput) DataElementSeparator() pulumi.IntOutput {
	return o.ApplyT(func(v X12FramingSettingsResponse) int { return v.DataElementSeparator }).(pulumi.IntOutput)
}

// The replacement character.
func (o X12FramingSettingsResponseOutput) ReplaceCharacter() pulumi.IntOutput {
	return o.ApplyT(func(v X12FramingSettingsResponse) int { return v.ReplaceCharacter }).(pulumi.IntOutput)
}

// The value indicating whether to replace separators in payload.
func (o X12FramingSettingsResponseOutput) ReplaceSeparatorsInPayload() pulumi.BoolOutput {
	return o.ApplyT(func(v X12FramingSettingsResponse) bool { return v.ReplaceSeparatorsInPayload }).(pulumi.BoolOutput)
}

// The segment terminator.
func (o X12FramingSettingsResponseOutput) SegmentTerminator() pulumi.IntOutput {
	return o.ApplyT(func(v X12FramingSettingsResponse) int { return v.SegmentTerminator }).(pulumi.IntOutput)
}

// The segment terminator suffix.
func (o X12FramingSettingsResponseOutput) SegmentTerminatorSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v X12FramingSettingsResponse) string { return v.SegmentTerminatorSuffix }).(pulumi.StringOutput)
}

type X12FramingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (X12FramingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12FramingSettingsResponse)(nil)).Elem()
}

func (o X12FramingSettingsResponsePtrOutput) ToX12FramingSettingsResponsePtrOutput() X12FramingSettingsResponsePtrOutput {
	return o
}

func (o X12FramingSettingsResponsePtrOutput) ToX12FramingSettingsResponsePtrOutputWithContext(ctx context.Context) X12FramingSettingsResponsePtrOutput {
	return o
}

func (o X12FramingSettingsResponsePtrOutput) Elem() X12FramingSettingsResponseOutput {
	return o.ApplyT(func(v *X12FramingSettingsResponse) X12FramingSettingsResponse { return *v }).(X12FramingSettingsResponseOutput)
}

// The X12 character set.
func (o X12FramingSettingsResponsePtrOutput) CharacterSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12FramingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CharacterSet
	}).(pulumi.StringPtrOutput)
}

// The component separator.
func (o X12FramingSettingsResponsePtrOutput) ComponentSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12FramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ComponentSeparator
	}).(pulumi.IntPtrOutput)
}

// The data element separator.
func (o X12FramingSettingsResponsePtrOutput) DataElementSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12FramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DataElementSeparator
	}).(pulumi.IntPtrOutput)
}

// The replacement character.
func (o X12FramingSettingsResponsePtrOutput) ReplaceCharacter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12FramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ReplaceCharacter
	}).(pulumi.IntPtrOutput)
}

// The value indicating whether to replace separators in payload.
func (o X12FramingSettingsResponsePtrOutput) ReplaceSeparatorsInPayload() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12FramingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ReplaceSeparatorsInPayload
	}).(pulumi.BoolPtrOutput)
}

// The segment terminator.
func (o X12FramingSettingsResponsePtrOutput) SegmentTerminator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12FramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.SegmentTerminator
	}).(pulumi.IntPtrOutput)
}

// The segment terminator suffix.
func (o X12FramingSettingsResponsePtrOutput) SegmentTerminatorSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12FramingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SegmentTerminatorSuffix
	}).(pulumi.StringPtrOutput)
}

// The X12 message filter for odata query.
type X12MessageFilter struct {
	// The message filter type.
	MessageFilterType string `pulumi:"messageFilterType"`
}

// X12MessageFilterInput is an input type that accepts X12MessageFilterArgs and X12MessageFilterOutput values.
// You can construct a concrete instance of `X12MessageFilterInput` via:
//
//          X12MessageFilterArgs{...}
type X12MessageFilterInput interface {
	pulumi.Input

	ToX12MessageFilterOutput() X12MessageFilterOutput
	ToX12MessageFilterOutputWithContext(context.Context) X12MessageFilterOutput
}

// The X12 message filter for odata query.
type X12MessageFilterArgs struct {
	// The message filter type.
	MessageFilterType pulumi.StringInput `pulumi:"messageFilterType"`
}

func (X12MessageFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12MessageFilter)(nil)).Elem()
}

func (i X12MessageFilterArgs) ToX12MessageFilterOutput() X12MessageFilterOutput {
	return i.ToX12MessageFilterOutputWithContext(context.Background())
}

func (i X12MessageFilterArgs) ToX12MessageFilterOutputWithContext(ctx context.Context) X12MessageFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12MessageFilterOutput)
}

func (i X12MessageFilterArgs) ToX12MessageFilterPtrOutput() X12MessageFilterPtrOutput {
	return i.ToX12MessageFilterPtrOutputWithContext(context.Background())
}

func (i X12MessageFilterArgs) ToX12MessageFilterPtrOutputWithContext(ctx context.Context) X12MessageFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12MessageFilterOutput).ToX12MessageFilterPtrOutputWithContext(ctx)
}

// X12MessageFilterPtrInput is an input type that accepts X12MessageFilterArgs, X12MessageFilterPtr and X12MessageFilterPtrOutput values.
// You can construct a concrete instance of `X12MessageFilterPtrInput` via:
//
//          X12MessageFilterArgs{...}
//
//  or:
//
//          nil
type X12MessageFilterPtrInput interface {
	pulumi.Input

	ToX12MessageFilterPtrOutput() X12MessageFilterPtrOutput
	ToX12MessageFilterPtrOutputWithContext(context.Context) X12MessageFilterPtrOutput
}

type x12messageFilterPtrType X12MessageFilterArgs

func X12MessageFilterPtr(v *X12MessageFilterArgs) X12MessageFilterPtrInput {
	return (*x12messageFilterPtrType)(v)
}

func (*x12messageFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12MessageFilter)(nil)).Elem()
}

func (i *x12messageFilterPtrType) ToX12MessageFilterPtrOutput() X12MessageFilterPtrOutput {
	return i.ToX12MessageFilterPtrOutputWithContext(context.Background())
}

func (i *x12messageFilterPtrType) ToX12MessageFilterPtrOutputWithContext(ctx context.Context) X12MessageFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12MessageFilterPtrOutput)
}

// The X12 message filter for odata query.
type X12MessageFilterOutput struct{ *pulumi.OutputState }

func (X12MessageFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12MessageFilter)(nil)).Elem()
}

func (o X12MessageFilterOutput) ToX12MessageFilterOutput() X12MessageFilterOutput {
	return o
}

func (o X12MessageFilterOutput) ToX12MessageFilterOutputWithContext(ctx context.Context) X12MessageFilterOutput {
	return o
}

func (o X12MessageFilterOutput) ToX12MessageFilterPtrOutput() X12MessageFilterPtrOutput {
	return o.ToX12MessageFilterPtrOutputWithContext(context.Background())
}

func (o X12MessageFilterOutput) ToX12MessageFilterPtrOutputWithContext(ctx context.Context) X12MessageFilterPtrOutput {
	return o.ApplyT(func(v X12MessageFilter) *X12MessageFilter {
		return &v
	}).(X12MessageFilterPtrOutput)
}

// The message filter type.
func (o X12MessageFilterOutput) MessageFilterType() pulumi.StringOutput {
	return o.ApplyT(func(v X12MessageFilter) string { return v.MessageFilterType }).(pulumi.StringOutput)
}

type X12MessageFilterPtrOutput struct{ *pulumi.OutputState }

func (X12MessageFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12MessageFilter)(nil)).Elem()
}

func (o X12MessageFilterPtrOutput) ToX12MessageFilterPtrOutput() X12MessageFilterPtrOutput {
	return o
}

func (o X12MessageFilterPtrOutput) ToX12MessageFilterPtrOutputWithContext(ctx context.Context) X12MessageFilterPtrOutput {
	return o
}

func (o X12MessageFilterPtrOutput) Elem() X12MessageFilterOutput {
	return o.ApplyT(func(v *X12MessageFilter) X12MessageFilter { return *v }).(X12MessageFilterOutput)
}

// The message filter type.
func (o X12MessageFilterPtrOutput) MessageFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12MessageFilter) *string {
		if v == nil {
			return nil
		}
		return &v.MessageFilterType
	}).(pulumi.StringPtrOutput)
}

// The X12 message filter for odata query.
type X12MessageFilterResponse struct {
	// The message filter type.
	MessageFilterType string `pulumi:"messageFilterType"`
}

// X12MessageFilterResponseInput is an input type that accepts X12MessageFilterResponseArgs and X12MessageFilterResponseOutput values.
// You can construct a concrete instance of `X12MessageFilterResponseInput` via:
//
//          X12MessageFilterResponseArgs{...}
type X12MessageFilterResponseInput interface {
	pulumi.Input

	ToX12MessageFilterResponseOutput() X12MessageFilterResponseOutput
	ToX12MessageFilterResponseOutputWithContext(context.Context) X12MessageFilterResponseOutput
}

// The X12 message filter for odata query.
type X12MessageFilterResponseArgs struct {
	// The message filter type.
	MessageFilterType pulumi.StringInput `pulumi:"messageFilterType"`
}

func (X12MessageFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12MessageFilterResponse)(nil)).Elem()
}

func (i X12MessageFilterResponseArgs) ToX12MessageFilterResponseOutput() X12MessageFilterResponseOutput {
	return i.ToX12MessageFilterResponseOutputWithContext(context.Background())
}

func (i X12MessageFilterResponseArgs) ToX12MessageFilterResponseOutputWithContext(ctx context.Context) X12MessageFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12MessageFilterResponseOutput)
}

func (i X12MessageFilterResponseArgs) ToX12MessageFilterResponsePtrOutput() X12MessageFilterResponsePtrOutput {
	return i.ToX12MessageFilterResponsePtrOutputWithContext(context.Background())
}

func (i X12MessageFilterResponseArgs) ToX12MessageFilterResponsePtrOutputWithContext(ctx context.Context) X12MessageFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12MessageFilterResponseOutput).ToX12MessageFilterResponsePtrOutputWithContext(ctx)
}

// X12MessageFilterResponsePtrInput is an input type that accepts X12MessageFilterResponseArgs, X12MessageFilterResponsePtr and X12MessageFilterResponsePtrOutput values.
// You can construct a concrete instance of `X12MessageFilterResponsePtrInput` via:
//
//          X12MessageFilterResponseArgs{...}
//
//  or:
//
//          nil
type X12MessageFilterResponsePtrInput interface {
	pulumi.Input

	ToX12MessageFilterResponsePtrOutput() X12MessageFilterResponsePtrOutput
	ToX12MessageFilterResponsePtrOutputWithContext(context.Context) X12MessageFilterResponsePtrOutput
}

type x12messageFilterResponsePtrType X12MessageFilterResponseArgs

func X12MessageFilterResponsePtr(v *X12MessageFilterResponseArgs) X12MessageFilterResponsePtrInput {
	return (*x12messageFilterResponsePtrType)(v)
}

func (*x12messageFilterResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12MessageFilterResponse)(nil)).Elem()
}

func (i *x12messageFilterResponsePtrType) ToX12MessageFilterResponsePtrOutput() X12MessageFilterResponsePtrOutput {
	return i.ToX12MessageFilterResponsePtrOutputWithContext(context.Background())
}

func (i *x12messageFilterResponsePtrType) ToX12MessageFilterResponsePtrOutputWithContext(ctx context.Context) X12MessageFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12MessageFilterResponsePtrOutput)
}

// The X12 message filter for odata query.
type X12MessageFilterResponseOutput struct{ *pulumi.OutputState }

func (X12MessageFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12MessageFilterResponse)(nil)).Elem()
}

func (o X12MessageFilterResponseOutput) ToX12MessageFilterResponseOutput() X12MessageFilterResponseOutput {
	return o
}

func (o X12MessageFilterResponseOutput) ToX12MessageFilterResponseOutputWithContext(ctx context.Context) X12MessageFilterResponseOutput {
	return o
}

func (o X12MessageFilterResponseOutput) ToX12MessageFilterResponsePtrOutput() X12MessageFilterResponsePtrOutput {
	return o.ToX12MessageFilterResponsePtrOutputWithContext(context.Background())
}

func (o X12MessageFilterResponseOutput) ToX12MessageFilterResponsePtrOutputWithContext(ctx context.Context) X12MessageFilterResponsePtrOutput {
	return o.ApplyT(func(v X12MessageFilterResponse) *X12MessageFilterResponse {
		return &v
	}).(X12MessageFilterResponsePtrOutput)
}

// The message filter type.
func (o X12MessageFilterResponseOutput) MessageFilterType() pulumi.StringOutput {
	return o.ApplyT(func(v X12MessageFilterResponse) string { return v.MessageFilterType }).(pulumi.StringOutput)
}

type X12MessageFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (X12MessageFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12MessageFilterResponse)(nil)).Elem()
}

func (o X12MessageFilterResponsePtrOutput) ToX12MessageFilterResponsePtrOutput() X12MessageFilterResponsePtrOutput {
	return o
}

func (o X12MessageFilterResponsePtrOutput) ToX12MessageFilterResponsePtrOutputWithContext(ctx context.Context) X12MessageFilterResponsePtrOutput {
	return o
}

func (o X12MessageFilterResponsePtrOutput) Elem() X12MessageFilterResponseOutput {
	return o.ApplyT(func(v *X12MessageFilterResponse) X12MessageFilterResponse { return *v }).(X12MessageFilterResponseOutput)
}

// The message filter type.
func (o X12MessageFilterResponsePtrOutput) MessageFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12MessageFilterResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MessageFilterType
	}).(pulumi.StringPtrOutput)
}

// The X12 message identifier.
type X12MessageIdentifier struct {
	// The message id.
	MessageId string `pulumi:"messageId"`
}

// X12MessageIdentifierInput is an input type that accepts X12MessageIdentifierArgs and X12MessageIdentifierOutput values.
// You can construct a concrete instance of `X12MessageIdentifierInput` via:
//
//          X12MessageIdentifierArgs{...}
type X12MessageIdentifierInput interface {
	pulumi.Input

	ToX12MessageIdentifierOutput() X12MessageIdentifierOutput
	ToX12MessageIdentifierOutputWithContext(context.Context) X12MessageIdentifierOutput
}

// The X12 message identifier.
type X12MessageIdentifierArgs struct {
	// The message id.
	MessageId pulumi.StringInput `pulumi:"messageId"`
}

func (X12MessageIdentifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12MessageIdentifier)(nil)).Elem()
}

func (i X12MessageIdentifierArgs) ToX12MessageIdentifierOutput() X12MessageIdentifierOutput {
	return i.ToX12MessageIdentifierOutputWithContext(context.Background())
}

func (i X12MessageIdentifierArgs) ToX12MessageIdentifierOutputWithContext(ctx context.Context) X12MessageIdentifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12MessageIdentifierOutput)
}

// X12MessageIdentifierArrayInput is an input type that accepts X12MessageIdentifierArray and X12MessageIdentifierArrayOutput values.
// You can construct a concrete instance of `X12MessageIdentifierArrayInput` via:
//
//          X12MessageIdentifierArray{ X12MessageIdentifierArgs{...} }
type X12MessageIdentifierArrayInput interface {
	pulumi.Input

	ToX12MessageIdentifierArrayOutput() X12MessageIdentifierArrayOutput
	ToX12MessageIdentifierArrayOutputWithContext(context.Context) X12MessageIdentifierArrayOutput
}

type X12MessageIdentifierArray []X12MessageIdentifierInput

func (X12MessageIdentifierArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12MessageIdentifier)(nil)).Elem()
}

func (i X12MessageIdentifierArray) ToX12MessageIdentifierArrayOutput() X12MessageIdentifierArrayOutput {
	return i.ToX12MessageIdentifierArrayOutputWithContext(context.Background())
}

func (i X12MessageIdentifierArray) ToX12MessageIdentifierArrayOutputWithContext(ctx context.Context) X12MessageIdentifierArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12MessageIdentifierArrayOutput)
}

// The X12 message identifier.
type X12MessageIdentifierOutput struct{ *pulumi.OutputState }

func (X12MessageIdentifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12MessageIdentifier)(nil)).Elem()
}

func (o X12MessageIdentifierOutput) ToX12MessageIdentifierOutput() X12MessageIdentifierOutput {
	return o
}

func (o X12MessageIdentifierOutput) ToX12MessageIdentifierOutputWithContext(ctx context.Context) X12MessageIdentifierOutput {
	return o
}

// The message id.
func (o X12MessageIdentifierOutput) MessageId() pulumi.StringOutput {
	return o.ApplyT(func(v X12MessageIdentifier) string { return v.MessageId }).(pulumi.StringOutput)
}

type X12MessageIdentifierArrayOutput struct{ *pulumi.OutputState }

func (X12MessageIdentifierArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12MessageIdentifier)(nil)).Elem()
}

func (o X12MessageIdentifierArrayOutput) ToX12MessageIdentifierArrayOutput() X12MessageIdentifierArrayOutput {
	return o
}

func (o X12MessageIdentifierArrayOutput) ToX12MessageIdentifierArrayOutputWithContext(ctx context.Context) X12MessageIdentifierArrayOutput {
	return o
}

func (o X12MessageIdentifierArrayOutput) Index(i pulumi.IntInput) X12MessageIdentifierOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X12MessageIdentifier {
		return vs[0].([]X12MessageIdentifier)[vs[1].(int)]
	}).(X12MessageIdentifierOutput)
}

// The X12 message identifier.
type X12MessageIdentifierResponse struct {
	// The message id.
	MessageId string `pulumi:"messageId"`
}

// X12MessageIdentifierResponseInput is an input type that accepts X12MessageIdentifierResponseArgs and X12MessageIdentifierResponseOutput values.
// You can construct a concrete instance of `X12MessageIdentifierResponseInput` via:
//
//          X12MessageIdentifierResponseArgs{...}
type X12MessageIdentifierResponseInput interface {
	pulumi.Input

	ToX12MessageIdentifierResponseOutput() X12MessageIdentifierResponseOutput
	ToX12MessageIdentifierResponseOutputWithContext(context.Context) X12MessageIdentifierResponseOutput
}

// The X12 message identifier.
type X12MessageIdentifierResponseArgs struct {
	// The message id.
	MessageId pulumi.StringInput `pulumi:"messageId"`
}

func (X12MessageIdentifierResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12MessageIdentifierResponse)(nil)).Elem()
}

func (i X12MessageIdentifierResponseArgs) ToX12MessageIdentifierResponseOutput() X12MessageIdentifierResponseOutput {
	return i.ToX12MessageIdentifierResponseOutputWithContext(context.Background())
}

func (i X12MessageIdentifierResponseArgs) ToX12MessageIdentifierResponseOutputWithContext(ctx context.Context) X12MessageIdentifierResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12MessageIdentifierResponseOutput)
}

// X12MessageIdentifierResponseArrayInput is an input type that accepts X12MessageIdentifierResponseArray and X12MessageIdentifierResponseArrayOutput values.
// You can construct a concrete instance of `X12MessageIdentifierResponseArrayInput` via:
//
//          X12MessageIdentifierResponseArray{ X12MessageIdentifierResponseArgs{...} }
type X12MessageIdentifierResponseArrayInput interface {
	pulumi.Input

	ToX12MessageIdentifierResponseArrayOutput() X12MessageIdentifierResponseArrayOutput
	ToX12MessageIdentifierResponseArrayOutputWithContext(context.Context) X12MessageIdentifierResponseArrayOutput
}

type X12MessageIdentifierResponseArray []X12MessageIdentifierResponseInput

func (X12MessageIdentifierResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12MessageIdentifierResponse)(nil)).Elem()
}

func (i X12MessageIdentifierResponseArray) ToX12MessageIdentifierResponseArrayOutput() X12MessageIdentifierResponseArrayOutput {
	return i.ToX12MessageIdentifierResponseArrayOutputWithContext(context.Background())
}

func (i X12MessageIdentifierResponseArray) ToX12MessageIdentifierResponseArrayOutputWithContext(ctx context.Context) X12MessageIdentifierResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12MessageIdentifierResponseArrayOutput)
}

// The X12 message identifier.
type X12MessageIdentifierResponseOutput struct{ *pulumi.OutputState }

func (X12MessageIdentifierResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12MessageIdentifierResponse)(nil)).Elem()
}

func (o X12MessageIdentifierResponseOutput) ToX12MessageIdentifierResponseOutput() X12MessageIdentifierResponseOutput {
	return o
}

func (o X12MessageIdentifierResponseOutput) ToX12MessageIdentifierResponseOutputWithContext(ctx context.Context) X12MessageIdentifierResponseOutput {
	return o
}

// The message id.
func (o X12MessageIdentifierResponseOutput) MessageId() pulumi.StringOutput {
	return o.ApplyT(func(v X12MessageIdentifierResponse) string { return v.MessageId }).(pulumi.StringOutput)
}

type X12MessageIdentifierResponseArrayOutput struct{ *pulumi.OutputState }

func (X12MessageIdentifierResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12MessageIdentifierResponse)(nil)).Elem()
}

func (o X12MessageIdentifierResponseArrayOutput) ToX12MessageIdentifierResponseArrayOutput() X12MessageIdentifierResponseArrayOutput {
	return o
}

func (o X12MessageIdentifierResponseArrayOutput) ToX12MessageIdentifierResponseArrayOutputWithContext(ctx context.Context) X12MessageIdentifierResponseArrayOutput {
	return o
}

func (o X12MessageIdentifierResponseArrayOutput) Index(i pulumi.IntInput) X12MessageIdentifierResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X12MessageIdentifierResponse {
		return vs[0].([]X12MessageIdentifierResponse)[vs[1].(int)]
	}).(X12MessageIdentifierResponseOutput)
}

// The X12 one-way agreement.
type X12OneWayAgreement struct {
	// The X12 protocol settings.
	ProtocolSettings X12ProtocolSettings `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity BusinessIdentity `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity BusinessIdentity `pulumi:"senderBusinessIdentity"`
}

// X12OneWayAgreementInput is an input type that accepts X12OneWayAgreementArgs and X12OneWayAgreementOutput values.
// You can construct a concrete instance of `X12OneWayAgreementInput` via:
//
//          X12OneWayAgreementArgs{...}
type X12OneWayAgreementInput interface {
	pulumi.Input

	ToX12OneWayAgreementOutput() X12OneWayAgreementOutput
	ToX12OneWayAgreementOutputWithContext(context.Context) X12OneWayAgreementOutput
}

// The X12 one-way agreement.
type X12OneWayAgreementArgs struct {
	// The X12 protocol settings.
	ProtocolSettings X12ProtocolSettingsInput `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity BusinessIdentityInput `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity BusinessIdentityInput `pulumi:"senderBusinessIdentity"`
}

func (X12OneWayAgreementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12OneWayAgreement)(nil)).Elem()
}

func (i X12OneWayAgreementArgs) ToX12OneWayAgreementOutput() X12OneWayAgreementOutput {
	return i.ToX12OneWayAgreementOutputWithContext(context.Background())
}

func (i X12OneWayAgreementArgs) ToX12OneWayAgreementOutputWithContext(ctx context.Context) X12OneWayAgreementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12OneWayAgreementOutput)
}

func (i X12OneWayAgreementArgs) ToX12OneWayAgreementPtrOutput() X12OneWayAgreementPtrOutput {
	return i.ToX12OneWayAgreementPtrOutputWithContext(context.Background())
}

func (i X12OneWayAgreementArgs) ToX12OneWayAgreementPtrOutputWithContext(ctx context.Context) X12OneWayAgreementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12OneWayAgreementOutput).ToX12OneWayAgreementPtrOutputWithContext(ctx)
}

// X12OneWayAgreementPtrInput is an input type that accepts X12OneWayAgreementArgs, X12OneWayAgreementPtr and X12OneWayAgreementPtrOutput values.
// You can construct a concrete instance of `X12OneWayAgreementPtrInput` via:
//
//          X12OneWayAgreementArgs{...}
//
//  or:
//
//          nil
type X12OneWayAgreementPtrInput interface {
	pulumi.Input

	ToX12OneWayAgreementPtrOutput() X12OneWayAgreementPtrOutput
	ToX12OneWayAgreementPtrOutputWithContext(context.Context) X12OneWayAgreementPtrOutput
}

type x12oneWayAgreementPtrType X12OneWayAgreementArgs

func X12OneWayAgreementPtr(v *X12OneWayAgreementArgs) X12OneWayAgreementPtrInput {
	return (*x12oneWayAgreementPtrType)(v)
}

func (*x12oneWayAgreementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12OneWayAgreement)(nil)).Elem()
}

func (i *x12oneWayAgreementPtrType) ToX12OneWayAgreementPtrOutput() X12OneWayAgreementPtrOutput {
	return i.ToX12OneWayAgreementPtrOutputWithContext(context.Background())
}

func (i *x12oneWayAgreementPtrType) ToX12OneWayAgreementPtrOutputWithContext(ctx context.Context) X12OneWayAgreementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12OneWayAgreementPtrOutput)
}

// The X12 one-way agreement.
type X12OneWayAgreementOutput struct{ *pulumi.OutputState }

func (X12OneWayAgreementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12OneWayAgreement)(nil)).Elem()
}

func (o X12OneWayAgreementOutput) ToX12OneWayAgreementOutput() X12OneWayAgreementOutput {
	return o
}

func (o X12OneWayAgreementOutput) ToX12OneWayAgreementOutputWithContext(ctx context.Context) X12OneWayAgreementOutput {
	return o
}

func (o X12OneWayAgreementOutput) ToX12OneWayAgreementPtrOutput() X12OneWayAgreementPtrOutput {
	return o.ToX12OneWayAgreementPtrOutputWithContext(context.Background())
}

func (o X12OneWayAgreementOutput) ToX12OneWayAgreementPtrOutputWithContext(ctx context.Context) X12OneWayAgreementPtrOutput {
	return o.ApplyT(func(v X12OneWayAgreement) *X12OneWayAgreement {
		return &v
	}).(X12OneWayAgreementPtrOutput)
}

// The X12 protocol settings.
func (o X12OneWayAgreementOutput) ProtocolSettings() X12ProtocolSettingsOutput {
	return o.ApplyT(func(v X12OneWayAgreement) X12ProtocolSettings { return v.ProtocolSettings }).(X12ProtocolSettingsOutput)
}

// The receiver business identity
func (o X12OneWayAgreementOutput) ReceiverBusinessIdentity() BusinessIdentityOutput {
	return o.ApplyT(func(v X12OneWayAgreement) BusinessIdentity { return v.ReceiverBusinessIdentity }).(BusinessIdentityOutput)
}

// The sender business identity
func (o X12OneWayAgreementOutput) SenderBusinessIdentity() BusinessIdentityOutput {
	return o.ApplyT(func(v X12OneWayAgreement) BusinessIdentity { return v.SenderBusinessIdentity }).(BusinessIdentityOutput)
}

type X12OneWayAgreementPtrOutput struct{ *pulumi.OutputState }

func (X12OneWayAgreementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12OneWayAgreement)(nil)).Elem()
}

func (o X12OneWayAgreementPtrOutput) ToX12OneWayAgreementPtrOutput() X12OneWayAgreementPtrOutput {
	return o
}

func (o X12OneWayAgreementPtrOutput) ToX12OneWayAgreementPtrOutputWithContext(ctx context.Context) X12OneWayAgreementPtrOutput {
	return o
}

func (o X12OneWayAgreementPtrOutput) Elem() X12OneWayAgreementOutput {
	return o.ApplyT(func(v *X12OneWayAgreement) X12OneWayAgreement { return *v }).(X12OneWayAgreementOutput)
}

// The X12 protocol settings.
func (o X12OneWayAgreementPtrOutput) ProtocolSettings() X12ProtocolSettingsPtrOutput {
	return o.ApplyT(func(v *X12OneWayAgreement) *X12ProtocolSettings {
		if v == nil {
			return nil
		}
		return &v.ProtocolSettings
	}).(X12ProtocolSettingsPtrOutput)
}

// The receiver business identity
func (o X12OneWayAgreementPtrOutput) ReceiverBusinessIdentity() BusinessIdentityPtrOutput {
	return o.ApplyT(func(v *X12OneWayAgreement) *BusinessIdentity {
		if v == nil {
			return nil
		}
		return &v.ReceiverBusinessIdentity
	}).(BusinessIdentityPtrOutput)
}

// The sender business identity
func (o X12OneWayAgreementPtrOutput) SenderBusinessIdentity() BusinessIdentityPtrOutput {
	return o.ApplyT(func(v *X12OneWayAgreement) *BusinessIdentity {
		if v == nil {
			return nil
		}
		return &v.SenderBusinessIdentity
	}).(BusinessIdentityPtrOutput)
}

// The X12 one-way agreement.
type X12OneWayAgreementResponse struct {
	// The X12 protocol settings.
	ProtocolSettings X12ProtocolSettingsResponse `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity BusinessIdentityResponse `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity BusinessIdentityResponse `pulumi:"senderBusinessIdentity"`
}

// X12OneWayAgreementResponseInput is an input type that accepts X12OneWayAgreementResponseArgs and X12OneWayAgreementResponseOutput values.
// You can construct a concrete instance of `X12OneWayAgreementResponseInput` via:
//
//          X12OneWayAgreementResponseArgs{...}
type X12OneWayAgreementResponseInput interface {
	pulumi.Input

	ToX12OneWayAgreementResponseOutput() X12OneWayAgreementResponseOutput
	ToX12OneWayAgreementResponseOutputWithContext(context.Context) X12OneWayAgreementResponseOutput
}

// The X12 one-way agreement.
type X12OneWayAgreementResponseArgs struct {
	// The X12 protocol settings.
	ProtocolSettings X12ProtocolSettingsResponseInput `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity BusinessIdentityResponseInput `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity BusinessIdentityResponseInput `pulumi:"senderBusinessIdentity"`
}

func (X12OneWayAgreementResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12OneWayAgreementResponse)(nil)).Elem()
}

func (i X12OneWayAgreementResponseArgs) ToX12OneWayAgreementResponseOutput() X12OneWayAgreementResponseOutput {
	return i.ToX12OneWayAgreementResponseOutputWithContext(context.Background())
}

func (i X12OneWayAgreementResponseArgs) ToX12OneWayAgreementResponseOutputWithContext(ctx context.Context) X12OneWayAgreementResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12OneWayAgreementResponseOutput)
}

func (i X12OneWayAgreementResponseArgs) ToX12OneWayAgreementResponsePtrOutput() X12OneWayAgreementResponsePtrOutput {
	return i.ToX12OneWayAgreementResponsePtrOutputWithContext(context.Background())
}

func (i X12OneWayAgreementResponseArgs) ToX12OneWayAgreementResponsePtrOutputWithContext(ctx context.Context) X12OneWayAgreementResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12OneWayAgreementResponseOutput).ToX12OneWayAgreementResponsePtrOutputWithContext(ctx)
}

// X12OneWayAgreementResponsePtrInput is an input type that accepts X12OneWayAgreementResponseArgs, X12OneWayAgreementResponsePtr and X12OneWayAgreementResponsePtrOutput values.
// You can construct a concrete instance of `X12OneWayAgreementResponsePtrInput` via:
//
//          X12OneWayAgreementResponseArgs{...}
//
//  or:
//
//          nil
type X12OneWayAgreementResponsePtrInput interface {
	pulumi.Input

	ToX12OneWayAgreementResponsePtrOutput() X12OneWayAgreementResponsePtrOutput
	ToX12OneWayAgreementResponsePtrOutputWithContext(context.Context) X12OneWayAgreementResponsePtrOutput
}

type x12oneWayAgreementResponsePtrType X12OneWayAgreementResponseArgs

func X12OneWayAgreementResponsePtr(v *X12OneWayAgreementResponseArgs) X12OneWayAgreementResponsePtrInput {
	return (*x12oneWayAgreementResponsePtrType)(v)
}

func (*x12oneWayAgreementResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12OneWayAgreementResponse)(nil)).Elem()
}

func (i *x12oneWayAgreementResponsePtrType) ToX12OneWayAgreementResponsePtrOutput() X12OneWayAgreementResponsePtrOutput {
	return i.ToX12OneWayAgreementResponsePtrOutputWithContext(context.Background())
}

func (i *x12oneWayAgreementResponsePtrType) ToX12OneWayAgreementResponsePtrOutputWithContext(ctx context.Context) X12OneWayAgreementResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12OneWayAgreementResponsePtrOutput)
}

// The X12 one-way agreement.
type X12OneWayAgreementResponseOutput struct{ *pulumi.OutputState }

func (X12OneWayAgreementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12OneWayAgreementResponse)(nil)).Elem()
}

func (o X12OneWayAgreementResponseOutput) ToX12OneWayAgreementResponseOutput() X12OneWayAgreementResponseOutput {
	return o
}

func (o X12OneWayAgreementResponseOutput) ToX12OneWayAgreementResponseOutputWithContext(ctx context.Context) X12OneWayAgreementResponseOutput {
	return o
}

func (o X12OneWayAgreementResponseOutput) ToX12OneWayAgreementResponsePtrOutput() X12OneWayAgreementResponsePtrOutput {
	return o.ToX12OneWayAgreementResponsePtrOutputWithContext(context.Background())
}

func (o X12OneWayAgreementResponseOutput) ToX12OneWayAgreementResponsePtrOutputWithContext(ctx context.Context) X12OneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v X12OneWayAgreementResponse) *X12OneWayAgreementResponse {
		return &v
	}).(X12OneWayAgreementResponsePtrOutput)
}

// The X12 protocol settings.
func (o X12OneWayAgreementResponseOutput) ProtocolSettings() X12ProtocolSettingsResponseOutput {
	return o.ApplyT(func(v X12OneWayAgreementResponse) X12ProtocolSettingsResponse { return v.ProtocolSettings }).(X12ProtocolSettingsResponseOutput)
}

// The receiver business identity
func (o X12OneWayAgreementResponseOutput) ReceiverBusinessIdentity() BusinessIdentityResponseOutput {
	return o.ApplyT(func(v X12OneWayAgreementResponse) BusinessIdentityResponse { return v.ReceiverBusinessIdentity }).(BusinessIdentityResponseOutput)
}

// The sender business identity
func (o X12OneWayAgreementResponseOutput) SenderBusinessIdentity() BusinessIdentityResponseOutput {
	return o.ApplyT(func(v X12OneWayAgreementResponse) BusinessIdentityResponse { return v.SenderBusinessIdentity }).(BusinessIdentityResponseOutput)
}

type X12OneWayAgreementResponsePtrOutput struct{ *pulumi.OutputState }

func (X12OneWayAgreementResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12OneWayAgreementResponse)(nil)).Elem()
}

func (o X12OneWayAgreementResponsePtrOutput) ToX12OneWayAgreementResponsePtrOutput() X12OneWayAgreementResponsePtrOutput {
	return o
}

func (o X12OneWayAgreementResponsePtrOutput) ToX12OneWayAgreementResponsePtrOutputWithContext(ctx context.Context) X12OneWayAgreementResponsePtrOutput {
	return o
}

func (o X12OneWayAgreementResponsePtrOutput) Elem() X12OneWayAgreementResponseOutput {
	return o.ApplyT(func(v *X12OneWayAgreementResponse) X12OneWayAgreementResponse { return *v }).(X12OneWayAgreementResponseOutput)
}

// The X12 protocol settings.
func (o X12OneWayAgreementResponsePtrOutput) ProtocolSettings() X12ProtocolSettingsResponsePtrOutput {
	return o.ApplyT(func(v *X12OneWayAgreementResponse) *X12ProtocolSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.ProtocolSettings
	}).(X12ProtocolSettingsResponsePtrOutput)
}

// The receiver business identity
func (o X12OneWayAgreementResponsePtrOutput) ReceiverBusinessIdentity() BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v *X12OneWayAgreementResponse) *BusinessIdentityResponse {
		if v == nil {
			return nil
		}
		return &v.ReceiverBusinessIdentity
	}).(BusinessIdentityResponsePtrOutput)
}

// The sender business identity
func (o X12OneWayAgreementResponsePtrOutput) SenderBusinessIdentity() BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v *X12OneWayAgreementResponse) *BusinessIdentityResponse {
		if v == nil {
			return nil
		}
		return &v.SenderBusinessIdentity
	}).(BusinessIdentityResponsePtrOutput)
}

// The X12 processing settings.
type X12ProcessingSettings struct {
	// The value indicating whether to convert numerical type to implied decimal.
	ConvertImpliedDecimal bool `pulumi:"convertImpliedDecimal"`
	// The value indicating whether to create empty xml tags for trailing separators.
	CreateEmptyXmlTagsForTrailingSeparators bool `pulumi:"createEmptyXmlTagsForTrailingSeparators"`
	// The value indicating whether to mask security information.
	MaskSecurityInfo bool `pulumi:"maskSecurityInfo"`
	// The value indicating whether to preserve interchange.
	PreserveInterchange bool `pulumi:"preserveInterchange"`
	// The value indicating whether to suspend interchange on error.
	SuspendInterchangeOnError bool `pulumi:"suspendInterchangeOnError"`
	// The value indicating whether to use dot as decimal separator.
	UseDotAsDecimalSeparator bool `pulumi:"useDotAsDecimalSeparator"`
}

// X12ProcessingSettingsInput is an input type that accepts X12ProcessingSettingsArgs and X12ProcessingSettingsOutput values.
// You can construct a concrete instance of `X12ProcessingSettingsInput` via:
//
//          X12ProcessingSettingsArgs{...}
type X12ProcessingSettingsInput interface {
	pulumi.Input

	ToX12ProcessingSettingsOutput() X12ProcessingSettingsOutput
	ToX12ProcessingSettingsOutputWithContext(context.Context) X12ProcessingSettingsOutput
}

// The X12 processing settings.
type X12ProcessingSettingsArgs struct {
	// The value indicating whether to convert numerical type to implied decimal.
	ConvertImpliedDecimal pulumi.BoolInput `pulumi:"convertImpliedDecimal"`
	// The value indicating whether to create empty xml tags for trailing separators.
	CreateEmptyXmlTagsForTrailingSeparators pulumi.BoolInput `pulumi:"createEmptyXmlTagsForTrailingSeparators"`
	// The value indicating whether to mask security information.
	MaskSecurityInfo pulumi.BoolInput `pulumi:"maskSecurityInfo"`
	// The value indicating whether to preserve interchange.
	PreserveInterchange pulumi.BoolInput `pulumi:"preserveInterchange"`
	// The value indicating whether to suspend interchange on error.
	SuspendInterchangeOnError pulumi.BoolInput `pulumi:"suspendInterchangeOnError"`
	// The value indicating whether to use dot as decimal separator.
	UseDotAsDecimalSeparator pulumi.BoolInput `pulumi:"useDotAsDecimalSeparator"`
}

func (X12ProcessingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ProcessingSettings)(nil)).Elem()
}

func (i X12ProcessingSettingsArgs) ToX12ProcessingSettingsOutput() X12ProcessingSettingsOutput {
	return i.ToX12ProcessingSettingsOutputWithContext(context.Background())
}

func (i X12ProcessingSettingsArgs) ToX12ProcessingSettingsOutputWithContext(ctx context.Context) X12ProcessingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ProcessingSettingsOutput)
}

func (i X12ProcessingSettingsArgs) ToX12ProcessingSettingsPtrOutput() X12ProcessingSettingsPtrOutput {
	return i.ToX12ProcessingSettingsPtrOutputWithContext(context.Background())
}

func (i X12ProcessingSettingsArgs) ToX12ProcessingSettingsPtrOutputWithContext(ctx context.Context) X12ProcessingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ProcessingSettingsOutput).ToX12ProcessingSettingsPtrOutputWithContext(ctx)
}

// X12ProcessingSettingsPtrInput is an input type that accepts X12ProcessingSettingsArgs, X12ProcessingSettingsPtr and X12ProcessingSettingsPtrOutput values.
// You can construct a concrete instance of `X12ProcessingSettingsPtrInput` via:
//
//          X12ProcessingSettingsArgs{...}
//
//  or:
//
//          nil
type X12ProcessingSettingsPtrInput interface {
	pulumi.Input

	ToX12ProcessingSettingsPtrOutput() X12ProcessingSettingsPtrOutput
	ToX12ProcessingSettingsPtrOutputWithContext(context.Context) X12ProcessingSettingsPtrOutput
}

type x12processingSettingsPtrType X12ProcessingSettingsArgs

func X12ProcessingSettingsPtr(v *X12ProcessingSettingsArgs) X12ProcessingSettingsPtrInput {
	return (*x12processingSettingsPtrType)(v)
}

func (*x12processingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12ProcessingSettings)(nil)).Elem()
}

func (i *x12processingSettingsPtrType) ToX12ProcessingSettingsPtrOutput() X12ProcessingSettingsPtrOutput {
	return i.ToX12ProcessingSettingsPtrOutputWithContext(context.Background())
}

func (i *x12processingSettingsPtrType) ToX12ProcessingSettingsPtrOutputWithContext(ctx context.Context) X12ProcessingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ProcessingSettingsPtrOutput)
}

// The X12 processing settings.
type X12ProcessingSettingsOutput struct{ *pulumi.OutputState }

func (X12ProcessingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ProcessingSettings)(nil)).Elem()
}

func (o X12ProcessingSettingsOutput) ToX12ProcessingSettingsOutput() X12ProcessingSettingsOutput {
	return o
}

func (o X12ProcessingSettingsOutput) ToX12ProcessingSettingsOutputWithContext(ctx context.Context) X12ProcessingSettingsOutput {
	return o
}

func (o X12ProcessingSettingsOutput) ToX12ProcessingSettingsPtrOutput() X12ProcessingSettingsPtrOutput {
	return o.ToX12ProcessingSettingsPtrOutputWithContext(context.Background())
}

func (o X12ProcessingSettingsOutput) ToX12ProcessingSettingsPtrOutputWithContext(ctx context.Context) X12ProcessingSettingsPtrOutput {
	return o.ApplyT(func(v X12ProcessingSettings) *X12ProcessingSettings {
		return &v
	}).(X12ProcessingSettingsPtrOutput)
}

// The value indicating whether to convert numerical type to implied decimal.
func (o X12ProcessingSettingsOutput) ConvertImpliedDecimal() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ProcessingSettings) bool { return v.ConvertImpliedDecimal }).(pulumi.BoolOutput)
}

// The value indicating whether to create empty xml tags for trailing separators.
func (o X12ProcessingSettingsOutput) CreateEmptyXmlTagsForTrailingSeparators() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ProcessingSettings) bool { return v.CreateEmptyXmlTagsForTrailingSeparators }).(pulumi.BoolOutput)
}

// The value indicating whether to mask security information.
func (o X12ProcessingSettingsOutput) MaskSecurityInfo() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ProcessingSettings) bool { return v.MaskSecurityInfo }).(pulumi.BoolOutput)
}

// The value indicating whether to preserve interchange.
func (o X12ProcessingSettingsOutput) PreserveInterchange() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ProcessingSettings) bool { return v.PreserveInterchange }).(pulumi.BoolOutput)
}

// The value indicating whether to suspend interchange on error.
func (o X12ProcessingSettingsOutput) SuspendInterchangeOnError() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ProcessingSettings) bool { return v.SuspendInterchangeOnError }).(pulumi.BoolOutput)
}

// The value indicating whether to use dot as decimal separator.
func (o X12ProcessingSettingsOutput) UseDotAsDecimalSeparator() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ProcessingSettings) bool { return v.UseDotAsDecimalSeparator }).(pulumi.BoolOutput)
}

type X12ProcessingSettingsPtrOutput struct{ *pulumi.OutputState }

func (X12ProcessingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12ProcessingSettings)(nil)).Elem()
}

func (o X12ProcessingSettingsPtrOutput) ToX12ProcessingSettingsPtrOutput() X12ProcessingSettingsPtrOutput {
	return o
}

func (o X12ProcessingSettingsPtrOutput) ToX12ProcessingSettingsPtrOutputWithContext(ctx context.Context) X12ProcessingSettingsPtrOutput {
	return o
}

func (o X12ProcessingSettingsPtrOutput) Elem() X12ProcessingSettingsOutput {
	return o.ApplyT(func(v *X12ProcessingSettings) X12ProcessingSettings { return *v }).(X12ProcessingSettingsOutput)
}

// The value indicating whether to convert numerical type to implied decimal.
func (o X12ProcessingSettingsPtrOutput) ConvertImpliedDecimal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ProcessingSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.ConvertImpliedDecimal
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to create empty xml tags for trailing separators.
func (o X12ProcessingSettingsPtrOutput) CreateEmptyXmlTagsForTrailingSeparators() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ProcessingSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.CreateEmptyXmlTagsForTrailingSeparators
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to mask security information.
func (o X12ProcessingSettingsPtrOutput) MaskSecurityInfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ProcessingSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.MaskSecurityInfo
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to preserve interchange.
func (o X12ProcessingSettingsPtrOutput) PreserveInterchange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ProcessingSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.PreserveInterchange
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to suspend interchange on error.
func (o X12ProcessingSettingsPtrOutput) SuspendInterchangeOnError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ProcessingSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.SuspendInterchangeOnError
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to use dot as decimal separator.
func (o X12ProcessingSettingsPtrOutput) UseDotAsDecimalSeparator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ProcessingSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.UseDotAsDecimalSeparator
	}).(pulumi.BoolPtrOutput)
}

// The X12 processing settings.
type X12ProcessingSettingsResponse struct {
	// The value indicating whether to convert numerical type to implied decimal.
	ConvertImpliedDecimal bool `pulumi:"convertImpliedDecimal"`
	// The value indicating whether to create empty xml tags for trailing separators.
	CreateEmptyXmlTagsForTrailingSeparators bool `pulumi:"createEmptyXmlTagsForTrailingSeparators"`
	// The value indicating whether to mask security information.
	MaskSecurityInfo bool `pulumi:"maskSecurityInfo"`
	// The value indicating whether to preserve interchange.
	PreserveInterchange bool `pulumi:"preserveInterchange"`
	// The value indicating whether to suspend interchange on error.
	SuspendInterchangeOnError bool `pulumi:"suspendInterchangeOnError"`
	// The value indicating whether to use dot as decimal separator.
	UseDotAsDecimalSeparator bool `pulumi:"useDotAsDecimalSeparator"`
}

// X12ProcessingSettingsResponseInput is an input type that accepts X12ProcessingSettingsResponseArgs and X12ProcessingSettingsResponseOutput values.
// You can construct a concrete instance of `X12ProcessingSettingsResponseInput` via:
//
//          X12ProcessingSettingsResponseArgs{...}
type X12ProcessingSettingsResponseInput interface {
	pulumi.Input

	ToX12ProcessingSettingsResponseOutput() X12ProcessingSettingsResponseOutput
	ToX12ProcessingSettingsResponseOutputWithContext(context.Context) X12ProcessingSettingsResponseOutput
}

// The X12 processing settings.
type X12ProcessingSettingsResponseArgs struct {
	// The value indicating whether to convert numerical type to implied decimal.
	ConvertImpliedDecimal pulumi.BoolInput `pulumi:"convertImpliedDecimal"`
	// The value indicating whether to create empty xml tags for trailing separators.
	CreateEmptyXmlTagsForTrailingSeparators pulumi.BoolInput `pulumi:"createEmptyXmlTagsForTrailingSeparators"`
	// The value indicating whether to mask security information.
	MaskSecurityInfo pulumi.BoolInput `pulumi:"maskSecurityInfo"`
	// The value indicating whether to preserve interchange.
	PreserveInterchange pulumi.BoolInput `pulumi:"preserveInterchange"`
	// The value indicating whether to suspend interchange on error.
	SuspendInterchangeOnError pulumi.BoolInput `pulumi:"suspendInterchangeOnError"`
	// The value indicating whether to use dot as decimal separator.
	UseDotAsDecimalSeparator pulumi.BoolInput `pulumi:"useDotAsDecimalSeparator"`
}

func (X12ProcessingSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ProcessingSettingsResponse)(nil)).Elem()
}

func (i X12ProcessingSettingsResponseArgs) ToX12ProcessingSettingsResponseOutput() X12ProcessingSettingsResponseOutput {
	return i.ToX12ProcessingSettingsResponseOutputWithContext(context.Background())
}

func (i X12ProcessingSettingsResponseArgs) ToX12ProcessingSettingsResponseOutputWithContext(ctx context.Context) X12ProcessingSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ProcessingSettingsResponseOutput)
}

func (i X12ProcessingSettingsResponseArgs) ToX12ProcessingSettingsResponsePtrOutput() X12ProcessingSettingsResponsePtrOutput {
	return i.ToX12ProcessingSettingsResponsePtrOutputWithContext(context.Background())
}

func (i X12ProcessingSettingsResponseArgs) ToX12ProcessingSettingsResponsePtrOutputWithContext(ctx context.Context) X12ProcessingSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ProcessingSettingsResponseOutput).ToX12ProcessingSettingsResponsePtrOutputWithContext(ctx)
}

// X12ProcessingSettingsResponsePtrInput is an input type that accepts X12ProcessingSettingsResponseArgs, X12ProcessingSettingsResponsePtr and X12ProcessingSettingsResponsePtrOutput values.
// You can construct a concrete instance of `X12ProcessingSettingsResponsePtrInput` via:
//
//          X12ProcessingSettingsResponseArgs{...}
//
//  or:
//
//          nil
type X12ProcessingSettingsResponsePtrInput interface {
	pulumi.Input

	ToX12ProcessingSettingsResponsePtrOutput() X12ProcessingSettingsResponsePtrOutput
	ToX12ProcessingSettingsResponsePtrOutputWithContext(context.Context) X12ProcessingSettingsResponsePtrOutput
}

type x12processingSettingsResponsePtrType X12ProcessingSettingsResponseArgs

func X12ProcessingSettingsResponsePtr(v *X12ProcessingSettingsResponseArgs) X12ProcessingSettingsResponsePtrInput {
	return (*x12processingSettingsResponsePtrType)(v)
}

func (*x12processingSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12ProcessingSettingsResponse)(nil)).Elem()
}

func (i *x12processingSettingsResponsePtrType) ToX12ProcessingSettingsResponsePtrOutput() X12ProcessingSettingsResponsePtrOutput {
	return i.ToX12ProcessingSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *x12processingSettingsResponsePtrType) ToX12ProcessingSettingsResponsePtrOutputWithContext(ctx context.Context) X12ProcessingSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ProcessingSettingsResponsePtrOutput)
}

// The X12 processing settings.
type X12ProcessingSettingsResponseOutput struct{ *pulumi.OutputState }

func (X12ProcessingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ProcessingSettingsResponse)(nil)).Elem()
}

func (o X12ProcessingSettingsResponseOutput) ToX12ProcessingSettingsResponseOutput() X12ProcessingSettingsResponseOutput {
	return o
}

func (o X12ProcessingSettingsResponseOutput) ToX12ProcessingSettingsResponseOutputWithContext(ctx context.Context) X12ProcessingSettingsResponseOutput {
	return o
}

func (o X12ProcessingSettingsResponseOutput) ToX12ProcessingSettingsResponsePtrOutput() X12ProcessingSettingsResponsePtrOutput {
	return o.ToX12ProcessingSettingsResponsePtrOutputWithContext(context.Background())
}

func (o X12ProcessingSettingsResponseOutput) ToX12ProcessingSettingsResponsePtrOutputWithContext(ctx context.Context) X12ProcessingSettingsResponsePtrOutput {
	return o.ApplyT(func(v X12ProcessingSettingsResponse) *X12ProcessingSettingsResponse {
		return &v
	}).(X12ProcessingSettingsResponsePtrOutput)
}

// The value indicating whether to convert numerical type to implied decimal.
func (o X12ProcessingSettingsResponseOutput) ConvertImpliedDecimal() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ProcessingSettingsResponse) bool { return v.ConvertImpliedDecimal }).(pulumi.BoolOutput)
}

// The value indicating whether to create empty xml tags for trailing separators.
func (o X12ProcessingSettingsResponseOutput) CreateEmptyXmlTagsForTrailingSeparators() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ProcessingSettingsResponse) bool { return v.CreateEmptyXmlTagsForTrailingSeparators }).(pulumi.BoolOutput)
}

// The value indicating whether to mask security information.
func (o X12ProcessingSettingsResponseOutput) MaskSecurityInfo() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ProcessingSettingsResponse) bool { return v.MaskSecurityInfo }).(pulumi.BoolOutput)
}

// The value indicating whether to preserve interchange.
func (o X12ProcessingSettingsResponseOutput) PreserveInterchange() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ProcessingSettingsResponse) bool { return v.PreserveInterchange }).(pulumi.BoolOutput)
}

// The value indicating whether to suspend interchange on error.
func (o X12ProcessingSettingsResponseOutput) SuspendInterchangeOnError() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ProcessingSettingsResponse) bool { return v.SuspendInterchangeOnError }).(pulumi.BoolOutput)
}

// The value indicating whether to use dot as decimal separator.
func (o X12ProcessingSettingsResponseOutput) UseDotAsDecimalSeparator() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ProcessingSettingsResponse) bool { return v.UseDotAsDecimalSeparator }).(pulumi.BoolOutput)
}

type X12ProcessingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (X12ProcessingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12ProcessingSettingsResponse)(nil)).Elem()
}

func (o X12ProcessingSettingsResponsePtrOutput) ToX12ProcessingSettingsResponsePtrOutput() X12ProcessingSettingsResponsePtrOutput {
	return o
}

func (o X12ProcessingSettingsResponsePtrOutput) ToX12ProcessingSettingsResponsePtrOutputWithContext(ctx context.Context) X12ProcessingSettingsResponsePtrOutput {
	return o
}

func (o X12ProcessingSettingsResponsePtrOutput) Elem() X12ProcessingSettingsResponseOutput {
	return o.ApplyT(func(v *X12ProcessingSettingsResponse) X12ProcessingSettingsResponse { return *v }).(X12ProcessingSettingsResponseOutput)
}

// The value indicating whether to convert numerical type to implied decimal.
func (o X12ProcessingSettingsResponsePtrOutput) ConvertImpliedDecimal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ConvertImpliedDecimal
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to create empty xml tags for trailing separators.
func (o X12ProcessingSettingsResponsePtrOutput) CreateEmptyXmlTagsForTrailingSeparators() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CreateEmptyXmlTagsForTrailingSeparators
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to mask security information.
func (o X12ProcessingSettingsResponsePtrOutput) MaskSecurityInfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.MaskSecurityInfo
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to preserve interchange.
func (o X12ProcessingSettingsResponsePtrOutput) PreserveInterchange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.PreserveInterchange
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to suspend interchange on error.
func (o X12ProcessingSettingsResponsePtrOutput) SuspendInterchangeOnError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.SuspendInterchangeOnError
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to use dot as decimal separator.
func (o X12ProcessingSettingsResponsePtrOutput) UseDotAsDecimalSeparator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.UseDotAsDecimalSeparator
	}).(pulumi.BoolPtrOutput)
}

// The X12 agreement protocol settings.
type X12ProtocolSettings struct {
	// The X12 acknowledgment settings.
	AcknowledgementSettings X12AcknowledgementSettings `pulumi:"acknowledgementSettings"`
	// The X12 envelope override settings.
	EnvelopeOverrides []X12EnvelopeOverride `pulumi:"envelopeOverrides"`
	// The X12 envelope settings.
	EnvelopeSettings X12EnvelopeSettings `pulumi:"envelopeSettings"`
	// The X12 framing settings.
	FramingSettings X12FramingSettings `pulumi:"framingSettings"`
	// The X12 message filter.
	MessageFilter X12MessageFilter `pulumi:"messageFilter"`
	// The X12 message filter list.
	MessageFilterList []X12MessageIdentifier `pulumi:"messageFilterList"`
	// The X12 processing settings.
	ProcessingSettings X12ProcessingSettings `pulumi:"processingSettings"`
	// The X12 schema references.
	SchemaReferences []X12SchemaReference `pulumi:"schemaReferences"`
	// The X12 security settings.
	SecuritySettings X12SecuritySettings `pulumi:"securitySettings"`
	// The X12 validation override settings.
	ValidationOverrides []X12ValidationOverride `pulumi:"validationOverrides"`
	// The X12 validation settings.
	ValidationSettings X12ValidationSettings `pulumi:"validationSettings"`
	// The X12 delimiter override settings.
	X12DelimiterOverrides []X12DelimiterOverrides `pulumi:"x12DelimiterOverrides"`
}

// X12ProtocolSettingsInput is an input type that accepts X12ProtocolSettingsArgs and X12ProtocolSettingsOutput values.
// You can construct a concrete instance of `X12ProtocolSettingsInput` via:
//
//          X12ProtocolSettingsArgs{...}
type X12ProtocolSettingsInput interface {
	pulumi.Input

	ToX12ProtocolSettingsOutput() X12ProtocolSettingsOutput
	ToX12ProtocolSettingsOutputWithContext(context.Context) X12ProtocolSettingsOutput
}

// The X12 agreement protocol settings.
type X12ProtocolSettingsArgs struct {
	// The X12 acknowledgment settings.
	AcknowledgementSettings X12AcknowledgementSettingsInput `pulumi:"acknowledgementSettings"`
	// The X12 envelope override settings.
	EnvelopeOverrides X12EnvelopeOverrideArrayInput `pulumi:"envelopeOverrides"`
	// The X12 envelope settings.
	EnvelopeSettings X12EnvelopeSettingsInput `pulumi:"envelopeSettings"`
	// The X12 framing settings.
	FramingSettings X12FramingSettingsInput `pulumi:"framingSettings"`
	// The X12 message filter.
	MessageFilter X12MessageFilterInput `pulumi:"messageFilter"`
	// The X12 message filter list.
	MessageFilterList X12MessageIdentifierArrayInput `pulumi:"messageFilterList"`
	// The X12 processing settings.
	ProcessingSettings X12ProcessingSettingsInput `pulumi:"processingSettings"`
	// The X12 schema references.
	SchemaReferences X12SchemaReferenceArrayInput `pulumi:"schemaReferences"`
	// The X12 security settings.
	SecuritySettings X12SecuritySettingsInput `pulumi:"securitySettings"`
	// The X12 validation override settings.
	ValidationOverrides X12ValidationOverrideArrayInput `pulumi:"validationOverrides"`
	// The X12 validation settings.
	ValidationSettings X12ValidationSettingsInput `pulumi:"validationSettings"`
	// The X12 delimiter override settings.
	X12DelimiterOverrides X12DelimiterOverridesArrayInput `pulumi:"x12DelimiterOverrides"`
}

func (X12ProtocolSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ProtocolSettings)(nil)).Elem()
}

func (i X12ProtocolSettingsArgs) ToX12ProtocolSettingsOutput() X12ProtocolSettingsOutput {
	return i.ToX12ProtocolSettingsOutputWithContext(context.Background())
}

func (i X12ProtocolSettingsArgs) ToX12ProtocolSettingsOutputWithContext(ctx context.Context) X12ProtocolSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ProtocolSettingsOutput)
}

func (i X12ProtocolSettingsArgs) ToX12ProtocolSettingsPtrOutput() X12ProtocolSettingsPtrOutput {
	return i.ToX12ProtocolSettingsPtrOutputWithContext(context.Background())
}

func (i X12ProtocolSettingsArgs) ToX12ProtocolSettingsPtrOutputWithContext(ctx context.Context) X12ProtocolSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ProtocolSettingsOutput).ToX12ProtocolSettingsPtrOutputWithContext(ctx)
}

// X12ProtocolSettingsPtrInput is an input type that accepts X12ProtocolSettingsArgs, X12ProtocolSettingsPtr and X12ProtocolSettingsPtrOutput values.
// You can construct a concrete instance of `X12ProtocolSettingsPtrInput` via:
//
//          X12ProtocolSettingsArgs{...}
//
//  or:
//
//          nil
type X12ProtocolSettingsPtrInput interface {
	pulumi.Input

	ToX12ProtocolSettingsPtrOutput() X12ProtocolSettingsPtrOutput
	ToX12ProtocolSettingsPtrOutputWithContext(context.Context) X12ProtocolSettingsPtrOutput
}

type x12protocolSettingsPtrType X12ProtocolSettingsArgs

func X12ProtocolSettingsPtr(v *X12ProtocolSettingsArgs) X12ProtocolSettingsPtrInput {
	return (*x12protocolSettingsPtrType)(v)
}

func (*x12protocolSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12ProtocolSettings)(nil)).Elem()
}

func (i *x12protocolSettingsPtrType) ToX12ProtocolSettingsPtrOutput() X12ProtocolSettingsPtrOutput {
	return i.ToX12ProtocolSettingsPtrOutputWithContext(context.Background())
}

func (i *x12protocolSettingsPtrType) ToX12ProtocolSettingsPtrOutputWithContext(ctx context.Context) X12ProtocolSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ProtocolSettingsPtrOutput)
}

// The X12 agreement protocol settings.
type X12ProtocolSettingsOutput struct{ *pulumi.OutputState }

func (X12ProtocolSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ProtocolSettings)(nil)).Elem()
}

func (o X12ProtocolSettingsOutput) ToX12ProtocolSettingsOutput() X12ProtocolSettingsOutput {
	return o
}

func (o X12ProtocolSettingsOutput) ToX12ProtocolSettingsOutputWithContext(ctx context.Context) X12ProtocolSettingsOutput {
	return o
}

func (o X12ProtocolSettingsOutput) ToX12ProtocolSettingsPtrOutput() X12ProtocolSettingsPtrOutput {
	return o.ToX12ProtocolSettingsPtrOutputWithContext(context.Background())
}

func (o X12ProtocolSettingsOutput) ToX12ProtocolSettingsPtrOutputWithContext(ctx context.Context) X12ProtocolSettingsPtrOutput {
	return o.ApplyT(func(v X12ProtocolSettings) *X12ProtocolSettings {
		return &v
	}).(X12ProtocolSettingsPtrOutput)
}

// The X12 acknowledgment settings.
func (o X12ProtocolSettingsOutput) AcknowledgementSettings() X12AcknowledgementSettingsOutput {
	return o.ApplyT(func(v X12ProtocolSettings) X12AcknowledgementSettings { return v.AcknowledgementSettings }).(X12AcknowledgementSettingsOutput)
}

// The X12 envelope override settings.
func (o X12ProtocolSettingsOutput) EnvelopeOverrides() X12EnvelopeOverrideArrayOutput {
	return o.ApplyT(func(v X12ProtocolSettings) []X12EnvelopeOverride { return v.EnvelopeOverrides }).(X12EnvelopeOverrideArrayOutput)
}

// The X12 envelope settings.
func (o X12ProtocolSettingsOutput) EnvelopeSettings() X12EnvelopeSettingsOutput {
	return o.ApplyT(func(v X12ProtocolSettings) X12EnvelopeSettings { return v.EnvelopeSettings }).(X12EnvelopeSettingsOutput)
}

// The X12 framing settings.
func (o X12ProtocolSettingsOutput) FramingSettings() X12FramingSettingsOutput {
	return o.ApplyT(func(v X12ProtocolSettings) X12FramingSettings { return v.FramingSettings }).(X12FramingSettingsOutput)
}

// The X12 message filter.
func (o X12ProtocolSettingsOutput) MessageFilter() X12MessageFilterOutput {
	return o.ApplyT(func(v X12ProtocolSettings) X12MessageFilter { return v.MessageFilter }).(X12MessageFilterOutput)
}

// The X12 message filter list.
func (o X12ProtocolSettingsOutput) MessageFilterList() X12MessageIdentifierArrayOutput {
	return o.ApplyT(func(v X12ProtocolSettings) []X12MessageIdentifier { return v.MessageFilterList }).(X12MessageIdentifierArrayOutput)
}

// The X12 processing settings.
func (o X12ProtocolSettingsOutput) ProcessingSettings() X12ProcessingSettingsOutput {
	return o.ApplyT(func(v X12ProtocolSettings) X12ProcessingSettings { return v.ProcessingSettings }).(X12ProcessingSettingsOutput)
}

// The X12 schema references.
func (o X12ProtocolSettingsOutput) SchemaReferences() X12SchemaReferenceArrayOutput {
	return o.ApplyT(func(v X12ProtocolSettings) []X12SchemaReference { return v.SchemaReferences }).(X12SchemaReferenceArrayOutput)
}

// The X12 security settings.
func (o X12ProtocolSettingsOutput) SecuritySettings() X12SecuritySettingsOutput {
	return o.ApplyT(func(v X12ProtocolSettings) X12SecuritySettings { return v.SecuritySettings }).(X12SecuritySettingsOutput)
}

// The X12 validation override settings.
func (o X12ProtocolSettingsOutput) ValidationOverrides() X12ValidationOverrideArrayOutput {
	return o.ApplyT(func(v X12ProtocolSettings) []X12ValidationOverride { return v.ValidationOverrides }).(X12ValidationOverrideArrayOutput)
}

// The X12 validation settings.
func (o X12ProtocolSettingsOutput) ValidationSettings() X12ValidationSettingsOutput {
	return o.ApplyT(func(v X12ProtocolSettings) X12ValidationSettings { return v.ValidationSettings }).(X12ValidationSettingsOutput)
}

// The X12 delimiter override settings.
func (o X12ProtocolSettingsOutput) X12DelimiterOverrides() X12DelimiterOverridesArrayOutput {
	return o.ApplyT(func(v X12ProtocolSettings) []X12DelimiterOverrides { return v.X12DelimiterOverrides }).(X12DelimiterOverridesArrayOutput)
}

type X12ProtocolSettingsPtrOutput struct{ *pulumi.OutputState }

func (X12ProtocolSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12ProtocolSettings)(nil)).Elem()
}

func (o X12ProtocolSettingsPtrOutput) ToX12ProtocolSettingsPtrOutput() X12ProtocolSettingsPtrOutput {
	return o
}

func (o X12ProtocolSettingsPtrOutput) ToX12ProtocolSettingsPtrOutputWithContext(ctx context.Context) X12ProtocolSettingsPtrOutput {
	return o
}

func (o X12ProtocolSettingsPtrOutput) Elem() X12ProtocolSettingsOutput {
	return o.ApplyT(func(v *X12ProtocolSettings) X12ProtocolSettings { return *v }).(X12ProtocolSettingsOutput)
}

// The X12 acknowledgment settings.
func (o X12ProtocolSettingsPtrOutput) AcknowledgementSettings() X12AcknowledgementSettingsPtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettings) *X12AcknowledgementSettings {
		if v == nil {
			return nil
		}
		return &v.AcknowledgementSettings
	}).(X12AcknowledgementSettingsPtrOutput)
}

// The X12 envelope override settings.
func (o X12ProtocolSettingsPtrOutput) EnvelopeOverrides() X12EnvelopeOverrideArrayOutput {
	return o.ApplyT(func(v *X12ProtocolSettings) []X12EnvelopeOverride {
		if v == nil {
			return nil
		}
		return v.EnvelopeOverrides
	}).(X12EnvelopeOverrideArrayOutput)
}

// The X12 envelope settings.
func (o X12ProtocolSettingsPtrOutput) EnvelopeSettings() X12EnvelopeSettingsPtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettings) *X12EnvelopeSettings {
		if v == nil {
			return nil
		}
		return &v.EnvelopeSettings
	}).(X12EnvelopeSettingsPtrOutput)
}

// The X12 framing settings.
func (o X12ProtocolSettingsPtrOutput) FramingSettings() X12FramingSettingsPtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettings) *X12FramingSettings {
		if v == nil {
			return nil
		}
		return &v.FramingSettings
	}).(X12FramingSettingsPtrOutput)
}

// The X12 message filter.
func (o X12ProtocolSettingsPtrOutput) MessageFilter() X12MessageFilterPtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettings) *X12MessageFilter {
		if v == nil {
			return nil
		}
		return &v.MessageFilter
	}).(X12MessageFilterPtrOutput)
}

// The X12 message filter list.
func (o X12ProtocolSettingsPtrOutput) MessageFilterList() X12MessageIdentifierArrayOutput {
	return o.ApplyT(func(v *X12ProtocolSettings) []X12MessageIdentifier {
		if v == nil {
			return nil
		}
		return v.MessageFilterList
	}).(X12MessageIdentifierArrayOutput)
}

// The X12 processing settings.
func (o X12ProtocolSettingsPtrOutput) ProcessingSettings() X12ProcessingSettingsPtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettings) *X12ProcessingSettings {
		if v == nil {
			return nil
		}
		return &v.ProcessingSettings
	}).(X12ProcessingSettingsPtrOutput)
}

// The X12 schema references.
func (o X12ProtocolSettingsPtrOutput) SchemaReferences() X12SchemaReferenceArrayOutput {
	return o.ApplyT(func(v *X12ProtocolSettings) []X12SchemaReference {
		if v == nil {
			return nil
		}
		return v.SchemaReferences
	}).(X12SchemaReferenceArrayOutput)
}

// The X12 security settings.
func (o X12ProtocolSettingsPtrOutput) SecuritySettings() X12SecuritySettingsPtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettings) *X12SecuritySettings {
		if v == nil {
			return nil
		}
		return &v.SecuritySettings
	}).(X12SecuritySettingsPtrOutput)
}

// The X12 validation override settings.
func (o X12ProtocolSettingsPtrOutput) ValidationOverrides() X12ValidationOverrideArrayOutput {
	return o.ApplyT(func(v *X12ProtocolSettings) []X12ValidationOverride {
		if v == nil {
			return nil
		}
		return v.ValidationOverrides
	}).(X12ValidationOverrideArrayOutput)
}

// The X12 validation settings.
func (o X12ProtocolSettingsPtrOutput) ValidationSettings() X12ValidationSettingsPtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettings) *X12ValidationSettings {
		if v == nil {
			return nil
		}
		return &v.ValidationSettings
	}).(X12ValidationSettingsPtrOutput)
}

// The X12 delimiter override settings.
func (o X12ProtocolSettingsPtrOutput) X12DelimiterOverrides() X12DelimiterOverridesArrayOutput {
	return o.ApplyT(func(v *X12ProtocolSettings) []X12DelimiterOverrides {
		if v == nil {
			return nil
		}
		return v.X12DelimiterOverrides
	}).(X12DelimiterOverridesArrayOutput)
}

// The X12 agreement protocol settings.
type X12ProtocolSettingsResponse struct {
	// The X12 acknowledgment settings.
	AcknowledgementSettings X12AcknowledgementSettingsResponse `pulumi:"acknowledgementSettings"`
	// The X12 envelope override settings.
	EnvelopeOverrides []X12EnvelopeOverrideResponse `pulumi:"envelopeOverrides"`
	// The X12 envelope settings.
	EnvelopeSettings X12EnvelopeSettingsResponse `pulumi:"envelopeSettings"`
	// The X12 framing settings.
	FramingSettings X12FramingSettingsResponse `pulumi:"framingSettings"`
	// The X12 message filter.
	MessageFilter X12MessageFilterResponse `pulumi:"messageFilter"`
	// The X12 message filter list.
	MessageFilterList []X12MessageIdentifierResponse `pulumi:"messageFilterList"`
	// The X12 processing settings.
	ProcessingSettings X12ProcessingSettingsResponse `pulumi:"processingSettings"`
	// The X12 schema references.
	SchemaReferences []X12SchemaReferenceResponse `pulumi:"schemaReferences"`
	// The X12 security settings.
	SecuritySettings X12SecuritySettingsResponse `pulumi:"securitySettings"`
	// The X12 validation override settings.
	ValidationOverrides []X12ValidationOverrideResponse `pulumi:"validationOverrides"`
	// The X12 validation settings.
	ValidationSettings X12ValidationSettingsResponse `pulumi:"validationSettings"`
	// The X12 delimiter override settings.
	X12DelimiterOverrides []X12DelimiterOverridesResponse `pulumi:"x12DelimiterOverrides"`
}

// X12ProtocolSettingsResponseInput is an input type that accepts X12ProtocolSettingsResponseArgs and X12ProtocolSettingsResponseOutput values.
// You can construct a concrete instance of `X12ProtocolSettingsResponseInput` via:
//
//          X12ProtocolSettingsResponseArgs{...}
type X12ProtocolSettingsResponseInput interface {
	pulumi.Input

	ToX12ProtocolSettingsResponseOutput() X12ProtocolSettingsResponseOutput
	ToX12ProtocolSettingsResponseOutputWithContext(context.Context) X12ProtocolSettingsResponseOutput
}

// The X12 agreement protocol settings.
type X12ProtocolSettingsResponseArgs struct {
	// The X12 acknowledgment settings.
	AcknowledgementSettings X12AcknowledgementSettingsResponseInput `pulumi:"acknowledgementSettings"`
	// The X12 envelope override settings.
	EnvelopeOverrides X12EnvelopeOverrideResponseArrayInput `pulumi:"envelopeOverrides"`
	// The X12 envelope settings.
	EnvelopeSettings X12EnvelopeSettingsResponseInput `pulumi:"envelopeSettings"`
	// The X12 framing settings.
	FramingSettings X12FramingSettingsResponseInput `pulumi:"framingSettings"`
	// The X12 message filter.
	MessageFilter X12MessageFilterResponseInput `pulumi:"messageFilter"`
	// The X12 message filter list.
	MessageFilterList X12MessageIdentifierResponseArrayInput `pulumi:"messageFilterList"`
	// The X12 processing settings.
	ProcessingSettings X12ProcessingSettingsResponseInput `pulumi:"processingSettings"`
	// The X12 schema references.
	SchemaReferences X12SchemaReferenceResponseArrayInput `pulumi:"schemaReferences"`
	// The X12 security settings.
	SecuritySettings X12SecuritySettingsResponseInput `pulumi:"securitySettings"`
	// The X12 validation override settings.
	ValidationOverrides X12ValidationOverrideResponseArrayInput `pulumi:"validationOverrides"`
	// The X12 validation settings.
	ValidationSettings X12ValidationSettingsResponseInput `pulumi:"validationSettings"`
	// The X12 delimiter override settings.
	X12DelimiterOverrides X12DelimiterOverridesResponseArrayInput `pulumi:"x12DelimiterOverrides"`
}

func (X12ProtocolSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ProtocolSettingsResponse)(nil)).Elem()
}

func (i X12ProtocolSettingsResponseArgs) ToX12ProtocolSettingsResponseOutput() X12ProtocolSettingsResponseOutput {
	return i.ToX12ProtocolSettingsResponseOutputWithContext(context.Background())
}

func (i X12ProtocolSettingsResponseArgs) ToX12ProtocolSettingsResponseOutputWithContext(ctx context.Context) X12ProtocolSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ProtocolSettingsResponseOutput)
}

func (i X12ProtocolSettingsResponseArgs) ToX12ProtocolSettingsResponsePtrOutput() X12ProtocolSettingsResponsePtrOutput {
	return i.ToX12ProtocolSettingsResponsePtrOutputWithContext(context.Background())
}

func (i X12ProtocolSettingsResponseArgs) ToX12ProtocolSettingsResponsePtrOutputWithContext(ctx context.Context) X12ProtocolSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ProtocolSettingsResponseOutput).ToX12ProtocolSettingsResponsePtrOutputWithContext(ctx)
}

// X12ProtocolSettingsResponsePtrInput is an input type that accepts X12ProtocolSettingsResponseArgs, X12ProtocolSettingsResponsePtr and X12ProtocolSettingsResponsePtrOutput values.
// You can construct a concrete instance of `X12ProtocolSettingsResponsePtrInput` via:
//
//          X12ProtocolSettingsResponseArgs{...}
//
//  or:
//
//          nil
type X12ProtocolSettingsResponsePtrInput interface {
	pulumi.Input

	ToX12ProtocolSettingsResponsePtrOutput() X12ProtocolSettingsResponsePtrOutput
	ToX12ProtocolSettingsResponsePtrOutputWithContext(context.Context) X12ProtocolSettingsResponsePtrOutput
}

type x12protocolSettingsResponsePtrType X12ProtocolSettingsResponseArgs

func X12ProtocolSettingsResponsePtr(v *X12ProtocolSettingsResponseArgs) X12ProtocolSettingsResponsePtrInput {
	return (*x12protocolSettingsResponsePtrType)(v)
}

func (*x12protocolSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12ProtocolSettingsResponse)(nil)).Elem()
}

func (i *x12protocolSettingsResponsePtrType) ToX12ProtocolSettingsResponsePtrOutput() X12ProtocolSettingsResponsePtrOutput {
	return i.ToX12ProtocolSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *x12protocolSettingsResponsePtrType) ToX12ProtocolSettingsResponsePtrOutputWithContext(ctx context.Context) X12ProtocolSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ProtocolSettingsResponsePtrOutput)
}

// The X12 agreement protocol settings.
type X12ProtocolSettingsResponseOutput struct{ *pulumi.OutputState }

func (X12ProtocolSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ProtocolSettingsResponse)(nil)).Elem()
}

func (o X12ProtocolSettingsResponseOutput) ToX12ProtocolSettingsResponseOutput() X12ProtocolSettingsResponseOutput {
	return o
}

func (o X12ProtocolSettingsResponseOutput) ToX12ProtocolSettingsResponseOutputWithContext(ctx context.Context) X12ProtocolSettingsResponseOutput {
	return o
}

func (o X12ProtocolSettingsResponseOutput) ToX12ProtocolSettingsResponsePtrOutput() X12ProtocolSettingsResponsePtrOutput {
	return o.ToX12ProtocolSettingsResponsePtrOutputWithContext(context.Background())
}

func (o X12ProtocolSettingsResponseOutput) ToX12ProtocolSettingsResponsePtrOutputWithContext(ctx context.Context) X12ProtocolSettingsResponsePtrOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) *X12ProtocolSettingsResponse {
		return &v
	}).(X12ProtocolSettingsResponsePtrOutput)
}

// The X12 acknowledgment settings.
func (o X12ProtocolSettingsResponseOutput) AcknowledgementSettings() X12AcknowledgementSettingsResponseOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) X12AcknowledgementSettingsResponse {
		return v.AcknowledgementSettings
	}).(X12AcknowledgementSettingsResponseOutput)
}

// The X12 envelope override settings.
func (o X12ProtocolSettingsResponseOutput) EnvelopeOverrides() X12EnvelopeOverrideResponseArrayOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) []X12EnvelopeOverrideResponse { return v.EnvelopeOverrides }).(X12EnvelopeOverrideResponseArrayOutput)
}

// The X12 envelope settings.
func (o X12ProtocolSettingsResponseOutput) EnvelopeSettings() X12EnvelopeSettingsResponseOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) X12EnvelopeSettingsResponse { return v.EnvelopeSettings }).(X12EnvelopeSettingsResponseOutput)
}

// The X12 framing settings.
func (o X12ProtocolSettingsResponseOutput) FramingSettings() X12FramingSettingsResponseOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) X12FramingSettingsResponse { return v.FramingSettings }).(X12FramingSettingsResponseOutput)
}

// The X12 message filter.
func (o X12ProtocolSettingsResponseOutput) MessageFilter() X12MessageFilterResponseOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) X12MessageFilterResponse { return v.MessageFilter }).(X12MessageFilterResponseOutput)
}

// The X12 message filter list.
func (o X12ProtocolSettingsResponseOutput) MessageFilterList() X12MessageIdentifierResponseArrayOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) []X12MessageIdentifierResponse { return v.MessageFilterList }).(X12MessageIdentifierResponseArrayOutput)
}

// The X12 processing settings.
func (o X12ProtocolSettingsResponseOutput) ProcessingSettings() X12ProcessingSettingsResponseOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) X12ProcessingSettingsResponse { return v.ProcessingSettings }).(X12ProcessingSettingsResponseOutput)
}

// The X12 schema references.
func (o X12ProtocolSettingsResponseOutput) SchemaReferences() X12SchemaReferenceResponseArrayOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) []X12SchemaReferenceResponse { return v.SchemaReferences }).(X12SchemaReferenceResponseArrayOutput)
}

// The X12 security settings.
func (o X12ProtocolSettingsResponseOutput) SecuritySettings() X12SecuritySettingsResponseOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) X12SecuritySettingsResponse { return v.SecuritySettings }).(X12SecuritySettingsResponseOutput)
}

// The X12 validation override settings.
func (o X12ProtocolSettingsResponseOutput) ValidationOverrides() X12ValidationOverrideResponseArrayOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) []X12ValidationOverrideResponse { return v.ValidationOverrides }).(X12ValidationOverrideResponseArrayOutput)
}

// The X12 validation settings.
func (o X12ProtocolSettingsResponseOutput) ValidationSettings() X12ValidationSettingsResponseOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) X12ValidationSettingsResponse { return v.ValidationSettings }).(X12ValidationSettingsResponseOutput)
}

// The X12 delimiter override settings.
func (o X12ProtocolSettingsResponseOutput) X12DelimiterOverrides() X12DelimiterOverridesResponseArrayOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) []X12DelimiterOverridesResponse { return v.X12DelimiterOverrides }).(X12DelimiterOverridesResponseArrayOutput)
}

type X12ProtocolSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (X12ProtocolSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12ProtocolSettingsResponse)(nil)).Elem()
}

func (o X12ProtocolSettingsResponsePtrOutput) ToX12ProtocolSettingsResponsePtrOutput() X12ProtocolSettingsResponsePtrOutput {
	return o
}

func (o X12ProtocolSettingsResponsePtrOutput) ToX12ProtocolSettingsResponsePtrOutputWithContext(ctx context.Context) X12ProtocolSettingsResponsePtrOutput {
	return o
}

func (o X12ProtocolSettingsResponsePtrOutput) Elem() X12ProtocolSettingsResponseOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) X12ProtocolSettingsResponse { return *v }).(X12ProtocolSettingsResponseOutput)
}

// The X12 acknowledgment settings.
func (o X12ProtocolSettingsResponsePtrOutput) AcknowledgementSettings() X12AcknowledgementSettingsResponsePtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) *X12AcknowledgementSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.AcknowledgementSettings
	}).(X12AcknowledgementSettingsResponsePtrOutput)
}

// The X12 envelope override settings.
func (o X12ProtocolSettingsResponsePtrOutput) EnvelopeOverrides() X12EnvelopeOverrideResponseArrayOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) []X12EnvelopeOverrideResponse {
		if v == nil {
			return nil
		}
		return v.EnvelopeOverrides
	}).(X12EnvelopeOverrideResponseArrayOutput)
}

// The X12 envelope settings.
func (o X12ProtocolSettingsResponsePtrOutput) EnvelopeSettings() X12EnvelopeSettingsResponsePtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) *X12EnvelopeSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.EnvelopeSettings
	}).(X12EnvelopeSettingsResponsePtrOutput)
}

// The X12 framing settings.
func (o X12ProtocolSettingsResponsePtrOutput) FramingSettings() X12FramingSettingsResponsePtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) *X12FramingSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.FramingSettings
	}).(X12FramingSettingsResponsePtrOutput)
}

// The X12 message filter.
func (o X12ProtocolSettingsResponsePtrOutput) MessageFilter() X12MessageFilterResponsePtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) *X12MessageFilterResponse {
		if v == nil {
			return nil
		}
		return &v.MessageFilter
	}).(X12MessageFilterResponsePtrOutput)
}

// The X12 message filter list.
func (o X12ProtocolSettingsResponsePtrOutput) MessageFilterList() X12MessageIdentifierResponseArrayOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) []X12MessageIdentifierResponse {
		if v == nil {
			return nil
		}
		return v.MessageFilterList
	}).(X12MessageIdentifierResponseArrayOutput)
}

// The X12 processing settings.
func (o X12ProtocolSettingsResponsePtrOutput) ProcessingSettings() X12ProcessingSettingsResponsePtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) *X12ProcessingSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.ProcessingSettings
	}).(X12ProcessingSettingsResponsePtrOutput)
}

// The X12 schema references.
func (o X12ProtocolSettingsResponsePtrOutput) SchemaReferences() X12SchemaReferenceResponseArrayOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) []X12SchemaReferenceResponse {
		if v == nil {
			return nil
		}
		return v.SchemaReferences
	}).(X12SchemaReferenceResponseArrayOutput)
}

// The X12 security settings.
func (o X12ProtocolSettingsResponsePtrOutput) SecuritySettings() X12SecuritySettingsResponsePtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) *X12SecuritySettingsResponse {
		if v == nil {
			return nil
		}
		return &v.SecuritySettings
	}).(X12SecuritySettingsResponsePtrOutput)
}

// The X12 validation override settings.
func (o X12ProtocolSettingsResponsePtrOutput) ValidationOverrides() X12ValidationOverrideResponseArrayOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) []X12ValidationOverrideResponse {
		if v == nil {
			return nil
		}
		return v.ValidationOverrides
	}).(X12ValidationOverrideResponseArrayOutput)
}

// The X12 validation settings.
func (o X12ProtocolSettingsResponsePtrOutput) ValidationSettings() X12ValidationSettingsResponsePtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) *X12ValidationSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.ValidationSettings
	}).(X12ValidationSettingsResponsePtrOutput)
}

// The X12 delimiter override settings.
func (o X12ProtocolSettingsResponsePtrOutput) X12DelimiterOverrides() X12DelimiterOverridesResponseArrayOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) []X12DelimiterOverridesResponse {
		if v == nil {
			return nil
		}
		return v.X12DelimiterOverrides
	}).(X12DelimiterOverridesResponseArrayOutput)
}

// The X12 schema reference.
type X12SchemaReference struct {
	// The message id.
	MessageId string `pulumi:"messageId"`
	// The schema name.
	SchemaName string `pulumi:"schemaName"`
	// The schema version.
	SchemaVersion string `pulumi:"schemaVersion"`
	// The sender application id.
	SenderApplicationId *string `pulumi:"senderApplicationId"`
}

// X12SchemaReferenceInput is an input type that accepts X12SchemaReferenceArgs and X12SchemaReferenceOutput values.
// You can construct a concrete instance of `X12SchemaReferenceInput` via:
//
//          X12SchemaReferenceArgs{...}
type X12SchemaReferenceInput interface {
	pulumi.Input

	ToX12SchemaReferenceOutput() X12SchemaReferenceOutput
	ToX12SchemaReferenceOutputWithContext(context.Context) X12SchemaReferenceOutput
}

// The X12 schema reference.
type X12SchemaReferenceArgs struct {
	// The message id.
	MessageId pulumi.StringInput `pulumi:"messageId"`
	// The schema name.
	SchemaName pulumi.StringInput `pulumi:"schemaName"`
	// The schema version.
	SchemaVersion pulumi.StringInput `pulumi:"schemaVersion"`
	// The sender application id.
	SenderApplicationId pulumi.StringPtrInput `pulumi:"senderApplicationId"`
}

func (X12SchemaReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12SchemaReference)(nil)).Elem()
}

func (i X12SchemaReferenceArgs) ToX12SchemaReferenceOutput() X12SchemaReferenceOutput {
	return i.ToX12SchemaReferenceOutputWithContext(context.Background())
}

func (i X12SchemaReferenceArgs) ToX12SchemaReferenceOutputWithContext(ctx context.Context) X12SchemaReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12SchemaReferenceOutput)
}

// X12SchemaReferenceArrayInput is an input type that accepts X12SchemaReferenceArray and X12SchemaReferenceArrayOutput values.
// You can construct a concrete instance of `X12SchemaReferenceArrayInput` via:
//
//          X12SchemaReferenceArray{ X12SchemaReferenceArgs{...} }
type X12SchemaReferenceArrayInput interface {
	pulumi.Input

	ToX12SchemaReferenceArrayOutput() X12SchemaReferenceArrayOutput
	ToX12SchemaReferenceArrayOutputWithContext(context.Context) X12SchemaReferenceArrayOutput
}

type X12SchemaReferenceArray []X12SchemaReferenceInput

func (X12SchemaReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12SchemaReference)(nil)).Elem()
}

func (i X12SchemaReferenceArray) ToX12SchemaReferenceArrayOutput() X12SchemaReferenceArrayOutput {
	return i.ToX12SchemaReferenceArrayOutputWithContext(context.Background())
}

func (i X12SchemaReferenceArray) ToX12SchemaReferenceArrayOutputWithContext(ctx context.Context) X12SchemaReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12SchemaReferenceArrayOutput)
}

// The X12 schema reference.
type X12SchemaReferenceOutput struct{ *pulumi.OutputState }

func (X12SchemaReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12SchemaReference)(nil)).Elem()
}

func (o X12SchemaReferenceOutput) ToX12SchemaReferenceOutput() X12SchemaReferenceOutput {
	return o
}

func (o X12SchemaReferenceOutput) ToX12SchemaReferenceOutputWithContext(ctx context.Context) X12SchemaReferenceOutput {
	return o
}

// The message id.
func (o X12SchemaReferenceOutput) MessageId() pulumi.StringOutput {
	return o.ApplyT(func(v X12SchemaReference) string { return v.MessageId }).(pulumi.StringOutput)
}

// The schema name.
func (o X12SchemaReferenceOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v X12SchemaReference) string { return v.SchemaName }).(pulumi.StringOutput)
}

// The schema version.
func (o X12SchemaReferenceOutput) SchemaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v X12SchemaReference) string { return v.SchemaVersion }).(pulumi.StringOutput)
}

// The sender application id.
func (o X12SchemaReferenceOutput) SenderApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12SchemaReference) *string { return v.SenderApplicationId }).(pulumi.StringPtrOutput)
}

type X12SchemaReferenceArrayOutput struct{ *pulumi.OutputState }

func (X12SchemaReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12SchemaReference)(nil)).Elem()
}

func (o X12SchemaReferenceArrayOutput) ToX12SchemaReferenceArrayOutput() X12SchemaReferenceArrayOutput {
	return o
}

func (o X12SchemaReferenceArrayOutput) ToX12SchemaReferenceArrayOutputWithContext(ctx context.Context) X12SchemaReferenceArrayOutput {
	return o
}

func (o X12SchemaReferenceArrayOutput) Index(i pulumi.IntInput) X12SchemaReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X12SchemaReference {
		return vs[0].([]X12SchemaReference)[vs[1].(int)]
	}).(X12SchemaReferenceOutput)
}

// The X12 schema reference.
type X12SchemaReferenceResponse struct {
	// The message id.
	MessageId string `pulumi:"messageId"`
	// The schema name.
	SchemaName string `pulumi:"schemaName"`
	// The schema version.
	SchemaVersion string `pulumi:"schemaVersion"`
	// The sender application id.
	SenderApplicationId *string `pulumi:"senderApplicationId"`
}

// X12SchemaReferenceResponseInput is an input type that accepts X12SchemaReferenceResponseArgs and X12SchemaReferenceResponseOutput values.
// You can construct a concrete instance of `X12SchemaReferenceResponseInput` via:
//
//          X12SchemaReferenceResponseArgs{...}
type X12SchemaReferenceResponseInput interface {
	pulumi.Input

	ToX12SchemaReferenceResponseOutput() X12SchemaReferenceResponseOutput
	ToX12SchemaReferenceResponseOutputWithContext(context.Context) X12SchemaReferenceResponseOutput
}

// The X12 schema reference.
type X12SchemaReferenceResponseArgs struct {
	// The message id.
	MessageId pulumi.StringInput `pulumi:"messageId"`
	// The schema name.
	SchemaName pulumi.StringInput `pulumi:"schemaName"`
	// The schema version.
	SchemaVersion pulumi.StringInput `pulumi:"schemaVersion"`
	// The sender application id.
	SenderApplicationId pulumi.StringPtrInput `pulumi:"senderApplicationId"`
}

func (X12SchemaReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12SchemaReferenceResponse)(nil)).Elem()
}

func (i X12SchemaReferenceResponseArgs) ToX12SchemaReferenceResponseOutput() X12SchemaReferenceResponseOutput {
	return i.ToX12SchemaReferenceResponseOutputWithContext(context.Background())
}

func (i X12SchemaReferenceResponseArgs) ToX12SchemaReferenceResponseOutputWithContext(ctx context.Context) X12SchemaReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12SchemaReferenceResponseOutput)
}

// X12SchemaReferenceResponseArrayInput is an input type that accepts X12SchemaReferenceResponseArray and X12SchemaReferenceResponseArrayOutput values.
// You can construct a concrete instance of `X12SchemaReferenceResponseArrayInput` via:
//
//          X12SchemaReferenceResponseArray{ X12SchemaReferenceResponseArgs{...} }
type X12SchemaReferenceResponseArrayInput interface {
	pulumi.Input

	ToX12SchemaReferenceResponseArrayOutput() X12SchemaReferenceResponseArrayOutput
	ToX12SchemaReferenceResponseArrayOutputWithContext(context.Context) X12SchemaReferenceResponseArrayOutput
}

type X12SchemaReferenceResponseArray []X12SchemaReferenceResponseInput

func (X12SchemaReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12SchemaReferenceResponse)(nil)).Elem()
}

func (i X12SchemaReferenceResponseArray) ToX12SchemaReferenceResponseArrayOutput() X12SchemaReferenceResponseArrayOutput {
	return i.ToX12SchemaReferenceResponseArrayOutputWithContext(context.Background())
}

func (i X12SchemaReferenceResponseArray) ToX12SchemaReferenceResponseArrayOutputWithContext(ctx context.Context) X12SchemaReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12SchemaReferenceResponseArrayOutput)
}

// The X12 schema reference.
type X12SchemaReferenceResponseOutput struct{ *pulumi.OutputState }

func (X12SchemaReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12SchemaReferenceResponse)(nil)).Elem()
}

func (o X12SchemaReferenceResponseOutput) ToX12SchemaReferenceResponseOutput() X12SchemaReferenceResponseOutput {
	return o
}

func (o X12SchemaReferenceResponseOutput) ToX12SchemaReferenceResponseOutputWithContext(ctx context.Context) X12SchemaReferenceResponseOutput {
	return o
}

// The message id.
func (o X12SchemaReferenceResponseOutput) MessageId() pulumi.StringOutput {
	return o.ApplyT(func(v X12SchemaReferenceResponse) string { return v.MessageId }).(pulumi.StringOutput)
}

// The schema name.
func (o X12SchemaReferenceResponseOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v X12SchemaReferenceResponse) string { return v.SchemaName }).(pulumi.StringOutput)
}

// The schema version.
func (o X12SchemaReferenceResponseOutput) SchemaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v X12SchemaReferenceResponse) string { return v.SchemaVersion }).(pulumi.StringOutput)
}

// The sender application id.
func (o X12SchemaReferenceResponseOutput) SenderApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12SchemaReferenceResponse) *string { return v.SenderApplicationId }).(pulumi.StringPtrOutput)
}

type X12SchemaReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (X12SchemaReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12SchemaReferenceResponse)(nil)).Elem()
}

func (o X12SchemaReferenceResponseArrayOutput) ToX12SchemaReferenceResponseArrayOutput() X12SchemaReferenceResponseArrayOutput {
	return o
}

func (o X12SchemaReferenceResponseArrayOutput) ToX12SchemaReferenceResponseArrayOutputWithContext(ctx context.Context) X12SchemaReferenceResponseArrayOutput {
	return o
}

func (o X12SchemaReferenceResponseArrayOutput) Index(i pulumi.IntInput) X12SchemaReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X12SchemaReferenceResponse {
		return vs[0].([]X12SchemaReferenceResponse)[vs[1].(int)]
	}).(X12SchemaReferenceResponseOutput)
}

// The X12 agreement security settings.
type X12SecuritySettings struct {
	// The authorization qualifier.
	AuthorizationQualifier string `pulumi:"authorizationQualifier"`
	// The authorization value.
	AuthorizationValue *string `pulumi:"authorizationValue"`
	// The password value.
	PasswordValue *string `pulumi:"passwordValue"`
	// The security qualifier.
	SecurityQualifier string `pulumi:"securityQualifier"`
}

// X12SecuritySettingsInput is an input type that accepts X12SecuritySettingsArgs and X12SecuritySettingsOutput values.
// You can construct a concrete instance of `X12SecuritySettingsInput` via:
//
//          X12SecuritySettingsArgs{...}
type X12SecuritySettingsInput interface {
	pulumi.Input

	ToX12SecuritySettingsOutput() X12SecuritySettingsOutput
	ToX12SecuritySettingsOutputWithContext(context.Context) X12SecuritySettingsOutput
}

// The X12 agreement security settings.
type X12SecuritySettingsArgs struct {
	// The authorization qualifier.
	AuthorizationQualifier pulumi.StringInput `pulumi:"authorizationQualifier"`
	// The authorization value.
	AuthorizationValue pulumi.StringPtrInput `pulumi:"authorizationValue"`
	// The password value.
	PasswordValue pulumi.StringPtrInput `pulumi:"passwordValue"`
	// The security qualifier.
	SecurityQualifier pulumi.StringInput `pulumi:"securityQualifier"`
}

func (X12SecuritySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12SecuritySettings)(nil)).Elem()
}

func (i X12SecuritySettingsArgs) ToX12SecuritySettingsOutput() X12SecuritySettingsOutput {
	return i.ToX12SecuritySettingsOutputWithContext(context.Background())
}

func (i X12SecuritySettingsArgs) ToX12SecuritySettingsOutputWithContext(ctx context.Context) X12SecuritySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12SecuritySettingsOutput)
}

func (i X12SecuritySettingsArgs) ToX12SecuritySettingsPtrOutput() X12SecuritySettingsPtrOutput {
	return i.ToX12SecuritySettingsPtrOutputWithContext(context.Background())
}

func (i X12SecuritySettingsArgs) ToX12SecuritySettingsPtrOutputWithContext(ctx context.Context) X12SecuritySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12SecuritySettingsOutput).ToX12SecuritySettingsPtrOutputWithContext(ctx)
}

// X12SecuritySettingsPtrInput is an input type that accepts X12SecuritySettingsArgs, X12SecuritySettingsPtr and X12SecuritySettingsPtrOutput values.
// You can construct a concrete instance of `X12SecuritySettingsPtrInput` via:
//
//          X12SecuritySettingsArgs{...}
//
//  or:
//
//          nil
type X12SecuritySettingsPtrInput interface {
	pulumi.Input

	ToX12SecuritySettingsPtrOutput() X12SecuritySettingsPtrOutput
	ToX12SecuritySettingsPtrOutputWithContext(context.Context) X12SecuritySettingsPtrOutput
}

type x12securitySettingsPtrType X12SecuritySettingsArgs

func X12SecuritySettingsPtr(v *X12SecuritySettingsArgs) X12SecuritySettingsPtrInput {
	return (*x12securitySettingsPtrType)(v)
}

func (*x12securitySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12SecuritySettings)(nil)).Elem()
}

func (i *x12securitySettingsPtrType) ToX12SecuritySettingsPtrOutput() X12SecuritySettingsPtrOutput {
	return i.ToX12SecuritySettingsPtrOutputWithContext(context.Background())
}

func (i *x12securitySettingsPtrType) ToX12SecuritySettingsPtrOutputWithContext(ctx context.Context) X12SecuritySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12SecuritySettingsPtrOutput)
}

// The X12 agreement security settings.
type X12SecuritySettingsOutput struct{ *pulumi.OutputState }

func (X12SecuritySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12SecuritySettings)(nil)).Elem()
}

func (o X12SecuritySettingsOutput) ToX12SecuritySettingsOutput() X12SecuritySettingsOutput {
	return o
}

func (o X12SecuritySettingsOutput) ToX12SecuritySettingsOutputWithContext(ctx context.Context) X12SecuritySettingsOutput {
	return o
}

func (o X12SecuritySettingsOutput) ToX12SecuritySettingsPtrOutput() X12SecuritySettingsPtrOutput {
	return o.ToX12SecuritySettingsPtrOutputWithContext(context.Background())
}

func (o X12SecuritySettingsOutput) ToX12SecuritySettingsPtrOutputWithContext(ctx context.Context) X12SecuritySettingsPtrOutput {
	return o.ApplyT(func(v X12SecuritySettings) *X12SecuritySettings {
		return &v
	}).(X12SecuritySettingsPtrOutput)
}

// The authorization qualifier.
func (o X12SecuritySettingsOutput) AuthorizationQualifier() pulumi.StringOutput {
	return o.ApplyT(func(v X12SecuritySettings) string { return v.AuthorizationQualifier }).(pulumi.StringOutput)
}

// The authorization value.
func (o X12SecuritySettingsOutput) AuthorizationValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12SecuritySettings) *string { return v.AuthorizationValue }).(pulumi.StringPtrOutput)
}

// The password value.
func (o X12SecuritySettingsOutput) PasswordValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12SecuritySettings) *string { return v.PasswordValue }).(pulumi.StringPtrOutput)
}

// The security qualifier.
func (o X12SecuritySettingsOutput) SecurityQualifier() pulumi.StringOutput {
	return o.ApplyT(func(v X12SecuritySettings) string { return v.SecurityQualifier }).(pulumi.StringOutput)
}

type X12SecuritySettingsPtrOutput struct{ *pulumi.OutputState }

func (X12SecuritySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12SecuritySettings)(nil)).Elem()
}

func (o X12SecuritySettingsPtrOutput) ToX12SecuritySettingsPtrOutput() X12SecuritySettingsPtrOutput {
	return o
}

func (o X12SecuritySettingsPtrOutput) ToX12SecuritySettingsPtrOutputWithContext(ctx context.Context) X12SecuritySettingsPtrOutput {
	return o
}

func (o X12SecuritySettingsPtrOutput) Elem() X12SecuritySettingsOutput {
	return o.ApplyT(func(v *X12SecuritySettings) X12SecuritySettings { return *v }).(X12SecuritySettingsOutput)
}

// The authorization qualifier.
func (o X12SecuritySettingsPtrOutput) AuthorizationQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12SecuritySettings) *string {
		if v == nil {
			return nil
		}
		return &v.AuthorizationQualifier
	}).(pulumi.StringPtrOutput)
}

// The authorization value.
func (o X12SecuritySettingsPtrOutput) AuthorizationValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12SecuritySettings) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationValue
	}).(pulumi.StringPtrOutput)
}

// The password value.
func (o X12SecuritySettingsPtrOutput) PasswordValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12SecuritySettings) *string {
		if v == nil {
			return nil
		}
		return v.PasswordValue
	}).(pulumi.StringPtrOutput)
}

// The security qualifier.
func (o X12SecuritySettingsPtrOutput) SecurityQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12SecuritySettings) *string {
		if v == nil {
			return nil
		}
		return &v.SecurityQualifier
	}).(pulumi.StringPtrOutput)
}

// The X12 agreement security settings.
type X12SecuritySettingsResponse struct {
	// The authorization qualifier.
	AuthorizationQualifier string `pulumi:"authorizationQualifier"`
	// The authorization value.
	AuthorizationValue *string `pulumi:"authorizationValue"`
	// The password value.
	PasswordValue *string `pulumi:"passwordValue"`
	// The security qualifier.
	SecurityQualifier string `pulumi:"securityQualifier"`
}

// X12SecuritySettingsResponseInput is an input type that accepts X12SecuritySettingsResponseArgs and X12SecuritySettingsResponseOutput values.
// You can construct a concrete instance of `X12SecuritySettingsResponseInput` via:
//
//          X12SecuritySettingsResponseArgs{...}
type X12SecuritySettingsResponseInput interface {
	pulumi.Input

	ToX12SecuritySettingsResponseOutput() X12SecuritySettingsResponseOutput
	ToX12SecuritySettingsResponseOutputWithContext(context.Context) X12SecuritySettingsResponseOutput
}

// The X12 agreement security settings.
type X12SecuritySettingsResponseArgs struct {
	// The authorization qualifier.
	AuthorizationQualifier pulumi.StringInput `pulumi:"authorizationQualifier"`
	// The authorization value.
	AuthorizationValue pulumi.StringPtrInput `pulumi:"authorizationValue"`
	// The password value.
	PasswordValue pulumi.StringPtrInput `pulumi:"passwordValue"`
	// The security qualifier.
	SecurityQualifier pulumi.StringInput `pulumi:"securityQualifier"`
}

func (X12SecuritySettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12SecuritySettingsResponse)(nil)).Elem()
}

func (i X12SecuritySettingsResponseArgs) ToX12SecuritySettingsResponseOutput() X12SecuritySettingsResponseOutput {
	return i.ToX12SecuritySettingsResponseOutputWithContext(context.Background())
}

func (i X12SecuritySettingsResponseArgs) ToX12SecuritySettingsResponseOutputWithContext(ctx context.Context) X12SecuritySettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12SecuritySettingsResponseOutput)
}

func (i X12SecuritySettingsResponseArgs) ToX12SecuritySettingsResponsePtrOutput() X12SecuritySettingsResponsePtrOutput {
	return i.ToX12SecuritySettingsResponsePtrOutputWithContext(context.Background())
}

func (i X12SecuritySettingsResponseArgs) ToX12SecuritySettingsResponsePtrOutputWithContext(ctx context.Context) X12SecuritySettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12SecuritySettingsResponseOutput).ToX12SecuritySettingsResponsePtrOutputWithContext(ctx)
}

// X12SecuritySettingsResponsePtrInput is an input type that accepts X12SecuritySettingsResponseArgs, X12SecuritySettingsResponsePtr and X12SecuritySettingsResponsePtrOutput values.
// You can construct a concrete instance of `X12SecuritySettingsResponsePtrInput` via:
//
//          X12SecuritySettingsResponseArgs{...}
//
//  or:
//
//          nil
type X12SecuritySettingsResponsePtrInput interface {
	pulumi.Input

	ToX12SecuritySettingsResponsePtrOutput() X12SecuritySettingsResponsePtrOutput
	ToX12SecuritySettingsResponsePtrOutputWithContext(context.Context) X12SecuritySettingsResponsePtrOutput
}

type x12securitySettingsResponsePtrType X12SecuritySettingsResponseArgs

func X12SecuritySettingsResponsePtr(v *X12SecuritySettingsResponseArgs) X12SecuritySettingsResponsePtrInput {
	return (*x12securitySettingsResponsePtrType)(v)
}

func (*x12securitySettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12SecuritySettingsResponse)(nil)).Elem()
}

func (i *x12securitySettingsResponsePtrType) ToX12SecuritySettingsResponsePtrOutput() X12SecuritySettingsResponsePtrOutput {
	return i.ToX12SecuritySettingsResponsePtrOutputWithContext(context.Background())
}

func (i *x12securitySettingsResponsePtrType) ToX12SecuritySettingsResponsePtrOutputWithContext(ctx context.Context) X12SecuritySettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12SecuritySettingsResponsePtrOutput)
}

// The X12 agreement security settings.
type X12SecuritySettingsResponseOutput struct{ *pulumi.OutputState }

func (X12SecuritySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12SecuritySettingsResponse)(nil)).Elem()
}

func (o X12SecuritySettingsResponseOutput) ToX12SecuritySettingsResponseOutput() X12SecuritySettingsResponseOutput {
	return o
}

func (o X12SecuritySettingsResponseOutput) ToX12SecuritySettingsResponseOutputWithContext(ctx context.Context) X12SecuritySettingsResponseOutput {
	return o
}

func (o X12SecuritySettingsResponseOutput) ToX12SecuritySettingsResponsePtrOutput() X12SecuritySettingsResponsePtrOutput {
	return o.ToX12SecuritySettingsResponsePtrOutputWithContext(context.Background())
}

func (o X12SecuritySettingsResponseOutput) ToX12SecuritySettingsResponsePtrOutputWithContext(ctx context.Context) X12SecuritySettingsResponsePtrOutput {
	return o.ApplyT(func(v X12SecuritySettingsResponse) *X12SecuritySettingsResponse {
		return &v
	}).(X12SecuritySettingsResponsePtrOutput)
}

// The authorization qualifier.
func (o X12SecuritySettingsResponseOutput) AuthorizationQualifier() pulumi.StringOutput {
	return o.ApplyT(func(v X12SecuritySettingsResponse) string { return v.AuthorizationQualifier }).(pulumi.StringOutput)
}

// The authorization value.
func (o X12SecuritySettingsResponseOutput) AuthorizationValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12SecuritySettingsResponse) *string { return v.AuthorizationValue }).(pulumi.StringPtrOutput)
}

// The password value.
func (o X12SecuritySettingsResponseOutput) PasswordValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12SecuritySettingsResponse) *string { return v.PasswordValue }).(pulumi.StringPtrOutput)
}

// The security qualifier.
func (o X12SecuritySettingsResponseOutput) SecurityQualifier() pulumi.StringOutput {
	return o.ApplyT(func(v X12SecuritySettingsResponse) string { return v.SecurityQualifier }).(pulumi.StringOutput)
}

type X12SecuritySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (X12SecuritySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12SecuritySettingsResponse)(nil)).Elem()
}

func (o X12SecuritySettingsResponsePtrOutput) ToX12SecuritySettingsResponsePtrOutput() X12SecuritySettingsResponsePtrOutput {
	return o
}

func (o X12SecuritySettingsResponsePtrOutput) ToX12SecuritySettingsResponsePtrOutputWithContext(ctx context.Context) X12SecuritySettingsResponsePtrOutput {
	return o
}

func (o X12SecuritySettingsResponsePtrOutput) Elem() X12SecuritySettingsResponseOutput {
	return o.ApplyT(func(v *X12SecuritySettingsResponse) X12SecuritySettingsResponse { return *v }).(X12SecuritySettingsResponseOutput)
}

// The authorization qualifier.
func (o X12SecuritySettingsResponsePtrOutput) AuthorizationQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12SecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AuthorizationQualifier
	}).(pulumi.StringPtrOutput)
}

// The authorization value.
func (o X12SecuritySettingsResponsePtrOutput) AuthorizationValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12SecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationValue
	}).(pulumi.StringPtrOutput)
}

// The password value.
func (o X12SecuritySettingsResponsePtrOutput) PasswordValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12SecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PasswordValue
	}).(pulumi.StringPtrOutput)
}

// The security qualifier.
func (o X12SecuritySettingsResponsePtrOutput) SecurityQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12SecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecurityQualifier
	}).(pulumi.StringPtrOutput)
}

// The X12 validation override settings.
type X12ValidationOverride struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes bool `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The message id on which the validation settings has to be applied.
	MessageId string `pulumi:"messageId"`
	// The trailing separator policy.
	TrailingSeparatorPolicy string `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes bool `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character Set.
	ValidateCharacterSet bool `pulumi:"validateCharacterSet"`
	// The value indicating whether to validate EDI types.
	ValidateEDITypes bool `pulumi:"validateEDITypes"`
	// The value indicating whether to validate XSD types.
	ValidateXSDTypes bool `pulumi:"validateXSDTypes"`
}

// X12ValidationOverrideInput is an input type that accepts X12ValidationOverrideArgs and X12ValidationOverrideOutput values.
// You can construct a concrete instance of `X12ValidationOverrideInput` via:
//
//          X12ValidationOverrideArgs{...}
type X12ValidationOverrideInput interface {
	pulumi.Input

	ToX12ValidationOverrideOutput() X12ValidationOverrideOutput
	ToX12ValidationOverrideOutputWithContext(context.Context) X12ValidationOverrideOutput
}

// The X12 validation override settings.
type X12ValidationOverrideArgs struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes pulumi.BoolInput `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The message id on which the validation settings has to be applied.
	MessageId pulumi.StringInput `pulumi:"messageId"`
	// The trailing separator policy.
	TrailingSeparatorPolicy pulumi.StringInput `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes pulumi.BoolInput `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character Set.
	ValidateCharacterSet pulumi.BoolInput `pulumi:"validateCharacterSet"`
	// The value indicating whether to validate EDI types.
	ValidateEDITypes pulumi.BoolInput `pulumi:"validateEDITypes"`
	// The value indicating whether to validate XSD types.
	ValidateXSDTypes pulumi.BoolInput `pulumi:"validateXSDTypes"`
}

func (X12ValidationOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ValidationOverride)(nil)).Elem()
}

func (i X12ValidationOverrideArgs) ToX12ValidationOverrideOutput() X12ValidationOverrideOutput {
	return i.ToX12ValidationOverrideOutputWithContext(context.Background())
}

func (i X12ValidationOverrideArgs) ToX12ValidationOverrideOutputWithContext(ctx context.Context) X12ValidationOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ValidationOverrideOutput)
}

// X12ValidationOverrideArrayInput is an input type that accepts X12ValidationOverrideArray and X12ValidationOverrideArrayOutput values.
// You can construct a concrete instance of `X12ValidationOverrideArrayInput` via:
//
//          X12ValidationOverrideArray{ X12ValidationOverrideArgs{...} }
type X12ValidationOverrideArrayInput interface {
	pulumi.Input

	ToX12ValidationOverrideArrayOutput() X12ValidationOverrideArrayOutput
	ToX12ValidationOverrideArrayOutputWithContext(context.Context) X12ValidationOverrideArrayOutput
}

type X12ValidationOverrideArray []X12ValidationOverrideInput

func (X12ValidationOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12ValidationOverride)(nil)).Elem()
}

func (i X12ValidationOverrideArray) ToX12ValidationOverrideArrayOutput() X12ValidationOverrideArrayOutput {
	return i.ToX12ValidationOverrideArrayOutputWithContext(context.Background())
}

func (i X12ValidationOverrideArray) ToX12ValidationOverrideArrayOutputWithContext(ctx context.Context) X12ValidationOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ValidationOverrideArrayOutput)
}

// The X12 validation override settings.
type X12ValidationOverrideOutput struct{ *pulumi.OutputState }

func (X12ValidationOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ValidationOverride)(nil)).Elem()
}

func (o X12ValidationOverrideOutput) ToX12ValidationOverrideOutput() X12ValidationOverrideOutput {
	return o
}

func (o X12ValidationOverrideOutput) ToX12ValidationOverrideOutputWithContext(ctx context.Context) X12ValidationOverrideOutput {
	return o
}

// The value indicating whether to allow leading and trailing spaces and zeroes.
func (o X12ValidationOverrideOutput) AllowLeadingAndTrailingSpacesAndZeroes() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationOverride) bool { return v.AllowLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolOutput)
}

// The message id on which the validation settings has to be applied.
func (o X12ValidationOverrideOutput) MessageId() pulumi.StringOutput {
	return o.ApplyT(func(v X12ValidationOverride) string { return v.MessageId }).(pulumi.StringOutput)
}

// The trailing separator policy.
func (o X12ValidationOverrideOutput) TrailingSeparatorPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v X12ValidationOverride) string { return v.TrailingSeparatorPolicy }).(pulumi.StringOutput)
}

// The value indicating whether to trim leading and trailing spaces and zeroes.
func (o X12ValidationOverrideOutput) TrimLeadingAndTrailingSpacesAndZeroes() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationOverride) bool { return v.TrimLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolOutput)
}

// The value indicating whether to validate character Set.
func (o X12ValidationOverrideOutput) ValidateCharacterSet() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationOverride) bool { return v.ValidateCharacterSet }).(pulumi.BoolOutput)
}

// The value indicating whether to validate EDI types.
func (o X12ValidationOverrideOutput) ValidateEDITypes() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationOverride) bool { return v.ValidateEDITypes }).(pulumi.BoolOutput)
}

// The value indicating whether to validate XSD types.
func (o X12ValidationOverrideOutput) ValidateXSDTypes() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationOverride) bool { return v.ValidateXSDTypes }).(pulumi.BoolOutput)
}

type X12ValidationOverrideArrayOutput struct{ *pulumi.OutputState }

func (X12ValidationOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12ValidationOverride)(nil)).Elem()
}

func (o X12ValidationOverrideArrayOutput) ToX12ValidationOverrideArrayOutput() X12ValidationOverrideArrayOutput {
	return o
}

func (o X12ValidationOverrideArrayOutput) ToX12ValidationOverrideArrayOutputWithContext(ctx context.Context) X12ValidationOverrideArrayOutput {
	return o
}

func (o X12ValidationOverrideArrayOutput) Index(i pulumi.IntInput) X12ValidationOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X12ValidationOverride {
		return vs[0].([]X12ValidationOverride)[vs[1].(int)]
	}).(X12ValidationOverrideOutput)
}

// The X12 validation override settings.
type X12ValidationOverrideResponse struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes bool `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The message id on which the validation settings has to be applied.
	MessageId string `pulumi:"messageId"`
	// The trailing separator policy.
	TrailingSeparatorPolicy string `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes bool `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character Set.
	ValidateCharacterSet bool `pulumi:"validateCharacterSet"`
	// The value indicating whether to validate EDI types.
	ValidateEDITypes bool `pulumi:"validateEDITypes"`
	// The value indicating whether to validate XSD types.
	ValidateXSDTypes bool `pulumi:"validateXSDTypes"`
}

// X12ValidationOverrideResponseInput is an input type that accepts X12ValidationOverrideResponseArgs and X12ValidationOverrideResponseOutput values.
// You can construct a concrete instance of `X12ValidationOverrideResponseInput` via:
//
//          X12ValidationOverrideResponseArgs{...}
type X12ValidationOverrideResponseInput interface {
	pulumi.Input

	ToX12ValidationOverrideResponseOutput() X12ValidationOverrideResponseOutput
	ToX12ValidationOverrideResponseOutputWithContext(context.Context) X12ValidationOverrideResponseOutput
}

// The X12 validation override settings.
type X12ValidationOverrideResponseArgs struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes pulumi.BoolInput `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The message id on which the validation settings has to be applied.
	MessageId pulumi.StringInput `pulumi:"messageId"`
	// The trailing separator policy.
	TrailingSeparatorPolicy pulumi.StringInput `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes pulumi.BoolInput `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character Set.
	ValidateCharacterSet pulumi.BoolInput `pulumi:"validateCharacterSet"`
	// The value indicating whether to validate EDI types.
	ValidateEDITypes pulumi.BoolInput `pulumi:"validateEDITypes"`
	// The value indicating whether to validate XSD types.
	ValidateXSDTypes pulumi.BoolInput `pulumi:"validateXSDTypes"`
}

func (X12ValidationOverrideResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ValidationOverrideResponse)(nil)).Elem()
}

func (i X12ValidationOverrideResponseArgs) ToX12ValidationOverrideResponseOutput() X12ValidationOverrideResponseOutput {
	return i.ToX12ValidationOverrideResponseOutputWithContext(context.Background())
}

func (i X12ValidationOverrideResponseArgs) ToX12ValidationOverrideResponseOutputWithContext(ctx context.Context) X12ValidationOverrideResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ValidationOverrideResponseOutput)
}

// X12ValidationOverrideResponseArrayInput is an input type that accepts X12ValidationOverrideResponseArray and X12ValidationOverrideResponseArrayOutput values.
// You can construct a concrete instance of `X12ValidationOverrideResponseArrayInput` via:
//
//          X12ValidationOverrideResponseArray{ X12ValidationOverrideResponseArgs{...} }
type X12ValidationOverrideResponseArrayInput interface {
	pulumi.Input

	ToX12ValidationOverrideResponseArrayOutput() X12ValidationOverrideResponseArrayOutput
	ToX12ValidationOverrideResponseArrayOutputWithContext(context.Context) X12ValidationOverrideResponseArrayOutput
}

type X12ValidationOverrideResponseArray []X12ValidationOverrideResponseInput

func (X12ValidationOverrideResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12ValidationOverrideResponse)(nil)).Elem()
}

func (i X12ValidationOverrideResponseArray) ToX12ValidationOverrideResponseArrayOutput() X12ValidationOverrideResponseArrayOutput {
	return i.ToX12ValidationOverrideResponseArrayOutputWithContext(context.Background())
}

func (i X12ValidationOverrideResponseArray) ToX12ValidationOverrideResponseArrayOutputWithContext(ctx context.Context) X12ValidationOverrideResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ValidationOverrideResponseArrayOutput)
}

// The X12 validation override settings.
type X12ValidationOverrideResponseOutput struct{ *pulumi.OutputState }

func (X12ValidationOverrideResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ValidationOverrideResponse)(nil)).Elem()
}

func (o X12ValidationOverrideResponseOutput) ToX12ValidationOverrideResponseOutput() X12ValidationOverrideResponseOutput {
	return o
}

func (o X12ValidationOverrideResponseOutput) ToX12ValidationOverrideResponseOutputWithContext(ctx context.Context) X12ValidationOverrideResponseOutput {
	return o
}

// The value indicating whether to allow leading and trailing spaces and zeroes.
func (o X12ValidationOverrideResponseOutput) AllowLeadingAndTrailingSpacesAndZeroes() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationOverrideResponse) bool { return v.AllowLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolOutput)
}

// The message id on which the validation settings has to be applied.
func (o X12ValidationOverrideResponseOutput) MessageId() pulumi.StringOutput {
	return o.ApplyT(func(v X12ValidationOverrideResponse) string { return v.MessageId }).(pulumi.StringOutput)
}

// The trailing separator policy.
func (o X12ValidationOverrideResponseOutput) TrailingSeparatorPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v X12ValidationOverrideResponse) string { return v.TrailingSeparatorPolicy }).(pulumi.StringOutput)
}

// The value indicating whether to trim leading and trailing spaces and zeroes.
func (o X12ValidationOverrideResponseOutput) TrimLeadingAndTrailingSpacesAndZeroes() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationOverrideResponse) bool { return v.TrimLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolOutput)
}

// The value indicating whether to validate character Set.
func (o X12ValidationOverrideResponseOutput) ValidateCharacterSet() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationOverrideResponse) bool { return v.ValidateCharacterSet }).(pulumi.BoolOutput)
}

// The value indicating whether to validate EDI types.
func (o X12ValidationOverrideResponseOutput) ValidateEDITypes() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationOverrideResponse) bool { return v.ValidateEDITypes }).(pulumi.BoolOutput)
}

// The value indicating whether to validate XSD types.
func (o X12ValidationOverrideResponseOutput) ValidateXSDTypes() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationOverrideResponse) bool { return v.ValidateXSDTypes }).(pulumi.BoolOutput)
}

type X12ValidationOverrideResponseArrayOutput struct{ *pulumi.OutputState }

func (X12ValidationOverrideResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12ValidationOverrideResponse)(nil)).Elem()
}

func (o X12ValidationOverrideResponseArrayOutput) ToX12ValidationOverrideResponseArrayOutput() X12ValidationOverrideResponseArrayOutput {
	return o
}

func (o X12ValidationOverrideResponseArrayOutput) ToX12ValidationOverrideResponseArrayOutputWithContext(ctx context.Context) X12ValidationOverrideResponseArrayOutput {
	return o
}

func (o X12ValidationOverrideResponseArrayOutput) Index(i pulumi.IntInput) X12ValidationOverrideResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X12ValidationOverrideResponse {
		return vs[0].([]X12ValidationOverrideResponse)[vs[1].(int)]
	}).(X12ValidationOverrideResponseOutput)
}

// The X12 agreement validation settings.
type X12ValidationSettings struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes bool `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to check for duplicate group control number.
	CheckDuplicateGroupControlNumber bool `pulumi:"checkDuplicateGroupControlNumber"`
	// The value indicating whether to check for duplicate interchange control number.
	CheckDuplicateInterchangeControlNumber bool `pulumi:"checkDuplicateInterchangeControlNumber"`
	// The value indicating whether to check for duplicate transaction set control number.
	CheckDuplicateTransactionSetControlNumber bool `pulumi:"checkDuplicateTransactionSetControlNumber"`
	// The validity period of interchange control number.
	InterchangeControlNumberValidityDays int `pulumi:"interchangeControlNumberValidityDays"`
	// The trailing separator policy.
	TrailingSeparatorPolicy string `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes bool `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character set in the message.
	ValidateCharacterSet bool `pulumi:"validateCharacterSet"`
	// The value indicating whether to Whether to validate EDI types.
	ValidateEDITypes bool `pulumi:"validateEDITypes"`
	// The value indicating whether to Whether to validate XSD types.
	ValidateXSDTypes bool `pulumi:"validateXSDTypes"`
}

// X12ValidationSettingsInput is an input type that accepts X12ValidationSettingsArgs and X12ValidationSettingsOutput values.
// You can construct a concrete instance of `X12ValidationSettingsInput` via:
//
//          X12ValidationSettingsArgs{...}
type X12ValidationSettingsInput interface {
	pulumi.Input

	ToX12ValidationSettingsOutput() X12ValidationSettingsOutput
	ToX12ValidationSettingsOutputWithContext(context.Context) X12ValidationSettingsOutput
}

// The X12 agreement validation settings.
type X12ValidationSettingsArgs struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes pulumi.BoolInput `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to check for duplicate group control number.
	CheckDuplicateGroupControlNumber pulumi.BoolInput `pulumi:"checkDuplicateGroupControlNumber"`
	// The value indicating whether to check for duplicate interchange control number.
	CheckDuplicateInterchangeControlNumber pulumi.BoolInput `pulumi:"checkDuplicateInterchangeControlNumber"`
	// The value indicating whether to check for duplicate transaction set control number.
	CheckDuplicateTransactionSetControlNumber pulumi.BoolInput `pulumi:"checkDuplicateTransactionSetControlNumber"`
	// The validity period of interchange control number.
	InterchangeControlNumberValidityDays pulumi.IntInput `pulumi:"interchangeControlNumberValidityDays"`
	// The trailing separator policy.
	TrailingSeparatorPolicy pulumi.StringInput `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes pulumi.BoolInput `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character set in the message.
	ValidateCharacterSet pulumi.BoolInput `pulumi:"validateCharacterSet"`
	// The value indicating whether to Whether to validate EDI types.
	ValidateEDITypes pulumi.BoolInput `pulumi:"validateEDITypes"`
	// The value indicating whether to Whether to validate XSD types.
	ValidateXSDTypes pulumi.BoolInput `pulumi:"validateXSDTypes"`
}

func (X12ValidationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ValidationSettings)(nil)).Elem()
}

func (i X12ValidationSettingsArgs) ToX12ValidationSettingsOutput() X12ValidationSettingsOutput {
	return i.ToX12ValidationSettingsOutputWithContext(context.Background())
}

func (i X12ValidationSettingsArgs) ToX12ValidationSettingsOutputWithContext(ctx context.Context) X12ValidationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ValidationSettingsOutput)
}

func (i X12ValidationSettingsArgs) ToX12ValidationSettingsPtrOutput() X12ValidationSettingsPtrOutput {
	return i.ToX12ValidationSettingsPtrOutputWithContext(context.Background())
}

func (i X12ValidationSettingsArgs) ToX12ValidationSettingsPtrOutputWithContext(ctx context.Context) X12ValidationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ValidationSettingsOutput).ToX12ValidationSettingsPtrOutputWithContext(ctx)
}

// X12ValidationSettingsPtrInput is an input type that accepts X12ValidationSettingsArgs, X12ValidationSettingsPtr and X12ValidationSettingsPtrOutput values.
// You can construct a concrete instance of `X12ValidationSettingsPtrInput` via:
//
//          X12ValidationSettingsArgs{...}
//
//  or:
//
//          nil
type X12ValidationSettingsPtrInput interface {
	pulumi.Input

	ToX12ValidationSettingsPtrOutput() X12ValidationSettingsPtrOutput
	ToX12ValidationSettingsPtrOutputWithContext(context.Context) X12ValidationSettingsPtrOutput
}

type x12validationSettingsPtrType X12ValidationSettingsArgs

func X12ValidationSettingsPtr(v *X12ValidationSettingsArgs) X12ValidationSettingsPtrInput {
	return (*x12validationSettingsPtrType)(v)
}

func (*x12validationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12ValidationSettings)(nil)).Elem()
}

func (i *x12validationSettingsPtrType) ToX12ValidationSettingsPtrOutput() X12ValidationSettingsPtrOutput {
	return i.ToX12ValidationSettingsPtrOutputWithContext(context.Background())
}

func (i *x12validationSettingsPtrType) ToX12ValidationSettingsPtrOutputWithContext(ctx context.Context) X12ValidationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ValidationSettingsPtrOutput)
}

// The X12 agreement validation settings.
type X12ValidationSettingsOutput struct{ *pulumi.OutputState }

func (X12ValidationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ValidationSettings)(nil)).Elem()
}

func (o X12ValidationSettingsOutput) ToX12ValidationSettingsOutput() X12ValidationSettingsOutput {
	return o
}

func (o X12ValidationSettingsOutput) ToX12ValidationSettingsOutputWithContext(ctx context.Context) X12ValidationSettingsOutput {
	return o
}

func (o X12ValidationSettingsOutput) ToX12ValidationSettingsPtrOutput() X12ValidationSettingsPtrOutput {
	return o.ToX12ValidationSettingsPtrOutputWithContext(context.Background())
}

func (o X12ValidationSettingsOutput) ToX12ValidationSettingsPtrOutputWithContext(ctx context.Context) X12ValidationSettingsPtrOutput {
	return o.ApplyT(func(v X12ValidationSettings) *X12ValidationSettings {
		return &v
	}).(X12ValidationSettingsPtrOutput)
}

// The value indicating whether to allow leading and trailing spaces and zeroes.
func (o X12ValidationSettingsOutput) AllowLeadingAndTrailingSpacesAndZeroes() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationSettings) bool { return v.AllowLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolOutput)
}

// The value indicating whether to check for duplicate group control number.
func (o X12ValidationSettingsOutput) CheckDuplicateGroupControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationSettings) bool { return v.CheckDuplicateGroupControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to check for duplicate interchange control number.
func (o X12ValidationSettingsOutput) CheckDuplicateInterchangeControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationSettings) bool { return v.CheckDuplicateInterchangeControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to check for duplicate transaction set control number.
func (o X12ValidationSettingsOutput) CheckDuplicateTransactionSetControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationSettings) bool { return v.CheckDuplicateTransactionSetControlNumber }).(pulumi.BoolOutput)
}

// The validity period of interchange control number.
func (o X12ValidationSettingsOutput) InterchangeControlNumberValidityDays() pulumi.IntOutput {
	return o.ApplyT(func(v X12ValidationSettings) int { return v.InterchangeControlNumberValidityDays }).(pulumi.IntOutput)
}

// The trailing separator policy.
func (o X12ValidationSettingsOutput) TrailingSeparatorPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v X12ValidationSettings) string { return v.TrailingSeparatorPolicy }).(pulumi.StringOutput)
}

// The value indicating whether to trim leading and trailing spaces and zeroes.
func (o X12ValidationSettingsOutput) TrimLeadingAndTrailingSpacesAndZeroes() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationSettings) bool { return v.TrimLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolOutput)
}

// The value indicating whether to validate character set in the message.
func (o X12ValidationSettingsOutput) ValidateCharacterSet() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationSettings) bool { return v.ValidateCharacterSet }).(pulumi.BoolOutput)
}

// The value indicating whether to Whether to validate EDI types.
func (o X12ValidationSettingsOutput) ValidateEDITypes() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationSettings) bool { return v.ValidateEDITypes }).(pulumi.BoolOutput)
}

// The value indicating whether to Whether to validate XSD types.
func (o X12ValidationSettingsOutput) ValidateXSDTypes() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationSettings) bool { return v.ValidateXSDTypes }).(pulumi.BoolOutput)
}

type X12ValidationSettingsPtrOutput struct{ *pulumi.OutputState }

func (X12ValidationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12ValidationSettings)(nil)).Elem()
}

func (o X12ValidationSettingsPtrOutput) ToX12ValidationSettingsPtrOutput() X12ValidationSettingsPtrOutput {
	return o
}

func (o X12ValidationSettingsPtrOutput) ToX12ValidationSettingsPtrOutputWithContext(ctx context.Context) X12ValidationSettingsPtrOutput {
	return o
}

func (o X12ValidationSettingsPtrOutput) Elem() X12ValidationSettingsOutput {
	return o.ApplyT(func(v *X12ValidationSettings) X12ValidationSettings { return *v }).(X12ValidationSettingsOutput)
}

// The value indicating whether to allow leading and trailing spaces and zeroes.
func (o X12ValidationSettingsPtrOutput) AllowLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowLeadingAndTrailingSpacesAndZeroes
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate group control number.
func (o X12ValidationSettingsPtrOutput) CheckDuplicateGroupControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.CheckDuplicateGroupControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate interchange control number.
func (o X12ValidationSettingsPtrOutput) CheckDuplicateInterchangeControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.CheckDuplicateInterchangeControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate transaction set control number.
func (o X12ValidationSettingsPtrOutput) CheckDuplicateTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.CheckDuplicateTransactionSetControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The validity period of interchange control number.
func (o X12ValidationSettingsPtrOutput) InterchangeControlNumberValidityDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettings) *int {
		if v == nil {
			return nil
		}
		return &v.InterchangeControlNumberValidityDays
	}).(pulumi.IntPtrOutput)
}

// The trailing separator policy.
func (o X12ValidationSettingsPtrOutput) TrailingSeparatorPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettings) *string {
		if v == nil {
			return nil
		}
		return &v.TrailingSeparatorPolicy
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to trim leading and trailing spaces and zeroes.
func (o X12ValidationSettingsPtrOutput) TrimLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.TrimLeadingAndTrailingSpacesAndZeroes
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to validate character set in the message.
func (o X12ValidationSettingsPtrOutput) ValidateCharacterSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.ValidateCharacterSet
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to Whether to validate EDI types.
func (o X12ValidationSettingsPtrOutput) ValidateEDITypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.ValidateEDITypes
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to Whether to validate XSD types.
func (o X12ValidationSettingsPtrOutput) ValidateXSDTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.ValidateXSDTypes
	}).(pulumi.BoolPtrOutput)
}

// The X12 agreement validation settings.
type X12ValidationSettingsResponse struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes bool `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to check for duplicate group control number.
	CheckDuplicateGroupControlNumber bool `pulumi:"checkDuplicateGroupControlNumber"`
	// The value indicating whether to check for duplicate interchange control number.
	CheckDuplicateInterchangeControlNumber bool `pulumi:"checkDuplicateInterchangeControlNumber"`
	// The value indicating whether to check for duplicate transaction set control number.
	CheckDuplicateTransactionSetControlNumber bool `pulumi:"checkDuplicateTransactionSetControlNumber"`
	// The validity period of interchange control number.
	InterchangeControlNumberValidityDays int `pulumi:"interchangeControlNumberValidityDays"`
	// The trailing separator policy.
	TrailingSeparatorPolicy string `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes bool `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character set in the message.
	ValidateCharacterSet bool `pulumi:"validateCharacterSet"`
	// The value indicating whether to Whether to validate EDI types.
	ValidateEDITypes bool `pulumi:"validateEDITypes"`
	// The value indicating whether to Whether to validate XSD types.
	ValidateXSDTypes bool `pulumi:"validateXSDTypes"`
}

// X12ValidationSettingsResponseInput is an input type that accepts X12ValidationSettingsResponseArgs and X12ValidationSettingsResponseOutput values.
// You can construct a concrete instance of `X12ValidationSettingsResponseInput` via:
//
//          X12ValidationSettingsResponseArgs{...}
type X12ValidationSettingsResponseInput interface {
	pulumi.Input

	ToX12ValidationSettingsResponseOutput() X12ValidationSettingsResponseOutput
	ToX12ValidationSettingsResponseOutputWithContext(context.Context) X12ValidationSettingsResponseOutput
}

// The X12 agreement validation settings.
type X12ValidationSettingsResponseArgs struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes pulumi.BoolInput `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to check for duplicate group control number.
	CheckDuplicateGroupControlNumber pulumi.BoolInput `pulumi:"checkDuplicateGroupControlNumber"`
	// The value indicating whether to check for duplicate interchange control number.
	CheckDuplicateInterchangeControlNumber pulumi.BoolInput `pulumi:"checkDuplicateInterchangeControlNumber"`
	// The value indicating whether to check for duplicate transaction set control number.
	CheckDuplicateTransactionSetControlNumber pulumi.BoolInput `pulumi:"checkDuplicateTransactionSetControlNumber"`
	// The validity period of interchange control number.
	InterchangeControlNumberValidityDays pulumi.IntInput `pulumi:"interchangeControlNumberValidityDays"`
	// The trailing separator policy.
	TrailingSeparatorPolicy pulumi.StringInput `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes pulumi.BoolInput `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character set in the message.
	ValidateCharacterSet pulumi.BoolInput `pulumi:"validateCharacterSet"`
	// The value indicating whether to Whether to validate EDI types.
	ValidateEDITypes pulumi.BoolInput `pulumi:"validateEDITypes"`
	// The value indicating whether to Whether to validate XSD types.
	ValidateXSDTypes pulumi.BoolInput `pulumi:"validateXSDTypes"`
}

func (X12ValidationSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ValidationSettingsResponse)(nil)).Elem()
}

func (i X12ValidationSettingsResponseArgs) ToX12ValidationSettingsResponseOutput() X12ValidationSettingsResponseOutput {
	return i.ToX12ValidationSettingsResponseOutputWithContext(context.Background())
}

func (i X12ValidationSettingsResponseArgs) ToX12ValidationSettingsResponseOutputWithContext(ctx context.Context) X12ValidationSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ValidationSettingsResponseOutput)
}

func (i X12ValidationSettingsResponseArgs) ToX12ValidationSettingsResponsePtrOutput() X12ValidationSettingsResponsePtrOutput {
	return i.ToX12ValidationSettingsResponsePtrOutputWithContext(context.Background())
}

func (i X12ValidationSettingsResponseArgs) ToX12ValidationSettingsResponsePtrOutputWithContext(ctx context.Context) X12ValidationSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ValidationSettingsResponseOutput).ToX12ValidationSettingsResponsePtrOutputWithContext(ctx)
}

// X12ValidationSettingsResponsePtrInput is an input type that accepts X12ValidationSettingsResponseArgs, X12ValidationSettingsResponsePtr and X12ValidationSettingsResponsePtrOutput values.
// You can construct a concrete instance of `X12ValidationSettingsResponsePtrInput` via:
//
//          X12ValidationSettingsResponseArgs{...}
//
//  or:
//
//          nil
type X12ValidationSettingsResponsePtrInput interface {
	pulumi.Input

	ToX12ValidationSettingsResponsePtrOutput() X12ValidationSettingsResponsePtrOutput
	ToX12ValidationSettingsResponsePtrOutputWithContext(context.Context) X12ValidationSettingsResponsePtrOutput
}

type x12validationSettingsResponsePtrType X12ValidationSettingsResponseArgs

func X12ValidationSettingsResponsePtr(v *X12ValidationSettingsResponseArgs) X12ValidationSettingsResponsePtrInput {
	return (*x12validationSettingsResponsePtrType)(v)
}

func (*x12validationSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12ValidationSettingsResponse)(nil)).Elem()
}

func (i *x12validationSettingsResponsePtrType) ToX12ValidationSettingsResponsePtrOutput() X12ValidationSettingsResponsePtrOutput {
	return i.ToX12ValidationSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *x12validationSettingsResponsePtrType) ToX12ValidationSettingsResponsePtrOutputWithContext(ctx context.Context) X12ValidationSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ValidationSettingsResponsePtrOutput)
}

// The X12 agreement validation settings.
type X12ValidationSettingsResponseOutput struct{ *pulumi.OutputState }

func (X12ValidationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ValidationSettingsResponse)(nil)).Elem()
}

func (o X12ValidationSettingsResponseOutput) ToX12ValidationSettingsResponseOutput() X12ValidationSettingsResponseOutput {
	return o
}

func (o X12ValidationSettingsResponseOutput) ToX12ValidationSettingsResponseOutputWithContext(ctx context.Context) X12ValidationSettingsResponseOutput {
	return o
}

func (o X12ValidationSettingsResponseOutput) ToX12ValidationSettingsResponsePtrOutput() X12ValidationSettingsResponsePtrOutput {
	return o.ToX12ValidationSettingsResponsePtrOutputWithContext(context.Background())
}

func (o X12ValidationSettingsResponseOutput) ToX12ValidationSettingsResponsePtrOutputWithContext(ctx context.Context) X12ValidationSettingsResponsePtrOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) *X12ValidationSettingsResponse {
		return &v
	}).(X12ValidationSettingsResponsePtrOutput)
}

// The value indicating whether to allow leading and trailing spaces and zeroes.
func (o X12ValidationSettingsResponseOutput) AllowLeadingAndTrailingSpacesAndZeroes() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) bool { return v.AllowLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolOutput)
}

// The value indicating whether to check for duplicate group control number.
func (o X12ValidationSettingsResponseOutput) CheckDuplicateGroupControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) bool { return v.CheckDuplicateGroupControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to check for duplicate interchange control number.
func (o X12ValidationSettingsResponseOutput) CheckDuplicateInterchangeControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) bool { return v.CheckDuplicateInterchangeControlNumber }).(pulumi.BoolOutput)
}

// The value indicating whether to check for duplicate transaction set control number.
func (o X12ValidationSettingsResponseOutput) CheckDuplicateTransactionSetControlNumber() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) bool { return v.CheckDuplicateTransactionSetControlNumber }).(pulumi.BoolOutput)
}

// The validity period of interchange control number.
func (o X12ValidationSettingsResponseOutput) InterchangeControlNumberValidityDays() pulumi.IntOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) int { return v.InterchangeControlNumberValidityDays }).(pulumi.IntOutput)
}

// The trailing separator policy.
func (o X12ValidationSettingsResponseOutput) TrailingSeparatorPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) string { return v.TrailingSeparatorPolicy }).(pulumi.StringOutput)
}

// The value indicating whether to trim leading and trailing spaces and zeroes.
func (o X12ValidationSettingsResponseOutput) TrimLeadingAndTrailingSpacesAndZeroes() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) bool { return v.TrimLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolOutput)
}

// The value indicating whether to validate character set in the message.
func (o X12ValidationSettingsResponseOutput) ValidateCharacterSet() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) bool { return v.ValidateCharacterSet }).(pulumi.BoolOutput)
}

// The value indicating whether to Whether to validate EDI types.
func (o X12ValidationSettingsResponseOutput) ValidateEDITypes() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) bool { return v.ValidateEDITypes }).(pulumi.BoolOutput)
}

// The value indicating whether to Whether to validate XSD types.
func (o X12ValidationSettingsResponseOutput) ValidateXSDTypes() pulumi.BoolOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) bool { return v.ValidateXSDTypes }).(pulumi.BoolOutput)
}

type X12ValidationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (X12ValidationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12ValidationSettingsResponse)(nil)).Elem()
}

func (o X12ValidationSettingsResponsePtrOutput) ToX12ValidationSettingsResponsePtrOutput() X12ValidationSettingsResponsePtrOutput {
	return o
}

func (o X12ValidationSettingsResponsePtrOutput) ToX12ValidationSettingsResponsePtrOutputWithContext(ctx context.Context) X12ValidationSettingsResponsePtrOutput {
	return o
}

func (o X12ValidationSettingsResponsePtrOutput) Elem() X12ValidationSettingsResponseOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) X12ValidationSettingsResponse { return *v }).(X12ValidationSettingsResponseOutput)
}

// The value indicating whether to allow leading and trailing spaces and zeroes.
func (o X12ValidationSettingsResponsePtrOutput) AllowLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowLeadingAndTrailingSpacesAndZeroes
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate group control number.
func (o X12ValidationSettingsResponsePtrOutput) CheckDuplicateGroupControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CheckDuplicateGroupControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate interchange control number.
func (o X12ValidationSettingsResponsePtrOutput) CheckDuplicateInterchangeControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CheckDuplicateInterchangeControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate transaction set control number.
func (o X12ValidationSettingsResponsePtrOutput) CheckDuplicateTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CheckDuplicateTransactionSetControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The validity period of interchange control number.
func (o X12ValidationSettingsResponsePtrOutput) InterchangeControlNumberValidityDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.InterchangeControlNumberValidityDays
	}).(pulumi.IntPtrOutput)
}

// The trailing separator policy.
func (o X12ValidationSettingsResponsePtrOutput) TrailingSeparatorPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TrailingSeparatorPolicy
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to trim leading and trailing spaces and zeroes.
func (o X12ValidationSettingsResponsePtrOutput) TrimLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.TrimLeadingAndTrailingSpacesAndZeroes
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to validate character set in the message.
func (o X12ValidationSettingsResponsePtrOutput) ValidateCharacterSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ValidateCharacterSet
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to Whether to validate EDI types.
func (o X12ValidationSettingsResponsePtrOutput) ValidateEDITypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ValidateEDITypes
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to Whether to validate XSD types.
func (o X12ValidationSettingsResponsePtrOutput) ValidateXSDTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ValidateXSDTypes
	}).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AS2AcknowledgementConnectionSettingsOutput{})
	pulumi.RegisterOutputType(AS2AcknowledgementConnectionSettingsPtrOutput{})
	pulumi.RegisterOutputType(AS2AcknowledgementConnectionSettingsResponseOutput{})
	pulumi.RegisterOutputType(AS2AcknowledgementConnectionSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AS2AgreementContentOutput{})
	pulumi.RegisterOutputType(AS2AgreementContentPtrOutput{})
	pulumi.RegisterOutputType(AS2AgreementContentResponseOutput{})
	pulumi.RegisterOutputType(AS2AgreementContentResponsePtrOutput{})
	pulumi.RegisterOutputType(AS2EnvelopeSettingsOutput{})
	pulumi.RegisterOutputType(AS2EnvelopeSettingsPtrOutput{})
	pulumi.RegisterOutputType(AS2EnvelopeSettingsResponseOutput{})
	pulumi.RegisterOutputType(AS2EnvelopeSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AS2ErrorSettingsOutput{})
	pulumi.RegisterOutputType(AS2ErrorSettingsPtrOutput{})
	pulumi.RegisterOutputType(AS2ErrorSettingsResponseOutput{})
	pulumi.RegisterOutputType(AS2ErrorSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AS2MdnSettingsOutput{})
	pulumi.RegisterOutputType(AS2MdnSettingsPtrOutput{})
	pulumi.RegisterOutputType(AS2MdnSettingsResponseOutput{})
	pulumi.RegisterOutputType(AS2MdnSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AS2MessageConnectionSettingsOutput{})
	pulumi.RegisterOutputType(AS2MessageConnectionSettingsPtrOutput{})
	pulumi.RegisterOutputType(AS2MessageConnectionSettingsResponseOutput{})
	pulumi.RegisterOutputType(AS2MessageConnectionSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AS2OneWayAgreementOutput{})
	pulumi.RegisterOutputType(AS2OneWayAgreementPtrOutput{})
	pulumi.RegisterOutputType(AS2OneWayAgreementResponseOutput{})
	pulumi.RegisterOutputType(AS2OneWayAgreementResponsePtrOutput{})
	pulumi.RegisterOutputType(AS2ProtocolSettingsOutput{})
	pulumi.RegisterOutputType(AS2ProtocolSettingsPtrOutput{})
	pulumi.RegisterOutputType(AS2ProtocolSettingsResponseOutput{})
	pulumi.RegisterOutputType(AS2ProtocolSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AS2SecuritySettingsOutput{})
	pulumi.RegisterOutputType(AS2SecuritySettingsPtrOutput{})
	pulumi.RegisterOutputType(AS2SecuritySettingsResponseOutput{})
	pulumi.RegisterOutputType(AS2SecuritySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AS2ValidationSettingsOutput{})
	pulumi.RegisterOutputType(AS2ValidationSettingsPtrOutput{})
	pulumi.RegisterOutputType(AS2ValidationSettingsResponseOutput{})
	pulumi.RegisterOutputType(AS2ValidationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AgreementContentOutput{})
	pulumi.RegisterOutputType(AgreementContentPtrOutput{})
	pulumi.RegisterOutputType(AgreementContentResponseOutput{})
	pulumi.RegisterOutputType(AgreementContentResponsePtrOutput{})
	pulumi.RegisterOutputType(AssemblyPropertiesOutput{})
	pulumi.RegisterOutputType(AssemblyPropertiesPtrOutput{})
	pulumi.RegisterOutputType(AssemblyPropertiesResponseOutput{})
	pulumi.RegisterOutputType(AssemblyPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureResourceErrorInfoResponseOutput{})
	pulumi.RegisterOutputType(AzureResourceErrorInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureResourceErrorInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(B2BPartnerContentOutput{})
	pulumi.RegisterOutputType(B2BPartnerContentPtrOutput{})
	pulumi.RegisterOutputType(B2BPartnerContentResponseOutput{})
	pulumi.RegisterOutputType(B2BPartnerContentResponsePtrOutput{})
	pulumi.RegisterOutputType(BatchConfigurationPropertiesOutput{})
	pulumi.RegisterOutputType(BatchConfigurationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(BatchConfigurationPropertiesResponseOutput{})
	pulumi.RegisterOutputType(BatchConfigurationPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(BatchReleaseCriteriaOutput{})
	pulumi.RegisterOutputType(BatchReleaseCriteriaPtrOutput{})
	pulumi.RegisterOutputType(BatchReleaseCriteriaResponseOutput{})
	pulumi.RegisterOutputType(BatchReleaseCriteriaResponsePtrOutput{})
	pulumi.RegisterOutputType(BusinessIdentityOutput{})
	pulumi.RegisterOutputType(BusinessIdentityPtrOutput{})
	pulumi.RegisterOutputType(BusinessIdentityArrayOutput{})
	pulumi.RegisterOutputType(BusinessIdentityResponseOutput{})
	pulumi.RegisterOutputType(BusinessIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(BusinessIdentityResponseArrayOutput{})
	pulumi.RegisterOutputType(ContentHashOutput{})
	pulumi.RegisterOutputType(ContentHashPtrOutput{})
	pulumi.RegisterOutputType(ContentHashResponseOutput{})
	pulumi.RegisterOutputType(ContentHashResponsePtrOutput{})
	pulumi.RegisterOutputType(ContentLinkOutput{})
	pulumi.RegisterOutputType(ContentLinkPtrOutput{})
	pulumi.RegisterOutputType(ContentLinkResponseOutput{})
	pulumi.RegisterOutputType(ContentLinkResponsePtrOutput{})
	pulumi.RegisterOutputType(EdifactAcknowledgementSettingsOutput{})
	pulumi.RegisterOutputType(EdifactAcknowledgementSettingsPtrOutput{})
	pulumi.RegisterOutputType(EdifactAcknowledgementSettingsResponseOutput{})
	pulumi.RegisterOutputType(EdifactAcknowledgementSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(EdifactAgreementContentOutput{})
	pulumi.RegisterOutputType(EdifactAgreementContentPtrOutput{})
	pulumi.RegisterOutputType(EdifactAgreementContentResponseOutput{})
	pulumi.RegisterOutputType(EdifactAgreementContentResponsePtrOutput{})
	pulumi.RegisterOutputType(EdifactDelimiterOverrideOutput{})
	pulumi.RegisterOutputType(EdifactDelimiterOverrideArrayOutput{})
	pulumi.RegisterOutputType(EdifactDelimiterOverrideResponseOutput{})
	pulumi.RegisterOutputType(EdifactDelimiterOverrideResponseArrayOutput{})
	pulumi.RegisterOutputType(EdifactEnvelopeOverrideOutput{})
	pulumi.RegisterOutputType(EdifactEnvelopeOverrideArrayOutput{})
	pulumi.RegisterOutputType(EdifactEnvelopeOverrideResponseOutput{})
	pulumi.RegisterOutputType(EdifactEnvelopeOverrideResponseArrayOutput{})
	pulumi.RegisterOutputType(EdifactEnvelopeSettingsOutput{})
	pulumi.RegisterOutputType(EdifactEnvelopeSettingsPtrOutput{})
	pulumi.RegisterOutputType(EdifactEnvelopeSettingsResponseOutput{})
	pulumi.RegisterOutputType(EdifactEnvelopeSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(EdifactFramingSettingsOutput{})
	pulumi.RegisterOutputType(EdifactFramingSettingsPtrOutput{})
	pulumi.RegisterOutputType(EdifactFramingSettingsResponseOutput{})
	pulumi.RegisterOutputType(EdifactFramingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(EdifactMessageFilterOutput{})
	pulumi.RegisterOutputType(EdifactMessageFilterPtrOutput{})
	pulumi.RegisterOutputType(EdifactMessageFilterResponseOutput{})
	pulumi.RegisterOutputType(EdifactMessageFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(EdifactMessageIdentifierOutput{})
	pulumi.RegisterOutputType(EdifactMessageIdentifierArrayOutput{})
	pulumi.RegisterOutputType(EdifactMessageIdentifierResponseOutput{})
	pulumi.RegisterOutputType(EdifactMessageIdentifierResponseArrayOutput{})
	pulumi.RegisterOutputType(EdifactOneWayAgreementOutput{})
	pulumi.RegisterOutputType(EdifactOneWayAgreementPtrOutput{})
	pulumi.RegisterOutputType(EdifactOneWayAgreementResponseOutput{})
	pulumi.RegisterOutputType(EdifactOneWayAgreementResponsePtrOutput{})
	pulumi.RegisterOutputType(EdifactProcessingSettingsOutput{})
	pulumi.RegisterOutputType(EdifactProcessingSettingsPtrOutput{})
	pulumi.RegisterOutputType(EdifactProcessingSettingsResponseOutput{})
	pulumi.RegisterOutputType(EdifactProcessingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(EdifactProtocolSettingsOutput{})
	pulumi.RegisterOutputType(EdifactProtocolSettingsPtrOutput{})
	pulumi.RegisterOutputType(EdifactProtocolSettingsResponseOutput{})
	pulumi.RegisterOutputType(EdifactProtocolSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(EdifactSchemaReferenceOutput{})
	pulumi.RegisterOutputType(EdifactSchemaReferenceArrayOutput{})
	pulumi.RegisterOutputType(EdifactSchemaReferenceResponseOutput{})
	pulumi.RegisterOutputType(EdifactSchemaReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(EdifactValidationOverrideOutput{})
	pulumi.RegisterOutputType(EdifactValidationOverrideArrayOutput{})
	pulumi.RegisterOutputType(EdifactValidationOverrideResponseOutput{})
	pulumi.RegisterOutputType(EdifactValidationOverrideResponseArrayOutput{})
	pulumi.RegisterOutputType(EdifactValidationSettingsOutput{})
	pulumi.RegisterOutputType(EdifactValidationSettingsPtrOutput{})
	pulumi.RegisterOutputType(EdifactValidationSettingsResponseOutput{})
	pulumi.RegisterOutputType(EdifactValidationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ExpressionResponseOutput{})
	pulumi.RegisterOutputType(ExpressionResponseArrayOutput{})
	pulumi.RegisterOutputType(ExpressionRootResponseOutput{})
	pulumi.RegisterOutputType(ExpressionRootResponseArrayOutput{})
	pulumi.RegisterOutputType(IntegrationAccountMapPropertiesParametersSchemaOutput{})
	pulumi.RegisterOutputType(IntegrationAccountMapPropertiesParametersSchemaPtrOutput{})
	pulumi.RegisterOutputType(IntegrationAccountMapPropertiesResponseParametersSchemaOutput{})
	pulumi.RegisterOutputType(IntegrationAccountMapPropertiesResponseParametersSchemaPtrOutput{})
	pulumi.RegisterOutputType(IntegrationAccountSkuOutput{})
	pulumi.RegisterOutputType(IntegrationAccountSkuPtrOutput{})
	pulumi.RegisterOutputType(IntegrationAccountSkuResponseOutput{})
	pulumi.RegisterOutputType(IntegrationAccountSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceKeyVaultOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceKeyVaultPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponseKeyVaultOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponseKeyVaultPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyResponseAttributesOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyResponseAttributesPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultReferenceOutput{})
	pulumi.RegisterOutputType(PartnerContentOutput{})
	pulumi.RegisterOutputType(PartnerContentPtrOutput{})
	pulumi.RegisterOutputType(PartnerContentResponseOutput{})
	pulumi.RegisterOutputType(PartnerContentResponsePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleOutput{})
	pulumi.RegisterOutputType(RecurrenceSchedulePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleOccurrenceOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleOccurrenceArrayOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleOccurrenceResponseArrayOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleResponseOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceReferenceOutput{})
	pulumi.RegisterOutputType(ResourceReferencePtrOutput{})
	pulumi.RegisterOutputType(ResourceReferenceResponseOutput{})
	pulumi.RegisterOutputType(ResourceReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(WorkflowParameterOutput{})
	pulumi.RegisterOutputType(WorkflowParameterMapOutput{})
	pulumi.RegisterOutputType(WorkflowParameterResponseOutput{})
	pulumi.RegisterOutputType(WorkflowParameterResponseMapOutput{})
	pulumi.RegisterOutputType(WorkflowTriggerListCallbackUrlQueriesResponseOutput{})
	pulumi.RegisterOutputType(WorkflowTriggerRecurrenceOutput{})
	pulumi.RegisterOutputType(WorkflowTriggerRecurrencePtrOutput{})
	pulumi.RegisterOutputType(WorkflowTriggerRecurrenceResponseOutput{})
	pulumi.RegisterOutputType(WorkflowTriggerRecurrenceResponsePtrOutput{})
	pulumi.RegisterOutputType(X12AcknowledgementSettingsOutput{})
	pulumi.RegisterOutputType(X12AcknowledgementSettingsPtrOutput{})
	pulumi.RegisterOutputType(X12AcknowledgementSettingsResponseOutput{})
	pulumi.RegisterOutputType(X12AcknowledgementSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(X12AgreementContentOutput{})
	pulumi.RegisterOutputType(X12AgreementContentPtrOutput{})
	pulumi.RegisterOutputType(X12AgreementContentResponseOutput{})
	pulumi.RegisterOutputType(X12AgreementContentResponsePtrOutput{})
	pulumi.RegisterOutputType(X12DelimiterOverridesOutput{})
	pulumi.RegisterOutputType(X12DelimiterOverridesArrayOutput{})
	pulumi.RegisterOutputType(X12DelimiterOverridesResponseOutput{})
	pulumi.RegisterOutputType(X12DelimiterOverridesResponseArrayOutput{})
	pulumi.RegisterOutputType(X12EnvelopeOverrideOutput{})
	pulumi.RegisterOutputType(X12EnvelopeOverrideArrayOutput{})
	pulumi.RegisterOutputType(X12EnvelopeOverrideResponseOutput{})
	pulumi.RegisterOutputType(X12EnvelopeOverrideResponseArrayOutput{})
	pulumi.RegisterOutputType(X12EnvelopeSettingsOutput{})
	pulumi.RegisterOutputType(X12EnvelopeSettingsPtrOutput{})
	pulumi.RegisterOutputType(X12EnvelopeSettingsResponseOutput{})
	pulumi.RegisterOutputType(X12EnvelopeSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(X12FramingSettingsOutput{})
	pulumi.RegisterOutputType(X12FramingSettingsPtrOutput{})
	pulumi.RegisterOutputType(X12FramingSettingsResponseOutput{})
	pulumi.RegisterOutputType(X12FramingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(X12MessageFilterOutput{})
	pulumi.RegisterOutputType(X12MessageFilterPtrOutput{})
	pulumi.RegisterOutputType(X12MessageFilterResponseOutput{})
	pulumi.RegisterOutputType(X12MessageFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(X12MessageIdentifierOutput{})
	pulumi.RegisterOutputType(X12MessageIdentifierArrayOutput{})
	pulumi.RegisterOutputType(X12MessageIdentifierResponseOutput{})
	pulumi.RegisterOutputType(X12MessageIdentifierResponseArrayOutput{})
	pulumi.RegisterOutputType(X12OneWayAgreementOutput{})
	pulumi.RegisterOutputType(X12OneWayAgreementPtrOutput{})
	pulumi.RegisterOutputType(X12OneWayAgreementResponseOutput{})
	pulumi.RegisterOutputType(X12OneWayAgreementResponsePtrOutput{})
	pulumi.RegisterOutputType(X12ProcessingSettingsOutput{})
	pulumi.RegisterOutputType(X12ProcessingSettingsPtrOutput{})
	pulumi.RegisterOutputType(X12ProcessingSettingsResponseOutput{})
	pulumi.RegisterOutputType(X12ProcessingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(X12ProtocolSettingsOutput{})
	pulumi.RegisterOutputType(X12ProtocolSettingsPtrOutput{})
	pulumi.RegisterOutputType(X12ProtocolSettingsResponseOutput{})
	pulumi.RegisterOutputType(X12ProtocolSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(X12SchemaReferenceOutput{})
	pulumi.RegisterOutputType(X12SchemaReferenceArrayOutput{})
	pulumi.RegisterOutputType(X12SchemaReferenceResponseOutput{})
	pulumi.RegisterOutputType(X12SchemaReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(X12SecuritySettingsOutput{})
	pulumi.RegisterOutputType(X12SecuritySettingsPtrOutput{})
	pulumi.RegisterOutputType(X12SecuritySettingsResponseOutput{})
	pulumi.RegisterOutputType(X12SecuritySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(X12ValidationOverrideOutput{})
	pulumi.RegisterOutputType(X12ValidationOverrideArrayOutput{})
	pulumi.RegisterOutputType(X12ValidationOverrideResponseOutput{})
	pulumi.RegisterOutputType(X12ValidationOverrideResponseArrayOutput{})
	pulumi.RegisterOutputType(X12ValidationSettingsOutput{})
	pulumi.RegisterOutputType(X12ValidationSettingsPtrOutput{})
	pulumi.RegisterOutputType(X12ValidationSettingsResponseOutput{})
	pulumi.RegisterOutputType(X12ValidationSettingsResponsePtrOutput{})
}
