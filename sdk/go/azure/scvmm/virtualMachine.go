// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package scvmm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The VirtualMachines resource definition.
// API Version: 2020-06-05-preview.
type VirtualMachine struct {
	pulumi.CustomResourceState

	// Availability Sets in vm.
	AvailabilitySets VirtualMachinePropertiesResponseAvailabilitySetsArrayOutput `pulumi:"availabilitySets"`
	// Type of checkpoint supported for the vm.
	CheckpointType pulumi.StringPtrOutput `pulumi:"checkpointType"`
	// Checkpoints in the vm.
	Checkpoints CheckpointResponseArrayOutput `pulumi:"checkpoints"`
	// ARM Id of the cloud resource to use for deploying the vm.
	CloudId pulumi.StringPtrOutput `pulumi:"cloudId"`
	// The extended location.
	ExtendedLocation ExtendedLocationResponseOutput `pulumi:"extendedLocation"`
	// Gets or sets the generation for the vm.
	Generation pulumi.IntPtrOutput `pulumi:"generation"`
	// Hardware properties.
	HardwareProfile HardwareProfileResponsePtrOutput `pulumi:"hardwareProfile"`
	// Gets or sets the inventory Item ID for the resource.
	InventoryItemId pulumi.StringPtrOutput `pulumi:"inventoryItemId"`
	// Gets or sets the location.
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource Name
	Name pulumi.StringOutput `pulumi:"name"`
	// Network properties.
	NetworkProfile NetworkProfileResponsePtrOutput `pulumi:"networkProfile"`
	// OS properties.
	OsProfile OsProfileResponsePtrOutput `pulumi:"osProfile"`
	// Gets the power state of the virtual machine.
	PowerState pulumi.StringOutput `pulumi:"powerState"`
	// Gets or sets the provisioning state.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Storage properties.
	StorageProfile StorageProfileResponsePtrOutput `pulumi:"storageProfile"`
	// The system data.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// ARM Id of the template resource to use for deploying the vm.
	TemplateId pulumi.StringPtrOutput `pulumi:"templateId"`
	// Resource Type
	Type pulumi.StringOutput `pulumi:"type"`
	// Unique ID of the virtual machine.
	Uuid pulumi.StringPtrOutput `pulumi:"uuid"`
	// VMName is the name of VM on the SCVMM server.
	VmName pulumi.StringPtrOutput `pulumi:"vmName"`
	// ARM Id of the vmmServer resource in which this resource resides.
	VmmServerId pulumi.StringPtrOutput `pulumi:"vmmServerId"`
}

// NewVirtualMachine registers a new resource with the given unique name, arguments, and options.
func NewVirtualMachine(ctx *pulumi.Context,
	name string, args *VirtualMachineArgs, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExtendedLocation == nil {
		return nil, errors.New("invalid value for required argument 'ExtendedLocation'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:scvmm/v20200605preview:VirtualMachine"),
		},
	})
	opts = append(opts, aliases)
	var resource VirtualMachine
	err := ctx.RegisterResource("azure-native:scvmm:VirtualMachine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualMachine gets an existing VirtualMachine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualMachineState, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	var resource VirtualMachine
	err := ctx.ReadResource("azure-native:scvmm:VirtualMachine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualMachine resources.
type virtualMachineState struct {
}

type VirtualMachineState struct {
}

func (VirtualMachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineState)(nil)).Elem()
}

type virtualMachineArgs struct {
	// Availability Sets in vm.
	AvailabilitySets []VirtualMachinePropertiesAvailabilitySets `pulumi:"availabilitySets"`
	// Type of checkpoint supported for the vm.
	CheckpointType *string `pulumi:"checkpointType"`
	// Checkpoints in the vm.
	Checkpoints []Checkpoint `pulumi:"checkpoints"`
	// ARM Id of the cloud resource to use for deploying the vm.
	CloudId *string `pulumi:"cloudId"`
	// The extended location.
	ExtendedLocation ExtendedLocation `pulumi:"extendedLocation"`
	// Gets or sets the generation for the vm.
	Generation *int `pulumi:"generation"`
	// Hardware properties.
	HardwareProfile *HardwareProfile `pulumi:"hardwareProfile"`
	// Gets or sets the inventory Item ID for the resource.
	InventoryItemId *string `pulumi:"inventoryItemId"`
	// Gets or sets the location.
	Location *string `pulumi:"location"`
	// Network properties.
	NetworkProfile *NetworkProfile `pulumi:"networkProfile"`
	// OS properties.
	OsProfile *OsProfile `pulumi:"osProfile"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Storage properties.
	StorageProfile *StorageProfile `pulumi:"storageProfile"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// ARM Id of the template resource to use for deploying the vm.
	TemplateId *string `pulumi:"templateId"`
	// Unique ID of the virtual machine.
	Uuid *string `pulumi:"uuid"`
	// Name of the VirtualMachine.
	VirtualMachineName *string `pulumi:"virtualMachineName"`
	// VMName is the name of VM on the SCVMM server.
	VmName *string `pulumi:"vmName"`
	// ARM Id of the vmmServer resource in which this resource resides.
	VmmServerId *string `pulumi:"vmmServerId"`
}

// The set of arguments for constructing a VirtualMachine resource.
type VirtualMachineArgs struct {
	// Availability Sets in vm.
	AvailabilitySets VirtualMachinePropertiesAvailabilitySetsArrayInput
	// Type of checkpoint supported for the vm.
	CheckpointType pulumi.StringPtrInput
	// Checkpoints in the vm.
	Checkpoints CheckpointArrayInput
	// ARM Id of the cloud resource to use for deploying the vm.
	CloudId pulumi.StringPtrInput
	// The extended location.
	ExtendedLocation ExtendedLocationInput
	// Gets or sets the generation for the vm.
	Generation pulumi.IntPtrInput
	// Hardware properties.
	HardwareProfile HardwareProfilePtrInput
	// Gets or sets the inventory Item ID for the resource.
	InventoryItemId pulumi.StringPtrInput
	// Gets or sets the location.
	Location pulumi.StringPtrInput
	// Network properties.
	NetworkProfile NetworkProfilePtrInput
	// OS properties.
	OsProfile OsProfilePtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// Storage properties.
	StorageProfile StorageProfilePtrInput
	// Resource tags
	Tags pulumi.StringMapInput
	// ARM Id of the template resource to use for deploying the vm.
	TemplateId pulumi.StringPtrInput
	// Unique ID of the virtual machine.
	Uuid pulumi.StringPtrInput
	// Name of the VirtualMachine.
	VirtualMachineName pulumi.StringPtrInput
	// VMName is the name of VM on the SCVMM server.
	VmName pulumi.StringPtrInput
	// ARM Id of the vmmServer resource in which this resource resides.
	VmmServerId pulumi.StringPtrInput
}

func (VirtualMachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineArgs)(nil)).Elem()
}

type VirtualMachineInput interface {
	pulumi.Input

	ToVirtualMachineOutput() VirtualMachineOutput
	ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput
}

func (*VirtualMachine) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (i *VirtualMachine) ToVirtualMachineOutput() VirtualMachineOutput {
	return i.ToVirtualMachineOutputWithContext(context.Background())
}

func (i *VirtualMachine) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOutput)
}

type VirtualMachineOutput struct{ *pulumi.OutputState }

func (VirtualMachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineOutput) ToVirtualMachineOutput() VirtualMachineOutput {
	return o
}

func (o VirtualMachineOutput) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(VirtualMachineOutput{})
}
