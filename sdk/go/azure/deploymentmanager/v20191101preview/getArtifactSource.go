// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20191101preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The resource that defines the source location where the artifacts are located.
func LookupArtifactSource(ctx *pulumi.Context, args *LookupArtifactSourceArgs, opts ...pulumi.InvokeOption) (*LookupArtifactSourceResult, error) {
	var rv LookupArtifactSourceResult
	err := ctx.Invoke("azure-native:deploymentmanager/v20191101preview:getArtifactSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupArtifactSourceArgs struct {
	// The name of the artifact source.
	ArtifactSourceName string `pulumi:"artifactSourceName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The resource that defines the source location where the artifacts are located.
type LookupArtifactSourceResult struct {
	// The path from the location that the 'authentication' property [say, a SAS URI to the blob container] refers to, to the location of the artifacts. This can be used to differentiate different versions of the artifacts. Or, different types of artifacts like binaries or templates. The location referenced by the authentication property concatenated with this optional artifactRoot path forms the artifact source location where the artifacts are expected to be found.
	ArtifactRoot *string `pulumi:"artifactRoot"`
	// The authentication method to use to access the artifact source.
	Authentication SasAuthenticationResponse `pulumi:"authentication"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The type of artifact source used.
	SourceType string `pulumi:"sourceType"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupArtifactSourceOutput(ctx *pulumi.Context, args LookupArtifactSourceOutputArgs, opts ...pulumi.InvokeOption) LookupArtifactSourceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupArtifactSourceResult, error) {
			args := v.(LookupArtifactSourceArgs)
			r, err := LookupArtifactSource(ctx, &args, opts...)
			var s LookupArtifactSourceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupArtifactSourceResultOutput)
}

type LookupArtifactSourceOutputArgs struct {
	// The name of the artifact source.
	ArtifactSourceName pulumi.StringInput `pulumi:"artifactSourceName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupArtifactSourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupArtifactSourceArgs)(nil)).Elem()
}

// The resource that defines the source location where the artifacts are located.
type LookupArtifactSourceResultOutput struct{ *pulumi.OutputState }

func (LookupArtifactSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupArtifactSourceResult)(nil)).Elem()
}

func (o LookupArtifactSourceResultOutput) ToLookupArtifactSourceResultOutput() LookupArtifactSourceResultOutput {
	return o
}

func (o LookupArtifactSourceResultOutput) ToLookupArtifactSourceResultOutputWithContext(ctx context.Context) LookupArtifactSourceResultOutput {
	return o
}

// The path from the location that the 'authentication' property [say, a SAS URI to the blob container] refers to, to the location of the artifacts. This can be used to differentiate different versions of the artifacts. Or, different types of artifacts like binaries or templates. The location referenced by the authentication property concatenated with this optional artifactRoot path forms the artifact source location where the artifacts are expected to be found.
func (o LookupArtifactSourceResultOutput) ArtifactRoot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupArtifactSourceResult) *string { return v.ArtifactRoot }).(pulumi.StringPtrOutput)
}

// The authentication method to use to access the artifact source.
func (o LookupArtifactSourceResultOutput) Authentication() SasAuthenticationResponseOutput {
	return o.ApplyT(func(v LookupArtifactSourceResult) SasAuthenticationResponse { return v.Authentication }).(SasAuthenticationResponseOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupArtifactSourceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupArtifactSourceResult) string { return v.Id }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o LookupArtifactSourceResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupArtifactSourceResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupArtifactSourceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupArtifactSourceResult) string { return v.Name }).(pulumi.StringOutput)
}

// The type of artifact source used.
func (o LookupArtifactSourceResultOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupArtifactSourceResult) string { return v.SourceType }).(pulumi.StringOutput)
}

// Resource tags.
func (o LookupArtifactSourceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupArtifactSourceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupArtifactSourceResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupArtifactSourceResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupArtifactSourceResultOutput{})
}
