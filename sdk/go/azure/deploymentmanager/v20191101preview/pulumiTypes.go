// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20191101preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ApiKey authentication gives a name and a value that can be included in either the request header or query parameters.
type ApiKeyAuthentication struct {
	// The location of the authentication key/value pair in the request.
	In RestAuthLocation `pulumi:"in"`
	// The key name of the authentication key/value pair.
	Name string `pulumi:"name"`
	// The authentication type.
	// Expected value is 'ApiKey'.
	Type string `pulumi:"type"`
	// The value of the authentication key/value pair.
	Value string `pulumi:"value"`
}

// ApiKey authentication gives a name and a value that can be included in either the request header or query parameters.
type ApiKeyAuthenticationResponse struct {
	// The location of the authentication key/value pair in the request.
	In string `pulumi:"in"`
	// The key name of the authentication key/value pair.
	Name string `pulumi:"name"`
	// The authentication type.
	// Expected value is 'ApiKey'.
	Type string `pulumi:"type"`
	// The value of the authentication key/value pair.
	Value string `pulumi:"value"`
}

// Detailed error information of any failure.
type CloudErrorBodyResponse struct {
	// Error code string.
	Code string `pulumi:"code"`
	// More detailed error information.
	Details []CloudErrorBodyResponse `pulumi:"details"`
	// Descriptive error information.
	Message string `pulumi:"message"`
	// Error target
	Target *string `pulumi:"target"`
}

// Defines the properties of a health check step.
type HealthCheckStepProperties struct {
	// The health check step attributes
	Attributes RestHealthCheckStepAttributes `pulumi:"attributes"`
	// The type of step.
	// Expected value is 'HealthCheck'.
	StepType string `pulumi:"stepType"`
}

// Defines the properties of a health check step.
type HealthCheckStepPropertiesResponse struct {
	// The health check step attributes
	Attributes RestHealthCheckStepAttributesResponse `pulumi:"attributes"`
	// The type of step.
	// Expected value is 'HealthCheck'.
	StepType string `pulumi:"stepType"`
}

// Identity for the resource.
type Identity struct {
	// The list of identities.
	IdentityIds []string `pulumi:"identityIds"`
	// The identity type.
	Type string `pulumi:"type"`
}

// IdentityInput is an input type that accepts IdentityArgs and IdentityOutput values.
// You can construct a concrete instance of `IdentityInput` via:
//
//          IdentityArgs{...}
type IdentityInput interface {
	pulumi.Input

	ToIdentityOutput() IdentityOutput
	ToIdentityOutputWithContext(context.Context) IdentityOutput
}

// Identity for the resource.
type IdentityArgs struct {
	// The list of identities.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The identity type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (i IdentityArgs) ToIdentityOutput() IdentityOutput {
	return i.ToIdentityOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput)
}

// Identity for the resource.
type IdentityOutput struct{ *pulumi.OutputState }

func (IdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (o IdentityOutput) ToIdentityOutput() IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return o
}

// The list of identities.
func (o IdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Identity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The identity type.
func (o IdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Identity) string { return v.Type }).(pulumi.StringOutput)
}

// Identity for the resource.
type IdentityResponse struct {
	// The list of identities.
	IdentityIds []string `pulumi:"identityIds"`
	// The identity type.
	Type string `pulumi:"type"`
}

// Identity for the resource.
type IdentityResponseOutput struct{ *pulumi.OutputState }

func (IdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (o IdentityResponseOutput) ToIdentityResponseOutput() IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return o
}

// The list of identities.
func (o IdentityResponseOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IdentityResponse) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The identity type.
func (o IdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Supplementary contextual messages during a rollout.
type MessageResponse struct {
	// The actual message text.
	Message string `pulumi:"message"`
	// Time in UTC this message was provided.
	TimeStamp string `pulumi:"timeStamp"`
}

// The properties that define a step.
type PrePostStep struct {
	// The resource Id of the step to be run.
	StepId string `pulumi:"stepId"`
}

// PrePostStepInput is an input type that accepts PrePostStepArgs and PrePostStepOutput values.
// You can construct a concrete instance of `PrePostStepInput` via:
//
//          PrePostStepArgs{...}
type PrePostStepInput interface {
	pulumi.Input

	ToPrePostStepOutput() PrePostStepOutput
	ToPrePostStepOutputWithContext(context.Context) PrePostStepOutput
}

// The properties that define a step.
type PrePostStepArgs struct {
	// The resource Id of the step to be run.
	StepId pulumi.StringInput `pulumi:"stepId"`
}

func (PrePostStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrePostStep)(nil)).Elem()
}

func (i PrePostStepArgs) ToPrePostStepOutput() PrePostStepOutput {
	return i.ToPrePostStepOutputWithContext(context.Background())
}

func (i PrePostStepArgs) ToPrePostStepOutputWithContext(ctx context.Context) PrePostStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrePostStepOutput)
}

// PrePostStepArrayInput is an input type that accepts PrePostStepArray and PrePostStepArrayOutput values.
// You can construct a concrete instance of `PrePostStepArrayInput` via:
//
//          PrePostStepArray{ PrePostStepArgs{...} }
type PrePostStepArrayInput interface {
	pulumi.Input

	ToPrePostStepArrayOutput() PrePostStepArrayOutput
	ToPrePostStepArrayOutputWithContext(context.Context) PrePostStepArrayOutput
}

type PrePostStepArray []PrePostStepInput

func (PrePostStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrePostStep)(nil)).Elem()
}

func (i PrePostStepArray) ToPrePostStepArrayOutput() PrePostStepArrayOutput {
	return i.ToPrePostStepArrayOutputWithContext(context.Background())
}

func (i PrePostStepArray) ToPrePostStepArrayOutputWithContext(ctx context.Context) PrePostStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrePostStepArrayOutput)
}

// The properties that define a step.
type PrePostStepOutput struct{ *pulumi.OutputState }

func (PrePostStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrePostStep)(nil)).Elem()
}

func (o PrePostStepOutput) ToPrePostStepOutput() PrePostStepOutput {
	return o
}

func (o PrePostStepOutput) ToPrePostStepOutputWithContext(ctx context.Context) PrePostStepOutput {
	return o
}

// The resource Id of the step to be run.
func (o PrePostStepOutput) StepId() pulumi.StringOutput {
	return o.ApplyT(func(v PrePostStep) string { return v.StepId }).(pulumi.StringOutput)
}

type PrePostStepArrayOutput struct{ *pulumi.OutputState }

func (PrePostStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrePostStep)(nil)).Elem()
}

func (o PrePostStepArrayOutput) ToPrePostStepArrayOutput() PrePostStepArrayOutput {
	return o
}

func (o PrePostStepArrayOutput) ToPrePostStepArrayOutputWithContext(ctx context.Context) PrePostStepArrayOutput {
	return o
}

func (o PrePostStepArrayOutput) Index(i pulumi.IntInput) PrePostStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrePostStep {
		return vs[0].([]PrePostStep)[vs[1].(int)]
	}).(PrePostStepOutput)
}

// The properties that define a step.
type PrePostStepResponse struct {
	// The resource Id of the step to be run.
	StepId string `pulumi:"stepId"`
}

// The properties that define a step.
type PrePostStepResponseOutput struct{ *pulumi.OutputState }

func (PrePostStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrePostStepResponse)(nil)).Elem()
}

func (o PrePostStepResponseOutput) ToPrePostStepResponseOutput() PrePostStepResponseOutput {
	return o
}

func (o PrePostStepResponseOutput) ToPrePostStepResponseOutputWithContext(ctx context.Context) PrePostStepResponseOutput {
	return o
}

// The resource Id of the step to be run.
func (o PrePostStepResponseOutput) StepId() pulumi.StringOutput {
	return o.ApplyT(func(v PrePostStepResponse) string { return v.StepId }).(pulumi.StringOutput)
}

type PrePostStepResponseArrayOutput struct{ *pulumi.OutputState }

func (PrePostStepResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrePostStepResponse)(nil)).Elem()
}

func (o PrePostStepResponseArrayOutput) ToPrePostStepResponseArrayOutput() PrePostStepResponseArrayOutput {
	return o
}

func (o PrePostStepResponseArrayOutput) ToPrePostStepResponseArrayOutputWithContext(ctx context.Context) PrePostStepResponseArrayOutput {
	return o
}

func (o PrePostStepResponseArrayOutput) Index(i pulumi.IntInput) PrePostStepResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrePostStepResponse {
		return vs[0].([]PrePostStepResponse)[vs[1].(int)]
	}).(PrePostStepResponseOutput)
}

// Individual resource operation information.
type ResourceOperationResponse struct {
	// Unique identifier of the operation. For ARM resources, this is the operationId obtained from ARM service.
	OperationId string `pulumi:"operationId"`
	// State of the resource deployment. For ARM resources, this is the current provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Name of the resource as specified in the artifacts. For ARM resources, this is the name of the resource specified in the template.
	ResourceName *string `pulumi:"resourceName"`
	// Type of the resource as specified in the artifacts. For ARM resources, this is the type of the resource specified in the template.
	ResourceType *string `pulumi:"resourceType"`
	// Http status code of the operation.
	StatusCode string `pulumi:"statusCode"`
	// Descriptive information of the resource operation.
	StatusMessage string `pulumi:"statusMessage"`
}

// A REST based health check
type RestHealthCheck struct {
	// A unique name for this check.
	Name string `pulumi:"name"`
	// The request to the health provider.
	Request RestRequest `pulumi:"request"`
	// The expected response from the health provider. If no expected response is provided, the default is to expect the received response to have an HTTP status code of 200 OK.
	Response *RestResponse `pulumi:"response"`
}

// A REST based health check
type RestHealthCheckResponse struct {
	// A unique name for this check.
	Name string `pulumi:"name"`
	// The request to the health provider.
	Request RestRequestResponse `pulumi:"request"`
	// The expected response from the health provider. If no expected response is provided, the default is to expect the received response to have an HTTP status code of 200 OK.
	Response *RestResponseResponse `pulumi:"response"`
}

// Defines the REST health check step properties.
type RestHealthCheckStepAttributes struct {
	// The list of checks that form the health check step.
	HealthChecks []RestHealthCheck `pulumi:"healthChecks"`
	// The duration in ISO 8601 format for which the resource is expected to be continuously healthy. If maxElasticDuration is specified, healthy state duration is enforced after the detection of first healthy signal.
	HealthyStateDuration string `pulumi:"healthyStateDuration"`
	// The duration in ISO 8601 format for which the health check waits for the resource to become healthy. Health check fails if it doesn't. Health check starts to enforce healthyStateDuration once resource becomes healthy.
	MaxElasticDuration *string `pulumi:"maxElasticDuration"`
	// The type of health check.
	// Expected value is 'REST'.
	Type string `pulumi:"type"`
	// The duration in ISO 8601 format for which health check waits idly without any checks.
	WaitDuration *string `pulumi:"waitDuration"`
}

// Defines the REST health check step properties.
type RestHealthCheckStepAttributesResponse struct {
	// The list of checks that form the health check step.
	HealthChecks []RestHealthCheckResponse `pulumi:"healthChecks"`
	// The duration in ISO 8601 format for which the resource is expected to be continuously healthy. If maxElasticDuration is specified, healthy state duration is enforced after the detection of first healthy signal.
	HealthyStateDuration string `pulumi:"healthyStateDuration"`
	// The duration in ISO 8601 format for which the health check waits for the resource to become healthy. Health check fails if it doesn't. Health check starts to enforce healthyStateDuration once resource becomes healthy.
	MaxElasticDuration *string `pulumi:"maxElasticDuration"`
	// The type of health check.
	// Expected value is 'REST'.
	Type string `pulumi:"type"`
	// The duration in ISO 8601 format for which health check waits idly without any checks.
	WaitDuration *string `pulumi:"waitDuration"`
}

// The properties that make up a REST request
type RestRequest struct {
	// The authentication information required in the request to the health provider.
	Authentication interface{} `pulumi:"authentication"`
	// The HTTP method to use for the request.
	Method RestRequestMethod `pulumi:"method"`
	// The HTTP URI to use for the request.
	Uri string `pulumi:"uri"`
}

// The properties that make up a REST request
type RestRequestResponse struct {
	// The authentication information required in the request to the health provider.
	Authentication interface{} `pulumi:"authentication"`
	// The HTTP method to use for the request.
	Method string `pulumi:"method"`
	// The HTTP URI to use for the request.
	Uri string `pulumi:"uri"`
}

// The properties that make up the expected REST response
type RestResponse struct {
	// The regular expressions to match the response content with.
	Regex *RestResponseRegex `pulumi:"regex"`
	// The HTTP status codes expected in a successful health check response. The response is expected to match one of the given status codes. If no expected status codes are provided, default expected status code is 200 OK.
	SuccessStatusCodes []string `pulumi:"successStatusCodes"`
}

// The regular expressions to match the response content with.
type RestResponseRegex struct {
	// Indicates whether any or all of the expressions should match with the response content.
	MatchQuantifier *RestMatchQuantifier `pulumi:"matchQuantifier"`
	// The list of regular expressions.
	Matches []string `pulumi:"matches"`
}

// The properties that make up the expected REST response
type RestResponseResponse struct {
	// The regular expressions to match the response content with.
	Regex *RestResponseResponseRegex `pulumi:"regex"`
	// The HTTP status codes expected in a successful health check response. The response is expected to match one of the given status codes. If no expected status codes are provided, default expected status code is 200 OK.
	SuccessStatusCodes []string `pulumi:"successStatusCodes"`
}

// The regular expressions to match the response content with.
type RestResponseResponseRegex struct {
	// Indicates whether any or all of the expressions should match with the response content.
	MatchQuantifier *string `pulumi:"matchQuantifier"`
	// The list of regular expressions.
	Matches []string `pulumi:"matches"`
}

// RolloutIdentity uses the user-assigned managed identity authentication context specified in the Identity property during rollout creation.
type RolloutIdentityAuthentication struct {
	// The authentication type.
	// Expected value is 'RolloutIdentity'.
	Type string `pulumi:"type"`
}

// RolloutIdentity uses the user-assigned managed identity authentication context specified in the Identity property during rollout creation.
type RolloutIdentityAuthenticationResponse struct {
	// The authentication type.
	// Expected value is 'RolloutIdentity'.
	Type string `pulumi:"type"`
}

// Detailed runtime information of the rollout.
type RolloutOperationInfoResponse struct {
	// The start time of the rollout in UTC. This property will not be set if the rollout has not completed yet.
	EndTime string `pulumi:"endTime"`
	// The detailed error information for any failure.
	Error CloudErrorBodyResponse `pulumi:"error"`
	// The ordinal count of the number of retry attempts on a rollout. 0 if no retries of the rollout have been performed. If the rollout is updated with a PUT, this count is reset to 0.
	RetryAttempt int `pulumi:"retryAttempt"`
	// True, if all steps that succeeded on the previous run/attempt were chosen to be skipped in this retry attempt. False, otherwise.
	SkipSucceededOnRetry bool `pulumi:"skipSucceededOnRetry"`
	// The start time of the rollout in UTC.
	StartTime string `pulumi:"startTime"`
}

// Defines a specific step on a target service unit.
type RolloutStepResponse struct {
	// Supplementary informative messages during rollout.
	Messages []MessageResponse `pulumi:"messages"`
	// Name of the step.
	Name string `pulumi:"name"`
	// Detailed information of specific action execution.
	OperationInfo StepOperationInfoResponse `pulumi:"operationInfo"`
	// Set of resource operations that were performed, if any, on an Azure resource.
	ResourceOperations []ResourceOperationResponse `pulumi:"resourceOperations"`
	// Current state of the step.
	Status string `pulumi:"status"`
	// The step group the current step is part of.
	StepGroup *string `pulumi:"stepGroup"`
}

// Defines the properties to access the artifacts using an Azure Storage SAS URI.
type SasAuthentication struct {
	// The SAS URI to the Azure Storage blob container. Any offset from the root of the container to where the artifacts are located can be defined in the artifactRoot.
	SasUri string `pulumi:"sasUri"`
	// The authentication type
	// Expected value is 'Sas'.
	Type string `pulumi:"type"`
}

// SasAuthenticationInput is an input type that accepts SasAuthenticationArgs and SasAuthenticationOutput values.
// You can construct a concrete instance of `SasAuthenticationInput` via:
//
//          SasAuthenticationArgs{...}
type SasAuthenticationInput interface {
	pulumi.Input

	ToSasAuthenticationOutput() SasAuthenticationOutput
	ToSasAuthenticationOutputWithContext(context.Context) SasAuthenticationOutput
}

// Defines the properties to access the artifacts using an Azure Storage SAS URI.
type SasAuthenticationArgs struct {
	// The SAS URI to the Azure Storage blob container. Any offset from the root of the container to where the artifacts are located can be defined in the artifactRoot.
	SasUri pulumi.StringInput `pulumi:"sasUri"`
	// The authentication type
	// Expected value is 'Sas'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SasAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SasAuthentication)(nil)).Elem()
}

func (i SasAuthenticationArgs) ToSasAuthenticationOutput() SasAuthenticationOutput {
	return i.ToSasAuthenticationOutputWithContext(context.Background())
}

func (i SasAuthenticationArgs) ToSasAuthenticationOutputWithContext(ctx context.Context) SasAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SasAuthenticationOutput)
}

// Defines the properties to access the artifacts using an Azure Storage SAS URI.
type SasAuthenticationOutput struct{ *pulumi.OutputState }

func (SasAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SasAuthentication)(nil)).Elem()
}

func (o SasAuthenticationOutput) ToSasAuthenticationOutput() SasAuthenticationOutput {
	return o
}

func (o SasAuthenticationOutput) ToSasAuthenticationOutputWithContext(ctx context.Context) SasAuthenticationOutput {
	return o
}

// The SAS URI to the Azure Storage blob container. Any offset from the root of the container to where the artifacts are located can be defined in the artifactRoot.
func (o SasAuthenticationOutput) SasUri() pulumi.StringOutput {
	return o.ApplyT(func(v SasAuthentication) string { return v.SasUri }).(pulumi.StringOutput)
}

// The authentication type
// Expected value is 'Sas'.
func (o SasAuthenticationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SasAuthentication) string { return v.Type }).(pulumi.StringOutput)
}

// Defines the properties to access the artifacts using an Azure Storage SAS URI.
type SasAuthenticationResponse struct {
	// The SAS URI to the Azure Storage blob container. Any offset from the root of the container to where the artifacts are located can be defined in the artifactRoot.
	SasUri string `pulumi:"sasUri"`
	// The authentication type
	// Expected value is 'Sas'.
	Type string `pulumi:"type"`
}

// Defines the properties to access the artifacts using an Azure Storage SAS URI.
type SasAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (SasAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SasAuthenticationResponse)(nil)).Elem()
}

func (o SasAuthenticationResponseOutput) ToSasAuthenticationResponseOutput() SasAuthenticationResponseOutput {
	return o
}

func (o SasAuthenticationResponseOutput) ToSasAuthenticationResponseOutputWithContext(ctx context.Context) SasAuthenticationResponseOutput {
	return o
}

// The SAS URI to the Azure Storage blob container. Any offset from the root of the container to where the artifacts are located can be defined in the artifactRoot.
func (o SasAuthenticationResponseOutput) SasUri() pulumi.StringOutput {
	return o.ApplyT(func(v SasAuthenticationResponse) string { return v.SasUri }).(pulumi.StringOutput)
}

// The authentication type
// Expected value is 'Sas'.
func (o SasAuthenticationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SasAuthenticationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Defines a service.
type ServiceResponse struct {
	// Name of the service.
	Name *string `pulumi:"name"`
	// The detailed information about the units that make up the service.
	ServiceUnits []ServiceUnitResponse `pulumi:"serviceUnits"`
	// The Azure location to which the resources in the service belong to or should be deployed to.
	TargetLocation string `pulumi:"targetLocation"`
	// The subscription to which the resources in the service belong to or should be deployed to.
	TargetSubscriptionId string `pulumi:"targetSubscriptionId"`
}

// Defines the artifacts of a service unit.
type ServiceUnitArtifacts struct {
	// The path to the ARM parameters file relative to the artifact source.
	ParametersArtifactSourceRelativePath *string `pulumi:"parametersArtifactSourceRelativePath"`
	// The full URI of the ARM parameters file with the SAS token.
	ParametersUri *string `pulumi:"parametersUri"`
	// The path to the ARM template file relative to the artifact source.
	TemplateArtifactSourceRelativePath *string `pulumi:"templateArtifactSourceRelativePath"`
	// The full URI of the ARM template file with the SAS token.
	TemplateUri *string `pulumi:"templateUri"`
}

// ServiceUnitArtifactsInput is an input type that accepts ServiceUnitArtifactsArgs and ServiceUnitArtifactsOutput values.
// You can construct a concrete instance of `ServiceUnitArtifactsInput` via:
//
//          ServiceUnitArtifactsArgs{...}
type ServiceUnitArtifactsInput interface {
	pulumi.Input

	ToServiceUnitArtifactsOutput() ServiceUnitArtifactsOutput
	ToServiceUnitArtifactsOutputWithContext(context.Context) ServiceUnitArtifactsOutput
}

// Defines the artifacts of a service unit.
type ServiceUnitArtifactsArgs struct {
	// The path to the ARM parameters file relative to the artifact source.
	ParametersArtifactSourceRelativePath pulumi.StringPtrInput `pulumi:"parametersArtifactSourceRelativePath"`
	// The full URI of the ARM parameters file with the SAS token.
	ParametersUri pulumi.StringPtrInput `pulumi:"parametersUri"`
	// The path to the ARM template file relative to the artifact source.
	TemplateArtifactSourceRelativePath pulumi.StringPtrInput `pulumi:"templateArtifactSourceRelativePath"`
	// The full URI of the ARM template file with the SAS token.
	TemplateUri pulumi.StringPtrInput `pulumi:"templateUri"`
}

func (ServiceUnitArtifactsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceUnitArtifacts)(nil)).Elem()
}

func (i ServiceUnitArtifactsArgs) ToServiceUnitArtifactsOutput() ServiceUnitArtifactsOutput {
	return i.ToServiceUnitArtifactsOutputWithContext(context.Background())
}

func (i ServiceUnitArtifactsArgs) ToServiceUnitArtifactsOutputWithContext(ctx context.Context) ServiceUnitArtifactsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceUnitArtifactsOutput)
}

func (i ServiceUnitArtifactsArgs) ToServiceUnitArtifactsPtrOutput() ServiceUnitArtifactsPtrOutput {
	return i.ToServiceUnitArtifactsPtrOutputWithContext(context.Background())
}

func (i ServiceUnitArtifactsArgs) ToServiceUnitArtifactsPtrOutputWithContext(ctx context.Context) ServiceUnitArtifactsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceUnitArtifactsOutput).ToServiceUnitArtifactsPtrOutputWithContext(ctx)
}

// ServiceUnitArtifactsPtrInput is an input type that accepts ServiceUnitArtifactsArgs, ServiceUnitArtifactsPtr and ServiceUnitArtifactsPtrOutput values.
// You can construct a concrete instance of `ServiceUnitArtifactsPtrInput` via:
//
//          ServiceUnitArtifactsArgs{...}
//
//  or:
//
//          nil
type ServiceUnitArtifactsPtrInput interface {
	pulumi.Input

	ToServiceUnitArtifactsPtrOutput() ServiceUnitArtifactsPtrOutput
	ToServiceUnitArtifactsPtrOutputWithContext(context.Context) ServiceUnitArtifactsPtrOutput
}

type serviceUnitArtifactsPtrType ServiceUnitArtifactsArgs

func ServiceUnitArtifactsPtr(v *ServiceUnitArtifactsArgs) ServiceUnitArtifactsPtrInput {
	return (*serviceUnitArtifactsPtrType)(v)
}

func (*serviceUnitArtifactsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceUnitArtifacts)(nil)).Elem()
}

func (i *serviceUnitArtifactsPtrType) ToServiceUnitArtifactsPtrOutput() ServiceUnitArtifactsPtrOutput {
	return i.ToServiceUnitArtifactsPtrOutputWithContext(context.Background())
}

func (i *serviceUnitArtifactsPtrType) ToServiceUnitArtifactsPtrOutputWithContext(ctx context.Context) ServiceUnitArtifactsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceUnitArtifactsPtrOutput)
}

// Defines the artifacts of a service unit.
type ServiceUnitArtifactsOutput struct{ *pulumi.OutputState }

func (ServiceUnitArtifactsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceUnitArtifacts)(nil)).Elem()
}

func (o ServiceUnitArtifactsOutput) ToServiceUnitArtifactsOutput() ServiceUnitArtifactsOutput {
	return o
}

func (o ServiceUnitArtifactsOutput) ToServiceUnitArtifactsOutputWithContext(ctx context.Context) ServiceUnitArtifactsOutput {
	return o
}

func (o ServiceUnitArtifactsOutput) ToServiceUnitArtifactsPtrOutput() ServiceUnitArtifactsPtrOutput {
	return o.ToServiceUnitArtifactsPtrOutputWithContext(context.Background())
}

func (o ServiceUnitArtifactsOutput) ToServiceUnitArtifactsPtrOutputWithContext(ctx context.Context) ServiceUnitArtifactsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceUnitArtifacts) *ServiceUnitArtifacts {
		return &v
	}).(ServiceUnitArtifactsPtrOutput)
}

// The path to the ARM parameters file relative to the artifact source.
func (o ServiceUnitArtifactsOutput) ParametersArtifactSourceRelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceUnitArtifacts) *string { return v.ParametersArtifactSourceRelativePath }).(pulumi.StringPtrOutput)
}

// The full URI of the ARM parameters file with the SAS token.
func (o ServiceUnitArtifactsOutput) ParametersUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceUnitArtifacts) *string { return v.ParametersUri }).(pulumi.StringPtrOutput)
}

// The path to the ARM template file relative to the artifact source.
func (o ServiceUnitArtifactsOutput) TemplateArtifactSourceRelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceUnitArtifacts) *string { return v.TemplateArtifactSourceRelativePath }).(pulumi.StringPtrOutput)
}

// The full URI of the ARM template file with the SAS token.
func (o ServiceUnitArtifactsOutput) TemplateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceUnitArtifacts) *string { return v.TemplateUri }).(pulumi.StringPtrOutput)
}

type ServiceUnitArtifactsPtrOutput struct{ *pulumi.OutputState }

func (ServiceUnitArtifactsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceUnitArtifacts)(nil)).Elem()
}

func (o ServiceUnitArtifactsPtrOutput) ToServiceUnitArtifactsPtrOutput() ServiceUnitArtifactsPtrOutput {
	return o
}

func (o ServiceUnitArtifactsPtrOutput) ToServiceUnitArtifactsPtrOutputWithContext(ctx context.Context) ServiceUnitArtifactsPtrOutput {
	return o
}

func (o ServiceUnitArtifactsPtrOutput) Elem() ServiceUnitArtifactsOutput {
	return o.ApplyT(func(v *ServiceUnitArtifacts) ServiceUnitArtifacts {
		if v != nil {
			return *v
		}
		var ret ServiceUnitArtifacts
		return ret
	}).(ServiceUnitArtifactsOutput)
}

// The path to the ARM parameters file relative to the artifact source.
func (o ServiceUnitArtifactsPtrOutput) ParametersArtifactSourceRelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceUnitArtifacts) *string {
		if v == nil {
			return nil
		}
		return v.ParametersArtifactSourceRelativePath
	}).(pulumi.StringPtrOutput)
}

// The full URI of the ARM parameters file with the SAS token.
func (o ServiceUnitArtifactsPtrOutput) ParametersUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceUnitArtifacts) *string {
		if v == nil {
			return nil
		}
		return v.ParametersUri
	}).(pulumi.StringPtrOutput)
}

// The path to the ARM template file relative to the artifact source.
func (o ServiceUnitArtifactsPtrOutput) TemplateArtifactSourceRelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceUnitArtifacts) *string {
		if v == nil {
			return nil
		}
		return v.TemplateArtifactSourceRelativePath
	}).(pulumi.StringPtrOutput)
}

// The full URI of the ARM template file with the SAS token.
func (o ServiceUnitArtifactsPtrOutput) TemplateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceUnitArtifacts) *string {
		if v == nil {
			return nil
		}
		return v.TemplateUri
	}).(pulumi.StringPtrOutput)
}

// Defines the artifacts of a service unit.
type ServiceUnitArtifactsResponse struct {
	// The path to the ARM parameters file relative to the artifact source.
	ParametersArtifactSourceRelativePath *string `pulumi:"parametersArtifactSourceRelativePath"`
	// The full URI of the ARM parameters file with the SAS token.
	ParametersUri *string `pulumi:"parametersUri"`
	// The path to the ARM template file relative to the artifact source.
	TemplateArtifactSourceRelativePath *string `pulumi:"templateArtifactSourceRelativePath"`
	// The full URI of the ARM template file with the SAS token.
	TemplateUri *string `pulumi:"templateUri"`
}

// Defines the artifacts of a service unit.
type ServiceUnitArtifactsResponseOutput struct{ *pulumi.OutputState }

func (ServiceUnitArtifactsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceUnitArtifactsResponse)(nil)).Elem()
}

func (o ServiceUnitArtifactsResponseOutput) ToServiceUnitArtifactsResponseOutput() ServiceUnitArtifactsResponseOutput {
	return o
}

func (o ServiceUnitArtifactsResponseOutput) ToServiceUnitArtifactsResponseOutputWithContext(ctx context.Context) ServiceUnitArtifactsResponseOutput {
	return o
}

// The path to the ARM parameters file relative to the artifact source.
func (o ServiceUnitArtifactsResponseOutput) ParametersArtifactSourceRelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceUnitArtifactsResponse) *string { return v.ParametersArtifactSourceRelativePath }).(pulumi.StringPtrOutput)
}

// The full URI of the ARM parameters file with the SAS token.
func (o ServiceUnitArtifactsResponseOutput) ParametersUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceUnitArtifactsResponse) *string { return v.ParametersUri }).(pulumi.StringPtrOutput)
}

// The path to the ARM template file relative to the artifact source.
func (o ServiceUnitArtifactsResponseOutput) TemplateArtifactSourceRelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceUnitArtifactsResponse) *string { return v.TemplateArtifactSourceRelativePath }).(pulumi.StringPtrOutput)
}

// The full URI of the ARM template file with the SAS token.
func (o ServiceUnitArtifactsResponseOutput) TemplateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceUnitArtifactsResponse) *string { return v.TemplateUri }).(pulumi.StringPtrOutput)
}

type ServiceUnitArtifactsResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceUnitArtifactsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceUnitArtifactsResponse)(nil)).Elem()
}

func (o ServiceUnitArtifactsResponsePtrOutput) ToServiceUnitArtifactsResponsePtrOutput() ServiceUnitArtifactsResponsePtrOutput {
	return o
}

func (o ServiceUnitArtifactsResponsePtrOutput) ToServiceUnitArtifactsResponsePtrOutputWithContext(ctx context.Context) ServiceUnitArtifactsResponsePtrOutput {
	return o
}

func (o ServiceUnitArtifactsResponsePtrOutput) Elem() ServiceUnitArtifactsResponseOutput {
	return o.ApplyT(func(v *ServiceUnitArtifactsResponse) ServiceUnitArtifactsResponse {
		if v != nil {
			return *v
		}
		var ret ServiceUnitArtifactsResponse
		return ret
	}).(ServiceUnitArtifactsResponseOutput)
}

// The path to the ARM parameters file relative to the artifact source.
func (o ServiceUnitArtifactsResponsePtrOutput) ParametersArtifactSourceRelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceUnitArtifactsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ParametersArtifactSourceRelativePath
	}).(pulumi.StringPtrOutput)
}

// The full URI of the ARM parameters file with the SAS token.
func (o ServiceUnitArtifactsResponsePtrOutput) ParametersUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceUnitArtifactsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ParametersUri
	}).(pulumi.StringPtrOutput)
}

// The path to the ARM template file relative to the artifact source.
func (o ServiceUnitArtifactsResponsePtrOutput) TemplateArtifactSourceRelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceUnitArtifactsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TemplateArtifactSourceRelativePath
	}).(pulumi.StringPtrOutput)
}

// The full URI of the ARM template file with the SAS token.
func (o ServiceUnitArtifactsResponsePtrOutput) TemplateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceUnitArtifactsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TemplateUri
	}).(pulumi.StringPtrOutput)
}

// Defines a service unit.
type ServiceUnitResponse struct {
	// The artifacts for the service unit.
	Artifacts *ServiceUnitArtifactsResponse `pulumi:"artifacts"`
	// Describes the type of ARM deployment to be performed on the resource.
	DeploymentMode string `pulumi:"deploymentMode"`
	// Name of the service unit.
	Name *string `pulumi:"name"`
	// Detailed step information, if present.
	Steps []RolloutStepResponse `pulumi:"steps"`
	// The Azure Resource Group to which the resources in the service unit belong to or should be deployed to.
	TargetResourceGroup string `pulumi:"targetResourceGroup"`
}

// The properties that define a Step group in a rollout.
type StepGroup struct {
	// The list of step group names on which this step group depends on.
	DependsOnStepGroups []string `pulumi:"dependsOnStepGroups"`
	// The resource Id of service unit to be deployed. The service unit should be from the service topology referenced in targetServiceTopologyId
	DeploymentTargetId string `pulumi:"deploymentTargetId"`
	// The name of the step group.
	Name string `pulumi:"name"`
	// The list of steps to be run after deploying the target.
	PostDeploymentSteps []PrePostStep `pulumi:"postDeploymentSteps"`
	// The list of steps to be run before deploying the target.
	PreDeploymentSteps []PrePostStep `pulumi:"preDeploymentSteps"`
}

// StepGroupInput is an input type that accepts StepGroupArgs and StepGroupOutput values.
// You can construct a concrete instance of `StepGroupInput` via:
//
//          StepGroupArgs{...}
type StepGroupInput interface {
	pulumi.Input

	ToStepGroupOutput() StepGroupOutput
	ToStepGroupOutputWithContext(context.Context) StepGroupOutput
}

// The properties that define a Step group in a rollout.
type StepGroupArgs struct {
	// The list of step group names on which this step group depends on.
	DependsOnStepGroups pulumi.StringArrayInput `pulumi:"dependsOnStepGroups"`
	// The resource Id of service unit to be deployed. The service unit should be from the service topology referenced in targetServiceTopologyId
	DeploymentTargetId pulumi.StringInput `pulumi:"deploymentTargetId"`
	// The name of the step group.
	Name pulumi.StringInput `pulumi:"name"`
	// The list of steps to be run after deploying the target.
	PostDeploymentSteps PrePostStepArrayInput `pulumi:"postDeploymentSteps"`
	// The list of steps to be run before deploying the target.
	PreDeploymentSteps PrePostStepArrayInput `pulumi:"preDeploymentSteps"`
}

func (StepGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StepGroup)(nil)).Elem()
}

func (i StepGroupArgs) ToStepGroupOutput() StepGroupOutput {
	return i.ToStepGroupOutputWithContext(context.Background())
}

func (i StepGroupArgs) ToStepGroupOutputWithContext(ctx context.Context) StepGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepGroupOutput)
}

// StepGroupArrayInput is an input type that accepts StepGroupArray and StepGroupArrayOutput values.
// You can construct a concrete instance of `StepGroupArrayInput` via:
//
//          StepGroupArray{ StepGroupArgs{...} }
type StepGroupArrayInput interface {
	pulumi.Input

	ToStepGroupArrayOutput() StepGroupArrayOutput
	ToStepGroupArrayOutputWithContext(context.Context) StepGroupArrayOutput
}

type StepGroupArray []StepGroupInput

func (StepGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StepGroup)(nil)).Elem()
}

func (i StepGroupArray) ToStepGroupArrayOutput() StepGroupArrayOutput {
	return i.ToStepGroupArrayOutputWithContext(context.Background())
}

func (i StepGroupArray) ToStepGroupArrayOutputWithContext(ctx context.Context) StepGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepGroupArrayOutput)
}

// The properties that define a Step group in a rollout.
type StepGroupOutput struct{ *pulumi.OutputState }

func (StepGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StepGroup)(nil)).Elem()
}

func (o StepGroupOutput) ToStepGroupOutput() StepGroupOutput {
	return o
}

func (o StepGroupOutput) ToStepGroupOutputWithContext(ctx context.Context) StepGroupOutput {
	return o
}

// The list of step group names on which this step group depends on.
func (o StepGroupOutput) DependsOnStepGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StepGroup) []string { return v.DependsOnStepGroups }).(pulumi.StringArrayOutput)
}

// The resource Id of service unit to be deployed. The service unit should be from the service topology referenced in targetServiceTopologyId
func (o StepGroupOutput) DeploymentTargetId() pulumi.StringOutput {
	return o.ApplyT(func(v StepGroup) string { return v.DeploymentTargetId }).(pulumi.StringOutput)
}

// The name of the step group.
func (o StepGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StepGroup) string { return v.Name }).(pulumi.StringOutput)
}

// The list of steps to be run after deploying the target.
func (o StepGroupOutput) PostDeploymentSteps() PrePostStepArrayOutput {
	return o.ApplyT(func(v StepGroup) []PrePostStep { return v.PostDeploymentSteps }).(PrePostStepArrayOutput)
}

// The list of steps to be run before deploying the target.
func (o StepGroupOutput) PreDeploymentSteps() PrePostStepArrayOutput {
	return o.ApplyT(func(v StepGroup) []PrePostStep { return v.PreDeploymentSteps }).(PrePostStepArrayOutput)
}

type StepGroupArrayOutput struct{ *pulumi.OutputState }

func (StepGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StepGroup)(nil)).Elem()
}

func (o StepGroupArrayOutput) ToStepGroupArrayOutput() StepGroupArrayOutput {
	return o
}

func (o StepGroupArrayOutput) ToStepGroupArrayOutputWithContext(ctx context.Context) StepGroupArrayOutput {
	return o
}

func (o StepGroupArrayOutput) Index(i pulumi.IntInput) StepGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StepGroup {
		return vs[0].([]StepGroup)[vs[1].(int)]
	}).(StepGroupOutput)
}

// The properties that define a Step group in a rollout.
type StepGroupResponse struct {
	// The list of step group names on which this step group depends on.
	DependsOnStepGroups []string `pulumi:"dependsOnStepGroups"`
	// The resource Id of service unit to be deployed. The service unit should be from the service topology referenced in targetServiceTopologyId
	DeploymentTargetId string `pulumi:"deploymentTargetId"`
	// The name of the step group.
	Name string `pulumi:"name"`
	// The list of steps to be run after deploying the target.
	PostDeploymentSteps []PrePostStepResponse `pulumi:"postDeploymentSteps"`
	// The list of steps to be run before deploying the target.
	PreDeploymentSteps []PrePostStepResponse `pulumi:"preDeploymentSteps"`
}

// The properties that define a Step group in a rollout.
type StepGroupResponseOutput struct{ *pulumi.OutputState }

func (StepGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StepGroupResponse)(nil)).Elem()
}

func (o StepGroupResponseOutput) ToStepGroupResponseOutput() StepGroupResponseOutput {
	return o
}

func (o StepGroupResponseOutput) ToStepGroupResponseOutputWithContext(ctx context.Context) StepGroupResponseOutput {
	return o
}

// The list of step group names on which this step group depends on.
func (o StepGroupResponseOutput) DependsOnStepGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StepGroupResponse) []string { return v.DependsOnStepGroups }).(pulumi.StringArrayOutput)
}

// The resource Id of service unit to be deployed. The service unit should be from the service topology referenced in targetServiceTopologyId
func (o StepGroupResponseOutput) DeploymentTargetId() pulumi.StringOutput {
	return o.ApplyT(func(v StepGroupResponse) string { return v.DeploymentTargetId }).(pulumi.StringOutput)
}

// The name of the step group.
func (o StepGroupResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StepGroupResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The list of steps to be run after deploying the target.
func (o StepGroupResponseOutput) PostDeploymentSteps() PrePostStepResponseArrayOutput {
	return o.ApplyT(func(v StepGroupResponse) []PrePostStepResponse { return v.PostDeploymentSteps }).(PrePostStepResponseArrayOutput)
}

// The list of steps to be run before deploying the target.
func (o StepGroupResponseOutput) PreDeploymentSteps() PrePostStepResponseArrayOutput {
	return o.ApplyT(func(v StepGroupResponse) []PrePostStepResponse { return v.PreDeploymentSteps }).(PrePostStepResponseArrayOutput)
}

type StepGroupResponseArrayOutput struct{ *pulumi.OutputState }

func (StepGroupResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StepGroupResponse)(nil)).Elem()
}

func (o StepGroupResponseArrayOutput) ToStepGroupResponseArrayOutput() StepGroupResponseArrayOutput {
	return o
}

func (o StepGroupResponseArrayOutput) ToStepGroupResponseArrayOutputWithContext(ctx context.Context) StepGroupResponseArrayOutput {
	return o
}

func (o StepGroupResponseArrayOutput) Index(i pulumi.IntInput) StepGroupResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StepGroupResponse {
		return vs[0].([]StepGroupResponse)[vs[1].(int)]
	}).(StepGroupResponseOutput)
}

// Detailed information of a specific step run.
type StepOperationInfoResponse struct {
	// Unique identifier to track the request for ARM-based resources.
	CorrelationId string `pulumi:"correlationId"`
	// The name of the ARM deployment initiated as part of the step.
	DeploymentName string `pulumi:"deploymentName"`
	// End time of the action in UTC.
	EndTime string `pulumi:"endTime"`
	// The errors, if any, for the action.
	Error *CloudErrorBodyResponse `pulumi:"error"`
	// Last time in UTC this operation was updated.
	LastUpdatedTime string `pulumi:"lastUpdatedTime"`
	// Start time of the action in UTC.
	StartTime string `pulumi:"startTime"`
}

// The parameters for the wait step.
type WaitStepAttributes struct {
	// The duration in ISO 8601 format of how long the wait should be.
	Duration string `pulumi:"duration"`
}

// The parameters for the wait step.
type WaitStepAttributesResponse struct {
	// The duration in ISO 8601 format of how long the wait should be.
	Duration string `pulumi:"duration"`
}

// Defines the properties of a Wait step.
type WaitStepProperties struct {
	// The Wait attributes
	Attributes WaitStepAttributes `pulumi:"attributes"`
	// The type of step.
	// Expected value is 'Wait'.
	StepType string `pulumi:"stepType"`
}

// Defines the properties of a Wait step.
type WaitStepPropertiesResponse struct {
	// The Wait attributes
	Attributes WaitStepAttributesResponse `pulumi:"attributes"`
	// The type of step.
	// Expected value is 'Wait'.
	StepType string `pulumi:"stepType"`
}

func init() {
	pulumi.RegisterOutputType(IdentityOutput{})
	pulumi.RegisterOutputType(IdentityResponseOutput{})
	pulumi.RegisterOutputType(PrePostStepOutput{})
	pulumi.RegisterOutputType(PrePostStepArrayOutput{})
	pulumi.RegisterOutputType(PrePostStepResponseOutput{})
	pulumi.RegisterOutputType(PrePostStepResponseArrayOutput{})
	pulumi.RegisterOutputType(SasAuthenticationOutput{})
	pulumi.RegisterOutputType(SasAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(ServiceUnitArtifactsOutput{})
	pulumi.RegisterOutputType(ServiceUnitArtifactsPtrOutput{})
	pulumi.RegisterOutputType(ServiceUnitArtifactsResponseOutput{})
	pulumi.RegisterOutputType(ServiceUnitArtifactsResponsePtrOutput{})
	pulumi.RegisterOutputType(StepGroupOutput{})
	pulumi.RegisterOutputType(StepGroupArrayOutput{})
	pulumi.RegisterOutputType(StepGroupResponseOutput{})
	pulumi.RegisterOutputType(StepGroupResponseArrayOutput{})
}
