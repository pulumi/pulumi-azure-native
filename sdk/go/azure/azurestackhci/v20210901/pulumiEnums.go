// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20210901

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CreatedByType string

const (
	CreatedByTypeUser            = CreatedByType("User")
	CreatedByTypeApplication     = CreatedByType("Application")
	CreatedByTypeManagedIdentity = CreatedByType("ManagedIdentity")
	CreatedByTypeKey             = CreatedByType("Key")
)

func (CreatedByType) ElementType() reflect.Type {
	return reflect.TypeOf((*CreatedByType)(nil)).Elem()
}

func (e CreatedByType) ToCreatedByTypeOutput() CreatedByTypeOutput {
	return pulumi.ToOutput(e).(CreatedByTypeOutput)
}

func (e CreatedByType) ToCreatedByTypeOutputWithContext(ctx context.Context) CreatedByTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CreatedByTypeOutput)
}

func (e CreatedByType) ToCreatedByTypePtrOutput() CreatedByTypePtrOutput {
	return e.ToCreatedByTypePtrOutputWithContext(context.Background())
}

func (e CreatedByType) ToCreatedByTypePtrOutputWithContext(ctx context.Context) CreatedByTypePtrOutput {
	return CreatedByType(e).ToCreatedByTypeOutputWithContext(ctx).ToCreatedByTypePtrOutputWithContext(ctx)
}

func (e CreatedByType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CreatedByType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CreatedByType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CreatedByType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CreatedByTypeOutput struct{ *pulumi.OutputState }

func (CreatedByTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreatedByType)(nil)).Elem()
}

func (o CreatedByTypeOutput) ToCreatedByTypeOutput() CreatedByTypeOutput {
	return o
}

func (o CreatedByTypeOutput) ToCreatedByTypeOutputWithContext(ctx context.Context) CreatedByTypeOutput {
	return o
}

func (o CreatedByTypeOutput) ToCreatedByTypePtrOutput() CreatedByTypePtrOutput {
	return o.ToCreatedByTypePtrOutputWithContext(context.Background())
}

func (o CreatedByTypeOutput) ToCreatedByTypePtrOutputWithContext(ctx context.Context) CreatedByTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CreatedByType) *CreatedByType {
		return &v
	}).(CreatedByTypePtrOutput)
}

func (o CreatedByTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CreatedByTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CreatedByType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CreatedByTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CreatedByTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CreatedByType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CreatedByTypePtrOutput struct{ *pulumi.OutputState }

func (CreatedByTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CreatedByType)(nil)).Elem()
}

func (o CreatedByTypePtrOutput) ToCreatedByTypePtrOutput() CreatedByTypePtrOutput {
	return o
}

func (o CreatedByTypePtrOutput) ToCreatedByTypePtrOutputWithContext(ctx context.Context) CreatedByTypePtrOutput {
	return o
}

func (o CreatedByTypePtrOutput) Elem() CreatedByTypeOutput {
	return o.ApplyT(func(v *CreatedByType) CreatedByType {
		if v != nil {
			return *v
		}
		var ret CreatedByType
		return ret
	}).(CreatedByTypeOutput)
}

func (o CreatedByTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CreatedByTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CreatedByType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CreatedByTypeInput is an input type that accepts CreatedByTypeArgs and CreatedByTypeOutput values.
// You can construct a concrete instance of `CreatedByTypeInput` via:
//
//          CreatedByTypeArgs{...}
type CreatedByTypeInput interface {
	pulumi.Input

	ToCreatedByTypeOutput() CreatedByTypeOutput
	ToCreatedByTypeOutputWithContext(context.Context) CreatedByTypeOutput
}

var createdByTypePtrType = reflect.TypeOf((**CreatedByType)(nil)).Elem()

type CreatedByTypePtrInput interface {
	pulumi.Input

	ToCreatedByTypePtrOutput() CreatedByTypePtrOutput
	ToCreatedByTypePtrOutputWithContext(context.Context) CreatedByTypePtrOutput
}

type createdByTypePtr string

func CreatedByTypePtr(v string) CreatedByTypePtrInput {
	return (*createdByTypePtr)(&v)
}

func (*createdByTypePtr) ElementType() reflect.Type {
	return createdByTypePtrType
}

func (in *createdByTypePtr) ToCreatedByTypePtrOutput() CreatedByTypePtrOutput {
	return pulumi.ToOutput(in).(CreatedByTypePtrOutput)
}

func (in *createdByTypePtr) ToCreatedByTypePtrOutputWithContext(ctx context.Context) CreatedByTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CreatedByTypePtrOutput)
}

type DiagnosticLevel string

const (
	DiagnosticLevelOff      = DiagnosticLevel("Off")
	DiagnosticLevelBasic    = DiagnosticLevel("Basic")
	DiagnosticLevelEnhanced = DiagnosticLevel("Enhanced")
)

func (DiagnosticLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticLevel)(nil)).Elem()
}

func (e DiagnosticLevel) ToDiagnosticLevelOutput() DiagnosticLevelOutput {
	return pulumi.ToOutput(e).(DiagnosticLevelOutput)
}

func (e DiagnosticLevel) ToDiagnosticLevelOutputWithContext(ctx context.Context) DiagnosticLevelOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DiagnosticLevelOutput)
}

func (e DiagnosticLevel) ToDiagnosticLevelPtrOutput() DiagnosticLevelPtrOutput {
	return e.ToDiagnosticLevelPtrOutputWithContext(context.Background())
}

func (e DiagnosticLevel) ToDiagnosticLevelPtrOutputWithContext(ctx context.Context) DiagnosticLevelPtrOutput {
	return DiagnosticLevel(e).ToDiagnosticLevelOutputWithContext(ctx).ToDiagnosticLevelPtrOutputWithContext(ctx)
}

func (e DiagnosticLevel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiagnosticLevel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiagnosticLevel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DiagnosticLevel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DiagnosticLevelOutput struct{ *pulumi.OutputState }

func (DiagnosticLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticLevel)(nil)).Elem()
}

func (o DiagnosticLevelOutput) ToDiagnosticLevelOutput() DiagnosticLevelOutput {
	return o
}

func (o DiagnosticLevelOutput) ToDiagnosticLevelOutputWithContext(ctx context.Context) DiagnosticLevelOutput {
	return o
}

func (o DiagnosticLevelOutput) ToDiagnosticLevelPtrOutput() DiagnosticLevelPtrOutput {
	return o.ToDiagnosticLevelPtrOutputWithContext(context.Background())
}

func (o DiagnosticLevelOutput) ToDiagnosticLevelPtrOutputWithContext(ctx context.Context) DiagnosticLevelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiagnosticLevel) *DiagnosticLevel {
		return &v
	}).(DiagnosticLevelPtrOutput)
}

func (o DiagnosticLevelOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DiagnosticLevelOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiagnosticLevel) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DiagnosticLevelOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiagnosticLevelOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiagnosticLevel) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DiagnosticLevelPtrOutput struct{ *pulumi.OutputState }

func (DiagnosticLevelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticLevel)(nil)).Elem()
}

func (o DiagnosticLevelPtrOutput) ToDiagnosticLevelPtrOutput() DiagnosticLevelPtrOutput {
	return o
}

func (o DiagnosticLevelPtrOutput) ToDiagnosticLevelPtrOutputWithContext(ctx context.Context) DiagnosticLevelPtrOutput {
	return o
}

func (o DiagnosticLevelPtrOutput) Elem() DiagnosticLevelOutput {
	return o.ApplyT(func(v *DiagnosticLevel) DiagnosticLevel {
		if v != nil {
			return *v
		}
		var ret DiagnosticLevel
		return ret
	}).(DiagnosticLevelOutput)
}

func (o DiagnosticLevelPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiagnosticLevelPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DiagnosticLevel) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DiagnosticLevelInput is an input type that accepts DiagnosticLevelArgs and DiagnosticLevelOutput values.
// You can construct a concrete instance of `DiagnosticLevelInput` via:
//
//          DiagnosticLevelArgs{...}
type DiagnosticLevelInput interface {
	pulumi.Input

	ToDiagnosticLevelOutput() DiagnosticLevelOutput
	ToDiagnosticLevelOutputWithContext(context.Context) DiagnosticLevelOutput
}

var diagnosticLevelPtrType = reflect.TypeOf((**DiagnosticLevel)(nil)).Elem()

type DiagnosticLevelPtrInput interface {
	pulumi.Input

	ToDiagnosticLevelPtrOutput() DiagnosticLevelPtrOutput
	ToDiagnosticLevelPtrOutputWithContext(context.Context) DiagnosticLevelPtrOutput
}

type diagnosticLevelPtr string

func DiagnosticLevelPtr(v string) DiagnosticLevelPtrInput {
	return (*diagnosticLevelPtr)(&v)
}

func (*diagnosticLevelPtr) ElementType() reflect.Type {
	return diagnosticLevelPtrType
}

func (in *diagnosticLevelPtr) ToDiagnosticLevelPtrOutput() DiagnosticLevelPtrOutput {
	return pulumi.ToOutput(in).(DiagnosticLevelPtrOutput)
}

func (in *diagnosticLevelPtr) ToDiagnosticLevelPtrOutputWithContext(ctx context.Context) DiagnosticLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DiagnosticLevelPtrOutput)
}

type WindowsServerSubscription string

const (
	WindowsServerSubscriptionDisabled = WindowsServerSubscription("Disabled")
	WindowsServerSubscriptionEnabled  = WindowsServerSubscription("Enabled")
)

func (WindowsServerSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsServerSubscription)(nil)).Elem()
}

func (e WindowsServerSubscription) ToWindowsServerSubscriptionOutput() WindowsServerSubscriptionOutput {
	return pulumi.ToOutput(e).(WindowsServerSubscriptionOutput)
}

func (e WindowsServerSubscription) ToWindowsServerSubscriptionOutputWithContext(ctx context.Context) WindowsServerSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(WindowsServerSubscriptionOutput)
}

func (e WindowsServerSubscription) ToWindowsServerSubscriptionPtrOutput() WindowsServerSubscriptionPtrOutput {
	return e.ToWindowsServerSubscriptionPtrOutputWithContext(context.Background())
}

func (e WindowsServerSubscription) ToWindowsServerSubscriptionPtrOutputWithContext(ctx context.Context) WindowsServerSubscriptionPtrOutput {
	return WindowsServerSubscription(e).ToWindowsServerSubscriptionOutputWithContext(ctx).ToWindowsServerSubscriptionPtrOutputWithContext(ctx)
}

func (e WindowsServerSubscription) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WindowsServerSubscription) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WindowsServerSubscription) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WindowsServerSubscription) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type WindowsServerSubscriptionOutput struct{ *pulumi.OutputState }

func (WindowsServerSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsServerSubscription)(nil)).Elem()
}

func (o WindowsServerSubscriptionOutput) ToWindowsServerSubscriptionOutput() WindowsServerSubscriptionOutput {
	return o
}

func (o WindowsServerSubscriptionOutput) ToWindowsServerSubscriptionOutputWithContext(ctx context.Context) WindowsServerSubscriptionOutput {
	return o
}

func (o WindowsServerSubscriptionOutput) ToWindowsServerSubscriptionPtrOutput() WindowsServerSubscriptionPtrOutput {
	return o.ToWindowsServerSubscriptionPtrOutputWithContext(context.Background())
}

func (o WindowsServerSubscriptionOutput) ToWindowsServerSubscriptionPtrOutputWithContext(ctx context.Context) WindowsServerSubscriptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WindowsServerSubscription) *WindowsServerSubscription {
		return &v
	}).(WindowsServerSubscriptionPtrOutput)
}

func (o WindowsServerSubscriptionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o WindowsServerSubscriptionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WindowsServerSubscription) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o WindowsServerSubscriptionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WindowsServerSubscriptionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WindowsServerSubscription) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type WindowsServerSubscriptionPtrOutput struct{ *pulumi.OutputState }

func (WindowsServerSubscriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsServerSubscription)(nil)).Elem()
}

func (o WindowsServerSubscriptionPtrOutput) ToWindowsServerSubscriptionPtrOutput() WindowsServerSubscriptionPtrOutput {
	return o
}

func (o WindowsServerSubscriptionPtrOutput) ToWindowsServerSubscriptionPtrOutputWithContext(ctx context.Context) WindowsServerSubscriptionPtrOutput {
	return o
}

func (o WindowsServerSubscriptionPtrOutput) Elem() WindowsServerSubscriptionOutput {
	return o.ApplyT(func(v *WindowsServerSubscription) WindowsServerSubscription {
		if v != nil {
			return *v
		}
		var ret WindowsServerSubscription
		return ret
	}).(WindowsServerSubscriptionOutput)
}

func (o WindowsServerSubscriptionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WindowsServerSubscriptionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *WindowsServerSubscription) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// WindowsServerSubscriptionInput is an input type that accepts WindowsServerSubscriptionArgs and WindowsServerSubscriptionOutput values.
// You can construct a concrete instance of `WindowsServerSubscriptionInput` via:
//
//          WindowsServerSubscriptionArgs{...}
type WindowsServerSubscriptionInput interface {
	pulumi.Input

	ToWindowsServerSubscriptionOutput() WindowsServerSubscriptionOutput
	ToWindowsServerSubscriptionOutputWithContext(context.Context) WindowsServerSubscriptionOutput
}

var windowsServerSubscriptionPtrType = reflect.TypeOf((**WindowsServerSubscription)(nil)).Elem()

type WindowsServerSubscriptionPtrInput interface {
	pulumi.Input

	ToWindowsServerSubscriptionPtrOutput() WindowsServerSubscriptionPtrOutput
	ToWindowsServerSubscriptionPtrOutputWithContext(context.Context) WindowsServerSubscriptionPtrOutput
}

type windowsServerSubscriptionPtr string

func WindowsServerSubscriptionPtr(v string) WindowsServerSubscriptionPtrInput {
	return (*windowsServerSubscriptionPtr)(&v)
}

func (*windowsServerSubscriptionPtr) ElementType() reflect.Type {
	return windowsServerSubscriptionPtrType
}

func (in *windowsServerSubscriptionPtr) ToWindowsServerSubscriptionPtrOutput() WindowsServerSubscriptionPtrOutput {
	return pulumi.ToOutput(in).(WindowsServerSubscriptionPtrOutput)
}

func (in *windowsServerSubscriptionPtr) ToWindowsServerSubscriptionPtrOutputWithContext(ctx context.Context) WindowsServerSubscriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(WindowsServerSubscriptionPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CreatedByTypeOutput{})
	pulumi.RegisterOutputType(CreatedByTypePtrOutput{})
	pulumi.RegisterOutputType(DiagnosticLevelOutput{})
	pulumi.RegisterOutputType(DiagnosticLevelPtrOutput{})
	pulumi.RegisterOutputType(WindowsServerSubscriptionOutput{})
	pulumi.RegisterOutputType(WindowsServerSubscriptionPtrOutput{})
}
