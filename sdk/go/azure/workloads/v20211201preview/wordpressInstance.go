// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211201preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// WordPress instance resource
type WordpressInstance struct {
	pulumi.CustomResourceState

	// Database name used by the application
	DatabaseName pulumi.StringPtrOutput `pulumi:"databaseName"`
	// User name used by the application to connect to database
	DatabaseUser pulumi.StringPtrOutput `pulumi:"databaseUser"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// WordPress instance provisioning state
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Site Url to access the WordPress application
	SiteUrl pulumi.StringOutput `pulumi:"siteUrl"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// Application version
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewWordpressInstance registers a new resource with the given unique name, arguments, and options.
func NewWordpressInstance(ctx *pulumi.Context,
	name string, args *WordpressInstanceArgs, opts ...pulumi.ResourceOption) (*WordpressInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PhpWorkloadName == nil {
		return nil, errors.New("invalid value for required argument 'PhpWorkloadName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:workloads:WordpressInstance"),
		},
	})
	opts = append(opts, aliases)
	var resource WordpressInstance
	err := ctx.RegisterResource("azure-native:workloads/v20211201preview:WordpressInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWordpressInstance gets an existing WordpressInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWordpressInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WordpressInstanceState, opts ...pulumi.ResourceOption) (*WordpressInstance, error) {
	var resource WordpressInstance
	err := ctx.ReadResource("azure-native:workloads/v20211201preview:WordpressInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WordpressInstance resources.
type wordpressInstanceState struct {
}

type WordpressInstanceState struct {
}

func (WordpressInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*wordpressInstanceState)(nil)).Elem()
}

type wordpressInstanceArgs struct {
	// Database name used by the application
	DatabaseName *string `pulumi:"databaseName"`
	// User name used by the application to connect to database
	DatabaseUser *string `pulumi:"databaseUser"`
	// Php workload name
	PhpWorkloadName string `pulumi:"phpWorkloadName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Application version
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a WordpressInstance resource.
type WordpressInstanceArgs struct {
	// Database name used by the application
	DatabaseName pulumi.StringPtrInput
	// User name used by the application to connect to database
	DatabaseUser pulumi.StringPtrInput
	// Php workload name
	PhpWorkloadName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Application version
	Version pulumi.StringInput
}

func (WordpressInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wordpressInstanceArgs)(nil)).Elem()
}

type WordpressInstanceInput interface {
	pulumi.Input

	ToWordpressInstanceOutput() WordpressInstanceOutput
	ToWordpressInstanceOutputWithContext(ctx context.Context) WordpressInstanceOutput
}

func (*WordpressInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**WordpressInstance)(nil)).Elem()
}

func (i *WordpressInstance) ToWordpressInstanceOutput() WordpressInstanceOutput {
	return i.ToWordpressInstanceOutputWithContext(context.Background())
}

func (i *WordpressInstance) ToWordpressInstanceOutputWithContext(ctx context.Context) WordpressInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WordpressInstanceOutput)
}

type WordpressInstanceOutput struct{ *pulumi.OutputState }

func (WordpressInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WordpressInstance)(nil)).Elem()
}

func (o WordpressInstanceOutput) ToWordpressInstanceOutput() WordpressInstanceOutput {
	return o
}

func (o WordpressInstanceOutput) ToWordpressInstanceOutputWithContext(ctx context.Context) WordpressInstanceOutput {
	return o
}

// Database name used by the application
func (o WordpressInstanceOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WordpressInstance) pulumi.StringPtrOutput { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// User name used by the application to connect to database
func (o WordpressInstanceOutput) DatabaseUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WordpressInstance) pulumi.StringPtrOutput { return v.DatabaseUser }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o WordpressInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WordpressInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// WordPress instance provisioning state
func (o WordpressInstanceOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *WordpressInstance) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Site Url to access the WordPress application
func (o WordpressInstanceOutput) SiteUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *WordpressInstance) pulumi.StringOutput { return v.SiteUrl }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o WordpressInstanceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *WordpressInstance) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o WordpressInstanceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *WordpressInstance) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Application version
func (o WordpressInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *WordpressInstance) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(WordpressInstanceOutput{})
}
