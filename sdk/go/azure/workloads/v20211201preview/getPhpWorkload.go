// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Php workload resource
func LookupPhpWorkload(ctx *pulumi.Context, args *LookupPhpWorkloadArgs, opts ...pulumi.InvokeOption) (*LookupPhpWorkloadResult, error) {
	var rv LookupPhpWorkloadResult
	err := ctx.Invoke("azure-native:workloads/v20211201preview:getPhpWorkload", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPhpWorkloadArgs struct {
	// Php workload name
	PhpWorkloadName string `pulumi:"phpWorkloadName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Php workload resource
type LookupPhpWorkloadResult struct {
	// Admin user profile used for VM and VMSS
	AdminUserProfile UserProfileResponse `pulumi:"adminUserProfile"`
	// The infra resources for PHP workload will be created in this location
	AppLocation string `pulumi:"appLocation"`
	// Backup profile
	BackupProfile *BackupProfileResponse `pulumi:"backupProfile"`
	// Cache profile
	CacheProfile *CacheProfileResponse `pulumi:"cacheProfile"`
	// Controller VM profile
	ControllerProfile NodeProfileResponse `pulumi:"controllerProfile"`
	// Database profile
	DatabaseProfile DatabaseProfileResponse `pulumi:"databaseProfile"`
	// File share profile
	FileshareProfile *FileshareProfileResponse `pulumi:"fileshareProfile"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// Identity for the resource. Currently not supported
	Identity *PhpWorkloadResourceResponseIdentity `pulumi:"identity"`
	// Indicates which kind of php workload this resource represent e.g WordPress
	Kind string `pulumi:"kind"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// Managed resource group configuration of the workload
	ManagedResourceGroupConfiguration *ManagedRGConfigurationResponse `pulumi:"managedResourceGroupConfiguration"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Network profile
	NetworkProfile *NetworkProfileResponse `pulumi:"networkProfile"`
	// PHP profile
	PhpProfile *PhpProfileResponse `pulumi:"phpProfile"`
	// Php workload resource provisioning state
	ProvisioningState string `pulumi:"provisioningState"`
	// Search profile
	SearchProfile *SearchProfileResponse `pulumi:"searchProfile"`
	// Site profile
	SiteProfile *SiteProfileResponse `pulumi:"siteProfile"`
	// Php workloads SKU
	Sku *SkuResponse `pulumi:"sku"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
	// VMSS web nodes profile
	WebNodesProfile VmssNodesProfileResponse `pulumi:"webNodesProfile"`
}

func LookupPhpWorkloadOutput(ctx *pulumi.Context, args LookupPhpWorkloadOutputArgs, opts ...pulumi.InvokeOption) LookupPhpWorkloadResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPhpWorkloadResult, error) {
			args := v.(LookupPhpWorkloadArgs)
			r, err := LookupPhpWorkload(ctx, &args, opts...)
			var s LookupPhpWorkloadResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPhpWorkloadResultOutput)
}

type LookupPhpWorkloadOutputArgs struct {
	// Php workload name
	PhpWorkloadName pulumi.StringInput `pulumi:"phpWorkloadName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupPhpWorkloadOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPhpWorkloadArgs)(nil)).Elem()
}

// Php workload resource
type LookupPhpWorkloadResultOutput struct{ *pulumi.OutputState }

func (LookupPhpWorkloadResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPhpWorkloadResult)(nil)).Elem()
}

func (o LookupPhpWorkloadResultOutput) ToLookupPhpWorkloadResultOutput() LookupPhpWorkloadResultOutput {
	return o
}

func (o LookupPhpWorkloadResultOutput) ToLookupPhpWorkloadResultOutputWithContext(ctx context.Context) LookupPhpWorkloadResultOutput {
	return o
}

// Admin user profile used for VM and VMSS
func (o LookupPhpWorkloadResultOutput) AdminUserProfile() UserProfileResponseOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) UserProfileResponse { return v.AdminUserProfile }).(UserProfileResponseOutput)
}

// The infra resources for PHP workload will be created in this location
func (o LookupPhpWorkloadResultOutput) AppLocation() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) string { return v.AppLocation }).(pulumi.StringOutput)
}

// Backup profile
func (o LookupPhpWorkloadResultOutput) BackupProfile() BackupProfileResponsePtrOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) *BackupProfileResponse { return v.BackupProfile }).(BackupProfileResponsePtrOutput)
}

// Cache profile
func (o LookupPhpWorkloadResultOutput) CacheProfile() CacheProfileResponsePtrOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) *CacheProfileResponse { return v.CacheProfile }).(CacheProfileResponsePtrOutput)
}

// Controller VM profile
func (o LookupPhpWorkloadResultOutput) ControllerProfile() NodeProfileResponseOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) NodeProfileResponse { return v.ControllerProfile }).(NodeProfileResponseOutput)
}

// Database profile
func (o LookupPhpWorkloadResultOutput) DatabaseProfile() DatabaseProfileResponseOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) DatabaseProfileResponse { return v.DatabaseProfile }).(DatabaseProfileResponseOutput)
}

// File share profile
func (o LookupPhpWorkloadResultOutput) FileshareProfile() FileshareProfileResponsePtrOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) *FileshareProfileResponse { return v.FileshareProfile }).(FileshareProfileResponsePtrOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupPhpWorkloadResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) string { return v.Id }).(pulumi.StringOutput)
}

// Identity for the resource. Currently not supported
func (o LookupPhpWorkloadResultOutput) Identity() PhpWorkloadResourceResponseIdentityPtrOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) *PhpWorkloadResourceResponseIdentity { return v.Identity }).(PhpWorkloadResourceResponseIdentityPtrOutput)
}

// Indicates which kind of php workload this resource represent e.g WordPress
func (o LookupPhpWorkloadResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) string { return v.Kind }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o LookupPhpWorkloadResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) string { return v.Location }).(pulumi.StringOutput)
}

// Managed resource group configuration of the workload
func (o LookupPhpWorkloadResultOutput) ManagedResourceGroupConfiguration() ManagedRGConfigurationResponsePtrOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) *ManagedRGConfigurationResponse {
		return v.ManagedResourceGroupConfiguration
	}).(ManagedRGConfigurationResponsePtrOutput)
}

// The name of the resource
func (o LookupPhpWorkloadResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) string { return v.Name }).(pulumi.StringOutput)
}

// Network profile
func (o LookupPhpWorkloadResultOutput) NetworkProfile() NetworkProfileResponsePtrOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) *NetworkProfileResponse { return v.NetworkProfile }).(NetworkProfileResponsePtrOutput)
}

// PHP profile
func (o LookupPhpWorkloadResultOutput) PhpProfile() PhpProfileResponsePtrOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) *PhpProfileResponse { return v.PhpProfile }).(PhpProfileResponsePtrOutput)
}

// Php workload resource provisioning state
func (o LookupPhpWorkloadResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Search profile
func (o LookupPhpWorkloadResultOutput) SearchProfile() SearchProfileResponsePtrOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) *SearchProfileResponse { return v.SearchProfile }).(SearchProfileResponsePtrOutput)
}

// Site profile
func (o LookupPhpWorkloadResultOutput) SiteProfile() SiteProfileResponsePtrOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) *SiteProfileResponse { return v.SiteProfile }).(SiteProfileResponsePtrOutput)
}

// Php workloads SKU
func (o LookupPhpWorkloadResultOutput) Sku() SkuResponsePtrOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) *SkuResponse { return v.Sku }).(SkuResponsePtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupPhpWorkloadResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupPhpWorkloadResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupPhpWorkloadResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) string { return v.Type }).(pulumi.StringOutput)
}

// VMSS web nodes profile
func (o LookupPhpWorkloadResultOutput) WebNodesProfile() VmssNodesProfileResponseOutput {
	return o.ApplyT(func(v LookupPhpWorkloadResult) VmssNodesProfileResponse { return v.WebNodesProfile }).(VmssNodesProfileResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPhpWorkloadResultOutput{})
}
