// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workloads

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SAP monitor info on Azure (ARM properties and SAP monitor properties)
// API Version: 2021-12-01-preview.
func Getmonitor(ctx *pulumi.Context, args *GetmonitorArgs, opts ...pulumi.InvokeOption) (*GetmonitorResult, error) {
	var rv GetmonitorResult
	err := ctx.Invoke("azure-native:workloads:getmonitor", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetmonitorArgs struct {
	// Name of the SAP monitor resource.
	MonitorName string `pulumi:"monitorName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// SAP monitor info on Azure (ARM properties and SAP monitor properties)
type GetmonitorResult struct {
	// The SAP monitor resources will be deployed in the SAP monitoring region. The subnet region should be same as the SAP monitoring region.
	AppLocation *string `pulumi:"appLocation"`
	// Defines the SAP monitor errors.
	Errors MonitorPropertiesResponseErrors `pulumi:"errors"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// Managed service identity (user assigned identities)
	Identity *UserAssignedServiceIdentityResponse `pulumi:"identity"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The ARM ID of the Log Analytics Workspace that is used for SAP monitoring.
	LogAnalyticsWorkspaceArmId *string `pulumi:"logAnalyticsWorkspaceArmId"`
	// Managed resource group configuration
	ManagedResourceGroupConfiguration *ManagedRGConfigurationResponse `pulumi:"managedResourceGroupConfiguration"`
	// The subnet which the SAP monitor will be deployed in
	MonitorSubnet *string `pulumi:"monitorSubnet"`
	// The ARM ID of the MSI used for SAP monitoring.
	MsiArmId string `pulumi:"msiArmId"`
	// The name of the resource
	Name string `pulumi:"name"`
	// State of provisioning of the SAP monitor.
	ProvisioningState string `pulumi:"provisioningState"`
	// Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
	RoutingPreference *string `pulumi:"routingPreference"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
	// Sets the preference for zone redundancy on resources created for the SAP monitor. By default resources will be created which do not support zone redundancy.
	ZoneRedundancyPreference *string `pulumi:"zoneRedundancyPreference"`
}

func GetmonitorOutput(ctx *pulumi.Context, args GetmonitorOutputArgs, opts ...pulumi.InvokeOption) GetmonitorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetmonitorResult, error) {
			args := v.(GetmonitorArgs)
			r, err := Getmonitor(ctx, &args, opts...)
			var s GetmonitorResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetmonitorResultOutput)
}

type GetmonitorOutputArgs struct {
	// Name of the SAP monitor resource.
	MonitorName pulumi.StringInput `pulumi:"monitorName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (GetmonitorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetmonitorArgs)(nil)).Elem()
}

// SAP monitor info on Azure (ARM properties and SAP monitor properties)
type GetmonitorResultOutput struct{ *pulumi.OutputState }

func (GetmonitorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetmonitorResult)(nil)).Elem()
}

func (o GetmonitorResultOutput) ToGetmonitorResultOutput() GetmonitorResultOutput {
	return o
}

func (o GetmonitorResultOutput) ToGetmonitorResultOutputWithContext(ctx context.Context) GetmonitorResultOutput {
	return o
}

// The SAP monitor resources will be deployed in the SAP monitoring region. The subnet region should be same as the SAP monitoring region.
func (o GetmonitorResultOutput) AppLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetmonitorResult) *string { return v.AppLocation }).(pulumi.StringPtrOutput)
}

// Defines the SAP monitor errors.
func (o GetmonitorResultOutput) Errors() MonitorPropertiesResponseErrorsOutput {
	return o.ApplyT(func(v GetmonitorResult) MonitorPropertiesResponseErrors { return v.Errors }).(MonitorPropertiesResponseErrorsOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o GetmonitorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetmonitorResult) string { return v.Id }).(pulumi.StringOutput)
}

// Managed service identity (user assigned identities)
func (o GetmonitorResultOutput) Identity() UserAssignedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v GetmonitorResult) *UserAssignedServiceIdentityResponse { return v.Identity }).(UserAssignedServiceIdentityResponsePtrOutput)
}

// The geo-location where the resource lives
func (o GetmonitorResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetmonitorResult) string { return v.Location }).(pulumi.StringOutput)
}

// The ARM ID of the Log Analytics Workspace that is used for SAP monitoring.
func (o GetmonitorResultOutput) LogAnalyticsWorkspaceArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetmonitorResult) *string { return v.LogAnalyticsWorkspaceArmId }).(pulumi.StringPtrOutput)
}

// Managed resource group configuration
func (o GetmonitorResultOutput) ManagedResourceGroupConfiguration() ManagedRGConfigurationResponsePtrOutput {
	return o.ApplyT(func(v GetmonitorResult) *ManagedRGConfigurationResponse { return v.ManagedResourceGroupConfiguration }).(ManagedRGConfigurationResponsePtrOutput)
}

// The subnet which the SAP monitor will be deployed in
func (o GetmonitorResultOutput) MonitorSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetmonitorResult) *string { return v.MonitorSubnet }).(pulumi.StringPtrOutput)
}

// The ARM ID of the MSI used for SAP monitoring.
func (o GetmonitorResultOutput) MsiArmId() pulumi.StringOutput {
	return o.ApplyT(func(v GetmonitorResult) string { return v.MsiArmId }).(pulumi.StringOutput)
}

// The name of the resource
func (o GetmonitorResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetmonitorResult) string { return v.Name }).(pulumi.StringOutput)
}

// State of provisioning of the SAP monitor.
func (o GetmonitorResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v GetmonitorResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
func (o GetmonitorResultOutput) RoutingPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetmonitorResult) *string { return v.RoutingPreference }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o GetmonitorResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v GetmonitorResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o GetmonitorResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetmonitorResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o GetmonitorResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetmonitorResult) string { return v.Type }).(pulumi.StringOutput)
}

// Sets the preference for zone redundancy on resources created for the SAP monitor. By default resources will be created which do not support zone redundancy.
func (o GetmonitorResultOutput) ZoneRedundancyPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetmonitorResult) *string { return v.ZoneRedundancyPreference }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetmonitorResultOutput{})
}
