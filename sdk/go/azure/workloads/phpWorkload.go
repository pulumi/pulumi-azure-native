// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workloads

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Php workload resource
// API Version: 2021-12-01-preview.
type PhpWorkload struct {
	pulumi.CustomResourceState

	// Admin user profile used for VM and VMSS
	AdminUserProfile UserProfileResponseOutput `pulumi:"adminUserProfile"`
	// The infra resources for PHP workload will be created in this location
	AppLocation pulumi.StringOutput `pulumi:"appLocation"`
	// Backup profile
	BackupProfile BackupProfileResponsePtrOutput `pulumi:"backupProfile"`
	// Cache profile
	CacheProfile CacheProfileResponsePtrOutput `pulumi:"cacheProfile"`
	// Controller VM profile
	ControllerProfile NodeProfileResponseOutput `pulumi:"controllerProfile"`
	// Database profile
	DatabaseProfile DatabaseProfileResponseOutput `pulumi:"databaseProfile"`
	// File share profile
	FileshareProfile FileshareProfileResponsePtrOutput `pulumi:"fileshareProfile"`
	// Identity for the resource. Currently not supported
	Identity PhpWorkloadResourceResponseIdentityPtrOutput `pulumi:"identity"`
	// Indicates which kind of php workload this resource represent e.g WordPress
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// Managed resource group configuration of the workload
	ManagedResourceGroupConfiguration ManagedRGConfigurationResponsePtrOutput `pulumi:"managedResourceGroupConfiguration"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Network profile
	NetworkProfile NetworkProfileResponsePtrOutput `pulumi:"networkProfile"`
	// PHP profile
	PhpProfile PhpProfileResponsePtrOutput `pulumi:"phpProfile"`
	// Php workload resource provisioning state
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Search profile
	SearchProfile SearchProfileResponsePtrOutput `pulumi:"searchProfile"`
	// Site profile
	SiteProfile SiteProfileResponsePtrOutput `pulumi:"siteProfile"`
	// Php workloads SKU
	Sku SkuResponsePtrOutput `pulumi:"sku"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// VMSS web nodes profile
	WebNodesProfile VmssNodesProfileResponseOutput `pulumi:"webNodesProfile"`
}

// NewPhpWorkload registers a new resource with the given unique name, arguments, and options.
func NewPhpWorkload(ctx *pulumi.Context,
	name string, args *PhpWorkloadArgs, opts ...pulumi.ResourceOption) (*PhpWorkload, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminUserProfile == nil {
		return nil, errors.New("invalid value for required argument 'AdminUserProfile'")
	}
	if args.AppLocation == nil {
		return nil, errors.New("invalid value for required argument 'AppLocation'")
	}
	if args.ControllerProfile == nil {
		return nil, errors.New("invalid value for required argument 'ControllerProfile'")
	}
	if args.DatabaseProfile == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseProfile'")
	}
	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.WebNodesProfile == nil {
		return nil, errors.New("invalid value for required argument 'WebNodesProfile'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:workloads/v20211201preview:PhpWorkload"),
		},
	})
	opts = append(opts, aliases)
	var resource PhpWorkload
	err := ctx.RegisterResource("azure-native:workloads:PhpWorkload", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPhpWorkload gets an existing PhpWorkload resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPhpWorkload(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PhpWorkloadState, opts ...pulumi.ResourceOption) (*PhpWorkload, error) {
	var resource PhpWorkload
	err := ctx.ReadResource("azure-native:workloads:PhpWorkload", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PhpWorkload resources.
type phpWorkloadState struct {
}

type PhpWorkloadState struct {
}

func (PhpWorkloadState) ElementType() reflect.Type {
	return reflect.TypeOf((*phpWorkloadState)(nil)).Elem()
}

type phpWorkloadArgs struct {
	// Admin user profile used for VM and VMSS
	AdminUserProfile UserProfile `pulumi:"adminUserProfile"`
	// The infra resources for PHP workload will be created in this location
	AppLocation string `pulumi:"appLocation"`
	// Backup profile
	BackupProfile *BackupProfile `pulumi:"backupProfile"`
	// Cache profile
	CacheProfile *CacheProfile `pulumi:"cacheProfile"`
	// Controller VM profile
	ControllerProfile NodeProfile `pulumi:"controllerProfile"`
	// Database profile
	DatabaseProfile DatabaseProfile `pulumi:"databaseProfile"`
	// File share profile
	FileshareProfile *FileshareProfile `pulumi:"fileshareProfile"`
	// Identity for the resource. Currently not supported
	Identity *PhpWorkloadResourceIdentity `pulumi:"identity"`
	// Indicates which kind of php workload this resource represent e.g WordPress
	Kind string `pulumi:"kind"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Managed resource group configuration of the workload
	ManagedResourceGroupConfiguration *ManagedRGConfiguration `pulumi:"managedResourceGroupConfiguration"`
	// Network profile
	NetworkProfile *NetworkProfile `pulumi:"networkProfile"`
	// PHP profile
	PhpProfile *PhpProfile `pulumi:"phpProfile"`
	// Php workload name
	PhpWorkloadName *string `pulumi:"phpWorkloadName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Search profile
	SearchProfile *SearchProfile `pulumi:"searchProfile"`
	// Site profile
	SiteProfile *SiteProfile `pulumi:"siteProfile"`
	// Php workloads SKU
	Sku *Sku `pulumi:"sku"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// VMSS web nodes profile
	WebNodesProfile VmssNodesProfile `pulumi:"webNodesProfile"`
}

// The set of arguments for constructing a PhpWorkload resource.
type PhpWorkloadArgs struct {
	// Admin user profile used for VM and VMSS
	AdminUserProfile UserProfileInput
	// The infra resources for PHP workload will be created in this location
	AppLocation pulumi.StringInput
	// Backup profile
	BackupProfile BackupProfilePtrInput
	// Cache profile
	CacheProfile CacheProfilePtrInput
	// Controller VM profile
	ControllerProfile NodeProfileInput
	// Database profile
	DatabaseProfile DatabaseProfileInput
	// File share profile
	FileshareProfile FileshareProfilePtrInput
	// Identity for the resource. Currently not supported
	Identity PhpWorkloadResourceIdentityPtrInput
	// Indicates which kind of php workload this resource represent e.g WordPress
	Kind pulumi.StringInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Managed resource group configuration of the workload
	ManagedResourceGroupConfiguration ManagedRGConfigurationPtrInput
	// Network profile
	NetworkProfile NetworkProfilePtrInput
	// PHP profile
	PhpProfile PhpProfilePtrInput
	// Php workload name
	PhpWorkloadName pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Search profile
	SearchProfile SearchProfilePtrInput
	// Site profile
	SiteProfile SiteProfilePtrInput
	// Php workloads SKU
	Sku SkuPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// VMSS web nodes profile
	WebNodesProfile VmssNodesProfileInput
}

func (PhpWorkloadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*phpWorkloadArgs)(nil)).Elem()
}

type PhpWorkloadInput interface {
	pulumi.Input

	ToPhpWorkloadOutput() PhpWorkloadOutput
	ToPhpWorkloadOutputWithContext(ctx context.Context) PhpWorkloadOutput
}

func (*PhpWorkload) ElementType() reflect.Type {
	return reflect.TypeOf((**PhpWorkload)(nil)).Elem()
}

func (i *PhpWorkload) ToPhpWorkloadOutput() PhpWorkloadOutput {
	return i.ToPhpWorkloadOutputWithContext(context.Background())
}

func (i *PhpWorkload) ToPhpWorkloadOutputWithContext(ctx context.Context) PhpWorkloadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhpWorkloadOutput)
}

type PhpWorkloadOutput struct{ *pulumi.OutputState }

func (PhpWorkloadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PhpWorkload)(nil)).Elem()
}

func (o PhpWorkloadOutput) ToPhpWorkloadOutput() PhpWorkloadOutput {
	return o
}

func (o PhpWorkloadOutput) ToPhpWorkloadOutputWithContext(ctx context.Context) PhpWorkloadOutput {
	return o
}

// Admin user profile used for VM and VMSS
func (o PhpWorkloadOutput) AdminUserProfile() UserProfileResponseOutput {
	return o.ApplyT(func(v *PhpWorkload) UserProfileResponseOutput { return v.AdminUserProfile }).(UserProfileResponseOutput)
}

// The infra resources for PHP workload will be created in this location
func (o PhpWorkloadOutput) AppLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *PhpWorkload) pulumi.StringOutput { return v.AppLocation }).(pulumi.StringOutput)
}

// Backup profile
func (o PhpWorkloadOutput) BackupProfile() BackupProfileResponsePtrOutput {
	return o.ApplyT(func(v *PhpWorkload) BackupProfileResponsePtrOutput { return v.BackupProfile }).(BackupProfileResponsePtrOutput)
}

// Cache profile
func (o PhpWorkloadOutput) CacheProfile() CacheProfileResponsePtrOutput {
	return o.ApplyT(func(v *PhpWorkload) CacheProfileResponsePtrOutput { return v.CacheProfile }).(CacheProfileResponsePtrOutput)
}

// Controller VM profile
func (o PhpWorkloadOutput) ControllerProfile() NodeProfileResponseOutput {
	return o.ApplyT(func(v *PhpWorkload) NodeProfileResponseOutput { return v.ControllerProfile }).(NodeProfileResponseOutput)
}

// Database profile
func (o PhpWorkloadOutput) DatabaseProfile() DatabaseProfileResponseOutput {
	return o.ApplyT(func(v *PhpWorkload) DatabaseProfileResponseOutput { return v.DatabaseProfile }).(DatabaseProfileResponseOutput)
}

// File share profile
func (o PhpWorkloadOutput) FileshareProfile() FileshareProfileResponsePtrOutput {
	return o.ApplyT(func(v *PhpWorkload) FileshareProfileResponsePtrOutput { return v.FileshareProfile }).(FileshareProfileResponsePtrOutput)
}

// Identity for the resource. Currently not supported
func (o PhpWorkloadOutput) Identity() PhpWorkloadResourceResponseIdentityPtrOutput {
	return o.ApplyT(func(v *PhpWorkload) PhpWorkloadResourceResponseIdentityPtrOutput { return v.Identity }).(PhpWorkloadResourceResponseIdentityPtrOutput)
}

// Indicates which kind of php workload this resource represent e.g WordPress
func (o PhpWorkloadOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PhpWorkload) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o PhpWorkloadOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *PhpWorkload) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Managed resource group configuration of the workload
func (o PhpWorkloadOutput) ManagedResourceGroupConfiguration() ManagedRGConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *PhpWorkload) ManagedRGConfigurationResponsePtrOutput {
		return v.ManagedResourceGroupConfiguration
	}).(ManagedRGConfigurationResponsePtrOutput)
}

// The name of the resource
func (o PhpWorkloadOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PhpWorkload) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network profile
func (o PhpWorkloadOutput) NetworkProfile() NetworkProfileResponsePtrOutput {
	return o.ApplyT(func(v *PhpWorkload) NetworkProfileResponsePtrOutput { return v.NetworkProfile }).(NetworkProfileResponsePtrOutput)
}

// PHP profile
func (o PhpWorkloadOutput) PhpProfile() PhpProfileResponsePtrOutput {
	return o.ApplyT(func(v *PhpWorkload) PhpProfileResponsePtrOutput { return v.PhpProfile }).(PhpProfileResponsePtrOutput)
}

// Php workload resource provisioning state
func (o PhpWorkloadOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *PhpWorkload) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Search profile
func (o PhpWorkloadOutput) SearchProfile() SearchProfileResponsePtrOutput {
	return o.ApplyT(func(v *PhpWorkload) SearchProfileResponsePtrOutput { return v.SearchProfile }).(SearchProfileResponsePtrOutput)
}

// Site profile
func (o PhpWorkloadOutput) SiteProfile() SiteProfileResponsePtrOutput {
	return o.ApplyT(func(v *PhpWorkload) SiteProfileResponsePtrOutput { return v.SiteProfile }).(SiteProfileResponsePtrOutput)
}

// Php workloads SKU
func (o PhpWorkloadOutput) Sku() SkuResponsePtrOutput {
	return o.ApplyT(func(v *PhpWorkload) SkuResponsePtrOutput { return v.Sku }).(SkuResponsePtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o PhpWorkloadOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *PhpWorkload) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o PhpWorkloadOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PhpWorkload) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PhpWorkloadOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PhpWorkload) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// VMSS web nodes profile
func (o PhpWorkloadOutput) WebNodesProfile() VmssNodesProfileResponseOutput {
	return o.ApplyT(func(v *PhpWorkload) VmssNodesProfileResponseOutput { return v.WebNodesProfile }).(VmssNodesProfileResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(PhpWorkloadOutput{})
}
