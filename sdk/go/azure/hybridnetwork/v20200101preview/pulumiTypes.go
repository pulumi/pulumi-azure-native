// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200101preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The image reference properties.
type ImageReference struct {
	// The OS type.
	OsType *string `pulumi:"osType"`
	// The VHD SAS URI.
	SasUri *string `pulumi:"sasUri"`
	// The VHD name.
	VhdName *string `pulumi:"vhdName"`
	// The VHD type.
	VhdType *string `pulumi:"vhdType"`
}

// ImageReferenceInput is an input type that accepts ImageReferenceArgs and ImageReferenceOutput values.
// You can construct a concrete instance of `ImageReferenceInput` via:
//
//          ImageReferenceArgs{...}
type ImageReferenceInput interface {
	pulumi.Input

	ToImageReferenceOutput() ImageReferenceOutput
	ToImageReferenceOutputWithContext(context.Context) ImageReferenceOutput
}

// The image reference properties.
type ImageReferenceArgs struct {
	// The OS type.
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// The VHD SAS URI.
	SasUri pulumi.StringPtrInput `pulumi:"sasUri"`
	// The VHD name.
	VhdName pulumi.StringPtrInput `pulumi:"vhdName"`
	// The VHD type.
	VhdType pulumi.StringPtrInput `pulumi:"vhdType"`
}

func (ImageReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReference)(nil)).Elem()
}

func (i ImageReferenceArgs) ToImageReferenceOutput() ImageReferenceOutput {
	return i.ToImageReferenceOutputWithContext(context.Background())
}

func (i ImageReferenceArgs) ToImageReferenceOutputWithContext(ctx context.Context) ImageReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceOutput)
}

func (i ImageReferenceArgs) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return i.ToImageReferencePtrOutputWithContext(context.Background())
}

func (i ImageReferenceArgs) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceOutput).ToImageReferencePtrOutputWithContext(ctx)
}

// ImageReferencePtrInput is an input type that accepts ImageReferenceArgs, ImageReferencePtr and ImageReferencePtrOutput values.
// You can construct a concrete instance of `ImageReferencePtrInput` via:
//
//          ImageReferenceArgs{...}
//
//  or:
//
//          nil
type ImageReferencePtrInput interface {
	pulumi.Input

	ToImageReferencePtrOutput() ImageReferencePtrOutput
	ToImageReferencePtrOutputWithContext(context.Context) ImageReferencePtrOutput
}

type imageReferencePtrType ImageReferenceArgs

func ImageReferencePtr(v *ImageReferenceArgs) ImageReferencePtrInput {
	return (*imageReferencePtrType)(v)
}

func (*imageReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReference)(nil)).Elem()
}

func (i *imageReferencePtrType) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return i.ToImageReferencePtrOutputWithContext(context.Background())
}

func (i *imageReferencePtrType) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferencePtrOutput)
}

// The image reference properties.
type ImageReferenceOutput struct{ *pulumi.OutputState }

func (ImageReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReference)(nil)).Elem()
}

func (o ImageReferenceOutput) ToImageReferenceOutput() ImageReferenceOutput {
	return o
}

func (o ImageReferenceOutput) ToImageReferenceOutputWithContext(ctx context.Context) ImageReferenceOutput {
	return o
}

func (o ImageReferenceOutput) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return o.ToImageReferencePtrOutputWithContext(context.Background())
}

func (o ImageReferenceOutput) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return o.ApplyT(func(v ImageReference) *ImageReference {
		return &v
	}).(ImageReferencePtrOutput)
}

// The OS type.
func (o ImageReferenceOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// The VHD SAS URI.
func (o ImageReferenceOutput) SasUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.SasUri }).(pulumi.StringPtrOutput)
}

// The VHD name.
func (o ImageReferenceOutput) VhdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.VhdName }).(pulumi.StringPtrOutput)
}

// The VHD type.
func (o ImageReferenceOutput) VhdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.VhdType }).(pulumi.StringPtrOutput)
}

type ImageReferencePtrOutput struct{ *pulumi.OutputState }

func (ImageReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReference)(nil)).Elem()
}

func (o ImageReferencePtrOutput) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return o
}

func (o ImageReferencePtrOutput) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return o
}

func (o ImageReferencePtrOutput) Elem() ImageReferenceOutput {
	return o.ApplyT(func(v *ImageReference) ImageReference { return *v }).(ImageReferenceOutput)
}

// The OS type.
func (o ImageReferencePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.OsType
	}).(pulumi.StringPtrOutput)
}

// The VHD SAS URI.
func (o ImageReferencePtrOutput) SasUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.SasUri
	}).(pulumi.StringPtrOutput)
}

// The VHD name.
func (o ImageReferencePtrOutput) VhdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.VhdName
	}).(pulumi.StringPtrOutput)
}

// The VHD type.
func (o ImageReferencePtrOutput) VhdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.VhdType
	}).(pulumi.StringPtrOutput)
}

// The image reference properties.
type ImageReferenceResponse struct {
	// The OS type.
	OsType *string `pulumi:"osType"`
	// The VHD SAS URI.
	SasUri *string `pulumi:"sasUri"`
	// The VHD name.
	VhdName *string `pulumi:"vhdName"`
	// The VHD type.
	VhdType *string `pulumi:"vhdType"`
}

// ImageReferenceResponseInput is an input type that accepts ImageReferenceResponseArgs and ImageReferenceResponseOutput values.
// You can construct a concrete instance of `ImageReferenceResponseInput` via:
//
//          ImageReferenceResponseArgs{...}
type ImageReferenceResponseInput interface {
	pulumi.Input

	ToImageReferenceResponseOutput() ImageReferenceResponseOutput
	ToImageReferenceResponseOutputWithContext(context.Context) ImageReferenceResponseOutput
}

// The image reference properties.
type ImageReferenceResponseArgs struct {
	// The OS type.
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// The VHD SAS URI.
	SasUri pulumi.StringPtrInput `pulumi:"sasUri"`
	// The VHD name.
	VhdName pulumi.StringPtrInput `pulumi:"vhdName"`
	// The VHD type.
	VhdType pulumi.StringPtrInput `pulumi:"vhdType"`
}

func (ImageReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReferenceResponse)(nil)).Elem()
}

func (i ImageReferenceResponseArgs) ToImageReferenceResponseOutput() ImageReferenceResponseOutput {
	return i.ToImageReferenceResponseOutputWithContext(context.Background())
}

func (i ImageReferenceResponseArgs) ToImageReferenceResponseOutputWithContext(ctx context.Context) ImageReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceResponseOutput)
}

func (i ImageReferenceResponseArgs) ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput {
	return i.ToImageReferenceResponsePtrOutputWithContext(context.Background())
}

func (i ImageReferenceResponseArgs) ToImageReferenceResponsePtrOutputWithContext(ctx context.Context) ImageReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceResponseOutput).ToImageReferenceResponsePtrOutputWithContext(ctx)
}

// ImageReferenceResponsePtrInput is an input type that accepts ImageReferenceResponseArgs, ImageReferenceResponsePtr and ImageReferenceResponsePtrOutput values.
// You can construct a concrete instance of `ImageReferenceResponsePtrInput` via:
//
//          ImageReferenceResponseArgs{...}
//
//  or:
//
//          nil
type ImageReferenceResponsePtrInput interface {
	pulumi.Input

	ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput
	ToImageReferenceResponsePtrOutputWithContext(context.Context) ImageReferenceResponsePtrOutput
}

type imageReferenceResponsePtrType ImageReferenceResponseArgs

func ImageReferenceResponsePtr(v *ImageReferenceResponseArgs) ImageReferenceResponsePtrInput {
	return (*imageReferenceResponsePtrType)(v)
}

func (*imageReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReferenceResponse)(nil)).Elem()
}

func (i *imageReferenceResponsePtrType) ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput {
	return i.ToImageReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *imageReferenceResponsePtrType) ToImageReferenceResponsePtrOutputWithContext(ctx context.Context) ImageReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceResponsePtrOutput)
}

// The image reference properties.
type ImageReferenceResponseOutput struct{ *pulumi.OutputState }

func (ImageReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReferenceResponse)(nil)).Elem()
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponseOutput() ImageReferenceResponseOutput {
	return o
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponseOutputWithContext(ctx context.Context) ImageReferenceResponseOutput {
	return o
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput {
	return o.ToImageReferenceResponsePtrOutputWithContext(context.Background())
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponsePtrOutputWithContext(ctx context.Context) ImageReferenceResponsePtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *ImageReferenceResponse {
		return &v
	}).(ImageReferenceResponsePtrOutput)
}

// The OS type.
func (o ImageReferenceResponseOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// The VHD SAS URI.
func (o ImageReferenceResponseOutput) SasUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.SasUri }).(pulumi.StringPtrOutput)
}

// The VHD name.
func (o ImageReferenceResponseOutput) VhdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.VhdName }).(pulumi.StringPtrOutput)
}

// The VHD type.
func (o ImageReferenceResponseOutput) VhdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.VhdType }).(pulumi.StringPtrOutput)
}

type ImageReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReferenceResponse)(nil)).Elem()
}

func (o ImageReferenceResponsePtrOutput) ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput {
	return o
}

func (o ImageReferenceResponsePtrOutput) ToImageReferenceResponsePtrOutputWithContext(ctx context.Context) ImageReferenceResponsePtrOutput {
	return o
}

func (o ImageReferenceResponsePtrOutput) Elem() ImageReferenceResponseOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) ImageReferenceResponse { return *v }).(ImageReferenceResponseOutput)
}

// The OS type.
func (o ImageReferenceResponsePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.OsType
	}).(pulumi.StringPtrOutput)
}

// The VHD SAS URI.
func (o ImageReferenceResponsePtrOutput) SasUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SasUri
	}).(pulumi.StringPtrOutput)
}

// The VHD name.
func (o ImageReferenceResponsePtrOutput) VhdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.VhdName
	}).(pulumi.StringPtrOutput)
}

// The VHD type.
func (o ImageReferenceResponsePtrOutput) VhdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.VhdType
	}).(pulumi.StringPtrOutput)
}

// Network interface properties.
type NetworkInterface struct {
	// A list of IP configurations of the network interface.
	IpConfigurations []NetworkInterfaceIPConfiguration `pulumi:"ipConfigurations"`
	// The MAC address of the network interface.
	MacAddress *string `pulumi:"macAddress"`
	// The name of the network interface.
	NetworkInterfaceName *string `pulumi:"networkInterfaceName"`
	// The type of VM switch
	VmSwitchType *string `pulumi:"vmSwitchType"`
}

// NetworkInterfaceInput is an input type that accepts NetworkInterfaceArgs and NetworkInterfaceOutput values.
// You can construct a concrete instance of `NetworkInterfaceInput` via:
//
//          NetworkInterfaceArgs{...}
type NetworkInterfaceInput interface {
	pulumi.Input

	ToNetworkInterfaceOutput() NetworkInterfaceOutput
	ToNetworkInterfaceOutputWithContext(context.Context) NetworkInterfaceOutput
}

// Network interface properties.
type NetworkInterfaceArgs struct {
	// A list of IP configurations of the network interface.
	IpConfigurations NetworkInterfaceIPConfigurationArrayInput `pulumi:"ipConfigurations"`
	// The MAC address of the network interface.
	MacAddress pulumi.StringPtrInput `pulumi:"macAddress"`
	// The name of the network interface.
	NetworkInterfaceName pulumi.StringPtrInput `pulumi:"networkInterfaceName"`
	// The type of VM switch
	VmSwitchType pulumi.StringPtrInput `pulumi:"vmSwitchType"`
}

func (NetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterface)(nil)).Elem()
}

func (i NetworkInterfaceArgs) ToNetworkInterfaceOutput() NetworkInterfaceOutput {
	return i.ToNetworkInterfaceOutputWithContext(context.Background())
}

func (i NetworkInterfaceArgs) ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceOutput)
}

// NetworkInterfaceArrayInput is an input type that accepts NetworkInterfaceArray and NetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `NetworkInterfaceArrayInput` via:
//
//          NetworkInterfaceArray{ NetworkInterfaceArgs{...} }
type NetworkInterfaceArrayInput interface {
	pulumi.Input

	ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput
	ToNetworkInterfaceArrayOutputWithContext(context.Context) NetworkInterfaceArrayOutput
}

type NetworkInterfaceArray []NetworkInterfaceInput

func (NetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterface)(nil)).Elem()
}

func (i NetworkInterfaceArray) ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput {
	return i.ToNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i NetworkInterfaceArray) ToNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceArrayOutput)
}

// Network interface properties.
type NetworkInterfaceOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutput() NetworkInterfaceOutput {
	return o
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput {
	return o
}

// A list of IP configurations of the network interface.
func (o NetworkInterfaceOutput) IpConfigurations() NetworkInterfaceIPConfigurationArrayOutput {
	return o.ApplyT(func(v NetworkInterface) []NetworkInterfaceIPConfiguration { return v.IpConfigurations }).(NetworkInterfaceIPConfigurationArrayOutput)
}

// The MAC address of the network interface.
func (o NetworkInterfaceOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

// The name of the network interface.
func (o NetworkInterfaceOutput) NetworkInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.NetworkInterfaceName }).(pulumi.StringPtrOutput)
}

// The type of VM switch
func (o NetworkInterfaceOutput) VmSwitchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.VmSwitchType }).(pulumi.StringPtrOutput)
}

type NetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterface {
		return vs[0].([]NetworkInterface)[vs[1].(int)]
	}).(NetworkInterfaceOutput)
}

// Network interface IP configuration properties.
type NetworkInterfaceIPConfiguration struct {
	// The list of DNS servers IP addresses.
	DnsServers []string `pulumi:"dnsServers"`
	// The value of the gateway.
	Gateway *string `pulumi:"gateway"`
	// The value of the IP address.
	IpAddress *string `pulumi:"ipAddress"`
	// IP address allocation method.
	IpAllocationMethod *string `pulumi:"ipAllocationMethod"`
	// IP address version.
	IpVersion *string `pulumi:"ipVersion"`
	// The value of the subnet.
	Subnet *string `pulumi:"subnet"`
}

// NetworkInterfaceIPConfigurationInput is an input type that accepts NetworkInterfaceIPConfigurationArgs and NetworkInterfaceIPConfigurationOutput values.
// You can construct a concrete instance of `NetworkInterfaceIPConfigurationInput` via:
//
//          NetworkInterfaceIPConfigurationArgs{...}
type NetworkInterfaceIPConfigurationInput interface {
	pulumi.Input

	ToNetworkInterfaceIPConfigurationOutput() NetworkInterfaceIPConfigurationOutput
	ToNetworkInterfaceIPConfigurationOutputWithContext(context.Context) NetworkInterfaceIPConfigurationOutput
}

// Network interface IP configuration properties.
type NetworkInterfaceIPConfigurationArgs struct {
	// The list of DNS servers IP addresses.
	DnsServers pulumi.StringArrayInput `pulumi:"dnsServers"`
	// The value of the gateway.
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
	// The value of the IP address.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// IP address allocation method.
	IpAllocationMethod pulumi.StringPtrInput `pulumi:"ipAllocationMethod"`
	// IP address version.
	IpVersion pulumi.StringPtrInput `pulumi:"ipVersion"`
	// The value of the subnet.
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
}

func (NetworkInterfaceIPConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceIPConfiguration)(nil)).Elem()
}

func (i NetworkInterfaceIPConfigurationArgs) ToNetworkInterfaceIPConfigurationOutput() NetworkInterfaceIPConfigurationOutput {
	return i.ToNetworkInterfaceIPConfigurationOutputWithContext(context.Background())
}

func (i NetworkInterfaceIPConfigurationArgs) ToNetworkInterfaceIPConfigurationOutputWithContext(ctx context.Context) NetworkInterfaceIPConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceIPConfigurationOutput)
}

// NetworkInterfaceIPConfigurationArrayInput is an input type that accepts NetworkInterfaceIPConfigurationArray and NetworkInterfaceIPConfigurationArrayOutput values.
// You can construct a concrete instance of `NetworkInterfaceIPConfigurationArrayInput` via:
//
//          NetworkInterfaceIPConfigurationArray{ NetworkInterfaceIPConfigurationArgs{...} }
type NetworkInterfaceIPConfigurationArrayInput interface {
	pulumi.Input

	ToNetworkInterfaceIPConfigurationArrayOutput() NetworkInterfaceIPConfigurationArrayOutput
	ToNetworkInterfaceIPConfigurationArrayOutputWithContext(context.Context) NetworkInterfaceIPConfigurationArrayOutput
}

type NetworkInterfaceIPConfigurationArray []NetworkInterfaceIPConfigurationInput

func (NetworkInterfaceIPConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceIPConfiguration)(nil)).Elem()
}

func (i NetworkInterfaceIPConfigurationArray) ToNetworkInterfaceIPConfigurationArrayOutput() NetworkInterfaceIPConfigurationArrayOutput {
	return i.ToNetworkInterfaceIPConfigurationArrayOutputWithContext(context.Background())
}

func (i NetworkInterfaceIPConfigurationArray) ToNetworkInterfaceIPConfigurationArrayOutputWithContext(ctx context.Context) NetworkInterfaceIPConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceIPConfigurationArrayOutput)
}

// Network interface IP configuration properties.
type NetworkInterfaceIPConfigurationOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceIPConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceIPConfiguration)(nil)).Elem()
}

func (o NetworkInterfaceIPConfigurationOutput) ToNetworkInterfaceIPConfigurationOutput() NetworkInterfaceIPConfigurationOutput {
	return o
}

func (o NetworkInterfaceIPConfigurationOutput) ToNetworkInterfaceIPConfigurationOutputWithContext(ctx context.Context) NetworkInterfaceIPConfigurationOutput {
	return o
}

// The list of DNS servers IP addresses.
func (o NetworkInterfaceIPConfigurationOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkInterfaceIPConfiguration) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// The value of the gateway.
func (o NetworkInterfaceIPConfigurationOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceIPConfiguration) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

// The value of the IP address.
func (o NetworkInterfaceIPConfigurationOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceIPConfiguration) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// IP address allocation method.
func (o NetworkInterfaceIPConfigurationOutput) IpAllocationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceIPConfiguration) *string { return v.IpAllocationMethod }).(pulumi.StringPtrOutput)
}

// IP address version.
func (o NetworkInterfaceIPConfigurationOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceIPConfiguration) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

// The value of the subnet.
func (o NetworkInterfaceIPConfigurationOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceIPConfiguration) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

type NetworkInterfaceIPConfigurationArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceIPConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceIPConfiguration)(nil)).Elem()
}

func (o NetworkInterfaceIPConfigurationArrayOutput) ToNetworkInterfaceIPConfigurationArrayOutput() NetworkInterfaceIPConfigurationArrayOutput {
	return o
}

func (o NetworkInterfaceIPConfigurationArrayOutput) ToNetworkInterfaceIPConfigurationArrayOutputWithContext(ctx context.Context) NetworkInterfaceIPConfigurationArrayOutput {
	return o
}

func (o NetworkInterfaceIPConfigurationArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceIPConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterfaceIPConfiguration {
		return vs[0].([]NetworkInterfaceIPConfiguration)[vs[1].(int)]
	}).(NetworkInterfaceIPConfigurationOutput)
}

// Network interface IP configuration properties.
type NetworkInterfaceIPConfigurationResponse struct {
	// The list of DNS servers IP addresses.
	DnsServers []string `pulumi:"dnsServers"`
	// The value of the gateway.
	Gateway *string `pulumi:"gateway"`
	// The value of the IP address.
	IpAddress *string `pulumi:"ipAddress"`
	// IP address allocation method.
	IpAllocationMethod *string `pulumi:"ipAllocationMethod"`
	// IP address version.
	IpVersion *string `pulumi:"ipVersion"`
	// The value of the subnet.
	Subnet *string `pulumi:"subnet"`
}

// NetworkInterfaceIPConfigurationResponseInput is an input type that accepts NetworkInterfaceIPConfigurationResponseArgs and NetworkInterfaceIPConfigurationResponseOutput values.
// You can construct a concrete instance of `NetworkInterfaceIPConfigurationResponseInput` via:
//
//          NetworkInterfaceIPConfigurationResponseArgs{...}
type NetworkInterfaceIPConfigurationResponseInput interface {
	pulumi.Input

	ToNetworkInterfaceIPConfigurationResponseOutput() NetworkInterfaceIPConfigurationResponseOutput
	ToNetworkInterfaceIPConfigurationResponseOutputWithContext(context.Context) NetworkInterfaceIPConfigurationResponseOutput
}

// Network interface IP configuration properties.
type NetworkInterfaceIPConfigurationResponseArgs struct {
	// The list of DNS servers IP addresses.
	DnsServers pulumi.StringArrayInput `pulumi:"dnsServers"`
	// The value of the gateway.
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
	// The value of the IP address.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// IP address allocation method.
	IpAllocationMethod pulumi.StringPtrInput `pulumi:"ipAllocationMethod"`
	// IP address version.
	IpVersion pulumi.StringPtrInput `pulumi:"ipVersion"`
	// The value of the subnet.
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
}

func (NetworkInterfaceIPConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceIPConfigurationResponse)(nil)).Elem()
}

func (i NetworkInterfaceIPConfigurationResponseArgs) ToNetworkInterfaceIPConfigurationResponseOutput() NetworkInterfaceIPConfigurationResponseOutput {
	return i.ToNetworkInterfaceIPConfigurationResponseOutputWithContext(context.Background())
}

func (i NetworkInterfaceIPConfigurationResponseArgs) ToNetworkInterfaceIPConfigurationResponseOutputWithContext(ctx context.Context) NetworkInterfaceIPConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceIPConfigurationResponseOutput)
}

// NetworkInterfaceIPConfigurationResponseArrayInput is an input type that accepts NetworkInterfaceIPConfigurationResponseArray and NetworkInterfaceIPConfigurationResponseArrayOutput values.
// You can construct a concrete instance of `NetworkInterfaceIPConfigurationResponseArrayInput` via:
//
//          NetworkInterfaceIPConfigurationResponseArray{ NetworkInterfaceIPConfigurationResponseArgs{...} }
type NetworkInterfaceIPConfigurationResponseArrayInput interface {
	pulumi.Input

	ToNetworkInterfaceIPConfigurationResponseArrayOutput() NetworkInterfaceIPConfigurationResponseArrayOutput
	ToNetworkInterfaceIPConfigurationResponseArrayOutputWithContext(context.Context) NetworkInterfaceIPConfigurationResponseArrayOutput
}

type NetworkInterfaceIPConfigurationResponseArray []NetworkInterfaceIPConfigurationResponseInput

func (NetworkInterfaceIPConfigurationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceIPConfigurationResponse)(nil)).Elem()
}

func (i NetworkInterfaceIPConfigurationResponseArray) ToNetworkInterfaceIPConfigurationResponseArrayOutput() NetworkInterfaceIPConfigurationResponseArrayOutput {
	return i.ToNetworkInterfaceIPConfigurationResponseArrayOutputWithContext(context.Background())
}

func (i NetworkInterfaceIPConfigurationResponseArray) ToNetworkInterfaceIPConfigurationResponseArrayOutputWithContext(ctx context.Context) NetworkInterfaceIPConfigurationResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceIPConfigurationResponseArrayOutput)
}

// Network interface IP configuration properties.
type NetworkInterfaceIPConfigurationResponseOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceIPConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceIPConfigurationResponse)(nil)).Elem()
}

func (o NetworkInterfaceIPConfigurationResponseOutput) ToNetworkInterfaceIPConfigurationResponseOutput() NetworkInterfaceIPConfigurationResponseOutput {
	return o
}

func (o NetworkInterfaceIPConfigurationResponseOutput) ToNetworkInterfaceIPConfigurationResponseOutputWithContext(ctx context.Context) NetworkInterfaceIPConfigurationResponseOutput {
	return o
}

// The list of DNS servers IP addresses.
func (o NetworkInterfaceIPConfigurationResponseOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkInterfaceIPConfigurationResponse) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// The value of the gateway.
func (o NetworkInterfaceIPConfigurationResponseOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceIPConfigurationResponse) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

// The value of the IP address.
func (o NetworkInterfaceIPConfigurationResponseOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceIPConfigurationResponse) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// IP address allocation method.
func (o NetworkInterfaceIPConfigurationResponseOutput) IpAllocationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceIPConfigurationResponse) *string { return v.IpAllocationMethod }).(pulumi.StringPtrOutput)
}

// IP address version.
func (o NetworkInterfaceIPConfigurationResponseOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceIPConfigurationResponse) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

// The value of the subnet.
func (o NetworkInterfaceIPConfigurationResponseOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceIPConfigurationResponse) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

type NetworkInterfaceIPConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceIPConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceIPConfigurationResponse)(nil)).Elem()
}

func (o NetworkInterfaceIPConfigurationResponseArrayOutput) ToNetworkInterfaceIPConfigurationResponseArrayOutput() NetworkInterfaceIPConfigurationResponseArrayOutput {
	return o
}

func (o NetworkInterfaceIPConfigurationResponseArrayOutput) ToNetworkInterfaceIPConfigurationResponseArrayOutputWithContext(ctx context.Context) NetworkInterfaceIPConfigurationResponseArrayOutput {
	return o
}

func (o NetworkInterfaceIPConfigurationResponseArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceIPConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterfaceIPConfigurationResponse {
		return vs[0].([]NetworkInterfaceIPConfigurationResponse)[vs[1].(int)]
	}).(NetworkInterfaceIPConfigurationResponseOutput)
}

// Network interface properties.
type NetworkInterfaceResponse struct {
	// A list of IP configurations of the network interface.
	IpConfigurations []NetworkInterfaceIPConfigurationResponse `pulumi:"ipConfigurations"`
	// The MAC address of the network interface.
	MacAddress *string `pulumi:"macAddress"`
	// The name of the network interface.
	NetworkInterfaceName *string `pulumi:"networkInterfaceName"`
	// The type of VM switch
	VmSwitchType *string `pulumi:"vmSwitchType"`
}

// NetworkInterfaceResponseInput is an input type that accepts NetworkInterfaceResponseArgs and NetworkInterfaceResponseOutput values.
// You can construct a concrete instance of `NetworkInterfaceResponseInput` via:
//
//          NetworkInterfaceResponseArgs{...}
type NetworkInterfaceResponseInput interface {
	pulumi.Input

	ToNetworkInterfaceResponseOutput() NetworkInterfaceResponseOutput
	ToNetworkInterfaceResponseOutputWithContext(context.Context) NetworkInterfaceResponseOutput
}

// Network interface properties.
type NetworkInterfaceResponseArgs struct {
	// A list of IP configurations of the network interface.
	IpConfigurations NetworkInterfaceIPConfigurationResponseArrayInput `pulumi:"ipConfigurations"`
	// The MAC address of the network interface.
	MacAddress pulumi.StringPtrInput `pulumi:"macAddress"`
	// The name of the network interface.
	NetworkInterfaceName pulumi.StringPtrInput `pulumi:"networkInterfaceName"`
	// The type of VM switch
	VmSwitchType pulumi.StringPtrInput `pulumi:"vmSwitchType"`
}

func (NetworkInterfaceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceResponse)(nil)).Elem()
}

func (i NetworkInterfaceResponseArgs) ToNetworkInterfaceResponseOutput() NetworkInterfaceResponseOutput {
	return i.ToNetworkInterfaceResponseOutputWithContext(context.Background())
}

func (i NetworkInterfaceResponseArgs) ToNetworkInterfaceResponseOutputWithContext(ctx context.Context) NetworkInterfaceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceResponseOutput)
}

// NetworkInterfaceResponseArrayInput is an input type that accepts NetworkInterfaceResponseArray and NetworkInterfaceResponseArrayOutput values.
// You can construct a concrete instance of `NetworkInterfaceResponseArrayInput` via:
//
//          NetworkInterfaceResponseArray{ NetworkInterfaceResponseArgs{...} }
type NetworkInterfaceResponseArrayInput interface {
	pulumi.Input

	ToNetworkInterfaceResponseArrayOutput() NetworkInterfaceResponseArrayOutput
	ToNetworkInterfaceResponseArrayOutputWithContext(context.Context) NetworkInterfaceResponseArrayOutput
}

type NetworkInterfaceResponseArray []NetworkInterfaceResponseInput

func (NetworkInterfaceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceResponse)(nil)).Elem()
}

func (i NetworkInterfaceResponseArray) ToNetworkInterfaceResponseArrayOutput() NetworkInterfaceResponseArrayOutput {
	return i.ToNetworkInterfaceResponseArrayOutputWithContext(context.Background())
}

func (i NetworkInterfaceResponseArray) ToNetworkInterfaceResponseArrayOutputWithContext(ctx context.Context) NetworkInterfaceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceResponseArrayOutput)
}

// Network interface properties.
type NetworkInterfaceResponseOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceResponse)(nil)).Elem()
}

func (o NetworkInterfaceResponseOutput) ToNetworkInterfaceResponseOutput() NetworkInterfaceResponseOutput {
	return o
}

func (o NetworkInterfaceResponseOutput) ToNetworkInterfaceResponseOutputWithContext(ctx context.Context) NetworkInterfaceResponseOutput {
	return o
}

// A list of IP configurations of the network interface.
func (o NetworkInterfaceResponseOutput) IpConfigurations() NetworkInterfaceIPConfigurationResponseArrayOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) []NetworkInterfaceIPConfigurationResponse { return v.IpConfigurations }).(NetworkInterfaceIPConfigurationResponseArrayOutput)
}

// The MAC address of the network interface.
func (o NetworkInterfaceResponseOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

// The name of the network interface.
func (o NetworkInterfaceResponseOutput) NetworkInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) *string { return v.NetworkInterfaceName }).(pulumi.StringPtrOutput)
}

// The type of VM switch
func (o NetworkInterfaceResponseOutput) VmSwitchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) *string { return v.VmSwitchType }).(pulumi.StringPtrOutput)
}

type NetworkInterfaceResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceResponse)(nil)).Elem()
}

func (o NetworkInterfaceResponseArrayOutput) ToNetworkInterfaceResponseArrayOutput() NetworkInterfaceResponseArrayOutput {
	return o
}

func (o NetworkInterfaceResponseArrayOutput) ToNetworkInterfaceResponseArrayOutputWithContext(ctx context.Context) NetworkInterfaceResponseArrayOutput {
	return o
}

func (o NetworkInterfaceResponseArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterfaceResponse {
		return vs[0].([]NetworkInterfaceResponse)[vs[1].(int)]
	}).(NetworkInterfaceResponseOutput)
}

// Specifies the operating system settings for the role instance.
type OsProfile struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password).
	AdminPassword *string `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
	AdminUsername *string `pulumi:"adminUsername"`
	// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
	SshPublicKey *string `pulumi:"sshPublicKey"`
}

// OsProfileInput is an input type that accepts OsProfileArgs and OsProfileOutput values.
// You can construct a concrete instance of `OsProfileInput` via:
//
//          OsProfileArgs{...}
type OsProfileInput interface {
	pulumi.Input

	ToOsProfileOutput() OsProfileOutput
	ToOsProfileOutputWithContext(context.Context) OsProfileOutput
}

// Specifies the operating system settings for the role instance.
type OsProfileArgs struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password).
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
	AdminUsername pulumi.StringPtrInput `pulumi:"adminUsername"`
	// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
	SshPublicKey pulumi.StringPtrInput `pulumi:"sshPublicKey"`
}

func (OsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OsProfile)(nil)).Elem()
}

func (i OsProfileArgs) ToOsProfileOutput() OsProfileOutput {
	return i.ToOsProfileOutputWithContext(context.Background())
}

func (i OsProfileArgs) ToOsProfileOutputWithContext(ctx context.Context) OsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsProfileOutput)
}

func (i OsProfileArgs) ToOsProfilePtrOutput() OsProfilePtrOutput {
	return i.ToOsProfilePtrOutputWithContext(context.Background())
}

func (i OsProfileArgs) ToOsProfilePtrOutputWithContext(ctx context.Context) OsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsProfileOutput).ToOsProfilePtrOutputWithContext(ctx)
}

// OsProfilePtrInput is an input type that accepts OsProfileArgs, OsProfilePtr and OsProfilePtrOutput values.
// You can construct a concrete instance of `OsProfilePtrInput` via:
//
//          OsProfileArgs{...}
//
//  or:
//
//          nil
type OsProfilePtrInput interface {
	pulumi.Input

	ToOsProfilePtrOutput() OsProfilePtrOutput
	ToOsProfilePtrOutputWithContext(context.Context) OsProfilePtrOutput
}

type osProfilePtrType OsProfileArgs

func OsProfilePtr(v *OsProfileArgs) OsProfilePtrInput {
	return (*osProfilePtrType)(v)
}

func (*osProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OsProfile)(nil)).Elem()
}

func (i *osProfilePtrType) ToOsProfilePtrOutput() OsProfilePtrOutput {
	return i.ToOsProfilePtrOutputWithContext(context.Background())
}

func (i *osProfilePtrType) ToOsProfilePtrOutputWithContext(ctx context.Context) OsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsProfilePtrOutput)
}

// Specifies the operating system settings for the role instance.
type OsProfileOutput struct{ *pulumi.OutputState }

func (OsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OsProfile)(nil)).Elem()
}

func (o OsProfileOutput) ToOsProfileOutput() OsProfileOutput {
	return o
}

func (o OsProfileOutput) ToOsProfileOutputWithContext(ctx context.Context) OsProfileOutput {
	return o
}

func (o OsProfileOutput) ToOsProfilePtrOutput() OsProfilePtrOutput {
	return o.ToOsProfilePtrOutputWithContext(context.Background())
}

func (o OsProfileOutput) ToOsProfilePtrOutputWithContext(ctx context.Context) OsProfilePtrOutput {
	return o.ApplyT(func(v OsProfile) *OsProfile {
		return &v
	}).(OsProfilePtrOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password).
func (o OsProfileOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsProfile) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
func (o OsProfileOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsProfile) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
func (o OsProfileOutput) SshPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsProfile) *string { return v.SshPublicKey }).(pulumi.StringPtrOutput)
}

type OsProfilePtrOutput struct{ *pulumi.OutputState }

func (OsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OsProfile)(nil)).Elem()
}

func (o OsProfilePtrOutput) ToOsProfilePtrOutput() OsProfilePtrOutput {
	return o
}

func (o OsProfilePtrOutput) ToOsProfilePtrOutputWithContext(ctx context.Context) OsProfilePtrOutput {
	return o
}

func (o OsProfilePtrOutput) Elem() OsProfileOutput {
	return o.ApplyT(func(v *OsProfile) OsProfile { return *v }).(OsProfileOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password).
func (o OsProfilePtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsProfile) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
func (o OsProfilePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsProfile) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
func (o OsProfilePtrOutput) SshPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsProfile) *string {
		if v == nil {
			return nil
		}
		return v.SshPublicKey
	}).(pulumi.StringPtrOutput)
}

// Specifies the operating system settings for the role instance.
type OsProfileResponse struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password).
	AdminPassword *string `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
	AdminUsername *string `pulumi:"adminUsername"`
	// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
	SshPublicKey *string `pulumi:"sshPublicKey"`
}

// OsProfileResponseInput is an input type that accepts OsProfileResponseArgs and OsProfileResponseOutput values.
// You can construct a concrete instance of `OsProfileResponseInput` via:
//
//          OsProfileResponseArgs{...}
type OsProfileResponseInput interface {
	pulumi.Input

	ToOsProfileResponseOutput() OsProfileResponseOutput
	ToOsProfileResponseOutputWithContext(context.Context) OsProfileResponseOutput
}

// Specifies the operating system settings for the role instance.
type OsProfileResponseArgs struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password).
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
	AdminUsername pulumi.StringPtrInput `pulumi:"adminUsername"`
	// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
	SshPublicKey pulumi.StringPtrInput `pulumi:"sshPublicKey"`
}

func (OsProfileResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OsProfileResponse)(nil)).Elem()
}

func (i OsProfileResponseArgs) ToOsProfileResponseOutput() OsProfileResponseOutput {
	return i.ToOsProfileResponseOutputWithContext(context.Background())
}

func (i OsProfileResponseArgs) ToOsProfileResponseOutputWithContext(ctx context.Context) OsProfileResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsProfileResponseOutput)
}

func (i OsProfileResponseArgs) ToOsProfileResponsePtrOutput() OsProfileResponsePtrOutput {
	return i.ToOsProfileResponsePtrOutputWithContext(context.Background())
}

func (i OsProfileResponseArgs) ToOsProfileResponsePtrOutputWithContext(ctx context.Context) OsProfileResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsProfileResponseOutput).ToOsProfileResponsePtrOutputWithContext(ctx)
}

// OsProfileResponsePtrInput is an input type that accepts OsProfileResponseArgs, OsProfileResponsePtr and OsProfileResponsePtrOutput values.
// You can construct a concrete instance of `OsProfileResponsePtrInput` via:
//
//          OsProfileResponseArgs{...}
//
//  or:
//
//          nil
type OsProfileResponsePtrInput interface {
	pulumi.Input

	ToOsProfileResponsePtrOutput() OsProfileResponsePtrOutput
	ToOsProfileResponsePtrOutputWithContext(context.Context) OsProfileResponsePtrOutput
}

type osProfileResponsePtrType OsProfileResponseArgs

func OsProfileResponsePtr(v *OsProfileResponseArgs) OsProfileResponsePtrInput {
	return (*osProfileResponsePtrType)(v)
}

func (*osProfileResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OsProfileResponse)(nil)).Elem()
}

func (i *osProfileResponsePtrType) ToOsProfileResponsePtrOutput() OsProfileResponsePtrOutput {
	return i.ToOsProfileResponsePtrOutputWithContext(context.Background())
}

func (i *osProfileResponsePtrType) ToOsProfileResponsePtrOutputWithContext(ctx context.Context) OsProfileResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsProfileResponsePtrOutput)
}

// Specifies the operating system settings for the role instance.
type OsProfileResponseOutput struct{ *pulumi.OutputState }

func (OsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OsProfileResponse)(nil)).Elem()
}

func (o OsProfileResponseOutput) ToOsProfileResponseOutput() OsProfileResponseOutput {
	return o
}

func (o OsProfileResponseOutput) ToOsProfileResponseOutputWithContext(ctx context.Context) OsProfileResponseOutput {
	return o
}

func (o OsProfileResponseOutput) ToOsProfileResponsePtrOutput() OsProfileResponsePtrOutput {
	return o.ToOsProfileResponsePtrOutputWithContext(context.Background())
}

func (o OsProfileResponseOutput) ToOsProfileResponsePtrOutputWithContext(ctx context.Context) OsProfileResponsePtrOutput {
	return o.ApplyT(func(v OsProfileResponse) *OsProfileResponse {
		return &v
	}).(OsProfileResponsePtrOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password).
func (o OsProfileResponseOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsProfileResponse) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
func (o OsProfileResponseOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsProfileResponse) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
func (o OsProfileResponseOutput) SshPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsProfileResponse) *string { return v.SshPublicKey }).(pulumi.StringPtrOutput)
}

type OsProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (OsProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OsProfileResponse)(nil)).Elem()
}

func (o OsProfileResponsePtrOutput) ToOsProfileResponsePtrOutput() OsProfileResponsePtrOutput {
	return o
}

func (o OsProfileResponsePtrOutput) ToOsProfileResponsePtrOutputWithContext(ctx context.Context) OsProfileResponsePtrOutput {
	return o
}

func (o OsProfileResponsePtrOutput) Elem() OsProfileResponseOutput {
	return o.ApplyT(func(v *OsProfileResponse) OsProfileResponse { return *v }).(OsProfileResponseOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password).
func (o OsProfileResponsePtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
func (o OsProfileResponsePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
func (o OsProfileResponsePtrOutput) SshPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.SshPublicKey
	}).(pulumi.StringPtrOutput)
}

// Reference to another sub resource.
type SubResource struct {
	// Resource ID.
	Id *string `pulumi:"id"`
}

// SubResourceInput is an input type that accepts SubResourceArgs and SubResourceOutput values.
// You can construct a concrete instance of `SubResourceInput` via:
//
//          SubResourceArgs{...}
type SubResourceInput interface {
	pulumi.Input

	ToSubResourceOutput() SubResourceOutput
	ToSubResourceOutputWithContext(context.Context) SubResourceOutput
}

// Reference to another sub resource.
type SubResourceArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (i SubResourceArgs) ToSubResourceOutput() SubResourceOutput {
	return i.ToSubResourceOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput)
}

func (i SubResourceArgs) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput).ToSubResourcePtrOutputWithContext(ctx)
}

// SubResourcePtrInput is an input type that accepts SubResourceArgs, SubResourcePtr and SubResourcePtrOutput values.
// You can construct a concrete instance of `SubResourcePtrInput` via:
//
//          SubResourceArgs{...}
//
//  or:
//
//          nil
type SubResourcePtrInput interface {
	pulumi.Input

	ToSubResourcePtrOutput() SubResourcePtrOutput
	ToSubResourcePtrOutputWithContext(context.Context) SubResourcePtrOutput
}

type subResourcePtrType SubResourceArgs

func SubResourcePtr(v *SubResourceArgs) SubResourcePtrInput {
	return (*subResourcePtrType)(v)
}

func (*subResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (i *subResourcePtrType) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i *subResourcePtrType) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourcePtrOutput)
}

// Reference to another sub resource.
type SubResourceOutput struct{ *pulumi.OutputState }

func (SubResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (o SubResourceOutput) ToSubResourceOutput() SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o.ToSubResourcePtrOutputWithContext(context.Background())
}

func (o SubResourceOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o.ApplyT(func(v SubResource) *SubResource {
		return &v
	}).(SubResourcePtrOutput)
}

// Resource ID.
func (o SubResourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourcePtrOutput struct{ *pulumi.OutputState }

func (SubResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) Elem() SubResourceOutput {
	return o.ApplyT(func(v *SubResource) SubResource { return *v }).(SubResourceOutput)
}

// Resource ID.
func (o SubResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResource) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Reference to another sub resource.
type SubResourceResponse struct {
	// Resource ID.
	Id *string `pulumi:"id"`
}

// SubResourceResponseInput is an input type that accepts SubResourceResponseArgs and SubResourceResponseOutput values.
// You can construct a concrete instance of `SubResourceResponseInput` via:
//
//          SubResourceResponseArgs{...}
type SubResourceResponseInput interface {
	pulumi.Input

	ToSubResourceResponseOutput() SubResourceResponseOutput
	ToSubResourceResponseOutputWithContext(context.Context) SubResourceResponseOutput
}

// Reference to another sub resource.
type SubResourceResponseArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubResourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceResponse)(nil)).Elem()
}

func (i SubResourceResponseArgs) ToSubResourceResponseOutput() SubResourceResponseOutput {
	return i.ToSubResourceResponseOutputWithContext(context.Background())
}

func (i SubResourceResponseArgs) ToSubResourceResponseOutputWithContext(ctx context.Context) SubResourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponseOutput)
}

func (i SubResourceResponseArgs) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return i.ToSubResourceResponsePtrOutputWithContext(context.Background())
}

func (i SubResourceResponseArgs) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponseOutput).ToSubResourceResponsePtrOutputWithContext(ctx)
}

// SubResourceResponsePtrInput is an input type that accepts SubResourceResponseArgs, SubResourceResponsePtr and SubResourceResponsePtrOutput values.
// You can construct a concrete instance of `SubResourceResponsePtrInput` via:
//
//          SubResourceResponseArgs{...}
//
//  or:
//
//          nil
type SubResourceResponsePtrInput interface {
	pulumi.Input

	ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput
	ToSubResourceResponsePtrOutputWithContext(context.Context) SubResourceResponsePtrOutput
}

type subResourceResponsePtrType SubResourceResponseArgs

func SubResourceResponsePtr(v *SubResourceResponseArgs) SubResourceResponsePtrInput {
	return (*subResourceResponsePtrType)(v)
}

func (*subResourceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResourceResponse)(nil)).Elem()
}

func (i *subResourceResponsePtrType) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return i.ToSubResourceResponsePtrOutputWithContext(context.Background())
}

func (i *subResourceResponsePtrType) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponsePtrOutput)
}

// SubResourceResponseArrayInput is an input type that accepts SubResourceResponseArray and SubResourceResponseArrayOutput values.
// You can construct a concrete instance of `SubResourceResponseArrayInput` via:
//
//          SubResourceResponseArray{ SubResourceResponseArgs{...} }
type SubResourceResponseArrayInput interface {
	pulumi.Input

	ToSubResourceResponseArrayOutput() SubResourceResponseArrayOutput
	ToSubResourceResponseArrayOutputWithContext(context.Context) SubResourceResponseArrayOutput
}

type SubResourceResponseArray []SubResourceResponseInput

func (SubResourceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResourceResponse)(nil)).Elem()
}

func (i SubResourceResponseArray) ToSubResourceResponseArrayOutput() SubResourceResponseArrayOutput {
	return i.ToSubResourceResponseArrayOutputWithContext(context.Background())
}

func (i SubResourceResponseArray) ToSubResourceResponseArrayOutputWithContext(ctx context.Context) SubResourceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponseArrayOutput)
}

// Reference to another sub resource.
type SubResourceResponseOutput struct{ *pulumi.OutputState }

func (SubResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutput() SubResourceResponseOutput {
	return o
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutputWithContext(ctx context.Context) SubResourceResponseOutput {
	return o
}

func (o SubResourceResponseOutput) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return o.ToSubResourceResponsePtrOutputWithContext(context.Background())
}

func (o SubResourceResponseOutput) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return o.ApplyT(func(v SubResourceResponse) *SubResourceResponse {
		return &v
	}).(SubResourceResponsePtrOutput)
}

// Resource ID.
func (o SubResourceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResourceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (SubResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) Elem() SubResourceResponseOutput {
	return o.ApplyT(func(v *SubResourceResponse) SubResourceResponse { return *v }).(SubResourceResponseOutput)
}

// Resource ID.
func (o SubResourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type SubResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (SubResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponseArrayOutput) ToSubResourceResponseArrayOutput() SubResourceResponseArrayOutput {
	return o
}

func (o SubResourceResponseArrayOutput) ToSubResourceResponseArrayOutputWithContext(ctx context.Context) SubResourceResponseArrayOutput {
	return o
}

func (o SubResourceResponseArrayOutput) Index(i pulumi.IntInput) SubResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubResourceResponse {
		return vs[0].([]SubResourceResponse)[vs[1].(int)]
	}).(SubResourceResponseOutput)
}

// Virtual network function role configuration.
type VirtualNetworkFunctionRoleConfiguration struct {
	// The definition of image reference.
	ImageReference *ImageReference `pulumi:"imageReference"`
	// The network interface configurations.
	NetworkInterfaces []NetworkInterface `pulumi:"networkInterfaces"`
	// Specifies the operating system settings for the role instance. This value can be updated during the deployment of virtual network function.
	OsProfile *OsProfile `pulumi:"osProfile"`
	// The name of the virtual network function role.
	RoleName *string `pulumi:"roleName"`
	// Role type.
	RoleType *string `pulumi:"roleType"`
	// The user parameters for customers. The format of user data parameters has to be matched with the provided user data template.
	UserDataParameters map[string]interface{} `pulumi:"userDataParameters"`
	// The user data template for customers. This is json scheme template describing the format and data type of user data parameters.
	UserDataTemplate map[string]interface{} `pulumi:"userDataTemplate"`
	// The size of the virtual machine.
	VirtualMachineSize *string `pulumi:"virtualMachineSize"`
}

// VirtualNetworkFunctionRoleConfigurationInput is an input type that accepts VirtualNetworkFunctionRoleConfigurationArgs and VirtualNetworkFunctionRoleConfigurationOutput values.
// You can construct a concrete instance of `VirtualNetworkFunctionRoleConfigurationInput` via:
//
//          VirtualNetworkFunctionRoleConfigurationArgs{...}
type VirtualNetworkFunctionRoleConfigurationInput interface {
	pulumi.Input

	ToVirtualNetworkFunctionRoleConfigurationOutput() VirtualNetworkFunctionRoleConfigurationOutput
	ToVirtualNetworkFunctionRoleConfigurationOutputWithContext(context.Context) VirtualNetworkFunctionRoleConfigurationOutput
}

// Virtual network function role configuration.
type VirtualNetworkFunctionRoleConfigurationArgs struct {
	// The definition of image reference.
	ImageReference ImageReferencePtrInput `pulumi:"imageReference"`
	// The network interface configurations.
	NetworkInterfaces NetworkInterfaceArrayInput `pulumi:"networkInterfaces"`
	// Specifies the operating system settings for the role instance. This value can be updated during the deployment of virtual network function.
	OsProfile OsProfilePtrInput `pulumi:"osProfile"`
	// The name of the virtual network function role.
	RoleName pulumi.StringPtrInput `pulumi:"roleName"`
	// Role type.
	RoleType pulumi.StringPtrInput `pulumi:"roleType"`
	// The user parameters for customers. The format of user data parameters has to be matched with the provided user data template.
	UserDataParameters pulumi.MapInput `pulumi:"userDataParameters"`
	// The user data template for customers. This is json scheme template describing the format and data type of user data parameters.
	UserDataTemplate pulumi.MapInput `pulumi:"userDataTemplate"`
	// The size of the virtual machine.
	VirtualMachineSize pulumi.StringPtrInput `pulumi:"virtualMachineSize"`
}

func (VirtualNetworkFunctionRoleConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkFunctionRoleConfiguration)(nil)).Elem()
}

func (i VirtualNetworkFunctionRoleConfigurationArgs) ToVirtualNetworkFunctionRoleConfigurationOutput() VirtualNetworkFunctionRoleConfigurationOutput {
	return i.ToVirtualNetworkFunctionRoleConfigurationOutputWithContext(context.Background())
}

func (i VirtualNetworkFunctionRoleConfigurationArgs) ToVirtualNetworkFunctionRoleConfigurationOutputWithContext(ctx context.Context) VirtualNetworkFunctionRoleConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkFunctionRoleConfigurationOutput)
}

// VirtualNetworkFunctionRoleConfigurationArrayInput is an input type that accepts VirtualNetworkFunctionRoleConfigurationArray and VirtualNetworkFunctionRoleConfigurationArrayOutput values.
// You can construct a concrete instance of `VirtualNetworkFunctionRoleConfigurationArrayInput` via:
//
//          VirtualNetworkFunctionRoleConfigurationArray{ VirtualNetworkFunctionRoleConfigurationArgs{...} }
type VirtualNetworkFunctionRoleConfigurationArrayInput interface {
	pulumi.Input

	ToVirtualNetworkFunctionRoleConfigurationArrayOutput() VirtualNetworkFunctionRoleConfigurationArrayOutput
	ToVirtualNetworkFunctionRoleConfigurationArrayOutputWithContext(context.Context) VirtualNetworkFunctionRoleConfigurationArrayOutput
}

type VirtualNetworkFunctionRoleConfigurationArray []VirtualNetworkFunctionRoleConfigurationInput

func (VirtualNetworkFunctionRoleConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkFunctionRoleConfiguration)(nil)).Elem()
}

func (i VirtualNetworkFunctionRoleConfigurationArray) ToVirtualNetworkFunctionRoleConfigurationArrayOutput() VirtualNetworkFunctionRoleConfigurationArrayOutput {
	return i.ToVirtualNetworkFunctionRoleConfigurationArrayOutputWithContext(context.Background())
}

func (i VirtualNetworkFunctionRoleConfigurationArray) ToVirtualNetworkFunctionRoleConfigurationArrayOutputWithContext(ctx context.Context) VirtualNetworkFunctionRoleConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkFunctionRoleConfigurationArrayOutput)
}

// Virtual network function role configuration.
type VirtualNetworkFunctionRoleConfigurationOutput struct{ *pulumi.OutputState }

func (VirtualNetworkFunctionRoleConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkFunctionRoleConfiguration)(nil)).Elem()
}

func (o VirtualNetworkFunctionRoleConfigurationOutput) ToVirtualNetworkFunctionRoleConfigurationOutput() VirtualNetworkFunctionRoleConfigurationOutput {
	return o
}

func (o VirtualNetworkFunctionRoleConfigurationOutput) ToVirtualNetworkFunctionRoleConfigurationOutputWithContext(ctx context.Context) VirtualNetworkFunctionRoleConfigurationOutput {
	return o
}

// The definition of image reference.
func (o VirtualNetworkFunctionRoleConfigurationOutput) ImageReference() ImageReferencePtrOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionRoleConfiguration) *ImageReference { return v.ImageReference }).(ImageReferencePtrOutput)
}

// The network interface configurations.
func (o VirtualNetworkFunctionRoleConfigurationOutput) NetworkInterfaces() NetworkInterfaceArrayOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionRoleConfiguration) []NetworkInterface { return v.NetworkInterfaces }).(NetworkInterfaceArrayOutput)
}

// Specifies the operating system settings for the role instance. This value can be updated during the deployment of virtual network function.
func (o VirtualNetworkFunctionRoleConfigurationOutput) OsProfile() OsProfilePtrOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionRoleConfiguration) *OsProfile { return v.OsProfile }).(OsProfilePtrOutput)
}

// The name of the virtual network function role.
func (o VirtualNetworkFunctionRoleConfigurationOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionRoleConfiguration) *string { return v.RoleName }).(pulumi.StringPtrOutput)
}

// Role type.
func (o VirtualNetworkFunctionRoleConfigurationOutput) RoleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionRoleConfiguration) *string { return v.RoleType }).(pulumi.StringPtrOutput)
}

// The user parameters for customers. The format of user data parameters has to be matched with the provided user data template.
func (o VirtualNetworkFunctionRoleConfigurationOutput) UserDataParameters() pulumi.MapOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionRoleConfiguration) map[string]interface{} { return v.UserDataParameters }).(pulumi.MapOutput)
}

// The user data template for customers. This is json scheme template describing the format and data type of user data parameters.
func (o VirtualNetworkFunctionRoleConfigurationOutput) UserDataTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionRoleConfiguration) map[string]interface{} { return v.UserDataTemplate }).(pulumi.MapOutput)
}

// The size of the virtual machine.
func (o VirtualNetworkFunctionRoleConfigurationOutput) VirtualMachineSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionRoleConfiguration) *string { return v.VirtualMachineSize }).(pulumi.StringPtrOutput)
}

type VirtualNetworkFunctionRoleConfigurationArrayOutput struct{ *pulumi.OutputState }

func (VirtualNetworkFunctionRoleConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkFunctionRoleConfiguration)(nil)).Elem()
}

func (o VirtualNetworkFunctionRoleConfigurationArrayOutput) ToVirtualNetworkFunctionRoleConfigurationArrayOutput() VirtualNetworkFunctionRoleConfigurationArrayOutput {
	return o
}

func (o VirtualNetworkFunctionRoleConfigurationArrayOutput) ToVirtualNetworkFunctionRoleConfigurationArrayOutputWithContext(ctx context.Context) VirtualNetworkFunctionRoleConfigurationArrayOutput {
	return o
}

func (o VirtualNetworkFunctionRoleConfigurationArrayOutput) Index(i pulumi.IntInput) VirtualNetworkFunctionRoleConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualNetworkFunctionRoleConfiguration {
		return vs[0].([]VirtualNetworkFunctionRoleConfiguration)[vs[1].(int)]
	}).(VirtualNetworkFunctionRoleConfigurationOutput)
}

// Virtual network function role configuration.
type VirtualNetworkFunctionRoleConfigurationResponse struct {
	// The definition of image reference.
	ImageReference *ImageReferenceResponse `pulumi:"imageReference"`
	// The network interface configurations.
	NetworkInterfaces []NetworkInterfaceResponse `pulumi:"networkInterfaces"`
	// Specifies the operating system settings for the role instance. This value can be updated during the deployment of virtual network function.
	OsProfile *OsProfileResponse `pulumi:"osProfile"`
	// The name of the virtual network function role.
	RoleName *string `pulumi:"roleName"`
	// Role type.
	RoleType *string `pulumi:"roleType"`
	// The user parameters for customers. The format of user data parameters has to be matched with the provided user data template.
	UserDataParameters map[string]interface{} `pulumi:"userDataParameters"`
	// The user data template for customers. This is json scheme template describing the format and data type of user data parameters.
	UserDataTemplate map[string]interface{} `pulumi:"userDataTemplate"`
	// The size of the virtual machine.
	VirtualMachineSize *string `pulumi:"virtualMachineSize"`
}

// VirtualNetworkFunctionRoleConfigurationResponseInput is an input type that accepts VirtualNetworkFunctionRoleConfigurationResponseArgs and VirtualNetworkFunctionRoleConfigurationResponseOutput values.
// You can construct a concrete instance of `VirtualNetworkFunctionRoleConfigurationResponseInput` via:
//
//          VirtualNetworkFunctionRoleConfigurationResponseArgs{...}
type VirtualNetworkFunctionRoleConfigurationResponseInput interface {
	pulumi.Input

	ToVirtualNetworkFunctionRoleConfigurationResponseOutput() VirtualNetworkFunctionRoleConfigurationResponseOutput
	ToVirtualNetworkFunctionRoleConfigurationResponseOutputWithContext(context.Context) VirtualNetworkFunctionRoleConfigurationResponseOutput
}

// Virtual network function role configuration.
type VirtualNetworkFunctionRoleConfigurationResponseArgs struct {
	// The definition of image reference.
	ImageReference ImageReferenceResponsePtrInput `pulumi:"imageReference"`
	// The network interface configurations.
	NetworkInterfaces NetworkInterfaceResponseArrayInput `pulumi:"networkInterfaces"`
	// Specifies the operating system settings for the role instance. This value can be updated during the deployment of virtual network function.
	OsProfile OsProfileResponsePtrInput `pulumi:"osProfile"`
	// The name of the virtual network function role.
	RoleName pulumi.StringPtrInput `pulumi:"roleName"`
	// Role type.
	RoleType pulumi.StringPtrInput `pulumi:"roleType"`
	// The user parameters for customers. The format of user data parameters has to be matched with the provided user data template.
	UserDataParameters pulumi.MapInput `pulumi:"userDataParameters"`
	// The user data template for customers. This is json scheme template describing the format and data type of user data parameters.
	UserDataTemplate pulumi.MapInput `pulumi:"userDataTemplate"`
	// The size of the virtual machine.
	VirtualMachineSize pulumi.StringPtrInput `pulumi:"virtualMachineSize"`
}

func (VirtualNetworkFunctionRoleConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkFunctionRoleConfigurationResponse)(nil)).Elem()
}

func (i VirtualNetworkFunctionRoleConfigurationResponseArgs) ToVirtualNetworkFunctionRoleConfigurationResponseOutput() VirtualNetworkFunctionRoleConfigurationResponseOutput {
	return i.ToVirtualNetworkFunctionRoleConfigurationResponseOutputWithContext(context.Background())
}

func (i VirtualNetworkFunctionRoleConfigurationResponseArgs) ToVirtualNetworkFunctionRoleConfigurationResponseOutputWithContext(ctx context.Context) VirtualNetworkFunctionRoleConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkFunctionRoleConfigurationResponseOutput)
}

// VirtualNetworkFunctionRoleConfigurationResponseArrayInput is an input type that accepts VirtualNetworkFunctionRoleConfigurationResponseArray and VirtualNetworkFunctionRoleConfigurationResponseArrayOutput values.
// You can construct a concrete instance of `VirtualNetworkFunctionRoleConfigurationResponseArrayInput` via:
//
//          VirtualNetworkFunctionRoleConfigurationResponseArray{ VirtualNetworkFunctionRoleConfigurationResponseArgs{...} }
type VirtualNetworkFunctionRoleConfigurationResponseArrayInput interface {
	pulumi.Input

	ToVirtualNetworkFunctionRoleConfigurationResponseArrayOutput() VirtualNetworkFunctionRoleConfigurationResponseArrayOutput
	ToVirtualNetworkFunctionRoleConfigurationResponseArrayOutputWithContext(context.Context) VirtualNetworkFunctionRoleConfigurationResponseArrayOutput
}

type VirtualNetworkFunctionRoleConfigurationResponseArray []VirtualNetworkFunctionRoleConfigurationResponseInput

func (VirtualNetworkFunctionRoleConfigurationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkFunctionRoleConfigurationResponse)(nil)).Elem()
}

func (i VirtualNetworkFunctionRoleConfigurationResponseArray) ToVirtualNetworkFunctionRoleConfigurationResponseArrayOutput() VirtualNetworkFunctionRoleConfigurationResponseArrayOutput {
	return i.ToVirtualNetworkFunctionRoleConfigurationResponseArrayOutputWithContext(context.Background())
}

func (i VirtualNetworkFunctionRoleConfigurationResponseArray) ToVirtualNetworkFunctionRoleConfigurationResponseArrayOutputWithContext(ctx context.Context) VirtualNetworkFunctionRoleConfigurationResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkFunctionRoleConfigurationResponseArrayOutput)
}

// Virtual network function role configuration.
type VirtualNetworkFunctionRoleConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualNetworkFunctionRoleConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkFunctionRoleConfigurationResponse)(nil)).Elem()
}

func (o VirtualNetworkFunctionRoleConfigurationResponseOutput) ToVirtualNetworkFunctionRoleConfigurationResponseOutput() VirtualNetworkFunctionRoleConfigurationResponseOutput {
	return o
}

func (o VirtualNetworkFunctionRoleConfigurationResponseOutput) ToVirtualNetworkFunctionRoleConfigurationResponseOutputWithContext(ctx context.Context) VirtualNetworkFunctionRoleConfigurationResponseOutput {
	return o
}

// The definition of image reference.
func (o VirtualNetworkFunctionRoleConfigurationResponseOutput) ImageReference() ImageReferenceResponsePtrOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionRoleConfigurationResponse) *ImageReferenceResponse {
		return v.ImageReference
	}).(ImageReferenceResponsePtrOutput)
}

// The network interface configurations.
func (o VirtualNetworkFunctionRoleConfigurationResponseOutput) NetworkInterfaces() NetworkInterfaceResponseArrayOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionRoleConfigurationResponse) []NetworkInterfaceResponse {
		return v.NetworkInterfaces
	}).(NetworkInterfaceResponseArrayOutput)
}

// Specifies the operating system settings for the role instance. This value can be updated during the deployment of virtual network function.
func (o VirtualNetworkFunctionRoleConfigurationResponseOutput) OsProfile() OsProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionRoleConfigurationResponse) *OsProfileResponse { return v.OsProfile }).(OsProfileResponsePtrOutput)
}

// The name of the virtual network function role.
func (o VirtualNetworkFunctionRoleConfigurationResponseOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionRoleConfigurationResponse) *string { return v.RoleName }).(pulumi.StringPtrOutput)
}

// Role type.
func (o VirtualNetworkFunctionRoleConfigurationResponseOutput) RoleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionRoleConfigurationResponse) *string { return v.RoleType }).(pulumi.StringPtrOutput)
}

// The user parameters for customers. The format of user data parameters has to be matched with the provided user data template.
func (o VirtualNetworkFunctionRoleConfigurationResponseOutput) UserDataParameters() pulumi.MapOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionRoleConfigurationResponse) map[string]interface{} {
		return v.UserDataParameters
	}).(pulumi.MapOutput)
}

// The user data template for customers. This is json scheme template describing the format and data type of user data parameters.
func (o VirtualNetworkFunctionRoleConfigurationResponseOutput) UserDataTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionRoleConfigurationResponse) map[string]interface{} {
		return v.UserDataTemplate
	}).(pulumi.MapOutput)
}

// The size of the virtual machine.
func (o VirtualNetworkFunctionRoleConfigurationResponseOutput) VirtualMachineSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionRoleConfigurationResponse) *string { return v.VirtualMachineSize }).(pulumi.StringPtrOutput)
}

type VirtualNetworkFunctionRoleConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualNetworkFunctionRoleConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkFunctionRoleConfigurationResponse)(nil)).Elem()
}

func (o VirtualNetworkFunctionRoleConfigurationResponseArrayOutput) ToVirtualNetworkFunctionRoleConfigurationResponseArrayOutput() VirtualNetworkFunctionRoleConfigurationResponseArrayOutput {
	return o
}

func (o VirtualNetworkFunctionRoleConfigurationResponseArrayOutput) ToVirtualNetworkFunctionRoleConfigurationResponseArrayOutputWithContext(ctx context.Context) VirtualNetworkFunctionRoleConfigurationResponseArrayOutput {
	return o
}

func (o VirtualNetworkFunctionRoleConfigurationResponseArrayOutput) Index(i pulumi.IntInput) VirtualNetworkFunctionRoleConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualNetworkFunctionRoleConfigurationResponse {
		return vs[0].([]VirtualNetworkFunctionRoleConfigurationResponse)[vs[1].(int)]
	}).(VirtualNetworkFunctionRoleConfigurationResponseOutput)
}

// The virtual network function template.
type VirtualNetworkFunctionTemplate struct {
	// An array of virtual network function role definitions.
	VirutalNetworkFunctionRoleConfigurations []VirtualNetworkFunctionRoleConfiguration `pulumi:"virutalNetworkFunctionRoleConfigurations"`
}

// VirtualNetworkFunctionTemplateInput is an input type that accepts VirtualNetworkFunctionTemplateArgs and VirtualNetworkFunctionTemplateOutput values.
// You can construct a concrete instance of `VirtualNetworkFunctionTemplateInput` via:
//
//          VirtualNetworkFunctionTemplateArgs{...}
type VirtualNetworkFunctionTemplateInput interface {
	pulumi.Input

	ToVirtualNetworkFunctionTemplateOutput() VirtualNetworkFunctionTemplateOutput
	ToVirtualNetworkFunctionTemplateOutputWithContext(context.Context) VirtualNetworkFunctionTemplateOutput
}

// The virtual network function template.
type VirtualNetworkFunctionTemplateArgs struct {
	// An array of virtual network function role definitions.
	VirutalNetworkFunctionRoleConfigurations VirtualNetworkFunctionRoleConfigurationArrayInput `pulumi:"virutalNetworkFunctionRoleConfigurations"`
}

func (VirtualNetworkFunctionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkFunctionTemplate)(nil)).Elem()
}

func (i VirtualNetworkFunctionTemplateArgs) ToVirtualNetworkFunctionTemplateOutput() VirtualNetworkFunctionTemplateOutput {
	return i.ToVirtualNetworkFunctionTemplateOutputWithContext(context.Background())
}

func (i VirtualNetworkFunctionTemplateArgs) ToVirtualNetworkFunctionTemplateOutputWithContext(ctx context.Context) VirtualNetworkFunctionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkFunctionTemplateOutput)
}

func (i VirtualNetworkFunctionTemplateArgs) ToVirtualNetworkFunctionTemplatePtrOutput() VirtualNetworkFunctionTemplatePtrOutput {
	return i.ToVirtualNetworkFunctionTemplatePtrOutputWithContext(context.Background())
}

func (i VirtualNetworkFunctionTemplateArgs) ToVirtualNetworkFunctionTemplatePtrOutputWithContext(ctx context.Context) VirtualNetworkFunctionTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkFunctionTemplateOutput).ToVirtualNetworkFunctionTemplatePtrOutputWithContext(ctx)
}

// VirtualNetworkFunctionTemplatePtrInput is an input type that accepts VirtualNetworkFunctionTemplateArgs, VirtualNetworkFunctionTemplatePtr and VirtualNetworkFunctionTemplatePtrOutput values.
// You can construct a concrete instance of `VirtualNetworkFunctionTemplatePtrInput` via:
//
//          VirtualNetworkFunctionTemplateArgs{...}
//
//  or:
//
//          nil
type VirtualNetworkFunctionTemplatePtrInput interface {
	pulumi.Input

	ToVirtualNetworkFunctionTemplatePtrOutput() VirtualNetworkFunctionTemplatePtrOutput
	ToVirtualNetworkFunctionTemplatePtrOutputWithContext(context.Context) VirtualNetworkFunctionTemplatePtrOutput
}

type virtualNetworkFunctionTemplatePtrType VirtualNetworkFunctionTemplateArgs

func VirtualNetworkFunctionTemplatePtr(v *VirtualNetworkFunctionTemplateArgs) VirtualNetworkFunctionTemplatePtrInput {
	return (*virtualNetworkFunctionTemplatePtrType)(v)
}

func (*virtualNetworkFunctionTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkFunctionTemplate)(nil)).Elem()
}

func (i *virtualNetworkFunctionTemplatePtrType) ToVirtualNetworkFunctionTemplatePtrOutput() VirtualNetworkFunctionTemplatePtrOutput {
	return i.ToVirtualNetworkFunctionTemplatePtrOutputWithContext(context.Background())
}

func (i *virtualNetworkFunctionTemplatePtrType) ToVirtualNetworkFunctionTemplatePtrOutputWithContext(ctx context.Context) VirtualNetworkFunctionTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkFunctionTemplatePtrOutput)
}

// The virtual network function template.
type VirtualNetworkFunctionTemplateOutput struct{ *pulumi.OutputState }

func (VirtualNetworkFunctionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkFunctionTemplate)(nil)).Elem()
}

func (o VirtualNetworkFunctionTemplateOutput) ToVirtualNetworkFunctionTemplateOutput() VirtualNetworkFunctionTemplateOutput {
	return o
}

func (o VirtualNetworkFunctionTemplateOutput) ToVirtualNetworkFunctionTemplateOutputWithContext(ctx context.Context) VirtualNetworkFunctionTemplateOutput {
	return o
}

func (o VirtualNetworkFunctionTemplateOutput) ToVirtualNetworkFunctionTemplatePtrOutput() VirtualNetworkFunctionTemplatePtrOutput {
	return o.ToVirtualNetworkFunctionTemplatePtrOutputWithContext(context.Background())
}

func (o VirtualNetworkFunctionTemplateOutput) ToVirtualNetworkFunctionTemplatePtrOutputWithContext(ctx context.Context) VirtualNetworkFunctionTemplatePtrOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionTemplate) *VirtualNetworkFunctionTemplate {
		return &v
	}).(VirtualNetworkFunctionTemplatePtrOutput)
}

// An array of virtual network function role definitions.
func (o VirtualNetworkFunctionTemplateOutput) VirutalNetworkFunctionRoleConfigurations() VirtualNetworkFunctionRoleConfigurationArrayOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionTemplate) []VirtualNetworkFunctionRoleConfiguration {
		return v.VirutalNetworkFunctionRoleConfigurations
	}).(VirtualNetworkFunctionRoleConfigurationArrayOutput)
}

type VirtualNetworkFunctionTemplatePtrOutput struct{ *pulumi.OutputState }

func (VirtualNetworkFunctionTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkFunctionTemplate)(nil)).Elem()
}

func (o VirtualNetworkFunctionTemplatePtrOutput) ToVirtualNetworkFunctionTemplatePtrOutput() VirtualNetworkFunctionTemplatePtrOutput {
	return o
}

func (o VirtualNetworkFunctionTemplatePtrOutput) ToVirtualNetworkFunctionTemplatePtrOutputWithContext(ctx context.Context) VirtualNetworkFunctionTemplatePtrOutput {
	return o
}

func (o VirtualNetworkFunctionTemplatePtrOutput) Elem() VirtualNetworkFunctionTemplateOutput {
	return o.ApplyT(func(v *VirtualNetworkFunctionTemplate) VirtualNetworkFunctionTemplate { return *v }).(VirtualNetworkFunctionTemplateOutput)
}

// An array of virtual network function role definitions.
func (o VirtualNetworkFunctionTemplatePtrOutput) VirutalNetworkFunctionRoleConfigurations() VirtualNetworkFunctionRoleConfigurationArrayOutput {
	return o.ApplyT(func(v *VirtualNetworkFunctionTemplate) []VirtualNetworkFunctionRoleConfiguration {
		if v == nil {
			return nil
		}
		return v.VirutalNetworkFunctionRoleConfigurations
	}).(VirtualNetworkFunctionRoleConfigurationArrayOutput)
}

// The virtual network function template.
type VirtualNetworkFunctionTemplateResponse struct {
	// An array of virtual network function role definitions.
	VirutalNetworkFunctionRoleConfigurations []VirtualNetworkFunctionRoleConfigurationResponse `pulumi:"virutalNetworkFunctionRoleConfigurations"`
}

// VirtualNetworkFunctionTemplateResponseInput is an input type that accepts VirtualNetworkFunctionTemplateResponseArgs and VirtualNetworkFunctionTemplateResponseOutput values.
// You can construct a concrete instance of `VirtualNetworkFunctionTemplateResponseInput` via:
//
//          VirtualNetworkFunctionTemplateResponseArgs{...}
type VirtualNetworkFunctionTemplateResponseInput interface {
	pulumi.Input

	ToVirtualNetworkFunctionTemplateResponseOutput() VirtualNetworkFunctionTemplateResponseOutput
	ToVirtualNetworkFunctionTemplateResponseOutputWithContext(context.Context) VirtualNetworkFunctionTemplateResponseOutput
}

// The virtual network function template.
type VirtualNetworkFunctionTemplateResponseArgs struct {
	// An array of virtual network function role definitions.
	VirutalNetworkFunctionRoleConfigurations VirtualNetworkFunctionRoleConfigurationResponseArrayInput `pulumi:"virutalNetworkFunctionRoleConfigurations"`
}

func (VirtualNetworkFunctionTemplateResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkFunctionTemplateResponse)(nil)).Elem()
}

func (i VirtualNetworkFunctionTemplateResponseArgs) ToVirtualNetworkFunctionTemplateResponseOutput() VirtualNetworkFunctionTemplateResponseOutput {
	return i.ToVirtualNetworkFunctionTemplateResponseOutputWithContext(context.Background())
}

func (i VirtualNetworkFunctionTemplateResponseArgs) ToVirtualNetworkFunctionTemplateResponseOutputWithContext(ctx context.Context) VirtualNetworkFunctionTemplateResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkFunctionTemplateResponseOutput)
}

func (i VirtualNetworkFunctionTemplateResponseArgs) ToVirtualNetworkFunctionTemplateResponsePtrOutput() VirtualNetworkFunctionTemplateResponsePtrOutput {
	return i.ToVirtualNetworkFunctionTemplateResponsePtrOutputWithContext(context.Background())
}

func (i VirtualNetworkFunctionTemplateResponseArgs) ToVirtualNetworkFunctionTemplateResponsePtrOutputWithContext(ctx context.Context) VirtualNetworkFunctionTemplateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkFunctionTemplateResponseOutput).ToVirtualNetworkFunctionTemplateResponsePtrOutputWithContext(ctx)
}

// VirtualNetworkFunctionTemplateResponsePtrInput is an input type that accepts VirtualNetworkFunctionTemplateResponseArgs, VirtualNetworkFunctionTemplateResponsePtr and VirtualNetworkFunctionTemplateResponsePtrOutput values.
// You can construct a concrete instance of `VirtualNetworkFunctionTemplateResponsePtrInput` via:
//
//          VirtualNetworkFunctionTemplateResponseArgs{...}
//
//  or:
//
//          nil
type VirtualNetworkFunctionTemplateResponsePtrInput interface {
	pulumi.Input

	ToVirtualNetworkFunctionTemplateResponsePtrOutput() VirtualNetworkFunctionTemplateResponsePtrOutput
	ToVirtualNetworkFunctionTemplateResponsePtrOutputWithContext(context.Context) VirtualNetworkFunctionTemplateResponsePtrOutput
}

type virtualNetworkFunctionTemplateResponsePtrType VirtualNetworkFunctionTemplateResponseArgs

func VirtualNetworkFunctionTemplateResponsePtr(v *VirtualNetworkFunctionTemplateResponseArgs) VirtualNetworkFunctionTemplateResponsePtrInput {
	return (*virtualNetworkFunctionTemplateResponsePtrType)(v)
}

func (*virtualNetworkFunctionTemplateResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkFunctionTemplateResponse)(nil)).Elem()
}

func (i *virtualNetworkFunctionTemplateResponsePtrType) ToVirtualNetworkFunctionTemplateResponsePtrOutput() VirtualNetworkFunctionTemplateResponsePtrOutput {
	return i.ToVirtualNetworkFunctionTemplateResponsePtrOutputWithContext(context.Background())
}

func (i *virtualNetworkFunctionTemplateResponsePtrType) ToVirtualNetworkFunctionTemplateResponsePtrOutputWithContext(ctx context.Context) VirtualNetworkFunctionTemplateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkFunctionTemplateResponsePtrOutput)
}

// The virtual network function template.
type VirtualNetworkFunctionTemplateResponseOutput struct{ *pulumi.OutputState }

func (VirtualNetworkFunctionTemplateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkFunctionTemplateResponse)(nil)).Elem()
}

func (o VirtualNetworkFunctionTemplateResponseOutput) ToVirtualNetworkFunctionTemplateResponseOutput() VirtualNetworkFunctionTemplateResponseOutput {
	return o
}

func (o VirtualNetworkFunctionTemplateResponseOutput) ToVirtualNetworkFunctionTemplateResponseOutputWithContext(ctx context.Context) VirtualNetworkFunctionTemplateResponseOutput {
	return o
}

func (o VirtualNetworkFunctionTemplateResponseOutput) ToVirtualNetworkFunctionTemplateResponsePtrOutput() VirtualNetworkFunctionTemplateResponsePtrOutput {
	return o.ToVirtualNetworkFunctionTemplateResponsePtrOutputWithContext(context.Background())
}

func (o VirtualNetworkFunctionTemplateResponseOutput) ToVirtualNetworkFunctionTemplateResponsePtrOutputWithContext(ctx context.Context) VirtualNetworkFunctionTemplateResponsePtrOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionTemplateResponse) *VirtualNetworkFunctionTemplateResponse {
		return &v
	}).(VirtualNetworkFunctionTemplateResponsePtrOutput)
}

// An array of virtual network function role definitions.
func (o VirtualNetworkFunctionTemplateResponseOutput) VirutalNetworkFunctionRoleConfigurations() VirtualNetworkFunctionRoleConfigurationResponseArrayOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionTemplateResponse) []VirtualNetworkFunctionRoleConfigurationResponse {
		return v.VirutalNetworkFunctionRoleConfigurations
	}).(VirtualNetworkFunctionRoleConfigurationResponseArrayOutput)
}

type VirtualNetworkFunctionTemplateResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualNetworkFunctionTemplateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkFunctionTemplateResponse)(nil)).Elem()
}

func (o VirtualNetworkFunctionTemplateResponsePtrOutput) ToVirtualNetworkFunctionTemplateResponsePtrOutput() VirtualNetworkFunctionTemplateResponsePtrOutput {
	return o
}

func (o VirtualNetworkFunctionTemplateResponsePtrOutput) ToVirtualNetworkFunctionTemplateResponsePtrOutputWithContext(ctx context.Context) VirtualNetworkFunctionTemplateResponsePtrOutput {
	return o
}

func (o VirtualNetworkFunctionTemplateResponsePtrOutput) Elem() VirtualNetworkFunctionTemplateResponseOutput {
	return o.ApplyT(func(v *VirtualNetworkFunctionTemplateResponse) VirtualNetworkFunctionTemplateResponse { return *v }).(VirtualNetworkFunctionTemplateResponseOutput)
}

// An array of virtual network function role definitions.
func (o VirtualNetworkFunctionTemplateResponsePtrOutput) VirutalNetworkFunctionRoleConfigurations() VirtualNetworkFunctionRoleConfigurationResponseArrayOutput {
	return o.ApplyT(func(v *VirtualNetworkFunctionTemplateResponse) []VirtualNetworkFunctionRoleConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.VirutalNetworkFunctionRoleConfigurations
	}).(VirtualNetworkFunctionRoleConfigurationResponseArrayOutput)
}

// The virtual network function user configuration.
type VirtualNetworkFunctionUserConfiguration struct {
	// The network interface configuration.
	NetworkInterfaces []NetworkInterface `pulumi:"networkInterfaces"`
	// The name of the virtual network function role.
	RoleName *string `pulumi:"roleName"`
	// The user data parameters from the customer.
	UserDataParameters map[string]interface{} `pulumi:"userDataParameters"`
}

// VirtualNetworkFunctionUserConfigurationInput is an input type that accepts VirtualNetworkFunctionUserConfigurationArgs and VirtualNetworkFunctionUserConfigurationOutput values.
// You can construct a concrete instance of `VirtualNetworkFunctionUserConfigurationInput` via:
//
//          VirtualNetworkFunctionUserConfigurationArgs{...}
type VirtualNetworkFunctionUserConfigurationInput interface {
	pulumi.Input

	ToVirtualNetworkFunctionUserConfigurationOutput() VirtualNetworkFunctionUserConfigurationOutput
	ToVirtualNetworkFunctionUserConfigurationOutputWithContext(context.Context) VirtualNetworkFunctionUserConfigurationOutput
}

// The virtual network function user configuration.
type VirtualNetworkFunctionUserConfigurationArgs struct {
	// The network interface configuration.
	NetworkInterfaces NetworkInterfaceArrayInput `pulumi:"networkInterfaces"`
	// The name of the virtual network function role.
	RoleName pulumi.StringPtrInput `pulumi:"roleName"`
	// The user data parameters from the customer.
	UserDataParameters pulumi.MapInput `pulumi:"userDataParameters"`
}

func (VirtualNetworkFunctionUserConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkFunctionUserConfiguration)(nil)).Elem()
}

func (i VirtualNetworkFunctionUserConfigurationArgs) ToVirtualNetworkFunctionUserConfigurationOutput() VirtualNetworkFunctionUserConfigurationOutput {
	return i.ToVirtualNetworkFunctionUserConfigurationOutputWithContext(context.Background())
}

func (i VirtualNetworkFunctionUserConfigurationArgs) ToVirtualNetworkFunctionUserConfigurationOutputWithContext(ctx context.Context) VirtualNetworkFunctionUserConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkFunctionUserConfigurationOutput)
}

// VirtualNetworkFunctionUserConfigurationArrayInput is an input type that accepts VirtualNetworkFunctionUserConfigurationArray and VirtualNetworkFunctionUserConfigurationArrayOutput values.
// You can construct a concrete instance of `VirtualNetworkFunctionUserConfigurationArrayInput` via:
//
//          VirtualNetworkFunctionUserConfigurationArray{ VirtualNetworkFunctionUserConfigurationArgs{...} }
type VirtualNetworkFunctionUserConfigurationArrayInput interface {
	pulumi.Input

	ToVirtualNetworkFunctionUserConfigurationArrayOutput() VirtualNetworkFunctionUserConfigurationArrayOutput
	ToVirtualNetworkFunctionUserConfigurationArrayOutputWithContext(context.Context) VirtualNetworkFunctionUserConfigurationArrayOutput
}

type VirtualNetworkFunctionUserConfigurationArray []VirtualNetworkFunctionUserConfigurationInput

func (VirtualNetworkFunctionUserConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkFunctionUserConfiguration)(nil)).Elem()
}

func (i VirtualNetworkFunctionUserConfigurationArray) ToVirtualNetworkFunctionUserConfigurationArrayOutput() VirtualNetworkFunctionUserConfigurationArrayOutput {
	return i.ToVirtualNetworkFunctionUserConfigurationArrayOutputWithContext(context.Background())
}

func (i VirtualNetworkFunctionUserConfigurationArray) ToVirtualNetworkFunctionUserConfigurationArrayOutputWithContext(ctx context.Context) VirtualNetworkFunctionUserConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkFunctionUserConfigurationArrayOutput)
}

// The virtual network function user configuration.
type VirtualNetworkFunctionUserConfigurationOutput struct{ *pulumi.OutputState }

func (VirtualNetworkFunctionUserConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkFunctionUserConfiguration)(nil)).Elem()
}

func (o VirtualNetworkFunctionUserConfigurationOutput) ToVirtualNetworkFunctionUserConfigurationOutput() VirtualNetworkFunctionUserConfigurationOutput {
	return o
}

func (o VirtualNetworkFunctionUserConfigurationOutput) ToVirtualNetworkFunctionUserConfigurationOutputWithContext(ctx context.Context) VirtualNetworkFunctionUserConfigurationOutput {
	return o
}

// The network interface configuration.
func (o VirtualNetworkFunctionUserConfigurationOutput) NetworkInterfaces() NetworkInterfaceArrayOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionUserConfiguration) []NetworkInterface { return v.NetworkInterfaces }).(NetworkInterfaceArrayOutput)
}

// The name of the virtual network function role.
func (o VirtualNetworkFunctionUserConfigurationOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionUserConfiguration) *string { return v.RoleName }).(pulumi.StringPtrOutput)
}

// The user data parameters from the customer.
func (o VirtualNetworkFunctionUserConfigurationOutput) UserDataParameters() pulumi.MapOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionUserConfiguration) map[string]interface{} { return v.UserDataParameters }).(pulumi.MapOutput)
}

type VirtualNetworkFunctionUserConfigurationArrayOutput struct{ *pulumi.OutputState }

func (VirtualNetworkFunctionUserConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkFunctionUserConfiguration)(nil)).Elem()
}

func (o VirtualNetworkFunctionUserConfigurationArrayOutput) ToVirtualNetworkFunctionUserConfigurationArrayOutput() VirtualNetworkFunctionUserConfigurationArrayOutput {
	return o
}

func (o VirtualNetworkFunctionUserConfigurationArrayOutput) ToVirtualNetworkFunctionUserConfigurationArrayOutputWithContext(ctx context.Context) VirtualNetworkFunctionUserConfigurationArrayOutput {
	return o
}

func (o VirtualNetworkFunctionUserConfigurationArrayOutput) Index(i pulumi.IntInput) VirtualNetworkFunctionUserConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualNetworkFunctionUserConfiguration {
		return vs[0].([]VirtualNetworkFunctionUserConfiguration)[vs[1].(int)]
	}).(VirtualNetworkFunctionUserConfigurationOutput)
}

// The virtual network function user configuration.
type VirtualNetworkFunctionUserConfigurationResponse struct {
	// The network interface configuration.
	NetworkInterfaces []NetworkInterfaceResponse `pulumi:"networkInterfaces"`
	// The name of the virtual network function role.
	RoleName *string `pulumi:"roleName"`
	// The user data parameters from the customer.
	UserDataParameters map[string]interface{} `pulumi:"userDataParameters"`
}

// VirtualNetworkFunctionUserConfigurationResponseInput is an input type that accepts VirtualNetworkFunctionUserConfigurationResponseArgs and VirtualNetworkFunctionUserConfigurationResponseOutput values.
// You can construct a concrete instance of `VirtualNetworkFunctionUserConfigurationResponseInput` via:
//
//          VirtualNetworkFunctionUserConfigurationResponseArgs{...}
type VirtualNetworkFunctionUserConfigurationResponseInput interface {
	pulumi.Input

	ToVirtualNetworkFunctionUserConfigurationResponseOutput() VirtualNetworkFunctionUserConfigurationResponseOutput
	ToVirtualNetworkFunctionUserConfigurationResponseOutputWithContext(context.Context) VirtualNetworkFunctionUserConfigurationResponseOutput
}

// The virtual network function user configuration.
type VirtualNetworkFunctionUserConfigurationResponseArgs struct {
	// The network interface configuration.
	NetworkInterfaces NetworkInterfaceResponseArrayInput `pulumi:"networkInterfaces"`
	// The name of the virtual network function role.
	RoleName pulumi.StringPtrInput `pulumi:"roleName"`
	// The user data parameters from the customer.
	UserDataParameters pulumi.MapInput `pulumi:"userDataParameters"`
}

func (VirtualNetworkFunctionUserConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkFunctionUserConfigurationResponse)(nil)).Elem()
}

func (i VirtualNetworkFunctionUserConfigurationResponseArgs) ToVirtualNetworkFunctionUserConfigurationResponseOutput() VirtualNetworkFunctionUserConfigurationResponseOutput {
	return i.ToVirtualNetworkFunctionUserConfigurationResponseOutputWithContext(context.Background())
}

func (i VirtualNetworkFunctionUserConfigurationResponseArgs) ToVirtualNetworkFunctionUserConfigurationResponseOutputWithContext(ctx context.Context) VirtualNetworkFunctionUserConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkFunctionUserConfigurationResponseOutput)
}

// VirtualNetworkFunctionUserConfigurationResponseArrayInput is an input type that accepts VirtualNetworkFunctionUserConfigurationResponseArray and VirtualNetworkFunctionUserConfigurationResponseArrayOutput values.
// You can construct a concrete instance of `VirtualNetworkFunctionUserConfigurationResponseArrayInput` via:
//
//          VirtualNetworkFunctionUserConfigurationResponseArray{ VirtualNetworkFunctionUserConfigurationResponseArgs{...} }
type VirtualNetworkFunctionUserConfigurationResponseArrayInput interface {
	pulumi.Input

	ToVirtualNetworkFunctionUserConfigurationResponseArrayOutput() VirtualNetworkFunctionUserConfigurationResponseArrayOutput
	ToVirtualNetworkFunctionUserConfigurationResponseArrayOutputWithContext(context.Context) VirtualNetworkFunctionUserConfigurationResponseArrayOutput
}

type VirtualNetworkFunctionUserConfigurationResponseArray []VirtualNetworkFunctionUserConfigurationResponseInput

func (VirtualNetworkFunctionUserConfigurationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkFunctionUserConfigurationResponse)(nil)).Elem()
}

func (i VirtualNetworkFunctionUserConfigurationResponseArray) ToVirtualNetworkFunctionUserConfigurationResponseArrayOutput() VirtualNetworkFunctionUserConfigurationResponseArrayOutput {
	return i.ToVirtualNetworkFunctionUserConfigurationResponseArrayOutputWithContext(context.Background())
}

func (i VirtualNetworkFunctionUserConfigurationResponseArray) ToVirtualNetworkFunctionUserConfigurationResponseArrayOutputWithContext(ctx context.Context) VirtualNetworkFunctionUserConfigurationResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkFunctionUserConfigurationResponseArrayOutput)
}

// The virtual network function user configuration.
type VirtualNetworkFunctionUserConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualNetworkFunctionUserConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkFunctionUserConfigurationResponse)(nil)).Elem()
}

func (o VirtualNetworkFunctionUserConfigurationResponseOutput) ToVirtualNetworkFunctionUserConfigurationResponseOutput() VirtualNetworkFunctionUserConfigurationResponseOutput {
	return o
}

func (o VirtualNetworkFunctionUserConfigurationResponseOutput) ToVirtualNetworkFunctionUserConfigurationResponseOutputWithContext(ctx context.Context) VirtualNetworkFunctionUserConfigurationResponseOutput {
	return o
}

// The network interface configuration.
func (o VirtualNetworkFunctionUserConfigurationResponseOutput) NetworkInterfaces() NetworkInterfaceResponseArrayOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionUserConfigurationResponse) []NetworkInterfaceResponse {
		return v.NetworkInterfaces
	}).(NetworkInterfaceResponseArrayOutput)
}

// The name of the virtual network function role.
func (o VirtualNetworkFunctionUserConfigurationResponseOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionUserConfigurationResponse) *string { return v.RoleName }).(pulumi.StringPtrOutput)
}

// The user data parameters from the customer.
func (o VirtualNetworkFunctionUserConfigurationResponseOutput) UserDataParameters() pulumi.MapOutput {
	return o.ApplyT(func(v VirtualNetworkFunctionUserConfigurationResponse) map[string]interface{} {
		return v.UserDataParameters
	}).(pulumi.MapOutput)
}

type VirtualNetworkFunctionUserConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualNetworkFunctionUserConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkFunctionUserConfigurationResponse)(nil)).Elem()
}

func (o VirtualNetworkFunctionUserConfigurationResponseArrayOutput) ToVirtualNetworkFunctionUserConfigurationResponseArrayOutput() VirtualNetworkFunctionUserConfigurationResponseArrayOutput {
	return o
}

func (o VirtualNetworkFunctionUserConfigurationResponseArrayOutput) ToVirtualNetworkFunctionUserConfigurationResponseArrayOutputWithContext(ctx context.Context) VirtualNetworkFunctionUserConfigurationResponseArrayOutput {
	return o
}

func (o VirtualNetworkFunctionUserConfigurationResponseArrayOutput) Index(i pulumi.IntInput) VirtualNetworkFunctionUserConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualNetworkFunctionUserConfigurationResponse {
		return vs[0].([]VirtualNetworkFunctionUserConfigurationResponse)[vs[1].(int)]
	}).(VirtualNetworkFunctionUserConfigurationResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ImageReferenceOutput{})
	pulumi.RegisterOutputType(ImageReferencePtrOutput{})
	pulumi.RegisterOutputType(ImageReferenceResponseOutput{})
	pulumi.RegisterOutputType(ImageReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceIPConfigurationOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceIPConfigurationArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceIPConfigurationResponseOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceIPConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceResponseOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceResponseArrayOutput{})
	pulumi.RegisterOutputType(OsProfileOutput{})
	pulumi.RegisterOutputType(OsProfilePtrOutput{})
	pulumi.RegisterOutputType(OsProfileResponseOutput{})
	pulumi.RegisterOutputType(OsProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SubResourceOutput{})
	pulumi.RegisterOutputType(SubResourcePtrOutput{})
	pulumi.RegisterOutputType(SubResourceResponseOutput{})
	pulumi.RegisterOutputType(SubResourceResponsePtrOutput{})
	pulumi.RegisterOutputType(SubResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualNetworkFunctionRoleConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualNetworkFunctionRoleConfigurationArrayOutput{})
	pulumi.RegisterOutputType(VirtualNetworkFunctionRoleConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualNetworkFunctionRoleConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualNetworkFunctionTemplateOutput{})
	pulumi.RegisterOutputType(VirtualNetworkFunctionTemplatePtrOutput{})
	pulumi.RegisterOutputType(VirtualNetworkFunctionTemplateResponseOutput{})
	pulumi.RegisterOutputType(VirtualNetworkFunctionTemplateResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualNetworkFunctionUserConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualNetworkFunctionUserConfigurationArrayOutput{})
	pulumi.RegisterOutputType(VirtualNetworkFunctionUserConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualNetworkFunctionUserConfigurationResponseArrayOutput{})
}
