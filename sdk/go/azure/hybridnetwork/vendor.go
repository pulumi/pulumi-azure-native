// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hybridnetwork

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Vendor resource.
// API Version: 2020-01-01-preview.
type Vendor struct {
	pulumi.CustomResourceState

	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state of the vendor resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// A list of IDs of the vendor skus offered by the vendor.
	Skus SubResourceResponseArrayOutput `pulumi:"skus"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewVendor registers a new resource with the given unique name, arguments, and options.
func NewVendor(ctx *pulumi.Context,
	name string, args *VendorArgs, opts ...pulumi.ResourceOption) (*Vendor, error) {
	if args == nil {
		args = &VendorArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:hybridnetwork/v20200101preview:Vendor"),
		},
		{
			Type: pulumi.String("azure-native:hybridnetwork/v20210501:Vendor"),
		},
		{
			Type: pulumi.String("azure-native:hybridnetwork/v20220101preview:Vendor"),
		},
	})
	opts = append(opts, aliases)
	var resource Vendor
	err := ctx.RegisterResource("azure-native:hybridnetwork:Vendor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVendor gets an existing Vendor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVendor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VendorState, opts ...pulumi.ResourceOption) (*Vendor, error) {
	var resource Vendor
	err := ctx.ReadResource("azure-native:hybridnetwork:Vendor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vendor resources.
type vendorState struct {
}

type VendorState struct {
}

func (VendorState) ElementType() reflect.Type {
	return reflect.TypeOf((*vendorState)(nil)).Elem()
}

type vendorArgs struct {
	// The name of the vendor.
	VendorName *string `pulumi:"vendorName"`
}

// The set of arguments for constructing a Vendor resource.
type VendorArgs struct {
	// The name of the vendor.
	VendorName pulumi.StringPtrInput
}

func (VendorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vendorArgs)(nil)).Elem()
}

type VendorInput interface {
	pulumi.Input

	ToVendorOutput() VendorOutput
	ToVendorOutputWithContext(ctx context.Context) VendorOutput
}

func (*Vendor) ElementType() reflect.Type {
	return reflect.TypeOf((**Vendor)(nil)).Elem()
}

func (i *Vendor) ToVendorOutput() VendorOutput {
	return i.ToVendorOutputWithContext(context.Background())
}

func (i *Vendor) ToVendorOutputWithContext(ctx context.Context) VendorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VendorOutput)
}

type VendorOutput struct{ *pulumi.OutputState }

func (VendorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vendor)(nil)).Elem()
}

func (o VendorOutput) ToVendorOutput() VendorOutput {
	return o
}

func (o VendorOutput) ToVendorOutputWithContext(ctx context.Context) VendorOutput {
	return o
}

// The name of the resource
func (o VendorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vendor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the vendor resource.
func (o VendorOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Vendor) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// A list of IDs of the vendor skus offered by the vendor.
func (o VendorOutput) Skus() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v *Vendor) SubResourceResponseArrayOutput { return v.Skus }).(SubResourceResponseArrayOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o VendorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Vendor) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(VendorOutput{})
}
