// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20160601

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Peerings in a VirtualNetwork resource
type VirtualNetworkPeering struct {
	pulumi.CustomResourceState

	// Gets or sets whether the forwarded traffic from the VMs in the remote virtual network will be allowed/disallowed
	AllowForwardedTraffic pulumi.BoolPtrOutput `pulumi:"allowForwardedTraffic"`
	// Gets or sets if gatewayLinks can be used in remote virtual network’s link to this virtual network
	AllowGatewayTransit pulumi.BoolPtrOutput `pulumi:"allowGatewayTransit"`
	// Gets or sets whether the VMs in the linked virtual network space would be able to access all the VMs in local Virtual network space
	AllowVirtualNetworkAccess pulumi.BoolPtrOutput `pulumi:"allowVirtualNetworkAccess"`
	// A unique read-only string that changes whenever the resource is updated
	Etag pulumi.StringPtrOutput `pulumi:"etag"`
	// Gets or sets the name of the resource that is unique within a resource group. This name can be used to access the resource
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Gets the status of the virtual network peering
	PeeringState pulumi.StringPtrOutput `pulumi:"peeringState"`
	// Gets provisioning state of the resource
	ProvisioningState pulumi.StringPtrOutput `pulumi:"provisioningState"`
	// Gets or sets the reference of the remote virtual network
	RemoteVirtualNetwork SubResourceResponsePtrOutput `pulumi:"remoteVirtualNetwork"`
	// Gets or sets if remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only 1 peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
	UseRemoteGateways pulumi.BoolPtrOutput `pulumi:"useRemoteGateways"`
}

// NewVirtualNetworkPeering registers a new resource with the given unique name, arguments, and options.
func NewVirtualNetworkPeering(ctx *pulumi.Context,
	name string, args *VirtualNetworkPeeringArgs, opts ...pulumi.ResourceOption) (*VirtualNetworkPeering, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.VirtualNetworkName == nil {
		return nil, errors.New("missing required argument 'VirtualNetworkName'")
	}
	if args == nil || args.VirtualNetworkPeeringName == nil {
		return nil, errors.New("missing required argument 'VirtualNetworkPeeringName'")
	}
	if args == nil {
		args = &VirtualNetworkPeeringArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:network/latest:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20160901:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20161201:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20170301:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20170601:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20170801:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20170901:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20171001:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20171101:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20180101:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20180201:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20180401:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20180601:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20180701:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20180801:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20181001:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20181101:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20181201:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20190201:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20190401:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20190601:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20190701:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20190801:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20190901:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20191101:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20191201:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20200301:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20200401:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20200501:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20200601:VirtualNetworkPeering"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20200701:VirtualNetworkPeering"),
		},
	})
	opts = append(opts, aliases)
	var resource VirtualNetworkPeering
	err := ctx.RegisterResource("azure-nextgen:network/v20160601:VirtualNetworkPeering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualNetworkPeering gets an existing VirtualNetworkPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualNetworkPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualNetworkPeeringState, opts ...pulumi.ResourceOption) (*VirtualNetworkPeering, error) {
	var resource VirtualNetworkPeering
	err := ctx.ReadResource("azure-nextgen:network/v20160601:VirtualNetworkPeering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualNetworkPeering resources.
type virtualNetworkPeeringState struct {
	// Gets or sets whether the forwarded traffic from the VMs in the remote virtual network will be allowed/disallowed
	AllowForwardedTraffic *bool `pulumi:"allowForwardedTraffic"`
	// Gets or sets if gatewayLinks can be used in remote virtual network’s link to this virtual network
	AllowGatewayTransit *bool `pulumi:"allowGatewayTransit"`
	// Gets or sets whether the VMs in the linked virtual network space would be able to access all the VMs in local Virtual network space
	AllowVirtualNetworkAccess *bool `pulumi:"allowVirtualNetworkAccess"`
	// A unique read-only string that changes whenever the resource is updated
	Etag *string `pulumi:"etag"`
	// Gets or sets the name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `pulumi:"name"`
	// Gets the status of the virtual network peering
	PeeringState *string `pulumi:"peeringState"`
	// Gets provisioning state of the resource
	ProvisioningState *string `pulumi:"provisioningState"`
	// Gets or sets the reference of the remote virtual network
	RemoteVirtualNetwork *SubResourceResponse `pulumi:"remoteVirtualNetwork"`
	// Gets or sets if remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only 1 peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
	UseRemoteGateways *bool `pulumi:"useRemoteGateways"`
}

type VirtualNetworkPeeringState struct {
	// Gets or sets whether the forwarded traffic from the VMs in the remote virtual network will be allowed/disallowed
	AllowForwardedTraffic pulumi.BoolPtrInput
	// Gets or sets if gatewayLinks can be used in remote virtual network’s link to this virtual network
	AllowGatewayTransit pulumi.BoolPtrInput
	// Gets or sets whether the VMs in the linked virtual network space would be able to access all the VMs in local Virtual network space
	AllowVirtualNetworkAccess pulumi.BoolPtrInput
	// A unique read-only string that changes whenever the resource is updated
	Etag pulumi.StringPtrInput
	// Gets or sets the name of the resource that is unique within a resource group. This name can be used to access the resource
	Name pulumi.StringPtrInput
	// Gets the status of the virtual network peering
	PeeringState pulumi.StringPtrInput
	// Gets provisioning state of the resource
	ProvisioningState pulumi.StringPtrInput
	// Gets or sets the reference of the remote virtual network
	RemoteVirtualNetwork SubResourceResponsePtrInput
	// Gets or sets if remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only 1 peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
	UseRemoteGateways pulumi.BoolPtrInput
}

func (VirtualNetworkPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkPeeringState)(nil)).Elem()
}

type virtualNetworkPeeringArgs struct {
	// Gets or sets whether the forwarded traffic from the VMs in the remote virtual network will be allowed/disallowed
	AllowForwardedTraffic *bool `pulumi:"allowForwardedTraffic"`
	// Gets or sets if gatewayLinks can be used in remote virtual network’s link to this virtual network
	AllowGatewayTransit *bool `pulumi:"allowGatewayTransit"`
	// Gets or sets whether the VMs in the linked virtual network space would be able to access all the VMs in local Virtual network space
	AllowVirtualNetworkAccess *bool `pulumi:"allowVirtualNetworkAccess"`
	// A unique read-only string that changes whenever the resource is updated
	Etag *string `pulumi:"etag"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Gets or sets the name of the resource that is unique within a resource group. This name can be used to access the resource
	Name *string `pulumi:"name"`
	// Gets the status of the virtual network peering
	PeeringState *string `pulumi:"peeringState"`
	// Gets provisioning state of the resource
	ProvisioningState *string `pulumi:"provisioningState"`
	// Gets or sets the reference of the remote virtual network
	RemoteVirtualNetwork *SubResource `pulumi:"remoteVirtualNetwork"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Gets or sets if remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only 1 peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
	UseRemoteGateways *bool `pulumi:"useRemoteGateways"`
	// The name of the virtual network.
	VirtualNetworkName string `pulumi:"virtualNetworkName"`
	// The name of the peering.
	VirtualNetworkPeeringName string `pulumi:"virtualNetworkPeeringName"`
}

// The set of arguments for constructing a VirtualNetworkPeering resource.
type VirtualNetworkPeeringArgs struct {
	// Gets or sets whether the forwarded traffic from the VMs in the remote virtual network will be allowed/disallowed
	AllowForwardedTraffic pulumi.BoolPtrInput
	// Gets or sets if gatewayLinks can be used in remote virtual network’s link to this virtual network
	AllowGatewayTransit pulumi.BoolPtrInput
	// Gets or sets whether the VMs in the linked virtual network space would be able to access all the VMs in local Virtual network space
	AllowVirtualNetworkAccess pulumi.BoolPtrInput
	// A unique read-only string that changes whenever the resource is updated
	Etag pulumi.StringPtrInput
	// Resource Id
	Id pulumi.StringPtrInput
	// Gets or sets the name of the resource that is unique within a resource group. This name can be used to access the resource
	Name pulumi.StringPtrInput
	// Gets the status of the virtual network peering
	PeeringState pulumi.StringPtrInput
	// Gets provisioning state of the resource
	ProvisioningState pulumi.StringPtrInput
	// Gets or sets the reference of the remote virtual network
	RemoteVirtualNetwork SubResourcePtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// Gets or sets if remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only 1 peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
	UseRemoteGateways pulumi.BoolPtrInput
	// The name of the virtual network.
	VirtualNetworkName pulumi.StringInput
	// The name of the peering.
	VirtualNetworkPeeringName pulumi.StringInput
}

func (VirtualNetworkPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkPeeringArgs)(nil)).Elem()
}
