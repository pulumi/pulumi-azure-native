// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The NSP resource association resource
// API Version: 2021-02-01-preview.
type NspAssociationsProxy struct {
	pulumi.CustomResourceState

	// Access mode on the association.
	AccessMode pulumi.StringPtrOutput `pulumi:"accessMode"`
	// Specifies if there are provisioning issues
	HasProvisioningIssues pulumi.StringOutput `pulumi:"hasProvisioningIssues"`
	// Resource location.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The PaaS resource to be associated.
	PrivateLinkResource SubResourceResponsePtrOutput `pulumi:"privateLinkResource"`
	// Profile id to which the PaaS resource is associated.
	Profile SubResourceResponsePtrOutput `pulumi:"profile"`
	// The provisioning state of the resource  association resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNspAssociationsProxy registers a new resource with the given unique name, arguments, and options.
func NewNspAssociationsProxy(ctx *pulumi.Context,
	name string, args *NspAssociationsProxyArgs, opts ...pulumi.ResourceOption) (*NspAssociationsProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkSecurityPerimeterName == nil {
		return nil, errors.New("invalid value for required argument 'NetworkSecurityPerimeterName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:network/v20210201preview:NspAssociationsProxy"),
		},
	})
	opts = append(opts, aliases)
	var resource NspAssociationsProxy
	err := ctx.RegisterResource("azure-native:network:NspAssociationsProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNspAssociationsProxy gets an existing NspAssociationsProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNspAssociationsProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NspAssociationsProxyState, opts ...pulumi.ResourceOption) (*NspAssociationsProxy, error) {
	var resource NspAssociationsProxy
	err := ctx.ReadResource("azure-native:network:NspAssociationsProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NspAssociationsProxy resources.
type nspAssociationsProxyState struct {
}

type NspAssociationsProxyState struct {
}

func (NspAssociationsProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*nspAssociationsProxyState)(nil)).Elem()
}

type nspAssociationsProxyArgs struct {
	// Access mode on the association.
	AccessMode *string `pulumi:"accessMode"`
	// The name of the NSP association.
	AssociationName *string `pulumi:"associationName"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource location.
	Location *string `pulumi:"location"`
	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `pulumi:"name"`
	// The name of the network security perimeter.
	NetworkSecurityPerimeterName string `pulumi:"networkSecurityPerimeterName"`
	// The PaaS resource to be associated.
	PrivateLinkResource *SubResource `pulumi:"privateLinkResource"`
	// Profile id to which the PaaS resource is associated.
	Profile *SubResource `pulumi:"profile"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a NspAssociationsProxy resource.
type NspAssociationsProxyArgs struct {
	// Access mode on the association.
	AccessMode pulumi.StringPtrInput
	// The name of the NSP association.
	AssociationName pulumi.StringPtrInput
	// Resource ID.
	Id pulumi.StringPtrInput
	// Resource location.
	Location pulumi.StringPtrInput
	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name pulumi.StringPtrInput
	// The name of the network security perimeter.
	NetworkSecurityPerimeterName pulumi.StringInput
	// The PaaS resource to be associated.
	PrivateLinkResource SubResourcePtrInput
	// Profile id to which the PaaS resource is associated.
	Profile SubResourcePtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (NspAssociationsProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nspAssociationsProxyArgs)(nil)).Elem()
}

type NspAssociationsProxyInput interface {
	pulumi.Input

	ToNspAssociationsProxyOutput() NspAssociationsProxyOutput
	ToNspAssociationsProxyOutputWithContext(ctx context.Context) NspAssociationsProxyOutput
}

func (*NspAssociationsProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**NspAssociationsProxy)(nil)).Elem()
}

func (i *NspAssociationsProxy) ToNspAssociationsProxyOutput() NspAssociationsProxyOutput {
	return i.ToNspAssociationsProxyOutputWithContext(context.Background())
}

func (i *NspAssociationsProxy) ToNspAssociationsProxyOutputWithContext(ctx context.Context) NspAssociationsProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NspAssociationsProxyOutput)
}

type NspAssociationsProxyOutput struct{ *pulumi.OutputState }

func (NspAssociationsProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NspAssociationsProxy)(nil)).Elem()
}

func (o NspAssociationsProxyOutput) ToNspAssociationsProxyOutput() NspAssociationsProxyOutput {
	return o
}

func (o NspAssociationsProxyOutput) ToNspAssociationsProxyOutputWithContext(ctx context.Context) NspAssociationsProxyOutput {
	return o
}

// Access mode on the association.
func (o NspAssociationsProxyOutput) AccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NspAssociationsProxy) pulumi.StringPtrOutput { return v.AccessMode }).(pulumi.StringPtrOutput)
}

// Specifies if there are provisioning issues
func (o NspAssociationsProxyOutput) HasProvisioningIssues() pulumi.StringOutput {
	return o.ApplyT(func(v *NspAssociationsProxy) pulumi.StringOutput { return v.HasProvisioningIssues }).(pulumi.StringOutput)
}

// Resource location.
func (o NspAssociationsProxyOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NspAssociationsProxy) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o NspAssociationsProxyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NspAssociationsProxy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The PaaS resource to be associated.
func (o NspAssociationsProxyOutput) PrivateLinkResource() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *NspAssociationsProxy) SubResourceResponsePtrOutput { return v.PrivateLinkResource }).(SubResourceResponsePtrOutput)
}

// Profile id to which the PaaS resource is associated.
func (o NspAssociationsProxyOutput) Profile() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *NspAssociationsProxy) SubResourceResponsePtrOutput { return v.Profile }).(SubResourceResponsePtrOutput)
}

// The provisioning state of the resource  association resource.
func (o NspAssociationsProxyOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *NspAssociationsProxy) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Resource tags.
func (o NspAssociationsProxyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NspAssociationsProxy) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type.
func (o NspAssociationsProxyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NspAssociationsProxy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(NspAssociationsProxyOutput{})
}
