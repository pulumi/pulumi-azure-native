// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210201

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ExpressRouteConnection resource.
func LookupExpressRouteConnection(ctx *pulumi.Context, args *LookupExpressRouteConnectionArgs, opts ...pulumi.InvokeOption) (*LookupExpressRouteConnectionResult, error) {
	var rv LookupExpressRouteConnectionResult
	err := ctx.Invoke("azure-native:network/v20210201:getExpressRouteConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupExpressRouteConnectionArgs struct {
	// The name of the ExpressRoute connection.
	ConnectionName string `pulumi:"connectionName"`
	// The name of the ExpressRoute gateway.
	ExpressRouteGatewayName string `pulumi:"expressRouteGatewayName"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// ExpressRouteConnection resource.
type LookupExpressRouteConnectionResult struct {
	// Authorization key to establish the connection.
	AuthorizationKey *string `pulumi:"authorizationKey"`
	// Enable internet security.
	EnableInternetSecurity *bool `pulumi:"enableInternetSecurity"`
	// The ExpressRoute circuit peering.
	ExpressRouteCircuitPeering ExpressRouteCircuitPeeringIdResponse `pulumi:"expressRouteCircuitPeering"`
	// Enable FastPath to vWan Firewall hub.
	ExpressRouteGatewayBypass *bool `pulumi:"expressRouteGatewayBypass"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// The name of the resource.
	Name string `pulumi:"name"`
	// The provisioning state of the express route connection resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// The Routing Configuration indicating the associated and propagated route tables on this connection.
	RoutingConfiguration *RoutingConfigurationResponse `pulumi:"routingConfiguration"`
	// The routing weight associated to the connection.
	RoutingWeight *int `pulumi:"routingWeight"`
}

func LookupExpressRouteConnectionOutput(ctx *pulumi.Context, args LookupExpressRouteConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupExpressRouteConnectionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupExpressRouteConnectionResult, error) {
			args := v.(LookupExpressRouteConnectionArgs)
			r, err := LookupExpressRouteConnection(ctx, &args, opts...)
			var s LookupExpressRouteConnectionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupExpressRouteConnectionResultOutput)
}

type LookupExpressRouteConnectionOutputArgs struct {
	// The name of the ExpressRoute connection.
	ConnectionName pulumi.StringInput `pulumi:"connectionName"`
	// The name of the ExpressRoute gateway.
	ExpressRouteGatewayName pulumi.StringInput `pulumi:"expressRouteGatewayName"`
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupExpressRouteConnectionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupExpressRouteConnectionArgs)(nil)).Elem()
}

// ExpressRouteConnection resource.
type LookupExpressRouteConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupExpressRouteConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupExpressRouteConnectionResult)(nil)).Elem()
}

func (o LookupExpressRouteConnectionResultOutput) ToLookupExpressRouteConnectionResultOutput() LookupExpressRouteConnectionResultOutput {
	return o
}

func (o LookupExpressRouteConnectionResultOutput) ToLookupExpressRouteConnectionResultOutputWithContext(ctx context.Context) LookupExpressRouteConnectionResultOutput {
	return o
}

// Authorization key to establish the connection.
func (o LookupExpressRouteConnectionResultOutput) AuthorizationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupExpressRouteConnectionResult) *string { return v.AuthorizationKey }).(pulumi.StringPtrOutput)
}

// Enable internet security.
func (o LookupExpressRouteConnectionResultOutput) EnableInternetSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupExpressRouteConnectionResult) *bool { return v.EnableInternetSecurity }).(pulumi.BoolPtrOutput)
}

// The ExpressRoute circuit peering.
func (o LookupExpressRouteConnectionResultOutput) ExpressRouteCircuitPeering() ExpressRouteCircuitPeeringIdResponseOutput {
	return o.ApplyT(func(v LookupExpressRouteConnectionResult) ExpressRouteCircuitPeeringIdResponse {
		return v.ExpressRouteCircuitPeering
	}).(ExpressRouteCircuitPeeringIdResponseOutput)
}

// Enable FastPath to vWan Firewall hub.
func (o LookupExpressRouteConnectionResultOutput) ExpressRouteGatewayBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupExpressRouteConnectionResult) *bool { return v.ExpressRouteGatewayBypass }).(pulumi.BoolPtrOutput)
}

// Resource ID.
func (o LookupExpressRouteConnectionResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupExpressRouteConnectionResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the resource.
func (o LookupExpressRouteConnectionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExpressRouteConnectionResult) string { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the express route connection resource.
func (o LookupExpressRouteConnectionResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExpressRouteConnectionResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The Routing Configuration indicating the associated and propagated route tables on this connection.
func (o LookupExpressRouteConnectionResultOutput) RoutingConfiguration() RoutingConfigurationResponsePtrOutput {
	return o.ApplyT(func(v LookupExpressRouteConnectionResult) *RoutingConfigurationResponse {
		return v.RoutingConfiguration
	}).(RoutingConfigurationResponsePtrOutput)
}

// The routing weight associated to the connection.
func (o LookupExpressRouteConnectionResultOutput) RoutingWeight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupExpressRouteConnectionResult) *int { return v.RoutingWeight }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupExpressRouteConnectionResultOutput{})
}
