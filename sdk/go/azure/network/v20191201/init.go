// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20191201

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-azure-native/sdk/go/azure"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "azure-native:network/v20191201:ApplicationGateway":
		r = &ApplicationGateway{}
	case "azure-native:network/v20191201:ApplicationSecurityGroup":
		r = &ApplicationSecurityGroup{}
	case "azure-native:network/v20191201:AzureFirewall":
		r = &AzureFirewall{}
	case "azure-native:network/v20191201:BastionHost":
		r = &BastionHost{}
	case "azure-native:network/v20191201:ConnectionMonitor":
		r = &ConnectionMonitor{}
	case "azure-native:network/v20191201:DdosCustomPolicy":
		r = &DdosCustomPolicy{}
	case "azure-native:network/v20191201:DdosProtectionPlan":
		r = &DdosProtectionPlan{}
	case "azure-native:network/v20191201:ExpressRouteCircuit":
		r = &ExpressRouteCircuit{}
	case "azure-native:network/v20191201:ExpressRouteCircuitAuthorization":
		r = &ExpressRouteCircuitAuthorization{}
	case "azure-native:network/v20191201:ExpressRouteCircuitConnection":
		r = &ExpressRouteCircuitConnection{}
	case "azure-native:network/v20191201:ExpressRouteCircuitPeering":
		r = &ExpressRouteCircuitPeering{}
	case "azure-native:network/v20191201:ExpressRouteConnection":
		r = &ExpressRouteConnection{}
	case "azure-native:network/v20191201:ExpressRouteCrossConnectionPeering":
		r = &ExpressRouteCrossConnectionPeering{}
	case "azure-native:network/v20191201:ExpressRouteGateway":
		r = &ExpressRouteGateway{}
	case "azure-native:network/v20191201:ExpressRoutePort":
		r = &ExpressRoutePort{}
	case "azure-native:network/v20191201:FirewallPolicy":
		r = &FirewallPolicy{}
	case "azure-native:network/v20191201:FirewallPolicyRuleGroup":
		r = &FirewallPolicyRuleGroup{}
	case "azure-native:network/v20191201:FlowLog":
		r = &FlowLog{}
	case "azure-native:network/v20191201:InboundNatRule":
		r = &InboundNatRule{}
	case "azure-native:network/v20191201:IpGroup":
		r = &IpGroup{}
	case "azure-native:network/v20191201:LoadBalancer":
		r = &LoadBalancer{}
	case "azure-native:network/v20191201:LocalNetworkGateway":
		r = &LocalNetworkGateway{}
	case "azure-native:network/v20191201:NatGateway":
		r = &NatGateway{}
	case "azure-native:network/v20191201:NetworkInterface":
		r = &NetworkInterface{}
	case "azure-native:network/v20191201:NetworkInterfaceTapConfiguration":
		r = &NetworkInterfaceTapConfiguration{}
	case "azure-native:network/v20191201:NetworkProfile":
		r = &NetworkProfile{}
	case "azure-native:network/v20191201:NetworkSecurityGroup":
		r = &NetworkSecurityGroup{}
	case "azure-native:network/v20191201:NetworkVirtualAppliance":
		r = &NetworkVirtualAppliance{}
	case "azure-native:network/v20191201:NetworkWatcher":
		r = &NetworkWatcher{}
	case "azure-native:network/v20191201:P2sVpnGateway":
		r = &P2sVpnGateway{}
	case "azure-native:network/v20191201:PacketCapture":
		r = &PacketCapture{}
	case "azure-native:network/v20191201:PrivateEndpoint":
		r = &PrivateEndpoint{}
	case "azure-native:network/v20191201:PrivateLinkService":
		r = &PrivateLinkService{}
	case "azure-native:network/v20191201:PrivateLinkServicePrivateEndpointConnection":
		r = &PrivateLinkServicePrivateEndpointConnection{}
	case "azure-native:network/v20191201:PublicIPAddress":
		r = &PublicIPAddress{}
	case "azure-native:network/v20191201:PublicIPPrefix":
		r = &PublicIPPrefix{}
	case "azure-native:network/v20191201:Route":
		r = &Route{}
	case "azure-native:network/v20191201:RouteFilter":
		r = &RouteFilter{}
	case "azure-native:network/v20191201:RouteFilterRule":
		r = &RouteFilterRule{}
	case "azure-native:network/v20191201:RouteTable":
		r = &RouteTable{}
	case "azure-native:network/v20191201:SecurityRule":
		r = &SecurityRule{}
	case "azure-native:network/v20191201:ServiceEndpointPolicy":
		r = &ServiceEndpointPolicy{}
	case "azure-native:network/v20191201:ServiceEndpointPolicyDefinition":
		r = &ServiceEndpointPolicyDefinition{}
	case "azure-native:network/v20191201:Subnet":
		r = &Subnet{}
	case "azure-native:network/v20191201:VirtualHub":
		r = &VirtualHub{}
	case "azure-native:network/v20191201:VirtualHubRouteTableV2":
		r = &VirtualHubRouteTableV2{}
	case "azure-native:network/v20191201:VirtualNetwork":
		r = &VirtualNetwork{}
	case "azure-native:network/v20191201:VirtualNetworkGateway":
		r = &VirtualNetworkGateway{}
	case "azure-native:network/v20191201:VirtualNetworkGatewayConnection":
		r = &VirtualNetworkGatewayConnection{}
	case "azure-native:network/v20191201:VirtualNetworkPeering":
		r = &VirtualNetworkPeering{}
	case "azure-native:network/v20191201:VirtualNetworkTap":
		r = &VirtualNetworkTap{}
	case "azure-native:network/v20191201:VirtualRouter":
		r = &VirtualRouter{}
	case "azure-native:network/v20191201:VirtualRouterPeering":
		r = &VirtualRouterPeering{}
	case "azure-native:network/v20191201:VirtualWan":
		r = &VirtualWan{}
	case "azure-native:network/v20191201:VpnConnection":
		r = &VpnConnection{}
	case "azure-native:network/v20191201:VpnGateway":
		r = &VpnGateway{}
	case "azure-native:network/v20191201:VpnServerConfiguration":
		r = &VpnServerConfiguration{}
	case "azure-native:network/v20191201:VpnSite":
		r = &VpnSite{}
	case "azure-native:network/v20191201:WebApplicationFirewallPolicy":
		r = &WebApplicationFirewallPolicy{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := azure.PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"azure-native",
		"network/v20191201",
		&module{version},
	)
}
