// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20190701

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VpnConnection Resource.
type VpnConnection struct {
	pulumi.CustomResourceState

	// Expected bandwidth in MBPS.
	ConnectionBandwidth pulumi.IntPtrOutput `pulumi:"connectionBandwidth"`
	// The connection status.
	ConnectionStatus pulumi.StringOutput `pulumi:"connectionStatus"`
	// Egress bytes transferred.
	EgressBytesTransferred pulumi.Float64Output `pulumi:"egressBytesTransferred"`
	// EnableBgp flag.
	EnableBgp pulumi.BoolPtrOutput `pulumi:"enableBgp"`
	// Enable internet security.
	EnableInternetSecurity pulumi.BoolPtrOutput `pulumi:"enableInternetSecurity"`
	// EnableBgp flag.
	EnableRateLimiting pulumi.BoolPtrOutput `pulumi:"enableRateLimiting"`
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Ingress bytes transferred.
	IngressBytesTransferred pulumi.Float64Output `pulumi:"ingressBytesTransferred"`
	// The IPSec Policies to be considered by this connection.
	IpsecPolicies IpsecPolicyResponseArrayOutput `pulumi:"ipsecPolicies"`
	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The provisioning state of the VPN connection resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Id of the connected vpn site.
	RemoteVpnSite SubResourceResponsePtrOutput `pulumi:"remoteVpnSite"`
	// Routing weight for vpn connection.
	RoutingWeight pulumi.IntPtrOutput `pulumi:"routingWeight"`
	// SharedKey for the vpn connection.
	SharedKey pulumi.StringPtrOutput `pulumi:"sharedKey"`
	// Use local azure ip to initiate connection.
	UseLocalAzureIpAddress pulumi.BoolPtrOutput `pulumi:"useLocalAzureIpAddress"`
	// Enable policy-based traffic selectors.
	UsePolicyBasedTrafficSelectors pulumi.BoolPtrOutput `pulumi:"usePolicyBasedTrafficSelectors"`
	// Connection protocol used for this connection.
	VpnConnectionProtocolType pulumi.StringPtrOutput `pulumi:"vpnConnectionProtocolType"`
	// List of all vpn site link connections to the gateway.
	VpnLinkConnections VpnSiteLinkConnectionResponseArrayOutput `pulumi:"vpnLinkConnections"`
}

// NewVpnConnection registers a new resource with the given unique name, arguments, and options.
func NewVpnConnection(ctx *pulumi.Context,
	name string, args *VpnConnectionArgs, opts ...pulumi.ResourceOption) (*VpnConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayName == nil {
		return nil, errors.New("invalid value for required argument 'GatewayName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:network:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180401:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180601:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180701:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180801:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20181001:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20181101:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20181201:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190201:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190401:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190601:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190801:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190901:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20191101:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20191201:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200301:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200401:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200501:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200601:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200701:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200801:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20201101:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210201:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210301:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210501:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210801:VpnConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20220101:VpnConnection"),
		},
	})
	opts = append(opts, aliases)
	var resource VpnConnection
	err := ctx.RegisterResource("azure-native:network/v20190701:VpnConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnConnection gets an existing VpnConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnConnectionState, opts ...pulumi.ResourceOption) (*VpnConnection, error) {
	var resource VpnConnection
	err := ctx.ReadResource("azure-native:network/v20190701:VpnConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnConnection resources.
type vpnConnectionState struct {
}

type VpnConnectionState struct {
}

func (VpnConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnConnectionState)(nil)).Elem()
}

type vpnConnectionArgs struct {
	// Expected bandwidth in MBPS.
	ConnectionBandwidth *int `pulumi:"connectionBandwidth"`
	// The name of the connection.
	ConnectionName *string `pulumi:"connectionName"`
	// EnableBgp flag.
	EnableBgp *bool `pulumi:"enableBgp"`
	// Enable internet security.
	EnableInternetSecurity *bool `pulumi:"enableInternetSecurity"`
	// EnableBgp flag.
	EnableRateLimiting *bool `pulumi:"enableRateLimiting"`
	// The name of the gateway.
	GatewayName string `pulumi:"gatewayName"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// The IPSec Policies to be considered by this connection.
	IpsecPolicies []IpsecPolicy `pulumi:"ipsecPolicies"`
	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `pulumi:"name"`
	// Id of the connected vpn site.
	RemoteVpnSite *SubResource `pulumi:"remoteVpnSite"`
	// The resource group name of the VpnGateway.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Routing weight for vpn connection.
	RoutingWeight *int `pulumi:"routingWeight"`
	// SharedKey for the vpn connection.
	SharedKey *string `pulumi:"sharedKey"`
	// Use local azure ip to initiate connection.
	UseLocalAzureIpAddress *bool `pulumi:"useLocalAzureIpAddress"`
	// Enable policy-based traffic selectors.
	UsePolicyBasedTrafficSelectors *bool `pulumi:"usePolicyBasedTrafficSelectors"`
	// Connection protocol used for this connection.
	VpnConnectionProtocolType *string `pulumi:"vpnConnectionProtocolType"`
	// List of all vpn site link connections to the gateway.
	VpnLinkConnections []VpnSiteLinkConnection `pulumi:"vpnLinkConnections"`
}

// The set of arguments for constructing a VpnConnection resource.
type VpnConnectionArgs struct {
	// Expected bandwidth in MBPS.
	ConnectionBandwidth pulumi.IntPtrInput
	// The name of the connection.
	ConnectionName pulumi.StringPtrInput
	// EnableBgp flag.
	EnableBgp pulumi.BoolPtrInput
	// Enable internet security.
	EnableInternetSecurity pulumi.BoolPtrInput
	// EnableBgp flag.
	EnableRateLimiting pulumi.BoolPtrInput
	// The name of the gateway.
	GatewayName pulumi.StringInput
	// Resource ID.
	Id pulumi.StringPtrInput
	// The IPSec Policies to be considered by this connection.
	IpsecPolicies IpsecPolicyArrayInput
	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name pulumi.StringPtrInput
	// Id of the connected vpn site.
	RemoteVpnSite SubResourcePtrInput
	// The resource group name of the VpnGateway.
	ResourceGroupName pulumi.StringInput
	// Routing weight for vpn connection.
	RoutingWeight pulumi.IntPtrInput
	// SharedKey for the vpn connection.
	SharedKey pulumi.StringPtrInput
	// Use local azure ip to initiate connection.
	UseLocalAzureIpAddress pulumi.BoolPtrInput
	// Enable policy-based traffic selectors.
	UsePolicyBasedTrafficSelectors pulumi.BoolPtrInput
	// Connection protocol used for this connection.
	VpnConnectionProtocolType pulumi.StringPtrInput
	// List of all vpn site link connections to the gateway.
	VpnLinkConnections VpnSiteLinkConnectionArrayInput
}

func (VpnConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnConnectionArgs)(nil)).Elem()
}

type VpnConnectionInput interface {
	pulumi.Input

	ToVpnConnectionOutput() VpnConnectionOutput
	ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput
}

func (*VpnConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnConnection)(nil)).Elem()
}

func (i *VpnConnection) ToVpnConnectionOutput() VpnConnectionOutput {
	return i.ToVpnConnectionOutputWithContext(context.Background())
}

func (i *VpnConnection) ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionOutput)
}

type VpnConnectionOutput struct{ *pulumi.OutputState }

func (VpnConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnConnection)(nil)).Elem()
}

func (o VpnConnectionOutput) ToVpnConnectionOutput() VpnConnectionOutput {
	return o
}

func (o VpnConnectionOutput) ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput {
	return o
}

// Expected bandwidth in MBPS.
func (o VpnConnectionOutput) ConnectionBandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.IntPtrOutput { return v.ConnectionBandwidth }).(pulumi.IntPtrOutput)
}

// The connection status.
func (o VpnConnectionOutput) ConnectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.ConnectionStatus }).(pulumi.StringOutput)
}

// Egress bytes transferred.
func (o VpnConnectionOutput) EgressBytesTransferred() pulumi.Float64Output {
	return o.ApplyT(func(v *VpnConnection) pulumi.Float64Output { return v.EgressBytesTransferred }).(pulumi.Float64Output)
}

// EnableBgp flag.
func (o VpnConnectionOutput) EnableBgp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.BoolPtrOutput { return v.EnableBgp }).(pulumi.BoolPtrOutput)
}

// Enable internet security.
func (o VpnConnectionOutput) EnableInternetSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.BoolPtrOutput { return v.EnableInternetSecurity }).(pulumi.BoolPtrOutput)
}

// EnableBgp flag.
func (o VpnConnectionOutput) EnableRateLimiting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.BoolPtrOutput { return v.EnableRateLimiting }).(pulumi.BoolPtrOutput)
}

// A unique read-only string that changes whenever the resource is updated.
func (o VpnConnectionOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Ingress bytes transferred.
func (o VpnConnectionOutput) IngressBytesTransferred() pulumi.Float64Output {
	return o.ApplyT(func(v *VpnConnection) pulumi.Float64Output { return v.IngressBytesTransferred }).(pulumi.Float64Output)
}

// The IPSec Policies to be considered by this connection.
func (o VpnConnectionOutput) IpsecPolicies() IpsecPolicyResponseArrayOutput {
	return o.ApplyT(func(v *VpnConnection) IpsecPolicyResponseArrayOutput { return v.IpsecPolicies }).(IpsecPolicyResponseArrayOutput)
}

// The name of the resource that is unique within a resource group. This name can be used to access the resource.
func (o VpnConnectionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The provisioning state of the VPN connection resource.
func (o VpnConnectionOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Id of the connected vpn site.
func (o VpnConnectionOutput) RemoteVpnSite() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *VpnConnection) SubResourceResponsePtrOutput { return v.RemoteVpnSite }).(SubResourceResponsePtrOutput)
}

// Routing weight for vpn connection.
func (o VpnConnectionOutput) RoutingWeight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.IntPtrOutput { return v.RoutingWeight }).(pulumi.IntPtrOutput)
}

// SharedKey for the vpn connection.
func (o VpnConnectionOutput) SharedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringPtrOutput { return v.SharedKey }).(pulumi.StringPtrOutput)
}

// Use local azure ip to initiate connection.
func (o VpnConnectionOutput) UseLocalAzureIpAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.BoolPtrOutput { return v.UseLocalAzureIpAddress }).(pulumi.BoolPtrOutput)
}

// Enable policy-based traffic selectors.
func (o VpnConnectionOutput) UsePolicyBasedTrafficSelectors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.BoolPtrOutput { return v.UsePolicyBasedTrafficSelectors }).(pulumi.BoolPtrOutput)
}

// Connection protocol used for this connection.
func (o VpnConnectionOutput) VpnConnectionProtocolType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringPtrOutput { return v.VpnConnectionProtocolType }).(pulumi.StringPtrOutput)
}

// List of all vpn site link connections to the gateway.
func (o VpnConnectionOutput) VpnLinkConnections() VpnSiteLinkConnectionResponseArrayOutput {
	return o.ApplyT(func(v *VpnConnection) VpnSiteLinkConnectionResponseArrayOutput { return v.VpnLinkConnections }).(VpnSiteLinkConnectionResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(VpnConnectionOutput{})
}
