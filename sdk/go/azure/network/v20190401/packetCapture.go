// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20190401

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Information about packet capture session.
type PacketCapture struct {
	pulumi.CustomResourceState

	// Number of bytes captured per packet, the remaining bytes are truncated.
	BytesToCapturePerPacket pulumi.IntPtrOutput `pulumi:"bytesToCapturePerPacket"`
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringPtrOutput `pulumi:"etag"`
	// A list of packet capture filters.
	Filters PacketCaptureFilterResponseArrayOutput `pulumi:"filters"`
	// Name of the packet capture session.
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state of the packet capture session.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Describes the storage location for a packet capture session.
	StorageLocation PacketCaptureStorageLocationResponseOutput `pulumi:"storageLocation"`
	// The ID of the targeted resource, only VM is currently supported.
	Target pulumi.StringOutput `pulumi:"target"`
	// Maximum duration of the capture session in seconds.
	TimeLimitInSeconds pulumi.IntPtrOutput `pulumi:"timeLimitInSeconds"`
	// Maximum size of the capture output.
	TotalBytesPerSession pulumi.IntPtrOutput `pulumi:"totalBytesPerSession"`
}

// NewPacketCapture registers a new resource with the given unique name, arguments, and options.
func NewPacketCapture(ctx *pulumi.Context,
	name string, args *PacketCaptureArgs, opts ...pulumi.ResourceOption) (*PacketCapture, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkWatcherName == nil {
		return nil, errors.New("invalid value for required argument 'NetworkWatcherName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StorageLocation == nil {
		return nil, errors.New("invalid value for required argument 'StorageLocation'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	if isZero(args.BytesToCapturePerPacket) {
		args.BytesToCapturePerPacket = pulumi.IntPtr(0)
	}
	if isZero(args.TimeLimitInSeconds) {
		args.TimeLimitInSeconds = pulumi.IntPtr(18000)
	}
	if isZero(args.TotalBytesPerSession) {
		args.TotalBytesPerSession = pulumi.IntPtr(1073741824)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:network:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20160901:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20161201:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20170301:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20170601:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20170801:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20170901:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20171001:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20171101:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180101:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180201:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180401:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180601:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180701:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180801:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20181001:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20181101:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20181201:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190201:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190601:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190701:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190801:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190901:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20191101:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20191201:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200301:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200401:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200501:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200601:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200701:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200801:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20201101:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210201:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210301:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210501:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210801:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20220101:PacketCapture"),
		},
	})
	opts = append(opts, aliases)
	var resource PacketCapture
	err := ctx.RegisterResource("azure-native:network/v20190401:PacketCapture", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPacketCapture gets an existing PacketCapture resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPacketCapture(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PacketCaptureState, opts ...pulumi.ResourceOption) (*PacketCapture, error) {
	var resource PacketCapture
	err := ctx.ReadResource("azure-native:network/v20190401:PacketCapture", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PacketCapture resources.
type packetCaptureState struct {
}

type PacketCaptureState struct {
}

func (PacketCaptureState) ElementType() reflect.Type {
	return reflect.TypeOf((*packetCaptureState)(nil)).Elem()
}

type packetCaptureArgs struct {
	// Number of bytes captured per packet, the remaining bytes are truncated.
	BytesToCapturePerPacket *int `pulumi:"bytesToCapturePerPacket"`
	// A list of packet capture filters.
	Filters []PacketCaptureFilter `pulumi:"filters"`
	// The name of the network watcher.
	NetworkWatcherName string `pulumi:"networkWatcherName"`
	// The name of the packet capture session.
	PacketCaptureName *string `pulumi:"packetCaptureName"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Describes the storage location for a packet capture session.
	StorageLocation PacketCaptureStorageLocation `pulumi:"storageLocation"`
	// The ID of the targeted resource, only VM is currently supported.
	Target string `pulumi:"target"`
	// Maximum duration of the capture session in seconds.
	TimeLimitInSeconds *int `pulumi:"timeLimitInSeconds"`
	// Maximum size of the capture output.
	TotalBytesPerSession *int `pulumi:"totalBytesPerSession"`
}

// The set of arguments for constructing a PacketCapture resource.
type PacketCaptureArgs struct {
	// Number of bytes captured per packet, the remaining bytes are truncated.
	BytesToCapturePerPacket pulumi.IntPtrInput
	// A list of packet capture filters.
	Filters PacketCaptureFilterArrayInput
	// The name of the network watcher.
	NetworkWatcherName pulumi.StringInput
	// The name of the packet capture session.
	PacketCaptureName pulumi.StringPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// Describes the storage location for a packet capture session.
	StorageLocation PacketCaptureStorageLocationInput
	// The ID of the targeted resource, only VM is currently supported.
	Target pulumi.StringInput
	// Maximum duration of the capture session in seconds.
	TimeLimitInSeconds pulumi.IntPtrInput
	// Maximum size of the capture output.
	TotalBytesPerSession pulumi.IntPtrInput
}

func (PacketCaptureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*packetCaptureArgs)(nil)).Elem()
}

type PacketCaptureInput interface {
	pulumi.Input

	ToPacketCaptureOutput() PacketCaptureOutput
	ToPacketCaptureOutputWithContext(ctx context.Context) PacketCaptureOutput
}

func (*PacketCapture) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketCapture)(nil)).Elem()
}

func (i *PacketCapture) ToPacketCaptureOutput() PacketCaptureOutput {
	return i.ToPacketCaptureOutputWithContext(context.Background())
}

func (i *PacketCapture) ToPacketCaptureOutputWithContext(ctx context.Context) PacketCaptureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketCaptureOutput)
}

type PacketCaptureOutput struct{ *pulumi.OutputState }

func (PacketCaptureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketCapture)(nil)).Elem()
}

func (o PacketCaptureOutput) ToPacketCaptureOutput() PacketCaptureOutput {
	return o
}

func (o PacketCaptureOutput) ToPacketCaptureOutputWithContext(ctx context.Context) PacketCaptureOutput {
	return o
}

// Number of bytes captured per packet, the remaining bytes are truncated.
func (o PacketCaptureOutput) BytesToCapturePerPacket() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.IntPtrOutput { return v.BytesToCapturePerPacket }).(pulumi.IntPtrOutput)
}

// A unique read-only string that changes whenever the resource is updated.
func (o PacketCaptureOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.StringPtrOutput { return v.Etag }).(pulumi.StringPtrOutput)
}

// A list of packet capture filters.
func (o PacketCaptureOutput) Filters() PacketCaptureFilterResponseArrayOutput {
	return o.ApplyT(func(v *PacketCapture) PacketCaptureFilterResponseArrayOutput { return v.Filters }).(PacketCaptureFilterResponseArrayOutput)
}

// Name of the packet capture session.
func (o PacketCaptureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the packet capture session.
func (o PacketCaptureOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Describes the storage location for a packet capture session.
func (o PacketCaptureOutput) StorageLocation() PacketCaptureStorageLocationResponseOutput {
	return o.ApplyT(func(v *PacketCapture) PacketCaptureStorageLocationResponseOutput { return v.StorageLocation }).(PacketCaptureStorageLocationResponseOutput)
}

// The ID of the targeted resource, only VM is currently supported.
func (o PacketCaptureOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.StringOutput { return v.Target }).(pulumi.StringOutput)
}

// Maximum duration of the capture session in seconds.
func (o PacketCaptureOutput) TimeLimitInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.IntPtrOutput { return v.TimeLimitInSeconds }).(pulumi.IntPtrOutput)
}

// Maximum size of the capture output.
func (o PacketCaptureOutput) TotalBytesPerSession() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.IntPtrOutput { return v.TotalBytesPerSession }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(PacketCaptureOutput{})
}
