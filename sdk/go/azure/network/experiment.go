// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Defines the properties of an Experiment
// API Version: 2019-11-01.
type Experiment struct {
	pulumi.CustomResourceState

	// The description of the details or intents of the Experiment
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The state of the Experiment
	EnabledState pulumi.StringPtrOutput `pulumi:"enabledState"`
	// The endpoint A of an experiment
	EndpointA ExperimentEndpointResponsePtrOutput `pulumi:"endpointA"`
	// The endpoint B of an experiment
	EndpointB ExperimentEndpointResponsePtrOutput `pulumi:"endpointB"`
	// Resource location.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Resource status.
	ResourceState pulumi.StringOutput `pulumi:"resourceState"`
	// The uri to the Script used in the Experiment
	ScriptFileUri pulumi.StringOutput `pulumi:"scriptFileUri"`
	// The description of Experiment status from the server side
	Status pulumi.StringOutput `pulumi:"status"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewExperiment registers a new resource with the given unique name, arguments, and options.
func NewExperiment(ctx *pulumi.Context,
	name string, args *ExperimentArgs, opts ...pulumi.ResourceOption) (*Experiment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProfileName == nil {
		return nil, errors.New("invalid value for required argument 'ProfileName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:network/v20191101:Experiment"),
		},
	})
	opts = append(opts, aliases)
	var resource Experiment
	err := ctx.RegisterResource("azure-native:network:Experiment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExperiment gets an existing Experiment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExperiment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExperimentState, opts ...pulumi.ResourceOption) (*Experiment, error) {
	var resource Experiment
	err := ctx.ReadResource("azure-native:network:Experiment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Experiment resources.
type experimentState struct {
}

type ExperimentState struct {
}

func (ExperimentState) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentState)(nil)).Elem()
}

type experimentArgs struct {
	// The description of the details or intents of the Experiment
	Description *string `pulumi:"description"`
	// The state of the Experiment
	EnabledState *string `pulumi:"enabledState"`
	// The endpoint A of an experiment
	EndpointA *ExperimentEndpoint `pulumi:"endpointA"`
	// The endpoint B of an experiment
	EndpointB *ExperimentEndpoint `pulumi:"endpointB"`
	// The Experiment identifier associated with the Experiment
	ExperimentName *string `pulumi:"experimentName"`
	// Resource location.
	Location *string `pulumi:"location"`
	// The Profile identifier associated with the Tenant and Partner
	ProfileName string `pulumi:"profileName"`
	// Name of the Resource group within the Azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Experiment resource.
type ExperimentArgs struct {
	// The description of the details or intents of the Experiment
	Description pulumi.StringPtrInput
	// The state of the Experiment
	EnabledState pulumi.StringPtrInput
	// The endpoint A of an experiment
	EndpointA ExperimentEndpointPtrInput
	// The endpoint B of an experiment
	EndpointB ExperimentEndpointPtrInput
	// The Experiment identifier associated with the Experiment
	ExperimentName pulumi.StringPtrInput
	// Resource location.
	Location pulumi.StringPtrInput
	// The Profile identifier associated with the Tenant and Partner
	ProfileName pulumi.StringInput
	// Name of the Resource group within the Azure subscription.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (ExperimentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentArgs)(nil)).Elem()
}

type ExperimentInput interface {
	pulumi.Input

	ToExperimentOutput() ExperimentOutput
	ToExperimentOutputWithContext(ctx context.Context) ExperimentOutput
}

func (*Experiment) ElementType() reflect.Type {
	return reflect.TypeOf((**Experiment)(nil)).Elem()
}

func (i *Experiment) ToExperimentOutput() ExperimentOutput {
	return i.ToExperimentOutputWithContext(context.Background())
}

func (i *Experiment) ToExperimentOutputWithContext(ctx context.Context) ExperimentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentOutput)
}

type ExperimentOutput struct{ *pulumi.OutputState }

func (ExperimentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Experiment)(nil)).Elem()
}

func (o ExperimentOutput) ToExperimentOutput() ExperimentOutput {
	return o
}

func (o ExperimentOutput) ToExperimentOutputWithContext(ctx context.Context) ExperimentOutput {
	return o
}

// The description of the details or intents of the Experiment
func (o ExperimentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The state of the Experiment
func (o ExperimentOutput) EnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringPtrOutput { return v.EnabledState }).(pulumi.StringPtrOutput)
}

// The endpoint A of an experiment
func (o ExperimentOutput) EndpointA() ExperimentEndpointResponsePtrOutput {
	return o.ApplyT(func(v *Experiment) ExperimentEndpointResponsePtrOutput { return v.EndpointA }).(ExperimentEndpointResponsePtrOutput)
}

// The endpoint B of an experiment
func (o ExperimentOutput) EndpointB() ExperimentEndpointResponsePtrOutput {
	return o.ApplyT(func(v *Experiment) ExperimentEndpointResponsePtrOutput { return v.EndpointB }).(ExperimentEndpointResponsePtrOutput)
}

// Resource location.
func (o ExperimentOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o ExperimentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Resource status.
func (o ExperimentOutput) ResourceState() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.ResourceState }).(pulumi.StringOutput)
}

// The uri to the Script used in the Experiment
func (o ExperimentOutput) ScriptFileUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.ScriptFileUri }).(pulumi.StringOutput)
}

// The description of Experiment status from the server side
func (o ExperimentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Resource tags.
func (o ExperimentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type.
func (o ExperimentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ExperimentOutput{})
}
