// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Backend address of a frontDoor load balancer.
type Backend struct {
	// Location of the backend (IP address or FQDN)
	Address *string `pulumi:"address"`
	// The value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.
	BackendHostHeader *string `pulumi:"backendHostHeader"`
	// Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'
	EnabledState *string `pulumi:"enabledState"`
	// The HTTP TCP port number. Must be between 1 and 65535.
	HttpPort *int `pulumi:"httpPort"`
	// The HTTPS TCP port number. Must be between 1 and 65535.
	HttpsPort *int `pulumi:"httpsPort"`
	// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.
	Priority *int `pulumi:"priority"`
	// The Alias of the Private Link resource. Populating this optional field indicates that this backend is 'Private'
	PrivateLinkAlias *string `pulumi:"privateLinkAlias"`
	// A custom message to be included in the approval request to connect to the Private Link
	PrivateLinkApprovalMessage *string `pulumi:"privateLinkApprovalMessage"`
	// Weight of this endpoint for load balancing purposes.
	Weight *int `pulumi:"weight"`
}

// BackendInput is an input type that accepts BackendArgs and BackendOutput values.
// You can construct a concrete instance of `BackendInput` via:
//
//          BackendArgs{...}
type BackendInput interface {
	pulumi.Input

	ToBackendOutput() BackendOutput
	ToBackendOutputWithContext(context.Context) BackendOutput
}

// Backend address of a frontDoor load balancer.
type BackendArgs struct {
	// Location of the backend (IP address or FQDN)
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.
	BackendHostHeader pulumi.StringPtrInput `pulumi:"backendHostHeader"`
	// Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'
	EnabledState pulumi.StringPtrInput `pulumi:"enabledState"`
	// The HTTP TCP port number. Must be between 1 and 65535.
	HttpPort pulumi.IntPtrInput `pulumi:"httpPort"`
	// The HTTPS TCP port number. Must be between 1 and 65535.
	HttpsPort pulumi.IntPtrInput `pulumi:"httpsPort"`
	// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The Alias of the Private Link resource. Populating this optional field indicates that this backend is 'Private'
	PrivateLinkAlias pulumi.StringPtrInput `pulumi:"privateLinkAlias"`
	// A custom message to be included in the approval request to connect to the Private Link
	PrivateLinkApprovalMessage pulumi.StringPtrInput `pulumi:"privateLinkApprovalMessage"`
	// Weight of this endpoint for load balancing purposes.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (BackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Backend)(nil)).Elem()
}

func (i BackendArgs) ToBackendOutput() BackendOutput {
	return i.ToBackendOutputWithContext(context.Background())
}

func (i BackendArgs) ToBackendOutputWithContext(ctx context.Context) BackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendOutput)
}

// BackendArrayInput is an input type that accepts BackendArray and BackendArrayOutput values.
// You can construct a concrete instance of `BackendArrayInput` via:
//
//          BackendArray{ BackendArgs{...} }
type BackendArrayInput interface {
	pulumi.Input

	ToBackendArrayOutput() BackendArrayOutput
	ToBackendArrayOutputWithContext(context.Context) BackendArrayOutput
}

type BackendArray []BackendInput

func (BackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Backend)(nil)).Elem()
}

func (i BackendArray) ToBackendArrayOutput() BackendArrayOutput {
	return i.ToBackendArrayOutputWithContext(context.Background())
}

func (i BackendArray) ToBackendArrayOutputWithContext(ctx context.Context) BackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendArrayOutput)
}

// Backend address of a frontDoor load balancer.
type BackendOutput struct{ *pulumi.OutputState }

func (BackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Backend)(nil)).Elem()
}

func (o BackendOutput) ToBackendOutput() BackendOutput {
	return o
}

func (o BackendOutput) ToBackendOutputWithContext(ctx context.Context) BackendOutput {
	return o
}

// Location of the backend (IP address or FQDN)
func (o BackendOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Backend) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.
func (o BackendOutput) BackendHostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Backend) *string { return v.BackendHostHeader }).(pulumi.StringPtrOutput)
}

// Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'
func (o BackendOutput) EnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Backend) *string { return v.EnabledState }).(pulumi.StringPtrOutput)
}

// The HTTP TCP port number. Must be between 1 and 65535.
func (o BackendOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Backend) *int { return v.HttpPort }).(pulumi.IntPtrOutput)
}

// The HTTPS TCP port number. Must be between 1 and 65535.
func (o BackendOutput) HttpsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Backend) *int { return v.HttpsPort }).(pulumi.IntPtrOutput)
}

// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.
func (o BackendOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Backend) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The Alias of the Private Link resource. Populating this optional field indicates that this backend is 'Private'
func (o BackendOutput) PrivateLinkAlias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Backend) *string { return v.PrivateLinkAlias }).(pulumi.StringPtrOutput)
}

// A custom message to be included in the approval request to connect to the Private Link
func (o BackendOutput) PrivateLinkApprovalMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Backend) *string { return v.PrivateLinkApprovalMessage }).(pulumi.StringPtrOutput)
}

// Weight of this endpoint for load balancing purposes.
func (o BackendOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Backend) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type BackendArrayOutput struct{ *pulumi.OutputState }

func (BackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Backend)(nil)).Elem()
}

func (o BackendArrayOutput) ToBackendArrayOutput() BackendArrayOutput {
	return o
}

func (o BackendArrayOutput) ToBackendArrayOutputWithContext(ctx context.Context) BackendArrayOutput {
	return o
}

func (o BackendArrayOutput) Index(i pulumi.IntInput) BackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Backend {
		return vs[0].([]Backend)[vs[1].(int)]
	}).(BackendOutput)
}

// A backend pool is a collection of backends that can be routed to.
type BackendPool struct {
	// The set of backends for this pool
	Backends []Backend `pulumi:"backends"`
	// L7 health probe settings for a backend pool
	HealthProbeSettings *SubResource `pulumi:"healthProbeSettings"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// Load balancing settings for a backend pool
	LoadBalancingSettings *SubResource `pulumi:"loadBalancingSettings"`
	// Resource name.
	Name *string `pulumi:"name"`
}

// BackendPoolInput is an input type that accepts BackendPoolArgs and BackendPoolOutput values.
// You can construct a concrete instance of `BackendPoolInput` via:
//
//          BackendPoolArgs{...}
type BackendPoolInput interface {
	pulumi.Input

	ToBackendPoolOutput() BackendPoolOutput
	ToBackendPoolOutputWithContext(context.Context) BackendPoolOutput
}

// A backend pool is a collection of backends that can be routed to.
type BackendPoolArgs struct {
	// The set of backends for this pool
	Backends BackendArrayInput `pulumi:"backends"`
	// L7 health probe settings for a backend pool
	HealthProbeSettings SubResourcePtrInput `pulumi:"healthProbeSettings"`
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Load balancing settings for a backend pool
	LoadBalancingSettings SubResourcePtrInput `pulumi:"loadBalancingSettings"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (BackendPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPool)(nil)).Elem()
}

func (i BackendPoolArgs) ToBackendPoolOutput() BackendPoolOutput {
	return i.ToBackendPoolOutputWithContext(context.Background())
}

func (i BackendPoolArgs) ToBackendPoolOutputWithContext(ctx context.Context) BackendPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolOutput)
}

// BackendPoolArrayInput is an input type that accepts BackendPoolArray and BackendPoolArrayOutput values.
// You can construct a concrete instance of `BackendPoolArrayInput` via:
//
//          BackendPoolArray{ BackendPoolArgs{...} }
type BackendPoolArrayInput interface {
	pulumi.Input

	ToBackendPoolArrayOutput() BackendPoolArrayOutput
	ToBackendPoolArrayOutputWithContext(context.Context) BackendPoolArrayOutput
}

type BackendPoolArray []BackendPoolInput

func (BackendPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendPool)(nil)).Elem()
}

func (i BackendPoolArray) ToBackendPoolArrayOutput() BackendPoolArrayOutput {
	return i.ToBackendPoolArrayOutputWithContext(context.Background())
}

func (i BackendPoolArray) ToBackendPoolArrayOutputWithContext(ctx context.Context) BackendPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolArrayOutput)
}

// A backend pool is a collection of backends that can be routed to.
type BackendPoolOutput struct{ *pulumi.OutputState }

func (BackendPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPool)(nil)).Elem()
}

func (o BackendPoolOutput) ToBackendPoolOutput() BackendPoolOutput {
	return o
}

func (o BackendPoolOutput) ToBackendPoolOutputWithContext(ctx context.Context) BackendPoolOutput {
	return o
}

// The set of backends for this pool
func (o BackendPoolOutput) Backends() BackendArrayOutput {
	return o.ApplyT(func(v BackendPool) []Backend { return v.Backends }).(BackendArrayOutput)
}

// L7 health probe settings for a backend pool
func (o BackendPoolOutput) HealthProbeSettings() SubResourcePtrOutput {
	return o.ApplyT(func(v BackendPool) *SubResource { return v.HealthProbeSettings }).(SubResourcePtrOutput)
}

// Resource ID.
func (o BackendPoolOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendPool) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Load balancing settings for a backend pool
func (o BackendPoolOutput) LoadBalancingSettings() SubResourcePtrOutput {
	return o.ApplyT(func(v BackendPool) *SubResource { return v.LoadBalancingSettings }).(SubResourcePtrOutput)
}

// Resource name.
func (o BackendPoolOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendPool) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type BackendPoolArrayOutput struct{ *pulumi.OutputState }

func (BackendPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendPool)(nil)).Elem()
}

func (o BackendPoolArrayOutput) ToBackendPoolArrayOutput() BackendPoolArrayOutput {
	return o
}

func (o BackendPoolArrayOutput) ToBackendPoolArrayOutputWithContext(ctx context.Context) BackendPoolArrayOutput {
	return o
}

func (o BackendPoolArrayOutput) Index(i pulumi.IntInput) BackendPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackendPool {
		return vs[0].([]BackendPool)[vs[1].(int)]
	}).(BackendPoolOutput)
}

// A backend pool is a collection of backends that can be routed to.
type BackendPoolResponse struct {
	// The set of backends for this pool
	Backends []BackendResponse `pulumi:"backends"`
	// L7 health probe settings for a backend pool
	HealthProbeSettings *SubResourceResponse `pulumi:"healthProbeSettings"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// Load balancing settings for a backend pool
	LoadBalancingSettings *SubResourceResponse `pulumi:"loadBalancingSettings"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Resource status.
	ResourceState string `pulumi:"resourceState"`
	// Resource type.
	Type string `pulumi:"type"`
}

// BackendPoolResponseInput is an input type that accepts BackendPoolResponseArgs and BackendPoolResponseOutput values.
// You can construct a concrete instance of `BackendPoolResponseInput` via:
//
//          BackendPoolResponseArgs{...}
type BackendPoolResponseInput interface {
	pulumi.Input

	ToBackendPoolResponseOutput() BackendPoolResponseOutput
	ToBackendPoolResponseOutputWithContext(context.Context) BackendPoolResponseOutput
}

// A backend pool is a collection of backends that can be routed to.
type BackendPoolResponseArgs struct {
	// The set of backends for this pool
	Backends BackendResponseArrayInput `pulumi:"backends"`
	// L7 health probe settings for a backend pool
	HealthProbeSettings SubResourceResponsePtrInput `pulumi:"healthProbeSettings"`
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Load balancing settings for a backend pool
	LoadBalancingSettings SubResourceResponsePtrInput `pulumi:"loadBalancingSettings"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Resource status.
	ResourceState pulumi.StringInput `pulumi:"resourceState"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BackendPoolResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPoolResponse)(nil)).Elem()
}

func (i BackendPoolResponseArgs) ToBackendPoolResponseOutput() BackendPoolResponseOutput {
	return i.ToBackendPoolResponseOutputWithContext(context.Background())
}

func (i BackendPoolResponseArgs) ToBackendPoolResponseOutputWithContext(ctx context.Context) BackendPoolResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolResponseOutput)
}

// BackendPoolResponseArrayInput is an input type that accepts BackendPoolResponseArray and BackendPoolResponseArrayOutput values.
// You can construct a concrete instance of `BackendPoolResponseArrayInput` via:
//
//          BackendPoolResponseArray{ BackendPoolResponseArgs{...} }
type BackendPoolResponseArrayInput interface {
	pulumi.Input

	ToBackendPoolResponseArrayOutput() BackendPoolResponseArrayOutput
	ToBackendPoolResponseArrayOutputWithContext(context.Context) BackendPoolResponseArrayOutput
}

type BackendPoolResponseArray []BackendPoolResponseInput

func (BackendPoolResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendPoolResponse)(nil)).Elem()
}

func (i BackendPoolResponseArray) ToBackendPoolResponseArrayOutput() BackendPoolResponseArrayOutput {
	return i.ToBackendPoolResponseArrayOutputWithContext(context.Background())
}

func (i BackendPoolResponseArray) ToBackendPoolResponseArrayOutputWithContext(ctx context.Context) BackendPoolResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolResponseArrayOutput)
}

// A backend pool is a collection of backends that can be routed to.
type BackendPoolResponseOutput struct{ *pulumi.OutputState }

func (BackendPoolResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPoolResponse)(nil)).Elem()
}

func (o BackendPoolResponseOutput) ToBackendPoolResponseOutput() BackendPoolResponseOutput {
	return o
}

func (o BackendPoolResponseOutput) ToBackendPoolResponseOutputWithContext(ctx context.Context) BackendPoolResponseOutput {
	return o
}

// The set of backends for this pool
func (o BackendPoolResponseOutput) Backends() BackendResponseArrayOutput {
	return o.ApplyT(func(v BackendPoolResponse) []BackendResponse { return v.Backends }).(BackendResponseArrayOutput)
}

// L7 health probe settings for a backend pool
func (o BackendPoolResponseOutput) HealthProbeSettings() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v BackendPoolResponse) *SubResourceResponse { return v.HealthProbeSettings }).(SubResourceResponsePtrOutput)
}

// Resource ID.
func (o BackendPoolResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendPoolResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Load balancing settings for a backend pool
func (o BackendPoolResponseOutput) LoadBalancingSettings() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v BackendPoolResponse) *SubResourceResponse { return v.LoadBalancingSettings }).(SubResourceResponsePtrOutput)
}

// Resource name.
func (o BackendPoolResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendPoolResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Resource status.
func (o BackendPoolResponseOutput) ResourceState() pulumi.StringOutput {
	return o.ApplyT(func(v BackendPoolResponse) string { return v.ResourceState }).(pulumi.StringOutput)
}

// Resource type.
func (o BackendPoolResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BackendPoolResponse) string { return v.Type }).(pulumi.StringOutput)
}

type BackendPoolResponseArrayOutput struct{ *pulumi.OutputState }

func (BackendPoolResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendPoolResponse)(nil)).Elem()
}

func (o BackendPoolResponseArrayOutput) ToBackendPoolResponseArrayOutput() BackendPoolResponseArrayOutput {
	return o
}

func (o BackendPoolResponseArrayOutput) ToBackendPoolResponseArrayOutputWithContext(ctx context.Context) BackendPoolResponseArrayOutput {
	return o
}

func (o BackendPoolResponseArrayOutput) Index(i pulumi.IntInput) BackendPoolResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackendPoolResponse {
		return vs[0].([]BackendPoolResponse)[vs[1].(int)]
	}).(BackendPoolResponseOutput)
}

// Settings that apply to all backend pools.
type BackendPoolsSettings struct {
	// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
	EnforceCertificateNameCheck *string `pulumi:"enforceCertificateNameCheck"`
	// Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
	SendRecvTimeoutSeconds *int `pulumi:"sendRecvTimeoutSeconds"`
}

// BackendPoolsSettingsInput is an input type that accepts BackendPoolsSettingsArgs and BackendPoolsSettingsOutput values.
// You can construct a concrete instance of `BackendPoolsSettingsInput` via:
//
//          BackendPoolsSettingsArgs{...}
type BackendPoolsSettingsInput interface {
	pulumi.Input

	ToBackendPoolsSettingsOutput() BackendPoolsSettingsOutput
	ToBackendPoolsSettingsOutputWithContext(context.Context) BackendPoolsSettingsOutput
}

// Settings that apply to all backend pools.
type BackendPoolsSettingsArgs struct {
	// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
	EnforceCertificateNameCheck pulumi.StringPtrInput `pulumi:"enforceCertificateNameCheck"`
	// Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
	SendRecvTimeoutSeconds pulumi.IntPtrInput `pulumi:"sendRecvTimeoutSeconds"`
}

func (BackendPoolsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPoolsSettings)(nil)).Elem()
}

func (i BackendPoolsSettingsArgs) ToBackendPoolsSettingsOutput() BackendPoolsSettingsOutput {
	return i.ToBackendPoolsSettingsOutputWithContext(context.Background())
}

func (i BackendPoolsSettingsArgs) ToBackendPoolsSettingsOutputWithContext(ctx context.Context) BackendPoolsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolsSettingsOutput)
}

func (i BackendPoolsSettingsArgs) ToBackendPoolsSettingsPtrOutput() BackendPoolsSettingsPtrOutput {
	return i.ToBackendPoolsSettingsPtrOutputWithContext(context.Background())
}

func (i BackendPoolsSettingsArgs) ToBackendPoolsSettingsPtrOutputWithContext(ctx context.Context) BackendPoolsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolsSettingsOutput).ToBackendPoolsSettingsPtrOutputWithContext(ctx)
}

// BackendPoolsSettingsPtrInput is an input type that accepts BackendPoolsSettingsArgs, BackendPoolsSettingsPtr and BackendPoolsSettingsPtrOutput values.
// You can construct a concrete instance of `BackendPoolsSettingsPtrInput` via:
//
//          BackendPoolsSettingsArgs{...}
//
//  or:
//
//          nil
type BackendPoolsSettingsPtrInput interface {
	pulumi.Input

	ToBackendPoolsSettingsPtrOutput() BackendPoolsSettingsPtrOutput
	ToBackendPoolsSettingsPtrOutputWithContext(context.Context) BackendPoolsSettingsPtrOutput
}

type backendPoolsSettingsPtrType BackendPoolsSettingsArgs

func BackendPoolsSettingsPtr(v *BackendPoolsSettingsArgs) BackendPoolsSettingsPtrInput {
	return (*backendPoolsSettingsPtrType)(v)
}

func (*backendPoolsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendPoolsSettings)(nil)).Elem()
}

func (i *backendPoolsSettingsPtrType) ToBackendPoolsSettingsPtrOutput() BackendPoolsSettingsPtrOutput {
	return i.ToBackendPoolsSettingsPtrOutputWithContext(context.Background())
}

func (i *backendPoolsSettingsPtrType) ToBackendPoolsSettingsPtrOutputWithContext(ctx context.Context) BackendPoolsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolsSettingsPtrOutput)
}

// Settings that apply to all backend pools.
type BackendPoolsSettingsOutput struct{ *pulumi.OutputState }

func (BackendPoolsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPoolsSettings)(nil)).Elem()
}

func (o BackendPoolsSettingsOutput) ToBackendPoolsSettingsOutput() BackendPoolsSettingsOutput {
	return o
}

func (o BackendPoolsSettingsOutput) ToBackendPoolsSettingsOutputWithContext(ctx context.Context) BackendPoolsSettingsOutput {
	return o
}

func (o BackendPoolsSettingsOutput) ToBackendPoolsSettingsPtrOutput() BackendPoolsSettingsPtrOutput {
	return o.ToBackendPoolsSettingsPtrOutputWithContext(context.Background())
}

func (o BackendPoolsSettingsOutput) ToBackendPoolsSettingsPtrOutputWithContext(ctx context.Context) BackendPoolsSettingsPtrOutput {
	return o.ApplyT(func(v BackendPoolsSettings) *BackendPoolsSettings {
		return &v
	}).(BackendPoolsSettingsPtrOutput)
}

// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
func (o BackendPoolsSettingsOutput) EnforceCertificateNameCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendPoolsSettings) *string { return v.EnforceCertificateNameCheck }).(pulumi.StringPtrOutput)
}

// Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
func (o BackendPoolsSettingsOutput) SendRecvTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendPoolsSettings) *int { return v.SendRecvTimeoutSeconds }).(pulumi.IntPtrOutput)
}

type BackendPoolsSettingsPtrOutput struct{ *pulumi.OutputState }

func (BackendPoolsSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendPoolsSettings)(nil)).Elem()
}

func (o BackendPoolsSettingsPtrOutput) ToBackendPoolsSettingsPtrOutput() BackendPoolsSettingsPtrOutput {
	return o
}

func (o BackendPoolsSettingsPtrOutput) ToBackendPoolsSettingsPtrOutputWithContext(ctx context.Context) BackendPoolsSettingsPtrOutput {
	return o
}

func (o BackendPoolsSettingsPtrOutput) Elem() BackendPoolsSettingsOutput {
	return o.ApplyT(func(v *BackendPoolsSettings) BackendPoolsSettings { return *v }).(BackendPoolsSettingsOutput)
}

// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
func (o BackendPoolsSettingsPtrOutput) EnforceCertificateNameCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendPoolsSettings) *string {
		if v == nil {
			return nil
		}
		return v.EnforceCertificateNameCheck
	}).(pulumi.StringPtrOutput)
}

// Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
func (o BackendPoolsSettingsPtrOutput) SendRecvTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendPoolsSettings) *int {
		if v == nil {
			return nil
		}
		return v.SendRecvTimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// Settings that apply to all backend pools.
type BackendPoolsSettingsResponse struct {
	// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
	EnforceCertificateNameCheck *string `pulumi:"enforceCertificateNameCheck"`
	// Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
	SendRecvTimeoutSeconds *int `pulumi:"sendRecvTimeoutSeconds"`
}

// BackendPoolsSettingsResponseInput is an input type that accepts BackendPoolsSettingsResponseArgs and BackendPoolsSettingsResponseOutput values.
// You can construct a concrete instance of `BackendPoolsSettingsResponseInput` via:
//
//          BackendPoolsSettingsResponseArgs{...}
type BackendPoolsSettingsResponseInput interface {
	pulumi.Input

	ToBackendPoolsSettingsResponseOutput() BackendPoolsSettingsResponseOutput
	ToBackendPoolsSettingsResponseOutputWithContext(context.Context) BackendPoolsSettingsResponseOutput
}

// Settings that apply to all backend pools.
type BackendPoolsSettingsResponseArgs struct {
	// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
	EnforceCertificateNameCheck pulumi.StringPtrInput `pulumi:"enforceCertificateNameCheck"`
	// Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
	SendRecvTimeoutSeconds pulumi.IntPtrInput `pulumi:"sendRecvTimeoutSeconds"`
}

func (BackendPoolsSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPoolsSettingsResponse)(nil)).Elem()
}

func (i BackendPoolsSettingsResponseArgs) ToBackendPoolsSettingsResponseOutput() BackendPoolsSettingsResponseOutput {
	return i.ToBackendPoolsSettingsResponseOutputWithContext(context.Background())
}

func (i BackendPoolsSettingsResponseArgs) ToBackendPoolsSettingsResponseOutputWithContext(ctx context.Context) BackendPoolsSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolsSettingsResponseOutput)
}

func (i BackendPoolsSettingsResponseArgs) ToBackendPoolsSettingsResponsePtrOutput() BackendPoolsSettingsResponsePtrOutput {
	return i.ToBackendPoolsSettingsResponsePtrOutputWithContext(context.Background())
}

func (i BackendPoolsSettingsResponseArgs) ToBackendPoolsSettingsResponsePtrOutputWithContext(ctx context.Context) BackendPoolsSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolsSettingsResponseOutput).ToBackendPoolsSettingsResponsePtrOutputWithContext(ctx)
}

// BackendPoolsSettingsResponsePtrInput is an input type that accepts BackendPoolsSettingsResponseArgs, BackendPoolsSettingsResponsePtr and BackendPoolsSettingsResponsePtrOutput values.
// You can construct a concrete instance of `BackendPoolsSettingsResponsePtrInput` via:
//
//          BackendPoolsSettingsResponseArgs{...}
//
//  or:
//
//          nil
type BackendPoolsSettingsResponsePtrInput interface {
	pulumi.Input

	ToBackendPoolsSettingsResponsePtrOutput() BackendPoolsSettingsResponsePtrOutput
	ToBackendPoolsSettingsResponsePtrOutputWithContext(context.Context) BackendPoolsSettingsResponsePtrOutput
}

type backendPoolsSettingsResponsePtrType BackendPoolsSettingsResponseArgs

func BackendPoolsSettingsResponsePtr(v *BackendPoolsSettingsResponseArgs) BackendPoolsSettingsResponsePtrInput {
	return (*backendPoolsSettingsResponsePtrType)(v)
}

func (*backendPoolsSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendPoolsSettingsResponse)(nil)).Elem()
}

func (i *backendPoolsSettingsResponsePtrType) ToBackendPoolsSettingsResponsePtrOutput() BackendPoolsSettingsResponsePtrOutput {
	return i.ToBackendPoolsSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *backendPoolsSettingsResponsePtrType) ToBackendPoolsSettingsResponsePtrOutputWithContext(ctx context.Context) BackendPoolsSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolsSettingsResponsePtrOutput)
}

// Settings that apply to all backend pools.
type BackendPoolsSettingsResponseOutput struct{ *pulumi.OutputState }

func (BackendPoolsSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPoolsSettingsResponse)(nil)).Elem()
}

func (o BackendPoolsSettingsResponseOutput) ToBackendPoolsSettingsResponseOutput() BackendPoolsSettingsResponseOutput {
	return o
}

func (o BackendPoolsSettingsResponseOutput) ToBackendPoolsSettingsResponseOutputWithContext(ctx context.Context) BackendPoolsSettingsResponseOutput {
	return o
}

func (o BackendPoolsSettingsResponseOutput) ToBackendPoolsSettingsResponsePtrOutput() BackendPoolsSettingsResponsePtrOutput {
	return o.ToBackendPoolsSettingsResponsePtrOutputWithContext(context.Background())
}

func (o BackendPoolsSettingsResponseOutput) ToBackendPoolsSettingsResponsePtrOutputWithContext(ctx context.Context) BackendPoolsSettingsResponsePtrOutput {
	return o.ApplyT(func(v BackendPoolsSettingsResponse) *BackendPoolsSettingsResponse {
		return &v
	}).(BackendPoolsSettingsResponsePtrOutput)
}

// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
func (o BackendPoolsSettingsResponseOutput) EnforceCertificateNameCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendPoolsSettingsResponse) *string { return v.EnforceCertificateNameCheck }).(pulumi.StringPtrOutput)
}

// Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
func (o BackendPoolsSettingsResponseOutput) SendRecvTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendPoolsSettingsResponse) *int { return v.SendRecvTimeoutSeconds }).(pulumi.IntPtrOutput)
}

type BackendPoolsSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (BackendPoolsSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendPoolsSettingsResponse)(nil)).Elem()
}

func (o BackendPoolsSettingsResponsePtrOutput) ToBackendPoolsSettingsResponsePtrOutput() BackendPoolsSettingsResponsePtrOutput {
	return o
}

func (o BackendPoolsSettingsResponsePtrOutput) ToBackendPoolsSettingsResponsePtrOutputWithContext(ctx context.Context) BackendPoolsSettingsResponsePtrOutput {
	return o
}

func (o BackendPoolsSettingsResponsePtrOutput) Elem() BackendPoolsSettingsResponseOutput {
	return o.ApplyT(func(v *BackendPoolsSettingsResponse) BackendPoolsSettingsResponse { return *v }).(BackendPoolsSettingsResponseOutput)
}

// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
func (o BackendPoolsSettingsResponsePtrOutput) EnforceCertificateNameCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendPoolsSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnforceCertificateNameCheck
	}).(pulumi.StringPtrOutput)
}

// Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
func (o BackendPoolsSettingsResponsePtrOutput) SendRecvTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendPoolsSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.SendRecvTimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// Backend address of a frontDoor load balancer.
type BackendResponse struct {
	// Location of the backend (IP address or FQDN)
	Address *string `pulumi:"address"`
	// The value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.
	BackendHostHeader *string `pulumi:"backendHostHeader"`
	// Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'
	EnabledState *string `pulumi:"enabledState"`
	// The HTTP TCP port number. Must be between 1 and 65535.
	HttpPort *int `pulumi:"httpPort"`
	// The HTTPS TCP port number. Must be between 1 and 65535.
	HttpsPort *int `pulumi:"httpsPort"`
	// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.
	Priority *int `pulumi:"priority"`
	// The Approval status for the connection to the Private Link
	PrivateEndpointStatus string `pulumi:"privateEndpointStatus"`
	// The Alias of the Private Link resource. Populating this optional field indicates that this backend is 'Private'
	PrivateLinkAlias *string `pulumi:"privateLinkAlias"`
	// A custom message to be included in the approval request to connect to the Private Link
	PrivateLinkApprovalMessage *string `pulumi:"privateLinkApprovalMessage"`
	// Weight of this endpoint for load balancing purposes.
	Weight *int `pulumi:"weight"`
}

// BackendResponseInput is an input type that accepts BackendResponseArgs and BackendResponseOutput values.
// You can construct a concrete instance of `BackendResponseInput` via:
//
//          BackendResponseArgs{...}
type BackendResponseInput interface {
	pulumi.Input

	ToBackendResponseOutput() BackendResponseOutput
	ToBackendResponseOutputWithContext(context.Context) BackendResponseOutput
}

// Backend address of a frontDoor load balancer.
type BackendResponseArgs struct {
	// Location of the backend (IP address or FQDN)
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.
	BackendHostHeader pulumi.StringPtrInput `pulumi:"backendHostHeader"`
	// Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'
	EnabledState pulumi.StringPtrInput `pulumi:"enabledState"`
	// The HTTP TCP port number. Must be between 1 and 65535.
	HttpPort pulumi.IntPtrInput `pulumi:"httpPort"`
	// The HTTPS TCP port number. Must be between 1 and 65535.
	HttpsPort pulumi.IntPtrInput `pulumi:"httpsPort"`
	// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The Approval status for the connection to the Private Link
	PrivateEndpointStatus pulumi.StringInput `pulumi:"privateEndpointStatus"`
	// The Alias of the Private Link resource. Populating this optional field indicates that this backend is 'Private'
	PrivateLinkAlias pulumi.StringPtrInput `pulumi:"privateLinkAlias"`
	// A custom message to be included in the approval request to connect to the Private Link
	PrivateLinkApprovalMessage pulumi.StringPtrInput `pulumi:"privateLinkApprovalMessage"`
	// Weight of this endpoint for load balancing purposes.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (BackendResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendResponse)(nil)).Elem()
}

func (i BackendResponseArgs) ToBackendResponseOutput() BackendResponseOutput {
	return i.ToBackendResponseOutputWithContext(context.Background())
}

func (i BackendResponseArgs) ToBackendResponseOutputWithContext(ctx context.Context) BackendResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendResponseOutput)
}

// BackendResponseArrayInput is an input type that accepts BackendResponseArray and BackendResponseArrayOutput values.
// You can construct a concrete instance of `BackendResponseArrayInput` via:
//
//          BackendResponseArray{ BackendResponseArgs{...} }
type BackendResponseArrayInput interface {
	pulumi.Input

	ToBackendResponseArrayOutput() BackendResponseArrayOutput
	ToBackendResponseArrayOutputWithContext(context.Context) BackendResponseArrayOutput
}

type BackendResponseArray []BackendResponseInput

func (BackendResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendResponse)(nil)).Elem()
}

func (i BackendResponseArray) ToBackendResponseArrayOutput() BackendResponseArrayOutput {
	return i.ToBackendResponseArrayOutputWithContext(context.Background())
}

func (i BackendResponseArray) ToBackendResponseArrayOutputWithContext(ctx context.Context) BackendResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendResponseArrayOutput)
}

// Backend address of a frontDoor load balancer.
type BackendResponseOutput struct{ *pulumi.OutputState }

func (BackendResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendResponse)(nil)).Elem()
}

func (o BackendResponseOutput) ToBackendResponseOutput() BackendResponseOutput {
	return o
}

func (o BackendResponseOutput) ToBackendResponseOutputWithContext(ctx context.Context) BackendResponseOutput {
	return o
}

// Location of the backend (IP address or FQDN)
func (o BackendResponseOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendResponse) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.
func (o BackendResponseOutput) BackendHostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendResponse) *string { return v.BackendHostHeader }).(pulumi.StringPtrOutput)
}

// Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'
func (o BackendResponseOutput) EnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendResponse) *string { return v.EnabledState }).(pulumi.StringPtrOutput)
}

// The HTTP TCP port number. Must be between 1 and 65535.
func (o BackendResponseOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendResponse) *int { return v.HttpPort }).(pulumi.IntPtrOutput)
}

// The HTTPS TCP port number. Must be between 1 and 65535.
func (o BackendResponseOutput) HttpsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendResponse) *int { return v.HttpsPort }).(pulumi.IntPtrOutput)
}

// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.
func (o BackendResponseOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendResponse) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The Approval status for the connection to the Private Link
func (o BackendResponseOutput) PrivateEndpointStatus() pulumi.StringOutput {
	return o.ApplyT(func(v BackendResponse) string { return v.PrivateEndpointStatus }).(pulumi.StringOutput)
}

// The Alias of the Private Link resource. Populating this optional field indicates that this backend is 'Private'
func (o BackendResponseOutput) PrivateLinkAlias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendResponse) *string { return v.PrivateLinkAlias }).(pulumi.StringPtrOutput)
}

// A custom message to be included in the approval request to connect to the Private Link
func (o BackendResponseOutput) PrivateLinkApprovalMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendResponse) *string { return v.PrivateLinkApprovalMessage }).(pulumi.StringPtrOutput)
}

// Weight of this endpoint for load balancing purposes.
func (o BackendResponseOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendResponse) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type BackendResponseArrayOutput struct{ *pulumi.OutputState }

func (BackendResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendResponse)(nil)).Elem()
}

func (o BackendResponseArrayOutput) ToBackendResponseArrayOutput() BackendResponseArrayOutput {
	return o
}

func (o BackendResponseArrayOutput) ToBackendResponseArrayOutputWithContext(ctx context.Context) BackendResponseArrayOutput {
	return o
}

func (o BackendResponseArrayOutput) Index(i pulumi.IntInput) BackendResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackendResponse {
		return vs[0].([]BackendResponse)[vs[1].(int)]
	}).(BackendResponseOutput)
}

// Caching settings for a caching-type route. To disable caching, do not provide a cacheConfiguration object.
type CacheConfiguration struct {
	// The duration for which the content needs to be cached. Allowed format is in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations). HTTP requires the value to be no more than a year
	CacheDuration *string `pulumi:"cacheDuration"`
	// Whether to use dynamic compression for cached content
	DynamicCompression *string `pulumi:"dynamicCompression"`
	// Treatment of URL query terms when forming the cache key.
	QueryParameterStripDirective *string `pulumi:"queryParameterStripDirective"`
	// query parameters to include or exclude (comma separated).
	QueryParameters *string `pulumi:"queryParameters"`
}

// CacheConfigurationInput is an input type that accepts CacheConfigurationArgs and CacheConfigurationOutput values.
// You can construct a concrete instance of `CacheConfigurationInput` via:
//
//          CacheConfigurationArgs{...}
type CacheConfigurationInput interface {
	pulumi.Input

	ToCacheConfigurationOutput() CacheConfigurationOutput
	ToCacheConfigurationOutputWithContext(context.Context) CacheConfigurationOutput
}

// Caching settings for a caching-type route. To disable caching, do not provide a cacheConfiguration object.
type CacheConfigurationArgs struct {
	// The duration for which the content needs to be cached. Allowed format is in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations). HTTP requires the value to be no more than a year
	CacheDuration pulumi.StringPtrInput `pulumi:"cacheDuration"`
	// Whether to use dynamic compression for cached content
	DynamicCompression pulumi.StringPtrInput `pulumi:"dynamicCompression"`
	// Treatment of URL query terms when forming the cache key.
	QueryParameterStripDirective pulumi.StringPtrInput `pulumi:"queryParameterStripDirective"`
	// query parameters to include or exclude (comma separated).
	QueryParameters pulumi.StringPtrInput `pulumi:"queryParameters"`
}

func (CacheConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheConfiguration)(nil)).Elem()
}

func (i CacheConfigurationArgs) ToCacheConfigurationOutput() CacheConfigurationOutput {
	return i.ToCacheConfigurationOutputWithContext(context.Background())
}

func (i CacheConfigurationArgs) ToCacheConfigurationOutputWithContext(ctx context.Context) CacheConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheConfigurationOutput)
}

func (i CacheConfigurationArgs) ToCacheConfigurationPtrOutput() CacheConfigurationPtrOutput {
	return i.ToCacheConfigurationPtrOutputWithContext(context.Background())
}

func (i CacheConfigurationArgs) ToCacheConfigurationPtrOutputWithContext(ctx context.Context) CacheConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheConfigurationOutput).ToCacheConfigurationPtrOutputWithContext(ctx)
}

// CacheConfigurationPtrInput is an input type that accepts CacheConfigurationArgs, CacheConfigurationPtr and CacheConfigurationPtrOutput values.
// You can construct a concrete instance of `CacheConfigurationPtrInput` via:
//
//          CacheConfigurationArgs{...}
//
//  or:
//
//          nil
type CacheConfigurationPtrInput interface {
	pulumi.Input

	ToCacheConfigurationPtrOutput() CacheConfigurationPtrOutput
	ToCacheConfigurationPtrOutputWithContext(context.Context) CacheConfigurationPtrOutput
}

type cacheConfigurationPtrType CacheConfigurationArgs

func CacheConfigurationPtr(v *CacheConfigurationArgs) CacheConfigurationPtrInput {
	return (*cacheConfigurationPtrType)(v)
}

func (*cacheConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheConfiguration)(nil)).Elem()
}

func (i *cacheConfigurationPtrType) ToCacheConfigurationPtrOutput() CacheConfigurationPtrOutput {
	return i.ToCacheConfigurationPtrOutputWithContext(context.Background())
}

func (i *cacheConfigurationPtrType) ToCacheConfigurationPtrOutputWithContext(ctx context.Context) CacheConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheConfigurationPtrOutput)
}

// Caching settings for a caching-type route. To disable caching, do not provide a cacheConfiguration object.
type CacheConfigurationOutput struct{ *pulumi.OutputState }

func (CacheConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheConfiguration)(nil)).Elem()
}

func (o CacheConfigurationOutput) ToCacheConfigurationOutput() CacheConfigurationOutput {
	return o
}

func (o CacheConfigurationOutput) ToCacheConfigurationOutputWithContext(ctx context.Context) CacheConfigurationOutput {
	return o
}

func (o CacheConfigurationOutput) ToCacheConfigurationPtrOutput() CacheConfigurationPtrOutput {
	return o.ToCacheConfigurationPtrOutputWithContext(context.Background())
}

func (o CacheConfigurationOutput) ToCacheConfigurationPtrOutputWithContext(ctx context.Context) CacheConfigurationPtrOutput {
	return o.ApplyT(func(v CacheConfiguration) *CacheConfiguration {
		return &v
	}).(CacheConfigurationPtrOutput)
}

// The duration for which the content needs to be cached. Allowed format is in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations). HTTP requires the value to be no more than a year
func (o CacheConfigurationOutput) CacheDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheConfiguration) *string { return v.CacheDuration }).(pulumi.StringPtrOutput)
}

// Whether to use dynamic compression for cached content
func (o CacheConfigurationOutput) DynamicCompression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheConfiguration) *string { return v.DynamicCompression }).(pulumi.StringPtrOutput)
}

// Treatment of URL query terms when forming the cache key.
func (o CacheConfigurationOutput) QueryParameterStripDirective() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheConfiguration) *string { return v.QueryParameterStripDirective }).(pulumi.StringPtrOutput)
}

// query parameters to include or exclude (comma separated).
func (o CacheConfigurationOutput) QueryParameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheConfiguration) *string { return v.QueryParameters }).(pulumi.StringPtrOutput)
}

type CacheConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CacheConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheConfiguration)(nil)).Elem()
}

func (o CacheConfigurationPtrOutput) ToCacheConfigurationPtrOutput() CacheConfigurationPtrOutput {
	return o
}

func (o CacheConfigurationPtrOutput) ToCacheConfigurationPtrOutputWithContext(ctx context.Context) CacheConfigurationPtrOutput {
	return o
}

func (o CacheConfigurationPtrOutput) Elem() CacheConfigurationOutput {
	return o.ApplyT(func(v *CacheConfiguration) CacheConfiguration { return *v }).(CacheConfigurationOutput)
}

// The duration for which the content needs to be cached. Allowed format is in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations). HTTP requires the value to be no more than a year
func (o CacheConfigurationPtrOutput) CacheDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CacheDuration
	}).(pulumi.StringPtrOutput)
}

// Whether to use dynamic compression for cached content
func (o CacheConfigurationPtrOutput) DynamicCompression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DynamicCompression
	}).(pulumi.StringPtrOutput)
}

// Treatment of URL query terms when forming the cache key.
func (o CacheConfigurationPtrOutput) QueryParameterStripDirective() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.QueryParameterStripDirective
	}).(pulumi.StringPtrOutput)
}

// query parameters to include or exclude (comma separated).
func (o CacheConfigurationPtrOutput) QueryParameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.QueryParameters
	}).(pulumi.StringPtrOutput)
}

// Caching settings for a caching-type route. To disable caching, do not provide a cacheConfiguration object.
type CacheConfigurationResponse struct {
	// The duration for which the content needs to be cached. Allowed format is in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations). HTTP requires the value to be no more than a year
	CacheDuration *string `pulumi:"cacheDuration"`
	// Whether to use dynamic compression for cached content
	DynamicCompression *string `pulumi:"dynamicCompression"`
	// Treatment of URL query terms when forming the cache key.
	QueryParameterStripDirective *string `pulumi:"queryParameterStripDirective"`
	// query parameters to include or exclude (comma separated).
	QueryParameters *string `pulumi:"queryParameters"`
}

// CacheConfigurationResponseInput is an input type that accepts CacheConfigurationResponseArgs and CacheConfigurationResponseOutput values.
// You can construct a concrete instance of `CacheConfigurationResponseInput` via:
//
//          CacheConfigurationResponseArgs{...}
type CacheConfigurationResponseInput interface {
	pulumi.Input

	ToCacheConfigurationResponseOutput() CacheConfigurationResponseOutput
	ToCacheConfigurationResponseOutputWithContext(context.Context) CacheConfigurationResponseOutput
}

// Caching settings for a caching-type route. To disable caching, do not provide a cacheConfiguration object.
type CacheConfigurationResponseArgs struct {
	// The duration for which the content needs to be cached. Allowed format is in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations). HTTP requires the value to be no more than a year
	CacheDuration pulumi.StringPtrInput `pulumi:"cacheDuration"`
	// Whether to use dynamic compression for cached content
	DynamicCompression pulumi.StringPtrInput `pulumi:"dynamicCompression"`
	// Treatment of URL query terms when forming the cache key.
	QueryParameterStripDirective pulumi.StringPtrInput `pulumi:"queryParameterStripDirective"`
	// query parameters to include or exclude (comma separated).
	QueryParameters pulumi.StringPtrInput `pulumi:"queryParameters"`
}

func (CacheConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheConfigurationResponse)(nil)).Elem()
}

func (i CacheConfigurationResponseArgs) ToCacheConfigurationResponseOutput() CacheConfigurationResponseOutput {
	return i.ToCacheConfigurationResponseOutputWithContext(context.Background())
}

func (i CacheConfigurationResponseArgs) ToCacheConfigurationResponseOutputWithContext(ctx context.Context) CacheConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheConfigurationResponseOutput)
}

func (i CacheConfigurationResponseArgs) ToCacheConfigurationResponsePtrOutput() CacheConfigurationResponsePtrOutput {
	return i.ToCacheConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i CacheConfigurationResponseArgs) ToCacheConfigurationResponsePtrOutputWithContext(ctx context.Context) CacheConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheConfigurationResponseOutput).ToCacheConfigurationResponsePtrOutputWithContext(ctx)
}

// CacheConfigurationResponsePtrInput is an input type that accepts CacheConfigurationResponseArgs, CacheConfigurationResponsePtr and CacheConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `CacheConfigurationResponsePtrInput` via:
//
//          CacheConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type CacheConfigurationResponsePtrInput interface {
	pulumi.Input

	ToCacheConfigurationResponsePtrOutput() CacheConfigurationResponsePtrOutput
	ToCacheConfigurationResponsePtrOutputWithContext(context.Context) CacheConfigurationResponsePtrOutput
}

type cacheConfigurationResponsePtrType CacheConfigurationResponseArgs

func CacheConfigurationResponsePtr(v *CacheConfigurationResponseArgs) CacheConfigurationResponsePtrInput {
	return (*cacheConfigurationResponsePtrType)(v)
}

func (*cacheConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheConfigurationResponse)(nil)).Elem()
}

func (i *cacheConfigurationResponsePtrType) ToCacheConfigurationResponsePtrOutput() CacheConfigurationResponsePtrOutput {
	return i.ToCacheConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *cacheConfigurationResponsePtrType) ToCacheConfigurationResponsePtrOutputWithContext(ctx context.Context) CacheConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheConfigurationResponsePtrOutput)
}

// Caching settings for a caching-type route. To disable caching, do not provide a cacheConfiguration object.
type CacheConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CacheConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheConfigurationResponse)(nil)).Elem()
}

func (o CacheConfigurationResponseOutput) ToCacheConfigurationResponseOutput() CacheConfigurationResponseOutput {
	return o
}

func (o CacheConfigurationResponseOutput) ToCacheConfigurationResponseOutputWithContext(ctx context.Context) CacheConfigurationResponseOutput {
	return o
}

func (o CacheConfigurationResponseOutput) ToCacheConfigurationResponsePtrOutput() CacheConfigurationResponsePtrOutput {
	return o.ToCacheConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o CacheConfigurationResponseOutput) ToCacheConfigurationResponsePtrOutputWithContext(ctx context.Context) CacheConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CacheConfigurationResponse) *CacheConfigurationResponse {
		return &v
	}).(CacheConfigurationResponsePtrOutput)
}

// The duration for which the content needs to be cached. Allowed format is in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations). HTTP requires the value to be no more than a year
func (o CacheConfigurationResponseOutput) CacheDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheConfigurationResponse) *string { return v.CacheDuration }).(pulumi.StringPtrOutput)
}

// Whether to use dynamic compression for cached content
func (o CacheConfigurationResponseOutput) DynamicCompression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheConfigurationResponse) *string { return v.DynamicCompression }).(pulumi.StringPtrOutput)
}

// Treatment of URL query terms when forming the cache key.
func (o CacheConfigurationResponseOutput) QueryParameterStripDirective() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheConfigurationResponse) *string { return v.QueryParameterStripDirective }).(pulumi.StringPtrOutput)
}

// query parameters to include or exclude (comma separated).
func (o CacheConfigurationResponseOutput) QueryParameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheConfigurationResponse) *string { return v.QueryParameters }).(pulumi.StringPtrOutput)
}

type CacheConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheConfigurationResponse)(nil)).Elem()
}

func (o CacheConfigurationResponsePtrOutput) ToCacheConfigurationResponsePtrOutput() CacheConfigurationResponsePtrOutput {
	return o
}

func (o CacheConfigurationResponsePtrOutput) ToCacheConfigurationResponsePtrOutputWithContext(ctx context.Context) CacheConfigurationResponsePtrOutput {
	return o
}

func (o CacheConfigurationResponsePtrOutput) Elem() CacheConfigurationResponseOutput {
	return o.ApplyT(func(v *CacheConfigurationResponse) CacheConfigurationResponse { return *v }).(CacheConfigurationResponseOutput)
}

// The duration for which the content needs to be cached. Allowed format is in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations). HTTP requires the value to be no more than a year
func (o CacheConfigurationResponsePtrOutput) CacheDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CacheDuration
	}).(pulumi.StringPtrOutput)
}

// Whether to use dynamic compression for cached content
func (o CacheConfigurationResponsePtrOutput) DynamicCompression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DynamicCompression
	}).(pulumi.StringPtrOutput)
}

// Treatment of URL query terms when forming the cache key.
func (o CacheConfigurationResponsePtrOutput) QueryParameterStripDirective() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.QueryParameterStripDirective
	}).(pulumi.StringPtrOutput)
}

// query parameters to include or exclude (comma separated).
func (o CacheConfigurationResponsePtrOutput) QueryParameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.QueryParameters
	}).(pulumi.StringPtrOutput)
}

// Https settings for a domain
type CustomHttpsConfigurationResponse struct {
	// Defines the source of the SSL certificate
	CertificateSource string `pulumi:"certificateSource"`
	// Defines the type of the certificate used for secure connections to a frontendEndpoint
	CertificateType *string `pulumi:"certificateType"`
	// The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
	MinimumTlsVersion string `pulumi:"minimumTlsVersion"`
	// Defines the TLS extension protocol that is used for secure delivery
	ProtocolType string `pulumi:"protocolType"`
	// The name of the Key Vault secret representing the full certificate PFX
	SecretName *string `pulumi:"secretName"`
	// The version of the Key Vault secret representing the full certificate PFX
	SecretVersion *string `pulumi:"secretVersion"`
	// The Key Vault containing the SSL certificate
	Vault *KeyVaultCertificateSourceParametersResponseVault `pulumi:"vault"`
}

// CustomHttpsConfigurationResponseInput is an input type that accepts CustomHttpsConfigurationResponseArgs and CustomHttpsConfigurationResponseOutput values.
// You can construct a concrete instance of `CustomHttpsConfigurationResponseInput` via:
//
//          CustomHttpsConfigurationResponseArgs{...}
type CustomHttpsConfigurationResponseInput interface {
	pulumi.Input

	ToCustomHttpsConfigurationResponseOutput() CustomHttpsConfigurationResponseOutput
	ToCustomHttpsConfigurationResponseOutputWithContext(context.Context) CustomHttpsConfigurationResponseOutput
}

// Https settings for a domain
type CustomHttpsConfigurationResponseArgs struct {
	// Defines the source of the SSL certificate
	CertificateSource pulumi.StringInput `pulumi:"certificateSource"`
	// Defines the type of the certificate used for secure connections to a frontendEndpoint
	CertificateType pulumi.StringPtrInput `pulumi:"certificateType"`
	// The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
	MinimumTlsVersion pulumi.StringInput `pulumi:"minimumTlsVersion"`
	// Defines the TLS extension protocol that is used for secure delivery
	ProtocolType pulumi.StringInput `pulumi:"protocolType"`
	// The name of the Key Vault secret representing the full certificate PFX
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// The version of the Key Vault secret representing the full certificate PFX
	SecretVersion pulumi.StringPtrInput `pulumi:"secretVersion"`
	// The Key Vault containing the SSL certificate
	Vault KeyVaultCertificateSourceParametersResponseVaultPtrInput `pulumi:"vault"`
}

func (CustomHttpsConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomHttpsConfigurationResponse)(nil)).Elem()
}

func (i CustomHttpsConfigurationResponseArgs) ToCustomHttpsConfigurationResponseOutput() CustomHttpsConfigurationResponseOutput {
	return i.ToCustomHttpsConfigurationResponseOutputWithContext(context.Background())
}

func (i CustomHttpsConfigurationResponseArgs) ToCustomHttpsConfigurationResponseOutputWithContext(ctx context.Context) CustomHttpsConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomHttpsConfigurationResponseOutput)
}

// Https settings for a domain
type CustomHttpsConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CustomHttpsConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomHttpsConfigurationResponse)(nil)).Elem()
}

func (o CustomHttpsConfigurationResponseOutput) ToCustomHttpsConfigurationResponseOutput() CustomHttpsConfigurationResponseOutput {
	return o
}

func (o CustomHttpsConfigurationResponseOutput) ToCustomHttpsConfigurationResponseOutputWithContext(ctx context.Context) CustomHttpsConfigurationResponseOutput {
	return o
}

// Defines the source of the SSL certificate
func (o CustomHttpsConfigurationResponseOutput) CertificateSource() pulumi.StringOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationResponse) string { return v.CertificateSource }).(pulumi.StringOutput)
}

// Defines the type of the certificate used for secure connections to a frontendEndpoint
func (o CustomHttpsConfigurationResponseOutput) CertificateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationResponse) *string { return v.CertificateType }).(pulumi.StringPtrOutput)
}

// The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
func (o CustomHttpsConfigurationResponseOutput) MinimumTlsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationResponse) string { return v.MinimumTlsVersion }).(pulumi.StringOutput)
}

// Defines the TLS extension protocol that is used for secure delivery
func (o CustomHttpsConfigurationResponseOutput) ProtocolType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationResponse) string { return v.ProtocolType }).(pulumi.StringOutput)
}

// The name of the Key Vault secret representing the full certificate PFX
func (o CustomHttpsConfigurationResponseOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationResponse) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// The version of the Key Vault secret representing the full certificate PFX
func (o CustomHttpsConfigurationResponseOutput) SecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationResponse) *string { return v.SecretVersion }).(pulumi.StringPtrOutput)
}

// The Key Vault containing the SSL certificate
func (o CustomHttpsConfigurationResponseOutput) Vault() KeyVaultCertificateSourceParametersResponseVaultPtrOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationResponse) *KeyVaultCertificateSourceParametersResponseVault {
		return v.Vault
	}).(KeyVaultCertificateSourceParametersResponseVaultPtrOutput)
}

// Describes Forwarding Route.
type ForwardingConfiguration struct {
	// A reference to the BackendPool which this rule routes to.
	BackendPool *SubResource `pulumi:"backendPool"`
	// The caching configuration associated with this rule.
	CacheConfiguration *CacheConfiguration `pulumi:"cacheConfiguration"`
	// A custom path used to rewrite resource paths matched by this rule. Leave empty to use incoming path.
	CustomForwardingPath *string `pulumi:"customForwardingPath"`
	// Protocol this rule will use when forwarding traffic to backends.
	ForwardingProtocol *string `pulumi:"forwardingProtocol"`
	OdataType          string  `pulumi:"odataType"`
}

// ForwardingConfigurationInput is an input type that accepts ForwardingConfigurationArgs and ForwardingConfigurationOutput values.
// You can construct a concrete instance of `ForwardingConfigurationInput` via:
//
//          ForwardingConfigurationArgs{...}
type ForwardingConfigurationInput interface {
	pulumi.Input

	ToForwardingConfigurationOutput() ForwardingConfigurationOutput
	ToForwardingConfigurationOutputWithContext(context.Context) ForwardingConfigurationOutput
}

// Describes Forwarding Route.
type ForwardingConfigurationArgs struct {
	// A reference to the BackendPool which this rule routes to.
	BackendPool SubResourcePtrInput `pulumi:"backendPool"`
	// The caching configuration associated with this rule.
	CacheConfiguration CacheConfigurationPtrInput `pulumi:"cacheConfiguration"`
	// A custom path used to rewrite resource paths matched by this rule. Leave empty to use incoming path.
	CustomForwardingPath pulumi.StringPtrInput `pulumi:"customForwardingPath"`
	// Protocol this rule will use when forwarding traffic to backends.
	ForwardingProtocol pulumi.StringPtrInput `pulumi:"forwardingProtocol"`
	OdataType          pulumi.StringInput    `pulumi:"odataType"`
}

func (ForwardingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardingConfiguration)(nil)).Elem()
}

func (i ForwardingConfigurationArgs) ToForwardingConfigurationOutput() ForwardingConfigurationOutput {
	return i.ToForwardingConfigurationOutputWithContext(context.Background())
}

func (i ForwardingConfigurationArgs) ToForwardingConfigurationOutputWithContext(ctx context.Context) ForwardingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingConfigurationOutput)
}

// Describes Forwarding Route.
type ForwardingConfigurationOutput struct{ *pulumi.OutputState }

func (ForwardingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardingConfiguration)(nil)).Elem()
}

func (o ForwardingConfigurationOutput) ToForwardingConfigurationOutput() ForwardingConfigurationOutput {
	return o
}

func (o ForwardingConfigurationOutput) ToForwardingConfigurationOutputWithContext(ctx context.Context) ForwardingConfigurationOutput {
	return o
}

// A reference to the BackendPool which this rule routes to.
func (o ForwardingConfigurationOutput) BackendPool() SubResourcePtrOutput {
	return o.ApplyT(func(v ForwardingConfiguration) *SubResource { return v.BackendPool }).(SubResourcePtrOutput)
}

// The caching configuration associated with this rule.
func (o ForwardingConfigurationOutput) CacheConfiguration() CacheConfigurationPtrOutput {
	return o.ApplyT(func(v ForwardingConfiguration) *CacheConfiguration { return v.CacheConfiguration }).(CacheConfigurationPtrOutput)
}

// A custom path used to rewrite resource paths matched by this rule. Leave empty to use incoming path.
func (o ForwardingConfigurationOutput) CustomForwardingPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingConfiguration) *string { return v.CustomForwardingPath }).(pulumi.StringPtrOutput)
}

// Protocol this rule will use when forwarding traffic to backends.
func (o ForwardingConfigurationOutput) ForwardingProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingConfiguration) *string { return v.ForwardingProtocol }).(pulumi.StringPtrOutput)
}

func (o ForwardingConfigurationOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardingConfiguration) string { return v.OdataType }).(pulumi.StringOutput)
}

// Describes Forwarding Route.
type ForwardingConfigurationResponse struct {
	// A reference to the BackendPool which this rule routes to.
	BackendPool *SubResourceResponse `pulumi:"backendPool"`
	// The caching configuration associated with this rule.
	CacheConfiguration *CacheConfigurationResponse `pulumi:"cacheConfiguration"`
	// A custom path used to rewrite resource paths matched by this rule. Leave empty to use incoming path.
	CustomForwardingPath *string `pulumi:"customForwardingPath"`
	// Protocol this rule will use when forwarding traffic to backends.
	ForwardingProtocol *string `pulumi:"forwardingProtocol"`
	OdataType          string  `pulumi:"odataType"`
}

// ForwardingConfigurationResponseInput is an input type that accepts ForwardingConfigurationResponseArgs and ForwardingConfigurationResponseOutput values.
// You can construct a concrete instance of `ForwardingConfigurationResponseInput` via:
//
//          ForwardingConfigurationResponseArgs{...}
type ForwardingConfigurationResponseInput interface {
	pulumi.Input

	ToForwardingConfigurationResponseOutput() ForwardingConfigurationResponseOutput
	ToForwardingConfigurationResponseOutputWithContext(context.Context) ForwardingConfigurationResponseOutput
}

// Describes Forwarding Route.
type ForwardingConfigurationResponseArgs struct {
	// A reference to the BackendPool which this rule routes to.
	BackendPool SubResourceResponsePtrInput `pulumi:"backendPool"`
	// The caching configuration associated with this rule.
	CacheConfiguration CacheConfigurationResponsePtrInput `pulumi:"cacheConfiguration"`
	// A custom path used to rewrite resource paths matched by this rule. Leave empty to use incoming path.
	CustomForwardingPath pulumi.StringPtrInput `pulumi:"customForwardingPath"`
	// Protocol this rule will use when forwarding traffic to backends.
	ForwardingProtocol pulumi.StringPtrInput `pulumi:"forwardingProtocol"`
	OdataType          pulumi.StringInput    `pulumi:"odataType"`
}

func (ForwardingConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardingConfigurationResponse)(nil)).Elem()
}

func (i ForwardingConfigurationResponseArgs) ToForwardingConfigurationResponseOutput() ForwardingConfigurationResponseOutput {
	return i.ToForwardingConfigurationResponseOutputWithContext(context.Background())
}

func (i ForwardingConfigurationResponseArgs) ToForwardingConfigurationResponseOutputWithContext(ctx context.Context) ForwardingConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingConfigurationResponseOutput)
}

// Describes Forwarding Route.
type ForwardingConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ForwardingConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardingConfigurationResponse)(nil)).Elem()
}

func (o ForwardingConfigurationResponseOutput) ToForwardingConfigurationResponseOutput() ForwardingConfigurationResponseOutput {
	return o
}

func (o ForwardingConfigurationResponseOutput) ToForwardingConfigurationResponseOutputWithContext(ctx context.Context) ForwardingConfigurationResponseOutput {
	return o
}

// A reference to the BackendPool which this rule routes to.
func (o ForwardingConfigurationResponseOutput) BackendPool() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v ForwardingConfigurationResponse) *SubResourceResponse { return v.BackendPool }).(SubResourceResponsePtrOutput)
}

// The caching configuration associated with this rule.
func (o ForwardingConfigurationResponseOutput) CacheConfiguration() CacheConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ForwardingConfigurationResponse) *CacheConfigurationResponse { return v.CacheConfiguration }).(CacheConfigurationResponsePtrOutput)
}

// A custom path used to rewrite resource paths matched by this rule. Leave empty to use incoming path.
func (o ForwardingConfigurationResponseOutput) CustomForwardingPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingConfigurationResponse) *string { return v.CustomForwardingPath }).(pulumi.StringPtrOutput)
}

// Protocol this rule will use when forwarding traffic to backends.
func (o ForwardingConfigurationResponseOutput) ForwardingProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingConfigurationResponse) *string { return v.ForwardingProtocol }).(pulumi.StringPtrOutput)
}

func (o ForwardingConfigurationResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardingConfigurationResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// A frontend endpoint used for routing.
type FrontendEndpoint struct {
	// The host name of the frontendEndpoint. Must be a domain name.
	HostName *string `pulumi:"hostName"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
	SessionAffinityEnabledState *string `pulumi:"sessionAffinityEnabledState"`
	// UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
	SessionAffinityTtlSeconds *int `pulumi:"sessionAffinityTtlSeconds"`
	// Defines the Web Application Firewall policy for each host (if applicable)
	WebApplicationFirewallPolicyLink *FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink `pulumi:"webApplicationFirewallPolicyLink"`
}

// FrontendEndpointInput is an input type that accepts FrontendEndpointArgs and FrontendEndpointOutput values.
// You can construct a concrete instance of `FrontendEndpointInput` via:
//
//          FrontendEndpointArgs{...}
type FrontendEndpointInput interface {
	pulumi.Input

	ToFrontendEndpointOutput() FrontendEndpointOutput
	ToFrontendEndpointOutputWithContext(context.Context) FrontendEndpointOutput
}

// A frontend endpoint used for routing.
type FrontendEndpointArgs struct {
	// The host name of the frontendEndpoint. Must be a domain name.
	HostName pulumi.StringPtrInput `pulumi:"hostName"`
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
	SessionAffinityEnabledState pulumi.StringPtrInput `pulumi:"sessionAffinityEnabledState"`
	// UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
	SessionAffinityTtlSeconds pulumi.IntPtrInput `pulumi:"sessionAffinityTtlSeconds"`
	// Defines the Web Application Firewall policy for each host (if applicable)
	WebApplicationFirewallPolicyLink FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrInput `pulumi:"webApplicationFirewallPolicyLink"`
}

func (FrontendEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendEndpoint)(nil)).Elem()
}

func (i FrontendEndpointArgs) ToFrontendEndpointOutput() FrontendEndpointOutput {
	return i.ToFrontendEndpointOutputWithContext(context.Background())
}

func (i FrontendEndpointArgs) ToFrontendEndpointOutputWithContext(ctx context.Context) FrontendEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointOutput)
}

// FrontendEndpointArrayInput is an input type that accepts FrontendEndpointArray and FrontendEndpointArrayOutput values.
// You can construct a concrete instance of `FrontendEndpointArrayInput` via:
//
//          FrontendEndpointArray{ FrontendEndpointArgs{...} }
type FrontendEndpointArrayInput interface {
	pulumi.Input

	ToFrontendEndpointArrayOutput() FrontendEndpointArrayOutput
	ToFrontendEndpointArrayOutputWithContext(context.Context) FrontendEndpointArrayOutput
}

type FrontendEndpointArray []FrontendEndpointInput

func (FrontendEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontendEndpoint)(nil)).Elem()
}

func (i FrontendEndpointArray) ToFrontendEndpointArrayOutput() FrontendEndpointArrayOutput {
	return i.ToFrontendEndpointArrayOutputWithContext(context.Background())
}

func (i FrontendEndpointArray) ToFrontendEndpointArrayOutputWithContext(ctx context.Context) FrontendEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointArrayOutput)
}

// A frontend endpoint used for routing.
type FrontendEndpointOutput struct{ *pulumi.OutputState }

func (FrontendEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendEndpoint)(nil)).Elem()
}

func (o FrontendEndpointOutput) ToFrontendEndpointOutput() FrontendEndpointOutput {
	return o
}

func (o FrontendEndpointOutput) ToFrontendEndpointOutputWithContext(ctx context.Context) FrontendEndpointOutput {
	return o
}

// The host name of the frontendEndpoint. Must be a domain name.
func (o FrontendEndpointOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpoint) *string { return v.HostName }).(pulumi.StringPtrOutput)
}

// Resource ID.
func (o FrontendEndpointOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpoint) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o FrontendEndpointOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpoint) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
func (o FrontendEndpointOutput) SessionAffinityEnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpoint) *string { return v.SessionAffinityEnabledState }).(pulumi.StringPtrOutput)
}

// UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
func (o FrontendEndpointOutput) SessionAffinityTtlSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FrontendEndpoint) *int { return v.SessionAffinityTtlSeconds }).(pulumi.IntPtrOutput)
}

// Defines the Web Application Firewall policy for each host (if applicable)
func (o FrontendEndpointOutput) WebApplicationFirewallPolicyLink() FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput {
	return o.ApplyT(func(v FrontendEndpoint) *FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink {
		return v.WebApplicationFirewallPolicyLink
	}).(FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput)
}

type FrontendEndpointArrayOutput struct{ *pulumi.OutputState }

func (FrontendEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontendEndpoint)(nil)).Elem()
}

func (o FrontendEndpointArrayOutput) ToFrontendEndpointArrayOutput() FrontendEndpointArrayOutput {
	return o
}

func (o FrontendEndpointArrayOutput) ToFrontendEndpointArrayOutputWithContext(ctx context.Context) FrontendEndpointArrayOutput {
	return o
}

func (o FrontendEndpointArrayOutput) Index(i pulumi.IntInput) FrontendEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrontendEndpoint {
		return vs[0].([]FrontendEndpoint)[vs[1].(int)]
	}).(FrontendEndpointOutput)
}

// A frontend endpoint used for routing.
type FrontendEndpointResponse struct {
	// The configuration specifying how to enable HTTPS
	CustomHttpsConfiguration CustomHttpsConfigurationResponse `pulumi:"customHttpsConfiguration"`
	// Provisioning status of Custom Https of the frontendEndpoint.
	CustomHttpsProvisioningState string `pulumi:"customHttpsProvisioningState"`
	// Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
	CustomHttpsProvisioningSubstate string `pulumi:"customHttpsProvisioningSubstate"`
	// The host name of the frontendEndpoint. Must be a domain name.
	HostName *string `pulumi:"hostName"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Resource status.
	ResourceState string `pulumi:"resourceState"`
	// Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
	SessionAffinityEnabledState *string `pulumi:"sessionAffinityEnabledState"`
	// UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
	SessionAffinityTtlSeconds *int `pulumi:"sessionAffinityTtlSeconds"`
	// Resource type.
	Type string `pulumi:"type"`
	// Defines the Web Application Firewall policy for each host (if applicable)
	WebApplicationFirewallPolicyLink *FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLink `pulumi:"webApplicationFirewallPolicyLink"`
}

// FrontendEndpointResponseInput is an input type that accepts FrontendEndpointResponseArgs and FrontendEndpointResponseOutput values.
// You can construct a concrete instance of `FrontendEndpointResponseInput` via:
//
//          FrontendEndpointResponseArgs{...}
type FrontendEndpointResponseInput interface {
	pulumi.Input

	ToFrontendEndpointResponseOutput() FrontendEndpointResponseOutput
	ToFrontendEndpointResponseOutputWithContext(context.Context) FrontendEndpointResponseOutput
}

// A frontend endpoint used for routing.
type FrontendEndpointResponseArgs struct {
	// The configuration specifying how to enable HTTPS
	CustomHttpsConfiguration CustomHttpsConfigurationResponseInput `pulumi:"customHttpsConfiguration"`
	// Provisioning status of Custom Https of the frontendEndpoint.
	CustomHttpsProvisioningState pulumi.StringInput `pulumi:"customHttpsProvisioningState"`
	// Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
	CustomHttpsProvisioningSubstate pulumi.StringInput `pulumi:"customHttpsProvisioningSubstate"`
	// The host name of the frontendEndpoint. Must be a domain name.
	HostName pulumi.StringPtrInput `pulumi:"hostName"`
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Resource status.
	ResourceState pulumi.StringInput `pulumi:"resourceState"`
	// Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
	SessionAffinityEnabledState pulumi.StringPtrInput `pulumi:"sessionAffinityEnabledState"`
	// UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
	SessionAffinityTtlSeconds pulumi.IntPtrInput `pulumi:"sessionAffinityTtlSeconds"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
	// Defines the Web Application Firewall policy for each host (if applicable)
	WebApplicationFirewallPolicyLink FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrInput `pulumi:"webApplicationFirewallPolicyLink"`
}

func (FrontendEndpointResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendEndpointResponse)(nil)).Elem()
}

func (i FrontendEndpointResponseArgs) ToFrontendEndpointResponseOutput() FrontendEndpointResponseOutput {
	return i.ToFrontendEndpointResponseOutputWithContext(context.Background())
}

func (i FrontendEndpointResponseArgs) ToFrontendEndpointResponseOutputWithContext(ctx context.Context) FrontendEndpointResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointResponseOutput)
}

// FrontendEndpointResponseArrayInput is an input type that accepts FrontendEndpointResponseArray and FrontendEndpointResponseArrayOutput values.
// You can construct a concrete instance of `FrontendEndpointResponseArrayInput` via:
//
//          FrontendEndpointResponseArray{ FrontendEndpointResponseArgs{...} }
type FrontendEndpointResponseArrayInput interface {
	pulumi.Input

	ToFrontendEndpointResponseArrayOutput() FrontendEndpointResponseArrayOutput
	ToFrontendEndpointResponseArrayOutputWithContext(context.Context) FrontendEndpointResponseArrayOutput
}

type FrontendEndpointResponseArray []FrontendEndpointResponseInput

func (FrontendEndpointResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontendEndpointResponse)(nil)).Elem()
}

func (i FrontendEndpointResponseArray) ToFrontendEndpointResponseArrayOutput() FrontendEndpointResponseArrayOutput {
	return i.ToFrontendEndpointResponseArrayOutputWithContext(context.Background())
}

func (i FrontendEndpointResponseArray) ToFrontendEndpointResponseArrayOutputWithContext(ctx context.Context) FrontendEndpointResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointResponseArrayOutput)
}

// A frontend endpoint used for routing.
type FrontendEndpointResponseOutput struct{ *pulumi.OutputState }

func (FrontendEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendEndpointResponse)(nil)).Elem()
}

func (o FrontendEndpointResponseOutput) ToFrontendEndpointResponseOutput() FrontendEndpointResponseOutput {
	return o
}

func (o FrontendEndpointResponseOutput) ToFrontendEndpointResponseOutputWithContext(ctx context.Context) FrontendEndpointResponseOutput {
	return o
}

// The configuration specifying how to enable HTTPS
func (o FrontendEndpointResponseOutput) CustomHttpsConfiguration() CustomHttpsConfigurationResponseOutput {
	return o.ApplyT(func(v FrontendEndpointResponse) CustomHttpsConfigurationResponse { return v.CustomHttpsConfiguration }).(CustomHttpsConfigurationResponseOutput)
}

// Provisioning status of Custom Https of the frontendEndpoint.
func (o FrontendEndpointResponseOutput) CustomHttpsProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v FrontendEndpointResponse) string { return v.CustomHttpsProvisioningState }).(pulumi.StringOutput)
}

// Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
func (o FrontendEndpointResponseOutput) CustomHttpsProvisioningSubstate() pulumi.StringOutput {
	return o.ApplyT(func(v FrontendEndpointResponse) string { return v.CustomHttpsProvisioningSubstate }).(pulumi.StringOutput)
}

// The host name of the frontendEndpoint. Must be a domain name.
func (o FrontendEndpointResponseOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpointResponse) *string { return v.HostName }).(pulumi.StringPtrOutput)
}

// Resource ID.
func (o FrontendEndpointResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpointResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o FrontendEndpointResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpointResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Resource status.
func (o FrontendEndpointResponseOutput) ResourceState() pulumi.StringOutput {
	return o.ApplyT(func(v FrontendEndpointResponse) string { return v.ResourceState }).(pulumi.StringOutput)
}

// Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
func (o FrontendEndpointResponseOutput) SessionAffinityEnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpointResponse) *string { return v.SessionAffinityEnabledState }).(pulumi.StringPtrOutput)
}

// UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
func (o FrontendEndpointResponseOutput) SessionAffinityTtlSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FrontendEndpointResponse) *int { return v.SessionAffinityTtlSeconds }).(pulumi.IntPtrOutput)
}

// Resource type.
func (o FrontendEndpointResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FrontendEndpointResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Defines the Web Application Firewall policy for each host (if applicable)
func (o FrontendEndpointResponseOutput) WebApplicationFirewallPolicyLink() FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput {
	return o.ApplyT(func(v FrontendEndpointResponse) *FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLink {
		return v.WebApplicationFirewallPolicyLink
	}).(FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput)
}

type FrontendEndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (FrontendEndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontendEndpointResponse)(nil)).Elem()
}

func (o FrontendEndpointResponseArrayOutput) ToFrontendEndpointResponseArrayOutput() FrontendEndpointResponseArrayOutput {
	return o
}

func (o FrontendEndpointResponseArrayOutput) ToFrontendEndpointResponseArrayOutputWithContext(ctx context.Context) FrontendEndpointResponseArrayOutput {
	return o
}

func (o FrontendEndpointResponseArrayOutput) Index(i pulumi.IntInput) FrontendEndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrontendEndpointResponse {
		return vs[0].([]FrontendEndpointResponse)[vs[1].(int)]
	}).(FrontendEndpointResponseOutput)
}

// Defines the Web Application Firewall policy for each host (if applicable)
type FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLink struct {
	// Resource ID.
	Id *string `pulumi:"id"`
}

// FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkInput is an input type that accepts FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkArgs and FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput values.
// You can construct a concrete instance of `FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkInput` via:
//
//          FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkArgs{...}
type FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkInput interface {
	pulumi.Input

	ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput() FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput
	ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutputWithContext(context.Context) FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput
}

// Defines the Web Application Firewall policy for each host (if applicable)
type FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLink)(nil)).Elem()
}

func (i FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkArgs) ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput() FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput {
	return i.ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutputWithContext(context.Background())
}

func (i FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkArgs) ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput)
}

func (i FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkArgs) ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput() FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput {
	return i.ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutputWithContext(context.Background())
}

func (i FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkArgs) ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput).ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutputWithContext(ctx)
}

// FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrInput is an input type that accepts FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkArgs, FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtr and FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput values.
// You can construct a concrete instance of `FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrInput` via:
//
//          FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkArgs{...}
//
//  or:
//
//          nil
type FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrInput interface {
	pulumi.Input

	ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput() FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput
	ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutputWithContext(context.Context) FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput
}

type frontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrType FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkArgs

func FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtr(v *FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkArgs) FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrInput {
	return (*frontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrType)(v)
}

func (*frontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLink)(nil)).Elem()
}

func (i *frontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrType) ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput() FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput {
	return i.ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutputWithContext(context.Background())
}

func (i *frontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrType) ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput)
}

// Defines the Web Application Firewall policy for each host (if applicable)
type FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput struct{ *pulumi.OutputState }

func (FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLink)(nil)).Elem()
}

func (o FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput) ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput() FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput {
	return o
}

func (o FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput) ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput {
	return o
}

func (o FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput) ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput() FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput {
	return o.ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutputWithContext(context.Background())
}

func (o FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput) ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput {
	return o.ApplyT(func(v FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLink) *FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLink {
		return &v
	}).(FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput)
}

// Resource ID.
func (o FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLink) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput struct{ *pulumi.OutputState }

func (FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLink)(nil)).Elem()
}

func (o FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput) ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput() FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput {
	return o
}

func (o FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput) ToFrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput {
	return o
}

func (o FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput) Elem() FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput {
	return o.ApplyT(func(v *FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLink) FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLink {
		return *v
	}).(FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput)
}

// Resource ID.
func (o FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLink) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Defines the Web Application Firewall policy for each host (if applicable)
type FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink struct {
	// Resource ID.
	Id *string `pulumi:"id"`
}

// FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkInput is an input type that accepts FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkArgs and FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput values.
// You can construct a concrete instance of `FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkInput` via:
//
//          FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkArgs{...}
type FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkInput interface {
	pulumi.Input

	ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput() FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput
	ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutputWithContext(context.Context) FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput
}

// Defines the Web Application Firewall policy for each host (if applicable)
type FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink)(nil)).Elem()
}

func (i FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkArgs) ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput() FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput {
	return i.ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutputWithContext(context.Background())
}

func (i FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkArgs) ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput)
}

func (i FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkArgs) ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput() FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput {
	return i.ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutputWithContext(context.Background())
}

func (i FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkArgs) ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput).ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutputWithContext(ctx)
}

// FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrInput is an input type that accepts FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkArgs, FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtr and FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput values.
// You can construct a concrete instance of `FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrInput` via:
//
//          FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkArgs{...}
//
//  or:
//
//          nil
type FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrInput interface {
	pulumi.Input

	ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput() FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput
	ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutputWithContext(context.Context) FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput
}

type frontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrType FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkArgs

func FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtr(v *FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkArgs) FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrInput {
	return (*frontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrType)(v)
}

func (*frontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink)(nil)).Elem()
}

func (i *frontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrType) ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput() FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput {
	return i.ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutputWithContext(context.Background())
}

func (i *frontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrType) ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput)
}

// Defines the Web Application Firewall policy for each host (if applicable)
type FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput struct{ *pulumi.OutputState }

func (FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink)(nil)).Elem()
}

func (o FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput) ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput() FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput {
	return o
}

func (o FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput) ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput {
	return o
}

func (o FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput) ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput() FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput {
	return o.ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutputWithContext(context.Background())
}

func (o FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput) ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput {
	return o.ApplyT(func(v FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink) *FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink {
		return &v
	}).(FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput)
}

// Resource ID.
func (o FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput struct{ *pulumi.OutputState }

func (FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink)(nil)).Elem()
}

func (o FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput) ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput() FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput {
	return o
}

func (o FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput) ToFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput {
	return o
}

func (o FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput) Elem() FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput {
	return o.ApplyT(func(v *FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink) FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink {
		return *v
	}).(FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput)
}

// Resource ID.
func (o FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// An action that can manipulate an http header.
type HeaderAction struct {
	// Which type of manipulation to apply to the header.
	HeaderActionType string `pulumi:"headerActionType"`
	// The name of the header this action will apply to.
	HeaderName string `pulumi:"headerName"`
	// The value to update the given header name with. This value is not used if the actionType is Delete.
	Value *string `pulumi:"value"`
}

// HeaderActionInput is an input type that accepts HeaderActionArgs and HeaderActionOutput values.
// You can construct a concrete instance of `HeaderActionInput` via:
//
//          HeaderActionArgs{...}
type HeaderActionInput interface {
	pulumi.Input

	ToHeaderActionOutput() HeaderActionOutput
	ToHeaderActionOutputWithContext(context.Context) HeaderActionOutput
}

// An action that can manipulate an http header.
type HeaderActionArgs struct {
	// Which type of manipulation to apply to the header.
	HeaderActionType pulumi.StringInput `pulumi:"headerActionType"`
	// The name of the header this action will apply to.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value to update the given header name with. This value is not used if the actionType is Delete.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (HeaderActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderAction)(nil)).Elem()
}

func (i HeaderActionArgs) ToHeaderActionOutput() HeaderActionOutput {
	return i.ToHeaderActionOutputWithContext(context.Background())
}

func (i HeaderActionArgs) ToHeaderActionOutputWithContext(ctx context.Context) HeaderActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderActionOutput)
}

// HeaderActionArrayInput is an input type that accepts HeaderActionArray and HeaderActionArrayOutput values.
// You can construct a concrete instance of `HeaderActionArrayInput` via:
//
//          HeaderActionArray{ HeaderActionArgs{...} }
type HeaderActionArrayInput interface {
	pulumi.Input

	ToHeaderActionArrayOutput() HeaderActionArrayOutput
	ToHeaderActionArrayOutputWithContext(context.Context) HeaderActionArrayOutput
}

type HeaderActionArray []HeaderActionInput

func (HeaderActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeaderAction)(nil)).Elem()
}

func (i HeaderActionArray) ToHeaderActionArrayOutput() HeaderActionArrayOutput {
	return i.ToHeaderActionArrayOutputWithContext(context.Background())
}

func (i HeaderActionArray) ToHeaderActionArrayOutputWithContext(ctx context.Context) HeaderActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderActionArrayOutput)
}

// An action that can manipulate an http header.
type HeaderActionOutput struct{ *pulumi.OutputState }

func (HeaderActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderAction)(nil)).Elem()
}

func (o HeaderActionOutput) ToHeaderActionOutput() HeaderActionOutput {
	return o
}

func (o HeaderActionOutput) ToHeaderActionOutputWithContext(ctx context.Context) HeaderActionOutput {
	return o
}

// Which type of manipulation to apply to the header.
func (o HeaderActionOutput) HeaderActionType() pulumi.StringOutput {
	return o.ApplyT(func(v HeaderAction) string { return v.HeaderActionType }).(pulumi.StringOutput)
}

// The name of the header this action will apply to.
func (o HeaderActionOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v HeaderAction) string { return v.HeaderName }).(pulumi.StringOutput)
}

// The value to update the given header name with. This value is not used if the actionType is Delete.
func (o HeaderActionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeaderAction) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type HeaderActionArrayOutput struct{ *pulumi.OutputState }

func (HeaderActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeaderAction)(nil)).Elem()
}

func (o HeaderActionArrayOutput) ToHeaderActionArrayOutput() HeaderActionArrayOutput {
	return o
}

func (o HeaderActionArrayOutput) ToHeaderActionArrayOutputWithContext(ctx context.Context) HeaderActionArrayOutput {
	return o
}

func (o HeaderActionArrayOutput) Index(i pulumi.IntInput) HeaderActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeaderAction {
		return vs[0].([]HeaderAction)[vs[1].(int)]
	}).(HeaderActionOutput)
}

// An action that can manipulate an http header.
type HeaderActionResponse struct {
	// Which type of manipulation to apply to the header.
	HeaderActionType string `pulumi:"headerActionType"`
	// The name of the header this action will apply to.
	HeaderName string `pulumi:"headerName"`
	// The value to update the given header name with. This value is not used if the actionType is Delete.
	Value *string `pulumi:"value"`
}

// HeaderActionResponseInput is an input type that accepts HeaderActionResponseArgs and HeaderActionResponseOutput values.
// You can construct a concrete instance of `HeaderActionResponseInput` via:
//
//          HeaderActionResponseArgs{...}
type HeaderActionResponseInput interface {
	pulumi.Input

	ToHeaderActionResponseOutput() HeaderActionResponseOutput
	ToHeaderActionResponseOutputWithContext(context.Context) HeaderActionResponseOutput
}

// An action that can manipulate an http header.
type HeaderActionResponseArgs struct {
	// Which type of manipulation to apply to the header.
	HeaderActionType pulumi.StringInput `pulumi:"headerActionType"`
	// The name of the header this action will apply to.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value to update the given header name with. This value is not used if the actionType is Delete.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (HeaderActionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderActionResponse)(nil)).Elem()
}

func (i HeaderActionResponseArgs) ToHeaderActionResponseOutput() HeaderActionResponseOutput {
	return i.ToHeaderActionResponseOutputWithContext(context.Background())
}

func (i HeaderActionResponseArgs) ToHeaderActionResponseOutputWithContext(ctx context.Context) HeaderActionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderActionResponseOutput)
}

// HeaderActionResponseArrayInput is an input type that accepts HeaderActionResponseArray and HeaderActionResponseArrayOutput values.
// You can construct a concrete instance of `HeaderActionResponseArrayInput` via:
//
//          HeaderActionResponseArray{ HeaderActionResponseArgs{...} }
type HeaderActionResponseArrayInput interface {
	pulumi.Input

	ToHeaderActionResponseArrayOutput() HeaderActionResponseArrayOutput
	ToHeaderActionResponseArrayOutputWithContext(context.Context) HeaderActionResponseArrayOutput
}

type HeaderActionResponseArray []HeaderActionResponseInput

func (HeaderActionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeaderActionResponse)(nil)).Elem()
}

func (i HeaderActionResponseArray) ToHeaderActionResponseArrayOutput() HeaderActionResponseArrayOutput {
	return i.ToHeaderActionResponseArrayOutputWithContext(context.Background())
}

func (i HeaderActionResponseArray) ToHeaderActionResponseArrayOutputWithContext(ctx context.Context) HeaderActionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderActionResponseArrayOutput)
}

// An action that can manipulate an http header.
type HeaderActionResponseOutput struct{ *pulumi.OutputState }

func (HeaderActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderActionResponse)(nil)).Elem()
}

func (o HeaderActionResponseOutput) ToHeaderActionResponseOutput() HeaderActionResponseOutput {
	return o
}

func (o HeaderActionResponseOutput) ToHeaderActionResponseOutputWithContext(ctx context.Context) HeaderActionResponseOutput {
	return o
}

// Which type of manipulation to apply to the header.
func (o HeaderActionResponseOutput) HeaderActionType() pulumi.StringOutput {
	return o.ApplyT(func(v HeaderActionResponse) string { return v.HeaderActionType }).(pulumi.StringOutput)
}

// The name of the header this action will apply to.
func (o HeaderActionResponseOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v HeaderActionResponse) string { return v.HeaderName }).(pulumi.StringOutput)
}

// The value to update the given header name with. This value is not used if the actionType is Delete.
func (o HeaderActionResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeaderActionResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type HeaderActionResponseArrayOutput struct{ *pulumi.OutputState }

func (HeaderActionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeaderActionResponse)(nil)).Elem()
}

func (o HeaderActionResponseArrayOutput) ToHeaderActionResponseArrayOutput() HeaderActionResponseArrayOutput {
	return o
}

func (o HeaderActionResponseArrayOutput) ToHeaderActionResponseArrayOutputWithContext(ctx context.Context) HeaderActionResponseArrayOutput {
	return o
}

func (o HeaderActionResponseArrayOutput) Index(i pulumi.IntInput) HeaderActionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeaderActionResponse {
		return vs[0].([]HeaderActionResponse)[vs[1].(int)]
	}).(HeaderActionResponseOutput)
}

// Load balancing settings for a backend pool
type HealthProbeSettingsModel struct {
	// Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
	EnabledState *string `pulumi:"enabledState"`
	// Configures which HTTP method to use to probe the backends defined under backendPools.
	HealthProbeMethod *string `pulumi:"healthProbeMethod"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// The number of seconds between health probes.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
	// Resource name.
	Name *string `pulumi:"name"`
	// The path to use for the health probe. Default is /
	Path *string `pulumi:"path"`
	// Protocol scheme to use for this probe
	Protocol *string `pulumi:"protocol"`
}

// HealthProbeSettingsModelInput is an input type that accepts HealthProbeSettingsModelArgs and HealthProbeSettingsModelOutput values.
// You can construct a concrete instance of `HealthProbeSettingsModelInput` via:
//
//          HealthProbeSettingsModelArgs{...}
type HealthProbeSettingsModelInput interface {
	pulumi.Input

	ToHealthProbeSettingsModelOutput() HealthProbeSettingsModelOutput
	ToHealthProbeSettingsModelOutputWithContext(context.Context) HealthProbeSettingsModelOutput
}

// Load balancing settings for a backend pool
type HealthProbeSettingsModelArgs struct {
	// Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
	EnabledState pulumi.StringPtrInput `pulumi:"enabledState"`
	// Configures which HTTP method to use to probe the backends defined under backendPools.
	HealthProbeMethod pulumi.StringPtrInput `pulumi:"healthProbeMethod"`
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The number of seconds between health probes.
	IntervalInSeconds pulumi.IntPtrInput `pulumi:"intervalInSeconds"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The path to use for the health probe. Default is /
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Protocol scheme to use for this probe
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (HealthProbeSettingsModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthProbeSettingsModel)(nil)).Elem()
}

func (i HealthProbeSettingsModelArgs) ToHealthProbeSettingsModelOutput() HealthProbeSettingsModelOutput {
	return i.ToHealthProbeSettingsModelOutputWithContext(context.Background())
}

func (i HealthProbeSettingsModelArgs) ToHealthProbeSettingsModelOutputWithContext(ctx context.Context) HealthProbeSettingsModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthProbeSettingsModelOutput)
}

// HealthProbeSettingsModelArrayInput is an input type that accepts HealthProbeSettingsModelArray and HealthProbeSettingsModelArrayOutput values.
// You can construct a concrete instance of `HealthProbeSettingsModelArrayInput` via:
//
//          HealthProbeSettingsModelArray{ HealthProbeSettingsModelArgs{...} }
type HealthProbeSettingsModelArrayInput interface {
	pulumi.Input

	ToHealthProbeSettingsModelArrayOutput() HealthProbeSettingsModelArrayOutput
	ToHealthProbeSettingsModelArrayOutputWithContext(context.Context) HealthProbeSettingsModelArrayOutput
}

type HealthProbeSettingsModelArray []HealthProbeSettingsModelInput

func (HealthProbeSettingsModelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthProbeSettingsModel)(nil)).Elem()
}

func (i HealthProbeSettingsModelArray) ToHealthProbeSettingsModelArrayOutput() HealthProbeSettingsModelArrayOutput {
	return i.ToHealthProbeSettingsModelArrayOutputWithContext(context.Background())
}

func (i HealthProbeSettingsModelArray) ToHealthProbeSettingsModelArrayOutputWithContext(ctx context.Context) HealthProbeSettingsModelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthProbeSettingsModelArrayOutput)
}

// Load balancing settings for a backend pool
type HealthProbeSettingsModelOutput struct{ *pulumi.OutputState }

func (HealthProbeSettingsModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthProbeSettingsModel)(nil)).Elem()
}

func (o HealthProbeSettingsModelOutput) ToHealthProbeSettingsModelOutput() HealthProbeSettingsModelOutput {
	return o
}

func (o HealthProbeSettingsModelOutput) ToHealthProbeSettingsModelOutputWithContext(ctx context.Context) HealthProbeSettingsModelOutput {
	return o
}

// Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
func (o HealthProbeSettingsModelOutput) EnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModel) *string { return v.EnabledState }).(pulumi.StringPtrOutput)
}

// Configures which HTTP method to use to probe the backends defined under backendPools.
func (o HealthProbeSettingsModelOutput) HealthProbeMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModel) *string { return v.HealthProbeMethod }).(pulumi.StringPtrOutput)
}

// Resource ID.
func (o HealthProbeSettingsModelOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModel) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The number of seconds between health probes.
func (o HealthProbeSettingsModelOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModel) *int { return v.IntervalInSeconds }).(pulumi.IntPtrOutput)
}

// Resource name.
func (o HealthProbeSettingsModelOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModel) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The path to use for the health probe. Default is /
func (o HealthProbeSettingsModelOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModel) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Protocol scheme to use for this probe
func (o HealthProbeSettingsModelOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModel) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type HealthProbeSettingsModelArrayOutput struct{ *pulumi.OutputState }

func (HealthProbeSettingsModelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthProbeSettingsModel)(nil)).Elem()
}

func (o HealthProbeSettingsModelArrayOutput) ToHealthProbeSettingsModelArrayOutput() HealthProbeSettingsModelArrayOutput {
	return o
}

func (o HealthProbeSettingsModelArrayOutput) ToHealthProbeSettingsModelArrayOutputWithContext(ctx context.Context) HealthProbeSettingsModelArrayOutput {
	return o
}

func (o HealthProbeSettingsModelArrayOutput) Index(i pulumi.IntInput) HealthProbeSettingsModelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HealthProbeSettingsModel {
		return vs[0].([]HealthProbeSettingsModel)[vs[1].(int)]
	}).(HealthProbeSettingsModelOutput)
}

// Load balancing settings for a backend pool
type HealthProbeSettingsModelResponse struct {
	// Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
	EnabledState *string `pulumi:"enabledState"`
	// Configures which HTTP method to use to probe the backends defined under backendPools.
	HealthProbeMethod *string `pulumi:"healthProbeMethod"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// The number of seconds between health probes.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
	// Resource name.
	Name *string `pulumi:"name"`
	// The path to use for the health probe. Default is /
	Path *string `pulumi:"path"`
	// Protocol scheme to use for this probe
	Protocol *string `pulumi:"protocol"`
	// Resource status.
	ResourceState string `pulumi:"resourceState"`
	// Resource type.
	Type string `pulumi:"type"`
}

// HealthProbeSettingsModelResponseInput is an input type that accepts HealthProbeSettingsModelResponseArgs and HealthProbeSettingsModelResponseOutput values.
// You can construct a concrete instance of `HealthProbeSettingsModelResponseInput` via:
//
//          HealthProbeSettingsModelResponseArgs{...}
type HealthProbeSettingsModelResponseInput interface {
	pulumi.Input

	ToHealthProbeSettingsModelResponseOutput() HealthProbeSettingsModelResponseOutput
	ToHealthProbeSettingsModelResponseOutputWithContext(context.Context) HealthProbeSettingsModelResponseOutput
}

// Load balancing settings for a backend pool
type HealthProbeSettingsModelResponseArgs struct {
	// Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
	EnabledState pulumi.StringPtrInput `pulumi:"enabledState"`
	// Configures which HTTP method to use to probe the backends defined under backendPools.
	HealthProbeMethod pulumi.StringPtrInput `pulumi:"healthProbeMethod"`
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The number of seconds between health probes.
	IntervalInSeconds pulumi.IntPtrInput `pulumi:"intervalInSeconds"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The path to use for the health probe. Default is /
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Protocol scheme to use for this probe
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Resource status.
	ResourceState pulumi.StringInput `pulumi:"resourceState"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HealthProbeSettingsModelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthProbeSettingsModelResponse)(nil)).Elem()
}

func (i HealthProbeSettingsModelResponseArgs) ToHealthProbeSettingsModelResponseOutput() HealthProbeSettingsModelResponseOutput {
	return i.ToHealthProbeSettingsModelResponseOutputWithContext(context.Background())
}

func (i HealthProbeSettingsModelResponseArgs) ToHealthProbeSettingsModelResponseOutputWithContext(ctx context.Context) HealthProbeSettingsModelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthProbeSettingsModelResponseOutput)
}

// HealthProbeSettingsModelResponseArrayInput is an input type that accepts HealthProbeSettingsModelResponseArray and HealthProbeSettingsModelResponseArrayOutput values.
// You can construct a concrete instance of `HealthProbeSettingsModelResponseArrayInput` via:
//
//          HealthProbeSettingsModelResponseArray{ HealthProbeSettingsModelResponseArgs{...} }
type HealthProbeSettingsModelResponseArrayInput interface {
	pulumi.Input

	ToHealthProbeSettingsModelResponseArrayOutput() HealthProbeSettingsModelResponseArrayOutput
	ToHealthProbeSettingsModelResponseArrayOutputWithContext(context.Context) HealthProbeSettingsModelResponseArrayOutput
}

type HealthProbeSettingsModelResponseArray []HealthProbeSettingsModelResponseInput

func (HealthProbeSettingsModelResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthProbeSettingsModelResponse)(nil)).Elem()
}

func (i HealthProbeSettingsModelResponseArray) ToHealthProbeSettingsModelResponseArrayOutput() HealthProbeSettingsModelResponseArrayOutput {
	return i.ToHealthProbeSettingsModelResponseArrayOutputWithContext(context.Background())
}

func (i HealthProbeSettingsModelResponseArray) ToHealthProbeSettingsModelResponseArrayOutputWithContext(ctx context.Context) HealthProbeSettingsModelResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthProbeSettingsModelResponseArrayOutput)
}

// Load balancing settings for a backend pool
type HealthProbeSettingsModelResponseOutput struct{ *pulumi.OutputState }

func (HealthProbeSettingsModelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthProbeSettingsModelResponse)(nil)).Elem()
}

func (o HealthProbeSettingsModelResponseOutput) ToHealthProbeSettingsModelResponseOutput() HealthProbeSettingsModelResponseOutput {
	return o
}

func (o HealthProbeSettingsModelResponseOutput) ToHealthProbeSettingsModelResponseOutputWithContext(ctx context.Context) HealthProbeSettingsModelResponseOutput {
	return o
}

// Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
func (o HealthProbeSettingsModelResponseOutput) EnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModelResponse) *string { return v.EnabledState }).(pulumi.StringPtrOutput)
}

// Configures which HTTP method to use to probe the backends defined under backendPools.
func (o HealthProbeSettingsModelResponseOutput) HealthProbeMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModelResponse) *string { return v.HealthProbeMethod }).(pulumi.StringPtrOutput)
}

// Resource ID.
func (o HealthProbeSettingsModelResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModelResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The number of seconds between health probes.
func (o HealthProbeSettingsModelResponseOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModelResponse) *int { return v.IntervalInSeconds }).(pulumi.IntPtrOutput)
}

// Resource name.
func (o HealthProbeSettingsModelResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModelResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The path to use for the health probe. Default is /
func (o HealthProbeSettingsModelResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModelResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Protocol scheme to use for this probe
func (o HealthProbeSettingsModelResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModelResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Resource status.
func (o HealthProbeSettingsModelResponseOutput) ResourceState() pulumi.StringOutput {
	return o.ApplyT(func(v HealthProbeSettingsModelResponse) string { return v.ResourceState }).(pulumi.StringOutput)
}

// Resource type.
func (o HealthProbeSettingsModelResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HealthProbeSettingsModelResponse) string { return v.Type }).(pulumi.StringOutput)
}

type HealthProbeSettingsModelResponseArrayOutput struct{ *pulumi.OutputState }

func (HealthProbeSettingsModelResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthProbeSettingsModelResponse)(nil)).Elem()
}

func (o HealthProbeSettingsModelResponseArrayOutput) ToHealthProbeSettingsModelResponseArrayOutput() HealthProbeSettingsModelResponseArrayOutput {
	return o
}

func (o HealthProbeSettingsModelResponseArrayOutput) ToHealthProbeSettingsModelResponseArrayOutputWithContext(ctx context.Context) HealthProbeSettingsModelResponseArrayOutput {
	return o
}

func (o HealthProbeSettingsModelResponseArrayOutput) Index(i pulumi.IntInput) HealthProbeSettingsModelResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HealthProbeSettingsModelResponse {
		return vs[0].([]HealthProbeSettingsModelResponse)[vs[1].(int)]
	}).(HealthProbeSettingsModelResponseOutput)
}

// The Key Vault containing the SSL certificate
type KeyVaultCertificateSourceParametersResponseVault struct {
	// Resource ID.
	Id *string `pulumi:"id"`
}

// KeyVaultCertificateSourceParametersResponseVaultInput is an input type that accepts KeyVaultCertificateSourceParametersResponseVaultArgs and KeyVaultCertificateSourceParametersResponseVaultOutput values.
// You can construct a concrete instance of `KeyVaultCertificateSourceParametersResponseVaultInput` via:
//
//          KeyVaultCertificateSourceParametersResponseVaultArgs{...}
type KeyVaultCertificateSourceParametersResponseVaultInput interface {
	pulumi.Input

	ToKeyVaultCertificateSourceParametersResponseVaultOutput() KeyVaultCertificateSourceParametersResponseVaultOutput
	ToKeyVaultCertificateSourceParametersResponseVaultOutputWithContext(context.Context) KeyVaultCertificateSourceParametersResponseVaultOutput
}

// The Key Vault containing the SSL certificate
type KeyVaultCertificateSourceParametersResponseVaultArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (KeyVaultCertificateSourceParametersResponseVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultCertificateSourceParametersResponseVault)(nil)).Elem()
}

func (i KeyVaultCertificateSourceParametersResponseVaultArgs) ToKeyVaultCertificateSourceParametersResponseVaultOutput() KeyVaultCertificateSourceParametersResponseVaultOutput {
	return i.ToKeyVaultCertificateSourceParametersResponseVaultOutputWithContext(context.Background())
}

func (i KeyVaultCertificateSourceParametersResponseVaultArgs) ToKeyVaultCertificateSourceParametersResponseVaultOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersResponseVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCertificateSourceParametersResponseVaultOutput)
}

func (i KeyVaultCertificateSourceParametersResponseVaultArgs) ToKeyVaultCertificateSourceParametersResponseVaultPtrOutput() KeyVaultCertificateSourceParametersResponseVaultPtrOutput {
	return i.ToKeyVaultCertificateSourceParametersResponseVaultPtrOutputWithContext(context.Background())
}

func (i KeyVaultCertificateSourceParametersResponseVaultArgs) ToKeyVaultCertificateSourceParametersResponseVaultPtrOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersResponseVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCertificateSourceParametersResponseVaultOutput).ToKeyVaultCertificateSourceParametersResponseVaultPtrOutputWithContext(ctx)
}

// KeyVaultCertificateSourceParametersResponseVaultPtrInput is an input type that accepts KeyVaultCertificateSourceParametersResponseVaultArgs, KeyVaultCertificateSourceParametersResponseVaultPtr and KeyVaultCertificateSourceParametersResponseVaultPtrOutput values.
// You can construct a concrete instance of `KeyVaultCertificateSourceParametersResponseVaultPtrInput` via:
//
//          KeyVaultCertificateSourceParametersResponseVaultArgs{...}
//
//  or:
//
//          nil
type KeyVaultCertificateSourceParametersResponseVaultPtrInput interface {
	pulumi.Input

	ToKeyVaultCertificateSourceParametersResponseVaultPtrOutput() KeyVaultCertificateSourceParametersResponseVaultPtrOutput
	ToKeyVaultCertificateSourceParametersResponseVaultPtrOutputWithContext(context.Context) KeyVaultCertificateSourceParametersResponseVaultPtrOutput
}

type keyVaultCertificateSourceParametersResponseVaultPtrType KeyVaultCertificateSourceParametersResponseVaultArgs

func KeyVaultCertificateSourceParametersResponseVaultPtr(v *KeyVaultCertificateSourceParametersResponseVaultArgs) KeyVaultCertificateSourceParametersResponseVaultPtrInput {
	return (*keyVaultCertificateSourceParametersResponseVaultPtrType)(v)
}

func (*keyVaultCertificateSourceParametersResponseVaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultCertificateSourceParametersResponseVault)(nil)).Elem()
}

func (i *keyVaultCertificateSourceParametersResponseVaultPtrType) ToKeyVaultCertificateSourceParametersResponseVaultPtrOutput() KeyVaultCertificateSourceParametersResponseVaultPtrOutput {
	return i.ToKeyVaultCertificateSourceParametersResponseVaultPtrOutputWithContext(context.Background())
}

func (i *keyVaultCertificateSourceParametersResponseVaultPtrType) ToKeyVaultCertificateSourceParametersResponseVaultPtrOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersResponseVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCertificateSourceParametersResponseVaultPtrOutput)
}

// The Key Vault containing the SSL certificate
type KeyVaultCertificateSourceParametersResponseVaultOutput struct{ *pulumi.OutputState }

func (KeyVaultCertificateSourceParametersResponseVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultCertificateSourceParametersResponseVault)(nil)).Elem()
}

func (o KeyVaultCertificateSourceParametersResponseVaultOutput) ToKeyVaultCertificateSourceParametersResponseVaultOutput() KeyVaultCertificateSourceParametersResponseVaultOutput {
	return o
}

func (o KeyVaultCertificateSourceParametersResponseVaultOutput) ToKeyVaultCertificateSourceParametersResponseVaultOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersResponseVaultOutput {
	return o
}

func (o KeyVaultCertificateSourceParametersResponseVaultOutput) ToKeyVaultCertificateSourceParametersResponseVaultPtrOutput() KeyVaultCertificateSourceParametersResponseVaultPtrOutput {
	return o.ToKeyVaultCertificateSourceParametersResponseVaultPtrOutputWithContext(context.Background())
}

func (o KeyVaultCertificateSourceParametersResponseVaultOutput) ToKeyVaultCertificateSourceParametersResponseVaultPtrOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersResponseVaultPtrOutput {
	return o.ApplyT(func(v KeyVaultCertificateSourceParametersResponseVault) *KeyVaultCertificateSourceParametersResponseVault {
		return &v
	}).(KeyVaultCertificateSourceParametersResponseVaultPtrOutput)
}

// Resource ID.
func (o KeyVaultCertificateSourceParametersResponseVaultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultCertificateSourceParametersResponseVault) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type KeyVaultCertificateSourceParametersResponseVaultPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultCertificateSourceParametersResponseVaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultCertificateSourceParametersResponseVault)(nil)).Elem()
}

func (o KeyVaultCertificateSourceParametersResponseVaultPtrOutput) ToKeyVaultCertificateSourceParametersResponseVaultPtrOutput() KeyVaultCertificateSourceParametersResponseVaultPtrOutput {
	return o
}

func (o KeyVaultCertificateSourceParametersResponseVaultPtrOutput) ToKeyVaultCertificateSourceParametersResponseVaultPtrOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersResponseVaultPtrOutput {
	return o
}

func (o KeyVaultCertificateSourceParametersResponseVaultPtrOutput) Elem() KeyVaultCertificateSourceParametersResponseVaultOutput {
	return o.ApplyT(func(v *KeyVaultCertificateSourceParametersResponseVault) KeyVaultCertificateSourceParametersResponseVault {
		return *v
	}).(KeyVaultCertificateSourceParametersResponseVaultOutput)
}

// Resource ID.
func (o KeyVaultCertificateSourceParametersResponseVaultPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultCertificateSourceParametersResponseVault) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Load balancing settings for a backend pool
type LoadBalancingSettingsModel struct {
	// The additional latency in milliseconds for probes to fall into the lowest latency bucket
	AdditionalLatencyMilliseconds *int `pulumi:"additionalLatencyMilliseconds"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource name.
	Name *string `pulumi:"name"`
	// The number of samples to consider for load balancing decisions
	SampleSize *int `pulumi:"sampleSize"`
	// The number of samples within the sample period that must succeed
	SuccessfulSamplesRequired *int `pulumi:"successfulSamplesRequired"`
}

// LoadBalancingSettingsModelInput is an input type that accepts LoadBalancingSettingsModelArgs and LoadBalancingSettingsModelOutput values.
// You can construct a concrete instance of `LoadBalancingSettingsModelInput` via:
//
//          LoadBalancingSettingsModelArgs{...}
type LoadBalancingSettingsModelInput interface {
	pulumi.Input

	ToLoadBalancingSettingsModelOutput() LoadBalancingSettingsModelOutput
	ToLoadBalancingSettingsModelOutputWithContext(context.Context) LoadBalancingSettingsModelOutput
}

// Load balancing settings for a backend pool
type LoadBalancingSettingsModelArgs struct {
	// The additional latency in milliseconds for probes to fall into the lowest latency bucket
	AdditionalLatencyMilliseconds pulumi.IntPtrInput `pulumi:"additionalLatencyMilliseconds"`
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The number of samples to consider for load balancing decisions
	SampleSize pulumi.IntPtrInput `pulumi:"sampleSize"`
	// The number of samples within the sample period that must succeed
	SuccessfulSamplesRequired pulumi.IntPtrInput `pulumi:"successfulSamplesRequired"`
}

func (LoadBalancingSettingsModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancingSettingsModel)(nil)).Elem()
}

func (i LoadBalancingSettingsModelArgs) ToLoadBalancingSettingsModelOutput() LoadBalancingSettingsModelOutput {
	return i.ToLoadBalancingSettingsModelOutputWithContext(context.Background())
}

func (i LoadBalancingSettingsModelArgs) ToLoadBalancingSettingsModelOutputWithContext(ctx context.Context) LoadBalancingSettingsModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancingSettingsModelOutput)
}

// LoadBalancingSettingsModelArrayInput is an input type that accepts LoadBalancingSettingsModelArray and LoadBalancingSettingsModelArrayOutput values.
// You can construct a concrete instance of `LoadBalancingSettingsModelArrayInput` via:
//
//          LoadBalancingSettingsModelArray{ LoadBalancingSettingsModelArgs{...} }
type LoadBalancingSettingsModelArrayInput interface {
	pulumi.Input

	ToLoadBalancingSettingsModelArrayOutput() LoadBalancingSettingsModelArrayOutput
	ToLoadBalancingSettingsModelArrayOutputWithContext(context.Context) LoadBalancingSettingsModelArrayOutput
}

type LoadBalancingSettingsModelArray []LoadBalancingSettingsModelInput

func (LoadBalancingSettingsModelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancingSettingsModel)(nil)).Elem()
}

func (i LoadBalancingSettingsModelArray) ToLoadBalancingSettingsModelArrayOutput() LoadBalancingSettingsModelArrayOutput {
	return i.ToLoadBalancingSettingsModelArrayOutputWithContext(context.Background())
}

func (i LoadBalancingSettingsModelArray) ToLoadBalancingSettingsModelArrayOutputWithContext(ctx context.Context) LoadBalancingSettingsModelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancingSettingsModelArrayOutput)
}

// Load balancing settings for a backend pool
type LoadBalancingSettingsModelOutput struct{ *pulumi.OutputState }

func (LoadBalancingSettingsModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancingSettingsModel)(nil)).Elem()
}

func (o LoadBalancingSettingsModelOutput) ToLoadBalancingSettingsModelOutput() LoadBalancingSettingsModelOutput {
	return o
}

func (o LoadBalancingSettingsModelOutput) ToLoadBalancingSettingsModelOutputWithContext(ctx context.Context) LoadBalancingSettingsModelOutput {
	return o
}

// The additional latency in milliseconds for probes to fall into the lowest latency bucket
func (o LoadBalancingSettingsModelOutput) AdditionalLatencyMilliseconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModel) *int { return v.AdditionalLatencyMilliseconds }).(pulumi.IntPtrOutput)
}

// Resource ID.
func (o LoadBalancingSettingsModelOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModel) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o LoadBalancingSettingsModelOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModel) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The number of samples to consider for load balancing decisions
func (o LoadBalancingSettingsModelOutput) SampleSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModel) *int { return v.SampleSize }).(pulumi.IntPtrOutput)
}

// The number of samples within the sample period that must succeed
func (o LoadBalancingSettingsModelOutput) SuccessfulSamplesRequired() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModel) *int { return v.SuccessfulSamplesRequired }).(pulumi.IntPtrOutput)
}

type LoadBalancingSettingsModelArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancingSettingsModelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancingSettingsModel)(nil)).Elem()
}

func (o LoadBalancingSettingsModelArrayOutput) ToLoadBalancingSettingsModelArrayOutput() LoadBalancingSettingsModelArrayOutput {
	return o
}

func (o LoadBalancingSettingsModelArrayOutput) ToLoadBalancingSettingsModelArrayOutputWithContext(ctx context.Context) LoadBalancingSettingsModelArrayOutput {
	return o
}

func (o LoadBalancingSettingsModelArrayOutput) Index(i pulumi.IntInput) LoadBalancingSettingsModelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancingSettingsModel {
		return vs[0].([]LoadBalancingSettingsModel)[vs[1].(int)]
	}).(LoadBalancingSettingsModelOutput)
}

// Load balancing settings for a backend pool
type LoadBalancingSettingsModelResponse struct {
	// The additional latency in milliseconds for probes to fall into the lowest latency bucket
	AdditionalLatencyMilliseconds *int `pulumi:"additionalLatencyMilliseconds"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Resource status.
	ResourceState string `pulumi:"resourceState"`
	// The number of samples to consider for load balancing decisions
	SampleSize *int `pulumi:"sampleSize"`
	// The number of samples within the sample period that must succeed
	SuccessfulSamplesRequired *int `pulumi:"successfulSamplesRequired"`
	// Resource type.
	Type string `pulumi:"type"`
}

// LoadBalancingSettingsModelResponseInput is an input type that accepts LoadBalancingSettingsModelResponseArgs and LoadBalancingSettingsModelResponseOutput values.
// You can construct a concrete instance of `LoadBalancingSettingsModelResponseInput` via:
//
//          LoadBalancingSettingsModelResponseArgs{...}
type LoadBalancingSettingsModelResponseInput interface {
	pulumi.Input

	ToLoadBalancingSettingsModelResponseOutput() LoadBalancingSettingsModelResponseOutput
	ToLoadBalancingSettingsModelResponseOutputWithContext(context.Context) LoadBalancingSettingsModelResponseOutput
}

// Load balancing settings for a backend pool
type LoadBalancingSettingsModelResponseArgs struct {
	// The additional latency in milliseconds for probes to fall into the lowest latency bucket
	AdditionalLatencyMilliseconds pulumi.IntPtrInput `pulumi:"additionalLatencyMilliseconds"`
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Resource status.
	ResourceState pulumi.StringInput `pulumi:"resourceState"`
	// The number of samples to consider for load balancing decisions
	SampleSize pulumi.IntPtrInput `pulumi:"sampleSize"`
	// The number of samples within the sample period that must succeed
	SuccessfulSamplesRequired pulumi.IntPtrInput `pulumi:"successfulSamplesRequired"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LoadBalancingSettingsModelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancingSettingsModelResponse)(nil)).Elem()
}

func (i LoadBalancingSettingsModelResponseArgs) ToLoadBalancingSettingsModelResponseOutput() LoadBalancingSettingsModelResponseOutput {
	return i.ToLoadBalancingSettingsModelResponseOutputWithContext(context.Background())
}

func (i LoadBalancingSettingsModelResponseArgs) ToLoadBalancingSettingsModelResponseOutputWithContext(ctx context.Context) LoadBalancingSettingsModelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancingSettingsModelResponseOutput)
}

// LoadBalancingSettingsModelResponseArrayInput is an input type that accepts LoadBalancingSettingsModelResponseArray and LoadBalancingSettingsModelResponseArrayOutput values.
// You can construct a concrete instance of `LoadBalancingSettingsModelResponseArrayInput` via:
//
//          LoadBalancingSettingsModelResponseArray{ LoadBalancingSettingsModelResponseArgs{...} }
type LoadBalancingSettingsModelResponseArrayInput interface {
	pulumi.Input

	ToLoadBalancingSettingsModelResponseArrayOutput() LoadBalancingSettingsModelResponseArrayOutput
	ToLoadBalancingSettingsModelResponseArrayOutputWithContext(context.Context) LoadBalancingSettingsModelResponseArrayOutput
}

type LoadBalancingSettingsModelResponseArray []LoadBalancingSettingsModelResponseInput

func (LoadBalancingSettingsModelResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancingSettingsModelResponse)(nil)).Elem()
}

func (i LoadBalancingSettingsModelResponseArray) ToLoadBalancingSettingsModelResponseArrayOutput() LoadBalancingSettingsModelResponseArrayOutput {
	return i.ToLoadBalancingSettingsModelResponseArrayOutputWithContext(context.Background())
}

func (i LoadBalancingSettingsModelResponseArray) ToLoadBalancingSettingsModelResponseArrayOutputWithContext(ctx context.Context) LoadBalancingSettingsModelResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancingSettingsModelResponseArrayOutput)
}

// Load balancing settings for a backend pool
type LoadBalancingSettingsModelResponseOutput struct{ *pulumi.OutputState }

func (LoadBalancingSettingsModelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancingSettingsModelResponse)(nil)).Elem()
}

func (o LoadBalancingSettingsModelResponseOutput) ToLoadBalancingSettingsModelResponseOutput() LoadBalancingSettingsModelResponseOutput {
	return o
}

func (o LoadBalancingSettingsModelResponseOutput) ToLoadBalancingSettingsModelResponseOutputWithContext(ctx context.Context) LoadBalancingSettingsModelResponseOutput {
	return o
}

// The additional latency in milliseconds for probes to fall into the lowest latency bucket
func (o LoadBalancingSettingsModelResponseOutput) AdditionalLatencyMilliseconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModelResponse) *int { return v.AdditionalLatencyMilliseconds }).(pulumi.IntPtrOutput)
}

// Resource ID.
func (o LoadBalancingSettingsModelResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModelResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o LoadBalancingSettingsModelResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModelResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Resource status.
func (o LoadBalancingSettingsModelResponseOutput) ResourceState() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModelResponse) string { return v.ResourceState }).(pulumi.StringOutput)
}

// The number of samples to consider for load balancing decisions
func (o LoadBalancingSettingsModelResponseOutput) SampleSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModelResponse) *int { return v.SampleSize }).(pulumi.IntPtrOutput)
}

// The number of samples within the sample period that must succeed
func (o LoadBalancingSettingsModelResponseOutput) SuccessfulSamplesRequired() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModelResponse) *int { return v.SuccessfulSamplesRequired }).(pulumi.IntPtrOutput)
}

// Resource type.
func (o LoadBalancingSettingsModelResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModelResponse) string { return v.Type }).(pulumi.StringOutput)
}

type LoadBalancingSettingsModelResponseArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancingSettingsModelResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancingSettingsModelResponse)(nil)).Elem()
}

func (o LoadBalancingSettingsModelResponseArrayOutput) ToLoadBalancingSettingsModelResponseArrayOutput() LoadBalancingSettingsModelResponseArrayOutput {
	return o
}

func (o LoadBalancingSettingsModelResponseArrayOutput) ToLoadBalancingSettingsModelResponseArrayOutputWithContext(ctx context.Context) LoadBalancingSettingsModelResponseArrayOutput {
	return o
}

func (o LoadBalancingSettingsModelResponseArrayOutput) Index(i pulumi.IntInput) LoadBalancingSettingsModelResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancingSettingsModelResponse {
		return vs[0].([]LoadBalancingSettingsModelResponse)[vs[1].(int)]
	}).(LoadBalancingSettingsModelResponseOutput)
}

// Describes Redirect Route.
type RedirectConfiguration struct {
	// Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.
	CustomFragment *string `pulumi:"customFragment"`
	// Host to redirect. Leave empty to use the incoming host as the destination host.
	CustomHost *string `pulumi:"customHost"`
	// The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.
	CustomPath *string `pulumi:"customPath"`
	// The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in <key>=<value> format. The first ? and & will be added automatically so do not include them in the front, but do separate multiple query strings with &.
	CustomQueryString *string `pulumi:"customQueryString"`
	OdataType         string  `pulumi:"odataType"`
	// The protocol of the destination to where the traffic is redirected
	RedirectProtocol *string `pulumi:"redirectProtocol"`
	// The redirect type the rule will use when redirecting traffic.
	RedirectType *string `pulumi:"redirectType"`
}

// RedirectConfigurationInput is an input type that accepts RedirectConfigurationArgs and RedirectConfigurationOutput values.
// You can construct a concrete instance of `RedirectConfigurationInput` via:
//
//          RedirectConfigurationArgs{...}
type RedirectConfigurationInput interface {
	pulumi.Input

	ToRedirectConfigurationOutput() RedirectConfigurationOutput
	ToRedirectConfigurationOutputWithContext(context.Context) RedirectConfigurationOutput
}

// Describes Redirect Route.
type RedirectConfigurationArgs struct {
	// Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.
	CustomFragment pulumi.StringPtrInput `pulumi:"customFragment"`
	// Host to redirect. Leave empty to use the incoming host as the destination host.
	CustomHost pulumi.StringPtrInput `pulumi:"customHost"`
	// The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.
	CustomPath pulumi.StringPtrInput `pulumi:"customPath"`
	// The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in <key>=<value> format. The first ? and & will be added automatically so do not include them in the front, but do separate multiple query strings with &.
	CustomQueryString pulumi.StringPtrInput `pulumi:"customQueryString"`
	OdataType         pulumi.StringInput    `pulumi:"odataType"`
	// The protocol of the destination to where the traffic is redirected
	RedirectProtocol pulumi.StringPtrInput `pulumi:"redirectProtocol"`
	// The redirect type the rule will use when redirecting traffic.
	RedirectType pulumi.StringPtrInput `pulumi:"redirectType"`
}

func (RedirectConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedirectConfiguration)(nil)).Elem()
}

func (i RedirectConfigurationArgs) ToRedirectConfigurationOutput() RedirectConfigurationOutput {
	return i.ToRedirectConfigurationOutputWithContext(context.Background())
}

func (i RedirectConfigurationArgs) ToRedirectConfigurationOutputWithContext(ctx context.Context) RedirectConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedirectConfigurationOutput)
}

// Describes Redirect Route.
type RedirectConfigurationOutput struct{ *pulumi.OutputState }

func (RedirectConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedirectConfiguration)(nil)).Elem()
}

func (o RedirectConfigurationOutput) ToRedirectConfigurationOutput() RedirectConfigurationOutput {
	return o
}

func (o RedirectConfigurationOutput) ToRedirectConfigurationOutputWithContext(ctx context.Context) RedirectConfigurationOutput {
	return o
}

// Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.
func (o RedirectConfigurationOutput) CustomFragment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedirectConfiguration) *string { return v.CustomFragment }).(pulumi.StringPtrOutput)
}

// Host to redirect. Leave empty to use the incoming host as the destination host.
func (o RedirectConfigurationOutput) CustomHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedirectConfiguration) *string { return v.CustomHost }).(pulumi.StringPtrOutput)
}

// The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.
func (o RedirectConfigurationOutput) CustomPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedirectConfiguration) *string { return v.CustomPath }).(pulumi.StringPtrOutput)
}

// The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in <key>=<value> format. The first ? and & will be added automatically so do not include them in the front, but do separate multiple query strings with &.
func (o RedirectConfigurationOutput) CustomQueryString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedirectConfiguration) *string { return v.CustomQueryString }).(pulumi.StringPtrOutput)
}

func (o RedirectConfigurationOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v RedirectConfiguration) string { return v.OdataType }).(pulumi.StringOutput)
}

// The protocol of the destination to where the traffic is redirected
func (o RedirectConfigurationOutput) RedirectProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedirectConfiguration) *string { return v.RedirectProtocol }).(pulumi.StringPtrOutput)
}

// The redirect type the rule will use when redirecting traffic.
func (o RedirectConfigurationOutput) RedirectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedirectConfiguration) *string { return v.RedirectType }).(pulumi.StringPtrOutput)
}

// Describes Redirect Route.
type RedirectConfigurationResponse struct {
	// Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.
	CustomFragment *string `pulumi:"customFragment"`
	// Host to redirect. Leave empty to use the incoming host as the destination host.
	CustomHost *string `pulumi:"customHost"`
	// The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.
	CustomPath *string `pulumi:"customPath"`
	// The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in <key>=<value> format. The first ? and & will be added automatically so do not include them in the front, but do separate multiple query strings with &.
	CustomQueryString *string `pulumi:"customQueryString"`
	OdataType         string  `pulumi:"odataType"`
	// The protocol of the destination to where the traffic is redirected
	RedirectProtocol *string `pulumi:"redirectProtocol"`
	// The redirect type the rule will use when redirecting traffic.
	RedirectType *string `pulumi:"redirectType"`
}

// RedirectConfigurationResponseInput is an input type that accepts RedirectConfigurationResponseArgs and RedirectConfigurationResponseOutput values.
// You can construct a concrete instance of `RedirectConfigurationResponseInput` via:
//
//          RedirectConfigurationResponseArgs{...}
type RedirectConfigurationResponseInput interface {
	pulumi.Input

	ToRedirectConfigurationResponseOutput() RedirectConfigurationResponseOutput
	ToRedirectConfigurationResponseOutputWithContext(context.Context) RedirectConfigurationResponseOutput
}

// Describes Redirect Route.
type RedirectConfigurationResponseArgs struct {
	// Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.
	CustomFragment pulumi.StringPtrInput `pulumi:"customFragment"`
	// Host to redirect. Leave empty to use the incoming host as the destination host.
	CustomHost pulumi.StringPtrInput `pulumi:"customHost"`
	// The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.
	CustomPath pulumi.StringPtrInput `pulumi:"customPath"`
	// The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in <key>=<value> format. The first ? and & will be added automatically so do not include them in the front, but do separate multiple query strings with &.
	CustomQueryString pulumi.StringPtrInput `pulumi:"customQueryString"`
	OdataType         pulumi.StringInput    `pulumi:"odataType"`
	// The protocol of the destination to where the traffic is redirected
	RedirectProtocol pulumi.StringPtrInput `pulumi:"redirectProtocol"`
	// The redirect type the rule will use when redirecting traffic.
	RedirectType pulumi.StringPtrInput `pulumi:"redirectType"`
}

func (RedirectConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedirectConfigurationResponse)(nil)).Elem()
}

func (i RedirectConfigurationResponseArgs) ToRedirectConfigurationResponseOutput() RedirectConfigurationResponseOutput {
	return i.ToRedirectConfigurationResponseOutputWithContext(context.Background())
}

func (i RedirectConfigurationResponseArgs) ToRedirectConfigurationResponseOutputWithContext(ctx context.Context) RedirectConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedirectConfigurationResponseOutput)
}

// Describes Redirect Route.
type RedirectConfigurationResponseOutput struct{ *pulumi.OutputState }

func (RedirectConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedirectConfigurationResponse)(nil)).Elem()
}

func (o RedirectConfigurationResponseOutput) ToRedirectConfigurationResponseOutput() RedirectConfigurationResponseOutput {
	return o
}

func (o RedirectConfigurationResponseOutput) ToRedirectConfigurationResponseOutputWithContext(ctx context.Context) RedirectConfigurationResponseOutput {
	return o
}

// Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.
func (o RedirectConfigurationResponseOutput) CustomFragment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedirectConfigurationResponse) *string { return v.CustomFragment }).(pulumi.StringPtrOutput)
}

// Host to redirect. Leave empty to use the incoming host as the destination host.
func (o RedirectConfigurationResponseOutput) CustomHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedirectConfigurationResponse) *string { return v.CustomHost }).(pulumi.StringPtrOutput)
}

// The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.
func (o RedirectConfigurationResponseOutput) CustomPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedirectConfigurationResponse) *string { return v.CustomPath }).(pulumi.StringPtrOutput)
}

// The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in <key>=<value> format. The first ? and & will be added automatically so do not include them in the front, but do separate multiple query strings with &.
func (o RedirectConfigurationResponseOutput) CustomQueryString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedirectConfigurationResponse) *string { return v.CustomQueryString }).(pulumi.StringPtrOutput)
}

func (o RedirectConfigurationResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v RedirectConfigurationResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// The protocol of the destination to where the traffic is redirected
func (o RedirectConfigurationResponseOutput) RedirectProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedirectConfigurationResponse) *string { return v.RedirectProtocol }).(pulumi.StringPtrOutput)
}

// The redirect type the rule will use when redirecting traffic.
func (o RedirectConfigurationResponseOutput) RedirectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedirectConfigurationResponse) *string { return v.RedirectType }).(pulumi.StringPtrOutput)
}

// A routing rule represents a specification for traffic to treat and where to send it, along with health probe information.
type RoutingRule struct {
	// Protocol schemes to match for this rule
	AcceptedProtocols []string `pulumi:"acceptedProtocols"`
	// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
	EnabledState *string `pulumi:"enabledState"`
	// Frontend endpoints associated with this rule
	FrontendEndpoints []SubResource `pulumi:"frontendEndpoints"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource name.
	Name *string `pulumi:"name"`
	// The route patterns of the rule.
	PatternsToMatch []string `pulumi:"patternsToMatch"`
	// A reference to the routing configuration.
	RouteConfiguration interface{} `pulumi:"routeConfiguration"`
	// A reference to a specific Rules Engine Configuration to apply to this route.
	RulesEngine *SubResource `pulumi:"rulesEngine"`
}

// RoutingRuleInput is an input type that accepts RoutingRuleArgs and RoutingRuleOutput values.
// You can construct a concrete instance of `RoutingRuleInput` via:
//
//          RoutingRuleArgs{...}
type RoutingRuleInput interface {
	pulumi.Input

	ToRoutingRuleOutput() RoutingRuleOutput
	ToRoutingRuleOutputWithContext(context.Context) RoutingRuleOutput
}

// A routing rule represents a specification for traffic to treat and where to send it, along with health probe information.
type RoutingRuleArgs struct {
	// Protocol schemes to match for this rule
	AcceptedProtocols pulumi.StringArrayInput `pulumi:"acceptedProtocols"`
	// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
	EnabledState pulumi.StringPtrInput `pulumi:"enabledState"`
	// Frontend endpoints associated with this rule
	FrontendEndpoints SubResourceArrayInput `pulumi:"frontendEndpoints"`
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The route patterns of the rule.
	PatternsToMatch pulumi.StringArrayInput `pulumi:"patternsToMatch"`
	// A reference to the routing configuration.
	RouteConfiguration pulumi.Input `pulumi:"routeConfiguration"`
	// A reference to a specific Rules Engine Configuration to apply to this route.
	RulesEngine SubResourcePtrInput `pulumi:"rulesEngine"`
}

func (RoutingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingRule)(nil)).Elem()
}

func (i RoutingRuleArgs) ToRoutingRuleOutput() RoutingRuleOutput {
	return i.ToRoutingRuleOutputWithContext(context.Background())
}

func (i RoutingRuleArgs) ToRoutingRuleOutputWithContext(ctx context.Context) RoutingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRuleOutput)
}

// RoutingRuleArrayInput is an input type that accepts RoutingRuleArray and RoutingRuleArrayOutput values.
// You can construct a concrete instance of `RoutingRuleArrayInput` via:
//
//          RoutingRuleArray{ RoutingRuleArgs{...} }
type RoutingRuleArrayInput interface {
	pulumi.Input

	ToRoutingRuleArrayOutput() RoutingRuleArrayOutput
	ToRoutingRuleArrayOutputWithContext(context.Context) RoutingRuleArrayOutput
}

type RoutingRuleArray []RoutingRuleInput

func (RoutingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutingRule)(nil)).Elem()
}

func (i RoutingRuleArray) ToRoutingRuleArrayOutput() RoutingRuleArrayOutput {
	return i.ToRoutingRuleArrayOutputWithContext(context.Background())
}

func (i RoutingRuleArray) ToRoutingRuleArrayOutputWithContext(ctx context.Context) RoutingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRuleArrayOutput)
}

// A routing rule represents a specification for traffic to treat and where to send it, along with health probe information.
type RoutingRuleOutput struct{ *pulumi.OutputState }

func (RoutingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingRule)(nil)).Elem()
}

func (o RoutingRuleOutput) ToRoutingRuleOutput() RoutingRuleOutput {
	return o
}

func (o RoutingRuleOutput) ToRoutingRuleOutputWithContext(ctx context.Context) RoutingRuleOutput {
	return o
}

// Protocol schemes to match for this rule
func (o RoutingRuleOutput) AcceptedProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoutingRule) []string { return v.AcceptedProtocols }).(pulumi.StringArrayOutput)
}

// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
func (o RoutingRuleOutput) EnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingRule) *string { return v.EnabledState }).(pulumi.StringPtrOutput)
}

// Frontend endpoints associated with this rule
func (o RoutingRuleOutput) FrontendEndpoints() SubResourceArrayOutput {
	return o.ApplyT(func(v RoutingRule) []SubResource { return v.FrontendEndpoints }).(SubResourceArrayOutput)
}

// Resource ID.
func (o RoutingRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o RoutingRuleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingRule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The route patterns of the rule.
func (o RoutingRuleOutput) PatternsToMatch() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoutingRule) []string { return v.PatternsToMatch }).(pulumi.StringArrayOutput)
}

// A reference to the routing configuration.
func (o RoutingRuleOutput) RouteConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v RoutingRule) interface{} { return v.RouteConfiguration }).(pulumi.AnyOutput)
}

// A reference to a specific Rules Engine Configuration to apply to this route.
func (o RoutingRuleOutput) RulesEngine() SubResourcePtrOutput {
	return o.ApplyT(func(v RoutingRule) *SubResource { return v.RulesEngine }).(SubResourcePtrOutput)
}

type RoutingRuleArrayOutput struct{ *pulumi.OutputState }

func (RoutingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutingRule)(nil)).Elem()
}

func (o RoutingRuleArrayOutput) ToRoutingRuleArrayOutput() RoutingRuleArrayOutput {
	return o
}

func (o RoutingRuleArrayOutput) ToRoutingRuleArrayOutputWithContext(ctx context.Context) RoutingRuleArrayOutput {
	return o
}

func (o RoutingRuleArrayOutput) Index(i pulumi.IntInput) RoutingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoutingRule {
		return vs[0].([]RoutingRule)[vs[1].(int)]
	}).(RoutingRuleOutput)
}

// A routing rule represents a specification for traffic to treat and where to send it, along with health probe information.
type RoutingRuleResponse struct {
	// Protocol schemes to match for this rule
	AcceptedProtocols []string `pulumi:"acceptedProtocols"`
	// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
	EnabledState *string `pulumi:"enabledState"`
	// Frontend endpoints associated with this rule
	FrontendEndpoints []SubResourceResponse `pulumi:"frontendEndpoints"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource name.
	Name *string `pulumi:"name"`
	// The route patterns of the rule.
	PatternsToMatch []string `pulumi:"patternsToMatch"`
	// Resource status.
	ResourceState string `pulumi:"resourceState"`
	// A reference to the routing configuration.
	RouteConfiguration interface{} `pulumi:"routeConfiguration"`
	// A reference to a specific Rules Engine Configuration to apply to this route.
	RulesEngine *SubResourceResponse `pulumi:"rulesEngine"`
	// Resource type.
	Type string `pulumi:"type"`
}

// RoutingRuleResponseInput is an input type that accepts RoutingRuleResponseArgs and RoutingRuleResponseOutput values.
// You can construct a concrete instance of `RoutingRuleResponseInput` via:
//
//          RoutingRuleResponseArgs{...}
type RoutingRuleResponseInput interface {
	pulumi.Input

	ToRoutingRuleResponseOutput() RoutingRuleResponseOutput
	ToRoutingRuleResponseOutputWithContext(context.Context) RoutingRuleResponseOutput
}

// A routing rule represents a specification for traffic to treat and where to send it, along with health probe information.
type RoutingRuleResponseArgs struct {
	// Protocol schemes to match for this rule
	AcceptedProtocols pulumi.StringArrayInput `pulumi:"acceptedProtocols"`
	// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
	EnabledState pulumi.StringPtrInput `pulumi:"enabledState"`
	// Frontend endpoints associated with this rule
	FrontendEndpoints SubResourceResponseArrayInput `pulumi:"frontendEndpoints"`
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The route patterns of the rule.
	PatternsToMatch pulumi.StringArrayInput `pulumi:"patternsToMatch"`
	// Resource status.
	ResourceState pulumi.StringInput `pulumi:"resourceState"`
	// A reference to the routing configuration.
	RouteConfiguration pulumi.Input `pulumi:"routeConfiguration"`
	// A reference to a specific Rules Engine Configuration to apply to this route.
	RulesEngine SubResourceResponsePtrInput `pulumi:"rulesEngine"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RoutingRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingRuleResponse)(nil)).Elem()
}

func (i RoutingRuleResponseArgs) ToRoutingRuleResponseOutput() RoutingRuleResponseOutput {
	return i.ToRoutingRuleResponseOutputWithContext(context.Background())
}

func (i RoutingRuleResponseArgs) ToRoutingRuleResponseOutputWithContext(ctx context.Context) RoutingRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRuleResponseOutput)
}

// RoutingRuleResponseArrayInput is an input type that accepts RoutingRuleResponseArray and RoutingRuleResponseArrayOutput values.
// You can construct a concrete instance of `RoutingRuleResponseArrayInput` via:
//
//          RoutingRuleResponseArray{ RoutingRuleResponseArgs{...} }
type RoutingRuleResponseArrayInput interface {
	pulumi.Input

	ToRoutingRuleResponseArrayOutput() RoutingRuleResponseArrayOutput
	ToRoutingRuleResponseArrayOutputWithContext(context.Context) RoutingRuleResponseArrayOutput
}

type RoutingRuleResponseArray []RoutingRuleResponseInput

func (RoutingRuleResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutingRuleResponse)(nil)).Elem()
}

func (i RoutingRuleResponseArray) ToRoutingRuleResponseArrayOutput() RoutingRuleResponseArrayOutput {
	return i.ToRoutingRuleResponseArrayOutputWithContext(context.Background())
}

func (i RoutingRuleResponseArray) ToRoutingRuleResponseArrayOutputWithContext(ctx context.Context) RoutingRuleResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRuleResponseArrayOutput)
}

// A routing rule represents a specification for traffic to treat and where to send it, along with health probe information.
type RoutingRuleResponseOutput struct{ *pulumi.OutputState }

func (RoutingRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingRuleResponse)(nil)).Elem()
}

func (o RoutingRuleResponseOutput) ToRoutingRuleResponseOutput() RoutingRuleResponseOutput {
	return o
}

func (o RoutingRuleResponseOutput) ToRoutingRuleResponseOutputWithContext(ctx context.Context) RoutingRuleResponseOutput {
	return o
}

// Protocol schemes to match for this rule
func (o RoutingRuleResponseOutput) AcceptedProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoutingRuleResponse) []string { return v.AcceptedProtocols }).(pulumi.StringArrayOutput)
}

// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
func (o RoutingRuleResponseOutput) EnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingRuleResponse) *string { return v.EnabledState }).(pulumi.StringPtrOutput)
}

// Frontend endpoints associated with this rule
func (o RoutingRuleResponseOutput) FrontendEndpoints() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v RoutingRuleResponse) []SubResourceResponse { return v.FrontendEndpoints }).(SubResourceResponseArrayOutput)
}

// Resource ID.
func (o RoutingRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o RoutingRuleResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingRuleResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The route patterns of the rule.
func (o RoutingRuleResponseOutput) PatternsToMatch() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoutingRuleResponse) []string { return v.PatternsToMatch }).(pulumi.StringArrayOutput)
}

// Resource status.
func (o RoutingRuleResponseOutput) ResourceState() pulumi.StringOutput {
	return o.ApplyT(func(v RoutingRuleResponse) string { return v.ResourceState }).(pulumi.StringOutput)
}

// A reference to the routing configuration.
func (o RoutingRuleResponseOutput) RouteConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v RoutingRuleResponse) interface{} { return v.RouteConfiguration }).(pulumi.AnyOutput)
}

// A reference to a specific Rules Engine Configuration to apply to this route.
func (o RoutingRuleResponseOutput) RulesEngine() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v RoutingRuleResponse) *SubResourceResponse { return v.RulesEngine }).(SubResourceResponsePtrOutput)
}

// Resource type.
func (o RoutingRuleResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RoutingRuleResponse) string { return v.Type }).(pulumi.StringOutput)
}

type RoutingRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (RoutingRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutingRuleResponse)(nil)).Elem()
}

func (o RoutingRuleResponseArrayOutput) ToRoutingRuleResponseArrayOutput() RoutingRuleResponseArrayOutput {
	return o
}

func (o RoutingRuleResponseArrayOutput) ToRoutingRuleResponseArrayOutputWithContext(ctx context.Context) RoutingRuleResponseArrayOutput {
	return o
}

func (o RoutingRuleResponseArrayOutput) Index(i pulumi.IntInput) RoutingRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoutingRuleResponse {
		return vs[0].([]RoutingRuleResponse)[vs[1].(int)]
	}).(RoutingRuleResponseOutput)
}

// One or more actions that will execute, modifying the request and/or response.
type RulesEngineAction struct {
	// A list of header actions to apply from the request from AFD to the origin.
	RequestHeaderActions []HeaderAction `pulumi:"requestHeaderActions"`
	// A list of header actions to apply from the response from AFD to the client.
	ResponseHeaderActions []HeaderAction `pulumi:"responseHeaderActions"`
	// Override the route configuration.
	RouteConfigurationOverride interface{} `pulumi:"routeConfigurationOverride"`
}

// RulesEngineActionInput is an input type that accepts RulesEngineActionArgs and RulesEngineActionOutput values.
// You can construct a concrete instance of `RulesEngineActionInput` via:
//
//          RulesEngineActionArgs{...}
type RulesEngineActionInput interface {
	pulumi.Input

	ToRulesEngineActionOutput() RulesEngineActionOutput
	ToRulesEngineActionOutputWithContext(context.Context) RulesEngineActionOutput
}

// One or more actions that will execute, modifying the request and/or response.
type RulesEngineActionArgs struct {
	// A list of header actions to apply from the request from AFD to the origin.
	RequestHeaderActions HeaderActionArrayInput `pulumi:"requestHeaderActions"`
	// A list of header actions to apply from the response from AFD to the client.
	ResponseHeaderActions HeaderActionArrayInput `pulumi:"responseHeaderActions"`
	// Override the route configuration.
	RouteConfigurationOverride pulumi.Input `pulumi:"routeConfigurationOverride"`
}

func (RulesEngineActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineAction)(nil)).Elem()
}

func (i RulesEngineActionArgs) ToRulesEngineActionOutput() RulesEngineActionOutput {
	return i.ToRulesEngineActionOutputWithContext(context.Background())
}

func (i RulesEngineActionArgs) ToRulesEngineActionOutputWithContext(ctx context.Context) RulesEngineActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineActionOutput)
}

// One or more actions that will execute, modifying the request and/or response.
type RulesEngineActionOutput struct{ *pulumi.OutputState }

func (RulesEngineActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineAction)(nil)).Elem()
}

func (o RulesEngineActionOutput) ToRulesEngineActionOutput() RulesEngineActionOutput {
	return o
}

func (o RulesEngineActionOutput) ToRulesEngineActionOutputWithContext(ctx context.Context) RulesEngineActionOutput {
	return o
}

// A list of header actions to apply from the request from AFD to the origin.
func (o RulesEngineActionOutput) RequestHeaderActions() HeaderActionArrayOutput {
	return o.ApplyT(func(v RulesEngineAction) []HeaderAction { return v.RequestHeaderActions }).(HeaderActionArrayOutput)
}

// A list of header actions to apply from the response from AFD to the client.
func (o RulesEngineActionOutput) ResponseHeaderActions() HeaderActionArrayOutput {
	return o.ApplyT(func(v RulesEngineAction) []HeaderAction { return v.ResponseHeaderActions }).(HeaderActionArrayOutput)
}

// Override the route configuration.
func (o RulesEngineActionOutput) RouteConfigurationOverride() pulumi.AnyOutput {
	return o.ApplyT(func(v RulesEngineAction) interface{} { return v.RouteConfigurationOverride }).(pulumi.AnyOutput)
}

// One or more actions that will execute, modifying the request and/or response.
type RulesEngineActionResponse struct {
	// A list of header actions to apply from the request from AFD to the origin.
	RequestHeaderActions []HeaderActionResponse `pulumi:"requestHeaderActions"`
	// A list of header actions to apply from the response from AFD to the client.
	ResponseHeaderActions []HeaderActionResponse `pulumi:"responseHeaderActions"`
	// Override the route configuration.
	RouteConfigurationOverride interface{} `pulumi:"routeConfigurationOverride"`
}

// RulesEngineActionResponseInput is an input type that accepts RulesEngineActionResponseArgs and RulesEngineActionResponseOutput values.
// You can construct a concrete instance of `RulesEngineActionResponseInput` via:
//
//          RulesEngineActionResponseArgs{...}
type RulesEngineActionResponseInput interface {
	pulumi.Input

	ToRulesEngineActionResponseOutput() RulesEngineActionResponseOutput
	ToRulesEngineActionResponseOutputWithContext(context.Context) RulesEngineActionResponseOutput
}

// One or more actions that will execute, modifying the request and/or response.
type RulesEngineActionResponseArgs struct {
	// A list of header actions to apply from the request from AFD to the origin.
	RequestHeaderActions HeaderActionResponseArrayInput `pulumi:"requestHeaderActions"`
	// A list of header actions to apply from the response from AFD to the client.
	ResponseHeaderActions HeaderActionResponseArrayInput `pulumi:"responseHeaderActions"`
	// Override the route configuration.
	RouteConfigurationOverride pulumi.Input `pulumi:"routeConfigurationOverride"`
}

func (RulesEngineActionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineActionResponse)(nil)).Elem()
}

func (i RulesEngineActionResponseArgs) ToRulesEngineActionResponseOutput() RulesEngineActionResponseOutput {
	return i.ToRulesEngineActionResponseOutputWithContext(context.Background())
}

func (i RulesEngineActionResponseArgs) ToRulesEngineActionResponseOutputWithContext(ctx context.Context) RulesEngineActionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineActionResponseOutput)
}

// One or more actions that will execute, modifying the request and/or response.
type RulesEngineActionResponseOutput struct{ *pulumi.OutputState }

func (RulesEngineActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineActionResponse)(nil)).Elem()
}

func (o RulesEngineActionResponseOutput) ToRulesEngineActionResponseOutput() RulesEngineActionResponseOutput {
	return o
}

func (o RulesEngineActionResponseOutput) ToRulesEngineActionResponseOutputWithContext(ctx context.Context) RulesEngineActionResponseOutput {
	return o
}

// A list of header actions to apply from the request from AFD to the origin.
func (o RulesEngineActionResponseOutput) RequestHeaderActions() HeaderActionResponseArrayOutput {
	return o.ApplyT(func(v RulesEngineActionResponse) []HeaderActionResponse { return v.RequestHeaderActions }).(HeaderActionResponseArrayOutput)
}

// A list of header actions to apply from the response from AFD to the client.
func (o RulesEngineActionResponseOutput) ResponseHeaderActions() HeaderActionResponseArrayOutput {
	return o.ApplyT(func(v RulesEngineActionResponse) []HeaderActionResponse { return v.ResponseHeaderActions }).(HeaderActionResponseArrayOutput)
}

// Override the route configuration.
func (o RulesEngineActionResponseOutput) RouteConfigurationOverride() pulumi.AnyOutput {
	return o.ApplyT(func(v RulesEngineActionResponse) interface{} { return v.RouteConfigurationOverride }).(pulumi.AnyOutput)
}

// Define a match condition
type RulesEngineMatchCondition struct {
	// Describes if this is negate condition or not
	NegateCondition *bool `pulumi:"negateCondition"`
	// Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.
	RulesEngineMatchValue []string `pulumi:"rulesEngineMatchValue"`
	// Match Variable
	RulesEngineMatchVariable string `pulumi:"rulesEngineMatchVariable"`
	// Describes operator to apply to the match condition.
	RulesEngineOperator string `pulumi:"rulesEngineOperator"`
	// Name of selector in RequestHeader or RequestBody to be matched
	Selector *string `pulumi:"selector"`
	// List of transforms
	Transforms []string `pulumi:"transforms"`
}

// RulesEngineMatchConditionInput is an input type that accepts RulesEngineMatchConditionArgs and RulesEngineMatchConditionOutput values.
// You can construct a concrete instance of `RulesEngineMatchConditionInput` via:
//
//          RulesEngineMatchConditionArgs{...}
type RulesEngineMatchConditionInput interface {
	pulumi.Input

	ToRulesEngineMatchConditionOutput() RulesEngineMatchConditionOutput
	ToRulesEngineMatchConditionOutputWithContext(context.Context) RulesEngineMatchConditionOutput
}

// Define a match condition
type RulesEngineMatchConditionArgs struct {
	// Describes if this is negate condition or not
	NegateCondition pulumi.BoolPtrInput `pulumi:"negateCondition"`
	// Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.
	RulesEngineMatchValue pulumi.StringArrayInput `pulumi:"rulesEngineMatchValue"`
	// Match Variable
	RulesEngineMatchVariable pulumi.StringInput `pulumi:"rulesEngineMatchVariable"`
	// Describes operator to apply to the match condition.
	RulesEngineOperator pulumi.StringInput `pulumi:"rulesEngineOperator"`
	// Name of selector in RequestHeader or RequestBody to be matched
	Selector pulumi.StringPtrInput `pulumi:"selector"`
	// List of transforms
	Transforms pulumi.StringArrayInput `pulumi:"transforms"`
}

func (RulesEngineMatchConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineMatchCondition)(nil)).Elem()
}

func (i RulesEngineMatchConditionArgs) ToRulesEngineMatchConditionOutput() RulesEngineMatchConditionOutput {
	return i.ToRulesEngineMatchConditionOutputWithContext(context.Background())
}

func (i RulesEngineMatchConditionArgs) ToRulesEngineMatchConditionOutputWithContext(ctx context.Context) RulesEngineMatchConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineMatchConditionOutput)
}

// RulesEngineMatchConditionArrayInput is an input type that accepts RulesEngineMatchConditionArray and RulesEngineMatchConditionArrayOutput values.
// You can construct a concrete instance of `RulesEngineMatchConditionArrayInput` via:
//
//          RulesEngineMatchConditionArray{ RulesEngineMatchConditionArgs{...} }
type RulesEngineMatchConditionArrayInput interface {
	pulumi.Input

	ToRulesEngineMatchConditionArrayOutput() RulesEngineMatchConditionArrayOutput
	ToRulesEngineMatchConditionArrayOutputWithContext(context.Context) RulesEngineMatchConditionArrayOutput
}

type RulesEngineMatchConditionArray []RulesEngineMatchConditionInput

func (RulesEngineMatchConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesEngineMatchCondition)(nil)).Elem()
}

func (i RulesEngineMatchConditionArray) ToRulesEngineMatchConditionArrayOutput() RulesEngineMatchConditionArrayOutput {
	return i.ToRulesEngineMatchConditionArrayOutputWithContext(context.Background())
}

func (i RulesEngineMatchConditionArray) ToRulesEngineMatchConditionArrayOutputWithContext(ctx context.Context) RulesEngineMatchConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineMatchConditionArrayOutput)
}

// Define a match condition
type RulesEngineMatchConditionOutput struct{ *pulumi.OutputState }

func (RulesEngineMatchConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineMatchCondition)(nil)).Elem()
}

func (o RulesEngineMatchConditionOutput) ToRulesEngineMatchConditionOutput() RulesEngineMatchConditionOutput {
	return o
}

func (o RulesEngineMatchConditionOutput) ToRulesEngineMatchConditionOutputWithContext(ctx context.Context) RulesEngineMatchConditionOutput {
	return o
}

// Describes if this is negate condition or not
func (o RulesEngineMatchConditionOutput) NegateCondition() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RulesEngineMatchCondition) *bool { return v.NegateCondition }).(pulumi.BoolPtrOutput)
}

// Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.
func (o RulesEngineMatchConditionOutput) RulesEngineMatchValue() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RulesEngineMatchCondition) []string { return v.RulesEngineMatchValue }).(pulumi.StringArrayOutput)
}

// Match Variable
func (o RulesEngineMatchConditionOutput) RulesEngineMatchVariable() pulumi.StringOutput {
	return o.ApplyT(func(v RulesEngineMatchCondition) string { return v.RulesEngineMatchVariable }).(pulumi.StringOutput)
}

// Describes operator to apply to the match condition.
func (o RulesEngineMatchConditionOutput) RulesEngineOperator() pulumi.StringOutput {
	return o.ApplyT(func(v RulesEngineMatchCondition) string { return v.RulesEngineOperator }).(pulumi.StringOutput)
}

// Name of selector in RequestHeader or RequestBody to be matched
func (o RulesEngineMatchConditionOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesEngineMatchCondition) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

// List of transforms
func (o RulesEngineMatchConditionOutput) Transforms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RulesEngineMatchCondition) []string { return v.Transforms }).(pulumi.StringArrayOutput)
}

type RulesEngineMatchConditionArrayOutput struct{ *pulumi.OutputState }

func (RulesEngineMatchConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesEngineMatchCondition)(nil)).Elem()
}

func (o RulesEngineMatchConditionArrayOutput) ToRulesEngineMatchConditionArrayOutput() RulesEngineMatchConditionArrayOutput {
	return o
}

func (o RulesEngineMatchConditionArrayOutput) ToRulesEngineMatchConditionArrayOutputWithContext(ctx context.Context) RulesEngineMatchConditionArrayOutput {
	return o
}

func (o RulesEngineMatchConditionArrayOutput) Index(i pulumi.IntInput) RulesEngineMatchConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesEngineMatchCondition {
		return vs[0].([]RulesEngineMatchCondition)[vs[1].(int)]
	}).(RulesEngineMatchConditionOutput)
}

// Define a match condition
type RulesEngineMatchConditionResponse struct {
	// Describes if this is negate condition or not
	NegateCondition *bool `pulumi:"negateCondition"`
	// Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.
	RulesEngineMatchValue []string `pulumi:"rulesEngineMatchValue"`
	// Match Variable
	RulesEngineMatchVariable string `pulumi:"rulesEngineMatchVariable"`
	// Describes operator to apply to the match condition.
	RulesEngineOperator string `pulumi:"rulesEngineOperator"`
	// Name of selector in RequestHeader or RequestBody to be matched
	Selector *string `pulumi:"selector"`
	// List of transforms
	Transforms []string `pulumi:"transforms"`
}

// RulesEngineMatchConditionResponseInput is an input type that accepts RulesEngineMatchConditionResponseArgs and RulesEngineMatchConditionResponseOutput values.
// You can construct a concrete instance of `RulesEngineMatchConditionResponseInput` via:
//
//          RulesEngineMatchConditionResponseArgs{...}
type RulesEngineMatchConditionResponseInput interface {
	pulumi.Input

	ToRulesEngineMatchConditionResponseOutput() RulesEngineMatchConditionResponseOutput
	ToRulesEngineMatchConditionResponseOutputWithContext(context.Context) RulesEngineMatchConditionResponseOutput
}

// Define a match condition
type RulesEngineMatchConditionResponseArgs struct {
	// Describes if this is negate condition or not
	NegateCondition pulumi.BoolPtrInput `pulumi:"negateCondition"`
	// Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.
	RulesEngineMatchValue pulumi.StringArrayInput `pulumi:"rulesEngineMatchValue"`
	// Match Variable
	RulesEngineMatchVariable pulumi.StringInput `pulumi:"rulesEngineMatchVariable"`
	// Describes operator to apply to the match condition.
	RulesEngineOperator pulumi.StringInput `pulumi:"rulesEngineOperator"`
	// Name of selector in RequestHeader or RequestBody to be matched
	Selector pulumi.StringPtrInput `pulumi:"selector"`
	// List of transforms
	Transforms pulumi.StringArrayInput `pulumi:"transforms"`
}

func (RulesEngineMatchConditionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineMatchConditionResponse)(nil)).Elem()
}

func (i RulesEngineMatchConditionResponseArgs) ToRulesEngineMatchConditionResponseOutput() RulesEngineMatchConditionResponseOutput {
	return i.ToRulesEngineMatchConditionResponseOutputWithContext(context.Background())
}

func (i RulesEngineMatchConditionResponseArgs) ToRulesEngineMatchConditionResponseOutputWithContext(ctx context.Context) RulesEngineMatchConditionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineMatchConditionResponseOutput)
}

// RulesEngineMatchConditionResponseArrayInput is an input type that accepts RulesEngineMatchConditionResponseArray and RulesEngineMatchConditionResponseArrayOutput values.
// You can construct a concrete instance of `RulesEngineMatchConditionResponseArrayInput` via:
//
//          RulesEngineMatchConditionResponseArray{ RulesEngineMatchConditionResponseArgs{...} }
type RulesEngineMatchConditionResponseArrayInput interface {
	pulumi.Input

	ToRulesEngineMatchConditionResponseArrayOutput() RulesEngineMatchConditionResponseArrayOutput
	ToRulesEngineMatchConditionResponseArrayOutputWithContext(context.Context) RulesEngineMatchConditionResponseArrayOutput
}

type RulesEngineMatchConditionResponseArray []RulesEngineMatchConditionResponseInput

func (RulesEngineMatchConditionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesEngineMatchConditionResponse)(nil)).Elem()
}

func (i RulesEngineMatchConditionResponseArray) ToRulesEngineMatchConditionResponseArrayOutput() RulesEngineMatchConditionResponseArrayOutput {
	return i.ToRulesEngineMatchConditionResponseArrayOutputWithContext(context.Background())
}

func (i RulesEngineMatchConditionResponseArray) ToRulesEngineMatchConditionResponseArrayOutputWithContext(ctx context.Context) RulesEngineMatchConditionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineMatchConditionResponseArrayOutput)
}

// Define a match condition
type RulesEngineMatchConditionResponseOutput struct{ *pulumi.OutputState }

func (RulesEngineMatchConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineMatchConditionResponse)(nil)).Elem()
}

func (o RulesEngineMatchConditionResponseOutput) ToRulesEngineMatchConditionResponseOutput() RulesEngineMatchConditionResponseOutput {
	return o
}

func (o RulesEngineMatchConditionResponseOutput) ToRulesEngineMatchConditionResponseOutputWithContext(ctx context.Context) RulesEngineMatchConditionResponseOutput {
	return o
}

// Describes if this is negate condition or not
func (o RulesEngineMatchConditionResponseOutput) NegateCondition() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RulesEngineMatchConditionResponse) *bool { return v.NegateCondition }).(pulumi.BoolPtrOutput)
}

// Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.
func (o RulesEngineMatchConditionResponseOutput) RulesEngineMatchValue() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RulesEngineMatchConditionResponse) []string { return v.RulesEngineMatchValue }).(pulumi.StringArrayOutput)
}

// Match Variable
func (o RulesEngineMatchConditionResponseOutput) RulesEngineMatchVariable() pulumi.StringOutput {
	return o.ApplyT(func(v RulesEngineMatchConditionResponse) string { return v.RulesEngineMatchVariable }).(pulumi.StringOutput)
}

// Describes operator to apply to the match condition.
func (o RulesEngineMatchConditionResponseOutput) RulesEngineOperator() pulumi.StringOutput {
	return o.ApplyT(func(v RulesEngineMatchConditionResponse) string { return v.RulesEngineOperator }).(pulumi.StringOutput)
}

// Name of selector in RequestHeader or RequestBody to be matched
func (o RulesEngineMatchConditionResponseOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesEngineMatchConditionResponse) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

// List of transforms
func (o RulesEngineMatchConditionResponseOutput) Transforms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RulesEngineMatchConditionResponse) []string { return v.Transforms }).(pulumi.StringArrayOutput)
}

type RulesEngineMatchConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (RulesEngineMatchConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesEngineMatchConditionResponse)(nil)).Elem()
}

func (o RulesEngineMatchConditionResponseArrayOutput) ToRulesEngineMatchConditionResponseArrayOutput() RulesEngineMatchConditionResponseArrayOutput {
	return o
}

func (o RulesEngineMatchConditionResponseArrayOutput) ToRulesEngineMatchConditionResponseArrayOutputWithContext(ctx context.Context) RulesEngineMatchConditionResponseArrayOutput {
	return o
}

func (o RulesEngineMatchConditionResponseArrayOutput) Index(i pulumi.IntInput) RulesEngineMatchConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesEngineMatchConditionResponse {
		return vs[0].([]RulesEngineMatchConditionResponse)[vs[1].(int)]
	}).(RulesEngineMatchConditionResponseOutput)
}

// A rules engine configuration containing a list of rules that will run to modify the runtime behavior of the request and response.
type RulesEngineResponse struct {
	// Resource ID.
	Id string `pulumi:"id"`
	// Resource name.
	Name string `pulumi:"name"`
	// Resource status.
	ResourceState string `pulumi:"resourceState"`
	// A list of rules that define a particular Rules Engine Configuration.
	Rules []RulesEngineRuleResponse `pulumi:"rules"`
	// Resource type.
	Type string `pulumi:"type"`
}

// RulesEngineResponseInput is an input type that accepts RulesEngineResponseArgs and RulesEngineResponseOutput values.
// You can construct a concrete instance of `RulesEngineResponseInput` via:
//
//          RulesEngineResponseArgs{...}
type RulesEngineResponseInput interface {
	pulumi.Input

	ToRulesEngineResponseOutput() RulesEngineResponseOutput
	ToRulesEngineResponseOutputWithContext(context.Context) RulesEngineResponseOutput
}

// A rules engine configuration containing a list of rules that will run to modify the runtime behavior of the request and response.
type RulesEngineResponseArgs struct {
	// Resource ID.
	Id pulumi.StringInput `pulumi:"id"`
	// Resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// Resource status.
	ResourceState pulumi.StringInput `pulumi:"resourceState"`
	// A list of rules that define a particular Rules Engine Configuration.
	Rules RulesEngineRuleResponseArrayInput `pulumi:"rules"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RulesEngineResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineResponse)(nil)).Elem()
}

func (i RulesEngineResponseArgs) ToRulesEngineResponseOutput() RulesEngineResponseOutput {
	return i.ToRulesEngineResponseOutputWithContext(context.Background())
}

func (i RulesEngineResponseArgs) ToRulesEngineResponseOutputWithContext(ctx context.Context) RulesEngineResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineResponseOutput)
}

// RulesEngineResponseArrayInput is an input type that accepts RulesEngineResponseArray and RulesEngineResponseArrayOutput values.
// You can construct a concrete instance of `RulesEngineResponseArrayInput` via:
//
//          RulesEngineResponseArray{ RulesEngineResponseArgs{...} }
type RulesEngineResponseArrayInput interface {
	pulumi.Input

	ToRulesEngineResponseArrayOutput() RulesEngineResponseArrayOutput
	ToRulesEngineResponseArrayOutputWithContext(context.Context) RulesEngineResponseArrayOutput
}

type RulesEngineResponseArray []RulesEngineResponseInput

func (RulesEngineResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesEngineResponse)(nil)).Elem()
}

func (i RulesEngineResponseArray) ToRulesEngineResponseArrayOutput() RulesEngineResponseArrayOutput {
	return i.ToRulesEngineResponseArrayOutputWithContext(context.Background())
}

func (i RulesEngineResponseArray) ToRulesEngineResponseArrayOutputWithContext(ctx context.Context) RulesEngineResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineResponseArrayOutput)
}

// A rules engine configuration containing a list of rules that will run to modify the runtime behavior of the request and response.
type RulesEngineResponseOutput struct{ *pulumi.OutputState }

func (RulesEngineResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineResponse)(nil)).Elem()
}

func (o RulesEngineResponseOutput) ToRulesEngineResponseOutput() RulesEngineResponseOutput {
	return o
}

func (o RulesEngineResponseOutput) ToRulesEngineResponseOutputWithContext(ctx context.Context) RulesEngineResponseOutput {
	return o
}

// Resource ID.
func (o RulesEngineResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RulesEngineResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Resource name.
func (o RulesEngineResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RulesEngineResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Resource status.
func (o RulesEngineResponseOutput) ResourceState() pulumi.StringOutput {
	return o.ApplyT(func(v RulesEngineResponse) string { return v.ResourceState }).(pulumi.StringOutput)
}

// A list of rules that define a particular Rules Engine Configuration.
func (o RulesEngineResponseOutput) Rules() RulesEngineRuleResponseArrayOutput {
	return o.ApplyT(func(v RulesEngineResponse) []RulesEngineRuleResponse { return v.Rules }).(RulesEngineRuleResponseArrayOutput)
}

// Resource type.
func (o RulesEngineResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RulesEngineResponse) string { return v.Type }).(pulumi.StringOutput)
}

type RulesEngineResponseArrayOutput struct{ *pulumi.OutputState }

func (RulesEngineResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesEngineResponse)(nil)).Elem()
}

func (o RulesEngineResponseArrayOutput) ToRulesEngineResponseArrayOutput() RulesEngineResponseArrayOutput {
	return o
}

func (o RulesEngineResponseArrayOutput) ToRulesEngineResponseArrayOutputWithContext(ctx context.Context) RulesEngineResponseArrayOutput {
	return o
}

func (o RulesEngineResponseArrayOutput) Index(i pulumi.IntInput) RulesEngineResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesEngineResponse {
		return vs[0].([]RulesEngineResponse)[vs[1].(int)]
	}).(RulesEngineResponseOutput)
}

// Contains a list of match conditions, and an action on how to modify the request/response. If multiple rules match, the actions from one rule that conflict with a previous rule overwrite for a singular action, or append in the case of headers manipulation.
type RulesEngineRule struct {
	// Actions to perform on the request and response if all of the match conditions are met.
	Action RulesEngineAction `pulumi:"action"`
	// A list of match conditions that must meet in order for the actions of this rule to run. Having no match conditions means the actions will always run.
	MatchConditions []RulesEngineMatchCondition `pulumi:"matchConditions"`
	// If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
	MatchProcessingBehavior *string `pulumi:"matchProcessingBehavior"`
	// A name to refer to this specific rule.
	Name string `pulumi:"name"`
	// A priority assigned to this rule.
	Priority int `pulumi:"priority"`
}

// RulesEngineRuleInput is an input type that accepts RulesEngineRuleArgs and RulesEngineRuleOutput values.
// You can construct a concrete instance of `RulesEngineRuleInput` via:
//
//          RulesEngineRuleArgs{...}
type RulesEngineRuleInput interface {
	pulumi.Input

	ToRulesEngineRuleOutput() RulesEngineRuleOutput
	ToRulesEngineRuleOutputWithContext(context.Context) RulesEngineRuleOutput
}

// Contains a list of match conditions, and an action on how to modify the request/response. If multiple rules match, the actions from one rule that conflict with a previous rule overwrite for a singular action, or append in the case of headers manipulation.
type RulesEngineRuleArgs struct {
	// Actions to perform on the request and response if all of the match conditions are met.
	Action RulesEngineActionInput `pulumi:"action"`
	// A list of match conditions that must meet in order for the actions of this rule to run. Having no match conditions means the actions will always run.
	MatchConditions RulesEngineMatchConditionArrayInput `pulumi:"matchConditions"`
	// If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
	MatchProcessingBehavior pulumi.StringPtrInput `pulumi:"matchProcessingBehavior"`
	// A name to refer to this specific rule.
	Name pulumi.StringInput `pulumi:"name"`
	// A priority assigned to this rule.
	Priority pulumi.IntInput `pulumi:"priority"`
}

func (RulesEngineRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineRule)(nil)).Elem()
}

func (i RulesEngineRuleArgs) ToRulesEngineRuleOutput() RulesEngineRuleOutput {
	return i.ToRulesEngineRuleOutputWithContext(context.Background())
}

func (i RulesEngineRuleArgs) ToRulesEngineRuleOutputWithContext(ctx context.Context) RulesEngineRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineRuleOutput)
}

// RulesEngineRuleArrayInput is an input type that accepts RulesEngineRuleArray and RulesEngineRuleArrayOutput values.
// You can construct a concrete instance of `RulesEngineRuleArrayInput` via:
//
//          RulesEngineRuleArray{ RulesEngineRuleArgs{...} }
type RulesEngineRuleArrayInput interface {
	pulumi.Input

	ToRulesEngineRuleArrayOutput() RulesEngineRuleArrayOutput
	ToRulesEngineRuleArrayOutputWithContext(context.Context) RulesEngineRuleArrayOutput
}

type RulesEngineRuleArray []RulesEngineRuleInput

func (RulesEngineRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesEngineRule)(nil)).Elem()
}

func (i RulesEngineRuleArray) ToRulesEngineRuleArrayOutput() RulesEngineRuleArrayOutput {
	return i.ToRulesEngineRuleArrayOutputWithContext(context.Background())
}

func (i RulesEngineRuleArray) ToRulesEngineRuleArrayOutputWithContext(ctx context.Context) RulesEngineRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineRuleArrayOutput)
}

// Contains a list of match conditions, and an action on how to modify the request/response. If multiple rules match, the actions from one rule that conflict with a previous rule overwrite for a singular action, or append in the case of headers manipulation.
type RulesEngineRuleOutput struct{ *pulumi.OutputState }

func (RulesEngineRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineRule)(nil)).Elem()
}

func (o RulesEngineRuleOutput) ToRulesEngineRuleOutput() RulesEngineRuleOutput {
	return o
}

func (o RulesEngineRuleOutput) ToRulesEngineRuleOutputWithContext(ctx context.Context) RulesEngineRuleOutput {
	return o
}

// Actions to perform on the request and response if all of the match conditions are met.
func (o RulesEngineRuleOutput) Action() RulesEngineActionOutput {
	return o.ApplyT(func(v RulesEngineRule) RulesEngineAction { return v.Action }).(RulesEngineActionOutput)
}

// A list of match conditions that must meet in order for the actions of this rule to run. Having no match conditions means the actions will always run.
func (o RulesEngineRuleOutput) MatchConditions() RulesEngineMatchConditionArrayOutput {
	return o.ApplyT(func(v RulesEngineRule) []RulesEngineMatchCondition { return v.MatchConditions }).(RulesEngineMatchConditionArrayOutput)
}

// If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
func (o RulesEngineRuleOutput) MatchProcessingBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesEngineRule) *string { return v.MatchProcessingBehavior }).(pulumi.StringPtrOutput)
}

// A name to refer to this specific rule.
func (o RulesEngineRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RulesEngineRule) string { return v.Name }).(pulumi.StringOutput)
}

// A priority assigned to this rule.
func (o RulesEngineRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v RulesEngineRule) int { return v.Priority }).(pulumi.IntOutput)
}

type RulesEngineRuleArrayOutput struct{ *pulumi.OutputState }

func (RulesEngineRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesEngineRule)(nil)).Elem()
}

func (o RulesEngineRuleArrayOutput) ToRulesEngineRuleArrayOutput() RulesEngineRuleArrayOutput {
	return o
}

func (o RulesEngineRuleArrayOutput) ToRulesEngineRuleArrayOutputWithContext(ctx context.Context) RulesEngineRuleArrayOutput {
	return o
}

func (o RulesEngineRuleArrayOutput) Index(i pulumi.IntInput) RulesEngineRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesEngineRule {
		return vs[0].([]RulesEngineRule)[vs[1].(int)]
	}).(RulesEngineRuleOutput)
}

// Contains a list of match conditions, and an action on how to modify the request/response. If multiple rules match, the actions from one rule that conflict with a previous rule overwrite for a singular action, or append in the case of headers manipulation.
type RulesEngineRuleResponse struct {
	// Actions to perform on the request and response if all of the match conditions are met.
	Action RulesEngineActionResponse `pulumi:"action"`
	// A list of match conditions that must meet in order for the actions of this rule to run. Having no match conditions means the actions will always run.
	MatchConditions []RulesEngineMatchConditionResponse `pulumi:"matchConditions"`
	// If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
	MatchProcessingBehavior *string `pulumi:"matchProcessingBehavior"`
	// A name to refer to this specific rule.
	Name string `pulumi:"name"`
	// A priority assigned to this rule.
	Priority int `pulumi:"priority"`
}

// RulesEngineRuleResponseInput is an input type that accepts RulesEngineRuleResponseArgs and RulesEngineRuleResponseOutput values.
// You can construct a concrete instance of `RulesEngineRuleResponseInput` via:
//
//          RulesEngineRuleResponseArgs{...}
type RulesEngineRuleResponseInput interface {
	pulumi.Input

	ToRulesEngineRuleResponseOutput() RulesEngineRuleResponseOutput
	ToRulesEngineRuleResponseOutputWithContext(context.Context) RulesEngineRuleResponseOutput
}

// Contains a list of match conditions, and an action on how to modify the request/response. If multiple rules match, the actions from one rule that conflict with a previous rule overwrite for a singular action, or append in the case of headers manipulation.
type RulesEngineRuleResponseArgs struct {
	// Actions to perform on the request and response if all of the match conditions are met.
	Action RulesEngineActionResponseInput `pulumi:"action"`
	// A list of match conditions that must meet in order for the actions of this rule to run. Having no match conditions means the actions will always run.
	MatchConditions RulesEngineMatchConditionResponseArrayInput `pulumi:"matchConditions"`
	// If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
	MatchProcessingBehavior pulumi.StringPtrInput `pulumi:"matchProcessingBehavior"`
	// A name to refer to this specific rule.
	Name pulumi.StringInput `pulumi:"name"`
	// A priority assigned to this rule.
	Priority pulumi.IntInput `pulumi:"priority"`
}

func (RulesEngineRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineRuleResponse)(nil)).Elem()
}

func (i RulesEngineRuleResponseArgs) ToRulesEngineRuleResponseOutput() RulesEngineRuleResponseOutput {
	return i.ToRulesEngineRuleResponseOutputWithContext(context.Background())
}

func (i RulesEngineRuleResponseArgs) ToRulesEngineRuleResponseOutputWithContext(ctx context.Context) RulesEngineRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineRuleResponseOutput)
}

// RulesEngineRuleResponseArrayInput is an input type that accepts RulesEngineRuleResponseArray and RulesEngineRuleResponseArrayOutput values.
// You can construct a concrete instance of `RulesEngineRuleResponseArrayInput` via:
//
//          RulesEngineRuleResponseArray{ RulesEngineRuleResponseArgs{...} }
type RulesEngineRuleResponseArrayInput interface {
	pulumi.Input

	ToRulesEngineRuleResponseArrayOutput() RulesEngineRuleResponseArrayOutput
	ToRulesEngineRuleResponseArrayOutputWithContext(context.Context) RulesEngineRuleResponseArrayOutput
}

type RulesEngineRuleResponseArray []RulesEngineRuleResponseInput

func (RulesEngineRuleResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesEngineRuleResponse)(nil)).Elem()
}

func (i RulesEngineRuleResponseArray) ToRulesEngineRuleResponseArrayOutput() RulesEngineRuleResponseArrayOutput {
	return i.ToRulesEngineRuleResponseArrayOutputWithContext(context.Background())
}

func (i RulesEngineRuleResponseArray) ToRulesEngineRuleResponseArrayOutputWithContext(ctx context.Context) RulesEngineRuleResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineRuleResponseArrayOutput)
}

// Contains a list of match conditions, and an action on how to modify the request/response. If multiple rules match, the actions from one rule that conflict with a previous rule overwrite for a singular action, or append in the case of headers manipulation.
type RulesEngineRuleResponseOutput struct{ *pulumi.OutputState }

func (RulesEngineRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineRuleResponse)(nil)).Elem()
}

func (o RulesEngineRuleResponseOutput) ToRulesEngineRuleResponseOutput() RulesEngineRuleResponseOutput {
	return o
}

func (o RulesEngineRuleResponseOutput) ToRulesEngineRuleResponseOutputWithContext(ctx context.Context) RulesEngineRuleResponseOutput {
	return o
}

// Actions to perform on the request and response if all of the match conditions are met.
func (o RulesEngineRuleResponseOutput) Action() RulesEngineActionResponseOutput {
	return o.ApplyT(func(v RulesEngineRuleResponse) RulesEngineActionResponse { return v.Action }).(RulesEngineActionResponseOutput)
}

// A list of match conditions that must meet in order for the actions of this rule to run. Having no match conditions means the actions will always run.
func (o RulesEngineRuleResponseOutput) MatchConditions() RulesEngineMatchConditionResponseArrayOutput {
	return o.ApplyT(func(v RulesEngineRuleResponse) []RulesEngineMatchConditionResponse { return v.MatchConditions }).(RulesEngineMatchConditionResponseArrayOutput)
}

// If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
func (o RulesEngineRuleResponseOutput) MatchProcessingBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesEngineRuleResponse) *string { return v.MatchProcessingBehavior }).(pulumi.StringPtrOutput)
}

// A name to refer to this specific rule.
func (o RulesEngineRuleResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RulesEngineRuleResponse) string { return v.Name }).(pulumi.StringOutput)
}

// A priority assigned to this rule.
func (o RulesEngineRuleResponseOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v RulesEngineRuleResponse) int { return v.Priority }).(pulumi.IntOutput)
}

type RulesEngineRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (RulesEngineRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesEngineRuleResponse)(nil)).Elem()
}

func (o RulesEngineRuleResponseArrayOutput) ToRulesEngineRuleResponseArrayOutput() RulesEngineRuleResponseArrayOutput {
	return o
}

func (o RulesEngineRuleResponseArrayOutput) ToRulesEngineRuleResponseArrayOutputWithContext(ctx context.Context) RulesEngineRuleResponseArrayOutput {
	return o
}

func (o RulesEngineRuleResponseArrayOutput) Index(i pulumi.IntInput) RulesEngineRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesEngineRuleResponse {
		return vs[0].([]RulesEngineRuleResponse)[vs[1].(int)]
	}).(RulesEngineRuleResponseOutput)
}

// Reference to another subresource.
type SubResource struct {
	// Resource ID.
	Id *string `pulumi:"id"`
}

// SubResourceInput is an input type that accepts SubResourceArgs and SubResourceOutput values.
// You can construct a concrete instance of `SubResourceInput` via:
//
//          SubResourceArgs{...}
type SubResourceInput interface {
	pulumi.Input

	ToSubResourceOutput() SubResourceOutput
	ToSubResourceOutputWithContext(context.Context) SubResourceOutput
}

// Reference to another subresource.
type SubResourceArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (i SubResourceArgs) ToSubResourceOutput() SubResourceOutput {
	return i.ToSubResourceOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput)
}

func (i SubResourceArgs) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput).ToSubResourcePtrOutputWithContext(ctx)
}

// SubResourcePtrInput is an input type that accepts SubResourceArgs, SubResourcePtr and SubResourcePtrOutput values.
// You can construct a concrete instance of `SubResourcePtrInput` via:
//
//          SubResourceArgs{...}
//
//  or:
//
//          nil
type SubResourcePtrInput interface {
	pulumi.Input

	ToSubResourcePtrOutput() SubResourcePtrOutput
	ToSubResourcePtrOutputWithContext(context.Context) SubResourcePtrOutput
}

type subResourcePtrType SubResourceArgs

func SubResourcePtr(v *SubResourceArgs) SubResourcePtrInput {
	return (*subResourcePtrType)(v)
}

func (*subResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (i *subResourcePtrType) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i *subResourcePtrType) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourcePtrOutput)
}

// SubResourceArrayInput is an input type that accepts SubResourceArray and SubResourceArrayOutput values.
// You can construct a concrete instance of `SubResourceArrayInput` via:
//
//          SubResourceArray{ SubResourceArgs{...} }
type SubResourceArrayInput interface {
	pulumi.Input

	ToSubResourceArrayOutput() SubResourceArrayOutput
	ToSubResourceArrayOutputWithContext(context.Context) SubResourceArrayOutput
}

type SubResourceArray []SubResourceInput

func (SubResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResource)(nil)).Elem()
}

func (i SubResourceArray) ToSubResourceArrayOutput() SubResourceArrayOutput {
	return i.ToSubResourceArrayOutputWithContext(context.Background())
}

func (i SubResourceArray) ToSubResourceArrayOutputWithContext(ctx context.Context) SubResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceArrayOutput)
}

// Reference to another subresource.
type SubResourceOutput struct{ *pulumi.OutputState }

func (SubResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (o SubResourceOutput) ToSubResourceOutput() SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o.ToSubResourcePtrOutputWithContext(context.Background())
}

func (o SubResourceOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o.ApplyT(func(v SubResource) *SubResource {
		return &v
	}).(SubResourcePtrOutput)
}

// Resource ID.
func (o SubResourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourcePtrOutput struct{ *pulumi.OutputState }

func (SubResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) Elem() SubResourceOutput {
	return o.ApplyT(func(v *SubResource) SubResource { return *v }).(SubResourceOutput)
}

// Resource ID.
func (o SubResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResource) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type SubResourceArrayOutput struct{ *pulumi.OutputState }

func (SubResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResource)(nil)).Elem()
}

func (o SubResourceArrayOutput) ToSubResourceArrayOutput() SubResourceArrayOutput {
	return o
}

func (o SubResourceArrayOutput) ToSubResourceArrayOutputWithContext(ctx context.Context) SubResourceArrayOutput {
	return o
}

func (o SubResourceArrayOutput) Index(i pulumi.IntInput) SubResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubResource {
		return vs[0].([]SubResource)[vs[1].(int)]
	}).(SubResourceOutput)
}

// Reference to another subresource.
type SubResourceResponse struct {
	// Resource ID.
	Id *string `pulumi:"id"`
}

// SubResourceResponseInput is an input type that accepts SubResourceResponseArgs and SubResourceResponseOutput values.
// You can construct a concrete instance of `SubResourceResponseInput` via:
//
//          SubResourceResponseArgs{...}
type SubResourceResponseInput interface {
	pulumi.Input

	ToSubResourceResponseOutput() SubResourceResponseOutput
	ToSubResourceResponseOutputWithContext(context.Context) SubResourceResponseOutput
}

// Reference to another subresource.
type SubResourceResponseArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubResourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceResponse)(nil)).Elem()
}

func (i SubResourceResponseArgs) ToSubResourceResponseOutput() SubResourceResponseOutput {
	return i.ToSubResourceResponseOutputWithContext(context.Background())
}

func (i SubResourceResponseArgs) ToSubResourceResponseOutputWithContext(ctx context.Context) SubResourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponseOutput)
}

func (i SubResourceResponseArgs) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return i.ToSubResourceResponsePtrOutputWithContext(context.Background())
}

func (i SubResourceResponseArgs) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponseOutput).ToSubResourceResponsePtrOutputWithContext(ctx)
}

// SubResourceResponsePtrInput is an input type that accepts SubResourceResponseArgs, SubResourceResponsePtr and SubResourceResponsePtrOutput values.
// You can construct a concrete instance of `SubResourceResponsePtrInput` via:
//
//          SubResourceResponseArgs{...}
//
//  or:
//
//          nil
type SubResourceResponsePtrInput interface {
	pulumi.Input

	ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput
	ToSubResourceResponsePtrOutputWithContext(context.Context) SubResourceResponsePtrOutput
}

type subResourceResponsePtrType SubResourceResponseArgs

func SubResourceResponsePtr(v *SubResourceResponseArgs) SubResourceResponsePtrInput {
	return (*subResourceResponsePtrType)(v)
}

func (*subResourceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResourceResponse)(nil)).Elem()
}

func (i *subResourceResponsePtrType) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return i.ToSubResourceResponsePtrOutputWithContext(context.Background())
}

func (i *subResourceResponsePtrType) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponsePtrOutput)
}

// SubResourceResponseArrayInput is an input type that accepts SubResourceResponseArray and SubResourceResponseArrayOutput values.
// You can construct a concrete instance of `SubResourceResponseArrayInput` via:
//
//          SubResourceResponseArray{ SubResourceResponseArgs{...} }
type SubResourceResponseArrayInput interface {
	pulumi.Input

	ToSubResourceResponseArrayOutput() SubResourceResponseArrayOutput
	ToSubResourceResponseArrayOutputWithContext(context.Context) SubResourceResponseArrayOutput
}

type SubResourceResponseArray []SubResourceResponseInput

func (SubResourceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResourceResponse)(nil)).Elem()
}

func (i SubResourceResponseArray) ToSubResourceResponseArrayOutput() SubResourceResponseArrayOutput {
	return i.ToSubResourceResponseArrayOutputWithContext(context.Background())
}

func (i SubResourceResponseArray) ToSubResourceResponseArrayOutputWithContext(ctx context.Context) SubResourceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponseArrayOutput)
}

// Reference to another subresource.
type SubResourceResponseOutput struct{ *pulumi.OutputState }

func (SubResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutput() SubResourceResponseOutput {
	return o
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutputWithContext(ctx context.Context) SubResourceResponseOutput {
	return o
}

func (o SubResourceResponseOutput) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return o.ToSubResourceResponsePtrOutputWithContext(context.Background())
}

func (o SubResourceResponseOutput) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return o.ApplyT(func(v SubResourceResponse) *SubResourceResponse {
		return &v
	}).(SubResourceResponsePtrOutput)
}

// Resource ID.
func (o SubResourceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResourceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (SubResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) Elem() SubResourceResponseOutput {
	return o.ApplyT(func(v *SubResourceResponse) SubResourceResponse { return *v }).(SubResourceResponseOutput)
}

// Resource ID.
func (o SubResourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type SubResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (SubResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponseArrayOutput) ToSubResourceResponseArrayOutput() SubResourceResponseArrayOutput {
	return o
}

func (o SubResourceResponseArrayOutput) ToSubResourceResponseArrayOutputWithContext(ctx context.Context) SubResourceResponseArrayOutput {
	return o
}

func (o SubResourceResponseArrayOutput) Index(i pulumi.IntInput) SubResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubResourceResponse {
		return vs[0].([]SubResourceResponse)[vs[1].(int)]
	}).(SubResourceResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(BackendOutput{})
	pulumi.RegisterOutputType(BackendArrayOutput{})
	pulumi.RegisterOutputType(BackendPoolOutput{})
	pulumi.RegisterOutputType(BackendPoolArrayOutput{})
	pulumi.RegisterOutputType(BackendPoolResponseOutput{})
	pulumi.RegisterOutputType(BackendPoolResponseArrayOutput{})
	pulumi.RegisterOutputType(BackendPoolsSettingsOutput{})
	pulumi.RegisterOutputType(BackendPoolsSettingsPtrOutput{})
	pulumi.RegisterOutputType(BackendPoolsSettingsResponseOutput{})
	pulumi.RegisterOutputType(BackendPoolsSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(BackendResponseOutput{})
	pulumi.RegisterOutputType(BackendResponseArrayOutput{})
	pulumi.RegisterOutputType(CacheConfigurationOutput{})
	pulumi.RegisterOutputType(CacheConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CacheConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CacheConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomHttpsConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ForwardingConfigurationOutput{})
	pulumi.RegisterOutputType(ForwardingConfigurationResponseOutput{})
	pulumi.RegisterOutputType(FrontendEndpointOutput{})
	pulumi.RegisterOutputType(FrontendEndpointArrayOutput{})
	pulumi.RegisterOutputType(FrontendEndpointResponseOutput{})
	pulumi.RegisterOutputType(FrontendEndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkOutput{})
	pulumi.RegisterOutputType(FrontendEndpointUpdateParametersResponseWebApplicationFirewallPolicyLinkPtrOutput{})
	pulumi.RegisterOutputType(FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkOutput{})
	pulumi.RegisterOutputType(FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLinkPtrOutput{})
	pulumi.RegisterOutputType(HeaderActionOutput{})
	pulumi.RegisterOutputType(HeaderActionArrayOutput{})
	pulumi.RegisterOutputType(HeaderActionResponseOutput{})
	pulumi.RegisterOutputType(HeaderActionResponseArrayOutput{})
	pulumi.RegisterOutputType(HealthProbeSettingsModelOutput{})
	pulumi.RegisterOutputType(HealthProbeSettingsModelArrayOutput{})
	pulumi.RegisterOutputType(HealthProbeSettingsModelResponseOutput{})
	pulumi.RegisterOutputType(HealthProbeSettingsModelResponseArrayOutput{})
	pulumi.RegisterOutputType(KeyVaultCertificateSourceParametersResponseVaultOutput{})
	pulumi.RegisterOutputType(KeyVaultCertificateSourceParametersResponseVaultPtrOutput{})
	pulumi.RegisterOutputType(LoadBalancingSettingsModelOutput{})
	pulumi.RegisterOutputType(LoadBalancingSettingsModelArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancingSettingsModelResponseOutput{})
	pulumi.RegisterOutputType(LoadBalancingSettingsModelResponseArrayOutput{})
	pulumi.RegisterOutputType(RedirectConfigurationOutput{})
	pulumi.RegisterOutputType(RedirectConfigurationResponseOutput{})
	pulumi.RegisterOutputType(RoutingRuleOutput{})
	pulumi.RegisterOutputType(RoutingRuleArrayOutput{})
	pulumi.RegisterOutputType(RoutingRuleResponseOutput{})
	pulumi.RegisterOutputType(RoutingRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(RulesEngineActionOutput{})
	pulumi.RegisterOutputType(RulesEngineActionResponseOutput{})
	pulumi.RegisterOutputType(RulesEngineMatchConditionOutput{})
	pulumi.RegisterOutputType(RulesEngineMatchConditionArrayOutput{})
	pulumi.RegisterOutputType(RulesEngineMatchConditionResponseOutput{})
	pulumi.RegisterOutputType(RulesEngineMatchConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(RulesEngineResponseOutput{})
	pulumi.RegisterOutputType(RulesEngineResponseArrayOutput{})
	pulumi.RegisterOutputType(RulesEngineRuleOutput{})
	pulumi.RegisterOutputType(RulesEngineRuleArrayOutput{})
	pulumi.RegisterOutputType(RulesEngineRuleResponseOutput{})
	pulumi.RegisterOutputType(RulesEngineRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(SubResourceOutput{})
	pulumi.RegisterOutputType(SubResourcePtrOutput{})
	pulumi.RegisterOutputType(SubResourceArrayOutput{})
	pulumi.RegisterOutputType(SubResourceResponseOutput{})
	pulumi.RegisterOutputType(SubResourceResponsePtrOutput{})
	pulumi.RegisterOutputType(SubResourceResponseArrayOutput{})
}
