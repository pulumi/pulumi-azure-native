// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210501

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IpConfigurations.
type VirtualHubIpConfiguration struct {
	pulumi.CustomResourceState

	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Name of the Ip Configuration.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The private IP address of the IP configuration.
	PrivateIPAddress pulumi.StringPtrOutput `pulumi:"privateIPAddress"`
	// The private IP address allocation method.
	PrivateIPAllocationMethod pulumi.StringPtrOutput `pulumi:"privateIPAllocationMethod"`
	// The provisioning state of the IP configuration resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The reference to the public IP resource.
	PublicIPAddress PublicIPAddressResponsePtrOutput `pulumi:"publicIPAddress"`
	// The reference to the subnet resource.
	Subnet SubnetResponsePtrOutput `pulumi:"subnet"`
	// Ipconfiguration type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewVirtualHubIpConfiguration registers a new resource with the given unique name, arguments, and options.
func NewVirtualHubIpConfiguration(ctx *pulumi.Context,
	name string, args *VirtualHubIpConfigurationArgs, opts ...pulumi.ResourceOption) (*VirtualHubIpConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.VirtualHubName == nil {
		return nil, errors.New("invalid value for required argument 'VirtualHubName'")
	}
	if args.Subnet != nil {
		args.Subnet = args.Subnet.ToSubnetTypePtrOutput().ApplyT(func(v *SubnetType) *SubnetType { return v.Defaults() }).(SubnetTypePtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:network:VirtualHubIpConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200501:VirtualHubIpConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200601:VirtualHubIpConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200701:VirtualHubIpConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200801:VirtualHubIpConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20201101:VirtualHubIpConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210201:VirtualHubIpConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210301:VirtualHubIpConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210801:VirtualHubIpConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20220101:VirtualHubIpConfiguration"),
		},
	})
	opts = append(opts, aliases)
	var resource VirtualHubIpConfiguration
	err := ctx.RegisterResource("azure-native:network/v20210501:VirtualHubIpConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualHubIpConfiguration gets an existing VirtualHubIpConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualHubIpConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualHubIpConfigurationState, opts ...pulumi.ResourceOption) (*VirtualHubIpConfiguration, error) {
	var resource VirtualHubIpConfiguration
	err := ctx.ReadResource("azure-native:network/v20210501:VirtualHubIpConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualHubIpConfiguration resources.
type virtualHubIpConfigurationState struct {
}

type VirtualHubIpConfigurationState struct {
}

func (VirtualHubIpConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualHubIpConfigurationState)(nil)).Elem()
}

type virtualHubIpConfigurationArgs struct {
	// Resource ID.
	Id *string `pulumi:"id"`
	// The name of the ipconfig.
	IpConfigName *string `pulumi:"ipConfigName"`
	// Name of the Ip Configuration.
	Name *string `pulumi:"name"`
	// The private IP address of the IP configuration.
	PrivateIPAddress *string `pulumi:"privateIPAddress"`
	// The private IP address allocation method.
	PrivateIPAllocationMethod *string `pulumi:"privateIPAllocationMethod"`
	// The reference to the public IP resource.
	PublicIPAddress *PublicIPAddressType `pulumi:"publicIPAddress"`
	// The resource group name of the VirtualHub.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The reference to the subnet resource.
	Subnet *SubnetType `pulumi:"subnet"`
	// The name of the VirtualHub.
	VirtualHubName string `pulumi:"virtualHubName"`
}

// The set of arguments for constructing a VirtualHubIpConfiguration resource.
type VirtualHubIpConfigurationArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput
	// The name of the ipconfig.
	IpConfigName pulumi.StringPtrInput
	// Name of the Ip Configuration.
	Name pulumi.StringPtrInput
	// The private IP address of the IP configuration.
	PrivateIPAddress pulumi.StringPtrInput
	// The private IP address allocation method.
	PrivateIPAllocationMethod pulumi.StringPtrInput
	// The reference to the public IP resource.
	PublicIPAddress PublicIPAddressTypePtrInput
	// The resource group name of the VirtualHub.
	ResourceGroupName pulumi.StringInput
	// The reference to the subnet resource.
	Subnet SubnetTypePtrInput
	// The name of the VirtualHub.
	VirtualHubName pulumi.StringInput
}

func (VirtualHubIpConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualHubIpConfigurationArgs)(nil)).Elem()
}

type VirtualHubIpConfigurationInput interface {
	pulumi.Input

	ToVirtualHubIpConfigurationOutput() VirtualHubIpConfigurationOutput
	ToVirtualHubIpConfigurationOutputWithContext(ctx context.Context) VirtualHubIpConfigurationOutput
}

func (*VirtualHubIpConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualHubIpConfiguration)(nil)).Elem()
}

func (i *VirtualHubIpConfiguration) ToVirtualHubIpConfigurationOutput() VirtualHubIpConfigurationOutput {
	return i.ToVirtualHubIpConfigurationOutputWithContext(context.Background())
}

func (i *VirtualHubIpConfiguration) ToVirtualHubIpConfigurationOutputWithContext(ctx context.Context) VirtualHubIpConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualHubIpConfigurationOutput)
}

type VirtualHubIpConfigurationOutput struct{ *pulumi.OutputState }

func (VirtualHubIpConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualHubIpConfiguration)(nil)).Elem()
}

func (o VirtualHubIpConfigurationOutput) ToVirtualHubIpConfigurationOutput() VirtualHubIpConfigurationOutput {
	return o
}

func (o VirtualHubIpConfigurationOutput) ToVirtualHubIpConfigurationOutputWithContext(ctx context.Context) VirtualHubIpConfigurationOutput {
	return o
}

// A unique read-only string that changes whenever the resource is updated.
func (o VirtualHubIpConfigurationOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualHubIpConfiguration) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Name of the Ip Configuration.
func (o VirtualHubIpConfigurationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualHubIpConfiguration) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The private IP address of the IP configuration.
func (o VirtualHubIpConfigurationOutput) PrivateIPAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualHubIpConfiguration) pulumi.StringPtrOutput { return v.PrivateIPAddress }).(pulumi.StringPtrOutput)
}

// The private IP address allocation method.
func (o VirtualHubIpConfigurationOutput) PrivateIPAllocationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualHubIpConfiguration) pulumi.StringPtrOutput { return v.PrivateIPAllocationMethod }).(pulumi.StringPtrOutput)
}

// The provisioning state of the IP configuration resource.
func (o VirtualHubIpConfigurationOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualHubIpConfiguration) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The reference to the public IP resource.
func (o VirtualHubIpConfigurationOutput) PublicIPAddress() PublicIPAddressResponsePtrOutput {
	return o.ApplyT(func(v *VirtualHubIpConfiguration) PublicIPAddressResponsePtrOutput { return v.PublicIPAddress }).(PublicIPAddressResponsePtrOutput)
}

// The reference to the subnet resource.
func (o VirtualHubIpConfigurationOutput) Subnet() SubnetResponsePtrOutput {
	return o.ApplyT(func(v *VirtualHubIpConfiguration) SubnetResponsePtrOutput { return v.Subnet }).(SubnetResponsePtrOutput)
}

// Ipconfiguration type.
func (o VirtualHubIpConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualHubIpConfiguration) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(VirtualHubIpConfigurationOutput{})
}
