// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210801

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A flow log resource.
type FlowLog struct {
	pulumi.CustomResourceState

	// Flag to enable/disable flow logging.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Parameters that define the configuration of traffic analytics.
	FlowAnalyticsConfiguration TrafficAnalyticsPropertiesResponsePtrOutput `pulumi:"flowAnalyticsConfiguration"`
	// Parameters that define the flow log format.
	Format FlowLogFormatParametersResponsePtrOutput `pulumi:"format"`
	// Resource location.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state of the flow log.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Parameters that define the retention policy for flow log.
	RetentionPolicy RetentionPolicyParametersResponsePtrOutput `pulumi:"retentionPolicy"`
	// ID of the storage account which is used to store the flow log.
	StorageId pulumi.StringOutput `pulumi:"storageId"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Guid of network security group to which flow log will be applied.
	TargetResourceGuid pulumi.StringOutput `pulumi:"targetResourceGuid"`
	// ID of network security group to which flow log will be applied.
	TargetResourceId pulumi.StringOutput `pulumi:"targetResourceId"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFlowLog registers a new resource with the given unique name, arguments, and options.
func NewFlowLog(ctx *pulumi.Context,
	name string, args *FlowLogArgs, opts ...pulumi.ResourceOption) (*FlowLog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkWatcherName == nil {
		return nil, errors.New("invalid value for required argument 'NetworkWatcherName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StorageId == nil {
		return nil, errors.New("invalid value for required argument 'StorageId'")
	}
	if args.TargetResourceId == nil {
		return nil, errors.New("invalid value for required argument 'TargetResourceId'")
	}
	if args.Format != nil {
		args.Format = args.Format.ToFlowLogFormatParametersPtrOutput().ApplyT(func(v *FlowLogFormatParameters) *FlowLogFormatParameters { return v.Defaults() }).(FlowLogFormatParametersPtrOutput)
	}
	if args.RetentionPolicy != nil {
		args.RetentionPolicy = args.RetentionPolicy.ToRetentionPolicyParametersPtrOutput().ApplyT(func(v *RetentionPolicyParameters) *RetentionPolicyParameters { return v.Defaults() }).(RetentionPolicyParametersPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:network:FlowLog"),
		},
		{
			Type: pulumi.String("azure-native:network/v20191101:FlowLog"),
		},
		{
			Type: pulumi.String("azure-native:network/v20191201:FlowLog"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200301:FlowLog"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200401:FlowLog"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200501:FlowLog"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200601:FlowLog"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200701:FlowLog"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200801:FlowLog"),
		},
		{
			Type: pulumi.String("azure-native:network/v20201101:FlowLog"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210201:FlowLog"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210301:FlowLog"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210501:FlowLog"),
		},
		{
			Type: pulumi.String("azure-native:network/v20220101:FlowLog"),
		},
	})
	opts = append(opts, aliases)
	var resource FlowLog
	err := ctx.RegisterResource("azure-native:network/v20210801:FlowLog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlowLog gets an existing FlowLog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlowLog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlowLogState, opts ...pulumi.ResourceOption) (*FlowLog, error) {
	var resource FlowLog
	err := ctx.ReadResource("azure-native:network/v20210801:FlowLog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlowLog resources.
type flowLogState struct {
}

type FlowLogState struct {
}

func (FlowLogState) ElementType() reflect.Type {
	return reflect.TypeOf((*flowLogState)(nil)).Elem()
}

type flowLogArgs struct {
	// Flag to enable/disable flow logging.
	Enabled *bool `pulumi:"enabled"`
	// Parameters that define the configuration of traffic analytics.
	FlowAnalyticsConfiguration *TrafficAnalyticsProperties `pulumi:"flowAnalyticsConfiguration"`
	// The name of the flow log.
	FlowLogName *string `pulumi:"flowLogName"`
	// Parameters that define the flow log format.
	Format *FlowLogFormatParameters `pulumi:"format"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource location.
	Location *string `pulumi:"location"`
	// The name of the network watcher.
	NetworkWatcherName string `pulumi:"networkWatcherName"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Parameters that define the retention policy for flow log.
	RetentionPolicy *RetentionPolicyParameters `pulumi:"retentionPolicy"`
	// ID of the storage account which is used to store the flow log.
	StorageId string `pulumi:"storageId"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// ID of network security group to which flow log will be applied.
	TargetResourceId string `pulumi:"targetResourceId"`
}

// The set of arguments for constructing a FlowLog resource.
type FlowLogArgs struct {
	// Flag to enable/disable flow logging.
	Enabled pulumi.BoolPtrInput
	// Parameters that define the configuration of traffic analytics.
	FlowAnalyticsConfiguration TrafficAnalyticsPropertiesPtrInput
	// The name of the flow log.
	FlowLogName pulumi.StringPtrInput
	// Parameters that define the flow log format.
	Format FlowLogFormatParametersPtrInput
	// Resource ID.
	Id pulumi.StringPtrInput
	// Resource location.
	Location pulumi.StringPtrInput
	// The name of the network watcher.
	NetworkWatcherName pulumi.StringInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// Parameters that define the retention policy for flow log.
	RetentionPolicy RetentionPolicyParametersPtrInput
	// ID of the storage account which is used to store the flow log.
	StorageId pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// ID of network security group to which flow log will be applied.
	TargetResourceId pulumi.StringInput
}

func (FlowLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flowLogArgs)(nil)).Elem()
}

type FlowLogInput interface {
	pulumi.Input

	ToFlowLogOutput() FlowLogOutput
	ToFlowLogOutputWithContext(ctx context.Context) FlowLogOutput
}

func (*FlowLog) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowLog)(nil)).Elem()
}

func (i *FlowLog) ToFlowLogOutput() FlowLogOutput {
	return i.ToFlowLogOutputWithContext(context.Background())
}

func (i *FlowLog) ToFlowLogOutputWithContext(ctx context.Context) FlowLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogOutput)
}

type FlowLogOutput struct{ *pulumi.OutputState }

func (FlowLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowLog)(nil)).Elem()
}

func (o FlowLogOutput) ToFlowLogOutput() FlowLogOutput {
	return o
}

func (o FlowLogOutput) ToFlowLogOutputWithContext(ctx context.Context) FlowLogOutput {
	return o
}

// Flag to enable/disable flow logging.
func (o FlowLogOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A unique read-only string that changes whenever the resource is updated.
func (o FlowLogOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Parameters that define the configuration of traffic analytics.
func (o FlowLogOutput) FlowAnalyticsConfiguration() TrafficAnalyticsPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *FlowLog) TrafficAnalyticsPropertiesResponsePtrOutput { return v.FlowAnalyticsConfiguration }).(TrafficAnalyticsPropertiesResponsePtrOutput)
}

// Parameters that define the flow log format.
func (o FlowLogOutput) Format() FlowLogFormatParametersResponsePtrOutput {
	return o.ApplyT(func(v *FlowLog) FlowLogFormatParametersResponsePtrOutput { return v.Format }).(FlowLogFormatParametersResponsePtrOutput)
}

// Resource location.
func (o FlowLogOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o FlowLogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the flow log.
func (o FlowLogOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Parameters that define the retention policy for flow log.
func (o FlowLogOutput) RetentionPolicy() RetentionPolicyParametersResponsePtrOutput {
	return o.ApplyT(func(v *FlowLog) RetentionPolicyParametersResponsePtrOutput { return v.RetentionPolicy }).(RetentionPolicyParametersResponsePtrOutput)
}

// ID of the storage account which is used to store the flow log.
func (o FlowLogOutput) StorageId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.StorageId }).(pulumi.StringOutput)
}

// Resource tags.
func (o FlowLogOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Guid of network security group to which flow log will be applied.
func (o FlowLogOutput) TargetResourceGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.TargetResourceGuid }).(pulumi.StringOutput)
}

// ID of network security group to which flow log will be applied.
func (o FlowLogOutput) TargetResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.TargetResourceId }).(pulumi.StringOutput)
}

// Resource type.
func (o FlowLogOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(FlowLogOutput{})
}
