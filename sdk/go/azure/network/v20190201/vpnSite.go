// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190201

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// VpnSite Resource.
type VpnSite struct {
	pulumi.CustomResourceState

	// The AddressSpace that contains an array of IP address ranges.
	AddressSpace AddressSpaceResponsePtrOutput `pulumi:"addressSpace"`
	// The set of bgp properties.
	BgpProperties BgpSettingsResponsePtrOutput `pulumi:"bgpProperties"`
	// The device properties
	DeviceProperties DevicePropertiesResponsePtrOutput `pulumi:"deviceProperties"`
	// Gets a unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The ip-address for the vpn-site.
	IpAddress pulumi.StringPtrOutput `pulumi:"ipAddress"`
	// IsSecuritySite flag
	IsSecuritySite pulumi.BoolPtrOutput `pulumi:"isSecuritySite"`
	// Resource location.
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The key for vpn-site that can be used for connections.
	SiteKey pulumi.StringPtrOutput `pulumi:"siteKey"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
	// The VirtualWAN to which the vpnSite belongs
	VirtualWan SubResourceResponsePtrOutput `pulumi:"virtualWan"`
}

// NewVpnSite registers a new resource with the given unique name, arguments, and options.
func NewVpnSite(ctx *pulumi.Context,
	name string, args *VpnSiteArgs, opts ...pulumi.ResourceOption) (*VpnSite, error) {
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.VpnSiteName == nil {
		return nil, errors.New("missing required argument 'VpnSiteName'")
	}
	if args == nil {
		args = &VpnSiteArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:network/latest:VpnSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20180401:VpnSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20180601:VpnSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20180701:VpnSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20180801:VpnSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20181001:VpnSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20181101:VpnSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20181201:VpnSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20190401:VpnSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20190601:VpnSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20190701:VpnSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20190801:VpnSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20190901:VpnSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20191101:VpnSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20191201:VpnSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20200301:VpnSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20200401:VpnSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20200501:VpnSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20200601:VpnSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:network/v20200701:VpnSite"),
		},
	})
	opts = append(opts, aliases)
	var resource VpnSite
	err := ctx.RegisterResource("azure-nextgen:network/v20190201:VpnSite", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnSite gets an existing VpnSite resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnSite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnSiteState, opts ...pulumi.ResourceOption) (*VpnSite, error) {
	var resource VpnSite
	err := ctx.ReadResource("azure-nextgen:network/v20190201:VpnSite", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnSite resources.
type vpnSiteState struct {
	// The AddressSpace that contains an array of IP address ranges.
	AddressSpace *AddressSpaceResponse `pulumi:"addressSpace"`
	// The set of bgp properties.
	BgpProperties *BgpSettingsResponse `pulumi:"bgpProperties"`
	// The device properties
	DeviceProperties *DevicePropertiesResponse `pulumi:"deviceProperties"`
	// Gets a unique read-only string that changes whenever the resource is updated.
	Etag *string `pulumi:"etag"`
	// The ip-address for the vpn-site.
	IpAddress *string `pulumi:"ipAddress"`
	// IsSecuritySite flag
	IsSecuritySite *bool `pulumi:"isSecuritySite"`
	// Resource location.
	Location *string `pulumi:"location"`
	// Resource name.
	Name *string `pulumi:"name"`
	// The provisioning state of the resource.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The key for vpn-site that can be used for connections.
	SiteKey *string `pulumi:"siteKey"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Resource type.
	Type *string `pulumi:"type"`
	// The VirtualWAN to which the vpnSite belongs
	VirtualWan *SubResourceResponse `pulumi:"virtualWan"`
}

type VpnSiteState struct {
	// The AddressSpace that contains an array of IP address ranges.
	AddressSpace AddressSpaceResponsePtrInput
	// The set of bgp properties.
	BgpProperties BgpSettingsResponsePtrInput
	// The device properties
	DeviceProperties DevicePropertiesResponsePtrInput
	// Gets a unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringPtrInput
	// The ip-address for the vpn-site.
	IpAddress pulumi.StringPtrInput
	// IsSecuritySite flag
	IsSecuritySite pulumi.BoolPtrInput
	// Resource location.
	Location pulumi.StringPtrInput
	// Resource name.
	Name pulumi.StringPtrInput
	// The provisioning state of the resource.
	ProvisioningState pulumi.StringPtrInput
	// The key for vpn-site that can be used for connections.
	SiteKey pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// Resource type.
	Type pulumi.StringPtrInput
	// The VirtualWAN to which the vpnSite belongs
	VirtualWan SubResourceResponsePtrInput
}

func (VpnSiteState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnSiteState)(nil)).Elem()
}

type vpnSiteArgs struct {
	// The AddressSpace that contains an array of IP address ranges.
	AddressSpace *AddressSpace `pulumi:"addressSpace"`
	// The set of bgp properties.
	BgpProperties *BgpSettings `pulumi:"bgpProperties"`
	// The device properties
	DeviceProperties *DeviceProperties `pulumi:"deviceProperties"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// The ip-address for the vpn-site.
	IpAddress *string `pulumi:"ipAddress"`
	// IsSecuritySite flag
	IsSecuritySite *bool `pulumi:"isSecuritySite"`
	// Resource location.
	Location string `pulumi:"location"`
	// The resource group name of the VpnSite.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The key for vpn-site that can be used for connections.
	SiteKey *string `pulumi:"siteKey"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The VirtualWAN to which the vpnSite belongs
	VirtualWan *SubResource `pulumi:"virtualWan"`
	// The name of the VpnSite being created or updated.
	VpnSiteName string `pulumi:"vpnSiteName"`
}

// The set of arguments for constructing a VpnSite resource.
type VpnSiteArgs struct {
	// The AddressSpace that contains an array of IP address ranges.
	AddressSpace AddressSpacePtrInput
	// The set of bgp properties.
	BgpProperties BgpSettingsPtrInput
	// The device properties
	DeviceProperties DevicePropertiesPtrInput
	// Resource ID.
	Id pulumi.StringPtrInput
	// The ip-address for the vpn-site.
	IpAddress pulumi.StringPtrInput
	// IsSecuritySite flag
	IsSecuritySite pulumi.BoolPtrInput
	// Resource location.
	Location pulumi.StringInput
	// The resource group name of the VpnSite.
	ResourceGroupName pulumi.StringInput
	// The key for vpn-site that can be used for connections.
	SiteKey pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The VirtualWAN to which the vpnSite belongs
	VirtualWan SubResourcePtrInput
	// The name of the VpnSite being created or updated.
	VpnSiteName pulumi.StringInput
}

func (VpnSiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnSiteArgs)(nil)).Elem()
}
