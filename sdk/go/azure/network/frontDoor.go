// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Front Door represents a collection of backend endpoints to route traffic to along with rules that specify how traffic is sent there.
// API Version: 2020-05-01.
type FrontDoor struct {
	pulumi.CustomResourceState

	// Backend pools available to routing rules.
	BackendPools BackendPoolResponseArrayOutput `pulumi:"backendPools"`
	// Settings for all backendPools
	BackendPoolsSettings BackendPoolsSettingsResponsePtrOutput `pulumi:"backendPoolsSettings"`
	// The host that each frontendEndpoint must CNAME to.
	Cname pulumi.StringOutput `pulumi:"cname"`
	// Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'
	EnabledState pulumi.StringPtrOutput `pulumi:"enabledState"`
	// A friendly name for the frontDoor
	FriendlyName pulumi.StringPtrOutput `pulumi:"friendlyName"`
	// The Id of the frontdoor.
	FrontdoorId pulumi.StringOutput `pulumi:"frontdoorId"`
	// Frontend endpoints available to routing rules.
	FrontendEndpoints FrontendEndpointResponseArrayOutput `pulumi:"frontendEndpoints"`
	// Health probe settings associated with this Front Door instance.
	HealthProbeSettings HealthProbeSettingsModelResponseArrayOutput `pulumi:"healthProbeSettings"`
	// Load balancing settings associated with this Front Door instance.
	LoadBalancingSettings LoadBalancingSettingsModelResponseArrayOutput `pulumi:"loadBalancingSettings"`
	// Resource location.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of the Front Door.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Resource status of the Front Door.
	ResourceState pulumi.StringOutput `pulumi:"resourceState"`
	// Routing rules associated with this Front Door.
	RoutingRules RoutingRuleResponseArrayOutput `pulumi:"routingRules"`
	// Rules Engine Configurations available to routing rules.
	RulesEngines RulesEngineResponseArrayOutput `pulumi:"rulesEngines"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFrontDoor registers a new resource with the given unique name, arguments, and options.
func NewFrontDoor(ctx *pulumi.Context,
	name string, args *FrontDoorArgs, opts ...pulumi.ResourceOption) (*FrontDoor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.BackendPoolsSettings != nil {
		args.BackendPoolsSettings = args.BackendPoolsSettings.ToBackendPoolsSettingsPtrOutput().ApplyT(func(v *BackendPoolsSettings) *BackendPoolsSettings { return v.Defaults() }).(BackendPoolsSettingsPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:network/v20190401:FrontDoor"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190501:FrontDoor"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200101:FrontDoor"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200401:FrontDoor"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200501:FrontDoor"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210601:FrontDoor"),
		},
	})
	opts = append(opts, aliases)
	var resource FrontDoor
	err := ctx.RegisterResource("azure-native:network:FrontDoor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFrontDoor gets an existing FrontDoor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFrontDoor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FrontDoorState, opts ...pulumi.ResourceOption) (*FrontDoor, error) {
	var resource FrontDoor
	err := ctx.ReadResource("azure-native:network:FrontDoor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FrontDoor resources.
type frontDoorState struct {
}

type FrontDoorState struct {
}

func (FrontDoorState) ElementType() reflect.Type {
	return reflect.TypeOf((*frontDoorState)(nil)).Elem()
}

type frontDoorArgs struct {
	// Backend pools available to routing rules.
	BackendPools []BackendPool `pulumi:"backendPools"`
	// Settings for all backendPools
	BackendPoolsSettings *BackendPoolsSettings `pulumi:"backendPoolsSettings"`
	// Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'
	EnabledState *string `pulumi:"enabledState"`
	// A friendly name for the frontDoor
	FriendlyName *string `pulumi:"friendlyName"`
	// Name of the Front Door which is globally unique.
	FrontDoorName *string `pulumi:"frontDoorName"`
	// Frontend endpoints available to routing rules.
	FrontendEndpoints []FrontendEndpoint `pulumi:"frontendEndpoints"`
	// Health probe settings associated with this Front Door instance.
	HealthProbeSettings []HealthProbeSettingsModel `pulumi:"healthProbeSettings"`
	// Load balancing settings associated with this Front Door instance.
	LoadBalancingSettings []LoadBalancingSettingsModel `pulumi:"loadBalancingSettings"`
	// Resource location.
	Location *string `pulumi:"location"`
	// Name of the Resource group within the Azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Routing rules associated with this Front Door.
	RoutingRules []RoutingRule `pulumi:"routingRules"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a FrontDoor resource.
type FrontDoorArgs struct {
	// Backend pools available to routing rules.
	BackendPools BackendPoolArrayInput
	// Settings for all backendPools
	BackendPoolsSettings BackendPoolsSettingsPtrInput
	// Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'
	EnabledState pulumi.StringPtrInput
	// A friendly name for the frontDoor
	FriendlyName pulumi.StringPtrInput
	// Name of the Front Door which is globally unique.
	FrontDoorName pulumi.StringPtrInput
	// Frontend endpoints available to routing rules.
	FrontendEndpoints FrontendEndpointArrayInput
	// Health probe settings associated with this Front Door instance.
	HealthProbeSettings HealthProbeSettingsModelArrayInput
	// Load balancing settings associated with this Front Door instance.
	LoadBalancingSettings LoadBalancingSettingsModelArrayInput
	// Resource location.
	Location pulumi.StringPtrInput
	// Name of the Resource group within the Azure subscription.
	ResourceGroupName pulumi.StringInput
	// Routing rules associated with this Front Door.
	RoutingRules RoutingRuleArrayInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (FrontDoorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*frontDoorArgs)(nil)).Elem()
}

type FrontDoorInput interface {
	pulumi.Input

	ToFrontDoorOutput() FrontDoorOutput
	ToFrontDoorOutputWithContext(ctx context.Context) FrontDoorOutput
}

func (*FrontDoor) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontDoor)(nil)).Elem()
}

func (i *FrontDoor) ToFrontDoorOutput() FrontDoorOutput {
	return i.ToFrontDoorOutputWithContext(context.Background())
}

func (i *FrontDoor) ToFrontDoorOutputWithContext(ctx context.Context) FrontDoorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontDoorOutput)
}

type FrontDoorOutput struct{ *pulumi.OutputState }

func (FrontDoorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontDoor)(nil)).Elem()
}

func (o FrontDoorOutput) ToFrontDoorOutput() FrontDoorOutput {
	return o
}

func (o FrontDoorOutput) ToFrontDoorOutputWithContext(ctx context.Context) FrontDoorOutput {
	return o
}

// Backend pools available to routing rules.
func (o FrontDoorOutput) BackendPools() BackendPoolResponseArrayOutput {
	return o.ApplyT(func(v *FrontDoor) BackendPoolResponseArrayOutput { return v.BackendPools }).(BackendPoolResponseArrayOutput)
}

// Settings for all backendPools
func (o FrontDoorOutput) BackendPoolsSettings() BackendPoolsSettingsResponsePtrOutput {
	return o.ApplyT(func(v *FrontDoor) BackendPoolsSettingsResponsePtrOutput { return v.BackendPoolsSettings }).(BackendPoolsSettingsResponsePtrOutput)
}

// The host that each frontendEndpoint must CNAME to.
func (o FrontDoorOutput) Cname() pulumi.StringOutput {
	return o.ApplyT(func(v *FrontDoor) pulumi.StringOutput { return v.Cname }).(pulumi.StringOutput)
}

// Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'
func (o FrontDoorOutput) EnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontDoor) pulumi.StringPtrOutput { return v.EnabledState }).(pulumi.StringPtrOutput)
}

// A friendly name for the frontDoor
func (o FrontDoorOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontDoor) pulumi.StringPtrOutput { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// The Id of the frontdoor.
func (o FrontDoorOutput) FrontdoorId() pulumi.StringOutput {
	return o.ApplyT(func(v *FrontDoor) pulumi.StringOutput { return v.FrontdoorId }).(pulumi.StringOutput)
}

// Frontend endpoints available to routing rules.
func (o FrontDoorOutput) FrontendEndpoints() FrontendEndpointResponseArrayOutput {
	return o.ApplyT(func(v *FrontDoor) FrontendEndpointResponseArrayOutput { return v.FrontendEndpoints }).(FrontendEndpointResponseArrayOutput)
}

// Health probe settings associated with this Front Door instance.
func (o FrontDoorOutput) HealthProbeSettings() HealthProbeSettingsModelResponseArrayOutput {
	return o.ApplyT(func(v *FrontDoor) HealthProbeSettingsModelResponseArrayOutput { return v.HealthProbeSettings }).(HealthProbeSettingsModelResponseArrayOutput)
}

// Load balancing settings associated with this Front Door instance.
func (o FrontDoorOutput) LoadBalancingSettings() LoadBalancingSettingsModelResponseArrayOutput {
	return o.ApplyT(func(v *FrontDoor) LoadBalancingSettingsModelResponseArrayOutput { return v.LoadBalancingSettings }).(LoadBalancingSettingsModelResponseArrayOutput)
}

// Resource location.
func (o FrontDoorOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontDoor) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o FrontDoorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FrontDoor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the Front Door.
func (o FrontDoorOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *FrontDoor) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Resource status of the Front Door.
func (o FrontDoorOutput) ResourceState() pulumi.StringOutput {
	return o.ApplyT(func(v *FrontDoor) pulumi.StringOutput { return v.ResourceState }).(pulumi.StringOutput)
}

// Routing rules associated with this Front Door.
func (o FrontDoorOutput) RoutingRules() RoutingRuleResponseArrayOutput {
	return o.ApplyT(func(v *FrontDoor) RoutingRuleResponseArrayOutput { return v.RoutingRules }).(RoutingRuleResponseArrayOutput)
}

// Rules Engine Configurations available to routing rules.
func (o FrontDoorOutput) RulesEngines() RulesEngineResponseArrayOutput {
	return o.ApplyT(func(v *FrontDoor) RulesEngineResponseArrayOutput { return v.RulesEngines }).(RulesEngineResponseArrayOutput)
}

// Resource tags.
func (o FrontDoorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FrontDoor) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type.
func (o FrontDoorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *FrontDoor) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(FrontDoorOutput{})
}
