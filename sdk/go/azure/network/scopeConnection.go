// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Scope Connections resource
// API Version: 2022-02-01-preview.
type ScopeConnection struct {
	pulumi.CustomResourceState

	// A description of the scope connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Resource ID.
	ResourceId pulumi.StringPtrOutput `pulumi:"resourceId"`
	// The system metadata related to this resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Tenant ID.
	TenantId pulumi.StringPtrOutput `pulumi:"tenantId"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewScopeConnection registers a new resource with the given unique name, arguments, and options.
func NewScopeConnection(ctx *pulumi.Context,
	name string, args *ScopeConnectionArgs, opts ...pulumi.ResourceOption) (*ScopeConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkManagerName == nil {
		return nil, errors.New("invalid value for required argument 'NetworkManagerName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:network/v20210501preview:ScopeConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20220101:ScopeConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20220201preview:ScopeConnection"),
		},
		{
			Type: pulumi.String("azure-native:network/v20220401preview:ScopeConnection"),
		},
	})
	opts = append(opts, aliases)
	var resource ScopeConnection
	err := ctx.RegisterResource("azure-native:network:ScopeConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScopeConnection gets an existing ScopeConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScopeConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScopeConnectionState, opts ...pulumi.ResourceOption) (*ScopeConnection, error) {
	var resource ScopeConnection
	err := ctx.ReadResource("azure-native:network:ScopeConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScopeConnection resources.
type scopeConnectionState struct {
}

type ScopeConnectionState struct {
}

func (ScopeConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeConnectionState)(nil)).Elem()
}

type scopeConnectionArgs struct {
	// A description of the scope connection.
	Description *string `pulumi:"description"`
	// The name of the network manager.
	NetworkManagerName string `pulumi:"networkManagerName"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource ID.
	ResourceId *string `pulumi:"resourceId"`
	// Name for the cross-tenant connection.
	ScopeConnectionName *string `pulumi:"scopeConnectionName"`
	// Tenant ID.
	TenantId *string `pulumi:"tenantId"`
}

// The set of arguments for constructing a ScopeConnection resource.
type ScopeConnectionArgs struct {
	// A description of the scope connection.
	Description pulumi.StringPtrInput
	// The name of the network manager.
	NetworkManagerName pulumi.StringInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// Resource ID.
	ResourceId pulumi.StringPtrInput
	// Name for the cross-tenant connection.
	ScopeConnectionName pulumi.StringPtrInput
	// Tenant ID.
	TenantId pulumi.StringPtrInput
}

func (ScopeConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeConnectionArgs)(nil)).Elem()
}

type ScopeConnectionInput interface {
	pulumi.Input

	ToScopeConnectionOutput() ScopeConnectionOutput
	ToScopeConnectionOutputWithContext(ctx context.Context) ScopeConnectionOutput
}

func (*ScopeConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeConnection)(nil)).Elem()
}

func (i *ScopeConnection) ToScopeConnectionOutput() ScopeConnectionOutput {
	return i.ToScopeConnectionOutputWithContext(context.Background())
}

func (i *ScopeConnection) ToScopeConnectionOutputWithContext(ctx context.Context) ScopeConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeConnectionOutput)
}

type ScopeConnectionOutput struct{ *pulumi.OutputState }

func (ScopeConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeConnection)(nil)).Elem()
}

func (o ScopeConnectionOutput) ToScopeConnectionOutput() ScopeConnectionOutput {
	return o
}

func (o ScopeConnectionOutput) ToScopeConnectionOutputWithContext(ctx context.Context) ScopeConnectionOutput {
	return o
}

// A description of the scope connection.
func (o ScopeConnectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScopeConnection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A unique read-only string that changes whenever the resource is updated.
func (o ScopeConnectionOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeConnection) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Resource name.
func (o ScopeConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Resource ID.
func (o ScopeConnectionOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScopeConnection) pulumi.StringPtrOutput { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// The system metadata related to this resource.
func (o ScopeConnectionOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *ScopeConnection) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Tenant ID.
func (o ScopeConnectionOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScopeConnection) pulumi.StringPtrOutput { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Resource type.
func (o ScopeConnectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeConnection) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ScopeConnectionOutput{})
}
