// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180101

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Route Filter Resource.
//
// Deprecated: Version 2018-01-01 will be removed in v2 of the provider.
type RouteFilter struct {
	pulumi.CustomResourceState

	// Gets a unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Resource location.
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// A collection of references to express route circuit peerings.
	Peerings ExpressRouteCircuitPeeringResponseArrayOutput `pulumi:"peerings"`
	// The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', 'Succeeded' and 'Failed'.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Collection of RouteFilterRules contained within a route filter.
	Rules RouteFilterRuleResponseArrayOutput `pulumi:"rules"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRouteFilter registers a new resource with the given unique name, arguments, and options.
func NewRouteFilter(ctx *pulumi.Context,
	name string, args *RouteFilterArgs, opts ...pulumi.ResourceOption) (*RouteFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:network:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20161201:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20170301:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20170601:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20170801:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20170901:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20171001:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20171101:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180201:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180401:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180601:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180701:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180801:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20181001:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20181101:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20181201:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190201:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190401:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190601:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190701:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190801:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190901:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20191101:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20191201:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200301:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200401:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200501:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200601:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200701:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200801:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20201101:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210201:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210301:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210501:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210801:RouteFilter"),
		},
		{
			Type: pulumi.String("azure-native:network/v20220101:RouteFilter"),
		},
	})
	opts = append(opts, aliases)
	var resource RouteFilter
	err := ctx.RegisterResource("azure-native:network/v20180101:RouteFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteFilter gets an existing RouteFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteFilterState, opts ...pulumi.ResourceOption) (*RouteFilter, error) {
	var resource RouteFilter
	err := ctx.ReadResource("azure-native:network/v20180101:RouteFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteFilter resources.
type routeFilterState struct {
}

type RouteFilterState struct {
}

func (RouteFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeFilterState)(nil)).Elem()
}

type routeFilterArgs struct {
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource location.
	Location *string `pulumi:"location"`
	// A collection of references to express route circuit peerings.
	Peerings []ExpressRouteCircuitPeeringType `pulumi:"peerings"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the route filter.
	RouteFilterName *string `pulumi:"routeFilterName"`
	// Collection of RouteFilterRules contained within a route filter.
	Rules []RouteFilterRuleType `pulumi:"rules"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a RouteFilter resource.
type RouteFilterArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput
	// Resource location.
	Location pulumi.StringPtrInput
	// A collection of references to express route circuit peerings.
	Peerings ExpressRouteCircuitPeeringTypeArrayInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The name of the route filter.
	RouteFilterName pulumi.StringPtrInput
	// Collection of RouteFilterRules contained within a route filter.
	Rules RouteFilterRuleTypeArrayInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (RouteFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeFilterArgs)(nil)).Elem()
}

type RouteFilterInput interface {
	pulumi.Input

	ToRouteFilterOutput() RouteFilterOutput
	ToRouteFilterOutputWithContext(ctx context.Context) RouteFilterOutput
}

func (*RouteFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteFilter)(nil)).Elem()
}

func (i *RouteFilter) ToRouteFilterOutput() RouteFilterOutput {
	return i.ToRouteFilterOutputWithContext(context.Background())
}

func (i *RouteFilter) ToRouteFilterOutputWithContext(ctx context.Context) RouteFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteFilterOutput)
}

type RouteFilterOutput struct{ *pulumi.OutputState }

func (RouteFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteFilter)(nil)).Elem()
}

func (o RouteFilterOutput) ToRouteFilterOutput() RouteFilterOutput {
	return o
}

func (o RouteFilterOutput) ToRouteFilterOutputWithContext(ctx context.Context) RouteFilterOutput {
	return o
}

// Gets a unique read-only string that changes whenever the resource is updated.
func (o RouteFilterOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilter) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Resource location.
func (o RouteFilterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilter) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource name.
func (o RouteFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A collection of references to express route circuit peerings.
func (o RouteFilterOutput) Peerings() ExpressRouteCircuitPeeringResponseArrayOutput {
	return o.ApplyT(func(v *RouteFilter) ExpressRouteCircuitPeeringResponseArrayOutput { return v.Peerings }).(ExpressRouteCircuitPeeringResponseArrayOutput)
}

// The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', 'Succeeded' and 'Failed'.
func (o RouteFilterOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilter) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Collection of RouteFilterRules contained within a route filter.
func (o RouteFilterOutput) Rules() RouteFilterRuleResponseArrayOutput {
	return o.ApplyT(func(v *RouteFilter) RouteFilterRuleResponseArrayOutput { return v.Rules }).(RouteFilterRuleResponseArrayOutput)
}

// Resource tags.
func (o RouteFilterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RouteFilter) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type.
func (o RouteFilterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteFilter) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(RouteFilterOutput{})
}
