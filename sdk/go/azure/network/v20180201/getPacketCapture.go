// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180201

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Information about packet capture session.
//
// Deprecated: Version 2018-02-01 will be removed in v2 of the provider.
func LookupPacketCapture(ctx *pulumi.Context, args *LookupPacketCaptureArgs, opts ...pulumi.InvokeOption) (*LookupPacketCaptureResult, error) {
	var rv LookupPacketCaptureResult
	err := ctx.Invoke("azure-native:network/v20180201:getPacketCapture", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupPacketCaptureArgs struct {
	// The name of the network watcher.
	NetworkWatcherName string `pulumi:"networkWatcherName"`
	// The name of the packet capture session.
	PacketCaptureName string `pulumi:"packetCaptureName"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Information about packet capture session.
type LookupPacketCaptureResult struct {
	// Number of bytes captured per packet, the remaining bytes are truncated.
	BytesToCapturePerPacket *int                          `pulumi:"bytesToCapturePerPacket"`
	Etag                    *string                       `pulumi:"etag"`
	Filters                 []PacketCaptureFilterResponse `pulumi:"filters"`
	// ID of the packet capture operation.
	Id string `pulumi:"id"`
	// Name of the packet capture session.
	Name string `pulumi:"name"`
	// The provisioning state of the packet capture session.
	ProvisioningState *string `pulumi:"provisioningState"`
	// Describes the storage location for a packet capture session.
	StorageLocation PacketCaptureStorageLocationResponse `pulumi:"storageLocation"`
	// The ID of the targeted resource, only VM is currently supported.
	Target string `pulumi:"target"`
	// Maximum duration of the capture session in seconds.
	TimeLimitInSeconds *int `pulumi:"timeLimitInSeconds"`
	// Maximum size of the capture output.
	TotalBytesPerSession *int `pulumi:"totalBytesPerSession"`
}

// Defaults sets the appropriate defaults for LookupPacketCaptureResult
func (val *LookupPacketCaptureResult) Defaults() *LookupPacketCaptureResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.BytesToCapturePerPacket) {
		bytesToCapturePerPacket_ := 0
		tmp.BytesToCapturePerPacket = &bytesToCapturePerPacket_
	}
	if isZero(tmp.Etag) {
		etag_ := "A unique read-only string that changes whenever the resource is updated."
		tmp.Etag = &etag_
	}
	if isZero(tmp.TimeLimitInSeconds) {
		timeLimitInSeconds_ := 18000
		tmp.TimeLimitInSeconds = &timeLimitInSeconds_
	}
	if isZero(tmp.TotalBytesPerSession) {
		totalBytesPerSession_ := 1073741824
		tmp.TotalBytesPerSession = &totalBytesPerSession_
	}
	return &tmp
}

func LookupPacketCaptureOutput(ctx *pulumi.Context, args LookupPacketCaptureOutputArgs, opts ...pulumi.InvokeOption) LookupPacketCaptureResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPacketCaptureResult, error) {
			args := v.(LookupPacketCaptureArgs)
			r, err := LookupPacketCapture(ctx, &args, opts...)
			var s LookupPacketCaptureResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPacketCaptureResultOutput)
}

type LookupPacketCaptureOutputArgs struct {
	// The name of the network watcher.
	NetworkWatcherName pulumi.StringInput `pulumi:"networkWatcherName"`
	// The name of the packet capture session.
	PacketCaptureName pulumi.StringInput `pulumi:"packetCaptureName"`
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupPacketCaptureOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPacketCaptureArgs)(nil)).Elem()
}

// Information about packet capture session.
type LookupPacketCaptureResultOutput struct{ *pulumi.OutputState }

func (LookupPacketCaptureResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPacketCaptureResult)(nil)).Elem()
}

func (o LookupPacketCaptureResultOutput) ToLookupPacketCaptureResultOutput() LookupPacketCaptureResultOutput {
	return o
}

func (o LookupPacketCaptureResultOutput) ToLookupPacketCaptureResultOutputWithContext(ctx context.Context) LookupPacketCaptureResultOutput {
	return o
}

// Number of bytes captured per packet, the remaining bytes are truncated.
func (o LookupPacketCaptureResultOutput) BytesToCapturePerPacket() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) *int { return v.BytesToCapturePerPacket }).(pulumi.IntPtrOutput)
}

func (o LookupPacketCaptureResultOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

func (o LookupPacketCaptureResultOutput) Filters() PacketCaptureFilterResponseArrayOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) []PacketCaptureFilterResponse { return v.Filters }).(PacketCaptureFilterResponseArrayOutput)
}

// ID of the packet capture operation.
func (o LookupPacketCaptureResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the packet capture session.
func (o LookupPacketCaptureResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) string { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the packet capture session.
func (o LookupPacketCaptureResultOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// Describes the storage location for a packet capture session.
func (o LookupPacketCaptureResultOutput) StorageLocation() PacketCaptureStorageLocationResponseOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) PacketCaptureStorageLocationResponse { return v.StorageLocation }).(PacketCaptureStorageLocationResponseOutput)
}

// The ID of the targeted resource, only VM is currently supported.
func (o LookupPacketCaptureResultOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) string { return v.Target }).(pulumi.StringOutput)
}

// Maximum duration of the capture session in seconds.
func (o LookupPacketCaptureResultOutput) TimeLimitInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) *int { return v.TimeLimitInSeconds }).(pulumi.IntPtrOutput)
}

// Maximum size of the capture output.
func (o LookupPacketCaptureResultOutput) TotalBytesPerSession() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) *int { return v.TotalBytesPerSession }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPacketCaptureResultOutput{})
}
