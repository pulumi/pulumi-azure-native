// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20150504preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// An A record.
type ARecord struct {
	// Gets or sets the IPv4 address of this A record in string notation.
	Ipv4Address *string `pulumi:"ipv4Address"`
}

// ARecordInput is an input type that accepts ARecordArgs and ARecordOutput values.
// You can construct a concrete instance of `ARecordInput` via:
//
//          ARecordArgs{...}
type ARecordInput interface {
	pulumi.Input

	ToARecordOutput() ARecordOutput
	ToARecordOutputWithContext(context.Context) ARecordOutput
}

// An A record.
type ARecordArgs struct {
	// Gets or sets the IPv4 address of this A record in string notation.
	Ipv4Address pulumi.StringPtrInput `pulumi:"ipv4Address"`
}

func (ARecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ARecord)(nil)).Elem()
}

func (i ARecordArgs) ToARecordOutput() ARecordOutput {
	return i.ToARecordOutputWithContext(context.Background())
}

func (i ARecordArgs) ToARecordOutputWithContext(ctx context.Context) ARecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ARecordOutput)
}

// ARecordArrayInput is an input type that accepts ARecordArray and ARecordArrayOutput values.
// You can construct a concrete instance of `ARecordArrayInput` via:
//
//          ARecordArray{ ARecordArgs{...} }
type ARecordArrayInput interface {
	pulumi.Input

	ToARecordArrayOutput() ARecordArrayOutput
	ToARecordArrayOutputWithContext(context.Context) ARecordArrayOutput
}

type ARecordArray []ARecordInput

func (ARecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ARecord)(nil)).Elem()
}

func (i ARecordArray) ToARecordArrayOutput() ARecordArrayOutput {
	return i.ToARecordArrayOutputWithContext(context.Background())
}

func (i ARecordArray) ToARecordArrayOutputWithContext(ctx context.Context) ARecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ARecordArrayOutput)
}

// An A record.
type ARecordOutput struct{ *pulumi.OutputState }

func (ARecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ARecord)(nil)).Elem()
}

func (o ARecordOutput) ToARecordOutput() ARecordOutput {
	return o
}

func (o ARecordOutput) ToARecordOutputWithContext(ctx context.Context) ARecordOutput {
	return o
}

// Gets or sets the IPv4 address of this A record in string notation.
func (o ARecordOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ARecord) *string { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

type ARecordArrayOutput struct{ *pulumi.OutputState }

func (ARecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ARecord)(nil)).Elem()
}

func (o ARecordArrayOutput) ToARecordArrayOutput() ARecordArrayOutput {
	return o
}

func (o ARecordArrayOutput) ToARecordArrayOutputWithContext(ctx context.Context) ARecordArrayOutput {
	return o
}

func (o ARecordArrayOutput) Index(i pulumi.IntInput) ARecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ARecord {
		return vs[0].([]ARecord)[vs[1].(int)]
	}).(ARecordOutput)
}

// An A record.
type ARecordInvokeResponse struct {
	// Gets or sets the IPv4 address of this A record in string notation.
	Ipv4Address *string `pulumi:"ipv4Address"`
}

// ARecordInvokeResponseInput is an input type that accepts ARecordInvokeResponseArgs and ARecordInvokeResponseOutput values.
// You can construct a concrete instance of `ARecordInvokeResponseInput` via:
//
//          ARecordInvokeResponseArgs{...}
type ARecordInvokeResponseInput interface {
	pulumi.Input

	ToARecordInvokeResponseOutput() ARecordInvokeResponseOutput
	ToARecordInvokeResponseOutputWithContext(context.Context) ARecordInvokeResponseOutput
}

// An A record.
type ARecordInvokeResponseArgs struct {
	// Gets or sets the IPv4 address of this A record in string notation.
	Ipv4Address pulumi.StringPtrInput `pulumi:"ipv4Address"`
}

func (ARecordInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ARecordInvokeResponse)(nil)).Elem()
}

func (i ARecordInvokeResponseArgs) ToARecordInvokeResponseOutput() ARecordInvokeResponseOutput {
	return i.ToARecordInvokeResponseOutputWithContext(context.Background())
}

func (i ARecordInvokeResponseArgs) ToARecordInvokeResponseOutputWithContext(ctx context.Context) ARecordInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ARecordInvokeResponseOutput)
}

// ARecordInvokeResponseArrayInput is an input type that accepts ARecordInvokeResponseArray and ARecordInvokeResponseArrayOutput values.
// You can construct a concrete instance of `ARecordInvokeResponseArrayInput` via:
//
//          ARecordInvokeResponseArray{ ARecordInvokeResponseArgs{...} }
type ARecordInvokeResponseArrayInput interface {
	pulumi.Input

	ToARecordInvokeResponseArrayOutput() ARecordInvokeResponseArrayOutput
	ToARecordInvokeResponseArrayOutputWithContext(context.Context) ARecordInvokeResponseArrayOutput
}

type ARecordInvokeResponseArray []ARecordInvokeResponseInput

func (ARecordInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ARecordInvokeResponse)(nil)).Elem()
}

func (i ARecordInvokeResponseArray) ToARecordInvokeResponseArrayOutput() ARecordInvokeResponseArrayOutput {
	return i.ToARecordInvokeResponseArrayOutputWithContext(context.Background())
}

func (i ARecordInvokeResponseArray) ToARecordInvokeResponseArrayOutputWithContext(ctx context.Context) ARecordInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ARecordInvokeResponseArrayOutput)
}

// An A record.
type ARecordInvokeResponseOutput struct{ *pulumi.OutputState }

func (ARecordInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ARecordInvokeResponse)(nil)).Elem()
}

func (o ARecordInvokeResponseOutput) ToARecordInvokeResponseOutput() ARecordInvokeResponseOutput {
	return o
}

func (o ARecordInvokeResponseOutput) ToARecordInvokeResponseOutputWithContext(ctx context.Context) ARecordInvokeResponseOutput {
	return o
}

// Gets or sets the IPv4 address of this A record in string notation.
func (o ARecordInvokeResponseOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ARecordInvokeResponse) *string { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

type ARecordInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (ARecordInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ARecordInvokeResponse)(nil)).Elem()
}

func (o ARecordInvokeResponseArrayOutput) ToARecordInvokeResponseArrayOutput() ARecordInvokeResponseArrayOutput {
	return o
}

func (o ARecordInvokeResponseArrayOutput) ToARecordInvokeResponseArrayOutputWithContext(ctx context.Context) ARecordInvokeResponseArrayOutput {
	return o
}

func (o ARecordInvokeResponseArrayOutput) Index(i pulumi.IntInput) ARecordInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ARecordInvokeResponse {
		return vs[0].([]ARecordInvokeResponse)[vs[1].(int)]
	}).(ARecordInvokeResponseOutput)
}

// An A record.
type ARecordResponse struct {
	// Gets or sets the IPv4 address of this A record in string notation.
	Ipv4Address *string `pulumi:"ipv4Address"`
}

// ARecordResponseInput is an input type that accepts ARecordResponseArgs and ARecordResponseOutput values.
// You can construct a concrete instance of `ARecordResponseInput` via:
//
//          ARecordResponseArgs{...}
type ARecordResponseInput interface {
	pulumi.Input

	ToARecordResponseOutput() ARecordResponseOutput
	ToARecordResponseOutputWithContext(context.Context) ARecordResponseOutput
}

// An A record.
type ARecordResponseArgs struct {
	// Gets or sets the IPv4 address of this A record in string notation.
	Ipv4Address pulumi.StringPtrInput `pulumi:"ipv4Address"`
}

func (ARecordResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ARecordResponse)(nil)).Elem()
}

func (i ARecordResponseArgs) ToARecordResponseOutput() ARecordResponseOutput {
	return i.ToARecordResponseOutputWithContext(context.Background())
}

func (i ARecordResponseArgs) ToARecordResponseOutputWithContext(ctx context.Context) ARecordResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ARecordResponseOutput)
}

// ARecordResponseArrayInput is an input type that accepts ARecordResponseArray and ARecordResponseArrayOutput values.
// You can construct a concrete instance of `ARecordResponseArrayInput` via:
//
//          ARecordResponseArray{ ARecordResponseArgs{...} }
type ARecordResponseArrayInput interface {
	pulumi.Input

	ToARecordResponseArrayOutput() ARecordResponseArrayOutput
	ToARecordResponseArrayOutputWithContext(context.Context) ARecordResponseArrayOutput
}

type ARecordResponseArray []ARecordResponseInput

func (ARecordResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ARecordResponse)(nil)).Elem()
}

func (i ARecordResponseArray) ToARecordResponseArrayOutput() ARecordResponseArrayOutput {
	return i.ToARecordResponseArrayOutputWithContext(context.Background())
}

func (i ARecordResponseArray) ToARecordResponseArrayOutputWithContext(ctx context.Context) ARecordResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ARecordResponseArrayOutput)
}

// An A record.
type ARecordResponseOutput struct{ *pulumi.OutputState }

func (ARecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ARecordResponse)(nil)).Elem()
}

func (o ARecordResponseOutput) ToARecordResponseOutput() ARecordResponseOutput {
	return o
}

func (o ARecordResponseOutput) ToARecordResponseOutputWithContext(ctx context.Context) ARecordResponseOutput {
	return o
}

// Gets or sets the IPv4 address of this A record in string notation.
func (o ARecordResponseOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ARecordResponse) *string { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

type ARecordResponseArrayOutput struct{ *pulumi.OutputState }

func (ARecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ARecordResponse)(nil)).Elem()
}

func (o ARecordResponseArrayOutput) ToARecordResponseArrayOutput() ARecordResponseArrayOutput {
	return o
}

func (o ARecordResponseArrayOutput) ToARecordResponseArrayOutputWithContext(ctx context.Context) ARecordResponseArrayOutput {
	return o
}

func (o ARecordResponseArrayOutput) Index(i pulumi.IntInput) ARecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ARecordResponse {
		return vs[0].([]ARecordResponse)[vs[1].(int)]
	}).(ARecordResponseOutput)
}

// An AAAA record.
type AaaaRecord struct {
	// Gets or sets the IPv6 address of this AAAA record in string notation.
	Ipv6Address *string `pulumi:"ipv6Address"`
}

// AaaaRecordInput is an input type that accepts AaaaRecordArgs and AaaaRecordOutput values.
// You can construct a concrete instance of `AaaaRecordInput` via:
//
//          AaaaRecordArgs{...}
type AaaaRecordInput interface {
	pulumi.Input

	ToAaaaRecordOutput() AaaaRecordOutput
	ToAaaaRecordOutputWithContext(context.Context) AaaaRecordOutput
}

// An AAAA record.
type AaaaRecordArgs struct {
	// Gets or sets the IPv6 address of this AAAA record in string notation.
	Ipv6Address pulumi.StringPtrInput `pulumi:"ipv6Address"`
}

func (AaaaRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaaRecord)(nil)).Elem()
}

func (i AaaaRecordArgs) ToAaaaRecordOutput() AaaaRecordOutput {
	return i.ToAaaaRecordOutputWithContext(context.Background())
}

func (i AaaaRecordArgs) ToAaaaRecordOutputWithContext(ctx context.Context) AaaaRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaaRecordOutput)
}

// AaaaRecordArrayInput is an input type that accepts AaaaRecordArray and AaaaRecordArrayOutput values.
// You can construct a concrete instance of `AaaaRecordArrayInput` via:
//
//          AaaaRecordArray{ AaaaRecordArgs{...} }
type AaaaRecordArrayInput interface {
	pulumi.Input

	ToAaaaRecordArrayOutput() AaaaRecordArrayOutput
	ToAaaaRecordArrayOutputWithContext(context.Context) AaaaRecordArrayOutput
}

type AaaaRecordArray []AaaaRecordInput

func (AaaaRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaaRecord)(nil)).Elem()
}

func (i AaaaRecordArray) ToAaaaRecordArrayOutput() AaaaRecordArrayOutput {
	return i.ToAaaaRecordArrayOutputWithContext(context.Background())
}

func (i AaaaRecordArray) ToAaaaRecordArrayOutputWithContext(ctx context.Context) AaaaRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaaRecordArrayOutput)
}

// An AAAA record.
type AaaaRecordOutput struct{ *pulumi.OutputState }

func (AaaaRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaaRecord)(nil)).Elem()
}

func (o AaaaRecordOutput) ToAaaaRecordOutput() AaaaRecordOutput {
	return o
}

func (o AaaaRecordOutput) ToAaaaRecordOutputWithContext(ctx context.Context) AaaaRecordOutput {
	return o
}

// Gets or sets the IPv6 address of this AAAA record in string notation.
func (o AaaaRecordOutput) Ipv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AaaaRecord) *string { return v.Ipv6Address }).(pulumi.StringPtrOutput)
}

type AaaaRecordArrayOutput struct{ *pulumi.OutputState }

func (AaaaRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaaRecord)(nil)).Elem()
}

func (o AaaaRecordArrayOutput) ToAaaaRecordArrayOutput() AaaaRecordArrayOutput {
	return o
}

func (o AaaaRecordArrayOutput) ToAaaaRecordArrayOutputWithContext(ctx context.Context) AaaaRecordArrayOutput {
	return o
}

func (o AaaaRecordArrayOutput) Index(i pulumi.IntInput) AaaaRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AaaaRecord {
		return vs[0].([]AaaaRecord)[vs[1].(int)]
	}).(AaaaRecordOutput)
}

// An AAAA record.
type AaaaRecordInvokeResponse struct {
	// Gets or sets the IPv6 address of this AAAA record in string notation.
	Ipv6Address *string `pulumi:"ipv6Address"`
}

// AaaaRecordInvokeResponseInput is an input type that accepts AaaaRecordInvokeResponseArgs and AaaaRecordInvokeResponseOutput values.
// You can construct a concrete instance of `AaaaRecordInvokeResponseInput` via:
//
//          AaaaRecordInvokeResponseArgs{...}
type AaaaRecordInvokeResponseInput interface {
	pulumi.Input

	ToAaaaRecordInvokeResponseOutput() AaaaRecordInvokeResponseOutput
	ToAaaaRecordInvokeResponseOutputWithContext(context.Context) AaaaRecordInvokeResponseOutput
}

// An AAAA record.
type AaaaRecordInvokeResponseArgs struct {
	// Gets or sets the IPv6 address of this AAAA record in string notation.
	Ipv6Address pulumi.StringPtrInput `pulumi:"ipv6Address"`
}

func (AaaaRecordInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaaRecordInvokeResponse)(nil)).Elem()
}

func (i AaaaRecordInvokeResponseArgs) ToAaaaRecordInvokeResponseOutput() AaaaRecordInvokeResponseOutput {
	return i.ToAaaaRecordInvokeResponseOutputWithContext(context.Background())
}

func (i AaaaRecordInvokeResponseArgs) ToAaaaRecordInvokeResponseOutputWithContext(ctx context.Context) AaaaRecordInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaaRecordInvokeResponseOutput)
}

// AaaaRecordInvokeResponseArrayInput is an input type that accepts AaaaRecordInvokeResponseArray and AaaaRecordInvokeResponseArrayOutput values.
// You can construct a concrete instance of `AaaaRecordInvokeResponseArrayInput` via:
//
//          AaaaRecordInvokeResponseArray{ AaaaRecordInvokeResponseArgs{...} }
type AaaaRecordInvokeResponseArrayInput interface {
	pulumi.Input

	ToAaaaRecordInvokeResponseArrayOutput() AaaaRecordInvokeResponseArrayOutput
	ToAaaaRecordInvokeResponseArrayOutputWithContext(context.Context) AaaaRecordInvokeResponseArrayOutput
}

type AaaaRecordInvokeResponseArray []AaaaRecordInvokeResponseInput

func (AaaaRecordInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaaRecordInvokeResponse)(nil)).Elem()
}

func (i AaaaRecordInvokeResponseArray) ToAaaaRecordInvokeResponseArrayOutput() AaaaRecordInvokeResponseArrayOutput {
	return i.ToAaaaRecordInvokeResponseArrayOutputWithContext(context.Background())
}

func (i AaaaRecordInvokeResponseArray) ToAaaaRecordInvokeResponseArrayOutputWithContext(ctx context.Context) AaaaRecordInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaaRecordInvokeResponseArrayOutput)
}

// An AAAA record.
type AaaaRecordInvokeResponseOutput struct{ *pulumi.OutputState }

func (AaaaRecordInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaaRecordInvokeResponse)(nil)).Elem()
}

func (o AaaaRecordInvokeResponseOutput) ToAaaaRecordInvokeResponseOutput() AaaaRecordInvokeResponseOutput {
	return o
}

func (o AaaaRecordInvokeResponseOutput) ToAaaaRecordInvokeResponseOutputWithContext(ctx context.Context) AaaaRecordInvokeResponseOutput {
	return o
}

// Gets or sets the IPv6 address of this AAAA record in string notation.
func (o AaaaRecordInvokeResponseOutput) Ipv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AaaaRecordInvokeResponse) *string { return v.Ipv6Address }).(pulumi.StringPtrOutput)
}

type AaaaRecordInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (AaaaRecordInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaaRecordInvokeResponse)(nil)).Elem()
}

func (o AaaaRecordInvokeResponseArrayOutput) ToAaaaRecordInvokeResponseArrayOutput() AaaaRecordInvokeResponseArrayOutput {
	return o
}

func (o AaaaRecordInvokeResponseArrayOutput) ToAaaaRecordInvokeResponseArrayOutputWithContext(ctx context.Context) AaaaRecordInvokeResponseArrayOutput {
	return o
}

func (o AaaaRecordInvokeResponseArrayOutput) Index(i pulumi.IntInput) AaaaRecordInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AaaaRecordInvokeResponse {
		return vs[0].([]AaaaRecordInvokeResponse)[vs[1].(int)]
	}).(AaaaRecordInvokeResponseOutput)
}

// An AAAA record.
type AaaaRecordResponse struct {
	// Gets or sets the IPv6 address of this AAAA record in string notation.
	Ipv6Address *string `pulumi:"ipv6Address"`
}

// AaaaRecordResponseInput is an input type that accepts AaaaRecordResponseArgs and AaaaRecordResponseOutput values.
// You can construct a concrete instance of `AaaaRecordResponseInput` via:
//
//          AaaaRecordResponseArgs{...}
type AaaaRecordResponseInput interface {
	pulumi.Input

	ToAaaaRecordResponseOutput() AaaaRecordResponseOutput
	ToAaaaRecordResponseOutputWithContext(context.Context) AaaaRecordResponseOutput
}

// An AAAA record.
type AaaaRecordResponseArgs struct {
	// Gets or sets the IPv6 address of this AAAA record in string notation.
	Ipv6Address pulumi.StringPtrInput `pulumi:"ipv6Address"`
}

func (AaaaRecordResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaaRecordResponse)(nil)).Elem()
}

func (i AaaaRecordResponseArgs) ToAaaaRecordResponseOutput() AaaaRecordResponseOutput {
	return i.ToAaaaRecordResponseOutputWithContext(context.Background())
}

func (i AaaaRecordResponseArgs) ToAaaaRecordResponseOutputWithContext(ctx context.Context) AaaaRecordResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaaRecordResponseOutput)
}

// AaaaRecordResponseArrayInput is an input type that accepts AaaaRecordResponseArray and AaaaRecordResponseArrayOutput values.
// You can construct a concrete instance of `AaaaRecordResponseArrayInput` via:
//
//          AaaaRecordResponseArray{ AaaaRecordResponseArgs{...} }
type AaaaRecordResponseArrayInput interface {
	pulumi.Input

	ToAaaaRecordResponseArrayOutput() AaaaRecordResponseArrayOutput
	ToAaaaRecordResponseArrayOutputWithContext(context.Context) AaaaRecordResponseArrayOutput
}

type AaaaRecordResponseArray []AaaaRecordResponseInput

func (AaaaRecordResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaaRecordResponse)(nil)).Elem()
}

func (i AaaaRecordResponseArray) ToAaaaRecordResponseArrayOutput() AaaaRecordResponseArrayOutput {
	return i.ToAaaaRecordResponseArrayOutputWithContext(context.Background())
}

func (i AaaaRecordResponseArray) ToAaaaRecordResponseArrayOutputWithContext(ctx context.Context) AaaaRecordResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaaRecordResponseArrayOutput)
}

// An AAAA record.
type AaaaRecordResponseOutput struct{ *pulumi.OutputState }

func (AaaaRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaaRecordResponse)(nil)).Elem()
}

func (o AaaaRecordResponseOutput) ToAaaaRecordResponseOutput() AaaaRecordResponseOutput {
	return o
}

func (o AaaaRecordResponseOutput) ToAaaaRecordResponseOutputWithContext(ctx context.Context) AaaaRecordResponseOutput {
	return o
}

// Gets or sets the IPv6 address of this AAAA record in string notation.
func (o AaaaRecordResponseOutput) Ipv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AaaaRecordResponse) *string { return v.Ipv6Address }).(pulumi.StringPtrOutput)
}

type AaaaRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (AaaaRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaaRecordResponse)(nil)).Elem()
}

func (o AaaaRecordResponseArrayOutput) ToAaaaRecordResponseArrayOutput() AaaaRecordResponseArrayOutput {
	return o
}

func (o AaaaRecordResponseArrayOutput) ToAaaaRecordResponseArrayOutputWithContext(ctx context.Context) AaaaRecordResponseArrayOutput {
	return o
}

func (o AaaaRecordResponseArrayOutput) Index(i pulumi.IntInput) AaaaRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AaaaRecordResponse {
		return vs[0].([]AaaaRecordResponse)[vs[1].(int)]
	}).(AaaaRecordResponseOutput)
}

// A CNAME record.
type CnameRecord struct {
	// Gets or sets the canonical name for this record without a terminating dot.
	Cname *string `pulumi:"cname"`
}

// CnameRecordInput is an input type that accepts CnameRecordArgs and CnameRecordOutput values.
// You can construct a concrete instance of `CnameRecordInput` via:
//
//          CnameRecordArgs{...}
type CnameRecordInput interface {
	pulumi.Input

	ToCnameRecordOutput() CnameRecordOutput
	ToCnameRecordOutputWithContext(context.Context) CnameRecordOutput
}

// A CNAME record.
type CnameRecordArgs struct {
	// Gets or sets the canonical name for this record without a terminating dot.
	Cname pulumi.StringPtrInput `pulumi:"cname"`
}

func (CnameRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CnameRecord)(nil)).Elem()
}

func (i CnameRecordArgs) ToCnameRecordOutput() CnameRecordOutput {
	return i.ToCnameRecordOutputWithContext(context.Background())
}

func (i CnameRecordArgs) ToCnameRecordOutputWithContext(ctx context.Context) CnameRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CnameRecordOutput)
}

func (i CnameRecordArgs) ToCnameRecordPtrOutput() CnameRecordPtrOutput {
	return i.ToCnameRecordPtrOutputWithContext(context.Background())
}

func (i CnameRecordArgs) ToCnameRecordPtrOutputWithContext(ctx context.Context) CnameRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CnameRecordOutput).ToCnameRecordPtrOutputWithContext(ctx)
}

// CnameRecordPtrInput is an input type that accepts CnameRecordArgs, CnameRecordPtr and CnameRecordPtrOutput values.
// You can construct a concrete instance of `CnameRecordPtrInput` via:
//
//          CnameRecordArgs{...}
//
//  or:
//
//          nil
type CnameRecordPtrInput interface {
	pulumi.Input

	ToCnameRecordPtrOutput() CnameRecordPtrOutput
	ToCnameRecordPtrOutputWithContext(context.Context) CnameRecordPtrOutput
}

type cnameRecordPtrType CnameRecordArgs

func CnameRecordPtr(v *CnameRecordArgs) CnameRecordPtrInput {
	return (*cnameRecordPtrType)(v)
}

func (*cnameRecordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CnameRecord)(nil)).Elem()
}

func (i *cnameRecordPtrType) ToCnameRecordPtrOutput() CnameRecordPtrOutput {
	return i.ToCnameRecordPtrOutputWithContext(context.Background())
}

func (i *cnameRecordPtrType) ToCnameRecordPtrOutputWithContext(ctx context.Context) CnameRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CnameRecordPtrOutput)
}

// A CNAME record.
type CnameRecordOutput struct{ *pulumi.OutputState }

func (CnameRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CnameRecord)(nil)).Elem()
}

func (o CnameRecordOutput) ToCnameRecordOutput() CnameRecordOutput {
	return o
}

func (o CnameRecordOutput) ToCnameRecordOutputWithContext(ctx context.Context) CnameRecordOutput {
	return o
}

func (o CnameRecordOutput) ToCnameRecordPtrOutput() CnameRecordPtrOutput {
	return o.ToCnameRecordPtrOutputWithContext(context.Background())
}

func (o CnameRecordOutput) ToCnameRecordPtrOutputWithContext(ctx context.Context) CnameRecordPtrOutput {
	return o.ApplyT(func(v CnameRecord) *CnameRecord {
		return &v
	}).(CnameRecordPtrOutput)
}

// Gets or sets the canonical name for this record without a terminating dot.
func (o CnameRecordOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CnameRecord) *string { return v.Cname }).(pulumi.StringPtrOutput)
}

type CnameRecordPtrOutput struct{ *pulumi.OutputState }

func (CnameRecordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CnameRecord)(nil)).Elem()
}

func (o CnameRecordPtrOutput) ToCnameRecordPtrOutput() CnameRecordPtrOutput {
	return o
}

func (o CnameRecordPtrOutput) ToCnameRecordPtrOutputWithContext(ctx context.Context) CnameRecordPtrOutput {
	return o
}

func (o CnameRecordPtrOutput) Elem() CnameRecordOutput {
	return o.ApplyT(func(v *CnameRecord) CnameRecord { return *v }).(CnameRecordOutput)
}

// Gets or sets the canonical name for this record without a terminating dot.
func (o CnameRecordPtrOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CnameRecord) *string {
		if v == nil {
			return nil
		}
		return v.Cname
	}).(pulumi.StringPtrOutput)
}

// A CNAME record.
type CnameRecordInvokeResponse struct {
	// Gets or sets the canonical name for this record without a terminating dot.
	Cname *string `pulumi:"cname"`
}

// CnameRecordInvokeResponseInput is an input type that accepts CnameRecordInvokeResponseArgs and CnameRecordInvokeResponseOutput values.
// You can construct a concrete instance of `CnameRecordInvokeResponseInput` via:
//
//          CnameRecordInvokeResponseArgs{...}
type CnameRecordInvokeResponseInput interface {
	pulumi.Input

	ToCnameRecordInvokeResponseOutput() CnameRecordInvokeResponseOutput
	ToCnameRecordInvokeResponseOutputWithContext(context.Context) CnameRecordInvokeResponseOutput
}

// A CNAME record.
type CnameRecordInvokeResponseArgs struct {
	// Gets or sets the canonical name for this record without a terminating dot.
	Cname pulumi.StringPtrInput `pulumi:"cname"`
}

func (CnameRecordInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CnameRecordInvokeResponse)(nil)).Elem()
}

func (i CnameRecordInvokeResponseArgs) ToCnameRecordInvokeResponseOutput() CnameRecordInvokeResponseOutput {
	return i.ToCnameRecordInvokeResponseOutputWithContext(context.Background())
}

func (i CnameRecordInvokeResponseArgs) ToCnameRecordInvokeResponseOutputWithContext(ctx context.Context) CnameRecordInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CnameRecordInvokeResponseOutput)
}

// A CNAME record.
type CnameRecordInvokeResponseOutput struct{ *pulumi.OutputState }

func (CnameRecordInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CnameRecordInvokeResponse)(nil)).Elem()
}

func (o CnameRecordInvokeResponseOutput) ToCnameRecordInvokeResponseOutput() CnameRecordInvokeResponseOutput {
	return o
}

func (o CnameRecordInvokeResponseOutput) ToCnameRecordInvokeResponseOutputWithContext(ctx context.Context) CnameRecordInvokeResponseOutput {
	return o
}

// Gets or sets the canonical name for this record without a terminating dot.
func (o CnameRecordInvokeResponseOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CnameRecordInvokeResponse) *string { return v.Cname }).(pulumi.StringPtrOutput)
}

// A CNAME record.
type CnameRecordResponse struct {
	// Gets or sets the canonical name for this record without a terminating dot.
	Cname *string `pulumi:"cname"`
}

// CnameRecordResponseInput is an input type that accepts CnameRecordResponseArgs and CnameRecordResponseOutput values.
// You can construct a concrete instance of `CnameRecordResponseInput` via:
//
//          CnameRecordResponseArgs{...}
type CnameRecordResponseInput interface {
	pulumi.Input

	ToCnameRecordResponseOutput() CnameRecordResponseOutput
	ToCnameRecordResponseOutputWithContext(context.Context) CnameRecordResponseOutput
}

// A CNAME record.
type CnameRecordResponseArgs struct {
	// Gets or sets the canonical name for this record without a terminating dot.
	Cname pulumi.StringPtrInput `pulumi:"cname"`
}

func (CnameRecordResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CnameRecordResponse)(nil)).Elem()
}

func (i CnameRecordResponseArgs) ToCnameRecordResponseOutput() CnameRecordResponseOutput {
	return i.ToCnameRecordResponseOutputWithContext(context.Background())
}

func (i CnameRecordResponseArgs) ToCnameRecordResponseOutputWithContext(ctx context.Context) CnameRecordResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CnameRecordResponseOutput)
}

func (i CnameRecordResponseArgs) ToCnameRecordResponsePtrOutput() CnameRecordResponsePtrOutput {
	return i.ToCnameRecordResponsePtrOutputWithContext(context.Background())
}

func (i CnameRecordResponseArgs) ToCnameRecordResponsePtrOutputWithContext(ctx context.Context) CnameRecordResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CnameRecordResponseOutput).ToCnameRecordResponsePtrOutputWithContext(ctx)
}

// CnameRecordResponsePtrInput is an input type that accepts CnameRecordResponseArgs, CnameRecordResponsePtr and CnameRecordResponsePtrOutput values.
// You can construct a concrete instance of `CnameRecordResponsePtrInput` via:
//
//          CnameRecordResponseArgs{...}
//
//  or:
//
//          nil
type CnameRecordResponsePtrInput interface {
	pulumi.Input

	ToCnameRecordResponsePtrOutput() CnameRecordResponsePtrOutput
	ToCnameRecordResponsePtrOutputWithContext(context.Context) CnameRecordResponsePtrOutput
}

type cnameRecordResponsePtrType CnameRecordResponseArgs

func CnameRecordResponsePtr(v *CnameRecordResponseArgs) CnameRecordResponsePtrInput {
	return (*cnameRecordResponsePtrType)(v)
}

func (*cnameRecordResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CnameRecordResponse)(nil)).Elem()
}

func (i *cnameRecordResponsePtrType) ToCnameRecordResponsePtrOutput() CnameRecordResponsePtrOutput {
	return i.ToCnameRecordResponsePtrOutputWithContext(context.Background())
}

func (i *cnameRecordResponsePtrType) ToCnameRecordResponsePtrOutputWithContext(ctx context.Context) CnameRecordResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CnameRecordResponsePtrOutput)
}

// A CNAME record.
type CnameRecordResponseOutput struct{ *pulumi.OutputState }

func (CnameRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CnameRecordResponse)(nil)).Elem()
}

func (o CnameRecordResponseOutput) ToCnameRecordResponseOutput() CnameRecordResponseOutput {
	return o
}

func (o CnameRecordResponseOutput) ToCnameRecordResponseOutputWithContext(ctx context.Context) CnameRecordResponseOutput {
	return o
}

func (o CnameRecordResponseOutput) ToCnameRecordResponsePtrOutput() CnameRecordResponsePtrOutput {
	return o.ToCnameRecordResponsePtrOutputWithContext(context.Background())
}

func (o CnameRecordResponseOutput) ToCnameRecordResponsePtrOutputWithContext(ctx context.Context) CnameRecordResponsePtrOutput {
	return o.ApplyT(func(v CnameRecordResponse) *CnameRecordResponse {
		return &v
	}).(CnameRecordResponsePtrOutput)
}

// Gets or sets the canonical name for this record without a terminating dot.
func (o CnameRecordResponseOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CnameRecordResponse) *string { return v.Cname }).(pulumi.StringPtrOutput)
}

type CnameRecordResponsePtrOutput struct{ *pulumi.OutputState }

func (CnameRecordResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CnameRecordResponse)(nil)).Elem()
}

func (o CnameRecordResponsePtrOutput) ToCnameRecordResponsePtrOutput() CnameRecordResponsePtrOutput {
	return o
}

func (o CnameRecordResponsePtrOutput) ToCnameRecordResponsePtrOutputWithContext(ctx context.Context) CnameRecordResponsePtrOutput {
	return o
}

func (o CnameRecordResponsePtrOutput) Elem() CnameRecordResponseOutput {
	return o.ApplyT(func(v *CnameRecordResponse) CnameRecordResponse { return *v }).(CnameRecordResponseOutput)
}

// Gets or sets the canonical name for this record without a terminating dot.
func (o CnameRecordResponsePtrOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CnameRecordResponse) *string {
		if v == nil {
			return nil
		}
		return v.Cname
	}).(pulumi.StringPtrOutput)
}

// An MX record.
type MxRecord struct {
	// Gets or sets the domain name of the mail host, without a terminating dot.
	Exchange *string `pulumi:"exchange"`
	// Gets or sets the preference metric for this record.
	Preference *int `pulumi:"preference"`
}

// MxRecordInput is an input type that accepts MxRecordArgs and MxRecordOutput values.
// You can construct a concrete instance of `MxRecordInput` via:
//
//          MxRecordArgs{...}
type MxRecordInput interface {
	pulumi.Input

	ToMxRecordOutput() MxRecordOutput
	ToMxRecordOutputWithContext(context.Context) MxRecordOutput
}

// An MX record.
type MxRecordArgs struct {
	// Gets or sets the domain name of the mail host, without a terminating dot.
	Exchange pulumi.StringPtrInput `pulumi:"exchange"`
	// Gets or sets the preference metric for this record.
	Preference pulumi.IntPtrInput `pulumi:"preference"`
}

func (MxRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MxRecord)(nil)).Elem()
}

func (i MxRecordArgs) ToMxRecordOutput() MxRecordOutput {
	return i.ToMxRecordOutputWithContext(context.Background())
}

func (i MxRecordArgs) ToMxRecordOutputWithContext(ctx context.Context) MxRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MxRecordOutput)
}

// MxRecordArrayInput is an input type that accepts MxRecordArray and MxRecordArrayOutput values.
// You can construct a concrete instance of `MxRecordArrayInput` via:
//
//          MxRecordArray{ MxRecordArgs{...} }
type MxRecordArrayInput interface {
	pulumi.Input

	ToMxRecordArrayOutput() MxRecordArrayOutput
	ToMxRecordArrayOutputWithContext(context.Context) MxRecordArrayOutput
}

type MxRecordArray []MxRecordInput

func (MxRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MxRecord)(nil)).Elem()
}

func (i MxRecordArray) ToMxRecordArrayOutput() MxRecordArrayOutput {
	return i.ToMxRecordArrayOutputWithContext(context.Background())
}

func (i MxRecordArray) ToMxRecordArrayOutputWithContext(ctx context.Context) MxRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MxRecordArrayOutput)
}

// An MX record.
type MxRecordOutput struct{ *pulumi.OutputState }

func (MxRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MxRecord)(nil)).Elem()
}

func (o MxRecordOutput) ToMxRecordOutput() MxRecordOutput {
	return o
}

func (o MxRecordOutput) ToMxRecordOutputWithContext(ctx context.Context) MxRecordOutput {
	return o
}

// Gets or sets the domain name of the mail host, without a terminating dot.
func (o MxRecordOutput) Exchange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MxRecord) *string { return v.Exchange }).(pulumi.StringPtrOutput)
}

// Gets or sets the preference metric for this record.
func (o MxRecordOutput) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MxRecord) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

type MxRecordArrayOutput struct{ *pulumi.OutputState }

func (MxRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MxRecord)(nil)).Elem()
}

func (o MxRecordArrayOutput) ToMxRecordArrayOutput() MxRecordArrayOutput {
	return o
}

func (o MxRecordArrayOutput) ToMxRecordArrayOutputWithContext(ctx context.Context) MxRecordArrayOutput {
	return o
}

func (o MxRecordArrayOutput) Index(i pulumi.IntInput) MxRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MxRecord {
		return vs[0].([]MxRecord)[vs[1].(int)]
	}).(MxRecordOutput)
}

// An MX record.
type MxRecordInvokeResponse struct {
	// Gets or sets the domain name of the mail host, without a terminating dot.
	Exchange *string `pulumi:"exchange"`
	// Gets or sets the preference metric for this record.
	Preference *int `pulumi:"preference"`
}

// MxRecordInvokeResponseInput is an input type that accepts MxRecordInvokeResponseArgs and MxRecordInvokeResponseOutput values.
// You can construct a concrete instance of `MxRecordInvokeResponseInput` via:
//
//          MxRecordInvokeResponseArgs{...}
type MxRecordInvokeResponseInput interface {
	pulumi.Input

	ToMxRecordInvokeResponseOutput() MxRecordInvokeResponseOutput
	ToMxRecordInvokeResponseOutputWithContext(context.Context) MxRecordInvokeResponseOutput
}

// An MX record.
type MxRecordInvokeResponseArgs struct {
	// Gets or sets the domain name of the mail host, without a terminating dot.
	Exchange pulumi.StringPtrInput `pulumi:"exchange"`
	// Gets or sets the preference metric for this record.
	Preference pulumi.IntPtrInput `pulumi:"preference"`
}

func (MxRecordInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MxRecordInvokeResponse)(nil)).Elem()
}

func (i MxRecordInvokeResponseArgs) ToMxRecordInvokeResponseOutput() MxRecordInvokeResponseOutput {
	return i.ToMxRecordInvokeResponseOutputWithContext(context.Background())
}

func (i MxRecordInvokeResponseArgs) ToMxRecordInvokeResponseOutputWithContext(ctx context.Context) MxRecordInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MxRecordInvokeResponseOutput)
}

// MxRecordInvokeResponseArrayInput is an input type that accepts MxRecordInvokeResponseArray and MxRecordInvokeResponseArrayOutput values.
// You can construct a concrete instance of `MxRecordInvokeResponseArrayInput` via:
//
//          MxRecordInvokeResponseArray{ MxRecordInvokeResponseArgs{...} }
type MxRecordInvokeResponseArrayInput interface {
	pulumi.Input

	ToMxRecordInvokeResponseArrayOutput() MxRecordInvokeResponseArrayOutput
	ToMxRecordInvokeResponseArrayOutputWithContext(context.Context) MxRecordInvokeResponseArrayOutput
}

type MxRecordInvokeResponseArray []MxRecordInvokeResponseInput

func (MxRecordInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MxRecordInvokeResponse)(nil)).Elem()
}

func (i MxRecordInvokeResponseArray) ToMxRecordInvokeResponseArrayOutput() MxRecordInvokeResponseArrayOutput {
	return i.ToMxRecordInvokeResponseArrayOutputWithContext(context.Background())
}

func (i MxRecordInvokeResponseArray) ToMxRecordInvokeResponseArrayOutputWithContext(ctx context.Context) MxRecordInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MxRecordInvokeResponseArrayOutput)
}

// An MX record.
type MxRecordInvokeResponseOutput struct{ *pulumi.OutputState }

func (MxRecordInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MxRecordInvokeResponse)(nil)).Elem()
}

func (o MxRecordInvokeResponseOutput) ToMxRecordInvokeResponseOutput() MxRecordInvokeResponseOutput {
	return o
}

func (o MxRecordInvokeResponseOutput) ToMxRecordInvokeResponseOutputWithContext(ctx context.Context) MxRecordInvokeResponseOutput {
	return o
}

// Gets or sets the domain name of the mail host, without a terminating dot.
func (o MxRecordInvokeResponseOutput) Exchange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MxRecordInvokeResponse) *string { return v.Exchange }).(pulumi.StringPtrOutput)
}

// Gets or sets the preference metric for this record.
func (o MxRecordInvokeResponseOutput) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MxRecordInvokeResponse) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

type MxRecordInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (MxRecordInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MxRecordInvokeResponse)(nil)).Elem()
}

func (o MxRecordInvokeResponseArrayOutput) ToMxRecordInvokeResponseArrayOutput() MxRecordInvokeResponseArrayOutput {
	return o
}

func (o MxRecordInvokeResponseArrayOutput) ToMxRecordInvokeResponseArrayOutputWithContext(ctx context.Context) MxRecordInvokeResponseArrayOutput {
	return o
}

func (o MxRecordInvokeResponseArrayOutput) Index(i pulumi.IntInput) MxRecordInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MxRecordInvokeResponse {
		return vs[0].([]MxRecordInvokeResponse)[vs[1].(int)]
	}).(MxRecordInvokeResponseOutput)
}

// An MX record.
type MxRecordResponse struct {
	// Gets or sets the domain name of the mail host, without a terminating dot.
	Exchange *string `pulumi:"exchange"`
	// Gets or sets the preference metric for this record.
	Preference *int `pulumi:"preference"`
}

// MxRecordResponseInput is an input type that accepts MxRecordResponseArgs and MxRecordResponseOutput values.
// You can construct a concrete instance of `MxRecordResponseInput` via:
//
//          MxRecordResponseArgs{...}
type MxRecordResponseInput interface {
	pulumi.Input

	ToMxRecordResponseOutput() MxRecordResponseOutput
	ToMxRecordResponseOutputWithContext(context.Context) MxRecordResponseOutput
}

// An MX record.
type MxRecordResponseArgs struct {
	// Gets or sets the domain name of the mail host, without a terminating dot.
	Exchange pulumi.StringPtrInput `pulumi:"exchange"`
	// Gets or sets the preference metric for this record.
	Preference pulumi.IntPtrInput `pulumi:"preference"`
}

func (MxRecordResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MxRecordResponse)(nil)).Elem()
}

func (i MxRecordResponseArgs) ToMxRecordResponseOutput() MxRecordResponseOutput {
	return i.ToMxRecordResponseOutputWithContext(context.Background())
}

func (i MxRecordResponseArgs) ToMxRecordResponseOutputWithContext(ctx context.Context) MxRecordResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MxRecordResponseOutput)
}

// MxRecordResponseArrayInput is an input type that accepts MxRecordResponseArray and MxRecordResponseArrayOutput values.
// You can construct a concrete instance of `MxRecordResponseArrayInput` via:
//
//          MxRecordResponseArray{ MxRecordResponseArgs{...} }
type MxRecordResponseArrayInput interface {
	pulumi.Input

	ToMxRecordResponseArrayOutput() MxRecordResponseArrayOutput
	ToMxRecordResponseArrayOutputWithContext(context.Context) MxRecordResponseArrayOutput
}

type MxRecordResponseArray []MxRecordResponseInput

func (MxRecordResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MxRecordResponse)(nil)).Elem()
}

func (i MxRecordResponseArray) ToMxRecordResponseArrayOutput() MxRecordResponseArrayOutput {
	return i.ToMxRecordResponseArrayOutputWithContext(context.Background())
}

func (i MxRecordResponseArray) ToMxRecordResponseArrayOutputWithContext(ctx context.Context) MxRecordResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MxRecordResponseArrayOutput)
}

// An MX record.
type MxRecordResponseOutput struct{ *pulumi.OutputState }

func (MxRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MxRecordResponse)(nil)).Elem()
}

func (o MxRecordResponseOutput) ToMxRecordResponseOutput() MxRecordResponseOutput {
	return o
}

func (o MxRecordResponseOutput) ToMxRecordResponseOutputWithContext(ctx context.Context) MxRecordResponseOutput {
	return o
}

// Gets or sets the domain name of the mail host, without a terminating dot.
func (o MxRecordResponseOutput) Exchange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MxRecordResponse) *string { return v.Exchange }).(pulumi.StringPtrOutput)
}

// Gets or sets the preference metric for this record.
func (o MxRecordResponseOutput) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MxRecordResponse) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

type MxRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (MxRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MxRecordResponse)(nil)).Elem()
}

func (o MxRecordResponseArrayOutput) ToMxRecordResponseArrayOutput() MxRecordResponseArrayOutput {
	return o
}

func (o MxRecordResponseArrayOutput) ToMxRecordResponseArrayOutputWithContext(ctx context.Context) MxRecordResponseArrayOutput {
	return o
}

func (o MxRecordResponseArrayOutput) Index(i pulumi.IntInput) MxRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MxRecordResponse {
		return vs[0].([]MxRecordResponse)[vs[1].(int)]
	}).(MxRecordResponseOutput)
}

// An NS record.
type NsRecord struct {
	// Gets or sets the name server name for this record, without a terminating dot.
	Nsdname *string `pulumi:"nsdname"`
}

// NsRecordInput is an input type that accepts NsRecordArgs and NsRecordOutput values.
// You can construct a concrete instance of `NsRecordInput` via:
//
//          NsRecordArgs{...}
type NsRecordInput interface {
	pulumi.Input

	ToNsRecordOutput() NsRecordOutput
	ToNsRecordOutputWithContext(context.Context) NsRecordOutput
}

// An NS record.
type NsRecordArgs struct {
	// Gets or sets the name server name for this record, without a terminating dot.
	Nsdname pulumi.StringPtrInput `pulumi:"nsdname"`
}

func (NsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NsRecord)(nil)).Elem()
}

func (i NsRecordArgs) ToNsRecordOutput() NsRecordOutput {
	return i.ToNsRecordOutputWithContext(context.Background())
}

func (i NsRecordArgs) ToNsRecordOutputWithContext(ctx context.Context) NsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsRecordOutput)
}

// NsRecordArrayInput is an input type that accepts NsRecordArray and NsRecordArrayOutput values.
// You can construct a concrete instance of `NsRecordArrayInput` via:
//
//          NsRecordArray{ NsRecordArgs{...} }
type NsRecordArrayInput interface {
	pulumi.Input

	ToNsRecordArrayOutput() NsRecordArrayOutput
	ToNsRecordArrayOutputWithContext(context.Context) NsRecordArrayOutput
}

type NsRecordArray []NsRecordInput

func (NsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsRecord)(nil)).Elem()
}

func (i NsRecordArray) ToNsRecordArrayOutput() NsRecordArrayOutput {
	return i.ToNsRecordArrayOutputWithContext(context.Background())
}

func (i NsRecordArray) ToNsRecordArrayOutputWithContext(ctx context.Context) NsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsRecordArrayOutput)
}

// An NS record.
type NsRecordOutput struct{ *pulumi.OutputState }

func (NsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NsRecord)(nil)).Elem()
}

func (o NsRecordOutput) ToNsRecordOutput() NsRecordOutput {
	return o
}

func (o NsRecordOutput) ToNsRecordOutputWithContext(ctx context.Context) NsRecordOutput {
	return o
}

// Gets or sets the name server name for this record, without a terminating dot.
func (o NsRecordOutput) Nsdname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NsRecord) *string { return v.Nsdname }).(pulumi.StringPtrOutput)
}

type NsRecordArrayOutput struct{ *pulumi.OutputState }

func (NsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsRecord)(nil)).Elem()
}

func (o NsRecordArrayOutput) ToNsRecordArrayOutput() NsRecordArrayOutput {
	return o
}

func (o NsRecordArrayOutput) ToNsRecordArrayOutputWithContext(ctx context.Context) NsRecordArrayOutput {
	return o
}

func (o NsRecordArrayOutput) Index(i pulumi.IntInput) NsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NsRecord {
		return vs[0].([]NsRecord)[vs[1].(int)]
	}).(NsRecordOutput)
}

// An NS record.
type NsRecordInvokeResponse struct {
	// Gets or sets the name server name for this record, without a terminating dot.
	Nsdname *string `pulumi:"nsdname"`
}

// NsRecordInvokeResponseInput is an input type that accepts NsRecordInvokeResponseArgs and NsRecordInvokeResponseOutput values.
// You can construct a concrete instance of `NsRecordInvokeResponseInput` via:
//
//          NsRecordInvokeResponseArgs{...}
type NsRecordInvokeResponseInput interface {
	pulumi.Input

	ToNsRecordInvokeResponseOutput() NsRecordInvokeResponseOutput
	ToNsRecordInvokeResponseOutputWithContext(context.Context) NsRecordInvokeResponseOutput
}

// An NS record.
type NsRecordInvokeResponseArgs struct {
	// Gets or sets the name server name for this record, without a terminating dot.
	Nsdname pulumi.StringPtrInput `pulumi:"nsdname"`
}

func (NsRecordInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NsRecordInvokeResponse)(nil)).Elem()
}

func (i NsRecordInvokeResponseArgs) ToNsRecordInvokeResponseOutput() NsRecordInvokeResponseOutput {
	return i.ToNsRecordInvokeResponseOutputWithContext(context.Background())
}

func (i NsRecordInvokeResponseArgs) ToNsRecordInvokeResponseOutputWithContext(ctx context.Context) NsRecordInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsRecordInvokeResponseOutput)
}

// NsRecordInvokeResponseArrayInput is an input type that accepts NsRecordInvokeResponseArray and NsRecordInvokeResponseArrayOutput values.
// You can construct a concrete instance of `NsRecordInvokeResponseArrayInput` via:
//
//          NsRecordInvokeResponseArray{ NsRecordInvokeResponseArgs{...} }
type NsRecordInvokeResponseArrayInput interface {
	pulumi.Input

	ToNsRecordInvokeResponseArrayOutput() NsRecordInvokeResponseArrayOutput
	ToNsRecordInvokeResponseArrayOutputWithContext(context.Context) NsRecordInvokeResponseArrayOutput
}

type NsRecordInvokeResponseArray []NsRecordInvokeResponseInput

func (NsRecordInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsRecordInvokeResponse)(nil)).Elem()
}

func (i NsRecordInvokeResponseArray) ToNsRecordInvokeResponseArrayOutput() NsRecordInvokeResponseArrayOutput {
	return i.ToNsRecordInvokeResponseArrayOutputWithContext(context.Background())
}

func (i NsRecordInvokeResponseArray) ToNsRecordInvokeResponseArrayOutputWithContext(ctx context.Context) NsRecordInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsRecordInvokeResponseArrayOutput)
}

// An NS record.
type NsRecordInvokeResponseOutput struct{ *pulumi.OutputState }

func (NsRecordInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NsRecordInvokeResponse)(nil)).Elem()
}

func (o NsRecordInvokeResponseOutput) ToNsRecordInvokeResponseOutput() NsRecordInvokeResponseOutput {
	return o
}

func (o NsRecordInvokeResponseOutput) ToNsRecordInvokeResponseOutputWithContext(ctx context.Context) NsRecordInvokeResponseOutput {
	return o
}

// Gets or sets the name server name for this record, without a terminating dot.
func (o NsRecordInvokeResponseOutput) Nsdname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NsRecordInvokeResponse) *string { return v.Nsdname }).(pulumi.StringPtrOutput)
}

type NsRecordInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (NsRecordInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsRecordInvokeResponse)(nil)).Elem()
}

func (o NsRecordInvokeResponseArrayOutput) ToNsRecordInvokeResponseArrayOutput() NsRecordInvokeResponseArrayOutput {
	return o
}

func (o NsRecordInvokeResponseArrayOutput) ToNsRecordInvokeResponseArrayOutputWithContext(ctx context.Context) NsRecordInvokeResponseArrayOutput {
	return o
}

func (o NsRecordInvokeResponseArrayOutput) Index(i pulumi.IntInput) NsRecordInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NsRecordInvokeResponse {
		return vs[0].([]NsRecordInvokeResponse)[vs[1].(int)]
	}).(NsRecordInvokeResponseOutput)
}

// An NS record.
type NsRecordResponse struct {
	// Gets or sets the name server name for this record, without a terminating dot.
	Nsdname *string `pulumi:"nsdname"`
}

// NsRecordResponseInput is an input type that accepts NsRecordResponseArgs and NsRecordResponseOutput values.
// You can construct a concrete instance of `NsRecordResponseInput` via:
//
//          NsRecordResponseArgs{...}
type NsRecordResponseInput interface {
	pulumi.Input

	ToNsRecordResponseOutput() NsRecordResponseOutput
	ToNsRecordResponseOutputWithContext(context.Context) NsRecordResponseOutput
}

// An NS record.
type NsRecordResponseArgs struct {
	// Gets or sets the name server name for this record, without a terminating dot.
	Nsdname pulumi.StringPtrInput `pulumi:"nsdname"`
}

func (NsRecordResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NsRecordResponse)(nil)).Elem()
}

func (i NsRecordResponseArgs) ToNsRecordResponseOutput() NsRecordResponseOutput {
	return i.ToNsRecordResponseOutputWithContext(context.Background())
}

func (i NsRecordResponseArgs) ToNsRecordResponseOutputWithContext(ctx context.Context) NsRecordResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsRecordResponseOutput)
}

// NsRecordResponseArrayInput is an input type that accepts NsRecordResponseArray and NsRecordResponseArrayOutput values.
// You can construct a concrete instance of `NsRecordResponseArrayInput` via:
//
//          NsRecordResponseArray{ NsRecordResponseArgs{...} }
type NsRecordResponseArrayInput interface {
	pulumi.Input

	ToNsRecordResponseArrayOutput() NsRecordResponseArrayOutput
	ToNsRecordResponseArrayOutputWithContext(context.Context) NsRecordResponseArrayOutput
}

type NsRecordResponseArray []NsRecordResponseInput

func (NsRecordResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsRecordResponse)(nil)).Elem()
}

func (i NsRecordResponseArray) ToNsRecordResponseArrayOutput() NsRecordResponseArrayOutput {
	return i.ToNsRecordResponseArrayOutputWithContext(context.Background())
}

func (i NsRecordResponseArray) ToNsRecordResponseArrayOutputWithContext(ctx context.Context) NsRecordResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsRecordResponseArrayOutput)
}

// An NS record.
type NsRecordResponseOutput struct{ *pulumi.OutputState }

func (NsRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NsRecordResponse)(nil)).Elem()
}

func (o NsRecordResponseOutput) ToNsRecordResponseOutput() NsRecordResponseOutput {
	return o
}

func (o NsRecordResponseOutput) ToNsRecordResponseOutputWithContext(ctx context.Context) NsRecordResponseOutput {
	return o
}

// Gets or sets the name server name for this record, without a terminating dot.
func (o NsRecordResponseOutput) Nsdname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NsRecordResponse) *string { return v.Nsdname }).(pulumi.StringPtrOutput)
}

type NsRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (NsRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsRecordResponse)(nil)).Elem()
}

func (o NsRecordResponseArrayOutput) ToNsRecordResponseArrayOutput() NsRecordResponseArrayOutput {
	return o
}

func (o NsRecordResponseArrayOutput) ToNsRecordResponseArrayOutputWithContext(ctx context.Context) NsRecordResponseArrayOutput {
	return o
}

func (o NsRecordResponseArrayOutput) Index(i pulumi.IntInput) NsRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NsRecordResponse {
		return vs[0].([]NsRecordResponse)[vs[1].(int)]
	}).(NsRecordResponseOutput)
}

// A PTR record.
type PtrRecord struct {
	// Gets or sets the PTR target domain name for this record without a terminating dot.
	Ptrdname *string `pulumi:"ptrdname"`
}

// PtrRecordInput is an input type that accepts PtrRecordArgs and PtrRecordOutput values.
// You can construct a concrete instance of `PtrRecordInput` via:
//
//          PtrRecordArgs{...}
type PtrRecordInput interface {
	pulumi.Input

	ToPtrRecordOutput() PtrRecordOutput
	ToPtrRecordOutputWithContext(context.Context) PtrRecordOutput
}

// A PTR record.
type PtrRecordArgs struct {
	// Gets or sets the PTR target domain name for this record without a terminating dot.
	Ptrdname pulumi.StringPtrInput `pulumi:"ptrdname"`
}

func (PtrRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PtrRecord)(nil)).Elem()
}

func (i PtrRecordArgs) ToPtrRecordOutput() PtrRecordOutput {
	return i.ToPtrRecordOutputWithContext(context.Background())
}

func (i PtrRecordArgs) ToPtrRecordOutputWithContext(ctx context.Context) PtrRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PtrRecordOutput)
}

// PtrRecordArrayInput is an input type that accepts PtrRecordArray and PtrRecordArrayOutput values.
// You can construct a concrete instance of `PtrRecordArrayInput` via:
//
//          PtrRecordArray{ PtrRecordArgs{...} }
type PtrRecordArrayInput interface {
	pulumi.Input

	ToPtrRecordArrayOutput() PtrRecordArrayOutput
	ToPtrRecordArrayOutputWithContext(context.Context) PtrRecordArrayOutput
}

type PtrRecordArray []PtrRecordInput

func (PtrRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PtrRecord)(nil)).Elem()
}

func (i PtrRecordArray) ToPtrRecordArrayOutput() PtrRecordArrayOutput {
	return i.ToPtrRecordArrayOutputWithContext(context.Background())
}

func (i PtrRecordArray) ToPtrRecordArrayOutputWithContext(ctx context.Context) PtrRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PtrRecordArrayOutput)
}

// A PTR record.
type PtrRecordOutput struct{ *pulumi.OutputState }

func (PtrRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PtrRecord)(nil)).Elem()
}

func (o PtrRecordOutput) ToPtrRecordOutput() PtrRecordOutput {
	return o
}

func (o PtrRecordOutput) ToPtrRecordOutputWithContext(ctx context.Context) PtrRecordOutput {
	return o
}

// Gets or sets the PTR target domain name for this record without a terminating dot.
func (o PtrRecordOutput) Ptrdname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PtrRecord) *string { return v.Ptrdname }).(pulumi.StringPtrOutput)
}

type PtrRecordArrayOutput struct{ *pulumi.OutputState }

func (PtrRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PtrRecord)(nil)).Elem()
}

func (o PtrRecordArrayOutput) ToPtrRecordArrayOutput() PtrRecordArrayOutput {
	return o
}

func (o PtrRecordArrayOutput) ToPtrRecordArrayOutputWithContext(ctx context.Context) PtrRecordArrayOutput {
	return o
}

func (o PtrRecordArrayOutput) Index(i pulumi.IntInput) PtrRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PtrRecord {
		return vs[0].([]PtrRecord)[vs[1].(int)]
	}).(PtrRecordOutput)
}

// A PTR record.
type PtrRecordInvokeResponse struct {
	// Gets or sets the PTR target domain name for this record without a terminating dot.
	Ptrdname *string `pulumi:"ptrdname"`
}

// PtrRecordInvokeResponseInput is an input type that accepts PtrRecordInvokeResponseArgs and PtrRecordInvokeResponseOutput values.
// You can construct a concrete instance of `PtrRecordInvokeResponseInput` via:
//
//          PtrRecordInvokeResponseArgs{...}
type PtrRecordInvokeResponseInput interface {
	pulumi.Input

	ToPtrRecordInvokeResponseOutput() PtrRecordInvokeResponseOutput
	ToPtrRecordInvokeResponseOutputWithContext(context.Context) PtrRecordInvokeResponseOutput
}

// A PTR record.
type PtrRecordInvokeResponseArgs struct {
	// Gets or sets the PTR target domain name for this record without a terminating dot.
	Ptrdname pulumi.StringPtrInput `pulumi:"ptrdname"`
}

func (PtrRecordInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PtrRecordInvokeResponse)(nil)).Elem()
}

func (i PtrRecordInvokeResponseArgs) ToPtrRecordInvokeResponseOutput() PtrRecordInvokeResponseOutput {
	return i.ToPtrRecordInvokeResponseOutputWithContext(context.Background())
}

func (i PtrRecordInvokeResponseArgs) ToPtrRecordInvokeResponseOutputWithContext(ctx context.Context) PtrRecordInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PtrRecordInvokeResponseOutput)
}

// PtrRecordInvokeResponseArrayInput is an input type that accepts PtrRecordInvokeResponseArray and PtrRecordInvokeResponseArrayOutput values.
// You can construct a concrete instance of `PtrRecordInvokeResponseArrayInput` via:
//
//          PtrRecordInvokeResponseArray{ PtrRecordInvokeResponseArgs{...} }
type PtrRecordInvokeResponseArrayInput interface {
	pulumi.Input

	ToPtrRecordInvokeResponseArrayOutput() PtrRecordInvokeResponseArrayOutput
	ToPtrRecordInvokeResponseArrayOutputWithContext(context.Context) PtrRecordInvokeResponseArrayOutput
}

type PtrRecordInvokeResponseArray []PtrRecordInvokeResponseInput

func (PtrRecordInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PtrRecordInvokeResponse)(nil)).Elem()
}

func (i PtrRecordInvokeResponseArray) ToPtrRecordInvokeResponseArrayOutput() PtrRecordInvokeResponseArrayOutput {
	return i.ToPtrRecordInvokeResponseArrayOutputWithContext(context.Background())
}

func (i PtrRecordInvokeResponseArray) ToPtrRecordInvokeResponseArrayOutputWithContext(ctx context.Context) PtrRecordInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PtrRecordInvokeResponseArrayOutput)
}

// A PTR record.
type PtrRecordInvokeResponseOutput struct{ *pulumi.OutputState }

func (PtrRecordInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PtrRecordInvokeResponse)(nil)).Elem()
}

func (o PtrRecordInvokeResponseOutput) ToPtrRecordInvokeResponseOutput() PtrRecordInvokeResponseOutput {
	return o
}

func (o PtrRecordInvokeResponseOutput) ToPtrRecordInvokeResponseOutputWithContext(ctx context.Context) PtrRecordInvokeResponseOutput {
	return o
}

// Gets or sets the PTR target domain name for this record without a terminating dot.
func (o PtrRecordInvokeResponseOutput) Ptrdname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PtrRecordInvokeResponse) *string { return v.Ptrdname }).(pulumi.StringPtrOutput)
}

type PtrRecordInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (PtrRecordInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PtrRecordInvokeResponse)(nil)).Elem()
}

func (o PtrRecordInvokeResponseArrayOutput) ToPtrRecordInvokeResponseArrayOutput() PtrRecordInvokeResponseArrayOutput {
	return o
}

func (o PtrRecordInvokeResponseArrayOutput) ToPtrRecordInvokeResponseArrayOutputWithContext(ctx context.Context) PtrRecordInvokeResponseArrayOutput {
	return o
}

func (o PtrRecordInvokeResponseArrayOutput) Index(i pulumi.IntInput) PtrRecordInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PtrRecordInvokeResponse {
		return vs[0].([]PtrRecordInvokeResponse)[vs[1].(int)]
	}).(PtrRecordInvokeResponseOutput)
}

// A PTR record.
type PtrRecordResponse struct {
	// Gets or sets the PTR target domain name for this record without a terminating dot.
	Ptrdname *string `pulumi:"ptrdname"`
}

// PtrRecordResponseInput is an input type that accepts PtrRecordResponseArgs and PtrRecordResponseOutput values.
// You can construct a concrete instance of `PtrRecordResponseInput` via:
//
//          PtrRecordResponseArgs{...}
type PtrRecordResponseInput interface {
	pulumi.Input

	ToPtrRecordResponseOutput() PtrRecordResponseOutput
	ToPtrRecordResponseOutputWithContext(context.Context) PtrRecordResponseOutput
}

// A PTR record.
type PtrRecordResponseArgs struct {
	// Gets or sets the PTR target domain name for this record without a terminating dot.
	Ptrdname pulumi.StringPtrInput `pulumi:"ptrdname"`
}

func (PtrRecordResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PtrRecordResponse)(nil)).Elem()
}

func (i PtrRecordResponseArgs) ToPtrRecordResponseOutput() PtrRecordResponseOutput {
	return i.ToPtrRecordResponseOutputWithContext(context.Background())
}

func (i PtrRecordResponseArgs) ToPtrRecordResponseOutputWithContext(ctx context.Context) PtrRecordResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PtrRecordResponseOutput)
}

// PtrRecordResponseArrayInput is an input type that accepts PtrRecordResponseArray and PtrRecordResponseArrayOutput values.
// You can construct a concrete instance of `PtrRecordResponseArrayInput` via:
//
//          PtrRecordResponseArray{ PtrRecordResponseArgs{...} }
type PtrRecordResponseArrayInput interface {
	pulumi.Input

	ToPtrRecordResponseArrayOutput() PtrRecordResponseArrayOutput
	ToPtrRecordResponseArrayOutputWithContext(context.Context) PtrRecordResponseArrayOutput
}

type PtrRecordResponseArray []PtrRecordResponseInput

func (PtrRecordResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PtrRecordResponse)(nil)).Elem()
}

func (i PtrRecordResponseArray) ToPtrRecordResponseArrayOutput() PtrRecordResponseArrayOutput {
	return i.ToPtrRecordResponseArrayOutputWithContext(context.Background())
}

func (i PtrRecordResponseArray) ToPtrRecordResponseArrayOutputWithContext(ctx context.Context) PtrRecordResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PtrRecordResponseArrayOutput)
}

// A PTR record.
type PtrRecordResponseOutput struct{ *pulumi.OutputState }

func (PtrRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PtrRecordResponse)(nil)).Elem()
}

func (o PtrRecordResponseOutput) ToPtrRecordResponseOutput() PtrRecordResponseOutput {
	return o
}

func (o PtrRecordResponseOutput) ToPtrRecordResponseOutputWithContext(ctx context.Context) PtrRecordResponseOutput {
	return o
}

// Gets or sets the PTR target domain name for this record without a terminating dot.
func (o PtrRecordResponseOutput) Ptrdname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PtrRecordResponse) *string { return v.Ptrdname }).(pulumi.StringPtrOutput)
}

type PtrRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (PtrRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PtrRecordResponse)(nil)).Elem()
}

func (o PtrRecordResponseArrayOutput) ToPtrRecordResponseArrayOutput() PtrRecordResponseArrayOutput {
	return o
}

func (o PtrRecordResponseArrayOutput) ToPtrRecordResponseArrayOutputWithContext(ctx context.Context) PtrRecordResponseArrayOutput {
	return o
}

func (o PtrRecordResponseArrayOutput) Index(i pulumi.IntInput) PtrRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PtrRecordResponse {
		return vs[0].([]PtrRecordResponse)[vs[1].(int)]
	}).(PtrRecordResponseOutput)
}

// An SOA record.
type SoaRecord struct {
	// Gets or sets the email for this record.
	Email *string `pulumi:"email"`
	// Gets or sets the expire time for this record.
	ExpireTime *float64 `pulumi:"expireTime"`
	// Gets or sets the domain name of the authoritative name server, without a terminating dot.
	Host *string `pulumi:"host"`
	// Gets or sets the minimum TTL value for this record.
	MinimumTTL *float64 `pulumi:"minimumTTL"`
	// Gets or sets the refresh value for this record.
	RefreshTime *float64 `pulumi:"refreshTime"`
	// Gets or sets the retry time for this record.
	RetryTime *float64 `pulumi:"retryTime"`
	// Gets or sets the serial number for this record.
	SerialNumber *float64 `pulumi:"serialNumber"`
}

// SoaRecordInput is an input type that accepts SoaRecordArgs and SoaRecordOutput values.
// You can construct a concrete instance of `SoaRecordInput` via:
//
//          SoaRecordArgs{...}
type SoaRecordInput interface {
	pulumi.Input

	ToSoaRecordOutput() SoaRecordOutput
	ToSoaRecordOutputWithContext(context.Context) SoaRecordOutput
}

// An SOA record.
type SoaRecordArgs struct {
	// Gets or sets the email for this record.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Gets or sets the expire time for this record.
	ExpireTime pulumi.Float64PtrInput `pulumi:"expireTime"`
	// Gets or sets the domain name of the authoritative name server, without a terminating dot.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Gets or sets the minimum TTL value for this record.
	MinimumTTL pulumi.Float64PtrInput `pulumi:"minimumTTL"`
	// Gets or sets the refresh value for this record.
	RefreshTime pulumi.Float64PtrInput `pulumi:"refreshTime"`
	// Gets or sets the retry time for this record.
	RetryTime pulumi.Float64PtrInput `pulumi:"retryTime"`
	// Gets or sets the serial number for this record.
	SerialNumber pulumi.Float64PtrInput `pulumi:"serialNumber"`
}

func (SoaRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoaRecord)(nil)).Elem()
}

func (i SoaRecordArgs) ToSoaRecordOutput() SoaRecordOutput {
	return i.ToSoaRecordOutputWithContext(context.Background())
}

func (i SoaRecordArgs) ToSoaRecordOutputWithContext(ctx context.Context) SoaRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoaRecordOutput)
}

func (i SoaRecordArgs) ToSoaRecordPtrOutput() SoaRecordPtrOutput {
	return i.ToSoaRecordPtrOutputWithContext(context.Background())
}

func (i SoaRecordArgs) ToSoaRecordPtrOutputWithContext(ctx context.Context) SoaRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoaRecordOutput).ToSoaRecordPtrOutputWithContext(ctx)
}

// SoaRecordPtrInput is an input type that accepts SoaRecordArgs, SoaRecordPtr and SoaRecordPtrOutput values.
// You can construct a concrete instance of `SoaRecordPtrInput` via:
//
//          SoaRecordArgs{...}
//
//  or:
//
//          nil
type SoaRecordPtrInput interface {
	pulumi.Input

	ToSoaRecordPtrOutput() SoaRecordPtrOutput
	ToSoaRecordPtrOutputWithContext(context.Context) SoaRecordPtrOutput
}

type soaRecordPtrType SoaRecordArgs

func SoaRecordPtr(v *SoaRecordArgs) SoaRecordPtrInput {
	return (*soaRecordPtrType)(v)
}

func (*soaRecordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SoaRecord)(nil)).Elem()
}

func (i *soaRecordPtrType) ToSoaRecordPtrOutput() SoaRecordPtrOutput {
	return i.ToSoaRecordPtrOutputWithContext(context.Background())
}

func (i *soaRecordPtrType) ToSoaRecordPtrOutputWithContext(ctx context.Context) SoaRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoaRecordPtrOutput)
}

// An SOA record.
type SoaRecordOutput struct{ *pulumi.OutputState }

func (SoaRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoaRecord)(nil)).Elem()
}

func (o SoaRecordOutput) ToSoaRecordOutput() SoaRecordOutput {
	return o
}

func (o SoaRecordOutput) ToSoaRecordOutputWithContext(ctx context.Context) SoaRecordOutput {
	return o
}

func (o SoaRecordOutput) ToSoaRecordPtrOutput() SoaRecordPtrOutput {
	return o.ToSoaRecordPtrOutputWithContext(context.Background())
}

func (o SoaRecordOutput) ToSoaRecordPtrOutputWithContext(ctx context.Context) SoaRecordPtrOutput {
	return o.ApplyT(func(v SoaRecord) *SoaRecord {
		return &v
	}).(SoaRecordPtrOutput)
}

// Gets or sets the email for this record.
func (o SoaRecordOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoaRecord) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Gets or sets the expire time for this record.
func (o SoaRecordOutput) ExpireTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecord) *float64 { return v.ExpireTime }).(pulumi.Float64PtrOutput)
}

// Gets or sets the domain name of the authoritative name server, without a terminating dot.
func (o SoaRecordOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoaRecord) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Gets or sets the minimum TTL value for this record.
func (o SoaRecordOutput) MinimumTTL() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecord) *float64 { return v.MinimumTTL }).(pulumi.Float64PtrOutput)
}

// Gets or sets the refresh value for this record.
func (o SoaRecordOutput) RefreshTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecord) *float64 { return v.RefreshTime }).(pulumi.Float64PtrOutput)
}

// Gets or sets the retry time for this record.
func (o SoaRecordOutput) RetryTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecord) *float64 { return v.RetryTime }).(pulumi.Float64PtrOutput)
}

// Gets or sets the serial number for this record.
func (o SoaRecordOutput) SerialNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecord) *float64 { return v.SerialNumber }).(pulumi.Float64PtrOutput)
}

type SoaRecordPtrOutput struct{ *pulumi.OutputState }

func (SoaRecordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoaRecord)(nil)).Elem()
}

func (o SoaRecordPtrOutput) ToSoaRecordPtrOutput() SoaRecordPtrOutput {
	return o
}

func (o SoaRecordPtrOutput) ToSoaRecordPtrOutputWithContext(ctx context.Context) SoaRecordPtrOutput {
	return o
}

func (o SoaRecordPtrOutput) Elem() SoaRecordOutput {
	return o.ApplyT(func(v *SoaRecord) SoaRecord { return *v }).(SoaRecordOutput)
}

// Gets or sets the email for this record.
func (o SoaRecordPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoaRecord) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the expire time for this record.
func (o SoaRecordPtrOutput) ExpireTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecord) *float64 {
		if v == nil {
			return nil
		}
		return v.ExpireTime
	}).(pulumi.Float64PtrOutput)
}

// Gets or sets the domain name of the authoritative name server, without a terminating dot.
func (o SoaRecordPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoaRecord) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the minimum TTL value for this record.
func (o SoaRecordPtrOutput) MinimumTTL() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecord) *float64 {
		if v == nil {
			return nil
		}
		return v.MinimumTTL
	}).(pulumi.Float64PtrOutput)
}

// Gets or sets the refresh value for this record.
func (o SoaRecordPtrOutput) RefreshTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecord) *float64 {
		if v == nil {
			return nil
		}
		return v.RefreshTime
	}).(pulumi.Float64PtrOutput)
}

// Gets or sets the retry time for this record.
func (o SoaRecordPtrOutput) RetryTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecord) *float64 {
		if v == nil {
			return nil
		}
		return v.RetryTime
	}).(pulumi.Float64PtrOutput)
}

// Gets or sets the serial number for this record.
func (o SoaRecordPtrOutput) SerialNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecord) *float64 {
		if v == nil {
			return nil
		}
		return v.SerialNumber
	}).(pulumi.Float64PtrOutput)
}

// An SOA record.
type SoaRecordInvokeResponse struct {
	// Gets or sets the email for this record.
	Email *string `pulumi:"email"`
	// Gets or sets the expire time for this record.
	ExpireTime *float64 `pulumi:"expireTime"`
	// Gets or sets the domain name of the authoritative name server, without a terminating dot.
	Host *string `pulumi:"host"`
	// Gets or sets the minimum TTL value for this record.
	MinimumTTL *float64 `pulumi:"minimumTTL"`
	// Gets or sets the refresh value for this record.
	RefreshTime *float64 `pulumi:"refreshTime"`
	// Gets or sets the retry time for this record.
	RetryTime *float64 `pulumi:"retryTime"`
	// Gets or sets the serial number for this record.
	SerialNumber *float64 `pulumi:"serialNumber"`
}

// SoaRecordInvokeResponseInput is an input type that accepts SoaRecordInvokeResponseArgs and SoaRecordInvokeResponseOutput values.
// You can construct a concrete instance of `SoaRecordInvokeResponseInput` via:
//
//          SoaRecordInvokeResponseArgs{...}
type SoaRecordInvokeResponseInput interface {
	pulumi.Input

	ToSoaRecordInvokeResponseOutput() SoaRecordInvokeResponseOutput
	ToSoaRecordInvokeResponseOutputWithContext(context.Context) SoaRecordInvokeResponseOutput
}

// An SOA record.
type SoaRecordInvokeResponseArgs struct {
	// Gets or sets the email for this record.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Gets or sets the expire time for this record.
	ExpireTime pulumi.Float64PtrInput `pulumi:"expireTime"`
	// Gets or sets the domain name of the authoritative name server, without a terminating dot.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Gets or sets the minimum TTL value for this record.
	MinimumTTL pulumi.Float64PtrInput `pulumi:"minimumTTL"`
	// Gets or sets the refresh value for this record.
	RefreshTime pulumi.Float64PtrInput `pulumi:"refreshTime"`
	// Gets or sets the retry time for this record.
	RetryTime pulumi.Float64PtrInput `pulumi:"retryTime"`
	// Gets or sets the serial number for this record.
	SerialNumber pulumi.Float64PtrInput `pulumi:"serialNumber"`
}

func (SoaRecordInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoaRecordInvokeResponse)(nil)).Elem()
}

func (i SoaRecordInvokeResponseArgs) ToSoaRecordInvokeResponseOutput() SoaRecordInvokeResponseOutput {
	return i.ToSoaRecordInvokeResponseOutputWithContext(context.Background())
}

func (i SoaRecordInvokeResponseArgs) ToSoaRecordInvokeResponseOutputWithContext(ctx context.Context) SoaRecordInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoaRecordInvokeResponseOutput)
}

// An SOA record.
type SoaRecordInvokeResponseOutput struct{ *pulumi.OutputState }

func (SoaRecordInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoaRecordInvokeResponse)(nil)).Elem()
}

func (o SoaRecordInvokeResponseOutput) ToSoaRecordInvokeResponseOutput() SoaRecordInvokeResponseOutput {
	return o
}

func (o SoaRecordInvokeResponseOutput) ToSoaRecordInvokeResponseOutputWithContext(ctx context.Context) SoaRecordInvokeResponseOutput {
	return o
}

// Gets or sets the email for this record.
func (o SoaRecordInvokeResponseOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoaRecordInvokeResponse) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Gets or sets the expire time for this record.
func (o SoaRecordInvokeResponseOutput) ExpireTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecordInvokeResponse) *float64 { return v.ExpireTime }).(pulumi.Float64PtrOutput)
}

// Gets or sets the domain name of the authoritative name server, without a terminating dot.
func (o SoaRecordInvokeResponseOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoaRecordInvokeResponse) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Gets or sets the minimum TTL value for this record.
func (o SoaRecordInvokeResponseOutput) MinimumTTL() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecordInvokeResponse) *float64 { return v.MinimumTTL }).(pulumi.Float64PtrOutput)
}

// Gets or sets the refresh value for this record.
func (o SoaRecordInvokeResponseOutput) RefreshTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecordInvokeResponse) *float64 { return v.RefreshTime }).(pulumi.Float64PtrOutput)
}

// Gets or sets the retry time for this record.
func (o SoaRecordInvokeResponseOutput) RetryTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecordInvokeResponse) *float64 { return v.RetryTime }).(pulumi.Float64PtrOutput)
}

// Gets or sets the serial number for this record.
func (o SoaRecordInvokeResponseOutput) SerialNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecordInvokeResponse) *float64 { return v.SerialNumber }).(pulumi.Float64PtrOutput)
}

// An SOA record.
type SoaRecordResponse struct {
	// Gets or sets the email for this record.
	Email *string `pulumi:"email"`
	// Gets or sets the expire time for this record.
	ExpireTime *float64 `pulumi:"expireTime"`
	// Gets or sets the domain name of the authoritative name server, without a terminating dot.
	Host *string `pulumi:"host"`
	// Gets or sets the minimum TTL value for this record.
	MinimumTTL *float64 `pulumi:"minimumTTL"`
	// Gets or sets the refresh value for this record.
	RefreshTime *float64 `pulumi:"refreshTime"`
	// Gets or sets the retry time for this record.
	RetryTime *float64 `pulumi:"retryTime"`
	// Gets or sets the serial number for this record.
	SerialNumber *float64 `pulumi:"serialNumber"`
}

// SoaRecordResponseInput is an input type that accepts SoaRecordResponseArgs and SoaRecordResponseOutput values.
// You can construct a concrete instance of `SoaRecordResponseInput` via:
//
//          SoaRecordResponseArgs{...}
type SoaRecordResponseInput interface {
	pulumi.Input

	ToSoaRecordResponseOutput() SoaRecordResponseOutput
	ToSoaRecordResponseOutputWithContext(context.Context) SoaRecordResponseOutput
}

// An SOA record.
type SoaRecordResponseArgs struct {
	// Gets or sets the email for this record.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Gets or sets the expire time for this record.
	ExpireTime pulumi.Float64PtrInput `pulumi:"expireTime"`
	// Gets or sets the domain name of the authoritative name server, without a terminating dot.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Gets or sets the minimum TTL value for this record.
	MinimumTTL pulumi.Float64PtrInput `pulumi:"minimumTTL"`
	// Gets or sets the refresh value for this record.
	RefreshTime pulumi.Float64PtrInput `pulumi:"refreshTime"`
	// Gets or sets the retry time for this record.
	RetryTime pulumi.Float64PtrInput `pulumi:"retryTime"`
	// Gets or sets the serial number for this record.
	SerialNumber pulumi.Float64PtrInput `pulumi:"serialNumber"`
}

func (SoaRecordResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoaRecordResponse)(nil)).Elem()
}

func (i SoaRecordResponseArgs) ToSoaRecordResponseOutput() SoaRecordResponseOutput {
	return i.ToSoaRecordResponseOutputWithContext(context.Background())
}

func (i SoaRecordResponseArgs) ToSoaRecordResponseOutputWithContext(ctx context.Context) SoaRecordResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoaRecordResponseOutput)
}

func (i SoaRecordResponseArgs) ToSoaRecordResponsePtrOutput() SoaRecordResponsePtrOutput {
	return i.ToSoaRecordResponsePtrOutputWithContext(context.Background())
}

func (i SoaRecordResponseArgs) ToSoaRecordResponsePtrOutputWithContext(ctx context.Context) SoaRecordResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoaRecordResponseOutput).ToSoaRecordResponsePtrOutputWithContext(ctx)
}

// SoaRecordResponsePtrInput is an input type that accepts SoaRecordResponseArgs, SoaRecordResponsePtr and SoaRecordResponsePtrOutput values.
// You can construct a concrete instance of `SoaRecordResponsePtrInput` via:
//
//          SoaRecordResponseArgs{...}
//
//  or:
//
//          nil
type SoaRecordResponsePtrInput interface {
	pulumi.Input

	ToSoaRecordResponsePtrOutput() SoaRecordResponsePtrOutput
	ToSoaRecordResponsePtrOutputWithContext(context.Context) SoaRecordResponsePtrOutput
}

type soaRecordResponsePtrType SoaRecordResponseArgs

func SoaRecordResponsePtr(v *SoaRecordResponseArgs) SoaRecordResponsePtrInput {
	return (*soaRecordResponsePtrType)(v)
}

func (*soaRecordResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SoaRecordResponse)(nil)).Elem()
}

func (i *soaRecordResponsePtrType) ToSoaRecordResponsePtrOutput() SoaRecordResponsePtrOutput {
	return i.ToSoaRecordResponsePtrOutputWithContext(context.Background())
}

func (i *soaRecordResponsePtrType) ToSoaRecordResponsePtrOutputWithContext(ctx context.Context) SoaRecordResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoaRecordResponsePtrOutput)
}

// An SOA record.
type SoaRecordResponseOutput struct{ *pulumi.OutputState }

func (SoaRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoaRecordResponse)(nil)).Elem()
}

func (o SoaRecordResponseOutput) ToSoaRecordResponseOutput() SoaRecordResponseOutput {
	return o
}

func (o SoaRecordResponseOutput) ToSoaRecordResponseOutputWithContext(ctx context.Context) SoaRecordResponseOutput {
	return o
}

func (o SoaRecordResponseOutput) ToSoaRecordResponsePtrOutput() SoaRecordResponsePtrOutput {
	return o.ToSoaRecordResponsePtrOutputWithContext(context.Background())
}

func (o SoaRecordResponseOutput) ToSoaRecordResponsePtrOutputWithContext(ctx context.Context) SoaRecordResponsePtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *SoaRecordResponse {
		return &v
	}).(SoaRecordResponsePtrOutput)
}

// Gets or sets the email for this record.
func (o SoaRecordResponseOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Gets or sets the expire time for this record.
func (o SoaRecordResponseOutput) ExpireTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *float64 { return v.ExpireTime }).(pulumi.Float64PtrOutput)
}

// Gets or sets the domain name of the authoritative name server, without a terminating dot.
func (o SoaRecordResponseOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Gets or sets the minimum TTL value for this record.
func (o SoaRecordResponseOutput) MinimumTTL() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *float64 { return v.MinimumTTL }).(pulumi.Float64PtrOutput)
}

// Gets or sets the refresh value for this record.
func (o SoaRecordResponseOutput) RefreshTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *float64 { return v.RefreshTime }).(pulumi.Float64PtrOutput)
}

// Gets or sets the retry time for this record.
func (o SoaRecordResponseOutput) RetryTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *float64 { return v.RetryTime }).(pulumi.Float64PtrOutput)
}

// Gets or sets the serial number for this record.
func (o SoaRecordResponseOutput) SerialNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *float64 { return v.SerialNumber }).(pulumi.Float64PtrOutput)
}

type SoaRecordResponsePtrOutput struct{ *pulumi.OutputState }

func (SoaRecordResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoaRecordResponse)(nil)).Elem()
}

func (o SoaRecordResponsePtrOutput) ToSoaRecordResponsePtrOutput() SoaRecordResponsePtrOutput {
	return o
}

func (o SoaRecordResponsePtrOutput) ToSoaRecordResponsePtrOutputWithContext(ctx context.Context) SoaRecordResponsePtrOutput {
	return o
}

func (o SoaRecordResponsePtrOutput) Elem() SoaRecordResponseOutput {
	return o.ApplyT(func(v *SoaRecordResponse) SoaRecordResponse { return *v }).(SoaRecordResponseOutput)
}

// Gets or sets the email for this record.
func (o SoaRecordResponsePtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the expire time for this record.
func (o SoaRecordResponsePtrOutput) ExpireTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.ExpireTime
	}).(pulumi.Float64PtrOutput)
}

// Gets or sets the domain name of the authoritative name server, without a terminating dot.
func (o SoaRecordResponsePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the minimum TTL value for this record.
func (o SoaRecordResponsePtrOutput) MinimumTTL() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MinimumTTL
	}).(pulumi.Float64PtrOutput)
}

// Gets or sets the refresh value for this record.
func (o SoaRecordResponsePtrOutput) RefreshTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.RefreshTime
	}).(pulumi.Float64PtrOutput)
}

// Gets or sets the retry time for this record.
func (o SoaRecordResponsePtrOutput) RetryTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.RetryTime
	}).(pulumi.Float64PtrOutput)
}

// Gets or sets the serial number for this record.
func (o SoaRecordResponsePtrOutput) SerialNumber() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SerialNumber
	}).(pulumi.Float64PtrOutput)
}

// An SRV record.
type SrvRecord struct {
	// Gets or sets the port of the service for this record.
	Port *int `pulumi:"port"`
	// Gets or sets the priority metric for this record.
	Priority *int `pulumi:"priority"`
	// Gets or sets the domain name of the target for this record, without a terminating dot.
	Target *string `pulumi:"target"`
	// Gets or sets the weight metric for this record.
	Weight *int `pulumi:"weight"`
}

// SrvRecordInput is an input type that accepts SrvRecordArgs and SrvRecordOutput values.
// You can construct a concrete instance of `SrvRecordInput` via:
//
//          SrvRecordArgs{...}
type SrvRecordInput interface {
	pulumi.Input

	ToSrvRecordOutput() SrvRecordOutput
	ToSrvRecordOutputWithContext(context.Context) SrvRecordOutput
}

// An SRV record.
type SrvRecordArgs struct {
	// Gets or sets the port of the service for this record.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Gets or sets the priority metric for this record.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Gets or sets the domain name of the target for this record, without a terminating dot.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// Gets or sets the weight metric for this record.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (SrvRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SrvRecord)(nil)).Elem()
}

func (i SrvRecordArgs) ToSrvRecordOutput() SrvRecordOutput {
	return i.ToSrvRecordOutputWithContext(context.Background())
}

func (i SrvRecordArgs) ToSrvRecordOutputWithContext(ctx context.Context) SrvRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SrvRecordOutput)
}

// SrvRecordArrayInput is an input type that accepts SrvRecordArray and SrvRecordArrayOutput values.
// You can construct a concrete instance of `SrvRecordArrayInput` via:
//
//          SrvRecordArray{ SrvRecordArgs{...} }
type SrvRecordArrayInput interface {
	pulumi.Input

	ToSrvRecordArrayOutput() SrvRecordArrayOutput
	ToSrvRecordArrayOutputWithContext(context.Context) SrvRecordArrayOutput
}

type SrvRecordArray []SrvRecordInput

func (SrvRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SrvRecord)(nil)).Elem()
}

func (i SrvRecordArray) ToSrvRecordArrayOutput() SrvRecordArrayOutput {
	return i.ToSrvRecordArrayOutputWithContext(context.Background())
}

func (i SrvRecordArray) ToSrvRecordArrayOutputWithContext(ctx context.Context) SrvRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SrvRecordArrayOutput)
}

// An SRV record.
type SrvRecordOutput struct{ *pulumi.OutputState }

func (SrvRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SrvRecord)(nil)).Elem()
}

func (o SrvRecordOutput) ToSrvRecordOutput() SrvRecordOutput {
	return o
}

func (o SrvRecordOutput) ToSrvRecordOutputWithContext(ctx context.Context) SrvRecordOutput {
	return o
}

// Gets or sets the port of the service for this record.
func (o SrvRecordOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecord) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Gets or sets the priority metric for this record.
func (o SrvRecordOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecord) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Gets or sets the domain name of the target for this record, without a terminating dot.
func (o SrvRecordOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SrvRecord) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Gets or sets the weight metric for this record.
func (o SrvRecordOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecord) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type SrvRecordArrayOutput struct{ *pulumi.OutputState }

func (SrvRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SrvRecord)(nil)).Elem()
}

func (o SrvRecordArrayOutput) ToSrvRecordArrayOutput() SrvRecordArrayOutput {
	return o
}

func (o SrvRecordArrayOutput) ToSrvRecordArrayOutputWithContext(ctx context.Context) SrvRecordArrayOutput {
	return o
}

func (o SrvRecordArrayOutput) Index(i pulumi.IntInput) SrvRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SrvRecord {
		return vs[0].([]SrvRecord)[vs[1].(int)]
	}).(SrvRecordOutput)
}

// An SRV record.
type SrvRecordInvokeResponse struct {
	// Gets or sets the port of the service for this record.
	Port *int `pulumi:"port"`
	// Gets or sets the priority metric for this record.
	Priority *int `pulumi:"priority"`
	// Gets or sets the domain name of the target for this record, without a terminating dot.
	Target *string `pulumi:"target"`
	// Gets or sets the weight metric for this record.
	Weight *int `pulumi:"weight"`
}

// SrvRecordInvokeResponseInput is an input type that accepts SrvRecordInvokeResponseArgs and SrvRecordInvokeResponseOutput values.
// You can construct a concrete instance of `SrvRecordInvokeResponseInput` via:
//
//          SrvRecordInvokeResponseArgs{...}
type SrvRecordInvokeResponseInput interface {
	pulumi.Input

	ToSrvRecordInvokeResponseOutput() SrvRecordInvokeResponseOutput
	ToSrvRecordInvokeResponseOutputWithContext(context.Context) SrvRecordInvokeResponseOutput
}

// An SRV record.
type SrvRecordInvokeResponseArgs struct {
	// Gets or sets the port of the service for this record.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Gets or sets the priority metric for this record.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Gets or sets the domain name of the target for this record, without a terminating dot.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// Gets or sets the weight metric for this record.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (SrvRecordInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SrvRecordInvokeResponse)(nil)).Elem()
}

func (i SrvRecordInvokeResponseArgs) ToSrvRecordInvokeResponseOutput() SrvRecordInvokeResponseOutput {
	return i.ToSrvRecordInvokeResponseOutputWithContext(context.Background())
}

func (i SrvRecordInvokeResponseArgs) ToSrvRecordInvokeResponseOutputWithContext(ctx context.Context) SrvRecordInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SrvRecordInvokeResponseOutput)
}

// SrvRecordInvokeResponseArrayInput is an input type that accepts SrvRecordInvokeResponseArray and SrvRecordInvokeResponseArrayOutput values.
// You can construct a concrete instance of `SrvRecordInvokeResponseArrayInput` via:
//
//          SrvRecordInvokeResponseArray{ SrvRecordInvokeResponseArgs{...} }
type SrvRecordInvokeResponseArrayInput interface {
	pulumi.Input

	ToSrvRecordInvokeResponseArrayOutput() SrvRecordInvokeResponseArrayOutput
	ToSrvRecordInvokeResponseArrayOutputWithContext(context.Context) SrvRecordInvokeResponseArrayOutput
}

type SrvRecordInvokeResponseArray []SrvRecordInvokeResponseInput

func (SrvRecordInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SrvRecordInvokeResponse)(nil)).Elem()
}

func (i SrvRecordInvokeResponseArray) ToSrvRecordInvokeResponseArrayOutput() SrvRecordInvokeResponseArrayOutput {
	return i.ToSrvRecordInvokeResponseArrayOutputWithContext(context.Background())
}

func (i SrvRecordInvokeResponseArray) ToSrvRecordInvokeResponseArrayOutputWithContext(ctx context.Context) SrvRecordInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SrvRecordInvokeResponseArrayOutput)
}

// An SRV record.
type SrvRecordInvokeResponseOutput struct{ *pulumi.OutputState }

func (SrvRecordInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SrvRecordInvokeResponse)(nil)).Elem()
}

func (o SrvRecordInvokeResponseOutput) ToSrvRecordInvokeResponseOutput() SrvRecordInvokeResponseOutput {
	return o
}

func (o SrvRecordInvokeResponseOutput) ToSrvRecordInvokeResponseOutputWithContext(ctx context.Context) SrvRecordInvokeResponseOutput {
	return o
}

// Gets or sets the port of the service for this record.
func (o SrvRecordInvokeResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecordInvokeResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Gets or sets the priority metric for this record.
func (o SrvRecordInvokeResponseOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecordInvokeResponse) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Gets or sets the domain name of the target for this record, without a terminating dot.
func (o SrvRecordInvokeResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SrvRecordInvokeResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Gets or sets the weight metric for this record.
func (o SrvRecordInvokeResponseOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecordInvokeResponse) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type SrvRecordInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (SrvRecordInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SrvRecordInvokeResponse)(nil)).Elem()
}

func (o SrvRecordInvokeResponseArrayOutput) ToSrvRecordInvokeResponseArrayOutput() SrvRecordInvokeResponseArrayOutput {
	return o
}

func (o SrvRecordInvokeResponseArrayOutput) ToSrvRecordInvokeResponseArrayOutputWithContext(ctx context.Context) SrvRecordInvokeResponseArrayOutput {
	return o
}

func (o SrvRecordInvokeResponseArrayOutput) Index(i pulumi.IntInput) SrvRecordInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SrvRecordInvokeResponse {
		return vs[0].([]SrvRecordInvokeResponse)[vs[1].(int)]
	}).(SrvRecordInvokeResponseOutput)
}

// An SRV record.
type SrvRecordResponse struct {
	// Gets or sets the port of the service for this record.
	Port *int `pulumi:"port"`
	// Gets or sets the priority metric for this record.
	Priority *int `pulumi:"priority"`
	// Gets or sets the domain name of the target for this record, without a terminating dot.
	Target *string `pulumi:"target"`
	// Gets or sets the weight metric for this record.
	Weight *int `pulumi:"weight"`
}

// SrvRecordResponseInput is an input type that accepts SrvRecordResponseArgs and SrvRecordResponseOutput values.
// You can construct a concrete instance of `SrvRecordResponseInput` via:
//
//          SrvRecordResponseArgs{...}
type SrvRecordResponseInput interface {
	pulumi.Input

	ToSrvRecordResponseOutput() SrvRecordResponseOutput
	ToSrvRecordResponseOutputWithContext(context.Context) SrvRecordResponseOutput
}

// An SRV record.
type SrvRecordResponseArgs struct {
	// Gets or sets the port of the service for this record.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Gets or sets the priority metric for this record.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Gets or sets the domain name of the target for this record, without a terminating dot.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// Gets or sets the weight metric for this record.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (SrvRecordResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SrvRecordResponse)(nil)).Elem()
}

func (i SrvRecordResponseArgs) ToSrvRecordResponseOutput() SrvRecordResponseOutput {
	return i.ToSrvRecordResponseOutputWithContext(context.Background())
}

func (i SrvRecordResponseArgs) ToSrvRecordResponseOutputWithContext(ctx context.Context) SrvRecordResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SrvRecordResponseOutput)
}

// SrvRecordResponseArrayInput is an input type that accepts SrvRecordResponseArray and SrvRecordResponseArrayOutput values.
// You can construct a concrete instance of `SrvRecordResponseArrayInput` via:
//
//          SrvRecordResponseArray{ SrvRecordResponseArgs{...} }
type SrvRecordResponseArrayInput interface {
	pulumi.Input

	ToSrvRecordResponseArrayOutput() SrvRecordResponseArrayOutput
	ToSrvRecordResponseArrayOutputWithContext(context.Context) SrvRecordResponseArrayOutput
}

type SrvRecordResponseArray []SrvRecordResponseInput

func (SrvRecordResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SrvRecordResponse)(nil)).Elem()
}

func (i SrvRecordResponseArray) ToSrvRecordResponseArrayOutput() SrvRecordResponseArrayOutput {
	return i.ToSrvRecordResponseArrayOutputWithContext(context.Background())
}

func (i SrvRecordResponseArray) ToSrvRecordResponseArrayOutputWithContext(ctx context.Context) SrvRecordResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SrvRecordResponseArrayOutput)
}

// An SRV record.
type SrvRecordResponseOutput struct{ *pulumi.OutputState }

func (SrvRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SrvRecordResponse)(nil)).Elem()
}

func (o SrvRecordResponseOutput) ToSrvRecordResponseOutput() SrvRecordResponseOutput {
	return o
}

func (o SrvRecordResponseOutput) ToSrvRecordResponseOutputWithContext(ctx context.Context) SrvRecordResponseOutput {
	return o
}

// Gets or sets the port of the service for this record.
func (o SrvRecordResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecordResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Gets or sets the priority metric for this record.
func (o SrvRecordResponseOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecordResponse) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Gets or sets the domain name of the target for this record, without a terminating dot.
func (o SrvRecordResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SrvRecordResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Gets or sets the weight metric for this record.
func (o SrvRecordResponseOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecordResponse) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type SrvRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (SrvRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SrvRecordResponse)(nil)).Elem()
}

func (o SrvRecordResponseArrayOutput) ToSrvRecordResponseArrayOutput() SrvRecordResponseArrayOutput {
	return o
}

func (o SrvRecordResponseArrayOutput) ToSrvRecordResponseArrayOutputWithContext(ctx context.Context) SrvRecordResponseArrayOutput {
	return o
}

func (o SrvRecordResponseArrayOutput) Index(i pulumi.IntInput) SrvRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SrvRecordResponse {
		return vs[0].([]SrvRecordResponse)[vs[1].(int)]
	}).(SrvRecordResponseOutput)
}

// A TXT record.
type TxtRecord struct {
	// Gets or sets the text value of this record.
	Value []string `pulumi:"value"`
}

// TxtRecordInput is an input type that accepts TxtRecordArgs and TxtRecordOutput values.
// You can construct a concrete instance of `TxtRecordInput` via:
//
//          TxtRecordArgs{...}
type TxtRecordInput interface {
	pulumi.Input

	ToTxtRecordOutput() TxtRecordOutput
	ToTxtRecordOutputWithContext(context.Context) TxtRecordOutput
}

// A TXT record.
type TxtRecordArgs struct {
	// Gets or sets the text value of this record.
	Value pulumi.StringArrayInput `pulumi:"value"`
}

func (TxtRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TxtRecord)(nil)).Elem()
}

func (i TxtRecordArgs) ToTxtRecordOutput() TxtRecordOutput {
	return i.ToTxtRecordOutputWithContext(context.Background())
}

func (i TxtRecordArgs) ToTxtRecordOutputWithContext(ctx context.Context) TxtRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TxtRecordOutput)
}

// TxtRecordArrayInput is an input type that accepts TxtRecordArray and TxtRecordArrayOutput values.
// You can construct a concrete instance of `TxtRecordArrayInput` via:
//
//          TxtRecordArray{ TxtRecordArgs{...} }
type TxtRecordArrayInput interface {
	pulumi.Input

	ToTxtRecordArrayOutput() TxtRecordArrayOutput
	ToTxtRecordArrayOutputWithContext(context.Context) TxtRecordArrayOutput
}

type TxtRecordArray []TxtRecordInput

func (TxtRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TxtRecord)(nil)).Elem()
}

func (i TxtRecordArray) ToTxtRecordArrayOutput() TxtRecordArrayOutput {
	return i.ToTxtRecordArrayOutputWithContext(context.Background())
}

func (i TxtRecordArray) ToTxtRecordArrayOutputWithContext(ctx context.Context) TxtRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TxtRecordArrayOutput)
}

// A TXT record.
type TxtRecordOutput struct{ *pulumi.OutputState }

func (TxtRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TxtRecord)(nil)).Elem()
}

func (o TxtRecordOutput) ToTxtRecordOutput() TxtRecordOutput {
	return o
}

func (o TxtRecordOutput) ToTxtRecordOutputWithContext(ctx context.Context) TxtRecordOutput {
	return o
}

// Gets or sets the text value of this record.
func (o TxtRecordOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TxtRecord) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type TxtRecordArrayOutput struct{ *pulumi.OutputState }

func (TxtRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TxtRecord)(nil)).Elem()
}

func (o TxtRecordArrayOutput) ToTxtRecordArrayOutput() TxtRecordArrayOutput {
	return o
}

func (o TxtRecordArrayOutput) ToTxtRecordArrayOutputWithContext(ctx context.Context) TxtRecordArrayOutput {
	return o
}

func (o TxtRecordArrayOutput) Index(i pulumi.IntInput) TxtRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TxtRecord {
		return vs[0].([]TxtRecord)[vs[1].(int)]
	}).(TxtRecordOutput)
}

// A TXT record.
type TxtRecordInvokeResponse struct {
	// Gets or sets the text value of this record.
	Value []string `pulumi:"value"`
}

// TxtRecordInvokeResponseInput is an input type that accepts TxtRecordInvokeResponseArgs and TxtRecordInvokeResponseOutput values.
// You can construct a concrete instance of `TxtRecordInvokeResponseInput` via:
//
//          TxtRecordInvokeResponseArgs{...}
type TxtRecordInvokeResponseInput interface {
	pulumi.Input

	ToTxtRecordInvokeResponseOutput() TxtRecordInvokeResponseOutput
	ToTxtRecordInvokeResponseOutputWithContext(context.Context) TxtRecordInvokeResponseOutput
}

// A TXT record.
type TxtRecordInvokeResponseArgs struct {
	// Gets or sets the text value of this record.
	Value pulumi.StringArrayInput `pulumi:"value"`
}

func (TxtRecordInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TxtRecordInvokeResponse)(nil)).Elem()
}

func (i TxtRecordInvokeResponseArgs) ToTxtRecordInvokeResponseOutput() TxtRecordInvokeResponseOutput {
	return i.ToTxtRecordInvokeResponseOutputWithContext(context.Background())
}

func (i TxtRecordInvokeResponseArgs) ToTxtRecordInvokeResponseOutputWithContext(ctx context.Context) TxtRecordInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TxtRecordInvokeResponseOutput)
}

// TxtRecordInvokeResponseArrayInput is an input type that accepts TxtRecordInvokeResponseArray and TxtRecordInvokeResponseArrayOutput values.
// You can construct a concrete instance of `TxtRecordInvokeResponseArrayInput` via:
//
//          TxtRecordInvokeResponseArray{ TxtRecordInvokeResponseArgs{...} }
type TxtRecordInvokeResponseArrayInput interface {
	pulumi.Input

	ToTxtRecordInvokeResponseArrayOutput() TxtRecordInvokeResponseArrayOutput
	ToTxtRecordInvokeResponseArrayOutputWithContext(context.Context) TxtRecordInvokeResponseArrayOutput
}

type TxtRecordInvokeResponseArray []TxtRecordInvokeResponseInput

func (TxtRecordInvokeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TxtRecordInvokeResponse)(nil)).Elem()
}

func (i TxtRecordInvokeResponseArray) ToTxtRecordInvokeResponseArrayOutput() TxtRecordInvokeResponseArrayOutput {
	return i.ToTxtRecordInvokeResponseArrayOutputWithContext(context.Background())
}

func (i TxtRecordInvokeResponseArray) ToTxtRecordInvokeResponseArrayOutputWithContext(ctx context.Context) TxtRecordInvokeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TxtRecordInvokeResponseArrayOutput)
}

// A TXT record.
type TxtRecordInvokeResponseOutput struct{ *pulumi.OutputState }

func (TxtRecordInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TxtRecordInvokeResponse)(nil)).Elem()
}

func (o TxtRecordInvokeResponseOutput) ToTxtRecordInvokeResponseOutput() TxtRecordInvokeResponseOutput {
	return o
}

func (o TxtRecordInvokeResponseOutput) ToTxtRecordInvokeResponseOutputWithContext(ctx context.Context) TxtRecordInvokeResponseOutput {
	return o
}

// Gets or sets the text value of this record.
func (o TxtRecordInvokeResponseOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TxtRecordInvokeResponse) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type TxtRecordInvokeResponseArrayOutput struct{ *pulumi.OutputState }

func (TxtRecordInvokeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TxtRecordInvokeResponse)(nil)).Elem()
}

func (o TxtRecordInvokeResponseArrayOutput) ToTxtRecordInvokeResponseArrayOutput() TxtRecordInvokeResponseArrayOutput {
	return o
}

func (o TxtRecordInvokeResponseArrayOutput) ToTxtRecordInvokeResponseArrayOutputWithContext(ctx context.Context) TxtRecordInvokeResponseArrayOutput {
	return o
}

func (o TxtRecordInvokeResponseArrayOutput) Index(i pulumi.IntInput) TxtRecordInvokeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TxtRecordInvokeResponse {
		return vs[0].([]TxtRecordInvokeResponse)[vs[1].(int)]
	}).(TxtRecordInvokeResponseOutput)
}

// A TXT record.
type TxtRecordResponse struct {
	// Gets or sets the text value of this record.
	Value []string `pulumi:"value"`
}

// TxtRecordResponseInput is an input type that accepts TxtRecordResponseArgs and TxtRecordResponseOutput values.
// You can construct a concrete instance of `TxtRecordResponseInput` via:
//
//          TxtRecordResponseArgs{...}
type TxtRecordResponseInput interface {
	pulumi.Input

	ToTxtRecordResponseOutput() TxtRecordResponseOutput
	ToTxtRecordResponseOutputWithContext(context.Context) TxtRecordResponseOutput
}

// A TXT record.
type TxtRecordResponseArgs struct {
	// Gets or sets the text value of this record.
	Value pulumi.StringArrayInput `pulumi:"value"`
}

func (TxtRecordResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TxtRecordResponse)(nil)).Elem()
}

func (i TxtRecordResponseArgs) ToTxtRecordResponseOutput() TxtRecordResponseOutput {
	return i.ToTxtRecordResponseOutputWithContext(context.Background())
}

func (i TxtRecordResponseArgs) ToTxtRecordResponseOutputWithContext(ctx context.Context) TxtRecordResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TxtRecordResponseOutput)
}

// TxtRecordResponseArrayInput is an input type that accepts TxtRecordResponseArray and TxtRecordResponseArrayOutput values.
// You can construct a concrete instance of `TxtRecordResponseArrayInput` via:
//
//          TxtRecordResponseArray{ TxtRecordResponseArgs{...} }
type TxtRecordResponseArrayInput interface {
	pulumi.Input

	ToTxtRecordResponseArrayOutput() TxtRecordResponseArrayOutput
	ToTxtRecordResponseArrayOutputWithContext(context.Context) TxtRecordResponseArrayOutput
}

type TxtRecordResponseArray []TxtRecordResponseInput

func (TxtRecordResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TxtRecordResponse)(nil)).Elem()
}

func (i TxtRecordResponseArray) ToTxtRecordResponseArrayOutput() TxtRecordResponseArrayOutput {
	return i.ToTxtRecordResponseArrayOutputWithContext(context.Background())
}

func (i TxtRecordResponseArray) ToTxtRecordResponseArrayOutputWithContext(ctx context.Context) TxtRecordResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TxtRecordResponseArrayOutput)
}

// A TXT record.
type TxtRecordResponseOutput struct{ *pulumi.OutputState }

func (TxtRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TxtRecordResponse)(nil)).Elem()
}

func (o TxtRecordResponseOutput) ToTxtRecordResponseOutput() TxtRecordResponseOutput {
	return o
}

func (o TxtRecordResponseOutput) ToTxtRecordResponseOutputWithContext(ctx context.Context) TxtRecordResponseOutput {
	return o
}

// Gets or sets the text value of this record.
func (o TxtRecordResponseOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TxtRecordResponse) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type TxtRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (TxtRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TxtRecordResponse)(nil)).Elem()
}

func (o TxtRecordResponseArrayOutput) ToTxtRecordResponseArrayOutput() TxtRecordResponseArrayOutput {
	return o
}

func (o TxtRecordResponseArrayOutput) ToTxtRecordResponseArrayOutputWithContext(ctx context.Context) TxtRecordResponseArrayOutput {
	return o
}

func (o TxtRecordResponseArrayOutput) Index(i pulumi.IntInput) TxtRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TxtRecordResponse {
		return vs[0].([]TxtRecordResponse)[vs[1].(int)]
	}).(TxtRecordResponseOutput)
}

// Represents the properties of the zone.
type ZoneProperties struct {
	// Gets or sets the maximum number of record sets that can be created in this zone.
	MaxNumberOfRecordSets *float64 `pulumi:"maxNumberOfRecordSets"`
	// Gets or sets the current number of record sets in this zone.
	NumberOfRecordSets *float64 `pulumi:"numberOfRecordSets"`
}

// ZonePropertiesInput is an input type that accepts ZonePropertiesArgs and ZonePropertiesOutput values.
// You can construct a concrete instance of `ZonePropertiesInput` via:
//
//          ZonePropertiesArgs{...}
type ZonePropertiesInput interface {
	pulumi.Input

	ToZonePropertiesOutput() ZonePropertiesOutput
	ToZonePropertiesOutputWithContext(context.Context) ZonePropertiesOutput
}

// Represents the properties of the zone.
type ZonePropertiesArgs struct {
	// Gets or sets the maximum number of record sets that can be created in this zone.
	MaxNumberOfRecordSets pulumi.Float64PtrInput `pulumi:"maxNumberOfRecordSets"`
	// Gets or sets the current number of record sets in this zone.
	NumberOfRecordSets pulumi.Float64PtrInput `pulumi:"numberOfRecordSets"`
}

func (ZonePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneProperties)(nil)).Elem()
}

func (i ZonePropertiesArgs) ToZonePropertiesOutput() ZonePropertiesOutput {
	return i.ToZonePropertiesOutputWithContext(context.Background())
}

func (i ZonePropertiesArgs) ToZonePropertiesOutputWithContext(ctx context.Context) ZonePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonePropertiesOutput)
}

func (i ZonePropertiesArgs) ToZonePropertiesPtrOutput() ZonePropertiesPtrOutput {
	return i.ToZonePropertiesPtrOutputWithContext(context.Background())
}

func (i ZonePropertiesArgs) ToZonePropertiesPtrOutputWithContext(ctx context.Context) ZonePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonePropertiesOutput).ToZonePropertiesPtrOutputWithContext(ctx)
}

// ZonePropertiesPtrInput is an input type that accepts ZonePropertiesArgs, ZonePropertiesPtr and ZonePropertiesPtrOutput values.
// You can construct a concrete instance of `ZonePropertiesPtrInput` via:
//
//          ZonePropertiesArgs{...}
//
//  or:
//
//          nil
type ZonePropertiesPtrInput interface {
	pulumi.Input

	ToZonePropertiesPtrOutput() ZonePropertiesPtrOutput
	ToZonePropertiesPtrOutputWithContext(context.Context) ZonePropertiesPtrOutput
}

type zonePropertiesPtrType ZonePropertiesArgs

func ZonePropertiesPtr(v *ZonePropertiesArgs) ZonePropertiesPtrInput {
	return (*zonePropertiesPtrType)(v)
}

func (*zonePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneProperties)(nil)).Elem()
}

func (i *zonePropertiesPtrType) ToZonePropertiesPtrOutput() ZonePropertiesPtrOutput {
	return i.ToZonePropertiesPtrOutputWithContext(context.Background())
}

func (i *zonePropertiesPtrType) ToZonePropertiesPtrOutputWithContext(ctx context.Context) ZonePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonePropertiesPtrOutput)
}

// Represents the properties of the zone.
type ZonePropertiesOutput struct{ *pulumi.OutputState }

func (ZonePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneProperties)(nil)).Elem()
}

func (o ZonePropertiesOutput) ToZonePropertiesOutput() ZonePropertiesOutput {
	return o
}

func (o ZonePropertiesOutput) ToZonePropertiesOutputWithContext(ctx context.Context) ZonePropertiesOutput {
	return o
}

func (o ZonePropertiesOutput) ToZonePropertiesPtrOutput() ZonePropertiesPtrOutput {
	return o.ToZonePropertiesPtrOutputWithContext(context.Background())
}

func (o ZonePropertiesOutput) ToZonePropertiesPtrOutputWithContext(ctx context.Context) ZonePropertiesPtrOutput {
	return o.ApplyT(func(v ZoneProperties) *ZoneProperties {
		return &v
	}).(ZonePropertiesPtrOutput)
}

// Gets or sets the maximum number of record sets that can be created in this zone.
func (o ZonePropertiesOutput) MaxNumberOfRecordSets() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ZoneProperties) *float64 { return v.MaxNumberOfRecordSets }).(pulumi.Float64PtrOutput)
}

// Gets or sets the current number of record sets in this zone.
func (o ZonePropertiesOutput) NumberOfRecordSets() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ZoneProperties) *float64 { return v.NumberOfRecordSets }).(pulumi.Float64PtrOutput)
}

type ZonePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ZonePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneProperties)(nil)).Elem()
}

func (o ZonePropertiesPtrOutput) ToZonePropertiesPtrOutput() ZonePropertiesPtrOutput {
	return o
}

func (o ZonePropertiesPtrOutput) ToZonePropertiesPtrOutputWithContext(ctx context.Context) ZonePropertiesPtrOutput {
	return o
}

func (o ZonePropertiesPtrOutput) Elem() ZonePropertiesOutput {
	return o.ApplyT(func(v *ZoneProperties) ZoneProperties { return *v }).(ZonePropertiesOutput)
}

// Gets or sets the maximum number of record sets that can be created in this zone.
func (o ZonePropertiesPtrOutput) MaxNumberOfRecordSets() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ZoneProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxNumberOfRecordSets
	}).(pulumi.Float64PtrOutput)
}

// Gets or sets the current number of record sets in this zone.
func (o ZonePropertiesPtrOutput) NumberOfRecordSets() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ZoneProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.NumberOfRecordSets
	}).(pulumi.Float64PtrOutput)
}

// Represents the properties of the zone.
type ZonePropertiesInvokeResponse struct {
	// Gets or sets the maximum number of record sets that can be created in this zone.
	MaxNumberOfRecordSets *float64 `pulumi:"maxNumberOfRecordSets"`
	// The maximum number of records per record set that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
	MaxNumberOfRecordsPerRecordSet float64 `pulumi:"maxNumberOfRecordsPerRecordSet"`
	// Gets or sets the current number of record sets in this zone.
	NumberOfRecordSets *float64 `pulumi:"numberOfRecordSets"`
}

// ZonePropertiesInvokeResponseInput is an input type that accepts ZonePropertiesInvokeResponseArgs and ZonePropertiesInvokeResponseOutput values.
// You can construct a concrete instance of `ZonePropertiesInvokeResponseInput` via:
//
//          ZonePropertiesInvokeResponseArgs{...}
type ZonePropertiesInvokeResponseInput interface {
	pulumi.Input

	ToZonePropertiesInvokeResponseOutput() ZonePropertiesInvokeResponseOutput
	ToZonePropertiesInvokeResponseOutputWithContext(context.Context) ZonePropertiesInvokeResponseOutput
}

// Represents the properties of the zone.
type ZonePropertiesInvokeResponseArgs struct {
	// Gets or sets the maximum number of record sets that can be created in this zone.
	MaxNumberOfRecordSets pulumi.Float64PtrInput `pulumi:"maxNumberOfRecordSets"`
	// The maximum number of records per record set that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
	MaxNumberOfRecordsPerRecordSet pulumi.Float64Input `pulumi:"maxNumberOfRecordsPerRecordSet"`
	// Gets or sets the current number of record sets in this zone.
	NumberOfRecordSets pulumi.Float64PtrInput `pulumi:"numberOfRecordSets"`
}

func (ZonePropertiesInvokeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonePropertiesInvokeResponse)(nil)).Elem()
}

func (i ZonePropertiesInvokeResponseArgs) ToZonePropertiesInvokeResponseOutput() ZonePropertiesInvokeResponseOutput {
	return i.ToZonePropertiesInvokeResponseOutputWithContext(context.Background())
}

func (i ZonePropertiesInvokeResponseArgs) ToZonePropertiesInvokeResponseOutputWithContext(ctx context.Context) ZonePropertiesInvokeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonePropertiesInvokeResponseOutput)
}

// Represents the properties of the zone.
type ZonePropertiesInvokeResponseOutput struct{ *pulumi.OutputState }

func (ZonePropertiesInvokeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonePropertiesInvokeResponse)(nil)).Elem()
}

func (o ZonePropertiesInvokeResponseOutput) ToZonePropertiesInvokeResponseOutput() ZonePropertiesInvokeResponseOutput {
	return o
}

func (o ZonePropertiesInvokeResponseOutput) ToZonePropertiesInvokeResponseOutputWithContext(ctx context.Context) ZonePropertiesInvokeResponseOutput {
	return o
}

// Gets or sets the maximum number of record sets that can be created in this zone.
func (o ZonePropertiesInvokeResponseOutput) MaxNumberOfRecordSets() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ZonePropertiesInvokeResponse) *float64 { return v.MaxNumberOfRecordSets }).(pulumi.Float64PtrOutput)
}

// The maximum number of records per record set that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
func (o ZonePropertiesInvokeResponseOutput) MaxNumberOfRecordsPerRecordSet() pulumi.Float64Output {
	return o.ApplyT(func(v ZonePropertiesInvokeResponse) float64 { return v.MaxNumberOfRecordsPerRecordSet }).(pulumi.Float64Output)
}

// Gets or sets the current number of record sets in this zone.
func (o ZonePropertiesInvokeResponseOutput) NumberOfRecordSets() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ZonePropertiesInvokeResponse) *float64 { return v.NumberOfRecordSets }).(pulumi.Float64PtrOutput)
}

// Represents the properties of the zone.
type ZonePropertiesResponse struct {
	// Gets or sets the maximum number of record sets that can be created in this zone.
	MaxNumberOfRecordSets *float64 `pulumi:"maxNumberOfRecordSets"`
	// The maximum number of records per record set that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
	MaxNumberOfRecordsPerRecordSet float64 `pulumi:"maxNumberOfRecordsPerRecordSet"`
	// Gets or sets the current number of record sets in this zone.
	NumberOfRecordSets *float64 `pulumi:"numberOfRecordSets"`
}

// ZonePropertiesResponseInput is an input type that accepts ZonePropertiesResponseArgs and ZonePropertiesResponseOutput values.
// You can construct a concrete instance of `ZonePropertiesResponseInput` via:
//
//          ZonePropertiesResponseArgs{...}
type ZonePropertiesResponseInput interface {
	pulumi.Input

	ToZonePropertiesResponseOutput() ZonePropertiesResponseOutput
	ToZonePropertiesResponseOutputWithContext(context.Context) ZonePropertiesResponseOutput
}

// Represents the properties of the zone.
type ZonePropertiesResponseArgs struct {
	// Gets or sets the maximum number of record sets that can be created in this zone.
	MaxNumberOfRecordSets pulumi.Float64PtrInput `pulumi:"maxNumberOfRecordSets"`
	// The maximum number of records per record set that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
	MaxNumberOfRecordsPerRecordSet pulumi.Float64Input `pulumi:"maxNumberOfRecordsPerRecordSet"`
	// Gets or sets the current number of record sets in this zone.
	NumberOfRecordSets pulumi.Float64PtrInput `pulumi:"numberOfRecordSets"`
}

func (ZonePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonePropertiesResponse)(nil)).Elem()
}

func (i ZonePropertiesResponseArgs) ToZonePropertiesResponseOutput() ZonePropertiesResponseOutput {
	return i.ToZonePropertiesResponseOutputWithContext(context.Background())
}

func (i ZonePropertiesResponseArgs) ToZonePropertiesResponseOutputWithContext(ctx context.Context) ZonePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonePropertiesResponseOutput)
}

func (i ZonePropertiesResponseArgs) ToZonePropertiesResponsePtrOutput() ZonePropertiesResponsePtrOutput {
	return i.ToZonePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ZonePropertiesResponseArgs) ToZonePropertiesResponsePtrOutputWithContext(ctx context.Context) ZonePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonePropertiesResponseOutput).ToZonePropertiesResponsePtrOutputWithContext(ctx)
}

// ZonePropertiesResponsePtrInput is an input type that accepts ZonePropertiesResponseArgs, ZonePropertiesResponsePtr and ZonePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ZonePropertiesResponsePtrInput` via:
//
//          ZonePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ZonePropertiesResponsePtrInput interface {
	pulumi.Input

	ToZonePropertiesResponsePtrOutput() ZonePropertiesResponsePtrOutput
	ToZonePropertiesResponsePtrOutputWithContext(context.Context) ZonePropertiesResponsePtrOutput
}

type zonePropertiesResponsePtrType ZonePropertiesResponseArgs

func ZonePropertiesResponsePtr(v *ZonePropertiesResponseArgs) ZonePropertiesResponsePtrInput {
	return (*zonePropertiesResponsePtrType)(v)
}

func (*zonePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ZonePropertiesResponse)(nil)).Elem()
}

func (i *zonePropertiesResponsePtrType) ToZonePropertiesResponsePtrOutput() ZonePropertiesResponsePtrOutput {
	return i.ToZonePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *zonePropertiesResponsePtrType) ToZonePropertiesResponsePtrOutputWithContext(ctx context.Context) ZonePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonePropertiesResponsePtrOutput)
}

// Represents the properties of the zone.
type ZonePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ZonePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonePropertiesResponse)(nil)).Elem()
}

func (o ZonePropertiesResponseOutput) ToZonePropertiesResponseOutput() ZonePropertiesResponseOutput {
	return o
}

func (o ZonePropertiesResponseOutput) ToZonePropertiesResponseOutputWithContext(ctx context.Context) ZonePropertiesResponseOutput {
	return o
}

func (o ZonePropertiesResponseOutput) ToZonePropertiesResponsePtrOutput() ZonePropertiesResponsePtrOutput {
	return o.ToZonePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ZonePropertiesResponseOutput) ToZonePropertiesResponsePtrOutputWithContext(ctx context.Context) ZonePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ZonePropertiesResponse) *ZonePropertiesResponse {
		return &v
	}).(ZonePropertiesResponsePtrOutput)
}

// Gets or sets the maximum number of record sets that can be created in this zone.
func (o ZonePropertiesResponseOutput) MaxNumberOfRecordSets() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ZonePropertiesResponse) *float64 { return v.MaxNumberOfRecordSets }).(pulumi.Float64PtrOutput)
}

// The maximum number of records per record set that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
func (o ZonePropertiesResponseOutput) MaxNumberOfRecordsPerRecordSet() pulumi.Float64Output {
	return o.ApplyT(func(v ZonePropertiesResponse) float64 { return v.MaxNumberOfRecordsPerRecordSet }).(pulumi.Float64Output)
}

// Gets or sets the current number of record sets in this zone.
func (o ZonePropertiesResponseOutput) NumberOfRecordSets() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ZonePropertiesResponse) *float64 { return v.NumberOfRecordSets }).(pulumi.Float64PtrOutput)
}

type ZonePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ZonePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZonePropertiesResponse)(nil)).Elem()
}

func (o ZonePropertiesResponsePtrOutput) ToZonePropertiesResponsePtrOutput() ZonePropertiesResponsePtrOutput {
	return o
}

func (o ZonePropertiesResponsePtrOutput) ToZonePropertiesResponsePtrOutputWithContext(ctx context.Context) ZonePropertiesResponsePtrOutput {
	return o
}

func (o ZonePropertiesResponsePtrOutput) Elem() ZonePropertiesResponseOutput {
	return o.ApplyT(func(v *ZonePropertiesResponse) ZonePropertiesResponse { return *v }).(ZonePropertiesResponseOutput)
}

// Gets or sets the maximum number of record sets that can be created in this zone.
func (o ZonePropertiesResponsePtrOutput) MaxNumberOfRecordSets() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ZonePropertiesResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxNumberOfRecordSets
	}).(pulumi.Float64PtrOutput)
}

// The maximum number of records per record set that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
func (o ZonePropertiesResponsePtrOutput) MaxNumberOfRecordsPerRecordSet() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ZonePropertiesResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.MaxNumberOfRecordsPerRecordSet
	}).(pulumi.Float64PtrOutput)
}

// Gets or sets the current number of record sets in this zone.
func (o ZonePropertiesResponsePtrOutput) NumberOfRecordSets() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ZonePropertiesResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.NumberOfRecordSets
	}).(pulumi.Float64PtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ARecordOutput{})
	pulumi.RegisterOutputType(ARecordArrayOutput{})
	pulumi.RegisterOutputType(ARecordInvokeResponseOutput{})
	pulumi.RegisterOutputType(ARecordInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(ARecordResponseOutput{})
	pulumi.RegisterOutputType(ARecordResponseArrayOutput{})
	pulumi.RegisterOutputType(AaaaRecordOutput{})
	pulumi.RegisterOutputType(AaaaRecordArrayOutput{})
	pulumi.RegisterOutputType(AaaaRecordInvokeResponseOutput{})
	pulumi.RegisterOutputType(AaaaRecordInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(AaaaRecordResponseOutput{})
	pulumi.RegisterOutputType(AaaaRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(CnameRecordOutput{})
	pulumi.RegisterOutputType(CnameRecordPtrOutput{})
	pulumi.RegisterOutputType(CnameRecordInvokeResponseOutput{})
	pulumi.RegisterOutputType(CnameRecordResponseOutput{})
	pulumi.RegisterOutputType(CnameRecordResponsePtrOutput{})
	pulumi.RegisterOutputType(MxRecordOutput{})
	pulumi.RegisterOutputType(MxRecordArrayOutput{})
	pulumi.RegisterOutputType(MxRecordInvokeResponseOutput{})
	pulumi.RegisterOutputType(MxRecordInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(MxRecordResponseOutput{})
	pulumi.RegisterOutputType(MxRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(NsRecordOutput{})
	pulumi.RegisterOutputType(NsRecordArrayOutput{})
	pulumi.RegisterOutputType(NsRecordInvokeResponseOutput{})
	pulumi.RegisterOutputType(NsRecordInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(NsRecordResponseOutput{})
	pulumi.RegisterOutputType(NsRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(PtrRecordOutput{})
	pulumi.RegisterOutputType(PtrRecordArrayOutput{})
	pulumi.RegisterOutputType(PtrRecordInvokeResponseOutput{})
	pulumi.RegisterOutputType(PtrRecordInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(PtrRecordResponseOutput{})
	pulumi.RegisterOutputType(PtrRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(SoaRecordOutput{})
	pulumi.RegisterOutputType(SoaRecordPtrOutput{})
	pulumi.RegisterOutputType(SoaRecordInvokeResponseOutput{})
	pulumi.RegisterOutputType(SoaRecordResponseOutput{})
	pulumi.RegisterOutputType(SoaRecordResponsePtrOutput{})
	pulumi.RegisterOutputType(SrvRecordOutput{})
	pulumi.RegisterOutputType(SrvRecordArrayOutput{})
	pulumi.RegisterOutputType(SrvRecordInvokeResponseOutput{})
	pulumi.RegisterOutputType(SrvRecordInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(SrvRecordResponseOutput{})
	pulumi.RegisterOutputType(SrvRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(TxtRecordOutput{})
	pulumi.RegisterOutputType(TxtRecordArrayOutput{})
	pulumi.RegisterOutputType(TxtRecordInvokeResponseOutput{})
	pulumi.RegisterOutputType(TxtRecordInvokeResponseArrayOutput{})
	pulumi.RegisterOutputType(TxtRecordResponseOutput{})
	pulumi.RegisterOutputType(TxtRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(ZonePropertiesOutput{})
	pulumi.RegisterOutputType(ZonePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ZonePropertiesInvokeResponseOutput{})
	pulumi.RegisterOutputType(ZonePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ZonePropertiesResponsePtrOutput{})
}
