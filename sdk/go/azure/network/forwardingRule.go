// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes a forwarding rule within a DNS forwarding ruleset.
// API Version: 2020-04-01-preview.
type ForwardingRule struct {
	pulumi.CustomResourceState

	// The domain name for the forwarding rule.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// ETag of the forwarding rule.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The state of forwarding rule.
	ForwardingRuleState pulumi.StringPtrOutput `pulumi:"forwardingRuleState"`
	// Metadata attached to the forwarding rule.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The current provisioning state of the forwarding rule. This is a read-only property and any attempt to set this value will be ignored.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// DNS servers to forward the DNS query to.
	TargetDnsServers TargetDnsServerResponseArrayOutput `pulumi:"targetDnsServers"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewForwardingRule registers a new resource with the given unique name, arguments, and options.
func NewForwardingRule(ctx *pulumi.Context,
	name string, args *ForwardingRuleArgs, opts ...pulumi.ResourceOption) (*ForwardingRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DnsForwardingRulesetName == nil {
		return nil, errors.New("invalid value for required argument 'DnsForwardingRulesetName'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.TargetDnsServers == nil {
		return nil, errors.New("invalid value for required argument 'TargetDnsServers'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:network/v20200401preview:ForwardingRule"),
		},
		{
			Type: pulumi.String("azure-native:network/v20220701:ForwardingRule"),
		},
	})
	opts = append(opts, aliases)
	var resource ForwardingRule
	err := ctx.RegisterResource("azure-native:network:ForwardingRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetForwardingRule gets an existing ForwardingRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetForwardingRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ForwardingRuleState, opts ...pulumi.ResourceOption) (*ForwardingRule, error) {
	var resource ForwardingRule
	err := ctx.ReadResource("azure-native:network:ForwardingRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ForwardingRule resources.
type forwardingRuleState struct {
}

type ForwardingRuleState struct {
}

func (ForwardingRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*forwardingRuleState)(nil)).Elem()
}

type forwardingRuleArgs struct {
	// The name of the DNS forwarding ruleset.
	DnsForwardingRulesetName string `pulumi:"dnsForwardingRulesetName"`
	// The domain name for the forwarding rule.
	DomainName string `pulumi:"domainName"`
	// The name of the forwarding rule.
	ForwardingRuleName *string `pulumi:"forwardingRuleName"`
	// The state of forwarding rule.
	ForwardingRuleState *string `pulumi:"forwardingRuleState"`
	// Metadata attached to the forwarding rule.
	Metadata map[string]string `pulumi:"metadata"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// DNS servers to forward the DNS query to.
	TargetDnsServers []TargetDnsServer `pulumi:"targetDnsServers"`
}

// The set of arguments for constructing a ForwardingRule resource.
type ForwardingRuleArgs struct {
	// The name of the DNS forwarding ruleset.
	DnsForwardingRulesetName pulumi.StringInput
	// The domain name for the forwarding rule.
	DomainName pulumi.StringInput
	// The name of the forwarding rule.
	ForwardingRuleName pulumi.StringPtrInput
	// The state of forwarding rule.
	ForwardingRuleState pulumi.StringPtrInput
	// Metadata attached to the forwarding rule.
	Metadata pulumi.StringMapInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// DNS servers to forward the DNS query to.
	TargetDnsServers TargetDnsServerArrayInput
}

func (ForwardingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*forwardingRuleArgs)(nil)).Elem()
}

type ForwardingRuleInput interface {
	pulumi.Input

	ToForwardingRuleOutput() ForwardingRuleOutput
	ToForwardingRuleOutputWithContext(ctx context.Context) ForwardingRuleOutput
}

func (*ForwardingRule) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardingRule)(nil)).Elem()
}

func (i *ForwardingRule) ToForwardingRuleOutput() ForwardingRuleOutput {
	return i.ToForwardingRuleOutputWithContext(context.Background())
}

func (i *ForwardingRule) ToForwardingRuleOutputWithContext(ctx context.Context) ForwardingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingRuleOutput)
}

type ForwardingRuleOutput struct{ *pulumi.OutputState }

func (ForwardingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardingRule)(nil)).Elem()
}

func (o ForwardingRuleOutput) ToForwardingRuleOutput() ForwardingRuleOutput {
	return o
}

func (o ForwardingRuleOutput) ToForwardingRuleOutputWithContext(ctx context.Context) ForwardingRuleOutput {
	return o
}

// The domain name for the forwarding rule.
func (o ForwardingRuleOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *ForwardingRule) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// ETag of the forwarding rule.
func (o ForwardingRuleOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ForwardingRule) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The state of forwarding rule.
func (o ForwardingRuleOutput) ForwardingRuleState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardingRule) pulumi.StringPtrOutput { return v.ForwardingRuleState }).(pulumi.StringPtrOutput)
}

// Metadata attached to the forwarding rule.
func (o ForwardingRuleOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ForwardingRule) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// The name of the resource
func (o ForwardingRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ForwardingRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The current provisioning state of the forwarding rule. This is a read-only property and any attempt to set this value will be ignored.
func (o ForwardingRuleOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *ForwardingRule) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o ForwardingRuleOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *ForwardingRule) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// DNS servers to forward the DNS query to.
func (o ForwardingRuleOutput) TargetDnsServers() TargetDnsServerResponseArrayOutput {
	return o.ApplyT(func(v *ForwardingRule) TargetDnsServerResponseArrayOutput { return v.TargetDnsServers }).(TargetDnsServerResponseArrayOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o ForwardingRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ForwardingRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ForwardingRuleOutput{})
}
