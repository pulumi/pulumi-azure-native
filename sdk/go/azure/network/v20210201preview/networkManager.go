// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20210201preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Managed Network resource
type NetworkManager struct {
	pulumi.CustomResourceState

	// A description of the network manager.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A friendly name for the network manager.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Resource location.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Scope Access.
	NetworkManagerScopeAccesses pulumi.StringArrayOutput `pulumi:"networkManagerScopeAccesses"`
	// Scope of Network Manager.
	NetworkManagerScopes NetworkManagerPropertiesResponseNetworkManagerScopesPtrOutput `pulumi:"networkManagerScopes"`
	// The provisioning state of the scope assignment resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The system metadata related to this resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNetworkManager registers a new resource with the given unique name, arguments, and options.
func NewNetworkManager(ctx *pulumi.Context,
	name string, args *NetworkManagerArgs, opts ...pulumi.ResourceOption) (*NetworkManager, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:network/v20210201preview:NetworkManager"),
		},
		{
			Type: pulumi.String("azure-native:network:NetworkManager"),
		},
		{
			Type: pulumi.String("azure-nextgen:network:NetworkManager"),
		},
	})
	opts = append(opts, aliases)
	var resource NetworkManager
	err := ctx.RegisterResource("azure-native:network/v20210201preview:NetworkManager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkManager gets an existing NetworkManager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkManager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkManagerState, opts ...pulumi.ResourceOption) (*NetworkManager, error) {
	var resource NetworkManager
	err := ctx.ReadResource("azure-native:network/v20210201preview:NetworkManager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkManager resources.
type networkManagerState struct {
	// A description of the network manager.
	Description *string `pulumi:"description"`
	// A friendly name for the network manager.
	DisplayName *string `pulumi:"displayName"`
	// A unique read-only string that changes whenever the resource is updated.
	Etag *string `pulumi:"etag"`
	// Resource location.
	Location *string `pulumi:"location"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Scope Access.
	NetworkManagerScopeAccesses []string `pulumi:"networkManagerScopeAccesses"`
	// Scope of Network Manager.
	NetworkManagerScopes *NetworkManagerPropertiesResponseNetworkManagerScopes `pulumi:"networkManagerScopes"`
	// The provisioning state of the scope assignment resource.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The system metadata related to this resource.
	SystemData *SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type NetworkManagerState struct {
	// A description of the network manager.
	Description pulumi.StringPtrInput
	// A friendly name for the network manager.
	DisplayName pulumi.StringPtrInput
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringPtrInput
	// Resource location.
	Location pulumi.StringPtrInput
	// Resource name.
	Name pulumi.StringPtrInput
	// Scope Access.
	NetworkManagerScopeAccesses pulumi.StringArrayInput
	// Scope of Network Manager.
	NetworkManagerScopes NetworkManagerPropertiesResponseNetworkManagerScopesPtrInput
	// The provisioning state of the scope assignment resource.
	ProvisioningState pulumi.StringPtrInput
	// The system metadata related to this resource.
	SystemData SystemDataResponsePtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (NetworkManagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkManagerState)(nil)).Elem()
}

type networkManagerArgs struct {
	// A description of the network manager.
	Description *string `pulumi:"description"`
	// A friendly name for the network manager.
	DisplayName *string `pulumi:"displayName"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource location.
	Location *string `pulumi:"location"`
	// The name of the network manager.
	NetworkManagerName *string `pulumi:"networkManagerName"`
	// Scope Access.
	NetworkManagerScopeAccesses []string `pulumi:"networkManagerScopeAccesses"`
	// Scope of Network Manager.
	NetworkManagerScopes *NetworkManagerPropertiesNetworkManagerScopes `pulumi:"networkManagerScopes"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a NetworkManager resource.
type NetworkManagerArgs struct {
	// A description of the network manager.
	Description pulumi.StringPtrInput
	// A friendly name for the network manager.
	DisplayName pulumi.StringPtrInput
	// Resource ID.
	Id pulumi.StringPtrInput
	// Resource location.
	Location pulumi.StringPtrInput
	// The name of the network manager.
	NetworkManagerName pulumi.StringPtrInput
	// Scope Access.
	NetworkManagerScopeAccesses pulumi.StringArrayInput
	// Scope of Network Manager.
	NetworkManagerScopes NetworkManagerPropertiesNetworkManagerScopesPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (NetworkManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkManagerArgs)(nil)).Elem()
}

type NetworkManagerInput interface {
	pulumi.Input

	ToNetworkManagerOutput() NetworkManagerOutput
	ToNetworkManagerOutputWithContext(ctx context.Context) NetworkManagerOutput
}

func (*NetworkManager) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkManager)(nil))
}

func (i *NetworkManager) ToNetworkManagerOutput() NetworkManagerOutput {
	return i.ToNetworkManagerOutputWithContext(context.Background())
}

func (i *NetworkManager) ToNetworkManagerOutputWithContext(ctx context.Context) NetworkManagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkManagerOutput)
}

type NetworkManagerOutput struct {
	*pulumi.OutputState
}

func (NetworkManagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkManager)(nil))
}

func (o NetworkManagerOutput) ToNetworkManagerOutput() NetworkManagerOutput {
	return o
}

func (o NetworkManagerOutput) ToNetworkManagerOutputWithContext(ctx context.Context) NetworkManagerOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(NetworkManagerOutput{})
}
