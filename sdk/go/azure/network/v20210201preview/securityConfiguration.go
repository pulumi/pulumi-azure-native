// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20210201preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Defines the security Configuration
type SecurityConfiguration struct {
	pulumi.CustomResourceState

	// Groups for configuration
	AppliesToGroups NetworkManagerSecurityGroupItemResponseArrayOutput `pulumi:"appliesToGroups"`
	// Flag if need to delete existing network security groups.
	DeleteExistingNSGs pulumi.BoolPtrOutput `pulumi:"deleteExistingNSGs"`
	// A description of the security Configuration.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A display name of the security Configuration.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state of the scope assignment resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Security Type.
	SecurityType pulumi.StringPtrOutput `pulumi:"securityType"`
	// The system metadata related to this resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSecurityConfiguration registers a new resource with the given unique name, arguments, and options.
func NewSecurityConfiguration(ctx *pulumi.Context,
	name string, args *SecurityConfigurationArgs, opts ...pulumi.ResourceOption) (*SecurityConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkManagerName == nil {
		return nil, errors.New("invalid value for required argument 'NetworkManagerName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:network/v20210201preview:SecurityConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network:SecurityConfiguration"),
		},
		{
			Type: pulumi.String("azure-nextgen:network:SecurityConfiguration"),
		},
	})
	opts = append(opts, aliases)
	var resource SecurityConfiguration
	err := ctx.RegisterResource("azure-native:network/v20210201preview:SecurityConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityConfiguration gets an existing SecurityConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityConfigurationState, opts ...pulumi.ResourceOption) (*SecurityConfiguration, error) {
	var resource SecurityConfiguration
	err := ctx.ReadResource("azure-native:network/v20210201preview:SecurityConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityConfiguration resources.
type securityConfigurationState struct {
	// Groups for configuration
	AppliesToGroups []NetworkManagerSecurityGroupItemResponse `pulumi:"appliesToGroups"`
	// Flag if need to delete existing network security groups.
	DeleteExistingNSGs *bool `pulumi:"deleteExistingNSGs"`
	// A description of the security Configuration.
	Description *string `pulumi:"description"`
	// A display name of the security Configuration.
	DisplayName *string `pulumi:"displayName"`
	// A unique read-only string that changes whenever the resource is updated.
	Etag *string `pulumi:"etag"`
	// Resource name.
	Name *string `pulumi:"name"`
	// The provisioning state of the scope assignment resource.
	ProvisioningState *string `pulumi:"provisioningState"`
	// Security Type.
	SecurityType *string `pulumi:"securityType"`
	// The system metadata related to this resource.
	SystemData *SystemDataResponse `pulumi:"systemData"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type SecurityConfigurationState struct {
	// Groups for configuration
	AppliesToGroups NetworkManagerSecurityGroupItemResponseArrayInput
	// Flag if need to delete existing network security groups.
	DeleteExistingNSGs pulumi.BoolPtrInput
	// A description of the security Configuration.
	Description pulumi.StringPtrInput
	// A display name of the security Configuration.
	DisplayName pulumi.StringPtrInput
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringPtrInput
	// Resource name.
	Name pulumi.StringPtrInput
	// The provisioning state of the scope assignment resource.
	ProvisioningState pulumi.StringPtrInput
	// Security Type.
	SecurityType pulumi.StringPtrInput
	// The system metadata related to this resource.
	SystemData SystemDataResponsePtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (SecurityConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityConfigurationState)(nil)).Elem()
}

type securityConfigurationArgs struct {
	// Groups for configuration
	AppliesToGroups []NetworkManagerSecurityGroupItem `pulumi:"appliesToGroups"`
	// The name of the network manager security Configuration.
	ConfigurationName *string `pulumi:"configurationName"`
	// Flag if need to delete existing network security groups.
	DeleteExistingNSGs *bool `pulumi:"deleteExistingNSGs"`
	// A description of the security Configuration.
	Description *string `pulumi:"description"`
	// A display name of the security Configuration.
	DisplayName *string `pulumi:"displayName"`
	// The name of the network manager.
	NetworkManagerName string `pulumi:"networkManagerName"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Security Type.
	SecurityType *string `pulumi:"securityType"`
}

// The set of arguments for constructing a SecurityConfiguration resource.
type SecurityConfigurationArgs struct {
	// Groups for configuration
	AppliesToGroups NetworkManagerSecurityGroupItemArrayInput
	// The name of the network manager security Configuration.
	ConfigurationName pulumi.StringPtrInput
	// Flag if need to delete existing network security groups.
	DeleteExistingNSGs pulumi.BoolPtrInput
	// A description of the security Configuration.
	Description pulumi.StringPtrInput
	// A display name of the security Configuration.
	DisplayName pulumi.StringPtrInput
	// The name of the network manager.
	NetworkManagerName pulumi.StringInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// Security Type.
	SecurityType pulumi.StringPtrInput
}

func (SecurityConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityConfigurationArgs)(nil)).Elem()
}

type SecurityConfigurationInput interface {
	pulumi.Input

	ToSecurityConfigurationOutput() SecurityConfigurationOutput
	ToSecurityConfigurationOutputWithContext(ctx context.Context) SecurityConfigurationOutput
}

func (*SecurityConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfiguration)(nil))
}

func (i *SecurityConfiguration) ToSecurityConfigurationOutput() SecurityConfigurationOutput {
	return i.ToSecurityConfigurationOutputWithContext(context.Background())
}

func (i *SecurityConfiguration) ToSecurityConfigurationOutputWithContext(ctx context.Context) SecurityConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityConfigurationOutput)
}

type SecurityConfigurationOutput struct {
	*pulumi.OutputState
}

func (SecurityConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityConfiguration)(nil))
}

func (o SecurityConfigurationOutput) ToSecurityConfigurationOutput() SecurityConfigurationOutput {
	return o
}

func (o SecurityConfigurationOutput) ToSecurityConfigurationOutputWithContext(ctx context.Context) SecurityConfigurationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SecurityConfigurationOutput{})
}
