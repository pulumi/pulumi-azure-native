// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200901preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Linked service.
type LinkedService struct {
	pulumi.CustomResourceState

	// Identity for the resource.
	Identity IdentityResponsePtrOutput `pulumi:"identity"`
	// location of the linked service.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Friendly name of the linked service.
	Name pulumi.StringOutput `pulumi:"name"`
	// LinkedService specific properties.
	Properties LinkedServicePropsResponseOutput `pulumi:"properties"`
	// Resource type of linked service.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewLinkedService registers a new resource with the given unique name, arguments, and options.
func NewLinkedService(ctx *pulumi.Context,
	name string, args *LinkedServiceArgs, opts ...pulumi.ResourceOption) (*LinkedService, error) {
	if args == nil || args.LinkName == nil {
		return nil, errors.New("missing required argument 'LinkName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.WorkspaceName == nil {
		return nil, errors.New("missing required argument 'WorkspaceName'")
	}
	if args == nil {
		args = &LinkedServiceArgs{}
	}
	var resource LinkedService
	err := ctx.RegisterResource("azure-nextgen:machinelearningservices/v20200901preview:LinkedService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkedService gets an existing LinkedService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkedService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkedServiceState, opts ...pulumi.ResourceOption) (*LinkedService, error) {
	var resource LinkedService
	err := ctx.ReadResource("azure-nextgen:machinelearningservices/v20200901preview:LinkedService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkedService resources.
type linkedServiceState struct {
	// Identity for the resource.
	Identity *IdentityResponse `pulumi:"identity"`
	// location of the linked service.
	Location *string `pulumi:"location"`
	// Friendly name of the linked service.
	Name *string `pulumi:"name"`
	// LinkedService specific properties.
	Properties *LinkedServicePropsResponse `pulumi:"properties"`
	// Resource type of linked service.
	Type *string `pulumi:"type"`
}

type LinkedServiceState struct {
	// Identity for the resource.
	Identity IdentityResponsePtrInput
	// location of the linked service.
	Location pulumi.StringPtrInput
	// Friendly name of the linked service.
	Name pulumi.StringPtrInput
	// LinkedService specific properties.
	Properties LinkedServicePropsResponsePtrInput
	// Resource type of linked service.
	Type pulumi.StringPtrInput
}

func (LinkedServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceState)(nil)).Elem()
}

type linkedServiceArgs struct {
	// Identity for the resource.
	Identity *Identity `pulumi:"identity"`
	// Friendly name of the linked workspace
	LinkName string `pulumi:"linkName"`
	// location of the linked service.
	Location *string `pulumi:"location"`
	// Friendly name of the linked service
	Name *string `pulumi:"name"`
	// LinkedService specific properties.
	Properties *LinkedServiceProps `pulumi:"properties"`
	// Name of the resource group in which workspace is located.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of Azure Machine Learning workspace.
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a LinkedService resource.
type LinkedServiceArgs struct {
	// Identity for the resource.
	Identity IdentityPtrInput
	// Friendly name of the linked workspace
	LinkName pulumi.StringInput
	// location of the linked service.
	Location pulumi.StringPtrInput
	// Friendly name of the linked service
	Name pulumi.StringPtrInput
	// LinkedService specific properties.
	Properties LinkedServicePropsPtrInput
	// Name of the resource group in which workspace is located.
	ResourceGroupName pulumi.StringInput
	// Name of Azure Machine Learning workspace.
	WorkspaceName pulumi.StringInput
}

func (LinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceArgs)(nil)).Elem()
}
