// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200301

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Linked workspace.
func LookupLinkedWorkspace(ctx *pulumi.Context, args *LookupLinkedWorkspaceArgs, opts ...pulumi.InvokeOption) (*LookupLinkedWorkspaceResult, error) {
	var rv LookupLinkedWorkspaceResult
	err := ctx.Invoke("azure-native:machinelearningservices/v20200301:getLinkedWorkspace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLinkedWorkspaceArgs struct {
	// Friendly name of the linked workspace
	LinkName string `pulumi:"linkName"`
	// Name of the resource group in which workspace is located.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of Azure Machine Learning workspace.
	WorkspaceName string `pulumi:"workspaceName"`
}

// Linked workspace.
type LookupLinkedWorkspaceResult struct {
	// ResourceId of the link of the linked workspace.
	Id string `pulumi:"id"`
	// Friendly name of the linked workspace.
	Name string `pulumi:"name"`
	// LinkedWorkspace specific properties.
	Properties LinkedWorkspacePropsResponse `pulumi:"properties"`
	// Resource type of linked workspace.
	Type string `pulumi:"type"`
}

func LookupLinkedWorkspaceOutput(ctx *pulumi.Context, args LookupLinkedWorkspaceOutputArgs, opts ...pulumi.InvokeOption) LookupLinkedWorkspaceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLinkedWorkspaceResult, error) {
			args := v.(LookupLinkedWorkspaceArgs)
			r, err := LookupLinkedWorkspace(ctx, &args, opts...)
			var s LookupLinkedWorkspaceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLinkedWorkspaceResultOutput)
}

type LookupLinkedWorkspaceOutputArgs struct {
	// Friendly name of the linked workspace
	LinkName pulumi.StringInput `pulumi:"linkName"`
	// Name of the resource group in which workspace is located.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Name of Azure Machine Learning workspace.
	WorkspaceName pulumi.StringInput `pulumi:"workspaceName"`
}

func (LookupLinkedWorkspaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLinkedWorkspaceArgs)(nil)).Elem()
}

// Linked workspace.
type LookupLinkedWorkspaceResultOutput struct{ *pulumi.OutputState }

func (LookupLinkedWorkspaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLinkedWorkspaceResult)(nil)).Elem()
}

func (o LookupLinkedWorkspaceResultOutput) ToLookupLinkedWorkspaceResultOutput() LookupLinkedWorkspaceResultOutput {
	return o
}

func (o LookupLinkedWorkspaceResultOutput) ToLookupLinkedWorkspaceResultOutputWithContext(ctx context.Context) LookupLinkedWorkspaceResultOutput {
	return o
}

// ResourceId of the link of the linked workspace.
func (o LookupLinkedWorkspaceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinkedWorkspaceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Friendly name of the linked workspace.
func (o LookupLinkedWorkspaceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinkedWorkspaceResult) string { return v.Name }).(pulumi.StringOutput)
}

// LinkedWorkspace specific properties.
func (o LookupLinkedWorkspaceResultOutput) Properties() LinkedWorkspacePropsResponseOutput {
	return o.ApplyT(func(v LookupLinkedWorkspaceResult) LinkedWorkspacePropsResponse { return v.Properties }).(LinkedWorkspacePropsResponseOutput)
}

// Resource type of linked workspace.
func (o LookupLinkedWorkspaceResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLinkedWorkspaceResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLinkedWorkspaceResultOutput{})
}
