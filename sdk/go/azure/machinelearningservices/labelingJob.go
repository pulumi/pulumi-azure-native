// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package machinelearningservices

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Machine Learning labeling job object wrapped into ARM resource envelope.
// API Version: 2020-09-01-preview.
type LabelingJob struct {
	pulumi.CustomResourceState

	// The name of the resource entity.
	Name pulumi.StringOutput `pulumi:"name"`
	// Definition of a labeling job.
	Properties LabelingJobPropertiesResponseOutput `pulumi:"properties"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The resource provider and type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewLabelingJob registers a new resource with the given unique name, arguments, and options.
func NewLabelingJob(ctx *pulumi.Context,
	name string, args *LabelingJobArgs, opts ...pulumi.ResourceOption) (*LabelingJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:machinelearningservices/v20200901preview:LabelingJob"),
		},
		{
			Type: pulumi.String("azure-native:machinelearningservices/v20210301preview:LabelingJob"),
		},
		{
			Type: pulumi.String("azure-native:machinelearningservices/v20220601preview:LabelingJob"),
		},
	})
	opts = append(opts, aliases)
	var resource LabelingJob
	err := ctx.RegisterResource("azure-native:machinelearningservices:LabelingJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLabelingJob gets an existing LabelingJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLabelingJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LabelingJobState, opts ...pulumi.ResourceOption) (*LabelingJob, error) {
	var resource LabelingJob
	err := ctx.ReadResource("azure-native:machinelearningservices:LabelingJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LabelingJob resources.
type labelingJobState struct {
}

type LabelingJobState struct {
}

func (LabelingJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*labelingJobState)(nil)).Elem()
}

type labelingJobArgs struct {
	// Name and identifier for LabelingJob.
	LabelingJobId *string `pulumi:"labelingJobId"`
	// Definition of a labeling job.
	Properties *LabelingJobProperties `pulumi:"properties"`
	// Name of the resource group in which workspace is located.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of Azure Machine Learning workspace.
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a LabelingJob resource.
type LabelingJobArgs struct {
	// Name and identifier for LabelingJob.
	LabelingJobId pulumi.StringPtrInput
	// Definition of a labeling job.
	Properties LabelingJobPropertiesPtrInput
	// Name of the resource group in which workspace is located.
	ResourceGroupName pulumi.StringInput
	// Name of Azure Machine Learning workspace.
	WorkspaceName pulumi.StringInput
}

func (LabelingJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*labelingJobArgs)(nil)).Elem()
}

type LabelingJobInput interface {
	pulumi.Input

	ToLabelingJobOutput() LabelingJobOutput
	ToLabelingJobOutputWithContext(ctx context.Context) LabelingJobOutput
}

func (*LabelingJob) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJob)(nil)).Elem()
}

func (i *LabelingJob) ToLabelingJobOutput() LabelingJobOutput {
	return i.ToLabelingJobOutputWithContext(context.Background())
}

func (i *LabelingJob) ToLabelingJobOutputWithContext(ctx context.Context) LabelingJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobOutput)
}

type LabelingJobOutput struct{ *pulumi.OutputState }

func (LabelingJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJob)(nil)).Elem()
}

func (o LabelingJobOutput) ToLabelingJobOutput() LabelingJobOutput {
	return o
}

func (o LabelingJobOutput) ToLabelingJobOutputWithContext(ctx context.Context) LabelingJobOutput {
	return o
}

// The name of the resource entity.
func (o LabelingJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LabelingJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Definition of a labeling job.
func (o LabelingJobOutput) Properties() LabelingJobPropertiesResponseOutput {
	return o.ApplyT(func(v *LabelingJob) LabelingJobPropertiesResponseOutput { return v.Properties }).(LabelingJobPropertiesResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o LabelingJobOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *LabelingJob) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The resource provider and type.
func (o LabelingJobOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *LabelingJob) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LabelingJobOutput{})
}
