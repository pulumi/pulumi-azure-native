// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200515preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LinkedWorkspace struct {
	pulumi.CustomResourceState

	Name       pulumi.StringOutput                `pulumi:"name"`
	Properties LinkedWorkspacePropsResponseOutput `pulumi:"properties"`
	Type       pulumi.StringOutput                `pulumi:"type"`
}

// NewLinkedWorkspace registers a new resource with the given unique name, arguments, and options.
func NewLinkedWorkspace(ctx *pulumi.Context,
	name string, args *LinkedWorkspaceArgs, opts ...pulumi.ResourceOption) (*LinkedWorkspace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:machinelearningservices/v20200515preview:LinkedWorkspace"),
		},
		{
			Type: pulumi.String("azure-native:machinelearningservices/v20200501preview:LinkedWorkspace"),
		},
		{
			Type: pulumi.String("azure-nextgen:machinelearningservices/v20200501preview:LinkedWorkspace"),
		},
	})
	opts = append(opts, aliases)
	var resource LinkedWorkspace
	err := ctx.RegisterResource("azure-native:machinelearningservices/v20200515preview:LinkedWorkspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkedWorkspace gets an existing LinkedWorkspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkedWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkedWorkspaceState, opts ...pulumi.ResourceOption) (*LinkedWorkspace, error) {
	var resource LinkedWorkspace
	err := ctx.ReadResource("azure-native:machinelearningservices/v20200515preview:LinkedWorkspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkedWorkspace resources.
type linkedWorkspaceState struct {
}

type LinkedWorkspaceState struct {
}

func (LinkedWorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedWorkspaceState)(nil)).Elem()
}

type linkedWorkspaceArgs struct {
	LinkName          *string               `pulumi:"linkName"`
	Name              *string               `pulumi:"name"`
	Properties        *LinkedWorkspaceProps `pulumi:"properties"`
	ResourceGroupName string                `pulumi:"resourceGroupName"`
	WorkspaceName     string                `pulumi:"workspaceName"`
}

// The set of arguments for constructing a LinkedWorkspace resource.
type LinkedWorkspaceArgs struct {
	LinkName          pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	Properties        LinkedWorkspacePropsPtrInput
	ResourceGroupName pulumi.StringInput
	WorkspaceName     pulumi.StringInput
}

func (LinkedWorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedWorkspaceArgs)(nil)).Elem()
}

type LinkedWorkspaceInput interface {
	pulumi.Input

	ToLinkedWorkspaceOutput() LinkedWorkspaceOutput
	ToLinkedWorkspaceOutputWithContext(ctx context.Context) LinkedWorkspaceOutput
}

func (*LinkedWorkspace) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedWorkspace)(nil))
}

func (i *LinkedWorkspace) ToLinkedWorkspaceOutput() LinkedWorkspaceOutput {
	return i.ToLinkedWorkspaceOutputWithContext(context.Background())
}

func (i *LinkedWorkspace) ToLinkedWorkspaceOutputWithContext(ctx context.Context) LinkedWorkspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedWorkspaceOutput)
}

type LinkedWorkspaceOutput struct{ *pulumi.OutputState }

func (LinkedWorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedWorkspace)(nil))
}

func (o LinkedWorkspaceOutput) ToLinkedWorkspaceOutput() LinkedWorkspaceOutput {
	return o
}

func (o LinkedWorkspaceOutput) ToLinkedWorkspaceOutputWithContext(ctx context.Context) LinkedWorkspaceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LinkedWorkspaceOutput{})
}
