// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20211001preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Settings with single toggle.
type Anomalies struct {
	pulumi.CustomResourceState

	// Etag of the azure resource
	Etag pulumi.StringPtrOutput `pulumi:"etag"`
	// Determines whether the setting is enable or disabled.
	IsEnabled pulumi.BoolOutput `pulumi:"isEnabled"`
	// The kind of the setting
	// Expected value is 'Anomalies'.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAnomalies registers a new resource with the given unique name, arguments, and options.
func NewAnomalies(ctx *pulumi.Context,
	name string, args *AnomaliesArgs, opts ...pulumi.ResourceOption) (*Anomalies, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	args.Kind = pulumi.String("Anomalies")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:securityinsights:Anomalies"),
		},
		{
			Type: pulumi.String("azure-native:securityinsights/v20190101preview:Anomalies"),
		},
		{
			Type: pulumi.String("azure-native:securityinsights/v20210301preview:Anomalies"),
		},
		{
			Type: pulumi.String("azure-native:securityinsights/v20210901preview:Anomalies"),
		},
		{
			Type: pulumi.String("azure-native:securityinsights/v20220101preview:Anomalies"),
		},
	})
	opts = append(opts, aliases)
	var resource Anomalies
	err := ctx.RegisterResource("azure-native:securityinsights/v20211001preview:Anomalies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnomalies gets an existing Anomalies resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnomalies(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnomaliesState, opts ...pulumi.ResourceOption) (*Anomalies, error) {
	var resource Anomalies
	err := ctx.ReadResource("azure-native:securityinsights/v20211001preview:Anomalies", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Anomalies resources.
type anomaliesState struct {
}

type AnomaliesState struct {
}

func (AnomaliesState) ElementType() reflect.Type {
	return reflect.TypeOf((*anomaliesState)(nil)).Elem()
}

type anomaliesArgs struct {
	// The kind of the setting
	// Expected value is 'Anomalies'.
	Kind string `pulumi:"kind"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The setting name. Supports - Anomalies, EyesOn, EntityAnalytics, Ueba
	SettingsName *string `pulumi:"settingsName"`
	// The name of the workspace.
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a Anomalies resource.
type AnomaliesArgs struct {
	// The kind of the setting
	// Expected value is 'Anomalies'.
	Kind pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The setting name. Supports - Anomalies, EyesOn, EntityAnalytics, Ueba
	SettingsName pulumi.StringPtrInput
	// The name of the workspace.
	WorkspaceName pulumi.StringInput
}

func (AnomaliesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*anomaliesArgs)(nil)).Elem()
}

type AnomaliesInput interface {
	pulumi.Input

	ToAnomaliesOutput() AnomaliesOutput
	ToAnomaliesOutputWithContext(ctx context.Context) AnomaliesOutput
}

func (*Anomalies) ElementType() reflect.Type {
	return reflect.TypeOf((**Anomalies)(nil)).Elem()
}

func (i *Anomalies) ToAnomaliesOutput() AnomaliesOutput {
	return i.ToAnomaliesOutputWithContext(context.Background())
}

func (i *Anomalies) ToAnomaliesOutputWithContext(ctx context.Context) AnomaliesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomaliesOutput)
}

type AnomaliesOutput struct{ *pulumi.OutputState }

func (AnomaliesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Anomalies)(nil)).Elem()
}

func (o AnomaliesOutput) ToAnomaliesOutput() AnomaliesOutput {
	return o
}

func (o AnomaliesOutput) ToAnomaliesOutputWithContext(ctx context.Context) AnomaliesOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AnomaliesOutput{})
}
