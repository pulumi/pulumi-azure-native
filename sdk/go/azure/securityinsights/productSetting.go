// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package securityinsights

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: Please use one of the variants: Anomalies, EntityAnalytics, EyesOn, Ueba.
type ProductSetting struct {
	pulumi.CustomResourceState

	Etag       pulumi.StringPtrOutput   `pulumi:"etag"`
	Kind       pulumi.StringOutput      `pulumi:"kind"`
	Name       pulumi.StringOutput      `pulumi:"name"`
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	Type       pulumi.StringOutput      `pulumi:"type"`
}

// NewProductSetting registers a new resource with the given unique name, arguments, and options.
func NewProductSetting(ctx *pulumi.Context,
	name string, args *ProductSettingArgs, opts ...pulumi.ResourceOption) (*ProductSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.OperationalInsightsResourceProvider == nil {
		return nil, errors.New("invalid value for required argument 'OperationalInsightsResourceProvider'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:securityinsights:ProductSetting"),
		},
		{
			Type: pulumi.String("azure-native:securityinsights/v20190101preview:ProductSetting"),
		},
		{
			Type: pulumi.String("azure-nextgen:securityinsights/v20190101preview:ProductSetting"),
		},
		{
			Type: pulumi.String("azure-native:securityinsights/v20210301preview:ProductSetting"),
		},
		{
			Type: pulumi.String("azure-nextgen:securityinsights/v20210301preview:ProductSetting"),
		},
	})
	opts = append(opts, aliases)
	var resource ProductSetting
	err := ctx.RegisterResource("azure-native:securityinsights:ProductSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProductSetting gets an existing ProductSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProductSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProductSettingState, opts ...pulumi.ResourceOption) (*ProductSetting, error) {
	var resource ProductSetting
	err := ctx.ReadResource("azure-native:securityinsights:ProductSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProductSetting resources.
type productSettingState struct {
}

type ProductSettingState struct {
}

func (ProductSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*productSettingState)(nil)).Elem()
}

type productSettingArgs struct {
	Etag                                *string `pulumi:"etag"`
	Kind                                string  `pulumi:"kind"`
	OperationalInsightsResourceProvider string  `pulumi:"operationalInsightsResourceProvider"`
	ResourceGroupName                   string  `pulumi:"resourceGroupName"`
	SettingsName                        *string `pulumi:"settingsName"`
	WorkspaceName                       string  `pulumi:"workspaceName"`
}

// The set of arguments for constructing a ProductSetting resource.
type ProductSettingArgs struct {
	Etag                                pulumi.StringPtrInput
	Kind                                pulumi.StringInput
	OperationalInsightsResourceProvider pulumi.StringInput
	ResourceGroupName                   pulumi.StringInput
	SettingsName                        pulumi.StringPtrInput
	WorkspaceName                       pulumi.StringInput
}

func (ProductSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*productSettingArgs)(nil)).Elem()
}

type ProductSettingInput interface {
	pulumi.Input

	ToProductSettingOutput() ProductSettingOutput
	ToProductSettingOutputWithContext(ctx context.Context) ProductSettingOutput
}

func (*ProductSetting) ElementType() reflect.Type {
	return reflect.TypeOf((*ProductSetting)(nil))
}

func (i *ProductSetting) ToProductSettingOutput() ProductSettingOutput {
	return i.ToProductSettingOutputWithContext(context.Background())
}

func (i *ProductSetting) ToProductSettingOutputWithContext(ctx context.Context) ProductSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductSettingOutput)
}

type ProductSettingOutput struct{ *pulumi.OutputState }

func (ProductSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProductSetting)(nil))
}

func (o ProductSettingOutput) ToProductSettingOutput() ProductSettingOutput {
	return o
}

func (o ProductSettingOutput) ToProductSettingOutputWithContext(ctx context.Context) ProductSettingOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ProductSettingOutput{})
}
