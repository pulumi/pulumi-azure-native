// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package securityinsights

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Metadata resource definition.
// API Version: 2021-03-01-preview.
type Metadatum struct {
	pulumi.CustomResourceState

	// The creator of the content item.
	Author MetadataAuthorResponsePtrOutput `pulumi:"author"`
	// Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name
	ContentId pulumi.StringOutput `pulumi:"contentId"`
	// Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats.
	Dependencies MetadataDependenciesResponsePtrOutput `pulumi:"dependencies"`
	// Etag of the azure resource
	Etag pulumi.StringPtrOutput `pulumi:"etag"`
	// The kind of content the metadata is for.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Azure resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group)
	ParentId pulumi.StringOutput `pulumi:"parentId"`
	// Source of the content.  This is where/how it was created.
	Source MetadataSourceResponsePtrOutput `pulumi:"source"`
	// Support information for the metadata - type, name, contact information
	Support MetadataSupportResponsePtrOutput `pulumi:"support"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Azure resource type
	Type pulumi.StringOutput `pulumi:"type"`
	// Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewMetadatum registers a new resource with the given unique name, arguments, and options.
func NewMetadatum(ctx *pulumi.Context,
	name string, args *MetadatumArgs, opts ...pulumi.ResourceOption) (*Metadatum, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContentId == nil {
		return nil, errors.New("invalid value for required argument 'ContentId'")
	}
	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.OperationalInsightsResourceProvider == nil {
		return nil, errors.New("invalid value for required argument 'OperationalInsightsResourceProvider'")
	}
	if args.ParentId == nil {
		return nil, errors.New("invalid value for required argument 'ParentId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:securityinsights:Metadatum"),
		},
		{
			Type: pulumi.String("azure-native:securityinsights/v20210301preview:Metadatum"),
		},
		{
			Type: pulumi.String("azure-nextgen:securityinsights/v20210301preview:Metadatum"),
		},
	})
	opts = append(opts, aliases)
	var resource Metadatum
	err := ctx.RegisterResource("azure-native:securityinsights:Metadatum", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetadatum gets an existing Metadatum resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetadatum(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetadatumState, opts ...pulumi.ResourceOption) (*Metadatum, error) {
	var resource Metadatum
	err := ctx.ReadResource("azure-native:securityinsights:Metadatum", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Metadatum resources.
type metadatumState struct {
	// The creator of the content item.
	Author *MetadataAuthorResponse `pulumi:"author"`
	// Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name
	ContentId *string `pulumi:"contentId"`
	// Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats.
	Dependencies *MetadataDependenciesResponse `pulumi:"dependencies"`
	// Etag of the azure resource
	Etag *string `pulumi:"etag"`
	// The kind of content the metadata is for.
	Kind *string `pulumi:"kind"`
	// Azure resource name
	Name *string `pulumi:"name"`
	// Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group)
	ParentId *string `pulumi:"parentId"`
	// Source of the content.  This is where/how it was created.
	Source *MetadataSourceResponse `pulumi:"source"`
	// Support information for the metadata - type, name, contact information
	Support *MetadataSupportResponse `pulumi:"support"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemDataResponse `pulumi:"systemData"`
	// Azure resource type
	Type *string `pulumi:"type"`
	// Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks
	Version *string `pulumi:"version"`
}

type MetadatumState struct {
	// The creator of the content item.
	Author MetadataAuthorResponsePtrInput
	// Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name
	ContentId pulumi.StringPtrInput
	// Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats.
	Dependencies MetadataDependenciesResponsePtrInput
	// Etag of the azure resource
	Etag pulumi.StringPtrInput
	// The kind of content the metadata is for.
	Kind pulumi.StringPtrInput
	// Azure resource name
	Name pulumi.StringPtrInput
	// Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group)
	ParentId pulumi.StringPtrInput
	// Source of the content.  This is where/how it was created.
	Source MetadataSourceResponsePtrInput
	// Support information for the metadata - type, name, contact information
	Support MetadataSupportResponsePtrInput
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponsePtrInput
	// Azure resource type
	Type pulumi.StringPtrInput
	// Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks
	Version pulumi.StringPtrInput
}

func (MetadatumState) ElementType() reflect.Type {
	return reflect.TypeOf((*metadatumState)(nil)).Elem()
}

type metadatumArgs struct {
	// The creator of the content item.
	Author *MetadataAuthor `pulumi:"author"`
	// Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name
	ContentId string `pulumi:"contentId"`
	// Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats.
	Dependencies *MetadataDependencies `pulumi:"dependencies"`
	// Etag of the azure resource
	Etag *string `pulumi:"etag"`
	// The kind of content the metadata is for.
	Kind string `pulumi:"kind"`
	// The Metadata name.
	MetadataName *string `pulumi:"metadataName"`
	// The namespace of workspaces resource provider- Microsoft.OperationalInsights.
	OperationalInsightsResourceProvider string `pulumi:"operationalInsightsResourceProvider"`
	// Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group)
	ParentId string `pulumi:"parentId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Source of the content.  This is where/how it was created.
	Source *MetadataSource `pulumi:"source"`
	// Support information for the metadata - type, name, contact information
	Support *MetadataSupport `pulumi:"support"`
	// Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks
	Version *string `pulumi:"version"`
	// The name of the workspace.
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a Metadatum resource.
type MetadatumArgs struct {
	// The creator of the content item.
	Author MetadataAuthorPtrInput
	// Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name
	ContentId pulumi.StringInput
	// Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats.
	Dependencies MetadataDependenciesPtrInput
	// Etag of the azure resource
	Etag pulumi.StringPtrInput
	// The kind of content the metadata is for.
	Kind pulumi.StringInput
	// The Metadata name.
	MetadataName pulumi.StringPtrInput
	// The namespace of workspaces resource provider- Microsoft.OperationalInsights.
	OperationalInsightsResourceProvider pulumi.StringInput
	// Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group)
	ParentId pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Source of the content.  This is where/how it was created.
	Source MetadataSourcePtrInput
	// Support information for the metadata - type, name, contact information
	Support MetadataSupportPtrInput
	// Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks
	Version pulumi.StringPtrInput
	// The name of the workspace.
	WorkspaceName pulumi.StringInput
}

func (MetadatumArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metadatumArgs)(nil)).Elem()
}

type MetadatumInput interface {
	pulumi.Input

	ToMetadatumOutput() MetadatumOutput
	ToMetadatumOutputWithContext(ctx context.Context) MetadatumOutput
}

func (*Metadatum) ElementType() reflect.Type {
	return reflect.TypeOf((*Metadatum)(nil))
}

func (i *Metadatum) ToMetadatumOutput() MetadatumOutput {
	return i.ToMetadatumOutputWithContext(context.Background())
}

func (i *Metadatum) ToMetadatumOutputWithContext(ctx context.Context) MetadatumOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadatumOutput)
}

type MetadatumOutput struct {
	*pulumi.OutputState
}

func (MetadatumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Metadatum)(nil))
}

func (o MetadatumOutput) ToMetadatumOutput() MetadatumOutput {
	return o
}

func (o MetadatumOutput) ToMetadatumOutputWithContext(ctx context.Context) MetadatumOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(MetadatumOutput{})
}
