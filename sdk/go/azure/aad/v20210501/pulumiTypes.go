// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210501

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configuration Diagnostics
type ConfigDiagnostics struct {
	// Last domain configuration diagnostics DateTime
	LastExecuted *string `pulumi:"lastExecuted"`
	// List of Configuration Diagnostics validator results.
	ValidatorResults []ConfigDiagnosticsValidatorResult `pulumi:"validatorResults"`
}

// ConfigDiagnosticsInput is an input type that accepts ConfigDiagnosticsArgs and ConfigDiagnosticsOutput values.
// You can construct a concrete instance of `ConfigDiagnosticsInput` via:
//
//	ConfigDiagnosticsArgs{...}
type ConfigDiagnosticsInput interface {
	pulumi.Input

	ToConfigDiagnosticsOutput() ConfigDiagnosticsOutput
	ToConfigDiagnosticsOutputWithContext(context.Context) ConfigDiagnosticsOutput
}

// Configuration Diagnostics
type ConfigDiagnosticsArgs struct {
	// Last domain configuration diagnostics DateTime
	LastExecuted pulumi.StringPtrInput `pulumi:"lastExecuted"`
	// List of Configuration Diagnostics validator results.
	ValidatorResults ConfigDiagnosticsValidatorResultArrayInput `pulumi:"validatorResults"`
}

func (ConfigDiagnosticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigDiagnostics)(nil)).Elem()
}

func (i ConfigDiagnosticsArgs) ToConfigDiagnosticsOutput() ConfigDiagnosticsOutput {
	return i.ToConfigDiagnosticsOutputWithContext(context.Background())
}

func (i ConfigDiagnosticsArgs) ToConfigDiagnosticsOutputWithContext(ctx context.Context) ConfigDiagnosticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigDiagnosticsOutput)
}

func (i ConfigDiagnosticsArgs) ToConfigDiagnosticsPtrOutput() ConfigDiagnosticsPtrOutput {
	return i.ToConfigDiagnosticsPtrOutputWithContext(context.Background())
}

func (i ConfigDiagnosticsArgs) ToConfigDiagnosticsPtrOutputWithContext(ctx context.Context) ConfigDiagnosticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigDiagnosticsOutput).ToConfigDiagnosticsPtrOutputWithContext(ctx)
}

// ConfigDiagnosticsPtrInput is an input type that accepts ConfigDiagnosticsArgs, ConfigDiagnosticsPtr and ConfigDiagnosticsPtrOutput values.
// You can construct a concrete instance of `ConfigDiagnosticsPtrInput` via:
//
//	        ConfigDiagnosticsArgs{...}
//
//	or:
//
//	        nil
type ConfigDiagnosticsPtrInput interface {
	pulumi.Input

	ToConfigDiagnosticsPtrOutput() ConfigDiagnosticsPtrOutput
	ToConfigDiagnosticsPtrOutputWithContext(context.Context) ConfigDiagnosticsPtrOutput
}

type configDiagnosticsPtrType ConfigDiagnosticsArgs

func ConfigDiagnosticsPtr(v *ConfigDiagnosticsArgs) ConfigDiagnosticsPtrInput {
	return (*configDiagnosticsPtrType)(v)
}

func (*configDiagnosticsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigDiagnostics)(nil)).Elem()
}

func (i *configDiagnosticsPtrType) ToConfigDiagnosticsPtrOutput() ConfigDiagnosticsPtrOutput {
	return i.ToConfigDiagnosticsPtrOutputWithContext(context.Background())
}

func (i *configDiagnosticsPtrType) ToConfigDiagnosticsPtrOutputWithContext(ctx context.Context) ConfigDiagnosticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigDiagnosticsPtrOutput)
}

// Configuration Diagnostics
type ConfigDiagnosticsOutput struct{ *pulumi.OutputState }

func (ConfigDiagnosticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigDiagnostics)(nil)).Elem()
}

func (o ConfigDiagnosticsOutput) ToConfigDiagnosticsOutput() ConfigDiagnosticsOutput {
	return o
}

func (o ConfigDiagnosticsOutput) ToConfigDiagnosticsOutputWithContext(ctx context.Context) ConfigDiagnosticsOutput {
	return o
}

func (o ConfigDiagnosticsOutput) ToConfigDiagnosticsPtrOutput() ConfigDiagnosticsPtrOutput {
	return o.ToConfigDiagnosticsPtrOutputWithContext(context.Background())
}

func (o ConfigDiagnosticsOutput) ToConfigDiagnosticsPtrOutputWithContext(ctx context.Context) ConfigDiagnosticsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigDiagnostics) *ConfigDiagnostics {
		return &v
	}).(ConfigDiagnosticsPtrOutput)
}

// Last domain configuration diagnostics DateTime
func (o ConfigDiagnosticsOutput) LastExecuted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigDiagnostics) *string { return v.LastExecuted }).(pulumi.StringPtrOutput)
}

// List of Configuration Diagnostics validator results.
func (o ConfigDiagnosticsOutput) ValidatorResults() ConfigDiagnosticsValidatorResultArrayOutput {
	return o.ApplyT(func(v ConfigDiagnostics) []ConfigDiagnosticsValidatorResult { return v.ValidatorResults }).(ConfigDiagnosticsValidatorResultArrayOutput)
}

type ConfigDiagnosticsPtrOutput struct{ *pulumi.OutputState }

func (ConfigDiagnosticsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigDiagnostics)(nil)).Elem()
}

func (o ConfigDiagnosticsPtrOutput) ToConfigDiagnosticsPtrOutput() ConfigDiagnosticsPtrOutput {
	return o
}

func (o ConfigDiagnosticsPtrOutput) ToConfigDiagnosticsPtrOutputWithContext(ctx context.Context) ConfigDiagnosticsPtrOutput {
	return o
}

func (o ConfigDiagnosticsPtrOutput) Elem() ConfigDiagnosticsOutput {
	return o.ApplyT(func(v *ConfigDiagnostics) ConfigDiagnostics {
		if v != nil {
			return *v
		}
		var ret ConfigDiagnostics
		return ret
	}).(ConfigDiagnosticsOutput)
}

// Last domain configuration diagnostics DateTime
func (o ConfigDiagnosticsPtrOutput) LastExecuted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigDiagnostics) *string {
		if v == nil {
			return nil
		}
		return v.LastExecuted
	}).(pulumi.StringPtrOutput)
}

// List of Configuration Diagnostics validator results.
func (o ConfigDiagnosticsPtrOutput) ValidatorResults() ConfigDiagnosticsValidatorResultArrayOutput {
	return o.ApplyT(func(v *ConfigDiagnostics) []ConfigDiagnosticsValidatorResult {
		if v == nil {
			return nil
		}
		return v.ValidatorResults
	}).(ConfigDiagnosticsValidatorResultArrayOutput)
}

// Configuration Diagnostics
type ConfigDiagnosticsResponse struct {
	// Last domain configuration diagnostics DateTime
	LastExecuted *string `pulumi:"lastExecuted"`
	// List of Configuration Diagnostics validator results.
	ValidatorResults []ConfigDiagnosticsValidatorResultResponse `pulumi:"validatorResults"`
}

// Configuration Diagnostics
type ConfigDiagnosticsResponseOutput struct{ *pulumi.OutputState }

func (ConfigDiagnosticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigDiagnosticsResponse)(nil)).Elem()
}

func (o ConfigDiagnosticsResponseOutput) ToConfigDiagnosticsResponseOutput() ConfigDiagnosticsResponseOutput {
	return o
}

func (o ConfigDiagnosticsResponseOutput) ToConfigDiagnosticsResponseOutputWithContext(ctx context.Context) ConfigDiagnosticsResponseOutput {
	return o
}

// Last domain configuration diagnostics DateTime
func (o ConfigDiagnosticsResponseOutput) LastExecuted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigDiagnosticsResponse) *string { return v.LastExecuted }).(pulumi.StringPtrOutput)
}

// List of Configuration Diagnostics validator results.
func (o ConfigDiagnosticsResponseOutput) ValidatorResults() ConfigDiagnosticsValidatorResultResponseArrayOutput {
	return o.ApplyT(func(v ConfigDiagnosticsResponse) []ConfigDiagnosticsValidatorResultResponse {
		return v.ValidatorResults
	}).(ConfigDiagnosticsValidatorResultResponseArrayOutput)
}

type ConfigDiagnosticsResponsePtrOutput struct{ *pulumi.OutputState }

func (ConfigDiagnosticsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigDiagnosticsResponse)(nil)).Elem()
}

func (o ConfigDiagnosticsResponsePtrOutput) ToConfigDiagnosticsResponsePtrOutput() ConfigDiagnosticsResponsePtrOutput {
	return o
}

func (o ConfigDiagnosticsResponsePtrOutput) ToConfigDiagnosticsResponsePtrOutputWithContext(ctx context.Context) ConfigDiagnosticsResponsePtrOutput {
	return o
}

func (o ConfigDiagnosticsResponsePtrOutput) Elem() ConfigDiagnosticsResponseOutput {
	return o.ApplyT(func(v *ConfigDiagnosticsResponse) ConfigDiagnosticsResponse {
		if v != nil {
			return *v
		}
		var ret ConfigDiagnosticsResponse
		return ret
	}).(ConfigDiagnosticsResponseOutput)
}

// Last domain configuration diagnostics DateTime
func (o ConfigDiagnosticsResponsePtrOutput) LastExecuted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigDiagnosticsResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastExecuted
	}).(pulumi.StringPtrOutput)
}

// List of Configuration Diagnostics validator results.
func (o ConfigDiagnosticsResponsePtrOutput) ValidatorResults() ConfigDiagnosticsValidatorResultResponseArrayOutput {
	return o.ApplyT(func(v *ConfigDiagnosticsResponse) []ConfigDiagnosticsValidatorResultResponse {
		if v == nil {
			return nil
		}
		return v.ValidatorResults
	}).(ConfigDiagnosticsValidatorResultResponseArrayOutput)
}

// Config Diagnostics validator result data
type ConfigDiagnosticsValidatorResult struct {
	// List of resource config validation issues.
	Issues []ConfigDiagnosticsValidatorResultIssue `pulumi:"issues"`
	// Replica set location and subnet name
	ReplicaSetSubnetDisplayName *string `pulumi:"replicaSetSubnetDisplayName"`
	// Status for individual validator after running diagnostics.
	Status *string `pulumi:"status"`
	// Validator identifier
	ValidatorId *string `pulumi:"validatorId"`
}

// Defaults sets the appropriate defaults for ConfigDiagnosticsValidatorResult
func (val *ConfigDiagnosticsValidatorResult) Defaults() *ConfigDiagnosticsValidatorResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		status_ := "None"
		tmp.Status = &status_
	}
	return &tmp
}

// ConfigDiagnosticsValidatorResultInput is an input type that accepts ConfigDiagnosticsValidatorResultArgs and ConfigDiagnosticsValidatorResultOutput values.
// You can construct a concrete instance of `ConfigDiagnosticsValidatorResultInput` via:
//
//	ConfigDiagnosticsValidatorResultArgs{...}
type ConfigDiagnosticsValidatorResultInput interface {
	pulumi.Input

	ToConfigDiagnosticsValidatorResultOutput() ConfigDiagnosticsValidatorResultOutput
	ToConfigDiagnosticsValidatorResultOutputWithContext(context.Context) ConfigDiagnosticsValidatorResultOutput
}

// Config Diagnostics validator result data
type ConfigDiagnosticsValidatorResultArgs struct {
	// List of resource config validation issues.
	Issues ConfigDiagnosticsValidatorResultIssueArrayInput `pulumi:"issues"`
	// Replica set location and subnet name
	ReplicaSetSubnetDisplayName pulumi.StringPtrInput `pulumi:"replicaSetSubnetDisplayName"`
	// Status for individual validator after running diagnostics.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Validator identifier
	ValidatorId pulumi.StringPtrInput `pulumi:"validatorId"`
}

// Defaults sets the appropriate defaults for ConfigDiagnosticsValidatorResultArgs
func (val *ConfigDiagnosticsValidatorResultArgs) Defaults() *ConfigDiagnosticsValidatorResultArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		tmp.Status = pulumi.StringPtr("None")
	}
	return &tmp
}
func (ConfigDiagnosticsValidatorResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigDiagnosticsValidatorResult)(nil)).Elem()
}

func (i ConfigDiagnosticsValidatorResultArgs) ToConfigDiagnosticsValidatorResultOutput() ConfigDiagnosticsValidatorResultOutput {
	return i.ToConfigDiagnosticsValidatorResultOutputWithContext(context.Background())
}

func (i ConfigDiagnosticsValidatorResultArgs) ToConfigDiagnosticsValidatorResultOutputWithContext(ctx context.Context) ConfigDiagnosticsValidatorResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigDiagnosticsValidatorResultOutput)
}

// ConfigDiagnosticsValidatorResultArrayInput is an input type that accepts ConfigDiagnosticsValidatorResultArray and ConfigDiagnosticsValidatorResultArrayOutput values.
// You can construct a concrete instance of `ConfigDiagnosticsValidatorResultArrayInput` via:
//
//	ConfigDiagnosticsValidatorResultArray{ ConfigDiagnosticsValidatorResultArgs{...} }
type ConfigDiagnosticsValidatorResultArrayInput interface {
	pulumi.Input

	ToConfigDiagnosticsValidatorResultArrayOutput() ConfigDiagnosticsValidatorResultArrayOutput
	ToConfigDiagnosticsValidatorResultArrayOutputWithContext(context.Context) ConfigDiagnosticsValidatorResultArrayOutput
}

type ConfigDiagnosticsValidatorResultArray []ConfigDiagnosticsValidatorResultInput

func (ConfigDiagnosticsValidatorResultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigDiagnosticsValidatorResult)(nil)).Elem()
}

func (i ConfigDiagnosticsValidatorResultArray) ToConfigDiagnosticsValidatorResultArrayOutput() ConfigDiagnosticsValidatorResultArrayOutput {
	return i.ToConfigDiagnosticsValidatorResultArrayOutputWithContext(context.Background())
}

func (i ConfigDiagnosticsValidatorResultArray) ToConfigDiagnosticsValidatorResultArrayOutputWithContext(ctx context.Context) ConfigDiagnosticsValidatorResultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigDiagnosticsValidatorResultArrayOutput)
}

// Config Diagnostics validator result data
type ConfigDiagnosticsValidatorResultOutput struct{ *pulumi.OutputState }

func (ConfigDiagnosticsValidatorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigDiagnosticsValidatorResult)(nil)).Elem()
}

func (o ConfigDiagnosticsValidatorResultOutput) ToConfigDiagnosticsValidatorResultOutput() ConfigDiagnosticsValidatorResultOutput {
	return o
}

func (o ConfigDiagnosticsValidatorResultOutput) ToConfigDiagnosticsValidatorResultOutputWithContext(ctx context.Context) ConfigDiagnosticsValidatorResultOutput {
	return o
}

// List of resource config validation issues.
func (o ConfigDiagnosticsValidatorResultOutput) Issues() ConfigDiagnosticsValidatorResultIssueArrayOutput {
	return o.ApplyT(func(v ConfigDiagnosticsValidatorResult) []ConfigDiagnosticsValidatorResultIssue { return v.Issues }).(ConfigDiagnosticsValidatorResultIssueArrayOutput)
}

// Replica set location and subnet name
func (o ConfigDiagnosticsValidatorResultOutput) ReplicaSetSubnetDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigDiagnosticsValidatorResult) *string { return v.ReplicaSetSubnetDisplayName }).(pulumi.StringPtrOutput)
}

// Status for individual validator after running diagnostics.
func (o ConfigDiagnosticsValidatorResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigDiagnosticsValidatorResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Validator identifier
func (o ConfigDiagnosticsValidatorResultOutput) ValidatorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigDiagnosticsValidatorResult) *string { return v.ValidatorId }).(pulumi.StringPtrOutput)
}

type ConfigDiagnosticsValidatorResultArrayOutput struct{ *pulumi.OutputState }

func (ConfigDiagnosticsValidatorResultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigDiagnosticsValidatorResult)(nil)).Elem()
}

func (o ConfigDiagnosticsValidatorResultArrayOutput) ToConfigDiagnosticsValidatorResultArrayOutput() ConfigDiagnosticsValidatorResultArrayOutput {
	return o
}

func (o ConfigDiagnosticsValidatorResultArrayOutput) ToConfigDiagnosticsValidatorResultArrayOutputWithContext(ctx context.Context) ConfigDiagnosticsValidatorResultArrayOutput {
	return o
}

func (o ConfigDiagnosticsValidatorResultArrayOutput) Index(i pulumi.IntInput) ConfigDiagnosticsValidatorResultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigDiagnosticsValidatorResult {
		return vs[0].([]ConfigDiagnosticsValidatorResult)[vs[1].(int)]
	}).(ConfigDiagnosticsValidatorResultOutput)
}

// Specific issue for a particular config diagnostics validator
type ConfigDiagnosticsValidatorResultIssue struct {
	// List of domain resource property name or values used to compose a rich description.
	DescriptionParams []string `pulumi:"descriptionParams"`
	// Validation issue identifier.
	Id *string `pulumi:"id"`
}

// ConfigDiagnosticsValidatorResultIssueInput is an input type that accepts ConfigDiagnosticsValidatorResultIssueArgs and ConfigDiagnosticsValidatorResultIssueOutput values.
// You can construct a concrete instance of `ConfigDiagnosticsValidatorResultIssueInput` via:
//
//	ConfigDiagnosticsValidatorResultIssueArgs{...}
type ConfigDiagnosticsValidatorResultIssueInput interface {
	pulumi.Input

	ToConfigDiagnosticsValidatorResultIssueOutput() ConfigDiagnosticsValidatorResultIssueOutput
	ToConfigDiagnosticsValidatorResultIssueOutputWithContext(context.Context) ConfigDiagnosticsValidatorResultIssueOutput
}

// Specific issue for a particular config diagnostics validator
type ConfigDiagnosticsValidatorResultIssueArgs struct {
	// List of domain resource property name or values used to compose a rich description.
	DescriptionParams pulumi.StringArrayInput `pulumi:"descriptionParams"`
	// Validation issue identifier.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (ConfigDiagnosticsValidatorResultIssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigDiagnosticsValidatorResultIssue)(nil)).Elem()
}

func (i ConfigDiagnosticsValidatorResultIssueArgs) ToConfigDiagnosticsValidatorResultIssueOutput() ConfigDiagnosticsValidatorResultIssueOutput {
	return i.ToConfigDiagnosticsValidatorResultIssueOutputWithContext(context.Background())
}

func (i ConfigDiagnosticsValidatorResultIssueArgs) ToConfigDiagnosticsValidatorResultIssueOutputWithContext(ctx context.Context) ConfigDiagnosticsValidatorResultIssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigDiagnosticsValidatorResultIssueOutput)
}

// ConfigDiagnosticsValidatorResultIssueArrayInput is an input type that accepts ConfigDiagnosticsValidatorResultIssueArray and ConfigDiagnosticsValidatorResultIssueArrayOutput values.
// You can construct a concrete instance of `ConfigDiagnosticsValidatorResultIssueArrayInput` via:
//
//	ConfigDiagnosticsValidatorResultIssueArray{ ConfigDiagnosticsValidatorResultIssueArgs{...} }
type ConfigDiagnosticsValidatorResultIssueArrayInput interface {
	pulumi.Input

	ToConfigDiagnosticsValidatorResultIssueArrayOutput() ConfigDiagnosticsValidatorResultIssueArrayOutput
	ToConfigDiagnosticsValidatorResultIssueArrayOutputWithContext(context.Context) ConfigDiagnosticsValidatorResultIssueArrayOutput
}

type ConfigDiagnosticsValidatorResultIssueArray []ConfigDiagnosticsValidatorResultIssueInput

func (ConfigDiagnosticsValidatorResultIssueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigDiagnosticsValidatorResultIssue)(nil)).Elem()
}

func (i ConfigDiagnosticsValidatorResultIssueArray) ToConfigDiagnosticsValidatorResultIssueArrayOutput() ConfigDiagnosticsValidatorResultIssueArrayOutput {
	return i.ToConfigDiagnosticsValidatorResultIssueArrayOutputWithContext(context.Background())
}

func (i ConfigDiagnosticsValidatorResultIssueArray) ToConfigDiagnosticsValidatorResultIssueArrayOutputWithContext(ctx context.Context) ConfigDiagnosticsValidatorResultIssueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigDiagnosticsValidatorResultIssueArrayOutput)
}

// Specific issue for a particular config diagnostics validator
type ConfigDiagnosticsValidatorResultIssueOutput struct{ *pulumi.OutputState }

func (ConfigDiagnosticsValidatorResultIssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigDiagnosticsValidatorResultIssue)(nil)).Elem()
}

func (o ConfigDiagnosticsValidatorResultIssueOutput) ToConfigDiagnosticsValidatorResultIssueOutput() ConfigDiagnosticsValidatorResultIssueOutput {
	return o
}

func (o ConfigDiagnosticsValidatorResultIssueOutput) ToConfigDiagnosticsValidatorResultIssueOutputWithContext(ctx context.Context) ConfigDiagnosticsValidatorResultIssueOutput {
	return o
}

// List of domain resource property name or values used to compose a rich description.
func (o ConfigDiagnosticsValidatorResultIssueOutput) DescriptionParams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigDiagnosticsValidatorResultIssue) []string { return v.DescriptionParams }).(pulumi.StringArrayOutput)
}

// Validation issue identifier.
func (o ConfigDiagnosticsValidatorResultIssueOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigDiagnosticsValidatorResultIssue) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ConfigDiagnosticsValidatorResultIssueArrayOutput struct{ *pulumi.OutputState }

func (ConfigDiagnosticsValidatorResultIssueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigDiagnosticsValidatorResultIssue)(nil)).Elem()
}

func (o ConfigDiagnosticsValidatorResultIssueArrayOutput) ToConfigDiagnosticsValidatorResultIssueArrayOutput() ConfigDiagnosticsValidatorResultIssueArrayOutput {
	return o
}

func (o ConfigDiagnosticsValidatorResultIssueArrayOutput) ToConfigDiagnosticsValidatorResultIssueArrayOutputWithContext(ctx context.Context) ConfigDiagnosticsValidatorResultIssueArrayOutput {
	return o
}

func (o ConfigDiagnosticsValidatorResultIssueArrayOutput) Index(i pulumi.IntInput) ConfigDiagnosticsValidatorResultIssueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigDiagnosticsValidatorResultIssue {
		return vs[0].([]ConfigDiagnosticsValidatorResultIssue)[vs[1].(int)]
	}).(ConfigDiagnosticsValidatorResultIssueOutput)
}

// Specific issue for a particular config diagnostics validator
type ConfigDiagnosticsValidatorResultIssueResponse struct {
	// List of domain resource property name or values used to compose a rich description.
	DescriptionParams []string `pulumi:"descriptionParams"`
	// Validation issue identifier.
	Id *string `pulumi:"id"`
}

// Specific issue for a particular config diagnostics validator
type ConfigDiagnosticsValidatorResultIssueResponseOutput struct{ *pulumi.OutputState }

func (ConfigDiagnosticsValidatorResultIssueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigDiagnosticsValidatorResultIssueResponse)(nil)).Elem()
}

func (o ConfigDiagnosticsValidatorResultIssueResponseOutput) ToConfigDiagnosticsValidatorResultIssueResponseOutput() ConfigDiagnosticsValidatorResultIssueResponseOutput {
	return o
}

func (o ConfigDiagnosticsValidatorResultIssueResponseOutput) ToConfigDiagnosticsValidatorResultIssueResponseOutputWithContext(ctx context.Context) ConfigDiagnosticsValidatorResultIssueResponseOutput {
	return o
}

// List of domain resource property name or values used to compose a rich description.
func (o ConfigDiagnosticsValidatorResultIssueResponseOutput) DescriptionParams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigDiagnosticsValidatorResultIssueResponse) []string { return v.DescriptionParams }).(pulumi.StringArrayOutput)
}

// Validation issue identifier.
func (o ConfigDiagnosticsValidatorResultIssueResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigDiagnosticsValidatorResultIssueResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ConfigDiagnosticsValidatorResultIssueResponseArrayOutput struct{ *pulumi.OutputState }

func (ConfigDiagnosticsValidatorResultIssueResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigDiagnosticsValidatorResultIssueResponse)(nil)).Elem()
}

func (o ConfigDiagnosticsValidatorResultIssueResponseArrayOutput) ToConfigDiagnosticsValidatorResultIssueResponseArrayOutput() ConfigDiagnosticsValidatorResultIssueResponseArrayOutput {
	return o
}

func (o ConfigDiagnosticsValidatorResultIssueResponseArrayOutput) ToConfigDiagnosticsValidatorResultIssueResponseArrayOutputWithContext(ctx context.Context) ConfigDiagnosticsValidatorResultIssueResponseArrayOutput {
	return o
}

func (o ConfigDiagnosticsValidatorResultIssueResponseArrayOutput) Index(i pulumi.IntInput) ConfigDiagnosticsValidatorResultIssueResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigDiagnosticsValidatorResultIssueResponse {
		return vs[0].([]ConfigDiagnosticsValidatorResultIssueResponse)[vs[1].(int)]
	}).(ConfigDiagnosticsValidatorResultIssueResponseOutput)
}

// Config Diagnostics validator result data
type ConfigDiagnosticsValidatorResultResponse struct {
	// List of resource config validation issues.
	Issues []ConfigDiagnosticsValidatorResultIssueResponse `pulumi:"issues"`
	// Replica set location and subnet name
	ReplicaSetSubnetDisplayName *string `pulumi:"replicaSetSubnetDisplayName"`
	// Status for individual validator after running diagnostics.
	Status *string `pulumi:"status"`
	// Validator identifier
	ValidatorId *string `pulumi:"validatorId"`
}

// Defaults sets the appropriate defaults for ConfigDiagnosticsValidatorResultResponse
func (val *ConfigDiagnosticsValidatorResultResponse) Defaults() *ConfigDiagnosticsValidatorResultResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Status) {
		status_ := "None"
		tmp.Status = &status_
	}
	return &tmp
}

// Config Diagnostics validator result data
type ConfigDiagnosticsValidatorResultResponseOutput struct{ *pulumi.OutputState }

func (ConfigDiagnosticsValidatorResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigDiagnosticsValidatorResultResponse)(nil)).Elem()
}

func (o ConfigDiagnosticsValidatorResultResponseOutput) ToConfigDiagnosticsValidatorResultResponseOutput() ConfigDiagnosticsValidatorResultResponseOutput {
	return o
}

func (o ConfigDiagnosticsValidatorResultResponseOutput) ToConfigDiagnosticsValidatorResultResponseOutputWithContext(ctx context.Context) ConfigDiagnosticsValidatorResultResponseOutput {
	return o
}

// List of resource config validation issues.
func (o ConfigDiagnosticsValidatorResultResponseOutput) Issues() ConfigDiagnosticsValidatorResultIssueResponseArrayOutput {
	return o.ApplyT(func(v ConfigDiagnosticsValidatorResultResponse) []ConfigDiagnosticsValidatorResultIssueResponse {
		return v.Issues
	}).(ConfigDiagnosticsValidatorResultIssueResponseArrayOutput)
}

// Replica set location and subnet name
func (o ConfigDiagnosticsValidatorResultResponseOutput) ReplicaSetSubnetDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigDiagnosticsValidatorResultResponse) *string { return v.ReplicaSetSubnetDisplayName }).(pulumi.StringPtrOutput)
}

// Status for individual validator after running diagnostics.
func (o ConfigDiagnosticsValidatorResultResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigDiagnosticsValidatorResultResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Validator identifier
func (o ConfigDiagnosticsValidatorResultResponseOutput) ValidatorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigDiagnosticsValidatorResultResponse) *string { return v.ValidatorId }).(pulumi.StringPtrOutput)
}

type ConfigDiagnosticsValidatorResultResponseArrayOutput struct{ *pulumi.OutputState }

func (ConfigDiagnosticsValidatorResultResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigDiagnosticsValidatorResultResponse)(nil)).Elem()
}

func (o ConfigDiagnosticsValidatorResultResponseArrayOutput) ToConfigDiagnosticsValidatorResultResponseArrayOutput() ConfigDiagnosticsValidatorResultResponseArrayOutput {
	return o
}

func (o ConfigDiagnosticsValidatorResultResponseArrayOutput) ToConfigDiagnosticsValidatorResultResponseArrayOutputWithContext(ctx context.Context) ConfigDiagnosticsValidatorResultResponseArrayOutput {
	return o
}

func (o ConfigDiagnosticsValidatorResultResponseArrayOutput) Index(i pulumi.IntInput) ConfigDiagnosticsValidatorResultResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigDiagnosticsValidatorResultResponse {
		return vs[0].([]ConfigDiagnosticsValidatorResultResponse)[vs[1].(int)]
	}).(ConfigDiagnosticsValidatorResultResponseOutput)
}

// Container Account Description
type ContainerAccountResponse struct {
	// The account name
	AccountName *string `pulumi:"accountName"`
	// The account password
	Password *string `pulumi:"password"`
	// The account spn
	Spn *string `pulumi:"spn"`
}

// Container Account Description
type ContainerAccountResponseOutput struct{ *pulumi.OutputState }

func (ContainerAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerAccountResponse)(nil)).Elem()
}

func (o ContainerAccountResponseOutput) ToContainerAccountResponseOutput() ContainerAccountResponseOutput {
	return o
}

func (o ContainerAccountResponseOutput) ToContainerAccountResponseOutputWithContext(ctx context.Context) ContainerAccountResponseOutput {
	return o
}

// The account name
func (o ContainerAccountResponseOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerAccountResponse) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// The account password
func (o ContainerAccountResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerAccountResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The account spn
func (o ContainerAccountResponseOutput) Spn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerAccountResponse) *string { return v.Spn }).(pulumi.StringPtrOutput)
}

type ContainerAccountResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerAccountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerAccountResponse)(nil)).Elem()
}

func (o ContainerAccountResponseArrayOutput) ToContainerAccountResponseArrayOutput() ContainerAccountResponseArrayOutput {
	return o
}

func (o ContainerAccountResponseArrayOutput) ToContainerAccountResponseArrayOutputWithContext(ctx context.Context) ContainerAccountResponseArrayOutput {
	return o
}

func (o ContainerAccountResponseArrayOutput) Index(i pulumi.IntInput) ContainerAccountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerAccountResponse {
		return vs[0].([]ContainerAccountResponse)[vs[1].(int)]
	}).(ContainerAccountResponseOutput)
}

// Domain Security Settings
type DomainSecuritySettings struct {
	// A flag to determine whether or not KerberosArmoring is enabled or disabled.
	KerberosArmoring *string `pulumi:"kerberosArmoring"`
	// A flag to determine whether or not KerberosRc4Encryption is enabled or disabled.
	KerberosRc4Encryption *string `pulumi:"kerberosRc4Encryption"`
	// A flag to determine whether or not NtlmV1 is enabled or disabled.
	NtlmV1 *string `pulumi:"ntlmV1"`
	// A flag to determine whether or not SyncKerberosPasswords is enabled or disabled.
	SyncKerberosPasswords *string `pulumi:"syncKerberosPasswords"`
	// A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
	SyncNtlmPasswords *string `pulumi:"syncNtlmPasswords"`
	// A flag to determine whether or not SyncOnPremPasswords is enabled or disabled.
	SyncOnPremPasswords *string `pulumi:"syncOnPremPasswords"`
	// A flag to determine whether or not TlsV1 is enabled or disabled.
	TlsV1 *string `pulumi:"tlsV1"`
}

// Defaults sets the appropriate defaults for DomainSecuritySettings
func (val *DomainSecuritySettings) Defaults() *DomainSecuritySettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.KerberosArmoring) {
		kerberosArmoring_ := "Disabled"
		tmp.KerberosArmoring = &kerberosArmoring_
	}
	if isZero(tmp.KerberosRc4Encryption) {
		kerberosRc4Encryption_ := "Enabled"
		tmp.KerberosRc4Encryption = &kerberosRc4Encryption_
	}
	if isZero(tmp.NtlmV1) {
		ntlmV1_ := "Enabled"
		tmp.NtlmV1 = &ntlmV1_
	}
	if isZero(tmp.SyncKerberosPasswords) {
		syncKerberosPasswords_ := "Enabled"
		tmp.SyncKerberosPasswords = &syncKerberosPasswords_
	}
	if isZero(tmp.SyncNtlmPasswords) {
		syncNtlmPasswords_ := "Enabled"
		tmp.SyncNtlmPasswords = &syncNtlmPasswords_
	}
	if isZero(tmp.SyncOnPremPasswords) {
		syncOnPremPasswords_ := "Enabled"
		tmp.SyncOnPremPasswords = &syncOnPremPasswords_
	}
	if isZero(tmp.TlsV1) {
		tlsV1_ := "Enabled"
		tmp.TlsV1 = &tlsV1_
	}
	return &tmp
}

// DomainSecuritySettingsInput is an input type that accepts DomainSecuritySettingsArgs and DomainSecuritySettingsOutput values.
// You can construct a concrete instance of `DomainSecuritySettingsInput` via:
//
//	DomainSecuritySettingsArgs{...}
type DomainSecuritySettingsInput interface {
	pulumi.Input

	ToDomainSecuritySettingsOutput() DomainSecuritySettingsOutput
	ToDomainSecuritySettingsOutputWithContext(context.Context) DomainSecuritySettingsOutput
}

// Domain Security Settings
type DomainSecuritySettingsArgs struct {
	// A flag to determine whether or not KerberosArmoring is enabled or disabled.
	KerberosArmoring pulumi.StringPtrInput `pulumi:"kerberosArmoring"`
	// A flag to determine whether or not KerberosRc4Encryption is enabled or disabled.
	KerberosRc4Encryption pulumi.StringPtrInput `pulumi:"kerberosRc4Encryption"`
	// A flag to determine whether or not NtlmV1 is enabled or disabled.
	NtlmV1 pulumi.StringPtrInput `pulumi:"ntlmV1"`
	// A flag to determine whether or not SyncKerberosPasswords is enabled or disabled.
	SyncKerberosPasswords pulumi.StringPtrInput `pulumi:"syncKerberosPasswords"`
	// A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
	SyncNtlmPasswords pulumi.StringPtrInput `pulumi:"syncNtlmPasswords"`
	// A flag to determine whether or not SyncOnPremPasswords is enabled or disabled.
	SyncOnPremPasswords pulumi.StringPtrInput `pulumi:"syncOnPremPasswords"`
	// A flag to determine whether or not TlsV1 is enabled or disabled.
	TlsV1 pulumi.StringPtrInput `pulumi:"tlsV1"`
}

// Defaults sets the appropriate defaults for DomainSecuritySettingsArgs
func (val *DomainSecuritySettingsArgs) Defaults() *DomainSecuritySettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.KerberosArmoring) {
		tmp.KerberosArmoring = pulumi.StringPtr("Disabled")
	}
	if isZero(tmp.KerberosRc4Encryption) {
		tmp.KerberosRc4Encryption = pulumi.StringPtr("Enabled")
	}
	if isZero(tmp.NtlmV1) {
		tmp.NtlmV1 = pulumi.StringPtr("Enabled")
	}
	if isZero(tmp.SyncKerberosPasswords) {
		tmp.SyncKerberosPasswords = pulumi.StringPtr("Enabled")
	}
	if isZero(tmp.SyncNtlmPasswords) {
		tmp.SyncNtlmPasswords = pulumi.StringPtr("Enabled")
	}
	if isZero(tmp.SyncOnPremPasswords) {
		tmp.SyncOnPremPasswords = pulumi.StringPtr("Enabled")
	}
	if isZero(tmp.TlsV1) {
		tmp.TlsV1 = pulumi.StringPtr("Enabled")
	}
	return &tmp
}
func (DomainSecuritySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSecuritySettings)(nil)).Elem()
}

func (i DomainSecuritySettingsArgs) ToDomainSecuritySettingsOutput() DomainSecuritySettingsOutput {
	return i.ToDomainSecuritySettingsOutputWithContext(context.Background())
}

func (i DomainSecuritySettingsArgs) ToDomainSecuritySettingsOutputWithContext(ctx context.Context) DomainSecuritySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSecuritySettingsOutput)
}

func (i DomainSecuritySettingsArgs) ToDomainSecuritySettingsPtrOutput() DomainSecuritySettingsPtrOutput {
	return i.ToDomainSecuritySettingsPtrOutputWithContext(context.Background())
}

func (i DomainSecuritySettingsArgs) ToDomainSecuritySettingsPtrOutputWithContext(ctx context.Context) DomainSecuritySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSecuritySettingsOutput).ToDomainSecuritySettingsPtrOutputWithContext(ctx)
}

// DomainSecuritySettingsPtrInput is an input type that accepts DomainSecuritySettingsArgs, DomainSecuritySettingsPtr and DomainSecuritySettingsPtrOutput values.
// You can construct a concrete instance of `DomainSecuritySettingsPtrInput` via:
//
//	        DomainSecuritySettingsArgs{...}
//
//	or:
//
//	        nil
type DomainSecuritySettingsPtrInput interface {
	pulumi.Input

	ToDomainSecuritySettingsPtrOutput() DomainSecuritySettingsPtrOutput
	ToDomainSecuritySettingsPtrOutputWithContext(context.Context) DomainSecuritySettingsPtrOutput
}

type domainSecuritySettingsPtrType DomainSecuritySettingsArgs

func DomainSecuritySettingsPtr(v *DomainSecuritySettingsArgs) DomainSecuritySettingsPtrInput {
	return (*domainSecuritySettingsPtrType)(v)
}

func (*domainSecuritySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainSecuritySettings)(nil)).Elem()
}

func (i *domainSecuritySettingsPtrType) ToDomainSecuritySettingsPtrOutput() DomainSecuritySettingsPtrOutput {
	return i.ToDomainSecuritySettingsPtrOutputWithContext(context.Background())
}

func (i *domainSecuritySettingsPtrType) ToDomainSecuritySettingsPtrOutputWithContext(ctx context.Context) DomainSecuritySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainSecuritySettingsPtrOutput)
}

// Domain Security Settings
type DomainSecuritySettingsOutput struct{ *pulumi.OutputState }

func (DomainSecuritySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSecuritySettings)(nil)).Elem()
}

func (o DomainSecuritySettingsOutput) ToDomainSecuritySettingsOutput() DomainSecuritySettingsOutput {
	return o
}

func (o DomainSecuritySettingsOutput) ToDomainSecuritySettingsOutputWithContext(ctx context.Context) DomainSecuritySettingsOutput {
	return o
}

func (o DomainSecuritySettingsOutput) ToDomainSecuritySettingsPtrOutput() DomainSecuritySettingsPtrOutput {
	return o.ToDomainSecuritySettingsPtrOutputWithContext(context.Background())
}

func (o DomainSecuritySettingsOutput) ToDomainSecuritySettingsPtrOutputWithContext(ctx context.Context) DomainSecuritySettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainSecuritySettings) *DomainSecuritySettings {
		return &v
	}).(DomainSecuritySettingsPtrOutput)
}

// A flag to determine whether or not KerberosArmoring is enabled or disabled.
func (o DomainSecuritySettingsOutput) KerberosArmoring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSecuritySettings) *string { return v.KerberosArmoring }).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not KerberosRc4Encryption is enabled or disabled.
func (o DomainSecuritySettingsOutput) KerberosRc4Encryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSecuritySettings) *string { return v.KerberosRc4Encryption }).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not NtlmV1 is enabled or disabled.
func (o DomainSecuritySettingsOutput) NtlmV1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSecuritySettings) *string { return v.NtlmV1 }).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not SyncKerberosPasswords is enabled or disabled.
func (o DomainSecuritySettingsOutput) SyncKerberosPasswords() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSecuritySettings) *string { return v.SyncKerberosPasswords }).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
func (o DomainSecuritySettingsOutput) SyncNtlmPasswords() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSecuritySettings) *string { return v.SyncNtlmPasswords }).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not SyncOnPremPasswords is enabled or disabled.
func (o DomainSecuritySettingsOutput) SyncOnPremPasswords() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSecuritySettings) *string { return v.SyncOnPremPasswords }).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not TlsV1 is enabled or disabled.
func (o DomainSecuritySettingsOutput) TlsV1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSecuritySettings) *string { return v.TlsV1 }).(pulumi.StringPtrOutput)
}

type DomainSecuritySettingsPtrOutput struct{ *pulumi.OutputState }

func (DomainSecuritySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainSecuritySettings)(nil)).Elem()
}

func (o DomainSecuritySettingsPtrOutput) ToDomainSecuritySettingsPtrOutput() DomainSecuritySettingsPtrOutput {
	return o
}

func (o DomainSecuritySettingsPtrOutput) ToDomainSecuritySettingsPtrOutputWithContext(ctx context.Context) DomainSecuritySettingsPtrOutput {
	return o
}

func (o DomainSecuritySettingsPtrOutput) Elem() DomainSecuritySettingsOutput {
	return o.ApplyT(func(v *DomainSecuritySettings) DomainSecuritySettings {
		if v != nil {
			return *v
		}
		var ret DomainSecuritySettings
		return ret
	}).(DomainSecuritySettingsOutput)
}

// A flag to determine whether or not KerberosArmoring is enabled or disabled.
func (o DomainSecuritySettingsPtrOutput) KerberosArmoring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainSecuritySettings) *string {
		if v == nil {
			return nil
		}
		return v.KerberosArmoring
	}).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not KerberosRc4Encryption is enabled or disabled.
func (o DomainSecuritySettingsPtrOutput) KerberosRc4Encryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainSecuritySettings) *string {
		if v == nil {
			return nil
		}
		return v.KerberosRc4Encryption
	}).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not NtlmV1 is enabled or disabled.
func (o DomainSecuritySettingsPtrOutput) NtlmV1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainSecuritySettings) *string {
		if v == nil {
			return nil
		}
		return v.NtlmV1
	}).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not SyncKerberosPasswords is enabled or disabled.
func (o DomainSecuritySettingsPtrOutput) SyncKerberosPasswords() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainSecuritySettings) *string {
		if v == nil {
			return nil
		}
		return v.SyncKerberosPasswords
	}).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
func (o DomainSecuritySettingsPtrOutput) SyncNtlmPasswords() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainSecuritySettings) *string {
		if v == nil {
			return nil
		}
		return v.SyncNtlmPasswords
	}).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not SyncOnPremPasswords is enabled or disabled.
func (o DomainSecuritySettingsPtrOutput) SyncOnPremPasswords() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainSecuritySettings) *string {
		if v == nil {
			return nil
		}
		return v.SyncOnPremPasswords
	}).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not TlsV1 is enabled or disabled.
func (o DomainSecuritySettingsPtrOutput) TlsV1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainSecuritySettings) *string {
		if v == nil {
			return nil
		}
		return v.TlsV1
	}).(pulumi.StringPtrOutput)
}

// Domain Security Settings
type DomainSecuritySettingsResponse struct {
	// A flag to determine whether or not KerberosArmoring is enabled or disabled.
	KerberosArmoring *string `pulumi:"kerberosArmoring"`
	// A flag to determine whether or not KerberosRc4Encryption is enabled or disabled.
	KerberosRc4Encryption *string `pulumi:"kerberosRc4Encryption"`
	// A flag to determine whether or not NtlmV1 is enabled or disabled.
	NtlmV1 *string `pulumi:"ntlmV1"`
	// A flag to determine whether or not SyncKerberosPasswords is enabled or disabled.
	SyncKerberosPasswords *string `pulumi:"syncKerberosPasswords"`
	// A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
	SyncNtlmPasswords *string `pulumi:"syncNtlmPasswords"`
	// A flag to determine whether or not SyncOnPremPasswords is enabled or disabled.
	SyncOnPremPasswords *string `pulumi:"syncOnPremPasswords"`
	// A flag to determine whether or not TlsV1 is enabled or disabled.
	TlsV1 *string `pulumi:"tlsV1"`
}

// Defaults sets the appropriate defaults for DomainSecuritySettingsResponse
func (val *DomainSecuritySettingsResponse) Defaults() *DomainSecuritySettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.KerberosArmoring) {
		kerberosArmoring_ := "Disabled"
		tmp.KerberosArmoring = &kerberosArmoring_
	}
	if isZero(tmp.KerberosRc4Encryption) {
		kerberosRc4Encryption_ := "Enabled"
		tmp.KerberosRc4Encryption = &kerberosRc4Encryption_
	}
	if isZero(tmp.NtlmV1) {
		ntlmV1_ := "Enabled"
		tmp.NtlmV1 = &ntlmV1_
	}
	if isZero(tmp.SyncKerberosPasswords) {
		syncKerberosPasswords_ := "Enabled"
		tmp.SyncKerberosPasswords = &syncKerberosPasswords_
	}
	if isZero(tmp.SyncNtlmPasswords) {
		syncNtlmPasswords_ := "Enabled"
		tmp.SyncNtlmPasswords = &syncNtlmPasswords_
	}
	if isZero(tmp.SyncOnPremPasswords) {
		syncOnPremPasswords_ := "Enabled"
		tmp.SyncOnPremPasswords = &syncOnPremPasswords_
	}
	if isZero(tmp.TlsV1) {
		tlsV1_ := "Enabled"
		tmp.TlsV1 = &tlsV1_
	}
	return &tmp
}

// Domain Security Settings
type DomainSecuritySettingsResponseOutput struct{ *pulumi.OutputState }

func (DomainSecuritySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainSecuritySettingsResponse)(nil)).Elem()
}

func (o DomainSecuritySettingsResponseOutput) ToDomainSecuritySettingsResponseOutput() DomainSecuritySettingsResponseOutput {
	return o
}

func (o DomainSecuritySettingsResponseOutput) ToDomainSecuritySettingsResponseOutputWithContext(ctx context.Context) DomainSecuritySettingsResponseOutput {
	return o
}

// A flag to determine whether or not KerberosArmoring is enabled or disabled.
func (o DomainSecuritySettingsResponseOutput) KerberosArmoring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSecuritySettingsResponse) *string { return v.KerberosArmoring }).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not KerberosRc4Encryption is enabled or disabled.
func (o DomainSecuritySettingsResponseOutput) KerberosRc4Encryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSecuritySettingsResponse) *string { return v.KerberosRc4Encryption }).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not NtlmV1 is enabled or disabled.
func (o DomainSecuritySettingsResponseOutput) NtlmV1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSecuritySettingsResponse) *string { return v.NtlmV1 }).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not SyncKerberosPasswords is enabled or disabled.
func (o DomainSecuritySettingsResponseOutput) SyncKerberosPasswords() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSecuritySettingsResponse) *string { return v.SyncKerberosPasswords }).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
func (o DomainSecuritySettingsResponseOutput) SyncNtlmPasswords() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSecuritySettingsResponse) *string { return v.SyncNtlmPasswords }).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not SyncOnPremPasswords is enabled or disabled.
func (o DomainSecuritySettingsResponseOutput) SyncOnPremPasswords() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSecuritySettingsResponse) *string { return v.SyncOnPremPasswords }).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not TlsV1 is enabled or disabled.
func (o DomainSecuritySettingsResponseOutput) TlsV1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainSecuritySettingsResponse) *string { return v.TlsV1 }).(pulumi.StringPtrOutput)
}

type DomainSecuritySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (DomainSecuritySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainSecuritySettingsResponse)(nil)).Elem()
}

func (o DomainSecuritySettingsResponsePtrOutput) ToDomainSecuritySettingsResponsePtrOutput() DomainSecuritySettingsResponsePtrOutput {
	return o
}

func (o DomainSecuritySettingsResponsePtrOutput) ToDomainSecuritySettingsResponsePtrOutputWithContext(ctx context.Context) DomainSecuritySettingsResponsePtrOutput {
	return o
}

func (o DomainSecuritySettingsResponsePtrOutput) Elem() DomainSecuritySettingsResponseOutput {
	return o.ApplyT(func(v *DomainSecuritySettingsResponse) DomainSecuritySettingsResponse {
		if v != nil {
			return *v
		}
		var ret DomainSecuritySettingsResponse
		return ret
	}).(DomainSecuritySettingsResponseOutput)
}

// A flag to determine whether or not KerberosArmoring is enabled or disabled.
func (o DomainSecuritySettingsResponsePtrOutput) KerberosArmoring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainSecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.KerberosArmoring
	}).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not KerberosRc4Encryption is enabled or disabled.
func (o DomainSecuritySettingsResponsePtrOutput) KerberosRc4Encryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainSecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.KerberosRc4Encryption
	}).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not NtlmV1 is enabled or disabled.
func (o DomainSecuritySettingsResponsePtrOutput) NtlmV1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainSecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.NtlmV1
	}).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not SyncKerberosPasswords is enabled or disabled.
func (o DomainSecuritySettingsResponsePtrOutput) SyncKerberosPasswords() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainSecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SyncKerberosPasswords
	}).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
func (o DomainSecuritySettingsResponsePtrOutput) SyncNtlmPasswords() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainSecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SyncNtlmPasswords
	}).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not SyncOnPremPasswords is enabled or disabled.
func (o DomainSecuritySettingsResponsePtrOutput) SyncOnPremPasswords() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainSecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SyncOnPremPasswords
	}).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not TlsV1 is enabled or disabled.
func (o DomainSecuritySettingsResponsePtrOutput) TlsV1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainSecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TlsV1
	}).(pulumi.StringPtrOutput)
}

// Forest Trust Setting
type ForestTrust struct {
	// Friendly Name
	FriendlyName *string `pulumi:"friendlyName"`
	// Remote Dns ips
	RemoteDnsIps *string `pulumi:"remoteDnsIps"`
	// Trust Direction
	TrustDirection *string `pulumi:"trustDirection"`
	// Trust Password
	TrustPassword *string `pulumi:"trustPassword"`
	// Trusted Domain FQDN
	TrustedDomainFqdn *string `pulumi:"trustedDomainFqdn"`
}

// ForestTrustInput is an input type that accepts ForestTrustArgs and ForestTrustOutput values.
// You can construct a concrete instance of `ForestTrustInput` via:
//
//	ForestTrustArgs{...}
type ForestTrustInput interface {
	pulumi.Input

	ToForestTrustOutput() ForestTrustOutput
	ToForestTrustOutputWithContext(context.Context) ForestTrustOutput
}

// Forest Trust Setting
type ForestTrustArgs struct {
	// Friendly Name
	FriendlyName pulumi.StringPtrInput `pulumi:"friendlyName"`
	// Remote Dns ips
	RemoteDnsIps pulumi.StringPtrInput `pulumi:"remoteDnsIps"`
	// Trust Direction
	TrustDirection pulumi.StringPtrInput `pulumi:"trustDirection"`
	// Trust Password
	TrustPassword pulumi.StringPtrInput `pulumi:"trustPassword"`
	// Trusted Domain FQDN
	TrustedDomainFqdn pulumi.StringPtrInput `pulumi:"trustedDomainFqdn"`
}

func (ForestTrustArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForestTrust)(nil)).Elem()
}

func (i ForestTrustArgs) ToForestTrustOutput() ForestTrustOutput {
	return i.ToForestTrustOutputWithContext(context.Background())
}

func (i ForestTrustArgs) ToForestTrustOutputWithContext(ctx context.Context) ForestTrustOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForestTrustOutput)
}

// ForestTrustArrayInput is an input type that accepts ForestTrustArray and ForestTrustArrayOutput values.
// You can construct a concrete instance of `ForestTrustArrayInput` via:
//
//	ForestTrustArray{ ForestTrustArgs{...} }
type ForestTrustArrayInput interface {
	pulumi.Input

	ToForestTrustArrayOutput() ForestTrustArrayOutput
	ToForestTrustArrayOutputWithContext(context.Context) ForestTrustArrayOutput
}

type ForestTrustArray []ForestTrustInput

func (ForestTrustArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ForestTrust)(nil)).Elem()
}

func (i ForestTrustArray) ToForestTrustArrayOutput() ForestTrustArrayOutput {
	return i.ToForestTrustArrayOutputWithContext(context.Background())
}

func (i ForestTrustArray) ToForestTrustArrayOutputWithContext(ctx context.Context) ForestTrustArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForestTrustArrayOutput)
}

// Forest Trust Setting
type ForestTrustOutput struct{ *pulumi.OutputState }

func (ForestTrustOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForestTrust)(nil)).Elem()
}

func (o ForestTrustOutput) ToForestTrustOutput() ForestTrustOutput {
	return o
}

func (o ForestTrustOutput) ToForestTrustOutputWithContext(ctx context.Context) ForestTrustOutput {
	return o
}

// Friendly Name
func (o ForestTrustOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForestTrust) *string { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// Remote Dns ips
func (o ForestTrustOutput) RemoteDnsIps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForestTrust) *string { return v.RemoteDnsIps }).(pulumi.StringPtrOutput)
}

// Trust Direction
func (o ForestTrustOutput) TrustDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForestTrust) *string { return v.TrustDirection }).(pulumi.StringPtrOutput)
}

// Trust Password
func (o ForestTrustOutput) TrustPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForestTrust) *string { return v.TrustPassword }).(pulumi.StringPtrOutput)
}

// Trusted Domain FQDN
func (o ForestTrustOutput) TrustedDomainFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForestTrust) *string { return v.TrustedDomainFqdn }).(pulumi.StringPtrOutput)
}

type ForestTrustArrayOutput struct{ *pulumi.OutputState }

func (ForestTrustArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ForestTrust)(nil)).Elem()
}

func (o ForestTrustArrayOutput) ToForestTrustArrayOutput() ForestTrustArrayOutput {
	return o
}

func (o ForestTrustArrayOutput) ToForestTrustArrayOutputWithContext(ctx context.Context) ForestTrustArrayOutput {
	return o
}

func (o ForestTrustArrayOutput) Index(i pulumi.IntInput) ForestTrustOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ForestTrust {
		return vs[0].([]ForestTrust)[vs[1].(int)]
	}).(ForestTrustOutput)
}

// Forest Trust Setting
type ForestTrustResponse struct {
	// Friendly Name
	FriendlyName *string `pulumi:"friendlyName"`
	// Remote Dns ips
	RemoteDnsIps *string `pulumi:"remoteDnsIps"`
	// Trust Direction
	TrustDirection *string `pulumi:"trustDirection"`
	// Trust Password
	TrustPassword *string `pulumi:"trustPassword"`
	// Trusted Domain FQDN
	TrustedDomainFqdn *string `pulumi:"trustedDomainFqdn"`
}

// Forest Trust Setting
type ForestTrustResponseOutput struct{ *pulumi.OutputState }

func (ForestTrustResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForestTrustResponse)(nil)).Elem()
}

func (o ForestTrustResponseOutput) ToForestTrustResponseOutput() ForestTrustResponseOutput {
	return o
}

func (o ForestTrustResponseOutput) ToForestTrustResponseOutputWithContext(ctx context.Context) ForestTrustResponseOutput {
	return o
}

// Friendly Name
func (o ForestTrustResponseOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForestTrustResponse) *string { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// Remote Dns ips
func (o ForestTrustResponseOutput) RemoteDnsIps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForestTrustResponse) *string { return v.RemoteDnsIps }).(pulumi.StringPtrOutput)
}

// Trust Direction
func (o ForestTrustResponseOutput) TrustDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForestTrustResponse) *string { return v.TrustDirection }).(pulumi.StringPtrOutput)
}

// Trust Password
func (o ForestTrustResponseOutput) TrustPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForestTrustResponse) *string { return v.TrustPassword }).(pulumi.StringPtrOutput)
}

// Trusted Domain FQDN
func (o ForestTrustResponseOutput) TrustedDomainFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForestTrustResponse) *string { return v.TrustedDomainFqdn }).(pulumi.StringPtrOutput)
}

type ForestTrustResponseArrayOutput struct{ *pulumi.OutputState }

func (ForestTrustResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ForestTrustResponse)(nil)).Elem()
}

func (o ForestTrustResponseArrayOutput) ToForestTrustResponseArrayOutput() ForestTrustResponseArrayOutput {
	return o
}

func (o ForestTrustResponseArrayOutput) ToForestTrustResponseArrayOutputWithContext(ctx context.Context) ForestTrustResponseArrayOutput {
	return o
}

func (o ForestTrustResponseArrayOutput) Index(i pulumi.IntInput) ForestTrustResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ForestTrustResponse {
		return vs[0].([]ForestTrustResponse)[vs[1].(int)]
	}).(ForestTrustResponseOutput)
}

// Health Alert Description
type HealthAlertResponse struct {
	// Health Alert Id
	Id string `pulumi:"id"`
	// Health Alert Issue
	Issue string `pulumi:"issue"`
	// Health Alert Last Detected DateTime
	LastDetected string `pulumi:"lastDetected"`
	// Health Alert Name
	Name string `pulumi:"name"`
	// Health Alert Raised DateTime
	Raised string `pulumi:"raised"`
	// Health Alert TSG Link
	ResolutionUri string `pulumi:"resolutionUri"`
	// Health Alert Severity
	Severity string `pulumi:"severity"`
}

// Health Alert Description
type HealthAlertResponseOutput struct{ *pulumi.OutputState }

func (HealthAlertResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthAlertResponse)(nil)).Elem()
}

func (o HealthAlertResponseOutput) ToHealthAlertResponseOutput() HealthAlertResponseOutput {
	return o
}

func (o HealthAlertResponseOutput) ToHealthAlertResponseOutputWithContext(ctx context.Context) HealthAlertResponseOutput {
	return o
}

// Health Alert Id
func (o HealthAlertResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v HealthAlertResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Health Alert Issue
func (o HealthAlertResponseOutput) Issue() pulumi.StringOutput {
	return o.ApplyT(func(v HealthAlertResponse) string { return v.Issue }).(pulumi.StringOutput)
}

// Health Alert Last Detected DateTime
func (o HealthAlertResponseOutput) LastDetected() pulumi.StringOutput {
	return o.ApplyT(func(v HealthAlertResponse) string { return v.LastDetected }).(pulumi.StringOutput)
}

// Health Alert Name
func (o HealthAlertResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HealthAlertResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Health Alert Raised DateTime
func (o HealthAlertResponseOutput) Raised() pulumi.StringOutput {
	return o.ApplyT(func(v HealthAlertResponse) string { return v.Raised }).(pulumi.StringOutput)
}

// Health Alert TSG Link
func (o HealthAlertResponseOutput) ResolutionUri() pulumi.StringOutput {
	return o.ApplyT(func(v HealthAlertResponse) string { return v.ResolutionUri }).(pulumi.StringOutput)
}

// Health Alert Severity
func (o HealthAlertResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v HealthAlertResponse) string { return v.Severity }).(pulumi.StringOutput)
}

type HealthAlertResponseArrayOutput struct{ *pulumi.OutputState }

func (HealthAlertResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthAlertResponse)(nil)).Elem()
}

func (o HealthAlertResponseArrayOutput) ToHealthAlertResponseArrayOutput() HealthAlertResponseArrayOutput {
	return o
}

func (o HealthAlertResponseArrayOutput) ToHealthAlertResponseArrayOutputWithContext(ctx context.Context) HealthAlertResponseArrayOutput {
	return o
}

func (o HealthAlertResponseArrayOutput) Index(i pulumi.IntInput) HealthAlertResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HealthAlertResponse {
		return vs[0].([]HealthAlertResponse)[vs[1].(int)]
	}).(HealthAlertResponseOutput)
}

// Health Monitor Description
type HealthMonitorResponse struct {
	// Health Monitor Details
	Details string `pulumi:"details"`
	// Health Monitor Id
	Id string `pulumi:"id"`
	// Health Monitor Name
	Name string `pulumi:"name"`
}

// Health Monitor Description
type HealthMonitorResponseOutput struct{ *pulumi.OutputState }

func (HealthMonitorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthMonitorResponse)(nil)).Elem()
}

func (o HealthMonitorResponseOutput) ToHealthMonitorResponseOutput() HealthMonitorResponseOutput {
	return o
}

func (o HealthMonitorResponseOutput) ToHealthMonitorResponseOutputWithContext(ctx context.Context) HealthMonitorResponseOutput {
	return o
}

// Health Monitor Details
func (o HealthMonitorResponseOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v HealthMonitorResponse) string { return v.Details }).(pulumi.StringOutput)
}

// Health Monitor Id
func (o HealthMonitorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v HealthMonitorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Health Monitor Name
func (o HealthMonitorResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HealthMonitorResponse) string { return v.Name }).(pulumi.StringOutput)
}

type HealthMonitorResponseArrayOutput struct{ *pulumi.OutputState }

func (HealthMonitorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthMonitorResponse)(nil)).Elem()
}

func (o HealthMonitorResponseArrayOutput) ToHealthMonitorResponseArrayOutput() HealthMonitorResponseArrayOutput {
	return o
}

func (o HealthMonitorResponseArrayOutput) ToHealthMonitorResponseArrayOutputWithContext(ctx context.Context) HealthMonitorResponseArrayOutput {
	return o
}

func (o HealthMonitorResponseArrayOutput) Index(i pulumi.IntInput) HealthMonitorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HealthMonitorResponse {
		return vs[0].([]HealthMonitorResponse)[vs[1].(int)]
	}).(HealthMonitorResponseOutput)
}

// Secure LDAP Settings
type LdapsSettings struct {
	// A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
	ExternalAccess *string `pulumi:"externalAccess"`
	// A flag to determine whether or not Secure LDAP is enabled or disabled.
	Ldaps *string `pulumi:"ldaps"`
	// The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
	PfxCertificate *string `pulumi:"pfxCertificate"`
	// The password to decrypt the provided Secure LDAP certificate pfx file.
	PfxCertificatePassword *string `pulumi:"pfxCertificatePassword"`
}

// Defaults sets the appropriate defaults for LdapsSettings
func (val *LdapsSettings) Defaults() *LdapsSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ExternalAccess) {
		externalAccess_ := "Disabled"
		tmp.ExternalAccess = &externalAccess_
	}
	if isZero(tmp.Ldaps) {
		ldaps_ := "Disabled"
		tmp.Ldaps = &ldaps_
	}
	return &tmp
}

// LdapsSettingsInput is an input type that accepts LdapsSettingsArgs and LdapsSettingsOutput values.
// You can construct a concrete instance of `LdapsSettingsInput` via:
//
//	LdapsSettingsArgs{...}
type LdapsSettingsInput interface {
	pulumi.Input

	ToLdapsSettingsOutput() LdapsSettingsOutput
	ToLdapsSettingsOutputWithContext(context.Context) LdapsSettingsOutput
}

// Secure LDAP Settings
type LdapsSettingsArgs struct {
	// A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
	ExternalAccess pulumi.StringPtrInput `pulumi:"externalAccess"`
	// A flag to determine whether or not Secure LDAP is enabled or disabled.
	Ldaps pulumi.StringPtrInput `pulumi:"ldaps"`
	// The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
	PfxCertificate pulumi.StringPtrInput `pulumi:"pfxCertificate"`
	// The password to decrypt the provided Secure LDAP certificate pfx file.
	PfxCertificatePassword pulumi.StringPtrInput `pulumi:"pfxCertificatePassword"`
}

// Defaults sets the appropriate defaults for LdapsSettingsArgs
func (val *LdapsSettingsArgs) Defaults() *LdapsSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ExternalAccess) {
		tmp.ExternalAccess = pulumi.StringPtr("Disabled")
	}
	if isZero(tmp.Ldaps) {
		tmp.Ldaps = pulumi.StringPtr("Disabled")
	}
	return &tmp
}
func (LdapsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LdapsSettings)(nil)).Elem()
}

func (i LdapsSettingsArgs) ToLdapsSettingsOutput() LdapsSettingsOutput {
	return i.ToLdapsSettingsOutputWithContext(context.Background())
}

func (i LdapsSettingsArgs) ToLdapsSettingsOutputWithContext(ctx context.Context) LdapsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LdapsSettingsOutput)
}

func (i LdapsSettingsArgs) ToLdapsSettingsPtrOutput() LdapsSettingsPtrOutput {
	return i.ToLdapsSettingsPtrOutputWithContext(context.Background())
}

func (i LdapsSettingsArgs) ToLdapsSettingsPtrOutputWithContext(ctx context.Context) LdapsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LdapsSettingsOutput).ToLdapsSettingsPtrOutputWithContext(ctx)
}

// LdapsSettingsPtrInput is an input type that accepts LdapsSettingsArgs, LdapsSettingsPtr and LdapsSettingsPtrOutput values.
// You can construct a concrete instance of `LdapsSettingsPtrInput` via:
//
//	        LdapsSettingsArgs{...}
//
//	or:
//
//	        nil
type LdapsSettingsPtrInput interface {
	pulumi.Input

	ToLdapsSettingsPtrOutput() LdapsSettingsPtrOutput
	ToLdapsSettingsPtrOutputWithContext(context.Context) LdapsSettingsPtrOutput
}

type ldapsSettingsPtrType LdapsSettingsArgs

func LdapsSettingsPtr(v *LdapsSettingsArgs) LdapsSettingsPtrInput {
	return (*ldapsSettingsPtrType)(v)
}

func (*ldapsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LdapsSettings)(nil)).Elem()
}

func (i *ldapsSettingsPtrType) ToLdapsSettingsPtrOutput() LdapsSettingsPtrOutput {
	return i.ToLdapsSettingsPtrOutputWithContext(context.Background())
}

func (i *ldapsSettingsPtrType) ToLdapsSettingsPtrOutputWithContext(ctx context.Context) LdapsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LdapsSettingsPtrOutput)
}

// Secure LDAP Settings
type LdapsSettingsOutput struct{ *pulumi.OutputState }

func (LdapsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LdapsSettings)(nil)).Elem()
}

func (o LdapsSettingsOutput) ToLdapsSettingsOutput() LdapsSettingsOutput {
	return o
}

func (o LdapsSettingsOutput) ToLdapsSettingsOutputWithContext(ctx context.Context) LdapsSettingsOutput {
	return o
}

func (o LdapsSettingsOutput) ToLdapsSettingsPtrOutput() LdapsSettingsPtrOutput {
	return o.ToLdapsSettingsPtrOutputWithContext(context.Background())
}

func (o LdapsSettingsOutput) ToLdapsSettingsPtrOutputWithContext(ctx context.Context) LdapsSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LdapsSettings) *LdapsSettings {
		return &v
	}).(LdapsSettingsPtrOutput)
}

// A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
func (o LdapsSettingsOutput) ExternalAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LdapsSettings) *string { return v.ExternalAccess }).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not Secure LDAP is enabled or disabled.
func (o LdapsSettingsOutput) Ldaps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LdapsSettings) *string { return v.Ldaps }).(pulumi.StringPtrOutput)
}

// The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
func (o LdapsSettingsOutput) PfxCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LdapsSettings) *string { return v.PfxCertificate }).(pulumi.StringPtrOutput)
}

// The password to decrypt the provided Secure LDAP certificate pfx file.
func (o LdapsSettingsOutput) PfxCertificatePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LdapsSettings) *string { return v.PfxCertificatePassword }).(pulumi.StringPtrOutput)
}

type LdapsSettingsPtrOutput struct{ *pulumi.OutputState }

func (LdapsSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LdapsSettings)(nil)).Elem()
}

func (o LdapsSettingsPtrOutput) ToLdapsSettingsPtrOutput() LdapsSettingsPtrOutput {
	return o
}

func (o LdapsSettingsPtrOutput) ToLdapsSettingsPtrOutputWithContext(ctx context.Context) LdapsSettingsPtrOutput {
	return o
}

func (o LdapsSettingsPtrOutput) Elem() LdapsSettingsOutput {
	return o.ApplyT(func(v *LdapsSettings) LdapsSettings {
		if v != nil {
			return *v
		}
		var ret LdapsSettings
		return ret
	}).(LdapsSettingsOutput)
}

// A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
func (o LdapsSettingsPtrOutput) ExternalAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LdapsSettings) *string {
		if v == nil {
			return nil
		}
		return v.ExternalAccess
	}).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not Secure LDAP is enabled or disabled.
func (o LdapsSettingsPtrOutput) Ldaps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LdapsSettings) *string {
		if v == nil {
			return nil
		}
		return v.Ldaps
	}).(pulumi.StringPtrOutput)
}

// The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
func (o LdapsSettingsPtrOutput) PfxCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LdapsSettings) *string {
		if v == nil {
			return nil
		}
		return v.PfxCertificate
	}).(pulumi.StringPtrOutput)
}

// The password to decrypt the provided Secure LDAP certificate pfx file.
func (o LdapsSettingsPtrOutput) PfxCertificatePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LdapsSettings) *string {
		if v == nil {
			return nil
		}
		return v.PfxCertificatePassword
	}).(pulumi.StringPtrOutput)
}

// Secure LDAP Settings
type LdapsSettingsResponse struct {
	// NotAfter DateTime of configure ldaps certificate.
	CertificateNotAfter string `pulumi:"certificateNotAfter"`
	// Thumbprint of configure ldaps certificate.
	CertificateThumbprint string `pulumi:"certificateThumbprint"`
	// A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
	ExternalAccess *string `pulumi:"externalAccess"`
	// A flag to determine whether or not Secure LDAP is enabled or disabled.
	Ldaps *string `pulumi:"ldaps"`
	// The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
	PfxCertificate *string `pulumi:"pfxCertificate"`
	// The password to decrypt the provided Secure LDAP certificate pfx file.
	PfxCertificatePassword *string `pulumi:"pfxCertificatePassword"`
	// Public certificate used to configure secure ldap.
	PublicCertificate string `pulumi:"publicCertificate"`
}

// Defaults sets the appropriate defaults for LdapsSettingsResponse
func (val *LdapsSettingsResponse) Defaults() *LdapsSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ExternalAccess) {
		externalAccess_ := "Disabled"
		tmp.ExternalAccess = &externalAccess_
	}
	if isZero(tmp.Ldaps) {
		ldaps_ := "Disabled"
		tmp.Ldaps = &ldaps_
	}
	return &tmp
}

// Secure LDAP Settings
type LdapsSettingsResponseOutput struct{ *pulumi.OutputState }

func (LdapsSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LdapsSettingsResponse)(nil)).Elem()
}

func (o LdapsSettingsResponseOutput) ToLdapsSettingsResponseOutput() LdapsSettingsResponseOutput {
	return o
}

func (o LdapsSettingsResponseOutput) ToLdapsSettingsResponseOutputWithContext(ctx context.Context) LdapsSettingsResponseOutput {
	return o
}

// NotAfter DateTime of configure ldaps certificate.
func (o LdapsSettingsResponseOutput) CertificateNotAfter() pulumi.StringOutput {
	return o.ApplyT(func(v LdapsSettingsResponse) string { return v.CertificateNotAfter }).(pulumi.StringOutput)
}

// Thumbprint of configure ldaps certificate.
func (o LdapsSettingsResponseOutput) CertificateThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v LdapsSettingsResponse) string { return v.CertificateThumbprint }).(pulumi.StringOutput)
}

// A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
func (o LdapsSettingsResponseOutput) ExternalAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LdapsSettingsResponse) *string { return v.ExternalAccess }).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not Secure LDAP is enabled or disabled.
func (o LdapsSettingsResponseOutput) Ldaps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LdapsSettingsResponse) *string { return v.Ldaps }).(pulumi.StringPtrOutput)
}

// The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
func (o LdapsSettingsResponseOutput) PfxCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LdapsSettingsResponse) *string { return v.PfxCertificate }).(pulumi.StringPtrOutput)
}

// The password to decrypt the provided Secure LDAP certificate pfx file.
func (o LdapsSettingsResponseOutput) PfxCertificatePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LdapsSettingsResponse) *string { return v.PfxCertificatePassword }).(pulumi.StringPtrOutput)
}

// Public certificate used to configure secure ldap.
func (o LdapsSettingsResponseOutput) PublicCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v LdapsSettingsResponse) string { return v.PublicCertificate }).(pulumi.StringOutput)
}

type LdapsSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (LdapsSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LdapsSettingsResponse)(nil)).Elem()
}

func (o LdapsSettingsResponsePtrOutput) ToLdapsSettingsResponsePtrOutput() LdapsSettingsResponsePtrOutput {
	return o
}

func (o LdapsSettingsResponsePtrOutput) ToLdapsSettingsResponsePtrOutputWithContext(ctx context.Context) LdapsSettingsResponsePtrOutput {
	return o
}

func (o LdapsSettingsResponsePtrOutput) Elem() LdapsSettingsResponseOutput {
	return o.ApplyT(func(v *LdapsSettingsResponse) LdapsSettingsResponse {
		if v != nil {
			return *v
		}
		var ret LdapsSettingsResponse
		return ret
	}).(LdapsSettingsResponseOutput)
}

// NotAfter DateTime of configure ldaps certificate.
func (o LdapsSettingsResponsePtrOutput) CertificateNotAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LdapsSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CertificateNotAfter
	}).(pulumi.StringPtrOutput)
}

// Thumbprint of configure ldaps certificate.
func (o LdapsSettingsResponsePtrOutput) CertificateThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LdapsSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CertificateThumbprint
	}).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
func (o LdapsSettingsResponsePtrOutput) ExternalAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LdapsSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExternalAccess
	}).(pulumi.StringPtrOutput)
}

// A flag to determine whether or not Secure LDAP is enabled or disabled.
func (o LdapsSettingsResponsePtrOutput) Ldaps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LdapsSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Ldaps
	}).(pulumi.StringPtrOutput)
}

// The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
func (o LdapsSettingsResponsePtrOutput) PfxCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LdapsSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PfxCertificate
	}).(pulumi.StringPtrOutput)
}

// The password to decrypt the provided Secure LDAP certificate pfx file.
func (o LdapsSettingsResponsePtrOutput) PfxCertificatePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LdapsSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PfxCertificatePassword
	}).(pulumi.StringPtrOutput)
}

// Public certificate used to configure secure ldap.
func (o LdapsSettingsResponsePtrOutput) PublicCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LdapsSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PublicCertificate
	}).(pulumi.StringPtrOutput)
}

// Migration Progress
type MigrationProgressResponse struct {
	// Completion Percentage
	CompletionPercentage *float64 `pulumi:"completionPercentage"`
	// Progress Message
	ProgressMessage *string `pulumi:"progressMessage"`
}

// Migration Progress
type MigrationProgressResponseOutput struct{ *pulumi.OutputState }

func (MigrationProgressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationProgressResponse)(nil)).Elem()
}

func (o MigrationProgressResponseOutput) ToMigrationProgressResponseOutput() MigrationProgressResponseOutput {
	return o
}

func (o MigrationProgressResponseOutput) ToMigrationProgressResponseOutputWithContext(ctx context.Context) MigrationProgressResponseOutput {
	return o
}

// Completion Percentage
func (o MigrationProgressResponseOutput) CompletionPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MigrationProgressResponse) *float64 { return v.CompletionPercentage }).(pulumi.Float64PtrOutput)
}

// Progress Message
func (o MigrationProgressResponseOutput) ProgressMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationProgressResponse) *string { return v.ProgressMessage }).(pulumi.StringPtrOutput)
}

// Migration Properties
type MigrationPropertiesResponse struct {
	// Migration Progress
	MigrationProgress MigrationProgressResponse `pulumi:"migrationProgress"`
	// Old Subnet Id
	OldSubnetId string `pulumi:"oldSubnetId"`
	// Old Vnet Site Id
	OldVnetSiteId string `pulumi:"oldVnetSiteId"`
}

// Migration Properties
type MigrationPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MigrationPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationPropertiesResponse)(nil)).Elem()
}

func (o MigrationPropertiesResponseOutput) ToMigrationPropertiesResponseOutput() MigrationPropertiesResponseOutput {
	return o
}

func (o MigrationPropertiesResponseOutput) ToMigrationPropertiesResponseOutputWithContext(ctx context.Context) MigrationPropertiesResponseOutput {
	return o
}

// Migration Progress
func (o MigrationPropertiesResponseOutput) MigrationProgress() MigrationProgressResponseOutput {
	return o.ApplyT(func(v MigrationPropertiesResponse) MigrationProgressResponse { return v.MigrationProgress }).(MigrationProgressResponseOutput)
}

// Old Subnet Id
func (o MigrationPropertiesResponseOutput) OldSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationPropertiesResponse) string { return v.OldSubnetId }).(pulumi.StringOutput)
}

// Old Vnet Site Id
func (o MigrationPropertiesResponseOutput) OldVnetSiteId() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationPropertiesResponse) string { return v.OldVnetSiteId }).(pulumi.StringOutput)
}

// Settings for notification
type NotificationSettings struct {
	// The list of additional recipients
	AdditionalRecipients []string `pulumi:"additionalRecipients"`
	// Should domain controller admins be notified
	NotifyDcAdmins *string `pulumi:"notifyDcAdmins"`
	// Should global admins be notified
	NotifyGlobalAdmins *string `pulumi:"notifyGlobalAdmins"`
}

// NotificationSettingsInput is an input type that accepts NotificationSettingsArgs and NotificationSettingsOutput values.
// You can construct a concrete instance of `NotificationSettingsInput` via:
//
//	NotificationSettingsArgs{...}
type NotificationSettingsInput interface {
	pulumi.Input

	ToNotificationSettingsOutput() NotificationSettingsOutput
	ToNotificationSettingsOutputWithContext(context.Context) NotificationSettingsOutput
}

// Settings for notification
type NotificationSettingsArgs struct {
	// The list of additional recipients
	AdditionalRecipients pulumi.StringArrayInput `pulumi:"additionalRecipients"`
	// Should domain controller admins be notified
	NotifyDcAdmins pulumi.StringPtrInput `pulumi:"notifyDcAdmins"`
	// Should global admins be notified
	NotifyGlobalAdmins pulumi.StringPtrInput `pulumi:"notifyGlobalAdmins"`
}

func (NotificationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationSettings)(nil)).Elem()
}

func (i NotificationSettingsArgs) ToNotificationSettingsOutput() NotificationSettingsOutput {
	return i.ToNotificationSettingsOutputWithContext(context.Background())
}

func (i NotificationSettingsArgs) ToNotificationSettingsOutputWithContext(ctx context.Context) NotificationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationSettingsOutput)
}

func (i NotificationSettingsArgs) ToNotificationSettingsPtrOutput() NotificationSettingsPtrOutput {
	return i.ToNotificationSettingsPtrOutputWithContext(context.Background())
}

func (i NotificationSettingsArgs) ToNotificationSettingsPtrOutputWithContext(ctx context.Context) NotificationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationSettingsOutput).ToNotificationSettingsPtrOutputWithContext(ctx)
}

// NotificationSettingsPtrInput is an input type that accepts NotificationSettingsArgs, NotificationSettingsPtr and NotificationSettingsPtrOutput values.
// You can construct a concrete instance of `NotificationSettingsPtrInput` via:
//
//	        NotificationSettingsArgs{...}
//
//	or:
//
//	        nil
type NotificationSettingsPtrInput interface {
	pulumi.Input

	ToNotificationSettingsPtrOutput() NotificationSettingsPtrOutput
	ToNotificationSettingsPtrOutputWithContext(context.Context) NotificationSettingsPtrOutput
}

type notificationSettingsPtrType NotificationSettingsArgs

func NotificationSettingsPtr(v *NotificationSettingsArgs) NotificationSettingsPtrInput {
	return (*notificationSettingsPtrType)(v)
}

func (*notificationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationSettings)(nil)).Elem()
}

func (i *notificationSettingsPtrType) ToNotificationSettingsPtrOutput() NotificationSettingsPtrOutput {
	return i.ToNotificationSettingsPtrOutputWithContext(context.Background())
}

func (i *notificationSettingsPtrType) ToNotificationSettingsPtrOutputWithContext(ctx context.Context) NotificationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationSettingsPtrOutput)
}

// Settings for notification
type NotificationSettingsOutput struct{ *pulumi.OutputState }

func (NotificationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationSettings)(nil)).Elem()
}

func (o NotificationSettingsOutput) ToNotificationSettingsOutput() NotificationSettingsOutput {
	return o
}

func (o NotificationSettingsOutput) ToNotificationSettingsOutputWithContext(ctx context.Context) NotificationSettingsOutput {
	return o
}

func (o NotificationSettingsOutput) ToNotificationSettingsPtrOutput() NotificationSettingsPtrOutput {
	return o.ToNotificationSettingsPtrOutputWithContext(context.Background())
}

func (o NotificationSettingsOutput) ToNotificationSettingsPtrOutputWithContext(ctx context.Context) NotificationSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NotificationSettings) *NotificationSettings {
		return &v
	}).(NotificationSettingsPtrOutput)
}

// The list of additional recipients
func (o NotificationSettingsOutput) AdditionalRecipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationSettings) []string { return v.AdditionalRecipients }).(pulumi.StringArrayOutput)
}

// Should domain controller admins be notified
func (o NotificationSettingsOutput) NotifyDcAdmins() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationSettings) *string { return v.NotifyDcAdmins }).(pulumi.StringPtrOutput)
}

// Should global admins be notified
func (o NotificationSettingsOutput) NotifyGlobalAdmins() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationSettings) *string { return v.NotifyGlobalAdmins }).(pulumi.StringPtrOutput)
}

type NotificationSettingsPtrOutput struct{ *pulumi.OutputState }

func (NotificationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationSettings)(nil)).Elem()
}

func (o NotificationSettingsPtrOutput) ToNotificationSettingsPtrOutput() NotificationSettingsPtrOutput {
	return o
}

func (o NotificationSettingsPtrOutput) ToNotificationSettingsPtrOutputWithContext(ctx context.Context) NotificationSettingsPtrOutput {
	return o
}

func (o NotificationSettingsPtrOutput) Elem() NotificationSettingsOutput {
	return o.ApplyT(func(v *NotificationSettings) NotificationSettings {
		if v != nil {
			return *v
		}
		var ret NotificationSettings
		return ret
	}).(NotificationSettingsOutput)
}

// The list of additional recipients
func (o NotificationSettingsPtrOutput) AdditionalRecipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NotificationSettings) []string {
		if v == nil {
			return nil
		}
		return v.AdditionalRecipients
	}).(pulumi.StringArrayOutput)
}

// Should domain controller admins be notified
func (o NotificationSettingsPtrOutput) NotifyDcAdmins() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationSettings) *string {
		if v == nil {
			return nil
		}
		return v.NotifyDcAdmins
	}).(pulumi.StringPtrOutput)
}

// Should global admins be notified
func (o NotificationSettingsPtrOutput) NotifyGlobalAdmins() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationSettings) *string {
		if v == nil {
			return nil
		}
		return v.NotifyGlobalAdmins
	}).(pulumi.StringPtrOutput)
}

// Settings for notification
type NotificationSettingsResponse struct {
	// The list of additional recipients
	AdditionalRecipients []string `pulumi:"additionalRecipients"`
	// Should domain controller admins be notified
	NotifyDcAdmins *string `pulumi:"notifyDcAdmins"`
	// Should global admins be notified
	NotifyGlobalAdmins *string `pulumi:"notifyGlobalAdmins"`
}

// Settings for notification
type NotificationSettingsResponseOutput struct{ *pulumi.OutputState }

func (NotificationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationSettingsResponse)(nil)).Elem()
}

func (o NotificationSettingsResponseOutput) ToNotificationSettingsResponseOutput() NotificationSettingsResponseOutput {
	return o
}

func (o NotificationSettingsResponseOutput) ToNotificationSettingsResponseOutputWithContext(ctx context.Context) NotificationSettingsResponseOutput {
	return o
}

// The list of additional recipients
func (o NotificationSettingsResponseOutput) AdditionalRecipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationSettingsResponse) []string { return v.AdditionalRecipients }).(pulumi.StringArrayOutput)
}

// Should domain controller admins be notified
func (o NotificationSettingsResponseOutput) NotifyDcAdmins() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationSettingsResponse) *string { return v.NotifyDcAdmins }).(pulumi.StringPtrOutput)
}

// Should global admins be notified
func (o NotificationSettingsResponseOutput) NotifyGlobalAdmins() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationSettingsResponse) *string { return v.NotifyGlobalAdmins }).(pulumi.StringPtrOutput)
}

type NotificationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (NotificationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationSettingsResponse)(nil)).Elem()
}

func (o NotificationSettingsResponsePtrOutput) ToNotificationSettingsResponsePtrOutput() NotificationSettingsResponsePtrOutput {
	return o
}

func (o NotificationSettingsResponsePtrOutput) ToNotificationSettingsResponsePtrOutputWithContext(ctx context.Context) NotificationSettingsResponsePtrOutput {
	return o
}

func (o NotificationSettingsResponsePtrOutput) Elem() NotificationSettingsResponseOutput {
	return o.ApplyT(func(v *NotificationSettingsResponse) NotificationSettingsResponse {
		if v != nil {
			return *v
		}
		var ret NotificationSettingsResponse
		return ret
	}).(NotificationSettingsResponseOutput)
}

// The list of additional recipients
func (o NotificationSettingsResponsePtrOutput) AdditionalRecipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NotificationSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.AdditionalRecipients
	}).(pulumi.StringArrayOutput)
}

// Should domain controller admins be notified
func (o NotificationSettingsResponsePtrOutput) NotifyDcAdmins() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.NotifyDcAdmins
	}).(pulumi.StringPtrOutput)
}

// Should global admins be notified
func (o NotificationSettingsResponsePtrOutput) NotifyGlobalAdmins() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.NotifyGlobalAdmins
	}).(pulumi.StringPtrOutput)
}

// Replica Set Definition
type ReplicaSet struct {
	// Virtual network location
	Location *string `pulumi:"location"`
	// The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
	SubnetId *string `pulumi:"subnetId"`
}

// ReplicaSetInput is an input type that accepts ReplicaSetArgs and ReplicaSetOutput values.
// You can construct a concrete instance of `ReplicaSetInput` via:
//
//	ReplicaSetArgs{...}
type ReplicaSetInput interface {
	pulumi.Input

	ToReplicaSetOutput() ReplicaSetOutput
	ToReplicaSetOutputWithContext(context.Context) ReplicaSetOutput
}

// Replica Set Definition
type ReplicaSetArgs struct {
	// Virtual network location
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (ReplicaSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaSet)(nil)).Elem()
}

func (i ReplicaSetArgs) ToReplicaSetOutput() ReplicaSetOutput {
	return i.ToReplicaSetOutputWithContext(context.Background())
}

func (i ReplicaSetArgs) ToReplicaSetOutputWithContext(ctx context.Context) ReplicaSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetOutput)
}

// ReplicaSetArrayInput is an input type that accepts ReplicaSetArray and ReplicaSetArrayOutput values.
// You can construct a concrete instance of `ReplicaSetArrayInput` via:
//
//	ReplicaSetArray{ ReplicaSetArgs{...} }
type ReplicaSetArrayInput interface {
	pulumi.Input

	ToReplicaSetArrayOutput() ReplicaSetArrayOutput
	ToReplicaSetArrayOutputWithContext(context.Context) ReplicaSetArrayOutput
}

type ReplicaSetArray []ReplicaSetInput

func (ReplicaSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicaSet)(nil)).Elem()
}

func (i ReplicaSetArray) ToReplicaSetArrayOutput() ReplicaSetArrayOutput {
	return i.ToReplicaSetArrayOutputWithContext(context.Background())
}

func (i ReplicaSetArray) ToReplicaSetArrayOutputWithContext(ctx context.Context) ReplicaSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetArrayOutput)
}

// Replica Set Definition
type ReplicaSetOutput struct{ *pulumi.OutputState }

func (ReplicaSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaSet)(nil)).Elem()
}

func (o ReplicaSetOutput) ToReplicaSetOutput() ReplicaSetOutput {
	return o
}

func (o ReplicaSetOutput) ToReplicaSetOutputWithContext(ctx context.Context) ReplicaSetOutput {
	return o
}

// Virtual network location
func (o ReplicaSetOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicaSet) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
func (o ReplicaSetOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicaSet) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type ReplicaSetArrayOutput struct{ *pulumi.OutputState }

func (ReplicaSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicaSet)(nil)).Elem()
}

func (o ReplicaSetArrayOutput) ToReplicaSetArrayOutput() ReplicaSetArrayOutput {
	return o
}

func (o ReplicaSetArrayOutput) ToReplicaSetArrayOutputWithContext(ctx context.Context) ReplicaSetArrayOutput {
	return o
}

func (o ReplicaSetArrayOutput) Index(i pulumi.IntInput) ReplicaSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicaSet {
		return vs[0].([]ReplicaSet)[vs[1].(int)]
	}).(ReplicaSetOutput)
}

// Replica Set Definition
type ReplicaSetResponse struct {
	// List of Domain Controller IP Address
	DomainControllerIpAddress []string `pulumi:"domainControllerIpAddress"`
	// External access ip address.
	ExternalAccessIpAddress string `pulumi:"externalAccessIpAddress"`
	// List of Domain Health Alerts
	HealthAlerts []HealthAlertResponse `pulumi:"healthAlerts"`
	// Last domain evaluation run DateTime
	HealthLastEvaluated string `pulumi:"healthLastEvaluated"`
	// List of Domain Health Monitors
	HealthMonitors []HealthMonitorResponse `pulumi:"healthMonitors"`
	// Virtual network location
	Location *string `pulumi:"location"`
	// ReplicaSet Id
	ReplicaSetId string `pulumi:"replicaSetId"`
	// Status of Domain Service instance
	ServiceStatus string `pulumi:"serviceStatus"`
	// The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
	SubnetId *string `pulumi:"subnetId"`
	// Virtual network site id
	VnetSiteId string `pulumi:"vnetSiteId"`
}

// Replica Set Definition
type ReplicaSetResponseOutput struct{ *pulumi.OutputState }

func (ReplicaSetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaSetResponse)(nil)).Elem()
}

func (o ReplicaSetResponseOutput) ToReplicaSetResponseOutput() ReplicaSetResponseOutput {
	return o
}

func (o ReplicaSetResponseOutput) ToReplicaSetResponseOutputWithContext(ctx context.Context) ReplicaSetResponseOutput {
	return o
}

// List of Domain Controller IP Address
func (o ReplicaSetResponseOutput) DomainControllerIpAddress() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReplicaSetResponse) []string { return v.DomainControllerIpAddress }).(pulumi.StringArrayOutput)
}

// External access ip address.
func (o ReplicaSetResponseOutput) ExternalAccessIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicaSetResponse) string { return v.ExternalAccessIpAddress }).(pulumi.StringOutput)
}

// List of Domain Health Alerts
func (o ReplicaSetResponseOutput) HealthAlerts() HealthAlertResponseArrayOutput {
	return o.ApplyT(func(v ReplicaSetResponse) []HealthAlertResponse { return v.HealthAlerts }).(HealthAlertResponseArrayOutput)
}

// Last domain evaluation run DateTime
func (o ReplicaSetResponseOutput) HealthLastEvaluated() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicaSetResponse) string { return v.HealthLastEvaluated }).(pulumi.StringOutput)
}

// List of Domain Health Monitors
func (o ReplicaSetResponseOutput) HealthMonitors() HealthMonitorResponseArrayOutput {
	return o.ApplyT(func(v ReplicaSetResponse) []HealthMonitorResponse { return v.HealthMonitors }).(HealthMonitorResponseArrayOutput)
}

// Virtual network location
func (o ReplicaSetResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicaSetResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// ReplicaSet Id
func (o ReplicaSetResponseOutput) ReplicaSetId() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicaSetResponse) string { return v.ReplicaSetId }).(pulumi.StringOutput)
}

// Status of Domain Service instance
func (o ReplicaSetResponseOutput) ServiceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicaSetResponse) string { return v.ServiceStatus }).(pulumi.StringOutput)
}

// The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
func (o ReplicaSetResponseOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicaSetResponse) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// Virtual network site id
func (o ReplicaSetResponseOutput) VnetSiteId() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicaSetResponse) string { return v.VnetSiteId }).(pulumi.StringOutput)
}

type ReplicaSetResponseArrayOutput struct{ *pulumi.OutputState }

func (ReplicaSetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicaSetResponse)(nil)).Elem()
}

func (o ReplicaSetResponseArrayOutput) ToReplicaSetResponseArrayOutput() ReplicaSetResponseArrayOutput {
	return o
}

func (o ReplicaSetResponseArrayOutput) ToReplicaSetResponseArrayOutputWithContext(ctx context.Context) ReplicaSetResponseArrayOutput {
	return o
}

func (o ReplicaSetResponseArrayOutput) Index(i pulumi.IntInput) ReplicaSetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicaSetResponse {
		return vs[0].([]ReplicaSetResponse)[vs[1].(int)]
	}).(ReplicaSetResponseOutput)
}

// Settings for Resource Forest
type ResourceForestSettings struct {
	// Resource Forest
	ResourceForest *string `pulumi:"resourceForest"`
	// List of settings for Resource Forest
	Settings []ForestTrust `pulumi:"settings"`
}

// ResourceForestSettingsInput is an input type that accepts ResourceForestSettingsArgs and ResourceForestSettingsOutput values.
// You can construct a concrete instance of `ResourceForestSettingsInput` via:
//
//	ResourceForestSettingsArgs{...}
type ResourceForestSettingsInput interface {
	pulumi.Input

	ToResourceForestSettingsOutput() ResourceForestSettingsOutput
	ToResourceForestSettingsOutputWithContext(context.Context) ResourceForestSettingsOutput
}

// Settings for Resource Forest
type ResourceForestSettingsArgs struct {
	// Resource Forest
	ResourceForest pulumi.StringPtrInput `pulumi:"resourceForest"`
	// List of settings for Resource Forest
	Settings ForestTrustArrayInput `pulumi:"settings"`
}

func (ResourceForestSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceForestSettings)(nil)).Elem()
}

func (i ResourceForestSettingsArgs) ToResourceForestSettingsOutput() ResourceForestSettingsOutput {
	return i.ToResourceForestSettingsOutputWithContext(context.Background())
}

func (i ResourceForestSettingsArgs) ToResourceForestSettingsOutputWithContext(ctx context.Context) ResourceForestSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceForestSettingsOutput)
}

func (i ResourceForestSettingsArgs) ToResourceForestSettingsPtrOutput() ResourceForestSettingsPtrOutput {
	return i.ToResourceForestSettingsPtrOutputWithContext(context.Background())
}

func (i ResourceForestSettingsArgs) ToResourceForestSettingsPtrOutputWithContext(ctx context.Context) ResourceForestSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceForestSettingsOutput).ToResourceForestSettingsPtrOutputWithContext(ctx)
}

// ResourceForestSettingsPtrInput is an input type that accepts ResourceForestSettingsArgs, ResourceForestSettingsPtr and ResourceForestSettingsPtrOutput values.
// You can construct a concrete instance of `ResourceForestSettingsPtrInput` via:
//
//	        ResourceForestSettingsArgs{...}
//
//	or:
//
//	        nil
type ResourceForestSettingsPtrInput interface {
	pulumi.Input

	ToResourceForestSettingsPtrOutput() ResourceForestSettingsPtrOutput
	ToResourceForestSettingsPtrOutputWithContext(context.Context) ResourceForestSettingsPtrOutput
}

type resourceForestSettingsPtrType ResourceForestSettingsArgs

func ResourceForestSettingsPtr(v *ResourceForestSettingsArgs) ResourceForestSettingsPtrInput {
	return (*resourceForestSettingsPtrType)(v)
}

func (*resourceForestSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceForestSettings)(nil)).Elem()
}

func (i *resourceForestSettingsPtrType) ToResourceForestSettingsPtrOutput() ResourceForestSettingsPtrOutput {
	return i.ToResourceForestSettingsPtrOutputWithContext(context.Background())
}

func (i *resourceForestSettingsPtrType) ToResourceForestSettingsPtrOutputWithContext(ctx context.Context) ResourceForestSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceForestSettingsPtrOutput)
}

// Settings for Resource Forest
type ResourceForestSettingsOutput struct{ *pulumi.OutputState }

func (ResourceForestSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceForestSettings)(nil)).Elem()
}

func (o ResourceForestSettingsOutput) ToResourceForestSettingsOutput() ResourceForestSettingsOutput {
	return o
}

func (o ResourceForestSettingsOutput) ToResourceForestSettingsOutputWithContext(ctx context.Context) ResourceForestSettingsOutput {
	return o
}

func (o ResourceForestSettingsOutput) ToResourceForestSettingsPtrOutput() ResourceForestSettingsPtrOutput {
	return o.ToResourceForestSettingsPtrOutputWithContext(context.Background())
}

func (o ResourceForestSettingsOutput) ToResourceForestSettingsPtrOutputWithContext(ctx context.Context) ResourceForestSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceForestSettings) *ResourceForestSettings {
		return &v
	}).(ResourceForestSettingsPtrOutput)
}

// Resource Forest
func (o ResourceForestSettingsOutput) ResourceForest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceForestSettings) *string { return v.ResourceForest }).(pulumi.StringPtrOutput)
}

// List of settings for Resource Forest
func (o ResourceForestSettingsOutput) Settings() ForestTrustArrayOutput {
	return o.ApplyT(func(v ResourceForestSettings) []ForestTrust { return v.Settings }).(ForestTrustArrayOutput)
}

type ResourceForestSettingsPtrOutput struct{ *pulumi.OutputState }

func (ResourceForestSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceForestSettings)(nil)).Elem()
}

func (o ResourceForestSettingsPtrOutput) ToResourceForestSettingsPtrOutput() ResourceForestSettingsPtrOutput {
	return o
}

func (o ResourceForestSettingsPtrOutput) ToResourceForestSettingsPtrOutputWithContext(ctx context.Context) ResourceForestSettingsPtrOutput {
	return o
}

func (o ResourceForestSettingsPtrOutput) Elem() ResourceForestSettingsOutput {
	return o.ApplyT(func(v *ResourceForestSettings) ResourceForestSettings {
		if v != nil {
			return *v
		}
		var ret ResourceForestSettings
		return ret
	}).(ResourceForestSettingsOutput)
}

// Resource Forest
func (o ResourceForestSettingsPtrOutput) ResourceForest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceForestSettings) *string {
		if v == nil {
			return nil
		}
		return v.ResourceForest
	}).(pulumi.StringPtrOutput)
}

// List of settings for Resource Forest
func (o ResourceForestSettingsPtrOutput) Settings() ForestTrustArrayOutput {
	return o.ApplyT(func(v *ResourceForestSettings) []ForestTrust {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(ForestTrustArrayOutput)
}

// Settings for Resource Forest
type ResourceForestSettingsResponse struct {
	// Resource Forest
	ResourceForest *string `pulumi:"resourceForest"`
	// List of settings for Resource Forest
	Settings []ForestTrustResponse `pulumi:"settings"`
}

// Settings for Resource Forest
type ResourceForestSettingsResponseOutput struct{ *pulumi.OutputState }

func (ResourceForestSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceForestSettingsResponse)(nil)).Elem()
}

func (o ResourceForestSettingsResponseOutput) ToResourceForestSettingsResponseOutput() ResourceForestSettingsResponseOutput {
	return o
}

func (o ResourceForestSettingsResponseOutput) ToResourceForestSettingsResponseOutputWithContext(ctx context.Context) ResourceForestSettingsResponseOutput {
	return o
}

// Resource Forest
func (o ResourceForestSettingsResponseOutput) ResourceForest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceForestSettingsResponse) *string { return v.ResourceForest }).(pulumi.StringPtrOutput)
}

// List of settings for Resource Forest
func (o ResourceForestSettingsResponseOutput) Settings() ForestTrustResponseArrayOutput {
	return o.ApplyT(func(v ResourceForestSettingsResponse) []ForestTrustResponse { return v.Settings }).(ForestTrustResponseArrayOutput)
}

type ResourceForestSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceForestSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceForestSettingsResponse)(nil)).Elem()
}

func (o ResourceForestSettingsResponsePtrOutput) ToResourceForestSettingsResponsePtrOutput() ResourceForestSettingsResponsePtrOutput {
	return o
}

func (o ResourceForestSettingsResponsePtrOutput) ToResourceForestSettingsResponsePtrOutputWithContext(ctx context.Context) ResourceForestSettingsResponsePtrOutput {
	return o
}

func (o ResourceForestSettingsResponsePtrOutput) Elem() ResourceForestSettingsResponseOutput {
	return o.ApplyT(func(v *ResourceForestSettingsResponse) ResourceForestSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ResourceForestSettingsResponse
		return ret
	}).(ResourceForestSettingsResponseOutput)
}

// Resource Forest
func (o ResourceForestSettingsResponsePtrOutput) ResourceForest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceForestSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceForest
	}).(pulumi.StringPtrOutput)
}

// List of settings for Resource Forest
func (o ResourceForestSettingsResponsePtrOutput) Settings() ForestTrustResponseArrayOutput {
	return o.ApplyT(func(v *ResourceForestSettingsResponse) []ForestTrustResponse {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(ForestTrustResponseArrayOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ConfigDiagnosticsOutput{})
	pulumi.RegisterOutputType(ConfigDiagnosticsPtrOutput{})
	pulumi.RegisterOutputType(ConfigDiagnosticsResponseOutput{})
	pulumi.RegisterOutputType(ConfigDiagnosticsResponsePtrOutput{})
	pulumi.RegisterOutputType(ConfigDiagnosticsValidatorResultOutput{})
	pulumi.RegisterOutputType(ConfigDiagnosticsValidatorResultArrayOutput{})
	pulumi.RegisterOutputType(ConfigDiagnosticsValidatorResultIssueOutput{})
	pulumi.RegisterOutputType(ConfigDiagnosticsValidatorResultIssueArrayOutput{})
	pulumi.RegisterOutputType(ConfigDiagnosticsValidatorResultIssueResponseOutput{})
	pulumi.RegisterOutputType(ConfigDiagnosticsValidatorResultIssueResponseArrayOutput{})
	pulumi.RegisterOutputType(ConfigDiagnosticsValidatorResultResponseOutput{})
	pulumi.RegisterOutputType(ConfigDiagnosticsValidatorResultResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerAccountResponseOutput{})
	pulumi.RegisterOutputType(ContainerAccountResponseArrayOutput{})
	pulumi.RegisterOutputType(DomainSecuritySettingsOutput{})
	pulumi.RegisterOutputType(DomainSecuritySettingsPtrOutput{})
	pulumi.RegisterOutputType(DomainSecuritySettingsResponseOutput{})
	pulumi.RegisterOutputType(DomainSecuritySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ForestTrustOutput{})
	pulumi.RegisterOutputType(ForestTrustArrayOutput{})
	pulumi.RegisterOutputType(ForestTrustResponseOutput{})
	pulumi.RegisterOutputType(ForestTrustResponseArrayOutput{})
	pulumi.RegisterOutputType(HealthAlertResponseOutput{})
	pulumi.RegisterOutputType(HealthAlertResponseArrayOutput{})
	pulumi.RegisterOutputType(HealthMonitorResponseOutput{})
	pulumi.RegisterOutputType(HealthMonitorResponseArrayOutput{})
	pulumi.RegisterOutputType(LdapsSettingsOutput{})
	pulumi.RegisterOutputType(LdapsSettingsPtrOutput{})
	pulumi.RegisterOutputType(LdapsSettingsResponseOutput{})
	pulumi.RegisterOutputType(LdapsSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrationProgressResponseOutput{})
	pulumi.RegisterOutputType(MigrationPropertiesResponseOutput{})
	pulumi.RegisterOutputType(NotificationSettingsOutput{})
	pulumi.RegisterOutputType(NotificationSettingsPtrOutput{})
	pulumi.RegisterOutputType(NotificationSettingsResponseOutput{})
	pulumi.RegisterOutputType(NotificationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ReplicaSetOutput{})
	pulumi.RegisterOutputType(ReplicaSetArrayOutput{})
	pulumi.RegisterOutputType(ReplicaSetResponseOutput{})
	pulumi.RegisterOutputType(ReplicaSetResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceForestSettingsOutput{})
	pulumi.RegisterOutputType(ResourceForestSettingsPtrOutput{})
	pulumi.RegisterOutputType(ResourceForestSettingsResponseOutput{})
	pulumi.RegisterOutputType(ResourceForestSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
}
