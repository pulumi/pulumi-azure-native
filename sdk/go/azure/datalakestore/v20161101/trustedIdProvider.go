// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20161101

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Data Lake Store trusted identity provider information.
type TrustedIdProvider struct {
	pulumi.CustomResourceState

	// The URL of this trusted identity provider.
	IdProvider pulumi.StringOutput `pulumi:"idProvider"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewTrustedIdProvider registers a new resource with the given unique name, arguments, and options.
func NewTrustedIdProvider(ctx *pulumi.Context,
	name string, args *TrustedIdProviderArgs, opts ...pulumi.ResourceOption) (*TrustedIdProvider, error) {
	if args == nil || args.AccountName == nil {
		return nil, errors.New("missing required argument 'AccountName'")
	}
	if args == nil || args.IdProvider == nil {
		return nil, errors.New("missing required argument 'IdProvider'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.TrustedIdProviderName == nil {
		return nil, errors.New("missing required argument 'TrustedIdProviderName'")
	}
	if args == nil {
		args = &TrustedIdProviderArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:datalakestore/latest:TrustedIdProvider"),
		},
	})
	opts = append(opts, aliases)
	var resource TrustedIdProvider
	err := ctx.RegisterResource("azure-nextgen:datalakestore/v20161101:TrustedIdProvider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrustedIdProvider gets an existing TrustedIdProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrustedIdProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrustedIdProviderState, opts ...pulumi.ResourceOption) (*TrustedIdProvider, error) {
	var resource TrustedIdProvider
	err := ctx.ReadResource("azure-nextgen:datalakestore/v20161101:TrustedIdProvider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrustedIdProvider resources.
type trustedIdProviderState struct {
	// The URL of this trusted identity provider.
	IdProvider *string `pulumi:"idProvider"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The resource type.
	Type *string `pulumi:"type"`
}

type TrustedIdProviderState struct {
	// The URL of this trusted identity provider.
	IdProvider pulumi.StringPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// The resource type.
	Type pulumi.StringPtrInput
}

func (TrustedIdProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*trustedIdProviderState)(nil)).Elem()
}

type trustedIdProviderArgs struct {
	// The name of the Data Lake Store account.
	AccountName string `pulumi:"accountName"`
	// The URL of this trusted identity provider.
	IdProvider string `pulumi:"idProvider"`
	// The name of the Azure resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the trusted identity provider. This is used for differentiation of providers in the account.
	TrustedIdProviderName string `pulumi:"trustedIdProviderName"`
}

// The set of arguments for constructing a TrustedIdProvider resource.
type TrustedIdProviderArgs struct {
	// The name of the Data Lake Store account.
	AccountName pulumi.StringInput
	// The URL of this trusted identity provider.
	IdProvider pulumi.StringInput
	// The name of the Azure resource group.
	ResourceGroupName pulumi.StringInput
	// The name of the trusted identity provider. This is used for differentiation of providers in the account.
	TrustedIdProviderName pulumi.StringInput
}

func (TrustedIdProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trustedIdProviderArgs)(nil)).Elem()
}
