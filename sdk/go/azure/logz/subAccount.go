// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package logz

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// API Version: 2020-10-01-preview.
type SubAccount struct {
	pulumi.CustomResourceState

	Identity IdentityPropertiesResponsePtrOutput `pulumi:"identity"`
	Location pulumi.StringOutput                 `pulumi:"location"`
	// Name of the monitor resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties specific to the monitor resource.
	Properties MonitorPropertiesResponseOutput `pulumi:"properties"`
	// The system metadata relating to this resource
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	Tags       pulumi.StringMapOutput   `pulumi:"tags"`
	// The type of the monitor resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSubAccount registers a new resource with the given unique name, arguments, and options.
func NewSubAccount(ctx *pulumi.Context,
	name string, args *SubAccountArgs, opts ...pulumi.ResourceOption) (*SubAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MonitorName == nil {
		return nil, errors.New("invalid value for required argument 'MonitorName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:logz:SubAccount"),
		},
		{
			Type: pulumi.String("azure-native:logz/v20201001preview:SubAccount"),
		},
		{
			Type: pulumi.String("azure-nextgen:logz/v20201001preview:SubAccount"),
		},
	})
	opts = append(opts, aliases)
	var resource SubAccount
	err := ctx.RegisterResource("azure-native:logz:SubAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubAccount gets an existing SubAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubAccountState, opts ...pulumi.ResourceOption) (*SubAccount, error) {
	var resource SubAccount
	err := ctx.ReadResource("azure-native:logz:SubAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubAccount resources.
type subAccountState struct {
	Identity *IdentityPropertiesResponse `pulumi:"identity"`
	Location *string                     `pulumi:"location"`
	// Name of the monitor resource.
	Name *string `pulumi:"name"`
	// Properties specific to the monitor resource.
	Properties *MonitorPropertiesResponse `pulumi:"properties"`
	// The system metadata relating to this resource
	SystemData *SystemDataResponse `pulumi:"systemData"`
	Tags       map[string]string   `pulumi:"tags"`
	// The type of the monitor resource.
	Type *string `pulumi:"type"`
}

type SubAccountState struct {
	Identity IdentityPropertiesResponsePtrInput
	Location pulumi.StringPtrInput
	// Name of the monitor resource.
	Name pulumi.StringPtrInput
	// Properties specific to the monitor resource.
	Properties MonitorPropertiesResponsePtrInput
	// The system metadata relating to this resource
	SystemData SystemDataResponsePtrInput
	Tags       pulumi.StringMapInput
	// The type of the monitor resource.
	Type pulumi.StringPtrInput
}

func (SubAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*subAccountState)(nil)).Elem()
}

type subAccountArgs struct {
	Identity *IdentityProperties `pulumi:"identity"`
	Location *string             `pulumi:"location"`
	// Monitor resource name
	MonitorName string `pulumi:"monitorName"`
	// Properties specific to the monitor resource.
	Properties *MonitorProperties `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Sub Account resource name
	SubAccountName *string           `pulumi:"subAccountName"`
	Tags           map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SubAccount resource.
type SubAccountArgs struct {
	Identity IdentityPropertiesPtrInput
	Location pulumi.StringPtrInput
	// Monitor resource name
	MonitorName pulumi.StringInput
	// Properties specific to the monitor resource.
	Properties MonitorPropertiesPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Sub Account resource name
	SubAccountName pulumi.StringPtrInput
	Tags           pulumi.StringMapInput
}

func (SubAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subAccountArgs)(nil)).Elem()
}

type SubAccountInput interface {
	pulumi.Input

	ToSubAccountOutput() SubAccountOutput
	ToSubAccountOutputWithContext(ctx context.Context) SubAccountOutput
}

func (*SubAccount) ElementType() reflect.Type {
	return reflect.TypeOf((*SubAccount)(nil))
}

func (i *SubAccount) ToSubAccountOutput() SubAccountOutput {
	return i.ToSubAccountOutputWithContext(context.Background())
}

func (i *SubAccount) ToSubAccountOutputWithContext(ctx context.Context) SubAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubAccountOutput)
}

type SubAccountOutput struct {
	*pulumi.OutputState
}

func (SubAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubAccount)(nil))
}

func (o SubAccountOutput) ToSubAccountOutput() SubAccountOutput {
	return o
}

func (o SubAccountOutput) ToSubAccountOutputWithContext(ctx context.Context) SubAccountOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SubAccountOutput{})
}
