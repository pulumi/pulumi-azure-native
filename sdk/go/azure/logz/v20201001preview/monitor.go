// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20201001preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Monitor struct {
	pulumi.CustomResourceState

	Identity IdentityPropertiesResponsePtrOutput `pulumi:"identity"`
	Location pulumi.StringOutput                 `pulumi:"location"`
	// Name of the monitor resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties specific to the monitor resource.
	Properties MonitorPropertiesResponseOutput `pulumi:"properties"`
	// The system metadata relating to this resource
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	Tags       pulumi.StringMapOutput   `pulumi:"tags"`
	// The type of the monitor resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewMonitor registers a new resource with the given unique name, arguments, and options.
func NewMonitor(ctx *pulumi.Context,
	name string, args *MonitorArgs, opts ...pulumi.ResourceOption) (*Monitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:logz/v20201001preview:Monitor"),
		},
		{
			Type: pulumi.String("azure-native:logz:Monitor"),
		},
		{
			Type: pulumi.String("azure-nextgen:logz:Monitor"),
		},
	})
	opts = append(opts, aliases)
	var resource Monitor
	err := ctx.RegisterResource("azure-native:logz/v20201001preview:Monitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitor gets an existing Monitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitorState, opts ...pulumi.ResourceOption) (*Monitor, error) {
	var resource Monitor
	err := ctx.ReadResource("azure-native:logz/v20201001preview:Monitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Monitor resources.
type monitorState struct {
}

type MonitorState struct {
}

func (MonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorState)(nil)).Elem()
}

type monitorArgs struct {
	Identity *IdentityProperties `pulumi:"identity"`
	Location *string             `pulumi:"location"`
	// Monitor resource name
	MonitorName *string `pulumi:"monitorName"`
	// Properties specific to the monitor resource.
	Properties *MonitorProperties `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string            `pulumi:"resourceGroupName"`
	Tags              map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Monitor resource.
type MonitorArgs struct {
	Identity IdentityPropertiesPtrInput
	Location pulumi.StringPtrInput
	// Monitor resource name
	MonitorName pulumi.StringPtrInput
	// Properties specific to the monitor resource.
	Properties MonitorPropertiesPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	Tags              pulumi.StringMapInput
}

func (MonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorArgs)(nil)).Elem()
}

type MonitorInput interface {
	pulumi.Input

	ToMonitorOutput() MonitorOutput
	ToMonitorOutputWithContext(ctx context.Context) MonitorOutput
}

func (*Monitor) ElementType() reflect.Type {
	return reflect.TypeOf((*Monitor)(nil))
}

func (i *Monitor) ToMonitorOutput() MonitorOutput {
	return i.ToMonitorOutputWithContext(context.Background())
}

func (i *Monitor) ToMonitorOutputWithContext(ctx context.Context) MonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorOutput)
}

type MonitorOutput struct {
	*pulumi.OutputState
}

func (MonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Monitor)(nil))
}

func (o MonitorOutput) ToMonitorOutput() MonitorOutput {
	return o
}

func (o MonitorOutput) ToMonitorOutputWithContext(ctx context.Context) MonitorOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(MonitorOutput{})
}
