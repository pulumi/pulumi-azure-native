// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20201001preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The definition of a filtering tag. Filtering tags are used for capturing resources and include/exclude them from being monitored.
type FilteringTag struct {
	// Valid actions for a filtering tag. Exclusion takes priority over inclusion.
	Action *string `pulumi:"action"`
	// The name (also known as the key) of the tag.
	Name *string `pulumi:"name"`
	// The value of the tag.
	Value *string `pulumi:"value"`
}

// FilteringTagInput is an input type that accepts FilteringTagArgs and FilteringTagOutput values.
// You can construct a concrete instance of `FilteringTagInput` via:
//
//	FilteringTagArgs{...}
type FilteringTagInput interface {
	pulumi.Input

	ToFilteringTagOutput() FilteringTagOutput
	ToFilteringTagOutputWithContext(context.Context) FilteringTagOutput
}

// The definition of a filtering tag. Filtering tags are used for capturing resources and include/exclude them from being monitored.
type FilteringTagArgs struct {
	// Valid actions for a filtering tag. Exclusion takes priority over inclusion.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// The name (also known as the key) of the tag.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the tag.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (FilteringTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FilteringTag)(nil)).Elem()
}

func (i FilteringTagArgs) ToFilteringTagOutput() FilteringTagOutput {
	return i.ToFilteringTagOutputWithContext(context.Background())
}

func (i FilteringTagArgs) ToFilteringTagOutputWithContext(ctx context.Context) FilteringTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilteringTagOutput)
}

// FilteringTagArrayInput is an input type that accepts FilteringTagArray and FilteringTagArrayOutput values.
// You can construct a concrete instance of `FilteringTagArrayInput` via:
//
//	FilteringTagArray{ FilteringTagArgs{...} }
type FilteringTagArrayInput interface {
	pulumi.Input

	ToFilteringTagArrayOutput() FilteringTagArrayOutput
	ToFilteringTagArrayOutputWithContext(context.Context) FilteringTagArrayOutput
}

type FilteringTagArray []FilteringTagInput

func (FilteringTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilteringTag)(nil)).Elem()
}

func (i FilteringTagArray) ToFilteringTagArrayOutput() FilteringTagArrayOutput {
	return i.ToFilteringTagArrayOutputWithContext(context.Background())
}

func (i FilteringTagArray) ToFilteringTagArrayOutputWithContext(ctx context.Context) FilteringTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilteringTagArrayOutput)
}

// The definition of a filtering tag. Filtering tags are used for capturing resources and include/exclude them from being monitored.
type FilteringTagOutput struct{ *pulumi.OutputState }

func (FilteringTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilteringTag)(nil)).Elem()
}

func (o FilteringTagOutput) ToFilteringTagOutput() FilteringTagOutput {
	return o
}

func (o FilteringTagOutput) ToFilteringTagOutputWithContext(ctx context.Context) FilteringTagOutput {
	return o
}

// Valid actions for a filtering tag. Exclusion takes priority over inclusion.
func (o FilteringTagOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilteringTag) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// The name (also known as the key) of the tag.
func (o FilteringTagOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilteringTag) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the tag.
func (o FilteringTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilteringTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type FilteringTagArrayOutput struct{ *pulumi.OutputState }

func (FilteringTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilteringTag)(nil)).Elem()
}

func (o FilteringTagArrayOutput) ToFilteringTagArrayOutput() FilteringTagArrayOutput {
	return o
}

func (o FilteringTagArrayOutput) ToFilteringTagArrayOutputWithContext(ctx context.Context) FilteringTagArrayOutput {
	return o
}

func (o FilteringTagArrayOutput) Index(i pulumi.IntInput) FilteringTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FilteringTag {
		return vs[0].([]FilteringTag)[vs[1].(int)]
	}).(FilteringTagOutput)
}

// The definition of a filtering tag. Filtering tags are used for capturing resources and include/exclude them from being monitored.
type FilteringTagResponse struct {
	// Valid actions for a filtering tag. Exclusion takes priority over inclusion.
	Action *string `pulumi:"action"`
	// The name (also known as the key) of the tag.
	Name *string `pulumi:"name"`
	// The value of the tag.
	Value *string `pulumi:"value"`
}

// The definition of a filtering tag. Filtering tags are used for capturing resources and include/exclude them from being monitored.
type FilteringTagResponseOutput struct{ *pulumi.OutputState }

func (FilteringTagResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilteringTagResponse)(nil)).Elem()
}

func (o FilteringTagResponseOutput) ToFilteringTagResponseOutput() FilteringTagResponseOutput {
	return o
}

func (o FilteringTagResponseOutput) ToFilteringTagResponseOutputWithContext(ctx context.Context) FilteringTagResponseOutput {
	return o
}

// Valid actions for a filtering tag. Exclusion takes priority over inclusion.
func (o FilteringTagResponseOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilteringTagResponse) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// The name (also known as the key) of the tag.
func (o FilteringTagResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilteringTagResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the tag.
func (o FilteringTagResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilteringTagResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type FilteringTagResponseArrayOutput struct{ *pulumi.OutputState }

func (FilteringTagResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilteringTagResponse)(nil)).Elem()
}

func (o FilteringTagResponseArrayOutput) ToFilteringTagResponseArrayOutput() FilteringTagResponseArrayOutput {
	return o
}

func (o FilteringTagResponseArrayOutput) ToFilteringTagResponseArrayOutputWithContext(ctx context.Context) FilteringTagResponseArrayOutput {
	return o
}

func (o FilteringTagResponseArrayOutput) Index(i pulumi.IntInput) FilteringTagResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FilteringTagResponse {
		return vs[0].([]FilteringTagResponse)[vs[1].(int)]
	}).(FilteringTagResponseOutput)
}

type IdentityProperties struct {
	Type *string `pulumi:"type"`
}

// IdentityPropertiesInput is an input type that accepts IdentityPropertiesArgs and IdentityPropertiesOutput values.
// You can construct a concrete instance of `IdentityPropertiesInput` via:
//
//	IdentityPropertiesArgs{...}
type IdentityPropertiesInput interface {
	pulumi.Input

	ToIdentityPropertiesOutput() IdentityPropertiesOutput
	ToIdentityPropertiesOutputWithContext(context.Context) IdentityPropertiesOutput
}

type IdentityPropertiesArgs struct {
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (IdentityPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProperties)(nil)).Elem()
}

func (i IdentityPropertiesArgs) ToIdentityPropertiesOutput() IdentityPropertiesOutput {
	return i.ToIdentityPropertiesOutputWithContext(context.Background())
}

func (i IdentityPropertiesArgs) ToIdentityPropertiesOutputWithContext(ctx context.Context) IdentityPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPropertiesOutput)
}

func (i IdentityPropertiesArgs) ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput {
	return i.ToIdentityPropertiesPtrOutputWithContext(context.Background())
}

func (i IdentityPropertiesArgs) ToIdentityPropertiesPtrOutputWithContext(ctx context.Context) IdentityPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPropertiesOutput).ToIdentityPropertiesPtrOutputWithContext(ctx)
}

// IdentityPropertiesPtrInput is an input type that accepts IdentityPropertiesArgs, IdentityPropertiesPtr and IdentityPropertiesPtrOutput values.
// You can construct a concrete instance of `IdentityPropertiesPtrInput` via:
//
//	        IdentityPropertiesArgs{...}
//
//	or:
//
//	        nil
type IdentityPropertiesPtrInput interface {
	pulumi.Input

	ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput
	ToIdentityPropertiesPtrOutputWithContext(context.Context) IdentityPropertiesPtrOutput
}

type identityPropertiesPtrType IdentityPropertiesArgs

func IdentityPropertiesPtr(v *IdentityPropertiesArgs) IdentityPropertiesPtrInput {
	return (*identityPropertiesPtrType)(v)
}

func (*identityPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProperties)(nil)).Elem()
}

func (i *identityPropertiesPtrType) ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput {
	return i.ToIdentityPropertiesPtrOutputWithContext(context.Background())
}

func (i *identityPropertiesPtrType) ToIdentityPropertiesPtrOutputWithContext(ctx context.Context) IdentityPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPropertiesPtrOutput)
}

type IdentityPropertiesOutput struct{ *pulumi.OutputState }

func (IdentityPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProperties)(nil)).Elem()
}

func (o IdentityPropertiesOutput) ToIdentityPropertiesOutput() IdentityPropertiesOutput {
	return o
}

func (o IdentityPropertiesOutput) ToIdentityPropertiesOutputWithContext(ctx context.Context) IdentityPropertiesOutput {
	return o
}

func (o IdentityPropertiesOutput) ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput {
	return o.ToIdentityPropertiesPtrOutputWithContext(context.Background())
}

func (o IdentityPropertiesOutput) ToIdentityPropertiesPtrOutputWithContext(ctx context.Context) IdentityPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityProperties) *IdentityProperties {
		return &v
	}).(IdentityPropertiesPtrOutput)
}

func (o IdentityPropertiesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityProperties) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IdentityPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IdentityPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProperties)(nil)).Elem()
}

func (o IdentityPropertiesPtrOutput) ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput {
	return o
}

func (o IdentityPropertiesPtrOutput) ToIdentityPropertiesPtrOutputWithContext(ctx context.Context) IdentityPropertiesPtrOutput {
	return o
}

func (o IdentityPropertiesPtrOutput) Elem() IdentityPropertiesOutput {
	return o.ApplyT(func(v *IdentityProperties) IdentityProperties {
		if v != nil {
			return *v
		}
		var ret IdentityProperties
		return ret
	}).(IdentityPropertiesOutput)
}

func (o IdentityPropertiesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProperties) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type IdentityPropertiesResponse struct {
	// The identity ID.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId string  `pulumi:"tenantId"`
	Type     *string `pulumi:"type"`
}

type IdentityPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IdentityPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityPropertiesResponse)(nil)).Elem()
}

func (o IdentityPropertiesResponseOutput) ToIdentityPropertiesResponseOutput() IdentityPropertiesResponseOutput {
	return o
}

func (o IdentityPropertiesResponseOutput) ToIdentityPropertiesResponseOutputWithContext(ctx context.Context) IdentityPropertiesResponseOutput {
	return o
}

// The identity ID.
func (o IdentityPropertiesResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityPropertiesResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of resource.
func (o IdentityPropertiesResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityPropertiesResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

func (o IdentityPropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityPropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IdentityPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityPropertiesResponse)(nil)).Elem()
}

func (o IdentityPropertiesResponsePtrOutput) ToIdentityPropertiesResponsePtrOutput() IdentityPropertiesResponsePtrOutput {
	return o
}

func (o IdentityPropertiesResponsePtrOutput) ToIdentityPropertiesResponsePtrOutputWithContext(ctx context.Context) IdentityPropertiesResponsePtrOutput {
	return o
}

func (o IdentityPropertiesResponsePtrOutput) Elem() IdentityPropertiesResponseOutput {
	return o.ApplyT(func(v *IdentityPropertiesResponse) IdentityPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret IdentityPropertiesResponse
		return ret
	}).(IdentityPropertiesResponseOutput)
}

// The identity ID.
func (o IdentityPropertiesResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityPropertiesResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

func (o IdentityPropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Set of rules for sending logs for the Monitor resource.
type LogRules struct {
	// List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
	FilteringTags []FilteringTag `pulumi:"filteringTags"`
	// Flag specifying if AAD logs should be sent for the Monitor resource.
	SendAadLogs *bool `pulumi:"sendAadLogs"`
	// Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.
	SendActivityLogs *bool `pulumi:"sendActivityLogs"`
	// Flag specifying if subscription logs should be sent for the Monitor resource.
	SendSubscriptionLogs *bool `pulumi:"sendSubscriptionLogs"`
}

// LogRulesInput is an input type that accepts LogRulesArgs and LogRulesOutput values.
// You can construct a concrete instance of `LogRulesInput` via:
//
//	LogRulesArgs{...}
type LogRulesInput interface {
	pulumi.Input

	ToLogRulesOutput() LogRulesOutput
	ToLogRulesOutputWithContext(context.Context) LogRulesOutput
}

// Set of rules for sending logs for the Monitor resource.
type LogRulesArgs struct {
	// List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
	FilteringTags FilteringTagArrayInput `pulumi:"filteringTags"`
	// Flag specifying if AAD logs should be sent for the Monitor resource.
	SendAadLogs pulumi.BoolPtrInput `pulumi:"sendAadLogs"`
	// Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.
	SendActivityLogs pulumi.BoolPtrInput `pulumi:"sendActivityLogs"`
	// Flag specifying if subscription logs should be sent for the Monitor resource.
	SendSubscriptionLogs pulumi.BoolPtrInput `pulumi:"sendSubscriptionLogs"`
}

func (LogRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogRules)(nil)).Elem()
}

func (i LogRulesArgs) ToLogRulesOutput() LogRulesOutput {
	return i.ToLogRulesOutputWithContext(context.Background())
}

func (i LogRulesArgs) ToLogRulesOutputWithContext(ctx context.Context) LogRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogRulesOutput)
}

func (i LogRulesArgs) ToLogRulesPtrOutput() LogRulesPtrOutput {
	return i.ToLogRulesPtrOutputWithContext(context.Background())
}

func (i LogRulesArgs) ToLogRulesPtrOutputWithContext(ctx context.Context) LogRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogRulesOutput).ToLogRulesPtrOutputWithContext(ctx)
}

// LogRulesPtrInput is an input type that accepts LogRulesArgs, LogRulesPtr and LogRulesPtrOutput values.
// You can construct a concrete instance of `LogRulesPtrInput` via:
//
//	        LogRulesArgs{...}
//
//	or:
//
//	        nil
type LogRulesPtrInput interface {
	pulumi.Input

	ToLogRulesPtrOutput() LogRulesPtrOutput
	ToLogRulesPtrOutputWithContext(context.Context) LogRulesPtrOutput
}

type logRulesPtrType LogRulesArgs

func LogRulesPtr(v *LogRulesArgs) LogRulesPtrInput {
	return (*logRulesPtrType)(v)
}

func (*logRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogRules)(nil)).Elem()
}

func (i *logRulesPtrType) ToLogRulesPtrOutput() LogRulesPtrOutput {
	return i.ToLogRulesPtrOutputWithContext(context.Background())
}

func (i *logRulesPtrType) ToLogRulesPtrOutputWithContext(ctx context.Context) LogRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogRulesPtrOutput)
}

// Set of rules for sending logs for the Monitor resource.
type LogRulesOutput struct{ *pulumi.OutputState }

func (LogRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogRules)(nil)).Elem()
}

func (o LogRulesOutput) ToLogRulesOutput() LogRulesOutput {
	return o
}

func (o LogRulesOutput) ToLogRulesOutputWithContext(ctx context.Context) LogRulesOutput {
	return o
}

func (o LogRulesOutput) ToLogRulesPtrOutput() LogRulesPtrOutput {
	return o.ToLogRulesPtrOutputWithContext(context.Background())
}

func (o LogRulesOutput) ToLogRulesPtrOutputWithContext(ctx context.Context) LogRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogRules) *LogRules {
		return &v
	}).(LogRulesPtrOutput)
}

// List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
func (o LogRulesOutput) FilteringTags() FilteringTagArrayOutput {
	return o.ApplyT(func(v LogRules) []FilteringTag { return v.FilteringTags }).(FilteringTagArrayOutput)
}

// Flag specifying if AAD logs should be sent for the Monitor resource.
func (o LogRulesOutput) SendAadLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogRules) *bool { return v.SendAadLogs }).(pulumi.BoolPtrOutput)
}

// Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.
func (o LogRulesOutput) SendActivityLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogRules) *bool { return v.SendActivityLogs }).(pulumi.BoolPtrOutput)
}

// Flag specifying if subscription logs should be sent for the Monitor resource.
func (o LogRulesOutput) SendSubscriptionLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogRules) *bool { return v.SendSubscriptionLogs }).(pulumi.BoolPtrOutput)
}

type LogRulesPtrOutput struct{ *pulumi.OutputState }

func (LogRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogRules)(nil)).Elem()
}

func (o LogRulesPtrOutput) ToLogRulesPtrOutput() LogRulesPtrOutput {
	return o
}

func (o LogRulesPtrOutput) ToLogRulesPtrOutputWithContext(ctx context.Context) LogRulesPtrOutput {
	return o
}

func (o LogRulesPtrOutput) Elem() LogRulesOutput {
	return o.ApplyT(func(v *LogRules) LogRules {
		if v != nil {
			return *v
		}
		var ret LogRules
		return ret
	}).(LogRulesOutput)
}

// List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
func (o LogRulesPtrOutput) FilteringTags() FilteringTagArrayOutput {
	return o.ApplyT(func(v *LogRules) []FilteringTag {
		if v == nil {
			return nil
		}
		return v.FilteringTags
	}).(FilteringTagArrayOutput)
}

// Flag specifying if AAD logs should be sent for the Monitor resource.
func (o LogRulesPtrOutput) SendAadLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogRules) *bool {
		if v == nil {
			return nil
		}
		return v.SendAadLogs
	}).(pulumi.BoolPtrOutput)
}

// Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.
func (o LogRulesPtrOutput) SendActivityLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogRules) *bool {
		if v == nil {
			return nil
		}
		return v.SendActivityLogs
	}).(pulumi.BoolPtrOutput)
}

// Flag specifying if subscription logs should be sent for the Monitor resource.
func (o LogRulesPtrOutput) SendSubscriptionLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogRules) *bool {
		if v == nil {
			return nil
		}
		return v.SendSubscriptionLogs
	}).(pulumi.BoolPtrOutput)
}

// Set of rules for sending logs for the Monitor resource.
type LogRulesResponse struct {
	// List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
	FilteringTags []FilteringTagResponse `pulumi:"filteringTags"`
	// Flag specifying if AAD logs should be sent for the Monitor resource.
	SendAadLogs *bool `pulumi:"sendAadLogs"`
	// Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.
	SendActivityLogs *bool `pulumi:"sendActivityLogs"`
	// Flag specifying if subscription logs should be sent for the Monitor resource.
	SendSubscriptionLogs *bool `pulumi:"sendSubscriptionLogs"`
}

// Set of rules for sending logs for the Monitor resource.
type LogRulesResponseOutput struct{ *pulumi.OutputState }

func (LogRulesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogRulesResponse)(nil)).Elem()
}

func (o LogRulesResponseOutput) ToLogRulesResponseOutput() LogRulesResponseOutput {
	return o
}

func (o LogRulesResponseOutput) ToLogRulesResponseOutputWithContext(ctx context.Context) LogRulesResponseOutput {
	return o
}

// List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
func (o LogRulesResponseOutput) FilteringTags() FilteringTagResponseArrayOutput {
	return o.ApplyT(func(v LogRulesResponse) []FilteringTagResponse { return v.FilteringTags }).(FilteringTagResponseArrayOutput)
}

// Flag specifying if AAD logs should be sent for the Monitor resource.
func (o LogRulesResponseOutput) SendAadLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogRulesResponse) *bool { return v.SendAadLogs }).(pulumi.BoolPtrOutput)
}

// Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.
func (o LogRulesResponseOutput) SendActivityLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogRulesResponse) *bool { return v.SendActivityLogs }).(pulumi.BoolPtrOutput)
}

// Flag specifying if subscription logs should be sent for the Monitor resource.
func (o LogRulesResponseOutput) SendSubscriptionLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogRulesResponse) *bool { return v.SendSubscriptionLogs }).(pulumi.BoolPtrOutput)
}

type LogRulesResponsePtrOutput struct{ *pulumi.OutputState }

func (LogRulesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogRulesResponse)(nil)).Elem()
}

func (o LogRulesResponsePtrOutput) ToLogRulesResponsePtrOutput() LogRulesResponsePtrOutput {
	return o
}

func (o LogRulesResponsePtrOutput) ToLogRulesResponsePtrOutputWithContext(ctx context.Context) LogRulesResponsePtrOutput {
	return o
}

func (o LogRulesResponsePtrOutput) Elem() LogRulesResponseOutput {
	return o.ApplyT(func(v *LogRulesResponse) LogRulesResponse {
		if v != nil {
			return *v
		}
		var ret LogRulesResponse
		return ret
	}).(LogRulesResponseOutput)
}

// List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
func (o LogRulesResponsePtrOutput) FilteringTags() FilteringTagResponseArrayOutput {
	return o.ApplyT(func(v *LogRulesResponse) []FilteringTagResponse {
		if v == nil {
			return nil
		}
		return v.FilteringTags
	}).(FilteringTagResponseArrayOutput)
}

// Flag specifying if AAD logs should be sent for the Monitor resource.
func (o LogRulesResponsePtrOutput) SendAadLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogRulesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SendAadLogs
	}).(pulumi.BoolPtrOutput)
}

// Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.
func (o LogRulesResponsePtrOutput) SendActivityLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogRulesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SendActivityLogs
	}).(pulumi.BoolPtrOutput)
}

// Flag specifying if subscription logs should be sent for the Monitor resource.
func (o LogRulesResponsePtrOutput) SendSubscriptionLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogRulesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SendSubscriptionLogs
	}).(pulumi.BoolPtrOutput)
}

type LogzOrganizationProperties struct {
	// Name of the Logz organization.
	CompanyName *string `pulumi:"companyName"`
	// The Id of the Enterprise App used for Single sign on.
	EnterpriseAppId *string `pulumi:"enterpriseAppId"`
	// The login URL specific to this Logz Organization.
	SingleSignOnUrl *string `pulumi:"singleSignOnUrl"`
}

// LogzOrganizationPropertiesInput is an input type that accepts LogzOrganizationPropertiesArgs and LogzOrganizationPropertiesOutput values.
// You can construct a concrete instance of `LogzOrganizationPropertiesInput` via:
//
//	LogzOrganizationPropertiesArgs{...}
type LogzOrganizationPropertiesInput interface {
	pulumi.Input

	ToLogzOrganizationPropertiesOutput() LogzOrganizationPropertiesOutput
	ToLogzOrganizationPropertiesOutputWithContext(context.Context) LogzOrganizationPropertiesOutput
}

type LogzOrganizationPropertiesArgs struct {
	// Name of the Logz organization.
	CompanyName pulumi.StringPtrInput `pulumi:"companyName"`
	// The Id of the Enterprise App used for Single sign on.
	EnterpriseAppId pulumi.StringPtrInput `pulumi:"enterpriseAppId"`
	// The login URL specific to this Logz Organization.
	SingleSignOnUrl pulumi.StringPtrInput `pulumi:"singleSignOnUrl"`
}

func (LogzOrganizationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogzOrganizationProperties)(nil)).Elem()
}

func (i LogzOrganizationPropertiesArgs) ToLogzOrganizationPropertiesOutput() LogzOrganizationPropertiesOutput {
	return i.ToLogzOrganizationPropertiesOutputWithContext(context.Background())
}

func (i LogzOrganizationPropertiesArgs) ToLogzOrganizationPropertiesOutputWithContext(ctx context.Context) LogzOrganizationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogzOrganizationPropertiesOutput)
}

func (i LogzOrganizationPropertiesArgs) ToLogzOrganizationPropertiesPtrOutput() LogzOrganizationPropertiesPtrOutput {
	return i.ToLogzOrganizationPropertiesPtrOutputWithContext(context.Background())
}

func (i LogzOrganizationPropertiesArgs) ToLogzOrganizationPropertiesPtrOutputWithContext(ctx context.Context) LogzOrganizationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogzOrganizationPropertiesOutput).ToLogzOrganizationPropertiesPtrOutputWithContext(ctx)
}

// LogzOrganizationPropertiesPtrInput is an input type that accepts LogzOrganizationPropertiesArgs, LogzOrganizationPropertiesPtr and LogzOrganizationPropertiesPtrOutput values.
// You can construct a concrete instance of `LogzOrganizationPropertiesPtrInput` via:
//
//	        LogzOrganizationPropertiesArgs{...}
//
//	or:
//
//	        nil
type LogzOrganizationPropertiesPtrInput interface {
	pulumi.Input

	ToLogzOrganizationPropertiesPtrOutput() LogzOrganizationPropertiesPtrOutput
	ToLogzOrganizationPropertiesPtrOutputWithContext(context.Context) LogzOrganizationPropertiesPtrOutput
}

type logzOrganizationPropertiesPtrType LogzOrganizationPropertiesArgs

func LogzOrganizationPropertiesPtr(v *LogzOrganizationPropertiesArgs) LogzOrganizationPropertiesPtrInput {
	return (*logzOrganizationPropertiesPtrType)(v)
}

func (*logzOrganizationPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogzOrganizationProperties)(nil)).Elem()
}

func (i *logzOrganizationPropertiesPtrType) ToLogzOrganizationPropertiesPtrOutput() LogzOrganizationPropertiesPtrOutput {
	return i.ToLogzOrganizationPropertiesPtrOutputWithContext(context.Background())
}

func (i *logzOrganizationPropertiesPtrType) ToLogzOrganizationPropertiesPtrOutputWithContext(ctx context.Context) LogzOrganizationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogzOrganizationPropertiesPtrOutput)
}

type LogzOrganizationPropertiesOutput struct{ *pulumi.OutputState }

func (LogzOrganizationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogzOrganizationProperties)(nil)).Elem()
}

func (o LogzOrganizationPropertiesOutput) ToLogzOrganizationPropertiesOutput() LogzOrganizationPropertiesOutput {
	return o
}

func (o LogzOrganizationPropertiesOutput) ToLogzOrganizationPropertiesOutputWithContext(ctx context.Context) LogzOrganizationPropertiesOutput {
	return o
}

func (o LogzOrganizationPropertiesOutput) ToLogzOrganizationPropertiesPtrOutput() LogzOrganizationPropertiesPtrOutput {
	return o.ToLogzOrganizationPropertiesPtrOutputWithContext(context.Background())
}

func (o LogzOrganizationPropertiesOutput) ToLogzOrganizationPropertiesPtrOutputWithContext(ctx context.Context) LogzOrganizationPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogzOrganizationProperties) *LogzOrganizationProperties {
		return &v
	}).(LogzOrganizationPropertiesPtrOutput)
}

// Name of the Logz organization.
func (o LogzOrganizationPropertiesOutput) CompanyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogzOrganizationProperties) *string { return v.CompanyName }).(pulumi.StringPtrOutput)
}

// The Id of the Enterprise App used for Single sign on.
func (o LogzOrganizationPropertiesOutput) EnterpriseAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogzOrganizationProperties) *string { return v.EnterpriseAppId }).(pulumi.StringPtrOutput)
}

// The login URL specific to this Logz Organization.
func (o LogzOrganizationPropertiesOutput) SingleSignOnUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogzOrganizationProperties) *string { return v.SingleSignOnUrl }).(pulumi.StringPtrOutput)
}

type LogzOrganizationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (LogzOrganizationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogzOrganizationProperties)(nil)).Elem()
}

func (o LogzOrganizationPropertiesPtrOutput) ToLogzOrganizationPropertiesPtrOutput() LogzOrganizationPropertiesPtrOutput {
	return o
}

func (o LogzOrganizationPropertiesPtrOutput) ToLogzOrganizationPropertiesPtrOutputWithContext(ctx context.Context) LogzOrganizationPropertiesPtrOutput {
	return o
}

func (o LogzOrganizationPropertiesPtrOutput) Elem() LogzOrganizationPropertiesOutput {
	return o.ApplyT(func(v *LogzOrganizationProperties) LogzOrganizationProperties {
		if v != nil {
			return *v
		}
		var ret LogzOrganizationProperties
		return ret
	}).(LogzOrganizationPropertiesOutput)
}

// Name of the Logz organization.
func (o LogzOrganizationPropertiesPtrOutput) CompanyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogzOrganizationProperties) *string {
		if v == nil {
			return nil
		}
		return v.CompanyName
	}).(pulumi.StringPtrOutput)
}

// The Id of the Enterprise App used for Single sign on.
func (o LogzOrganizationPropertiesPtrOutput) EnterpriseAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogzOrganizationProperties) *string {
		if v == nil {
			return nil
		}
		return v.EnterpriseAppId
	}).(pulumi.StringPtrOutput)
}

// The login URL specific to this Logz Organization.
func (o LogzOrganizationPropertiesPtrOutput) SingleSignOnUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogzOrganizationProperties) *string {
		if v == nil {
			return nil
		}
		return v.SingleSignOnUrl
	}).(pulumi.StringPtrOutput)
}

type LogzOrganizationPropertiesResponse struct {
	// Name of the Logz organization.
	CompanyName *string `pulumi:"companyName"`
	// The Id of the Enterprise App used for Single sign on.
	EnterpriseAppId *string `pulumi:"enterpriseAppId"`
	// Id of the Logz organization.
	Id string `pulumi:"id"`
	// The login URL specific to this Logz Organization.
	SingleSignOnUrl *string `pulumi:"singleSignOnUrl"`
}

type LogzOrganizationPropertiesResponseOutput struct{ *pulumi.OutputState }

func (LogzOrganizationPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogzOrganizationPropertiesResponse)(nil)).Elem()
}

func (o LogzOrganizationPropertiesResponseOutput) ToLogzOrganizationPropertiesResponseOutput() LogzOrganizationPropertiesResponseOutput {
	return o
}

func (o LogzOrganizationPropertiesResponseOutput) ToLogzOrganizationPropertiesResponseOutputWithContext(ctx context.Context) LogzOrganizationPropertiesResponseOutput {
	return o
}

// Name of the Logz organization.
func (o LogzOrganizationPropertiesResponseOutput) CompanyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogzOrganizationPropertiesResponse) *string { return v.CompanyName }).(pulumi.StringPtrOutput)
}

// The Id of the Enterprise App used for Single sign on.
func (o LogzOrganizationPropertiesResponseOutput) EnterpriseAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogzOrganizationPropertiesResponse) *string { return v.EnterpriseAppId }).(pulumi.StringPtrOutput)
}

// Id of the Logz organization.
func (o LogzOrganizationPropertiesResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LogzOrganizationPropertiesResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The login URL specific to this Logz Organization.
func (o LogzOrganizationPropertiesResponseOutput) SingleSignOnUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogzOrganizationPropertiesResponse) *string { return v.SingleSignOnUrl }).(pulumi.StringPtrOutput)
}

type LogzOrganizationPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (LogzOrganizationPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogzOrganizationPropertiesResponse)(nil)).Elem()
}

func (o LogzOrganizationPropertiesResponsePtrOutput) ToLogzOrganizationPropertiesResponsePtrOutput() LogzOrganizationPropertiesResponsePtrOutput {
	return o
}

func (o LogzOrganizationPropertiesResponsePtrOutput) ToLogzOrganizationPropertiesResponsePtrOutputWithContext(ctx context.Context) LogzOrganizationPropertiesResponsePtrOutput {
	return o
}

func (o LogzOrganizationPropertiesResponsePtrOutput) Elem() LogzOrganizationPropertiesResponseOutput {
	return o.ApplyT(func(v *LogzOrganizationPropertiesResponse) LogzOrganizationPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret LogzOrganizationPropertiesResponse
		return ret
	}).(LogzOrganizationPropertiesResponseOutput)
}

// Name of the Logz organization.
func (o LogzOrganizationPropertiesResponsePtrOutput) CompanyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogzOrganizationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.CompanyName
	}).(pulumi.StringPtrOutput)
}

// The Id of the Enterprise App used for Single sign on.
func (o LogzOrganizationPropertiesResponsePtrOutput) EnterpriseAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogzOrganizationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnterpriseAppId
	}).(pulumi.StringPtrOutput)
}

// Id of the Logz organization.
func (o LogzOrganizationPropertiesResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogzOrganizationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The login URL specific to this Logz Organization.
func (o LogzOrganizationPropertiesResponsePtrOutput) SingleSignOnUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogzOrganizationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SingleSignOnUrl
	}).(pulumi.StringPtrOutput)
}

// Properties specific to the monitor resource.
type MonitorProperties struct {
	LogzOrganizationProperties *LogzOrganizationProperties `pulumi:"logzOrganizationProperties"`
	// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
	MarketplaceSubscriptionStatus *string `pulumi:"marketplaceSubscriptionStatus"`
	// Flag specifying if the resource monitoring is enabled or disabled.
	MonitoringStatus *string   `pulumi:"monitoringStatus"`
	PlanData         *PlanData `pulumi:"planData"`
	UserInfo         *UserInfo `pulumi:"userInfo"`
}

// MonitorPropertiesInput is an input type that accepts MonitorPropertiesArgs and MonitorPropertiesOutput values.
// You can construct a concrete instance of `MonitorPropertiesInput` via:
//
//	MonitorPropertiesArgs{...}
type MonitorPropertiesInput interface {
	pulumi.Input

	ToMonitorPropertiesOutput() MonitorPropertiesOutput
	ToMonitorPropertiesOutputWithContext(context.Context) MonitorPropertiesOutput
}

// Properties specific to the monitor resource.
type MonitorPropertiesArgs struct {
	LogzOrganizationProperties LogzOrganizationPropertiesPtrInput `pulumi:"logzOrganizationProperties"`
	// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
	MarketplaceSubscriptionStatus pulumi.StringPtrInput `pulumi:"marketplaceSubscriptionStatus"`
	// Flag specifying if the resource monitoring is enabled or disabled.
	MonitoringStatus pulumi.StringPtrInput `pulumi:"monitoringStatus"`
	PlanData         PlanDataPtrInput      `pulumi:"planData"`
	UserInfo         UserInfoPtrInput      `pulumi:"userInfo"`
}

func (MonitorPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorProperties)(nil)).Elem()
}

func (i MonitorPropertiesArgs) ToMonitorPropertiesOutput() MonitorPropertiesOutput {
	return i.ToMonitorPropertiesOutputWithContext(context.Background())
}

func (i MonitorPropertiesArgs) ToMonitorPropertiesOutputWithContext(ctx context.Context) MonitorPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorPropertiesOutput)
}

func (i MonitorPropertiesArgs) ToMonitorPropertiesPtrOutput() MonitorPropertiesPtrOutput {
	return i.ToMonitorPropertiesPtrOutputWithContext(context.Background())
}

func (i MonitorPropertiesArgs) ToMonitorPropertiesPtrOutputWithContext(ctx context.Context) MonitorPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorPropertiesOutput).ToMonitorPropertiesPtrOutputWithContext(ctx)
}

// MonitorPropertiesPtrInput is an input type that accepts MonitorPropertiesArgs, MonitorPropertiesPtr and MonitorPropertiesPtrOutput values.
// You can construct a concrete instance of `MonitorPropertiesPtrInput` via:
//
//	        MonitorPropertiesArgs{...}
//
//	or:
//
//	        nil
type MonitorPropertiesPtrInput interface {
	pulumi.Input

	ToMonitorPropertiesPtrOutput() MonitorPropertiesPtrOutput
	ToMonitorPropertiesPtrOutputWithContext(context.Context) MonitorPropertiesPtrOutput
}

type monitorPropertiesPtrType MonitorPropertiesArgs

func MonitorPropertiesPtr(v *MonitorPropertiesArgs) MonitorPropertiesPtrInput {
	return (*monitorPropertiesPtrType)(v)
}

func (*monitorPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorProperties)(nil)).Elem()
}

func (i *monitorPropertiesPtrType) ToMonitorPropertiesPtrOutput() MonitorPropertiesPtrOutput {
	return i.ToMonitorPropertiesPtrOutputWithContext(context.Background())
}

func (i *monitorPropertiesPtrType) ToMonitorPropertiesPtrOutputWithContext(ctx context.Context) MonitorPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorPropertiesPtrOutput)
}

// Properties specific to the monitor resource.
type MonitorPropertiesOutput struct{ *pulumi.OutputState }

func (MonitorPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorProperties)(nil)).Elem()
}

func (o MonitorPropertiesOutput) ToMonitorPropertiesOutput() MonitorPropertiesOutput {
	return o
}

func (o MonitorPropertiesOutput) ToMonitorPropertiesOutputWithContext(ctx context.Context) MonitorPropertiesOutput {
	return o
}

func (o MonitorPropertiesOutput) ToMonitorPropertiesPtrOutput() MonitorPropertiesPtrOutput {
	return o.ToMonitorPropertiesPtrOutputWithContext(context.Background())
}

func (o MonitorPropertiesOutput) ToMonitorPropertiesPtrOutputWithContext(ctx context.Context) MonitorPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorProperties) *MonitorProperties {
		return &v
	}).(MonitorPropertiesPtrOutput)
}

func (o MonitorPropertiesOutput) LogzOrganizationProperties() LogzOrganizationPropertiesPtrOutput {
	return o.ApplyT(func(v MonitorProperties) *LogzOrganizationProperties { return v.LogzOrganizationProperties }).(LogzOrganizationPropertiesPtrOutput)
}

// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
func (o MonitorPropertiesOutput) MarketplaceSubscriptionStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorProperties) *string { return v.MarketplaceSubscriptionStatus }).(pulumi.StringPtrOutput)
}

// Flag specifying if the resource monitoring is enabled or disabled.
func (o MonitorPropertiesOutput) MonitoringStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorProperties) *string { return v.MonitoringStatus }).(pulumi.StringPtrOutput)
}

func (o MonitorPropertiesOutput) PlanData() PlanDataPtrOutput {
	return o.ApplyT(func(v MonitorProperties) *PlanData { return v.PlanData }).(PlanDataPtrOutput)
}

func (o MonitorPropertiesOutput) UserInfo() UserInfoPtrOutput {
	return o.ApplyT(func(v MonitorProperties) *UserInfo { return v.UserInfo }).(UserInfoPtrOutput)
}

type MonitorPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MonitorPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorProperties)(nil)).Elem()
}

func (o MonitorPropertiesPtrOutput) ToMonitorPropertiesPtrOutput() MonitorPropertiesPtrOutput {
	return o
}

func (o MonitorPropertiesPtrOutput) ToMonitorPropertiesPtrOutputWithContext(ctx context.Context) MonitorPropertiesPtrOutput {
	return o
}

func (o MonitorPropertiesPtrOutput) Elem() MonitorPropertiesOutput {
	return o.ApplyT(func(v *MonitorProperties) MonitorProperties {
		if v != nil {
			return *v
		}
		var ret MonitorProperties
		return ret
	}).(MonitorPropertiesOutput)
}

func (o MonitorPropertiesPtrOutput) LogzOrganizationProperties() LogzOrganizationPropertiesPtrOutput {
	return o.ApplyT(func(v *MonitorProperties) *LogzOrganizationProperties {
		if v == nil {
			return nil
		}
		return v.LogzOrganizationProperties
	}).(LogzOrganizationPropertiesPtrOutput)
}

// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
func (o MonitorPropertiesPtrOutput) MarketplaceSubscriptionStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorProperties) *string {
		if v == nil {
			return nil
		}
		return v.MarketplaceSubscriptionStatus
	}).(pulumi.StringPtrOutput)
}

// Flag specifying if the resource monitoring is enabled or disabled.
func (o MonitorPropertiesPtrOutput) MonitoringStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorProperties) *string {
		if v == nil {
			return nil
		}
		return v.MonitoringStatus
	}).(pulumi.StringPtrOutput)
}

func (o MonitorPropertiesPtrOutput) PlanData() PlanDataPtrOutput {
	return o.ApplyT(func(v *MonitorProperties) *PlanData {
		if v == nil {
			return nil
		}
		return v.PlanData
	}).(PlanDataPtrOutput)
}

func (o MonitorPropertiesPtrOutput) UserInfo() UserInfoPtrOutput {
	return o.ApplyT(func(v *MonitorProperties) *UserInfo {
		if v == nil {
			return nil
		}
		return v.UserInfo
	}).(UserInfoPtrOutput)
}

// Properties specific to the monitor resource.
type MonitorPropertiesResponse struct {
	LiftrResourceCategory string `pulumi:"liftrResourceCategory"`
	// The priority of the resource.
	LiftrResourcePreference    int                                 `pulumi:"liftrResourcePreference"`
	LogzOrganizationProperties *LogzOrganizationPropertiesResponse `pulumi:"logzOrganizationProperties"`
	// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
	MarketplaceSubscriptionStatus *string `pulumi:"marketplaceSubscriptionStatus"`
	// Flag specifying if the resource monitoring is enabled or disabled.
	MonitoringStatus *string           `pulumi:"monitoringStatus"`
	PlanData         *PlanDataResponse `pulumi:"planData"`
	// Flag specifying if the resource provisioning state as tracked by ARM.
	ProvisioningState string            `pulumi:"provisioningState"`
	UserInfo          *UserInfoResponse `pulumi:"userInfo"`
}

// Properties specific to the monitor resource.
type MonitorPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MonitorPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorPropertiesResponse)(nil)).Elem()
}

func (o MonitorPropertiesResponseOutput) ToMonitorPropertiesResponseOutput() MonitorPropertiesResponseOutput {
	return o
}

func (o MonitorPropertiesResponseOutput) ToMonitorPropertiesResponseOutputWithContext(ctx context.Context) MonitorPropertiesResponseOutput {
	return o
}

func (o MonitorPropertiesResponseOutput) LiftrResourceCategory() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorPropertiesResponse) string { return v.LiftrResourceCategory }).(pulumi.StringOutput)
}

// The priority of the resource.
func (o MonitorPropertiesResponseOutput) LiftrResourcePreference() pulumi.IntOutput {
	return o.ApplyT(func(v MonitorPropertiesResponse) int { return v.LiftrResourcePreference }).(pulumi.IntOutput)
}

func (o MonitorPropertiesResponseOutput) LogzOrganizationProperties() LogzOrganizationPropertiesResponsePtrOutput {
	return o.ApplyT(func(v MonitorPropertiesResponse) *LogzOrganizationPropertiesResponse {
		return v.LogzOrganizationProperties
	}).(LogzOrganizationPropertiesResponsePtrOutput)
}

// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
func (o MonitorPropertiesResponseOutput) MarketplaceSubscriptionStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorPropertiesResponse) *string { return v.MarketplaceSubscriptionStatus }).(pulumi.StringPtrOutput)
}

// Flag specifying if the resource monitoring is enabled or disabled.
func (o MonitorPropertiesResponseOutput) MonitoringStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorPropertiesResponse) *string { return v.MonitoringStatus }).(pulumi.StringPtrOutput)
}

func (o MonitorPropertiesResponseOutput) PlanData() PlanDataResponsePtrOutput {
	return o.ApplyT(func(v MonitorPropertiesResponse) *PlanDataResponse { return v.PlanData }).(PlanDataResponsePtrOutput)
}

// Flag specifying if the resource provisioning state as tracked by ARM.
func (o MonitorPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

func (o MonitorPropertiesResponseOutput) UserInfo() UserInfoResponsePtrOutput {
	return o.ApplyT(func(v MonitorPropertiesResponse) *UserInfoResponse { return v.UserInfo }).(UserInfoResponsePtrOutput)
}

// The properties of a resource currently being monitored by the Logz monitor resource.
type MonitoredResourceResponse struct {
	// The ARM id of the resource.
	Id *string `pulumi:"id"`
	// Reason for why the resource is sending logs (or why it is not sending).
	ReasonForLogsStatus *string `pulumi:"reasonForLogsStatus"`
	// Reason for why the resource is sending metrics (or why it is not sending).
	ReasonForMetricsStatus *string `pulumi:"reasonForMetricsStatus"`
	// Flag indicating if resource is sending logs to Logz.
	SendingLogs *bool `pulumi:"sendingLogs"`
	// Flag indicating if resource is sending metrics to Logz.
	SendingMetrics *bool `pulumi:"sendingMetrics"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
}

// The properties of a resource currently being monitored by the Logz monitor resource.
type MonitoredResourceResponseOutput struct{ *pulumi.OutputState }

func (MonitoredResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoredResourceResponse)(nil)).Elem()
}

func (o MonitoredResourceResponseOutput) ToMonitoredResourceResponseOutput() MonitoredResourceResponseOutput {
	return o
}

func (o MonitoredResourceResponseOutput) ToMonitoredResourceResponseOutputWithContext(ctx context.Context) MonitoredResourceResponseOutput {
	return o
}

// The ARM id of the resource.
func (o MonitoredResourceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredResourceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Reason for why the resource is sending logs (or why it is not sending).
func (o MonitoredResourceResponseOutput) ReasonForLogsStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredResourceResponse) *string { return v.ReasonForLogsStatus }).(pulumi.StringPtrOutput)
}

// Reason for why the resource is sending metrics (or why it is not sending).
func (o MonitoredResourceResponseOutput) ReasonForMetricsStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredResourceResponse) *string { return v.ReasonForMetricsStatus }).(pulumi.StringPtrOutput)
}

// Flag indicating if resource is sending logs to Logz.
func (o MonitoredResourceResponseOutput) SendingLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MonitoredResourceResponse) *bool { return v.SendingLogs }).(pulumi.BoolPtrOutput)
}

// Flag indicating if resource is sending metrics to Logz.
func (o MonitoredResourceResponseOutput) SendingMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MonitoredResourceResponse) *bool { return v.SendingMetrics }).(pulumi.BoolPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o MonitoredResourceResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v MonitoredResourceResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

type MonitoredResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (MonitoredResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoredResourceResponse)(nil)).Elem()
}

func (o MonitoredResourceResponseArrayOutput) ToMonitoredResourceResponseArrayOutput() MonitoredResourceResponseArrayOutput {
	return o
}

func (o MonitoredResourceResponseArrayOutput) ToMonitoredResourceResponseArrayOutputWithContext(ctx context.Context) MonitoredResourceResponseArrayOutput {
	return o
}

func (o MonitoredResourceResponseArrayOutput) Index(i pulumi.IntInput) MonitoredResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitoredResourceResponse {
		return vs[0].([]MonitoredResourceResponse)[vs[1].(int)]
	}).(MonitoredResourceResponseOutput)
}

// Definition of the properties for a TagRules resource.
type MonitoringTagRulesProperties struct {
	// Set of rules for sending logs for the Monitor resource.
	LogRules *LogRules `pulumi:"logRules"`
}

// MonitoringTagRulesPropertiesInput is an input type that accepts MonitoringTagRulesPropertiesArgs and MonitoringTagRulesPropertiesOutput values.
// You can construct a concrete instance of `MonitoringTagRulesPropertiesInput` via:
//
//	MonitoringTagRulesPropertiesArgs{...}
type MonitoringTagRulesPropertiesInput interface {
	pulumi.Input

	ToMonitoringTagRulesPropertiesOutput() MonitoringTagRulesPropertiesOutput
	ToMonitoringTagRulesPropertiesOutputWithContext(context.Context) MonitoringTagRulesPropertiesOutput
}

// Definition of the properties for a TagRules resource.
type MonitoringTagRulesPropertiesArgs struct {
	// Set of rules for sending logs for the Monitor resource.
	LogRules LogRulesPtrInput `pulumi:"logRules"`
}

func (MonitoringTagRulesPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringTagRulesProperties)(nil)).Elem()
}

func (i MonitoringTagRulesPropertiesArgs) ToMonitoringTagRulesPropertiesOutput() MonitoringTagRulesPropertiesOutput {
	return i.ToMonitoringTagRulesPropertiesOutputWithContext(context.Background())
}

func (i MonitoringTagRulesPropertiesArgs) ToMonitoringTagRulesPropertiesOutputWithContext(ctx context.Context) MonitoringTagRulesPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringTagRulesPropertiesOutput)
}

func (i MonitoringTagRulesPropertiesArgs) ToMonitoringTagRulesPropertiesPtrOutput() MonitoringTagRulesPropertiesPtrOutput {
	return i.ToMonitoringTagRulesPropertiesPtrOutputWithContext(context.Background())
}

func (i MonitoringTagRulesPropertiesArgs) ToMonitoringTagRulesPropertiesPtrOutputWithContext(ctx context.Context) MonitoringTagRulesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringTagRulesPropertiesOutput).ToMonitoringTagRulesPropertiesPtrOutputWithContext(ctx)
}

// MonitoringTagRulesPropertiesPtrInput is an input type that accepts MonitoringTagRulesPropertiesArgs, MonitoringTagRulesPropertiesPtr and MonitoringTagRulesPropertiesPtrOutput values.
// You can construct a concrete instance of `MonitoringTagRulesPropertiesPtrInput` via:
//
//	        MonitoringTagRulesPropertiesArgs{...}
//
//	or:
//
//	        nil
type MonitoringTagRulesPropertiesPtrInput interface {
	pulumi.Input

	ToMonitoringTagRulesPropertiesPtrOutput() MonitoringTagRulesPropertiesPtrOutput
	ToMonitoringTagRulesPropertiesPtrOutputWithContext(context.Context) MonitoringTagRulesPropertiesPtrOutput
}

type monitoringTagRulesPropertiesPtrType MonitoringTagRulesPropertiesArgs

func MonitoringTagRulesPropertiesPtr(v *MonitoringTagRulesPropertiesArgs) MonitoringTagRulesPropertiesPtrInput {
	return (*monitoringTagRulesPropertiesPtrType)(v)
}

func (*monitoringTagRulesPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringTagRulesProperties)(nil)).Elem()
}

func (i *monitoringTagRulesPropertiesPtrType) ToMonitoringTagRulesPropertiesPtrOutput() MonitoringTagRulesPropertiesPtrOutput {
	return i.ToMonitoringTagRulesPropertiesPtrOutputWithContext(context.Background())
}

func (i *monitoringTagRulesPropertiesPtrType) ToMonitoringTagRulesPropertiesPtrOutputWithContext(ctx context.Context) MonitoringTagRulesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringTagRulesPropertiesPtrOutput)
}

// Definition of the properties for a TagRules resource.
type MonitoringTagRulesPropertiesOutput struct{ *pulumi.OutputState }

func (MonitoringTagRulesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringTagRulesProperties)(nil)).Elem()
}

func (o MonitoringTagRulesPropertiesOutput) ToMonitoringTagRulesPropertiesOutput() MonitoringTagRulesPropertiesOutput {
	return o
}

func (o MonitoringTagRulesPropertiesOutput) ToMonitoringTagRulesPropertiesOutputWithContext(ctx context.Context) MonitoringTagRulesPropertiesOutput {
	return o
}

func (o MonitoringTagRulesPropertiesOutput) ToMonitoringTagRulesPropertiesPtrOutput() MonitoringTagRulesPropertiesPtrOutput {
	return o.ToMonitoringTagRulesPropertiesPtrOutputWithContext(context.Background())
}

func (o MonitoringTagRulesPropertiesOutput) ToMonitoringTagRulesPropertiesPtrOutputWithContext(ctx context.Context) MonitoringTagRulesPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitoringTagRulesProperties) *MonitoringTagRulesProperties {
		return &v
	}).(MonitoringTagRulesPropertiesPtrOutput)
}

// Set of rules for sending logs for the Monitor resource.
func (o MonitoringTagRulesPropertiesOutput) LogRules() LogRulesPtrOutput {
	return o.ApplyT(func(v MonitoringTagRulesProperties) *LogRules { return v.LogRules }).(LogRulesPtrOutput)
}

type MonitoringTagRulesPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MonitoringTagRulesPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringTagRulesProperties)(nil)).Elem()
}

func (o MonitoringTagRulesPropertiesPtrOutput) ToMonitoringTagRulesPropertiesPtrOutput() MonitoringTagRulesPropertiesPtrOutput {
	return o
}

func (o MonitoringTagRulesPropertiesPtrOutput) ToMonitoringTagRulesPropertiesPtrOutputWithContext(ctx context.Context) MonitoringTagRulesPropertiesPtrOutput {
	return o
}

func (o MonitoringTagRulesPropertiesPtrOutput) Elem() MonitoringTagRulesPropertiesOutput {
	return o.ApplyT(func(v *MonitoringTagRulesProperties) MonitoringTagRulesProperties {
		if v != nil {
			return *v
		}
		var ret MonitoringTagRulesProperties
		return ret
	}).(MonitoringTagRulesPropertiesOutput)
}

// Set of rules for sending logs for the Monitor resource.
func (o MonitoringTagRulesPropertiesPtrOutput) LogRules() LogRulesPtrOutput {
	return o.ApplyT(func(v *MonitoringTagRulesProperties) *LogRules {
		if v == nil {
			return nil
		}
		return v.LogRules
	}).(LogRulesPtrOutput)
}

// Definition of the properties for a TagRules resource.
type MonitoringTagRulesPropertiesResponse struct {
	// Set of rules for sending logs for the Monitor resource.
	LogRules *LogRulesResponse `pulumi:"logRules"`
	// Flag specifying if the resource provisioning state as tracked by ARM.
	ProvisioningState string `pulumi:"provisioningState"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
}

// Definition of the properties for a TagRules resource.
type MonitoringTagRulesPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MonitoringTagRulesPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringTagRulesPropertiesResponse)(nil)).Elem()
}

func (o MonitoringTagRulesPropertiesResponseOutput) ToMonitoringTagRulesPropertiesResponseOutput() MonitoringTagRulesPropertiesResponseOutput {
	return o
}

func (o MonitoringTagRulesPropertiesResponseOutput) ToMonitoringTagRulesPropertiesResponseOutputWithContext(ctx context.Context) MonitoringTagRulesPropertiesResponseOutput {
	return o
}

// Set of rules for sending logs for the Monitor resource.
func (o MonitoringTagRulesPropertiesResponseOutput) LogRules() LogRulesResponsePtrOutput {
	return o.ApplyT(func(v MonitoringTagRulesPropertiesResponse) *LogRulesResponse { return v.LogRules }).(LogRulesResponsePtrOutput)
}

// Flag specifying if the resource provisioning state as tracked by ARM.
func (o MonitoringTagRulesPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringTagRulesPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o MonitoringTagRulesPropertiesResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v MonitoringTagRulesPropertiesResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

type PlanData struct {
	// different billing cycles like MONTHLY/WEEKLY. this could be enum
	BillingCycle *string `pulumi:"billingCycle"`
	// date when plan was applied
	EffectiveDate *string `pulumi:"effectiveDate"`
	// plan id as published by Logz
	PlanDetails *string `pulumi:"planDetails"`
	// different usage type like PAYG/COMMITTED. this could be enum
	UsageType *string `pulumi:"usageType"`
}

// PlanDataInput is an input type that accepts PlanDataArgs and PlanDataOutput values.
// You can construct a concrete instance of `PlanDataInput` via:
//
//	PlanDataArgs{...}
type PlanDataInput interface {
	pulumi.Input

	ToPlanDataOutput() PlanDataOutput
	ToPlanDataOutputWithContext(context.Context) PlanDataOutput
}

type PlanDataArgs struct {
	// different billing cycles like MONTHLY/WEEKLY. this could be enum
	BillingCycle pulumi.StringPtrInput `pulumi:"billingCycle"`
	// date when plan was applied
	EffectiveDate pulumi.StringPtrInput `pulumi:"effectiveDate"`
	// plan id as published by Logz
	PlanDetails pulumi.StringPtrInput `pulumi:"planDetails"`
	// different usage type like PAYG/COMMITTED. this could be enum
	UsageType pulumi.StringPtrInput `pulumi:"usageType"`
}

func (PlanDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanData)(nil)).Elem()
}

func (i PlanDataArgs) ToPlanDataOutput() PlanDataOutput {
	return i.ToPlanDataOutputWithContext(context.Background())
}

func (i PlanDataArgs) ToPlanDataOutputWithContext(ctx context.Context) PlanDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanDataOutput)
}

func (i PlanDataArgs) ToPlanDataPtrOutput() PlanDataPtrOutput {
	return i.ToPlanDataPtrOutputWithContext(context.Background())
}

func (i PlanDataArgs) ToPlanDataPtrOutputWithContext(ctx context.Context) PlanDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanDataOutput).ToPlanDataPtrOutputWithContext(ctx)
}

// PlanDataPtrInput is an input type that accepts PlanDataArgs, PlanDataPtr and PlanDataPtrOutput values.
// You can construct a concrete instance of `PlanDataPtrInput` via:
//
//	        PlanDataArgs{...}
//
//	or:
//
//	        nil
type PlanDataPtrInput interface {
	pulumi.Input

	ToPlanDataPtrOutput() PlanDataPtrOutput
	ToPlanDataPtrOutputWithContext(context.Context) PlanDataPtrOutput
}

type planDataPtrType PlanDataArgs

func PlanDataPtr(v *PlanDataArgs) PlanDataPtrInput {
	return (*planDataPtrType)(v)
}

func (*planDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanData)(nil)).Elem()
}

func (i *planDataPtrType) ToPlanDataPtrOutput() PlanDataPtrOutput {
	return i.ToPlanDataPtrOutputWithContext(context.Background())
}

func (i *planDataPtrType) ToPlanDataPtrOutputWithContext(ctx context.Context) PlanDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanDataPtrOutput)
}

type PlanDataOutput struct{ *pulumi.OutputState }

func (PlanDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanData)(nil)).Elem()
}

func (o PlanDataOutput) ToPlanDataOutput() PlanDataOutput {
	return o
}

func (o PlanDataOutput) ToPlanDataOutputWithContext(ctx context.Context) PlanDataOutput {
	return o
}

func (o PlanDataOutput) ToPlanDataPtrOutput() PlanDataPtrOutput {
	return o.ToPlanDataPtrOutputWithContext(context.Background())
}

func (o PlanDataOutput) ToPlanDataPtrOutputWithContext(ctx context.Context) PlanDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlanData) *PlanData {
		return &v
	}).(PlanDataPtrOutput)
}

// different billing cycles like MONTHLY/WEEKLY. this could be enum
func (o PlanDataOutput) BillingCycle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanData) *string { return v.BillingCycle }).(pulumi.StringPtrOutput)
}

// date when plan was applied
func (o PlanDataOutput) EffectiveDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanData) *string { return v.EffectiveDate }).(pulumi.StringPtrOutput)
}

// plan id as published by Logz
func (o PlanDataOutput) PlanDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanData) *string { return v.PlanDetails }).(pulumi.StringPtrOutput)
}

// different usage type like PAYG/COMMITTED. this could be enum
func (o PlanDataOutput) UsageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanData) *string { return v.UsageType }).(pulumi.StringPtrOutput)
}

type PlanDataPtrOutput struct{ *pulumi.OutputState }

func (PlanDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanData)(nil)).Elem()
}

func (o PlanDataPtrOutput) ToPlanDataPtrOutput() PlanDataPtrOutput {
	return o
}

func (o PlanDataPtrOutput) ToPlanDataPtrOutputWithContext(ctx context.Context) PlanDataPtrOutput {
	return o
}

func (o PlanDataPtrOutput) Elem() PlanDataOutput {
	return o.ApplyT(func(v *PlanData) PlanData {
		if v != nil {
			return *v
		}
		var ret PlanData
		return ret
	}).(PlanDataOutput)
}

// different billing cycles like MONTHLY/WEEKLY. this could be enum
func (o PlanDataPtrOutput) BillingCycle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanData) *string {
		if v == nil {
			return nil
		}
		return v.BillingCycle
	}).(pulumi.StringPtrOutput)
}

// date when plan was applied
func (o PlanDataPtrOutput) EffectiveDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanData) *string {
		if v == nil {
			return nil
		}
		return v.EffectiveDate
	}).(pulumi.StringPtrOutput)
}

// plan id as published by Logz
func (o PlanDataPtrOutput) PlanDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanData) *string {
		if v == nil {
			return nil
		}
		return v.PlanDetails
	}).(pulumi.StringPtrOutput)
}

// different usage type like PAYG/COMMITTED. this could be enum
func (o PlanDataPtrOutput) UsageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanData) *string {
		if v == nil {
			return nil
		}
		return v.UsageType
	}).(pulumi.StringPtrOutput)
}

type PlanDataResponse struct {
	// different billing cycles like MONTHLY/WEEKLY. this could be enum
	BillingCycle *string `pulumi:"billingCycle"`
	// date when plan was applied
	EffectiveDate *string `pulumi:"effectiveDate"`
	// plan id as published by Logz
	PlanDetails *string `pulumi:"planDetails"`
	// different usage type like PAYG/COMMITTED. this could be enum
	UsageType *string `pulumi:"usageType"`
}

type PlanDataResponseOutput struct{ *pulumi.OutputState }

func (PlanDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanDataResponse)(nil)).Elem()
}

func (o PlanDataResponseOutput) ToPlanDataResponseOutput() PlanDataResponseOutput {
	return o
}

func (o PlanDataResponseOutput) ToPlanDataResponseOutputWithContext(ctx context.Context) PlanDataResponseOutput {
	return o
}

// different billing cycles like MONTHLY/WEEKLY. this could be enum
func (o PlanDataResponseOutput) BillingCycle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanDataResponse) *string { return v.BillingCycle }).(pulumi.StringPtrOutput)
}

// date when plan was applied
func (o PlanDataResponseOutput) EffectiveDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanDataResponse) *string { return v.EffectiveDate }).(pulumi.StringPtrOutput)
}

// plan id as published by Logz
func (o PlanDataResponseOutput) PlanDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanDataResponse) *string { return v.PlanDetails }).(pulumi.StringPtrOutput)
}

// different usage type like PAYG/COMMITTED. this could be enum
func (o PlanDataResponseOutput) UsageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanDataResponse) *string { return v.UsageType }).(pulumi.StringPtrOutput)
}

type PlanDataResponsePtrOutput struct{ *pulumi.OutputState }

func (PlanDataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanDataResponse)(nil)).Elem()
}

func (o PlanDataResponsePtrOutput) ToPlanDataResponsePtrOutput() PlanDataResponsePtrOutput {
	return o
}

func (o PlanDataResponsePtrOutput) ToPlanDataResponsePtrOutputWithContext(ctx context.Context) PlanDataResponsePtrOutput {
	return o
}

func (o PlanDataResponsePtrOutput) Elem() PlanDataResponseOutput {
	return o.ApplyT(func(v *PlanDataResponse) PlanDataResponse {
		if v != nil {
			return *v
		}
		var ret PlanDataResponse
		return ret
	}).(PlanDataResponseOutput)
}

// different billing cycles like MONTHLY/WEEKLY. this could be enum
func (o PlanDataResponsePtrOutput) BillingCycle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.BillingCycle
	}).(pulumi.StringPtrOutput)
}

// date when plan was applied
func (o PlanDataResponsePtrOutput) EffectiveDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.EffectiveDate
	}).(pulumi.StringPtrOutput)
}

// plan id as published by Logz
func (o PlanDataResponsePtrOutput) PlanDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.PlanDetails
	}).(pulumi.StringPtrOutput)
}

// different usage type like PAYG/COMMITTED. this could be enum
func (o PlanDataResponsePtrOutput) UsageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.UsageType
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

type UserInfo struct {
	// Email of the user used by Logz for contacting them if needed
	EmailAddress *string `pulumi:"emailAddress"`
	// First Name of the user
	FirstName *string `pulumi:"firstName"`
	// Last Name of the user
	LastName *string `pulumi:"lastName"`
	// Phone number of the user used by Logz for contacting them if needed
	PhoneNumber *string `pulumi:"phoneNumber"`
}

// UserInfoInput is an input type that accepts UserInfoArgs and UserInfoOutput values.
// You can construct a concrete instance of `UserInfoInput` via:
//
//	UserInfoArgs{...}
type UserInfoInput interface {
	pulumi.Input

	ToUserInfoOutput() UserInfoOutput
	ToUserInfoOutputWithContext(context.Context) UserInfoOutput
}

type UserInfoArgs struct {
	// Email of the user used by Logz for contacting them if needed
	EmailAddress pulumi.StringPtrInput `pulumi:"emailAddress"`
	// First Name of the user
	FirstName pulumi.StringPtrInput `pulumi:"firstName"`
	// Last Name of the user
	LastName pulumi.StringPtrInput `pulumi:"lastName"`
	// Phone number of the user used by Logz for contacting them if needed
	PhoneNumber pulumi.StringPtrInput `pulumi:"phoneNumber"`
}

func (UserInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInfo)(nil)).Elem()
}

func (i UserInfoArgs) ToUserInfoOutput() UserInfoOutput {
	return i.ToUserInfoOutputWithContext(context.Background())
}

func (i UserInfoArgs) ToUserInfoOutputWithContext(ctx context.Context) UserInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInfoOutput)
}

func (i UserInfoArgs) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return i.ToUserInfoPtrOutputWithContext(context.Background())
}

func (i UserInfoArgs) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInfoOutput).ToUserInfoPtrOutputWithContext(ctx)
}

// UserInfoPtrInput is an input type that accepts UserInfoArgs, UserInfoPtr and UserInfoPtrOutput values.
// You can construct a concrete instance of `UserInfoPtrInput` via:
//
//	        UserInfoArgs{...}
//
//	or:
//
//	        nil
type UserInfoPtrInput interface {
	pulumi.Input

	ToUserInfoPtrOutput() UserInfoPtrOutput
	ToUserInfoPtrOutputWithContext(context.Context) UserInfoPtrOutput
}

type userInfoPtrType UserInfoArgs

func UserInfoPtr(v *UserInfoArgs) UserInfoPtrInput {
	return (*userInfoPtrType)(v)
}

func (*userInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInfo)(nil)).Elem()
}

func (i *userInfoPtrType) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return i.ToUserInfoPtrOutputWithContext(context.Background())
}

func (i *userInfoPtrType) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInfoPtrOutput)
}

type UserInfoOutput struct{ *pulumi.OutputState }

func (UserInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInfo)(nil)).Elem()
}

func (o UserInfoOutput) ToUserInfoOutput() UserInfoOutput {
	return o
}

func (o UserInfoOutput) ToUserInfoOutputWithContext(ctx context.Context) UserInfoOutput {
	return o
}

func (o UserInfoOutput) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return o.ToUserInfoPtrOutputWithContext(context.Background())
}

func (o UserInfoOutput) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserInfo) *UserInfo {
		return &v
	}).(UserInfoPtrOutput)
}

// Email of the user used by Logz for contacting them if needed
func (o UserInfoOutput) EmailAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfo) *string { return v.EmailAddress }).(pulumi.StringPtrOutput)
}

// First Name of the user
func (o UserInfoOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfo) *string { return v.FirstName }).(pulumi.StringPtrOutput)
}

// Last Name of the user
func (o UserInfoOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfo) *string { return v.LastName }).(pulumi.StringPtrOutput)
}

// Phone number of the user used by Logz for contacting them if needed
func (o UserInfoOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfo) *string { return v.PhoneNumber }).(pulumi.StringPtrOutput)
}

type UserInfoPtrOutput struct{ *pulumi.OutputState }

func (UserInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInfo)(nil)).Elem()
}

func (o UserInfoPtrOutput) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return o
}

func (o UserInfoPtrOutput) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return o
}

func (o UserInfoPtrOutput) Elem() UserInfoOutput {
	return o.ApplyT(func(v *UserInfo) UserInfo {
		if v != nil {
			return *v
		}
		var ret UserInfo
		return ret
	}).(UserInfoOutput)
}

// Email of the user used by Logz for contacting them if needed
func (o UserInfoPtrOutput) EmailAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfo) *string {
		if v == nil {
			return nil
		}
		return v.EmailAddress
	}).(pulumi.StringPtrOutput)
}

// First Name of the user
func (o UserInfoPtrOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfo) *string {
		if v == nil {
			return nil
		}
		return v.FirstName
	}).(pulumi.StringPtrOutput)
}

// Last Name of the user
func (o UserInfoPtrOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfo) *string {
		if v == nil {
			return nil
		}
		return v.LastName
	}).(pulumi.StringPtrOutput)
}

// Phone number of the user used by Logz for contacting them if needed
func (o UserInfoPtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfo) *string {
		if v == nil {
			return nil
		}
		return v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

type UserInfoResponse struct {
	// Email of the user used by Logz for contacting them if needed
	EmailAddress *string `pulumi:"emailAddress"`
	// First Name of the user
	FirstName *string `pulumi:"firstName"`
	// Last Name of the user
	LastName *string `pulumi:"lastName"`
	// Phone number of the user used by Logz for contacting them if needed
	PhoneNumber *string `pulumi:"phoneNumber"`
}

type UserInfoResponseOutput struct{ *pulumi.OutputState }

func (UserInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInfoResponse)(nil)).Elem()
}

func (o UserInfoResponseOutput) ToUserInfoResponseOutput() UserInfoResponseOutput {
	return o
}

func (o UserInfoResponseOutput) ToUserInfoResponseOutputWithContext(ctx context.Context) UserInfoResponseOutput {
	return o
}

// Email of the user used by Logz for contacting them if needed
func (o UserInfoResponseOutput) EmailAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfoResponse) *string { return v.EmailAddress }).(pulumi.StringPtrOutput)
}

// First Name of the user
func (o UserInfoResponseOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfoResponse) *string { return v.FirstName }).(pulumi.StringPtrOutput)
}

// Last Name of the user
func (o UserInfoResponseOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfoResponse) *string { return v.LastName }).(pulumi.StringPtrOutput)
}

// Phone number of the user used by Logz for contacting them if needed
func (o UserInfoResponseOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfoResponse) *string { return v.PhoneNumber }).(pulumi.StringPtrOutput)
}

type UserInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (UserInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInfoResponse)(nil)).Elem()
}

func (o UserInfoResponsePtrOutput) ToUserInfoResponsePtrOutput() UserInfoResponsePtrOutput {
	return o
}

func (o UserInfoResponsePtrOutput) ToUserInfoResponsePtrOutputWithContext(ctx context.Context) UserInfoResponsePtrOutput {
	return o
}

func (o UserInfoResponsePtrOutput) Elem() UserInfoResponseOutput {
	return o.ApplyT(func(v *UserInfoResponse) UserInfoResponse {
		if v != nil {
			return *v
		}
		var ret UserInfoResponse
		return ret
	}).(UserInfoResponseOutput)
}

// Email of the user used by Logz for contacting them if needed
func (o UserInfoResponsePtrOutput) EmailAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.EmailAddress
	}).(pulumi.StringPtrOutput)
}

// First Name of the user
func (o UserInfoResponsePtrOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.FirstName
	}).(pulumi.StringPtrOutput)
}

// Last Name of the user
func (o UserInfoResponsePtrOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastName
	}).(pulumi.StringPtrOutput)
}

// Phone number of the user used by Logz for contacting them if needed
func (o UserInfoResponsePtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

// Response for checking user's role for Logz.io account.
type UserRoleResponseResponse struct {
	// User roles on configured in Logz.io account.
	Role *string `pulumi:"role"`
}

// Response for checking user's role for Logz.io account.
type UserRoleResponseResponseOutput struct{ *pulumi.OutputState }

func (UserRoleResponseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserRoleResponseResponse)(nil)).Elem()
}

func (o UserRoleResponseResponseOutput) ToUserRoleResponseResponseOutput() UserRoleResponseResponseOutput {
	return o
}

func (o UserRoleResponseResponseOutput) ToUserRoleResponseResponseOutputWithContext(ctx context.Context) UserRoleResponseResponseOutput {
	return o
}

// User roles on configured in Logz.io account.
func (o UserRoleResponseResponseOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserRoleResponseResponse) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type UserRoleResponseResponseArrayOutput struct{ *pulumi.OutputState }

func (UserRoleResponseResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserRoleResponseResponse)(nil)).Elem()
}

func (o UserRoleResponseResponseArrayOutput) ToUserRoleResponseResponseArrayOutput() UserRoleResponseResponseArrayOutput {
	return o
}

func (o UserRoleResponseResponseArrayOutput) ToUserRoleResponseResponseArrayOutputWithContext(ctx context.Context) UserRoleResponseResponseArrayOutput {
	return o
}

func (o UserRoleResponseResponseArrayOutput) Index(i pulumi.IntInput) UserRoleResponseResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserRoleResponseResponse {
		return vs[0].([]UserRoleResponseResponse)[vs[1].(int)]
	}).(UserRoleResponseResponseOutput)
}

// VM Resource Ids
type VMResourcesResponse struct {
	// Version of the Logz agent installed on the VM.
	AgentVersion *string `pulumi:"agentVersion"`
	// Request of a list vm host update operation.
	Id *string `pulumi:"id"`
}

// VM Resource Ids
type VMResourcesResponseOutput struct{ *pulumi.OutputState }

func (VMResourcesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VMResourcesResponse)(nil)).Elem()
}

func (o VMResourcesResponseOutput) ToVMResourcesResponseOutput() VMResourcesResponseOutput {
	return o
}

func (o VMResourcesResponseOutput) ToVMResourcesResponseOutputWithContext(ctx context.Context) VMResourcesResponseOutput {
	return o
}

// Version of the Logz agent installed on the VM.
func (o VMResourcesResponseOutput) AgentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VMResourcesResponse) *string { return v.AgentVersion }).(pulumi.StringPtrOutput)
}

// Request of a list vm host update operation.
func (o VMResourcesResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VMResourcesResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type VMResourcesResponseArrayOutput struct{ *pulumi.OutputState }

func (VMResourcesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VMResourcesResponse)(nil)).Elem()
}

func (o VMResourcesResponseArrayOutput) ToVMResourcesResponseArrayOutput() VMResourcesResponseArrayOutput {
	return o
}

func (o VMResourcesResponseArrayOutput) ToVMResourcesResponseArrayOutputWithContext(ctx context.Context) VMResourcesResponseArrayOutput {
	return o
}

func (o VMResourcesResponseArrayOutput) Index(i pulumi.IntInput) VMResourcesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VMResourcesResponse {
		return vs[0].([]VMResourcesResponse)[vs[1].(int)]
	}).(VMResourcesResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(FilteringTagOutput{})
	pulumi.RegisterOutputType(FilteringTagArrayOutput{})
	pulumi.RegisterOutputType(FilteringTagResponseOutput{})
	pulumi.RegisterOutputType(FilteringTagResponseArrayOutput{})
	pulumi.RegisterOutputType(IdentityPropertiesOutput{})
	pulumi.RegisterOutputType(IdentityPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IdentityPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IdentityPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(LogRulesOutput{})
	pulumi.RegisterOutputType(LogRulesPtrOutput{})
	pulumi.RegisterOutputType(LogRulesResponseOutput{})
	pulumi.RegisterOutputType(LogRulesResponsePtrOutput{})
	pulumi.RegisterOutputType(LogzOrganizationPropertiesOutput{})
	pulumi.RegisterOutputType(LogzOrganizationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(LogzOrganizationPropertiesResponseOutput{})
	pulumi.RegisterOutputType(LogzOrganizationPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(MonitorPropertiesOutput{})
	pulumi.RegisterOutputType(MonitorPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MonitorPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MonitoredResourceResponseOutput{})
	pulumi.RegisterOutputType(MonitoredResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(MonitoringTagRulesPropertiesOutput{})
	pulumi.RegisterOutputType(MonitoringTagRulesPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MonitoringTagRulesPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PlanDataOutput{})
	pulumi.RegisterOutputType(PlanDataPtrOutput{})
	pulumi.RegisterOutputType(PlanDataResponseOutput{})
	pulumi.RegisterOutputType(PlanDataResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UserInfoOutput{})
	pulumi.RegisterOutputType(UserInfoPtrOutput{})
	pulumi.RegisterOutputType(UserInfoResponseOutput{})
	pulumi.RegisterOutputType(UserInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(UserRoleResponseResponseOutput{})
	pulumi.RegisterOutputType(UserRoleResponseResponseArrayOutput{})
	pulumi.RegisterOutputType(VMResourcesResponseOutput{})
	pulumi.RegisterOutputType(VMResourcesResponseArrayOutput{})
}
