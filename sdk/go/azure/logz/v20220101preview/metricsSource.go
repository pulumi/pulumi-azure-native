// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220101preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MetricsSource struct {
	pulumi.CustomResourceState

	Identity IdentityPropertiesResponsePtrOutput `pulumi:"identity"`
	Location pulumi.StringOutput                 `pulumi:"location"`
	// Name of the monitor resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties specific to the monitor resource.
	Properties MonitorPropertiesResponseOutput `pulumi:"properties"`
	// The system metadata relating to this resource
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	Tags       pulumi.StringMapOutput   `pulumi:"tags"`
	// The type of the monitor resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewMetricsSource registers a new resource with the given unique name, arguments, and options.
func NewMetricsSource(ctx *pulumi.Context,
	name string, args *MetricsSourceArgs, opts ...pulumi.ResourceOption) (*MetricsSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MonitorName == nil {
		return nil, errors.New("invalid value for required argument 'MonitorName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:logz:MetricsSource"),
		},
	})
	opts = append(opts, aliases)
	var resource MetricsSource
	err := ctx.RegisterResource("azure-native:logz/v20220101preview:MetricsSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricsSource gets an existing MetricsSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricsSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricsSourceState, opts ...pulumi.ResourceOption) (*MetricsSource, error) {
	var resource MetricsSource
	err := ctx.ReadResource("azure-native:logz/v20220101preview:MetricsSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricsSource resources.
type metricsSourceState struct {
}

type MetricsSourceState struct {
}

func (MetricsSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricsSourceState)(nil)).Elem()
}

type metricsSourceArgs struct {
	Identity *IdentityProperties `pulumi:"identity"`
	Location *string             `pulumi:"location"`
	// Metrics Account resource name
	MetricsSourceName *string `pulumi:"metricsSourceName"`
	// Monitor resource name
	MonitorName string `pulumi:"monitorName"`
	// Properties specific to the monitor resource.
	Properties *MonitorProperties `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string            `pulumi:"resourceGroupName"`
	Tags              map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a MetricsSource resource.
type MetricsSourceArgs struct {
	Identity IdentityPropertiesPtrInput
	Location pulumi.StringPtrInput
	// Metrics Account resource name
	MetricsSourceName pulumi.StringPtrInput
	// Monitor resource name
	MonitorName pulumi.StringInput
	// Properties specific to the monitor resource.
	Properties MonitorPropertiesPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	Tags              pulumi.StringMapInput
}

func (MetricsSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricsSourceArgs)(nil)).Elem()
}

type MetricsSourceInput interface {
	pulumi.Input

	ToMetricsSourceOutput() MetricsSourceOutput
	ToMetricsSourceOutputWithContext(ctx context.Context) MetricsSourceOutput
}

func (*MetricsSource) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricsSource)(nil)).Elem()
}

func (i *MetricsSource) ToMetricsSourceOutput() MetricsSourceOutput {
	return i.ToMetricsSourceOutputWithContext(context.Background())
}

func (i *MetricsSource) ToMetricsSourceOutputWithContext(ctx context.Context) MetricsSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricsSourceOutput)
}

type MetricsSourceOutput struct{ *pulumi.OutputState }

func (MetricsSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricsSource)(nil)).Elem()
}

func (o MetricsSourceOutput) ToMetricsSourceOutput() MetricsSourceOutput {
	return o
}

func (o MetricsSourceOutput) ToMetricsSourceOutputWithContext(ctx context.Context) MetricsSourceOutput {
	return o
}

func (o MetricsSourceOutput) Identity() IdentityPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *MetricsSource) IdentityPropertiesResponsePtrOutput { return v.Identity }).(IdentityPropertiesResponsePtrOutput)
}

func (o MetricsSourceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricsSource) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Name of the monitor resource.
func (o MetricsSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricsSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Properties specific to the monitor resource.
func (o MetricsSourceOutput) Properties() MonitorPropertiesResponseOutput {
	return o.ApplyT(func(v *MetricsSource) MonitorPropertiesResponseOutput { return v.Properties }).(MonitorPropertiesResponseOutput)
}

// The system metadata relating to this resource
func (o MetricsSourceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *MetricsSource) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

func (o MetricsSourceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MetricsSource) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the monitor resource.
func (o MetricsSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricsSource) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(MetricsSourceOutput{})
}
