// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200717preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A global reach connection resource
type GlobalReachConnection struct {
	pulumi.CustomResourceState

	// The network used for global reach carved out from the original network block provided for the private cloud
	AddressPrefix pulumi.StringOutput `pulumi:"addressPrefix"`
	// Authorization key from the peer express route used for the global reach connection
	AuthorizationKey pulumi.StringPtrOutput `pulumi:"authorizationKey"`
	// The connection status of the global reach connection
	CircuitConnectionStatus pulumi.StringOutput `pulumi:"circuitConnectionStatus"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Identifier of the ExpressRoute Circuit to peer with in the global reach connection
	PeerExpressRouteCircuit pulumi.StringPtrOutput `pulumi:"peerExpressRouteCircuit"`
	// The state of the  ExpressRoute Circuit Authorization provisioning
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewGlobalReachConnection registers a new resource with the given unique name, arguments, and options.
func NewGlobalReachConnection(ctx *pulumi.Context,
	name string, args *GlobalReachConnectionArgs, opts ...pulumi.ResourceOption) (*GlobalReachConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrivateCloudName == nil {
		return nil, errors.New("invalid value for required argument 'PrivateCloudName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:avs:GlobalReachConnection"),
		},
	})
	opts = append(opts, aliases)
	var resource GlobalReachConnection
	err := ctx.RegisterResource("azure-nextgen:avs/v20200717preview:GlobalReachConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlobalReachConnection gets an existing GlobalReachConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobalReachConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlobalReachConnectionState, opts ...pulumi.ResourceOption) (*GlobalReachConnection, error) {
	var resource GlobalReachConnection
	err := ctx.ReadResource("azure-nextgen:avs/v20200717preview:GlobalReachConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlobalReachConnection resources.
type globalReachConnectionState struct {
	// The network used for global reach carved out from the original network block provided for the private cloud
	AddressPrefix *string `pulumi:"addressPrefix"`
	// Authorization key from the peer express route used for the global reach connection
	AuthorizationKey *string `pulumi:"authorizationKey"`
	// The connection status of the global reach connection
	CircuitConnectionStatus *string `pulumi:"circuitConnectionStatus"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Identifier of the ExpressRoute Circuit to peer with in the global reach connection
	PeerExpressRouteCircuit *string `pulumi:"peerExpressRouteCircuit"`
	// The state of the  ExpressRoute Circuit Authorization provisioning
	ProvisioningState *string `pulumi:"provisioningState"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type GlobalReachConnectionState struct {
	// The network used for global reach carved out from the original network block provided for the private cloud
	AddressPrefix pulumi.StringPtrInput
	// Authorization key from the peer express route used for the global reach connection
	AuthorizationKey pulumi.StringPtrInput
	// The connection status of the global reach connection
	CircuitConnectionStatus pulumi.StringPtrInput
	// Resource name.
	Name pulumi.StringPtrInput
	// Identifier of the ExpressRoute Circuit to peer with in the global reach connection
	PeerExpressRouteCircuit pulumi.StringPtrInput
	// The state of the  ExpressRoute Circuit Authorization provisioning
	ProvisioningState pulumi.StringPtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (GlobalReachConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*globalReachConnectionState)(nil)).Elem()
}

type globalReachConnectionArgs struct {
	// Authorization key from the peer express route used for the global reach connection
	AuthorizationKey *string `pulumi:"authorizationKey"`
	// Name of the global reach connection in the private cloud
	GlobalReachConnectionName *string `pulumi:"globalReachConnectionName"`
	// Identifier of the ExpressRoute Circuit to peer with in the global reach connection
	PeerExpressRouteCircuit *string `pulumi:"peerExpressRouteCircuit"`
	// The name of the private cloud.
	PrivateCloudName string `pulumi:"privateCloudName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a GlobalReachConnection resource.
type GlobalReachConnectionArgs struct {
	// Authorization key from the peer express route used for the global reach connection
	AuthorizationKey pulumi.StringPtrInput
	// Name of the global reach connection in the private cloud
	GlobalReachConnectionName pulumi.StringPtrInput
	// Identifier of the ExpressRoute Circuit to peer with in the global reach connection
	PeerExpressRouteCircuit pulumi.StringPtrInput
	// The name of the private cloud.
	PrivateCloudName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
}

func (GlobalReachConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*globalReachConnectionArgs)(nil)).Elem()
}

type GlobalReachConnectionInput interface {
	pulumi.Input

	ToGlobalReachConnectionOutput() GlobalReachConnectionOutput
	ToGlobalReachConnectionOutputWithContext(ctx context.Context) GlobalReachConnectionOutput
}

func (*GlobalReachConnection) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalReachConnection)(nil))
}

func (i *GlobalReachConnection) ToGlobalReachConnectionOutput() GlobalReachConnectionOutput {
	return i.ToGlobalReachConnectionOutputWithContext(context.Background())
}

func (i *GlobalReachConnection) ToGlobalReachConnectionOutputWithContext(ctx context.Context) GlobalReachConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalReachConnectionOutput)
}

type GlobalReachConnectionOutput struct {
	*pulumi.OutputState
}

func (GlobalReachConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalReachConnection)(nil))
}

func (o GlobalReachConnectionOutput) ToGlobalReachConnectionOutput() GlobalReachConnectionOutput {
	return o
}

func (o GlobalReachConnectionOutput) ToGlobalReachConnectionOutputWithContext(ctx context.Context) GlobalReachConnectionOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GlobalReachConnectionOutput{})
}
