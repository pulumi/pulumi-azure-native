// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package avs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A cloud link resource
// API Version: 2021-06-01.
type CloudLink struct {
	pulumi.CustomResourceState

	// Identifier of the other private cloud participating in the link.
	LinkedCloud pulumi.StringPtrOutput `pulumi:"linkedCloud"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The state of the cloud link.
	Status pulumi.StringOutput `pulumi:"status"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewCloudLink registers a new resource with the given unique name, arguments, and options.
func NewCloudLink(ctx *pulumi.Context,
	name string, args *CloudLinkArgs, opts ...pulumi.ResourceOption) (*CloudLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrivateCloudName == nil {
		return nil, errors.New("invalid value for required argument 'PrivateCloudName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:avs/v20210601:CloudLink"),
		},
		{
			Type: pulumi.String("azure-native:avs/v20211201:CloudLink"),
		},
	})
	opts = append(opts, aliases)
	var resource CloudLink
	err := ctx.RegisterResource("azure-native:avs:CloudLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudLink gets an existing CloudLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudLinkState, opts ...pulumi.ResourceOption) (*CloudLink, error) {
	var resource CloudLink
	err := ctx.ReadResource("azure-native:avs:CloudLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudLink resources.
type cloudLinkState struct {
}

type CloudLinkState struct {
}

func (CloudLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudLinkState)(nil)).Elem()
}

type cloudLinkArgs struct {
	// Name of the cloud link resource
	CloudLinkName *string `pulumi:"cloudLinkName"`
	// Identifier of the other private cloud participating in the link.
	LinkedCloud *string `pulumi:"linkedCloud"`
	// The name of the private cloud.
	PrivateCloudName string `pulumi:"privateCloudName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a CloudLink resource.
type CloudLinkArgs struct {
	// Name of the cloud link resource
	CloudLinkName pulumi.StringPtrInput
	// Identifier of the other private cloud participating in the link.
	LinkedCloud pulumi.StringPtrInput
	// The name of the private cloud.
	PrivateCloudName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
}

func (CloudLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudLinkArgs)(nil)).Elem()
}

type CloudLinkInput interface {
	pulumi.Input

	ToCloudLinkOutput() CloudLinkOutput
	ToCloudLinkOutputWithContext(ctx context.Context) CloudLinkOutput
}

func (*CloudLink) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudLink)(nil)).Elem()
}

func (i *CloudLink) ToCloudLinkOutput() CloudLinkOutput {
	return i.ToCloudLinkOutputWithContext(context.Background())
}

func (i *CloudLink) ToCloudLinkOutputWithContext(ctx context.Context) CloudLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudLinkOutput)
}

type CloudLinkOutput struct{ *pulumi.OutputState }

func (CloudLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudLink)(nil)).Elem()
}

func (o CloudLinkOutput) ToCloudLinkOutput() CloudLinkOutput {
	return o
}

func (o CloudLinkOutput) ToCloudLinkOutputWithContext(ctx context.Context) CloudLinkOutput {
	return o
}

// Identifier of the other private cloud participating in the link.
func (o CloudLinkOutput) LinkedCloud() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudLink) pulumi.StringPtrOutput { return v.LinkedCloud }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o CloudLinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudLink) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The state of the cloud link.
func (o CloudLinkOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudLink) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Resource type.
func (o CloudLinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudLink) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(CloudLinkOutput{})
}
