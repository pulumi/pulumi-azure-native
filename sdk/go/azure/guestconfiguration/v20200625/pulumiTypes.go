// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200625

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Information about the guest configuration assignment.
type AssignmentInfoResponse struct {
	// Information about the configuration.
	Configuration *ConfigurationInfoResponse `pulumi:"configuration"`
	// Name of the guest configuration assignment.
	Name string `pulumi:"name"`
}

// Information about the guest configuration assignment.
type AssignmentInfoResponseOutput struct{ *pulumi.OutputState }

func (AssignmentInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentInfoResponse)(nil)).Elem()
}

func (o AssignmentInfoResponseOutput) ToAssignmentInfoResponseOutput() AssignmentInfoResponseOutput {
	return o
}

func (o AssignmentInfoResponseOutput) ToAssignmentInfoResponseOutputWithContext(ctx context.Context) AssignmentInfoResponseOutput {
	return o
}

// Information about the configuration.
func (o AssignmentInfoResponseOutput) Configuration() ConfigurationInfoResponsePtrOutput {
	return o.ApplyT(func(v AssignmentInfoResponse) *ConfigurationInfoResponse { return v.Configuration }).(ConfigurationInfoResponsePtrOutput)
}

// Name of the guest configuration assignment.
func (o AssignmentInfoResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentInfoResponse) string { return v.Name }).(pulumi.StringOutput)
}

type AssignmentInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (AssignmentInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignmentInfoResponse)(nil)).Elem()
}

func (o AssignmentInfoResponsePtrOutput) ToAssignmentInfoResponsePtrOutput() AssignmentInfoResponsePtrOutput {
	return o
}

func (o AssignmentInfoResponsePtrOutput) ToAssignmentInfoResponsePtrOutputWithContext(ctx context.Context) AssignmentInfoResponsePtrOutput {
	return o
}

func (o AssignmentInfoResponsePtrOutput) Elem() AssignmentInfoResponseOutput {
	return o.ApplyT(func(v *AssignmentInfoResponse) AssignmentInfoResponse {
		if v != nil {
			return *v
		}
		var ret AssignmentInfoResponse
		return ret
	}).(AssignmentInfoResponseOutput)
}

// Information about the configuration.
func (o AssignmentInfoResponsePtrOutput) Configuration() ConfigurationInfoResponsePtrOutput {
	return o.ApplyT(func(v *AssignmentInfoResponse) *ConfigurationInfoResponse {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ConfigurationInfoResponsePtrOutput)
}

// Name of the guest configuration assignment.
func (o AssignmentInfoResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignmentInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Reason and code for the compliance of the guest configuration assignment resource.
type AssignmentReportResourceComplianceReasonResponse struct {
	// Code for the compliance of the guest configuration assignment resource.
	Code string `pulumi:"code"`
	// Reason for the compliance of the guest configuration assignment resource.
	Phrase string `pulumi:"phrase"`
}

// Reason and code for the compliance of the guest configuration assignment resource.
type AssignmentReportResourceComplianceReasonResponseOutput struct{ *pulumi.OutputState }

func (AssignmentReportResourceComplianceReasonResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentReportResourceComplianceReasonResponse)(nil)).Elem()
}

func (o AssignmentReportResourceComplianceReasonResponseOutput) ToAssignmentReportResourceComplianceReasonResponseOutput() AssignmentReportResourceComplianceReasonResponseOutput {
	return o
}

func (o AssignmentReportResourceComplianceReasonResponseOutput) ToAssignmentReportResourceComplianceReasonResponseOutputWithContext(ctx context.Context) AssignmentReportResourceComplianceReasonResponseOutput {
	return o
}

// Code for the compliance of the guest configuration assignment resource.
func (o AssignmentReportResourceComplianceReasonResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResourceComplianceReasonResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Reason for the compliance of the guest configuration assignment resource.
func (o AssignmentReportResourceComplianceReasonResponseOutput) Phrase() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResourceComplianceReasonResponse) string { return v.Phrase }).(pulumi.StringOutput)
}

type AssignmentReportResourceComplianceReasonResponseArrayOutput struct{ *pulumi.OutputState }

func (AssignmentReportResourceComplianceReasonResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssignmentReportResourceComplianceReasonResponse)(nil)).Elem()
}

func (o AssignmentReportResourceComplianceReasonResponseArrayOutput) ToAssignmentReportResourceComplianceReasonResponseArrayOutput() AssignmentReportResourceComplianceReasonResponseArrayOutput {
	return o
}

func (o AssignmentReportResourceComplianceReasonResponseArrayOutput) ToAssignmentReportResourceComplianceReasonResponseArrayOutputWithContext(ctx context.Context) AssignmentReportResourceComplianceReasonResponseArrayOutput {
	return o
}

func (o AssignmentReportResourceComplianceReasonResponseArrayOutput) Index(i pulumi.IntInput) AssignmentReportResourceComplianceReasonResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssignmentReportResourceComplianceReasonResponse {
		return vs[0].([]AssignmentReportResourceComplianceReasonResponse)[vs[1].(int)]
	}).(AssignmentReportResourceComplianceReasonResponseOutput)
}

// The guest configuration assignment resource.
type AssignmentReportResourceResponse struct {
	// A value indicating compliance status of the machine for the assigned guest configuration.
	ComplianceStatus string `pulumi:"complianceStatus"`
	// Properties of a guest configuration assignment resource.
	Properties interface{} `pulumi:"properties"`
	// Compliance reason and reason code for a resource.
	Reasons []AssignmentReportResourceComplianceReasonResponse `pulumi:"reasons"`
	// Name of the guest configuration assignment resource setting.
	ResourceId string `pulumi:"resourceId"`
}

// The guest configuration assignment resource.
type AssignmentReportResourceResponseOutput struct{ *pulumi.OutputState }

func (AssignmentReportResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentReportResourceResponse)(nil)).Elem()
}

func (o AssignmentReportResourceResponseOutput) ToAssignmentReportResourceResponseOutput() AssignmentReportResourceResponseOutput {
	return o
}

func (o AssignmentReportResourceResponseOutput) ToAssignmentReportResourceResponseOutputWithContext(ctx context.Context) AssignmentReportResourceResponseOutput {
	return o
}

// A value indicating compliance status of the machine for the assigned guest configuration.
func (o AssignmentReportResourceResponseOutput) ComplianceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResourceResponse) string { return v.ComplianceStatus }).(pulumi.StringOutput)
}

// Properties of a guest configuration assignment resource.
func (o AssignmentReportResourceResponseOutput) Properties() pulumi.AnyOutput {
	return o.ApplyT(func(v AssignmentReportResourceResponse) interface{} { return v.Properties }).(pulumi.AnyOutput)
}

// Compliance reason and reason code for a resource.
func (o AssignmentReportResourceResponseOutput) Reasons() AssignmentReportResourceComplianceReasonResponseArrayOutput {
	return o.ApplyT(func(v AssignmentReportResourceResponse) []AssignmentReportResourceComplianceReasonResponse {
		return v.Reasons
	}).(AssignmentReportResourceComplianceReasonResponseArrayOutput)
}

// Name of the guest configuration assignment resource setting.
func (o AssignmentReportResourceResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResourceResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

type AssignmentReportResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (AssignmentReportResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssignmentReportResourceResponse)(nil)).Elem()
}

func (o AssignmentReportResourceResponseArrayOutput) ToAssignmentReportResourceResponseArrayOutput() AssignmentReportResourceResponseArrayOutput {
	return o
}

func (o AssignmentReportResourceResponseArrayOutput) ToAssignmentReportResourceResponseArrayOutputWithContext(ctx context.Context) AssignmentReportResourceResponseArrayOutput {
	return o
}

func (o AssignmentReportResourceResponseArrayOutput) Index(i pulumi.IntInput) AssignmentReportResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssignmentReportResourceResponse {
		return vs[0].([]AssignmentReportResourceResponse)[vs[1].(int)]
	}).(AssignmentReportResourceResponseOutput)
}

type AssignmentReportResponse struct {
	// Configuration details of the guest configuration assignment.
	Assignment *AssignmentInfoResponse `pulumi:"assignment"`
	// A value indicating compliance status of the machine for the assigned guest configuration.
	ComplianceStatus string `pulumi:"complianceStatus"`
	// End date and time of the guest configuration assignment compliance status check.
	EndTime string `pulumi:"endTime"`
	// ARM resource id of the report for the guest configuration assignment.
	Id string `pulumi:"id"`
	// Type of report, Consistency or Initial
	OperationType string `pulumi:"operationType"`
	// GUID that identifies the guest configuration assignment report under a subscription, resource group.
	ReportId string `pulumi:"reportId"`
	// The list of resources for which guest configuration assignment compliance is checked.
	Resources []AssignmentReportResourceResponse `pulumi:"resources"`
	// Start date and time of the guest configuration assignment compliance status check.
	StartTime string `pulumi:"startTime"`
	// Information about the VM.
	Vm *VMInfoResponse `pulumi:"vm"`
}

type AssignmentReportResponseOutput struct{ *pulumi.OutputState }

func (AssignmentReportResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentReportResponse)(nil)).Elem()
}

func (o AssignmentReportResponseOutput) ToAssignmentReportResponseOutput() AssignmentReportResponseOutput {
	return o
}

func (o AssignmentReportResponseOutput) ToAssignmentReportResponseOutputWithContext(ctx context.Context) AssignmentReportResponseOutput {
	return o
}

// Configuration details of the guest configuration assignment.
func (o AssignmentReportResponseOutput) Assignment() AssignmentInfoResponsePtrOutput {
	return o.ApplyT(func(v AssignmentReportResponse) *AssignmentInfoResponse { return v.Assignment }).(AssignmentInfoResponsePtrOutput)
}

// A value indicating compliance status of the machine for the assigned guest configuration.
func (o AssignmentReportResponseOutput) ComplianceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResponse) string { return v.ComplianceStatus }).(pulumi.StringOutput)
}

// End date and time of the guest configuration assignment compliance status check.
func (o AssignmentReportResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// ARM resource id of the report for the guest configuration assignment.
func (o AssignmentReportResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Type of report, Consistency or Initial
func (o AssignmentReportResponseOutput) OperationType() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResponse) string { return v.OperationType }).(pulumi.StringOutput)
}

// GUID that identifies the guest configuration assignment report under a subscription, resource group.
func (o AssignmentReportResponseOutput) ReportId() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResponse) string { return v.ReportId }).(pulumi.StringOutput)
}

// The list of resources for which guest configuration assignment compliance is checked.
func (o AssignmentReportResponseOutput) Resources() AssignmentReportResourceResponseArrayOutput {
	return o.ApplyT(func(v AssignmentReportResponse) []AssignmentReportResourceResponse { return v.Resources }).(AssignmentReportResourceResponseArrayOutput)
}

// Start date and time of the guest configuration assignment compliance status check.
func (o AssignmentReportResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Information about the VM.
func (o AssignmentReportResponseOutput) Vm() VMInfoResponsePtrOutput {
	return o.ApplyT(func(v AssignmentReportResponse) *VMInfoResponse { return v.Vm }).(VMInfoResponsePtrOutput)
}

type AssignmentReportResponsePtrOutput struct{ *pulumi.OutputState }

func (AssignmentReportResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignmentReportResponse)(nil)).Elem()
}

func (o AssignmentReportResponsePtrOutput) ToAssignmentReportResponsePtrOutput() AssignmentReportResponsePtrOutput {
	return o
}

func (o AssignmentReportResponsePtrOutput) ToAssignmentReportResponsePtrOutputWithContext(ctx context.Context) AssignmentReportResponsePtrOutput {
	return o
}

func (o AssignmentReportResponsePtrOutput) Elem() AssignmentReportResponseOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) AssignmentReportResponse {
		if v != nil {
			return *v
		}
		var ret AssignmentReportResponse
		return ret
	}).(AssignmentReportResponseOutput)
}

// Configuration details of the guest configuration assignment.
func (o AssignmentReportResponsePtrOutput) Assignment() AssignmentInfoResponsePtrOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) *AssignmentInfoResponse {
		if v == nil {
			return nil
		}
		return v.Assignment
	}).(AssignmentInfoResponsePtrOutput)
}

// A value indicating compliance status of the machine for the assigned guest configuration.
func (o AssignmentReportResponsePtrOutput) ComplianceStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ComplianceStatus
	}).(pulumi.StringPtrOutput)
}

// End date and time of the guest configuration assignment compliance status check.
func (o AssignmentReportResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndTime
	}).(pulumi.StringPtrOutput)
}

// ARM resource id of the report for the guest configuration assignment.
func (o AssignmentReportResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Type of report, Consistency or Initial
func (o AssignmentReportResponsePtrOutput) OperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OperationType
	}).(pulumi.StringPtrOutput)
}

// GUID that identifies the guest configuration assignment report under a subscription, resource group.
func (o AssignmentReportResponsePtrOutput) ReportId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReportId
	}).(pulumi.StringPtrOutput)
}

// The list of resources for which guest configuration assignment compliance is checked.
func (o AssignmentReportResponsePtrOutput) Resources() AssignmentReportResourceResponseArrayOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) []AssignmentReportResourceResponse {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(AssignmentReportResourceResponseArrayOutput)
}

// Start date and time of the guest configuration assignment compliance status check.
func (o AssignmentReportResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Information about the VM.
func (o AssignmentReportResponsePtrOutput) Vm() VMInfoResponsePtrOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) *VMInfoResponse {
		if v == nil {
			return nil
		}
		return v.Vm
	}).(VMInfoResponsePtrOutput)
}

// Information about the configuration.
type ConfigurationInfoResponse struct {
	// Name of the configuration.
	Name string `pulumi:"name"`
	// Version of the configuration.
	Version string `pulumi:"version"`
}

// Information about the configuration.
type ConfigurationInfoResponseOutput struct{ *pulumi.OutputState }

func (ConfigurationInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationInfoResponse)(nil)).Elem()
}

func (o ConfigurationInfoResponseOutput) ToConfigurationInfoResponseOutput() ConfigurationInfoResponseOutput {
	return o
}

func (o ConfigurationInfoResponseOutput) ToConfigurationInfoResponseOutputWithContext(ctx context.Context) ConfigurationInfoResponseOutput {
	return o
}

// Name of the configuration.
func (o ConfigurationInfoResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigurationInfoResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Version of the configuration.
func (o ConfigurationInfoResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigurationInfoResponse) string { return v.Version }).(pulumi.StringOutput)
}

type ConfigurationInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ConfigurationInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationInfoResponse)(nil)).Elem()
}

func (o ConfigurationInfoResponsePtrOutput) ToConfigurationInfoResponsePtrOutput() ConfigurationInfoResponsePtrOutput {
	return o
}

func (o ConfigurationInfoResponsePtrOutput) ToConfigurationInfoResponsePtrOutputWithContext(ctx context.Context) ConfigurationInfoResponsePtrOutput {
	return o
}

func (o ConfigurationInfoResponsePtrOutput) Elem() ConfigurationInfoResponseOutput {
	return o.ApplyT(func(v *ConfigurationInfoResponse) ConfigurationInfoResponse {
		if v != nil {
			return *v
		}
		var ret ConfigurationInfoResponse
		return ret
	}).(ConfigurationInfoResponseOutput)
}

// Name of the configuration.
func (o ConfigurationInfoResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Version of the configuration.
func (o ConfigurationInfoResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// Represents a configuration parameter.
type ConfigurationParameter struct {
	// Name of the configuration parameter.
	Name *string `pulumi:"name"`
	// Value of the configuration parameter.
	Value *string `pulumi:"value"`
}

// ConfigurationParameterInput is an input type that accepts ConfigurationParameterArgs and ConfigurationParameterOutput values.
// You can construct a concrete instance of `ConfigurationParameterInput` via:
//
//	ConfigurationParameterArgs{...}
type ConfigurationParameterInput interface {
	pulumi.Input

	ToConfigurationParameterOutput() ConfigurationParameterOutput
	ToConfigurationParameterOutputWithContext(context.Context) ConfigurationParameterOutput
}

// Represents a configuration parameter.
type ConfigurationParameterArgs struct {
	// Name of the configuration parameter.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value of the configuration parameter.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ConfigurationParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationParameter)(nil)).Elem()
}

func (i ConfigurationParameterArgs) ToConfigurationParameterOutput() ConfigurationParameterOutput {
	return i.ToConfigurationParameterOutputWithContext(context.Background())
}

func (i ConfigurationParameterArgs) ToConfigurationParameterOutputWithContext(ctx context.Context) ConfigurationParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationParameterOutput)
}

// ConfigurationParameterArrayInput is an input type that accepts ConfigurationParameterArray and ConfigurationParameterArrayOutput values.
// You can construct a concrete instance of `ConfigurationParameterArrayInput` via:
//
//	ConfigurationParameterArray{ ConfigurationParameterArgs{...} }
type ConfigurationParameterArrayInput interface {
	pulumi.Input

	ToConfigurationParameterArrayOutput() ConfigurationParameterArrayOutput
	ToConfigurationParameterArrayOutputWithContext(context.Context) ConfigurationParameterArrayOutput
}

type ConfigurationParameterArray []ConfigurationParameterInput

func (ConfigurationParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationParameter)(nil)).Elem()
}

func (i ConfigurationParameterArray) ToConfigurationParameterArrayOutput() ConfigurationParameterArrayOutput {
	return i.ToConfigurationParameterArrayOutputWithContext(context.Background())
}

func (i ConfigurationParameterArray) ToConfigurationParameterArrayOutputWithContext(ctx context.Context) ConfigurationParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationParameterArrayOutput)
}

// Represents a configuration parameter.
type ConfigurationParameterOutput struct{ *pulumi.OutputState }

func (ConfigurationParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationParameter)(nil)).Elem()
}

func (o ConfigurationParameterOutput) ToConfigurationParameterOutput() ConfigurationParameterOutput {
	return o
}

func (o ConfigurationParameterOutput) ToConfigurationParameterOutputWithContext(ctx context.Context) ConfigurationParameterOutput {
	return o
}

// Name of the configuration parameter.
func (o ConfigurationParameterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationParameter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value of the configuration parameter.
func (o ConfigurationParameterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationParameter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ConfigurationParameterArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationParameter)(nil)).Elem()
}

func (o ConfigurationParameterArrayOutput) ToConfigurationParameterArrayOutput() ConfigurationParameterArrayOutput {
	return o
}

func (o ConfigurationParameterArrayOutput) ToConfigurationParameterArrayOutputWithContext(ctx context.Context) ConfigurationParameterArrayOutput {
	return o
}

func (o ConfigurationParameterArrayOutput) Index(i pulumi.IntInput) ConfigurationParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigurationParameter {
		return vs[0].([]ConfigurationParameter)[vs[1].(int)]
	}).(ConfigurationParameterOutput)
}

// Represents a configuration parameter.
type ConfigurationParameterResponse struct {
	// Name of the configuration parameter.
	Name *string `pulumi:"name"`
	// Value of the configuration parameter.
	Value *string `pulumi:"value"`
}

// Represents a configuration parameter.
type ConfigurationParameterResponseOutput struct{ *pulumi.OutputState }

func (ConfigurationParameterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationParameterResponse)(nil)).Elem()
}

func (o ConfigurationParameterResponseOutput) ToConfigurationParameterResponseOutput() ConfigurationParameterResponseOutput {
	return o
}

func (o ConfigurationParameterResponseOutput) ToConfigurationParameterResponseOutputWithContext(ctx context.Context) ConfigurationParameterResponseOutput {
	return o
}

// Name of the configuration parameter.
func (o ConfigurationParameterResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationParameterResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value of the configuration parameter.
func (o ConfigurationParameterResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationParameterResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ConfigurationParameterResponseArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationParameterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationParameterResponse)(nil)).Elem()
}

func (o ConfigurationParameterResponseArrayOutput) ToConfigurationParameterResponseArrayOutput() ConfigurationParameterResponseArrayOutput {
	return o
}

func (o ConfigurationParameterResponseArrayOutput) ToConfigurationParameterResponseArrayOutputWithContext(ctx context.Context) ConfigurationParameterResponseArrayOutput {
	return o
}

func (o ConfigurationParameterResponseArrayOutput) Index(i pulumi.IntInput) ConfigurationParameterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigurationParameterResponse {
		return vs[0].([]ConfigurationParameterResponse)[vs[1].(int)]
	}).(ConfigurationParameterResponseOutput)
}

// Configuration setting of LCM (Local Configuration Manager).
type ConfigurationSetting struct {
	// Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration and StopConfiguration
	ActionAfterReboot *string `pulumi:"actionAfterReboot"`
	// If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node. Otherwise, false
	AllowModuleOverwrite *bool `pulumi:"allowModuleOverwrite"`
	// Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
	ConfigurationMode *string `pulumi:"configurationMode"`
	// How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode property is set to ApplyOnly. The default value is 15.
	ConfigurationModeFrequencyMins *float64 `pulumi:"configurationModeFrequencyMins"`
	// Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you will have to manually reboot the node for any configuration that requires it. The default value is false. To use this setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting with the xPendingReboot module.
	RebootIfNeeded *bool `pulumi:"rebootIfNeeded"`
	// The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored if the LCM is not configured in pull mode. The default value is 30.
	RefreshFrequencyMins *float64 `pulumi:"refreshFrequencyMins"`
}

// Defaults sets the appropriate defaults for ConfigurationSetting
func (val *ConfigurationSetting) Defaults() *ConfigurationSetting {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ConfigurationModeFrequencyMins) {
		configurationModeFrequencyMins_ := 15.0
		tmp.ConfigurationModeFrequencyMins = &configurationModeFrequencyMins_
	}
	if isZero(tmp.RefreshFrequencyMins) {
		refreshFrequencyMins_ := 30.0
		tmp.RefreshFrequencyMins = &refreshFrequencyMins_
	}
	return &tmp
}

// ConfigurationSettingInput is an input type that accepts ConfigurationSettingArgs and ConfigurationSettingOutput values.
// You can construct a concrete instance of `ConfigurationSettingInput` via:
//
//	ConfigurationSettingArgs{...}
type ConfigurationSettingInput interface {
	pulumi.Input

	ToConfigurationSettingOutput() ConfigurationSettingOutput
	ToConfigurationSettingOutputWithContext(context.Context) ConfigurationSettingOutput
}

// Configuration setting of LCM (Local Configuration Manager).
type ConfigurationSettingArgs struct {
	// Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration and StopConfiguration
	ActionAfterReboot pulumi.StringPtrInput `pulumi:"actionAfterReboot"`
	// If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node. Otherwise, false
	AllowModuleOverwrite pulumi.BoolPtrInput `pulumi:"allowModuleOverwrite"`
	// Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
	ConfigurationMode pulumi.StringPtrInput `pulumi:"configurationMode"`
	// How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode property is set to ApplyOnly. The default value is 15.
	ConfigurationModeFrequencyMins pulumi.Float64PtrInput `pulumi:"configurationModeFrequencyMins"`
	// Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you will have to manually reboot the node for any configuration that requires it. The default value is false. To use this setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting with the xPendingReboot module.
	RebootIfNeeded pulumi.BoolPtrInput `pulumi:"rebootIfNeeded"`
	// The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored if the LCM is not configured in pull mode. The default value is 30.
	RefreshFrequencyMins pulumi.Float64PtrInput `pulumi:"refreshFrequencyMins"`
}

// Defaults sets the appropriate defaults for ConfigurationSettingArgs
func (val *ConfigurationSettingArgs) Defaults() *ConfigurationSettingArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ConfigurationModeFrequencyMins) {
		tmp.ConfigurationModeFrequencyMins = pulumi.Float64Ptr(15.0)
	}
	if isZero(tmp.RefreshFrequencyMins) {
		tmp.RefreshFrequencyMins = pulumi.Float64Ptr(30.0)
	}
	return &tmp
}
func (ConfigurationSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationSetting)(nil)).Elem()
}

func (i ConfigurationSettingArgs) ToConfigurationSettingOutput() ConfigurationSettingOutput {
	return i.ToConfigurationSettingOutputWithContext(context.Background())
}

func (i ConfigurationSettingArgs) ToConfigurationSettingOutputWithContext(ctx context.Context) ConfigurationSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationSettingOutput)
}

func (i ConfigurationSettingArgs) ToConfigurationSettingPtrOutput() ConfigurationSettingPtrOutput {
	return i.ToConfigurationSettingPtrOutputWithContext(context.Background())
}

func (i ConfigurationSettingArgs) ToConfigurationSettingPtrOutputWithContext(ctx context.Context) ConfigurationSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationSettingOutput).ToConfigurationSettingPtrOutputWithContext(ctx)
}

// ConfigurationSettingPtrInput is an input type that accepts ConfigurationSettingArgs, ConfigurationSettingPtr and ConfigurationSettingPtrOutput values.
// You can construct a concrete instance of `ConfigurationSettingPtrInput` via:
//
//	        ConfigurationSettingArgs{...}
//
//	or:
//
//	        nil
type ConfigurationSettingPtrInput interface {
	pulumi.Input

	ToConfigurationSettingPtrOutput() ConfigurationSettingPtrOutput
	ToConfigurationSettingPtrOutputWithContext(context.Context) ConfigurationSettingPtrOutput
}

type configurationSettingPtrType ConfigurationSettingArgs

func ConfigurationSettingPtr(v *ConfigurationSettingArgs) ConfigurationSettingPtrInput {
	return (*configurationSettingPtrType)(v)
}

func (*configurationSettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationSetting)(nil)).Elem()
}

func (i *configurationSettingPtrType) ToConfigurationSettingPtrOutput() ConfigurationSettingPtrOutput {
	return i.ToConfigurationSettingPtrOutputWithContext(context.Background())
}

func (i *configurationSettingPtrType) ToConfigurationSettingPtrOutputWithContext(ctx context.Context) ConfigurationSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationSettingPtrOutput)
}

// Configuration setting of LCM (Local Configuration Manager).
type ConfigurationSettingOutput struct{ *pulumi.OutputState }

func (ConfigurationSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationSetting)(nil)).Elem()
}

func (o ConfigurationSettingOutput) ToConfigurationSettingOutput() ConfigurationSettingOutput {
	return o
}

func (o ConfigurationSettingOutput) ToConfigurationSettingOutputWithContext(ctx context.Context) ConfigurationSettingOutput {
	return o
}

func (o ConfigurationSettingOutput) ToConfigurationSettingPtrOutput() ConfigurationSettingPtrOutput {
	return o.ToConfigurationSettingPtrOutputWithContext(context.Background())
}

func (o ConfigurationSettingOutput) ToConfigurationSettingPtrOutputWithContext(ctx context.Context) ConfigurationSettingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigurationSetting) *ConfigurationSetting {
		return &v
	}).(ConfigurationSettingPtrOutput)
}

// Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration and StopConfiguration
func (o ConfigurationSettingOutput) ActionAfterReboot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationSetting) *string { return v.ActionAfterReboot }).(pulumi.StringPtrOutput)
}

// If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node. Otherwise, false
func (o ConfigurationSettingOutput) AllowModuleOverwrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigurationSetting) *bool { return v.AllowModuleOverwrite }).(pulumi.BoolPtrOutput)
}

// Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
func (o ConfigurationSettingOutput) ConfigurationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationSetting) *string { return v.ConfigurationMode }).(pulumi.StringPtrOutput)
}

// How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode property is set to ApplyOnly. The default value is 15.
func (o ConfigurationSettingOutput) ConfigurationModeFrequencyMins() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ConfigurationSetting) *float64 { return v.ConfigurationModeFrequencyMins }).(pulumi.Float64PtrOutput)
}

// Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you will have to manually reboot the node for any configuration that requires it. The default value is false. To use this setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting with the xPendingReboot module.
func (o ConfigurationSettingOutput) RebootIfNeeded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigurationSetting) *bool { return v.RebootIfNeeded }).(pulumi.BoolPtrOutput)
}

// The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored if the LCM is not configured in pull mode. The default value is 30.
func (o ConfigurationSettingOutput) RefreshFrequencyMins() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ConfigurationSetting) *float64 { return v.RefreshFrequencyMins }).(pulumi.Float64PtrOutput)
}

type ConfigurationSettingPtrOutput struct{ *pulumi.OutputState }

func (ConfigurationSettingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationSetting)(nil)).Elem()
}

func (o ConfigurationSettingPtrOutput) ToConfigurationSettingPtrOutput() ConfigurationSettingPtrOutput {
	return o
}

func (o ConfigurationSettingPtrOutput) ToConfigurationSettingPtrOutputWithContext(ctx context.Context) ConfigurationSettingPtrOutput {
	return o
}

func (o ConfigurationSettingPtrOutput) Elem() ConfigurationSettingOutput {
	return o.ApplyT(func(v *ConfigurationSetting) ConfigurationSetting {
		if v != nil {
			return *v
		}
		var ret ConfigurationSetting
		return ret
	}).(ConfigurationSettingOutput)
}

// Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration and StopConfiguration
func (o ConfigurationSettingPtrOutput) ActionAfterReboot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationSetting) *string {
		if v == nil {
			return nil
		}
		return v.ActionAfterReboot
	}).(pulumi.StringPtrOutput)
}

// If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node. Otherwise, false
func (o ConfigurationSettingPtrOutput) AllowModuleOverwrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigurationSetting) *bool {
		if v == nil {
			return nil
		}
		return v.AllowModuleOverwrite
	}).(pulumi.BoolPtrOutput)
}

// Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
func (o ConfigurationSettingPtrOutput) ConfigurationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationSetting) *string {
		if v == nil {
			return nil
		}
		return v.ConfigurationMode
	}).(pulumi.StringPtrOutput)
}

// How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode property is set to ApplyOnly. The default value is 15.
func (o ConfigurationSettingPtrOutput) ConfigurationModeFrequencyMins() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ConfigurationSetting) *float64 {
		if v == nil {
			return nil
		}
		return v.ConfigurationModeFrequencyMins
	}).(pulumi.Float64PtrOutput)
}

// Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you will have to manually reboot the node for any configuration that requires it. The default value is false. To use this setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting with the xPendingReboot module.
func (o ConfigurationSettingPtrOutput) RebootIfNeeded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigurationSetting) *bool {
		if v == nil {
			return nil
		}
		return v.RebootIfNeeded
	}).(pulumi.BoolPtrOutput)
}

// The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored if the LCM is not configured in pull mode. The default value is 30.
func (o ConfigurationSettingPtrOutput) RefreshFrequencyMins() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ConfigurationSetting) *float64 {
		if v == nil {
			return nil
		}
		return v.RefreshFrequencyMins
	}).(pulumi.Float64PtrOutput)
}

// Configuration setting of LCM (Local Configuration Manager).
type ConfigurationSettingResponse struct {
	// Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration and StopConfiguration
	ActionAfterReboot *string `pulumi:"actionAfterReboot"`
	// If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node. Otherwise, false
	AllowModuleOverwrite *bool `pulumi:"allowModuleOverwrite"`
	// Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
	ConfigurationMode *string `pulumi:"configurationMode"`
	// How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode property is set to ApplyOnly. The default value is 15.
	ConfigurationModeFrequencyMins *float64 `pulumi:"configurationModeFrequencyMins"`
	// Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you will have to manually reboot the node for any configuration that requires it. The default value is false. To use this setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting with the xPendingReboot module.
	RebootIfNeeded *bool `pulumi:"rebootIfNeeded"`
	// The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored if the LCM is not configured in pull mode. The default value is 30.
	RefreshFrequencyMins *float64 `pulumi:"refreshFrequencyMins"`
}

// Defaults sets the appropriate defaults for ConfigurationSettingResponse
func (val *ConfigurationSettingResponse) Defaults() *ConfigurationSettingResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ConfigurationModeFrequencyMins) {
		configurationModeFrequencyMins_ := 15.0
		tmp.ConfigurationModeFrequencyMins = &configurationModeFrequencyMins_
	}
	if isZero(tmp.RefreshFrequencyMins) {
		refreshFrequencyMins_ := 30.0
		tmp.RefreshFrequencyMins = &refreshFrequencyMins_
	}
	return &tmp
}

// Configuration setting of LCM (Local Configuration Manager).
type ConfigurationSettingResponseOutput struct{ *pulumi.OutputState }

func (ConfigurationSettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationSettingResponse)(nil)).Elem()
}

func (o ConfigurationSettingResponseOutput) ToConfigurationSettingResponseOutput() ConfigurationSettingResponseOutput {
	return o
}

func (o ConfigurationSettingResponseOutput) ToConfigurationSettingResponseOutputWithContext(ctx context.Context) ConfigurationSettingResponseOutput {
	return o
}

// Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration and StopConfiguration
func (o ConfigurationSettingResponseOutput) ActionAfterReboot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationSettingResponse) *string { return v.ActionAfterReboot }).(pulumi.StringPtrOutput)
}

// If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node. Otherwise, false
func (o ConfigurationSettingResponseOutput) AllowModuleOverwrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigurationSettingResponse) *bool { return v.AllowModuleOverwrite }).(pulumi.BoolPtrOutput)
}

// Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
func (o ConfigurationSettingResponseOutput) ConfigurationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationSettingResponse) *string { return v.ConfigurationMode }).(pulumi.StringPtrOutput)
}

// How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode property is set to ApplyOnly. The default value is 15.
func (o ConfigurationSettingResponseOutput) ConfigurationModeFrequencyMins() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ConfigurationSettingResponse) *float64 { return v.ConfigurationModeFrequencyMins }).(pulumi.Float64PtrOutput)
}

// Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you will have to manually reboot the node for any configuration that requires it. The default value is false. To use this setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting with the xPendingReboot module.
func (o ConfigurationSettingResponseOutput) RebootIfNeeded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigurationSettingResponse) *bool { return v.RebootIfNeeded }).(pulumi.BoolPtrOutput)
}

// The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored if the LCM is not configured in pull mode. The default value is 30.
func (o ConfigurationSettingResponseOutput) RefreshFrequencyMins() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ConfigurationSettingResponse) *float64 { return v.RefreshFrequencyMins }).(pulumi.Float64PtrOutput)
}

type ConfigurationSettingResponsePtrOutput struct{ *pulumi.OutputState }

func (ConfigurationSettingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationSettingResponse)(nil)).Elem()
}

func (o ConfigurationSettingResponsePtrOutput) ToConfigurationSettingResponsePtrOutput() ConfigurationSettingResponsePtrOutput {
	return o
}

func (o ConfigurationSettingResponsePtrOutput) ToConfigurationSettingResponsePtrOutputWithContext(ctx context.Context) ConfigurationSettingResponsePtrOutput {
	return o
}

func (o ConfigurationSettingResponsePtrOutput) Elem() ConfigurationSettingResponseOutput {
	return o.ApplyT(func(v *ConfigurationSettingResponse) ConfigurationSettingResponse {
		if v != nil {
			return *v
		}
		var ret ConfigurationSettingResponse
		return ret
	}).(ConfigurationSettingResponseOutput)
}

// Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration and StopConfiguration
func (o ConfigurationSettingResponsePtrOutput) ActionAfterReboot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationSettingResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionAfterReboot
	}).(pulumi.StringPtrOutput)
}

// If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node. Otherwise, false
func (o ConfigurationSettingResponsePtrOutput) AllowModuleOverwrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigurationSettingResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AllowModuleOverwrite
	}).(pulumi.BoolPtrOutput)
}

// Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
func (o ConfigurationSettingResponsePtrOutput) ConfigurationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationSettingResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConfigurationMode
	}).(pulumi.StringPtrOutput)
}

// How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode property is set to ApplyOnly. The default value is 15.
func (o ConfigurationSettingResponsePtrOutput) ConfigurationModeFrequencyMins() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ConfigurationSettingResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.ConfigurationModeFrequencyMins
	}).(pulumi.Float64PtrOutput)
}

// Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you will have to manually reboot the node for any configuration that requires it. The default value is false. To use this setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting with the xPendingReboot module.
func (o ConfigurationSettingResponsePtrOutput) RebootIfNeeded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigurationSettingResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RebootIfNeeded
	}).(pulumi.BoolPtrOutput)
}

// The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored if the LCM is not configured in pull mode. The default value is 30.
func (o ConfigurationSettingResponsePtrOutput) RefreshFrequencyMins() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ConfigurationSettingResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.RefreshFrequencyMins
	}).(pulumi.Float64PtrOutput)
}

// Guest configuration assignment properties.
type GuestConfigurationAssignmentProperties struct {
	// The source which initiated the guest configuration assignment. Ex: Azure Policy
	Context *string `pulumi:"context"`
	// The guest configuration to assign.
	GuestConfiguration *GuestConfigurationNavigation `pulumi:"guestConfiguration"`
}

// Defaults sets the appropriate defaults for GuestConfigurationAssignmentProperties
func (val *GuestConfigurationAssignmentProperties) Defaults() *GuestConfigurationAssignmentProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.GuestConfiguration = tmp.GuestConfiguration.Defaults()

	return &tmp
}

// GuestConfigurationAssignmentPropertiesInput is an input type that accepts GuestConfigurationAssignmentPropertiesArgs and GuestConfigurationAssignmentPropertiesOutput values.
// You can construct a concrete instance of `GuestConfigurationAssignmentPropertiesInput` via:
//
//	GuestConfigurationAssignmentPropertiesArgs{...}
type GuestConfigurationAssignmentPropertiesInput interface {
	pulumi.Input

	ToGuestConfigurationAssignmentPropertiesOutput() GuestConfigurationAssignmentPropertiesOutput
	ToGuestConfigurationAssignmentPropertiesOutputWithContext(context.Context) GuestConfigurationAssignmentPropertiesOutput
}

// Guest configuration assignment properties.
type GuestConfigurationAssignmentPropertiesArgs struct {
	// The source which initiated the guest configuration assignment. Ex: Azure Policy
	Context pulumi.StringPtrInput `pulumi:"context"`
	// The guest configuration to assign.
	GuestConfiguration GuestConfigurationNavigationPtrInput `pulumi:"guestConfiguration"`
}

// Defaults sets the appropriate defaults for GuestConfigurationAssignmentPropertiesArgs
func (val *GuestConfigurationAssignmentPropertiesArgs) Defaults() *GuestConfigurationAssignmentPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (GuestConfigurationAssignmentPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GuestConfigurationAssignmentProperties)(nil)).Elem()
}

func (i GuestConfigurationAssignmentPropertiesArgs) ToGuestConfigurationAssignmentPropertiesOutput() GuestConfigurationAssignmentPropertiesOutput {
	return i.ToGuestConfigurationAssignmentPropertiesOutputWithContext(context.Background())
}

func (i GuestConfigurationAssignmentPropertiesArgs) ToGuestConfigurationAssignmentPropertiesOutputWithContext(ctx context.Context) GuestConfigurationAssignmentPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestConfigurationAssignmentPropertiesOutput)
}

func (i GuestConfigurationAssignmentPropertiesArgs) ToGuestConfigurationAssignmentPropertiesPtrOutput() GuestConfigurationAssignmentPropertiesPtrOutput {
	return i.ToGuestConfigurationAssignmentPropertiesPtrOutputWithContext(context.Background())
}

func (i GuestConfigurationAssignmentPropertiesArgs) ToGuestConfigurationAssignmentPropertiesPtrOutputWithContext(ctx context.Context) GuestConfigurationAssignmentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestConfigurationAssignmentPropertiesOutput).ToGuestConfigurationAssignmentPropertiesPtrOutputWithContext(ctx)
}

// GuestConfigurationAssignmentPropertiesPtrInput is an input type that accepts GuestConfigurationAssignmentPropertiesArgs, GuestConfigurationAssignmentPropertiesPtr and GuestConfigurationAssignmentPropertiesPtrOutput values.
// You can construct a concrete instance of `GuestConfigurationAssignmentPropertiesPtrInput` via:
//
//	        GuestConfigurationAssignmentPropertiesArgs{...}
//
//	or:
//
//	        nil
type GuestConfigurationAssignmentPropertiesPtrInput interface {
	pulumi.Input

	ToGuestConfigurationAssignmentPropertiesPtrOutput() GuestConfigurationAssignmentPropertiesPtrOutput
	ToGuestConfigurationAssignmentPropertiesPtrOutputWithContext(context.Context) GuestConfigurationAssignmentPropertiesPtrOutput
}

type guestConfigurationAssignmentPropertiesPtrType GuestConfigurationAssignmentPropertiesArgs

func GuestConfigurationAssignmentPropertiesPtr(v *GuestConfigurationAssignmentPropertiesArgs) GuestConfigurationAssignmentPropertiesPtrInput {
	return (*guestConfigurationAssignmentPropertiesPtrType)(v)
}

func (*guestConfigurationAssignmentPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GuestConfigurationAssignmentProperties)(nil)).Elem()
}

func (i *guestConfigurationAssignmentPropertiesPtrType) ToGuestConfigurationAssignmentPropertiesPtrOutput() GuestConfigurationAssignmentPropertiesPtrOutput {
	return i.ToGuestConfigurationAssignmentPropertiesPtrOutputWithContext(context.Background())
}

func (i *guestConfigurationAssignmentPropertiesPtrType) ToGuestConfigurationAssignmentPropertiesPtrOutputWithContext(ctx context.Context) GuestConfigurationAssignmentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestConfigurationAssignmentPropertiesPtrOutput)
}

// Guest configuration assignment properties.
type GuestConfigurationAssignmentPropertiesOutput struct{ *pulumi.OutputState }

func (GuestConfigurationAssignmentPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GuestConfigurationAssignmentProperties)(nil)).Elem()
}

func (o GuestConfigurationAssignmentPropertiesOutput) ToGuestConfigurationAssignmentPropertiesOutput() GuestConfigurationAssignmentPropertiesOutput {
	return o
}

func (o GuestConfigurationAssignmentPropertiesOutput) ToGuestConfigurationAssignmentPropertiesOutputWithContext(ctx context.Context) GuestConfigurationAssignmentPropertiesOutput {
	return o
}

func (o GuestConfigurationAssignmentPropertiesOutput) ToGuestConfigurationAssignmentPropertiesPtrOutput() GuestConfigurationAssignmentPropertiesPtrOutput {
	return o.ToGuestConfigurationAssignmentPropertiesPtrOutputWithContext(context.Background())
}

func (o GuestConfigurationAssignmentPropertiesOutput) ToGuestConfigurationAssignmentPropertiesPtrOutputWithContext(ctx context.Context) GuestConfigurationAssignmentPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GuestConfigurationAssignmentProperties) *GuestConfigurationAssignmentProperties {
		return &v
	}).(GuestConfigurationAssignmentPropertiesPtrOutput)
}

// The source which initiated the guest configuration assignment. Ex: Azure Policy
func (o GuestConfigurationAssignmentPropertiesOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentProperties) *string { return v.Context }).(pulumi.StringPtrOutput)
}

// The guest configuration to assign.
func (o GuestConfigurationAssignmentPropertiesOutput) GuestConfiguration() GuestConfigurationNavigationPtrOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentProperties) *GuestConfigurationNavigation {
		return v.GuestConfiguration
	}).(GuestConfigurationNavigationPtrOutput)
}

type GuestConfigurationAssignmentPropertiesPtrOutput struct{ *pulumi.OutputState }

func (GuestConfigurationAssignmentPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GuestConfigurationAssignmentProperties)(nil)).Elem()
}

func (o GuestConfigurationAssignmentPropertiesPtrOutput) ToGuestConfigurationAssignmentPropertiesPtrOutput() GuestConfigurationAssignmentPropertiesPtrOutput {
	return o
}

func (o GuestConfigurationAssignmentPropertiesPtrOutput) ToGuestConfigurationAssignmentPropertiesPtrOutputWithContext(ctx context.Context) GuestConfigurationAssignmentPropertiesPtrOutput {
	return o
}

func (o GuestConfigurationAssignmentPropertiesPtrOutput) Elem() GuestConfigurationAssignmentPropertiesOutput {
	return o.ApplyT(func(v *GuestConfigurationAssignmentProperties) GuestConfigurationAssignmentProperties {
		if v != nil {
			return *v
		}
		var ret GuestConfigurationAssignmentProperties
		return ret
	}).(GuestConfigurationAssignmentPropertiesOutput)
}

// The source which initiated the guest configuration assignment. Ex: Azure Policy
func (o GuestConfigurationAssignmentPropertiesPtrOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationAssignmentProperties) *string {
		if v == nil {
			return nil
		}
		return v.Context
	}).(pulumi.StringPtrOutput)
}

// The guest configuration to assign.
func (o GuestConfigurationAssignmentPropertiesPtrOutput) GuestConfiguration() GuestConfigurationNavigationPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationAssignmentProperties) *GuestConfigurationNavigation {
		if v == nil {
			return nil
		}
		return v.GuestConfiguration
	}).(GuestConfigurationNavigationPtrOutput)
}

// Guest configuration assignment properties.
type GuestConfigurationAssignmentPropertiesResponse struct {
	// Combined hash of the configuration package and parameters.
	AssignmentHash string `pulumi:"assignmentHash"`
	// A value indicating compliance status of the machine for the assigned guest configuration.
	ComplianceStatus string `pulumi:"complianceStatus"`
	// The source which initiated the guest configuration assignment. Ex: Azure Policy
	Context *string `pulumi:"context"`
	// The guest configuration to assign.
	GuestConfiguration *GuestConfigurationNavigationResponse `pulumi:"guestConfiguration"`
	// Date and time when last compliance status was checked.
	LastComplianceStatusChecked string `pulumi:"lastComplianceStatusChecked"`
	// Last reported guest configuration assignment report.
	LatestAssignmentReport *AssignmentReportResponse `pulumi:"latestAssignmentReport"`
	// Id of the latest report for the guest configuration assignment.
	LatestReportId string `pulumi:"latestReportId"`
	// parameter hash for the guest configuration assignment.
	ParameterHash string `pulumi:"parameterHash"`
	// The provisioning state, which only appears in the response.
	ProvisioningState string `pulumi:"provisioningState"`
	// Type of the resource - VMSS / VM
	ResourceType string `pulumi:"resourceType"`
	// VM resource Id.
	TargetResourceId string `pulumi:"targetResourceId"`
	// The list of VM Compliance data for VMSS
	VmssVMList []VMSSVMInfoResponse `pulumi:"vmssVMList"`
}

// Defaults sets the appropriate defaults for GuestConfigurationAssignmentPropertiesResponse
func (val *GuestConfigurationAssignmentPropertiesResponse) Defaults() *GuestConfigurationAssignmentPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.GuestConfiguration = tmp.GuestConfiguration.Defaults()

	return &tmp
}

// Guest configuration assignment properties.
type GuestConfigurationAssignmentPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GuestConfigurationAssignmentPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GuestConfigurationAssignmentPropertiesResponse)(nil)).Elem()
}

func (o GuestConfigurationAssignmentPropertiesResponseOutput) ToGuestConfigurationAssignmentPropertiesResponseOutput() GuestConfigurationAssignmentPropertiesResponseOutput {
	return o
}

func (o GuestConfigurationAssignmentPropertiesResponseOutput) ToGuestConfigurationAssignmentPropertiesResponseOutputWithContext(ctx context.Context) GuestConfigurationAssignmentPropertiesResponseOutput {
	return o
}

// Combined hash of the configuration package and parameters.
func (o GuestConfigurationAssignmentPropertiesResponseOutput) AssignmentHash() pulumi.StringOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) string { return v.AssignmentHash }).(pulumi.StringOutput)
}

// A value indicating compliance status of the machine for the assigned guest configuration.
func (o GuestConfigurationAssignmentPropertiesResponseOutput) ComplianceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) string { return v.ComplianceStatus }).(pulumi.StringOutput)
}

// The source which initiated the guest configuration assignment. Ex: Azure Policy
func (o GuestConfigurationAssignmentPropertiesResponseOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) *string { return v.Context }).(pulumi.StringPtrOutput)
}

// The guest configuration to assign.
func (o GuestConfigurationAssignmentPropertiesResponseOutput) GuestConfiguration() GuestConfigurationNavigationResponsePtrOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) *GuestConfigurationNavigationResponse {
		return v.GuestConfiguration
	}).(GuestConfigurationNavigationResponsePtrOutput)
}

// Date and time when last compliance status was checked.
func (o GuestConfigurationAssignmentPropertiesResponseOutput) LastComplianceStatusChecked() pulumi.StringOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) string { return v.LastComplianceStatusChecked }).(pulumi.StringOutput)
}

// Last reported guest configuration assignment report.
func (o GuestConfigurationAssignmentPropertiesResponseOutput) LatestAssignmentReport() AssignmentReportResponsePtrOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) *AssignmentReportResponse {
		return v.LatestAssignmentReport
	}).(AssignmentReportResponsePtrOutput)
}

// Id of the latest report for the guest configuration assignment.
func (o GuestConfigurationAssignmentPropertiesResponseOutput) LatestReportId() pulumi.StringOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) string { return v.LatestReportId }).(pulumi.StringOutput)
}

// parameter hash for the guest configuration assignment.
func (o GuestConfigurationAssignmentPropertiesResponseOutput) ParameterHash() pulumi.StringOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) string { return v.ParameterHash }).(pulumi.StringOutput)
}

// The provisioning state, which only appears in the response.
func (o GuestConfigurationAssignmentPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Type of the resource - VMSS / VM
func (o GuestConfigurationAssignmentPropertiesResponseOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) string { return v.ResourceType }).(pulumi.StringOutput)
}

// VM resource Id.
func (o GuestConfigurationAssignmentPropertiesResponseOutput) TargetResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) string { return v.TargetResourceId }).(pulumi.StringOutput)
}

// The list of VM Compliance data for VMSS
func (o GuestConfigurationAssignmentPropertiesResponseOutput) VmssVMList() VMSSVMInfoResponseArrayOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) []VMSSVMInfoResponse { return v.VmssVMList }).(VMSSVMInfoResponseArrayOutput)
}

// Guest configuration is an artifact that encapsulates DSC configuration and its dependencies. The artifact is a zip file containing DSC configuration (as MOF) and dependent resources and other dependencies like modules.
type GuestConfigurationNavigation struct {
	// Specifies the assignment type and execution of the configuration. Possible values are Audit, DeployAndAutoCorrect, ApplyAndAutoCorrect and ApplyAndMonitor.
	AssignmentType *string `pulumi:"assignmentType"`
	// The configuration parameters for the guest configuration.
	ConfigurationParameter []ConfigurationParameter `pulumi:"configurationParameter"`
	// The protected configuration parameters for the guest configuration.
	ConfigurationProtectedParameter []ConfigurationParameter `pulumi:"configurationProtectedParameter"`
	// The configuration setting for the guest configuration.
	ConfigurationSetting *ConfigurationSetting `pulumi:"configurationSetting"`
	// Combined hash of the guest configuration package and configuration parameters.
	ContentHash *string `pulumi:"contentHash"`
	// Uri of the storage where guest configuration package is uploaded.
	ContentUri *string `pulumi:"contentUri"`
	// Kind of the guest configuration. For example:DSC
	Kind *string `pulumi:"kind"`
	// Name of the guest configuration.
	Name *string `pulumi:"name"`
	// Version of the guest configuration.
	Version *string `pulumi:"version"`
}

// Defaults sets the appropriate defaults for GuestConfigurationNavigation
func (val *GuestConfigurationNavigation) Defaults() *GuestConfigurationNavigation {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ConfigurationSetting = tmp.ConfigurationSetting.Defaults()

	return &tmp
}

// GuestConfigurationNavigationInput is an input type that accepts GuestConfigurationNavigationArgs and GuestConfigurationNavigationOutput values.
// You can construct a concrete instance of `GuestConfigurationNavigationInput` via:
//
//	GuestConfigurationNavigationArgs{...}
type GuestConfigurationNavigationInput interface {
	pulumi.Input

	ToGuestConfigurationNavigationOutput() GuestConfigurationNavigationOutput
	ToGuestConfigurationNavigationOutputWithContext(context.Context) GuestConfigurationNavigationOutput
}

// Guest configuration is an artifact that encapsulates DSC configuration and its dependencies. The artifact is a zip file containing DSC configuration (as MOF) and dependent resources and other dependencies like modules.
type GuestConfigurationNavigationArgs struct {
	// Specifies the assignment type and execution of the configuration. Possible values are Audit, DeployAndAutoCorrect, ApplyAndAutoCorrect and ApplyAndMonitor.
	AssignmentType pulumi.StringPtrInput `pulumi:"assignmentType"`
	// The configuration parameters for the guest configuration.
	ConfigurationParameter ConfigurationParameterArrayInput `pulumi:"configurationParameter"`
	// The protected configuration parameters for the guest configuration.
	ConfigurationProtectedParameter ConfigurationParameterArrayInput `pulumi:"configurationProtectedParameter"`
	// The configuration setting for the guest configuration.
	ConfigurationSetting ConfigurationSettingPtrInput `pulumi:"configurationSetting"`
	// Combined hash of the guest configuration package and configuration parameters.
	ContentHash pulumi.StringPtrInput `pulumi:"contentHash"`
	// Uri of the storage where guest configuration package is uploaded.
	ContentUri pulumi.StringPtrInput `pulumi:"contentUri"`
	// Kind of the guest configuration. For example:DSC
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the guest configuration.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Version of the guest configuration.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

// Defaults sets the appropriate defaults for GuestConfigurationNavigationArgs
func (val *GuestConfigurationNavigationArgs) Defaults() *GuestConfigurationNavigationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (GuestConfigurationNavigationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GuestConfigurationNavigation)(nil)).Elem()
}

func (i GuestConfigurationNavigationArgs) ToGuestConfigurationNavigationOutput() GuestConfigurationNavigationOutput {
	return i.ToGuestConfigurationNavigationOutputWithContext(context.Background())
}

func (i GuestConfigurationNavigationArgs) ToGuestConfigurationNavigationOutputWithContext(ctx context.Context) GuestConfigurationNavigationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestConfigurationNavigationOutput)
}

func (i GuestConfigurationNavigationArgs) ToGuestConfigurationNavigationPtrOutput() GuestConfigurationNavigationPtrOutput {
	return i.ToGuestConfigurationNavigationPtrOutputWithContext(context.Background())
}

func (i GuestConfigurationNavigationArgs) ToGuestConfigurationNavigationPtrOutputWithContext(ctx context.Context) GuestConfigurationNavigationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestConfigurationNavigationOutput).ToGuestConfigurationNavigationPtrOutputWithContext(ctx)
}

// GuestConfigurationNavigationPtrInput is an input type that accepts GuestConfigurationNavigationArgs, GuestConfigurationNavigationPtr and GuestConfigurationNavigationPtrOutput values.
// You can construct a concrete instance of `GuestConfigurationNavigationPtrInput` via:
//
//	        GuestConfigurationNavigationArgs{...}
//
//	or:
//
//	        nil
type GuestConfigurationNavigationPtrInput interface {
	pulumi.Input

	ToGuestConfigurationNavigationPtrOutput() GuestConfigurationNavigationPtrOutput
	ToGuestConfigurationNavigationPtrOutputWithContext(context.Context) GuestConfigurationNavigationPtrOutput
}

type guestConfigurationNavigationPtrType GuestConfigurationNavigationArgs

func GuestConfigurationNavigationPtr(v *GuestConfigurationNavigationArgs) GuestConfigurationNavigationPtrInput {
	return (*guestConfigurationNavigationPtrType)(v)
}

func (*guestConfigurationNavigationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GuestConfigurationNavigation)(nil)).Elem()
}

func (i *guestConfigurationNavigationPtrType) ToGuestConfigurationNavigationPtrOutput() GuestConfigurationNavigationPtrOutput {
	return i.ToGuestConfigurationNavigationPtrOutputWithContext(context.Background())
}

func (i *guestConfigurationNavigationPtrType) ToGuestConfigurationNavigationPtrOutputWithContext(ctx context.Context) GuestConfigurationNavigationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestConfigurationNavigationPtrOutput)
}

// Guest configuration is an artifact that encapsulates DSC configuration and its dependencies. The artifact is a zip file containing DSC configuration (as MOF) and dependent resources and other dependencies like modules.
type GuestConfigurationNavigationOutput struct{ *pulumi.OutputState }

func (GuestConfigurationNavigationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GuestConfigurationNavigation)(nil)).Elem()
}

func (o GuestConfigurationNavigationOutput) ToGuestConfigurationNavigationOutput() GuestConfigurationNavigationOutput {
	return o
}

func (o GuestConfigurationNavigationOutput) ToGuestConfigurationNavigationOutputWithContext(ctx context.Context) GuestConfigurationNavigationOutput {
	return o
}

func (o GuestConfigurationNavigationOutput) ToGuestConfigurationNavigationPtrOutput() GuestConfigurationNavigationPtrOutput {
	return o.ToGuestConfigurationNavigationPtrOutputWithContext(context.Background())
}

func (o GuestConfigurationNavigationOutput) ToGuestConfigurationNavigationPtrOutputWithContext(ctx context.Context) GuestConfigurationNavigationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GuestConfigurationNavigation) *GuestConfigurationNavigation {
		return &v
	}).(GuestConfigurationNavigationPtrOutput)
}

// Specifies the assignment type and execution of the configuration. Possible values are Audit, DeployAndAutoCorrect, ApplyAndAutoCorrect and ApplyAndMonitor.
func (o GuestConfigurationNavigationOutput) AssignmentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestConfigurationNavigation) *string { return v.AssignmentType }).(pulumi.StringPtrOutput)
}

// The configuration parameters for the guest configuration.
func (o GuestConfigurationNavigationOutput) ConfigurationParameter() ConfigurationParameterArrayOutput {
	return o.ApplyT(func(v GuestConfigurationNavigation) []ConfigurationParameter { return v.ConfigurationParameter }).(ConfigurationParameterArrayOutput)
}

// The protected configuration parameters for the guest configuration.
func (o GuestConfigurationNavigationOutput) ConfigurationProtectedParameter() ConfigurationParameterArrayOutput {
	return o.ApplyT(func(v GuestConfigurationNavigation) []ConfigurationParameter {
		return v.ConfigurationProtectedParameter
	}).(ConfigurationParameterArrayOutput)
}

// The configuration setting for the guest configuration.
func (o GuestConfigurationNavigationOutput) ConfigurationSetting() ConfigurationSettingPtrOutput {
	return o.ApplyT(func(v GuestConfigurationNavigation) *ConfigurationSetting { return v.ConfigurationSetting }).(ConfigurationSettingPtrOutput)
}

// Combined hash of the guest configuration package and configuration parameters.
func (o GuestConfigurationNavigationOutput) ContentHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestConfigurationNavigation) *string { return v.ContentHash }).(pulumi.StringPtrOutput)
}

// Uri of the storage where guest configuration package is uploaded.
func (o GuestConfigurationNavigationOutput) ContentUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestConfigurationNavigation) *string { return v.ContentUri }).(pulumi.StringPtrOutput)
}

// Kind of the guest configuration. For example:DSC
func (o GuestConfigurationNavigationOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestConfigurationNavigation) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the guest configuration.
func (o GuestConfigurationNavigationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestConfigurationNavigation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Version of the guest configuration.
func (o GuestConfigurationNavigationOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestConfigurationNavigation) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type GuestConfigurationNavigationPtrOutput struct{ *pulumi.OutputState }

func (GuestConfigurationNavigationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GuestConfigurationNavigation)(nil)).Elem()
}

func (o GuestConfigurationNavigationPtrOutput) ToGuestConfigurationNavigationPtrOutput() GuestConfigurationNavigationPtrOutput {
	return o
}

func (o GuestConfigurationNavigationPtrOutput) ToGuestConfigurationNavigationPtrOutputWithContext(ctx context.Context) GuestConfigurationNavigationPtrOutput {
	return o
}

func (o GuestConfigurationNavigationPtrOutput) Elem() GuestConfigurationNavigationOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigation) GuestConfigurationNavigation {
		if v != nil {
			return *v
		}
		var ret GuestConfigurationNavigation
		return ret
	}).(GuestConfigurationNavigationOutput)
}

// Specifies the assignment type and execution of the configuration. Possible values are Audit, DeployAndAutoCorrect, ApplyAndAutoCorrect and ApplyAndMonitor.
func (o GuestConfigurationNavigationPtrOutput) AssignmentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigation) *string {
		if v == nil {
			return nil
		}
		return v.AssignmentType
	}).(pulumi.StringPtrOutput)
}

// The configuration parameters for the guest configuration.
func (o GuestConfigurationNavigationPtrOutput) ConfigurationParameter() ConfigurationParameterArrayOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigation) []ConfigurationParameter {
		if v == nil {
			return nil
		}
		return v.ConfigurationParameter
	}).(ConfigurationParameterArrayOutput)
}

// The protected configuration parameters for the guest configuration.
func (o GuestConfigurationNavigationPtrOutput) ConfigurationProtectedParameter() ConfigurationParameterArrayOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigation) []ConfigurationParameter {
		if v == nil {
			return nil
		}
		return v.ConfigurationProtectedParameter
	}).(ConfigurationParameterArrayOutput)
}

// The configuration setting for the guest configuration.
func (o GuestConfigurationNavigationPtrOutput) ConfigurationSetting() ConfigurationSettingPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigation) *ConfigurationSetting {
		if v == nil {
			return nil
		}
		return v.ConfigurationSetting
	}).(ConfigurationSettingPtrOutput)
}

// Combined hash of the guest configuration package and configuration parameters.
func (o GuestConfigurationNavigationPtrOutput) ContentHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigation) *string {
		if v == nil {
			return nil
		}
		return v.ContentHash
	}).(pulumi.StringPtrOutput)
}

// Uri of the storage where guest configuration package is uploaded.
func (o GuestConfigurationNavigationPtrOutput) ContentUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigation) *string {
		if v == nil {
			return nil
		}
		return v.ContentUri
	}).(pulumi.StringPtrOutput)
}

// Kind of the guest configuration. For example:DSC
func (o GuestConfigurationNavigationPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigation) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the guest configuration.
func (o GuestConfigurationNavigationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Version of the guest configuration.
func (o GuestConfigurationNavigationPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigation) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Guest configuration is an artifact that encapsulates DSC configuration and its dependencies. The artifact is a zip file containing DSC configuration (as MOF) and dependent resources and other dependencies like modules.
type GuestConfigurationNavigationResponse struct {
	// Specifies the assignment type and execution of the configuration. Possible values are Audit, DeployAndAutoCorrect, ApplyAndAutoCorrect and ApplyAndMonitor.
	AssignmentType *string `pulumi:"assignmentType"`
	// The configuration parameters for the guest configuration.
	ConfigurationParameter []ConfigurationParameterResponse `pulumi:"configurationParameter"`
	// The protected configuration parameters for the guest configuration.
	ConfigurationProtectedParameter []ConfigurationParameterResponse `pulumi:"configurationProtectedParameter"`
	// The configuration setting for the guest configuration.
	ConfigurationSetting *ConfigurationSettingResponse `pulumi:"configurationSetting"`
	// Combined hash of the guest configuration package and configuration parameters.
	ContentHash *string `pulumi:"contentHash"`
	// Specifies the content type of the configuration. Possible values could be Builtin or Custom.
	ContentType string `pulumi:"contentType"`
	// Uri of the storage where guest configuration package is uploaded.
	ContentUri *string `pulumi:"contentUri"`
	// Kind of the guest configuration. For example:DSC
	Kind *string `pulumi:"kind"`
	// Name of the guest configuration.
	Name *string `pulumi:"name"`
	// Version of the guest configuration.
	Version *string `pulumi:"version"`
}

// Defaults sets the appropriate defaults for GuestConfigurationNavigationResponse
func (val *GuestConfigurationNavigationResponse) Defaults() *GuestConfigurationNavigationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ConfigurationSetting = tmp.ConfigurationSetting.Defaults()

	return &tmp
}

// Guest configuration is an artifact that encapsulates DSC configuration and its dependencies. The artifact is a zip file containing DSC configuration (as MOF) and dependent resources and other dependencies like modules.
type GuestConfigurationNavigationResponseOutput struct{ *pulumi.OutputState }

func (GuestConfigurationNavigationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GuestConfigurationNavigationResponse)(nil)).Elem()
}

func (o GuestConfigurationNavigationResponseOutput) ToGuestConfigurationNavigationResponseOutput() GuestConfigurationNavigationResponseOutput {
	return o
}

func (o GuestConfigurationNavigationResponseOutput) ToGuestConfigurationNavigationResponseOutputWithContext(ctx context.Context) GuestConfigurationNavigationResponseOutput {
	return o
}

// Specifies the assignment type and execution of the configuration. Possible values are Audit, DeployAndAutoCorrect, ApplyAndAutoCorrect and ApplyAndMonitor.
func (o GuestConfigurationNavigationResponseOutput) AssignmentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestConfigurationNavigationResponse) *string { return v.AssignmentType }).(pulumi.StringPtrOutput)
}

// The configuration parameters for the guest configuration.
func (o GuestConfigurationNavigationResponseOutput) ConfigurationParameter() ConfigurationParameterResponseArrayOutput {
	return o.ApplyT(func(v GuestConfigurationNavigationResponse) []ConfigurationParameterResponse {
		return v.ConfigurationParameter
	}).(ConfigurationParameterResponseArrayOutput)
}

// The protected configuration parameters for the guest configuration.
func (o GuestConfigurationNavigationResponseOutput) ConfigurationProtectedParameter() ConfigurationParameterResponseArrayOutput {
	return o.ApplyT(func(v GuestConfigurationNavigationResponse) []ConfigurationParameterResponse {
		return v.ConfigurationProtectedParameter
	}).(ConfigurationParameterResponseArrayOutput)
}

// The configuration setting for the guest configuration.
func (o GuestConfigurationNavigationResponseOutput) ConfigurationSetting() ConfigurationSettingResponsePtrOutput {
	return o.ApplyT(func(v GuestConfigurationNavigationResponse) *ConfigurationSettingResponse {
		return v.ConfigurationSetting
	}).(ConfigurationSettingResponsePtrOutput)
}

// Combined hash of the guest configuration package and configuration parameters.
func (o GuestConfigurationNavigationResponseOutput) ContentHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestConfigurationNavigationResponse) *string { return v.ContentHash }).(pulumi.StringPtrOutput)
}

// Specifies the content type of the configuration. Possible values could be Builtin or Custom.
func (o GuestConfigurationNavigationResponseOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v GuestConfigurationNavigationResponse) string { return v.ContentType }).(pulumi.StringOutput)
}

// Uri of the storage where guest configuration package is uploaded.
func (o GuestConfigurationNavigationResponseOutput) ContentUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestConfigurationNavigationResponse) *string { return v.ContentUri }).(pulumi.StringPtrOutput)
}

// Kind of the guest configuration. For example:DSC
func (o GuestConfigurationNavigationResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestConfigurationNavigationResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the guest configuration.
func (o GuestConfigurationNavigationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestConfigurationNavigationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Version of the guest configuration.
func (o GuestConfigurationNavigationResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestConfigurationNavigationResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type GuestConfigurationNavigationResponsePtrOutput struct{ *pulumi.OutputState }

func (GuestConfigurationNavigationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GuestConfigurationNavigationResponse)(nil)).Elem()
}

func (o GuestConfigurationNavigationResponsePtrOutput) ToGuestConfigurationNavigationResponsePtrOutput() GuestConfigurationNavigationResponsePtrOutput {
	return o
}

func (o GuestConfigurationNavigationResponsePtrOutput) ToGuestConfigurationNavigationResponsePtrOutputWithContext(ctx context.Context) GuestConfigurationNavigationResponsePtrOutput {
	return o
}

func (o GuestConfigurationNavigationResponsePtrOutput) Elem() GuestConfigurationNavigationResponseOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigationResponse) GuestConfigurationNavigationResponse {
		if v != nil {
			return *v
		}
		var ret GuestConfigurationNavigationResponse
		return ret
	}).(GuestConfigurationNavigationResponseOutput)
}

// Specifies the assignment type and execution of the configuration. Possible values are Audit, DeployAndAutoCorrect, ApplyAndAutoCorrect and ApplyAndMonitor.
func (o GuestConfigurationNavigationResponsePtrOutput) AssignmentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigationResponse) *string {
		if v == nil {
			return nil
		}
		return v.AssignmentType
	}).(pulumi.StringPtrOutput)
}

// The configuration parameters for the guest configuration.
func (o GuestConfigurationNavigationResponsePtrOutput) ConfigurationParameter() ConfigurationParameterResponseArrayOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigationResponse) []ConfigurationParameterResponse {
		if v == nil {
			return nil
		}
		return v.ConfigurationParameter
	}).(ConfigurationParameterResponseArrayOutput)
}

// The protected configuration parameters for the guest configuration.
func (o GuestConfigurationNavigationResponsePtrOutput) ConfigurationProtectedParameter() ConfigurationParameterResponseArrayOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigationResponse) []ConfigurationParameterResponse {
		if v == nil {
			return nil
		}
		return v.ConfigurationProtectedParameter
	}).(ConfigurationParameterResponseArrayOutput)
}

// The configuration setting for the guest configuration.
func (o GuestConfigurationNavigationResponsePtrOutput) ConfigurationSetting() ConfigurationSettingResponsePtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigationResponse) *ConfigurationSettingResponse {
		if v == nil {
			return nil
		}
		return v.ConfigurationSetting
	}).(ConfigurationSettingResponsePtrOutput)
}

// Combined hash of the guest configuration package and configuration parameters.
func (o GuestConfigurationNavigationResponsePtrOutput) ContentHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContentHash
	}).(pulumi.StringPtrOutput)
}

// Specifies the content type of the configuration. Possible values could be Builtin or Custom.
func (o GuestConfigurationNavigationResponsePtrOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ContentType
	}).(pulumi.StringPtrOutput)
}

// Uri of the storage where guest configuration package is uploaded.
func (o GuestConfigurationNavigationResponsePtrOutput) ContentUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContentUri
	}).(pulumi.StringPtrOutput)
}

// Kind of the guest configuration. For example:DSC
func (o GuestConfigurationNavigationResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the guest configuration.
func (o GuestConfigurationNavigationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Version of the guest configuration.
func (o GuestConfigurationNavigationResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Information about the VM.
type VMInfoResponse struct {
	// Azure resource Id of the VM.
	Id string `pulumi:"id"`
	// UUID(Universally Unique Identifier) of the VM.
	Uuid string `pulumi:"uuid"`
}

// Information about the VM.
type VMInfoResponseOutput struct{ *pulumi.OutputState }

func (VMInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VMInfoResponse)(nil)).Elem()
}

func (o VMInfoResponseOutput) ToVMInfoResponseOutput() VMInfoResponseOutput {
	return o
}

func (o VMInfoResponseOutput) ToVMInfoResponseOutputWithContext(ctx context.Context) VMInfoResponseOutput {
	return o
}

// Azure resource Id of the VM.
func (o VMInfoResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v VMInfoResponse) string { return v.Id }).(pulumi.StringOutput)
}

// UUID(Universally Unique Identifier) of the VM.
func (o VMInfoResponseOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v VMInfoResponse) string { return v.Uuid }).(pulumi.StringOutput)
}

type VMInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (VMInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMInfoResponse)(nil)).Elem()
}

func (o VMInfoResponsePtrOutput) ToVMInfoResponsePtrOutput() VMInfoResponsePtrOutput {
	return o
}

func (o VMInfoResponsePtrOutput) ToVMInfoResponsePtrOutputWithContext(ctx context.Context) VMInfoResponsePtrOutput {
	return o
}

func (o VMInfoResponsePtrOutput) Elem() VMInfoResponseOutput {
	return o.ApplyT(func(v *VMInfoResponse) VMInfoResponse {
		if v != nil {
			return *v
		}
		var ret VMInfoResponse
		return ret
	}).(VMInfoResponseOutput)
}

// Azure resource Id of the VM.
func (o VMInfoResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// UUID(Universally Unique Identifier) of the VM.
func (o VMInfoResponsePtrOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Uuid
	}).(pulumi.StringPtrOutput)
}

// Information about VMSS VM
type VMSSVMInfoResponse struct {
	// A value indicating compliance status of the machine for the assigned guest configuration.
	ComplianceStatus string `pulumi:"complianceStatus"`
	// Date and time when last compliance status was checked.
	LastComplianceChecked string `pulumi:"lastComplianceChecked"`
	// Id of the latest report for the guest configuration assignment.
	LatestReportId string `pulumi:"latestReportId"`
	// UUID of the VM.
	VmId string `pulumi:"vmId"`
	// Azure resource Id of the VM.
	VmResourceId string `pulumi:"vmResourceId"`
}

// Information about VMSS VM
type VMSSVMInfoResponseOutput struct{ *pulumi.OutputState }

func (VMSSVMInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VMSSVMInfoResponse)(nil)).Elem()
}

func (o VMSSVMInfoResponseOutput) ToVMSSVMInfoResponseOutput() VMSSVMInfoResponseOutput {
	return o
}

func (o VMSSVMInfoResponseOutput) ToVMSSVMInfoResponseOutputWithContext(ctx context.Context) VMSSVMInfoResponseOutput {
	return o
}

// A value indicating compliance status of the machine for the assigned guest configuration.
func (o VMSSVMInfoResponseOutput) ComplianceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v VMSSVMInfoResponse) string { return v.ComplianceStatus }).(pulumi.StringOutput)
}

// Date and time when last compliance status was checked.
func (o VMSSVMInfoResponseOutput) LastComplianceChecked() pulumi.StringOutput {
	return o.ApplyT(func(v VMSSVMInfoResponse) string { return v.LastComplianceChecked }).(pulumi.StringOutput)
}

// Id of the latest report for the guest configuration assignment.
func (o VMSSVMInfoResponseOutput) LatestReportId() pulumi.StringOutput {
	return o.ApplyT(func(v VMSSVMInfoResponse) string { return v.LatestReportId }).(pulumi.StringOutput)
}

// UUID of the VM.
func (o VMSSVMInfoResponseOutput) VmId() pulumi.StringOutput {
	return o.ApplyT(func(v VMSSVMInfoResponse) string { return v.VmId }).(pulumi.StringOutput)
}

// Azure resource Id of the VM.
func (o VMSSVMInfoResponseOutput) VmResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v VMSSVMInfoResponse) string { return v.VmResourceId }).(pulumi.StringOutput)
}

type VMSSVMInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (VMSSVMInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VMSSVMInfoResponse)(nil)).Elem()
}

func (o VMSSVMInfoResponseArrayOutput) ToVMSSVMInfoResponseArrayOutput() VMSSVMInfoResponseArrayOutput {
	return o
}

func (o VMSSVMInfoResponseArrayOutput) ToVMSSVMInfoResponseArrayOutputWithContext(ctx context.Context) VMSSVMInfoResponseArrayOutput {
	return o
}

func (o VMSSVMInfoResponseArrayOutput) Index(i pulumi.IntInput) VMSSVMInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VMSSVMInfoResponse {
		return vs[0].([]VMSSVMInfoResponse)[vs[1].(int)]
	}).(VMSSVMInfoResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AssignmentInfoResponseOutput{})
	pulumi.RegisterOutputType(AssignmentInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(AssignmentReportResourceComplianceReasonResponseOutput{})
	pulumi.RegisterOutputType(AssignmentReportResourceComplianceReasonResponseArrayOutput{})
	pulumi.RegisterOutputType(AssignmentReportResourceResponseOutput{})
	pulumi.RegisterOutputType(AssignmentReportResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(AssignmentReportResponseOutput{})
	pulumi.RegisterOutputType(AssignmentReportResponsePtrOutput{})
	pulumi.RegisterOutputType(ConfigurationInfoResponseOutput{})
	pulumi.RegisterOutputType(ConfigurationInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ConfigurationParameterOutput{})
	pulumi.RegisterOutputType(ConfigurationParameterArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationParameterResponseOutput{})
	pulumi.RegisterOutputType(ConfigurationParameterResponseArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationSettingOutput{})
	pulumi.RegisterOutputType(ConfigurationSettingPtrOutput{})
	pulumi.RegisterOutputType(ConfigurationSettingResponseOutput{})
	pulumi.RegisterOutputType(ConfigurationSettingResponsePtrOutput{})
	pulumi.RegisterOutputType(GuestConfigurationAssignmentPropertiesOutput{})
	pulumi.RegisterOutputType(GuestConfigurationAssignmentPropertiesPtrOutput{})
	pulumi.RegisterOutputType(GuestConfigurationAssignmentPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GuestConfigurationNavigationOutput{})
	pulumi.RegisterOutputType(GuestConfigurationNavigationPtrOutput{})
	pulumi.RegisterOutputType(GuestConfigurationNavigationResponseOutput{})
	pulumi.RegisterOutputType(GuestConfigurationNavigationResponsePtrOutput{})
	pulumi.RegisterOutputType(VMInfoResponseOutput{})
	pulumi.RegisterOutputType(VMInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(VMSSVMInfoResponseOutput{})
	pulumi.RegisterOutputType(VMSSVMInfoResponseArrayOutput{})
}
