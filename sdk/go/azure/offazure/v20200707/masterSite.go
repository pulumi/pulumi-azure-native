// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200707

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MasterSite struct {
	pulumi.CustomResourceState

	ETag       pulumi.StringPtrOutput             `pulumi:"eTag"`
	Location   pulumi.StringPtrOutput             `pulumi:"location"`
	Name       pulumi.StringPtrOutput             `pulumi:"name"`
	Properties MasterSitePropertiesResponseOutput `pulumi:"properties"`
	Type       pulumi.StringOutput                `pulumi:"type"`
}

// NewMasterSite registers a new resource with the given unique name, arguments, and options.
func NewMasterSite(ctx *pulumi.Context,
	name string, args *MasterSiteArgs, opts ...pulumi.ResourceOption) (*MasterSite, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:offazure/v20200707:MasterSite"),
		},
		{
			Type: pulumi.String("azure-native:offazure:MasterSite"),
		},
		{
			Type: pulumi.String("azure-nextgen:offazure:MasterSite"),
		},
	})
	opts = append(opts, aliases)
	var resource MasterSite
	err := ctx.RegisterResource("azure-native:offazure/v20200707:MasterSite", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMasterSite gets an existing MasterSite resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMasterSite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MasterSiteState, opts ...pulumi.ResourceOption) (*MasterSite, error) {
	var resource MasterSite
	err := ctx.ReadResource("azure-native:offazure/v20200707:MasterSite", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MasterSite resources.
type masterSiteState struct {
}

type MasterSiteState struct {
}

func (MasterSiteState) ElementType() reflect.Type {
	return reflect.TypeOf((*masterSiteState)(nil)).Elem()
}

type masterSiteArgs struct {
	ETag              *string               `pulumi:"eTag"`
	Location          *string               `pulumi:"location"`
	Name              *string               `pulumi:"name"`
	Properties        *MasterSiteProperties `pulumi:"properties"`
	ResourceGroupName string                `pulumi:"resourceGroupName"`
	SiteName          *string               `pulumi:"siteName"`
}

// The set of arguments for constructing a MasterSite resource.
type MasterSiteArgs struct {
	ETag              pulumi.StringPtrInput
	Location          pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	Properties        MasterSitePropertiesPtrInput
	ResourceGroupName pulumi.StringInput
	SiteName          pulumi.StringPtrInput
}

func (MasterSiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*masterSiteArgs)(nil)).Elem()
}

type MasterSiteInput interface {
	pulumi.Input

	ToMasterSiteOutput() MasterSiteOutput
	ToMasterSiteOutputWithContext(ctx context.Context) MasterSiteOutput
}

func (*MasterSite) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterSite)(nil))
}

func (i *MasterSite) ToMasterSiteOutput() MasterSiteOutput {
	return i.ToMasterSiteOutputWithContext(context.Background())
}

func (i *MasterSite) ToMasterSiteOutputWithContext(ctx context.Context) MasterSiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterSiteOutput)
}

type MasterSiteOutput struct{ *pulumi.OutputState }

func (MasterSiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterSite)(nil))
}

func (o MasterSiteOutput) ToMasterSiteOutput() MasterSiteOutput {
	return o
}

func (o MasterSiteOutput) ToMasterSiteOutputWithContext(ctx context.Context) MasterSiteOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(MasterSiteOutput{})
}
