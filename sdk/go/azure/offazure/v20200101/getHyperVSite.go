// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Site REST Resource.
func LookupHyperVSite(ctx *pulumi.Context, args *LookupHyperVSiteArgs, opts ...pulumi.InvokeOption) (*LookupHyperVSiteResult, error) {
	var rv LookupHyperVSiteResult
	err := ctx.Invoke("azure-native:offazure/v20200101:getHyperVSite", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupHyperVSiteArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Site name.
	SiteName string `pulumi:"siteName"`
}

// Site REST Resource.
type LookupHyperVSiteResult struct {
	// eTag for concurrency control.
	ETag *string `pulumi:"eTag"`
	// Resource Id.
	Id string `pulumi:"id"`
	// Azure location in which Sites is created.
	Location *string `pulumi:"location"`
	// Name of the Hyper-V site.
	Name *string `pulumi:"name"`
	// Nested properties of Hyper-V site.
	Properties SitePropertiesResponse `pulumi:"properties"`
	Tags       map[string]string      `pulumi:"tags"`
	// Type of resource. Type = Microsoft.OffAzure/HyperVSites.
	Type string `pulumi:"type"`
}

func LookupHyperVSiteOutput(ctx *pulumi.Context, args LookupHyperVSiteOutputArgs, opts ...pulumi.InvokeOption) LookupHyperVSiteResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupHyperVSiteResult, error) {
			args := v.(LookupHyperVSiteArgs)
			r, err := LookupHyperVSite(ctx, &args, opts...)
			var s LookupHyperVSiteResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupHyperVSiteResultOutput)
}

type LookupHyperVSiteOutputArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Site name.
	SiteName pulumi.StringInput `pulumi:"siteName"`
}

func (LookupHyperVSiteOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHyperVSiteArgs)(nil)).Elem()
}

// Site REST Resource.
type LookupHyperVSiteResultOutput struct{ *pulumi.OutputState }

func (LookupHyperVSiteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHyperVSiteResult)(nil)).Elem()
}

func (o LookupHyperVSiteResultOutput) ToLookupHyperVSiteResultOutput() LookupHyperVSiteResultOutput {
	return o
}

func (o LookupHyperVSiteResultOutput) ToLookupHyperVSiteResultOutputWithContext(ctx context.Context) LookupHyperVSiteResultOutput {
	return o
}

// eTag for concurrency control.
func (o LookupHyperVSiteResultOutput) ETag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupHyperVSiteResult) *string { return v.ETag }).(pulumi.StringPtrOutput)
}

// Resource Id.
func (o LookupHyperVSiteResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHyperVSiteResult) string { return v.Id }).(pulumi.StringOutput)
}

// Azure location in which Sites is created.
func (o LookupHyperVSiteResultOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupHyperVSiteResult) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Name of the Hyper-V site.
func (o LookupHyperVSiteResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupHyperVSiteResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Nested properties of Hyper-V site.
func (o LookupHyperVSiteResultOutput) Properties() SitePropertiesResponseOutput {
	return o.ApplyT(func(v LookupHyperVSiteResult) SitePropertiesResponse { return v.Properties }).(SitePropertiesResponseOutput)
}

func (o LookupHyperVSiteResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupHyperVSiteResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Type of resource. Type = Microsoft.OffAzure/HyperVSites.
func (o LookupHyperVSiteResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHyperVSiteResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupHyperVSiteResultOutput{})
}
