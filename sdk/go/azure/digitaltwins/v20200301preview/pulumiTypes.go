// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200301preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DigitalTwinsSkuInfo struct {
	Name string `pulumi:"name"`
}

// DigitalTwinsSkuInfoInput is an input type that accepts DigitalTwinsSkuInfoArgs and DigitalTwinsSkuInfoOutput values.
// You can construct a concrete instance of `DigitalTwinsSkuInfoInput` via:
//
//          DigitalTwinsSkuInfoArgs{...}
type DigitalTwinsSkuInfoInput interface {
	pulumi.Input

	ToDigitalTwinsSkuInfoOutput() DigitalTwinsSkuInfoOutput
	ToDigitalTwinsSkuInfoOutputWithContext(context.Context) DigitalTwinsSkuInfoOutput
}

type DigitalTwinsSkuInfoArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (DigitalTwinsSkuInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DigitalTwinsSkuInfo)(nil)).Elem()
}

func (i DigitalTwinsSkuInfoArgs) ToDigitalTwinsSkuInfoOutput() DigitalTwinsSkuInfoOutput {
	return i.ToDigitalTwinsSkuInfoOutputWithContext(context.Background())
}

func (i DigitalTwinsSkuInfoArgs) ToDigitalTwinsSkuInfoOutputWithContext(ctx context.Context) DigitalTwinsSkuInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DigitalTwinsSkuInfoOutput)
}

func (i DigitalTwinsSkuInfoArgs) ToDigitalTwinsSkuInfoPtrOutput() DigitalTwinsSkuInfoPtrOutput {
	return i.ToDigitalTwinsSkuInfoPtrOutputWithContext(context.Background())
}

func (i DigitalTwinsSkuInfoArgs) ToDigitalTwinsSkuInfoPtrOutputWithContext(ctx context.Context) DigitalTwinsSkuInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DigitalTwinsSkuInfoOutput).ToDigitalTwinsSkuInfoPtrOutputWithContext(ctx)
}

// DigitalTwinsSkuInfoPtrInput is an input type that accepts DigitalTwinsSkuInfoArgs, DigitalTwinsSkuInfoPtr and DigitalTwinsSkuInfoPtrOutput values.
// You can construct a concrete instance of `DigitalTwinsSkuInfoPtrInput` via:
//
//          DigitalTwinsSkuInfoArgs{...}
//
//  or:
//
//          nil
type DigitalTwinsSkuInfoPtrInput interface {
	pulumi.Input

	ToDigitalTwinsSkuInfoPtrOutput() DigitalTwinsSkuInfoPtrOutput
	ToDigitalTwinsSkuInfoPtrOutputWithContext(context.Context) DigitalTwinsSkuInfoPtrOutput
}

type digitalTwinsSkuInfoPtrType DigitalTwinsSkuInfoArgs

func DigitalTwinsSkuInfoPtr(v *DigitalTwinsSkuInfoArgs) DigitalTwinsSkuInfoPtrInput {
	return (*digitalTwinsSkuInfoPtrType)(v)
}

func (*digitalTwinsSkuInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DigitalTwinsSkuInfo)(nil)).Elem()
}

func (i *digitalTwinsSkuInfoPtrType) ToDigitalTwinsSkuInfoPtrOutput() DigitalTwinsSkuInfoPtrOutput {
	return i.ToDigitalTwinsSkuInfoPtrOutputWithContext(context.Background())
}

func (i *digitalTwinsSkuInfoPtrType) ToDigitalTwinsSkuInfoPtrOutputWithContext(ctx context.Context) DigitalTwinsSkuInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DigitalTwinsSkuInfoPtrOutput)
}

type DigitalTwinsSkuInfoOutput struct{ *pulumi.OutputState }

func (DigitalTwinsSkuInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DigitalTwinsSkuInfo)(nil)).Elem()
}

func (o DigitalTwinsSkuInfoOutput) ToDigitalTwinsSkuInfoOutput() DigitalTwinsSkuInfoOutput {
	return o
}

func (o DigitalTwinsSkuInfoOutput) ToDigitalTwinsSkuInfoOutputWithContext(ctx context.Context) DigitalTwinsSkuInfoOutput {
	return o
}

func (o DigitalTwinsSkuInfoOutput) ToDigitalTwinsSkuInfoPtrOutput() DigitalTwinsSkuInfoPtrOutput {
	return o.ToDigitalTwinsSkuInfoPtrOutputWithContext(context.Background())
}

func (o DigitalTwinsSkuInfoOutput) ToDigitalTwinsSkuInfoPtrOutputWithContext(ctx context.Context) DigitalTwinsSkuInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DigitalTwinsSkuInfo) *DigitalTwinsSkuInfo {
		return &v
	}).(DigitalTwinsSkuInfoPtrOutput)
}

func (o DigitalTwinsSkuInfoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DigitalTwinsSkuInfo) string { return v.Name }).(pulumi.StringOutput)
}

type DigitalTwinsSkuInfoPtrOutput struct{ *pulumi.OutputState }

func (DigitalTwinsSkuInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DigitalTwinsSkuInfo)(nil)).Elem()
}

func (o DigitalTwinsSkuInfoPtrOutput) ToDigitalTwinsSkuInfoPtrOutput() DigitalTwinsSkuInfoPtrOutput {
	return o
}

func (o DigitalTwinsSkuInfoPtrOutput) ToDigitalTwinsSkuInfoPtrOutputWithContext(ctx context.Context) DigitalTwinsSkuInfoPtrOutput {
	return o
}

func (o DigitalTwinsSkuInfoPtrOutput) Elem() DigitalTwinsSkuInfoOutput {
	return o.ApplyT(func(v *DigitalTwinsSkuInfo) DigitalTwinsSkuInfo {
		if v != nil {
			return *v
		}
		var ret DigitalTwinsSkuInfo
		return ret
	}).(DigitalTwinsSkuInfoOutput)
}

func (o DigitalTwinsSkuInfoPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DigitalTwinsSkuInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type DigitalTwinsSkuInfoResponse struct {
	Name string `pulumi:"name"`
}

// DigitalTwinsSkuInfoResponseInput is an input type that accepts DigitalTwinsSkuInfoResponseArgs and DigitalTwinsSkuInfoResponseOutput values.
// You can construct a concrete instance of `DigitalTwinsSkuInfoResponseInput` via:
//
//          DigitalTwinsSkuInfoResponseArgs{...}
type DigitalTwinsSkuInfoResponseInput interface {
	pulumi.Input

	ToDigitalTwinsSkuInfoResponseOutput() DigitalTwinsSkuInfoResponseOutput
	ToDigitalTwinsSkuInfoResponseOutputWithContext(context.Context) DigitalTwinsSkuInfoResponseOutput
}

type DigitalTwinsSkuInfoResponseArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (DigitalTwinsSkuInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DigitalTwinsSkuInfoResponse)(nil)).Elem()
}

func (i DigitalTwinsSkuInfoResponseArgs) ToDigitalTwinsSkuInfoResponseOutput() DigitalTwinsSkuInfoResponseOutput {
	return i.ToDigitalTwinsSkuInfoResponseOutputWithContext(context.Background())
}

func (i DigitalTwinsSkuInfoResponseArgs) ToDigitalTwinsSkuInfoResponseOutputWithContext(ctx context.Context) DigitalTwinsSkuInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DigitalTwinsSkuInfoResponseOutput)
}

func (i DigitalTwinsSkuInfoResponseArgs) ToDigitalTwinsSkuInfoResponsePtrOutput() DigitalTwinsSkuInfoResponsePtrOutput {
	return i.ToDigitalTwinsSkuInfoResponsePtrOutputWithContext(context.Background())
}

func (i DigitalTwinsSkuInfoResponseArgs) ToDigitalTwinsSkuInfoResponsePtrOutputWithContext(ctx context.Context) DigitalTwinsSkuInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DigitalTwinsSkuInfoResponseOutput).ToDigitalTwinsSkuInfoResponsePtrOutputWithContext(ctx)
}

// DigitalTwinsSkuInfoResponsePtrInput is an input type that accepts DigitalTwinsSkuInfoResponseArgs, DigitalTwinsSkuInfoResponsePtr and DigitalTwinsSkuInfoResponsePtrOutput values.
// You can construct a concrete instance of `DigitalTwinsSkuInfoResponsePtrInput` via:
//
//          DigitalTwinsSkuInfoResponseArgs{...}
//
//  or:
//
//          nil
type DigitalTwinsSkuInfoResponsePtrInput interface {
	pulumi.Input

	ToDigitalTwinsSkuInfoResponsePtrOutput() DigitalTwinsSkuInfoResponsePtrOutput
	ToDigitalTwinsSkuInfoResponsePtrOutputWithContext(context.Context) DigitalTwinsSkuInfoResponsePtrOutput
}

type digitalTwinsSkuInfoResponsePtrType DigitalTwinsSkuInfoResponseArgs

func DigitalTwinsSkuInfoResponsePtr(v *DigitalTwinsSkuInfoResponseArgs) DigitalTwinsSkuInfoResponsePtrInput {
	return (*digitalTwinsSkuInfoResponsePtrType)(v)
}

func (*digitalTwinsSkuInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DigitalTwinsSkuInfoResponse)(nil)).Elem()
}

func (i *digitalTwinsSkuInfoResponsePtrType) ToDigitalTwinsSkuInfoResponsePtrOutput() DigitalTwinsSkuInfoResponsePtrOutput {
	return i.ToDigitalTwinsSkuInfoResponsePtrOutputWithContext(context.Background())
}

func (i *digitalTwinsSkuInfoResponsePtrType) ToDigitalTwinsSkuInfoResponsePtrOutputWithContext(ctx context.Context) DigitalTwinsSkuInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DigitalTwinsSkuInfoResponsePtrOutput)
}

type DigitalTwinsSkuInfoResponseOutput struct{ *pulumi.OutputState }

func (DigitalTwinsSkuInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DigitalTwinsSkuInfoResponse)(nil)).Elem()
}

func (o DigitalTwinsSkuInfoResponseOutput) ToDigitalTwinsSkuInfoResponseOutput() DigitalTwinsSkuInfoResponseOutput {
	return o
}

func (o DigitalTwinsSkuInfoResponseOutput) ToDigitalTwinsSkuInfoResponseOutputWithContext(ctx context.Context) DigitalTwinsSkuInfoResponseOutput {
	return o
}

func (o DigitalTwinsSkuInfoResponseOutput) ToDigitalTwinsSkuInfoResponsePtrOutput() DigitalTwinsSkuInfoResponsePtrOutput {
	return o.ToDigitalTwinsSkuInfoResponsePtrOutputWithContext(context.Background())
}

func (o DigitalTwinsSkuInfoResponseOutput) ToDigitalTwinsSkuInfoResponsePtrOutputWithContext(ctx context.Context) DigitalTwinsSkuInfoResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DigitalTwinsSkuInfoResponse) *DigitalTwinsSkuInfoResponse {
		return &v
	}).(DigitalTwinsSkuInfoResponsePtrOutput)
}

func (o DigitalTwinsSkuInfoResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DigitalTwinsSkuInfoResponse) string { return v.Name }).(pulumi.StringOutput)
}

type DigitalTwinsSkuInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (DigitalTwinsSkuInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DigitalTwinsSkuInfoResponse)(nil)).Elem()
}

func (o DigitalTwinsSkuInfoResponsePtrOutput) ToDigitalTwinsSkuInfoResponsePtrOutput() DigitalTwinsSkuInfoResponsePtrOutput {
	return o
}

func (o DigitalTwinsSkuInfoResponsePtrOutput) ToDigitalTwinsSkuInfoResponsePtrOutputWithContext(ctx context.Context) DigitalTwinsSkuInfoResponsePtrOutput {
	return o
}

func (o DigitalTwinsSkuInfoResponsePtrOutput) Elem() DigitalTwinsSkuInfoResponseOutput {
	return o.ApplyT(func(v *DigitalTwinsSkuInfoResponse) DigitalTwinsSkuInfoResponse {
		if v != nil {
			return *v
		}
		var ret DigitalTwinsSkuInfoResponse
		return ret
	}).(DigitalTwinsSkuInfoResponseOutput)
}

func (o DigitalTwinsSkuInfoResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DigitalTwinsSkuInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type EventGrid struct {
	AccessKey1    string            `pulumi:"accessKey1"`
	AccessKey2    string            `pulumi:"accessKey2"`
	EndpointType  string            `pulumi:"endpointType"`
	Tags          map[string]string `pulumi:"tags"`
	TopicEndpoint *string           `pulumi:"topicEndpoint"`
}

// EventGridInput is an input type that accepts EventGridArgs and EventGridOutput values.
// You can construct a concrete instance of `EventGridInput` via:
//
//          EventGridArgs{...}
type EventGridInput interface {
	pulumi.Input

	ToEventGridOutput() EventGridOutput
	ToEventGridOutputWithContext(context.Context) EventGridOutput
}

type EventGridArgs struct {
	AccessKey1    pulumi.StringInput    `pulumi:"accessKey1"`
	AccessKey2    pulumi.StringInput    `pulumi:"accessKey2"`
	EndpointType  pulumi.StringInput    `pulumi:"endpointType"`
	Tags          pulumi.StringMapInput `pulumi:"tags"`
	TopicEndpoint pulumi.StringPtrInput `pulumi:"topicEndpoint"`
}

func (EventGridArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGrid)(nil)).Elem()
}

func (i EventGridArgs) ToEventGridOutput() EventGridOutput {
	return i.ToEventGridOutputWithContext(context.Background())
}

func (i EventGridArgs) ToEventGridOutputWithContext(ctx context.Context) EventGridOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridOutput)
}

type EventGridOutput struct{ *pulumi.OutputState }

func (EventGridOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGrid)(nil)).Elem()
}

func (o EventGridOutput) ToEventGridOutput() EventGridOutput {
	return o
}

func (o EventGridOutput) ToEventGridOutputWithContext(ctx context.Context) EventGridOutput {
	return o
}

func (o EventGridOutput) AccessKey1() pulumi.StringOutput {
	return o.ApplyT(func(v EventGrid) string { return v.AccessKey1 }).(pulumi.StringOutput)
}

func (o EventGridOutput) AccessKey2() pulumi.StringOutput {
	return o.ApplyT(func(v EventGrid) string { return v.AccessKey2 }).(pulumi.StringOutput)
}

func (o EventGridOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v EventGrid) string { return v.EndpointType }).(pulumi.StringOutput)
}

func (o EventGridOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EventGrid) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o EventGridOutput) TopicEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGrid) *string { return v.TopicEndpoint }).(pulumi.StringPtrOutput)
}

type EventGridResponse struct {
	AccessKey1        string            `pulumi:"accessKey1"`
	AccessKey2        string            `pulumi:"accessKey2"`
	CreatedTime       string            `pulumi:"createdTime"`
	EndpointType      string            `pulumi:"endpointType"`
	ProvisioningState string            `pulumi:"provisioningState"`
	Tags              map[string]string `pulumi:"tags"`
	TopicEndpoint     *string           `pulumi:"topicEndpoint"`
}

// EventGridResponseInput is an input type that accepts EventGridResponseArgs and EventGridResponseOutput values.
// You can construct a concrete instance of `EventGridResponseInput` via:
//
//          EventGridResponseArgs{...}
type EventGridResponseInput interface {
	pulumi.Input

	ToEventGridResponseOutput() EventGridResponseOutput
	ToEventGridResponseOutputWithContext(context.Context) EventGridResponseOutput
}

type EventGridResponseArgs struct {
	AccessKey1        pulumi.StringInput    `pulumi:"accessKey1"`
	AccessKey2        pulumi.StringInput    `pulumi:"accessKey2"`
	CreatedTime       pulumi.StringInput    `pulumi:"createdTime"`
	EndpointType      pulumi.StringInput    `pulumi:"endpointType"`
	ProvisioningState pulumi.StringInput    `pulumi:"provisioningState"`
	Tags              pulumi.StringMapInput `pulumi:"tags"`
	TopicEndpoint     pulumi.StringPtrInput `pulumi:"topicEndpoint"`
}

func (EventGridResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridResponse)(nil)).Elem()
}

func (i EventGridResponseArgs) ToEventGridResponseOutput() EventGridResponseOutput {
	return i.ToEventGridResponseOutputWithContext(context.Background())
}

func (i EventGridResponseArgs) ToEventGridResponseOutputWithContext(ctx context.Context) EventGridResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridResponseOutput)
}

type EventGridResponseOutput struct{ *pulumi.OutputState }

func (EventGridResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridResponse)(nil)).Elem()
}

func (o EventGridResponseOutput) ToEventGridResponseOutput() EventGridResponseOutput {
	return o
}

func (o EventGridResponseOutput) ToEventGridResponseOutputWithContext(ctx context.Context) EventGridResponseOutput {
	return o
}

func (o EventGridResponseOutput) AccessKey1() pulumi.StringOutput {
	return o.ApplyT(func(v EventGridResponse) string { return v.AccessKey1 }).(pulumi.StringOutput)
}

func (o EventGridResponseOutput) AccessKey2() pulumi.StringOutput {
	return o.ApplyT(func(v EventGridResponse) string { return v.AccessKey2 }).(pulumi.StringOutput)
}

func (o EventGridResponseOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v EventGridResponse) string { return v.CreatedTime }).(pulumi.StringOutput)
}

func (o EventGridResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v EventGridResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

func (o EventGridResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v EventGridResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

func (o EventGridResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EventGridResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o EventGridResponseOutput) TopicEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridResponse) *string { return v.TopicEndpoint }).(pulumi.StringPtrOutput)
}

type EventHub struct {
	ConnectionStringPrimaryKey   string            `pulumi:"connectionStringPrimaryKey"`
	ConnectionStringSecondaryKey string            `pulumi:"connectionStringSecondaryKey"`
	EndpointType                 string            `pulumi:"endpointType"`
	Tags                         map[string]string `pulumi:"tags"`
}

// EventHubInput is an input type that accepts EventHubArgs and EventHubOutput values.
// You can construct a concrete instance of `EventHubInput` via:
//
//          EventHubArgs{...}
type EventHubInput interface {
	pulumi.Input

	ToEventHubOutput() EventHubOutput
	ToEventHubOutputWithContext(context.Context) EventHubOutput
}

type EventHubArgs struct {
	ConnectionStringPrimaryKey   pulumi.StringInput    `pulumi:"connectionStringPrimaryKey"`
	ConnectionStringSecondaryKey pulumi.StringInput    `pulumi:"connectionStringSecondaryKey"`
	EndpointType                 pulumi.StringInput    `pulumi:"endpointType"`
	Tags                         pulumi.StringMapInput `pulumi:"tags"`
}

func (EventHubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHub)(nil)).Elem()
}

func (i EventHubArgs) ToEventHubOutput() EventHubOutput {
	return i.ToEventHubOutputWithContext(context.Background())
}

func (i EventHubArgs) ToEventHubOutputWithContext(ctx context.Context) EventHubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubOutput)
}

type EventHubOutput struct{ *pulumi.OutputState }

func (EventHubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHub)(nil)).Elem()
}

func (o EventHubOutput) ToEventHubOutput() EventHubOutput {
	return o
}

func (o EventHubOutput) ToEventHubOutputWithContext(ctx context.Context) EventHubOutput {
	return o
}

func (o EventHubOutput) ConnectionStringPrimaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v EventHub) string { return v.ConnectionStringPrimaryKey }).(pulumi.StringOutput)
}

func (o EventHubOutput) ConnectionStringSecondaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v EventHub) string { return v.ConnectionStringSecondaryKey }).(pulumi.StringOutput)
}

func (o EventHubOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v EventHub) string { return v.EndpointType }).(pulumi.StringOutput)
}

func (o EventHubOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EventHub) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type EventHubResponse struct {
	ConnectionStringPrimaryKey   string            `pulumi:"connectionStringPrimaryKey"`
	ConnectionStringSecondaryKey string            `pulumi:"connectionStringSecondaryKey"`
	CreatedTime                  string            `pulumi:"createdTime"`
	EndpointType                 string            `pulumi:"endpointType"`
	ProvisioningState            string            `pulumi:"provisioningState"`
	Tags                         map[string]string `pulumi:"tags"`
}

// EventHubResponseInput is an input type that accepts EventHubResponseArgs and EventHubResponseOutput values.
// You can construct a concrete instance of `EventHubResponseInput` via:
//
//          EventHubResponseArgs{...}
type EventHubResponseInput interface {
	pulumi.Input

	ToEventHubResponseOutput() EventHubResponseOutput
	ToEventHubResponseOutputWithContext(context.Context) EventHubResponseOutput
}

type EventHubResponseArgs struct {
	ConnectionStringPrimaryKey   pulumi.StringInput    `pulumi:"connectionStringPrimaryKey"`
	ConnectionStringSecondaryKey pulumi.StringInput    `pulumi:"connectionStringSecondaryKey"`
	CreatedTime                  pulumi.StringInput    `pulumi:"createdTime"`
	EndpointType                 pulumi.StringInput    `pulumi:"endpointType"`
	ProvisioningState            pulumi.StringInput    `pulumi:"provisioningState"`
	Tags                         pulumi.StringMapInput `pulumi:"tags"`
}

func (EventHubResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubResponse)(nil)).Elem()
}

func (i EventHubResponseArgs) ToEventHubResponseOutput() EventHubResponseOutput {
	return i.ToEventHubResponseOutputWithContext(context.Background())
}

func (i EventHubResponseArgs) ToEventHubResponseOutputWithContext(ctx context.Context) EventHubResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubResponseOutput)
}

type EventHubResponseOutput struct{ *pulumi.OutputState }

func (EventHubResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubResponse)(nil)).Elem()
}

func (o EventHubResponseOutput) ToEventHubResponseOutput() EventHubResponseOutput {
	return o
}

func (o EventHubResponseOutput) ToEventHubResponseOutputWithContext(ctx context.Context) EventHubResponseOutput {
	return o
}

func (o EventHubResponseOutput) ConnectionStringPrimaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubResponse) string { return v.ConnectionStringPrimaryKey }).(pulumi.StringOutput)
}

func (o EventHubResponseOutput) ConnectionStringSecondaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubResponse) string { return v.ConnectionStringSecondaryKey }).(pulumi.StringOutput)
}

func (o EventHubResponseOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubResponse) string { return v.CreatedTime }).(pulumi.StringOutput)
}

func (o EventHubResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

func (o EventHubResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

func (o EventHubResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EventHubResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ServiceBus struct {
	EndpointType              string            `pulumi:"endpointType"`
	PrimaryConnectionString   string            `pulumi:"primaryConnectionString"`
	SecondaryConnectionString string            `pulumi:"secondaryConnectionString"`
	Tags                      map[string]string `pulumi:"tags"`
}

// ServiceBusInput is an input type that accepts ServiceBusArgs and ServiceBusOutput values.
// You can construct a concrete instance of `ServiceBusInput` via:
//
//          ServiceBusArgs{...}
type ServiceBusInput interface {
	pulumi.Input

	ToServiceBusOutput() ServiceBusOutput
	ToServiceBusOutputWithContext(context.Context) ServiceBusOutput
}

type ServiceBusArgs struct {
	EndpointType              pulumi.StringInput    `pulumi:"endpointType"`
	PrimaryConnectionString   pulumi.StringInput    `pulumi:"primaryConnectionString"`
	SecondaryConnectionString pulumi.StringInput    `pulumi:"secondaryConnectionString"`
	Tags                      pulumi.StringMapInput `pulumi:"tags"`
}

func (ServiceBusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBus)(nil)).Elem()
}

func (i ServiceBusArgs) ToServiceBusOutput() ServiceBusOutput {
	return i.ToServiceBusOutputWithContext(context.Background())
}

func (i ServiceBusArgs) ToServiceBusOutputWithContext(ctx context.Context) ServiceBusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBusOutput)
}

type ServiceBusOutput struct{ *pulumi.OutputState }

func (ServiceBusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBus)(nil)).Elem()
}

func (o ServiceBusOutput) ToServiceBusOutput() ServiceBusOutput {
	return o
}

func (o ServiceBusOutput) ToServiceBusOutputWithContext(ctx context.Context) ServiceBusOutput {
	return o
}

func (o ServiceBusOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBus) string { return v.EndpointType }).(pulumi.StringOutput)
}

func (o ServiceBusOutput) PrimaryConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBus) string { return v.PrimaryConnectionString }).(pulumi.StringOutput)
}

func (o ServiceBusOutput) SecondaryConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBus) string { return v.SecondaryConnectionString }).(pulumi.StringOutput)
}

func (o ServiceBusOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceBus) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ServiceBusResponse struct {
	CreatedTime               string            `pulumi:"createdTime"`
	EndpointType              string            `pulumi:"endpointType"`
	PrimaryConnectionString   string            `pulumi:"primaryConnectionString"`
	ProvisioningState         string            `pulumi:"provisioningState"`
	SecondaryConnectionString string            `pulumi:"secondaryConnectionString"`
	Tags                      map[string]string `pulumi:"tags"`
}

// ServiceBusResponseInput is an input type that accepts ServiceBusResponseArgs and ServiceBusResponseOutput values.
// You can construct a concrete instance of `ServiceBusResponseInput` via:
//
//          ServiceBusResponseArgs{...}
type ServiceBusResponseInput interface {
	pulumi.Input

	ToServiceBusResponseOutput() ServiceBusResponseOutput
	ToServiceBusResponseOutputWithContext(context.Context) ServiceBusResponseOutput
}

type ServiceBusResponseArgs struct {
	CreatedTime               pulumi.StringInput    `pulumi:"createdTime"`
	EndpointType              pulumi.StringInput    `pulumi:"endpointType"`
	PrimaryConnectionString   pulumi.StringInput    `pulumi:"primaryConnectionString"`
	ProvisioningState         pulumi.StringInput    `pulumi:"provisioningState"`
	SecondaryConnectionString pulumi.StringInput    `pulumi:"secondaryConnectionString"`
	Tags                      pulumi.StringMapInput `pulumi:"tags"`
}

func (ServiceBusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBusResponse)(nil)).Elem()
}

func (i ServiceBusResponseArgs) ToServiceBusResponseOutput() ServiceBusResponseOutput {
	return i.ToServiceBusResponseOutputWithContext(context.Background())
}

func (i ServiceBusResponseArgs) ToServiceBusResponseOutputWithContext(ctx context.Context) ServiceBusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBusResponseOutput)
}

type ServiceBusResponseOutput struct{ *pulumi.OutputState }

func (ServiceBusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBusResponse)(nil)).Elem()
}

func (o ServiceBusResponseOutput) ToServiceBusResponseOutput() ServiceBusResponseOutput {
	return o
}

func (o ServiceBusResponseOutput) ToServiceBusResponseOutputWithContext(ctx context.Context) ServiceBusResponseOutput {
	return o
}

func (o ServiceBusResponseOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBusResponse) string { return v.CreatedTime }).(pulumi.StringOutput)
}

func (o ServiceBusResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBusResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

func (o ServiceBusResponseOutput) PrimaryConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBusResponse) string { return v.PrimaryConnectionString }).(pulumi.StringOutput)
}

func (o ServiceBusResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBusResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

func (o ServiceBusResponseOutput) SecondaryConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBusResponse) string { return v.SecondaryConnectionString }).(pulumi.StringOutput)
}

func (o ServiceBusResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceBusResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(DigitalTwinsSkuInfoOutput{})
	pulumi.RegisterOutputType(DigitalTwinsSkuInfoPtrOutput{})
	pulumi.RegisterOutputType(DigitalTwinsSkuInfoResponseOutput{})
	pulumi.RegisterOutputType(DigitalTwinsSkuInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(EventGridOutput{})
	pulumi.RegisterOutputType(EventGridResponseOutput{})
	pulumi.RegisterOutputType(EventHubOutput{})
	pulumi.RegisterOutputType(EventHubResponseOutput{})
	pulumi.RegisterOutputType(ServiceBusOutput{})
	pulumi.RegisterOutputType(ServiceBusResponseOutput{})
}
