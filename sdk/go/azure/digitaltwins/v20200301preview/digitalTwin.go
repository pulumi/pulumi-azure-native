// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200301preview

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The description of the DigitalTwins service.
type DigitalTwin struct {
	pulumi.CustomResourceState

	// Time when DigitalTwinsInstance was created.
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// Api endpoint to work with DigitalTwinsInstance.
	HostName pulumi.StringOutput `pulumi:"hostName"`
	// Time when DigitalTwinsInstance was created.
	LastUpdatedTime pulumi.StringOutput `pulumi:"lastUpdatedTime"`
	// The resource location.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// This property is reserved for future use, and will be ignored/omitted
	Sku DigitalTwinsSkuInfoResponsePtrOutput `pulumi:"sku"`
	// The resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDigitalTwin registers a new resource with the given unique name, arguments, and options.
func NewDigitalTwin(ctx *pulumi.Context,
	name string, args *DigitalTwinArgs, opts ...pulumi.ResourceOption) (*DigitalTwin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-nextgen:digitaltwins:DigitalTwin"),
		},
		{
			Type: pulumi.String("azure-nextgen:digitaltwins/latest:DigitalTwin"),
		},
		{
			Type: pulumi.String("azure-nextgen:digitaltwins/v20201031:DigitalTwin"),
		},
		{
			Type: pulumi.String("azure-nextgen:digitaltwins/v20201201:DigitalTwin"),
		},
	})
	opts = append(opts, aliases)
	var resource DigitalTwin
	err := ctx.RegisterResource("azure-nextgen:digitaltwins/v20200301preview:DigitalTwin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDigitalTwin gets an existing DigitalTwin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDigitalTwin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DigitalTwinState, opts ...pulumi.ResourceOption) (*DigitalTwin, error) {
	var resource DigitalTwin
	err := ctx.ReadResource("azure-nextgen:digitaltwins/v20200301preview:DigitalTwin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DigitalTwin resources.
type digitalTwinState struct {
	// Time when DigitalTwinsInstance was created.
	CreatedTime *string `pulumi:"createdTime"`
	// Api endpoint to work with DigitalTwinsInstance.
	HostName *string `pulumi:"hostName"`
	// Time when DigitalTwinsInstance was created.
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// The resource location.
	Location *string `pulumi:"location"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The provisioning state.
	ProvisioningState *string `pulumi:"provisioningState"`
	// This property is reserved for future use, and will be ignored/omitted
	Sku *DigitalTwinsSkuInfoResponse `pulumi:"sku"`
	// The resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The resource type.
	Type *string `pulumi:"type"`
}

type DigitalTwinState struct {
	// Time when DigitalTwinsInstance was created.
	CreatedTime pulumi.StringPtrInput
	// Api endpoint to work with DigitalTwinsInstance.
	HostName pulumi.StringPtrInput
	// Time when DigitalTwinsInstance was created.
	LastUpdatedTime pulumi.StringPtrInput
	// The resource location.
	Location pulumi.StringPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// The provisioning state.
	ProvisioningState pulumi.StringPtrInput
	// This property is reserved for future use, and will be ignored/omitted
	Sku DigitalTwinsSkuInfoResponsePtrInput
	// The resource tags.
	Tags pulumi.StringMapInput
	// The resource type.
	Type pulumi.StringPtrInput
}

func (DigitalTwinState) ElementType() reflect.Type {
	return reflect.TypeOf((*digitalTwinState)(nil)).Elem()
}

type digitalTwinArgs struct {
	// The resource location.
	Location *string `pulumi:"location"`
	// The name of the resource group that contains the DigitalTwinsInstance.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the DigitalTwinsInstance.
	ResourceName *string `pulumi:"resourceName"`
	// This property is reserved for future use, and will be ignored/omitted
	Sku *DigitalTwinsSkuInfo `pulumi:"sku"`
	// The resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a DigitalTwin resource.
type DigitalTwinArgs struct {
	// The resource location.
	Location pulumi.StringPtrInput
	// The name of the resource group that contains the DigitalTwinsInstance.
	ResourceGroupName pulumi.StringInput
	// The name of the DigitalTwinsInstance.
	ResourceName pulumi.StringPtrInput
	// This property is reserved for future use, and will be ignored/omitted
	Sku DigitalTwinsSkuInfoPtrInput
	// The resource tags.
	Tags pulumi.StringMapInput
}

func (DigitalTwinArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*digitalTwinArgs)(nil)).Elem()
}

type DigitalTwinInput interface {
	pulumi.Input

	ToDigitalTwinOutput() DigitalTwinOutput
	ToDigitalTwinOutputWithContext(ctx context.Context) DigitalTwinOutput
}

func (*DigitalTwin) ElementType() reflect.Type {
	return reflect.TypeOf((*DigitalTwin)(nil))
}

func (i *DigitalTwin) ToDigitalTwinOutput() DigitalTwinOutput {
	return i.ToDigitalTwinOutputWithContext(context.Background())
}

func (i *DigitalTwin) ToDigitalTwinOutputWithContext(ctx context.Context) DigitalTwinOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DigitalTwinOutput)
}

type DigitalTwinOutput struct {
	*pulumi.OutputState
}

func (DigitalTwinOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DigitalTwin)(nil))
}

func (o DigitalTwinOutput) ToDigitalTwinOutput() DigitalTwinOutput {
	return o
}

func (o DigitalTwinOutput) ToDigitalTwinOutputWithContext(ctx context.Context) DigitalTwinOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DigitalTwinOutput{})
}
