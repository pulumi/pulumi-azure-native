// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220301preview

// The core network technology generation.
type CoreNetworkType string

const (
	// 5G core
	CoreNetworkType_5GC = CoreNetworkType("5GC")
	// EPC / 4G core
	CoreNetworkTypeEPC = CoreNetworkType("EPC")
)

// The type of identity that last modified the resource.
type CreatedByType string

const (
	CreatedByTypeUser            = CreatedByType("User")
	CreatedByTypeApplication     = CreatedByType("Application")
	CreatedByTypeManagedIdentity = CreatedByType("ManagedIdentity")
	CreatedByTypeKey             = CreatedByType("Key")
)

// Whether NAPT is enabled for connections to this attachedDataNetwork.
type NaptEnabled string

const (
	// NAPT is enabled
	NaptEnabledEnabled = NaptEnabled("Enabled")
	// NAPT is disabled
	NaptEnabledDisabled = NaptEnabled("Disabled")
)

// The default PDU session type, which is used if the UE does not request a specific session type.
type PduSessionType string

const (
	PduSessionTypeIPv4 = PduSessionType("IPv4")
	PduSessionTypeIPv6 = PduSessionType("IPv6")
)

// Default QoS Flow preemption capability.  The Preemption Capability of a QoS Flow controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
type PreemptionCapability string

const (
	// Cannot preempt
	PreemptionCapabilityNotPreempt = PreemptionCapability("NotPreempt")
	// May preempt
	PreemptionCapabilityMayPreempt = PreemptionCapability("MayPreempt")
)

// Default QoS Flow preemption vulnerability.  The Preemption Vulnerability of a QoS Flow controls whether it can be preempted by QoS Flow with a higher priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
type PreemptionVulnerability string

const (
	// Cannot be preempted
	PreemptionVulnerabilityNotPreemptable = PreemptionVulnerability("NotPreemptable")
	// May be preempted
	PreemptionVulnerabilityPreemptable = PreemptionVulnerability("Preemptable")
)

// The direction of this flow.
type SdfDirection string

const (
	// Traffic flowing from the UE to the data network.
	SdfDirectionUplink = SdfDirection("Uplink")
	// Traffic flowing from the data network to the UE.
	SdfDirectionDownlink = SdfDirection("Downlink")
	// Traffic flowing both to and from the UE.
	SdfDirectionBidirectional = SdfDirection("Bidirectional")
)

// Determines whether flows that match this PCC Rule are permitted.
type TrafficControlPermission string

const (
	// Traffic matching this rule is allowed to flow.
	TrafficControlPermissionEnabled = TrafficControlPermission("Enabled")
	// Traffic matching this rule is not allowed to flow.
	TrafficControlPermissionBlocked = TrafficControlPermission("Blocked")
)

func init() {
}
