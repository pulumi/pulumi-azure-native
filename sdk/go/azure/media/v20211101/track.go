// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20211101

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An Asset Track resource.
type Track struct {
	pulumi.CustomResourceState

	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of the asset track.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Detailed information about a track in the asset.
	Track pulumi.AnyOutput `pulumi:"track"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewTrack registers a new resource with the given unique name, arguments, and options.
func NewTrack(ctx *pulumi.Context,
	name string, args *TrackArgs, opts ...pulumi.ResourceOption) (*Track, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.AssetName == nil {
		return nil, errors.New("invalid value for required argument 'AssetName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:media:Track"),
		},
	})
	opts = append(opts, aliases)
	var resource Track
	err := ctx.RegisterResource("azure-native:media/v20211101:Track", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrack gets an existing Track resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrackState, opts ...pulumi.ResourceOption) (*Track, error) {
	var resource Track
	err := ctx.ReadResource("azure-native:media/v20211101:Track", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Track resources.
type trackState struct {
}

type TrackState struct {
}

func (TrackState) ElementType() reflect.Type {
	return reflect.TypeOf((*trackState)(nil)).Elem()
}

type trackArgs struct {
	// The Media Services account name.
	AccountName string `pulumi:"accountName"`
	// The Asset name.
	AssetName string `pulumi:"assetName"`
	// The name of the resource group within the Azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Detailed information about a track in the asset.
	Track interface{} `pulumi:"track"`
	// The Asset Track name.
	TrackName *string `pulumi:"trackName"`
}

// The set of arguments for constructing a Track resource.
type TrackArgs struct {
	// The Media Services account name.
	AccountName pulumi.StringInput
	// The Asset name.
	AssetName pulumi.StringInput
	// The name of the resource group within the Azure subscription.
	ResourceGroupName pulumi.StringInput
	// Detailed information about a track in the asset.
	Track pulumi.Input
	// The Asset Track name.
	TrackName pulumi.StringPtrInput
}

func (TrackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trackArgs)(nil)).Elem()
}

type TrackInput interface {
	pulumi.Input

	ToTrackOutput() TrackOutput
	ToTrackOutputWithContext(ctx context.Context) TrackOutput
}

func (*Track) ElementType() reflect.Type {
	return reflect.TypeOf((**Track)(nil)).Elem()
}

func (i *Track) ToTrackOutput() TrackOutput {
	return i.ToTrackOutputWithContext(context.Background())
}

func (i *Track) ToTrackOutputWithContext(ctx context.Context) TrackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackOutput)
}

type TrackOutput struct{ *pulumi.OutputState }

func (TrackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Track)(nil)).Elem()
}

func (o TrackOutput) ToTrackOutput() TrackOutput {
	return o
}

func (o TrackOutput) ToTrackOutputWithContext(ctx context.Context) TrackOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TrackOutput{})
}
