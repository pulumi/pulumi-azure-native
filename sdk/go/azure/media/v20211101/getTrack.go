// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An Asset Track resource.
func LookupTrack(ctx *pulumi.Context, args *LookupTrackArgs, opts ...pulumi.InvokeOption) (*LookupTrackResult, error) {
	var rv LookupTrackResult
	err := ctx.Invoke("azure-native:media/v20211101:getTrack", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTrackArgs struct {
	// The Media Services account name.
	AccountName string `pulumi:"accountName"`
	// The Asset name.
	AssetName string `pulumi:"assetName"`
	// The name of the resource group within the Azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The Asset Track name.
	TrackName string `pulumi:"trackName"`
}

// An Asset Track resource.
type LookupTrackResult struct {
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Provisioning state of the asset track.
	ProvisioningState string `pulumi:"provisioningState"`
	// Detailed information about a track in the asset.
	Track interface{} `pulumi:"track"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupTrackOutput(ctx *pulumi.Context, args LookupTrackOutputArgs, opts ...pulumi.InvokeOption) LookupTrackResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTrackResult, error) {
			args := v.(LookupTrackArgs)
			r, err := LookupTrack(ctx, &args, opts...)
			var s LookupTrackResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTrackResultOutput)
}

type LookupTrackOutputArgs struct {
	// The Media Services account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The Asset name.
	AssetName pulumi.StringInput `pulumi:"assetName"`
	// The name of the resource group within the Azure subscription.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The Asset Track name.
	TrackName pulumi.StringInput `pulumi:"trackName"`
}

func (LookupTrackOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTrackArgs)(nil)).Elem()
}

// An Asset Track resource.
type LookupTrackResultOutput struct{ *pulumi.OutputState }

func (LookupTrackResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTrackResult)(nil)).Elem()
}

func (o LookupTrackResultOutput) ToLookupTrackResultOutput() LookupTrackResultOutput {
	return o
}

func (o LookupTrackResultOutput) ToLookupTrackResultOutputWithContext(ctx context.Context) LookupTrackResultOutput {
	return o
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupTrackResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTrackResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupTrackResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTrackResult) string { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the asset track.
func (o LookupTrackResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTrackResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Detailed information about a track in the asset.
func (o LookupTrackResultOutput) Track() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupTrackResult) interface{} { return v.Track }).(pulumi.AnyOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupTrackResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTrackResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTrackResultOutput{})
}
