// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180701

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Live Output.
type LiveOutput struct {
	pulumi.CustomResourceState

	// ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.
	ArchiveWindowLength pulumi.StringOutput `pulumi:"archiveWindowLength"`
	// The asset name.
	AssetName pulumi.StringOutput `pulumi:"assetName"`
	// The exact time the Live Output was created.
	Created pulumi.StringOutput `pulumi:"created"`
	// The description of the Live Output.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The HLS configuration.
	Hls HlsResponsePtrOutput `pulumi:"hls"`
	// The exact time the Live Output was last modified.
	LastModified pulumi.StringOutput `pulumi:"lastModified"`
	// The manifest file name.  If not provided, the service will generate one automatically.
	ManifestName pulumi.StringPtrOutput `pulumi:"manifestName"`
	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The output snapshot time.
	OutputSnapTime pulumi.Float64PtrOutput `pulumi:"outputSnapTime"`
	// The provisioning state of the Live Output.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The resource state of the Live Output.
	ResourceState pulumi.StringOutput `pulumi:"resourceState"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewLiveOutput registers a new resource with the given unique name, arguments, and options.
func NewLiveOutput(ctx *pulumi.Context,
	name string, args *LiveOutputArgs, opts ...pulumi.ResourceOption) (*LiveOutput, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.ArchiveWindowLength == nil {
		return nil, errors.New("invalid value for required argument 'ArchiveWindowLength'")
	}
	if args.AssetName == nil {
		return nil, errors.New("invalid value for required argument 'AssetName'")
	}
	if args.LiveEventName == nil {
		return nil, errors.New("invalid value for required argument 'LiveEventName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:media:LiveOutput"),
		},
		{
			Type: pulumi.String("azure-native:media/v20180330preview:LiveOutput"),
		},
		{
			Type: pulumi.String("azure-native:media/v20180601preview:LiveOutput"),
		},
		{
			Type: pulumi.String("azure-native:media/v20190501preview:LiveOutput"),
		},
		{
			Type: pulumi.String("azure-native:media/v20200501:LiveOutput"),
		},
		{
			Type: pulumi.String("azure-native:media/v20210601:LiveOutput"),
		},
		{
			Type: pulumi.String("azure-native:media/v20211101:LiveOutput"),
		},
		{
			Type: pulumi.String("azure-native:media/v20220801:LiveOutput"),
		},
	})
	opts = append(opts, aliases)
	var resource LiveOutput
	err := ctx.RegisterResource("azure-native:media/v20180701:LiveOutput", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLiveOutput gets an existing LiveOutput resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLiveOutput(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LiveOutputState, opts ...pulumi.ResourceOption) (*LiveOutput, error) {
	var resource LiveOutput
	err := ctx.ReadResource("azure-native:media/v20180701:LiveOutput", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LiveOutput resources.
type liveOutputState struct {
}

type LiveOutputState struct {
}

func (LiveOutputState) ElementType() reflect.Type {
	return reflect.TypeOf((*liveOutputState)(nil)).Elem()
}

type liveOutputArgs struct {
	// The Media Services account name.
	AccountName string `pulumi:"accountName"`
	// ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.
	ArchiveWindowLength string `pulumi:"archiveWindowLength"`
	// The asset name.
	AssetName string `pulumi:"assetName"`
	// The description of the Live Output.
	Description *string `pulumi:"description"`
	// The HLS configuration.
	Hls *Hls `pulumi:"hls"`
	// The name of the Live Event.
	LiveEventName string `pulumi:"liveEventName"`
	// The name of the Live Output.
	LiveOutputName *string `pulumi:"liveOutputName"`
	// The manifest file name.  If not provided, the service will generate one automatically.
	ManifestName *string `pulumi:"manifestName"`
	// The output snapshot time.
	OutputSnapTime *float64 `pulumi:"outputSnapTime"`
	// The name of the resource group within the Azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a LiveOutput resource.
type LiveOutputArgs struct {
	// The Media Services account name.
	AccountName pulumi.StringInput
	// ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.
	ArchiveWindowLength pulumi.StringInput
	// The asset name.
	AssetName pulumi.StringInput
	// The description of the Live Output.
	Description pulumi.StringPtrInput
	// The HLS configuration.
	Hls HlsPtrInput
	// The name of the Live Event.
	LiveEventName pulumi.StringInput
	// The name of the Live Output.
	LiveOutputName pulumi.StringPtrInput
	// The manifest file name.  If not provided, the service will generate one automatically.
	ManifestName pulumi.StringPtrInput
	// The output snapshot time.
	OutputSnapTime pulumi.Float64PtrInput
	// The name of the resource group within the Azure subscription.
	ResourceGroupName pulumi.StringInput
}

func (LiveOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*liveOutputArgs)(nil)).Elem()
}

type LiveOutputInput interface {
	pulumi.Input

	ToLiveOutputOutput() LiveOutputOutput
	ToLiveOutputOutputWithContext(ctx context.Context) LiveOutputOutput
}

func (*LiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveOutput)(nil)).Elem()
}

func (i *LiveOutput) ToLiveOutputOutput() LiveOutputOutput {
	return i.ToLiveOutputOutputWithContext(context.Background())
}

func (i *LiveOutput) ToLiveOutputOutputWithContext(ctx context.Context) LiveOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveOutputOutput)
}

type LiveOutputOutput struct{ *pulumi.OutputState }

func (LiveOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveOutput)(nil)).Elem()
}

func (o LiveOutputOutput) ToLiveOutputOutput() LiveOutputOutput {
	return o
}

func (o LiveOutputOutput) ToLiveOutputOutputWithContext(ctx context.Context) LiveOutputOutput {
	return o
}

// ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.
func (o LiveOutputOutput) ArchiveWindowLength() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveOutput) pulumi.StringOutput { return v.ArchiveWindowLength }).(pulumi.StringOutput)
}

// The asset name.
func (o LiveOutputOutput) AssetName() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveOutput) pulumi.StringOutput { return v.AssetName }).(pulumi.StringOutput)
}

// The exact time the Live Output was created.
func (o LiveOutputOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveOutput) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// The description of the Live Output.
func (o LiveOutputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveOutput) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The HLS configuration.
func (o LiveOutputOutput) Hls() HlsResponsePtrOutput {
	return o.ApplyT(func(v *LiveOutput) HlsResponsePtrOutput { return v.Hls }).(HlsResponsePtrOutput)
}

// The exact time the Live Output was last modified.
func (o LiveOutputOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveOutput) pulumi.StringOutput { return v.LastModified }).(pulumi.StringOutput)
}

// The manifest file name.  If not provided, the service will generate one automatically.
func (o LiveOutputOutput) ManifestName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveOutput) pulumi.StringPtrOutput { return v.ManifestName }).(pulumi.StringPtrOutput)
}

// The name of the resource.
func (o LiveOutputOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveOutput) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The output snapshot time.
func (o LiveOutputOutput) OutputSnapTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LiveOutput) pulumi.Float64PtrOutput { return v.OutputSnapTime }).(pulumi.Float64PtrOutput)
}

// The provisioning state of the Live Output.
func (o LiveOutputOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveOutput) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The resource state of the Live Output.
func (o LiveOutputOutput) ResourceState() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveOutput) pulumi.StringOutput { return v.ResourceState }).(pulumi.StringOutput)
}

// The type of the resource.
func (o LiveOutputOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveOutput) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LiveOutputOutput{})
}
