// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package latest

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Specifies the clip time as an absolute time position in the media file.  The absolute time can point to a different position depending on whether the media file starts from a timestamp of zero or not.
type AbsoluteClipTime struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The time position on the timeline of the input media. It is usually specified as an ISO8601 period. e.g PT30S for 30 seconds.
	Time string `pulumi:"time"`
}

// AbsoluteClipTimeInput is an input type that accepts AbsoluteClipTimeArgs and AbsoluteClipTimeOutput values.
// You can construct a concrete instance of `AbsoluteClipTimeInput` via:
//
//          AbsoluteClipTimeArgs{...}
type AbsoluteClipTimeInput interface {
	pulumi.Input

	ToAbsoluteClipTimeOutput() AbsoluteClipTimeOutput
	ToAbsoluteClipTimeOutputWithContext(context.Context) AbsoluteClipTimeOutput
}

// Specifies the clip time as an absolute time position in the media file.  The absolute time can point to a different position depending on whether the media file starts from a timestamp of zero or not.
type AbsoluteClipTimeArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The time position on the timeline of the input media. It is usually specified as an ISO8601 period. e.g PT30S for 30 seconds.
	Time pulumi.StringInput `pulumi:"time"`
}

func (AbsoluteClipTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AbsoluteClipTime)(nil)).Elem()
}

func (i AbsoluteClipTimeArgs) ToAbsoluteClipTimeOutput() AbsoluteClipTimeOutput {
	return i.ToAbsoluteClipTimeOutputWithContext(context.Background())
}

func (i AbsoluteClipTimeArgs) ToAbsoluteClipTimeOutputWithContext(ctx context.Context) AbsoluteClipTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AbsoluteClipTimeOutput)
}

// Specifies the clip time as an absolute time position in the media file.  The absolute time can point to a different position depending on whether the media file starts from a timestamp of zero or not.
type AbsoluteClipTimeOutput struct{ *pulumi.OutputState }

func (AbsoluteClipTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AbsoluteClipTime)(nil)).Elem()
}

func (o AbsoluteClipTimeOutput) ToAbsoluteClipTimeOutput() AbsoluteClipTimeOutput {
	return o
}

func (o AbsoluteClipTimeOutput) ToAbsoluteClipTimeOutputWithContext(ctx context.Context) AbsoluteClipTimeOutput {
	return o
}

// The discriminator for derived types.
func (o AbsoluteClipTimeOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v AbsoluteClipTime) string { return v.OdataType }).(pulumi.StringOutput)
}

// The time position on the timeline of the input media. It is usually specified as an ISO8601 period. e.g PT30S for 30 seconds.
func (o AbsoluteClipTimeOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v AbsoluteClipTime) string { return v.Time }).(pulumi.StringOutput)
}

// Specifies the clip time as an absolute time position in the media file.  The absolute time can point to a different position depending on whether the media file starts from a timestamp of zero or not.
type AbsoluteClipTimeResponse struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The time position on the timeline of the input media. It is usually specified as an ISO8601 period. e.g PT30S for 30 seconds.
	Time string `pulumi:"time"`
}

// AbsoluteClipTimeResponseInput is an input type that accepts AbsoluteClipTimeResponseArgs and AbsoluteClipTimeResponseOutput values.
// You can construct a concrete instance of `AbsoluteClipTimeResponseInput` via:
//
//          AbsoluteClipTimeResponseArgs{...}
type AbsoluteClipTimeResponseInput interface {
	pulumi.Input

	ToAbsoluteClipTimeResponseOutput() AbsoluteClipTimeResponseOutput
	ToAbsoluteClipTimeResponseOutputWithContext(context.Context) AbsoluteClipTimeResponseOutput
}

// Specifies the clip time as an absolute time position in the media file.  The absolute time can point to a different position depending on whether the media file starts from a timestamp of zero or not.
type AbsoluteClipTimeResponseArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The time position on the timeline of the input media. It is usually specified as an ISO8601 period. e.g PT30S for 30 seconds.
	Time pulumi.StringInput `pulumi:"time"`
}

func (AbsoluteClipTimeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AbsoluteClipTimeResponse)(nil)).Elem()
}

func (i AbsoluteClipTimeResponseArgs) ToAbsoluteClipTimeResponseOutput() AbsoluteClipTimeResponseOutput {
	return i.ToAbsoluteClipTimeResponseOutputWithContext(context.Background())
}

func (i AbsoluteClipTimeResponseArgs) ToAbsoluteClipTimeResponseOutputWithContext(ctx context.Context) AbsoluteClipTimeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AbsoluteClipTimeResponseOutput)
}

// Specifies the clip time as an absolute time position in the media file.  The absolute time can point to a different position depending on whether the media file starts from a timestamp of zero or not.
type AbsoluteClipTimeResponseOutput struct{ *pulumi.OutputState }

func (AbsoluteClipTimeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AbsoluteClipTimeResponse)(nil)).Elem()
}

func (o AbsoluteClipTimeResponseOutput) ToAbsoluteClipTimeResponseOutput() AbsoluteClipTimeResponseOutput {
	return o
}

func (o AbsoluteClipTimeResponseOutput) ToAbsoluteClipTimeResponseOutputWithContext(ctx context.Context) AbsoluteClipTimeResponseOutput {
	return o
}

// The discriminator for derived types.
func (o AbsoluteClipTimeResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v AbsoluteClipTimeResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// The time position on the timeline of the input media. It is usually specified as an ISO8601 period. e.g PT30S for 30 seconds.
func (o AbsoluteClipTimeResponseOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v AbsoluteClipTimeResponse) string { return v.Time }).(pulumi.StringOutput)
}

type AccountEncryption struct {
	// The properties of the key used to encrypt the account.
	KeyVaultProperties *KeyVaultProperties `pulumi:"keyVaultProperties"`
	// The type of key used to encrypt the Account Key.
	Type string `pulumi:"type"`
}

// AccountEncryptionInput is an input type that accepts AccountEncryptionArgs and AccountEncryptionOutput values.
// You can construct a concrete instance of `AccountEncryptionInput` via:
//
//          AccountEncryptionArgs{...}
type AccountEncryptionInput interface {
	pulumi.Input

	ToAccountEncryptionOutput() AccountEncryptionOutput
	ToAccountEncryptionOutputWithContext(context.Context) AccountEncryptionOutput
}

type AccountEncryptionArgs struct {
	// The properties of the key used to encrypt the account.
	KeyVaultProperties KeyVaultPropertiesPtrInput `pulumi:"keyVaultProperties"`
	// The type of key used to encrypt the Account Key.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AccountEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountEncryption)(nil)).Elem()
}

func (i AccountEncryptionArgs) ToAccountEncryptionOutput() AccountEncryptionOutput {
	return i.ToAccountEncryptionOutputWithContext(context.Background())
}

func (i AccountEncryptionArgs) ToAccountEncryptionOutputWithContext(ctx context.Context) AccountEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountEncryptionOutput)
}

func (i AccountEncryptionArgs) ToAccountEncryptionPtrOutput() AccountEncryptionPtrOutput {
	return i.ToAccountEncryptionPtrOutputWithContext(context.Background())
}

func (i AccountEncryptionArgs) ToAccountEncryptionPtrOutputWithContext(ctx context.Context) AccountEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountEncryptionOutput).ToAccountEncryptionPtrOutputWithContext(ctx)
}

// AccountEncryptionPtrInput is an input type that accepts AccountEncryptionArgs, AccountEncryptionPtr and AccountEncryptionPtrOutput values.
// You can construct a concrete instance of `AccountEncryptionPtrInput` via:
//
//          AccountEncryptionArgs{...}
//
//  or:
//
//          nil
type AccountEncryptionPtrInput interface {
	pulumi.Input

	ToAccountEncryptionPtrOutput() AccountEncryptionPtrOutput
	ToAccountEncryptionPtrOutputWithContext(context.Context) AccountEncryptionPtrOutput
}

type accountEncryptionPtrType AccountEncryptionArgs

func AccountEncryptionPtr(v *AccountEncryptionArgs) AccountEncryptionPtrInput {
	return (*accountEncryptionPtrType)(v)
}

func (*accountEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountEncryption)(nil)).Elem()
}

func (i *accountEncryptionPtrType) ToAccountEncryptionPtrOutput() AccountEncryptionPtrOutput {
	return i.ToAccountEncryptionPtrOutputWithContext(context.Background())
}

func (i *accountEncryptionPtrType) ToAccountEncryptionPtrOutputWithContext(ctx context.Context) AccountEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountEncryptionPtrOutput)
}

type AccountEncryptionOutput struct{ *pulumi.OutputState }

func (AccountEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountEncryption)(nil)).Elem()
}

func (o AccountEncryptionOutput) ToAccountEncryptionOutput() AccountEncryptionOutput {
	return o
}

func (o AccountEncryptionOutput) ToAccountEncryptionOutputWithContext(ctx context.Context) AccountEncryptionOutput {
	return o
}

func (o AccountEncryptionOutput) ToAccountEncryptionPtrOutput() AccountEncryptionPtrOutput {
	return o.ToAccountEncryptionPtrOutputWithContext(context.Background())
}

func (o AccountEncryptionOutput) ToAccountEncryptionPtrOutputWithContext(ctx context.Context) AccountEncryptionPtrOutput {
	return o.ApplyT(func(v AccountEncryption) *AccountEncryption {
		return &v
	}).(AccountEncryptionPtrOutput)
}

// The properties of the key used to encrypt the account.
func (o AccountEncryptionOutput) KeyVaultProperties() KeyVaultPropertiesPtrOutput {
	return o.ApplyT(func(v AccountEncryption) *KeyVaultProperties { return v.KeyVaultProperties }).(KeyVaultPropertiesPtrOutput)
}

// The type of key used to encrypt the Account Key.
func (o AccountEncryptionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AccountEncryption) string { return v.Type }).(pulumi.StringOutput)
}

type AccountEncryptionPtrOutput struct{ *pulumi.OutputState }

func (AccountEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountEncryption)(nil)).Elem()
}

func (o AccountEncryptionPtrOutput) ToAccountEncryptionPtrOutput() AccountEncryptionPtrOutput {
	return o
}

func (o AccountEncryptionPtrOutput) ToAccountEncryptionPtrOutputWithContext(ctx context.Context) AccountEncryptionPtrOutput {
	return o
}

func (o AccountEncryptionPtrOutput) Elem() AccountEncryptionOutput {
	return o.ApplyT(func(v *AccountEncryption) AccountEncryption { return *v }).(AccountEncryptionOutput)
}

// The properties of the key used to encrypt the account.
func (o AccountEncryptionPtrOutput) KeyVaultProperties() KeyVaultPropertiesPtrOutput {
	return o.ApplyT(func(v *AccountEncryption) *KeyVaultProperties {
		if v == nil {
			return nil
		}
		return v.KeyVaultProperties
	}).(KeyVaultPropertiesPtrOutput)
}

// The type of key used to encrypt the Account Key.
func (o AccountEncryptionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type AccountEncryptionResponse struct {
	// The properties of the key used to encrypt the account.
	KeyVaultProperties *KeyVaultPropertiesResponse `pulumi:"keyVaultProperties"`
	// The type of key used to encrypt the Account Key.
	Type string `pulumi:"type"`
}

// AccountEncryptionResponseInput is an input type that accepts AccountEncryptionResponseArgs and AccountEncryptionResponseOutput values.
// You can construct a concrete instance of `AccountEncryptionResponseInput` via:
//
//          AccountEncryptionResponseArgs{...}
type AccountEncryptionResponseInput interface {
	pulumi.Input

	ToAccountEncryptionResponseOutput() AccountEncryptionResponseOutput
	ToAccountEncryptionResponseOutputWithContext(context.Context) AccountEncryptionResponseOutput
}

type AccountEncryptionResponseArgs struct {
	// The properties of the key used to encrypt the account.
	KeyVaultProperties KeyVaultPropertiesResponsePtrInput `pulumi:"keyVaultProperties"`
	// The type of key used to encrypt the Account Key.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AccountEncryptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountEncryptionResponse)(nil)).Elem()
}

func (i AccountEncryptionResponseArgs) ToAccountEncryptionResponseOutput() AccountEncryptionResponseOutput {
	return i.ToAccountEncryptionResponseOutputWithContext(context.Background())
}

func (i AccountEncryptionResponseArgs) ToAccountEncryptionResponseOutputWithContext(ctx context.Context) AccountEncryptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountEncryptionResponseOutput)
}

func (i AccountEncryptionResponseArgs) ToAccountEncryptionResponsePtrOutput() AccountEncryptionResponsePtrOutput {
	return i.ToAccountEncryptionResponsePtrOutputWithContext(context.Background())
}

func (i AccountEncryptionResponseArgs) ToAccountEncryptionResponsePtrOutputWithContext(ctx context.Context) AccountEncryptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountEncryptionResponseOutput).ToAccountEncryptionResponsePtrOutputWithContext(ctx)
}

// AccountEncryptionResponsePtrInput is an input type that accepts AccountEncryptionResponseArgs, AccountEncryptionResponsePtr and AccountEncryptionResponsePtrOutput values.
// You can construct a concrete instance of `AccountEncryptionResponsePtrInput` via:
//
//          AccountEncryptionResponseArgs{...}
//
//  or:
//
//          nil
type AccountEncryptionResponsePtrInput interface {
	pulumi.Input

	ToAccountEncryptionResponsePtrOutput() AccountEncryptionResponsePtrOutput
	ToAccountEncryptionResponsePtrOutputWithContext(context.Context) AccountEncryptionResponsePtrOutput
}

type accountEncryptionResponsePtrType AccountEncryptionResponseArgs

func AccountEncryptionResponsePtr(v *AccountEncryptionResponseArgs) AccountEncryptionResponsePtrInput {
	return (*accountEncryptionResponsePtrType)(v)
}

func (*accountEncryptionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountEncryptionResponse)(nil)).Elem()
}

func (i *accountEncryptionResponsePtrType) ToAccountEncryptionResponsePtrOutput() AccountEncryptionResponsePtrOutput {
	return i.ToAccountEncryptionResponsePtrOutputWithContext(context.Background())
}

func (i *accountEncryptionResponsePtrType) ToAccountEncryptionResponsePtrOutputWithContext(ctx context.Context) AccountEncryptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountEncryptionResponsePtrOutput)
}

type AccountEncryptionResponseOutput struct{ *pulumi.OutputState }

func (AccountEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountEncryptionResponse)(nil)).Elem()
}

func (o AccountEncryptionResponseOutput) ToAccountEncryptionResponseOutput() AccountEncryptionResponseOutput {
	return o
}

func (o AccountEncryptionResponseOutput) ToAccountEncryptionResponseOutputWithContext(ctx context.Context) AccountEncryptionResponseOutput {
	return o
}

func (o AccountEncryptionResponseOutput) ToAccountEncryptionResponsePtrOutput() AccountEncryptionResponsePtrOutput {
	return o.ToAccountEncryptionResponsePtrOutputWithContext(context.Background())
}

func (o AccountEncryptionResponseOutput) ToAccountEncryptionResponsePtrOutputWithContext(ctx context.Context) AccountEncryptionResponsePtrOutput {
	return o.ApplyT(func(v AccountEncryptionResponse) *AccountEncryptionResponse {
		return &v
	}).(AccountEncryptionResponsePtrOutput)
}

// The properties of the key used to encrypt the account.
func (o AccountEncryptionResponseOutput) KeyVaultProperties() KeyVaultPropertiesResponsePtrOutput {
	return o.ApplyT(func(v AccountEncryptionResponse) *KeyVaultPropertiesResponse { return v.KeyVaultProperties }).(KeyVaultPropertiesResponsePtrOutput)
}

// The type of key used to encrypt the Account Key.
func (o AccountEncryptionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AccountEncryptionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AccountEncryptionResponsePtrOutput struct{ *pulumi.OutputState }

func (AccountEncryptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountEncryptionResponse)(nil)).Elem()
}

func (o AccountEncryptionResponsePtrOutput) ToAccountEncryptionResponsePtrOutput() AccountEncryptionResponsePtrOutput {
	return o
}

func (o AccountEncryptionResponsePtrOutput) ToAccountEncryptionResponsePtrOutputWithContext(ctx context.Context) AccountEncryptionResponsePtrOutput {
	return o
}

func (o AccountEncryptionResponsePtrOutput) Elem() AccountEncryptionResponseOutput {
	return o.ApplyT(func(v *AccountEncryptionResponse) AccountEncryptionResponse { return *v }).(AccountEncryptionResponseOutput)
}

// The properties of the key used to encrypt the account.
func (o AccountEncryptionResponsePtrOutput) KeyVaultProperties() KeyVaultPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *AccountEncryptionResponse) *KeyVaultPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.KeyVaultProperties
	}).(KeyVaultPropertiesResponsePtrOutput)
}

// The type of key used to encrypt the Account Key.
func (o AccountEncryptionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountEncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Akamai access control
type AkamaiAccessControl struct {
	// authentication key list
	AkamaiSignatureHeaderAuthenticationKeyList []AkamaiSignatureHeaderAuthenticationKey `pulumi:"akamaiSignatureHeaderAuthenticationKeyList"`
}

// AkamaiAccessControlInput is an input type that accepts AkamaiAccessControlArgs and AkamaiAccessControlOutput values.
// You can construct a concrete instance of `AkamaiAccessControlInput` via:
//
//          AkamaiAccessControlArgs{...}
type AkamaiAccessControlInput interface {
	pulumi.Input

	ToAkamaiAccessControlOutput() AkamaiAccessControlOutput
	ToAkamaiAccessControlOutputWithContext(context.Context) AkamaiAccessControlOutput
}

// Akamai access control
type AkamaiAccessControlArgs struct {
	// authentication key list
	AkamaiSignatureHeaderAuthenticationKeyList AkamaiSignatureHeaderAuthenticationKeyArrayInput `pulumi:"akamaiSignatureHeaderAuthenticationKeyList"`
}

func (AkamaiAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiAccessControl)(nil)).Elem()
}

func (i AkamaiAccessControlArgs) ToAkamaiAccessControlOutput() AkamaiAccessControlOutput {
	return i.ToAkamaiAccessControlOutputWithContext(context.Background())
}

func (i AkamaiAccessControlArgs) ToAkamaiAccessControlOutputWithContext(ctx context.Context) AkamaiAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiAccessControlOutput)
}

func (i AkamaiAccessControlArgs) ToAkamaiAccessControlPtrOutput() AkamaiAccessControlPtrOutput {
	return i.ToAkamaiAccessControlPtrOutputWithContext(context.Background())
}

func (i AkamaiAccessControlArgs) ToAkamaiAccessControlPtrOutputWithContext(ctx context.Context) AkamaiAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiAccessControlOutput).ToAkamaiAccessControlPtrOutputWithContext(ctx)
}

// AkamaiAccessControlPtrInput is an input type that accepts AkamaiAccessControlArgs, AkamaiAccessControlPtr and AkamaiAccessControlPtrOutput values.
// You can construct a concrete instance of `AkamaiAccessControlPtrInput` via:
//
//          AkamaiAccessControlArgs{...}
//
//  or:
//
//          nil
type AkamaiAccessControlPtrInput interface {
	pulumi.Input

	ToAkamaiAccessControlPtrOutput() AkamaiAccessControlPtrOutput
	ToAkamaiAccessControlPtrOutputWithContext(context.Context) AkamaiAccessControlPtrOutput
}

type akamaiAccessControlPtrType AkamaiAccessControlArgs

func AkamaiAccessControlPtr(v *AkamaiAccessControlArgs) AkamaiAccessControlPtrInput {
	return (*akamaiAccessControlPtrType)(v)
}

func (*akamaiAccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AkamaiAccessControl)(nil)).Elem()
}

func (i *akamaiAccessControlPtrType) ToAkamaiAccessControlPtrOutput() AkamaiAccessControlPtrOutput {
	return i.ToAkamaiAccessControlPtrOutputWithContext(context.Background())
}

func (i *akamaiAccessControlPtrType) ToAkamaiAccessControlPtrOutputWithContext(ctx context.Context) AkamaiAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiAccessControlPtrOutput)
}

// Akamai access control
type AkamaiAccessControlOutput struct{ *pulumi.OutputState }

func (AkamaiAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiAccessControl)(nil)).Elem()
}

func (o AkamaiAccessControlOutput) ToAkamaiAccessControlOutput() AkamaiAccessControlOutput {
	return o
}

func (o AkamaiAccessControlOutput) ToAkamaiAccessControlOutputWithContext(ctx context.Context) AkamaiAccessControlOutput {
	return o
}

func (o AkamaiAccessControlOutput) ToAkamaiAccessControlPtrOutput() AkamaiAccessControlPtrOutput {
	return o.ToAkamaiAccessControlPtrOutputWithContext(context.Background())
}

func (o AkamaiAccessControlOutput) ToAkamaiAccessControlPtrOutputWithContext(ctx context.Context) AkamaiAccessControlPtrOutput {
	return o.ApplyT(func(v AkamaiAccessControl) *AkamaiAccessControl {
		return &v
	}).(AkamaiAccessControlPtrOutput)
}

// authentication key list
func (o AkamaiAccessControlOutput) AkamaiSignatureHeaderAuthenticationKeyList() AkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o.ApplyT(func(v AkamaiAccessControl) []AkamaiSignatureHeaderAuthenticationKey {
		return v.AkamaiSignatureHeaderAuthenticationKeyList
	}).(AkamaiSignatureHeaderAuthenticationKeyArrayOutput)
}

type AkamaiAccessControlPtrOutput struct{ *pulumi.OutputState }

func (AkamaiAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AkamaiAccessControl)(nil)).Elem()
}

func (o AkamaiAccessControlPtrOutput) ToAkamaiAccessControlPtrOutput() AkamaiAccessControlPtrOutput {
	return o
}

func (o AkamaiAccessControlPtrOutput) ToAkamaiAccessControlPtrOutputWithContext(ctx context.Context) AkamaiAccessControlPtrOutput {
	return o
}

func (o AkamaiAccessControlPtrOutput) Elem() AkamaiAccessControlOutput {
	return o.ApplyT(func(v *AkamaiAccessControl) AkamaiAccessControl { return *v }).(AkamaiAccessControlOutput)
}

// authentication key list
func (o AkamaiAccessControlPtrOutput) AkamaiSignatureHeaderAuthenticationKeyList() AkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o.ApplyT(func(v *AkamaiAccessControl) []AkamaiSignatureHeaderAuthenticationKey {
		if v == nil {
			return nil
		}
		return v.AkamaiSignatureHeaderAuthenticationKeyList
	}).(AkamaiSignatureHeaderAuthenticationKeyArrayOutput)
}

// Akamai access control
type AkamaiAccessControlResponse struct {
	// authentication key list
	AkamaiSignatureHeaderAuthenticationKeyList []AkamaiSignatureHeaderAuthenticationKeyResponse `pulumi:"akamaiSignatureHeaderAuthenticationKeyList"`
}

// AkamaiAccessControlResponseInput is an input type that accepts AkamaiAccessControlResponseArgs and AkamaiAccessControlResponseOutput values.
// You can construct a concrete instance of `AkamaiAccessControlResponseInput` via:
//
//          AkamaiAccessControlResponseArgs{...}
type AkamaiAccessControlResponseInput interface {
	pulumi.Input

	ToAkamaiAccessControlResponseOutput() AkamaiAccessControlResponseOutput
	ToAkamaiAccessControlResponseOutputWithContext(context.Context) AkamaiAccessControlResponseOutput
}

// Akamai access control
type AkamaiAccessControlResponseArgs struct {
	// authentication key list
	AkamaiSignatureHeaderAuthenticationKeyList AkamaiSignatureHeaderAuthenticationKeyResponseArrayInput `pulumi:"akamaiSignatureHeaderAuthenticationKeyList"`
}

func (AkamaiAccessControlResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiAccessControlResponse)(nil)).Elem()
}

func (i AkamaiAccessControlResponseArgs) ToAkamaiAccessControlResponseOutput() AkamaiAccessControlResponseOutput {
	return i.ToAkamaiAccessControlResponseOutputWithContext(context.Background())
}

func (i AkamaiAccessControlResponseArgs) ToAkamaiAccessControlResponseOutputWithContext(ctx context.Context) AkamaiAccessControlResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiAccessControlResponseOutput)
}

func (i AkamaiAccessControlResponseArgs) ToAkamaiAccessControlResponsePtrOutput() AkamaiAccessControlResponsePtrOutput {
	return i.ToAkamaiAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i AkamaiAccessControlResponseArgs) ToAkamaiAccessControlResponsePtrOutputWithContext(ctx context.Context) AkamaiAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiAccessControlResponseOutput).ToAkamaiAccessControlResponsePtrOutputWithContext(ctx)
}

// AkamaiAccessControlResponsePtrInput is an input type that accepts AkamaiAccessControlResponseArgs, AkamaiAccessControlResponsePtr and AkamaiAccessControlResponsePtrOutput values.
// You can construct a concrete instance of `AkamaiAccessControlResponsePtrInput` via:
//
//          AkamaiAccessControlResponseArgs{...}
//
//  or:
//
//          nil
type AkamaiAccessControlResponsePtrInput interface {
	pulumi.Input

	ToAkamaiAccessControlResponsePtrOutput() AkamaiAccessControlResponsePtrOutput
	ToAkamaiAccessControlResponsePtrOutputWithContext(context.Context) AkamaiAccessControlResponsePtrOutput
}

type akamaiAccessControlResponsePtrType AkamaiAccessControlResponseArgs

func AkamaiAccessControlResponsePtr(v *AkamaiAccessControlResponseArgs) AkamaiAccessControlResponsePtrInput {
	return (*akamaiAccessControlResponsePtrType)(v)
}

func (*akamaiAccessControlResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AkamaiAccessControlResponse)(nil)).Elem()
}

func (i *akamaiAccessControlResponsePtrType) ToAkamaiAccessControlResponsePtrOutput() AkamaiAccessControlResponsePtrOutput {
	return i.ToAkamaiAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i *akamaiAccessControlResponsePtrType) ToAkamaiAccessControlResponsePtrOutputWithContext(ctx context.Context) AkamaiAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiAccessControlResponsePtrOutput)
}

// Akamai access control
type AkamaiAccessControlResponseOutput struct{ *pulumi.OutputState }

func (AkamaiAccessControlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiAccessControlResponse)(nil)).Elem()
}

func (o AkamaiAccessControlResponseOutput) ToAkamaiAccessControlResponseOutput() AkamaiAccessControlResponseOutput {
	return o
}

func (o AkamaiAccessControlResponseOutput) ToAkamaiAccessControlResponseOutputWithContext(ctx context.Context) AkamaiAccessControlResponseOutput {
	return o
}

func (o AkamaiAccessControlResponseOutput) ToAkamaiAccessControlResponsePtrOutput() AkamaiAccessControlResponsePtrOutput {
	return o.ToAkamaiAccessControlResponsePtrOutputWithContext(context.Background())
}

func (o AkamaiAccessControlResponseOutput) ToAkamaiAccessControlResponsePtrOutputWithContext(ctx context.Context) AkamaiAccessControlResponsePtrOutput {
	return o.ApplyT(func(v AkamaiAccessControlResponse) *AkamaiAccessControlResponse {
		return &v
	}).(AkamaiAccessControlResponsePtrOutput)
}

// authentication key list
func (o AkamaiAccessControlResponseOutput) AkamaiSignatureHeaderAuthenticationKeyList() AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput {
	return o.ApplyT(func(v AkamaiAccessControlResponse) []AkamaiSignatureHeaderAuthenticationKeyResponse {
		return v.AkamaiSignatureHeaderAuthenticationKeyList
	}).(AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput)
}

type AkamaiAccessControlResponsePtrOutput struct{ *pulumi.OutputState }

func (AkamaiAccessControlResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AkamaiAccessControlResponse)(nil)).Elem()
}

func (o AkamaiAccessControlResponsePtrOutput) ToAkamaiAccessControlResponsePtrOutput() AkamaiAccessControlResponsePtrOutput {
	return o
}

func (o AkamaiAccessControlResponsePtrOutput) ToAkamaiAccessControlResponsePtrOutputWithContext(ctx context.Context) AkamaiAccessControlResponsePtrOutput {
	return o
}

func (o AkamaiAccessControlResponsePtrOutput) Elem() AkamaiAccessControlResponseOutput {
	return o.ApplyT(func(v *AkamaiAccessControlResponse) AkamaiAccessControlResponse { return *v }).(AkamaiAccessControlResponseOutput)
}

// authentication key list
func (o AkamaiAccessControlResponsePtrOutput) AkamaiSignatureHeaderAuthenticationKeyList() AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput {
	return o.ApplyT(func(v *AkamaiAccessControlResponse) []AkamaiSignatureHeaderAuthenticationKeyResponse {
		if v == nil {
			return nil
		}
		return v.AkamaiSignatureHeaderAuthenticationKeyList
	}).(AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput)
}

// Akamai Signature Header authentication key.
type AkamaiSignatureHeaderAuthenticationKey struct {
	// authentication key
	Base64Key *string `pulumi:"base64Key"`
	// The expiration time of the authentication key.
	Expiration *string `pulumi:"expiration"`
	// identifier of the key
	Identifier *string `pulumi:"identifier"`
}

// AkamaiSignatureHeaderAuthenticationKeyInput is an input type that accepts AkamaiSignatureHeaderAuthenticationKeyArgs and AkamaiSignatureHeaderAuthenticationKeyOutput values.
// You can construct a concrete instance of `AkamaiSignatureHeaderAuthenticationKeyInput` via:
//
//          AkamaiSignatureHeaderAuthenticationKeyArgs{...}
type AkamaiSignatureHeaderAuthenticationKeyInput interface {
	pulumi.Input

	ToAkamaiSignatureHeaderAuthenticationKeyOutput() AkamaiSignatureHeaderAuthenticationKeyOutput
	ToAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(context.Context) AkamaiSignatureHeaderAuthenticationKeyOutput
}

// Akamai Signature Header authentication key.
type AkamaiSignatureHeaderAuthenticationKeyArgs struct {
	// authentication key
	Base64Key pulumi.StringPtrInput `pulumi:"base64Key"`
	// The expiration time of the authentication key.
	Expiration pulumi.StringPtrInput `pulumi:"expiration"`
	// identifier of the key
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
}

func (AkamaiSignatureHeaderAuthenticationKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (i AkamaiSignatureHeaderAuthenticationKeyArgs) ToAkamaiSignatureHeaderAuthenticationKeyOutput() AkamaiSignatureHeaderAuthenticationKeyOutput {
	return i.ToAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(context.Background())
}

func (i AkamaiSignatureHeaderAuthenticationKeyArgs) ToAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiSignatureHeaderAuthenticationKeyOutput)
}

// AkamaiSignatureHeaderAuthenticationKeyArrayInput is an input type that accepts AkamaiSignatureHeaderAuthenticationKeyArray and AkamaiSignatureHeaderAuthenticationKeyArrayOutput values.
// You can construct a concrete instance of `AkamaiSignatureHeaderAuthenticationKeyArrayInput` via:
//
//          AkamaiSignatureHeaderAuthenticationKeyArray{ AkamaiSignatureHeaderAuthenticationKeyArgs{...} }
type AkamaiSignatureHeaderAuthenticationKeyArrayInput interface {
	pulumi.Input

	ToAkamaiSignatureHeaderAuthenticationKeyArrayOutput() AkamaiSignatureHeaderAuthenticationKeyArrayOutput
	ToAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(context.Context) AkamaiSignatureHeaderAuthenticationKeyArrayOutput
}

type AkamaiSignatureHeaderAuthenticationKeyArray []AkamaiSignatureHeaderAuthenticationKeyInput

func (AkamaiSignatureHeaderAuthenticationKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (i AkamaiSignatureHeaderAuthenticationKeyArray) ToAkamaiSignatureHeaderAuthenticationKeyArrayOutput() AkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return i.ToAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(context.Background())
}

func (i AkamaiSignatureHeaderAuthenticationKeyArray) ToAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiSignatureHeaderAuthenticationKeyArrayOutput)
}

// Akamai Signature Header authentication key.
type AkamaiSignatureHeaderAuthenticationKeyOutput struct{ *pulumi.OutputState }

func (AkamaiSignatureHeaderAuthenticationKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (o AkamaiSignatureHeaderAuthenticationKeyOutput) ToAkamaiSignatureHeaderAuthenticationKeyOutput() AkamaiSignatureHeaderAuthenticationKeyOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyOutput) ToAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyOutput {
	return o
}

// authentication key
func (o AkamaiSignatureHeaderAuthenticationKeyOutput) Base64Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AkamaiSignatureHeaderAuthenticationKey) *string { return v.Base64Key }).(pulumi.StringPtrOutput)
}

// The expiration time of the authentication key.
func (o AkamaiSignatureHeaderAuthenticationKeyOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AkamaiSignatureHeaderAuthenticationKey) *string { return v.Expiration }).(pulumi.StringPtrOutput)
}

// identifier of the key
func (o AkamaiSignatureHeaderAuthenticationKeyOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AkamaiSignatureHeaderAuthenticationKey) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

type AkamaiSignatureHeaderAuthenticationKeyArrayOutput struct{ *pulumi.OutputState }

func (AkamaiSignatureHeaderAuthenticationKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (o AkamaiSignatureHeaderAuthenticationKeyArrayOutput) ToAkamaiSignatureHeaderAuthenticationKeyArrayOutput() AkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyArrayOutput) ToAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyArrayOutput) Index(i pulumi.IntInput) AkamaiSignatureHeaderAuthenticationKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AkamaiSignatureHeaderAuthenticationKey {
		return vs[0].([]AkamaiSignatureHeaderAuthenticationKey)[vs[1].(int)]
	}).(AkamaiSignatureHeaderAuthenticationKeyOutput)
}

// Akamai Signature Header authentication key.
type AkamaiSignatureHeaderAuthenticationKeyResponse struct {
	// authentication key
	Base64Key *string `pulumi:"base64Key"`
	// The expiration time of the authentication key.
	Expiration *string `pulumi:"expiration"`
	// identifier of the key
	Identifier *string `pulumi:"identifier"`
}

// AkamaiSignatureHeaderAuthenticationKeyResponseInput is an input type that accepts AkamaiSignatureHeaderAuthenticationKeyResponseArgs and AkamaiSignatureHeaderAuthenticationKeyResponseOutput values.
// You can construct a concrete instance of `AkamaiSignatureHeaderAuthenticationKeyResponseInput` via:
//
//          AkamaiSignatureHeaderAuthenticationKeyResponseArgs{...}
type AkamaiSignatureHeaderAuthenticationKeyResponseInput interface {
	pulumi.Input

	ToAkamaiSignatureHeaderAuthenticationKeyResponseOutput() AkamaiSignatureHeaderAuthenticationKeyResponseOutput
	ToAkamaiSignatureHeaderAuthenticationKeyResponseOutputWithContext(context.Context) AkamaiSignatureHeaderAuthenticationKeyResponseOutput
}

// Akamai Signature Header authentication key.
type AkamaiSignatureHeaderAuthenticationKeyResponseArgs struct {
	// authentication key
	Base64Key pulumi.StringPtrInput `pulumi:"base64Key"`
	// The expiration time of the authentication key.
	Expiration pulumi.StringPtrInput `pulumi:"expiration"`
	// identifier of the key
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
}

func (AkamaiSignatureHeaderAuthenticationKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiSignatureHeaderAuthenticationKeyResponse)(nil)).Elem()
}

func (i AkamaiSignatureHeaderAuthenticationKeyResponseArgs) ToAkamaiSignatureHeaderAuthenticationKeyResponseOutput() AkamaiSignatureHeaderAuthenticationKeyResponseOutput {
	return i.ToAkamaiSignatureHeaderAuthenticationKeyResponseOutputWithContext(context.Background())
}

func (i AkamaiSignatureHeaderAuthenticationKeyResponseArgs) ToAkamaiSignatureHeaderAuthenticationKeyResponseOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiSignatureHeaderAuthenticationKeyResponseOutput)
}

// AkamaiSignatureHeaderAuthenticationKeyResponseArrayInput is an input type that accepts AkamaiSignatureHeaderAuthenticationKeyResponseArray and AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput values.
// You can construct a concrete instance of `AkamaiSignatureHeaderAuthenticationKeyResponseArrayInput` via:
//
//          AkamaiSignatureHeaderAuthenticationKeyResponseArray{ AkamaiSignatureHeaderAuthenticationKeyResponseArgs{...} }
type AkamaiSignatureHeaderAuthenticationKeyResponseArrayInput interface {
	pulumi.Input

	ToAkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput() AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput
	ToAkamaiSignatureHeaderAuthenticationKeyResponseArrayOutputWithContext(context.Context) AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput
}

type AkamaiSignatureHeaderAuthenticationKeyResponseArray []AkamaiSignatureHeaderAuthenticationKeyResponseInput

func (AkamaiSignatureHeaderAuthenticationKeyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AkamaiSignatureHeaderAuthenticationKeyResponse)(nil)).Elem()
}

func (i AkamaiSignatureHeaderAuthenticationKeyResponseArray) ToAkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput() AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput {
	return i.ToAkamaiSignatureHeaderAuthenticationKeyResponseArrayOutputWithContext(context.Background())
}

func (i AkamaiSignatureHeaderAuthenticationKeyResponseArray) ToAkamaiSignatureHeaderAuthenticationKeyResponseArrayOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput)
}

// Akamai Signature Header authentication key.
type AkamaiSignatureHeaderAuthenticationKeyResponseOutput struct{ *pulumi.OutputState }

func (AkamaiSignatureHeaderAuthenticationKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiSignatureHeaderAuthenticationKeyResponse)(nil)).Elem()
}

func (o AkamaiSignatureHeaderAuthenticationKeyResponseOutput) ToAkamaiSignatureHeaderAuthenticationKeyResponseOutput() AkamaiSignatureHeaderAuthenticationKeyResponseOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyResponseOutput) ToAkamaiSignatureHeaderAuthenticationKeyResponseOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyResponseOutput {
	return o
}

// authentication key
func (o AkamaiSignatureHeaderAuthenticationKeyResponseOutput) Base64Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AkamaiSignatureHeaderAuthenticationKeyResponse) *string { return v.Base64Key }).(pulumi.StringPtrOutput)
}

// The expiration time of the authentication key.
func (o AkamaiSignatureHeaderAuthenticationKeyResponseOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AkamaiSignatureHeaderAuthenticationKeyResponse) *string { return v.Expiration }).(pulumi.StringPtrOutput)
}

// identifier of the key
func (o AkamaiSignatureHeaderAuthenticationKeyResponseOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AkamaiSignatureHeaderAuthenticationKeyResponse) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

type AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AkamaiSignatureHeaderAuthenticationKeyResponse)(nil)).Elem()
}

func (o AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput) ToAkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput() AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput) ToAkamaiSignatureHeaderAuthenticationKeyResponseArrayOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput) Index(i pulumi.IntInput) AkamaiSignatureHeaderAuthenticationKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AkamaiSignatureHeaderAuthenticationKeyResponse {
		return vs[0].([]AkamaiSignatureHeaderAuthenticationKeyResponse)[vs[1].(int)]
	}).(AkamaiSignatureHeaderAuthenticationKeyResponseOutput)
}

// The Asset File Storage encryption metadata.
type AssetFileEncryptionMetadataResponse struct {
	// The Asset File Id.
	AssetFileId string `pulumi:"assetFileId"`
	// The Asset File name.
	AssetFileName *string `pulumi:"assetFileName"`
	// The Asset File initialization vector.
	InitializationVector *string `pulumi:"initializationVector"`
}

// AssetFileEncryptionMetadataResponseInput is an input type that accepts AssetFileEncryptionMetadataResponseArgs and AssetFileEncryptionMetadataResponseOutput values.
// You can construct a concrete instance of `AssetFileEncryptionMetadataResponseInput` via:
//
//          AssetFileEncryptionMetadataResponseArgs{...}
type AssetFileEncryptionMetadataResponseInput interface {
	pulumi.Input

	ToAssetFileEncryptionMetadataResponseOutput() AssetFileEncryptionMetadataResponseOutput
	ToAssetFileEncryptionMetadataResponseOutputWithContext(context.Context) AssetFileEncryptionMetadataResponseOutput
}

// The Asset File Storage encryption metadata.
type AssetFileEncryptionMetadataResponseArgs struct {
	// The Asset File Id.
	AssetFileId pulumi.StringInput `pulumi:"assetFileId"`
	// The Asset File name.
	AssetFileName pulumi.StringPtrInput `pulumi:"assetFileName"`
	// The Asset File initialization vector.
	InitializationVector pulumi.StringPtrInput `pulumi:"initializationVector"`
}

func (AssetFileEncryptionMetadataResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetFileEncryptionMetadataResponse)(nil)).Elem()
}

func (i AssetFileEncryptionMetadataResponseArgs) ToAssetFileEncryptionMetadataResponseOutput() AssetFileEncryptionMetadataResponseOutput {
	return i.ToAssetFileEncryptionMetadataResponseOutputWithContext(context.Background())
}

func (i AssetFileEncryptionMetadataResponseArgs) ToAssetFileEncryptionMetadataResponseOutputWithContext(ctx context.Context) AssetFileEncryptionMetadataResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetFileEncryptionMetadataResponseOutput)
}

// AssetFileEncryptionMetadataResponseArrayInput is an input type that accepts AssetFileEncryptionMetadataResponseArray and AssetFileEncryptionMetadataResponseArrayOutput values.
// You can construct a concrete instance of `AssetFileEncryptionMetadataResponseArrayInput` via:
//
//          AssetFileEncryptionMetadataResponseArray{ AssetFileEncryptionMetadataResponseArgs{...} }
type AssetFileEncryptionMetadataResponseArrayInput interface {
	pulumi.Input

	ToAssetFileEncryptionMetadataResponseArrayOutput() AssetFileEncryptionMetadataResponseArrayOutput
	ToAssetFileEncryptionMetadataResponseArrayOutputWithContext(context.Context) AssetFileEncryptionMetadataResponseArrayOutput
}

type AssetFileEncryptionMetadataResponseArray []AssetFileEncryptionMetadataResponseInput

func (AssetFileEncryptionMetadataResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetFileEncryptionMetadataResponse)(nil)).Elem()
}

func (i AssetFileEncryptionMetadataResponseArray) ToAssetFileEncryptionMetadataResponseArrayOutput() AssetFileEncryptionMetadataResponseArrayOutput {
	return i.ToAssetFileEncryptionMetadataResponseArrayOutputWithContext(context.Background())
}

func (i AssetFileEncryptionMetadataResponseArray) ToAssetFileEncryptionMetadataResponseArrayOutputWithContext(ctx context.Context) AssetFileEncryptionMetadataResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetFileEncryptionMetadataResponseArrayOutput)
}

// The Asset File Storage encryption metadata.
type AssetFileEncryptionMetadataResponseOutput struct{ *pulumi.OutputState }

func (AssetFileEncryptionMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetFileEncryptionMetadataResponse)(nil)).Elem()
}

func (o AssetFileEncryptionMetadataResponseOutput) ToAssetFileEncryptionMetadataResponseOutput() AssetFileEncryptionMetadataResponseOutput {
	return o
}

func (o AssetFileEncryptionMetadataResponseOutput) ToAssetFileEncryptionMetadataResponseOutputWithContext(ctx context.Context) AssetFileEncryptionMetadataResponseOutput {
	return o
}

// The Asset File Id.
func (o AssetFileEncryptionMetadataResponseOutput) AssetFileId() pulumi.StringOutput {
	return o.ApplyT(func(v AssetFileEncryptionMetadataResponse) string { return v.AssetFileId }).(pulumi.StringOutput)
}

// The Asset File name.
func (o AssetFileEncryptionMetadataResponseOutput) AssetFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssetFileEncryptionMetadataResponse) *string { return v.AssetFileName }).(pulumi.StringPtrOutput)
}

// The Asset File initialization vector.
func (o AssetFileEncryptionMetadataResponseOutput) InitializationVector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssetFileEncryptionMetadataResponse) *string { return v.InitializationVector }).(pulumi.StringPtrOutput)
}

type AssetFileEncryptionMetadataResponseArrayOutput struct{ *pulumi.OutputState }

func (AssetFileEncryptionMetadataResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetFileEncryptionMetadataResponse)(nil)).Elem()
}

func (o AssetFileEncryptionMetadataResponseArrayOutput) ToAssetFileEncryptionMetadataResponseArrayOutput() AssetFileEncryptionMetadataResponseArrayOutput {
	return o
}

func (o AssetFileEncryptionMetadataResponseArrayOutput) ToAssetFileEncryptionMetadataResponseArrayOutputWithContext(ctx context.Context) AssetFileEncryptionMetadataResponseArrayOutput {
	return o
}

func (o AssetFileEncryptionMetadataResponseArrayOutput) Index(i pulumi.IntInput) AssetFileEncryptionMetadataResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssetFileEncryptionMetadataResponse {
		return vs[0].([]AssetFileEncryptionMetadataResponse)[vs[1].(int)]
	}).(AssetFileEncryptionMetadataResponseOutput)
}

// Properties of the Streaming Locator.
type AssetStreamingLocatorResponse struct {
	// Asset Name.
	AssetName string `pulumi:"assetName"`
	// The creation time of the Streaming Locator.
	Created string `pulumi:"created"`
	// Name of the default ContentKeyPolicy used by this Streaming Locator.
	DefaultContentKeyPolicyName string `pulumi:"defaultContentKeyPolicyName"`
	// The end time of the Streaming Locator.
	EndTime string `pulumi:"endTime"`
	// Streaming Locator name.
	Name string `pulumi:"name"`
	// The start time of the Streaming Locator.
	StartTime string `pulumi:"startTime"`
	// StreamingLocatorId of the Streaming Locator.
	StreamingLocatorId string `pulumi:"streamingLocatorId"`
	// Name of the Streaming Policy used by this Streaming Locator.
	StreamingPolicyName string `pulumi:"streamingPolicyName"`
}

// AssetStreamingLocatorResponseInput is an input type that accepts AssetStreamingLocatorResponseArgs and AssetStreamingLocatorResponseOutput values.
// You can construct a concrete instance of `AssetStreamingLocatorResponseInput` via:
//
//          AssetStreamingLocatorResponseArgs{...}
type AssetStreamingLocatorResponseInput interface {
	pulumi.Input

	ToAssetStreamingLocatorResponseOutput() AssetStreamingLocatorResponseOutput
	ToAssetStreamingLocatorResponseOutputWithContext(context.Context) AssetStreamingLocatorResponseOutput
}

// Properties of the Streaming Locator.
type AssetStreamingLocatorResponseArgs struct {
	// Asset Name.
	AssetName pulumi.StringInput `pulumi:"assetName"`
	// The creation time of the Streaming Locator.
	Created pulumi.StringInput `pulumi:"created"`
	// Name of the default ContentKeyPolicy used by this Streaming Locator.
	DefaultContentKeyPolicyName pulumi.StringInput `pulumi:"defaultContentKeyPolicyName"`
	// The end time of the Streaming Locator.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// Streaming Locator name.
	Name pulumi.StringInput `pulumi:"name"`
	// The start time of the Streaming Locator.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// StreamingLocatorId of the Streaming Locator.
	StreamingLocatorId pulumi.StringInput `pulumi:"streamingLocatorId"`
	// Name of the Streaming Policy used by this Streaming Locator.
	StreamingPolicyName pulumi.StringInput `pulumi:"streamingPolicyName"`
}

func (AssetStreamingLocatorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetStreamingLocatorResponse)(nil)).Elem()
}

func (i AssetStreamingLocatorResponseArgs) ToAssetStreamingLocatorResponseOutput() AssetStreamingLocatorResponseOutput {
	return i.ToAssetStreamingLocatorResponseOutputWithContext(context.Background())
}

func (i AssetStreamingLocatorResponseArgs) ToAssetStreamingLocatorResponseOutputWithContext(ctx context.Context) AssetStreamingLocatorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetStreamingLocatorResponseOutput)
}

// AssetStreamingLocatorResponseArrayInput is an input type that accepts AssetStreamingLocatorResponseArray and AssetStreamingLocatorResponseArrayOutput values.
// You can construct a concrete instance of `AssetStreamingLocatorResponseArrayInput` via:
//
//          AssetStreamingLocatorResponseArray{ AssetStreamingLocatorResponseArgs{...} }
type AssetStreamingLocatorResponseArrayInput interface {
	pulumi.Input

	ToAssetStreamingLocatorResponseArrayOutput() AssetStreamingLocatorResponseArrayOutput
	ToAssetStreamingLocatorResponseArrayOutputWithContext(context.Context) AssetStreamingLocatorResponseArrayOutput
}

type AssetStreamingLocatorResponseArray []AssetStreamingLocatorResponseInput

func (AssetStreamingLocatorResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetStreamingLocatorResponse)(nil)).Elem()
}

func (i AssetStreamingLocatorResponseArray) ToAssetStreamingLocatorResponseArrayOutput() AssetStreamingLocatorResponseArrayOutput {
	return i.ToAssetStreamingLocatorResponseArrayOutputWithContext(context.Background())
}

func (i AssetStreamingLocatorResponseArray) ToAssetStreamingLocatorResponseArrayOutputWithContext(ctx context.Context) AssetStreamingLocatorResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetStreamingLocatorResponseArrayOutput)
}

// Properties of the Streaming Locator.
type AssetStreamingLocatorResponseOutput struct{ *pulumi.OutputState }

func (AssetStreamingLocatorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetStreamingLocatorResponse)(nil)).Elem()
}

func (o AssetStreamingLocatorResponseOutput) ToAssetStreamingLocatorResponseOutput() AssetStreamingLocatorResponseOutput {
	return o
}

func (o AssetStreamingLocatorResponseOutput) ToAssetStreamingLocatorResponseOutputWithContext(ctx context.Context) AssetStreamingLocatorResponseOutput {
	return o
}

// Asset Name.
func (o AssetStreamingLocatorResponseOutput) AssetName() pulumi.StringOutput {
	return o.ApplyT(func(v AssetStreamingLocatorResponse) string { return v.AssetName }).(pulumi.StringOutput)
}

// The creation time of the Streaming Locator.
func (o AssetStreamingLocatorResponseOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v AssetStreamingLocatorResponse) string { return v.Created }).(pulumi.StringOutput)
}

// Name of the default ContentKeyPolicy used by this Streaming Locator.
func (o AssetStreamingLocatorResponseOutput) DefaultContentKeyPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v AssetStreamingLocatorResponse) string { return v.DefaultContentKeyPolicyName }).(pulumi.StringOutput)
}

// The end time of the Streaming Locator.
func (o AssetStreamingLocatorResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v AssetStreamingLocatorResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Streaming Locator name.
func (o AssetStreamingLocatorResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AssetStreamingLocatorResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The start time of the Streaming Locator.
func (o AssetStreamingLocatorResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v AssetStreamingLocatorResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// StreamingLocatorId of the Streaming Locator.
func (o AssetStreamingLocatorResponseOutput) StreamingLocatorId() pulumi.StringOutput {
	return o.ApplyT(func(v AssetStreamingLocatorResponse) string { return v.StreamingLocatorId }).(pulumi.StringOutput)
}

// Name of the Streaming Policy used by this Streaming Locator.
func (o AssetStreamingLocatorResponseOutput) StreamingPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v AssetStreamingLocatorResponse) string { return v.StreamingPolicyName }).(pulumi.StringOutput)
}

type AssetStreamingLocatorResponseArrayOutput struct{ *pulumi.OutputState }

func (AssetStreamingLocatorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetStreamingLocatorResponse)(nil)).Elem()
}

func (o AssetStreamingLocatorResponseArrayOutput) ToAssetStreamingLocatorResponseArrayOutput() AssetStreamingLocatorResponseArrayOutput {
	return o
}

func (o AssetStreamingLocatorResponseArrayOutput) ToAssetStreamingLocatorResponseArrayOutputWithContext(ctx context.Context) AssetStreamingLocatorResponseArrayOutput {
	return o
}

func (o AssetStreamingLocatorResponseArrayOutput) Index(i pulumi.IntInput) AssetStreamingLocatorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssetStreamingLocatorResponse {
		return vs[0].([]AssetStreamingLocatorResponse)[vs[1].(int)]
	}).(AssetStreamingLocatorResponseOutput)
}

// Defines the common properties for all audio codecs.
type Audio struct {
	// The bitrate, in bits per second, of the output encoded audio.
	Bitrate *int `pulumi:"bitrate"`
	// The number of channels in the audio.
	Channels *int `pulumi:"channels"`
	// An optional label for the codec. The label can be used to control muxing behavior.
	Label *string `pulumi:"label"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The sampling rate to use for encoding in hertz.
	SamplingRate *int `pulumi:"samplingRate"`
}

// AudioInput is an input type that accepts AudioArgs and AudioOutput values.
// You can construct a concrete instance of `AudioInput` via:
//
//          AudioArgs{...}
type AudioInput interface {
	pulumi.Input

	ToAudioOutput() AudioOutput
	ToAudioOutputWithContext(context.Context) AudioOutput
}

// Defines the common properties for all audio codecs.
type AudioArgs struct {
	// The bitrate, in bits per second, of the output encoded audio.
	Bitrate pulumi.IntPtrInput `pulumi:"bitrate"`
	// The number of channels in the audio.
	Channels pulumi.IntPtrInput `pulumi:"channels"`
	// An optional label for the codec. The label can be used to control muxing behavior.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The sampling rate to use for encoding in hertz.
	SamplingRate pulumi.IntPtrInput `pulumi:"samplingRate"`
}

func (AudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Audio)(nil)).Elem()
}

func (i AudioArgs) ToAudioOutput() AudioOutput {
	return i.ToAudioOutputWithContext(context.Background())
}

func (i AudioArgs) ToAudioOutputWithContext(ctx context.Context) AudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioOutput)
}

// Defines the common properties for all audio codecs.
type AudioOutput struct{ *pulumi.OutputState }

func (AudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Audio)(nil)).Elem()
}

func (o AudioOutput) ToAudioOutput() AudioOutput {
	return o
}

func (o AudioOutput) ToAudioOutputWithContext(ctx context.Context) AudioOutput {
	return o
}

// The bitrate, in bits per second, of the output encoded audio.
func (o AudioOutput) Bitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Audio) *int { return v.Bitrate }).(pulumi.IntPtrOutput)
}

// The number of channels in the audio.
func (o AudioOutput) Channels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Audio) *int { return v.Channels }).(pulumi.IntPtrOutput)
}

// An optional label for the codec. The label can be used to control muxing behavior.
func (o AudioOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Audio) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The discriminator for derived types.
func (o AudioOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v Audio) string { return v.OdataType }).(pulumi.StringOutput)
}

// The sampling rate to use for encoding in hertz.
func (o AudioOutput) SamplingRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Audio) *int { return v.SamplingRate }).(pulumi.IntPtrOutput)
}

// The Audio Analyzer preset applies a pre-defined set of AI-based analysis operations, including speech transcription. Currently, the preset supports processing of content with a single audio track.
type AudioAnalyzerPreset struct {
	// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US').  If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode::Basic, since automatic language detection is not included in basic mode. If the language isn't specified or set to null, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'." The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463
	AudioLanguage *string `pulumi:"audioLanguage"`
	// Dictionary containing key value pairs for parameters not exposed in the preset itself
	ExperimentalOptions map[string]string `pulumi:"experimentalOptions"`
	// Determines the set of audio analysis operations to be performed. If unspecified, the Standard AudioAnalysisMode would be chosen.
	Mode *string `pulumi:"mode"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// AudioAnalyzerPresetInput is an input type that accepts AudioAnalyzerPresetArgs and AudioAnalyzerPresetOutput values.
// You can construct a concrete instance of `AudioAnalyzerPresetInput` via:
//
//          AudioAnalyzerPresetArgs{...}
type AudioAnalyzerPresetInput interface {
	pulumi.Input

	ToAudioAnalyzerPresetOutput() AudioAnalyzerPresetOutput
	ToAudioAnalyzerPresetOutputWithContext(context.Context) AudioAnalyzerPresetOutput
}

// The Audio Analyzer preset applies a pre-defined set of AI-based analysis operations, including speech transcription. Currently, the preset supports processing of content with a single audio track.
type AudioAnalyzerPresetArgs struct {
	// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US').  If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode::Basic, since automatic language detection is not included in basic mode. If the language isn't specified or set to null, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'." The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463
	AudioLanguage pulumi.StringPtrInput `pulumi:"audioLanguage"`
	// Dictionary containing key value pairs for parameters not exposed in the preset itself
	ExperimentalOptions pulumi.StringMapInput `pulumi:"experimentalOptions"`
	// Determines the set of audio analysis operations to be performed. If unspecified, the Standard AudioAnalysisMode would be chosen.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (AudioAnalyzerPresetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioAnalyzerPreset)(nil)).Elem()
}

func (i AudioAnalyzerPresetArgs) ToAudioAnalyzerPresetOutput() AudioAnalyzerPresetOutput {
	return i.ToAudioAnalyzerPresetOutputWithContext(context.Background())
}

func (i AudioAnalyzerPresetArgs) ToAudioAnalyzerPresetOutputWithContext(ctx context.Context) AudioAnalyzerPresetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioAnalyzerPresetOutput)
}

// The Audio Analyzer preset applies a pre-defined set of AI-based analysis operations, including speech transcription. Currently, the preset supports processing of content with a single audio track.
type AudioAnalyzerPresetOutput struct{ *pulumi.OutputState }

func (AudioAnalyzerPresetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioAnalyzerPreset)(nil)).Elem()
}

func (o AudioAnalyzerPresetOutput) ToAudioAnalyzerPresetOutput() AudioAnalyzerPresetOutput {
	return o
}

func (o AudioAnalyzerPresetOutput) ToAudioAnalyzerPresetOutputWithContext(ctx context.Context) AudioAnalyzerPresetOutput {
	return o
}

// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US').  If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode::Basic, since automatic language detection is not included in basic mode. If the language isn't specified or set to null, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'." The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463
func (o AudioAnalyzerPresetOutput) AudioLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AudioAnalyzerPreset) *string { return v.AudioLanguage }).(pulumi.StringPtrOutput)
}

// Dictionary containing key value pairs for parameters not exposed in the preset itself
func (o AudioAnalyzerPresetOutput) ExperimentalOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v AudioAnalyzerPreset) map[string]string { return v.ExperimentalOptions }).(pulumi.StringMapOutput)
}

// Determines the set of audio analysis operations to be performed. If unspecified, the Standard AudioAnalysisMode would be chosen.
func (o AudioAnalyzerPresetOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AudioAnalyzerPreset) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The discriminator for derived types.
func (o AudioAnalyzerPresetOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v AudioAnalyzerPreset) string { return v.OdataType }).(pulumi.StringOutput)
}

// The Audio Analyzer preset applies a pre-defined set of AI-based analysis operations, including speech transcription. Currently, the preset supports processing of content with a single audio track.
type AudioAnalyzerPresetResponse struct {
	// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US').  If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode::Basic, since automatic language detection is not included in basic mode. If the language isn't specified or set to null, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'." The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463
	AudioLanguage *string `pulumi:"audioLanguage"`
	// Dictionary containing key value pairs for parameters not exposed in the preset itself
	ExperimentalOptions map[string]string `pulumi:"experimentalOptions"`
	// Determines the set of audio analysis operations to be performed. If unspecified, the Standard AudioAnalysisMode would be chosen.
	Mode *string `pulumi:"mode"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// AudioAnalyzerPresetResponseInput is an input type that accepts AudioAnalyzerPresetResponseArgs and AudioAnalyzerPresetResponseOutput values.
// You can construct a concrete instance of `AudioAnalyzerPresetResponseInput` via:
//
//          AudioAnalyzerPresetResponseArgs{...}
type AudioAnalyzerPresetResponseInput interface {
	pulumi.Input

	ToAudioAnalyzerPresetResponseOutput() AudioAnalyzerPresetResponseOutput
	ToAudioAnalyzerPresetResponseOutputWithContext(context.Context) AudioAnalyzerPresetResponseOutput
}

// The Audio Analyzer preset applies a pre-defined set of AI-based analysis operations, including speech transcription. Currently, the preset supports processing of content with a single audio track.
type AudioAnalyzerPresetResponseArgs struct {
	// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US').  If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode::Basic, since automatic language detection is not included in basic mode. If the language isn't specified or set to null, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'." The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463
	AudioLanguage pulumi.StringPtrInput `pulumi:"audioLanguage"`
	// Dictionary containing key value pairs for parameters not exposed in the preset itself
	ExperimentalOptions pulumi.StringMapInput `pulumi:"experimentalOptions"`
	// Determines the set of audio analysis operations to be performed. If unspecified, the Standard AudioAnalysisMode would be chosen.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (AudioAnalyzerPresetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioAnalyzerPresetResponse)(nil)).Elem()
}

func (i AudioAnalyzerPresetResponseArgs) ToAudioAnalyzerPresetResponseOutput() AudioAnalyzerPresetResponseOutput {
	return i.ToAudioAnalyzerPresetResponseOutputWithContext(context.Background())
}

func (i AudioAnalyzerPresetResponseArgs) ToAudioAnalyzerPresetResponseOutputWithContext(ctx context.Context) AudioAnalyzerPresetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioAnalyzerPresetResponseOutput)
}

// The Audio Analyzer preset applies a pre-defined set of AI-based analysis operations, including speech transcription. Currently, the preset supports processing of content with a single audio track.
type AudioAnalyzerPresetResponseOutput struct{ *pulumi.OutputState }

func (AudioAnalyzerPresetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioAnalyzerPresetResponse)(nil)).Elem()
}

func (o AudioAnalyzerPresetResponseOutput) ToAudioAnalyzerPresetResponseOutput() AudioAnalyzerPresetResponseOutput {
	return o
}

func (o AudioAnalyzerPresetResponseOutput) ToAudioAnalyzerPresetResponseOutputWithContext(ctx context.Context) AudioAnalyzerPresetResponseOutput {
	return o
}

// The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US').  If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode::Basic, since automatic language detection is not included in basic mode. If the language isn't specified or set to null, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'." The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463
func (o AudioAnalyzerPresetResponseOutput) AudioLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AudioAnalyzerPresetResponse) *string { return v.AudioLanguage }).(pulumi.StringPtrOutput)
}

// Dictionary containing key value pairs for parameters not exposed in the preset itself
func (o AudioAnalyzerPresetResponseOutput) ExperimentalOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v AudioAnalyzerPresetResponse) map[string]string { return v.ExperimentalOptions }).(pulumi.StringMapOutput)
}

// Determines the set of audio analysis operations to be performed. If unspecified, the Standard AudioAnalysisMode would be chosen.
func (o AudioAnalyzerPresetResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AudioAnalyzerPresetResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The discriminator for derived types.
func (o AudioAnalyzerPresetResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v AudioAnalyzerPresetResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Describes the properties of an audio overlay.
type AudioOverlay struct {
	// The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0.
	AudioGainLevel *float64 `pulumi:"audioGainLevel"`
	// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
	End *string `pulumi:"end"`
	// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
	FadeInDuration *string `pulumi:"fadeInDuration"`
	// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
	FadeOutDuration *string `pulumi:"fadeOutDuration"`
	// The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG or PNG formats, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats.
	InputLabel string `pulumi:"inputLabel"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	Start *string `pulumi:"start"`
}

// AudioOverlayInput is an input type that accepts AudioOverlayArgs and AudioOverlayOutput values.
// You can construct a concrete instance of `AudioOverlayInput` via:
//
//          AudioOverlayArgs{...}
type AudioOverlayInput interface {
	pulumi.Input

	ToAudioOverlayOutput() AudioOverlayOutput
	ToAudioOverlayOutputWithContext(context.Context) AudioOverlayOutput
}

// Describes the properties of an audio overlay.
type AudioOverlayArgs struct {
	// The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0.
	AudioGainLevel pulumi.Float64PtrInput `pulumi:"audioGainLevel"`
	// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
	End pulumi.StringPtrInput `pulumi:"end"`
	// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
	FadeInDuration pulumi.StringPtrInput `pulumi:"fadeInDuration"`
	// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
	FadeOutDuration pulumi.StringPtrInput `pulumi:"fadeOutDuration"`
	// The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG or PNG formats, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats.
	InputLabel pulumi.StringInput `pulumi:"inputLabel"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	Start pulumi.StringPtrInput `pulumi:"start"`
}

func (AudioOverlayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioOverlay)(nil)).Elem()
}

func (i AudioOverlayArgs) ToAudioOverlayOutput() AudioOverlayOutput {
	return i.ToAudioOverlayOutputWithContext(context.Background())
}

func (i AudioOverlayArgs) ToAudioOverlayOutputWithContext(ctx context.Context) AudioOverlayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioOverlayOutput)
}

// Describes the properties of an audio overlay.
type AudioOverlayOutput struct{ *pulumi.OutputState }

func (AudioOverlayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioOverlay)(nil)).Elem()
}

func (o AudioOverlayOutput) ToAudioOverlayOutput() AudioOverlayOutput {
	return o
}

func (o AudioOverlayOutput) ToAudioOverlayOutputWithContext(ctx context.Context) AudioOverlayOutput {
	return o
}

// The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0.
func (o AudioOverlayOutput) AudioGainLevel() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AudioOverlay) *float64 { return v.AudioGainLevel }).(pulumi.Float64PtrOutput)
}

// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
func (o AudioOverlayOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AudioOverlay) *string { return v.End }).(pulumi.StringPtrOutput)
}

// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
func (o AudioOverlayOutput) FadeInDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AudioOverlay) *string { return v.FadeInDuration }).(pulumi.StringPtrOutput)
}

// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
func (o AudioOverlayOutput) FadeOutDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AudioOverlay) *string { return v.FadeOutDuration }).(pulumi.StringPtrOutput)
}

// The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG or PNG formats, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats.
func (o AudioOverlayOutput) InputLabel() pulumi.StringOutput {
	return o.ApplyT(func(v AudioOverlay) string { return v.InputLabel }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o AudioOverlayOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v AudioOverlay) string { return v.OdataType }).(pulumi.StringOutput)
}

// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
func (o AudioOverlayOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AudioOverlay) *string { return v.Start }).(pulumi.StringPtrOutput)
}

// Describes the properties of an audio overlay.
type AudioOverlayResponse struct {
	// The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0.
	AudioGainLevel *float64 `pulumi:"audioGainLevel"`
	// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
	End *string `pulumi:"end"`
	// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
	FadeInDuration *string `pulumi:"fadeInDuration"`
	// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
	FadeOutDuration *string `pulumi:"fadeOutDuration"`
	// The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG or PNG formats, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats.
	InputLabel string `pulumi:"inputLabel"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	Start *string `pulumi:"start"`
}

// AudioOverlayResponseInput is an input type that accepts AudioOverlayResponseArgs and AudioOverlayResponseOutput values.
// You can construct a concrete instance of `AudioOverlayResponseInput` via:
//
//          AudioOverlayResponseArgs{...}
type AudioOverlayResponseInput interface {
	pulumi.Input

	ToAudioOverlayResponseOutput() AudioOverlayResponseOutput
	ToAudioOverlayResponseOutputWithContext(context.Context) AudioOverlayResponseOutput
}

// Describes the properties of an audio overlay.
type AudioOverlayResponseArgs struct {
	// The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0.
	AudioGainLevel pulumi.Float64PtrInput `pulumi:"audioGainLevel"`
	// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
	End pulumi.StringPtrInput `pulumi:"end"`
	// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
	FadeInDuration pulumi.StringPtrInput `pulumi:"fadeInDuration"`
	// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
	FadeOutDuration pulumi.StringPtrInput `pulumi:"fadeOutDuration"`
	// The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG or PNG formats, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats.
	InputLabel pulumi.StringInput `pulumi:"inputLabel"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	Start pulumi.StringPtrInput `pulumi:"start"`
}

func (AudioOverlayResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioOverlayResponse)(nil)).Elem()
}

func (i AudioOverlayResponseArgs) ToAudioOverlayResponseOutput() AudioOverlayResponseOutput {
	return i.ToAudioOverlayResponseOutputWithContext(context.Background())
}

func (i AudioOverlayResponseArgs) ToAudioOverlayResponseOutputWithContext(ctx context.Context) AudioOverlayResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioOverlayResponseOutput)
}

// Describes the properties of an audio overlay.
type AudioOverlayResponseOutput struct{ *pulumi.OutputState }

func (AudioOverlayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioOverlayResponse)(nil)).Elem()
}

func (o AudioOverlayResponseOutput) ToAudioOverlayResponseOutput() AudioOverlayResponseOutput {
	return o
}

func (o AudioOverlayResponseOutput) ToAudioOverlayResponseOutputWithContext(ctx context.Context) AudioOverlayResponseOutput {
	return o
}

// The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0.
func (o AudioOverlayResponseOutput) AudioGainLevel() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AudioOverlayResponse) *float64 { return v.AudioGainLevel }).(pulumi.Float64PtrOutput)
}

// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
func (o AudioOverlayResponseOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AudioOverlayResponse) *string { return v.End }).(pulumi.StringPtrOutput)
}

// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
func (o AudioOverlayResponseOutput) FadeInDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AudioOverlayResponse) *string { return v.FadeInDuration }).(pulumi.StringPtrOutput)
}

// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
func (o AudioOverlayResponseOutput) FadeOutDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AudioOverlayResponse) *string { return v.FadeOutDuration }).(pulumi.StringPtrOutput)
}

// The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG or PNG formats, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats.
func (o AudioOverlayResponseOutput) InputLabel() pulumi.StringOutput {
	return o.ApplyT(func(v AudioOverlayResponse) string { return v.InputLabel }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o AudioOverlayResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v AudioOverlayResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
func (o AudioOverlayResponseOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AudioOverlayResponse) *string { return v.Start }).(pulumi.StringPtrOutput)
}

// Defines the common properties for all audio codecs.
type AudioResponse struct {
	// The bitrate, in bits per second, of the output encoded audio.
	Bitrate *int `pulumi:"bitrate"`
	// The number of channels in the audio.
	Channels *int `pulumi:"channels"`
	// An optional label for the codec. The label can be used to control muxing behavior.
	Label *string `pulumi:"label"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The sampling rate to use for encoding in hertz.
	SamplingRate *int `pulumi:"samplingRate"`
}

// AudioResponseInput is an input type that accepts AudioResponseArgs and AudioResponseOutput values.
// You can construct a concrete instance of `AudioResponseInput` via:
//
//          AudioResponseArgs{...}
type AudioResponseInput interface {
	pulumi.Input

	ToAudioResponseOutput() AudioResponseOutput
	ToAudioResponseOutputWithContext(context.Context) AudioResponseOutput
}

// Defines the common properties for all audio codecs.
type AudioResponseArgs struct {
	// The bitrate, in bits per second, of the output encoded audio.
	Bitrate pulumi.IntPtrInput `pulumi:"bitrate"`
	// The number of channels in the audio.
	Channels pulumi.IntPtrInput `pulumi:"channels"`
	// An optional label for the codec. The label can be used to control muxing behavior.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The sampling rate to use for encoding in hertz.
	SamplingRate pulumi.IntPtrInput `pulumi:"samplingRate"`
}

func (AudioResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioResponse)(nil)).Elem()
}

func (i AudioResponseArgs) ToAudioResponseOutput() AudioResponseOutput {
	return i.ToAudioResponseOutputWithContext(context.Background())
}

func (i AudioResponseArgs) ToAudioResponseOutputWithContext(ctx context.Context) AudioResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioResponseOutput)
}

// Defines the common properties for all audio codecs.
type AudioResponseOutput struct{ *pulumi.OutputState }

func (AudioResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioResponse)(nil)).Elem()
}

func (o AudioResponseOutput) ToAudioResponseOutput() AudioResponseOutput {
	return o
}

func (o AudioResponseOutput) ToAudioResponseOutputWithContext(ctx context.Context) AudioResponseOutput {
	return o
}

// The bitrate, in bits per second, of the output encoded audio.
func (o AudioResponseOutput) Bitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AudioResponse) *int { return v.Bitrate }).(pulumi.IntPtrOutput)
}

// The number of channels in the audio.
func (o AudioResponseOutput) Channels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AudioResponse) *int { return v.Channels }).(pulumi.IntPtrOutput)
}

// An optional label for the codec. The label can be used to control muxing behavior.
func (o AudioResponseOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AudioResponse) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The discriminator for derived types.
func (o AudioResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v AudioResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// The sampling rate to use for encoding in hertz.
func (o AudioResponseOutput) SamplingRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AudioResponse) *int { return v.SamplingRate }).(pulumi.IntPtrOutput)
}

// Describes a built-in preset for encoding the input video with the Standard Encoder.
type BuiltInStandardEncoderPreset struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The built-in preset to be used for encoding videos.
	PresetName string `pulumi:"presetName"`
}

// BuiltInStandardEncoderPresetInput is an input type that accepts BuiltInStandardEncoderPresetArgs and BuiltInStandardEncoderPresetOutput values.
// You can construct a concrete instance of `BuiltInStandardEncoderPresetInput` via:
//
//          BuiltInStandardEncoderPresetArgs{...}
type BuiltInStandardEncoderPresetInput interface {
	pulumi.Input

	ToBuiltInStandardEncoderPresetOutput() BuiltInStandardEncoderPresetOutput
	ToBuiltInStandardEncoderPresetOutputWithContext(context.Context) BuiltInStandardEncoderPresetOutput
}

// Describes a built-in preset for encoding the input video with the Standard Encoder.
type BuiltInStandardEncoderPresetArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The built-in preset to be used for encoding videos.
	PresetName pulumi.StringInput `pulumi:"presetName"`
}

func (BuiltInStandardEncoderPresetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuiltInStandardEncoderPreset)(nil)).Elem()
}

func (i BuiltInStandardEncoderPresetArgs) ToBuiltInStandardEncoderPresetOutput() BuiltInStandardEncoderPresetOutput {
	return i.ToBuiltInStandardEncoderPresetOutputWithContext(context.Background())
}

func (i BuiltInStandardEncoderPresetArgs) ToBuiltInStandardEncoderPresetOutputWithContext(ctx context.Context) BuiltInStandardEncoderPresetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuiltInStandardEncoderPresetOutput)
}

// Describes a built-in preset for encoding the input video with the Standard Encoder.
type BuiltInStandardEncoderPresetOutput struct{ *pulumi.OutputState }

func (BuiltInStandardEncoderPresetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuiltInStandardEncoderPreset)(nil)).Elem()
}

func (o BuiltInStandardEncoderPresetOutput) ToBuiltInStandardEncoderPresetOutput() BuiltInStandardEncoderPresetOutput {
	return o
}

func (o BuiltInStandardEncoderPresetOutput) ToBuiltInStandardEncoderPresetOutputWithContext(ctx context.Context) BuiltInStandardEncoderPresetOutput {
	return o
}

// The discriminator for derived types.
func (o BuiltInStandardEncoderPresetOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v BuiltInStandardEncoderPreset) string { return v.OdataType }).(pulumi.StringOutput)
}

// The built-in preset to be used for encoding videos.
func (o BuiltInStandardEncoderPresetOutput) PresetName() pulumi.StringOutput {
	return o.ApplyT(func(v BuiltInStandardEncoderPreset) string { return v.PresetName }).(pulumi.StringOutput)
}

// Describes a built-in preset for encoding the input video with the Standard Encoder.
type BuiltInStandardEncoderPresetResponse struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The built-in preset to be used for encoding videos.
	PresetName string `pulumi:"presetName"`
}

// BuiltInStandardEncoderPresetResponseInput is an input type that accepts BuiltInStandardEncoderPresetResponseArgs and BuiltInStandardEncoderPresetResponseOutput values.
// You can construct a concrete instance of `BuiltInStandardEncoderPresetResponseInput` via:
//
//          BuiltInStandardEncoderPresetResponseArgs{...}
type BuiltInStandardEncoderPresetResponseInput interface {
	pulumi.Input

	ToBuiltInStandardEncoderPresetResponseOutput() BuiltInStandardEncoderPresetResponseOutput
	ToBuiltInStandardEncoderPresetResponseOutputWithContext(context.Context) BuiltInStandardEncoderPresetResponseOutput
}

// Describes a built-in preset for encoding the input video with the Standard Encoder.
type BuiltInStandardEncoderPresetResponseArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The built-in preset to be used for encoding videos.
	PresetName pulumi.StringInput `pulumi:"presetName"`
}

func (BuiltInStandardEncoderPresetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuiltInStandardEncoderPresetResponse)(nil)).Elem()
}

func (i BuiltInStandardEncoderPresetResponseArgs) ToBuiltInStandardEncoderPresetResponseOutput() BuiltInStandardEncoderPresetResponseOutput {
	return i.ToBuiltInStandardEncoderPresetResponseOutputWithContext(context.Background())
}

func (i BuiltInStandardEncoderPresetResponseArgs) ToBuiltInStandardEncoderPresetResponseOutputWithContext(ctx context.Context) BuiltInStandardEncoderPresetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuiltInStandardEncoderPresetResponseOutput)
}

// Describes a built-in preset for encoding the input video with the Standard Encoder.
type BuiltInStandardEncoderPresetResponseOutput struct{ *pulumi.OutputState }

func (BuiltInStandardEncoderPresetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuiltInStandardEncoderPresetResponse)(nil)).Elem()
}

func (o BuiltInStandardEncoderPresetResponseOutput) ToBuiltInStandardEncoderPresetResponseOutput() BuiltInStandardEncoderPresetResponseOutput {
	return o
}

func (o BuiltInStandardEncoderPresetResponseOutput) ToBuiltInStandardEncoderPresetResponseOutputWithContext(ctx context.Context) BuiltInStandardEncoderPresetResponseOutput {
	return o
}

// The discriminator for derived types.
func (o BuiltInStandardEncoderPresetResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v BuiltInStandardEncoderPresetResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// The built-in preset to be used for encoding videos.
func (o BuiltInStandardEncoderPresetResponseOutput) PresetName() pulumi.StringOutput {
	return o.ApplyT(func(v BuiltInStandardEncoderPresetResponse) string { return v.PresetName }).(pulumi.StringOutput)
}

// Class to specify DRM configurations of CommonEncryptionCbcs scheme in Streaming Policy
type CbcsDrmConfiguration struct {
	// FairPlay configurations
	FairPlay *StreamingPolicyFairPlayConfiguration `pulumi:"fairPlay"`
	// PlayReady configurations
	PlayReady *StreamingPolicyPlayReadyConfiguration `pulumi:"playReady"`
	// Widevine configurations
	Widevine *StreamingPolicyWidevineConfiguration `pulumi:"widevine"`
}

// CbcsDrmConfigurationInput is an input type that accepts CbcsDrmConfigurationArgs and CbcsDrmConfigurationOutput values.
// You can construct a concrete instance of `CbcsDrmConfigurationInput` via:
//
//          CbcsDrmConfigurationArgs{...}
type CbcsDrmConfigurationInput interface {
	pulumi.Input

	ToCbcsDrmConfigurationOutput() CbcsDrmConfigurationOutput
	ToCbcsDrmConfigurationOutputWithContext(context.Context) CbcsDrmConfigurationOutput
}

// Class to specify DRM configurations of CommonEncryptionCbcs scheme in Streaming Policy
type CbcsDrmConfigurationArgs struct {
	// FairPlay configurations
	FairPlay StreamingPolicyFairPlayConfigurationPtrInput `pulumi:"fairPlay"`
	// PlayReady configurations
	PlayReady StreamingPolicyPlayReadyConfigurationPtrInput `pulumi:"playReady"`
	// Widevine configurations
	Widevine StreamingPolicyWidevineConfigurationPtrInput `pulumi:"widevine"`
}

func (CbcsDrmConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CbcsDrmConfiguration)(nil)).Elem()
}

func (i CbcsDrmConfigurationArgs) ToCbcsDrmConfigurationOutput() CbcsDrmConfigurationOutput {
	return i.ToCbcsDrmConfigurationOutputWithContext(context.Background())
}

func (i CbcsDrmConfigurationArgs) ToCbcsDrmConfigurationOutputWithContext(ctx context.Context) CbcsDrmConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbcsDrmConfigurationOutput)
}

func (i CbcsDrmConfigurationArgs) ToCbcsDrmConfigurationPtrOutput() CbcsDrmConfigurationPtrOutput {
	return i.ToCbcsDrmConfigurationPtrOutputWithContext(context.Background())
}

func (i CbcsDrmConfigurationArgs) ToCbcsDrmConfigurationPtrOutputWithContext(ctx context.Context) CbcsDrmConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbcsDrmConfigurationOutput).ToCbcsDrmConfigurationPtrOutputWithContext(ctx)
}

// CbcsDrmConfigurationPtrInput is an input type that accepts CbcsDrmConfigurationArgs, CbcsDrmConfigurationPtr and CbcsDrmConfigurationPtrOutput values.
// You can construct a concrete instance of `CbcsDrmConfigurationPtrInput` via:
//
//          CbcsDrmConfigurationArgs{...}
//
//  or:
//
//          nil
type CbcsDrmConfigurationPtrInput interface {
	pulumi.Input

	ToCbcsDrmConfigurationPtrOutput() CbcsDrmConfigurationPtrOutput
	ToCbcsDrmConfigurationPtrOutputWithContext(context.Context) CbcsDrmConfigurationPtrOutput
}

type cbcsDrmConfigurationPtrType CbcsDrmConfigurationArgs

func CbcsDrmConfigurationPtr(v *CbcsDrmConfigurationArgs) CbcsDrmConfigurationPtrInput {
	return (*cbcsDrmConfigurationPtrType)(v)
}

func (*cbcsDrmConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CbcsDrmConfiguration)(nil)).Elem()
}

func (i *cbcsDrmConfigurationPtrType) ToCbcsDrmConfigurationPtrOutput() CbcsDrmConfigurationPtrOutput {
	return i.ToCbcsDrmConfigurationPtrOutputWithContext(context.Background())
}

func (i *cbcsDrmConfigurationPtrType) ToCbcsDrmConfigurationPtrOutputWithContext(ctx context.Context) CbcsDrmConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbcsDrmConfigurationPtrOutput)
}

// Class to specify DRM configurations of CommonEncryptionCbcs scheme in Streaming Policy
type CbcsDrmConfigurationOutput struct{ *pulumi.OutputState }

func (CbcsDrmConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CbcsDrmConfiguration)(nil)).Elem()
}

func (o CbcsDrmConfigurationOutput) ToCbcsDrmConfigurationOutput() CbcsDrmConfigurationOutput {
	return o
}

func (o CbcsDrmConfigurationOutput) ToCbcsDrmConfigurationOutputWithContext(ctx context.Context) CbcsDrmConfigurationOutput {
	return o
}

func (o CbcsDrmConfigurationOutput) ToCbcsDrmConfigurationPtrOutput() CbcsDrmConfigurationPtrOutput {
	return o.ToCbcsDrmConfigurationPtrOutputWithContext(context.Background())
}

func (o CbcsDrmConfigurationOutput) ToCbcsDrmConfigurationPtrOutputWithContext(ctx context.Context) CbcsDrmConfigurationPtrOutput {
	return o.ApplyT(func(v CbcsDrmConfiguration) *CbcsDrmConfiguration {
		return &v
	}).(CbcsDrmConfigurationPtrOutput)
}

// FairPlay configurations
func (o CbcsDrmConfigurationOutput) FairPlay() StreamingPolicyFairPlayConfigurationPtrOutput {
	return o.ApplyT(func(v CbcsDrmConfiguration) *StreamingPolicyFairPlayConfiguration { return v.FairPlay }).(StreamingPolicyFairPlayConfigurationPtrOutput)
}

// PlayReady configurations
func (o CbcsDrmConfigurationOutput) PlayReady() StreamingPolicyPlayReadyConfigurationPtrOutput {
	return o.ApplyT(func(v CbcsDrmConfiguration) *StreamingPolicyPlayReadyConfiguration { return v.PlayReady }).(StreamingPolicyPlayReadyConfigurationPtrOutput)
}

// Widevine configurations
func (o CbcsDrmConfigurationOutput) Widevine() StreamingPolicyWidevineConfigurationPtrOutput {
	return o.ApplyT(func(v CbcsDrmConfiguration) *StreamingPolicyWidevineConfiguration { return v.Widevine }).(StreamingPolicyWidevineConfigurationPtrOutput)
}

type CbcsDrmConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CbcsDrmConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CbcsDrmConfiguration)(nil)).Elem()
}

func (o CbcsDrmConfigurationPtrOutput) ToCbcsDrmConfigurationPtrOutput() CbcsDrmConfigurationPtrOutput {
	return o
}

func (o CbcsDrmConfigurationPtrOutput) ToCbcsDrmConfigurationPtrOutputWithContext(ctx context.Context) CbcsDrmConfigurationPtrOutput {
	return o
}

func (o CbcsDrmConfigurationPtrOutput) Elem() CbcsDrmConfigurationOutput {
	return o.ApplyT(func(v *CbcsDrmConfiguration) CbcsDrmConfiguration { return *v }).(CbcsDrmConfigurationOutput)
}

// FairPlay configurations
func (o CbcsDrmConfigurationPtrOutput) FairPlay() StreamingPolicyFairPlayConfigurationPtrOutput {
	return o.ApplyT(func(v *CbcsDrmConfiguration) *StreamingPolicyFairPlayConfiguration {
		if v == nil {
			return nil
		}
		return v.FairPlay
	}).(StreamingPolicyFairPlayConfigurationPtrOutput)
}

// PlayReady configurations
func (o CbcsDrmConfigurationPtrOutput) PlayReady() StreamingPolicyPlayReadyConfigurationPtrOutput {
	return o.ApplyT(func(v *CbcsDrmConfiguration) *StreamingPolicyPlayReadyConfiguration {
		if v == nil {
			return nil
		}
		return v.PlayReady
	}).(StreamingPolicyPlayReadyConfigurationPtrOutput)
}

// Widevine configurations
func (o CbcsDrmConfigurationPtrOutput) Widevine() StreamingPolicyWidevineConfigurationPtrOutput {
	return o.ApplyT(func(v *CbcsDrmConfiguration) *StreamingPolicyWidevineConfiguration {
		if v == nil {
			return nil
		}
		return v.Widevine
	}).(StreamingPolicyWidevineConfigurationPtrOutput)
}

// Class to specify DRM configurations of CommonEncryptionCbcs scheme in Streaming Policy
type CbcsDrmConfigurationResponse struct {
	// FairPlay configurations
	FairPlay *StreamingPolicyFairPlayConfigurationResponse `pulumi:"fairPlay"`
	// PlayReady configurations
	PlayReady *StreamingPolicyPlayReadyConfigurationResponse `pulumi:"playReady"`
	// Widevine configurations
	Widevine *StreamingPolicyWidevineConfigurationResponse `pulumi:"widevine"`
}

// CbcsDrmConfigurationResponseInput is an input type that accepts CbcsDrmConfigurationResponseArgs and CbcsDrmConfigurationResponseOutput values.
// You can construct a concrete instance of `CbcsDrmConfigurationResponseInput` via:
//
//          CbcsDrmConfigurationResponseArgs{...}
type CbcsDrmConfigurationResponseInput interface {
	pulumi.Input

	ToCbcsDrmConfigurationResponseOutput() CbcsDrmConfigurationResponseOutput
	ToCbcsDrmConfigurationResponseOutputWithContext(context.Context) CbcsDrmConfigurationResponseOutput
}

// Class to specify DRM configurations of CommonEncryptionCbcs scheme in Streaming Policy
type CbcsDrmConfigurationResponseArgs struct {
	// FairPlay configurations
	FairPlay StreamingPolicyFairPlayConfigurationResponsePtrInput `pulumi:"fairPlay"`
	// PlayReady configurations
	PlayReady StreamingPolicyPlayReadyConfigurationResponsePtrInput `pulumi:"playReady"`
	// Widevine configurations
	Widevine StreamingPolicyWidevineConfigurationResponsePtrInput `pulumi:"widevine"`
}

func (CbcsDrmConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CbcsDrmConfigurationResponse)(nil)).Elem()
}

func (i CbcsDrmConfigurationResponseArgs) ToCbcsDrmConfigurationResponseOutput() CbcsDrmConfigurationResponseOutput {
	return i.ToCbcsDrmConfigurationResponseOutputWithContext(context.Background())
}

func (i CbcsDrmConfigurationResponseArgs) ToCbcsDrmConfigurationResponseOutputWithContext(ctx context.Context) CbcsDrmConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbcsDrmConfigurationResponseOutput)
}

func (i CbcsDrmConfigurationResponseArgs) ToCbcsDrmConfigurationResponsePtrOutput() CbcsDrmConfigurationResponsePtrOutput {
	return i.ToCbcsDrmConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i CbcsDrmConfigurationResponseArgs) ToCbcsDrmConfigurationResponsePtrOutputWithContext(ctx context.Context) CbcsDrmConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbcsDrmConfigurationResponseOutput).ToCbcsDrmConfigurationResponsePtrOutputWithContext(ctx)
}

// CbcsDrmConfigurationResponsePtrInput is an input type that accepts CbcsDrmConfigurationResponseArgs, CbcsDrmConfigurationResponsePtr and CbcsDrmConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `CbcsDrmConfigurationResponsePtrInput` via:
//
//          CbcsDrmConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type CbcsDrmConfigurationResponsePtrInput interface {
	pulumi.Input

	ToCbcsDrmConfigurationResponsePtrOutput() CbcsDrmConfigurationResponsePtrOutput
	ToCbcsDrmConfigurationResponsePtrOutputWithContext(context.Context) CbcsDrmConfigurationResponsePtrOutput
}

type cbcsDrmConfigurationResponsePtrType CbcsDrmConfigurationResponseArgs

func CbcsDrmConfigurationResponsePtr(v *CbcsDrmConfigurationResponseArgs) CbcsDrmConfigurationResponsePtrInput {
	return (*cbcsDrmConfigurationResponsePtrType)(v)
}

func (*cbcsDrmConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CbcsDrmConfigurationResponse)(nil)).Elem()
}

func (i *cbcsDrmConfigurationResponsePtrType) ToCbcsDrmConfigurationResponsePtrOutput() CbcsDrmConfigurationResponsePtrOutput {
	return i.ToCbcsDrmConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *cbcsDrmConfigurationResponsePtrType) ToCbcsDrmConfigurationResponsePtrOutputWithContext(ctx context.Context) CbcsDrmConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbcsDrmConfigurationResponsePtrOutput)
}

// Class to specify DRM configurations of CommonEncryptionCbcs scheme in Streaming Policy
type CbcsDrmConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CbcsDrmConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CbcsDrmConfigurationResponse)(nil)).Elem()
}

func (o CbcsDrmConfigurationResponseOutput) ToCbcsDrmConfigurationResponseOutput() CbcsDrmConfigurationResponseOutput {
	return o
}

func (o CbcsDrmConfigurationResponseOutput) ToCbcsDrmConfigurationResponseOutputWithContext(ctx context.Context) CbcsDrmConfigurationResponseOutput {
	return o
}

func (o CbcsDrmConfigurationResponseOutput) ToCbcsDrmConfigurationResponsePtrOutput() CbcsDrmConfigurationResponsePtrOutput {
	return o.ToCbcsDrmConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o CbcsDrmConfigurationResponseOutput) ToCbcsDrmConfigurationResponsePtrOutputWithContext(ctx context.Context) CbcsDrmConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CbcsDrmConfigurationResponse) *CbcsDrmConfigurationResponse {
		return &v
	}).(CbcsDrmConfigurationResponsePtrOutput)
}

// FairPlay configurations
func (o CbcsDrmConfigurationResponseOutput) FairPlay() StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CbcsDrmConfigurationResponse) *StreamingPolicyFairPlayConfigurationResponse { return v.FairPlay }).(StreamingPolicyFairPlayConfigurationResponsePtrOutput)
}

// PlayReady configurations
func (o CbcsDrmConfigurationResponseOutput) PlayReady() StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CbcsDrmConfigurationResponse) *StreamingPolicyPlayReadyConfigurationResponse {
		return v.PlayReady
	}).(StreamingPolicyPlayReadyConfigurationResponsePtrOutput)
}

// Widevine configurations
func (o CbcsDrmConfigurationResponseOutput) Widevine() StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CbcsDrmConfigurationResponse) *StreamingPolicyWidevineConfigurationResponse { return v.Widevine }).(StreamingPolicyWidevineConfigurationResponsePtrOutput)
}

type CbcsDrmConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (CbcsDrmConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CbcsDrmConfigurationResponse)(nil)).Elem()
}

func (o CbcsDrmConfigurationResponsePtrOutput) ToCbcsDrmConfigurationResponsePtrOutput() CbcsDrmConfigurationResponsePtrOutput {
	return o
}

func (o CbcsDrmConfigurationResponsePtrOutput) ToCbcsDrmConfigurationResponsePtrOutputWithContext(ctx context.Context) CbcsDrmConfigurationResponsePtrOutput {
	return o
}

func (o CbcsDrmConfigurationResponsePtrOutput) Elem() CbcsDrmConfigurationResponseOutput {
	return o.ApplyT(func(v *CbcsDrmConfigurationResponse) CbcsDrmConfigurationResponse { return *v }).(CbcsDrmConfigurationResponseOutput)
}

// FairPlay configurations
func (o CbcsDrmConfigurationResponsePtrOutput) FairPlay() StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *CbcsDrmConfigurationResponse) *StreamingPolicyFairPlayConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.FairPlay
	}).(StreamingPolicyFairPlayConfigurationResponsePtrOutput)
}

// PlayReady configurations
func (o CbcsDrmConfigurationResponsePtrOutput) PlayReady() StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *CbcsDrmConfigurationResponse) *StreamingPolicyPlayReadyConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.PlayReady
	}).(StreamingPolicyPlayReadyConfigurationResponsePtrOutput)
}

// Widevine configurations
func (o CbcsDrmConfigurationResponsePtrOutput) Widevine() StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *CbcsDrmConfigurationResponse) *StreamingPolicyWidevineConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Widevine
	}).(StreamingPolicyWidevineConfigurationResponsePtrOutput)
}

// Class to specify DRM configurations of CommonEncryptionCenc scheme in Streaming Policy
type CencDrmConfiguration struct {
	// PlayReady configurations
	PlayReady *StreamingPolicyPlayReadyConfiguration `pulumi:"playReady"`
	// Widevine configurations
	Widevine *StreamingPolicyWidevineConfiguration `pulumi:"widevine"`
}

// CencDrmConfigurationInput is an input type that accepts CencDrmConfigurationArgs and CencDrmConfigurationOutput values.
// You can construct a concrete instance of `CencDrmConfigurationInput` via:
//
//          CencDrmConfigurationArgs{...}
type CencDrmConfigurationInput interface {
	pulumi.Input

	ToCencDrmConfigurationOutput() CencDrmConfigurationOutput
	ToCencDrmConfigurationOutputWithContext(context.Context) CencDrmConfigurationOutput
}

// Class to specify DRM configurations of CommonEncryptionCenc scheme in Streaming Policy
type CencDrmConfigurationArgs struct {
	// PlayReady configurations
	PlayReady StreamingPolicyPlayReadyConfigurationPtrInput `pulumi:"playReady"`
	// Widevine configurations
	Widevine StreamingPolicyWidevineConfigurationPtrInput `pulumi:"widevine"`
}

func (CencDrmConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CencDrmConfiguration)(nil)).Elem()
}

func (i CencDrmConfigurationArgs) ToCencDrmConfigurationOutput() CencDrmConfigurationOutput {
	return i.ToCencDrmConfigurationOutputWithContext(context.Background())
}

func (i CencDrmConfigurationArgs) ToCencDrmConfigurationOutputWithContext(ctx context.Context) CencDrmConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CencDrmConfigurationOutput)
}

func (i CencDrmConfigurationArgs) ToCencDrmConfigurationPtrOutput() CencDrmConfigurationPtrOutput {
	return i.ToCencDrmConfigurationPtrOutputWithContext(context.Background())
}

func (i CencDrmConfigurationArgs) ToCencDrmConfigurationPtrOutputWithContext(ctx context.Context) CencDrmConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CencDrmConfigurationOutput).ToCencDrmConfigurationPtrOutputWithContext(ctx)
}

// CencDrmConfigurationPtrInput is an input type that accepts CencDrmConfigurationArgs, CencDrmConfigurationPtr and CencDrmConfigurationPtrOutput values.
// You can construct a concrete instance of `CencDrmConfigurationPtrInput` via:
//
//          CencDrmConfigurationArgs{...}
//
//  or:
//
//          nil
type CencDrmConfigurationPtrInput interface {
	pulumi.Input

	ToCencDrmConfigurationPtrOutput() CencDrmConfigurationPtrOutput
	ToCencDrmConfigurationPtrOutputWithContext(context.Context) CencDrmConfigurationPtrOutput
}

type cencDrmConfigurationPtrType CencDrmConfigurationArgs

func CencDrmConfigurationPtr(v *CencDrmConfigurationArgs) CencDrmConfigurationPtrInput {
	return (*cencDrmConfigurationPtrType)(v)
}

func (*cencDrmConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CencDrmConfiguration)(nil)).Elem()
}

func (i *cencDrmConfigurationPtrType) ToCencDrmConfigurationPtrOutput() CencDrmConfigurationPtrOutput {
	return i.ToCencDrmConfigurationPtrOutputWithContext(context.Background())
}

func (i *cencDrmConfigurationPtrType) ToCencDrmConfigurationPtrOutputWithContext(ctx context.Context) CencDrmConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CencDrmConfigurationPtrOutput)
}

// Class to specify DRM configurations of CommonEncryptionCenc scheme in Streaming Policy
type CencDrmConfigurationOutput struct{ *pulumi.OutputState }

func (CencDrmConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CencDrmConfiguration)(nil)).Elem()
}

func (o CencDrmConfigurationOutput) ToCencDrmConfigurationOutput() CencDrmConfigurationOutput {
	return o
}

func (o CencDrmConfigurationOutput) ToCencDrmConfigurationOutputWithContext(ctx context.Context) CencDrmConfigurationOutput {
	return o
}

func (o CencDrmConfigurationOutput) ToCencDrmConfigurationPtrOutput() CencDrmConfigurationPtrOutput {
	return o.ToCencDrmConfigurationPtrOutputWithContext(context.Background())
}

func (o CencDrmConfigurationOutput) ToCencDrmConfigurationPtrOutputWithContext(ctx context.Context) CencDrmConfigurationPtrOutput {
	return o.ApplyT(func(v CencDrmConfiguration) *CencDrmConfiguration {
		return &v
	}).(CencDrmConfigurationPtrOutput)
}

// PlayReady configurations
func (o CencDrmConfigurationOutput) PlayReady() StreamingPolicyPlayReadyConfigurationPtrOutput {
	return o.ApplyT(func(v CencDrmConfiguration) *StreamingPolicyPlayReadyConfiguration { return v.PlayReady }).(StreamingPolicyPlayReadyConfigurationPtrOutput)
}

// Widevine configurations
func (o CencDrmConfigurationOutput) Widevine() StreamingPolicyWidevineConfigurationPtrOutput {
	return o.ApplyT(func(v CencDrmConfiguration) *StreamingPolicyWidevineConfiguration { return v.Widevine }).(StreamingPolicyWidevineConfigurationPtrOutput)
}

type CencDrmConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CencDrmConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CencDrmConfiguration)(nil)).Elem()
}

func (o CencDrmConfigurationPtrOutput) ToCencDrmConfigurationPtrOutput() CencDrmConfigurationPtrOutput {
	return o
}

func (o CencDrmConfigurationPtrOutput) ToCencDrmConfigurationPtrOutputWithContext(ctx context.Context) CencDrmConfigurationPtrOutput {
	return o
}

func (o CencDrmConfigurationPtrOutput) Elem() CencDrmConfigurationOutput {
	return o.ApplyT(func(v *CencDrmConfiguration) CencDrmConfiguration { return *v }).(CencDrmConfigurationOutput)
}

// PlayReady configurations
func (o CencDrmConfigurationPtrOutput) PlayReady() StreamingPolicyPlayReadyConfigurationPtrOutput {
	return o.ApplyT(func(v *CencDrmConfiguration) *StreamingPolicyPlayReadyConfiguration {
		if v == nil {
			return nil
		}
		return v.PlayReady
	}).(StreamingPolicyPlayReadyConfigurationPtrOutput)
}

// Widevine configurations
func (o CencDrmConfigurationPtrOutput) Widevine() StreamingPolicyWidevineConfigurationPtrOutput {
	return o.ApplyT(func(v *CencDrmConfiguration) *StreamingPolicyWidevineConfiguration {
		if v == nil {
			return nil
		}
		return v.Widevine
	}).(StreamingPolicyWidevineConfigurationPtrOutput)
}

// Class to specify DRM configurations of CommonEncryptionCenc scheme in Streaming Policy
type CencDrmConfigurationResponse struct {
	// PlayReady configurations
	PlayReady *StreamingPolicyPlayReadyConfigurationResponse `pulumi:"playReady"`
	// Widevine configurations
	Widevine *StreamingPolicyWidevineConfigurationResponse `pulumi:"widevine"`
}

// CencDrmConfigurationResponseInput is an input type that accepts CencDrmConfigurationResponseArgs and CencDrmConfigurationResponseOutput values.
// You can construct a concrete instance of `CencDrmConfigurationResponseInput` via:
//
//          CencDrmConfigurationResponseArgs{...}
type CencDrmConfigurationResponseInput interface {
	pulumi.Input

	ToCencDrmConfigurationResponseOutput() CencDrmConfigurationResponseOutput
	ToCencDrmConfigurationResponseOutputWithContext(context.Context) CencDrmConfigurationResponseOutput
}

// Class to specify DRM configurations of CommonEncryptionCenc scheme in Streaming Policy
type CencDrmConfigurationResponseArgs struct {
	// PlayReady configurations
	PlayReady StreamingPolicyPlayReadyConfigurationResponsePtrInput `pulumi:"playReady"`
	// Widevine configurations
	Widevine StreamingPolicyWidevineConfigurationResponsePtrInput `pulumi:"widevine"`
}

func (CencDrmConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CencDrmConfigurationResponse)(nil)).Elem()
}

func (i CencDrmConfigurationResponseArgs) ToCencDrmConfigurationResponseOutput() CencDrmConfigurationResponseOutput {
	return i.ToCencDrmConfigurationResponseOutputWithContext(context.Background())
}

func (i CencDrmConfigurationResponseArgs) ToCencDrmConfigurationResponseOutputWithContext(ctx context.Context) CencDrmConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CencDrmConfigurationResponseOutput)
}

func (i CencDrmConfigurationResponseArgs) ToCencDrmConfigurationResponsePtrOutput() CencDrmConfigurationResponsePtrOutput {
	return i.ToCencDrmConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i CencDrmConfigurationResponseArgs) ToCencDrmConfigurationResponsePtrOutputWithContext(ctx context.Context) CencDrmConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CencDrmConfigurationResponseOutput).ToCencDrmConfigurationResponsePtrOutputWithContext(ctx)
}

// CencDrmConfigurationResponsePtrInput is an input type that accepts CencDrmConfigurationResponseArgs, CencDrmConfigurationResponsePtr and CencDrmConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `CencDrmConfigurationResponsePtrInput` via:
//
//          CencDrmConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type CencDrmConfigurationResponsePtrInput interface {
	pulumi.Input

	ToCencDrmConfigurationResponsePtrOutput() CencDrmConfigurationResponsePtrOutput
	ToCencDrmConfigurationResponsePtrOutputWithContext(context.Context) CencDrmConfigurationResponsePtrOutput
}

type cencDrmConfigurationResponsePtrType CencDrmConfigurationResponseArgs

func CencDrmConfigurationResponsePtr(v *CencDrmConfigurationResponseArgs) CencDrmConfigurationResponsePtrInput {
	return (*cencDrmConfigurationResponsePtrType)(v)
}

func (*cencDrmConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CencDrmConfigurationResponse)(nil)).Elem()
}

func (i *cencDrmConfigurationResponsePtrType) ToCencDrmConfigurationResponsePtrOutput() CencDrmConfigurationResponsePtrOutput {
	return i.ToCencDrmConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *cencDrmConfigurationResponsePtrType) ToCencDrmConfigurationResponsePtrOutputWithContext(ctx context.Context) CencDrmConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CencDrmConfigurationResponsePtrOutput)
}

// Class to specify DRM configurations of CommonEncryptionCenc scheme in Streaming Policy
type CencDrmConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CencDrmConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CencDrmConfigurationResponse)(nil)).Elem()
}

func (o CencDrmConfigurationResponseOutput) ToCencDrmConfigurationResponseOutput() CencDrmConfigurationResponseOutput {
	return o
}

func (o CencDrmConfigurationResponseOutput) ToCencDrmConfigurationResponseOutputWithContext(ctx context.Context) CencDrmConfigurationResponseOutput {
	return o
}

func (o CencDrmConfigurationResponseOutput) ToCencDrmConfigurationResponsePtrOutput() CencDrmConfigurationResponsePtrOutput {
	return o.ToCencDrmConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o CencDrmConfigurationResponseOutput) ToCencDrmConfigurationResponsePtrOutputWithContext(ctx context.Context) CencDrmConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CencDrmConfigurationResponse) *CencDrmConfigurationResponse {
		return &v
	}).(CencDrmConfigurationResponsePtrOutput)
}

// PlayReady configurations
func (o CencDrmConfigurationResponseOutput) PlayReady() StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CencDrmConfigurationResponse) *StreamingPolicyPlayReadyConfigurationResponse {
		return v.PlayReady
	}).(StreamingPolicyPlayReadyConfigurationResponsePtrOutput)
}

// Widevine configurations
func (o CencDrmConfigurationResponseOutput) Widevine() StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CencDrmConfigurationResponse) *StreamingPolicyWidevineConfigurationResponse { return v.Widevine }).(StreamingPolicyWidevineConfigurationResponsePtrOutput)
}

type CencDrmConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (CencDrmConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CencDrmConfigurationResponse)(nil)).Elem()
}

func (o CencDrmConfigurationResponsePtrOutput) ToCencDrmConfigurationResponsePtrOutput() CencDrmConfigurationResponsePtrOutput {
	return o
}

func (o CencDrmConfigurationResponsePtrOutput) ToCencDrmConfigurationResponsePtrOutputWithContext(ctx context.Context) CencDrmConfigurationResponsePtrOutput {
	return o
}

func (o CencDrmConfigurationResponsePtrOutput) Elem() CencDrmConfigurationResponseOutput {
	return o.ApplyT(func(v *CencDrmConfigurationResponse) CencDrmConfigurationResponse { return *v }).(CencDrmConfigurationResponseOutput)
}

// PlayReady configurations
func (o CencDrmConfigurationResponsePtrOutput) PlayReady() StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *CencDrmConfigurationResponse) *StreamingPolicyPlayReadyConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.PlayReady
	}).(StreamingPolicyPlayReadyConfigurationResponsePtrOutput)
}

// Widevine configurations
func (o CencDrmConfigurationResponsePtrOutput) Widevine() StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *CencDrmConfigurationResponse) *StreamingPolicyWidevineConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Widevine
	}).(StreamingPolicyWidevineConfigurationResponsePtrOutput)
}

// Class for CommonEncryptionCbcs encryption scheme
type CommonEncryptionCbcs struct {
	// Representing which tracks should not be encrypted
	ClearTracks []TrackSelection `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys *StreamingPolicyContentKeys `pulumi:"contentKeys"`
	// Configuration of DRMs for current encryption scheme
	Drm *CbcsDrmConfiguration `pulumi:"drm"`
	// Representing supported protocols
	EnabledProtocols *EnabledProtocols `pulumi:"enabledProtocols"`
}

// CommonEncryptionCbcsInput is an input type that accepts CommonEncryptionCbcsArgs and CommonEncryptionCbcsOutput values.
// You can construct a concrete instance of `CommonEncryptionCbcsInput` via:
//
//          CommonEncryptionCbcsArgs{...}
type CommonEncryptionCbcsInput interface {
	pulumi.Input

	ToCommonEncryptionCbcsOutput() CommonEncryptionCbcsOutput
	ToCommonEncryptionCbcsOutputWithContext(context.Context) CommonEncryptionCbcsOutput
}

// Class for CommonEncryptionCbcs encryption scheme
type CommonEncryptionCbcsArgs struct {
	// Representing which tracks should not be encrypted
	ClearTracks TrackSelectionArrayInput `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys StreamingPolicyContentKeysPtrInput `pulumi:"contentKeys"`
	// Configuration of DRMs for current encryption scheme
	Drm CbcsDrmConfigurationPtrInput `pulumi:"drm"`
	// Representing supported protocols
	EnabledProtocols EnabledProtocolsPtrInput `pulumi:"enabledProtocols"`
}

func (CommonEncryptionCbcsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonEncryptionCbcs)(nil)).Elem()
}

func (i CommonEncryptionCbcsArgs) ToCommonEncryptionCbcsOutput() CommonEncryptionCbcsOutput {
	return i.ToCommonEncryptionCbcsOutputWithContext(context.Background())
}

func (i CommonEncryptionCbcsArgs) ToCommonEncryptionCbcsOutputWithContext(ctx context.Context) CommonEncryptionCbcsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCbcsOutput)
}

func (i CommonEncryptionCbcsArgs) ToCommonEncryptionCbcsPtrOutput() CommonEncryptionCbcsPtrOutput {
	return i.ToCommonEncryptionCbcsPtrOutputWithContext(context.Background())
}

func (i CommonEncryptionCbcsArgs) ToCommonEncryptionCbcsPtrOutputWithContext(ctx context.Context) CommonEncryptionCbcsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCbcsOutput).ToCommonEncryptionCbcsPtrOutputWithContext(ctx)
}

// CommonEncryptionCbcsPtrInput is an input type that accepts CommonEncryptionCbcsArgs, CommonEncryptionCbcsPtr and CommonEncryptionCbcsPtrOutput values.
// You can construct a concrete instance of `CommonEncryptionCbcsPtrInput` via:
//
//          CommonEncryptionCbcsArgs{...}
//
//  or:
//
//          nil
type CommonEncryptionCbcsPtrInput interface {
	pulumi.Input

	ToCommonEncryptionCbcsPtrOutput() CommonEncryptionCbcsPtrOutput
	ToCommonEncryptionCbcsPtrOutputWithContext(context.Context) CommonEncryptionCbcsPtrOutput
}

type commonEncryptionCbcsPtrType CommonEncryptionCbcsArgs

func CommonEncryptionCbcsPtr(v *CommonEncryptionCbcsArgs) CommonEncryptionCbcsPtrInput {
	return (*commonEncryptionCbcsPtrType)(v)
}

func (*commonEncryptionCbcsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonEncryptionCbcs)(nil)).Elem()
}

func (i *commonEncryptionCbcsPtrType) ToCommonEncryptionCbcsPtrOutput() CommonEncryptionCbcsPtrOutput {
	return i.ToCommonEncryptionCbcsPtrOutputWithContext(context.Background())
}

func (i *commonEncryptionCbcsPtrType) ToCommonEncryptionCbcsPtrOutputWithContext(ctx context.Context) CommonEncryptionCbcsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCbcsPtrOutput)
}

// Class for CommonEncryptionCbcs encryption scheme
type CommonEncryptionCbcsOutput struct{ *pulumi.OutputState }

func (CommonEncryptionCbcsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonEncryptionCbcs)(nil)).Elem()
}

func (o CommonEncryptionCbcsOutput) ToCommonEncryptionCbcsOutput() CommonEncryptionCbcsOutput {
	return o
}

func (o CommonEncryptionCbcsOutput) ToCommonEncryptionCbcsOutputWithContext(ctx context.Context) CommonEncryptionCbcsOutput {
	return o
}

func (o CommonEncryptionCbcsOutput) ToCommonEncryptionCbcsPtrOutput() CommonEncryptionCbcsPtrOutput {
	return o.ToCommonEncryptionCbcsPtrOutputWithContext(context.Background())
}

func (o CommonEncryptionCbcsOutput) ToCommonEncryptionCbcsPtrOutputWithContext(ctx context.Context) CommonEncryptionCbcsPtrOutput {
	return o.ApplyT(func(v CommonEncryptionCbcs) *CommonEncryptionCbcs {
		return &v
	}).(CommonEncryptionCbcsPtrOutput)
}

// Representing which tracks should not be encrypted
func (o CommonEncryptionCbcsOutput) ClearTracks() TrackSelectionArrayOutput {
	return o.ApplyT(func(v CommonEncryptionCbcs) []TrackSelection { return v.ClearTracks }).(TrackSelectionArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o CommonEncryptionCbcsOutput) ContentKeys() StreamingPolicyContentKeysPtrOutput {
	return o.ApplyT(func(v CommonEncryptionCbcs) *StreamingPolicyContentKeys { return v.ContentKeys }).(StreamingPolicyContentKeysPtrOutput)
}

// Configuration of DRMs for current encryption scheme
func (o CommonEncryptionCbcsOutput) Drm() CbcsDrmConfigurationPtrOutput {
	return o.ApplyT(func(v CommonEncryptionCbcs) *CbcsDrmConfiguration { return v.Drm }).(CbcsDrmConfigurationPtrOutput)
}

// Representing supported protocols
func (o CommonEncryptionCbcsOutput) EnabledProtocols() EnabledProtocolsPtrOutput {
	return o.ApplyT(func(v CommonEncryptionCbcs) *EnabledProtocols { return v.EnabledProtocols }).(EnabledProtocolsPtrOutput)
}

type CommonEncryptionCbcsPtrOutput struct{ *pulumi.OutputState }

func (CommonEncryptionCbcsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonEncryptionCbcs)(nil)).Elem()
}

func (o CommonEncryptionCbcsPtrOutput) ToCommonEncryptionCbcsPtrOutput() CommonEncryptionCbcsPtrOutput {
	return o
}

func (o CommonEncryptionCbcsPtrOutput) ToCommonEncryptionCbcsPtrOutputWithContext(ctx context.Context) CommonEncryptionCbcsPtrOutput {
	return o
}

func (o CommonEncryptionCbcsPtrOutput) Elem() CommonEncryptionCbcsOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcs) CommonEncryptionCbcs { return *v }).(CommonEncryptionCbcsOutput)
}

// Representing which tracks should not be encrypted
func (o CommonEncryptionCbcsPtrOutput) ClearTracks() TrackSelectionArrayOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcs) []TrackSelection {
		if v == nil {
			return nil
		}
		return v.ClearTracks
	}).(TrackSelectionArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o CommonEncryptionCbcsPtrOutput) ContentKeys() StreamingPolicyContentKeysPtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcs) *StreamingPolicyContentKeys {
		if v == nil {
			return nil
		}
		return v.ContentKeys
	}).(StreamingPolicyContentKeysPtrOutput)
}

// Configuration of DRMs for current encryption scheme
func (o CommonEncryptionCbcsPtrOutput) Drm() CbcsDrmConfigurationPtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcs) *CbcsDrmConfiguration {
		if v == nil {
			return nil
		}
		return v.Drm
	}).(CbcsDrmConfigurationPtrOutput)
}

// Representing supported protocols
func (o CommonEncryptionCbcsPtrOutput) EnabledProtocols() EnabledProtocolsPtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcs) *EnabledProtocols {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(EnabledProtocolsPtrOutput)
}

// Class for CommonEncryptionCbcs encryption scheme
type CommonEncryptionCbcsResponse struct {
	// Representing which tracks should not be encrypted
	ClearTracks []TrackSelectionResponse `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys *StreamingPolicyContentKeysResponse `pulumi:"contentKeys"`
	// Configuration of DRMs for current encryption scheme
	Drm *CbcsDrmConfigurationResponse `pulumi:"drm"`
	// Representing supported protocols
	EnabledProtocols *EnabledProtocolsResponse `pulumi:"enabledProtocols"`
}

// CommonEncryptionCbcsResponseInput is an input type that accepts CommonEncryptionCbcsResponseArgs and CommonEncryptionCbcsResponseOutput values.
// You can construct a concrete instance of `CommonEncryptionCbcsResponseInput` via:
//
//          CommonEncryptionCbcsResponseArgs{...}
type CommonEncryptionCbcsResponseInput interface {
	pulumi.Input

	ToCommonEncryptionCbcsResponseOutput() CommonEncryptionCbcsResponseOutput
	ToCommonEncryptionCbcsResponseOutputWithContext(context.Context) CommonEncryptionCbcsResponseOutput
}

// Class for CommonEncryptionCbcs encryption scheme
type CommonEncryptionCbcsResponseArgs struct {
	// Representing which tracks should not be encrypted
	ClearTracks TrackSelectionResponseArrayInput `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys StreamingPolicyContentKeysResponsePtrInput `pulumi:"contentKeys"`
	// Configuration of DRMs for current encryption scheme
	Drm CbcsDrmConfigurationResponsePtrInput `pulumi:"drm"`
	// Representing supported protocols
	EnabledProtocols EnabledProtocolsResponsePtrInput `pulumi:"enabledProtocols"`
}

func (CommonEncryptionCbcsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonEncryptionCbcsResponse)(nil)).Elem()
}

func (i CommonEncryptionCbcsResponseArgs) ToCommonEncryptionCbcsResponseOutput() CommonEncryptionCbcsResponseOutput {
	return i.ToCommonEncryptionCbcsResponseOutputWithContext(context.Background())
}

func (i CommonEncryptionCbcsResponseArgs) ToCommonEncryptionCbcsResponseOutputWithContext(ctx context.Context) CommonEncryptionCbcsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCbcsResponseOutput)
}

func (i CommonEncryptionCbcsResponseArgs) ToCommonEncryptionCbcsResponsePtrOutput() CommonEncryptionCbcsResponsePtrOutput {
	return i.ToCommonEncryptionCbcsResponsePtrOutputWithContext(context.Background())
}

func (i CommonEncryptionCbcsResponseArgs) ToCommonEncryptionCbcsResponsePtrOutputWithContext(ctx context.Context) CommonEncryptionCbcsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCbcsResponseOutput).ToCommonEncryptionCbcsResponsePtrOutputWithContext(ctx)
}

// CommonEncryptionCbcsResponsePtrInput is an input type that accepts CommonEncryptionCbcsResponseArgs, CommonEncryptionCbcsResponsePtr and CommonEncryptionCbcsResponsePtrOutput values.
// You can construct a concrete instance of `CommonEncryptionCbcsResponsePtrInput` via:
//
//          CommonEncryptionCbcsResponseArgs{...}
//
//  or:
//
//          nil
type CommonEncryptionCbcsResponsePtrInput interface {
	pulumi.Input

	ToCommonEncryptionCbcsResponsePtrOutput() CommonEncryptionCbcsResponsePtrOutput
	ToCommonEncryptionCbcsResponsePtrOutputWithContext(context.Context) CommonEncryptionCbcsResponsePtrOutput
}

type commonEncryptionCbcsResponsePtrType CommonEncryptionCbcsResponseArgs

func CommonEncryptionCbcsResponsePtr(v *CommonEncryptionCbcsResponseArgs) CommonEncryptionCbcsResponsePtrInput {
	return (*commonEncryptionCbcsResponsePtrType)(v)
}

func (*commonEncryptionCbcsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonEncryptionCbcsResponse)(nil)).Elem()
}

func (i *commonEncryptionCbcsResponsePtrType) ToCommonEncryptionCbcsResponsePtrOutput() CommonEncryptionCbcsResponsePtrOutput {
	return i.ToCommonEncryptionCbcsResponsePtrOutputWithContext(context.Background())
}

func (i *commonEncryptionCbcsResponsePtrType) ToCommonEncryptionCbcsResponsePtrOutputWithContext(ctx context.Context) CommonEncryptionCbcsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCbcsResponsePtrOutput)
}

// Class for CommonEncryptionCbcs encryption scheme
type CommonEncryptionCbcsResponseOutput struct{ *pulumi.OutputState }

func (CommonEncryptionCbcsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonEncryptionCbcsResponse)(nil)).Elem()
}

func (o CommonEncryptionCbcsResponseOutput) ToCommonEncryptionCbcsResponseOutput() CommonEncryptionCbcsResponseOutput {
	return o
}

func (o CommonEncryptionCbcsResponseOutput) ToCommonEncryptionCbcsResponseOutputWithContext(ctx context.Context) CommonEncryptionCbcsResponseOutput {
	return o
}

func (o CommonEncryptionCbcsResponseOutput) ToCommonEncryptionCbcsResponsePtrOutput() CommonEncryptionCbcsResponsePtrOutput {
	return o.ToCommonEncryptionCbcsResponsePtrOutputWithContext(context.Background())
}

func (o CommonEncryptionCbcsResponseOutput) ToCommonEncryptionCbcsResponsePtrOutputWithContext(ctx context.Context) CommonEncryptionCbcsResponsePtrOutput {
	return o.ApplyT(func(v CommonEncryptionCbcsResponse) *CommonEncryptionCbcsResponse {
		return &v
	}).(CommonEncryptionCbcsResponsePtrOutput)
}

// Representing which tracks should not be encrypted
func (o CommonEncryptionCbcsResponseOutput) ClearTracks() TrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v CommonEncryptionCbcsResponse) []TrackSelectionResponse { return v.ClearTracks }).(TrackSelectionResponseArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o CommonEncryptionCbcsResponseOutput) ContentKeys() StreamingPolicyContentKeysResponsePtrOutput {
	return o.ApplyT(func(v CommonEncryptionCbcsResponse) *StreamingPolicyContentKeysResponse { return v.ContentKeys }).(StreamingPolicyContentKeysResponsePtrOutput)
}

// Configuration of DRMs for current encryption scheme
func (o CommonEncryptionCbcsResponseOutput) Drm() CbcsDrmConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CommonEncryptionCbcsResponse) *CbcsDrmConfigurationResponse { return v.Drm }).(CbcsDrmConfigurationResponsePtrOutput)
}

// Representing supported protocols
func (o CommonEncryptionCbcsResponseOutput) EnabledProtocols() EnabledProtocolsResponsePtrOutput {
	return o.ApplyT(func(v CommonEncryptionCbcsResponse) *EnabledProtocolsResponse { return v.EnabledProtocols }).(EnabledProtocolsResponsePtrOutput)
}

type CommonEncryptionCbcsResponsePtrOutput struct{ *pulumi.OutputState }

func (CommonEncryptionCbcsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonEncryptionCbcsResponse)(nil)).Elem()
}

func (o CommonEncryptionCbcsResponsePtrOutput) ToCommonEncryptionCbcsResponsePtrOutput() CommonEncryptionCbcsResponsePtrOutput {
	return o
}

func (o CommonEncryptionCbcsResponsePtrOutput) ToCommonEncryptionCbcsResponsePtrOutputWithContext(ctx context.Context) CommonEncryptionCbcsResponsePtrOutput {
	return o
}

func (o CommonEncryptionCbcsResponsePtrOutput) Elem() CommonEncryptionCbcsResponseOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcsResponse) CommonEncryptionCbcsResponse { return *v }).(CommonEncryptionCbcsResponseOutput)
}

// Representing which tracks should not be encrypted
func (o CommonEncryptionCbcsResponsePtrOutput) ClearTracks() TrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcsResponse) []TrackSelectionResponse {
		if v == nil {
			return nil
		}
		return v.ClearTracks
	}).(TrackSelectionResponseArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o CommonEncryptionCbcsResponsePtrOutput) ContentKeys() StreamingPolicyContentKeysResponsePtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcsResponse) *StreamingPolicyContentKeysResponse {
		if v == nil {
			return nil
		}
		return v.ContentKeys
	}).(StreamingPolicyContentKeysResponsePtrOutput)
}

// Configuration of DRMs for current encryption scheme
func (o CommonEncryptionCbcsResponsePtrOutput) Drm() CbcsDrmConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcsResponse) *CbcsDrmConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Drm
	}).(CbcsDrmConfigurationResponsePtrOutput)
}

// Representing supported protocols
func (o CommonEncryptionCbcsResponsePtrOutput) EnabledProtocols() EnabledProtocolsResponsePtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcsResponse) *EnabledProtocolsResponse {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(EnabledProtocolsResponsePtrOutput)
}

// Class for envelope encryption scheme
type CommonEncryptionCenc struct {
	// Representing which tracks should not be encrypted
	ClearTracks []TrackSelection `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys *StreamingPolicyContentKeys `pulumi:"contentKeys"`
	// Configuration of DRMs for CommonEncryptionCenc encryption scheme
	Drm *CencDrmConfiguration `pulumi:"drm"`
	// Representing supported protocols
	EnabledProtocols *EnabledProtocols `pulumi:"enabledProtocols"`
}

// CommonEncryptionCencInput is an input type that accepts CommonEncryptionCencArgs and CommonEncryptionCencOutput values.
// You can construct a concrete instance of `CommonEncryptionCencInput` via:
//
//          CommonEncryptionCencArgs{...}
type CommonEncryptionCencInput interface {
	pulumi.Input

	ToCommonEncryptionCencOutput() CommonEncryptionCencOutput
	ToCommonEncryptionCencOutputWithContext(context.Context) CommonEncryptionCencOutput
}

// Class for envelope encryption scheme
type CommonEncryptionCencArgs struct {
	// Representing which tracks should not be encrypted
	ClearTracks TrackSelectionArrayInput `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys StreamingPolicyContentKeysPtrInput `pulumi:"contentKeys"`
	// Configuration of DRMs for CommonEncryptionCenc encryption scheme
	Drm CencDrmConfigurationPtrInput `pulumi:"drm"`
	// Representing supported protocols
	EnabledProtocols EnabledProtocolsPtrInput `pulumi:"enabledProtocols"`
}

func (CommonEncryptionCencArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonEncryptionCenc)(nil)).Elem()
}

func (i CommonEncryptionCencArgs) ToCommonEncryptionCencOutput() CommonEncryptionCencOutput {
	return i.ToCommonEncryptionCencOutputWithContext(context.Background())
}

func (i CommonEncryptionCencArgs) ToCommonEncryptionCencOutputWithContext(ctx context.Context) CommonEncryptionCencOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCencOutput)
}

func (i CommonEncryptionCencArgs) ToCommonEncryptionCencPtrOutput() CommonEncryptionCencPtrOutput {
	return i.ToCommonEncryptionCencPtrOutputWithContext(context.Background())
}

func (i CommonEncryptionCencArgs) ToCommonEncryptionCencPtrOutputWithContext(ctx context.Context) CommonEncryptionCencPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCencOutput).ToCommonEncryptionCencPtrOutputWithContext(ctx)
}

// CommonEncryptionCencPtrInput is an input type that accepts CommonEncryptionCencArgs, CommonEncryptionCencPtr and CommonEncryptionCencPtrOutput values.
// You can construct a concrete instance of `CommonEncryptionCencPtrInput` via:
//
//          CommonEncryptionCencArgs{...}
//
//  or:
//
//          nil
type CommonEncryptionCencPtrInput interface {
	pulumi.Input

	ToCommonEncryptionCencPtrOutput() CommonEncryptionCencPtrOutput
	ToCommonEncryptionCencPtrOutputWithContext(context.Context) CommonEncryptionCencPtrOutput
}

type commonEncryptionCencPtrType CommonEncryptionCencArgs

func CommonEncryptionCencPtr(v *CommonEncryptionCencArgs) CommonEncryptionCencPtrInput {
	return (*commonEncryptionCencPtrType)(v)
}

func (*commonEncryptionCencPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonEncryptionCenc)(nil)).Elem()
}

func (i *commonEncryptionCencPtrType) ToCommonEncryptionCencPtrOutput() CommonEncryptionCencPtrOutput {
	return i.ToCommonEncryptionCencPtrOutputWithContext(context.Background())
}

func (i *commonEncryptionCencPtrType) ToCommonEncryptionCencPtrOutputWithContext(ctx context.Context) CommonEncryptionCencPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCencPtrOutput)
}

// Class for envelope encryption scheme
type CommonEncryptionCencOutput struct{ *pulumi.OutputState }

func (CommonEncryptionCencOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonEncryptionCenc)(nil)).Elem()
}

func (o CommonEncryptionCencOutput) ToCommonEncryptionCencOutput() CommonEncryptionCencOutput {
	return o
}

func (o CommonEncryptionCencOutput) ToCommonEncryptionCencOutputWithContext(ctx context.Context) CommonEncryptionCencOutput {
	return o
}

func (o CommonEncryptionCencOutput) ToCommonEncryptionCencPtrOutput() CommonEncryptionCencPtrOutput {
	return o.ToCommonEncryptionCencPtrOutputWithContext(context.Background())
}

func (o CommonEncryptionCencOutput) ToCommonEncryptionCencPtrOutputWithContext(ctx context.Context) CommonEncryptionCencPtrOutput {
	return o.ApplyT(func(v CommonEncryptionCenc) *CommonEncryptionCenc {
		return &v
	}).(CommonEncryptionCencPtrOutput)
}

// Representing which tracks should not be encrypted
func (o CommonEncryptionCencOutput) ClearTracks() TrackSelectionArrayOutput {
	return o.ApplyT(func(v CommonEncryptionCenc) []TrackSelection { return v.ClearTracks }).(TrackSelectionArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o CommonEncryptionCencOutput) ContentKeys() StreamingPolicyContentKeysPtrOutput {
	return o.ApplyT(func(v CommonEncryptionCenc) *StreamingPolicyContentKeys { return v.ContentKeys }).(StreamingPolicyContentKeysPtrOutput)
}

// Configuration of DRMs for CommonEncryptionCenc encryption scheme
func (o CommonEncryptionCencOutput) Drm() CencDrmConfigurationPtrOutput {
	return o.ApplyT(func(v CommonEncryptionCenc) *CencDrmConfiguration { return v.Drm }).(CencDrmConfigurationPtrOutput)
}

// Representing supported protocols
func (o CommonEncryptionCencOutput) EnabledProtocols() EnabledProtocolsPtrOutput {
	return o.ApplyT(func(v CommonEncryptionCenc) *EnabledProtocols { return v.EnabledProtocols }).(EnabledProtocolsPtrOutput)
}

type CommonEncryptionCencPtrOutput struct{ *pulumi.OutputState }

func (CommonEncryptionCencPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonEncryptionCenc)(nil)).Elem()
}

func (o CommonEncryptionCencPtrOutput) ToCommonEncryptionCencPtrOutput() CommonEncryptionCencPtrOutput {
	return o
}

func (o CommonEncryptionCencPtrOutput) ToCommonEncryptionCencPtrOutputWithContext(ctx context.Context) CommonEncryptionCencPtrOutput {
	return o
}

func (o CommonEncryptionCencPtrOutput) Elem() CommonEncryptionCencOutput {
	return o.ApplyT(func(v *CommonEncryptionCenc) CommonEncryptionCenc { return *v }).(CommonEncryptionCencOutput)
}

// Representing which tracks should not be encrypted
func (o CommonEncryptionCencPtrOutput) ClearTracks() TrackSelectionArrayOutput {
	return o.ApplyT(func(v *CommonEncryptionCenc) []TrackSelection {
		if v == nil {
			return nil
		}
		return v.ClearTracks
	}).(TrackSelectionArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o CommonEncryptionCencPtrOutput) ContentKeys() StreamingPolicyContentKeysPtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCenc) *StreamingPolicyContentKeys {
		if v == nil {
			return nil
		}
		return v.ContentKeys
	}).(StreamingPolicyContentKeysPtrOutput)
}

// Configuration of DRMs for CommonEncryptionCenc encryption scheme
func (o CommonEncryptionCencPtrOutput) Drm() CencDrmConfigurationPtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCenc) *CencDrmConfiguration {
		if v == nil {
			return nil
		}
		return v.Drm
	}).(CencDrmConfigurationPtrOutput)
}

// Representing supported protocols
func (o CommonEncryptionCencPtrOutput) EnabledProtocols() EnabledProtocolsPtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCenc) *EnabledProtocols {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(EnabledProtocolsPtrOutput)
}

// Class for envelope encryption scheme
type CommonEncryptionCencResponse struct {
	// Representing which tracks should not be encrypted
	ClearTracks []TrackSelectionResponse `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys *StreamingPolicyContentKeysResponse `pulumi:"contentKeys"`
	// Configuration of DRMs for CommonEncryptionCenc encryption scheme
	Drm *CencDrmConfigurationResponse `pulumi:"drm"`
	// Representing supported protocols
	EnabledProtocols *EnabledProtocolsResponse `pulumi:"enabledProtocols"`
}

// CommonEncryptionCencResponseInput is an input type that accepts CommonEncryptionCencResponseArgs and CommonEncryptionCencResponseOutput values.
// You can construct a concrete instance of `CommonEncryptionCencResponseInput` via:
//
//          CommonEncryptionCencResponseArgs{...}
type CommonEncryptionCencResponseInput interface {
	pulumi.Input

	ToCommonEncryptionCencResponseOutput() CommonEncryptionCencResponseOutput
	ToCommonEncryptionCencResponseOutputWithContext(context.Context) CommonEncryptionCencResponseOutput
}

// Class for envelope encryption scheme
type CommonEncryptionCencResponseArgs struct {
	// Representing which tracks should not be encrypted
	ClearTracks TrackSelectionResponseArrayInput `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys StreamingPolicyContentKeysResponsePtrInput `pulumi:"contentKeys"`
	// Configuration of DRMs for CommonEncryptionCenc encryption scheme
	Drm CencDrmConfigurationResponsePtrInput `pulumi:"drm"`
	// Representing supported protocols
	EnabledProtocols EnabledProtocolsResponsePtrInput `pulumi:"enabledProtocols"`
}

func (CommonEncryptionCencResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonEncryptionCencResponse)(nil)).Elem()
}

func (i CommonEncryptionCencResponseArgs) ToCommonEncryptionCencResponseOutput() CommonEncryptionCencResponseOutput {
	return i.ToCommonEncryptionCencResponseOutputWithContext(context.Background())
}

func (i CommonEncryptionCencResponseArgs) ToCommonEncryptionCencResponseOutputWithContext(ctx context.Context) CommonEncryptionCencResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCencResponseOutput)
}

func (i CommonEncryptionCencResponseArgs) ToCommonEncryptionCencResponsePtrOutput() CommonEncryptionCencResponsePtrOutput {
	return i.ToCommonEncryptionCencResponsePtrOutputWithContext(context.Background())
}

func (i CommonEncryptionCencResponseArgs) ToCommonEncryptionCencResponsePtrOutputWithContext(ctx context.Context) CommonEncryptionCencResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCencResponseOutput).ToCommonEncryptionCencResponsePtrOutputWithContext(ctx)
}

// CommonEncryptionCencResponsePtrInput is an input type that accepts CommonEncryptionCencResponseArgs, CommonEncryptionCencResponsePtr and CommonEncryptionCencResponsePtrOutput values.
// You can construct a concrete instance of `CommonEncryptionCencResponsePtrInput` via:
//
//          CommonEncryptionCencResponseArgs{...}
//
//  or:
//
//          nil
type CommonEncryptionCencResponsePtrInput interface {
	pulumi.Input

	ToCommonEncryptionCencResponsePtrOutput() CommonEncryptionCencResponsePtrOutput
	ToCommonEncryptionCencResponsePtrOutputWithContext(context.Context) CommonEncryptionCencResponsePtrOutput
}

type commonEncryptionCencResponsePtrType CommonEncryptionCencResponseArgs

func CommonEncryptionCencResponsePtr(v *CommonEncryptionCencResponseArgs) CommonEncryptionCencResponsePtrInput {
	return (*commonEncryptionCencResponsePtrType)(v)
}

func (*commonEncryptionCencResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonEncryptionCencResponse)(nil)).Elem()
}

func (i *commonEncryptionCencResponsePtrType) ToCommonEncryptionCencResponsePtrOutput() CommonEncryptionCencResponsePtrOutput {
	return i.ToCommonEncryptionCencResponsePtrOutputWithContext(context.Background())
}

func (i *commonEncryptionCencResponsePtrType) ToCommonEncryptionCencResponsePtrOutputWithContext(ctx context.Context) CommonEncryptionCencResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCencResponsePtrOutput)
}

// Class for envelope encryption scheme
type CommonEncryptionCencResponseOutput struct{ *pulumi.OutputState }

func (CommonEncryptionCencResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonEncryptionCencResponse)(nil)).Elem()
}

func (o CommonEncryptionCencResponseOutput) ToCommonEncryptionCencResponseOutput() CommonEncryptionCencResponseOutput {
	return o
}

func (o CommonEncryptionCencResponseOutput) ToCommonEncryptionCencResponseOutputWithContext(ctx context.Context) CommonEncryptionCencResponseOutput {
	return o
}

func (o CommonEncryptionCencResponseOutput) ToCommonEncryptionCencResponsePtrOutput() CommonEncryptionCencResponsePtrOutput {
	return o.ToCommonEncryptionCencResponsePtrOutputWithContext(context.Background())
}

func (o CommonEncryptionCencResponseOutput) ToCommonEncryptionCencResponsePtrOutputWithContext(ctx context.Context) CommonEncryptionCencResponsePtrOutput {
	return o.ApplyT(func(v CommonEncryptionCencResponse) *CommonEncryptionCencResponse {
		return &v
	}).(CommonEncryptionCencResponsePtrOutput)
}

// Representing which tracks should not be encrypted
func (o CommonEncryptionCencResponseOutput) ClearTracks() TrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v CommonEncryptionCencResponse) []TrackSelectionResponse { return v.ClearTracks }).(TrackSelectionResponseArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o CommonEncryptionCencResponseOutput) ContentKeys() StreamingPolicyContentKeysResponsePtrOutput {
	return o.ApplyT(func(v CommonEncryptionCencResponse) *StreamingPolicyContentKeysResponse { return v.ContentKeys }).(StreamingPolicyContentKeysResponsePtrOutput)
}

// Configuration of DRMs for CommonEncryptionCenc encryption scheme
func (o CommonEncryptionCencResponseOutput) Drm() CencDrmConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CommonEncryptionCencResponse) *CencDrmConfigurationResponse { return v.Drm }).(CencDrmConfigurationResponsePtrOutput)
}

// Representing supported protocols
func (o CommonEncryptionCencResponseOutput) EnabledProtocols() EnabledProtocolsResponsePtrOutput {
	return o.ApplyT(func(v CommonEncryptionCencResponse) *EnabledProtocolsResponse { return v.EnabledProtocols }).(EnabledProtocolsResponsePtrOutput)
}

type CommonEncryptionCencResponsePtrOutput struct{ *pulumi.OutputState }

func (CommonEncryptionCencResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonEncryptionCencResponse)(nil)).Elem()
}

func (o CommonEncryptionCencResponsePtrOutput) ToCommonEncryptionCencResponsePtrOutput() CommonEncryptionCencResponsePtrOutput {
	return o
}

func (o CommonEncryptionCencResponsePtrOutput) ToCommonEncryptionCencResponsePtrOutputWithContext(ctx context.Context) CommonEncryptionCencResponsePtrOutput {
	return o
}

func (o CommonEncryptionCencResponsePtrOutput) Elem() CommonEncryptionCencResponseOutput {
	return o.ApplyT(func(v *CommonEncryptionCencResponse) CommonEncryptionCencResponse { return *v }).(CommonEncryptionCencResponseOutput)
}

// Representing which tracks should not be encrypted
func (o CommonEncryptionCencResponsePtrOutput) ClearTracks() TrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v *CommonEncryptionCencResponse) []TrackSelectionResponse {
		if v == nil {
			return nil
		}
		return v.ClearTracks
	}).(TrackSelectionResponseArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o CommonEncryptionCencResponsePtrOutput) ContentKeys() StreamingPolicyContentKeysResponsePtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCencResponse) *StreamingPolicyContentKeysResponse {
		if v == nil {
			return nil
		}
		return v.ContentKeys
	}).(StreamingPolicyContentKeysResponsePtrOutput)
}

// Configuration of DRMs for CommonEncryptionCenc encryption scheme
func (o CommonEncryptionCencResponsePtrOutput) Drm() CencDrmConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCencResponse) *CencDrmConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Drm
	}).(CencDrmConfigurationResponsePtrOutput)
}

// Representing supported protocols
func (o CommonEncryptionCencResponsePtrOutput) EnabledProtocols() EnabledProtocolsResponsePtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCencResponse) *EnabledProtocolsResponse {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(EnabledProtocolsResponsePtrOutput)
}

// Represents a configuration for non-DRM keys.
type ContentKeyPolicyClearKeyConfiguration struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// ContentKeyPolicyClearKeyConfigurationInput is an input type that accepts ContentKeyPolicyClearKeyConfigurationArgs and ContentKeyPolicyClearKeyConfigurationOutput values.
// You can construct a concrete instance of `ContentKeyPolicyClearKeyConfigurationInput` via:
//
//          ContentKeyPolicyClearKeyConfigurationArgs{...}
type ContentKeyPolicyClearKeyConfigurationInput interface {
	pulumi.Input

	ToContentKeyPolicyClearKeyConfigurationOutput() ContentKeyPolicyClearKeyConfigurationOutput
	ToContentKeyPolicyClearKeyConfigurationOutputWithContext(context.Context) ContentKeyPolicyClearKeyConfigurationOutput
}

// Represents a configuration for non-DRM keys.
type ContentKeyPolicyClearKeyConfigurationArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (ContentKeyPolicyClearKeyConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyClearKeyConfiguration)(nil)).Elem()
}

func (i ContentKeyPolicyClearKeyConfigurationArgs) ToContentKeyPolicyClearKeyConfigurationOutput() ContentKeyPolicyClearKeyConfigurationOutput {
	return i.ToContentKeyPolicyClearKeyConfigurationOutputWithContext(context.Background())
}

func (i ContentKeyPolicyClearKeyConfigurationArgs) ToContentKeyPolicyClearKeyConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyClearKeyConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyClearKeyConfigurationOutput)
}

// Represents a configuration for non-DRM keys.
type ContentKeyPolicyClearKeyConfigurationOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyClearKeyConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyClearKeyConfiguration)(nil)).Elem()
}

func (o ContentKeyPolicyClearKeyConfigurationOutput) ToContentKeyPolicyClearKeyConfigurationOutput() ContentKeyPolicyClearKeyConfigurationOutput {
	return o
}

func (o ContentKeyPolicyClearKeyConfigurationOutput) ToContentKeyPolicyClearKeyConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyClearKeyConfigurationOutput {
	return o
}

// The discriminator for derived types.
func (o ContentKeyPolicyClearKeyConfigurationOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyClearKeyConfiguration) string { return v.OdataType }).(pulumi.StringOutput)
}

// Represents a configuration for non-DRM keys.
type ContentKeyPolicyClearKeyConfigurationResponse struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// ContentKeyPolicyClearKeyConfigurationResponseInput is an input type that accepts ContentKeyPolicyClearKeyConfigurationResponseArgs and ContentKeyPolicyClearKeyConfigurationResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyClearKeyConfigurationResponseInput` via:
//
//          ContentKeyPolicyClearKeyConfigurationResponseArgs{...}
type ContentKeyPolicyClearKeyConfigurationResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyClearKeyConfigurationResponseOutput() ContentKeyPolicyClearKeyConfigurationResponseOutput
	ToContentKeyPolicyClearKeyConfigurationResponseOutputWithContext(context.Context) ContentKeyPolicyClearKeyConfigurationResponseOutput
}

// Represents a configuration for non-DRM keys.
type ContentKeyPolicyClearKeyConfigurationResponseArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (ContentKeyPolicyClearKeyConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyClearKeyConfigurationResponse)(nil)).Elem()
}

func (i ContentKeyPolicyClearKeyConfigurationResponseArgs) ToContentKeyPolicyClearKeyConfigurationResponseOutput() ContentKeyPolicyClearKeyConfigurationResponseOutput {
	return i.ToContentKeyPolicyClearKeyConfigurationResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyClearKeyConfigurationResponseArgs) ToContentKeyPolicyClearKeyConfigurationResponseOutputWithContext(ctx context.Context) ContentKeyPolicyClearKeyConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyClearKeyConfigurationResponseOutput)
}

// Represents a configuration for non-DRM keys.
type ContentKeyPolicyClearKeyConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyClearKeyConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyClearKeyConfigurationResponse)(nil)).Elem()
}

func (o ContentKeyPolicyClearKeyConfigurationResponseOutput) ToContentKeyPolicyClearKeyConfigurationResponseOutput() ContentKeyPolicyClearKeyConfigurationResponseOutput {
	return o
}

func (o ContentKeyPolicyClearKeyConfigurationResponseOutput) ToContentKeyPolicyClearKeyConfigurationResponseOutputWithContext(ctx context.Context) ContentKeyPolicyClearKeyConfigurationResponseOutput {
	return o
}

// The discriminator for derived types.
func (o ContentKeyPolicyClearKeyConfigurationResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyClearKeyConfigurationResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Specifies a configuration for FairPlay licenses.
type ContentKeyPolicyFairPlayConfiguration struct {
	// The key that must be used as FairPlay Application Secret key.
	Ask string `pulumi:"ask"`
	// The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
	FairPlayPfx string `pulumi:"fairPlayPfx"`
	// The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
	FairPlayPfxPassword string `pulumi:"fairPlayPfxPassword"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// Offline rental policy
	OfflineRentalConfiguration *ContentKeyPolicyFairPlayOfflineRentalConfiguration `pulumi:"offlineRentalConfiguration"`
	// The rental and lease key type.
	RentalAndLeaseKeyType string `pulumi:"rentalAndLeaseKeyType"`
	// The rental duration. Must be greater than or equal to 0.
	RentalDuration int `pulumi:"rentalDuration"`
}

// ContentKeyPolicyFairPlayConfigurationInput is an input type that accepts ContentKeyPolicyFairPlayConfigurationArgs and ContentKeyPolicyFairPlayConfigurationOutput values.
// You can construct a concrete instance of `ContentKeyPolicyFairPlayConfigurationInput` via:
//
//          ContentKeyPolicyFairPlayConfigurationArgs{...}
type ContentKeyPolicyFairPlayConfigurationInput interface {
	pulumi.Input

	ToContentKeyPolicyFairPlayConfigurationOutput() ContentKeyPolicyFairPlayConfigurationOutput
	ToContentKeyPolicyFairPlayConfigurationOutputWithContext(context.Context) ContentKeyPolicyFairPlayConfigurationOutput
}

// Specifies a configuration for FairPlay licenses.
type ContentKeyPolicyFairPlayConfigurationArgs struct {
	// The key that must be used as FairPlay Application Secret key.
	Ask pulumi.StringInput `pulumi:"ask"`
	// The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
	FairPlayPfx pulumi.StringInput `pulumi:"fairPlayPfx"`
	// The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
	FairPlayPfxPassword pulumi.StringInput `pulumi:"fairPlayPfxPassword"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// Offline rental policy
	OfflineRentalConfiguration ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrInput `pulumi:"offlineRentalConfiguration"`
	// The rental and lease key type.
	RentalAndLeaseKeyType pulumi.StringInput `pulumi:"rentalAndLeaseKeyType"`
	// The rental duration. Must be greater than or equal to 0.
	RentalDuration pulumi.IntInput `pulumi:"rentalDuration"`
}

func (ContentKeyPolicyFairPlayConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyFairPlayConfiguration)(nil)).Elem()
}

func (i ContentKeyPolicyFairPlayConfigurationArgs) ToContentKeyPolicyFairPlayConfigurationOutput() ContentKeyPolicyFairPlayConfigurationOutput {
	return i.ToContentKeyPolicyFairPlayConfigurationOutputWithContext(context.Background())
}

func (i ContentKeyPolicyFairPlayConfigurationArgs) ToContentKeyPolicyFairPlayConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyFairPlayConfigurationOutput)
}

// Specifies a configuration for FairPlay licenses.
type ContentKeyPolicyFairPlayConfigurationOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyFairPlayConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyFairPlayConfiguration)(nil)).Elem()
}

func (o ContentKeyPolicyFairPlayConfigurationOutput) ToContentKeyPolicyFairPlayConfigurationOutput() ContentKeyPolicyFairPlayConfigurationOutput {
	return o
}

func (o ContentKeyPolicyFairPlayConfigurationOutput) ToContentKeyPolicyFairPlayConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayConfigurationOutput {
	return o
}

// The key that must be used as FairPlay Application Secret key.
func (o ContentKeyPolicyFairPlayConfigurationOutput) Ask() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayConfiguration) string { return v.Ask }).(pulumi.StringOutput)
}

// The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
func (o ContentKeyPolicyFairPlayConfigurationOutput) FairPlayPfx() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayConfiguration) string { return v.FairPlayPfx }).(pulumi.StringOutput)
}

// The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
func (o ContentKeyPolicyFairPlayConfigurationOutput) FairPlayPfxPassword() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayConfiguration) string { return v.FairPlayPfxPassword }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o ContentKeyPolicyFairPlayConfigurationOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayConfiguration) string { return v.OdataType }).(pulumi.StringOutput)
}

// Offline rental policy
func (o ContentKeyPolicyFairPlayConfigurationOutput) OfflineRentalConfiguration() ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayConfiguration) *ContentKeyPolicyFairPlayOfflineRentalConfiguration {
		return v.OfflineRentalConfiguration
	}).(ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput)
}

// The rental and lease key type.
func (o ContentKeyPolicyFairPlayConfigurationOutput) RentalAndLeaseKeyType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayConfiguration) string { return v.RentalAndLeaseKeyType }).(pulumi.StringOutput)
}

// The rental duration. Must be greater than or equal to 0.
func (o ContentKeyPolicyFairPlayConfigurationOutput) RentalDuration() pulumi.IntOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayConfiguration) int { return v.RentalDuration }).(pulumi.IntOutput)
}

// Specifies a configuration for FairPlay licenses.
type ContentKeyPolicyFairPlayConfigurationResponse struct {
	// The key that must be used as FairPlay Application Secret key.
	Ask string `pulumi:"ask"`
	// The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
	FairPlayPfx string `pulumi:"fairPlayPfx"`
	// The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
	FairPlayPfxPassword string `pulumi:"fairPlayPfxPassword"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// Offline rental policy
	OfflineRentalConfiguration *ContentKeyPolicyFairPlayOfflineRentalConfigurationResponse `pulumi:"offlineRentalConfiguration"`
	// The rental and lease key type.
	RentalAndLeaseKeyType string `pulumi:"rentalAndLeaseKeyType"`
	// The rental duration. Must be greater than or equal to 0.
	RentalDuration int `pulumi:"rentalDuration"`
}

// ContentKeyPolicyFairPlayConfigurationResponseInput is an input type that accepts ContentKeyPolicyFairPlayConfigurationResponseArgs and ContentKeyPolicyFairPlayConfigurationResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyFairPlayConfigurationResponseInput` via:
//
//          ContentKeyPolicyFairPlayConfigurationResponseArgs{...}
type ContentKeyPolicyFairPlayConfigurationResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyFairPlayConfigurationResponseOutput() ContentKeyPolicyFairPlayConfigurationResponseOutput
	ToContentKeyPolicyFairPlayConfigurationResponseOutputWithContext(context.Context) ContentKeyPolicyFairPlayConfigurationResponseOutput
}

// Specifies a configuration for FairPlay licenses.
type ContentKeyPolicyFairPlayConfigurationResponseArgs struct {
	// The key that must be used as FairPlay Application Secret key.
	Ask pulumi.StringInput `pulumi:"ask"`
	// The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
	FairPlayPfx pulumi.StringInput `pulumi:"fairPlayPfx"`
	// The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
	FairPlayPfxPassword pulumi.StringInput `pulumi:"fairPlayPfxPassword"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// Offline rental policy
	OfflineRentalConfiguration ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrInput `pulumi:"offlineRentalConfiguration"`
	// The rental and lease key type.
	RentalAndLeaseKeyType pulumi.StringInput `pulumi:"rentalAndLeaseKeyType"`
	// The rental duration. Must be greater than or equal to 0.
	RentalDuration pulumi.IntInput `pulumi:"rentalDuration"`
}

func (ContentKeyPolicyFairPlayConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyFairPlayConfigurationResponse)(nil)).Elem()
}

func (i ContentKeyPolicyFairPlayConfigurationResponseArgs) ToContentKeyPolicyFairPlayConfigurationResponseOutput() ContentKeyPolicyFairPlayConfigurationResponseOutput {
	return i.ToContentKeyPolicyFairPlayConfigurationResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyFairPlayConfigurationResponseArgs) ToContentKeyPolicyFairPlayConfigurationResponseOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyFairPlayConfigurationResponseOutput)
}

// Specifies a configuration for FairPlay licenses.
type ContentKeyPolicyFairPlayConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyFairPlayConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyFairPlayConfigurationResponse)(nil)).Elem()
}

func (o ContentKeyPolicyFairPlayConfigurationResponseOutput) ToContentKeyPolicyFairPlayConfigurationResponseOutput() ContentKeyPolicyFairPlayConfigurationResponseOutput {
	return o
}

func (o ContentKeyPolicyFairPlayConfigurationResponseOutput) ToContentKeyPolicyFairPlayConfigurationResponseOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayConfigurationResponseOutput {
	return o
}

// The key that must be used as FairPlay Application Secret key.
func (o ContentKeyPolicyFairPlayConfigurationResponseOutput) Ask() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayConfigurationResponse) string { return v.Ask }).(pulumi.StringOutput)
}

// The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
func (o ContentKeyPolicyFairPlayConfigurationResponseOutput) FairPlayPfx() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayConfigurationResponse) string { return v.FairPlayPfx }).(pulumi.StringOutput)
}

// The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
func (o ContentKeyPolicyFairPlayConfigurationResponseOutput) FairPlayPfxPassword() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayConfigurationResponse) string { return v.FairPlayPfxPassword }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o ContentKeyPolicyFairPlayConfigurationResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayConfigurationResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Offline rental policy
func (o ContentKeyPolicyFairPlayConfigurationResponseOutput) OfflineRentalConfiguration() ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayConfigurationResponse) *ContentKeyPolicyFairPlayOfflineRentalConfigurationResponse {
		return v.OfflineRentalConfiguration
	}).(ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput)
}

// The rental and lease key type.
func (o ContentKeyPolicyFairPlayConfigurationResponseOutput) RentalAndLeaseKeyType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayConfigurationResponse) string { return v.RentalAndLeaseKeyType }).(pulumi.StringOutput)
}

// The rental duration. Must be greater than or equal to 0.
func (o ContentKeyPolicyFairPlayConfigurationResponseOutput) RentalDuration() pulumi.IntOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayConfigurationResponse) int { return v.RentalDuration }).(pulumi.IntOutput)
}

type ContentKeyPolicyFairPlayOfflineRentalConfiguration struct {
	// Playback duration
	PlaybackDurationSeconds int `pulumi:"playbackDurationSeconds"`
	// Storage duration
	StorageDurationSeconds int `pulumi:"storageDurationSeconds"`
}

// ContentKeyPolicyFairPlayOfflineRentalConfigurationInput is an input type that accepts ContentKeyPolicyFairPlayOfflineRentalConfigurationArgs and ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput values.
// You can construct a concrete instance of `ContentKeyPolicyFairPlayOfflineRentalConfigurationInput` via:
//
//          ContentKeyPolicyFairPlayOfflineRentalConfigurationArgs{...}
type ContentKeyPolicyFairPlayOfflineRentalConfigurationInput interface {
	pulumi.Input

	ToContentKeyPolicyFairPlayOfflineRentalConfigurationOutput() ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput
	ToContentKeyPolicyFairPlayOfflineRentalConfigurationOutputWithContext(context.Context) ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput
}

type ContentKeyPolicyFairPlayOfflineRentalConfigurationArgs struct {
	// Playback duration
	PlaybackDurationSeconds pulumi.IntInput `pulumi:"playbackDurationSeconds"`
	// Storage duration
	StorageDurationSeconds pulumi.IntInput `pulumi:"storageDurationSeconds"`
}

func (ContentKeyPolicyFairPlayOfflineRentalConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyFairPlayOfflineRentalConfiguration)(nil)).Elem()
}

func (i ContentKeyPolicyFairPlayOfflineRentalConfigurationArgs) ToContentKeyPolicyFairPlayOfflineRentalConfigurationOutput() ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput {
	return i.ToContentKeyPolicyFairPlayOfflineRentalConfigurationOutputWithContext(context.Background())
}

func (i ContentKeyPolicyFairPlayOfflineRentalConfigurationArgs) ToContentKeyPolicyFairPlayOfflineRentalConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput)
}

func (i ContentKeyPolicyFairPlayOfflineRentalConfigurationArgs) ToContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput() ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput {
	return i.ToContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutputWithContext(context.Background())
}

func (i ContentKeyPolicyFairPlayOfflineRentalConfigurationArgs) ToContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput).ToContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutputWithContext(ctx)
}

// ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrInput is an input type that accepts ContentKeyPolicyFairPlayOfflineRentalConfigurationArgs, ContentKeyPolicyFairPlayOfflineRentalConfigurationPtr and ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput values.
// You can construct a concrete instance of `ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrInput` via:
//
//          ContentKeyPolicyFairPlayOfflineRentalConfigurationArgs{...}
//
//  or:
//
//          nil
type ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrInput interface {
	pulumi.Input

	ToContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput() ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput
	ToContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutputWithContext(context.Context) ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput
}

type contentKeyPolicyFairPlayOfflineRentalConfigurationPtrType ContentKeyPolicyFairPlayOfflineRentalConfigurationArgs

func ContentKeyPolicyFairPlayOfflineRentalConfigurationPtr(v *ContentKeyPolicyFairPlayOfflineRentalConfigurationArgs) ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrInput {
	return (*contentKeyPolicyFairPlayOfflineRentalConfigurationPtrType)(v)
}

func (*contentKeyPolicyFairPlayOfflineRentalConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyFairPlayOfflineRentalConfiguration)(nil)).Elem()
}

func (i *contentKeyPolicyFairPlayOfflineRentalConfigurationPtrType) ToContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput() ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput {
	return i.ToContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutputWithContext(context.Background())
}

func (i *contentKeyPolicyFairPlayOfflineRentalConfigurationPtrType) ToContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput)
}

type ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyFairPlayOfflineRentalConfiguration)(nil)).Elem()
}

func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput) ToContentKeyPolicyFairPlayOfflineRentalConfigurationOutput() ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput {
	return o
}

func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput) ToContentKeyPolicyFairPlayOfflineRentalConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput {
	return o
}

func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput) ToContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput() ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput {
	return o.ToContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput) ToContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayOfflineRentalConfiguration) *ContentKeyPolicyFairPlayOfflineRentalConfiguration {
		return &v
	}).(ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput)
}

// Playback duration
func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput) PlaybackDurationSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayOfflineRentalConfiguration) int { return v.PlaybackDurationSeconds }).(pulumi.IntOutput)
}

// Storage duration
func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput) StorageDurationSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayOfflineRentalConfiguration) int { return v.StorageDurationSeconds }).(pulumi.IntOutput)
}

type ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyFairPlayOfflineRentalConfiguration)(nil)).Elem()
}

func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput) ToContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput() ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput {
	return o
}

func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput) ToContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput {
	return o
}

func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput) Elem() ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput {
	return o.ApplyT(func(v *ContentKeyPolicyFairPlayOfflineRentalConfiguration) ContentKeyPolicyFairPlayOfflineRentalConfiguration {
		return *v
	}).(ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput)
}

// Playback duration
func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput) PlaybackDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyFairPlayOfflineRentalConfiguration) *int {
		if v == nil {
			return nil
		}
		return &v.PlaybackDurationSeconds
	}).(pulumi.IntPtrOutput)
}

// Storage duration
func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput) StorageDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyFairPlayOfflineRentalConfiguration) *int {
		if v == nil {
			return nil
		}
		return &v.StorageDurationSeconds
	}).(pulumi.IntPtrOutput)
}

type ContentKeyPolicyFairPlayOfflineRentalConfigurationResponse struct {
	// Playback duration
	PlaybackDurationSeconds int `pulumi:"playbackDurationSeconds"`
	// Storage duration
	StorageDurationSeconds int `pulumi:"storageDurationSeconds"`
}

// ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseInput is an input type that accepts ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseArgs and ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseInput` via:
//
//          ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseArgs{...}
type ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput() ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput
	ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutputWithContext(context.Context) ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput
}

type ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseArgs struct {
	// Playback duration
	PlaybackDurationSeconds pulumi.IntInput `pulumi:"playbackDurationSeconds"`
	// Storage duration
	StorageDurationSeconds pulumi.IntInput `pulumi:"storageDurationSeconds"`
}

func (ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyFairPlayOfflineRentalConfigurationResponse)(nil)).Elem()
}

func (i ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseArgs) ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput() ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput {
	return i.ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseArgs) ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput)
}

func (i ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseArgs) ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput() ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput {
	return i.ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseArgs) ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput).ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutputWithContext(ctx)
}

// ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrInput is an input type that accepts ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseArgs, ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtr and ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrInput` via:
//
//          ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrInput interface {
	pulumi.Input

	ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput() ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput
	ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutputWithContext(context.Context) ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput
}

type contentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrType ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseArgs

func ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtr(v *ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseArgs) ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrInput {
	return (*contentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrType)(v)
}

func (*contentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyFairPlayOfflineRentalConfigurationResponse)(nil)).Elem()
}

func (i *contentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrType) ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput() ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput {
	return i.ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *contentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrType) ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput)
}

type ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyFairPlayOfflineRentalConfigurationResponse)(nil)).Elem()
}

func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput) ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput() ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput {
	return o
}

func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput) ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput {
	return o
}

func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput) ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput() ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput {
	return o.ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput) ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayOfflineRentalConfigurationResponse) *ContentKeyPolicyFairPlayOfflineRentalConfigurationResponse {
		return &v
	}).(ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput)
}

// Playback duration
func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput) PlaybackDurationSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayOfflineRentalConfigurationResponse) int {
		return v.PlaybackDurationSeconds
	}).(pulumi.IntOutput)
}

// Storage duration
func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput) StorageDurationSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v ContentKeyPolicyFairPlayOfflineRentalConfigurationResponse) int {
		return v.StorageDurationSeconds
	}).(pulumi.IntOutput)
}

type ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyFairPlayOfflineRentalConfigurationResponse)(nil)).Elem()
}

func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput) ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput() ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput {
	return o
}

func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput) ToContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutputWithContext(ctx context.Context) ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput {
	return o
}

func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput) Elem() ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput {
	return o.ApplyT(func(v *ContentKeyPolicyFairPlayOfflineRentalConfigurationResponse) ContentKeyPolicyFairPlayOfflineRentalConfigurationResponse {
		return *v
	}).(ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput)
}

// Playback duration
func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput) PlaybackDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyFairPlayOfflineRentalConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return &v.PlaybackDurationSeconds
	}).(pulumi.IntPtrOutput)
}

// Storage duration
func (o ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput) StorageDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyFairPlayOfflineRentalConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return &v.StorageDurationSeconds
	}).(pulumi.IntPtrOutput)
}

// Represents an open restriction. License or key will be delivered on every request.
type ContentKeyPolicyOpenRestriction struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// ContentKeyPolicyOpenRestrictionInput is an input type that accepts ContentKeyPolicyOpenRestrictionArgs and ContentKeyPolicyOpenRestrictionOutput values.
// You can construct a concrete instance of `ContentKeyPolicyOpenRestrictionInput` via:
//
//          ContentKeyPolicyOpenRestrictionArgs{...}
type ContentKeyPolicyOpenRestrictionInput interface {
	pulumi.Input

	ToContentKeyPolicyOpenRestrictionOutput() ContentKeyPolicyOpenRestrictionOutput
	ToContentKeyPolicyOpenRestrictionOutputWithContext(context.Context) ContentKeyPolicyOpenRestrictionOutput
}

// Represents an open restriction. License or key will be delivered on every request.
type ContentKeyPolicyOpenRestrictionArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (ContentKeyPolicyOpenRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyOpenRestriction)(nil)).Elem()
}

func (i ContentKeyPolicyOpenRestrictionArgs) ToContentKeyPolicyOpenRestrictionOutput() ContentKeyPolicyOpenRestrictionOutput {
	return i.ToContentKeyPolicyOpenRestrictionOutputWithContext(context.Background())
}

func (i ContentKeyPolicyOpenRestrictionArgs) ToContentKeyPolicyOpenRestrictionOutputWithContext(ctx context.Context) ContentKeyPolicyOpenRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyOpenRestrictionOutput)
}

// Represents an open restriction. License or key will be delivered on every request.
type ContentKeyPolicyOpenRestrictionOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyOpenRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyOpenRestriction)(nil)).Elem()
}

func (o ContentKeyPolicyOpenRestrictionOutput) ToContentKeyPolicyOpenRestrictionOutput() ContentKeyPolicyOpenRestrictionOutput {
	return o
}

func (o ContentKeyPolicyOpenRestrictionOutput) ToContentKeyPolicyOpenRestrictionOutputWithContext(ctx context.Context) ContentKeyPolicyOpenRestrictionOutput {
	return o
}

// The discriminator for derived types.
func (o ContentKeyPolicyOpenRestrictionOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyOpenRestriction) string { return v.OdataType }).(pulumi.StringOutput)
}

// Represents an open restriction. License or key will be delivered on every request.
type ContentKeyPolicyOpenRestrictionResponse struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// ContentKeyPolicyOpenRestrictionResponseInput is an input type that accepts ContentKeyPolicyOpenRestrictionResponseArgs and ContentKeyPolicyOpenRestrictionResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyOpenRestrictionResponseInput` via:
//
//          ContentKeyPolicyOpenRestrictionResponseArgs{...}
type ContentKeyPolicyOpenRestrictionResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyOpenRestrictionResponseOutput() ContentKeyPolicyOpenRestrictionResponseOutput
	ToContentKeyPolicyOpenRestrictionResponseOutputWithContext(context.Context) ContentKeyPolicyOpenRestrictionResponseOutput
}

// Represents an open restriction. License or key will be delivered on every request.
type ContentKeyPolicyOpenRestrictionResponseArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (ContentKeyPolicyOpenRestrictionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyOpenRestrictionResponse)(nil)).Elem()
}

func (i ContentKeyPolicyOpenRestrictionResponseArgs) ToContentKeyPolicyOpenRestrictionResponseOutput() ContentKeyPolicyOpenRestrictionResponseOutput {
	return i.ToContentKeyPolicyOpenRestrictionResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyOpenRestrictionResponseArgs) ToContentKeyPolicyOpenRestrictionResponseOutputWithContext(ctx context.Context) ContentKeyPolicyOpenRestrictionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyOpenRestrictionResponseOutput)
}

// Represents an open restriction. License or key will be delivered on every request.
type ContentKeyPolicyOpenRestrictionResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyOpenRestrictionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyOpenRestrictionResponse)(nil)).Elem()
}

func (o ContentKeyPolicyOpenRestrictionResponseOutput) ToContentKeyPolicyOpenRestrictionResponseOutput() ContentKeyPolicyOpenRestrictionResponseOutput {
	return o
}

func (o ContentKeyPolicyOpenRestrictionResponseOutput) ToContentKeyPolicyOpenRestrictionResponseOutputWithContext(ctx context.Context) ContentKeyPolicyOpenRestrictionResponseOutput {
	return o
}

// The discriminator for derived types.
func (o ContentKeyPolicyOpenRestrictionResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyOpenRestrictionResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Represents a policy option.
type ContentKeyPolicyOption struct {
	// The key delivery configuration.
	Configuration interface{} `pulumi:"configuration"`
	// The Policy Option description.
	Name *string `pulumi:"name"`
	// The requirements that must be met to deliver keys with this configuration
	Restriction interface{} `pulumi:"restriction"`
}

// ContentKeyPolicyOptionInput is an input type that accepts ContentKeyPolicyOptionArgs and ContentKeyPolicyOptionOutput values.
// You can construct a concrete instance of `ContentKeyPolicyOptionInput` via:
//
//          ContentKeyPolicyOptionArgs{...}
type ContentKeyPolicyOptionInput interface {
	pulumi.Input

	ToContentKeyPolicyOptionOutput() ContentKeyPolicyOptionOutput
	ToContentKeyPolicyOptionOutputWithContext(context.Context) ContentKeyPolicyOptionOutput
}

// Represents a policy option.
type ContentKeyPolicyOptionArgs struct {
	// The key delivery configuration.
	Configuration pulumi.Input `pulumi:"configuration"`
	// The Policy Option description.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The requirements that must be met to deliver keys with this configuration
	Restriction pulumi.Input `pulumi:"restriction"`
}

func (ContentKeyPolicyOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyOption)(nil)).Elem()
}

func (i ContentKeyPolicyOptionArgs) ToContentKeyPolicyOptionOutput() ContentKeyPolicyOptionOutput {
	return i.ToContentKeyPolicyOptionOutputWithContext(context.Background())
}

func (i ContentKeyPolicyOptionArgs) ToContentKeyPolicyOptionOutputWithContext(ctx context.Context) ContentKeyPolicyOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyOptionOutput)
}

// ContentKeyPolicyOptionArrayInput is an input type that accepts ContentKeyPolicyOptionArray and ContentKeyPolicyOptionArrayOutput values.
// You can construct a concrete instance of `ContentKeyPolicyOptionArrayInput` via:
//
//          ContentKeyPolicyOptionArray{ ContentKeyPolicyOptionArgs{...} }
type ContentKeyPolicyOptionArrayInput interface {
	pulumi.Input

	ToContentKeyPolicyOptionArrayOutput() ContentKeyPolicyOptionArrayOutput
	ToContentKeyPolicyOptionArrayOutputWithContext(context.Context) ContentKeyPolicyOptionArrayOutput
}

type ContentKeyPolicyOptionArray []ContentKeyPolicyOptionInput

func (ContentKeyPolicyOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyOption)(nil)).Elem()
}

func (i ContentKeyPolicyOptionArray) ToContentKeyPolicyOptionArrayOutput() ContentKeyPolicyOptionArrayOutput {
	return i.ToContentKeyPolicyOptionArrayOutputWithContext(context.Background())
}

func (i ContentKeyPolicyOptionArray) ToContentKeyPolicyOptionArrayOutputWithContext(ctx context.Context) ContentKeyPolicyOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyOptionArrayOutput)
}

// Represents a policy option.
type ContentKeyPolicyOptionOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyOption)(nil)).Elem()
}

func (o ContentKeyPolicyOptionOutput) ToContentKeyPolicyOptionOutput() ContentKeyPolicyOptionOutput {
	return o
}

func (o ContentKeyPolicyOptionOutput) ToContentKeyPolicyOptionOutputWithContext(ctx context.Context) ContentKeyPolicyOptionOutput {
	return o
}

// The key delivery configuration.
func (o ContentKeyPolicyOptionOutput) Configuration() pulumi.AnyOutput {
	return o.ApplyT(func(v ContentKeyPolicyOption) interface{} { return v.Configuration }).(pulumi.AnyOutput)
}

// The Policy Option description.
func (o ContentKeyPolicyOptionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyOption) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The requirements that must be met to deliver keys with this configuration
func (o ContentKeyPolicyOptionOutput) Restriction() pulumi.AnyOutput {
	return o.ApplyT(func(v ContentKeyPolicyOption) interface{} { return v.Restriction }).(pulumi.AnyOutput)
}

type ContentKeyPolicyOptionArrayOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyOption)(nil)).Elem()
}

func (o ContentKeyPolicyOptionArrayOutput) ToContentKeyPolicyOptionArrayOutput() ContentKeyPolicyOptionArrayOutput {
	return o
}

func (o ContentKeyPolicyOptionArrayOutput) ToContentKeyPolicyOptionArrayOutputWithContext(ctx context.Context) ContentKeyPolicyOptionArrayOutput {
	return o
}

func (o ContentKeyPolicyOptionArrayOutput) Index(i pulumi.IntInput) ContentKeyPolicyOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentKeyPolicyOption {
		return vs[0].([]ContentKeyPolicyOption)[vs[1].(int)]
	}).(ContentKeyPolicyOptionOutput)
}

// Represents a policy option.
type ContentKeyPolicyOptionResponse struct {
	// The key delivery configuration.
	Configuration interface{} `pulumi:"configuration"`
	// The Policy Option description.
	Name *string `pulumi:"name"`
	// The legacy Policy Option ID.
	PolicyOptionId string `pulumi:"policyOptionId"`
	// The requirements that must be met to deliver keys with this configuration
	Restriction interface{} `pulumi:"restriction"`
}

// ContentKeyPolicyOptionResponseInput is an input type that accepts ContentKeyPolicyOptionResponseArgs and ContentKeyPolicyOptionResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyOptionResponseInput` via:
//
//          ContentKeyPolicyOptionResponseArgs{...}
type ContentKeyPolicyOptionResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyOptionResponseOutput() ContentKeyPolicyOptionResponseOutput
	ToContentKeyPolicyOptionResponseOutputWithContext(context.Context) ContentKeyPolicyOptionResponseOutput
}

// Represents a policy option.
type ContentKeyPolicyOptionResponseArgs struct {
	// The key delivery configuration.
	Configuration pulumi.Input `pulumi:"configuration"`
	// The Policy Option description.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The legacy Policy Option ID.
	PolicyOptionId pulumi.StringInput `pulumi:"policyOptionId"`
	// The requirements that must be met to deliver keys with this configuration
	Restriction pulumi.Input `pulumi:"restriction"`
}

func (ContentKeyPolicyOptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyOptionResponse)(nil)).Elem()
}

func (i ContentKeyPolicyOptionResponseArgs) ToContentKeyPolicyOptionResponseOutput() ContentKeyPolicyOptionResponseOutput {
	return i.ToContentKeyPolicyOptionResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyOptionResponseArgs) ToContentKeyPolicyOptionResponseOutputWithContext(ctx context.Context) ContentKeyPolicyOptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyOptionResponseOutput)
}

// ContentKeyPolicyOptionResponseArrayInput is an input type that accepts ContentKeyPolicyOptionResponseArray and ContentKeyPolicyOptionResponseArrayOutput values.
// You can construct a concrete instance of `ContentKeyPolicyOptionResponseArrayInput` via:
//
//          ContentKeyPolicyOptionResponseArray{ ContentKeyPolicyOptionResponseArgs{...} }
type ContentKeyPolicyOptionResponseArrayInput interface {
	pulumi.Input

	ToContentKeyPolicyOptionResponseArrayOutput() ContentKeyPolicyOptionResponseArrayOutput
	ToContentKeyPolicyOptionResponseArrayOutputWithContext(context.Context) ContentKeyPolicyOptionResponseArrayOutput
}

type ContentKeyPolicyOptionResponseArray []ContentKeyPolicyOptionResponseInput

func (ContentKeyPolicyOptionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyOptionResponse)(nil)).Elem()
}

func (i ContentKeyPolicyOptionResponseArray) ToContentKeyPolicyOptionResponseArrayOutput() ContentKeyPolicyOptionResponseArrayOutput {
	return i.ToContentKeyPolicyOptionResponseArrayOutputWithContext(context.Background())
}

func (i ContentKeyPolicyOptionResponseArray) ToContentKeyPolicyOptionResponseArrayOutputWithContext(ctx context.Context) ContentKeyPolicyOptionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyOptionResponseArrayOutput)
}

// Represents a policy option.
type ContentKeyPolicyOptionResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyOptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyOptionResponse)(nil)).Elem()
}

func (o ContentKeyPolicyOptionResponseOutput) ToContentKeyPolicyOptionResponseOutput() ContentKeyPolicyOptionResponseOutput {
	return o
}

func (o ContentKeyPolicyOptionResponseOutput) ToContentKeyPolicyOptionResponseOutputWithContext(ctx context.Context) ContentKeyPolicyOptionResponseOutput {
	return o
}

// The key delivery configuration.
func (o ContentKeyPolicyOptionResponseOutput) Configuration() pulumi.AnyOutput {
	return o.ApplyT(func(v ContentKeyPolicyOptionResponse) interface{} { return v.Configuration }).(pulumi.AnyOutput)
}

// The Policy Option description.
func (o ContentKeyPolicyOptionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyOptionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The legacy Policy Option ID.
func (o ContentKeyPolicyOptionResponseOutput) PolicyOptionId() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyOptionResponse) string { return v.PolicyOptionId }).(pulumi.StringOutput)
}

// The requirements that must be met to deliver keys with this configuration
func (o ContentKeyPolicyOptionResponseOutput) Restriction() pulumi.AnyOutput {
	return o.ApplyT(func(v ContentKeyPolicyOptionResponse) interface{} { return v.Restriction }).(pulumi.AnyOutput)
}

type ContentKeyPolicyOptionResponseArrayOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyOptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyOptionResponse)(nil)).Elem()
}

func (o ContentKeyPolicyOptionResponseArrayOutput) ToContentKeyPolicyOptionResponseArrayOutput() ContentKeyPolicyOptionResponseArrayOutput {
	return o
}

func (o ContentKeyPolicyOptionResponseArrayOutput) ToContentKeyPolicyOptionResponseArrayOutputWithContext(ctx context.Context) ContentKeyPolicyOptionResponseArrayOutput {
	return o
}

func (o ContentKeyPolicyOptionResponseArrayOutput) Index(i pulumi.IntInput) ContentKeyPolicyOptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentKeyPolicyOptionResponse {
		return vs[0].([]ContentKeyPolicyOptionResponse)[vs[1].(int)]
	}).(ContentKeyPolicyOptionResponseOutput)
}

// Specifies a configuration for PlayReady licenses.
type ContentKeyPolicyPlayReadyConfiguration struct {
	// The PlayReady licenses.
	Licenses []ContentKeyPolicyPlayReadyLicense `pulumi:"licenses"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The custom response data.
	ResponseCustomData *string `pulumi:"responseCustomData"`
}

// ContentKeyPolicyPlayReadyConfigurationInput is an input type that accepts ContentKeyPolicyPlayReadyConfigurationArgs and ContentKeyPolicyPlayReadyConfigurationOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyConfigurationInput` via:
//
//          ContentKeyPolicyPlayReadyConfigurationArgs{...}
type ContentKeyPolicyPlayReadyConfigurationInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyConfigurationOutput() ContentKeyPolicyPlayReadyConfigurationOutput
	ToContentKeyPolicyPlayReadyConfigurationOutputWithContext(context.Context) ContentKeyPolicyPlayReadyConfigurationOutput
}

// Specifies a configuration for PlayReady licenses.
type ContentKeyPolicyPlayReadyConfigurationArgs struct {
	// The PlayReady licenses.
	Licenses ContentKeyPolicyPlayReadyLicenseArrayInput `pulumi:"licenses"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The custom response data.
	ResponseCustomData pulumi.StringPtrInput `pulumi:"responseCustomData"`
}

func (ContentKeyPolicyPlayReadyConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyConfiguration)(nil)).Elem()
}

func (i ContentKeyPolicyPlayReadyConfigurationArgs) ToContentKeyPolicyPlayReadyConfigurationOutput() ContentKeyPolicyPlayReadyConfigurationOutput {
	return i.ToContentKeyPolicyPlayReadyConfigurationOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPlayReadyConfigurationArgs) ToContentKeyPolicyPlayReadyConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyConfigurationOutput)
}

// Specifies a configuration for PlayReady licenses.
type ContentKeyPolicyPlayReadyConfigurationOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyConfiguration)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyConfigurationOutput) ToContentKeyPolicyPlayReadyConfigurationOutput() ContentKeyPolicyPlayReadyConfigurationOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyConfigurationOutput) ToContentKeyPolicyPlayReadyConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyConfigurationOutput {
	return o
}

// The PlayReady licenses.
func (o ContentKeyPolicyPlayReadyConfigurationOutput) Licenses() ContentKeyPolicyPlayReadyLicenseArrayOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyConfiguration) []ContentKeyPolicyPlayReadyLicense { return v.Licenses }).(ContentKeyPolicyPlayReadyLicenseArrayOutput)
}

// The discriminator for derived types.
func (o ContentKeyPolicyPlayReadyConfigurationOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyConfiguration) string { return v.OdataType }).(pulumi.StringOutput)
}

// The custom response data.
func (o ContentKeyPolicyPlayReadyConfigurationOutput) ResponseCustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyConfiguration) *string { return v.ResponseCustomData }).(pulumi.StringPtrOutput)
}

// Specifies a configuration for PlayReady licenses.
type ContentKeyPolicyPlayReadyConfigurationResponse struct {
	// The PlayReady licenses.
	Licenses []ContentKeyPolicyPlayReadyLicenseResponse `pulumi:"licenses"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The custom response data.
	ResponseCustomData *string `pulumi:"responseCustomData"`
}

// ContentKeyPolicyPlayReadyConfigurationResponseInput is an input type that accepts ContentKeyPolicyPlayReadyConfigurationResponseArgs and ContentKeyPolicyPlayReadyConfigurationResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyConfigurationResponseInput` via:
//
//          ContentKeyPolicyPlayReadyConfigurationResponseArgs{...}
type ContentKeyPolicyPlayReadyConfigurationResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyConfigurationResponseOutput() ContentKeyPolicyPlayReadyConfigurationResponseOutput
	ToContentKeyPolicyPlayReadyConfigurationResponseOutputWithContext(context.Context) ContentKeyPolicyPlayReadyConfigurationResponseOutput
}

// Specifies a configuration for PlayReady licenses.
type ContentKeyPolicyPlayReadyConfigurationResponseArgs struct {
	// The PlayReady licenses.
	Licenses ContentKeyPolicyPlayReadyLicenseResponseArrayInput `pulumi:"licenses"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The custom response data.
	ResponseCustomData pulumi.StringPtrInput `pulumi:"responseCustomData"`
}

func (ContentKeyPolicyPlayReadyConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyConfigurationResponse)(nil)).Elem()
}

func (i ContentKeyPolicyPlayReadyConfigurationResponseArgs) ToContentKeyPolicyPlayReadyConfigurationResponseOutput() ContentKeyPolicyPlayReadyConfigurationResponseOutput {
	return i.ToContentKeyPolicyPlayReadyConfigurationResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPlayReadyConfigurationResponseArgs) ToContentKeyPolicyPlayReadyConfigurationResponseOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyConfigurationResponseOutput)
}

// Specifies a configuration for PlayReady licenses.
type ContentKeyPolicyPlayReadyConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyConfigurationResponse)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyConfigurationResponseOutput) ToContentKeyPolicyPlayReadyConfigurationResponseOutput() ContentKeyPolicyPlayReadyConfigurationResponseOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyConfigurationResponseOutput) ToContentKeyPolicyPlayReadyConfigurationResponseOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyConfigurationResponseOutput {
	return o
}

// The PlayReady licenses.
func (o ContentKeyPolicyPlayReadyConfigurationResponseOutput) Licenses() ContentKeyPolicyPlayReadyLicenseResponseArrayOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyConfigurationResponse) []ContentKeyPolicyPlayReadyLicenseResponse {
		return v.Licenses
	}).(ContentKeyPolicyPlayReadyLicenseResponseArrayOutput)
}

// The discriminator for derived types.
func (o ContentKeyPolicyPlayReadyConfigurationResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyConfigurationResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// The custom response data.
func (o ContentKeyPolicyPlayReadyConfigurationResponseOutput) ResponseCustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyConfigurationResponse) *string { return v.ResponseCustomData }).(pulumi.StringPtrOutput)
}

// Specifies that the content key ID is in the PlayReady header.
type ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderInput is an input type that accepts ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderArgs and ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderInput` via:
//
//          ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderArgs{...}
type ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutput() ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutput
	ToContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutputWithContext(context.Context) ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutput
}

// Specifies that the content key ID is in the PlayReady header.
type ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader)(nil)).Elem()
}

func (i ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderArgs) ToContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutput() ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutput {
	return i.ToContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderArgs) ToContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutput)
}

// Specifies that the content key ID is in the PlayReady header.
type ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutput) ToContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutput() ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutput) ToContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutput {
	return o
}

// The discriminator for derived types.
func (o ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader) string { return v.OdataType }).(pulumi.StringOutput)
}

// Specifies that the content key ID is in the PlayReady header.
type ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponse struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseInput is an input type that accepts ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseArgs and ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseInput` via:
//
//          ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseArgs{...}
type ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutput() ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutput
	ToContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutputWithContext(context.Context) ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutput
}

// Specifies that the content key ID is in the PlayReady header.
type ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponse)(nil)).Elem()
}

func (i ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseArgs) ToContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutput() ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutput {
	return i.ToContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseArgs) ToContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutput)
}

// Specifies that the content key ID is in the PlayReady header.
type ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponse)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutput) ToContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutput() ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutput) ToContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutput {
	return o
}

// The discriminator for derived types.
func (o ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Specifies that the content key ID is specified in the PlayReady configuration.
type ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier struct {
	// The content key ID.
	KeyId string `pulumi:"keyId"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierInput is an input type that accepts ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierArgs and ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierInput` via:
//
//          ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierArgs{...}
type ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutput() ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutput
	ToContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutputWithContext(context.Context) ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutput
}

// Specifies that the content key ID is specified in the PlayReady configuration.
type ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierArgs struct {
	// The content key ID.
	KeyId pulumi.StringInput `pulumi:"keyId"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier)(nil)).Elem()
}

func (i ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierArgs) ToContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutput() ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutput {
	return i.ToContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierArgs) ToContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutput)
}

// Specifies that the content key ID is specified in the PlayReady configuration.
type ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutput) ToContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutput() ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutput) ToContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutput {
	return o
}

// The content key ID.
func (o ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier) string { return v.KeyId }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier) string { return v.OdataType }).(pulumi.StringOutput)
}

// Specifies that the content key ID is specified in the PlayReady configuration.
type ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponse struct {
	// The content key ID.
	KeyId string `pulumi:"keyId"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseInput is an input type that accepts ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseArgs and ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseInput` via:
//
//          ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseArgs{...}
type ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutput() ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutput
	ToContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutputWithContext(context.Context) ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutput
}

// Specifies that the content key ID is specified in the PlayReady configuration.
type ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseArgs struct {
	// The content key ID.
	KeyId pulumi.StringInput `pulumi:"keyId"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponse)(nil)).Elem()
}

func (i ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseArgs) ToContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutput() ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutput {
	return i.ToContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseArgs) ToContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutput)
}

// Specifies that the content key ID is specified in the PlayReady configuration.
type ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponse)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutput) ToContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutput() ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutput) ToContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutput {
	return o
}

// The content key ID.
func (o ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponse) string { return v.KeyId }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponse) string {
		return v.OdataType
	}).(pulumi.StringOutput)
}

// Configures the Explicit Analog Television Output Restriction control bits. For further details see the PlayReady Compliance Rules.
type ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction struct {
	// Indicates whether this restriction is enforced on a Best Effort basis.
	BestEffort bool `pulumi:"bestEffort"`
	// Configures the restriction control bits. Must be between 0 and 3 inclusive.
	ConfigurationData int `pulumi:"configurationData"`
}

// ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionInput is an input type that accepts ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs and ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionInput` via:
//
//          ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs{...}
type ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput
	ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutputWithContext(context.Context) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput
}

// Configures the Explicit Analog Television Output Restriction control bits. For further details see the PlayReady Compliance Rules.
type ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs struct {
	// Indicates whether this restriction is enforced on a Best Effort basis.
	BestEffort pulumi.BoolInput `pulumi:"bestEffort"`
	// Configures the restriction control bits. Must be between 0 and 3 inclusive.
	ConfigurationData pulumi.IntInput `pulumi:"configurationData"`
}

func (ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction)(nil)).Elem()
}

func (i ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput {
	return i.ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput)
}

func (i ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput {
	return i.ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput).ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutputWithContext(ctx)
}

// ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrInput is an input type that accepts ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs, ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtr and ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrInput` via:
//
//          ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs{...}
//
//  or:
//
//          nil
type ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput
	ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutputWithContext(context.Context) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput
}

type contentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrType ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs

func ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtr(v *ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrInput {
	return (*contentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrType)(v)
}

func (*contentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction)(nil)).Elem()
}

func (i *contentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrType) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput {
	return i.ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutputWithContext(context.Background())
}

func (i *contentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrType) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput)
}

// Configures the Explicit Analog Television Output Restriction control bits. For further details see the PlayReady Compliance Rules.
type ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput {
	return o.ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction) *ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction {
		return &v
	}).(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput)
}

// Indicates whether this restriction is enforced on a Best Effort basis.
func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput) BestEffort() pulumi.BoolOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction) bool { return v.BestEffort }).(pulumi.BoolOutput)
}

// Configures the restriction control bits. Must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput) ConfigurationData() pulumi.IntOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction) int { return v.ConfigurationData }).(pulumi.IntOutput)
}

type ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput) Elem() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction {
		return *v
	}).(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput)
}

// Indicates whether this restriction is enforced on a Best Effort basis.
func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput) BestEffort() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction) *bool {
		if v == nil {
			return nil
		}
		return &v.BestEffort
	}).(pulumi.BoolPtrOutput)
}

// Configures the restriction control bits. Must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput) ConfigurationData() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction) *int {
		if v == nil {
			return nil
		}
		return &v.ConfigurationData
	}).(pulumi.IntPtrOutput)
}

// Configures the Explicit Analog Television Output Restriction control bits. For further details see the PlayReady Compliance Rules.
type ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse struct {
	// Indicates whether this restriction is enforced on a Best Effort basis.
	BestEffort bool `pulumi:"bestEffort"`
	// Configures the restriction control bits. Must be between 0 and 3 inclusive.
	ConfigurationData int `pulumi:"configurationData"`
}

// ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseInput is an input type that accepts ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseArgs and ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseInput` via:
//
//          ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseArgs{...}
type ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput
	ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutputWithContext(context.Context) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput
}

// Configures the Explicit Analog Television Output Restriction control bits. For further details see the PlayReady Compliance Rules.
type ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseArgs struct {
	// Indicates whether this restriction is enforced on a Best Effort basis.
	BestEffort pulumi.BoolInput `pulumi:"bestEffort"`
	// Configures the restriction control bits. Must be between 0 and 3 inclusive.
	ConfigurationData pulumi.IntInput `pulumi:"configurationData"`
}

func (ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse)(nil)).Elem()
}

func (i ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseArgs) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput {
	return i.ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseArgs) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput)
}

func (i ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseArgs) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput {
	return i.ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseArgs) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput).ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutputWithContext(ctx)
}

// ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrInput is an input type that accepts ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseArgs, ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtr and ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrInput` via:
//
//          ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseArgs{...}
//
//  or:
//
//          nil
type ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput
	ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutputWithContext(context.Context) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput
}

type contentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrType ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseArgs

func ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtr(v *ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseArgs) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrInput {
	return (*contentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrType)(v)
}

func (*contentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse)(nil)).Elem()
}

func (i *contentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrType) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput {
	return i.ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutputWithContext(context.Background())
}

func (i *contentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrType) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput)
}

// Configures the Explicit Analog Television Output Restriction control bits. For further details see the PlayReady Compliance Rules.
type ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput {
	return o.ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse) *ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse {
		return &v
	}).(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput)
}

// Indicates whether this restriction is enforced on a Best Effort basis.
func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput) BestEffort() pulumi.BoolOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse) bool { return v.BestEffort }).(pulumi.BoolOutput)
}

// Configures the restriction control bits. Must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput) ConfigurationData() pulumi.IntOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse) int {
		return v.ConfigurationData
	}).(pulumi.IntOutput)
}

type ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput) ToContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput) Elem() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse) ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse {
		return *v
	}).(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput)
}

// Indicates whether this restriction is enforced on a Best Effort basis.
func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput) BestEffort() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.BestEffort
	}).(pulumi.BoolPtrOutput)
}

// Configures the restriction control bits. Must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput) ConfigurationData() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ConfigurationData
	}).(pulumi.IntPtrOutput)
}

// The PlayReady license
type ContentKeyPolicyPlayReadyLicense struct {
	// A flag indicating whether test devices can use the license.
	AllowTestDevices bool `pulumi:"allowTestDevices"`
	// The begin date of license
	BeginDate *string `pulumi:"beginDate"`
	// The content key location.
	ContentKeyLocation interface{} `pulumi:"contentKeyLocation"`
	// The PlayReady content type.
	ContentType string `pulumi:"contentType"`
	// The expiration date of license.
	ExpirationDate *string `pulumi:"expirationDate"`
	// The grace period of license.
	GracePeriod *string `pulumi:"gracePeriod"`
	// The license type.
	LicenseType string `pulumi:"licenseType"`
	// The license PlayRight
	PlayRight *ContentKeyPolicyPlayReadyPlayRight `pulumi:"playRight"`
	// The relative begin date of license.
	RelativeBeginDate *string `pulumi:"relativeBeginDate"`
	// The relative expiration date of license.
	RelativeExpirationDate *string `pulumi:"relativeExpirationDate"`
}

// ContentKeyPolicyPlayReadyLicenseInput is an input type that accepts ContentKeyPolicyPlayReadyLicenseArgs and ContentKeyPolicyPlayReadyLicenseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyLicenseInput` via:
//
//          ContentKeyPolicyPlayReadyLicenseArgs{...}
type ContentKeyPolicyPlayReadyLicenseInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyLicenseOutput() ContentKeyPolicyPlayReadyLicenseOutput
	ToContentKeyPolicyPlayReadyLicenseOutputWithContext(context.Context) ContentKeyPolicyPlayReadyLicenseOutput
}

// The PlayReady license
type ContentKeyPolicyPlayReadyLicenseArgs struct {
	// A flag indicating whether test devices can use the license.
	AllowTestDevices pulumi.BoolInput `pulumi:"allowTestDevices"`
	// The begin date of license
	BeginDate pulumi.StringPtrInput `pulumi:"beginDate"`
	// The content key location.
	ContentKeyLocation pulumi.Input `pulumi:"contentKeyLocation"`
	// The PlayReady content type.
	ContentType pulumi.StringInput `pulumi:"contentType"`
	// The expiration date of license.
	ExpirationDate pulumi.StringPtrInput `pulumi:"expirationDate"`
	// The grace period of license.
	GracePeriod pulumi.StringPtrInput `pulumi:"gracePeriod"`
	// The license type.
	LicenseType pulumi.StringInput `pulumi:"licenseType"`
	// The license PlayRight
	PlayRight ContentKeyPolicyPlayReadyPlayRightPtrInput `pulumi:"playRight"`
	// The relative begin date of license.
	RelativeBeginDate pulumi.StringPtrInput `pulumi:"relativeBeginDate"`
	// The relative expiration date of license.
	RelativeExpirationDate pulumi.StringPtrInput `pulumi:"relativeExpirationDate"`
}

func (ContentKeyPolicyPlayReadyLicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyLicense)(nil)).Elem()
}

func (i ContentKeyPolicyPlayReadyLicenseArgs) ToContentKeyPolicyPlayReadyLicenseOutput() ContentKeyPolicyPlayReadyLicenseOutput {
	return i.ToContentKeyPolicyPlayReadyLicenseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPlayReadyLicenseArgs) ToContentKeyPolicyPlayReadyLicenseOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyLicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyLicenseOutput)
}

// ContentKeyPolicyPlayReadyLicenseArrayInput is an input type that accepts ContentKeyPolicyPlayReadyLicenseArray and ContentKeyPolicyPlayReadyLicenseArrayOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyLicenseArrayInput` via:
//
//          ContentKeyPolicyPlayReadyLicenseArray{ ContentKeyPolicyPlayReadyLicenseArgs{...} }
type ContentKeyPolicyPlayReadyLicenseArrayInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyLicenseArrayOutput() ContentKeyPolicyPlayReadyLicenseArrayOutput
	ToContentKeyPolicyPlayReadyLicenseArrayOutputWithContext(context.Context) ContentKeyPolicyPlayReadyLicenseArrayOutput
}

type ContentKeyPolicyPlayReadyLicenseArray []ContentKeyPolicyPlayReadyLicenseInput

func (ContentKeyPolicyPlayReadyLicenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyPlayReadyLicense)(nil)).Elem()
}

func (i ContentKeyPolicyPlayReadyLicenseArray) ToContentKeyPolicyPlayReadyLicenseArrayOutput() ContentKeyPolicyPlayReadyLicenseArrayOutput {
	return i.ToContentKeyPolicyPlayReadyLicenseArrayOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPlayReadyLicenseArray) ToContentKeyPolicyPlayReadyLicenseArrayOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyLicenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyLicenseArrayOutput)
}

// The PlayReady license
type ContentKeyPolicyPlayReadyLicenseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyLicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyLicense)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyLicenseOutput) ToContentKeyPolicyPlayReadyLicenseOutput() ContentKeyPolicyPlayReadyLicenseOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyLicenseOutput) ToContentKeyPolicyPlayReadyLicenseOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyLicenseOutput {
	return o
}

// A flag indicating whether test devices can use the license.
func (o ContentKeyPolicyPlayReadyLicenseOutput) AllowTestDevices() pulumi.BoolOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicense) bool { return v.AllowTestDevices }).(pulumi.BoolOutput)
}

// The begin date of license
func (o ContentKeyPolicyPlayReadyLicenseOutput) BeginDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicense) *string { return v.BeginDate }).(pulumi.StringPtrOutput)
}

// The content key location.
func (o ContentKeyPolicyPlayReadyLicenseOutput) ContentKeyLocation() pulumi.AnyOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicense) interface{} { return v.ContentKeyLocation }).(pulumi.AnyOutput)
}

// The PlayReady content type.
func (o ContentKeyPolicyPlayReadyLicenseOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicense) string { return v.ContentType }).(pulumi.StringOutput)
}

// The expiration date of license.
func (o ContentKeyPolicyPlayReadyLicenseOutput) ExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicense) *string { return v.ExpirationDate }).(pulumi.StringPtrOutput)
}

// The grace period of license.
func (o ContentKeyPolicyPlayReadyLicenseOutput) GracePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicense) *string { return v.GracePeriod }).(pulumi.StringPtrOutput)
}

// The license type.
func (o ContentKeyPolicyPlayReadyLicenseOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicense) string { return v.LicenseType }).(pulumi.StringOutput)
}

// The license PlayRight
func (o ContentKeyPolicyPlayReadyLicenseOutput) PlayRight() ContentKeyPolicyPlayReadyPlayRightPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicense) *ContentKeyPolicyPlayReadyPlayRight { return v.PlayRight }).(ContentKeyPolicyPlayReadyPlayRightPtrOutput)
}

// The relative begin date of license.
func (o ContentKeyPolicyPlayReadyLicenseOutput) RelativeBeginDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicense) *string { return v.RelativeBeginDate }).(pulumi.StringPtrOutput)
}

// The relative expiration date of license.
func (o ContentKeyPolicyPlayReadyLicenseOutput) RelativeExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicense) *string { return v.RelativeExpirationDate }).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyPlayReadyLicenseArrayOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyLicenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyPlayReadyLicense)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyLicenseArrayOutput) ToContentKeyPolicyPlayReadyLicenseArrayOutput() ContentKeyPolicyPlayReadyLicenseArrayOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyLicenseArrayOutput) ToContentKeyPolicyPlayReadyLicenseArrayOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyLicenseArrayOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyLicenseArrayOutput) Index(i pulumi.IntInput) ContentKeyPolicyPlayReadyLicenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentKeyPolicyPlayReadyLicense {
		return vs[0].([]ContentKeyPolicyPlayReadyLicense)[vs[1].(int)]
	}).(ContentKeyPolicyPlayReadyLicenseOutput)
}

// The PlayReady license
type ContentKeyPolicyPlayReadyLicenseResponse struct {
	// A flag indicating whether test devices can use the license.
	AllowTestDevices bool `pulumi:"allowTestDevices"`
	// The begin date of license
	BeginDate *string `pulumi:"beginDate"`
	// The content key location.
	ContentKeyLocation interface{} `pulumi:"contentKeyLocation"`
	// The PlayReady content type.
	ContentType string `pulumi:"contentType"`
	// The expiration date of license.
	ExpirationDate *string `pulumi:"expirationDate"`
	// The grace period of license.
	GracePeriod *string `pulumi:"gracePeriod"`
	// The license type.
	LicenseType string `pulumi:"licenseType"`
	// The license PlayRight
	PlayRight *ContentKeyPolicyPlayReadyPlayRightResponse `pulumi:"playRight"`
	// The relative begin date of license.
	RelativeBeginDate *string `pulumi:"relativeBeginDate"`
	// The relative expiration date of license.
	RelativeExpirationDate *string `pulumi:"relativeExpirationDate"`
}

// ContentKeyPolicyPlayReadyLicenseResponseInput is an input type that accepts ContentKeyPolicyPlayReadyLicenseResponseArgs and ContentKeyPolicyPlayReadyLicenseResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyLicenseResponseInput` via:
//
//          ContentKeyPolicyPlayReadyLicenseResponseArgs{...}
type ContentKeyPolicyPlayReadyLicenseResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyLicenseResponseOutput() ContentKeyPolicyPlayReadyLicenseResponseOutput
	ToContentKeyPolicyPlayReadyLicenseResponseOutputWithContext(context.Context) ContentKeyPolicyPlayReadyLicenseResponseOutput
}

// The PlayReady license
type ContentKeyPolicyPlayReadyLicenseResponseArgs struct {
	// A flag indicating whether test devices can use the license.
	AllowTestDevices pulumi.BoolInput `pulumi:"allowTestDevices"`
	// The begin date of license
	BeginDate pulumi.StringPtrInput `pulumi:"beginDate"`
	// The content key location.
	ContentKeyLocation pulumi.Input `pulumi:"contentKeyLocation"`
	// The PlayReady content type.
	ContentType pulumi.StringInput `pulumi:"contentType"`
	// The expiration date of license.
	ExpirationDate pulumi.StringPtrInput `pulumi:"expirationDate"`
	// The grace period of license.
	GracePeriod pulumi.StringPtrInput `pulumi:"gracePeriod"`
	// The license type.
	LicenseType pulumi.StringInput `pulumi:"licenseType"`
	// The license PlayRight
	PlayRight ContentKeyPolicyPlayReadyPlayRightResponsePtrInput `pulumi:"playRight"`
	// The relative begin date of license.
	RelativeBeginDate pulumi.StringPtrInput `pulumi:"relativeBeginDate"`
	// The relative expiration date of license.
	RelativeExpirationDate pulumi.StringPtrInput `pulumi:"relativeExpirationDate"`
}

func (ContentKeyPolicyPlayReadyLicenseResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyLicenseResponse)(nil)).Elem()
}

func (i ContentKeyPolicyPlayReadyLicenseResponseArgs) ToContentKeyPolicyPlayReadyLicenseResponseOutput() ContentKeyPolicyPlayReadyLicenseResponseOutput {
	return i.ToContentKeyPolicyPlayReadyLicenseResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPlayReadyLicenseResponseArgs) ToContentKeyPolicyPlayReadyLicenseResponseOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyLicenseResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyLicenseResponseOutput)
}

// ContentKeyPolicyPlayReadyLicenseResponseArrayInput is an input type that accepts ContentKeyPolicyPlayReadyLicenseResponseArray and ContentKeyPolicyPlayReadyLicenseResponseArrayOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyLicenseResponseArrayInput` via:
//
//          ContentKeyPolicyPlayReadyLicenseResponseArray{ ContentKeyPolicyPlayReadyLicenseResponseArgs{...} }
type ContentKeyPolicyPlayReadyLicenseResponseArrayInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyLicenseResponseArrayOutput() ContentKeyPolicyPlayReadyLicenseResponseArrayOutput
	ToContentKeyPolicyPlayReadyLicenseResponseArrayOutputWithContext(context.Context) ContentKeyPolicyPlayReadyLicenseResponseArrayOutput
}

type ContentKeyPolicyPlayReadyLicenseResponseArray []ContentKeyPolicyPlayReadyLicenseResponseInput

func (ContentKeyPolicyPlayReadyLicenseResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyPlayReadyLicenseResponse)(nil)).Elem()
}

func (i ContentKeyPolicyPlayReadyLicenseResponseArray) ToContentKeyPolicyPlayReadyLicenseResponseArrayOutput() ContentKeyPolicyPlayReadyLicenseResponseArrayOutput {
	return i.ToContentKeyPolicyPlayReadyLicenseResponseArrayOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPlayReadyLicenseResponseArray) ToContentKeyPolicyPlayReadyLicenseResponseArrayOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyLicenseResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyLicenseResponseArrayOutput)
}

// The PlayReady license
type ContentKeyPolicyPlayReadyLicenseResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyLicenseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyLicenseResponse)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyLicenseResponseOutput) ToContentKeyPolicyPlayReadyLicenseResponseOutput() ContentKeyPolicyPlayReadyLicenseResponseOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyLicenseResponseOutput) ToContentKeyPolicyPlayReadyLicenseResponseOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyLicenseResponseOutput {
	return o
}

// A flag indicating whether test devices can use the license.
func (o ContentKeyPolicyPlayReadyLicenseResponseOutput) AllowTestDevices() pulumi.BoolOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicenseResponse) bool { return v.AllowTestDevices }).(pulumi.BoolOutput)
}

// The begin date of license
func (o ContentKeyPolicyPlayReadyLicenseResponseOutput) BeginDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicenseResponse) *string { return v.BeginDate }).(pulumi.StringPtrOutput)
}

// The content key location.
func (o ContentKeyPolicyPlayReadyLicenseResponseOutput) ContentKeyLocation() pulumi.AnyOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicenseResponse) interface{} { return v.ContentKeyLocation }).(pulumi.AnyOutput)
}

// The PlayReady content type.
func (o ContentKeyPolicyPlayReadyLicenseResponseOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicenseResponse) string { return v.ContentType }).(pulumi.StringOutput)
}

// The expiration date of license.
func (o ContentKeyPolicyPlayReadyLicenseResponseOutput) ExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicenseResponse) *string { return v.ExpirationDate }).(pulumi.StringPtrOutput)
}

// The grace period of license.
func (o ContentKeyPolicyPlayReadyLicenseResponseOutput) GracePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicenseResponse) *string { return v.GracePeriod }).(pulumi.StringPtrOutput)
}

// The license type.
func (o ContentKeyPolicyPlayReadyLicenseResponseOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicenseResponse) string { return v.LicenseType }).(pulumi.StringOutput)
}

// The license PlayRight
func (o ContentKeyPolicyPlayReadyLicenseResponseOutput) PlayRight() ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicenseResponse) *ContentKeyPolicyPlayReadyPlayRightResponse {
		return v.PlayRight
	}).(ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput)
}

// The relative begin date of license.
func (o ContentKeyPolicyPlayReadyLicenseResponseOutput) RelativeBeginDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicenseResponse) *string { return v.RelativeBeginDate }).(pulumi.StringPtrOutput)
}

// The relative expiration date of license.
func (o ContentKeyPolicyPlayReadyLicenseResponseOutput) RelativeExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyLicenseResponse) *string { return v.RelativeExpirationDate }).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyPlayReadyLicenseResponseArrayOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyLicenseResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyPlayReadyLicenseResponse)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyLicenseResponseArrayOutput) ToContentKeyPolicyPlayReadyLicenseResponseArrayOutput() ContentKeyPolicyPlayReadyLicenseResponseArrayOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyLicenseResponseArrayOutput) ToContentKeyPolicyPlayReadyLicenseResponseArrayOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyLicenseResponseArrayOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyLicenseResponseArrayOutput) Index(i pulumi.IntInput) ContentKeyPolicyPlayReadyLicenseResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentKeyPolicyPlayReadyLicenseResponse {
		return vs[0].([]ContentKeyPolicyPlayReadyLicenseResponse)[vs[1].(int)]
	}).(ContentKeyPolicyPlayReadyLicenseResponseOutput)
}

// Configures the Play Right in the PlayReady license.
type ContentKeyPolicyPlayReadyPlayRight struct {
	// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
	AgcAndColorStripeRestriction *int `pulumi:"agcAndColorStripeRestriction"`
	// Configures Unknown output handling settings of the license.
	AllowPassingVideoContentToUnknownOutput string `pulumi:"allowPassingVideoContentToUnknownOutput"`
	// Specifies the output protection level for compressed digital audio.
	AnalogVideoOpl *int `pulumi:"analogVideoOpl"`
	// Specifies the output protection level for compressed digital audio.
	CompressedDigitalAudioOpl *int `pulumi:"compressedDigitalAudioOpl"`
	// Specifies the output protection level for compressed digital video.
	CompressedDigitalVideoOpl *int `pulumi:"compressedDigitalVideoOpl"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	DigitalVideoOnlyContentRestriction bool `pulumi:"digitalVideoOnlyContentRestriction"`
	// Configures the Explicit Analog Television Output Restriction in the license. Configuration data must be between 0 and 3 inclusive.
	ExplicitAnalogTelevisionOutputRestriction *ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction `pulumi:"explicitAnalogTelevisionOutputRestriction"`
	// The amount of time that the license is valid after the license is first used to play content.
	FirstPlayExpiration *string `pulumi:"firstPlayExpiration"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	ImageConstraintForAnalogComponentVideoRestriction bool `pulumi:"imageConstraintForAnalogComponentVideoRestriction"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	ImageConstraintForAnalogComputerMonitorRestriction bool `pulumi:"imageConstraintForAnalogComputerMonitorRestriction"`
	// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
	ScmsRestriction *int `pulumi:"scmsRestriction"`
	// Specifies the output protection level for uncompressed digital audio.
	UncompressedDigitalAudioOpl *int `pulumi:"uncompressedDigitalAudioOpl"`
	// Specifies the output protection level for uncompressed digital video.
	UncompressedDigitalVideoOpl *int `pulumi:"uncompressedDigitalVideoOpl"`
}

// ContentKeyPolicyPlayReadyPlayRightInput is an input type that accepts ContentKeyPolicyPlayReadyPlayRightArgs and ContentKeyPolicyPlayReadyPlayRightOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyPlayRightInput` via:
//
//          ContentKeyPolicyPlayReadyPlayRightArgs{...}
type ContentKeyPolicyPlayReadyPlayRightInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyPlayRightOutput() ContentKeyPolicyPlayReadyPlayRightOutput
	ToContentKeyPolicyPlayReadyPlayRightOutputWithContext(context.Context) ContentKeyPolicyPlayReadyPlayRightOutput
}

// Configures the Play Right in the PlayReady license.
type ContentKeyPolicyPlayReadyPlayRightArgs struct {
	// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
	AgcAndColorStripeRestriction pulumi.IntPtrInput `pulumi:"agcAndColorStripeRestriction"`
	// Configures Unknown output handling settings of the license.
	AllowPassingVideoContentToUnknownOutput pulumi.StringInput `pulumi:"allowPassingVideoContentToUnknownOutput"`
	// Specifies the output protection level for compressed digital audio.
	AnalogVideoOpl pulumi.IntPtrInput `pulumi:"analogVideoOpl"`
	// Specifies the output protection level for compressed digital audio.
	CompressedDigitalAudioOpl pulumi.IntPtrInput `pulumi:"compressedDigitalAudioOpl"`
	// Specifies the output protection level for compressed digital video.
	CompressedDigitalVideoOpl pulumi.IntPtrInput `pulumi:"compressedDigitalVideoOpl"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	DigitalVideoOnlyContentRestriction pulumi.BoolInput `pulumi:"digitalVideoOnlyContentRestriction"`
	// Configures the Explicit Analog Television Output Restriction in the license. Configuration data must be between 0 and 3 inclusive.
	ExplicitAnalogTelevisionOutputRestriction ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrInput `pulumi:"explicitAnalogTelevisionOutputRestriction"`
	// The amount of time that the license is valid after the license is first used to play content.
	FirstPlayExpiration pulumi.StringPtrInput `pulumi:"firstPlayExpiration"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	ImageConstraintForAnalogComponentVideoRestriction pulumi.BoolInput `pulumi:"imageConstraintForAnalogComponentVideoRestriction"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	ImageConstraintForAnalogComputerMonitorRestriction pulumi.BoolInput `pulumi:"imageConstraintForAnalogComputerMonitorRestriction"`
	// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
	ScmsRestriction pulumi.IntPtrInput `pulumi:"scmsRestriction"`
	// Specifies the output protection level for uncompressed digital audio.
	UncompressedDigitalAudioOpl pulumi.IntPtrInput `pulumi:"uncompressedDigitalAudioOpl"`
	// Specifies the output protection level for uncompressed digital video.
	UncompressedDigitalVideoOpl pulumi.IntPtrInput `pulumi:"uncompressedDigitalVideoOpl"`
}

func (ContentKeyPolicyPlayReadyPlayRightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyPlayRight)(nil)).Elem()
}

func (i ContentKeyPolicyPlayReadyPlayRightArgs) ToContentKeyPolicyPlayReadyPlayRightOutput() ContentKeyPolicyPlayReadyPlayRightOutput {
	return i.ToContentKeyPolicyPlayReadyPlayRightOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPlayReadyPlayRightArgs) ToContentKeyPolicyPlayReadyPlayRightOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyPlayRightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyPlayRightOutput)
}

func (i ContentKeyPolicyPlayReadyPlayRightArgs) ToContentKeyPolicyPlayReadyPlayRightPtrOutput() ContentKeyPolicyPlayReadyPlayRightPtrOutput {
	return i.ToContentKeyPolicyPlayReadyPlayRightPtrOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPlayReadyPlayRightArgs) ToContentKeyPolicyPlayReadyPlayRightPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyPlayRightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyPlayRightOutput).ToContentKeyPolicyPlayReadyPlayRightPtrOutputWithContext(ctx)
}

// ContentKeyPolicyPlayReadyPlayRightPtrInput is an input type that accepts ContentKeyPolicyPlayReadyPlayRightArgs, ContentKeyPolicyPlayReadyPlayRightPtr and ContentKeyPolicyPlayReadyPlayRightPtrOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyPlayRightPtrInput` via:
//
//          ContentKeyPolicyPlayReadyPlayRightArgs{...}
//
//  or:
//
//          nil
type ContentKeyPolicyPlayReadyPlayRightPtrInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyPlayRightPtrOutput() ContentKeyPolicyPlayReadyPlayRightPtrOutput
	ToContentKeyPolicyPlayReadyPlayRightPtrOutputWithContext(context.Context) ContentKeyPolicyPlayReadyPlayRightPtrOutput
}

type contentKeyPolicyPlayReadyPlayRightPtrType ContentKeyPolicyPlayReadyPlayRightArgs

func ContentKeyPolicyPlayReadyPlayRightPtr(v *ContentKeyPolicyPlayReadyPlayRightArgs) ContentKeyPolicyPlayReadyPlayRightPtrInput {
	return (*contentKeyPolicyPlayReadyPlayRightPtrType)(v)
}

func (*contentKeyPolicyPlayReadyPlayRightPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPlayReadyPlayRight)(nil)).Elem()
}

func (i *contentKeyPolicyPlayReadyPlayRightPtrType) ToContentKeyPolicyPlayReadyPlayRightPtrOutput() ContentKeyPolicyPlayReadyPlayRightPtrOutput {
	return i.ToContentKeyPolicyPlayReadyPlayRightPtrOutputWithContext(context.Background())
}

func (i *contentKeyPolicyPlayReadyPlayRightPtrType) ToContentKeyPolicyPlayReadyPlayRightPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyPlayRightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyPlayRightPtrOutput)
}

// Configures the Play Right in the PlayReady license.
type ContentKeyPolicyPlayReadyPlayRightOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyPlayRightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyPlayRight)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyPlayRightOutput) ToContentKeyPolicyPlayReadyPlayRightOutput() ContentKeyPolicyPlayReadyPlayRightOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyPlayRightOutput) ToContentKeyPolicyPlayReadyPlayRightOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyPlayRightOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyPlayRightOutput) ToContentKeyPolicyPlayReadyPlayRightPtrOutput() ContentKeyPolicyPlayReadyPlayRightPtrOutput {
	return o.ToContentKeyPolicyPlayReadyPlayRightPtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPlayReadyPlayRightOutput) ToContentKeyPolicyPlayReadyPlayRightPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyPlayRightPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRight) *ContentKeyPolicyPlayReadyPlayRight {
		return &v
	}).(ContentKeyPolicyPlayReadyPlayRightPtrOutput)
}

// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPlayReadyPlayRightOutput) AgcAndColorStripeRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRight) *int { return v.AgcAndColorStripeRestriction }).(pulumi.IntPtrOutput)
}

// Configures Unknown output handling settings of the license.
func (o ContentKeyPolicyPlayReadyPlayRightOutput) AllowPassingVideoContentToUnknownOutput() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRight) string { return v.AllowPassingVideoContentToUnknownOutput }).(pulumi.StringOutput)
}

// Specifies the output protection level for compressed digital audio.
func (o ContentKeyPolicyPlayReadyPlayRightOutput) AnalogVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRight) *int { return v.AnalogVideoOpl }).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for compressed digital audio.
func (o ContentKeyPolicyPlayReadyPlayRightOutput) CompressedDigitalAudioOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRight) *int { return v.CompressedDigitalAudioOpl }).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for compressed digital video.
func (o ContentKeyPolicyPlayReadyPlayRightOutput) CompressedDigitalVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRight) *int { return v.CompressedDigitalVideoOpl }).(pulumi.IntPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPlayReadyPlayRightOutput) DigitalVideoOnlyContentRestriction() pulumi.BoolOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRight) bool { return v.DigitalVideoOnlyContentRestriction }).(pulumi.BoolOutput)
}

// Configures the Explicit Analog Television Output Restriction in the license. Configuration data must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPlayReadyPlayRightOutput) ExplicitAnalogTelevisionOutputRestriction() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRight) *ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction {
		return v.ExplicitAnalogTelevisionOutputRestriction
	}).(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput)
}

// The amount of time that the license is valid after the license is first used to play content.
func (o ContentKeyPolicyPlayReadyPlayRightOutput) FirstPlayExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRight) *string { return v.FirstPlayExpiration }).(pulumi.StringPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPlayReadyPlayRightOutput) ImageConstraintForAnalogComponentVideoRestriction() pulumi.BoolOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRight) bool {
		return v.ImageConstraintForAnalogComponentVideoRestriction
	}).(pulumi.BoolOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPlayReadyPlayRightOutput) ImageConstraintForAnalogComputerMonitorRestriction() pulumi.BoolOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRight) bool {
		return v.ImageConstraintForAnalogComputerMonitorRestriction
	}).(pulumi.BoolOutput)
}

// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPlayReadyPlayRightOutput) ScmsRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRight) *int { return v.ScmsRestriction }).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for uncompressed digital audio.
func (o ContentKeyPolicyPlayReadyPlayRightOutput) UncompressedDigitalAudioOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRight) *int { return v.UncompressedDigitalAudioOpl }).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for uncompressed digital video.
func (o ContentKeyPolicyPlayReadyPlayRightOutput) UncompressedDigitalVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRight) *int { return v.UncompressedDigitalVideoOpl }).(pulumi.IntPtrOutput)
}

type ContentKeyPolicyPlayReadyPlayRightPtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyPlayRightPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPlayReadyPlayRight)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyPlayRightPtrOutput) ToContentKeyPolicyPlayReadyPlayRightPtrOutput() ContentKeyPolicyPlayReadyPlayRightPtrOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyPlayRightPtrOutput) ToContentKeyPolicyPlayReadyPlayRightPtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyPlayRightPtrOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyPlayRightPtrOutput) Elem() ContentKeyPolicyPlayReadyPlayRightOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRight) ContentKeyPolicyPlayReadyPlayRight { return *v }).(ContentKeyPolicyPlayReadyPlayRightOutput)
}

// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPlayReadyPlayRightPtrOutput) AgcAndColorStripeRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRight) *int {
		if v == nil {
			return nil
		}
		return v.AgcAndColorStripeRestriction
	}).(pulumi.IntPtrOutput)
}

// Configures Unknown output handling settings of the license.
func (o ContentKeyPolicyPlayReadyPlayRightPtrOutput) AllowPassingVideoContentToUnknownOutput() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRight) *string {
		if v == nil {
			return nil
		}
		return &v.AllowPassingVideoContentToUnknownOutput
	}).(pulumi.StringPtrOutput)
}

// Specifies the output protection level for compressed digital audio.
func (o ContentKeyPolicyPlayReadyPlayRightPtrOutput) AnalogVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRight) *int {
		if v == nil {
			return nil
		}
		return v.AnalogVideoOpl
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for compressed digital audio.
func (o ContentKeyPolicyPlayReadyPlayRightPtrOutput) CompressedDigitalAudioOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRight) *int {
		if v == nil {
			return nil
		}
		return v.CompressedDigitalAudioOpl
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for compressed digital video.
func (o ContentKeyPolicyPlayReadyPlayRightPtrOutput) CompressedDigitalVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRight) *int {
		if v == nil {
			return nil
		}
		return v.CompressedDigitalVideoOpl
	}).(pulumi.IntPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPlayReadyPlayRightPtrOutput) DigitalVideoOnlyContentRestriction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRight) *bool {
		if v == nil {
			return nil
		}
		return &v.DigitalVideoOnlyContentRestriction
	}).(pulumi.BoolPtrOutput)
}

// Configures the Explicit Analog Television Output Restriction in the license. Configuration data must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPlayReadyPlayRightPtrOutput) ExplicitAnalogTelevisionOutputRestriction() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRight) *ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction {
		if v == nil {
			return nil
		}
		return v.ExplicitAnalogTelevisionOutputRestriction
	}).(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput)
}

// The amount of time that the license is valid after the license is first used to play content.
func (o ContentKeyPolicyPlayReadyPlayRightPtrOutput) FirstPlayExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRight) *string {
		if v == nil {
			return nil
		}
		return v.FirstPlayExpiration
	}).(pulumi.StringPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPlayReadyPlayRightPtrOutput) ImageConstraintForAnalogComponentVideoRestriction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRight) *bool {
		if v == nil {
			return nil
		}
		return &v.ImageConstraintForAnalogComponentVideoRestriction
	}).(pulumi.BoolPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPlayReadyPlayRightPtrOutput) ImageConstraintForAnalogComputerMonitorRestriction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRight) *bool {
		if v == nil {
			return nil
		}
		return &v.ImageConstraintForAnalogComputerMonitorRestriction
	}).(pulumi.BoolPtrOutput)
}

// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPlayReadyPlayRightPtrOutput) ScmsRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRight) *int {
		if v == nil {
			return nil
		}
		return v.ScmsRestriction
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for uncompressed digital audio.
func (o ContentKeyPolicyPlayReadyPlayRightPtrOutput) UncompressedDigitalAudioOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRight) *int {
		if v == nil {
			return nil
		}
		return v.UncompressedDigitalAudioOpl
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for uncompressed digital video.
func (o ContentKeyPolicyPlayReadyPlayRightPtrOutput) UncompressedDigitalVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRight) *int {
		if v == nil {
			return nil
		}
		return v.UncompressedDigitalVideoOpl
	}).(pulumi.IntPtrOutput)
}

// Configures the Play Right in the PlayReady license.
type ContentKeyPolicyPlayReadyPlayRightResponse struct {
	// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
	AgcAndColorStripeRestriction *int `pulumi:"agcAndColorStripeRestriction"`
	// Configures Unknown output handling settings of the license.
	AllowPassingVideoContentToUnknownOutput string `pulumi:"allowPassingVideoContentToUnknownOutput"`
	// Specifies the output protection level for compressed digital audio.
	AnalogVideoOpl *int `pulumi:"analogVideoOpl"`
	// Specifies the output protection level for compressed digital audio.
	CompressedDigitalAudioOpl *int `pulumi:"compressedDigitalAudioOpl"`
	// Specifies the output protection level for compressed digital video.
	CompressedDigitalVideoOpl *int `pulumi:"compressedDigitalVideoOpl"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	DigitalVideoOnlyContentRestriction bool `pulumi:"digitalVideoOnlyContentRestriction"`
	// Configures the Explicit Analog Television Output Restriction in the license. Configuration data must be between 0 and 3 inclusive.
	ExplicitAnalogTelevisionOutputRestriction *ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse `pulumi:"explicitAnalogTelevisionOutputRestriction"`
	// The amount of time that the license is valid after the license is first used to play content.
	FirstPlayExpiration *string `pulumi:"firstPlayExpiration"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	ImageConstraintForAnalogComponentVideoRestriction bool `pulumi:"imageConstraintForAnalogComponentVideoRestriction"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	ImageConstraintForAnalogComputerMonitorRestriction bool `pulumi:"imageConstraintForAnalogComputerMonitorRestriction"`
	// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
	ScmsRestriction *int `pulumi:"scmsRestriction"`
	// Specifies the output protection level for uncompressed digital audio.
	UncompressedDigitalAudioOpl *int `pulumi:"uncompressedDigitalAudioOpl"`
	// Specifies the output protection level for uncompressed digital video.
	UncompressedDigitalVideoOpl *int `pulumi:"uncompressedDigitalVideoOpl"`
}

// ContentKeyPolicyPlayReadyPlayRightResponseInput is an input type that accepts ContentKeyPolicyPlayReadyPlayRightResponseArgs and ContentKeyPolicyPlayReadyPlayRightResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyPlayRightResponseInput` via:
//
//          ContentKeyPolicyPlayReadyPlayRightResponseArgs{...}
type ContentKeyPolicyPlayReadyPlayRightResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyPlayRightResponseOutput() ContentKeyPolicyPlayReadyPlayRightResponseOutput
	ToContentKeyPolicyPlayReadyPlayRightResponseOutputWithContext(context.Context) ContentKeyPolicyPlayReadyPlayRightResponseOutput
}

// Configures the Play Right in the PlayReady license.
type ContentKeyPolicyPlayReadyPlayRightResponseArgs struct {
	// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
	AgcAndColorStripeRestriction pulumi.IntPtrInput `pulumi:"agcAndColorStripeRestriction"`
	// Configures Unknown output handling settings of the license.
	AllowPassingVideoContentToUnknownOutput pulumi.StringInput `pulumi:"allowPassingVideoContentToUnknownOutput"`
	// Specifies the output protection level for compressed digital audio.
	AnalogVideoOpl pulumi.IntPtrInput `pulumi:"analogVideoOpl"`
	// Specifies the output protection level for compressed digital audio.
	CompressedDigitalAudioOpl pulumi.IntPtrInput `pulumi:"compressedDigitalAudioOpl"`
	// Specifies the output protection level for compressed digital video.
	CompressedDigitalVideoOpl pulumi.IntPtrInput `pulumi:"compressedDigitalVideoOpl"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	DigitalVideoOnlyContentRestriction pulumi.BoolInput `pulumi:"digitalVideoOnlyContentRestriction"`
	// Configures the Explicit Analog Television Output Restriction in the license. Configuration data must be between 0 and 3 inclusive.
	ExplicitAnalogTelevisionOutputRestriction ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrInput `pulumi:"explicitAnalogTelevisionOutputRestriction"`
	// The amount of time that the license is valid after the license is first used to play content.
	FirstPlayExpiration pulumi.StringPtrInput `pulumi:"firstPlayExpiration"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	ImageConstraintForAnalogComponentVideoRestriction pulumi.BoolInput `pulumi:"imageConstraintForAnalogComponentVideoRestriction"`
	// Enables the Image Constraint For Analog Component Video Restriction in the license.
	ImageConstraintForAnalogComputerMonitorRestriction pulumi.BoolInput `pulumi:"imageConstraintForAnalogComputerMonitorRestriction"`
	// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
	ScmsRestriction pulumi.IntPtrInput `pulumi:"scmsRestriction"`
	// Specifies the output protection level for uncompressed digital audio.
	UncompressedDigitalAudioOpl pulumi.IntPtrInput `pulumi:"uncompressedDigitalAudioOpl"`
	// Specifies the output protection level for uncompressed digital video.
	UncompressedDigitalVideoOpl pulumi.IntPtrInput `pulumi:"uncompressedDigitalVideoOpl"`
}

func (ContentKeyPolicyPlayReadyPlayRightResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyPlayRightResponse)(nil)).Elem()
}

func (i ContentKeyPolicyPlayReadyPlayRightResponseArgs) ToContentKeyPolicyPlayReadyPlayRightResponseOutput() ContentKeyPolicyPlayReadyPlayRightResponseOutput {
	return i.ToContentKeyPolicyPlayReadyPlayRightResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPlayReadyPlayRightResponseArgs) ToContentKeyPolicyPlayReadyPlayRightResponseOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyPlayRightResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyPlayRightResponseOutput)
}

func (i ContentKeyPolicyPlayReadyPlayRightResponseArgs) ToContentKeyPolicyPlayReadyPlayRightResponsePtrOutput() ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput {
	return i.ToContentKeyPolicyPlayReadyPlayRightResponsePtrOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPlayReadyPlayRightResponseArgs) ToContentKeyPolicyPlayReadyPlayRightResponsePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyPlayRightResponseOutput).ToContentKeyPolicyPlayReadyPlayRightResponsePtrOutputWithContext(ctx)
}

// ContentKeyPolicyPlayReadyPlayRightResponsePtrInput is an input type that accepts ContentKeyPolicyPlayReadyPlayRightResponseArgs, ContentKeyPolicyPlayReadyPlayRightResponsePtr and ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPlayReadyPlayRightResponsePtrInput` via:
//
//          ContentKeyPolicyPlayReadyPlayRightResponseArgs{...}
//
//  or:
//
//          nil
type ContentKeyPolicyPlayReadyPlayRightResponsePtrInput interface {
	pulumi.Input

	ToContentKeyPolicyPlayReadyPlayRightResponsePtrOutput() ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput
	ToContentKeyPolicyPlayReadyPlayRightResponsePtrOutputWithContext(context.Context) ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput
}

type contentKeyPolicyPlayReadyPlayRightResponsePtrType ContentKeyPolicyPlayReadyPlayRightResponseArgs

func ContentKeyPolicyPlayReadyPlayRightResponsePtr(v *ContentKeyPolicyPlayReadyPlayRightResponseArgs) ContentKeyPolicyPlayReadyPlayRightResponsePtrInput {
	return (*contentKeyPolicyPlayReadyPlayRightResponsePtrType)(v)
}

func (*contentKeyPolicyPlayReadyPlayRightResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPlayReadyPlayRightResponse)(nil)).Elem()
}

func (i *contentKeyPolicyPlayReadyPlayRightResponsePtrType) ToContentKeyPolicyPlayReadyPlayRightResponsePtrOutput() ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput {
	return i.ToContentKeyPolicyPlayReadyPlayRightResponsePtrOutputWithContext(context.Background())
}

func (i *contentKeyPolicyPlayReadyPlayRightResponsePtrType) ToContentKeyPolicyPlayReadyPlayRightResponsePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput)
}

// Configures the Play Right in the PlayReady license.
type ContentKeyPolicyPlayReadyPlayRightResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyPlayRightResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPlayReadyPlayRightResponse)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyPlayRightResponseOutput) ToContentKeyPolicyPlayReadyPlayRightResponseOutput() ContentKeyPolicyPlayReadyPlayRightResponseOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyPlayRightResponseOutput) ToContentKeyPolicyPlayReadyPlayRightResponseOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyPlayRightResponseOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyPlayRightResponseOutput) ToContentKeyPolicyPlayReadyPlayRightResponsePtrOutput() ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput {
	return o.ToContentKeyPolicyPlayReadyPlayRightResponsePtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPlayReadyPlayRightResponseOutput) ToContentKeyPolicyPlayReadyPlayRightResponsePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRightResponse) *ContentKeyPolicyPlayReadyPlayRightResponse {
		return &v
	}).(ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput)
}

// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPlayReadyPlayRightResponseOutput) AgcAndColorStripeRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRightResponse) *int { return v.AgcAndColorStripeRestriction }).(pulumi.IntPtrOutput)
}

// Configures Unknown output handling settings of the license.
func (o ContentKeyPolicyPlayReadyPlayRightResponseOutput) AllowPassingVideoContentToUnknownOutput() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRightResponse) string {
		return v.AllowPassingVideoContentToUnknownOutput
	}).(pulumi.StringOutput)
}

// Specifies the output protection level for compressed digital audio.
func (o ContentKeyPolicyPlayReadyPlayRightResponseOutput) AnalogVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRightResponse) *int { return v.AnalogVideoOpl }).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for compressed digital audio.
func (o ContentKeyPolicyPlayReadyPlayRightResponseOutput) CompressedDigitalAudioOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRightResponse) *int { return v.CompressedDigitalAudioOpl }).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for compressed digital video.
func (o ContentKeyPolicyPlayReadyPlayRightResponseOutput) CompressedDigitalVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRightResponse) *int { return v.CompressedDigitalVideoOpl }).(pulumi.IntPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPlayReadyPlayRightResponseOutput) DigitalVideoOnlyContentRestriction() pulumi.BoolOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRightResponse) bool { return v.DigitalVideoOnlyContentRestriction }).(pulumi.BoolOutput)
}

// Configures the Explicit Analog Television Output Restriction in the license. Configuration data must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPlayReadyPlayRightResponseOutput) ExplicitAnalogTelevisionOutputRestriction() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRightResponse) *ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse {
		return v.ExplicitAnalogTelevisionOutputRestriction
	}).(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput)
}

// The amount of time that the license is valid after the license is first used to play content.
func (o ContentKeyPolicyPlayReadyPlayRightResponseOutput) FirstPlayExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRightResponse) *string { return v.FirstPlayExpiration }).(pulumi.StringPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPlayReadyPlayRightResponseOutput) ImageConstraintForAnalogComponentVideoRestriction() pulumi.BoolOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRightResponse) bool {
		return v.ImageConstraintForAnalogComponentVideoRestriction
	}).(pulumi.BoolOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPlayReadyPlayRightResponseOutput) ImageConstraintForAnalogComputerMonitorRestriction() pulumi.BoolOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRightResponse) bool {
		return v.ImageConstraintForAnalogComputerMonitorRestriction
	}).(pulumi.BoolOutput)
}

// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPlayReadyPlayRightResponseOutput) ScmsRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRightResponse) *int { return v.ScmsRestriction }).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for uncompressed digital audio.
func (o ContentKeyPolicyPlayReadyPlayRightResponseOutput) UncompressedDigitalAudioOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRightResponse) *int { return v.UncompressedDigitalAudioOpl }).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for uncompressed digital video.
func (o ContentKeyPolicyPlayReadyPlayRightResponseOutput) UncompressedDigitalVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPlayReadyPlayRightResponse) *int { return v.UncompressedDigitalVideoOpl }).(pulumi.IntPtrOutput)
}

type ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPlayReadyPlayRightResponse)(nil)).Elem()
}

func (o ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput) ToContentKeyPolicyPlayReadyPlayRightResponsePtrOutput() ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput) ToContentKeyPolicyPlayReadyPlayRightResponsePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput {
	return o
}

func (o ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput) Elem() ContentKeyPolicyPlayReadyPlayRightResponseOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRightResponse) ContentKeyPolicyPlayReadyPlayRightResponse {
		return *v
	}).(ContentKeyPolicyPlayReadyPlayRightResponseOutput)
}

// Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput) AgcAndColorStripeRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRightResponse) *int {
		if v == nil {
			return nil
		}
		return v.AgcAndColorStripeRestriction
	}).(pulumi.IntPtrOutput)
}

// Configures Unknown output handling settings of the license.
func (o ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput) AllowPassingVideoContentToUnknownOutput() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRightResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AllowPassingVideoContentToUnknownOutput
	}).(pulumi.StringPtrOutput)
}

// Specifies the output protection level for compressed digital audio.
func (o ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput) AnalogVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRightResponse) *int {
		if v == nil {
			return nil
		}
		return v.AnalogVideoOpl
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for compressed digital audio.
func (o ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput) CompressedDigitalAudioOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRightResponse) *int {
		if v == nil {
			return nil
		}
		return v.CompressedDigitalAudioOpl
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for compressed digital video.
func (o ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput) CompressedDigitalVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRightResponse) *int {
		if v == nil {
			return nil
		}
		return v.CompressedDigitalVideoOpl
	}).(pulumi.IntPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput) DigitalVideoOnlyContentRestriction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRightResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.DigitalVideoOnlyContentRestriction
	}).(pulumi.BoolPtrOutput)
}

// Configures the Explicit Analog Television Output Restriction in the license. Configuration data must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput) ExplicitAnalogTelevisionOutputRestriction() ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRightResponse) *ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponse {
		if v == nil {
			return nil
		}
		return v.ExplicitAnalogTelevisionOutputRestriction
	}).(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput)
}

// The amount of time that the license is valid after the license is first used to play content.
func (o ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput) FirstPlayExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRightResponse) *string {
		if v == nil {
			return nil
		}
		return v.FirstPlayExpiration
	}).(pulumi.StringPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput) ImageConstraintForAnalogComponentVideoRestriction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRightResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ImageConstraintForAnalogComponentVideoRestriction
	}).(pulumi.BoolPtrOutput)
}

// Enables the Image Constraint For Analog Component Video Restriction in the license.
func (o ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput) ImageConstraintForAnalogComputerMonitorRestriction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRightResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ImageConstraintForAnalogComputerMonitorRestriction
	}).(pulumi.BoolPtrOutput)
}

// Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
func (o ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput) ScmsRestriction() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRightResponse) *int {
		if v == nil {
			return nil
		}
		return v.ScmsRestriction
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for uncompressed digital audio.
func (o ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput) UncompressedDigitalAudioOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRightResponse) *int {
		if v == nil {
			return nil
		}
		return v.UncompressedDigitalAudioOpl
	}).(pulumi.IntPtrOutput)
}

// Specifies the output protection level for uncompressed digital video.
func (o ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput) UncompressedDigitalVideoOpl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPlayReadyPlayRightResponse) *int {
		if v == nil {
			return nil
		}
		return v.UncompressedDigitalVideoOpl
	}).(pulumi.IntPtrOutput)
}

// Specifies a RSA key for token validation
type ContentKeyPolicyRsaTokenKey struct {
	// The RSA Parameter exponent
	Exponent string `pulumi:"exponent"`
	// The RSA Parameter modulus
	Modulus string `pulumi:"modulus"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// ContentKeyPolicyRsaTokenKeyInput is an input type that accepts ContentKeyPolicyRsaTokenKeyArgs and ContentKeyPolicyRsaTokenKeyOutput values.
// You can construct a concrete instance of `ContentKeyPolicyRsaTokenKeyInput` via:
//
//          ContentKeyPolicyRsaTokenKeyArgs{...}
type ContentKeyPolicyRsaTokenKeyInput interface {
	pulumi.Input

	ToContentKeyPolicyRsaTokenKeyOutput() ContentKeyPolicyRsaTokenKeyOutput
	ToContentKeyPolicyRsaTokenKeyOutputWithContext(context.Context) ContentKeyPolicyRsaTokenKeyOutput
}

// Specifies a RSA key for token validation
type ContentKeyPolicyRsaTokenKeyArgs struct {
	// The RSA Parameter exponent
	Exponent pulumi.StringInput `pulumi:"exponent"`
	// The RSA Parameter modulus
	Modulus pulumi.StringInput `pulumi:"modulus"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (ContentKeyPolicyRsaTokenKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyRsaTokenKey)(nil)).Elem()
}

func (i ContentKeyPolicyRsaTokenKeyArgs) ToContentKeyPolicyRsaTokenKeyOutput() ContentKeyPolicyRsaTokenKeyOutput {
	return i.ToContentKeyPolicyRsaTokenKeyOutputWithContext(context.Background())
}

func (i ContentKeyPolicyRsaTokenKeyArgs) ToContentKeyPolicyRsaTokenKeyOutputWithContext(ctx context.Context) ContentKeyPolicyRsaTokenKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyRsaTokenKeyOutput)
}

// Specifies a RSA key for token validation
type ContentKeyPolicyRsaTokenKeyOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyRsaTokenKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyRsaTokenKey)(nil)).Elem()
}

func (o ContentKeyPolicyRsaTokenKeyOutput) ToContentKeyPolicyRsaTokenKeyOutput() ContentKeyPolicyRsaTokenKeyOutput {
	return o
}

func (o ContentKeyPolicyRsaTokenKeyOutput) ToContentKeyPolicyRsaTokenKeyOutputWithContext(ctx context.Context) ContentKeyPolicyRsaTokenKeyOutput {
	return o
}

// The RSA Parameter exponent
func (o ContentKeyPolicyRsaTokenKeyOutput) Exponent() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyRsaTokenKey) string { return v.Exponent }).(pulumi.StringOutput)
}

// The RSA Parameter modulus
func (o ContentKeyPolicyRsaTokenKeyOutput) Modulus() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyRsaTokenKey) string { return v.Modulus }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o ContentKeyPolicyRsaTokenKeyOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyRsaTokenKey) string { return v.OdataType }).(pulumi.StringOutput)
}

// Specifies a RSA key for token validation
type ContentKeyPolicyRsaTokenKeyResponse struct {
	// The RSA Parameter exponent
	Exponent string `pulumi:"exponent"`
	// The RSA Parameter modulus
	Modulus string `pulumi:"modulus"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// ContentKeyPolicyRsaTokenKeyResponseInput is an input type that accepts ContentKeyPolicyRsaTokenKeyResponseArgs and ContentKeyPolicyRsaTokenKeyResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyRsaTokenKeyResponseInput` via:
//
//          ContentKeyPolicyRsaTokenKeyResponseArgs{...}
type ContentKeyPolicyRsaTokenKeyResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyRsaTokenKeyResponseOutput() ContentKeyPolicyRsaTokenKeyResponseOutput
	ToContentKeyPolicyRsaTokenKeyResponseOutputWithContext(context.Context) ContentKeyPolicyRsaTokenKeyResponseOutput
}

// Specifies a RSA key for token validation
type ContentKeyPolicyRsaTokenKeyResponseArgs struct {
	// The RSA Parameter exponent
	Exponent pulumi.StringInput `pulumi:"exponent"`
	// The RSA Parameter modulus
	Modulus pulumi.StringInput `pulumi:"modulus"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (ContentKeyPolicyRsaTokenKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyRsaTokenKeyResponse)(nil)).Elem()
}

func (i ContentKeyPolicyRsaTokenKeyResponseArgs) ToContentKeyPolicyRsaTokenKeyResponseOutput() ContentKeyPolicyRsaTokenKeyResponseOutput {
	return i.ToContentKeyPolicyRsaTokenKeyResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyRsaTokenKeyResponseArgs) ToContentKeyPolicyRsaTokenKeyResponseOutputWithContext(ctx context.Context) ContentKeyPolicyRsaTokenKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyRsaTokenKeyResponseOutput)
}

// Specifies a RSA key for token validation
type ContentKeyPolicyRsaTokenKeyResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyRsaTokenKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyRsaTokenKeyResponse)(nil)).Elem()
}

func (o ContentKeyPolicyRsaTokenKeyResponseOutput) ToContentKeyPolicyRsaTokenKeyResponseOutput() ContentKeyPolicyRsaTokenKeyResponseOutput {
	return o
}

func (o ContentKeyPolicyRsaTokenKeyResponseOutput) ToContentKeyPolicyRsaTokenKeyResponseOutputWithContext(ctx context.Context) ContentKeyPolicyRsaTokenKeyResponseOutput {
	return o
}

// The RSA Parameter exponent
func (o ContentKeyPolicyRsaTokenKeyResponseOutput) Exponent() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyRsaTokenKeyResponse) string { return v.Exponent }).(pulumi.StringOutput)
}

// The RSA Parameter modulus
func (o ContentKeyPolicyRsaTokenKeyResponseOutput) Modulus() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyRsaTokenKeyResponse) string { return v.Modulus }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o ContentKeyPolicyRsaTokenKeyResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyRsaTokenKeyResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Specifies a symmetric key for token validation.
type ContentKeyPolicySymmetricTokenKey struct {
	// The key value of the key
	KeyValue string `pulumi:"keyValue"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// ContentKeyPolicySymmetricTokenKeyInput is an input type that accepts ContentKeyPolicySymmetricTokenKeyArgs and ContentKeyPolicySymmetricTokenKeyOutput values.
// You can construct a concrete instance of `ContentKeyPolicySymmetricTokenKeyInput` via:
//
//          ContentKeyPolicySymmetricTokenKeyArgs{...}
type ContentKeyPolicySymmetricTokenKeyInput interface {
	pulumi.Input

	ToContentKeyPolicySymmetricTokenKeyOutput() ContentKeyPolicySymmetricTokenKeyOutput
	ToContentKeyPolicySymmetricTokenKeyOutputWithContext(context.Context) ContentKeyPolicySymmetricTokenKeyOutput
}

// Specifies a symmetric key for token validation.
type ContentKeyPolicySymmetricTokenKeyArgs struct {
	// The key value of the key
	KeyValue pulumi.StringInput `pulumi:"keyValue"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (ContentKeyPolicySymmetricTokenKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicySymmetricTokenKey)(nil)).Elem()
}

func (i ContentKeyPolicySymmetricTokenKeyArgs) ToContentKeyPolicySymmetricTokenKeyOutput() ContentKeyPolicySymmetricTokenKeyOutput {
	return i.ToContentKeyPolicySymmetricTokenKeyOutputWithContext(context.Background())
}

func (i ContentKeyPolicySymmetricTokenKeyArgs) ToContentKeyPolicySymmetricTokenKeyOutputWithContext(ctx context.Context) ContentKeyPolicySymmetricTokenKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicySymmetricTokenKeyOutput)
}

// Specifies a symmetric key for token validation.
type ContentKeyPolicySymmetricTokenKeyOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicySymmetricTokenKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicySymmetricTokenKey)(nil)).Elem()
}

func (o ContentKeyPolicySymmetricTokenKeyOutput) ToContentKeyPolicySymmetricTokenKeyOutput() ContentKeyPolicySymmetricTokenKeyOutput {
	return o
}

func (o ContentKeyPolicySymmetricTokenKeyOutput) ToContentKeyPolicySymmetricTokenKeyOutputWithContext(ctx context.Context) ContentKeyPolicySymmetricTokenKeyOutput {
	return o
}

// The key value of the key
func (o ContentKeyPolicySymmetricTokenKeyOutput) KeyValue() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicySymmetricTokenKey) string { return v.KeyValue }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o ContentKeyPolicySymmetricTokenKeyOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicySymmetricTokenKey) string { return v.OdataType }).(pulumi.StringOutput)
}

// Specifies a symmetric key for token validation.
type ContentKeyPolicySymmetricTokenKeyResponse struct {
	// The key value of the key
	KeyValue string `pulumi:"keyValue"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// ContentKeyPolicySymmetricTokenKeyResponseInput is an input type that accepts ContentKeyPolicySymmetricTokenKeyResponseArgs and ContentKeyPolicySymmetricTokenKeyResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicySymmetricTokenKeyResponseInput` via:
//
//          ContentKeyPolicySymmetricTokenKeyResponseArgs{...}
type ContentKeyPolicySymmetricTokenKeyResponseInput interface {
	pulumi.Input

	ToContentKeyPolicySymmetricTokenKeyResponseOutput() ContentKeyPolicySymmetricTokenKeyResponseOutput
	ToContentKeyPolicySymmetricTokenKeyResponseOutputWithContext(context.Context) ContentKeyPolicySymmetricTokenKeyResponseOutput
}

// Specifies a symmetric key for token validation.
type ContentKeyPolicySymmetricTokenKeyResponseArgs struct {
	// The key value of the key
	KeyValue pulumi.StringInput `pulumi:"keyValue"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (ContentKeyPolicySymmetricTokenKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicySymmetricTokenKeyResponse)(nil)).Elem()
}

func (i ContentKeyPolicySymmetricTokenKeyResponseArgs) ToContentKeyPolicySymmetricTokenKeyResponseOutput() ContentKeyPolicySymmetricTokenKeyResponseOutput {
	return i.ToContentKeyPolicySymmetricTokenKeyResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicySymmetricTokenKeyResponseArgs) ToContentKeyPolicySymmetricTokenKeyResponseOutputWithContext(ctx context.Context) ContentKeyPolicySymmetricTokenKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicySymmetricTokenKeyResponseOutput)
}

// Specifies a symmetric key for token validation.
type ContentKeyPolicySymmetricTokenKeyResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicySymmetricTokenKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicySymmetricTokenKeyResponse)(nil)).Elem()
}

func (o ContentKeyPolicySymmetricTokenKeyResponseOutput) ToContentKeyPolicySymmetricTokenKeyResponseOutput() ContentKeyPolicySymmetricTokenKeyResponseOutput {
	return o
}

func (o ContentKeyPolicySymmetricTokenKeyResponseOutput) ToContentKeyPolicySymmetricTokenKeyResponseOutputWithContext(ctx context.Context) ContentKeyPolicySymmetricTokenKeyResponseOutput {
	return o
}

// The key value of the key
func (o ContentKeyPolicySymmetricTokenKeyResponseOutput) KeyValue() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicySymmetricTokenKeyResponse) string { return v.KeyValue }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o ContentKeyPolicySymmetricTokenKeyResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicySymmetricTokenKeyResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Represents a token claim.
type ContentKeyPolicyTokenClaim struct {
	// Token claim type.
	ClaimType *string `pulumi:"claimType"`
	// Token claim value.
	ClaimValue *string `pulumi:"claimValue"`
}

// ContentKeyPolicyTokenClaimInput is an input type that accepts ContentKeyPolicyTokenClaimArgs and ContentKeyPolicyTokenClaimOutput values.
// You can construct a concrete instance of `ContentKeyPolicyTokenClaimInput` via:
//
//          ContentKeyPolicyTokenClaimArgs{...}
type ContentKeyPolicyTokenClaimInput interface {
	pulumi.Input

	ToContentKeyPolicyTokenClaimOutput() ContentKeyPolicyTokenClaimOutput
	ToContentKeyPolicyTokenClaimOutputWithContext(context.Context) ContentKeyPolicyTokenClaimOutput
}

// Represents a token claim.
type ContentKeyPolicyTokenClaimArgs struct {
	// Token claim type.
	ClaimType pulumi.StringPtrInput `pulumi:"claimType"`
	// Token claim value.
	ClaimValue pulumi.StringPtrInput `pulumi:"claimValue"`
}

func (ContentKeyPolicyTokenClaimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyTokenClaim)(nil)).Elem()
}

func (i ContentKeyPolicyTokenClaimArgs) ToContentKeyPolicyTokenClaimOutput() ContentKeyPolicyTokenClaimOutput {
	return i.ToContentKeyPolicyTokenClaimOutputWithContext(context.Background())
}

func (i ContentKeyPolicyTokenClaimArgs) ToContentKeyPolicyTokenClaimOutputWithContext(ctx context.Context) ContentKeyPolicyTokenClaimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyTokenClaimOutput)
}

// ContentKeyPolicyTokenClaimArrayInput is an input type that accepts ContentKeyPolicyTokenClaimArray and ContentKeyPolicyTokenClaimArrayOutput values.
// You can construct a concrete instance of `ContentKeyPolicyTokenClaimArrayInput` via:
//
//          ContentKeyPolicyTokenClaimArray{ ContentKeyPolicyTokenClaimArgs{...} }
type ContentKeyPolicyTokenClaimArrayInput interface {
	pulumi.Input

	ToContentKeyPolicyTokenClaimArrayOutput() ContentKeyPolicyTokenClaimArrayOutput
	ToContentKeyPolicyTokenClaimArrayOutputWithContext(context.Context) ContentKeyPolicyTokenClaimArrayOutput
}

type ContentKeyPolicyTokenClaimArray []ContentKeyPolicyTokenClaimInput

func (ContentKeyPolicyTokenClaimArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyTokenClaim)(nil)).Elem()
}

func (i ContentKeyPolicyTokenClaimArray) ToContentKeyPolicyTokenClaimArrayOutput() ContentKeyPolicyTokenClaimArrayOutput {
	return i.ToContentKeyPolicyTokenClaimArrayOutputWithContext(context.Background())
}

func (i ContentKeyPolicyTokenClaimArray) ToContentKeyPolicyTokenClaimArrayOutputWithContext(ctx context.Context) ContentKeyPolicyTokenClaimArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyTokenClaimArrayOutput)
}

// Represents a token claim.
type ContentKeyPolicyTokenClaimOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyTokenClaimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyTokenClaim)(nil)).Elem()
}

func (o ContentKeyPolicyTokenClaimOutput) ToContentKeyPolicyTokenClaimOutput() ContentKeyPolicyTokenClaimOutput {
	return o
}

func (o ContentKeyPolicyTokenClaimOutput) ToContentKeyPolicyTokenClaimOutputWithContext(ctx context.Context) ContentKeyPolicyTokenClaimOutput {
	return o
}

// Token claim type.
func (o ContentKeyPolicyTokenClaimOutput) ClaimType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenClaim) *string { return v.ClaimType }).(pulumi.StringPtrOutput)
}

// Token claim value.
func (o ContentKeyPolicyTokenClaimOutput) ClaimValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenClaim) *string { return v.ClaimValue }).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyTokenClaimArrayOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyTokenClaimArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyTokenClaim)(nil)).Elem()
}

func (o ContentKeyPolicyTokenClaimArrayOutput) ToContentKeyPolicyTokenClaimArrayOutput() ContentKeyPolicyTokenClaimArrayOutput {
	return o
}

func (o ContentKeyPolicyTokenClaimArrayOutput) ToContentKeyPolicyTokenClaimArrayOutputWithContext(ctx context.Context) ContentKeyPolicyTokenClaimArrayOutput {
	return o
}

func (o ContentKeyPolicyTokenClaimArrayOutput) Index(i pulumi.IntInput) ContentKeyPolicyTokenClaimOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentKeyPolicyTokenClaim {
		return vs[0].([]ContentKeyPolicyTokenClaim)[vs[1].(int)]
	}).(ContentKeyPolicyTokenClaimOutput)
}

// Represents a token claim.
type ContentKeyPolicyTokenClaimResponse struct {
	// Token claim type.
	ClaimType *string `pulumi:"claimType"`
	// Token claim value.
	ClaimValue *string `pulumi:"claimValue"`
}

// ContentKeyPolicyTokenClaimResponseInput is an input type that accepts ContentKeyPolicyTokenClaimResponseArgs and ContentKeyPolicyTokenClaimResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyTokenClaimResponseInput` via:
//
//          ContentKeyPolicyTokenClaimResponseArgs{...}
type ContentKeyPolicyTokenClaimResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyTokenClaimResponseOutput() ContentKeyPolicyTokenClaimResponseOutput
	ToContentKeyPolicyTokenClaimResponseOutputWithContext(context.Context) ContentKeyPolicyTokenClaimResponseOutput
}

// Represents a token claim.
type ContentKeyPolicyTokenClaimResponseArgs struct {
	// Token claim type.
	ClaimType pulumi.StringPtrInput `pulumi:"claimType"`
	// Token claim value.
	ClaimValue pulumi.StringPtrInput `pulumi:"claimValue"`
}

func (ContentKeyPolicyTokenClaimResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyTokenClaimResponse)(nil)).Elem()
}

func (i ContentKeyPolicyTokenClaimResponseArgs) ToContentKeyPolicyTokenClaimResponseOutput() ContentKeyPolicyTokenClaimResponseOutput {
	return i.ToContentKeyPolicyTokenClaimResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyTokenClaimResponseArgs) ToContentKeyPolicyTokenClaimResponseOutputWithContext(ctx context.Context) ContentKeyPolicyTokenClaimResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyTokenClaimResponseOutput)
}

// ContentKeyPolicyTokenClaimResponseArrayInput is an input type that accepts ContentKeyPolicyTokenClaimResponseArray and ContentKeyPolicyTokenClaimResponseArrayOutput values.
// You can construct a concrete instance of `ContentKeyPolicyTokenClaimResponseArrayInput` via:
//
//          ContentKeyPolicyTokenClaimResponseArray{ ContentKeyPolicyTokenClaimResponseArgs{...} }
type ContentKeyPolicyTokenClaimResponseArrayInput interface {
	pulumi.Input

	ToContentKeyPolicyTokenClaimResponseArrayOutput() ContentKeyPolicyTokenClaimResponseArrayOutput
	ToContentKeyPolicyTokenClaimResponseArrayOutputWithContext(context.Context) ContentKeyPolicyTokenClaimResponseArrayOutput
}

type ContentKeyPolicyTokenClaimResponseArray []ContentKeyPolicyTokenClaimResponseInput

func (ContentKeyPolicyTokenClaimResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyTokenClaimResponse)(nil)).Elem()
}

func (i ContentKeyPolicyTokenClaimResponseArray) ToContentKeyPolicyTokenClaimResponseArrayOutput() ContentKeyPolicyTokenClaimResponseArrayOutput {
	return i.ToContentKeyPolicyTokenClaimResponseArrayOutputWithContext(context.Background())
}

func (i ContentKeyPolicyTokenClaimResponseArray) ToContentKeyPolicyTokenClaimResponseArrayOutputWithContext(ctx context.Context) ContentKeyPolicyTokenClaimResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyTokenClaimResponseArrayOutput)
}

// Represents a token claim.
type ContentKeyPolicyTokenClaimResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyTokenClaimResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyTokenClaimResponse)(nil)).Elem()
}

func (o ContentKeyPolicyTokenClaimResponseOutput) ToContentKeyPolicyTokenClaimResponseOutput() ContentKeyPolicyTokenClaimResponseOutput {
	return o
}

func (o ContentKeyPolicyTokenClaimResponseOutput) ToContentKeyPolicyTokenClaimResponseOutputWithContext(ctx context.Context) ContentKeyPolicyTokenClaimResponseOutput {
	return o
}

// Token claim type.
func (o ContentKeyPolicyTokenClaimResponseOutput) ClaimType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenClaimResponse) *string { return v.ClaimType }).(pulumi.StringPtrOutput)
}

// Token claim value.
func (o ContentKeyPolicyTokenClaimResponseOutput) ClaimValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenClaimResponse) *string { return v.ClaimValue }).(pulumi.StringPtrOutput)
}

type ContentKeyPolicyTokenClaimResponseArrayOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyTokenClaimResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyTokenClaimResponse)(nil)).Elem()
}

func (o ContentKeyPolicyTokenClaimResponseArrayOutput) ToContentKeyPolicyTokenClaimResponseArrayOutput() ContentKeyPolicyTokenClaimResponseArrayOutput {
	return o
}

func (o ContentKeyPolicyTokenClaimResponseArrayOutput) ToContentKeyPolicyTokenClaimResponseArrayOutputWithContext(ctx context.Context) ContentKeyPolicyTokenClaimResponseArrayOutput {
	return o
}

func (o ContentKeyPolicyTokenClaimResponseArrayOutput) Index(i pulumi.IntInput) ContentKeyPolicyTokenClaimResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentKeyPolicyTokenClaimResponse {
		return vs[0].([]ContentKeyPolicyTokenClaimResponse)[vs[1].(int)]
	}).(ContentKeyPolicyTokenClaimResponseOutput)
}

// Represents a token restriction. Provided token must match these requirements for successful license or key delivery.
type ContentKeyPolicyTokenRestriction struct {
	// A list of alternative verification keys.
	AlternateVerificationKeys []interface{} `pulumi:"alternateVerificationKeys"`
	// The audience for the token.
	Audience string `pulumi:"audience"`
	// The token issuer.
	Issuer string `pulumi:"issuer"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The OpenID connect discovery document.
	OpenIdConnectDiscoveryDocument *string `pulumi:"openIdConnectDiscoveryDocument"`
	// The primary verification key.
	PrimaryVerificationKey interface{} `pulumi:"primaryVerificationKey"`
	// A list of required token claims.
	RequiredClaims []ContentKeyPolicyTokenClaim `pulumi:"requiredClaims"`
	// The type of token.
	RestrictionTokenType string `pulumi:"restrictionTokenType"`
}

// ContentKeyPolicyTokenRestrictionInput is an input type that accepts ContentKeyPolicyTokenRestrictionArgs and ContentKeyPolicyTokenRestrictionOutput values.
// You can construct a concrete instance of `ContentKeyPolicyTokenRestrictionInput` via:
//
//          ContentKeyPolicyTokenRestrictionArgs{...}
type ContentKeyPolicyTokenRestrictionInput interface {
	pulumi.Input

	ToContentKeyPolicyTokenRestrictionOutput() ContentKeyPolicyTokenRestrictionOutput
	ToContentKeyPolicyTokenRestrictionOutputWithContext(context.Context) ContentKeyPolicyTokenRestrictionOutput
}

// Represents a token restriction. Provided token must match these requirements for successful license or key delivery.
type ContentKeyPolicyTokenRestrictionArgs struct {
	// A list of alternative verification keys.
	AlternateVerificationKeys pulumi.ArrayInput `pulumi:"alternateVerificationKeys"`
	// The audience for the token.
	Audience pulumi.StringInput `pulumi:"audience"`
	// The token issuer.
	Issuer pulumi.StringInput `pulumi:"issuer"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The OpenID connect discovery document.
	OpenIdConnectDiscoveryDocument pulumi.StringPtrInput `pulumi:"openIdConnectDiscoveryDocument"`
	// The primary verification key.
	PrimaryVerificationKey pulumi.Input `pulumi:"primaryVerificationKey"`
	// A list of required token claims.
	RequiredClaims ContentKeyPolicyTokenClaimArrayInput `pulumi:"requiredClaims"`
	// The type of token.
	RestrictionTokenType pulumi.StringInput `pulumi:"restrictionTokenType"`
}

func (ContentKeyPolicyTokenRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyTokenRestriction)(nil)).Elem()
}

func (i ContentKeyPolicyTokenRestrictionArgs) ToContentKeyPolicyTokenRestrictionOutput() ContentKeyPolicyTokenRestrictionOutput {
	return i.ToContentKeyPolicyTokenRestrictionOutputWithContext(context.Background())
}

func (i ContentKeyPolicyTokenRestrictionArgs) ToContentKeyPolicyTokenRestrictionOutputWithContext(ctx context.Context) ContentKeyPolicyTokenRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyTokenRestrictionOutput)
}

// Represents a token restriction. Provided token must match these requirements for successful license or key delivery.
type ContentKeyPolicyTokenRestrictionOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyTokenRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyTokenRestriction)(nil)).Elem()
}

func (o ContentKeyPolicyTokenRestrictionOutput) ToContentKeyPolicyTokenRestrictionOutput() ContentKeyPolicyTokenRestrictionOutput {
	return o
}

func (o ContentKeyPolicyTokenRestrictionOutput) ToContentKeyPolicyTokenRestrictionOutputWithContext(ctx context.Context) ContentKeyPolicyTokenRestrictionOutput {
	return o
}

// A list of alternative verification keys.
func (o ContentKeyPolicyTokenRestrictionOutput) AlternateVerificationKeys() pulumi.ArrayOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenRestriction) []interface{} { return v.AlternateVerificationKeys }).(pulumi.ArrayOutput)
}

// The audience for the token.
func (o ContentKeyPolicyTokenRestrictionOutput) Audience() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenRestriction) string { return v.Audience }).(pulumi.StringOutput)
}

// The token issuer.
func (o ContentKeyPolicyTokenRestrictionOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenRestriction) string { return v.Issuer }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o ContentKeyPolicyTokenRestrictionOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenRestriction) string { return v.OdataType }).(pulumi.StringOutput)
}

// The OpenID connect discovery document.
func (o ContentKeyPolicyTokenRestrictionOutput) OpenIdConnectDiscoveryDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenRestriction) *string { return v.OpenIdConnectDiscoveryDocument }).(pulumi.StringPtrOutput)
}

// The primary verification key.
func (o ContentKeyPolicyTokenRestrictionOutput) PrimaryVerificationKey() pulumi.AnyOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenRestriction) interface{} { return v.PrimaryVerificationKey }).(pulumi.AnyOutput)
}

// A list of required token claims.
func (o ContentKeyPolicyTokenRestrictionOutput) RequiredClaims() ContentKeyPolicyTokenClaimArrayOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenRestriction) []ContentKeyPolicyTokenClaim { return v.RequiredClaims }).(ContentKeyPolicyTokenClaimArrayOutput)
}

// The type of token.
func (o ContentKeyPolicyTokenRestrictionOutput) RestrictionTokenType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenRestriction) string { return v.RestrictionTokenType }).(pulumi.StringOutput)
}

// Represents a token restriction. Provided token must match these requirements for successful license or key delivery.
type ContentKeyPolicyTokenRestrictionResponse struct {
	// A list of alternative verification keys.
	AlternateVerificationKeys []interface{} `pulumi:"alternateVerificationKeys"`
	// The audience for the token.
	Audience string `pulumi:"audience"`
	// The token issuer.
	Issuer string `pulumi:"issuer"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The OpenID connect discovery document.
	OpenIdConnectDiscoveryDocument *string `pulumi:"openIdConnectDiscoveryDocument"`
	// The primary verification key.
	PrimaryVerificationKey interface{} `pulumi:"primaryVerificationKey"`
	// A list of required token claims.
	RequiredClaims []ContentKeyPolicyTokenClaimResponse `pulumi:"requiredClaims"`
	// The type of token.
	RestrictionTokenType string `pulumi:"restrictionTokenType"`
}

// ContentKeyPolicyTokenRestrictionResponseInput is an input type that accepts ContentKeyPolicyTokenRestrictionResponseArgs and ContentKeyPolicyTokenRestrictionResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyTokenRestrictionResponseInput` via:
//
//          ContentKeyPolicyTokenRestrictionResponseArgs{...}
type ContentKeyPolicyTokenRestrictionResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyTokenRestrictionResponseOutput() ContentKeyPolicyTokenRestrictionResponseOutput
	ToContentKeyPolicyTokenRestrictionResponseOutputWithContext(context.Context) ContentKeyPolicyTokenRestrictionResponseOutput
}

// Represents a token restriction. Provided token must match these requirements for successful license or key delivery.
type ContentKeyPolicyTokenRestrictionResponseArgs struct {
	// A list of alternative verification keys.
	AlternateVerificationKeys pulumi.ArrayInput `pulumi:"alternateVerificationKeys"`
	// The audience for the token.
	Audience pulumi.StringInput `pulumi:"audience"`
	// The token issuer.
	Issuer pulumi.StringInput `pulumi:"issuer"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The OpenID connect discovery document.
	OpenIdConnectDiscoveryDocument pulumi.StringPtrInput `pulumi:"openIdConnectDiscoveryDocument"`
	// The primary verification key.
	PrimaryVerificationKey pulumi.Input `pulumi:"primaryVerificationKey"`
	// A list of required token claims.
	RequiredClaims ContentKeyPolicyTokenClaimResponseArrayInput `pulumi:"requiredClaims"`
	// The type of token.
	RestrictionTokenType pulumi.StringInput `pulumi:"restrictionTokenType"`
}

func (ContentKeyPolicyTokenRestrictionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyTokenRestrictionResponse)(nil)).Elem()
}

func (i ContentKeyPolicyTokenRestrictionResponseArgs) ToContentKeyPolicyTokenRestrictionResponseOutput() ContentKeyPolicyTokenRestrictionResponseOutput {
	return i.ToContentKeyPolicyTokenRestrictionResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyTokenRestrictionResponseArgs) ToContentKeyPolicyTokenRestrictionResponseOutputWithContext(ctx context.Context) ContentKeyPolicyTokenRestrictionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyTokenRestrictionResponseOutput)
}

// Represents a token restriction. Provided token must match these requirements for successful license or key delivery.
type ContentKeyPolicyTokenRestrictionResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyTokenRestrictionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyTokenRestrictionResponse)(nil)).Elem()
}

func (o ContentKeyPolicyTokenRestrictionResponseOutput) ToContentKeyPolicyTokenRestrictionResponseOutput() ContentKeyPolicyTokenRestrictionResponseOutput {
	return o
}

func (o ContentKeyPolicyTokenRestrictionResponseOutput) ToContentKeyPolicyTokenRestrictionResponseOutputWithContext(ctx context.Context) ContentKeyPolicyTokenRestrictionResponseOutput {
	return o
}

// A list of alternative verification keys.
func (o ContentKeyPolicyTokenRestrictionResponseOutput) AlternateVerificationKeys() pulumi.ArrayOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenRestrictionResponse) []interface{} { return v.AlternateVerificationKeys }).(pulumi.ArrayOutput)
}

// The audience for the token.
func (o ContentKeyPolicyTokenRestrictionResponseOutput) Audience() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenRestrictionResponse) string { return v.Audience }).(pulumi.StringOutput)
}

// The token issuer.
func (o ContentKeyPolicyTokenRestrictionResponseOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenRestrictionResponse) string { return v.Issuer }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o ContentKeyPolicyTokenRestrictionResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenRestrictionResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// The OpenID connect discovery document.
func (o ContentKeyPolicyTokenRestrictionResponseOutput) OpenIdConnectDiscoveryDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenRestrictionResponse) *string { return v.OpenIdConnectDiscoveryDocument }).(pulumi.StringPtrOutput)
}

// The primary verification key.
func (o ContentKeyPolicyTokenRestrictionResponseOutput) PrimaryVerificationKey() pulumi.AnyOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenRestrictionResponse) interface{} { return v.PrimaryVerificationKey }).(pulumi.AnyOutput)
}

// A list of required token claims.
func (o ContentKeyPolicyTokenRestrictionResponseOutput) RequiredClaims() ContentKeyPolicyTokenClaimResponseArrayOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenRestrictionResponse) []ContentKeyPolicyTokenClaimResponse {
		return v.RequiredClaims
	}).(ContentKeyPolicyTokenClaimResponseArrayOutput)
}

// The type of token.
func (o ContentKeyPolicyTokenRestrictionResponseOutput) RestrictionTokenType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyTokenRestrictionResponse) string { return v.RestrictionTokenType }).(pulumi.StringOutput)
}

// Represents a ContentKeyPolicyConfiguration that is unavailable in the current API version.
type ContentKeyPolicyUnknownConfiguration struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// ContentKeyPolicyUnknownConfigurationInput is an input type that accepts ContentKeyPolicyUnknownConfigurationArgs and ContentKeyPolicyUnknownConfigurationOutput values.
// You can construct a concrete instance of `ContentKeyPolicyUnknownConfigurationInput` via:
//
//          ContentKeyPolicyUnknownConfigurationArgs{...}
type ContentKeyPolicyUnknownConfigurationInput interface {
	pulumi.Input

	ToContentKeyPolicyUnknownConfigurationOutput() ContentKeyPolicyUnknownConfigurationOutput
	ToContentKeyPolicyUnknownConfigurationOutputWithContext(context.Context) ContentKeyPolicyUnknownConfigurationOutput
}

// Represents a ContentKeyPolicyConfiguration that is unavailable in the current API version.
type ContentKeyPolicyUnknownConfigurationArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (ContentKeyPolicyUnknownConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyUnknownConfiguration)(nil)).Elem()
}

func (i ContentKeyPolicyUnknownConfigurationArgs) ToContentKeyPolicyUnknownConfigurationOutput() ContentKeyPolicyUnknownConfigurationOutput {
	return i.ToContentKeyPolicyUnknownConfigurationOutputWithContext(context.Background())
}

func (i ContentKeyPolicyUnknownConfigurationArgs) ToContentKeyPolicyUnknownConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyUnknownConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyUnknownConfigurationOutput)
}

// Represents a ContentKeyPolicyConfiguration that is unavailable in the current API version.
type ContentKeyPolicyUnknownConfigurationOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyUnknownConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyUnknownConfiguration)(nil)).Elem()
}

func (o ContentKeyPolicyUnknownConfigurationOutput) ToContentKeyPolicyUnknownConfigurationOutput() ContentKeyPolicyUnknownConfigurationOutput {
	return o
}

func (o ContentKeyPolicyUnknownConfigurationOutput) ToContentKeyPolicyUnknownConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyUnknownConfigurationOutput {
	return o
}

// The discriminator for derived types.
func (o ContentKeyPolicyUnknownConfigurationOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyUnknownConfiguration) string { return v.OdataType }).(pulumi.StringOutput)
}

// Represents a ContentKeyPolicyConfiguration that is unavailable in the current API version.
type ContentKeyPolicyUnknownConfigurationResponse struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// ContentKeyPolicyUnknownConfigurationResponseInput is an input type that accepts ContentKeyPolicyUnknownConfigurationResponseArgs and ContentKeyPolicyUnknownConfigurationResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyUnknownConfigurationResponseInput` via:
//
//          ContentKeyPolicyUnknownConfigurationResponseArgs{...}
type ContentKeyPolicyUnknownConfigurationResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyUnknownConfigurationResponseOutput() ContentKeyPolicyUnknownConfigurationResponseOutput
	ToContentKeyPolicyUnknownConfigurationResponseOutputWithContext(context.Context) ContentKeyPolicyUnknownConfigurationResponseOutput
}

// Represents a ContentKeyPolicyConfiguration that is unavailable in the current API version.
type ContentKeyPolicyUnknownConfigurationResponseArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (ContentKeyPolicyUnknownConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyUnknownConfigurationResponse)(nil)).Elem()
}

func (i ContentKeyPolicyUnknownConfigurationResponseArgs) ToContentKeyPolicyUnknownConfigurationResponseOutput() ContentKeyPolicyUnknownConfigurationResponseOutput {
	return i.ToContentKeyPolicyUnknownConfigurationResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyUnknownConfigurationResponseArgs) ToContentKeyPolicyUnknownConfigurationResponseOutputWithContext(ctx context.Context) ContentKeyPolicyUnknownConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyUnknownConfigurationResponseOutput)
}

// Represents a ContentKeyPolicyConfiguration that is unavailable in the current API version.
type ContentKeyPolicyUnknownConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyUnknownConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyUnknownConfigurationResponse)(nil)).Elem()
}

func (o ContentKeyPolicyUnknownConfigurationResponseOutput) ToContentKeyPolicyUnknownConfigurationResponseOutput() ContentKeyPolicyUnknownConfigurationResponseOutput {
	return o
}

func (o ContentKeyPolicyUnknownConfigurationResponseOutput) ToContentKeyPolicyUnknownConfigurationResponseOutputWithContext(ctx context.Context) ContentKeyPolicyUnknownConfigurationResponseOutput {
	return o
}

// The discriminator for derived types.
func (o ContentKeyPolicyUnknownConfigurationResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyUnknownConfigurationResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Represents a ContentKeyPolicyRestriction that is unavailable in the current API version.
type ContentKeyPolicyUnknownRestriction struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// ContentKeyPolicyUnknownRestrictionInput is an input type that accepts ContentKeyPolicyUnknownRestrictionArgs and ContentKeyPolicyUnknownRestrictionOutput values.
// You can construct a concrete instance of `ContentKeyPolicyUnknownRestrictionInput` via:
//
//          ContentKeyPolicyUnknownRestrictionArgs{...}
type ContentKeyPolicyUnknownRestrictionInput interface {
	pulumi.Input

	ToContentKeyPolicyUnknownRestrictionOutput() ContentKeyPolicyUnknownRestrictionOutput
	ToContentKeyPolicyUnknownRestrictionOutputWithContext(context.Context) ContentKeyPolicyUnknownRestrictionOutput
}

// Represents a ContentKeyPolicyRestriction that is unavailable in the current API version.
type ContentKeyPolicyUnknownRestrictionArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (ContentKeyPolicyUnknownRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyUnknownRestriction)(nil)).Elem()
}

func (i ContentKeyPolicyUnknownRestrictionArgs) ToContentKeyPolicyUnknownRestrictionOutput() ContentKeyPolicyUnknownRestrictionOutput {
	return i.ToContentKeyPolicyUnknownRestrictionOutputWithContext(context.Background())
}

func (i ContentKeyPolicyUnknownRestrictionArgs) ToContentKeyPolicyUnknownRestrictionOutputWithContext(ctx context.Context) ContentKeyPolicyUnknownRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyUnknownRestrictionOutput)
}

// Represents a ContentKeyPolicyRestriction that is unavailable in the current API version.
type ContentKeyPolicyUnknownRestrictionOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyUnknownRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyUnknownRestriction)(nil)).Elem()
}

func (o ContentKeyPolicyUnknownRestrictionOutput) ToContentKeyPolicyUnknownRestrictionOutput() ContentKeyPolicyUnknownRestrictionOutput {
	return o
}

func (o ContentKeyPolicyUnknownRestrictionOutput) ToContentKeyPolicyUnknownRestrictionOutputWithContext(ctx context.Context) ContentKeyPolicyUnknownRestrictionOutput {
	return o
}

// The discriminator for derived types.
func (o ContentKeyPolicyUnknownRestrictionOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyUnknownRestriction) string { return v.OdataType }).(pulumi.StringOutput)
}

// Represents a ContentKeyPolicyRestriction that is unavailable in the current API version.
type ContentKeyPolicyUnknownRestrictionResponse struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// ContentKeyPolicyUnknownRestrictionResponseInput is an input type that accepts ContentKeyPolicyUnknownRestrictionResponseArgs and ContentKeyPolicyUnknownRestrictionResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyUnknownRestrictionResponseInput` via:
//
//          ContentKeyPolicyUnknownRestrictionResponseArgs{...}
type ContentKeyPolicyUnknownRestrictionResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyUnknownRestrictionResponseOutput() ContentKeyPolicyUnknownRestrictionResponseOutput
	ToContentKeyPolicyUnknownRestrictionResponseOutputWithContext(context.Context) ContentKeyPolicyUnknownRestrictionResponseOutput
}

// Represents a ContentKeyPolicyRestriction that is unavailable in the current API version.
type ContentKeyPolicyUnknownRestrictionResponseArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (ContentKeyPolicyUnknownRestrictionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyUnknownRestrictionResponse)(nil)).Elem()
}

func (i ContentKeyPolicyUnknownRestrictionResponseArgs) ToContentKeyPolicyUnknownRestrictionResponseOutput() ContentKeyPolicyUnknownRestrictionResponseOutput {
	return i.ToContentKeyPolicyUnknownRestrictionResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyUnknownRestrictionResponseArgs) ToContentKeyPolicyUnknownRestrictionResponseOutputWithContext(ctx context.Context) ContentKeyPolicyUnknownRestrictionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyUnknownRestrictionResponseOutput)
}

// Represents a ContentKeyPolicyRestriction that is unavailable in the current API version.
type ContentKeyPolicyUnknownRestrictionResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyUnknownRestrictionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyUnknownRestrictionResponse)(nil)).Elem()
}

func (o ContentKeyPolicyUnknownRestrictionResponseOutput) ToContentKeyPolicyUnknownRestrictionResponseOutput() ContentKeyPolicyUnknownRestrictionResponseOutput {
	return o
}

func (o ContentKeyPolicyUnknownRestrictionResponseOutput) ToContentKeyPolicyUnknownRestrictionResponseOutputWithContext(ctx context.Context) ContentKeyPolicyUnknownRestrictionResponseOutput {
	return o
}

// The discriminator for derived types.
func (o ContentKeyPolicyUnknownRestrictionResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyUnknownRestrictionResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Specifies a configuration for Widevine licenses.
type ContentKeyPolicyWidevineConfiguration struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The Widevine template.
	WidevineTemplate string `pulumi:"widevineTemplate"`
}

// ContentKeyPolicyWidevineConfigurationInput is an input type that accepts ContentKeyPolicyWidevineConfigurationArgs and ContentKeyPolicyWidevineConfigurationOutput values.
// You can construct a concrete instance of `ContentKeyPolicyWidevineConfigurationInput` via:
//
//          ContentKeyPolicyWidevineConfigurationArgs{...}
type ContentKeyPolicyWidevineConfigurationInput interface {
	pulumi.Input

	ToContentKeyPolicyWidevineConfigurationOutput() ContentKeyPolicyWidevineConfigurationOutput
	ToContentKeyPolicyWidevineConfigurationOutputWithContext(context.Context) ContentKeyPolicyWidevineConfigurationOutput
}

// Specifies a configuration for Widevine licenses.
type ContentKeyPolicyWidevineConfigurationArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The Widevine template.
	WidevineTemplate pulumi.StringInput `pulumi:"widevineTemplate"`
}

func (ContentKeyPolicyWidevineConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyWidevineConfiguration)(nil)).Elem()
}

func (i ContentKeyPolicyWidevineConfigurationArgs) ToContentKeyPolicyWidevineConfigurationOutput() ContentKeyPolicyWidevineConfigurationOutput {
	return i.ToContentKeyPolicyWidevineConfigurationOutputWithContext(context.Background())
}

func (i ContentKeyPolicyWidevineConfigurationArgs) ToContentKeyPolicyWidevineConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyWidevineConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyWidevineConfigurationOutput)
}

// Specifies a configuration for Widevine licenses.
type ContentKeyPolicyWidevineConfigurationOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyWidevineConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyWidevineConfiguration)(nil)).Elem()
}

func (o ContentKeyPolicyWidevineConfigurationOutput) ToContentKeyPolicyWidevineConfigurationOutput() ContentKeyPolicyWidevineConfigurationOutput {
	return o
}

func (o ContentKeyPolicyWidevineConfigurationOutput) ToContentKeyPolicyWidevineConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyWidevineConfigurationOutput {
	return o
}

// The discriminator for derived types.
func (o ContentKeyPolicyWidevineConfigurationOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyWidevineConfiguration) string { return v.OdataType }).(pulumi.StringOutput)
}

// The Widevine template.
func (o ContentKeyPolicyWidevineConfigurationOutput) WidevineTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyWidevineConfiguration) string { return v.WidevineTemplate }).(pulumi.StringOutput)
}

// Specifies a configuration for Widevine licenses.
type ContentKeyPolicyWidevineConfigurationResponse struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The Widevine template.
	WidevineTemplate string `pulumi:"widevineTemplate"`
}

// ContentKeyPolicyWidevineConfigurationResponseInput is an input type that accepts ContentKeyPolicyWidevineConfigurationResponseArgs and ContentKeyPolicyWidevineConfigurationResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyWidevineConfigurationResponseInput` via:
//
//          ContentKeyPolicyWidevineConfigurationResponseArgs{...}
type ContentKeyPolicyWidevineConfigurationResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyWidevineConfigurationResponseOutput() ContentKeyPolicyWidevineConfigurationResponseOutput
	ToContentKeyPolicyWidevineConfigurationResponseOutputWithContext(context.Context) ContentKeyPolicyWidevineConfigurationResponseOutput
}

// Specifies a configuration for Widevine licenses.
type ContentKeyPolicyWidevineConfigurationResponseArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The Widevine template.
	WidevineTemplate pulumi.StringInput `pulumi:"widevineTemplate"`
}

func (ContentKeyPolicyWidevineConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyWidevineConfigurationResponse)(nil)).Elem()
}

func (i ContentKeyPolicyWidevineConfigurationResponseArgs) ToContentKeyPolicyWidevineConfigurationResponseOutput() ContentKeyPolicyWidevineConfigurationResponseOutput {
	return i.ToContentKeyPolicyWidevineConfigurationResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyWidevineConfigurationResponseArgs) ToContentKeyPolicyWidevineConfigurationResponseOutputWithContext(ctx context.Context) ContentKeyPolicyWidevineConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyWidevineConfigurationResponseOutput)
}

// Specifies a configuration for Widevine licenses.
type ContentKeyPolicyWidevineConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyWidevineConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyWidevineConfigurationResponse)(nil)).Elem()
}

func (o ContentKeyPolicyWidevineConfigurationResponseOutput) ToContentKeyPolicyWidevineConfigurationResponseOutput() ContentKeyPolicyWidevineConfigurationResponseOutput {
	return o
}

func (o ContentKeyPolicyWidevineConfigurationResponseOutput) ToContentKeyPolicyWidevineConfigurationResponseOutputWithContext(ctx context.Context) ContentKeyPolicyWidevineConfigurationResponseOutput {
	return o
}

// The discriminator for derived types.
func (o ContentKeyPolicyWidevineConfigurationResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyWidevineConfigurationResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// The Widevine template.
func (o ContentKeyPolicyWidevineConfigurationResponseOutput) WidevineTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyWidevineConfigurationResponse) string { return v.WidevineTemplate }).(pulumi.StringOutput)
}

// Specifies a certificate for token validation.
type ContentKeyPolicyX509CertificateTokenKey struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET)
	RawBody string `pulumi:"rawBody"`
}

// ContentKeyPolicyX509CertificateTokenKeyInput is an input type that accepts ContentKeyPolicyX509CertificateTokenKeyArgs and ContentKeyPolicyX509CertificateTokenKeyOutput values.
// You can construct a concrete instance of `ContentKeyPolicyX509CertificateTokenKeyInput` via:
//
//          ContentKeyPolicyX509CertificateTokenKeyArgs{...}
type ContentKeyPolicyX509CertificateTokenKeyInput interface {
	pulumi.Input

	ToContentKeyPolicyX509CertificateTokenKeyOutput() ContentKeyPolicyX509CertificateTokenKeyOutput
	ToContentKeyPolicyX509CertificateTokenKeyOutputWithContext(context.Context) ContentKeyPolicyX509CertificateTokenKeyOutput
}

// Specifies a certificate for token validation.
type ContentKeyPolicyX509CertificateTokenKeyArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET)
	RawBody pulumi.StringInput `pulumi:"rawBody"`
}

func (ContentKeyPolicyX509CertificateTokenKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyX509CertificateTokenKey)(nil)).Elem()
}

func (i ContentKeyPolicyX509CertificateTokenKeyArgs) ToContentKeyPolicyX509CertificateTokenKeyOutput() ContentKeyPolicyX509CertificateTokenKeyOutput {
	return i.ToContentKeyPolicyX509CertificateTokenKeyOutputWithContext(context.Background())
}

func (i ContentKeyPolicyX509CertificateTokenKeyArgs) ToContentKeyPolicyX509CertificateTokenKeyOutputWithContext(ctx context.Context) ContentKeyPolicyX509CertificateTokenKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyX509CertificateTokenKeyOutput)
}

// Specifies a certificate for token validation.
type ContentKeyPolicyX509CertificateTokenKeyOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyX509CertificateTokenKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyX509CertificateTokenKey)(nil)).Elem()
}

func (o ContentKeyPolicyX509CertificateTokenKeyOutput) ToContentKeyPolicyX509CertificateTokenKeyOutput() ContentKeyPolicyX509CertificateTokenKeyOutput {
	return o
}

func (o ContentKeyPolicyX509CertificateTokenKeyOutput) ToContentKeyPolicyX509CertificateTokenKeyOutputWithContext(ctx context.Context) ContentKeyPolicyX509CertificateTokenKeyOutput {
	return o
}

// The discriminator for derived types.
func (o ContentKeyPolicyX509CertificateTokenKeyOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyX509CertificateTokenKey) string { return v.OdataType }).(pulumi.StringOutput)
}

// The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET)
func (o ContentKeyPolicyX509CertificateTokenKeyOutput) RawBody() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyX509CertificateTokenKey) string { return v.RawBody }).(pulumi.StringOutput)
}

// Specifies a certificate for token validation.
type ContentKeyPolicyX509CertificateTokenKeyResponse struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET)
	RawBody string `pulumi:"rawBody"`
}

// ContentKeyPolicyX509CertificateTokenKeyResponseInput is an input type that accepts ContentKeyPolicyX509CertificateTokenKeyResponseArgs and ContentKeyPolicyX509CertificateTokenKeyResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyX509CertificateTokenKeyResponseInput` via:
//
//          ContentKeyPolicyX509CertificateTokenKeyResponseArgs{...}
type ContentKeyPolicyX509CertificateTokenKeyResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyX509CertificateTokenKeyResponseOutput() ContentKeyPolicyX509CertificateTokenKeyResponseOutput
	ToContentKeyPolicyX509CertificateTokenKeyResponseOutputWithContext(context.Context) ContentKeyPolicyX509CertificateTokenKeyResponseOutput
}

// Specifies a certificate for token validation.
type ContentKeyPolicyX509CertificateTokenKeyResponseArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET)
	RawBody pulumi.StringInput `pulumi:"rawBody"`
}

func (ContentKeyPolicyX509CertificateTokenKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyX509CertificateTokenKeyResponse)(nil)).Elem()
}

func (i ContentKeyPolicyX509CertificateTokenKeyResponseArgs) ToContentKeyPolicyX509CertificateTokenKeyResponseOutput() ContentKeyPolicyX509CertificateTokenKeyResponseOutput {
	return i.ToContentKeyPolicyX509CertificateTokenKeyResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyX509CertificateTokenKeyResponseArgs) ToContentKeyPolicyX509CertificateTokenKeyResponseOutputWithContext(ctx context.Context) ContentKeyPolicyX509CertificateTokenKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyX509CertificateTokenKeyResponseOutput)
}

// Specifies a certificate for token validation.
type ContentKeyPolicyX509CertificateTokenKeyResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyX509CertificateTokenKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyX509CertificateTokenKeyResponse)(nil)).Elem()
}

func (o ContentKeyPolicyX509CertificateTokenKeyResponseOutput) ToContentKeyPolicyX509CertificateTokenKeyResponseOutput() ContentKeyPolicyX509CertificateTokenKeyResponseOutput {
	return o
}

func (o ContentKeyPolicyX509CertificateTokenKeyResponseOutput) ToContentKeyPolicyX509CertificateTokenKeyResponseOutputWithContext(ctx context.Context) ContentKeyPolicyX509CertificateTokenKeyResponseOutput {
	return o
}

// The discriminator for derived types.
func (o ContentKeyPolicyX509CertificateTokenKeyResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyX509CertificateTokenKeyResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET)
func (o ContentKeyPolicyX509CertificateTokenKeyResponseOutput) RawBody() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyX509CertificateTokenKeyResponse) string { return v.RawBody }).(pulumi.StringOutput)
}

// A codec flag, which tells the encoder to copy the input audio bitstream.
type CopyAudio struct {
	// An optional label for the codec. The label can be used to control muxing behavior.
	Label *string `pulumi:"label"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// CopyAudioInput is an input type that accepts CopyAudioArgs and CopyAudioOutput values.
// You can construct a concrete instance of `CopyAudioInput` via:
//
//          CopyAudioArgs{...}
type CopyAudioInput interface {
	pulumi.Input

	ToCopyAudioOutput() CopyAudioOutput
	ToCopyAudioOutputWithContext(context.Context) CopyAudioOutput
}

// A codec flag, which tells the encoder to copy the input audio bitstream.
type CopyAudioArgs struct {
	// An optional label for the codec. The label can be used to control muxing behavior.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (CopyAudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyAudio)(nil)).Elem()
}

func (i CopyAudioArgs) ToCopyAudioOutput() CopyAudioOutput {
	return i.ToCopyAudioOutputWithContext(context.Background())
}

func (i CopyAudioArgs) ToCopyAudioOutputWithContext(ctx context.Context) CopyAudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CopyAudioOutput)
}

// A codec flag, which tells the encoder to copy the input audio bitstream.
type CopyAudioOutput struct{ *pulumi.OutputState }

func (CopyAudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyAudio)(nil)).Elem()
}

func (o CopyAudioOutput) ToCopyAudioOutput() CopyAudioOutput {
	return o
}

func (o CopyAudioOutput) ToCopyAudioOutputWithContext(ctx context.Context) CopyAudioOutput {
	return o
}

// An optional label for the codec. The label can be used to control muxing behavior.
func (o CopyAudioOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CopyAudio) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The discriminator for derived types.
func (o CopyAudioOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v CopyAudio) string { return v.OdataType }).(pulumi.StringOutput)
}

// A codec flag, which tells the encoder to copy the input audio bitstream.
type CopyAudioResponse struct {
	// An optional label for the codec. The label can be used to control muxing behavior.
	Label *string `pulumi:"label"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// CopyAudioResponseInput is an input type that accepts CopyAudioResponseArgs and CopyAudioResponseOutput values.
// You can construct a concrete instance of `CopyAudioResponseInput` via:
//
//          CopyAudioResponseArgs{...}
type CopyAudioResponseInput interface {
	pulumi.Input

	ToCopyAudioResponseOutput() CopyAudioResponseOutput
	ToCopyAudioResponseOutputWithContext(context.Context) CopyAudioResponseOutput
}

// A codec flag, which tells the encoder to copy the input audio bitstream.
type CopyAudioResponseArgs struct {
	// An optional label for the codec. The label can be used to control muxing behavior.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (CopyAudioResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyAudioResponse)(nil)).Elem()
}

func (i CopyAudioResponseArgs) ToCopyAudioResponseOutput() CopyAudioResponseOutput {
	return i.ToCopyAudioResponseOutputWithContext(context.Background())
}

func (i CopyAudioResponseArgs) ToCopyAudioResponseOutputWithContext(ctx context.Context) CopyAudioResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CopyAudioResponseOutput)
}

// A codec flag, which tells the encoder to copy the input audio bitstream.
type CopyAudioResponseOutput struct{ *pulumi.OutputState }

func (CopyAudioResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyAudioResponse)(nil)).Elem()
}

func (o CopyAudioResponseOutput) ToCopyAudioResponseOutput() CopyAudioResponseOutput {
	return o
}

func (o CopyAudioResponseOutput) ToCopyAudioResponseOutputWithContext(ctx context.Context) CopyAudioResponseOutput {
	return o
}

// An optional label for the codec. The label can be used to control muxing behavior.
func (o CopyAudioResponseOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CopyAudioResponse) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The discriminator for derived types.
func (o CopyAudioResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v CopyAudioResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// A codec flag, which tells the encoder to copy the input video bitstream without re-encoding.
type CopyVideo struct {
	// An optional label for the codec. The label can be used to control muxing behavior.
	Label *string `pulumi:"label"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// CopyVideoInput is an input type that accepts CopyVideoArgs and CopyVideoOutput values.
// You can construct a concrete instance of `CopyVideoInput` via:
//
//          CopyVideoArgs{...}
type CopyVideoInput interface {
	pulumi.Input

	ToCopyVideoOutput() CopyVideoOutput
	ToCopyVideoOutputWithContext(context.Context) CopyVideoOutput
}

// A codec flag, which tells the encoder to copy the input video bitstream without re-encoding.
type CopyVideoArgs struct {
	// An optional label for the codec. The label can be used to control muxing behavior.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (CopyVideoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyVideo)(nil)).Elem()
}

func (i CopyVideoArgs) ToCopyVideoOutput() CopyVideoOutput {
	return i.ToCopyVideoOutputWithContext(context.Background())
}

func (i CopyVideoArgs) ToCopyVideoOutputWithContext(ctx context.Context) CopyVideoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CopyVideoOutput)
}

// A codec flag, which tells the encoder to copy the input video bitstream without re-encoding.
type CopyVideoOutput struct{ *pulumi.OutputState }

func (CopyVideoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyVideo)(nil)).Elem()
}

func (o CopyVideoOutput) ToCopyVideoOutput() CopyVideoOutput {
	return o
}

func (o CopyVideoOutput) ToCopyVideoOutputWithContext(ctx context.Context) CopyVideoOutput {
	return o
}

// An optional label for the codec. The label can be used to control muxing behavior.
func (o CopyVideoOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CopyVideo) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The discriminator for derived types.
func (o CopyVideoOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v CopyVideo) string { return v.OdataType }).(pulumi.StringOutput)
}

// A codec flag, which tells the encoder to copy the input video bitstream without re-encoding.
type CopyVideoResponse struct {
	// An optional label for the codec. The label can be used to control muxing behavior.
	Label *string `pulumi:"label"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// CopyVideoResponseInput is an input type that accepts CopyVideoResponseArgs and CopyVideoResponseOutput values.
// You can construct a concrete instance of `CopyVideoResponseInput` via:
//
//          CopyVideoResponseArgs{...}
type CopyVideoResponseInput interface {
	pulumi.Input

	ToCopyVideoResponseOutput() CopyVideoResponseOutput
	ToCopyVideoResponseOutputWithContext(context.Context) CopyVideoResponseOutput
}

// A codec flag, which tells the encoder to copy the input video bitstream without re-encoding.
type CopyVideoResponseArgs struct {
	// An optional label for the codec. The label can be used to control muxing behavior.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (CopyVideoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyVideoResponse)(nil)).Elem()
}

func (i CopyVideoResponseArgs) ToCopyVideoResponseOutput() CopyVideoResponseOutput {
	return i.ToCopyVideoResponseOutputWithContext(context.Background())
}

func (i CopyVideoResponseArgs) ToCopyVideoResponseOutputWithContext(ctx context.Context) CopyVideoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CopyVideoResponseOutput)
}

// A codec flag, which tells the encoder to copy the input video bitstream without re-encoding.
type CopyVideoResponseOutput struct{ *pulumi.OutputState }

func (CopyVideoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyVideoResponse)(nil)).Elem()
}

func (o CopyVideoResponseOutput) ToCopyVideoResponseOutput() CopyVideoResponseOutput {
	return o
}

func (o CopyVideoResponseOutput) ToCopyVideoResponseOutputWithContext(ctx context.Context) CopyVideoResponseOutput {
	return o
}

// An optional label for the codec. The label can be used to control muxing behavior.
func (o CopyVideoResponseOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CopyVideoResponse) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The discriminator for derived types.
func (o CopyVideoResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v CopyVideoResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// The client access policy.
type CrossSiteAccessPolicies struct {
	// The content of clientaccesspolicy.xml used by Silverlight.
	ClientAccessPolicy *string `pulumi:"clientAccessPolicy"`
	// The content of crossdomain.xml used by Silverlight.
	CrossDomainPolicy *string `pulumi:"crossDomainPolicy"`
}

// CrossSiteAccessPoliciesInput is an input type that accepts CrossSiteAccessPoliciesArgs and CrossSiteAccessPoliciesOutput values.
// You can construct a concrete instance of `CrossSiteAccessPoliciesInput` via:
//
//          CrossSiteAccessPoliciesArgs{...}
type CrossSiteAccessPoliciesInput interface {
	pulumi.Input

	ToCrossSiteAccessPoliciesOutput() CrossSiteAccessPoliciesOutput
	ToCrossSiteAccessPoliciesOutputWithContext(context.Context) CrossSiteAccessPoliciesOutput
}

// The client access policy.
type CrossSiteAccessPoliciesArgs struct {
	// The content of clientaccesspolicy.xml used by Silverlight.
	ClientAccessPolicy pulumi.StringPtrInput `pulumi:"clientAccessPolicy"`
	// The content of crossdomain.xml used by Silverlight.
	CrossDomainPolicy pulumi.StringPtrInput `pulumi:"crossDomainPolicy"`
}

func (CrossSiteAccessPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossSiteAccessPolicies)(nil)).Elem()
}

func (i CrossSiteAccessPoliciesArgs) ToCrossSiteAccessPoliciesOutput() CrossSiteAccessPoliciesOutput {
	return i.ToCrossSiteAccessPoliciesOutputWithContext(context.Background())
}

func (i CrossSiteAccessPoliciesArgs) ToCrossSiteAccessPoliciesOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossSiteAccessPoliciesOutput)
}

func (i CrossSiteAccessPoliciesArgs) ToCrossSiteAccessPoliciesPtrOutput() CrossSiteAccessPoliciesPtrOutput {
	return i.ToCrossSiteAccessPoliciesPtrOutputWithContext(context.Background())
}

func (i CrossSiteAccessPoliciesArgs) ToCrossSiteAccessPoliciesPtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossSiteAccessPoliciesOutput).ToCrossSiteAccessPoliciesPtrOutputWithContext(ctx)
}

// CrossSiteAccessPoliciesPtrInput is an input type that accepts CrossSiteAccessPoliciesArgs, CrossSiteAccessPoliciesPtr and CrossSiteAccessPoliciesPtrOutput values.
// You can construct a concrete instance of `CrossSiteAccessPoliciesPtrInput` via:
//
//          CrossSiteAccessPoliciesArgs{...}
//
//  or:
//
//          nil
type CrossSiteAccessPoliciesPtrInput interface {
	pulumi.Input

	ToCrossSiteAccessPoliciesPtrOutput() CrossSiteAccessPoliciesPtrOutput
	ToCrossSiteAccessPoliciesPtrOutputWithContext(context.Context) CrossSiteAccessPoliciesPtrOutput
}

type crossSiteAccessPoliciesPtrType CrossSiteAccessPoliciesArgs

func CrossSiteAccessPoliciesPtr(v *CrossSiteAccessPoliciesArgs) CrossSiteAccessPoliciesPtrInput {
	return (*crossSiteAccessPoliciesPtrType)(v)
}

func (*crossSiteAccessPoliciesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossSiteAccessPolicies)(nil)).Elem()
}

func (i *crossSiteAccessPoliciesPtrType) ToCrossSiteAccessPoliciesPtrOutput() CrossSiteAccessPoliciesPtrOutput {
	return i.ToCrossSiteAccessPoliciesPtrOutputWithContext(context.Background())
}

func (i *crossSiteAccessPoliciesPtrType) ToCrossSiteAccessPoliciesPtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossSiteAccessPoliciesPtrOutput)
}

// The client access policy.
type CrossSiteAccessPoliciesOutput struct{ *pulumi.OutputState }

func (CrossSiteAccessPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossSiteAccessPolicies)(nil)).Elem()
}

func (o CrossSiteAccessPoliciesOutput) ToCrossSiteAccessPoliciesOutput() CrossSiteAccessPoliciesOutput {
	return o
}

func (o CrossSiteAccessPoliciesOutput) ToCrossSiteAccessPoliciesOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesOutput {
	return o
}

func (o CrossSiteAccessPoliciesOutput) ToCrossSiteAccessPoliciesPtrOutput() CrossSiteAccessPoliciesPtrOutput {
	return o.ToCrossSiteAccessPoliciesPtrOutputWithContext(context.Background())
}

func (o CrossSiteAccessPoliciesOutput) ToCrossSiteAccessPoliciesPtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesPtrOutput {
	return o.ApplyT(func(v CrossSiteAccessPolicies) *CrossSiteAccessPolicies {
		return &v
	}).(CrossSiteAccessPoliciesPtrOutput)
}

// The content of clientaccesspolicy.xml used by Silverlight.
func (o CrossSiteAccessPoliciesOutput) ClientAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossSiteAccessPolicies) *string { return v.ClientAccessPolicy }).(pulumi.StringPtrOutput)
}

// The content of crossdomain.xml used by Silverlight.
func (o CrossSiteAccessPoliciesOutput) CrossDomainPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossSiteAccessPolicies) *string { return v.CrossDomainPolicy }).(pulumi.StringPtrOutput)
}

type CrossSiteAccessPoliciesPtrOutput struct{ *pulumi.OutputState }

func (CrossSiteAccessPoliciesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossSiteAccessPolicies)(nil)).Elem()
}

func (o CrossSiteAccessPoliciesPtrOutput) ToCrossSiteAccessPoliciesPtrOutput() CrossSiteAccessPoliciesPtrOutput {
	return o
}

func (o CrossSiteAccessPoliciesPtrOutput) ToCrossSiteAccessPoliciesPtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesPtrOutput {
	return o
}

func (o CrossSiteAccessPoliciesPtrOutput) Elem() CrossSiteAccessPoliciesOutput {
	return o.ApplyT(func(v *CrossSiteAccessPolicies) CrossSiteAccessPolicies { return *v }).(CrossSiteAccessPoliciesOutput)
}

// The content of clientaccesspolicy.xml used by Silverlight.
func (o CrossSiteAccessPoliciesPtrOutput) ClientAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossSiteAccessPolicies) *string {
		if v == nil {
			return nil
		}
		return v.ClientAccessPolicy
	}).(pulumi.StringPtrOutput)
}

// The content of crossdomain.xml used by Silverlight.
func (o CrossSiteAccessPoliciesPtrOutput) CrossDomainPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossSiteAccessPolicies) *string {
		if v == nil {
			return nil
		}
		return v.CrossDomainPolicy
	}).(pulumi.StringPtrOutput)
}

// The client access policy.
type CrossSiteAccessPoliciesResponse struct {
	// The content of clientaccesspolicy.xml used by Silverlight.
	ClientAccessPolicy *string `pulumi:"clientAccessPolicy"`
	// The content of crossdomain.xml used by Silverlight.
	CrossDomainPolicy *string `pulumi:"crossDomainPolicy"`
}

// CrossSiteAccessPoliciesResponseInput is an input type that accepts CrossSiteAccessPoliciesResponseArgs and CrossSiteAccessPoliciesResponseOutput values.
// You can construct a concrete instance of `CrossSiteAccessPoliciesResponseInput` via:
//
//          CrossSiteAccessPoliciesResponseArgs{...}
type CrossSiteAccessPoliciesResponseInput interface {
	pulumi.Input

	ToCrossSiteAccessPoliciesResponseOutput() CrossSiteAccessPoliciesResponseOutput
	ToCrossSiteAccessPoliciesResponseOutputWithContext(context.Context) CrossSiteAccessPoliciesResponseOutput
}

// The client access policy.
type CrossSiteAccessPoliciesResponseArgs struct {
	// The content of clientaccesspolicy.xml used by Silverlight.
	ClientAccessPolicy pulumi.StringPtrInput `pulumi:"clientAccessPolicy"`
	// The content of crossdomain.xml used by Silverlight.
	CrossDomainPolicy pulumi.StringPtrInput `pulumi:"crossDomainPolicy"`
}

func (CrossSiteAccessPoliciesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossSiteAccessPoliciesResponse)(nil)).Elem()
}

func (i CrossSiteAccessPoliciesResponseArgs) ToCrossSiteAccessPoliciesResponseOutput() CrossSiteAccessPoliciesResponseOutput {
	return i.ToCrossSiteAccessPoliciesResponseOutputWithContext(context.Background())
}

func (i CrossSiteAccessPoliciesResponseArgs) ToCrossSiteAccessPoliciesResponseOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossSiteAccessPoliciesResponseOutput)
}

func (i CrossSiteAccessPoliciesResponseArgs) ToCrossSiteAccessPoliciesResponsePtrOutput() CrossSiteAccessPoliciesResponsePtrOutput {
	return i.ToCrossSiteAccessPoliciesResponsePtrOutputWithContext(context.Background())
}

func (i CrossSiteAccessPoliciesResponseArgs) ToCrossSiteAccessPoliciesResponsePtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossSiteAccessPoliciesResponseOutput).ToCrossSiteAccessPoliciesResponsePtrOutputWithContext(ctx)
}

// CrossSiteAccessPoliciesResponsePtrInput is an input type that accepts CrossSiteAccessPoliciesResponseArgs, CrossSiteAccessPoliciesResponsePtr and CrossSiteAccessPoliciesResponsePtrOutput values.
// You can construct a concrete instance of `CrossSiteAccessPoliciesResponsePtrInput` via:
//
//          CrossSiteAccessPoliciesResponseArgs{...}
//
//  or:
//
//          nil
type CrossSiteAccessPoliciesResponsePtrInput interface {
	pulumi.Input

	ToCrossSiteAccessPoliciesResponsePtrOutput() CrossSiteAccessPoliciesResponsePtrOutput
	ToCrossSiteAccessPoliciesResponsePtrOutputWithContext(context.Context) CrossSiteAccessPoliciesResponsePtrOutput
}

type crossSiteAccessPoliciesResponsePtrType CrossSiteAccessPoliciesResponseArgs

func CrossSiteAccessPoliciesResponsePtr(v *CrossSiteAccessPoliciesResponseArgs) CrossSiteAccessPoliciesResponsePtrInput {
	return (*crossSiteAccessPoliciesResponsePtrType)(v)
}

func (*crossSiteAccessPoliciesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossSiteAccessPoliciesResponse)(nil)).Elem()
}

func (i *crossSiteAccessPoliciesResponsePtrType) ToCrossSiteAccessPoliciesResponsePtrOutput() CrossSiteAccessPoliciesResponsePtrOutput {
	return i.ToCrossSiteAccessPoliciesResponsePtrOutputWithContext(context.Background())
}

func (i *crossSiteAccessPoliciesResponsePtrType) ToCrossSiteAccessPoliciesResponsePtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossSiteAccessPoliciesResponsePtrOutput)
}

// The client access policy.
type CrossSiteAccessPoliciesResponseOutput struct{ *pulumi.OutputState }

func (CrossSiteAccessPoliciesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossSiteAccessPoliciesResponse)(nil)).Elem()
}

func (o CrossSiteAccessPoliciesResponseOutput) ToCrossSiteAccessPoliciesResponseOutput() CrossSiteAccessPoliciesResponseOutput {
	return o
}

func (o CrossSiteAccessPoliciesResponseOutput) ToCrossSiteAccessPoliciesResponseOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesResponseOutput {
	return o
}

func (o CrossSiteAccessPoliciesResponseOutput) ToCrossSiteAccessPoliciesResponsePtrOutput() CrossSiteAccessPoliciesResponsePtrOutput {
	return o.ToCrossSiteAccessPoliciesResponsePtrOutputWithContext(context.Background())
}

func (o CrossSiteAccessPoliciesResponseOutput) ToCrossSiteAccessPoliciesResponsePtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesResponsePtrOutput {
	return o.ApplyT(func(v CrossSiteAccessPoliciesResponse) *CrossSiteAccessPoliciesResponse {
		return &v
	}).(CrossSiteAccessPoliciesResponsePtrOutput)
}

// The content of clientaccesspolicy.xml used by Silverlight.
func (o CrossSiteAccessPoliciesResponseOutput) ClientAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossSiteAccessPoliciesResponse) *string { return v.ClientAccessPolicy }).(pulumi.StringPtrOutput)
}

// The content of crossdomain.xml used by Silverlight.
func (o CrossSiteAccessPoliciesResponseOutput) CrossDomainPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossSiteAccessPoliciesResponse) *string { return v.CrossDomainPolicy }).(pulumi.StringPtrOutput)
}

type CrossSiteAccessPoliciesResponsePtrOutput struct{ *pulumi.OutputState }

func (CrossSiteAccessPoliciesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossSiteAccessPoliciesResponse)(nil)).Elem()
}

func (o CrossSiteAccessPoliciesResponsePtrOutput) ToCrossSiteAccessPoliciesResponsePtrOutput() CrossSiteAccessPoliciesResponsePtrOutput {
	return o
}

func (o CrossSiteAccessPoliciesResponsePtrOutput) ToCrossSiteAccessPoliciesResponsePtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesResponsePtrOutput {
	return o
}

func (o CrossSiteAccessPoliciesResponsePtrOutput) Elem() CrossSiteAccessPoliciesResponseOutput {
	return o.ApplyT(func(v *CrossSiteAccessPoliciesResponse) CrossSiteAccessPoliciesResponse { return *v }).(CrossSiteAccessPoliciesResponseOutput)
}

// The content of clientaccesspolicy.xml used by Silverlight.
func (o CrossSiteAccessPoliciesResponsePtrOutput) ClientAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossSiteAccessPoliciesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientAccessPolicy
	}).(pulumi.StringPtrOutput)
}

// The content of crossdomain.xml used by Silverlight.
func (o CrossSiteAccessPoliciesResponsePtrOutput) CrossDomainPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossSiteAccessPoliciesResponse) *string {
		if v == nil {
			return nil
		}
		return v.CrossDomainPolicy
	}).(pulumi.StringPtrOutput)
}

// Class to specify properties of default content key for each encryption scheme
type DefaultKey struct {
	// Label can be used to specify Content Key when creating a Streaming Locator
	Label *string `pulumi:"label"`
	// Policy used by Default Key
	PolicyName *string `pulumi:"policyName"`
}

// DefaultKeyInput is an input type that accepts DefaultKeyArgs and DefaultKeyOutput values.
// You can construct a concrete instance of `DefaultKeyInput` via:
//
//          DefaultKeyArgs{...}
type DefaultKeyInput interface {
	pulumi.Input

	ToDefaultKeyOutput() DefaultKeyOutput
	ToDefaultKeyOutputWithContext(context.Context) DefaultKeyOutput
}

// Class to specify properties of default content key for each encryption scheme
type DefaultKeyArgs struct {
	// Label can be used to specify Content Key when creating a Streaming Locator
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Policy used by Default Key
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
}

func (DefaultKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultKey)(nil)).Elem()
}

func (i DefaultKeyArgs) ToDefaultKeyOutput() DefaultKeyOutput {
	return i.ToDefaultKeyOutputWithContext(context.Background())
}

func (i DefaultKeyArgs) ToDefaultKeyOutputWithContext(ctx context.Context) DefaultKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultKeyOutput)
}

func (i DefaultKeyArgs) ToDefaultKeyPtrOutput() DefaultKeyPtrOutput {
	return i.ToDefaultKeyPtrOutputWithContext(context.Background())
}

func (i DefaultKeyArgs) ToDefaultKeyPtrOutputWithContext(ctx context.Context) DefaultKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultKeyOutput).ToDefaultKeyPtrOutputWithContext(ctx)
}

// DefaultKeyPtrInput is an input type that accepts DefaultKeyArgs, DefaultKeyPtr and DefaultKeyPtrOutput values.
// You can construct a concrete instance of `DefaultKeyPtrInput` via:
//
//          DefaultKeyArgs{...}
//
//  or:
//
//          nil
type DefaultKeyPtrInput interface {
	pulumi.Input

	ToDefaultKeyPtrOutput() DefaultKeyPtrOutput
	ToDefaultKeyPtrOutputWithContext(context.Context) DefaultKeyPtrOutput
}

type defaultKeyPtrType DefaultKeyArgs

func DefaultKeyPtr(v *DefaultKeyArgs) DefaultKeyPtrInput {
	return (*defaultKeyPtrType)(v)
}

func (*defaultKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultKey)(nil)).Elem()
}

func (i *defaultKeyPtrType) ToDefaultKeyPtrOutput() DefaultKeyPtrOutput {
	return i.ToDefaultKeyPtrOutputWithContext(context.Background())
}

func (i *defaultKeyPtrType) ToDefaultKeyPtrOutputWithContext(ctx context.Context) DefaultKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultKeyPtrOutput)
}

// Class to specify properties of default content key for each encryption scheme
type DefaultKeyOutput struct{ *pulumi.OutputState }

func (DefaultKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultKey)(nil)).Elem()
}

func (o DefaultKeyOutput) ToDefaultKeyOutput() DefaultKeyOutput {
	return o
}

func (o DefaultKeyOutput) ToDefaultKeyOutputWithContext(ctx context.Context) DefaultKeyOutput {
	return o
}

func (o DefaultKeyOutput) ToDefaultKeyPtrOutput() DefaultKeyPtrOutput {
	return o.ToDefaultKeyPtrOutputWithContext(context.Background())
}

func (o DefaultKeyOutput) ToDefaultKeyPtrOutputWithContext(ctx context.Context) DefaultKeyPtrOutput {
	return o.ApplyT(func(v DefaultKey) *DefaultKey {
		return &v
	}).(DefaultKeyPtrOutput)
}

// Label can be used to specify Content Key when creating a Streaming Locator
func (o DefaultKeyOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefaultKey) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Policy used by Default Key
func (o DefaultKeyOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefaultKey) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

type DefaultKeyPtrOutput struct{ *pulumi.OutputState }

func (DefaultKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultKey)(nil)).Elem()
}

func (o DefaultKeyPtrOutput) ToDefaultKeyPtrOutput() DefaultKeyPtrOutput {
	return o
}

func (o DefaultKeyPtrOutput) ToDefaultKeyPtrOutputWithContext(ctx context.Context) DefaultKeyPtrOutput {
	return o
}

func (o DefaultKeyPtrOutput) Elem() DefaultKeyOutput {
	return o.ApplyT(func(v *DefaultKey) DefaultKey { return *v }).(DefaultKeyOutput)
}

// Label can be used to specify Content Key when creating a Streaming Locator
func (o DefaultKeyPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultKey) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// Policy used by Default Key
func (o DefaultKeyPtrOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultKey) *string {
		if v == nil {
			return nil
		}
		return v.PolicyName
	}).(pulumi.StringPtrOutput)
}

// Class to specify properties of default content key for each encryption scheme
type DefaultKeyResponse struct {
	// Label can be used to specify Content Key when creating a Streaming Locator
	Label *string `pulumi:"label"`
	// Policy used by Default Key
	PolicyName *string `pulumi:"policyName"`
}

// DefaultKeyResponseInput is an input type that accepts DefaultKeyResponseArgs and DefaultKeyResponseOutput values.
// You can construct a concrete instance of `DefaultKeyResponseInput` via:
//
//          DefaultKeyResponseArgs{...}
type DefaultKeyResponseInput interface {
	pulumi.Input

	ToDefaultKeyResponseOutput() DefaultKeyResponseOutput
	ToDefaultKeyResponseOutputWithContext(context.Context) DefaultKeyResponseOutput
}

// Class to specify properties of default content key for each encryption scheme
type DefaultKeyResponseArgs struct {
	// Label can be used to specify Content Key when creating a Streaming Locator
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Policy used by Default Key
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
}

func (DefaultKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultKeyResponse)(nil)).Elem()
}

func (i DefaultKeyResponseArgs) ToDefaultKeyResponseOutput() DefaultKeyResponseOutput {
	return i.ToDefaultKeyResponseOutputWithContext(context.Background())
}

func (i DefaultKeyResponseArgs) ToDefaultKeyResponseOutputWithContext(ctx context.Context) DefaultKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultKeyResponseOutput)
}

func (i DefaultKeyResponseArgs) ToDefaultKeyResponsePtrOutput() DefaultKeyResponsePtrOutput {
	return i.ToDefaultKeyResponsePtrOutputWithContext(context.Background())
}

func (i DefaultKeyResponseArgs) ToDefaultKeyResponsePtrOutputWithContext(ctx context.Context) DefaultKeyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultKeyResponseOutput).ToDefaultKeyResponsePtrOutputWithContext(ctx)
}

// DefaultKeyResponsePtrInput is an input type that accepts DefaultKeyResponseArgs, DefaultKeyResponsePtr and DefaultKeyResponsePtrOutput values.
// You can construct a concrete instance of `DefaultKeyResponsePtrInput` via:
//
//          DefaultKeyResponseArgs{...}
//
//  or:
//
//          nil
type DefaultKeyResponsePtrInput interface {
	pulumi.Input

	ToDefaultKeyResponsePtrOutput() DefaultKeyResponsePtrOutput
	ToDefaultKeyResponsePtrOutputWithContext(context.Context) DefaultKeyResponsePtrOutput
}

type defaultKeyResponsePtrType DefaultKeyResponseArgs

func DefaultKeyResponsePtr(v *DefaultKeyResponseArgs) DefaultKeyResponsePtrInput {
	return (*defaultKeyResponsePtrType)(v)
}

func (*defaultKeyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultKeyResponse)(nil)).Elem()
}

func (i *defaultKeyResponsePtrType) ToDefaultKeyResponsePtrOutput() DefaultKeyResponsePtrOutput {
	return i.ToDefaultKeyResponsePtrOutputWithContext(context.Background())
}

func (i *defaultKeyResponsePtrType) ToDefaultKeyResponsePtrOutputWithContext(ctx context.Context) DefaultKeyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultKeyResponsePtrOutput)
}

// Class to specify properties of default content key for each encryption scheme
type DefaultKeyResponseOutput struct{ *pulumi.OutputState }

func (DefaultKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultKeyResponse)(nil)).Elem()
}

func (o DefaultKeyResponseOutput) ToDefaultKeyResponseOutput() DefaultKeyResponseOutput {
	return o
}

func (o DefaultKeyResponseOutput) ToDefaultKeyResponseOutputWithContext(ctx context.Context) DefaultKeyResponseOutput {
	return o
}

func (o DefaultKeyResponseOutput) ToDefaultKeyResponsePtrOutput() DefaultKeyResponsePtrOutput {
	return o.ToDefaultKeyResponsePtrOutputWithContext(context.Background())
}

func (o DefaultKeyResponseOutput) ToDefaultKeyResponsePtrOutputWithContext(ctx context.Context) DefaultKeyResponsePtrOutput {
	return o.ApplyT(func(v DefaultKeyResponse) *DefaultKeyResponse {
		return &v
	}).(DefaultKeyResponsePtrOutput)
}

// Label can be used to specify Content Key when creating a Streaming Locator
func (o DefaultKeyResponseOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefaultKeyResponse) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Policy used by Default Key
func (o DefaultKeyResponseOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefaultKeyResponse) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

type DefaultKeyResponsePtrOutput struct{ *pulumi.OutputState }

func (DefaultKeyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultKeyResponse)(nil)).Elem()
}

func (o DefaultKeyResponsePtrOutput) ToDefaultKeyResponsePtrOutput() DefaultKeyResponsePtrOutput {
	return o
}

func (o DefaultKeyResponsePtrOutput) ToDefaultKeyResponsePtrOutputWithContext(ctx context.Context) DefaultKeyResponsePtrOutput {
	return o
}

func (o DefaultKeyResponsePtrOutput) Elem() DefaultKeyResponseOutput {
	return o.ApplyT(func(v *DefaultKeyResponse) DefaultKeyResponse { return *v }).(DefaultKeyResponseOutput)
}

// Label can be used to specify Content Key when creating a Streaming Locator
func (o DefaultKeyResponsePtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultKeyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// Policy used by Default Key
func (o DefaultKeyResponsePtrOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultKeyResponse) *string {
		if v == nil {
			return nil
		}
		return v.PolicyName
	}).(pulumi.StringPtrOutput)
}

// Describes the de-interlacing settings.
type Deinterlace struct {
	// The deinterlacing mode. Defaults to AutoPixelAdaptive.
	Mode *string `pulumi:"mode"`
	// The field parity for de-interlacing, defaults to Auto.
	Parity *string `pulumi:"parity"`
}

// DeinterlaceInput is an input type that accepts DeinterlaceArgs and DeinterlaceOutput values.
// You can construct a concrete instance of `DeinterlaceInput` via:
//
//          DeinterlaceArgs{...}
type DeinterlaceInput interface {
	pulumi.Input

	ToDeinterlaceOutput() DeinterlaceOutput
	ToDeinterlaceOutputWithContext(context.Context) DeinterlaceOutput
}

// Describes the de-interlacing settings.
type DeinterlaceArgs struct {
	// The deinterlacing mode. Defaults to AutoPixelAdaptive.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The field parity for de-interlacing, defaults to Auto.
	Parity pulumi.StringPtrInput `pulumi:"parity"`
}

func (DeinterlaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Deinterlace)(nil)).Elem()
}

func (i DeinterlaceArgs) ToDeinterlaceOutput() DeinterlaceOutput {
	return i.ToDeinterlaceOutputWithContext(context.Background())
}

func (i DeinterlaceArgs) ToDeinterlaceOutputWithContext(ctx context.Context) DeinterlaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeinterlaceOutput)
}

func (i DeinterlaceArgs) ToDeinterlacePtrOutput() DeinterlacePtrOutput {
	return i.ToDeinterlacePtrOutputWithContext(context.Background())
}

func (i DeinterlaceArgs) ToDeinterlacePtrOutputWithContext(ctx context.Context) DeinterlacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeinterlaceOutput).ToDeinterlacePtrOutputWithContext(ctx)
}

// DeinterlacePtrInput is an input type that accepts DeinterlaceArgs, DeinterlacePtr and DeinterlacePtrOutput values.
// You can construct a concrete instance of `DeinterlacePtrInput` via:
//
//          DeinterlaceArgs{...}
//
//  or:
//
//          nil
type DeinterlacePtrInput interface {
	pulumi.Input

	ToDeinterlacePtrOutput() DeinterlacePtrOutput
	ToDeinterlacePtrOutputWithContext(context.Context) DeinterlacePtrOutput
}

type deinterlacePtrType DeinterlaceArgs

func DeinterlacePtr(v *DeinterlaceArgs) DeinterlacePtrInput {
	return (*deinterlacePtrType)(v)
}

func (*deinterlacePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Deinterlace)(nil)).Elem()
}

func (i *deinterlacePtrType) ToDeinterlacePtrOutput() DeinterlacePtrOutput {
	return i.ToDeinterlacePtrOutputWithContext(context.Background())
}

func (i *deinterlacePtrType) ToDeinterlacePtrOutputWithContext(ctx context.Context) DeinterlacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeinterlacePtrOutput)
}

// Describes the de-interlacing settings.
type DeinterlaceOutput struct{ *pulumi.OutputState }

func (DeinterlaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Deinterlace)(nil)).Elem()
}

func (o DeinterlaceOutput) ToDeinterlaceOutput() DeinterlaceOutput {
	return o
}

func (o DeinterlaceOutput) ToDeinterlaceOutputWithContext(ctx context.Context) DeinterlaceOutput {
	return o
}

func (o DeinterlaceOutput) ToDeinterlacePtrOutput() DeinterlacePtrOutput {
	return o.ToDeinterlacePtrOutputWithContext(context.Background())
}

func (o DeinterlaceOutput) ToDeinterlacePtrOutputWithContext(ctx context.Context) DeinterlacePtrOutput {
	return o.ApplyT(func(v Deinterlace) *Deinterlace {
		return &v
	}).(DeinterlacePtrOutput)
}

// The deinterlacing mode. Defaults to AutoPixelAdaptive.
func (o DeinterlaceOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deinterlace) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The field parity for de-interlacing, defaults to Auto.
func (o DeinterlaceOutput) Parity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Deinterlace) *string { return v.Parity }).(pulumi.StringPtrOutput)
}

type DeinterlacePtrOutput struct{ *pulumi.OutputState }

func (DeinterlacePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deinterlace)(nil)).Elem()
}

func (o DeinterlacePtrOutput) ToDeinterlacePtrOutput() DeinterlacePtrOutput {
	return o
}

func (o DeinterlacePtrOutput) ToDeinterlacePtrOutputWithContext(ctx context.Context) DeinterlacePtrOutput {
	return o
}

func (o DeinterlacePtrOutput) Elem() DeinterlaceOutput {
	return o.ApplyT(func(v *Deinterlace) Deinterlace { return *v }).(DeinterlaceOutput)
}

// The deinterlacing mode. Defaults to AutoPixelAdaptive.
func (o DeinterlacePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deinterlace) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The field parity for de-interlacing, defaults to Auto.
func (o DeinterlacePtrOutput) Parity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deinterlace) *string {
		if v == nil {
			return nil
		}
		return v.Parity
	}).(pulumi.StringPtrOutput)
}

// Describes the de-interlacing settings.
type DeinterlaceResponse struct {
	// The deinterlacing mode. Defaults to AutoPixelAdaptive.
	Mode *string `pulumi:"mode"`
	// The field parity for de-interlacing, defaults to Auto.
	Parity *string `pulumi:"parity"`
}

// DeinterlaceResponseInput is an input type that accepts DeinterlaceResponseArgs and DeinterlaceResponseOutput values.
// You can construct a concrete instance of `DeinterlaceResponseInput` via:
//
//          DeinterlaceResponseArgs{...}
type DeinterlaceResponseInput interface {
	pulumi.Input

	ToDeinterlaceResponseOutput() DeinterlaceResponseOutput
	ToDeinterlaceResponseOutputWithContext(context.Context) DeinterlaceResponseOutput
}

// Describes the de-interlacing settings.
type DeinterlaceResponseArgs struct {
	// The deinterlacing mode. Defaults to AutoPixelAdaptive.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The field parity for de-interlacing, defaults to Auto.
	Parity pulumi.StringPtrInput `pulumi:"parity"`
}

func (DeinterlaceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeinterlaceResponse)(nil)).Elem()
}

func (i DeinterlaceResponseArgs) ToDeinterlaceResponseOutput() DeinterlaceResponseOutput {
	return i.ToDeinterlaceResponseOutputWithContext(context.Background())
}

func (i DeinterlaceResponseArgs) ToDeinterlaceResponseOutputWithContext(ctx context.Context) DeinterlaceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeinterlaceResponseOutput)
}

func (i DeinterlaceResponseArgs) ToDeinterlaceResponsePtrOutput() DeinterlaceResponsePtrOutput {
	return i.ToDeinterlaceResponsePtrOutputWithContext(context.Background())
}

func (i DeinterlaceResponseArgs) ToDeinterlaceResponsePtrOutputWithContext(ctx context.Context) DeinterlaceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeinterlaceResponseOutput).ToDeinterlaceResponsePtrOutputWithContext(ctx)
}

// DeinterlaceResponsePtrInput is an input type that accepts DeinterlaceResponseArgs, DeinterlaceResponsePtr and DeinterlaceResponsePtrOutput values.
// You can construct a concrete instance of `DeinterlaceResponsePtrInput` via:
//
//          DeinterlaceResponseArgs{...}
//
//  or:
//
//          nil
type DeinterlaceResponsePtrInput interface {
	pulumi.Input

	ToDeinterlaceResponsePtrOutput() DeinterlaceResponsePtrOutput
	ToDeinterlaceResponsePtrOutputWithContext(context.Context) DeinterlaceResponsePtrOutput
}

type deinterlaceResponsePtrType DeinterlaceResponseArgs

func DeinterlaceResponsePtr(v *DeinterlaceResponseArgs) DeinterlaceResponsePtrInput {
	return (*deinterlaceResponsePtrType)(v)
}

func (*deinterlaceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeinterlaceResponse)(nil)).Elem()
}

func (i *deinterlaceResponsePtrType) ToDeinterlaceResponsePtrOutput() DeinterlaceResponsePtrOutput {
	return i.ToDeinterlaceResponsePtrOutputWithContext(context.Background())
}

func (i *deinterlaceResponsePtrType) ToDeinterlaceResponsePtrOutputWithContext(ctx context.Context) DeinterlaceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeinterlaceResponsePtrOutput)
}

// Describes the de-interlacing settings.
type DeinterlaceResponseOutput struct{ *pulumi.OutputState }

func (DeinterlaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeinterlaceResponse)(nil)).Elem()
}

func (o DeinterlaceResponseOutput) ToDeinterlaceResponseOutput() DeinterlaceResponseOutput {
	return o
}

func (o DeinterlaceResponseOutput) ToDeinterlaceResponseOutputWithContext(ctx context.Context) DeinterlaceResponseOutput {
	return o
}

func (o DeinterlaceResponseOutput) ToDeinterlaceResponsePtrOutput() DeinterlaceResponsePtrOutput {
	return o.ToDeinterlaceResponsePtrOutputWithContext(context.Background())
}

func (o DeinterlaceResponseOutput) ToDeinterlaceResponsePtrOutputWithContext(ctx context.Context) DeinterlaceResponsePtrOutput {
	return o.ApplyT(func(v DeinterlaceResponse) *DeinterlaceResponse {
		return &v
	}).(DeinterlaceResponsePtrOutput)
}

// The deinterlacing mode. Defaults to AutoPixelAdaptive.
func (o DeinterlaceResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeinterlaceResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The field parity for de-interlacing, defaults to Auto.
func (o DeinterlaceResponseOutput) Parity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeinterlaceResponse) *string { return v.Parity }).(pulumi.StringPtrOutput)
}

type DeinterlaceResponsePtrOutput struct{ *pulumi.OutputState }

func (DeinterlaceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeinterlaceResponse)(nil)).Elem()
}

func (o DeinterlaceResponsePtrOutput) ToDeinterlaceResponsePtrOutput() DeinterlaceResponsePtrOutput {
	return o
}

func (o DeinterlaceResponsePtrOutput) ToDeinterlaceResponsePtrOutputWithContext(ctx context.Context) DeinterlaceResponsePtrOutput {
	return o
}

func (o DeinterlaceResponsePtrOutput) Elem() DeinterlaceResponseOutput {
	return o.ApplyT(func(v *DeinterlaceResponse) DeinterlaceResponse { return *v }).(DeinterlaceResponseOutput)
}

// The deinterlacing mode. Defaults to AutoPixelAdaptive.
func (o DeinterlaceResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeinterlaceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The field parity for de-interlacing, defaults to Auto.
func (o DeinterlaceResponsePtrOutput) Parity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeinterlaceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Parity
	}).(pulumi.StringPtrOutput)
}

type EdgeUsageDataCollectionPolicyResponse struct {
	// Usage data collection frequency in ISO 8601 duration format e.g. PT10M , PT5H.
	DataCollectionFrequency *string `pulumi:"dataCollectionFrequency"`
	// Usage data reporting frequency in ISO 8601 duration format e.g. PT10M , PT5H.
	DataReportingFrequency *string `pulumi:"dataReportingFrequency"`
	// Details of Event Hub where the usage will be reported.
	EventHubDetails *EdgeUsageDataEventHubResponse `pulumi:"eventHubDetails"`
	// Maximum time for which the functionality of the device will not be hampered for not reporting the usage data.
	MaxAllowedUnreportedUsageDuration *string `pulumi:"maxAllowedUnreportedUsageDuration"`
}

// EdgeUsageDataCollectionPolicyResponseInput is an input type that accepts EdgeUsageDataCollectionPolicyResponseArgs and EdgeUsageDataCollectionPolicyResponseOutput values.
// You can construct a concrete instance of `EdgeUsageDataCollectionPolicyResponseInput` via:
//
//          EdgeUsageDataCollectionPolicyResponseArgs{...}
type EdgeUsageDataCollectionPolicyResponseInput interface {
	pulumi.Input

	ToEdgeUsageDataCollectionPolicyResponseOutput() EdgeUsageDataCollectionPolicyResponseOutput
	ToEdgeUsageDataCollectionPolicyResponseOutputWithContext(context.Context) EdgeUsageDataCollectionPolicyResponseOutput
}

type EdgeUsageDataCollectionPolicyResponseArgs struct {
	// Usage data collection frequency in ISO 8601 duration format e.g. PT10M , PT5H.
	DataCollectionFrequency pulumi.StringPtrInput `pulumi:"dataCollectionFrequency"`
	// Usage data reporting frequency in ISO 8601 duration format e.g. PT10M , PT5H.
	DataReportingFrequency pulumi.StringPtrInput `pulumi:"dataReportingFrequency"`
	// Details of Event Hub where the usage will be reported.
	EventHubDetails EdgeUsageDataEventHubResponsePtrInput `pulumi:"eventHubDetails"`
	// Maximum time for which the functionality of the device will not be hampered for not reporting the usage data.
	MaxAllowedUnreportedUsageDuration pulumi.StringPtrInput `pulumi:"maxAllowedUnreportedUsageDuration"`
}

func (EdgeUsageDataCollectionPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeUsageDataCollectionPolicyResponse)(nil)).Elem()
}

func (i EdgeUsageDataCollectionPolicyResponseArgs) ToEdgeUsageDataCollectionPolicyResponseOutput() EdgeUsageDataCollectionPolicyResponseOutput {
	return i.ToEdgeUsageDataCollectionPolicyResponseOutputWithContext(context.Background())
}

func (i EdgeUsageDataCollectionPolicyResponseArgs) ToEdgeUsageDataCollectionPolicyResponseOutputWithContext(ctx context.Context) EdgeUsageDataCollectionPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeUsageDataCollectionPolicyResponseOutput)
}

type EdgeUsageDataCollectionPolicyResponseOutput struct{ *pulumi.OutputState }

func (EdgeUsageDataCollectionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeUsageDataCollectionPolicyResponse)(nil)).Elem()
}

func (o EdgeUsageDataCollectionPolicyResponseOutput) ToEdgeUsageDataCollectionPolicyResponseOutput() EdgeUsageDataCollectionPolicyResponseOutput {
	return o
}

func (o EdgeUsageDataCollectionPolicyResponseOutput) ToEdgeUsageDataCollectionPolicyResponseOutputWithContext(ctx context.Context) EdgeUsageDataCollectionPolicyResponseOutput {
	return o
}

// Usage data collection frequency in ISO 8601 duration format e.g. PT10M , PT5H.
func (o EdgeUsageDataCollectionPolicyResponseOutput) DataCollectionFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeUsageDataCollectionPolicyResponse) *string { return v.DataCollectionFrequency }).(pulumi.StringPtrOutput)
}

// Usage data reporting frequency in ISO 8601 duration format e.g. PT10M , PT5H.
func (o EdgeUsageDataCollectionPolicyResponseOutput) DataReportingFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeUsageDataCollectionPolicyResponse) *string { return v.DataReportingFrequency }).(pulumi.StringPtrOutput)
}

// Details of Event Hub where the usage will be reported.
func (o EdgeUsageDataCollectionPolicyResponseOutput) EventHubDetails() EdgeUsageDataEventHubResponsePtrOutput {
	return o.ApplyT(func(v EdgeUsageDataCollectionPolicyResponse) *EdgeUsageDataEventHubResponse { return v.EventHubDetails }).(EdgeUsageDataEventHubResponsePtrOutput)
}

// Maximum time for which the functionality of the device will not be hampered for not reporting the usage data.
func (o EdgeUsageDataCollectionPolicyResponseOutput) MaxAllowedUnreportedUsageDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeUsageDataCollectionPolicyResponse) *string { return v.MaxAllowedUnreportedUsageDuration }).(pulumi.StringPtrOutput)
}

type EdgeUsageDataEventHubResponse struct {
	// Name of the Event Hub where usage will be reported.
	Name *string `pulumi:"name"`
	// Namespace of the Event Hub where usage will be reported.
	Namespace *string `pulumi:"namespace"`
	// SAS token needed to interact with Event Hub.
	Token *string `pulumi:"token"`
}

// EdgeUsageDataEventHubResponseInput is an input type that accepts EdgeUsageDataEventHubResponseArgs and EdgeUsageDataEventHubResponseOutput values.
// You can construct a concrete instance of `EdgeUsageDataEventHubResponseInput` via:
//
//          EdgeUsageDataEventHubResponseArgs{...}
type EdgeUsageDataEventHubResponseInput interface {
	pulumi.Input

	ToEdgeUsageDataEventHubResponseOutput() EdgeUsageDataEventHubResponseOutput
	ToEdgeUsageDataEventHubResponseOutputWithContext(context.Context) EdgeUsageDataEventHubResponseOutput
}

type EdgeUsageDataEventHubResponseArgs struct {
	// Name of the Event Hub where usage will be reported.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Event Hub where usage will be reported.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// SAS token needed to interact with Event Hub.
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (EdgeUsageDataEventHubResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeUsageDataEventHubResponse)(nil)).Elem()
}

func (i EdgeUsageDataEventHubResponseArgs) ToEdgeUsageDataEventHubResponseOutput() EdgeUsageDataEventHubResponseOutput {
	return i.ToEdgeUsageDataEventHubResponseOutputWithContext(context.Background())
}

func (i EdgeUsageDataEventHubResponseArgs) ToEdgeUsageDataEventHubResponseOutputWithContext(ctx context.Context) EdgeUsageDataEventHubResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeUsageDataEventHubResponseOutput)
}

func (i EdgeUsageDataEventHubResponseArgs) ToEdgeUsageDataEventHubResponsePtrOutput() EdgeUsageDataEventHubResponsePtrOutput {
	return i.ToEdgeUsageDataEventHubResponsePtrOutputWithContext(context.Background())
}

func (i EdgeUsageDataEventHubResponseArgs) ToEdgeUsageDataEventHubResponsePtrOutputWithContext(ctx context.Context) EdgeUsageDataEventHubResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeUsageDataEventHubResponseOutput).ToEdgeUsageDataEventHubResponsePtrOutputWithContext(ctx)
}

// EdgeUsageDataEventHubResponsePtrInput is an input type that accepts EdgeUsageDataEventHubResponseArgs, EdgeUsageDataEventHubResponsePtr and EdgeUsageDataEventHubResponsePtrOutput values.
// You can construct a concrete instance of `EdgeUsageDataEventHubResponsePtrInput` via:
//
//          EdgeUsageDataEventHubResponseArgs{...}
//
//  or:
//
//          nil
type EdgeUsageDataEventHubResponsePtrInput interface {
	pulumi.Input

	ToEdgeUsageDataEventHubResponsePtrOutput() EdgeUsageDataEventHubResponsePtrOutput
	ToEdgeUsageDataEventHubResponsePtrOutputWithContext(context.Context) EdgeUsageDataEventHubResponsePtrOutput
}

type edgeUsageDataEventHubResponsePtrType EdgeUsageDataEventHubResponseArgs

func EdgeUsageDataEventHubResponsePtr(v *EdgeUsageDataEventHubResponseArgs) EdgeUsageDataEventHubResponsePtrInput {
	return (*edgeUsageDataEventHubResponsePtrType)(v)
}

func (*edgeUsageDataEventHubResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeUsageDataEventHubResponse)(nil)).Elem()
}

func (i *edgeUsageDataEventHubResponsePtrType) ToEdgeUsageDataEventHubResponsePtrOutput() EdgeUsageDataEventHubResponsePtrOutput {
	return i.ToEdgeUsageDataEventHubResponsePtrOutputWithContext(context.Background())
}

func (i *edgeUsageDataEventHubResponsePtrType) ToEdgeUsageDataEventHubResponsePtrOutputWithContext(ctx context.Context) EdgeUsageDataEventHubResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeUsageDataEventHubResponsePtrOutput)
}

type EdgeUsageDataEventHubResponseOutput struct{ *pulumi.OutputState }

func (EdgeUsageDataEventHubResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeUsageDataEventHubResponse)(nil)).Elem()
}

func (o EdgeUsageDataEventHubResponseOutput) ToEdgeUsageDataEventHubResponseOutput() EdgeUsageDataEventHubResponseOutput {
	return o
}

func (o EdgeUsageDataEventHubResponseOutput) ToEdgeUsageDataEventHubResponseOutputWithContext(ctx context.Context) EdgeUsageDataEventHubResponseOutput {
	return o
}

func (o EdgeUsageDataEventHubResponseOutput) ToEdgeUsageDataEventHubResponsePtrOutput() EdgeUsageDataEventHubResponsePtrOutput {
	return o.ToEdgeUsageDataEventHubResponsePtrOutputWithContext(context.Background())
}

func (o EdgeUsageDataEventHubResponseOutput) ToEdgeUsageDataEventHubResponsePtrOutputWithContext(ctx context.Context) EdgeUsageDataEventHubResponsePtrOutput {
	return o.ApplyT(func(v EdgeUsageDataEventHubResponse) *EdgeUsageDataEventHubResponse {
		return &v
	}).(EdgeUsageDataEventHubResponsePtrOutput)
}

// Name of the Event Hub where usage will be reported.
func (o EdgeUsageDataEventHubResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeUsageDataEventHubResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Event Hub where usage will be reported.
func (o EdgeUsageDataEventHubResponseOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeUsageDataEventHubResponse) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// SAS token needed to interact with Event Hub.
func (o EdgeUsageDataEventHubResponseOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeUsageDataEventHubResponse) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type EdgeUsageDataEventHubResponsePtrOutput struct{ *pulumi.OutputState }

func (EdgeUsageDataEventHubResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeUsageDataEventHubResponse)(nil)).Elem()
}

func (o EdgeUsageDataEventHubResponsePtrOutput) ToEdgeUsageDataEventHubResponsePtrOutput() EdgeUsageDataEventHubResponsePtrOutput {
	return o
}

func (o EdgeUsageDataEventHubResponsePtrOutput) ToEdgeUsageDataEventHubResponsePtrOutputWithContext(ctx context.Context) EdgeUsageDataEventHubResponsePtrOutput {
	return o
}

func (o EdgeUsageDataEventHubResponsePtrOutput) Elem() EdgeUsageDataEventHubResponseOutput {
	return o.ApplyT(func(v *EdgeUsageDataEventHubResponse) EdgeUsageDataEventHubResponse { return *v }).(EdgeUsageDataEventHubResponseOutput)
}

// Name of the Event Hub where usage will be reported.
func (o EdgeUsageDataEventHubResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeUsageDataEventHubResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the Event Hub where usage will be reported.
func (o EdgeUsageDataEventHubResponsePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeUsageDataEventHubResponse) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SAS token needed to interact with Event Hub.
func (o EdgeUsageDataEventHubResponsePtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeUsageDataEventHubResponse) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

// Class to specify which protocols are enabled
type EnabledProtocols struct {
	// Enable DASH protocol or not
	Dash bool `pulumi:"dash"`
	// Enable Download protocol or not
	Download bool `pulumi:"download"`
	// Enable HLS protocol or not
	Hls bool `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not
	SmoothStreaming bool `pulumi:"smoothStreaming"`
}

// EnabledProtocolsInput is an input type that accepts EnabledProtocolsArgs and EnabledProtocolsOutput values.
// You can construct a concrete instance of `EnabledProtocolsInput` via:
//
//          EnabledProtocolsArgs{...}
type EnabledProtocolsInput interface {
	pulumi.Input

	ToEnabledProtocolsOutput() EnabledProtocolsOutput
	ToEnabledProtocolsOutputWithContext(context.Context) EnabledProtocolsOutput
}

// Class to specify which protocols are enabled
type EnabledProtocolsArgs struct {
	// Enable DASH protocol or not
	Dash pulumi.BoolInput `pulumi:"dash"`
	// Enable Download protocol or not
	Download pulumi.BoolInput `pulumi:"download"`
	// Enable HLS protocol or not
	Hls pulumi.BoolInput `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not
	SmoothStreaming pulumi.BoolInput `pulumi:"smoothStreaming"`
}

func (EnabledProtocolsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnabledProtocols)(nil)).Elem()
}

func (i EnabledProtocolsArgs) ToEnabledProtocolsOutput() EnabledProtocolsOutput {
	return i.ToEnabledProtocolsOutputWithContext(context.Background())
}

func (i EnabledProtocolsArgs) ToEnabledProtocolsOutputWithContext(ctx context.Context) EnabledProtocolsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnabledProtocolsOutput)
}

func (i EnabledProtocolsArgs) ToEnabledProtocolsPtrOutput() EnabledProtocolsPtrOutput {
	return i.ToEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (i EnabledProtocolsArgs) ToEnabledProtocolsPtrOutputWithContext(ctx context.Context) EnabledProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnabledProtocolsOutput).ToEnabledProtocolsPtrOutputWithContext(ctx)
}

// EnabledProtocolsPtrInput is an input type that accepts EnabledProtocolsArgs, EnabledProtocolsPtr and EnabledProtocolsPtrOutput values.
// You can construct a concrete instance of `EnabledProtocolsPtrInput` via:
//
//          EnabledProtocolsArgs{...}
//
//  or:
//
//          nil
type EnabledProtocolsPtrInput interface {
	pulumi.Input

	ToEnabledProtocolsPtrOutput() EnabledProtocolsPtrOutput
	ToEnabledProtocolsPtrOutputWithContext(context.Context) EnabledProtocolsPtrOutput
}

type enabledProtocolsPtrType EnabledProtocolsArgs

func EnabledProtocolsPtr(v *EnabledProtocolsArgs) EnabledProtocolsPtrInput {
	return (*enabledProtocolsPtrType)(v)
}

func (*enabledProtocolsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnabledProtocols)(nil)).Elem()
}

func (i *enabledProtocolsPtrType) ToEnabledProtocolsPtrOutput() EnabledProtocolsPtrOutput {
	return i.ToEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (i *enabledProtocolsPtrType) ToEnabledProtocolsPtrOutputWithContext(ctx context.Context) EnabledProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnabledProtocolsPtrOutput)
}

// Class to specify which protocols are enabled
type EnabledProtocolsOutput struct{ *pulumi.OutputState }

func (EnabledProtocolsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnabledProtocols)(nil)).Elem()
}

func (o EnabledProtocolsOutput) ToEnabledProtocolsOutput() EnabledProtocolsOutput {
	return o
}

func (o EnabledProtocolsOutput) ToEnabledProtocolsOutputWithContext(ctx context.Context) EnabledProtocolsOutput {
	return o
}

func (o EnabledProtocolsOutput) ToEnabledProtocolsPtrOutput() EnabledProtocolsPtrOutput {
	return o.ToEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (o EnabledProtocolsOutput) ToEnabledProtocolsPtrOutputWithContext(ctx context.Context) EnabledProtocolsPtrOutput {
	return o.ApplyT(func(v EnabledProtocols) *EnabledProtocols {
		return &v
	}).(EnabledProtocolsPtrOutput)
}

// Enable DASH protocol or not
func (o EnabledProtocolsOutput) Dash() pulumi.BoolOutput {
	return o.ApplyT(func(v EnabledProtocols) bool { return v.Dash }).(pulumi.BoolOutput)
}

// Enable Download protocol or not
func (o EnabledProtocolsOutput) Download() pulumi.BoolOutput {
	return o.ApplyT(func(v EnabledProtocols) bool { return v.Download }).(pulumi.BoolOutput)
}

// Enable HLS protocol or not
func (o EnabledProtocolsOutput) Hls() pulumi.BoolOutput {
	return o.ApplyT(func(v EnabledProtocols) bool { return v.Hls }).(pulumi.BoolOutput)
}

// Enable SmoothStreaming protocol or not
func (o EnabledProtocolsOutput) SmoothStreaming() pulumi.BoolOutput {
	return o.ApplyT(func(v EnabledProtocols) bool { return v.SmoothStreaming }).(pulumi.BoolOutput)
}

type EnabledProtocolsPtrOutput struct{ *pulumi.OutputState }

func (EnabledProtocolsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnabledProtocols)(nil)).Elem()
}

func (o EnabledProtocolsPtrOutput) ToEnabledProtocolsPtrOutput() EnabledProtocolsPtrOutput {
	return o
}

func (o EnabledProtocolsPtrOutput) ToEnabledProtocolsPtrOutputWithContext(ctx context.Context) EnabledProtocolsPtrOutput {
	return o
}

func (o EnabledProtocolsPtrOutput) Elem() EnabledProtocolsOutput {
	return o.ApplyT(func(v *EnabledProtocols) EnabledProtocols { return *v }).(EnabledProtocolsOutput)
}

// Enable DASH protocol or not
func (o EnabledProtocolsPtrOutput) Dash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return &v.Dash
	}).(pulumi.BoolPtrOutput)
}

// Enable Download protocol or not
func (o EnabledProtocolsPtrOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return &v.Download
	}).(pulumi.BoolPtrOutput)
}

// Enable HLS protocol or not
func (o EnabledProtocolsPtrOutput) Hls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return &v.Hls
	}).(pulumi.BoolPtrOutput)
}

// Enable SmoothStreaming protocol or not
func (o EnabledProtocolsPtrOutput) SmoothStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return &v.SmoothStreaming
	}).(pulumi.BoolPtrOutput)
}

// Class to specify which protocols are enabled
type EnabledProtocolsResponse struct {
	// Enable DASH protocol or not
	Dash bool `pulumi:"dash"`
	// Enable Download protocol or not
	Download bool `pulumi:"download"`
	// Enable HLS protocol or not
	Hls bool `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not
	SmoothStreaming bool `pulumi:"smoothStreaming"`
}

// EnabledProtocolsResponseInput is an input type that accepts EnabledProtocolsResponseArgs and EnabledProtocolsResponseOutput values.
// You can construct a concrete instance of `EnabledProtocolsResponseInput` via:
//
//          EnabledProtocolsResponseArgs{...}
type EnabledProtocolsResponseInput interface {
	pulumi.Input

	ToEnabledProtocolsResponseOutput() EnabledProtocolsResponseOutput
	ToEnabledProtocolsResponseOutputWithContext(context.Context) EnabledProtocolsResponseOutput
}

// Class to specify which protocols are enabled
type EnabledProtocolsResponseArgs struct {
	// Enable DASH protocol or not
	Dash pulumi.BoolInput `pulumi:"dash"`
	// Enable Download protocol or not
	Download pulumi.BoolInput `pulumi:"download"`
	// Enable HLS protocol or not
	Hls pulumi.BoolInput `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not
	SmoothStreaming pulumi.BoolInput `pulumi:"smoothStreaming"`
}

func (EnabledProtocolsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnabledProtocolsResponse)(nil)).Elem()
}

func (i EnabledProtocolsResponseArgs) ToEnabledProtocolsResponseOutput() EnabledProtocolsResponseOutput {
	return i.ToEnabledProtocolsResponseOutputWithContext(context.Background())
}

func (i EnabledProtocolsResponseArgs) ToEnabledProtocolsResponseOutputWithContext(ctx context.Context) EnabledProtocolsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnabledProtocolsResponseOutput)
}

func (i EnabledProtocolsResponseArgs) ToEnabledProtocolsResponsePtrOutput() EnabledProtocolsResponsePtrOutput {
	return i.ToEnabledProtocolsResponsePtrOutputWithContext(context.Background())
}

func (i EnabledProtocolsResponseArgs) ToEnabledProtocolsResponsePtrOutputWithContext(ctx context.Context) EnabledProtocolsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnabledProtocolsResponseOutput).ToEnabledProtocolsResponsePtrOutputWithContext(ctx)
}

// EnabledProtocolsResponsePtrInput is an input type that accepts EnabledProtocolsResponseArgs, EnabledProtocolsResponsePtr and EnabledProtocolsResponsePtrOutput values.
// You can construct a concrete instance of `EnabledProtocolsResponsePtrInput` via:
//
//          EnabledProtocolsResponseArgs{...}
//
//  or:
//
//          nil
type EnabledProtocolsResponsePtrInput interface {
	pulumi.Input

	ToEnabledProtocolsResponsePtrOutput() EnabledProtocolsResponsePtrOutput
	ToEnabledProtocolsResponsePtrOutputWithContext(context.Context) EnabledProtocolsResponsePtrOutput
}

type enabledProtocolsResponsePtrType EnabledProtocolsResponseArgs

func EnabledProtocolsResponsePtr(v *EnabledProtocolsResponseArgs) EnabledProtocolsResponsePtrInput {
	return (*enabledProtocolsResponsePtrType)(v)
}

func (*enabledProtocolsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnabledProtocolsResponse)(nil)).Elem()
}

func (i *enabledProtocolsResponsePtrType) ToEnabledProtocolsResponsePtrOutput() EnabledProtocolsResponsePtrOutput {
	return i.ToEnabledProtocolsResponsePtrOutputWithContext(context.Background())
}

func (i *enabledProtocolsResponsePtrType) ToEnabledProtocolsResponsePtrOutputWithContext(ctx context.Context) EnabledProtocolsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnabledProtocolsResponsePtrOutput)
}

// Class to specify which protocols are enabled
type EnabledProtocolsResponseOutput struct{ *pulumi.OutputState }

func (EnabledProtocolsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnabledProtocolsResponse)(nil)).Elem()
}

func (o EnabledProtocolsResponseOutput) ToEnabledProtocolsResponseOutput() EnabledProtocolsResponseOutput {
	return o
}

func (o EnabledProtocolsResponseOutput) ToEnabledProtocolsResponseOutputWithContext(ctx context.Context) EnabledProtocolsResponseOutput {
	return o
}

func (o EnabledProtocolsResponseOutput) ToEnabledProtocolsResponsePtrOutput() EnabledProtocolsResponsePtrOutput {
	return o.ToEnabledProtocolsResponsePtrOutputWithContext(context.Background())
}

func (o EnabledProtocolsResponseOutput) ToEnabledProtocolsResponsePtrOutputWithContext(ctx context.Context) EnabledProtocolsResponsePtrOutput {
	return o.ApplyT(func(v EnabledProtocolsResponse) *EnabledProtocolsResponse {
		return &v
	}).(EnabledProtocolsResponsePtrOutput)
}

// Enable DASH protocol or not
func (o EnabledProtocolsResponseOutput) Dash() pulumi.BoolOutput {
	return o.ApplyT(func(v EnabledProtocolsResponse) bool { return v.Dash }).(pulumi.BoolOutput)
}

// Enable Download protocol or not
func (o EnabledProtocolsResponseOutput) Download() pulumi.BoolOutput {
	return o.ApplyT(func(v EnabledProtocolsResponse) bool { return v.Download }).(pulumi.BoolOutput)
}

// Enable HLS protocol or not
func (o EnabledProtocolsResponseOutput) Hls() pulumi.BoolOutput {
	return o.ApplyT(func(v EnabledProtocolsResponse) bool { return v.Hls }).(pulumi.BoolOutput)
}

// Enable SmoothStreaming protocol or not
func (o EnabledProtocolsResponseOutput) SmoothStreaming() pulumi.BoolOutput {
	return o.ApplyT(func(v EnabledProtocolsResponse) bool { return v.SmoothStreaming }).(pulumi.BoolOutput)
}

type EnabledProtocolsResponsePtrOutput struct{ *pulumi.OutputState }

func (EnabledProtocolsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnabledProtocolsResponse)(nil)).Elem()
}

func (o EnabledProtocolsResponsePtrOutput) ToEnabledProtocolsResponsePtrOutput() EnabledProtocolsResponsePtrOutput {
	return o
}

func (o EnabledProtocolsResponsePtrOutput) ToEnabledProtocolsResponsePtrOutputWithContext(ctx context.Context) EnabledProtocolsResponsePtrOutput {
	return o
}

func (o EnabledProtocolsResponsePtrOutput) Elem() EnabledProtocolsResponseOutput {
	return o.ApplyT(func(v *EnabledProtocolsResponse) EnabledProtocolsResponse { return *v }).(EnabledProtocolsResponseOutput)
}

// Enable DASH protocol or not
func (o EnabledProtocolsResponsePtrOutput) Dash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnabledProtocolsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Dash
	}).(pulumi.BoolPtrOutput)
}

// Enable Download protocol or not
func (o EnabledProtocolsResponsePtrOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnabledProtocolsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Download
	}).(pulumi.BoolPtrOutput)
}

// Enable HLS protocol or not
func (o EnabledProtocolsResponsePtrOutput) Hls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnabledProtocolsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Hls
	}).(pulumi.BoolPtrOutput)
}

// Enable SmoothStreaming protocol or not
func (o EnabledProtocolsResponsePtrOutput) SmoothStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnabledProtocolsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.SmoothStreaming
	}).(pulumi.BoolPtrOutput)
}

// Class for EnvelopeEncryption encryption scheme
type EnvelopeEncryption struct {
	// Representing which tracks should not be encrypted
	ClearTracks []TrackSelection `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys *StreamingPolicyContentKeys `pulumi:"contentKeys"`
	// Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomKeyAcquisitionUrlTemplate *string `pulumi:"customKeyAcquisitionUrlTemplate"`
	// Representing supported protocols
	EnabledProtocols *EnabledProtocols `pulumi:"enabledProtocols"`
}

// EnvelopeEncryptionInput is an input type that accepts EnvelopeEncryptionArgs and EnvelopeEncryptionOutput values.
// You can construct a concrete instance of `EnvelopeEncryptionInput` via:
//
//          EnvelopeEncryptionArgs{...}
type EnvelopeEncryptionInput interface {
	pulumi.Input

	ToEnvelopeEncryptionOutput() EnvelopeEncryptionOutput
	ToEnvelopeEncryptionOutputWithContext(context.Context) EnvelopeEncryptionOutput
}

// Class for EnvelopeEncryption encryption scheme
type EnvelopeEncryptionArgs struct {
	// Representing which tracks should not be encrypted
	ClearTracks TrackSelectionArrayInput `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys StreamingPolicyContentKeysPtrInput `pulumi:"contentKeys"`
	// Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomKeyAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customKeyAcquisitionUrlTemplate"`
	// Representing supported protocols
	EnabledProtocols EnabledProtocolsPtrInput `pulumi:"enabledProtocols"`
}

func (EnvelopeEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeEncryption)(nil)).Elem()
}

func (i EnvelopeEncryptionArgs) ToEnvelopeEncryptionOutput() EnvelopeEncryptionOutput {
	return i.ToEnvelopeEncryptionOutputWithContext(context.Background())
}

func (i EnvelopeEncryptionArgs) ToEnvelopeEncryptionOutputWithContext(ctx context.Context) EnvelopeEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeEncryptionOutput)
}

func (i EnvelopeEncryptionArgs) ToEnvelopeEncryptionPtrOutput() EnvelopeEncryptionPtrOutput {
	return i.ToEnvelopeEncryptionPtrOutputWithContext(context.Background())
}

func (i EnvelopeEncryptionArgs) ToEnvelopeEncryptionPtrOutputWithContext(ctx context.Context) EnvelopeEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeEncryptionOutput).ToEnvelopeEncryptionPtrOutputWithContext(ctx)
}

// EnvelopeEncryptionPtrInput is an input type that accepts EnvelopeEncryptionArgs, EnvelopeEncryptionPtr and EnvelopeEncryptionPtrOutput values.
// You can construct a concrete instance of `EnvelopeEncryptionPtrInput` via:
//
//          EnvelopeEncryptionArgs{...}
//
//  or:
//
//          nil
type EnvelopeEncryptionPtrInput interface {
	pulumi.Input

	ToEnvelopeEncryptionPtrOutput() EnvelopeEncryptionPtrOutput
	ToEnvelopeEncryptionPtrOutputWithContext(context.Context) EnvelopeEncryptionPtrOutput
}

type envelopeEncryptionPtrType EnvelopeEncryptionArgs

func EnvelopeEncryptionPtr(v *EnvelopeEncryptionArgs) EnvelopeEncryptionPtrInput {
	return (*envelopeEncryptionPtrType)(v)
}

func (*envelopeEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvelopeEncryption)(nil)).Elem()
}

func (i *envelopeEncryptionPtrType) ToEnvelopeEncryptionPtrOutput() EnvelopeEncryptionPtrOutput {
	return i.ToEnvelopeEncryptionPtrOutputWithContext(context.Background())
}

func (i *envelopeEncryptionPtrType) ToEnvelopeEncryptionPtrOutputWithContext(ctx context.Context) EnvelopeEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeEncryptionPtrOutput)
}

// Class for EnvelopeEncryption encryption scheme
type EnvelopeEncryptionOutput struct{ *pulumi.OutputState }

func (EnvelopeEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeEncryption)(nil)).Elem()
}

func (o EnvelopeEncryptionOutput) ToEnvelopeEncryptionOutput() EnvelopeEncryptionOutput {
	return o
}

func (o EnvelopeEncryptionOutput) ToEnvelopeEncryptionOutputWithContext(ctx context.Context) EnvelopeEncryptionOutput {
	return o
}

func (o EnvelopeEncryptionOutput) ToEnvelopeEncryptionPtrOutput() EnvelopeEncryptionPtrOutput {
	return o.ToEnvelopeEncryptionPtrOutputWithContext(context.Background())
}

func (o EnvelopeEncryptionOutput) ToEnvelopeEncryptionPtrOutputWithContext(ctx context.Context) EnvelopeEncryptionPtrOutput {
	return o.ApplyT(func(v EnvelopeEncryption) *EnvelopeEncryption {
		return &v
	}).(EnvelopeEncryptionPtrOutput)
}

// Representing which tracks should not be encrypted
func (o EnvelopeEncryptionOutput) ClearTracks() TrackSelectionArrayOutput {
	return o.ApplyT(func(v EnvelopeEncryption) []TrackSelection { return v.ClearTracks }).(TrackSelectionArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o EnvelopeEncryptionOutput) ContentKeys() StreamingPolicyContentKeysPtrOutput {
	return o.ApplyT(func(v EnvelopeEncryption) *StreamingPolicyContentKeys { return v.ContentKeys }).(StreamingPolicyContentKeysPtrOutput)
}

// Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o EnvelopeEncryptionOutput) CustomKeyAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvelopeEncryption) *string { return v.CustomKeyAcquisitionUrlTemplate }).(pulumi.StringPtrOutput)
}

// Representing supported protocols
func (o EnvelopeEncryptionOutput) EnabledProtocols() EnabledProtocolsPtrOutput {
	return o.ApplyT(func(v EnvelopeEncryption) *EnabledProtocols { return v.EnabledProtocols }).(EnabledProtocolsPtrOutput)
}

type EnvelopeEncryptionPtrOutput struct{ *pulumi.OutputState }

func (EnvelopeEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvelopeEncryption)(nil)).Elem()
}

func (o EnvelopeEncryptionPtrOutput) ToEnvelopeEncryptionPtrOutput() EnvelopeEncryptionPtrOutput {
	return o
}

func (o EnvelopeEncryptionPtrOutput) ToEnvelopeEncryptionPtrOutputWithContext(ctx context.Context) EnvelopeEncryptionPtrOutput {
	return o
}

func (o EnvelopeEncryptionPtrOutput) Elem() EnvelopeEncryptionOutput {
	return o.ApplyT(func(v *EnvelopeEncryption) EnvelopeEncryption { return *v }).(EnvelopeEncryptionOutput)
}

// Representing which tracks should not be encrypted
func (o EnvelopeEncryptionPtrOutput) ClearTracks() TrackSelectionArrayOutput {
	return o.ApplyT(func(v *EnvelopeEncryption) []TrackSelection {
		if v == nil {
			return nil
		}
		return v.ClearTracks
	}).(TrackSelectionArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o EnvelopeEncryptionPtrOutput) ContentKeys() StreamingPolicyContentKeysPtrOutput {
	return o.ApplyT(func(v *EnvelopeEncryption) *StreamingPolicyContentKeys {
		if v == nil {
			return nil
		}
		return v.ContentKeys
	}).(StreamingPolicyContentKeysPtrOutput)
}

// Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o EnvelopeEncryptionPtrOutput) CustomKeyAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvelopeEncryption) *string {
		if v == nil {
			return nil
		}
		return v.CustomKeyAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// Representing supported protocols
func (o EnvelopeEncryptionPtrOutput) EnabledProtocols() EnabledProtocolsPtrOutput {
	return o.ApplyT(func(v *EnvelopeEncryption) *EnabledProtocols {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(EnabledProtocolsPtrOutput)
}

// Class for EnvelopeEncryption encryption scheme
type EnvelopeEncryptionResponse struct {
	// Representing which tracks should not be encrypted
	ClearTracks []TrackSelectionResponse `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys *StreamingPolicyContentKeysResponse `pulumi:"contentKeys"`
	// Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomKeyAcquisitionUrlTemplate *string `pulumi:"customKeyAcquisitionUrlTemplate"`
	// Representing supported protocols
	EnabledProtocols *EnabledProtocolsResponse `pulumi:"enabledProtocols"`
}

// EnvelopeEncryptionResponseInput is an input type that accepts EnvelopeEncryptionResponseArgs and EnvelopeEncryptionResponseOutput values.
// You can construct a concrete instance of `EnvelopeEncryptionResponseInput` via:
//
//          EnvelopeEncryptionResponseArgs{...}
type EnvelopeEncryptionResponseInput interface {
	pulumi.Input

	ToEnvelopeEncryptionResponseOutput() EnvelopeEncryptionResponseOutput
	ToEnvelopeEncryptionResponseOutputWithContext(context.Context) EnvelopeEncryptionResponseOutput
}

// Class for EnvelopeEncryption encryption scheme
type EnvelopeEncryptionResponseArgs struct {
	// Representing which tracks should not be encrypted
	ClearTracks TrackSelectionResponseArrayInput `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys StreamingPolicyContentKeysResponsePtrInput `pulumi:"contentKeys"`
	// Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomKeyAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customKeyAcquisitionUrlTemplate"`
	// Representing supported protocols
	EnabledProtocols EnabledProtocolsResponsePtrInput `pulumi:"enabledProtocols"`
}

func (EnvelopeEncryptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeEncryptionResponse)(nil)).Elem()
}

func (i EnvelopeEncryptionResponseArgs) ToEnvelopeEncryptionResponseOutput() EnvelopeEncryptionResponseOutput {
	return i.ToEnvelopeEncryptionResponseOutputWithContext(context.Background())
}

func (i EnvelopeEncryptionResponseArgs) ToEnvelopeEncryptionResponseOutputWithContext(ctx context.Context) EnvelopeEncryptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeEncryptionResponseOutput)
}

func (i EnvelopeEncryptionResponseArgs) ToEnvelopeEncryptionResponsePtrOutput() EnvelopeEncryptionResponsePtrOutput {
	return i.ToEnvelopeEncryptionResponsePtrOutputWithContext(context.Background())
}

func (i EnvelopeEncryptionResponseArgs) ToEnvelopeEncryptionResponsePtrOutputWithContext(ctx context.Context) EnvelopeEncryptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeEncryptionResponseOutput).ToEnvelopeEncryptionResponsePtrOutputWithContext(ctx)
}

// EnvelopeEncryptionResponsePtrInput is an input type that accepts EnvelopeEncryptionResponseArgs, EnvelopeEncryptionResponsePtr and EnvelopeEncryptionResponsePtrOutput values.
// You can construct a concrete instance of `EnvelopeEncryptionResponsePtrInput` via:
//
//          EnvelopeEncryptionResponseArgs{...}
//
//  or:
//
//          nil
type EnvelopeEncryptionResponsePtrInput interface {
	pulumi.Input

	ToEnvelopeEncryptionResponsePtrOutput() EnvelopeEncryptionResponsePtrOutput
	ToEnvelopeEncryptionResponsePtrOutputWithContext(context.Context) EnvelopeEncryptionResponsePtrOutput
}

type envelopeEncryptionResponsePtrType EnvelopeEncryptionResponseArgs

func EnvelopeEncryptionResponsePtr(v *EnvelopeEncryptionResponseArgs) EnvelopeEncryptionResponsePtrInput {
	return (*envelopeEncryptionResponsePtrType)(v)
}

func (*envelopeEncryptionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvelopeEncryptionResponse)(nil)).Elem()
}

func (i *envelopeEncryptionResponsePtrType) ToEnvelopeEncryptionResponsePtrOutput() EnvelopeEncryptionResponsePtrOutput {
	return i.ToEnvelopeEncryptionResponsePtrOutputWithContext(context.Background())
}

func (i *envelopeEncryptionResponsePtrType) ToEnvelopeEncryptionResponsePtrOutputWithContext(ctx context.Context) EnvelopeEncryptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeEncryptionResponsePtrOutput)
}

// Class for EnvelopeEncryption encryption scheme
type EnvelopeEncryptionResponseOutput struct{ *pulumi.OutputState }

func (EnvelopeEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeEncryptionResponse)(nil)).Elem()
}

func (o EnvelopeEncryptionResponseOutput) ToEnvelopeEncryptionResponseOutput() EnvelopeEncryptionResponseOutput {
	return o
}

func (o EnvelopeEncryptionResponseOutput) ToEnvelopeEncryptionResponseOutputWithContext(ctx context.Context) EnvelopeEncryptionResponseOutput {
	return o
}

func (o EnvelopeEncryptionResponseOutput) ToEnvelopeEncryptionResponsePtrOutput() EnvelopeEncryptionResponsePtrOutput {
	return o.ToEnvelopeEncryptionResponsePtrOutputWithContext(context.Background())
}

func (o EnvelopeEncryptionResponseOutput) ToEnvelopeEncryptionResponsePtrOutputWithContext(ctx context.Context) EnvelopeEncryptionResponsePtrOutput {
	return o.ApplyT(func(v EnvelopeEncryptionResponse) *EnvelopeEncryptionResponse {
		return &v
	}).(EnvelopeEncryptionResponsePtrOutput)
}

// Representing which tracks should not be encrypted
func (o EnvelopeEncryptionResponseOutput) ClearTracks() TrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v EnvelopeEncryptionResponse) []TrackSelectionResponse { return v.ClearTracks }).(TrackSelectionResponseArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o EnvelopeEncryptionResponseOutput) ContentKeys() StreamingPolicyContentKeysResponsePtrOutput {
	return o.ApplyT(func(v EnvelopeEncryptionResponse) *StreamingPolicyContentKeysResponse { return v.ContentKeys }).(StreamingPolicyContentKeysResponsePtrOutput)
}

// Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o EnvelopeEncryptionResponseOutput) CustomKeyAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvelopeEncryptionResponse) *string { return v.CustomKeyAcquisitionUrlTemplate }).(pulumi.StringPtrOutput)
}

// Representing supported protocols
func (o EnvelopeEncryptionResponseOutput) EnabledProtocols() EnabledProtocolsResponsePtrOutput {
	return o.ApplyT(func(v EnvelopeEncryptionResponse) *EnabledProtocolsResponse { return v.EnabledProtocols }).(EnabledProtocolsResponsePtrOutput)
}

type EnvelopeEncryptionResponsePtrOutput struct{ *pulumi.OutputState }

func (EnvelopeEncryptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvelopeEncryptionResponse)(nil)).Elem()
}

func (o EnvelopeEncryptionResponsePtrOutput) ToEnvelopeEncryptionResponsePtrOutput() EnvelopeEncryptionResponsePtrOutput {
	return o
}

func (o EnvelopeEncryptionResponsePtrOutput) ToEnvelopeEncryptionResponsePtrOutputWithContext(ctx context.Context) EnvelopeEncryptionResponsePtrOutput {
	return o
}

func (o EnvelopeEncryptionResponsePtrOutput) Elem() EnvelopeEncryptionResponseOutput {
	return o.ApplyT(func(v *EnvelopeEncryptionResponse) EnvelopeEncryptionResponse { return *v }).(EnvelopeEncryptionResponseOutput)
}

// Representing which tracks should not be encrypted
func (o EnvelopeEncryptionResponsePtrOutput) ClearTracks() TrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v *EnvelopeEncryptionResponse) []TrackSelectionResponse {
		if v == nil {
			return nil
		}
		return v.ClearTracks
	}).(TrackSelectionResponseArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o EnvelopeEncryptionResponsePtrOutput) ContentKeys() StreamingPolicyContentKeysResponsePtrOutput {
	return o.ApplyT(func(v *EnvelopeEncryptionResponse) *StreamingPolicyContentKeysResponse {
		if v == nil {
			return nil
		}
		return v.ContentKeys
	}).(StreamingPolicyContentKeysResponsePtrOutput)
}

// Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o EnvelopeEncryptionResponsePtrOutput) CustomKeyAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvelopeEncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomKeyAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// Representing supported protocols
func (o EnvelopeEncryptionResponsePtrOutput) EnabledProtocols() EnabledProtocolsResponsePtrOutput {
	return o.ApplyT(func(v *EnvelopeEncryptionResponse) *EnabledProtocolsResponse {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(EnabledProtocolsResponsePtrOutput)
}

// Describes all the settings to be used when analyzing a video in order to detect all the faces present.
type FaceDetectorPreset struct {
	// Dictionary containing key value pairs for parameters not exposed in the preset itself
	ExperimentalOptions map[string]string `pulumi:"experimentalOptions"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// Specifies the maximum resolution at which your video is analyzed. The default behavior is "SourceResolution," which will keep the input video at its original resolution when analyzed. Using "StandardDefinition" will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to "StandardDefinition" will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.
	Resolution *string `pulumi:"resolution"`
}

// FaceDetectorPresetInput is an input type that accepts FaceDetectorPresetArgs and FaceDetectorPresetOutput values.
// You can construct a concrete instance of `FaceDetectorPresetInput` via:
//
//          FaceDetectorPresetArgs{...}
type FaceDetectorPresetInput interface {
	pulumi.Input

	ToFaceDetectorPresetOutput() FaceDetectorPresetOutput
	ToFaceDetectorPresetOutputWithContext(context.Context) FaceDetectorPresetOutput
}

// Describes all the settings to be used when analyzing a video in order to detect all the faces present.
type FaceDetectorPresetArgs struct {
	// Dictionary containing key value pairs for parameters not exposed in the preset itself
	ExperimentalOptions pulumi.StringMapInput `pulumi:"experimentalOptions"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// Specifies the maximum resolution at which your video is analyzed. The default behavior is "SourceResolution," which will keep the input video at its original resolution when analyzed. Using "StandardDefinition" will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to "StandardDefinition" will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.
	Resolution pulumi.StringPtrInput `pulumi:"resolution"`
}

func (FaceDetectorPresetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FaceDetectorPreset)(nil)).Elem()
}

func (i FaceDetectorPresetArgs) ToFaceDetectorPresetOutput() FaceDetectorPresetOutput {
	return i.ToFaceDetectorPresetOutputWithContext(context.Background())
}

func (i FaceDetectorPresetArgs) ToFaceDetectorPresetOutputWithContext(ctx context.Context) FaceDetectorPresetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FaceDetectorPresetOutput)
}

// Describes all the settings to be used when analyzing a video in order to detect all the faces present.
type FaceDetectorPresetOutput struct{ *pulumi.OutputState }

func (FaceDetectorPresetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FaceDetectorPreset)(nil)).Elem()
}

func (o FaceDetectorPresetOutput) ToFaceDetectorPresetOutput() FaceDetectorPresetOutput {
	return o
}

func (o FaceDetectorPresetOutput) ToFaceDetectorPresetOutputWithContext(ctx context.Context) FaceDetectorPresetOutput {
	return o
}

// Dictionary containing key value pairs for parameters not exposed in the preset itself
func (o FaceDetectorPresetOutput) ExperimentalOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v FaceDetectorPreset) map[string]string { return v.ExperimentalOptions }).(pulumi.StringMapOutput)
}

// The discriminator for derived types.
func (o FaceDetectorPresetOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v FaceDetectorPreset) string { return v.OdataType }).(pulumi.StringOutput)
}

// Specifies the maximum resolution at which your video is analyzed. The default behavior is "SourceResolution," which will keep the input video at its original resolution when analyzed. Using "StandardDefinition" will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to "StandardDefinition" will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.
func (o FaceDetectorPresetOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FaceDetectorPreset) *string { return v.Resolution }).(pulumi.StringPtrOutput)
}

// Describes all the settings to be used when analyzing a video in order to detect all the faces present.
type FaceDetectorPresetResponse struct {
	// Dictionary containing key value pairs for parameters not exposed in the preset itself
	ExperimentalOptions map[string]string `pulumi:"experimentalOptions"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// Specifies the maximum resolution at which your video is analyzed. The default behavior is "SourceResolution," which will keep the input video at its original resolution when analyzed. Using "StandardDefinition" will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to "StandardDefinition" will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.
	Resolution *string `pulumi:"resolution"`
}

// FaceDetectorPresetResponseInput is an input type that accepts FaceDetectorPresetResponseArgs and FaceDetectorPresetResponseOutput values.
// You can construct a concrete instance of `FaceDetectorPresetResponseInput` via:
//
//          FaceDetectorPresetResponseArgs{...}
type FaceDetectorPresetResponseInput interface {
	pulumi.Input

	ToFaceDetectorPresetResponseOutput() FaceDetectorPresetResponseOutput
	ToFaceDetectorPresetResponseOutputWithContext(context.Context) FaceDetectorPresetResponseOutput
}

// Describes all the settings to be used when analyzing a video in order to detect all the faces present.
type FaceDetectorPresetResponseArgs struct {
	// Dictionary containing key value pairs for parameters not exposed in the preset itself
	ExperimentalOptions pulumi.StringMapInput `pulumi:"experimentalOptions"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// Specifies the maximum resolution at which your video is analyzed. The default behavior is "SourceResolution," which will keep the input video at its original resolution when analyzed. Using "StandardDefinition" will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to "StandardDefinition" will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.
	Resolution pulumi.StringPtrInput `pulumi:"resolution"`
}

func (FaceDetectorPresetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FaceDetectorPresetResponse)(nil)).Elem()
}

func (i FaceDetectorPresetResponseArgs) ToFaceDetectorPresetResponseOutput() FaceDetectorPresetResponseOutput {
	return i.ToFaceDetectorPresetResponseOutputWithContext(context.Background())
}

func (i FaceDetectorPresetResponseArgs) ToFaceDetectorPresetResponseOutputWithContext(ctx context.Context) FaceDetectorPresetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FaceDetectorPresetResponseOutput)
}

// Describes all the settings to be used when analyzing a video in order to detect all the faces present.
type FaceDetectorPresetResponseOutput struct{ *pulumi.OutputState }

func (FaceDetectorPresetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FaceDetectorPresetResponse)(nil)).Elem()
}

func (o FaceDetectorPresetResponseOutput) ToFaceDetectorPresetResponseOutput() FaceDetectorPresetResponseOutput {
	return o
}

func (o FaceDetectorPresetResponseOutput) ToFaceDetectorPresetResponseOutputWithContext(ctx context.Context) FaceDetectorPresetResponseOutput {
	return o
}

// Dictionary containing key value pairs for parameters not exposed in the preset itself
func (o FaceDetectorPresetResponseOutput) ExperimentalOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v FaceDetectorPresetResponse) map[string]string { return v.ExperimentalOptions }).(pulumi.StringMapOutput)
}

// The discriminator for derived types.
func (o FaceDetectorPresetResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v FaceDetectorPresetResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Specifies the maximum resolution at which your video is analyzed. The default behavior is "SourceResolution," which will keep the input video at its original resolution when analyzed. Using "StandardDefinition" will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to "StandardDefinition" will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected.
func (o FaceDetectorPresetResponseOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FaceDetectorPresetResponse) *string { return v.Resolution }).(pulumi.StringPtrOutput)
}

// The class to specify one track property condition.
type FilterTrackPropertyCondition struct {
	// The track property condition operation.
	Operation string `pulumi:"operation"`
	// The track property type.
	Property string `pulumi:"property"`
	// The track property value.
	Value string `pulumi:"value"`
}

// FilterTrackPropertyConditionInput is an input type that accepts FilterTrackPropertyConditionArgs and FilterTrackPropertyConditionOutput values.
// You can construct a concrete instance of `FilterTrackPropertyConditionInput` via:
//
//          FilterTrackPropertyConditionArgs{...}
type FilterTrackPropertyConditionInput interface {
	pulumi.Input

	ToFilterTrackPropertyConditionOutput() FilterTrackPropertyConditionOutput
	ToFilterTrackPropertyConditionOutputWithContext(context.Context) FilterTrackPropertyConditionOutput
}

// The class to specify one track property condition.
type FilterTrackPropertyConditionArgs struct {
	// The track property condition operation.
	Operation pulumi.StringInput `pulumi:"operation"`
	// The track property type.
	Property pulumi.StringInput `pulumi:"property"`
	// The track property value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (FilterTrackPropertyConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackPropertyCondition)(nil)).Elem()
}

func (i FilterTrackPropertyConditionArgs) ToFilterTrackPropertyConditionOutput() FilterTrackPropertyConditionOutput {
	return i.ToFilterTrackPropertyConditionOutputWithContext(context.Background())
}

func (i FilterTrackPropertyConditionArgs) ToFilterTrackPropertyConditionOutputWithContext(ctx context.Context) FilterTrackPropertyConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterTrackPropertyConditionOutput)
}

// FilterTrackPropertyConditionArrayInput is an input type that accepts FilterTrackPropertyConditionArray and FilterTrackPropertyConditionArrayOutput values.
// You can construct a concrete instance of `FilterTrackPropertyConditionArrayInput` via:
//
//          FilterTrackPropertyConditionArray{ FilterTrackPropertyConditionArgs{...} }
type FilterTrackPropertyConditionArrayInput interface {
	pulumi.Input

	ToFilterTrackPropertyConditionArrayOutput() FilterTrackPropertyConditionArrayOutput
	ToFilterTrackPropertyConditionArrayOutputWithContext(context.Context) FilterTrackPropertyConditionArrayOutput
}

type FilterTrackPropertyConditionArray []FilterTrackPropertyConditionInput

func (FilterTrackPropertyConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterTrackPropertyCondition)(nil)).Elem()
}

func (i FilterTrackPropertyConditionArray) ToFilterTrackPropertyConditionArrayOutput() FilterTrackPropertyConditionArrayOutput {
	return i.ToFilterTrackPropertyConditionArrayOutputWithContext(context.Background())
}

func (i FilterTrackPropertyConditionArray) ToFilterTrackPropertyConditionArrayOutputWithContext(ctx context.Context) FilterTrackPropertyConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterTrackPropertyConditionArrayOutput)
}

// The class to specify one track property condition.
type FilterTrackPropertyConditionOutput struct{ *pulumi.OutputState }

func (FilterTrackPropertyConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackPropertyCondition)(nil)).Elem()
}

func (o FilterTrackPropertyConditionOutput) ToFilterTrackPropertyConditionOutput() FilterTrackPropertyConditionOutput {
	return o
}

func (o FilterTrackPropertyConditionOutput) ToFilterTrackPropertyConditionOutputWithContext(ctx context.Context) FilterTrackPropertyConditionOutput {
	return o
}

// The track property condition operation.
func (o FilterTrackPropertyConditionOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v FilterTrackPropertyCondition) string { return v.Operation }).(pulumi.StringOutput)
}

// The track property type.
func (o FilterTrackPropertyConditionOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v FilterTrackPropertyCondition) string { return v.Property }).(pulumi.StringOutput)
}

// The track property value.
func (o FilterTrackPropertyConditionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v FilterTrackPropertyCondition) string { return v.Value }).(pulumi.StringOutput)
}

type FilterTrackPropertyConditionArrayOutput struct{ *pulumi.OutputState }

func (FilterTrackPropertyConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterTrackPropertyCondition)(nil)).Elem()
}

func (o FilterTrackPropertyConditionArrayOutput) ToFilterTrackPropertyConditionArrayOutput() FilterTrackPropertyConditionArrayOutput {
	return o
}

func (o FilterTrackPropertyConditionArrayOutput) ToFilterTrackPropertyConditionArrayOutputWithContext(ctx context.Context) FilterTrackPropertyConditionArrayOutput {
	return o
}

func (o FilterTrackPropertyConditionArrayOutput) Index(i pulumi.IntInput) FilterTrackPropertyConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FilterTrackPropertyCondition {
		return vs[0].([]FilterTrackPropertyCondition)[vs[1].(int)]
	}).(FilterTrackPropertyConditionOutput)
}

// The class to specify one track property condition.
type FilterTrackPropertyConditionResponse struct {
	// The track property condition operation.
	Operation string `pulumi:"operation"`
	// The track property type.
	Property string `pulumi:"property"`
	// The track property value.
	Value string `pulumi:"value"`
}

// FilterTrackPropertyConditionResponseInput is an input type that accepts FilterTrackPropertyConditionResponseArgs and FilterTrackPropertyConditionResponseOutput values.
// You can construct a concrete instance of `FilterTrackPropertyConditionResponseInput` via:
//
//          FilterTrackPropertyConditionResponseArgs{...}
type FilterTrackPropertyConditionResponseInput interface {
	pulumi.Input

	ToFilterTrackPropertyConditionResponseOutput() FilterTrackPropertyConditionResponseOutput
	ToFilterTrackPropertyConditionResponseOutputWithContext(context.Context) FilterTrackPropertyConditionResponseOutput
}

// The class to specify one track property condition.
type FilterTrackPropertyConditionResponseArgs struct {
	// The track property condition operation.
	Operation pulumi.StringInput `pulumi:"operation"`
	// The track property type.
	Property pulumi.StringInput `pulumi:"property"`
	// The track property value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (FilterTrackPropertyConditionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackPropertyConditionResponse)(nil)).Elem()
}

func (i FilterTrackPropertyConditionResponseArgs) ToFilterTrackPropertyConditionResponseOutput() FilterTrackPropertyConditionResponseOutput {
	return i.ToFilterTrackPropertyConditionResponseOutputWithContext(context.Background())
}

func (i FilterTrackPropertyConditionResponseArgs) ToFilterTrackPropertyConditionResponseOutputWithContext(ctx context.Context) FilterTrackPropertyConditionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterTrackPropertyConditionResponseOutput)
}

// FilterTrackPropertyConditionResponseArrayInput is an input type that accepts FilterTrackPropertyConditionResponseArray and FilterTrackPropertyConditionResponseArrayOutput values.
// You can construct a concrete instance of `FilterTrackPropertyConditionResponseArrayInput` via:
//
//          FilterTrackPropertyConditionResponseArray{ FilterTrackPropertyConditionResponseArgs{...} }
type FilterTrackPropertyConditionResponseArrayInput interface {
	pulumi.Input

	ToFilterTrackPropertyConditionResponseArrayOutput() FilterTrackPropertyConditionResponseArrayOutput
	ToFilterTrackPropertyConditionResponseArrayOutputWithContext(context.Context) FilterTrackPropertyConditionResponseArrayOutput
}

type FilterTrackPropertyConditionResponseArray []FilterTrackPropertyConditionResponseInput

func (FilterTrackPropertyConditionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterTrackPropertyConditionResponse)(nil)).Elem()
}

func (i FilterTrackPropertyConditionResponseArray) ToFilterTrackPropertyConditionResponseArrayOutput() FilterTrackPropertyConditionResponseArrayOutput {
	return i.ToFilterTrackPropertyConditionResponseArrayOutputWithContext(context.Background())
}

func (i FilterTrackPropertyConditionResponseArray) ToFilterTrackPropertyConditionResponseArrayOutputWithContext(ctx context.Context) FilterTrackPropertyConditionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterTrackPropertyConditionResponseArrayOutput)
}

// The class to specify one track property condition.
type FilterTrackPropertyConditionResponseOutput struct{ *pulumi.OutputState }

func (FilterTrackPropertyConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackPropertyConditionResponse)(nil)).Elem()
}

func (o FilterTrackPropertyConditionResponseOutput) ToFilterTrackPropertyConditionResponseOutput() FilterTrackPropertyConditionResponseOutput {
	return o
}

func (o FilterTrackPropertyConditionResponseOutput) ToFilterTrackPropertyConditionResponseOutputWithContext(ctx context.Context) FilterTrackPropertyConditionResponseOutput {
	return o
}

// The track property condition operation.
func (o FilterTrackPropertyConditionResponseOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v FilterTrackPropertyConditionResponse) string { return v.Operation }).(pulumi.StringOutput)
}

// The track property type.
func (o FilterTrackPropertyConditionResponseOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v FilterTrackPropertyConditionResponse) string { return v.Property }).(pulumi.StringOutput)
}

// The track property value.
func (o FilterTrackPropertyConditionResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v FilterTrackPropertyConditionResponse) string { return v.Value }).(pulumi.StringOutput)
}

type FilterTrackPropertyConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (FilterTrackPropertyConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterTrackPropertyConditionResponse)(nil)).Elem()
}

func (o FilterTrackPropertyConditionResponseArrayOutput) ToFilterTrackPropertyConditionResponseArrayOutput() FilterTrackPropertyConditionResponseArrayOutput {
	return o
}

func (o FilterTrackPropertyConditionResponseArrayOutput) ToFilterTrackPropertyConditionResponseArrayOutputWithContext(ctx context.Context) FilterTrackPropertyConditionResponseArrayOutput {
	return o
}

func (o FilterTrackPropertyConditionResponseArrayOutput) Index(i pulumi.IntInput) FilterTrackPropertyConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FilterTrackPropertyConditionResponse {
		return vs[0].([]FilterTrackPropertyConditionResponse)[vs[1].(int)]
	}).(FilterTrackPropertyConditionResponseOutput)
}

// Representing a list of FilterTrackPropertyConditions to select a track.  The filters are combined using a logical AND operation.
type FilterTrackSelection struct {
	// The track selections.
	TrackSelections []FilterTrackPropertyCondition `pulumi:"trackSelections"`
}

// FilterTrackSelectionInput is an input type that accepts FilterTrackSelectionArgs and FilterTrackSelectionOutput values.
// You can construct a concrete instance of `FilterTrackSelectionInput` via:
//
//          FilterTrackSelectionArgs{...}
type FilterTrackSelectionInput interface {
	pulumi.Input

	ToFilterTrackSelectionOutput() FilterTrackSelectionOutput
	ToFilterTrackSelectionOutputWithContext(context.Context) FilterTrackSelectionOutput
}

// Representing a list of FilterTrackPropertyConditions to select a track.  The filters are combined using a logical AND operation.
type FilterTrackSelectionArgs struct {
	// The track selections.
	TrackSelections FilterTrackPropertyConditionArrayInput `pulumi:"trackSelections"`
}

func (FilterTrackSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackSelection)(nil)).Elem()
}

func (i FilterTrackSelectionArgs) ToFilterTrackSelectionOutput() FilterTrackSelectionOutput {
	return i.ToFilterTrackSelectionOutputWithContext(context.Background())
}

func (i FilterTrackSelectionArgs) ToFilterTrackSelectionOutputWithContext(ctx context.Context) FilterTrackSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterTrackSelectionOutput)
}

// FilterTrackSelectionArrayInput is an input type that accepts FilterTrackSelectionArray and FilterTrackSelectionArrayOutput values.
// You can construct a concrete instance of `FilterTrackSelectionArrayInput` via:
//
//          FilterTrackSelectionArray{ FilterTrackSelectionArgs{...} }
type FilterTrackSelectionArrayInput interface {
	pulumi.Input

	ToFilterTrackSelectionArrayOutput() FilterTrackSelectionArrayOutput
	ToFilterTrackSelectionArrayOutputWithContext(context.Context) FilterTrackSelectionArrayOutput
}

type FilterTrackSelectionArray []FilterTrackSelectionInput

func (FilterTrackSelectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterTrackSelection)(nil)).Elem()
}

func (i FilterTrackSelectionArray) ToFilterTrackSelectionArrayOutput() FilterTrackSelectionArrayOutput {
	return i.ToFilterTrackSelectionArrayOutputWithContext(context.Background())
}

func (i FilterTrackSelectionArray) ToFilterTrackSelectionArrayOutputWithContext(ctx context.Context) FilterTrackSelectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterTrackSelectionArrayOutput)
}

// Representing a list of FilterTrackPropertyConditions to select a track.  The filters are combined using a logical AND operation.
type FilterTrackSelectionOutput struct{ *pulumi.OutputState }

func (FilterTrackSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackSelection)(nil)).Elem()
}

func (o FilterTrackSelectionOutput) ToFilterTrackSelectionOutput() FilterTrackSelectionOutput {
	return o
}

func (o FilterTrackSelectionOutput) ToFilterTrackSelectionOutputWithContext(ctx context.Context) FilterTrackSelectionOutput {
	return o
}

// The track selections.
func (o FilterTrackSelectionOutput) TrackSelections() FilterTrackPropertyConditionArrayOutput {
	return o.ApplyT(func(v FilterTrackSelection) []FilterTrackPropertyCondition { return v.TrackSelections }).(FilterTrackPropertyConditionArrayOutput)
}

type FilterTrackSelectionArrayOutput struct{ *pulumi.OutputState }

func (FilterTrackSelectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterTrackSelection)(nil)).Elem()
}

func (o FilterTrackSelectionArrayOutput) ToFilterTrackSelectionArrayOutput() FilterTrackSelectionArrayOutput {
	return o
}

func (o FilterTrackSelectionArrayOutput) ToFilterTrackSelectionArrayOutputWithContext(ctx context.Context) FilterTrackSelectionArrayOutput {
	return o
}

func (o FilterTrackSelectionArrayOutput) Index(i pulumi.IntInput) FilterTrackSelectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FilterTrackSelection {
		return vs[0].([]FilterTrackSelection)[vs[1].(int)]
	}).(FilterTrackSelectionOutput)
}

// Representing a list of FilterTrackPropertyConditions to select a track.  The filters are combined using a logical AND operation.
type FilterTrackSelectionResponse struct {
	// The track selections.
	TrackSelections []FilterTrackPropertyConditionResponse `pulumi:"trackSelections"`
}

// FilterTrackSelectionResponseInput is an input type that accepts FilterTrackSelectionResponseArgs and FilterTrackSelectionResponseOutput values.
// You can construct a concrete instance of `FilterTrackSelectionResponseInput` via:
//
//          FilterTrackSelectionResponseArgs{...}
type FilterTrackSelectionResponseInput interface {
	pulumi.Input

	ToFilterTrackSelectionResponseOutput() FilterTrackSelectionResponseOutput
	ToFilterTrackSelectionResponseOutputWithContext(context.Context) FilterTrackSelectionResponseOutput
}

// Representing a list of FilterTrackPropertyConditions to select a track.  The filters are combined using a logical AND operation.
type FilterTrackSelectionResponseArgs struct {
	// The track selections.
	TrackSelections FilterTrackPropertyConditionResponseArrayInput `pulumi:"trackSelections"`
}

func (FilterTrackSelectionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackSelectionResponse)(nil)).Elem()
}

func (i FilterTrackSelectionResponseArgs) ToFilterTrackSelectionResponseOutput() FilterTrackSelectionResponseOutput {
	return i.ToFilterTrackSelectionResponseOutputWithContext(context.Background())
}

func (i FilterTrackSelectionResponseArgs) ToFilterTrackSelectionResponseOutputWithContext(ctx context.Context) FilterTrackSelectionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterTrackSelectionResponseOutput)
}

// FilterTrackSelectionResponseArrayInput is an input type that accepts FilterTrackSelectionResponseArray and FilterTrackSelectionResponseArrayOutput values.
// You can construct a concrete instance of `FilterTrackSelectionResponseArrayInput` via:
//
//          FilterTrackSelectionResponseArray{ FilterTrackSelectionResponseArgs{...} }
type FilterTrackSelectionResponseArrayInput interface {
	pulumi.Input

	ToFilterTrackSelectionResponseArrayOutput() FilterTrackSelectionResponseArrayOutput
	ToFilterTrackSelectionResponseArrayOutputWithContext(context.Context) FilterTrackSelectionResponseArrayOutput
}

type FilterTrackSelectionResponseArray []FilterTrackSelectionResponseInput

func (FilterTrackSelectionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterTrackSelectionResponse)(nil)).Elem()
}

func (i FilterTrackSelectionResponseArray) ToFilterTrackSelectionResponseArrayOutput() FilterTrackSelectionResponseArrayOutput {
	return i.ToFilterTrackSelectionResponseArrayOutputWithContext(context.Background())
}

func (i FilterTrackSelectionResponseArray) ToFilterTrackSelectionResponseArrayOutputWithContext(ctx context.Context) FilterTrackSelectionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterTrackSelectionResponseArrayOutput)
}

// Representing a list of FilterTrackPropertyConditions to select a track.  The filters are combined using a logical AND operation.
type FilterTrackSelectionResponseOutput struct{ *pulumi.OutputState }

func (FilterTrackSelectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackSelectionResponse)(nil)).Elem()
}

func (o FilterTrackSelectionResponseOutput) ToFilterTrackSelectionResponseOutput() FilterTrackSelectionResponseOutput {
	return o
}

func (o FilterTrackSelectionResponseOutput) ToFilterTrackSelectionResponseOutputWithContext(ctx context.Context) FilterTrackSelectionResponseOutput {
	return o
}

// The track selections.
func (o FilterTrackSelectionResponseOutput) TrackSelections() FilterTrackPropertyConditionResponseArrayOutput {
	return o.ApplyT(func(v FilterTrackSelectionResponse) []FilterTrackPropertyConditionResponse { return v.TrackSelections }).(FilterTrackPropertyConditionResponseArrayOutput)
}

type FilterTrackSelectionResponseArrayOutput struct{ *pulumi.OutputState }

func (FilterTrackSelectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterTrackSelectionResponse)(nil)).Elem()
}

func (o FilterTrackSelectionResponseArrayOutput) ToFilterTrackSelectionResponseArrayOutput() FilterTrackSelectionResponseArrayOutput {
	return o
}

func (o FilterTrackSelectionResponseArrayOutput) ToFilterTrackSelectionResponseArrayOutputWithContext(ctx context.Context) FilterTrackSelectionResponseArrayOutput {
	return o
}

func (o FilterTrackSelectionResponseArrayOutput) Index(i pulumi.IntInput) FilterTrackSelectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FilterTrackSelectionResponse {
		return vs[0].([]FilterTrackSelectionResponse)[vs[1].(int)]
	}).(FilterTrackSelectionResponseOutput)
}

// Describes all the filtering operations, such as de-interlacing, rotation etc. that are to be applied to the input media before encoding.
type Filters struct {
	// The parameters for the rectangular window with which to crop the input video.
	Crop *Rectangle `pulumi:"crop"`
	// The de-interlacing settings.
	Deinterlace *Deinterlace `pulumi:"deinterlace"`
	// The properties of overlays to be applied to the input video. These could be audio, image or video overlays.
	Overlays []interface{} `pulumi:"overlays"`
	// The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
	Rotation *string `pulumi:"rotation"`
}

// FiltersInput is an input type that accepts FiltersArgs and FiltersOutput values.
// You can construct a concrete instance of `FiltersInput` via:
//
//          FiltersArgs{...}
type FiltersInput interface {
	pulumi.Input

	ToFiltersOutput() FiltersOutput
	ToFiltersOutputWithContext(context.Context) FiltersOutput
}

// Describes all the filtering operations, such as de-interlacing, rotation etc. that are to be applied to the input media before encoding.
type FiltersArgs struct {
	// The parameters for the rectangular window with which to crop the input video.
	Crop RectanglePtrInput `pulumi:"crop"`
	// The de-interlacing settings.
	Deinterlace DeinterlacePtrInput `pulumi:"deinterlace"`
	// The properties of overlays to be applied to the input video. These could be audio, image or video overlays.
	Overlays pulumi.ArrayInput `pulumi:"overlays"`
	// The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
	Rotation pulumi.StringPtrInput `pulumi:"rotation"`
}

func (FiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Filters)(nil)).Elem()
}

func (i FiltersArgs) ToFiltersOutput() FiltersOutput {
	return i.ToFiltersOutputWithContext(context.Background())
}

func (i FiltersArgs) ToFiltersOutputWithContext(ctx context.Context) FiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FiltersOutput)
}

func (i FiltersArgs) ToFiltersPtrOutput() FiltersPtrOutput {
	return i.ToFiltersPtrOutputWithContext(context.Background())
}

func (i FiltersArgs) ToFiltersPtrOutputWithContext(ctx context.Context) FiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FiltersOutput).ToFiltersPtrOutputWithContext(ctx)
}

// FiltersPtrInput is an input type that accepts FiltersArgs, FiltersPtr and FiltersPtrOutput values.
// You can construct a concrete instance of `FiltersPtrInput` via:
//
//          FiltersArgs{...}
//
//  or:
//
//          nil
type FiltersPtrInput interface {
	pulumi.Input

	ToFiltersPtrOutput() FiltersPtrOutput
	ToFiltersPtrOutputWithContext(context.Context) FiltersPtrOutput
}

type filtersPtrType FiltersArgs

func FiltersPtr(v *FiltersArgs) FiltersPtrInput {
	return (*filtersPtrType)(v)
}

func (*filtersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Filters)(nil)).Elem()
}

func (i *filtersPtrType) ToFiltersPtrOutput() FiltersPtrOutput {
	return i.ToFiltersPtrOutputWithContext(context.Background())
}

func (i *filtersPtrType) ToFiltersPtrOutputWithContext(ctx context.Context) FiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FiltersPtrOutput)
}

// Describes all the filtering operations, such as de-interlacing, rotation etc. that are to be applied to the input media before encoding.
type FiltersOutput struct{ *pulumi.OutputState }

func (FiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Filters)(nil)).Elem()
}

func (o FiltersOutput) ToFiltersOutput() FiltersOutput {
	return o
}

func (o FiltersOutput) ToFiltersOutputWithContext(ctx context.Context) FiltersOutput {
	return o
}

func (o FiltersOutput) ToFiltersPtrOutput() FiltersPtrOutput {
	return o.ToFiltersPtrOutputWithContext(context.Background())
}

func (o FiltersOutput) ToFiltersPtrOutputWithContext(ctx context.Context) FiltersPtrOutput {
	return o.ApplyT(func(v Filters) *Filters {
		return &v
	}).(FiltersPtrOutput)
}

// The parameters for the rectangular window with which to crop the input video.
func (o FiltersOutput) Crop() RectanglePtrOutput {
	return o.ApplyT(func(v Filters) *Rectangle { return v.Crop }).(RectanglePtrOutput)
}

// The de-interlacing settings.
func (o FiltersOutput) Deinterlace() DeinterlacePtrOutput {
	return o.ApplyT(func(v Filters) *Deinterlace { return v.Deinterlace }).(DeinterlacePtrOutput)
}

// The properties of overlays to be applied to the input video. These could be audio, image or video overlays.
func (o FiltersOutput) Overlays() pulumi.ArrayOutput {
	return o.ApplyT(func(v Filters) []interface{} { return v.Overlays }).(pulumi.ArrayOutput)
}

// The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
func (o FiltersOutput) Rotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Filters) *string { return v.Rotation }).(pulumi.StringPtrOutput)
}

type FiltersPtrOutput struct{ *pulumi.OutputState }

func (FiltersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Filters)(nil)).Elem()
}

func (o FiltersPtrOutput) ToFiltersPtrOutput() FiltersPtrOutput {
	return o
}

func (o FiltersPtrOutput) ToFiltersPtrOutputWithContext(ctx context.Context) FiltersPtrOutput {
	return o
}

func (o FiltersPtrOutput) Elem() FiltersOutput {
	return o.ApplyT(func(v *Filters) Filters { return *v }).(FiltersOutput)
}

// The parameters for the rectangular window with which to crop the input video.
func (o FiltersPtrOutput) Crop() RectanglePtrOutput {
	return o.ApplyT(func(v *Filters) *Rectangle {
		if v == nil {
			return nil
		}
		return v.Crop
	}).(RectanglePtrOutput)
}

// The de-interlacing settings.
func (o FiltersPtrOutput) Deinterlace() DeinterlacePtrOutput {
	return o.ApplyT(func(v *Filters) *Deinterlace {
		if v == nil {
			return nil
		}
		return v.Deinterlace
	}).(DeinterlacePtrOutput)
}

// The properties of overlays to be applied to the input video. These could be audio, image or video overlays.
func (o FiltersPtrOutput) Overlays() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Filters) []interface{} {
		if v == nil {
			return nil
		}
		return v.Overlays
	}).(pulumi.ArrayOutput)
}

// The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
func (o FiltersPtrOutput) Rotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Filters) *string {
		if v == nil {
			return nil
		}
		return v.Rotation
	}).(pulumi.StringPtrOutput)
}

// Describes all the filtering operations, such as de-interlacing, rotation etc. that are to be applied to the input media before encoding.
type FiltersResponse struct {
	// The parameters for the rectangular window with which to crop the input video.
	Crop *RectangleResponse `pulumi:"crop"`
	// The de-interlacing settings.
	Deinterlace *DeinterlaceResponse `pulumi:"deinterlace"`
	// The properties of overlays to be applied to the input video. These could be audio, image or video overlays.
	Overlays []interface{} `pulumi:"overlays"`
	// The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
	Rotation *string `pulumi:"rotation"`
}

// FiltersResponseInput is an input type that accepts FiltersResponseArgs and FiltersResponseOutput values.
// You can construct a concrete instance of `FiltersResponseInput` via:
//
//          FiltersResponseArgs{...}
type FiltersResponseInput interface {
	pulumi.Input

	ToFiltersResponseOutput() FiltersResponseOutput
	ToFiltersResponseOutputWithContext(context.Context) FiltersResponseOutput
}

// Describes all the filtering operations, such as de-interlacing, rotation etc. that are to be applied to the input media before encoding.
type FiltersResponseArgs struct {
	// The parameters for the rectangular window with which to crop the input video.
	Crop RectangleResponsePtrInput `pulumi:"crop"`
	// The de-interlacing settings.
	Deinterlace DeinterlaceResponsePtrInput `pulumi:"deinterlace"`
	// The properties of overlays to be applied to the input video. These could be audio, image or video overlays.
	Overlays pulumi.ArrayInput `pulumi:"overlays"`
	// The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
	Rotation pulumi.StringPtrInput `pulumi:"rotation"`
}

func (FiltersResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FiltersResponse)(nil)).Elem()
}

func (i FiltersResponseArgs) ToFiltersResponseOutput() FiltersResponseOutput {
	return i.ToFiltersResponseOutputWithContext(context.Background())
}

func (i FiltersResponseArgs) ToFiltersResponseOutputWithContext(ctx context.Context) FiltersResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FiltersResponseOutput)
}

func (i FiltersResponseArgs) ToFiltersResponsePtrOutput() FiltersResponsePtrOutput {
	return i.ToFiltersResponsePtrOutputWithContext(context.Background())
}

func (i FiltersResponseArgs) ToFiltersResponsePtrOutputWithContext(ctx context.Context) FiltersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FiltersResponseOutput).ToFiltersResponsePtrOutputWithContext(ctx)
}

// FiltersResponsePtrInput is an input type that accepts FiltersResponseArgs, FiltersResponsePtr and FiltersResponsePtrOutput values.
// You can construct a concrete instance of `FiltersResponsePtrInput` via:
//
//          FiltersResponseArgs{...}
//
//  or:
//
//          nil
type FiltersResponsePtrInput interface {
	pulumi.Input

	ToFiltersResponsePtrOutput() FiltersResponsePtrOutput
	ToFiltersResponsePtrOutputWithContext(context.Context) FiltersResponsePtrOutput
}

type filtersResponsePtrType FiltersResponseArgs

func FiltersResponsePtr(v *FiltersResponseArgs) FiltersResponsePtrInput {
	return (*filtersResponsePtrType)(v)
}

func (*filtersResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FiltersResponse)(nil)).Elem()
}

func (i *filtersResponsePtrType) ToFiltersResponsePtrOutput() FiltersResponsePtrOutput {
	return i.ToFiltersResponsePtrOutputWithContext(context.Background())
}

func (i *filtersResponsePtrType) ToFiltersResponsePtrOutputWithContext(ctx context.Context) FiltersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FiltersResponsePtrOutput)
}

// Describes all the filtering operations, such as de-interlacing, rotation etc. that are to be applied to the input media before encoding.
type FiltersResponseOutput struct{ *pulumi.OutputState }

func (FiltersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FiltersResponse)(nil)).Elem()
}

func (o FiltersResponseOutput) ToFiltersResponseOutput() FiltersResponseOutput {
	return o
}

func (o FiltersResponseOutput) ToFiltersResponseOutputWithContext(ctx context.Context) FiltersResponseOutput {
	return o
}

func (o FiltersResponseOutput) ToFiltersResponsePtrOutput() FiltersResponsePtrOutput {
	return o.ToFiltersResponsePtrOutputWithContext(context.Background())
}

func (o FiltersResponseOutput) ToFiltersResponsePtrOutputWithContext(ctx context.Context) FiltersResponsePtrOutput {
	return o.ApplyT(func(v FiltersResponse) *FiltersResponse {
		return &v
	}).(FiltersResponsePtrOutput)
}

// The parameters for the rectangular window with which to crop the input video.
func (o FiltersResponseOutput) Crop() RectangleResponsePtrOutput {
	return o.ApplyT(func(v FiltersResponse) *RectangleResponse { return v.Crop }).(RectangleResponsePtrOutput)
}

// The de-interlacing settings.
func (o FiltersResponseOutput) Deinterlace() DeinterlaceResponsePtrOutput {
	return o.ApplyT(func(v FiltersResponse) *DeinterlaceResponse { return v.Deinterlace }).(DeinterlaceResponsePtrOutput)
}

// The properties of overlays to be applied to the input video. These could be audio, image or video overlays.
func (o FiltersResponseOutput) Overlays() pulumi.ArrayOutput {
	return o.ApplyT(func(v FiltersResponse) []interface{} { return v.Overlays }).(pulumi.ArrayOutput)
}

// The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
func (o FiltersResponseOutput) Rotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FiltersResponse) *string { return v.Rotation }).(pulumi.StringPtrOutput)
}

type FiltersResponsePtrOutput struct{ *pulumi.OutputState }

func (FiltersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FiltersResponse)(nil)).Elem()
}

func (o FiltersResponsePtrOutput) ToFiltersResponsePtrOutput() FiltersResponsePtrOutput {
	return o
}

func (o FiltersResponsePtrOutput) ToFiltersResponsePtrOutputWithContext(ctx context.Context) FiltersResponsePtrOutput {
	return o
}

func (o FiltersResponsePtrOutput) Elem() FiltersResponseOutput {
	return o.ApplyT(func(v *FiltersResponse) FiltersResponse { return *v }).(FiltersResponseOutput)
}

// The parameters for the rectangular window with which to crop the input video.
func (o FiltersResponsePtrOutput) Crop() RectangleResponsePtrOutput {
	return o.ApplyT(func(v *FiltersResponse) *RectangleResponse {
		if v == nil {
			return nil
		}
		return v.Crop
	}).(RectangleResponsePtrOutput)
}

// The de-interlacing settings.
func (o FiltersResponsePtrOutput) Deinterlace() DeinterlaceResponsePtrOutput {
	return o.ApplyT(func(v *FiltersResponse) *DeinterlaceResponse {
		if v == nil {
			return nil
		}
		return v.Deinterlace
	}).(DeinterlaceResponsePtrOutput)
}

// The properties of overlays to be applied to the input video. These could be audio, image or video overlays.
func (o FiltersResponsePtrOutput) Overlays() pulumi.ArrayOutput {
	return o.ApplyT(func(v *FiltersResponse) []interface{} {
		if v == nil {
			return nil
		}
		return v.Overlays
	}).(pulumi.ArrayOutput)
}

// The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto
func (o FiltersResponsePtrOutput) Rotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FiltersResponse) *string {
		if v == nil {
			return nil
		}
		return v.Rotation
	}).(pulumi.StringPtrOutput)
}

// Filter First Quality
type FirstQuality struct {
	// The first quality bitrate.
	Bitrate int `pulumi:"bitrate"`
}

// FirstQualityInput is an input type that accepts FirstQualityArgs and FirstQualityOutput values.
// You can construct a concrete instance of `FirstQualityInput` via:
//
//          FirstQualityArgs{...}
type FirstQualityInput interface {
	pulumi.Input

	ToFirstQualityOutput() FirstQualityOutput
	ToFirstQualityOutputWithContext(context.Context) FirstQualityOutput
}

// Filter First Quality
type FirstQualityArgs struct {
	// The first quality bitrate.
	Bitrate pulumi.IntInput `pulumi:"bitrate"`
}

func (FirstQualityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirstQuality)(nil)).Elem()
}

func (i FirstQualityArgs) ToFirstQualityOutput() FirstQualityOutput {
	return i.ToFirstQualityOutputWithContext(context.Background())
}

func (i FirstQualityArgs) ToFirstQualityOutputWithContext(ctx context.Context) FirstQualityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirstQualityOutput)
}

func (i FirstQualityArgs) ToFirstQualityPtrOutput() FirstQualityPtrOutput {
	return i.ToFirstQualityPtrOutputWithContext(context.Background())
}

func (i FirstQualityArgs) ToFirstQualityPtrOutputWithContext(ctx context.Context) FirstQualityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirstQualityOutput).ToFirstQualityPtrOutputWithContext(ctx)
}

// FirstQualityPtrInput is an input type that accepts FirstQualityArgs, FirstQualityPtr and FirstQualityPtrOutput values.
// You can construct a concrete instance of `FirstQualityPtrInput` via:
//
//          FirstQualityArgs{...}
//
//  or:
//
//          nil
type FirstQualityPtrInput interface {
	pulumi.Input

	ToFirstQualityPtrOutput() FirstQualityPtrOutput
	ToFirstQualityPtrOutputWithContext(context.Context) FirstQualityPtrOutput
}

type firstQualityPtrType FirstQualityArgs

func FirstQualityPtr(v *FirstQualityArgs) FirstQualityPtrInput {
	return (*firstQualityPtrType)(v)
}

func (*firstQualityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirstQuality)(nil)).Elem()
}

func (i *firstQualityPtrType) ToFirstQualityPtrOutput() FirstQualityPtrOutput {
	return i.ToFirstQualityPtrOutputWithContext(context.Background())
}

func (i *firstQualityPtrType) ToFirstQualityPtrOutputWithContext(ctx context.Context) FirstQualityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirstQualityPtrOutput)
}

// Filter First Quality
type FirstQualityOutput struct{ *pulumi.OutputState }

func (FirstQualityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirstQuality)(nil)).Elem()
}

func (o FirstQualityOutput) ToFirstQualityOutput() FirstQualityOutput {
	return o
}

func (o FirstQualityOutput) ToFirstQualityOutputWithContext(ctx context.Context) FirstQualityOutput {
	return o
}

func (o FirstQualityOutput) ToFirstQualityPtrOutput() FirstQualityPtrOutput {
	return o.ToFirstQualityPtrOutputWithContext(context.Background())
}

func (o FirstQualityOutput) ToFirstQualityPtrOutputWithContext(ctx context.Context) FirstQualityPtrOutput {
	return o.ApplyT(func(v FirstQuality) *FirstQuality {
		return &v
	}).(FirstQualityPtrOutput)
}

// The first quality bitrate.
func (o FirstQualityOutput) Bitrate() pulumi.IntOutput {
	return o.ApplyT(func(v FirstQuality) int { return v.Bitrate }).(pulumi.IntOutput)
}

type FirstQualityPtrOutput struct{ *pulumi.OutputState }

func (FirstQualityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirstQuality)(nil)).Elem()
}

func (o FirstQualityPtrOutput) ToFirstQualityPtrOutput() FirstQualityPtrOutput {
	return o
}

func (o FirstQualityPtrOutput) ToFirstQualityPtrOutputWithContext(ctx context.Context) FirstQualityPtrOutput {
	return o
}

func (o FirstQualityPtrOutput) Elem() FirstQualityOutput {
	return o.ApplyT(func(v *FirstQuality) FirstQuality { return *v }).(FirstQualityOutput)
}

// The first quality bitrate.
func (o FirstQualityPtrOutput) Bitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirstQuality) *int {
		if v == nil {
			return nil
		}
		return &v.Bitrate
	}).(pulumi.IntPtrOutput)
}

// Filter First Quality
type FirstQualityResponse struct {
	// The first quality bitrate.
	Bitrate int `pulumi:"bitrate"`
}

// FirstQualityResponseInput is an input type that accepts FirstQualityResponseArgs and FirstQualityResponseOutput values.
// You can construct a concrete instance of `FirstQualityResponseInput` via:
//
//          FirstQualityResponseArgs{...}
type FirstQualityResponseInput interface {
	pulumi.Input

	ToFirstQualityResponseOutput() FirstQualityResponseOutput
	ToFirstQualityResponseOutputWithContext(context.Context) FirstQualityResponseOutput
}

// Filter First Quality
type FirstQualityResponseArgs struct {
	// The first quality bitrate.
	Bitrate pulumi.IntInput `pulumi:"bitrate"`
}

func (FirstQualityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirstQualityResponse)(nil)).Elem()
}

func (i FirstQualityResponseArgs) ToFirstQualityResponseOutput() FirstQualityResponseOutput {
	return i.ToFirstQualityResponseOutputWithContext(context.Background())
}

func (i FirstQualityResponseArgs) ToFirstQualityResponseOutputWithContext(ctx context.Context) FirstQualityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirstQualityResponseOutput)
}

func (i FirstQualityResponseArgs) ToFirstQualityResponsePtrOutput() FirstQualityResponsePtrOutput {
	return i.ToFirstQualityResponsePtrOutputWithContext(context.Background())
}

func (i FirstQualityResponseArgs) ToFirstQualityResponsePtrOutputWithContext(ctx context.Context) FirstQualityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirstQualityResponseOutput).ToFirstQualityResponsePtrOutputWithContext(ctx)
}

// FirstQualityResponsePtrInput is an input type that accepts FirstQualityResponseArgs, FirstQualityResponsePtr and FirstQualityResponsePtrOutput values.
// You can construct a concrete instance of `FirstQualityResponsePtrInput` via:
//
//          FirstQualityResponseArgs{...}
//
//  or:
//
//          nil
type FirstQualityResponsePtrInput interface {
	pulumi.Input

	ToFirstQualityResponsePtrOutput() FirstQualityResponsePtrOutput
	ToFirstQualityResponsePtrOutputWithContext(context.Context) FirstQualityResponsePtrOutput
}

type firstQualityResponsePtrType FirstQualityResponseArgs

func FirstQualityResponsePtr(v *FirstQualityResponseArgs) FirstQualityResponsePtrInput {
	return (*firstQualityResponsePtrType)(v)
}

func (*firstQualityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirstQualityResponse)(nil)).Elem()
}

func (i *firstQualityResponsePtrType) ToFirstQualityResponsePtrOutput() FirstQualityResponsePtrOutput {
	return i.ToFirstQualityResponsePtrOutputWithContext(context.Background())
}

func (i *firstQualityResponsePtrType) ToFirstQualityResponsePtrOutputWithContext(ctx context.Context) FirstQualityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirstQualityResponsePtrOutput)
}

// Filter First Quality
type FirstQualityResponseOutput struct{ *pulumi.OutputState }

func (FirstQualityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirstQualityResponse)(nil)).Elem()
}

func (o FirstQualityResponseOutput) ToFirstQualityResponseOutput() FirstQualityResponseOutput {
	return o
}

func (o FirstQualityResponseOutput) ToFirstQualityResponseOutputWithContext(ctx context.Context) FirstQualityResponseOutput {
	return o
}

func (o FirstQualityResponseOutput) ToFirstQualityResponsePtrOutput() FirstQualityResponsePtrOutput {
	return o.ToFirstQualityResponsePtrOutputWithContext(context.Background())
}

func (o FirstQualityResponseOutput) ToFirstQualityResponsePtrOutputWithContext(ctx context.Context) FirstQualityResponsePtrOutput {
	return o.ApplyT(func(v FirstQualityResponse) *FirstQualityResponse {
		return &v
	}).(FirstQualityResponsePtrOutput)
}

// The first quality bitrate.
func (o FirstQualityResponseOutput) Bitrate() pulumi.IntOutput {
	return o.ApplyT(func(v FirstQualityResponse) int { return v.Bitrate }).(pulumi.IntOutput)
}

type FirstQualityResponsePtrOutput struct{ *pulumi.OutputState }

func (FirstQualityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirstQualityResponse)(nil)).Elem()
}

func (o FirstQualityResponsePtrOutput) ToFirstQualityResponsePtrOutput() FirstQualityResponsePtrOutput {
	return o
}

func (o FirstQualityResponsePtrOutput) ToFirstQualityResponsePtrOutputWithContext(ctx context.Context) FirstQualityResponsePtrOutput {
	return o
}

func (o FirstQualityResponsePtrOutput) Elem() FirstQualityResponseOutput {
	return o.ApplyT(func(v *FirstQualityResponse) FirstQualityResponse { return *v }).(FirstQualityResponseOutput)
}

// The first quality bitrate.
func (o FirstQualityResponsePtrOutput) Bitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirstQualityResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Bitrate
	}).(pulumi.IntPtrOutput)
}

// HTTP Live Streaming (HLS) packing setting for the live output.
type Hls struct {
	// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output.
	FragmentsPerTsSegment *int `pulumi:"fragmentsPerTsSegment"`
}

// HlsInput is an input type that accepts HlsArgs and HlsOutput values.
// You can construct a concrete instance of `HlsInput` via:
//
//          HlsArgs{...}
type HlsInput interface {
	pulumi.Input

	ToHlsOutput() HlsOutput
	ToHlsOutputWithContext(context.Context) HlsOutput
}

// HTTP Live Streaming (HLS) packing setting for the live output.
type HlsArgs struct {
	// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output.
	FragmentsPerTsSegment pulumi.IntPtrInput `pulumi:"fragmentsPerTsSegment"`
}

func (HlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hls)(nil)).Elem()
}

func (i HlsArgs) ToHlsOutput() HlsOutput {
	return i.ToHlsOutputWithContext(context.Background())
}

func (i HlsArgs) ToHlsOutputWithContext(ctx context.Context) HlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HlsOutput)
}

func (i HlsArgs) ToHlsPtrOutput() HlsPtrOutput {
	return i.ToHlsPtrOutputWithContext(context.Background())
}

func (i HlsArgs) ToHlsPtrOutputWithContext(ctx context.Context) HlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HlsOutput).ToHlsPtrOutputWithContext(ctx)
}

// HlsPtrInput is an input type that accepts HlsArgs, HlsPtr and HlsPtrOutput values.
// You can construct a concrete instance of `HlsPtrInput` via:
//
//          HlsArgs{...}
//
//  or:
//
//          nil
type HlsPtrInput interface {
	pulumi.Input

	ToHlsPtrOutput() HlsPtrOutput
	ToHlsPtrOutputWithContext(context.Context) HlsPtrOutput
}

type hlsPtrType HlsArgs

func HlsPtr(v *HlsArgs) HlsPtrInput {
	return (*hlsPtrType)(v)
}

func (*hlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hls)(nil)).Elem()
}

func (i *hlsPtrType) ToHlsPtrOutput() HlsPtrOutput {
	return i.ToHlsPtrOutputWithContext(context.Background())
}

func (i *hlsPtrType) ToHlsPtrOutputWithContext(ctx context.Context) HlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HlsPtrOutput)
}

// HTTP Live Streaming (HLS) packing setting for the live output.
type HlsOutput struct{ *pulumi.OutputState }

func (HlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hls)(nil)).Elem()
}

func (o HlsOutput) ToHlsOutput() HlsOutput {
	return o
}

func (o HlsOutput) ToHlsOutputWithContext(ctx context.Context) HlsOutput {
	return o
}

func (o HlsOutput) ToHlsPtrOutput() HlsPtrOutput {
	return o.ToHlsPtrOutputWithContext(context.Background())
}

func (o HlsOutput) ToHlsPtrOutputWithContext(ctx context.Context) HlsPtrOutput {
	return o.ApplyT(func(v Hls) *Hls {
		return &v
	}).(HlsPtrOutput)
}

// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output.
func (o HlsOutput) FragmentsPerTsSegment() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Hls) *int { return v.FragmentsPerTsSegment }).(pulumi.IntPtrOutput)
}

type HlsPtrOutput struct{ *pulumi.OutputState }

func (HlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hls)(nil)).Elem()
}

func (o HlsPtrOutput) ToHlsPtrOutput() HlsPtrOutput {
	return o
}

func (o HlsPtrOutput) ToHlsPtrOutputWithContext(ctx context.Context) HlsPtrOutput {
	return o
}

func (o HlsPtrOutput) Elem() HlsOutput {
	return o.ApplyT(func(v *Hls) Hls { return *v }).(HlsOutput)
}

// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output.
func (o HlsPtrOutput) FragmentsPerTsSegment() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Hls) *int {
		if v == nil {
			return nil
		}
		return v.FragmentsPerTsSegment
	}).(pulumi.IntPtrOutput)
}

// HTTP Live Streaming (HLS) packing setting for the live output.
type HlsResponse struct {
	// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output.
	FragmentsPerTsSegment *int `pulumi:"fragmentsPerTsSegment"`
}

// HlsResponseInput is an input type that accepts HlsResponseArgs and HlsResponseOutput values.
// You can construct a concrete instance of `HlsResponseInput` via:
//
//          HlsResponseArgs{...}
type HlsResponseInput interface {
	pulumi.Input

	ToHlsResponseOutput() HlsResponseOutput
	ToHlsResponseOutputWithContext(context.Context) HlsResponseOutput
}

// HTTP Live Streaming (HLS) packing setting for the live output.
type HlsResponseArgs struct {
	// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output.
	FragmentsPerTsSegment pulumi.IntPtrInput `pulumi:"fragmentsPerTsSegment"`
}

func (HlsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HlsResponse)(nil)).Elem()
}

func (i HlsResponseArgs) ToHlsResponseOutput() HlsResponseOutput {
	return i.ToHlsResponseOutputWithContext(context.Background())
}

func (i HlsResponseArgs) ToHlsResponseOutputWithContext(ctx context.Context) HlsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HlsResponseOutput)
}

func (i HlsResponseArgs) ToHlsResponsePtrOutput() HlsResponsePtrOutput {
	return i.ToHlsResponsePtrOutputWithContext(context.Background())
}

func (i HlsResponseArgs) ToHlsResponsePtrOutputWithContext(ctx context.Context) HlsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HlsResponseOutput).ToHlsResponsePtrOutputWithContext(ctx)
}

// HlsResponsePtrInput is an input type that accepts HlsResponseArgs, HlsResponsePtr and HlsResponsePtrOutput values.
// You can construct a concrete instance of `HlsResponsePtrInput` via:
//
//          HlsResponseArgs{...}
//
//  or:
//
//          nil
type HlsResponsePtrInput interface {
	pulumi.Input

	ToHlsResponsePtrOutput() HlsResponsePtrOutput
	ToHlsResponsePtrOutputWithContext(context.Context) HlsResponsePtrOutput
}

type hlsResponsePtrType HlsResponseArgs

func HlsResponsePtr(v *HlsResponseArgs) HlsResponsePtrInput {
	return (*hlsResponsePtrType)(v)
}

func (*hlsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HlsResponse)(nil)).Elem()
}

func (i *hlsResponsePtrType) ToHlsResponsePtrOutput() HlsResponsePtrOutput {
	return i.ToHlsResponsePtrOutputWithContext(context.Background())
}

func (i *hlsResponsePtrType) ToHlsResponsePtrOutputWithContext(ctx context.Context) HlsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HlsResponsePtrOutput)
}

// HTTP Live Streaming (HLS) packing setting for the live output.
type HlsResponseOutput struct{ *pulumi.OutputState }

func (HlsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HlsResponse)(nil)).Elem()
}

func (o HlsResponseOutput) ToHlsResponseOutput() HlsResponseOutput {
	return o
}

func (o HlsResponseOutput) ToHlsResponseOutputWithContext(ctx context.Context) HlsResponseOutput {
	return o
}

func (o HlsResponseOutput) ToHlsResponsePtrOutput() HlsResponsePtrOutput {
	return o.ToHlsResponsePtrOutputWithContext(context.Background())
}

func (o HlsResponseOutput) ToHlsResponsePtrOutputWithContext(ctx context.Context) HlsResponsePtrOutput {
	return o.ApplyT(func(v HlsResponse) *HlsResponse {
		return &v
	}).(HlsResponsePtrOutput)
}

// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output.
func (o HlsResponseOutput) FragmentsPerTsSegment() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HlsResponse) *int { return v.FragmentsPerTsSegment }).(pulumi.IntPtrOutput)
}

type HlsResponsePtrOutput struct{ *pulumi.OutputState }

func (HlsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HlsResponse)(nil)).Elem()
}

func (o HlsResponsePtrOutput) ToHlsResponsePtrOutput() HlsResponsePtrOutput {
	return o
}

func (o HlsResponsePtrOutput) ToHlsResponsePtrOutputWithContext(ctx context.Context) HlsResponsePtrOutput {
	return o
}

func (o HlsResponsePtrOutput) Elem() HlsResponseOutput {
	return o.ApplyT(func(v *HlsResponse) HlsResponse { return *v }).(HlsResponseOutput)
}

// The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output.
func (o HlsResponsePtrOutput) FragmentsPerTsSegment() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HlsResponse) *int {
		if v == nil {
			return nil
		}
		return v.FragmentsPerTsSegment
	}).(pulumi.IntPtrOutput)
}

// The IP access control.
type IPAccessControl struct {
	// The IP allow list.
	Allow []IPRange `pulumi:"allow"`
}

// IPAccessControlInput is an input type that accepts IPAccessControlArgs and IPAccessControlOutput values.
// You can construct a concrete instance of `IPAccessControlInput` via:
//
//          IPAccessControlArgs{...}
type IPAccessControlInput interface {
	pulumi.Input

	ToIPAccessControlOutput() IPAccessControlOutput
	ToIPAccessControlOutputWithContext(context.Context) IPAccessControlOutput
}

// The IP access control.
type IPAccessControlArgs struct {
	// The IP allow list.
	Allow IPRangeArrayInput `pulumi:"allow"`
}

func (IPAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAccessControl)(nil)).Elem()
}

func (i IPAccessControlArgs) ToIPAccessControlOutput() IPAccessControlOutput {
	return i.ToIPAccessControlOutputWithContext(context.Background())
}

func (i IPAccessControlArgs) ToIPAccessControlOutputWithContext(ctx context.Context) IPAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAccessControlOutput)
}

func (i IPAccessControlArgs) ToIPAccessControlPtrOutput() IPAccessControlPtrOutput {
	return i.ToIPAccessControlPtrOutputWithContext(context.Background())
}

func (i IPAccessControlArgs) ToIPAccessControlPtrOutputWithContext(ctx context.Context) IPAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAccessControlOutput).ToIPAccessControlPtrOutputWithContext(ctx)
}

// IPAccessControlPtrInput is an input type that accepts IPAccessControlArgs, IPAccessControlPtr and IPAccessControlPtrOutput values.
// You can construct a concrete instance of `IPAccessControlPtrInput` via:
//
//          IPAccessControlArgs{...}
//
//  or:
//
//          nil
type IPAccessControlPtrInput interface {
	pulumi.Input

	ToIPAccessControlPtrOutput() IPAccessControlPtrOutput
	ToIPAccessControlPtrOutputWithContext(context.Context) IPAccessControlPtrOutput
}

type ipaccessControlPtrType IPAccessControlArgs

func IPAccessControlPtr(v *IPAccessControlArgs) IPAccessControlPtrInput {
	return (*ipaccessControlPtrType)(v)
}

func (*ipaccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAccessControl)(nil)).Elem()
}

func (i *ipaccessControlPtrType) ToIPAccessControlPtrOutput() IPAccessControlPtrOutput {
	return i.ToIPAccessControlPtrOutputWithContext(context.Background())
}

func (i *ipaccessControlPtrType) ToIPAccessControlPtrOutputWithContext(ctx context.Context) IPAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAccessControlPtrOutput)
}

// The IP access control.
type IPAccessControlOutput struct{ *pulumi.OutputState }

func (IPAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAccessControl)(nil)).Elem()
}

func (o IPAccessControlOutput) ToIPAccessControlOutput() IPAccessControlOutput {
	return o
}

func (o IPAccessControlOutput) ToIPAccessControlOutputWithContext(ctx context.Context) IPAccessControlOutput {
	return o
}

func (o IPAccessControlOutput) ToIPAccessControlPtrOutput() IPAccessControlPtrOutput {
	return o.ToIPAccessControlPtrOutputWithContext(context.Background())
}

func (o IPAccessControlOutput) ToIPAccessControlPtrOutputWithContext(ctx context.Context) IPAccessControlPtrOutput {
	return o.ApplyT(func(v IPAccessControl) *IPAccessControl {
		return &v
	}).(IPAccessControlPtrOutput)
}

// The IP allow list.
func (o IPAccessControlOutput) Allow() IPRangeArrayOutput {
	return o.ApplyT(func(v IPAccessControl) []IPRange { return v.Allow }).(IPRangeArrayOutput)
}

type IPAccessControlPtrOutput struct{ *pulumi.OutputState }

func (IPAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAccessControl)(nil)).Elem()
}

func (o IPAccessControlPtrOutput) ToIPAccessControlPtrOutput() IPAccessControlPtrOutput {
	return o
}

func (o IPAccessControlPtrOutput) ToIPAccessControlPtrOutputWithContext(ctx context.Context) IPAccessControlPtrOutput {
	return o
}

func (o IPAccessControlPtrOutput) Elem() IPAccessControlOutput {
	return o.ApplyT(func(v *IPAccessControl) IPAccessControl { return *v }).(IPAccessControlOutput)
}

// The IP allow list.
func (o IPAccessControlPtrOutput) Allow() IPRangeArrayOutput {
	return o.ApplyT(func(v *IPAccessControl) []IPRange {
		if v == nil {
			return nil
		}
		return v.Allow
	}).(IPRangeArrayOutput)
}

// The IP access control.
type IPAccessControlResponse struct {
	// The IP allow list.
	Allow []IPRangeResponse `pulumi:"allow"`
}

// IPAccessControlResponseInput is an input type that accepts IPAccessControlResponseArgs and IPAccessControlResponseOutput values.
// You can construct a concrete instance of `IPAccessControlResponseInput` via:
//
//          IPAccessControlResponseArgs{...}
type IPAccessControlResponseInput interface {
	pulumi.Input

	ToIPAccessControlResponseOutput() IPAccessControlResponseOutput
	ToIPAccessControlResponseOutputWithContext(context.Context) IPAccessControlResponseOutput
}

// The IP access control.
type IPAccessControlResponseArgs struct {
	// The IP allow list.
	Allow IPRangeResponseArrayInput `pulumi:"allow"`
}

func (IPAccessControlResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAccessControlResponse)(nil)).Elem()
}

func (i IPAccessControlResponseArgs) ToIPAccessControlResponseOutput() IPAccessControlResponseOutput {
	return i.ToIPAccessControlResponseOutputWithContext(context.Background())
}

func (i IPAccessControlResponseArgs) ToIPAccessControlResponseOutputWithContext(ctx context.Context) IPAccessControlResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAccessControlResponseOutput)
}

func (i IPAccessControlResponseArgs) ToIPAccessControlResponsePtrOutput() IPAccessControlResponsePtrOutput {
	return i.ToIPAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i IPAccessControlResponseArgs) ToIPAccessControlResponsePtrOutputWithContext(ctx context.Context) IPAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAccessControlResponseOutput).ToIPAccessControlResponsePtrOutputWithContext(ctx)
}

// IPAccessControlResponsePtrInput is an input type that accepts IPAccessControlResponseArgs, IPAccessControlResponsePtr and IPAccessControlResponsePtrOutput values.
// You can construct a concrete instance of `IPAccessControlResponsePtrInput` via:
//
//          IPAccessControlResponseArgs{...}
//
//  or:
//
//          nil
type IPAccessControlResponsePtrInput interface {
	pulumi.Input

	ToIPAccessControlResponsePtrOutput() IPAccessControlResponsePtrOutput
	ToIPAccessControlResponsePtrOutputWithContext(context.Context) IPAccessControlResponsePtrOutput
}

type ipaccessControlResponsePtrType IPAccessControlResponseArgs

func IPAccessControlResponsePtr(v *IPAccessControlResponseArgs) IPAccessControlResponsePtrInput {
	return (*ipaccessControlResponsePtrType)(v)
}

func (*ipaccessControlResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAccessControlResponse)(nil)).Elem()
}

func (i *ipaccessControlResponsePtrType) ToIPAccessControlResponsePtrOutput() IPAccessControlResponsePtrOutput {
	return i.ToIPAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i *ipaccessControlResponsePtrType) ToIPAccessControlResponsePtrOutputWithContext(ctx context.Context) IPAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAccessControlResponsePtrOutput)
}

// The IP access control.
type IPAccessControlResponseOutput struct{ *pulumi.OutputState }

func (IPAccessControlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAccessControlResponse)(nil)).Elem()
}

func (o IPAccessControlResponseOutput) ToIPAccessControlResponseOutput() IPAccessControlResponseOutput {
	return o
}

func (o IPAccessControlResponseOutput) ToIPAccessControlResponseOutputWithContext(ctx context.Context) IPAccessControlResponseOutput {
	return o
}

func (o IPAccessControlResponseOutput) ToIPAccessControlResponsePtrOutput() IPAccessControlResponsePtrOutput {
	return o.ToIPAccessControlResponsePtrOutputWithContext(context.Background())
}

func (o IPAccessControlResponseOutput) ToIPAccessControlResponsePtrOutputWithContext(ctx context.Context) IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v IPAccessControlResponse) *IPAccessControlResponse {
		return &v
	}).(IPAccessControlResponsePtrOutput)
}

// The IP allow list.
func (o IPAccessControlResponseOutput) Allow() IPRangeResponseArrayOutput {
	return o.ApplyT(func(v IPAccessControlResponse) []IPRangeResponse { return v.Allow }).(IPRangeResponseArrayOutput)
}

type IPAccessControlResponsePtrOutput struct{ *pulumi.OutputState }

func (IPAccessControlResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAccessControlResponse)(nil)).Elem()
}

func (o IPAccessControlResponsePtrOutput) ToIPAccessControlResponsePtrOutput() IPAccessControlResponsePtrOutput {
	return o
}

func (o IPAccessControlResponsePtrOutput) ToIPAccessControlResponsePtrOutputWithContext(ctx context.Context) IPAccessControlResponsePtrOutput {
	return o
}

func (o IPAccessControlResponsePtrOutput) Elem() IPAccessControlResponseOutput {
	return o.ApplyT(func(v *IPAccessControlResponse) IPAccessControlResponse { return *v }).(IPAccessControlResponseOutput)
}

// The IP allow list.
func (o IPAccessControlResponsePtrOutput) Allow() IPRangeResponseArrayOutput {
	return o.ApplyT(func(v *IPAccessControlResponse) []IPRangeResponse {
		if v == nil {
			return nil
		}
		return v.Allow
	}).(IPRangeResponseArrayOutput)
}

// The IP address range in the CIDR scheme.
type IPRange struct {
	// The IP address.
	Address *string `pulumi:"address"`
	// The friendly name for the IP address range.
	Name *string `pulumi:"name"`
	// The subnet mask prefix length (see CIDR notation).
	SubnetPrefixLength *int `pulumi:"subnetPrefixLength"`
}

// IPRangeInput is an input type that accepts IPRangeArgs and IPRangeOutput values.
// You can construct a concrete instance of `IPRangeInput` via:
//
//          IPRangeArgs{...}
type IPRangeInput interface {
	pulumi.Input

	ToIPRangeOutput() IPRangeOutput
	ToIPRangeOutputWithContext(context.Context) IPRangeOutput
}

// The IP address range in the CIDR scheme.
type IPRangeArgs struct {
	// The IP address.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The friendly name for the IP address range.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The subnet mask prefix length (see CIDR notation).
	SubnetPrefixLength pulumi.IntPtrInput `pulumi:"subnetPrefixLength"`
}

func (IPRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPRange)(nil)).Elem()
}

func (i IPRangeArgs) ToIPRangeOutput() IPRangeOutput {
	return i.ToIPRangeOutputWithContext(context.Background())
}

func (i IPRangeArgs) ToIPRangeOutputWithContext(ctx context.Context) IPRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPRangeOutput)
}

// IPRangeArrayInput is an input type that accepts IPRangeArray and IPRangeArrayOutput values.
// You can construct a concrete instance of `IPRangeArrayInput` via:
//
//          IPRangeArray{ IPRangeArgs{...} }
type IPRangeArrayInput interface {
	pulumi.Input

	ToIPRangeArrayOutput() IPRangeArrayOutput
	ToIPRangeArrayOutputWithContext(context.Context) IPRangeArrayOutput
}

type IPRangeArray []IPRangeInput

func (IPRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPRange)(nil)).Elem()
}

func (i IPRangeArray) ToIPRangeArrayOutput() IPRangeArrayOutput {
	return i.ToIPRangeArrayOutputWithContext(context.Background())
}

func (i IPRangeArray) ToIPRangeArrayOutputWithContext(ctx context.Context) IPRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPRangeArrayOutput)
}

// The IP address range in the CIDR scheme.
type IPRangeOutput struct{ *pulumi.OutputState }

func (IPRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPRange)(nil)).Elem()
}

func (o IPRangeOutput) ToIPRangeOutput() IPRangeOutput {
	return o
}

func (o IPRangeOutput) ToIPRangeOutputWithContext(ctx context.Context) IPRangeOutput {
	return o
}

// The IP address.
func (o IPRangeOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPRange) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The friendly name for the IP address range.
func (o IPRangeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPRange) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The subnet mask prefix length (see CIDR notation).
func (o IPRangeOutput) SubnetPrefixLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IPRange) *int { return v.SubnetPrefixLength }).(pulumi.IntPtrOutput)
}

type IPRangeArrayOutput struct{ *pulumi.OutputState }

func (IPRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPRange)(nil)).Elem()
}

func (o IPRangeArrayOutput) ToIPRangeArrayOutput() IPRangeArrayOutput {
	return o
}

func (o IPRangeArrayOutput) ToIPRangeArrayOutputWithContext(ctx context.Context) IPRangeArrayOutput {
	return o
}

func (o IPRangeArrayOutput) Index(i pulumi.IntInput) IPRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IPRange {
		return vs[0].([]IPRange)[vs[1].(int)]
	}).(IPRangeOutput)
}

// The IP address range in the CIDR scheme.
type IPRangeResponse struct {
	// The IP address.
	Address *string `pulumi:"address"`
	// The friendly name for the IP address range.
	Name *string `pulumi:"name"`
	// The subnet mask prefix length (see CIDR notation).
	SubnetPrefixLength *int `pulumi:"subnetPrefixLength"`
}

// IPRangeResponseInput is an input type that accepts IPRangeResponseArgs and IPRangeResponseOutput values.
// You can construct a concrete instance of `IPRangeResponseInput` via:
//
//          IPRangeResponseArgs{...}
type IPRangeResponseInput interface {
	pulumi.Input

	ToIPRangeResponseOutput() IPRangeResponseOutput
	ToIPRangeResponseOutputWithContext(context.Context) IPRangeResponseOutput
}

// The IP address range in the CIDR scheme.
type IPRangeResponseArgs struct {
	// The IP address.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The friendly name for the IP address range.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The subnet mask prefix length (see CIDR notation).
	SubnetPrefixLength pulumi.IntPtrInput `pulumi:"subnetPrefixLength"`
}

func (IPRangeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPRangeResponse)(nil)).Elem()
}

func (i IPRangeResponseArgs) ToIPRangeResponseOutput() IPRangeResponseOutput {
	return i.ToIPRangeResponseOutputWithContext(context.Background())
}

func (i IPRangeResponseArgs) ToIPRangeResponseOutputWithContext(ctx context.Context) IPRangeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPRangeResponseOutput)
}

// IPRangeResponseArrayInput is an input type that accepts IPRangeResponseArray and IPRangeResponseArrayOutput values.
// You can construct a concrete instance of `IPRangeResponseArrayInput` via:
//
//          IPRangeResponseArray{ IPRangeResponseArgs{...} }
type IPRangeResponseArrayInput interface {
	pulumi.Input

	ToIPRangeResponseArrayOutput() IPRangeResponseArrayOutput
	ToIPRangeResponseArrayOutputWithContext(context.Context) IPRangeResponseArrayOutput
}

type IPRangeResponseArray []IPRangeResponseInput

func (IPRangeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPRangeResponse)(nil)).Elem()
}

func (i IPRangeResponseArray) ToIPRangeResponseArrayOutput() IPRangeResponseArrayOutput {
	return i.ToIPRangeResponseArrayOutputWithContext(context.Background())
}

func (i IPRangeResponseArray) ToIPRangeResponseArrayOutputWithContext(ctx context.Context) IPRangeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPRangeResponseArrayOutput)
}

// The IP address range in the CIDR scheme.
type IPRangeResponseOutput struct{ *pulumi.OutputState }

func (IPRangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPRangeResponse)(nil)).Elem()
}

func (o IPRangeResponseOutput) ToIPRangeResponseOutput() IPRangeResponseOutput {
	return o
}

func (o IPRangeResponseOutput) ToIPRangeResponseOutputWithContext(ctx context.Context) IPRangeResponseOutput {
	return o
}

// The IP address.
func (o IPRangeResponseOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPRangeResponse) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The friendly name for the IP address range.
func (o IPRangeResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPRangeResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The subnet mask prefix length (see CIDR notation).
func (o IPRangeResponseOutput) SubnetPrefixLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IPRangeResponse) *int { return v.SubnetPrefixLength }).(pulumi.IntPtrOutput)
}

type IPRangeResponseArrayOutput struct{ *pulumi.OutputState }

func (IPRangeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPRangeResponse)(nil)).Elem()
}

func (o IPRangeResponseArrayOutput) ToIPRangeResponseArrayOutput() IPRangeResponseArrayOutput {
	return o
}

func (o IPRangeResponseArrayOutput) ToIPRangeResponseArrayOutputWithContext(ctx context.Context) IPRangeResponseArrayOutput {
	return o
}

func (o IPRangeResponseArrayOutput) Index(i pulumi.IntInput) IPRangeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IPRangeResponse {
		return vs[0].([]IPRangeResponse)[vs[1].(int)]
	}).(IPRangeResponseOutput)
}

// Describes the properties for an output image file.
type ImageFormat struct {
	// The pattern of the file names for the generated output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {Bitrate} - The audio/video bitrate. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. Any unsubstituted macros will be collapsed and removed from the filename.
	FilenamePattern string `pulumi:"filenamePattern"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// ImageFormatInput is an input type that accepts ImageFormatArgs and ImageFormatOutput values.
// You can construct a concrete instance of `ImageFormatInput` via:
//
//          ImageFormatArgs{...}
type ImageFormatInput interface {
	pulumi.Input

	ToImageFormatOutput() ImageFormatOutput
	ToImageFormatOutputWithContext(context.Context) ImageFormatOutput
}

// Describes the properties for an output image file.
type ImageFormatArgs struct {
	// The pattern of the file names for the generated output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {Bitrate} - The audio/video bitrate. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. Any unsubstituted macros will be collapsed and removed from the filename.
	FilenamePattern pulumi.StringInput `pulumi:"filenamePattern"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (ImageFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageFormat)(nil)).Elem()
}

func (i ImageFormatArgs) ToImageFormatOutput() ImageFormatOutput {
	return i.ToImageFormatOutputWithContext(context.Background())
}

func (i ImageFormatArgs) ToImageFormatOutputWithContext(ctx context.Context) ImageFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageFormatOutput)
}

// Describes the properties for an output image file.
type ImageFormatOutput struct{ *pulumi.OutputState }

func (ImageFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageFormat)(nil)).Elem()
}

func (o ImageFormatOutput) ToImageFormatOutput() ImageFormatOutput {
	return o
}

func (o ImageFormatOutput) ToImageFormatOutputWithContext(ctx context.Context) ImageFormatOutput {
	return o
}

// The pattern of the file names for the generated output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {Bitrate} - The audio/video bitrate. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. Any unsubstituted macros will be collapsed and removed from the filename.
func (o ImageFormatOutput) FilenamePattern() pulumi.StringOutput {
	return o.ApplyT(func(v ImageFormat) string { return v.FilenamePattern }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o ImageFormatOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageFormat) string { return v.OdataType }).(pulumi.StringOutput)
}

// Describes the properties for an output image file.
type ImageFormatResponse struct {
	// The pattern of the file names for the generated output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {Bitrate} - The audio/video bitrate. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. Any unsubstituted macros will be collapsed and removed from the filename.
	FilenamePattern string `pulumi:"filenamePattern"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// ImageFormatResponseInput is an input type that accepts ImageFormatResponseArgs and ImageFormatResponseOutput values.
// You can construct a concrete instance of `ImageFormatResponseInput` via:
//
//          ImageFormatResponseArgs{...}
type ImageFormatResponseInput interface {
	pulumi.Input

	ToImageFormatResponseOutput() ImageFormatResponseOutput
	ToImageFormatResponseOutputWithContext(context.Context) ImageFormatResponseOutput
}

// Describes the properties for an output image file.
type ImageFormatResponseArgs struct {
	// The pattern of the file names for the generated output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {Bitrate} - The audio/video bitrate. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. Any unsubstituted macros will be collapsed and removed from the filename.
	FilenamePattern pulumi.StringInput `pulumi:"filenamePattern"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (ImageFormatResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageFormatResponse)(nil)).Elem()
}

func (i ImageFormatResponseArgs) ToImageFormatResponseOutput() ImageFormatResponseOutput {
	return i.ToImageFormatResponseOutputWithContext(context.Background())
}

func (i ImageFormatResponseArgs) ToImageFormatResponseOutputWithContext(ctx context.Context) ImageFormatResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageFormatResponseOutput)
}

// Describes the properties for an output image file.
type ImageFormatResponseOutput struct{ *pulumi.OutputState }

func (ImageFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageFormatResponse)(nil)).Elem()
}

func (o ImageFormatResponseOutput) ToImageFormatResponseOutput() ImageFormatResponseOutput {
	return o
}

func (o ImageFormatResponseOutput) ToImageFormatResponseOutputWithContext(ctx context.Context) ImageFormatResponseOutput {
	return o
}

// The pattern of the file names for the generated output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {Bitrate} - The audio/video bitrate. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. Any unsubstituted macros will be collapsed and removed from the filename.
func (o ImageFormatResponseOutput) FilenamePattern() pulumi.StringOutput {
	return o.ApplyT(func(v ImageFormatResponse) string { return v.FilenamePattern }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o ImageFormatResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageFormatResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Details of JobOutput errors.
type JobErrorDetailResponse struct {
	// Code describing the error detail.
	Code string `pulumi:"code"`
	// A human-readable representation of the error.
	Message string `pulumi:"message"`
}

// JobErrorDetailResponseInput is an input type that accepts JobErrorDetailResponseArgs and JobErrorDetailResponseOutput values.
// You can construct a concrete instance of `JobErrorDetailResponseInput` via:
//
//          JobErrorDetailResponseArgs{...}
type JobErrorDetailResponseInput interface {
	pulumi.Input

	ToJobErrorDetailResponseOutput() JobErrorDetailResponseOutput
	ToJobErrorDetailResponseOutputWithContext(context.Context) JobErrorDetailResponseOutput
}

// Details of JobOutput errors.
type JobErrorDetailResponseArgs struct {
	// Code describing the error detail.
	Code pulumi.StringInput `pulumi:"code"`
	// A human-readable representation of the error.
	Message pulumi.StringInput `pulumi:"message"`
}

func (JobErrorDetailResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobErrorDetailResponse)(nil)).Elem()
}

func (i JobErrorDetailResponseArgs) ToJobErrorDetailResponseOutput() JobErrorDetailResponseOutput {
	return i.ToJobErrorDetailResponseOutputWithContext(context.Background())
}

func (i JobErrorDetailResponseArgs) ToJobErrorDetailResponseOutputWithContext(ctx context.Context) JobErrorDetailResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobErrorDetailResponseOutput)
}

// JobErrorDetailResponseArrayInput is an input type that accepts JobErrorDetailResponseArray and JobErrorDetailResponseArrayOutput values.
// You can construct a concrete instance of `JobErrorDetailResponseArrayInput` via:
//
//          JobErrorDetailResponseArray{ JobErrorDetailResponseArgs{...} }
type JobErrorDetailResponseArrayInput interface {
	pulumi.Input

	ToJobErrorDetailResponseArrayOutput() JobErrorDetailResponseArrayOutput
	ToJobErrorDetailResponseArrayOutputWithContext(context.Context) JobErrorDetailResponseArrayOutput
}

type JobErrorDetailResponseArray []JobErrorDetailResponseInput

func (JobErrorDetailResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobErrorDetailResponse)(nil)).Elem()
}

func (i JobErrorDetailResponseArray) ToJobErrorDetailResponseArrayOutput() JobErrorDetailResponseArrayOutput {
	return i.ToJobErrorDetailResponseArrayOutputWithContext(context.Background())
}

func (i JobErrorDetailResponseArray) ToJobErrorDetailResponseArrayOutputWithContext(ctx context.Context) JobErrorDetailResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobErrorDetailResponseArrayOutput)
}

// Details of JobOutput errors.
type JobErrorDetailResponseOutput struct{ *pulumi.OutputState }

func (JobErrorDetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobErrorDetailResponse)(nil)).Elem()
}

func (o JobErrorDetailResponseOutput) ToJobErrorDetailResponseOutput() JobErrorDetailResponseOutput {
	return o
}

func (o JobErrorDetailResponseOutput) ToJobErrorDetailResponseOutputWithContext(ctx context.Context) JobErrorDetailResponseOutput {
	return o
}

// Code describing the error detail.
func (o JobErrorDetailResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v JobErrorDetailResponse) string { return v.Code }).(pulumi.StringOutput)
}

// A human-readable representation of the error.
func (o JobErrorDetailResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v JobErrorDetailResponse) string { return v.Message }).(pulumi.StringOutput)
}

type JobErrorDetailResponseArrayOutput struct{ *pulumi.OutputState }

func (JobErrorDetailResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobErrorDetailResponse)(nil)).Elem()
}

func (o JobErrorDetailResponseArrayOutput) ToJobErrorDetailResponseArrayOutput() JobErrorDetailResponseArrayOutput {
	return o
}

func (o JobErrorDetailResponseArrayOutput) ToJobErrorDetailResponseArrayOutputWithContext(ctx context.Context) JobErrorDetailResponseArrayOutput {
	return o
}

func (o JobErrorDetailResponseArrayOutput) Index(i pulumi.IntInput) JobErrorDetailResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobErrorDetailResponse {
		return vs[0].([]JobErrorDetailResponse)[vs[1].(int)]
	}).(JobErrorDetailResponseOutput)
}

// Details of JobOutput errors.
type JobErrorResponse struct {
	// Helps with categorization of errors.
	Category string `pulumi:"category"`
	// Error code describing the error.
	Code string `pulumi:"code"`
	// An array of details about specific errors that led to this reported error.
	Details []JobErrorDetailResponse `pulumi:"details"`
	// A human-readable language-dependent representation of the error.
	Message string `pulumi:"message"`
	// Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact Azure support via Azure Portal.
	Retry string `pulumi:"retry"`
}

// JobErrorResponseInput is an input type that accepts JobErrorResponseArgs and JobErrorResponseOutput values.
// You can construct a concrete instance of `JobErrorResponseInput` via:
//
//          JobErrorResponseArgs{...}
type JobErrorResponseInput interface {
	pulumi.Input

	ToJobErrorResponseOutput() JobErrorResponseOutput
	ToJobErrorResponseOutputWithContext(context.Context) JobErrorResponseOutput
}

// Details of JobOutput errors.
type JobErrorResponseArgs struct {
	// Helps with categorization of errors.
	Category pulumi.StringInput `pulumi:"category"`
	// Error code describing the error.
	Code pulumi.StringInput `pulumi:"code"`
	// An array of details about specific errors that led to this reported error.
	Details JobErrorDetailResponseArrayInput `pulumi:"details"`
	// A human-readable language-dependent representation of the error.
	Message pulumi.StringInput `pulumi:"message"`
	// Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact Azure support via Azure Portal.
	Retry pulumi.StringInput `pulumi:"retry"`
}

func (JobErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobErrorResponse)(nil)).Elem()
}

func (i JobErrorResponseArgs) ToJobErrorResponseOutput() JobErrorResponseOutput {
	return i.ToJobErrorResponseOutputWithContext(context.Background())
}

func (i JobErrorResponseArgs) ToJobErrorResponseOutputWithContext(ctx context.Context) JobErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobErrorResponseOutput)
}

// Details of JobOutput errors.
type JobErrorResponseOutput struct{ *pulumi.OutputState }

func (JobErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobErrorResponse)(nil)).Elem()
}

func (o JobErrorResponseOutput) ToJobErrorResponseOutput() JobErrorResponseOutput {
	return o
}

func (o JobErrorResponseOutput) ToJobErrorResponseOutputWithContext(ctx context.Context) JobErrorResponseOutput {
	return o
}

// Helps with categorization of errors.
func (o JobErrorResponseOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v JobErrorResponse) string { return v.Category }).(pulumi.StringOutput)
}

// Error code describing the error.
func (o JobErrorResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v JobErrorResponse) string { return v.Code }).(pulumi.StringOutput)
}

// An array of details about specific errors that led to this reported error.
func (o JobErrorResponseOutput) Details() JobErrorDetailResponseArrayOutput {
	return o.ApplyT(func(v JobErrorResponse) []JobErrorDetailResponse { return v.Details }).(JobErrorDetailResponseArrayOutput)
}

// A human-readable language-dependent representation of the error.
func (o JobErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v JobErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact Azure support via Azure Portal.
func (o JobErrorResponseOutput) Retry() pulumi.StringOutput {
	return o.ApplyT(func(v JobErrorResponse) string { return v.Retry }).(pulumi.StringOutput)
}

// Represents input files for a Job.
type JobInputClip struct {
	// Defines a point on the timeline of the input media at which processing will end. Defaults to the end of the input media.
	End interface{} `pulumi:"end"`
	// List of files. Required for JobInputHttp. Maximum of 4000 characters each.
	Files []string `pulumi:"files"`
	// A label that is assigned to a JobInputClip, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'.
	Label *string `pulumi:"label"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// Defines a point on the timeline of the input media at which processing will start. Defaults to the beginning of the input media.
	Start interface{} `pulumi:"start"`
}

// JobInputClipInput is an input type that accepts JobInputClipArgs and JobInputClipOutput values.
// You can construct a concrete instance of `JobInputClipInput` via:
//
//          JobInputClipArgs{...}
type JobInputClipInput interface {
	pulumi.Input

	ToJobInputClipOutput() JobInputClipOutput
	ToJobInputClipOutputWithContext(context.Context) JobInputClipOutput
}

// Represents input files for a Job.
type JobInputClipArgs struct {
	// Defines a point on the timeline of the input media at which processing will end. Defaults to the end of the input media.
	End pulumi.Input `pulumi:"end"`
	// List of files. Required for JobInputHttp. Maximum of 4000 characters each.
	Files pulumi.StringArrayInput `pulumi:"files"`
	// A label that is assigned to a JobInputClip, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// Defines a point on the timeline of the input media at which processing will start. Defaults to the beginning of the input media.
	Start pulumi.Input `pulumi:"start"`
}

func (JobInputClipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobInputClip)(nil)).Elem()
}

func (i JobInputClipArgs) ToJobInputClipOutput() JobInputClipOutput {
	return i.ToJobInputClipOutputWithContext(context.Background())
}

func (i JobInputClipArgs) ToJobInputClipOutputWithContext(ctx context.Context) JobInputClipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobInputClipOutput)
}

// Represents input files for a Job.
type JobInputClipOutput struct{ *pulumi.OutputState }

func (JobInputClipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobInputClip)(nil)).Elem()
}

func (o JobInputClipOutput) ToJobInputClipOutput() JobInputClipOutput {
	return o
}

func (o JobInputClipOutput) ToJobInputClipOutputWithContext(ctx context.Context) JobInputClipOutput {
	return o
}

// Defines a point on the timeline of the input media at which processing will end. Defaults to the end of the input media.
func (o JobInputClipOutput) End() pulumi.AnyOutput {
	return o.ApplyT(func(v JobInputClip) interface{} { return v.End }).(pulumi.AnyOutput)
}

// List of files. Required for JobInputHttp. Maximum of 4000 characters each.
func (o JobInputClipOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobInputClip) []string { return v.Files }).(pulumi.StringArrayOutput)
}

// A label that is assigned to a JobInputClip, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'.
func (o JobInputClipOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobInputClip) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The discriminator for derived types.
func (o JobInputClipOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v JobInputClip) string { return v.OdataType }).(pulumi.StringOutput)
}

// Defines a point on the timeline of the input media at which processing will start. Defaults to the beginning of the input media.
func (o JobInputClipOutput) Start() pulumi.AnyOutput {
	return o.ApplyT(func(v JobInputClip) interface{} { return v.Start }).(pulumi.AnyOutput)
}

// Represents input files for a Job.
type JobInputClipResponse struct {
	// Defines a point on the timeline of the input media at which processing will end. Defaults to the end of the input media.
	End interface{} `pulumi:"end"`
	// List of files. Required for JobInputHttp. Maximum of 4000 characters each.
	Files []string `pulumi:"files"`
	// A label that is assigned to a JobInputClip, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'.
	Label *string `pulumi:"label"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// Defines a point on the timeline of the input media at which processing will start. Defaults to the beginning of the input media.
	Start interface{} `pulumi:"start"`
}

// JobInputClipResponseInput is an input type that accepts JobInputClipResponseArgs and JobInputClipResponseOutput values.
// You can construct a concrete instance of `JobInputClipResponseInput` via:
//
//          JobInputClipResponseArgs{...}
type JobInputClipResponseInput interface {
	pulumi.Input

	ToJobInputClipResponseOutput() JobInputClipResponseOutput
	ToJobInputClipResponseOutputWithContext(context.Context) JobInputClipResponseOutput
}

// Represents input files for a Job.
type JobInputClipResponseArgs struct {
	// Defines a point on the timeline of the input media at which processing will end. Defaults to the end of the input media.
	End pulumi.Input `pulumi:"end"`
	// List of files. Required for JobInputHttp. Maximum of 4000 characters each.
	Files pulumi.StringArrayInput `pulumi:"files"`
	// A label that is assigned to a JobInputClip, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// Defines a point on the timeline of the input media at which processing will start. Defaults to the beginning of the input media.
	Start pulumi.Input `pulumi:"start"`
}

func (JobInputClipResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobInputClipResponse)(nil)).Elem()
}

func (i JobInputClipResponseArgs) ToJobInputClipResponseOutput() JobInputClipResponseOutput {
	return i.ToJobInputClipResponseOutputWithContext(context.Background())
}

func (i JobInputClipResponseArgs) ToJobInputClipResponseOutputWithContext(ctx context.Context) JobInputClipResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobInputClipResponseOutput)
}

// Represents input files for a Job.
type JobInputClipResponseOutput struct{ *pulumi.OutputState }

func (JobInputClipResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobInputClipResponse)(nil)).Elem()
}

func (o JobInputClipResponseOutput) ToJobInputClipResponseOutput() JobInputClipResponseOutput {
	return o
}

func (o JobInputClipResponseOutput) ToJobInputClipResponseOutputWithContext(ctx context.Context) JobInputClipResponseOutput {
	return o
}

// Defines a point on the timeline of the input media at which processing will end. Defaults to the end of the input media.
func (o JobInputClipResponseOutput) End() pulumi.AnyOutput {
	return o.ApplyT(func(v JobInputClipResponse) interface{} { return v.End }).(pulumi.AnyOutput)
}

// List of files. Required for JobInputHttp. Maximum of 4000 characters each.
func (o JobInputClipResponseOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobInputClipResponse) []string { return v.Files }).(pulumi.StringArrayOutput)
}

// A label that is assigned to a JobInputClip, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'.
func (o JobInputClipResponseOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobInputClipResponse) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The discriminator for derived types.
func (o JobInputClipResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v JobInputClipResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Defines a point on the timeline of the input media at which processing will start. Defaults to the beginning of the input media.
func (o JobInputClipResponseOutput) Start() pulumi.AnyOutput {
	return o.ApplyT(func(v JobInputClipResponse) interface{} { return v.Start }).(pulumi.AnyOutput)
}

// Describes a list of inputs to a Job.
type JobInputs struct {
	// List of inputs to a Job.
	Inputs []interface{} `pulumi:"inputs"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// JobInputsInput is an input type that accepts JobInputsArgs and JobInputsOutput values.
// You can construct a concrete instance of `JobInputsInput` via:
//
//          JobInputsArgs{...}
type JobInputsInput interface {
	pulumi.Input

	ToJobInputsOutput() JobInputsOutput
	ToJobInputsOutputWithContext(context.Context) JobInputsOutput
}

// Describes a list of inputs to a Job.
type JobInputsArgs struct {
	// List of inputs to a Job.
	Inputs pulumi.ArrayInput `pulumi:"inputs"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (JobInputsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobInputs)(nil)).Elem()
}

func (i JobInputsArgs) ToJobInputsOutput() JobInputsOutput {
	return i.ToJobInputsOutputWithContext(context.Background())
}

func (i JobInputsArgs) ToJobInputsOutputWithContext(ctx context.Context) JobInputsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobInputsOutput)
}

// Describes a list of inputs to a Job.
type JobInputsOutput struct{ *pulumi.OutputState }

func (JobInputsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobInputs)(nil)).Elem()
}

func (o JobInputsOutput) ToJobInputsOutput() JobInputsOutput {
	return o
}

func (o JobInputsOutput) ToJobInputsOutputWithContext(ctx context.Context) JobInputsOutput {
	return o
}

// List of inputs to a Job.
func (o JobInputsOutput) Inputs() pulumi.ArrayOutput {
	return o.ApplyT(func(v JobInputs) []interface{} { return v.Inputs }).(pulumi.ArrayOutput)
}

// The discriminator for derived types.
func (o JobInputsOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v JobInputs) string { return v.OdataType }).(pulumi.StringOutput)
}

// Describes a list of inputs to a Job.
type JobInputsResponse struct {
	// List of inputs to a Job.
	Inputs []interface{} `pulumi:"inputs"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// JobInputsResponseInput is an input type that accepts JobInputsResponseArgs and JobInputsResponseOutput values.
// You can construct a concrete instance of `JobInputsResponseInput` via:
//
//          JobInputsResponseArgs{...}
type JobInputsResponseInput interface {
	pulumi.Input

	ToJobInputsResponseOutput() JobInputsResponseOutput
	ToJobInputsResponseOutputWithContext(context.Context) JobInputsResponseOutput
}

// Describes a list of inputs to a Job.
type JobInputsResponseArgs struct {
	// List of inputs to a Job.
	Inputs pulumi.ArrayInput `pulumi:"inputs"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (JobInputsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobInputsResponse)(nil)).Elem()
}

func (i JobInputsResponseArgs) ToJobInputsResponseOutput() JobInputsResponseOutput {
	return i.ToJobInputsResponseOutputWithContext(context.Background())
}

func (i JobInputsResponseArgs) ToJobInputsResponseOutputWithContext(ctx context.Context) JobInputsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobInputsResponseOutput)
}

// Describes a list of inputs to a Job.
type JobInputsResponseOutput struct{ *pulumi.OutputState }

func (JobInputsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobInputsResponse)(nil)).Elem()
}

func (o JobInputsResponseOutput) ToJobInputsResponseOutput() JobInputsResponseOutput {
	return o
}

func (o JobInputsResponseOutput) ToJobInputsResponseOutputWithContext(ctx context.Context) JobInputsResponseOutput {
	return o
}

// List of inputs to a Job.
func (o JobInputsResponseOutput) Inputs() pulumi.ArrayOutput {
	return o.ApplyT(func(v JobInputsResponse) []interface{} { return v.Inputs }).(pulumi.ArrayOutput)
}

// The discriminator for derived types.
func (o JobInputsResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v JobInputsResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Represents an Asset used as a JobOutput.
type JobOutputAsset struct {
	// The name of the output Asset.
	AssetName string `pulumi:"assetName"`
	// A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of '{presetName}_{outputIndex}' will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform.
	Label *string `pulumi:"label"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// JobOutputAssetInput is an input type that accepts JobOutputAssetArgs and JobOutputAssetOutput values.
// You can construct a concrete instance of `JobOutputAssetInput` via:
//
//          JobOutputAssetArgs{...}
type JobOutputAssetInput interface {
	pulumi.Input

	ToJobOutputAssetOutput() JobOutputAssetOutput
	ToJobOutputAssetOutputWithContext(context.Context) JobOutputAssetOutput
}

// Represents an Asset used as a JobOutput.
type JobOutputAssetArgs struct {
	// The name of the output Asset.
	AssetName pulumi.StringInput `pulumi:"assetName"`
	// A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of '{presetName}_{outputIndex}' will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (JobOutputAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobOutputAsset)(nil)).Elem()
}

func (i JobOutputAssetArgs) ToJobOutputAssetOutput() JobOutputAssetOutput {
	return i.ToJobOutputAssetOutputWithContext(context.Background())
}

func (i JobOutputAssetArgs) ToJobOutputAssetOutputWithContext(ctx context.Context) JobOutputAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputAssetOutput)
}

// JobOutputAssetArrayInput is an input type that accepts JobOutputAssetArray and JobOutputAssetArrayOutput values.
// You can construct a concrete instance of `JobOutputAssetArrayInput` via:
//
//          JobOutputAssetArray{ JobOutputAssetArgs{...} }
type JobOutputAssetArrayInput interface {
	pulumi.Input

	ToJobOutputAssetArrayOutput() JobOutputAssetArrayOutput
	ToJobOutputAssetArrayOutputWithContext(context.Context) JobOutputAssetArrayOutput
}

type JobOutputAssetArray []JobOutputAssetInput

func (JobOutputAssetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobOutputAsset)(nil)).Elem()
}

func (i JobOutputAssetArray) ToJobOutputAssetArrayOutput() JobOutputAssetArrayOutput {
	return i.ToJobOutputAssetArrayOutputWithContext(context.Background())
}

func (i JobOutputAssetArray) ToJobOutputAssetArrayOutputWithContext(ctx context.Context) JobOutputAssetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputAssetArrayOutput)
}

// Represents an Asset used as a JobOutput.
type JobOutputAssetOutput struct{ *pulumi.OutputState }

func (JobOutputAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobOutputAsset)(nil)).Elem()
}

func (o JobOutputAssetOutput) ToJobOutputAssetOutput() JobOutputAssetOutput {
	return o
}

func (o JobOutputAssetOutput) ToJobOutputAssetOutputWithContext(ctx context.Context) JobOutputAssetOutput {
	return o
}

// The name of the output Asset.
func (o JobOutputAssetOutput) AssetName() pulumi.StringOutput {
	return o.ApplyT(func(v JobOutputAsset) string { return v.AssetName }).(pulumi.StringOutput)
}

// A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of '{presetName}_{outputIndex}' will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform.
func (o JobOutputAssetOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobOutputAsset) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The discriminator for derived types.
func (o JobOutputAssetOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v JobOutputAsset) string { return v.OdataType }).(pulumi.StringOutput)
}

type JobOutputAssetArrayOutput struct{ *pulumi.OutputState }

func (JobOutputAssetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobOutputAsset)(nil)).Elem()
}

func (o JobOutputAssetArrayOutput) ToJobOutputAssetArrayOutput() JobOutputAssetArrayOutput {
	return o
}

func (o JobOutputAssetArrayOutput) ToJobOutputAssetArrayOutputWithContext(ctx context.Context) JobOutputAssetArrayOutput {
	return o
}

func (o JobOutputAssetArrayOutput) Index(i pulumi.IntInput) JobOutputAssetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobOutputAsset {
		return vs[0].([]JobOutputAsset)[vs[1].(int)]
	}).(JobOutputAssetOutput)
}

// Represents an Asset used as a JobOutput.
type JobOutputAssetResponse struct {
	// The name of the output Asset.
	AssetName string `pulumi:"assetName"`
	// The UTC date and time at which this Job Output finished processing.
	EndTime string `pulumi:"endTime"`
	// If the JobOutput is in the Error state, it contains the details of the error.
	Error JobErrorResponse `pulumi:"error"`
	// A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of '{presetName}_{outputIndex}' will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform.
	Label *string `pulumi:"label"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// If the JobOutput is in a Processing state, this contains the Job completion percentage. The value is an estimate and not intended to be used to predict Job completion times. To determine if the JobOutput is complete, use the State property.
	Progress int `pulumi:"progress"`
	// The UTC date and time at which this Job Output began processing.
	StartTime string `pulumi:"startTime"`
	// Describes the state of the JobOutput.
	State string `pulumi:"state"`
}

// JobOutputAssetResponseInput is an input type that accepts JobOutputAssetResponseArgs and JobOutputAssetResponseOutput values.
// You can construct a concrete instance of `JobOutputAssetResponseInput` via:
//
//          JobOutputAssetResponseArgs{...}
type JobOutputAssetResponseInput interface {
	pulumi.Input

	ToJobOutputAssetResponseOutput() JobOutputAssetResponseOutput
	ToJobOutputAssetResponseOutputWithContext(context.Context) JobOutputAssetResponseOutput
}

// Represents an Asset used as a JobOutput.
type JobOutputAssetResponseArgs struct {
	// The name of the output Asset.
	AssetName pulumi.StringInput `pulumi:"assetName"`
	// The UTC date and time at which this Job Output finished processing.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// If the JobOutput is in the Error state, it contains the details of the error.
	Error JobErrorResponseInput `pulumi:"error"`
	// A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of '{presetName}_{outputIndex}' will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// If the JobOutput is in a Processing state, this contains the Job completion percentage. The value is an estimate and not intended to be used to predict Job completion times. To determine if the JobOutput is complete, use the State property.
	Progress pulumi.IntInput `pulumi:"progress"`
	// The UTC date and time at which this Job Output began processing.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// Describes the state of the JobOutput.
	State pulumi.StringInput `pulumi:"state"`
}

func (JobOutputAssetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobOutputAssetResponse)(nil)).Elem()
}

func (i JobOutputAssetResponseArgs) ToJobOutputAssetResponseOutput() JobOutputAssetResponseOutput {
	return i.ToJobOutputAssetResponseOutputWithContext(context.Background())
}

func (i JobOutputAssetResponseArgs) ToJobOutputAssetResponseOutputWithContext(ctx context.Context) JobOutputAssetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputAssetResponseOutput)
}

// JobOutputAssetResponseArrayInput is an input type that accepts JobOutputAssetResponseArray and JobOutputAssetResponseArrayOutput values.
// You can construct a concrete instance of `JobOutputAssetResponseArrayInput` via:
//
//          JobOutputAssetResponseArray{ JobOutputAssetResponseArgs{...} }
type JobOutputAssetResponseArrayInput interface {
	pulumi.Input

	ToJobOutputAssetResponseArrayOutput() JobOutputAssetResponseArrayOutput
	ToJobOutputAssetResponseArrayOutputWithContext(context.Context) JobOutputAssetResponseArrayOutput
}

type JobOutputAssetResponseArray []JobOutputAssetResponseInput

func (JobOutputAssetResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobOutputAssetResponse)(nil)).Elem()
}

func (i JobOutputAssetResponseArray) ToJobOutputAssetResponseArrayOutput() JobOutputAssetResponseArrayOutput {
	return i.ToJobOutputAssetResponseArrayOutputWithContext(context.Background())
}

func (i JobOutputAssetResponseArray) ToJobOutputAssetResponseArrayOutputWithContext(ctx context.Context) JobOutputAssetResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputAssetResponseArrayOutput)
}

// Represents an Asset used as a JobOutput.
type JobOutputAssetResponseOutput struct{ *pulumi.OutputState }

func (JobOutputAssetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobOutputAssetResponse)(nil)).Elem()
}

func (o JobOutputAssetResponseOutput) ToJobOutputAssetResponseOutput() JobOutputAssetResponseOutput {
	return o
}

func (o JobOutputAssetResponseOutput) ToJobOutputAssetResponseOutputWithContext(ctx context.Context) JobOutputAssetResponseOutput {
	return o
}

// The name of the output Asset.
func (o JobOutputAssetResponseOutput) AssetName() pulumi.StringOutput {
	return o.ApplyT(func(v JobOutputAssetResponse) string { return v.AssetName }).(pulumi.StringOutput)
}

// The UTC date and time at which this Job Output finished processing.
func (o JobOutputAssetResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobOutputAssetResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// If the JobOutput is in the Error state, it contains the details of the error.
func (o JobOutputAssetResponseOutput) Error() JobErrorResponseOutput {
	return o.ApplyT(func(v JobOutputAssetResponse) JobErrorResponse { return v.Error }).(JobErrorResponseOutput)
}

// A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of '{presetName}_{outputIndex}' will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform.
func (o JobOutputAssetResponseOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobOutputAssetResponse) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The discriminator for derived types.
func (o JobOutputAssetResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v JobOutputAssetResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// If the JobOutput is in a Processing state, this contains the Job completion percentage. The value is an estimate and not intended to be used to predict Job completion times. To determine if the JobOutput is complete, use the State property.
func (o JobOutputAssetResponseOutput) Progress() pulumi.IntOutput {
	return o.ApplyT(func(v JobOutputAssetResponse) int { return v.Progress }).(pulumi.IntOutput)
}

// The UTC date and time at which this Job Output began processing.
func (o JobOutputAssetResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobOutputAssetResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Describes the state of the JobOutput.
func (o JobOutputAssetResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v JobOutputAssetResponse) string { return v.State }).(pulumi.StringOutput)
}

type JobOutputAssetResponseArrayOutput struct{ *pulumi.OutputState }

func (JobOutputAssetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobOutputAssetResponse)(nil)).Elem()
}

func (o JobOutputAssetResponseArrayOutput) ToJobOutputAssetResponseArrayOutput() JobOutputAssetResponseArrayOutput {
	return o
}

func (o JobOutputAssetResponseArrayOutput) ToJobOutputAssetResponseArrayOutputWithContext(ctx context.Context) JobOutputAssetResponseArrayOutput {
	return o
}

func (o JobOutputAssetResponseArrayOutput) Index(i pulumi.IntInput) JobOutputAssetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobOutputAssetResponse {
		return vs[0].([]JobOutputAssetResponse)[vs[1].(int)]
	}).(JobOutputAssetResponseOutput)
}

type KeyVaultProperties struct {
	// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
	KeyIdentifier *string `pulumi:"keyIdentifier"`
}

// KeyVaultPropertiesInput is an input type that accepts KeyVaultPropertiesArgs and KeyVaultPropertiesOutput values.
// You can construct a concrete instance of `KeyVaultPropertiesInput` via:
//
//          KeyVaultPropertiesArgs{...}
type KeyVaultPropertiesInput interface {
	pulumi.Input

	ToKeyVaultPropertiesOutput() KeyVaultPropertiesOutput
	ToKeyVaultPropertiesOutputWithContext(context.Context) KeyVaultPropertiesOutput
}

type KeyVaultPropertiesArgs struct {
	// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
	KeyIdentifier pulumi.StringPtrInput `pulumi:"keyIdentifier"`
}

func (KeyVaultPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultProperties)(nil)).Elem()
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesOutput() KeyVaultPropertiesOutput {
	return i.ToKeyVaultPropertiesOutputWithContext(context.Background())
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesOutputWithContext(ctx context.Context) KeyVaultPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesOutput)
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return i.ToKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesOutput).ToKeyVaultPropertiesPtrOutputWithContext(ctx)
}

// KeyVaultPropertiesPtrInput is an input type that accepts KeyVaultPropertiesArgs, KeyVaultPropertiesPtr and KeyVaultPropertiesPtrOutput values.
// You can construct a concrete instance of `KeyVaultPropertiesPtrInput` via:
//
//          KeyVaultPropertiesArgs{...}
//
//  or:
//
//          nil
type KeyVaultPropertiesPtrInput interface {
	pulumi.Input

	ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput
	ToKeyVaultPropertiesPtrOutputWithContext(context.Context) KeyVaultPropertiesPtrOutput
}

type keyVaultPropertiesPtrType KeyVaultPropertiesArgs

func KeyVaultPropertiesPtr(v *KeyVaultPropertiesArgs) KeyVaultPropertiesPtrInput {
	return (*keyVaultPropertiesPtrType)(v)
}

func (*keyVaultPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultProperties)(nil)).Elem()
}

func (i *keyVaultPropertiesPtrType) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return i.ToKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (i *keyVaultPropertiesPtrType) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesPtrOutput)
}

type KeyVaultPropertiesOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultProperties)(nil)).Elem()
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesOutput() KeyVaultPropertiesOutput {
	return o
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesOutputWithContext(ctx context.Context) KeyVaultPropertiesOutput {
	return o
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return o.ToKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return o.ApplyT(func(v KeyVaultProperties) *KeyVaultProperties {
		return &v
	}).(KeyVaultPropertiesPtrOutput)
}

// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
func (o KeyVaultPropertiesOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultProperties) *string { return v.KeyIdentifier }).(pulumi.StringPtrOutput)
}

type KeyVaultPropertiesPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultProperties)(nil)).Elem()
}

func (o KeyVaultPropertiesPtrOutput) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return o
}

func (o KeyVaultPropertiesPtrOutput) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return o
}

func (o KeyVaultPropertiesPtrOutput) Elem() KeyVaultPropertiesOutput {
	return o.ApplyT(func(v *KeyVaultProperties) KeyVaultProperties { return *v }).(KeyVaultPropertiesOutput)
}

// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
func (o KeyVaultPropertiesPtrOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultProperties) *string {
		if v == nil {
			return nil
		}
		return v.KeyIdentifier
	}).(pulumi.StringPtrOutput)
}

type KeyVaultPropertiesResponse struct {
	// The current key used to encrypt the Media Services account, including the key version.
	CurrentKeyIdentifier string `pulumi:"currentKeyIdentifier"`
	// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
	KeyIdentifier *string `pulumi:"keyIdentifier"`
}

// KeyVaultPropertiesResponseInput is an input type that accepts KeyVaultPropertiesResponseArgs and KeyVaultPropertiesResponseOutput values.
// You can construct a concrete instance of `KeyVaultPropertiesResponseInput` via:
//
//          KeyVaultPropertiesResponseArgs{...}
type KeyVaultPropertiesResponseInput interface {
	pulumi.Input

	ToKeyVaultPropertiesResponseOutput() KeyVaultPropertiesResponseOutput
	ToKeyVaultPropertiesResponseOutputWithContext(context.Context) KeyVaultPropertiesResponseOutput
}

type KeyVaultPropertiesResponseArgs struct {
	// The current key used to encrypt the Media Services account, including the key version.
	CurrentKeyIdentifier pulumi.StringInput `pulumi:"currentKeyIdentifier"`
	// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
	KeyIdentifier pulumi.StringPtrInput `pulumi:"keyIdentifier"`
}

func (KeyVaultPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultPropertiesResponse)(nil)).Elem()
}

func (i KeyVaultPropertiesResponseArgs) ToKeyVaultPropertiesResponseOutput() KeyVaultPropertiesResponseOutput {
	return i.ToKeyVaultPropertiesResponseOutputWithContext(context.Background())
}

func (i KeyVaultPropertiesResponseArgs) ToKeyVaultPropertiesResponseOutputWithContext(ctx context.Context) KeyVaultPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesResponseOutput)
}

func (i KeyVaultPropertiesResponseArgs) ToKeyVaultPropertiesResponsePtrOutput() KeyVaultPropertiesResponsePtrOutput {
	return i.ToKeyVaultPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i KeyVaultPropertiesResponseArgs) ToKeyVaultPropertiesResponsePtrOutputWithContext(ctx context.Context) KeyVaultPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesResponseOutput).ToKeyVaultPropertiesResponsePtrOutputWithContext(ctx)
}

// KeyVaultPropertiesResponsePtrInput is an input type that accepts KeyVaultPropertiesResponseArgs, KeyVaultPropertiesResponsePtr and KeyVaultPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `KeyVaultPropertiesResponsePtrInput` via:
//
//          KeyVaultPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type KeyVaultPropertiesResponsePtrInput interface {
	pulumi.Input

	ToKeyVaultPropertiesResponsePtrOutput() KeyVaultPropertiesResponsePtrOutput
	ToKeyVaultPropertiesResponsePtrOutputWithContext(context.Context) KeyVaultPropertiesResponsePtrOutput
}

type keyVaultPropertiesResponsePtrType KeyVaultPropertiesResponseArgs

func KeyVaultPropertiesResponsePtr(v *KeyVaultPropertiesResponseArgs) KeyVaultPropertiesResponsePtrInput {
	return (*keyVaultPropertiesResponsePtrType)(v)
}

func (*keyVaultPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultPropertiesResponse)(nil)).Elem()
}

func (i *keyVaultPropertiesResponsePtrType) ToKeyVaultPropertiesResponsePtrOutput() KeyVaultPropertiesResponsePtrOutput {
	return i.ToKeyVaultPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *keyVaultPropertiesResponsePtrType) ToKeyVaultPropertiesResponsePtrOutputWithContext(ctx context.Context) KeyVaultPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesResponsePtrOutput)
}

type KeyVaultPropertiesResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultPropertiesResponse)(nil)).Elem()
}

func (o KeyVaultPropertiesResponseOutput) ToKeyVaultPropertiesResponseOutput() KeyVaultPropertiesResponseOutput {
	return o
}

func (o KeyVaultPropertiesResponseOutput) ToKeyVaultPropertiesResponseOutputWithContext(ctx context.Context) KeyVaultPropertiesResponseOutput {
	return o
}

func (o KeyVaultPropertiesResponseOutput) ToKeyVaultPropertiesResponsePtrOutput() KeyVaultPropertiesResponsePtrOutput {
	return o.ToKeyVaultPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultPropertiesResponseOutput) ToKeyVaultPropertiesResponsePtrOutputWithContext(ctx context.Context) KeyVaultPropertiesResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultPropertiesResponse) *KeyVaultPropertiesResponse {
		return &v
	}).(KeyVaultPropertiesResponsePtrOutput)
}

// The current key used to encrypt the Media Services account, including the key version.
func (o KeyVaultPropertiesResponseOutput) CurrentKeyIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultPropertiesResponse) string { return v.CurrentKeyIdentifier }).(pulumi.StringOutput)
}

// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
func (o KeyVaultPropertiesResponseOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultPropertiesResponse) *string { return v.KeyIdentifier }).(pulumi.StringPtrOutput)
}

type KeyVaultPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultPropertiesResponse)(nil)).Elem()
}

func (o KeyVaultPropertiesResponsePtrOutput) ToKeyVaultPropertiesResponsePtrOutput() KeyVaultPropertiesResponsePtrOutput {
	return o
}

func (o KeyVaultPropertiesResponsePtrOutput) ToKeyVaultPropertiesResponsePtrOutputWithContext(ctx context.Context) KeyVaultPropertiesResponsePtrOutput {
	return o
}

func (o KeyVaultPropertiesResponsePtrOutput) Elem() KeyVaultPropertiesResponseOutput {
	return o.ApplyT(func(v *KeyVaultPropertiesResponse) KeyVaultPropertiesResponse { return *v }).(KeyVaultPropertiesResponseOutput)
}

// The current key used to encrypt the Media Services account, including the key version.
func (o KeyVaultPropertiesResponsePtrOutput) CurrentKeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CurrentKeyIdentifier
	}).(pulumi.StringPtrOutput)
}

// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
func (o KeyVaultPropertiesResponsePtrOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyIdentifier
	}).(pulumi.StringPtrOutput)
}

// Specifies the live event type and optional encoding settings for encoding live events.
type LiveEventEncoding struct {
	// Live event type. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
	EncodingType *string `pulumi:"encodingType"`
	// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).   If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.
	KeyFrameInterval *string `pulumi:"keyFrameInterval"`
	// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
	PresetName *string `pulumi:"presetName"`
	// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
	StretchMode *string `pulumi:"stretchMode"`
}

// LiveEventEncodingInput is an input type that accepts LiveEventEncodingArgs and LiveEventEncodingOutput values.
// You can construct a concrete instance of `LiveEventEncodingInput` via:
//
//          LiveEventEncodingArgs{...}
type LiveEventEncodingInput interface {
	pulumi.Input

	ToLiveEventEncodingOutput() LiveEventEncodingOutput
	ToLiveEventEncodingOutputWithContext(context.Context) LiveEventEncodingOutput
}

// Specifies the live event type and optional encoding settings for encoding live events.
type LiveEventEncodingArgs struct {
	// Live event type. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
	EncodingType pulumi.StringPtrInput `pulumi:"encodingType"`
	// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).   If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.
	KeyFrameInterval pulumi.StringPtrInput `pulumi:"keyFrameInterval"`
	// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
	PresetName pulumi.StringPtrInput `pulumi:"presetName"`
	// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
	StretchMode pulumi.StringPtrInput `pulumi:"stretchMode"`
}

func (LiveEventEncodingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEncoding)(nil)).Elem()
}

func (i LiveEventEncodingArgs) ToLiveEventEncodingOutput() LiveEventEncodingOutput {
	return i.ToLiveEventEncodingOutputWithContext(context.Background())
}

func (i LiveEventEncodingArgs) ToLiveEventEncodingOutputWithContext(ctx context.Context) LiveEventEncodingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEncodingOutput)
}

func (i LiveEventEncodingArgs) ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput {
	return i.ToLiveEventEncodingPtrOutputWithContext(context.Background())
}

func (i LiveEventEncodingArgs) ToLiveEventEncodingPtrOutputWithContext(ctx context.Context) LiveEventEncodingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEncodingOutput).ToLiveEventEncodingPtrOutputWithContext(ctx)
}

// LiveEventEncodingPtrInput is an input type that accepts LiveEventEncodingArgs, LiveEventEncodingPtr and LiveEventEncodingPtrOutput values.
// You can construct a concrete instance of `LiveEventEncodingPtrInput` via:
//
//          LiveEventEncodingArgs{...}
//
//  or:
//
//          nil
type LiveEventEncodingPtrInput interface {
	pulumi.Input

	ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput
	ToLiveEventEncodingPtrOutputWithContext(context.Context) LiveEventEncodingPtrOutput
}

type liveEventEncodingPtrType LiveEventEncodingArgs

func LiveEventEncodingPtr(v *LiveEventEncodingArgs) LiveEventEncodingPtrInput {
	return (*liveEventEncodingPtrType)(v)
}

func (*liveEventEncodingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventEncoding)(nil)).Elem()
}

func (i *liveEventEncodingPtrType) ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput {
	return i.ToLiveEventEncodingPtrOutputWithContext(context.Background())
}

func (i *liveEventEncodingPtrType) ToLiveEventEncodingPtrOutputWithContext(ctx context.Context) LiveEventEncodingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEncodingPtrOutput)
}

// Specifies the live event type and optional encoding settings for encoding live events.
type LiveEventEncodingOutput struct{ *pulumi.OutputState }

func (LiveEventEncodingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEncoding)(nil)).Elem()
}

func (o LiveEventEncodingOutput) ToLiveEventEncodingOutput() LiveEventEncodingOutput {
	return o
}

func (o LiveEventEncodingOutput) ToLiveEventEncodingOutputWithContext(ctx context.Context) LiveEventEncodingOutput {
	return o
}

func (o LiveEventEncodingOutput) ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput {
	return o.ToLiveEventEncodingPtrOutputWithContext(context.Background())
}

func (o LiveEventEncodingOutput) ToLiveEventEncodingPtrOutputWithContext(ctx context.Context) LiveEventEncodingPtrOutput {
	return o.ApplyT(func(v LiveEventEncoding) *LiveEventEncoding {
		return &v
	}).(LiveEventEncodingPtrOutput)
}

// Live event type. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
func (o LiveEventEncodingOutput) EncodingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncoding) *string { return v.EncodingType }).(pulumi.StringPtrOutput)
}

// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).   If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.
func (o LiveEventEncodingOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncoding) *string { return v.KeyFrameInterval }).(pulumi.StringPtrOutput)
}

// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
func (o LiveEventEncodingOutput) PresetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncoding) *string { return v.PresetName }).(pulumi.StringPtrOutput)
}

// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
func (o LiveEventEncodingOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncoding) *string { return v.StretchMode }).(pulumi.StringPtrOutput)
}

type LiveEventEncodingPtrOutput struct{ *pulumi.OutputState }

func (LiveEventEncodingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventEncoding)(nil)).Elem()
}

func (o LiveEventEncodingPtrOutput) ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput {
	return o
}

func (o LiveEventEncodingPtrOutput) ToLiveEventEncodingPtrOutputWithContext(ctx context.Context) LiveEventEncodingPtrOutput {
	return o
}

func (o LiveEventEncodingPtrOutput) Elem() LiveEventEncodingOutput {
	return o.ApplyT(func(v *LiveEventEncoding) LiveEventEncoding { return *v }).(LiveEventEncodingOutput)
}

// Live event type. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
func (o LiveEventEncodingPtrOutput) EncodingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncoding) *string {
		if v == nil {
			return nil
		}
		return v.EncodingType
	}).(pulumi.StringPtrOutput)
}

// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).   If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.
func (o LiveEventEncodingPtrOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncoding) *string {
		if v == nil {
			return nil
		}
		return v.KeyFrameInterval
	}).(pulumi.StringPtrOutput)
}

// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
func (o LiveEventEncodingPtrOutput) PresetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncoding) *string {
		if v == nil {
			return nil
		}
		return v.PresetName
	}).(pulumi.StringPtrOutput)
}

// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
func (o LiveEventEncodingPtrOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncoding) *string {
		if v == nil {
			return nil
		}
		return v.StretchMode
	}).(pulumi.StringPtrOutput)
}

// Specifies the live event type and optional encoding settings for encoding live events.
type LiveEventEncodingResponse struct {
	// Live event type. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
	EncodingType *string `pulumi:"encodingType"`
	// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).   If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.
	KeyFrameInterval *string `pulumi:"keyFrameInterval"`
	// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
	PresetName *string `pulumi:"presetName"`
	// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
	StretchMode *string `pulumi:"stretchMode"`
}

// LiveEventEncodingResponseInput is an input type that accepts LiveEventEncodingResponseArgs and LiveEventEncodingResponseOutput values.
// You can construct a concrete instance of `LiveEventEncodingResponseInput` via:
//
//          LiveEventEncodingResponseArgs{...}
type LiveEventEncodingResponseInput interface {
	pulumi.Input

	ToLiveEventEncodingResponseOutput() LiveEventEncodingResponseOutput
	ToLiveEventEncodingResponseOutputWithContext(context.Context) LiveEventEncodingResponseOutput
}

// Specifies the live event type and optional encoding settings for encoding live events.
type LiveEventEncodingResponseArgs struct {
	// Live event type. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
	EncodingType pulumi.StringPtrInput `pulumi:"encodingType"`
	// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).   If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.
	KeyFrameInterval pulumi.StringPtrInput `pulumi:"keyFrameInterval"`
	// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
	PresetName pulumi.StringPtrInput `pulumi:"presetName"`
	// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
	StretchMode pulumi.StringPtrInput `pulumi:"stretchMode"`
}

func (LiveEventEncodingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEncodingResponse)(nil)).Elem()
}

func (i LiveEventEncodingResponseArgs) ToLiveEventEncodingResponseOutput() LiveEventEncodingResponseOutput {
	return i.ToLiveEventEncodingResponseOutputWithContext(context.Background())
}

func (i LiveEventEncodingResponseArgs) ToLiveEventEncodingResponseOutputWithContext(ctx context.Context) LiveEventEncodingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEncodingResponseOutput)
}

func (i LiveEventEncodingResponseArgs) ToLiveEventEncodingResponsePtrOutput() LiveEventEncodingResponsePtrOutput {
	return i.ToLiveEventEncodingResponsePtrOutputWithContext(context.Background())
}

func (i LiveEventEncodingResponseArgs) ToLiveEventEncodingResponsePtrOutputWithContext(ctx context.Context) LiveEventEncodingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEncodingResponseOutput).ToLiveEventEncodingResponsePtrOutputWithContext(ctx)
}

// LiveEventEncodingResponsePtrInput is an input type that accepts LiveEventEncodingResponseArgs, LiveEventEncodingResponsePtr and LiveEventEncodingResponsePtrOutput values.
// You can construct a concrete instance of `LiveEventEncodingResponsePtrInput` via:
//
//          LiveEventEncodingResponseArgs{...}
//
//  or:
//
//          nil
type LiveEventEncodingResponsePtrInput interface {
	pulumi.Input

	ToLiveEventEncodingResponsePtrOutput() LiveEventEncodingResponsePtrOutput
	ToLiveEventEncodingResponsePtrOutputWithContext(context.Context) LiveEventEncodingResponsePtrOutput
}

type liveEventEncodingResponsePtrType LiveEventEncodingResponseArgs

func LiveEventEncodingResponsePtr(v *LiveEventEncodingResponseArgs) LiveEventEncodingResponsePtrInput {
	return (*liveEventEncodingResponsePtrType)(v)
}

func (*liveEventEncodingResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventEncodingResponse)(nil)).Elem()
}

func (i *liveEventEncodingResponsePtrType) ToLiveEventEncodingResponsePtrOutput() LiveEventEncodingResponsePtrOutput {
	return i.ToLiveEventEncodingResponsePtrOutputWithContext(context.Background())
}

func (i *liveEventEncodingResponsePtrType) ToLiveEventEncodingResponsePtrOutputWithContext(ctx context.Context) LiveEventEncodingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEncodingResponsePtrOutput)
}

// Specifies the live event type and optional encoding settings for encoding live events.
type LiveEventEncodingResponseOutput struct{ *pulumi.OutputState }

func (LiveEventEncodingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEncodingResponse)(nil)).Elem()
}

func (o LiveEventEncodingResponseOutput) ToLiveEventEncodingResponseOutput() LiveEventEncodingResponseOutput {
	return o
}

func (o LiveEventEncodingResponseOutput) ToLiveEventEncodingResponseOutputWithContext(ctx context.Context) LiveEventEncodingResponseOutput {
	return o
}

func (o LiveEventEncodingResponseOutput) ToLiveEventEncodingResponsePtrOutput() LiveEventEncodingResponsePtrOutput {
	return o.ToLiveEventEncodingResponsePtrOutputWithContext(context.Background())
}

func (o LiveEventEncodingResponseOutput) ToLiveEventEncodingResponsePtrOutputWithContext(ctx context.Context) LiveEventEncodingResponsePtrOutput {
	return o.ApplyT(func(v LiveEventEncodingResponse) *LiveEventEncodingResponse {
		return &v
	}).(LiveEventEncodingResponsePtrOutput)
}

// Live event type. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
func (o LiveEventEncodingResponseOutput) EncodingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncodingResponse) *string { return v.EncodingType }).(pulumi.StringPtrOutput)
}

// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).   If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.
func (o LiveEventEncodingResponseOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncodingResponse) *string { return v.KeyFrameInterval }).(pulumi.StringPtrOutput)
}

// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
func (o LiveEventEncodingResponseOutput) PresetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncodingResponse) *string { return v.PresetName }).(pulumi.StringPtrOutput)
}

// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
func (o LiveEventEncodingResponseOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncodingResponse) *string { return v.StretchMode }).(pulumi.StringPtrOutput)
}

type LiveEventEncodingResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventEncodingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventEncodingResponse)(nil)).Elem()
}

func (o LiveEventEncodingResponsePtrOutput) ToLiveEventEncodingResponsePtrOutput() LiveEventEncodingResponsePtrOutput {
	return o
}

func (o LiveEventEncodingResponsePtrOutput) ToLiveEventEncodingResponsePtrOutputWithContext(ctx context.Context) LiveEventEncodingResponsePtrOutput {
	return o
}

func (o LiveEventEncodingResponsePtrOutput) Elem() LiveEventEncodingResponseOutput {
	return o.ApplyT(func(v *LiveEventEncodingResponse) LiveEventEncodingResponse { return *v }).(LiveEventEncodingResponseOutput)
}

// Live event type. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
func (o LiveEventEncodingResponsePtrOutput) EncodingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncodingResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncodingType
	}).(pulumi.StringPtrOutput)
}

// Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).   If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.
func (o LiveEventEncodingResponsePtrOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncodingResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyFrameInterval
	}).(pulumi.StringPtrOutput)
}

// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
func (o LiveEventEncodingResponsePtrOutput) PresetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncodingResponse) *string {
		if v == nil {
			return nil
		}
		return v.PresetName
	}).(pulumi.StringPtrOutput)
}

// Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
func (o LiveEventEncodingResponsePtrOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncodingResponse) *string {
		if v == nil {
			return nil
		}
		return v.StretchMode
	}).(pulumi.StringPtrOutput)
}

// The live event endpoint.
type LiveEventEndpoint struct {
	// The endpoint protocol.
	Protocol *string `pulumi:"protocol"`
	// The endpoint URL.
	Url *string `pulumi:"url"`
}

// LiveEventEndpointInput is an input type that accepts LiveEventEndpointArgs and LiveEventEndpointOutput values.
// You can construct a concrete instance of `LiveEventEndpointInput` via:
//
//          LiveEventEndpointArgs{...}
type LiveEventEndpointInput interface {
	pulumi.Input

	ToLiveEventEndpointOutput() LiveEventEndpointOutput
	ToLiveEventEndpointOutputWithContext(context.Context) LiveEventEndpointOutput
}

// The live event endpoint.
type LiveEventEndpointArgs struct {
	// The endpoint protocol.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// The endpoint URL.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (LiveEventEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEndpoint)(nil)).Elem()
}

func (i LiveEventEndpointArgs) ToLiveEventEndpointOutput() LiveEventEndpointOutput {
	return i.ToLiveEventEndpointOutputWithContext(context.Background())
}

func (i LiveEventEndpointArgs) ToLiveEventEndpointOutputWithContext(ctx context.Context) LiveEventEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEndpointOutput)
}

// LiveEventEndpointArrayInput is an input type that accepts LiveEventEndpointArray and LiveEventEndpointArrayOutput values.
// You can construct a concrete instance of `LiveEventEndpointArrayInput` via:
//
//          LiveEventEndpointArray{ LiveEventEndpointArgs{...} }
type LiveEventEndpointArrayInput interface {
	pulumi.Input

	ToLiveEventEndpointArrayOutput() LiveEventEndpointArrayOutput
	ToLiveEventEndpointArrayOutputWithContext(context.Context) LiveEventEndpointArrayOutput
}

type LiveEventEndpointArray []LiveEventEndpointInput

func (LiveEventEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventEndpoint)(nil)).Elem()
}

func (i LiveEventEndpointArray) ToLiveEventEndpointArrayOutput() LiveEventEndpointArrayOutput {
	return i.ToLiveEventEndpointArrayOutputWithContext(context.Background())
}

func (i LiveEventEndpointArray) ToLiveEventEndpointArrayOutputWithContext(ctx context.Context) LiveEventEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEndpointArrayOutput)
}

// The live event endpoint.
type LiveEventEndpointOutput struct{ *pulumi.OutputState }

func (LiveEventEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEndpoint)(nil)).Elem()
}

func (o LiveEventEndpointOutput) ToLiveEventEndpointOutput() LiveEventEndpointOutput {
	return o
}

func (o LiveEventEndpointOutput) ToLiveEventEndpointOutputWithContext(ctx context.Context) LiveEventEndpointOutput {
	return o
}

// The endpoint protocol.
func (o LiveEventEndpointOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEndpoint) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The endpoint URL.
func (o LiveEventEndpointOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEndpoint) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type LiveEventEndpointArrayOutput struct{ *pulumi.OutputState }

func (LiveEventEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventEndpoint)(nil)).Elem()
}

func (o LiveEventEndpointArrayOutput) ToLiveEventEndpointArrayOutput() LiveEventEndpointArrayOutput {
	return o
}

func (o LiveEventEndpointArrayOutput) ToLiveEventEndpointArrayOutputWithContext(ctx context.Context) LiveEventEndpointArrayOutput {
	return o
}

func (o LiveEventEndpointArrayOutput) Index(i pulumi.IntInput) LiveEventEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventEndpoint {
		return vs[0].([]LiveEventEndpoint)[vs[1].(int)]
	}).(LiveEventEndpointOutput)
}

// The live event endpoint.
type LiveEventEndpointResponse struct {
	// The endpoint protocol.
	Protocol *string `pulumi:"protocol"`
	// The endpoint URL.
	Url *string `pulumi:"url"`
}

// LiveEventEndpointResponseInput is an input type that accepts LiveEventEndpointResponseArgs and LiveEventEndpointResponseOutput values.
// You can construct a concrete instance of `LiveEventEndpointResponseInput` via:
//
//          LiveEventEndpointResponseArgs{...}
type LiveEventEndpointResponseInput interface {
	pulumi.Input

	ToLiveEventEndpointResponseOutput() LiveEventEndpointResponseOutput
	ToLiveEventEndpointResponseOutputWithContext(context.Context) LiveEventEndpointResponseOutput
}

// The live event endpoint.
type LiveEventEndpointResponseArgs struct {
	// The endpoint protocol.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// The endpoint URL.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (LiveEventEndpointResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEndpointResponse)(nil)).Elem()
}

func (i LiveEventEndpointResponseArgs) ToLiveEventEndpointResponseOutput() LiveEventEndpointResponseOutput {
	return i.ToLiveEventEndpointResponseOutputWithContext(context.Background())
}

func (i LiveEventEndpointResponseArgs) ToLiveEventEndpointResponseOutputWithContext(ctx context.Context) LiveEventEndpointResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEndpointResponseOutput)
}

// LiveEventEndpointResponseArrayInput is an input type that accepts LiveEventEndpointResponseArray and LiveEventEndpointResponseArrayOutput values.
// You can construct a concrete instance of `LiveEventEndpointResponseArrayInput` via:
//
//          LiveEventEndpointResponseArray{ LiveEventEndpointResponseArgs{...} }
type LiveEventEndpointResponseArrayInput interface {
	pulumi.Input

	ToLiveEventEndpointResponseArrayOutput() LiveEventEndpointResponseArrayOutput
	ToLiveEventEndpointResponseArrayOutputWithContext(context.Context) LiveEventEndpointResponseArrayOutput
}

type LiveEventEndpointResponseArray []LiveEventEndpointResponseInput

func (LiveEventEndpointResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventEndpointResponse)(nil)).Elem()
}

func (i LiveEventEndpointResponseArray) ToLiveEventEndpointResponseArrayOutput() LiveEventEndpointResponseArrayOutput {
	return i.ToLiveEventEndpointResponseArrayOutputWithContext(context.Background())
}

func (i LiveEventEndpointResponseArray) ToLiveEventEndpointResponseArrayOutputWithContext(ctx context.Context) LiveEventEndpointResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEndpointResponseArrayOutput)
}

// The live event endpoint.
type LiveEventEndpointResponseOutput struct{ *pulumi.OutputState }

func (LiveEventEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEndpointResponse)(nil)).Elem()
}

func (o LiveEventEndpointResponseOutput) ToLiveEventEndpointResponseOutput() LiveEventEndpointResponseOutput {
	return o
}

func (o LiveEventEndpointResponseOutput) ToLiveEventEndpointResponseOutputWithContext(ctx context.Context) LiveEventEndpointResponseOutput {
	return o
}

// The endpoint protocol.
func (o LiveEventEndpointResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEndpointResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The endpoint URL.
func (o LiveEventEndpointResponseOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEndpointResponse) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type LiveEventEndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (LiveEventEndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventEndpointResponse)(nil)).Elem()
}

func (o LiveEventEndpointResponseArrayOutput) ToLiveEventEndpointResponseArrayOutput() LiveEventEndpointResponseArrayOutput {
	return o
}

func (o LiveEventEndpointResponseArrayOutput) ToLiveEventEndpointResponseArrayOutputWithContext(ctx context.Context) LiveEventEndpointResponseArrayOutput {
	return o
}

func (o LiveEventEndpointResponseArrayOutput) Index(i pulumi.IntInput) LiveEventEndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventEndpointResponse {
		return vs[0].([]LiveEventEndpointResponse)[vs[1].(int)]
	}).(LiveEventEndpointResponseOutput)
}

// The live event input.
type LiveEventInput struct {
	// Access control for live event input.
	AccessControl *LiveEventInputAccessControl `pulumi:"accessControl"`
	// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value.
	AccessToken *string `pulumi:"accessToken"`
	// The input endpoints for the live event.
	Endpoints []LiveEventEndpoint `pulumi:"endpoints"`
	// ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events.
	KeyFrameIntervalDuration *string `pulumi:"keyFrameIntervalDuration"`
	// The input protocol for the live event. This is specified at creation time and cannot be updated.
	StreamingProtocol string `pulumi:"streamingProtocol"`
}

// LiveEventInputInput is an input type that accepts LiveEventInputArgs and LiveEventInputOutput values.
// You can construct a concrete instance of `LiveEventInputInput` via:
//
//          LiveEventInputArgs{...}
type LiveEventInputInput interface {
	pulumi.Input

	ToLiveEventInputOutput() LiveEventInputOutput
	ToLiveEventInputOutputWithContext(context.Context) LiveEventInputOutput
}

// The live event input.
type LiveEventInputArgs struct {
	// Access control for live event input.
	AccessControl LiveEventInputAccessControlPtrInput `pulumi:"accessControl"`
	// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value.
	AccessToken pulumi.StringPtrInput `pulumi:"accessToken"`
	// The input endpoints for the live event.
	Endpoints LiveEventEndpointArrayInput `pulumi:"endpoints"`
	// ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events.
	KeyFrameIntervalDuration pulumi.StringPtrInput `pulumi:"keyFrameIntervalDuration"`
	// The input protocol for the live event. This is specified at creation time and cannot be updated.
	StreamingProtocol pulumi.StringInput `pulumi:"streamingProtocol"`
}

func (LiveEventInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInput)(nil)).Elem()
}

func (i LiveEventInputArgs) ToLiveEventInputOutput() LiveEventInputOutput {
	return i.ToLiveEventInputOutputWithContext(context.Background())
}

func (i LiveEventInputArgs) ToLiveEventInputOutputWithContext(ctx context.Context) LiveEventInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputOutput)
}

func (i LiveEventInputArgs) ToLiveEventInputPtrOutput() LiveEventInputPtrOutput {
	return i.ToLiveEventInputPtrOutputWithContext(context.Background())
}

func (i LiveEventInputArgs) ToLiveEventInputPtrOutputWithContext(ctx context.Context) LiveEventInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputOutput).ToLiveEventInputPtrOutputWithContext(ctx)
}

// LiveEventInputPtrInput is an input type that accepts LiveEventInputArgs, LiveEventInputPtr and LiveEventInputPtrOutput values.
// You can construct a concrete instance of `LiveEventInputPtrInput` via:
//
//          LiveEventInputArgs{...}
//
//  or:
//
//          nil
type LiveEventInputPtrInput interface {
	pulumi.Input

	ToLiveEventInputPtrOutput() LiveEventInputPtrOutput
	ToLiveEventInputPtrOutputWithContext(context.Context) LiveEventInputPtrOutput
}

type liveEventInputPtrType LiveEventInputArgs

func LiveEventInputPtr(v *LiveEventInputArgs) LiveEventInputPtrInput {
	return (*liveEventInputPtrType)(v)
}

func (*liveEventInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInput)(nil)).Elem()
}

func (i *liveEventInputPtrType) ToLiveEventInputPtrOutput() LiveEventInputPtrOutput {
	return i.ToLiveEventInputPtrOutputWithContext(context.Background())
}

func (i *liveEventInputPtrType) ToLiveEventInputPtrOutputWithContext(ctx context.Context) LiveEventInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputPtrOutput)
}

// The live event input.
type LiveEventInputOutput struct{ *pulumi.OutputState }

func (LiveEventInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInput)(nil)).Elem()
}

func (o LiveEventInputOutput) ToLiveEventInputOutput() LiveEventInputOutput {
	return o
}

func (o LiveEventInputOutput) ToLiveEventInputOutputWithContext(ctx context.Context) LiveEventInputOutput {
	return o
}

func (o LiveEventInputOutput) ToLiveEventInputPtrOutput() LiveEventInputPtrOutput {
	return o.ToLiveEventInputPtrOutputWithContext(context.Background())
}

func (o LiveEventInputOutput) ToLiveEventInputPtrOutputWithContext(ctx context.Context) LiveEventInputPtrOutput {
	return o.ApplyT(func(v LiveEventInput) *LiveEventInput {
		return &v
	}).(LiveEventInputPtrOutput)
}

// Access control for live event input.
func (o LiveEventInputOutput) AccessControl() LiveEventInputAccessControlPtrOutput {
	return o.ApplyT(func(v LiveEventInput) *LiveEventInputAccessControl { return v.AccessControl }).(LiveEventInputAccessControlPtrOutput)
}

// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value.
func (o LiveEventInputOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInput) *string { return v.AccessToken }).(pulumi.StringPtrOutput)
}

// The input endpoints for the live event.
func (o LiveEventInputOutput) Endpoints() LiveEventEndpointArrayOutput {
	return o.ApplyT(func(v LiveEventInput) []LiveEventEndpoint { return v.Endpoints }).(LiveEventEndpointArrayOutput)
}

// ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events.
func (o LiveEventInputOutput) KeyFrameIntervalDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInput) *string { return v.KeyFrameIntervalDuration }).(pulumi.StringPtrOutput)
}

// The input protocol for the live event. This is specified at creation time and cannot be updated.
func (o LiveEventInputOutput) StreamingProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LiveEventInput) string { return v.StreamingProtocol }).(pulumi.StringOutput)
}

type LiveEventInputPtrOutput struct{ *pulumi.OutputState }

func (LiveEventInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInput)(nil)).Elem()
}

func (o LiveEventInputPtrOutput) ToLiveEventInputPtrOutput() LiveEventInputPtrOutput {
	return o
}

func (o LiveEventInputPtrOutput) ToLiveEventInputPtrOutputWithContext(ctx context.Context) LiveEventInputPtrOutput {
	return o
}

func (o LiveEventInputPtrOutput) Elem() LiveEventInputOutput {
	return o.ApplyT(func(v *LiveEventInput) LiveEventInput { return *v }).(LiveEventInputOutput)
}

// Access control for live event input.
func (o LiveEventInputPtrOutput) AccessControl() LiveEventInputAccessControlPtrOutput {
	return o.ApplyT(func(v *LiveEventInput) *LiveEventInputAccessControl {
		if v == nil {
			return nil
		}
		return v.AccessControl
	}).(LiveEventInputAccessControlPtrOutput)
}

// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value.
func (o LiveEventInputPtrOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventInput) *string {
		if v == nil {
			return nil
		}
		return v.AccessToken
	}).(pulumi.StringPtrOutput)
}

// The input endpoints for the live event.
func (o LiveEventInputPtrOutput) Endpoints() LiveEventEndpointArrayOutput {
	return o.ApplyT(func(v *LiveEventInput) []LiveEventEndpoint {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(LiveEventEndpointArrayOutput)
}

// ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events.
func (o LiveEventInputPtrOutput) KeyFrameIntervalDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventInput) *string {
		if v == nil {
			return nil
		}
		return v.KeyFrameIntervalDuration
	}).(pulumi.StringPtrOutput)
}

// The input protocol for the live event. This is specified at creation time and cannot be updated.
func (o LiveEventInputPtrOutput) StreamingProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventInput) *string {
		if v == nil {
			return nil
		}
		return &v.StreamingProtocol
	}).(pulumi.StringPtrOutput)
}

// The IP access control for live event input.
type LiveEventInputAccessControl struct {
	// The IP access control properties.
	Ip *IPAccessControl `pulumi:"ip"`
}

// LiveEventInputAccessControlInput is an input type that accepts LiveEventInputAccessControlArgs and LiveEventInputAccessControlOutput values.
// You can construct a concrete instance of `LiveEventInputAccessControlInput` via:
//
//          LiveEventInputAccessControlArgs{...}
type LiveEventInputAccessControlInput interface {
	pulumi.Input

	ToLiveEventInputAccessControlOutput() LiveEventInputAccessControlOutput
	ToLiveEventInputAccessControlOutputWithContext(context.Context) LiveEventInputAccessControlOutput
}

// The IP access control for live event input.
type LiveEventInputAccessControlArgs struct {
	// The IP access control properties.
	Ip IPAccessControlPtrInput `pulumi:"ip"`
}

func (LiveEventInputAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputAccessControl)(nil)).Elem()
}

func (i LiveEventInputAccessControlArgs) ToLiveEventInputAccessControlOutput() LiveEventInputAccessControlOutput {
	return i.ToLiveEventInputAccessControlOutputWithContext(context.Background())
}

func (i LiveEventInputAccessControlArgs) ToLiveEventInputAccessControlOutputWithContext(ctx context.Context) LiveEventInputAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputAccessControlOutput)
}

func (i LiveEventInputAccessControlArgs) ToLiveEventInputAccessControlPtrOutput() LiveEventInputAccessControlPtrOutput {
	return i.ToLiveEventInputAccessControlPtrOutputWithContext(context.Background())
}

func (i LiveEventInputAccessControlArgs) ToLiveEventInputAccessControlPtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputAccessControlOutput).ToLiveEventInputAccessControlPtrOutputWithContext(ctx)
}

// LiveEventInputAccessControlPtrInput is an input type that accepts LiveEventInputAccessControlArgs, LiveEventInputAccessControlPtr and LiveEventInputAccessControlPtrOutput values.
// You can construct a concrete instance of `LiveEventInputAccessControlPtrInput` via:
//
//          LiveEventInputAccessControlArgs{...}
//
//  or:
//
//          nil
type LiveEventInputAccessControlPtrInput interface {
	pulumi.Input

	ToLiveEventInputAccessControlPtrOutput() LiveEventInputAccessControlPtrOutput
	ToLiveEventInputAccessControlPtrOutputWithContext(context.Context) LiveEventInputAccessControlPtrOutput
}

type liveEventInputAccessControlPtrType LiveEventInputAccessControlArgs

func LiveEventInputAccessControlPtr(v *LiveEventInputAccessControlArgs) LiveEventInputAccessControlPtrInput {
	return (*liveEventInputAccessControlPtrType)(v)
}

func (*liveEventInputAccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInputAccessControl)(nil)).Elem()
}

func (i *liveEventInputAccessControlPtrType) ToLiveEventInputAccessControlPtrOutput() LiveEventInputAccessControlPtrOutput {
	return i.ToLiveEventInputAccessControlPtrOutputWithContext(context.Background())
}

func (i *liveEventInputAccessControlPtrType) ToLiveEventInputAccessControlPtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputAccessControlPtrOutput)
}

// The IP access control for live event input.
type LiveEventInputAccessControlOutput struct{ *pulumi.OutputState }

func (LiveEventInputAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputAccessControl)(nil)).Elem()
}

func (o LiveEventInputAccessControlOutput) ToLiveEventInputAccessControlOutput() LiveEventInputAccessControlOutput {
	return o
}

func (o LiveEventInputAccessControlOutput) ToLiveEventInputAccessControlOutputWithContext(ctx context.Context) LiveEventInputAccessControlOutput {
	return o
}

func (o LiveEventInputAccessControlOutput) ToLiveEventInputAccessControlPtrOutput() LiveEventInputAccessControlPtrOutput {
	return o.ToLiveEventInputAccessControlPtrOutputWithContext(context.Background())
}

func (o LiveEventInputAccessControlOutput) ToLiveEventInputAccessControlPtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlPtrOutput {
	return o.ApplyT(func(v LiveEventInputAccessControl) *LiveEventInputAccessControl {
		return &v
	}).(LiveEventInputAccessControlPtrOutput)
}

// The IP access control properties.
func (o LiveEventInputAccessControlOutput) Ip() IPAccessControlPtrOutput {
	return o.ApplyT(func(v LiveEventInputAccessControl) *IPAccessControl { return v.Ip }).(IPAccessControlPtrOutput)
}

type LiveEventInputAccessControlPtrOutput struct{ *pulumi.OutputState }

func (LiveEventInputAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInputAccessControl)(nil)).Elem()
}

func (o LiveEventInputAccessControlPtrOutput) ToLiveEventInputAccessControlPtrOutput() LiveEventInputAccessControlPtrOutput {
	return o
}

func (o LiveEventInputAccessControlPtrOutput) ToLiveEventInputAccessControlPtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlPtrOutput {
	return o
}

func (o LiveEventInputAccessControlPtrOutput) Elem() LiveEventInputAccessControlOutput {
	return o.ApplyT(func(v *LiveEventInputAccessControl) LiveEventInputAccessControl { return *v }).(LiveEventInputAccessControlOutput)
}

// The IP access control properties.
func (o LiveEventInputAccessControlPtrOutput) Ip() IPAccessControlPtrOutput {
	return o.ApplyT(func(v *LiveEventInputAccessControl) *IPAccessControl {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(IPAccessControlPtrOutput)
}

// The IP access control for live event input.
type LiveEventInputAccessControlResponse struct {
	// The IP access control properties.
	Ip *IPAccessControlResponse `pulumi:"ip"`
}

// LiveEventInputAccessControlResponseInput is an input type that accepts LiveEventInputAccessControlResponseArgs and LiveEventInputAccessControlResponseOutput values.
// You can construct a concrete instance of `LiveEventInputAccessControlResponseInput` via:
//
//          LiveEventInputAccessControlResponseArgs{...}
type LiveEventInputAccessControlResponseInput interface {
	pulumi.Input

	ToLiveEventInputAccessControlResponseOutput() LiveEventInputAccessControlResponseOutput
	ToLiveEventInputAccessControlResponseOutputWithContext(context.Context) LiveEventInputAccessControlResponseOutput
}

// The IP access control for live event input.
type LiveEventInputAccessControlResponseArgs struct {
	// The IP access control properties.
	Ip IPAccessControlResponsePtrInput `pulumi:"ip"`
}

func (LiveEventInputAccessControlResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputAccessControlResponse)(nil)).Elem()
}

func (i LiveEventInputAccessControlResponseArgs) ToLiveEventInputAccessControlResponseOutput() LiveEventInputAccessControlResponseOutput {
	return i.ToLiveEventInputAccessControlResponseOutputWithContext(context.Background())
}

func (i LiveEventInputAccessControlResponseArgs) ToLiveEventInputAccessControlResponseOutputWithContext(ctx context.Context) LiveEventInputAccessControlResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputAccessControlResponseOutput)
}

func (i LiveEventInputAccessControlResponseArgs) ToLiveEventInputAccessControlResponsePtrOutput() LiveEventInputAccessControlResponsePtrOutput {
	return i.ToLiveEventInputAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i LiveEventInputAccessControlResponseArgs) ToLiveEventInputAccessControlResponsePtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputAccessControlResponseOutput).ToLiveEventInputAccessControlResponsePtrOutputWithContext(ctx)
}

// LiveEventInputAccessControlResponsePtrInput is an input type that accepts LiveEventInputAccessControlResponseArgs, LiveEventInputAccessControlResponsePtr and LiveEventInputAccessControlResponsePtrOutput values.
// You can construct a concrete instance of `LiveEventInputAccessControlResponsePtrInput` via:
//
//          LiveEventInputAccessControlResponseArgs{...}
//
//  or:
//
//          nil
type LiveEventInputAccessControlResponsePtrInput interface {
	pulumi.Input

	ToLiveEventInputAccessControlResponsePtrOutput() LiveEventInputAccessControlResponsePtrOutput
	ToLiveEventInputAccessControlResponsePtrOutputWithContext(context.Context) LiveEventInputAccessControlResponsePtrOutput
}

type liveEventInputAccessControlResponsePtrType LiveEventInputAccessControlResponseArgs

func LiveEventInputAccessControlResponsePtr(v *LiveEventInputAccessControlResponseArgs) LiveEventInputAccessControlResponsePtrInput {
	return (*liveEventInputAccessControlResponsePtrType)(v)
}

func (*liveEventInputAccessControlResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInputAccessControlResponse)(nil)).Elem()
}

func (i *liveEventInputAccessControlResponsePtrType) ToLiveEventInputAccessControlResponsePtrOutput() LiveEventInputAccessControlResponsePtrOutput {
	return i.ToLiveEventInputAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i *liveEventInputAccessControlResponsePtrType) ToLiveEventInputAccessControlResponsePtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputAccessControlResponsePtrOutput)
}

// The IP access control for live event input.
type LiveEventInputAccessControlResponseOutput struct{ *pulumi.OutputState }

func (LiveEventInputAccessControlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputAccessControlResponse)(nil)).Elem()
}

func (o LiveEventInputAccessControlResponseOutput) ToLiveEventInputAccessControlResponseOutput() LiveEventInputAccessControlResponseOutput {
	return o
}

func (o LiveEventInputAccessControlResponseOutput) ToLiveEventInputAccessControlResponseOutputWithContext(ctx context.Context) LiveEventInputAccessControlResponseOutput {
	return o
}

func (o LiveEventInputAccessControlResponseOutput) ToLiveEventInputAccessControlResponsePtrOutput() LiveEventInputAccessControlResponsePtrOutput {
	return o.ToLiveEventInputAccessControlResponsePtrOutputWithContext(context.Background())
}

func (o LiveEventInputAccessControlResponseOutput) ToLiveEventInputAccessControlResponsePtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlResponsePtrOutput {
	return o.ApplyT(func(v LiveEventInputAccessControlResponse) *LiveEventInputAccessControlResponse {
		return &v
	}).(LiveEventInputAccessControlResponsePtrOutput)
}

// The IP access control properties.
func (o LiveEventInputAccessControlResponseOutput) Ip() IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v LiveEventInputAccessControlResponse) *IPAccessControlResponse { return v.Ip }).(IPAccessControlResponsePtrOutput)
}

type LiveEventInputAccessControlResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventInputAccessControlResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInputAccessControlResponse)(nil)).Elem()
}

func (o LiveEventInputAccessControlResponsePtrOutput) ToLiveEventInputAccessControlResponsePtrOutput() LiveEventInputAccessControlResponsePtrOutput {
	return o
}

func (o LiveEventInputAccessControlResponsePtrOutput) ToLiveEventInputAccessControlResponsePtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlResponsePtrOutput {
	return o
}

func (o LiveEventInputAccessControlResponsePtrOutput) Elem() LiveEventInputAccessControlResponseOutput {
	return o.ApplyT(func(v *LiveEventInputAccessControlResponse) LiveEventInputAccessControlResponse { return *v }).(LiveEventInputAccessControlResponseOutput)
}

// The IP access control properties.
func (o LiveEventInputAccessControlResponsePtrOutput) Ip() IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v *LiveEventInputAccessControlResponse) *IPAccessControlResponse {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(IPAccessControlResponsePtrOutput)
}

// The live event input.
type LiveEventInputResponse struct {
	// Access control for live event input.
	AccessControl *LiveEventInputAccessControlResponse `pulumi:"accessControl"`
	// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value.
	AccessToken *string `pulumi:"accessToken"`
	// The input endpoints for the live event.
	Endpoints []LiveEventEndpointResponse `pulumi:"endpoints"`
	// ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events.
	KeyFrameIntervalDuration *string `pulumi:"keyFrameIntervalDuration"`
	// The input protocol for the live event. This is specified at creation time and cannot be updated.
	StreamingProtocol string `pulumi:"streamingProtocol"`
}

// LiveEventInputResponseInput is an input type that accepts LiveEventInputResponseArgs and LiveEventInputResponseOutput values.
// You can construct a concrete instance of `LiveEventInputResponseInput` via:
//
//          LiveEventInputResponseArgs{...}
type LiveEventInputResponseInput interface {
	pulumi.Input

	ToLiveEventInputResponseOutput() LiveEventInputResponseOutput
	ToLiveEventInputResponseOutputWithContext(context.Context) LiveEventInputResponseOutput
}

// The live event input.
type LiveEventInputResponseArgs struct {
	// Access control for live event input.
	AccessControl LiveEventInputAccessControlResponsePtrInput `pulumi:"accessControl"`
	// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value.
	AccessToken pulumi.StringPtrInput `pulumi:"accessToken"`
	// The input endpoints for the live event.
	Endpoints LiveEventEndpointResponseArrayInput `pulumi:"endpoints"`
	// ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events.
	KeyFrameIntervalDuration pulumi.StringPtrInput `pulumi:"keyFrameIntervalDuration"`
	// The input protocol for the live event. This is specified at creation time and cannot be updated.
	StreamingProtocol pulumi.StringInput `pulumi:"streamingProtocol"`
}

func (LiveEventInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputResponse)(nil)).Elem()
}

func (i LiveEventInputResponseArgs) ToLiveEventInputResponseOutput() LiveEventInputResponseOutput {
	return i.ToLiveEventInputResponseOutputWithContext(context.Background())
}

func (i LiveEventInputResponseArgs) ToLiveEventInputResponseOutputWithContext(ctx context.Context) LiveEventInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputResponseOutput)
}

func (i LiveEventInputResponseArgs) ToLiveEventInputResponsePtrOutput() LiveEventInputResponsePtrOutput {
	return i.ToLiveEventInputResponsePtrOutputWithContext(context.Background())
}

func (i LiveEventInputResponseArgs) ToLiveEventInputResponsePtrOutputWithContext(ctx context.Context) LiveEventInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputResponseOutput).ToLiveEventInputResponsePtrOutputWithContext(ctx)
}

// LiveEventInputResponsePtrInput is an input type that accepts LiveEventInputResponseArgs, LiveEventInputResponsePtr and LiveEventInputResponsePtrOutput values.
// You can construct a concrete instance of `LiveEventInputResponsePtrInput` via:
//
//          LiveEventInputResponseArgs{...}
//
//  or:
//
//          nil
type LiveEventInputResponsePtrInput interface {
	pulumi.Input

	ToLiveEventInputResponsePtrOutput() LiveEventInputResponsePtrOutput
	ToLiveEventInputResponsePtrOutputWithContext(context.Context) LiveEventInputResponsePtrOutput
}

type liveEventInputResponsePtrType LiveEventInputResponseArgs

func LiveEventInputResponsePtr(v *LiveEventInputResponseArgs) LiveEventInputResponsePtrInput {
	return (*liveEventInputResponsePtrType)(v)
}

func (*liveEventInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInputResponse)(nil)).Elem()
}

func (i *liveEventInputResponsePtrType) ToLiveEventInputResponsePtrOutput() LiveEventInputResponsePtrOutput {
	return i.ToLiveEventInputResponsePtrOutputWithContext(context.Background())
}

func (i *liveEventInputResponsePtrType) ToLiveEventInputResponsePtrOutputWithContext(ctx context.Context) LiveEventInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputResponsePtrOutput)
}

// The live event input.
type LiveEventInputResponseOutput struct{ *pulumi.OutputState }

func (LiveEventInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputResponse)(nil)).Elem()
}

func (o LiveEventInputResponseOutput) ToLiveEventInputResponseOutput() LiveEventInputResponseOutput {
	return o
}

func (o LiveEventInputResponseOutput) ToLiveEventInputResponseOutputWithContext(ctx context.Context) LiveEventInputResponseOutput {
	return o
}

func (o LiveEventInputResponseOutput) ToLiveEventInputResponsePtrOutput() LiveEventInputResponsePtrOutput {
	return o.ToLiveEventInputResponsePtrOutputWithContext(context.Background())
}

func (o LiveEventInputResponseOutput) ToLiveEventInputResponsePtrOutputWithContext(ctx context.Context) LiveEventInputResponsePtrOutput {
	return o.ApplyT(func(v LiveEventInputResponse) *LiveEventInputResponse {
		return &v
	}).(LiveEventInputResponsePtrOutput)
}

// Access control for live event input.
func (o LiveEventInputResponseOutput) AccessControl() LiveEventInputAccessControlResponsePtrOutput {
	return o.ApplyT(func(v LiveEventInputResponse) *LiveEventInputAccessControlResponse { return v.AccessControl }).(LiveEventInputAccessControlResponsePtrOutput)
}

// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value.
func (o LiveEventInputResponseOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputResponse) *string { return v.AccessToken }).(pulumi.StringPtrOutput)
}

// The input endpoints for the live event.
func (o LiveEventInputResponseOutput) Endpoints() LiveEventEndpointResponseArrayOutput {
	return o.ApplyT(func(v LiveEventInputResponse) []LiveEventEndpointResponse { return v.Endpoints }).(LiveEventEndpointResponseArrayOutput)
}

// ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events.
func (o LiveEventInputResponseOutput) KeyFrameIntervalDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputResponse) *string { return v.KeyFrameIntervalDuration }).(pulumi.StringPtrOutput)
}

// The input protocol for the live event. This is specified at creation time and cannot be updated.
func (o LiveEventInputResponseOutput) StreamingProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LiveEventInputResponse) string { return v.StreamingProtocol }).(pulumi.StringOutput)
}

type LiveEventInputResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInputResponse)(nil)).Elem()
}

func (o LiveEventInputResponsePtrOutput) ToLiveEventInputResponsePtrOutput() LiveEventInputResponsePtrOutput {
	return o
}

func (o LiveEventInputResponsePtrOutput) ToLiveEventInputResponsePtrOutputWithContext(ctx context.Context) LiveEventInputResponsePtrOutput {
	return o
}

func (o LiveEventInputResponsePtrOutput) Elem() LiveEventInputResponseOutput {
	return o.ApplyT(func(v *LiveEventInputResponse) LiveEventInputResponse { return *v }).(LiveEventInputResponseOutput)
}

// Access control for live event input.
func (o LiveEventInputResponsePtrOutput) AccessControl() LiveEventInputAccessControlResponsePtrOutput {
	return o.ApplyT(func(v *LiveEventInputResponse) *LiveEventInputAccessControlResponse {
		if v == nil {
			return nil
		}
		return v.AccessControl
	}).(LiveEventInputAccessControlResponsePtrOutput)
}

// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value.
func (o LiveEventInputResponsePtrOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccessToken
	}).(pulumi.StringPtrOutput)
}

// The input endpoints for the live event.
func (o LiveEventInputResponsePtrOutput) Endpoints() LiveEventEndpointResponseArrayOutput {
	return o.ApplyT(func(v *LiveEventInputResponse) []LiveEventEndpointResponse {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(LiveEventEndpointResponseArrayOutput)
}

// ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events.
func (o LiveEventInputResponsePtrOutput) KeyFrameIntervalDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyFrameIntervalDuration
	}).(pulumi.StringPtrOutput)
}

// The input protocol for the live event. This is specified at creation time and cannot be updated.
func (o LiveEventInputResponsePtrOutput) StreamingProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StreamingProtocol
	}).(pulumi.StringPtrOutput)
}

// A track selection condition. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventInputTrackSelection struct {
	// Comparing operation. This property is reserved for future use, any value set on this property will be ignored.
	Operation *string `pulumi:"operation"`
	// Property name to select. This property is reserved for future use, any value set on this property will be ignored.
	Property *string `pulumi:"property"`
	// Property value to select. This property is reserved for future use, any value set on this property will be ignored.
	Value *string `pulumi:"value"`
}

// LiveEventInputTrackSelectionInput is an input type that accepts LiveEventInputTrackSelectionArgs and LiveEventInputTrackSelectionOutput values.
// You can construct a concrete instance of `LiveEventInputTrackSelectionInput` via:
//
//          LiveEventInputTrackSelectionArgs{...}
type LiveEventInputTrackSelectionInput interface {
	pulumi.Input

	ToLiveEventInputTrackSelectionOutput() LiveEventInputTrackSelectionOutput
	ToLiveEventInputTrackSelectionOutputWithContext(context.Context) LiveEventInputTrackSelectionOutput
}

// A track selection condition. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventInputTrackSelectionArgs struct {
	// Comparing operation. This property is reserved for future use, any value set on this property will be ignored.
	Operation pulumi.StringPtrInput `pulumi:"operation"`
	// Property name to select. This property is reserved for future use, any value set on this property will be ignored.
	Property pulumi.StringPtrInput `pulumi:"property"`
	// Property value to select. This property is reserved for future use, any value set on this property will be ignored.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LiveEventInputTrackSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputTrackSelection)(nil)).Elem()
}

func (i LiveEventInputTrackSelectionArgs) ToLiveEventInputTrackSelectionOutput() LiveEventInputTrackSelectionOutput {
	return i.ToLiveEventInputTrackSelectionOutputWithContext(context.Background())
}

func (i LiveEventInputTrackSelectionArgs) ToLiveEventInputTrackSelectionOutputWithContext(ctx context.Context) LiveEventInputTrackSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputTrackSelectionOutput)
}

// LiveEventInputTrackSelectionArrayInput is an input type that accepts LiveEventInputTrackSelectionArray and LiveEventInputTrackSelectionArrayOutput values.
// You can construct a concrete instance of `LiveEventInputTrackSelectionArrayInput` via:
//
//          LiveEventInputTrackSelectionArray{ LiveEventInputTrackSelectionArgs{...} }
type LiveEventInputTrackSelectionArrayInput interface {
	pulumi.Input

	ToLiveEventInputTrackSelectionArrayOutput() LiveEventInputTrackSelectionArrayOutput
	ToLiveEventInputTrackSelectionArrayOutputWithContext(context.Context) LiveEventInputTrackSelectionArrayOutput
}

type LiveEventInputTrackSelectionArray []LiveEventInputTrackSelectionInput

func (LiveEventInputTrackSelectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventInputTrackSelection)(nil)).Elem()
}

func (i LiveEventInputTrackSelectionArray) ToLiveEventInputTrackSelectionArrayOutput() LiveEventInputTrackSelectionArrayOutput {
	return i.ToLiveEventInputTrackSelectionArrayOutputWithContext(context.Background())
}

func (i LiveEventInputTrackSelectionArray) ToLiveEventInputTrackSelectionArrayOutputWithContext(ctx context.Context) LiveEventInputTrackSelectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputTrackSelectionArrayOutput)
}

// A track selection condition. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventInputTrackSelectionOutput struct{ *pulumi.OutputState }

func (LiveEventInputTrackSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputTrackSelection)(nil)).Elem()
}

func (o LiveEventInputTrackSelectionOutput) ToLiveEventInputTrackSelectionOutput() LiveEventInputTrackSelectionOutput {
	return o
}

func (o LiveEventInputTrackSelectionOutput) ToLiveEventInputTrackSelectionOutputWithContext(ctx context.Context) LiveEventInputTrackSelectionOutput {
	return o
}

// Comparing operation. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventInputTrackSelectionOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputTrackSelection) *string { return v.Operation }).(pulumi.StringPtrOutput)
}

// Property name to select. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventInputTrackSelectionOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputTrackSelection) *string { return v.Property }).(pulumi.StringPtrOutput)
}

// Property value to select. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventInputTrackSelectionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputTrackSelection) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LiveEventInputTrackSelectionArrayOutput struct{ *pulumi.OutputState }

func (LiveEventInputTrackSelectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventInputTrackSelection)(nil)).Elem()
}

func (o LiveEventInputTrackSelectionArrayOutput) ToLiveEventInputTrackSelectionArrayOutput() LiveEventInputTrackSelectionArrayOutput {
	return o
}

func (o LiveEventInputTrackSelectionArrayOutput) ToLiveEventInputTrackSelectionArrayOutputWithContext(ctx context.Context) LiveEventInputTrackSelectionArrayOutput {
	return o
}

func (o LiveEventInputTrackSelectionArrayOutput) Index(i pulumi.IntInput) LiveEventInputTrackSelectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventInputTrackSelection {
		return vs[0].([]LiveEventInputTrackSelection)[vs[1].(int)]
	}).(LiveEventInputTrackSelectionOutput)
}

// A track selection condition. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventInputTrackSelectionResponse struct {
	// Comparing operation. This property is reserved for future use, any value set on this property will be ignored.
	Operation *string `pulumi:"operation"`
	// Property name to select. This property is reserved for future use, any value set on this property will be ignored.
	Property *string `pulumi:"property"`
	// Property value to select. This property is reserved for future use, any value set on this property will be ignored.
	Value *string `pulumi:"value"`
}

// LiveEventInputTrackSelectionResponseInput is an input type that accepts LiveEventInputTrackSelectionResponseArgs and LiveEventInputTrackSelectionResponseOutput values.
// You can construct a concrete instance of `LiveEventInputTrackSelectionResponseInput` via:
//
//          LiveEventInputTrackSelectionResponseArgs{...}
type LiveEventInputTrackSelectionResponseInput interface {
	pulumi.Input

	ToLiveEventInputTrackSelectionResponseOutput() LiveEventInputTrackSelectionResponseOutput
	ToLiveEventInputTrackSelectionResponseOutputWithContext(context.Context) LiveEventInputTrackSelectionResponseOutput
}

// A track selection condition. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventInputTrackSelectionResponseArgs struct {
	// Comparing operation. This property is reserved for future use, any value set on this property will be ignored.
	Operation pulumi.StringPtrInput `pulumi:"operation"`
	// Property name to select. This property is reserved for future use, any value set on this property will be ignored.
	Property pulumi.StringPtrInput `pulumi:"property"`
	// Property value to select. This property is reserved for future use, any value set on this property will be ignored.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LiveEventInputTrackSelectionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputTrackSelectionResponse)(nil)).Elem()
}

func (i LiveEventInputTrackSelectionResponseArgs) ToLiveEventInputTrackSelectionResponseOutput() LiveEventInputTrackSelectionResponseOutput {
	return i.ToLiveEventInputTrackSelectionResponseOutputWithContext(context.Background())
}

func (i LiveEventInputTrackSelectionResponseArgs) ToLiveEventInputTrackSelectionResponseOutputWithContext(ctx context.Context) LiveEventInputTrackSelectionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputTrackSelectionResponseOutput)
}

// LiveEventInputTrackSelectionResponseArrayInput is an input type that accepts LiveEventInputTrackSelectionResponseArray and LiveEventInputTrackSelectionResponseArrayOutput values.
// You can construct a concrete instance of `LiveEventInputTrackSelectionResponseArrayInput` via:
//
//          LiveEventInputTrackSelectionResponseArray{ LiveEventInputTrackSelectionResponseArgs{...} }
type LiveEventInputTrackSelectionResponseArrayInput interface {
	pulumi.Input

	ToLiveEventInputTrackSelectionResponseArrayOutput() LiveEventInputTrackSelectionResponseArrayOutput
	ToLiveEventInputTrackSelectionResponseArrayOutputWithContext(context.Context) LiveEventInputTrackSelectionResponseArrayOutput
}

type LiveEventInputTrackSelectionResponseArray []LiveEventInputTrackSelectionResponseInput

func (LiveEventInputTrackSelectionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventInputTrackSelectionResponse)(nil)).Elem()
}

func (i LiveEventInputTrackSelectionResponseArray) ToLiveEventInputTrackSelectionResponseArrayOutput() LiveEventInputTrackSelectionResponseArrayOutput {
	return i.ToLiveEventInputTrackSelectionResponseArrayOutputWithContext(context.Background())
}

func (i LiveEventInputTrackSelectionResponseArray) ToLiveEventInputTrackSelectionResponseArrayOutputWithContext(ctx context.Context) LiveEventInputTrackSelectionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputTrackSelectionResponseArrayOutput)
}

// A track selection condition. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventInputTrackSelectionResponseOutput struct{ *pulumi.OutputState }

func (LiveEventInputTrackSelectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputTrackSelectionResponse)(nil)).Elem()
}

func (o LiveEventInputTrackSelectionResponseOutput) ToLiveEventInputTrackSelectionResponseOutput() LiveEventInputTrackSelectionResponseOutput {
	return o
}

func (o LiveEventInputTrackSelectionResponseOutput) ToLiveEventInputTrackSelectionResponseOutputWithContext(ctx context.Context) LiveEventInputTrackSelectionResponseOutput {
	return o
}

// Comparing operation. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventInputTrackSelectionResponseOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputTrackSelectionResponse) *string { return v.Operation }).(pulumi.StringPtrOutput)
}

// Property name to select. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventInputTrackSelectionResponseOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputTrackSelectionResponse) *string { return v.Property }).(pulumi.StringPtrOutput)
}

// Property value to select. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventInputTrackSelectionResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputTrackSelectionResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LiveEventInputTrackSelectionResponseArrayOutput struct{ *pulumi.OutputState }

func (LiveEventInputTrackSelectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventInputTrackSelectionResponse)(nil)).Elem()
}

func (o LiveEventInputTrackSelectionResponseArrayOutput) ToLiveEventInputTrackSelectionResponseArrayOutput() LiveEventInputTrackSelectionResponseArrayOutput {
	return o
}

func (o LiveEventInputTrackSelectionResponseArrayOutput) ToLiveEventInputTrackSelectionResponseArrayOutputWithContext(ctx context.Context) LiveEventInputTrackSelectionResponseArrayOutput {
	return o
}

func (o LiveEventInputTrackSelectionResponseArrayOutput) Index(i pulumi.IntInput) LiveEventInputTrackSelectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventInputTrackSelectionResponse {
		return vs[0].([]LiveEventInputTrackSelectionResponse)[vs[1].(int)]
	}).(LiveEventInputTrackSelectionResponseOutput)
}

// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventOutputTranscriptionTrack struct {
	// The output track name. This property is reserved for future use, any value set on this property will be ignored.
	TrackName string `pulumi:"trackName"`
}

// LiveEventOutputTranscriptionTrackInput is an input type that accepts LiveEventOutputTranscriptionTrackArgs and LiveEventOutputTranscriptionTrackOutput values.
// You can construct a concrete instance of `LiveEventOutputTranscriptionTrackInput` via:
//
//          LiveEventOutputTranscriptionTrackArgs{...}
type LiveEventOutputTranscriptionTrackInput interface {
	pulumi.Input

	ToLiveEventOutputTranscriptionTrackOutput() LiveEventOutputTranscriptionTrackOutput
	ToLiveEventOutputTranscriptionTrackOutputWithContext(context.Context) LiveEventOutputTranscriptionTrackOutput
}

// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventOutputTranscriptionTrackArgs struct {
	// The output track name. This property is reserved for future use, any value set on this property will be ignored.
	TrackName pulumi.StringInput `pulumi:"trackName"`
}

func (LiveEventOutputTranscriptionTrackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventOutputTranscriptionTrack)(nil)).Elem()
}

func (i LiveEventOutputTranscriptionTrackArgs) ToLiveEventOutputTranscriptionTrackOutput() LiveEventOutputTranscriptionTrackOutput {
	return i.ToLiveEventOutputTranscriptionTrackOutputWithContext(context.Background())
}

func (i LiveEventOutputTranscriptionTrackArgs) ToLiveEventOutputTranscriptionTrackOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputTranscriptionTrackOutput)
}

func (i LiveEventOutputTranscriptionTrackArgs) ToLiveEventOutputTranscriptionTrackPtrOutput() LiveEventOutputTranscriptionTrackPtrOutput {
	return i.ToLiveEventOutputTranscriptionTrackPtrOutputWithContext(context.Background())
}

func (i LiveEventOutputTranscriptionTrackArgs) ToLiveEventOutputTranscriptionTrackPtrOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputTranscriptionTrackOutput).ToLiveEventOutputTranscriptionTrackPtrOutputWithContext(ctx)
}

// LiveEventOutputTranscriptionTrackPtrInput is an input type that accepts LiveEventOutputTranscriptionTrackArgs, LiveEventOutputTranscriptionTrackPtr and LiveEventOutputTranscriptionTrackPtrOutput values.
// You can construct a concrete instance of `LiveEventOutputTranscriptionTrackPtrInput` via:
//
//          LiveEventOutputTranscriptionTrackArgs{...}
//
//  or:
//
//          nil
type LiveEventOutputTranscriptionTrackPtrInput interface {
	pulumi.Input

	ToLiveEventOutputTranscriptionTrackPtrOutput() LiveEventOutputTranscriptionTrackPtrOutput
	ToLiveEventOutputTranscriptionTrackPtrOutputWithContext(context.Context) LiveEventOutputTranscriptionTrackPtrOutput
}

type liveEventOutputTranscriptionTrackPtrType LiveEventOutputTranscriptionTrackArgs

func LiveEventOutputTranscriptionTrackPtr(v *LiveEventOutputTranscriptionTrackArgs) LiveEventOutputTranscriptionTrackPtrInput {
	return (*liveEventOutputTranscriptionTrackPtrType)(v)
}

func (*liveEventOutputTranscriptionTrackPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventOutputTranscriptionTrack)(nil)).Elem()
}

func (i *liveEventOutputTranscriptionTrackPtrType) ToLiveEventOutputTranscriptionTrackPtrOutput() LiveEventOutputTranscriptionTrackPtrOutput {
	return i.ToLiveEventOutputTranscriptionTrackPtrOutputWithContext(context.Background())
}

func (i *liveEventOutputTranscriptionTrackPtrType) ToLiveEventOutputTranscriptionTrackPtrOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputTranscriptionTrackPtrOutput)
}

// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventOutputTranscriptionTrackOutput struct{ *pulumi.OutputState }

func (LiveEventOutputTranscriptionTrackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventOutputTranscriptionTrack)(nil)).Elem()
}

func (o LiveEventOutputTranscriptionTrackOutput) ToLiveEventOutputTranscriptionTrackOutput() LiveEventOutputTranscriptionTrackOutput {
	return o
}

func (o LiveEventOutputTranscriptionTrackOutput) ToLiveEventOutputTranscriptionTrackOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackOutput {
	return o
}

func (o LiveEventOutputTranscriptionTrackOutput) ToLiveEventOutputTranscriptionTrackPtrOutput() LiveEventOutputTranscriptionTrackPtrOutput {
	return o.ToLiveEventOutputTranscriptionTrackPtrOutputWithContext(context.Background())
}

func (o LiveEventOutputTranscriptionTrackOutput) ToLiveEventOutputTranscriptionTrackPtrOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackPtrOutput {
	return o.ApplyT(func(v LiveEventOutputTranscriptionTrack) *LiveEventOutputTranscriptionTrack {
		return &v
	}).(LiveEventOutputTranscriptionTrackPtrOutput)
}

// The output track name. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventOutputTranscriptionTrackOutput) TrackName() pulumi.StringOutput {
	return o.ApplyT(func(v LiveEventOutputTranscriptionTrack) string { return v.TrackName }).(pulumi.StringOutput)
}

type LiveEventOutputTranscriptionTrackPtrOutput struct{ *pulumi.OutputState }

func (LiveEventOutputTranscriptionTrackPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventOutputTranscriptionTrack)(nil)).Elem()
}

func (o LiveEventOutputTranscriptionTrackPtrOutput) ToLiveEventOutputTranscriptionTrackPtrOutput() LiveEventOutputTranscriptionTrackPtrOutput {
	return o
}

func (o LiveEventOutputTranscriptionTrackPtrOutput) ToLiveEventOutputTranscriptionTrackPtrOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackPtrOutput {
	return o
}

func (o LiveEventOutputTranscriptionTrackPtrOutput) Elem() LiveEventOutputTranscriptionTrackOutput {
	return o.ApplyT(func(v *LiveEventOutputTranscriptionTrack) LiveEventOutputTranscriptionTrack { return *v }).(LiveEventOutputTranscriptionTrackOutput)
}

// The output track name. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventOutputTranscriptionTrackPtrOutput) TrackName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventOutputTranscriptionTrack) *string {
		if v == nil {
			return nil
		}
		return &v.TrackName
	}).(pulumi.StringPtrOutput)
}

// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventOutputTranscriptionTrackResponse struct {
	// The output track name. This property is reserved for future use, any value set on this property will be ignored.
	TrackName string `pulumi:"trackName"`
}

// LiveEventOutputTranscriptionTrackResponseInput is an input type that accepts LiveEventOutputTranscriptionTrackResponseArgs and LiveEventOutputTranscriptionTrackResponseOutput values.
// You can construct a concrete instance of `LiveEventOutputTranscriptionTrackResponseInput` via:
//
//          LiveEventOutputTranscriptionTrackResponseArgs{...}
type LiveEventOutputTranscriptionTrackResponseInput interface {
	pulumi.Input

	ToLiveEventOutputTranscriptionTrackResponseOutput() LiveEventOutputTranscriptionTrackResponseOutput
	ToLiveEventOutputTranscriptionTrackResponseOutputWithContext(context.Context) LiveEventOutputTranscriptionTrackResponseOutput
}

// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventOutputTranscriptionTrackResponseArgs struct {
	// The output track name. This property is reserved for future use, any value set on this property will be ignored.
	TrackName pulumi.StringInput `pulumi:"trackName"`
}

func (LiveEventOutputTranscriptionTrackResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventOutputTranscriptionTrackResponse)(nil)).Elem()
}

func (i LiveEventOutputTranscriptionTrackResponseArgs) ToLiveEventOutputTranscriptionTrackResponseOutput() LiveEventOutputTranscriptionTrackResponseOutput {
	return i.ToLiveEventOutputTranscriptionTrackResponseOutputWithContext(context.Background())
}

func (i LiveEventOutputTranscriptionTrackResponseArgs) ToLiveEventOutputTranscriptionTrackResponseOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputTranscriptionTrackResponseOutput)
}

func (i LiveEventOutputTranscriptionTrackResponseArgs) ToLiveEventOutputTranscriptionTrackResponsePtrOutput() LiveEventOutputTranscriptionTrackResponsePtrOutput {
	return i.ToLiveEventOutputTranscriptionTrackResponsePtrOutputWithContext(context.Background())
}

func (i LiveEventOutputTranscriptionTrackResponseArgs) ToLiveEventOutputTranscriptionTrackResponsePtrOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputTranscriptionTrackResponseOutput).ToLiveEventOutputTranscriptionTrackResponsePtrOutputWithContext(ctx)
}

// LiveEventOutputTranscriptionTrackResponsePtrInput is an input type that accepts LiveEventOutputTranscriptionTrackResponseArgs, LiveEventOutputTranscriptionTrackResponsePtr and LiveEventOutputTranscriptionTrackResponsePtrOutput values.
// You can construct a concrete instance of `LiveEventOutputTranscriptionTrackResponsePtrInput` via:
//
//          LiveEventOutputTranscriptionTrackResponseArgs{...}
//
//  or:
//
//          nil
type LiveEventOutputTranscriptionTrackResponsePtrInput interface {
	pulumi.Input

	ToLiveEventOutputTranscriptionTrackResponsePtrOutput() LiveEventOutputTranscriptionTrackResponsePtrOutput
	ToLiveEventOutputTranscriptionTrackResponsePtrOutputWithContext(context.Context) LiveEventOutputTranscriptionTrackResponsePtrOutput
}

type liveEventOutputTranscriptionTrackResponsePtrType LiveEventOutputTranscriptionTrackResponseArgs

func LiveEventOutputTranscriptionTrackResponsePtr(v *LiveEventOutputTranscriptionTrackResponseArgs) LiveEventOutputTranscriptionTrackResponsePtrInput {
	return (*liveEventOutputTranscriptionTrackResponsePtrType)(v)
}

func (*liveEventOutputTranscriptionTrackResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventOutputTranscriptionTrackResponse)(nil)).Elem()
}

func (i *liveEventOutputTranscriptionTrackResponsePtrType) ToLiveEventOutputTranscriptionTrackResponsePtrOutput() LiveEventOutputTranscriptionTrackResponsePtrOutput {
	return i.ToLiveEventOutputTranscriptionTrackResponsePtrOutputWithContext(context.Background())
}

func (i *liveEventOutputTranscriptionTrackResponsePtrType) ToLiveEventOutputTranscriptionTrackResponsePtrOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventOutputTranscriptionTrackResponsePtrOutput)
}

// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventOutputTranscriptionTrackResponseOutput struct{ *pulumi.OutputState }

func (LiveEventOutputTranscriptionTrackResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventOutputTranscriptionTrackResponse)(nil)).Elem()
}

func (o LiveEventOutputTranscriptionTrackResponseOutput) ToLiveEventOutputTranscriptionTrackResponseOutput() LiveEventOutputTranscriptionTrackResponseOutput {
	return o
}

func (o LiveEventOutputTranscriptionTrackResponseOutput) ToLiveEventOutputTranscriptionTrackResponseOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackResponseOutput {
	return o
}

func (o LiveEventOutputTranscriptionTrackResponseOutput) ToLiveEventOutputTranscriptionTrackResponsePtrOutput() LiveEventOutputTranscriptionTrackResponsePtrOutput {
	return o.ToLiveEventOutputTranscriptionTrackResponsePtrOutputWithContext(context.Background())
}

func (o LiveEventOutputTranscriptionTrackResponseOutput) ToLiveEventOutputTranscriptionTrackResponsePtrOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackResponsePtrOutput {
	return o.ApplyT(func(v LiveEventOutputTranscriptionTrackResponse) *LiveEventOutputTranscriptionTrackResponse {
		return &v
	}).(LiveEventOutputTranscriptionTrackResponsePtrOutput)
}

// The output track name. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventOutputTranscriptionTrackResponseOutput) TrackName() pulumi.StringOutput {
	return o.ApplyT(func(v LiveEventOutputTranscriptionTrackResponse) string { return v.TrackName }).(pulumi.StringOutput)
}

type LiveEventOutputTranscriptionTrackResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventOutputTranscriptionTrackResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventOutputTranscriptionTrackResponse)(nil)).Elem()
}

func (o LiveEventOutputTranscriptionTrackResponsePtrOutput) ToLiveEventOutputTranscriptionTrackResponsePtrOutput() LiveEventOutputTranscriptionTrackResponsePtrOutput {
	return o
}

func (o LiveEventOutputTranscriptionTrackResponsePtrOutput) ToLiveEventOutputTranscriptionTrackResponsePtrOutputWithContext(ctx context.Context) LiveEventOutputTranscriptionTrackResponsePtrOutput {
	return o
}

func (o LiveEventOutputTranscriptionTrackResponsePtrOutput) Elem() LiveEventOutputTranscriptionTrackResponseOutput {
	return o.ApplyT(func(v *LiveEventOutputTranscriptionTrackResponse) LiveEventOutputTranscriptionTrackResponse {
		return *v
	}).(LiveEventOutputTranscriptionTrackResponseOutput)
}

// The output track name. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventOutputTranscriptionTrackResponsePtrOutput) TrackName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventOutputTranscriptionTrackResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TrackName
	}).(pulumi.StringPtrOutput)
}

// Live event preview settings.
type LiveEventPreview struct {
	// The access control for live event preview.
	AccessControl *LiveEventPreviewAccessControl `pulumi:"accessControl"`
	// An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
	AlternativeMediaId *string `pulumi:"alternativeMediaId"`
	// The endpoints for preview. Do not share the preview URL with the live event audience.
	Endpoints []LiveEventEndpoint `pulumi:"endpoints"`
	// The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
	PreviewLocator *string `pulumi:"previewLocator"`
	// The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
	StreamingPolicyName *string `pulumi:"streamingPolicyName"`
}

// LiveEventPreviewInput is an input type that accepts LiveEventPreviewArgs and LiveEventPreviewOutput values.
// You can construct a concrete instance of `LiveEventPreviewInput` via:
//
//          LiveEventPreviewArgs{...}
type LiveEventPreviewInput interface {
	pulumi.Input

	ToLiveEventPreviewOutput() LiveEventPreviewOutput
	ToLiveEventPreviewOutputWithContext(context.Context) LiveEventPreviewOutput
}

// Live event preview settings.
type LiveEventPreviewArgs struct {
	// The access control for live event preview.
	AccessControl LiveEventPreviewAccessControlPtrInput `pulumi:"accessControl"`
	// An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
	AlternativeMediaId pulumi.StringPtrInput `pulumi:"alternativeMediaId"`
	// The endpoints for preview. Do not share the preview URL with the live event audience.
	Endpoints LiveEventEndpointArrayInput `pulumi:"endpoints"`
	// The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
	PreviewLocator pulumi.StringPtrInput `pulumi:"previewLocator"`
	// The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
	StreamingPolicyName pulumi.StringPtrInput `pulumi:"streamingPolicyName"`
}

func (LiveEventPreviewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreview)(nil)).Elem()
}

func (i LiveEventPreviewArgs) ToLiveEventPreviewOutput() LiveEventPreviewOutput {
	return i.ToLiveEventPreviewOutputWithContext(context.Background())
}

func (i LiveEventPreviewArgs) ToLiveEventPreviewOutputWithContext(ctx context.Context) LiveEventPreviewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewOutput)
}

func (i LiveEventPreviewArgs) ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput {
	return i.ToLiveEventPreviewPtrOutputWithContext(context.Background())
}

func (i LiveEventPreviewArgs) ToLiveEventPreviewPtrOutputWithContext(ctx context.Context) LiveEventPreviewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewOutput).ToLiveEventPreviewPtrOutputWithContext(ctx)
}

// LiveEventPreviewPtrInput is an input type that accepts LiveEventPreviewArgs, LiveEventPreviewPtr and LiveEventPreviewPtrOutput values.
// You can construct a concrete instance of `LiveEventPreviewPtrInput` via:
//
//          LiveEventPreviewArgs{...}
//
//  or:
//
//          nil
type LiveEventPreviewPtrInput interface {
	pulumi.Input

	ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput
	ToLiveEventPreviewPtrOutputWithContext(context.Context) LiveEventPreviewPtrOutput
}

type liveEventPreviewPtrType LiveEventPreviewArgs

func LiveEventPreviewPtr(v *LiveEventPreviewArgs) LiveEventPreviewPtrInput {
	return (*liveEventPreviewPtrType)(v)
}

func (*liveEventPreviewPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreview)(nil)).Elem()
}

func (i *liveEventPreviewPtrType) ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput {
	return i.ToLiveEventPreviewPtrOutputWithContext(context.Background())
}

func (i *liveEventPreviewPtrType) ToLiveEventPreviewPtrOutputWithContext(ctx context.Context) LiveEventPreviewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewPtrOutput)
}

// Live event preview settings.
type LiveEventPreviewOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreview)(nil)).Elem()
}

func (o LiveEventPreviewOutput) ToLiveEventPreviewOutput() LiveEventPreviewOutput {
	return o
}

func (o LiveEventPreviewOutput) ToLiveEventPreviewOutputWithContext(ctx context.Context) LiveEventPreviewOutput {
	return o
}

func (o LiveEventPreviewOutput) ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput {
	return o.ToLiveEventPreviewPtrOutputWithContext(context.Background())
}

func (o LiveEventPreviewOutput) ToLiveEventPreviewPtrOutputWithContext(ctx context.Context) LiveEventPreviewPtrOutput {
	return o.ApplyT(func(v LiveEventPreview) *LiveEventPreview {
		return &v
	}).(LiveEventPreviewPtrOutput)
}

// The access control for live event preview.
func (o LiveEventPreviewOutput) AccessControl() LiveEventPreviewAccessControlPtrOutput {
	return o.ApplyT(func(v LiveEventPreview) *LiveEventPreviewAccessControl { return v.AccessControl }).(LiveEventPreviewAccessControlPtrOutput)
}

// An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
func (o LiveEventPreviewOutput) AlternativeMediaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreview) *string { return v.AlternativeMediaId }).(pulumi.StringPtrOutput)
}

// The endpoints for preview. Do not share the preview URL with the live event audience.
func (o LiveEventPreviewOutput) Endpoints() LiveEventEndpointArrayOutput {
	return o.ApplyT(func(v LiveEventPreview) []LiveEventEndpoint { return v.Endpoints }).(LiveEventEndpointArrayOutput)
}

// The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
func (o LiveEventPreviewOutput) PreviewLocator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreview) *string { return v.PreviewLocator }).(pulumi.StringPtrOutput)
}

// The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
func (o LiveEventPreviewOutput) StreamingPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreview) *string { return v.StreamingPolicyName }).(pulumi.StringPtrOutput)
}

type LiveEventPreviewPtrOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreview)(nil)).Elem()
}

func (o LiveEventPreviewPtrOutput) ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput {
	return o
}

func (o LiveEventPreviewPtrOutput) ToLiveEventPreviewPtrOutputWithContext(ctx context.Context) LiveEventPreviewPtrOutput {
	return o
}

func (o LiveEventPreviewPtrOutput) Elem() LiveEventPreviewOutput {
	return o.ApplyT(func(v *LiveEventPreview) LiveEventPreview { return *v }).(LiveEventPreviewOutput)
}

// The access control for live event preview.
func (o LiveEventPreviewPtrOutput) AccessControl() LiveEventPreviewAccessControlPtrOutput {
	return o.ApplyT(func(v *LiveEventPreview) *LiveEventPreviewAccessControl {
		if v == nil {
			return nil
		}
		return v.AccessControl
	}).(LiveEventPreviewAccessControlPtrOutput)
}

// An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
func (o LiveEventPreviewPtrOutput) AlternativeMediaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreview) *string {
		if v == nil {
			return nil
		}
		return v.AlternativeMediaId
	}).(pulumi.StringPtrOutput)
}

// The endpoints for preview. Do not share the preview URL with the live event audience.
func (o LiveEventPreviewPtrOutput) Endpoints() LiveEventEndpointArrayOutput {
	return o.ApplyT(func(v *LiveEventPreview) []LiveEventEndpoint {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(LiveEventEndpointArrayOutput)
}

// The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
func (o LiveEventPreviewPtrOutput) PreviewLocator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreview) *string {
		if v == nil {
			return nil
		}
		return v.PreviewLocator
	}).(pulumi.StringPtrOutput)
}

// The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
func (o LiveEventPreviewPtrOutput) StreamingPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreview) *string {
		if v == nil {
			return nil
		}
		return v.StreamingPolicyName
	}).(pulumi.StringPtrOutput)
}

// The IP access control for the live event preview endpoint.
type LiveEventPreviewAccessControl struct {
	// The IP access control properties.
	Ip *IPAccessControl `pulumi:"ip"`
}

// LiveEventPreviewAccessControlInput is an input type that accepts LiveEventPreviewAccessControlArgs and LiveEventPreviewAccessControlOutput values.
// You can construct a concrete instance of `LiveEventPreviewAccessControlInput` via:
//
//          LiveEventPreviewAccessControlArgs{...}
type LiveEventPreviewAccessControlInput interface {
	pulumi.Input

	ToLiveEventPreviewAccessControlOutput() LiveEventPreviewAccessControlOutput
	ToLiveEventPreviewAccessControlOutputWithContext(context.Context) LiveEventPreviewAccessControlOutput
}

// The IP access control for the live event preview endpoint.
type LiveEventPreviewAccessControlArgs struct {
	// The IP access control properties.
	Ip IPAccessControlPtrInput `pulumi:"ip"`
}

func (LiveEventPreviewAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewAccessControl)(nil)).Elem()
}

func (i LiveEventPreviewAccessControlArgs) ToLiveEventPreviewAccessControlOutput() LiveEventPreviewAccessControlOutput {
	return i.ToLiveEventPreviewAccessControlOutputWithContext(context.Background())
}

func (i LiveEventPreviewAccessControlArgs) ToLiveEventPreviewAccessControlOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewAccessControlOutput)
}

func (i LiveEventPreviewAccessControlArgs) ToLiveEventPreviewAccessControlPtrOutput() LiveEventPreviewAccessControlPtrOutput {
	return i.ToLiveEventPreviewAccessControlPtrOutputWithContext(context.Background())
}

func (i LiveEventPreviewAccessControlArgs) ToLiveEventPreviewAccessControlPtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewAccessControlOutput).ToLiveEventPreviewAccessControlPtrOutputWithContext(ctx)
}

// LiveEventPreviewAccessControlPtrInput is an input type that accepts LiveEventPreviewAccessControlArgs, LiveEventPreviewAccessControlPtr and LiveEventPreviewAccessControlPtrOutput values.
// You can construct a concrete instance of `LiveEventPreviewAccessControlPtrInput` via:
//
//          LiveEventPreviewAccessControlArgs{...}
//
//  or:
//
//          nil
type LiveEventPreviewAccessControlPtrInput interface {
	pulumi.Input

	ToLiveEventPreviewAccessControlPtrOutput() LiveEventPreviewAccessControlPtrOutput
	ToLiveEventPreviewAccessControlPtrOutputWithContext(context.Context) LiveEventPreviewAccessControlPtrOutput
}

type liveEventPreviewAccessControlPtrType LiveEventPreviewAccessControlArgs

func LiveEventPreviewAccessControlPtr(v *LiveEventPreviewAccessControlArgs) LiveEventPreviewAccessControlPtrInput {
	return (*liveEventPreviewAccessControlPtrType)(v)
}

func (*liveEventPreviewAccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreviewAccessControl)(nil)).Elem()
}

func (i *liveEventPreviewAccessControlPtrType) ToLiveEventPreviewAccessControlPtrOutput() LiveEventPreviewAccessControlPtrOutput {
	return i.ToLiveEventPreviewAccessControlPtrOutputWithContext(context.Background())
}

func (i *liveEventPreviewAccessControlPtrType) ToLiveEventPreviewAccessControlPtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewAccessControlPtrOutput)
}

// The IP access control for the live event preview endpoint.
type LiveEventPreviewAccessControlOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewAccessControl)(nil)).Elem()
}

func (o LiveEventPreviewAccessControlOutput) ToLiveEventPreviewAccessControlOutput() LiveEventPreviewAccessControlOutput {
	return o
}

func (o LiveEventPreviewAccessControlOutput) ToLiveEventPreviewAccessControlOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlOutput {
	return o
}

func (o LiveEventPreviewAccessControlOutput) ToLiveEventPreviewAccessControlPtrOutput() LiveEventPreviewAccessControlPtrOutput {
	return o.ToLiveEventPreviewAccessControlPtrOutputWithContext(context.Background())
}

func (o LiveEventPreviewAccessControlOutput) ToLiveEventPreviewAccessControlPtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlPtrOutput {
	return o.ApplyT(func(v LiveEventPreviewAccessControl) *LiveEventPreviewAccessControl {
		return &v
	}).(LiveEventPreviewAccessControlPtrOutput)
}

// The IP access control properties.
func (o LiveEventPreviewAccessControlOutput) Ip() IPAccessControlPtrOutput {
	return o.ApplyT(func(v LiveEventPreviewAccessControl) *IPAccessControl { return v.Ip }).(IPAccessControlPtrOutput)
}

type LiveEventPreviewAccessControlPtrOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreviewAccessControl)(nil)).Elem()
}

func (o LiveEventPreviewAccessControlPtrOutput) ToLiveEventPreviewAccessControlPtrOutput() LiveEventPreviewAccessControlPtrOutput {
	return o
}

func (o LiveEventPreviewAccessControlPtrOutput) ToLiveEventPreviewAccessControlPtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlPtrOutput {
	return o
}

func (o LiveEventPreviewAccessControlPtrOutput) Elem() LiveEventPreviewAccessControlOutput {
	return o.ApplyT(func(v *LiveEventPreviewAccessControl) LiveEventPreviewAccessControl { return *v }).(LiveEventPreviewAccessControlOutput)
}

// The IP access control properties.
func (o LiveEventPreviewAccessControlPtrOutput) Ip() IPAccessControlPtrOutput {
	return o.ApplyT(func(v *LiveEventPreviewAccessControl) *IPAccessControl {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(IPAccessControlPtrOutput)
}

// The IP access control for the live event preview endpoint.
type LiveEventPreviewAccessControlResponse struct {
	// The IP access control properties.
	Ip *IPAccessControlResponse `pulumi:"ip"`
}

// LiveEventPreviewAccessControlResponseInput is an input type that accepts LiveEventPreviewAccessControlResponseArgs and LiveEventPreviewAccessControlResponseOutput values.
// You can construct a concrete instance of `LiveEventPreviewAccessControlResponseInput` via:
//
//          LiveEventPreviewAccessControlResponseArgs{...}
type LiveEventPreviewAccessControlResponseInput interface {
	pulumi.Input

	ToLiveEventPreviewAccessControlResponseOutput() LiveEventPreviewAccessControlResponseOutput
	ToLiveEventPreviewAccessControlResponseOutputWithContext(context.Context) LiveEventPreviewAccessControlResponseOutput
}

// The IP access control for the live event preview endpoint.
type LiveEventPreviewAccessControlResponseArgs struct {
	// The IP access control properties.
	Ip IPAccessControlResponsePtrInput `pulumi:"ip"`
}

func (LiveEventPreviewAccessControlResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewAccessControlResponse)(nil)).Elem()
}

func (i LiveEventPreviewAccessControlResponseArgs) ToLiveEventPreviewAccessControlResponseOutput() LiveEventPreviewAccessControlResponseOutput {
	return i.ToLiveEventPreviewAccessControlResponseOutputWithContext(context.Background())
}

func (i LiveEventPreviewAccessControlResponseArgs) ToLiveEventPreviewAccessControlResponseOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewAccessControlResponseOutput)
}

func (i LiveEventPreviewAccessControlResponseArgs) ToLiveEventPreviewAccessControlResponsePtrOutput() LiveEventPreviewAccessControlResponsePtrOutput {
	return i.ToLiveEventPreviewAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i LiveEventPreviewAccessControlResponseArgs) ToLiveEventPreviewAccessControlResponsePtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewAccessControlResponseOutput).ToLiveEventPreviewAccessControlResponsePtrOutputWithContext(ctx)
}

// LiveEventPreviewAccessControlResponsePtrInput is an input type that accepts LiveEventPreviewAccessControlResponseArgs, LiveEventPreviewAccessControlResponsePtr and LiveEventPreviewAccessControlResponsePtrOutput values.
// You can construct a concrete instance of `LiveEventPreviewAccessControlResponsePtrInput` via:
//
//          LiveEventPreviewAccessControlResponseArgs{...}
//
//  or:
//
//          nil
type LiveEventPreviewAccessControlResponsePtrInput interface {
	pulumi.Input

	ToLiveEventPreviewAccessControlResponsePtrOutput() LiveEventPreviewAccessControlResponsePtrOutput
	ToLiveEventPreviewAccessControlResponsePtrOutputWithContext(context.Context) LiveEventPreviewAccessControlResponsePtrOutput
}

type liveEventPreviewAccessControlResponsePtrType LiveEventPreviewAccessControlResponseArgs

func LiveEventPreviewAccessControlResponsePtr(v *LiveEventPreviewAccessControlResponseArgs) LiveEventPreviewAccessControlResponsePtrInput {
	return (*liveEventPreviewAccessControlResponsePtrType)(v)
}

func (*liveEventPreviewAccessControlResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreviewAccessControlResponse)(nil)).Elem()
}

func (i *liveEventPreviewAccessControlResponsePtrType) ToLiveEventPreviewAccessControlResponsePtrOutput() LiveEventPreviewAccessControlResponsePtrOutput {
	return i.ToLiveEventPreviewAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i *liveEventPreviewAccessControlResponsePtrType) ToLiveEventPreviewAccessControlResponsePtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewAccessControlResponsePtrOutput)
}

// The IP access control for the live event preview endpoint.
type LiveEventPreviewAccessControlResponseOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewAccessControlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewAccessControlResponse)(nil)).Elem()
}

func (o LiveEventPreviewAccessControlResponseOutput) ToLiveEventPreviewAccessControlResponseOutput() LiveEventPreviewAccessControlResponseOutput {
	return o
}

func (o LiveEventPreviewAccessControlResponseOutput) ToLiveEventPreviewAccessControlResponseOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlResponseOutput {
	return o
}

func (o LiveEventPreviewAccessControlResponseOutput) ToLiveEventPreviewAccessControlResponsePtrOutput() LiveEventPreviewAccessControlResponsePtrOutput {
	return o.ToLiveEventPreviewAccessControlResponsePtrOutputWithContext(context.Background())
}

func (o LiveEventPreviewAccessControlResponseOutput) ToLiveEventPreviewAccessControlResponsePtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlResponsePtrOutput {
	return o.ApplyT(func(v LiveEventPreviewAccessControlResponse) *LiveEventPreviewAccessControlResponse {
		return &v
	}).(LiveEventPreviewAccessControlResponsePtrOutput)
}

// The IP access control properties.
func (o LiveEventPreviewAccessControlResponseOutput) Ip() IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v LiveEventPreviewAccessControlResponse) *IPAccessControlResponse { return v.Ip }).(IPAccessControlResponsePtrOutput)
}

type LiveEventPreviewAccessControlResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewAccessControlResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreviewAccessControlResponse)(nil)).Elem()
}

func (o LiveEventPreviewAccessControlResponsePtrOutput) ToLiveEventPreviewAccessControlResponsePtrOutput() LiveEventPreviewAccessControlResponsePtrOutput {
	return o
}

func (o LiveEventPreviewAccessControlResponsePtrOutput) ToLiveEventPreviewAccessControlResponsePtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlResponsePtrOutput {
	return o
}

func (o LiveEventPreviewAccessControlResponsePtrOutput) Elem() LiveEventPreviewAccessControlResponseOutput {
	return o.ApplyT(func(v *LiveEventPreviewAccessControlResponse) LiveEventPreviewAccessControlResponse { return *v }).(LiveEventPreviewAccessControlResponseOutput)
}

// The IP access control properties.
func (o LiveEventPreviewAccessControlResponsePtrOutput) Ip() IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v *LiveEventPreviewAccessControlResponse) *IPAccessControlResponse {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(IPAccessControlResponsePtrOutput)
}

// Live event preview settings.
type LiveEventPreviewResponse struct {
	// The access control for live event preview.
	AccessControl *LiveEventPreviewAccessControlResponse `pulumi:"accessControl"`
	// An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
	AlternativeMediaId *string `pulumi:"alternativeMediaId"`
	// The endpoints for preview. Do not share the preview URL with the live event audience.
	Endpoints []LiveEventEndpointResponse `pulumi:"endpoints"`
	// The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
	PreviewLocator *string `pulumi:"previewLocator"`
	// The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
	StreamingPolicyName *string `pulumi:"streamingPolicyName"`
}

// LiveEventPreviewResponseInput is an input type that accepts LiveEventPreviewResponseArgs and LiveEventPreviewResponseOutput values.
// You can construct a concrete instance of `LiveEventPreviewResponseInput` via:
//
//          LiveEventPreviewResponseArgs{...}
type LiveEventPreviewResponseInput interface {
	pulumi.Input

	ToLiveEventPreviewResponseOutput() LiveEventPreviewResponseOutput
	ToLiveEventPreviewResponseOutputWithContext(context.Context) LiveEventPreviewResponseOutput
}

// Live event preview settings.
type LiveEventPreviewResponseArgs struct {
	// The access control for live event preview.
	AccessControl LiveEventPreviewAccessControlResponsePtrInput `pulumi:"accessControl"`
	// An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
	AlternativeMediaId pulumi.StringPtrInput `pulumi:"alternativeMediaId"`
	// The endpoints for preview. Do not share the preview URL with the live event audience.
	Endpoints LiveEventEndpointResponseArrayInput `pulumi:"endpoints"`
	// The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
	PreviewLocator pulumi.StringPtrInput `pulumi:"previewLocator"`
	// The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
	StreamingPolicyName pulumi.StringPtrInput `pulumi:"streamingPolicyName"`
}

func (LiveEventPreviewResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewResponse)(nil)).Elem()
}

func (i LiveEventPreviewResponseArgs) ToLiveEventPreviewResponseOutput() LiveEventPreviewResponseOutput {
	return i.ToLiveEventPreviewResponseOutputWithContext(context.Background())
}

func (i LiveEventPreviewResponseArgs) ToLiveEventPreviewResponseOutputWithContext(ctx context.Context) LiveEventPreviewResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewResponseOutput)
}

func (i LiveEventPreviewResponseArgs) ToLiveEventPreviewResponsePtrOutput() LiveEventPreviewResponsePtrOutput {
	return i.ToLiveEventPreviewResponsePtrOutputWithContext(context.Background())
}

func (i LiveEventPreviewResponseArgs) ToLiveEventPreviewResponsePtrOutputWithContext(ctx context.Context) LiveEventPreviewResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewResponseOutput).ToLiveEventPreviewResponsePtrOutputWithContext(ctx)
}

// LiveEventPreviewResponsePtrInput is an input type that accepts LiveEventPreviewResponseArgs, LiveEventPreviewResponsePtr and LiveEventPreviewResponsePtrOutput values.
// You can construct a concrete instance of `LiveEventPreviewResponsePtrInput` via:
//
//          LiveEventPreviewResponseArgs{...}
//
//  or:
//
//          nil
type LiveEventPreviewResponsePtrInput interface {
	pulumi.Input

	ToLiveEventPreviewResponsePtrOutput() LiveEventPreviewResponsePtrOutput
	ToLiveEventPreviewResponsePtrOutputWithContext(context.Context) LiveEventPreviewResponsePtrOutput
}

type liveEventPreviewResponsePtrType LiveEventPreviewResponseArgs

func LiveEventPreviewResponsePtr(v *LiveEventPreviewResponseArgs) LiveEventPreviewResponsePtrInput {
	return (*liveEventPreviewResponsePtrType)(v)
}

func (*liveEventPreviewResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreviewResponse)(nil)).Elem()
}

func (i *liveEventPreviewResponsePtrType) ToLiveEventPreviewResponsePtrOutput() LiveEventPreviewResponsePtrOutput {
	return i.ToLiveEventPreviewResponsePtrOutputWithContext(context.Background())
}

func (i *liveEventPreviewResponsePtrType) ToLiveEventPreviewResponsePtrOutputWithContext(ctx context.Context) LiveEventPreviewResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewResponsePtrOutput)
}

// Live event preview settings.
type LiveEventPreviewResponseOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewResponse)(nil)).Elem()
}

func (o LiveEventPreviewResponseOutput) ToLiveEventPreviewResponseOutput() LiveEventPreviewResponseOutput {
	return o
}

func (o LiveEventPreviewResponseOutput) ToLiveEventPreviewResponseOutputWithContext(ctx context.Context) LiveEventPreviewResponseOutput {
	return o
}

func (o LiveEventPreviewResponseOutput) ToLiveEventPreviewResponsePtrOutput() LiveEventPreviewResponsePtrOutput {
	return o.ToLiveEventPreviewResponsePtrOutputWithContext(context.Background())
}

func (o LiveEventPreviewResponseOutput) ToLiveEventPreviewResponsePtrOutputWithContext(ctx context.Context) LiveEventPreviewResponsePtrOutput {
	return o.ApplyT(func(v LiveEventPreviewResponse) *LiveEventPreviewResponse {
		return &v
	}).(LiveEventPreviewResponsePtrOutput)
}

// The access control for live event preview.
func (o LiveEventPreviewResponseOutput) AccessControl() LiveEventPreviewAccessControlResponsePtrOutput {
	return o.ApplyT(func(v LiveEventPreviewResponse) *LiveEventPreviewAccessControlResponse { return v.AccessControl }).(LiveEventPreviewAccessControlResponsePtrOutput)
}

// An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
func (o LiveEventPreviewResponseOutput) AlternativeMediaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreviewResponse) *string { return v.AlternativeMediaId }).(pulumi.StringPtrOutput)
}

// The endpoints for preview. Do not share the preview URL with the live event audience.
func (o LiveEventPreviewResponseOutput) Endpoints() LiveEventEndpointResponseArrayOutput {
	return o.ApplyT(func(v LiveEventPreviewResponse) []LiveEventEndpointResponse { return v.Endpoints }).(LiveEventEndpointResponseArrayOutput)
}

// The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
func (o LiveEventPreviewResponseOutput) PreviewLocator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreviewResponse) *string { return v.PreviewLocator }).(pulumi.StringPtrOutput)
}

// The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
func (o LiveEventPreviewResponseOutput) StreamingPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreviewResponse) *string { return v.StreamingPolicyName }).(pulumi.StringPtrOutput)
}

type LiveEventPreviewResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreviewResponse)(nil)).Elem()
}

func (o LiveEventPreviewResponsePtrOutput) ToLiveEventPreviewResponsePtrOutput() LiveEventPreviewResponsePtrOutput {
	return o
}

func (o LiveEventPreviewResponsePtrOutput) ToLiveEventPreviewResponsePtrOutputWithContext(ctx context.Context) LiveEventPreviewResponsePtrOutput {
	return o
}

func (o LiveEventPreviewResponsePtrOutput) Elem() LiveEventPreviewResponseOutput {
	return o.ApplyT(func(v *LiveEventPreviewResponse) LiveEventPreviewResponse { return *v }).(LiveEventPreviewResponseOutput)
}

// The access control for live event preview.
func (o LiveEventPreviewResponsePtrOutput) AccessControl() LiveEventPreviewAccessControlResponsePtrOutput {
	return o.ApplyT(func(v *LiveEventPreviewResponse) *LiveEventPreviewAccessControlResponse {
		if v == nil {
			return nil
		}
		return v.AccessControl
	}).(LiveEventPreviewAccessControlResponsePtrOutput)
}

// An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
func (o LiveEventPreviewResponsePtrOutput) AlternativeMediaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreviewResponse) *string {
		if v == nil {
			return nil
		}
		return v.AlternativeMediaId
	}).(pulumi.StringPtrOutput)
}

// The endpoints for preview. Do not share the preview URL with the live event audience.
func (o LiveEventPreviewResponsePtrOutput) Endpoints() LiveEventEndpointResponseArrayOutput {
	return o.ApplyT(func(v *LiveEventPreviewResponse) []LiveEventEndpointResponse {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(LiveEventEndpointResponseArrayOutput)
}

// The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
func (o LiveEventPreviewResponsePtrOutput) PreviewLocator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreviewResponse) *string {
		if v == nil {
			return nil
		}
		return v.PreviewLocator
	}).(pulumi.StringPtrOutput)
}

// The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
func (o LiveEventPreviewResponsePtrOutput) StreamingPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreviewResponse) *string {
		if v == nil {
			return nil
		}
		return v.StreamingPolicyName
	}).(pulumi.StringPtrOutput)
}

// Describes the transcription tracks in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventTranscription struct {
	// Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied. This property is reserved for future use, any value set on this property will be ignored.
	InputTrackSelection []LiveEventInputTrackSelection `pulumi:"inputTrackSelection"`
	// Specifies the language (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: 'en-US'). See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature and the list of supported languages.
	Language *string `pulumi:"language"`
	// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
	OutputTranscriptionTrack *LiveEventOutputTranscriptionTrack `pulumi:"outputTranscriptionTrack"`
}

// LiveEventTranscriptionInput is an input type that accepts LiveEventTranscriptionArgs and LiveEventTranscriptionOutput values.
// You can construct a concrete instance of `LiveEventTranscriptionInput` via:
//
//          LiveEventTranscriptionArgs{...}
type LiveEventTranscriptionInput interface {
	pulumi.Input

	ToLiveEventTranscriptionOutput() LiveEventTranscriptionOutput
	ToLiveEventTranscriptionOutputWithContext(context.Context) LiveEventTranscriptionOutput
}

// Describes the transcription tracks in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventTranscriptionArgs struct {
	// Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied. This property is reserved for future use, any value set on this property will be ignored.
	InputTrackSelection LiveEventInputTrackSelectionArrayInput `pulumi:"inputTrackSelection"`
	// Specifies the language (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: 'en-US'). See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature and the list of supported languages.
	Language pulumi.StringPtrInput `pulumi:"language"`
	// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
	OutputTranscriptionTrack LiveEventOutputTranscriptionTrackPtrInput `pulumi:"outputTranscriptionTrack"`
}

func (LiveEventTranscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventTranscription)(nil)).Elem()
}

func (i LiveEventTranscriptionArgs) ToLiveEventTranscriptionOutput() LiveEventTranscriptionOutput {
	return i.ToLiveEventTranscriptionOutputWithContext(context.Background())
}

func (i LiveEventTranscriptionArgs) ToLiveEventTranscriptionOutputWithContext(ctx context.Context) LiveEventTranscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventTranscriptionOutput)
}

// LiveEventTranscriptionArrayInput is an input type that accepts LiveEventTranscriptionArray and LiveEventTranscriptionArrayOutput values.
// You can construct a concrete instance of `LiveEventTranscriptionArrayInput` via:
//
//          LiveEventTranscriptionArray{ LiveEventTranscriptionArgs{...} }
type LiveEventTranscriptionArrayInput interface {
	pulumi.Input

	ToLiveEventTranscriptionArrayOutput() LiveEventTranscriptionArrayOutput
	ToLiveEventTranscriptionArrayOutputWithContext(context.Context) LiveEventTranscriptionArrayOutput
}

type LiveEventTranscriptionArray []LiveEventTranscriptionInput

func (LiveEventTranscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventTranscription)(nil)).Elem()
}

func (i LiveEventTranscriptionArray) ToLiveEventTranscriptionArrayOutput() LiveEventTranscriptionArrayOutput {
	return i.ToLiveEventTranscriptionArrayOutputWithContext(context.Background())
}

func (i LiveEventTranscriptionArray) ToLiveEventTranscriptionArrayOutputWithContext(ctx context.Context) LiveEventTranscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventTranscriptionArrayOutput)
}

// Describes the transcription tracks in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventTranscriptionOutput struct{ *pulumi.OutputState }

func (LiveEventTranscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventTranscription)(nil)).Elem()
}

func (o LiveEventTranscriptionOutput) ToLiveEventTranscriptionOutput() LiveEventTranscriptionOutput {
	return o
}

func (o LiveEventTranscriptionOutput) ToLiveEventTranscriptionOutputWithContext(ctx context.Context) LiveEventTranscriptionOutput {
	return o
}

// Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventTranscriptionOutput) InputTrackSelection() LiveEventInputTrackSelectionArrayOutput {
	return o.ApplyT(func(v LiveEventTranscription) []LiveEventInputTrackSelection { return v.InputTrackSelection }).(LiveEventInputTrackSelectionArrayOutput)
}

// Specifies the language (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: 'en-US'). See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature and the list of supported languages.
func (o LiveEventTranscriptionOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventTranscription) *string { return v.Language }).(pulumi.StringPtrOutput)
}

// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventTranscriptionOutput) OutputTranscriptionTrack() LiveEventOutputTranscriptionTrackPtrOutput {
	return o.ApplyT(func(v LiveEventTranscription) *LiveEventOutputTranscriptionTrack { return v.OutputTranscriptionTrack }).(LiveEventOutputTranscriptionTrackPtrOutput)
}

type LiveEventTranscriptionArrayOutput struct{ *pulumi.OutputState }

func (LiveEventTranscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventTranscription)(nil)).Elem()
}

func (o LiveEventTranscriptionArrayOutput) ToLiveEventTranscriptionArrayOutput() LiveEventTranscriptionArrayOutput {
	return o
}

func (o LiveEventTranscriptionArrayOutput) ToLiveEventTranscriptionArrayOutputWithContext(ctx context.Context) LiveEventTranscriptionArrayOutput {
	return o
}

func (o LiveEventTranscriptionArrayOutput) Index(i pulumi.IntInput) LiveEventTranscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventTranscription {
		return vs[0].([]LiveEventTranscription)[vs[1].(int)]
	}).(LiveEventTranscriptionOutput)
}

// Describes the transcription tracks in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventTranscriptionResponse struct {
	// Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied. This property is reserved for future use, any value set on this property will be ignored.
	InputTrackSelection []LiveEventInputTrackSelectionResponse `pulumi:"inputTrackSelection"`
	// Specifies the language (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: 'en-US'). See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature and the list of supported languages.
	Language *string `pulumi:"language"`
	// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
	OutputTranscriptionTrack *LiveEventOutputTranscriptionTrackResponse `pulumi:"outputTranscriptionTrack"`
}

// LiveEventTranscriptionResponseInput is an input type that accepts LiveEventTranscriptionResponseArgs and LiveEventTranscriptionResponseOutput values.
// You can construct a concrete instance of `LiveEventTranscriptionResponseInput` via:
//
//          LiveEventTranscriptionResponseArgs{...}
type LiveEventTranscriptionResponseInput interface {
	pulumi.Input

	ToLiveEventTranscriptionResponseOutput() LiveEventTranscriptionResponseOutput
	ToLiveEventTranscriptionResponseOutputWithContext(context.Context) LiveEventTranscriptionResponseOutput
}

// Describes the transcription tracks in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventTranscriptionResponseArgs struct {
	// Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied. This property is reserved for future use, any value set on this property will be ignored.
	InputTrackSelection LiveEventInputTrackSelectionResponseArrayInput `pulumi:"inputTrackSelection"`
	// Specifies the language (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: 'en-US'). See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature and the list of supported languages.
	Language pulumi.StringPtrInput `pulumi:"language"`
	// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
	OutputTranscriptionTrack LiveEventOutputTranscriptionTrackResponsePtrInput `pulumi:"outputTranscriptionTrack"`
}

func (LiveEventTranscriptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventTranscriptionResponse)(nil)).Elem()
}

func (i LiveEventTranscriptionResponseArgs) ToLiveEventTranscriptionResponseOutput() LiveEventTranscriptionResponseOutput {
	return i.ToLiveEventTranscriptionResponseOutputWithContext(context.Background())
}

func (i LiveEventTranscriptionResponseArgs) ToLiveEventTranscriptionResponseOutputWithContext(ctx context.Context) LiveEventTranscriptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventTranscriptionResponseOutput)
}

// LiveEventTranscriptionResponseArrayInput is an input type that accepts LiveEventTranscriptionResponseArray and LiveEventTranscriptionResponseArrayOutput values.
// You can construct a concrete instance of `LiveEventTranscriptionResponseArrayInput` via:
//
//          LiveEventTranscriptionResponseArray{ LiveEventTranscriptionResponseArgs{...} }
type LiveEventTranscriptionResponseArrayInput interface {
	pulumi.Input

	ToLiveEventTranscriptionResponseArrayOutput() LiveEventTranscriptionResponseArrayOutput
	ToLiveEventTranscriptionResponseArrayOutputWithContext(context.Context) LiveEventTranscriptionResponseArrayOutput
}

type LiveEventTranscriptionResponseArray []LiveEventTranscriptionResponseInput

func (LiveEventTranscriptionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventTranscriptionResponse)(nil)).Elem()
}

func (i LiveEventTranscriptionResponseArray) ToLiveEventTranscriptionResponseArrayOutput() LiveEventTranscriptionResponseArrayOutput {
	return i.ToLiveEventTranscriptionResponseArrayOutputWithContext(context.Background())
}

func (i LiveEventTranscriptionResponseArray) ToLiveEventTranscriptionResponseArrayOutputWithContext(ctx context.Context) LiveEventTranscriptionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventTranscriptionResponseArrayOutput)
}

// Describes the transcription tracks in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
type LiveEventTranscriptionResponseOutput struct{ *pulumi.OutputState }

func (LiveEventTranscriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventTranscriptionResponse)(nil)).Elem()
}

func (o LiveEventTranscriptionResponseOutput) ToLiveEventTranscriptionResponseOutput() LiveEventTranscriptionResponseOutput {
	return o
}

func (o LiveEventTranscriptionResponseOutput) ToLiveEventTranscriptionResponseOutputWithContext(ctx context.Context) LiveEventTranscriptionResponseOutput {
	return o
}

// Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventTranscriptionResponseOutput) InputTrackSelection() LiveEventInputTrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v LiveEventTranscriptionResponse) []LiveEventInputTrackSelectionResponse {
		return v.InputTrackSelection
	}).(LiveEventInputTrackSelectionResponseArrayOutput)
}

// Specifies the language (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: 'en-US'). See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature and the list of supported languages.
func (o LiveEventTranscriptionResponseOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventTranscriptionResponse) *string { return v.Language }).(pulumi.StringPtrOutput)
}

// Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored.
func (o LiveEventTranscriptionResponseOutput) OutputTranscriptionTrack() LiveEventOutputTranscriptionTrackResponsePtrOutput {
	return o.ApplyT(func(v LiveEventTranscriptionResponse) *LiveEventOutputTranscriptionTrackResponse {
		return v.OutputTranscriptionTrack
	}).(LiveEventOutputTranscriptionTrackResponsePtrOutput)
}

type LiveEventTranscriptionResponseArrayOutput struct{ *pulumi.OutputState }

func (LiveEventTranscriptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventTranscriptionResponse)(nil)).Elem()
}

func (o LiveEventTranscriptionResponseArrayOutput) ToLiveEventTranscriptionResponseArrayOutput() LiveEventTranscriptionResponseArrayOutput {
	return o
}

func (o LiveEventTranscriptionResponseArrayOutput) ToLiveEventTranscriptionResponseArrayOutputWithContext(ctx context.Context) LiveEventTranscriptionResponseArrayOutput {
	return o
}

func (o LiveEventTranscriptionResponseArrayOutput) Index(i pulumi.IntInput) LiveEventTranscriptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventTranscriptionResponse {
		return vs[0].([]LiveEventTranscriptionResponse)[vs[1].(int)]
	}).(LiveEventTranscriptionResponseOutput)
}

type MediaServiceIdentity struct {
	// The identity type.
	Type string `pulumi:"type"`
}

// MediaServiceIdentityInput is an input type that accepts MediaServiceIdentityArgs and MediaServiceIdentityOutput values.
// You can construct a concrete instance of `MediaServiceIdentityInput` via:
//
//          MediaServiceIdentityArgs{...}
type MediaServiceIdentityInput interface {
	pulumi.Input

	ToMediaServiceIdentityOutput() MediaServiceIdentityOutput
	ToMediaServiceIdentityOutputWithContext(context.Context) MediaServiceIdentityOutput
}

type MediaServiceIdentityArgs struct {
	// The identity type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MediaServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaServiceIdentity)(nil)).Elem()
}

func (i MediaServiceIdentityArgs) ToMediaServiceIdentityOutput() MediaServiceIdentityOutput {
	return i.ToMediaServiceIdentityOutputWithContext(context.Background())
}

func (i MediaServiceIdentityArgs) ToMediaServiceIdentityOutputWithContext(ctx context.Context) MediaServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaServiceIdentityOutput)
}

func (i MediaServiceIdentityArgs) ToMediaServiceIdentityPtrOutput() MediaServiceIdentityPtrOutput {
	return i.ToMediaServiceIdentityPtrOutputWithContext(context.Background())
}

func (i MediaServiceIdentityArgs) ToMediaServiceIdentityPtrOutputWithContext(ctx context.Context) MediaServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaServiceIdentityOutput).ToMediaServiceIdentityPtrOutputWithContext(ctx)
}

// MediaServiceIdentityPtrInput is an input type that accepts MediaServiceIdentityArgs, MediaServiceIdentityPtr and MediaServiceIdentityPtrOutput values.
// You can construct a concrete instance of `MediaServiceIdentityPtrInput` via:
//
//          MediaServiceIdentityArgs{...}
//
//  or:
//
//          nil
type MediaServiceIdentityPtrInput interface {
	pulumi.Input

	ToMediaServiceIdentityPtrOutput() MediaServiceIdentityPtrOutput
	ToMediaServiceIdentityPtrOutputWithContext(context.Context) MediaServiceIdentityPtrOutput
}

type mediaServiceIdentityPtrType MediaServiceIdentityArgs

func MediaServiceIdentityPtr(v *MediaServiceIdentityArgs) MediaServiceIdentityPtrInput {
	return (*mediaServiceIdentityPtrType)(v)
}

func (*mediaServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaServiceIdentity)(nil)).Elem()
}

func (i *mediaServiceIdentityPtrType) ToMediaServiceIdentityPtrOutput() MediaServiceIdentityPtrOutput {
	return i.ToMediaServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *mediaServiceIdentityPtrType) ToMediaServiceIdentityPtrOutputWithContext(ctx context.Context) MediaServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaServiceIdentityPtrOutput)
}

type MediaServiceIdentityOutput struct{ *pulumi.OutputState }

func (MediaServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaServiceIdentity)(nil)).Elem()
}

func (o MediaServiceIdentityOutput) ToMediaServiceIdentityOutput() MediaServiceIdentityOutput {
	return o
}

func (o MediaServiceIdentityOutput) ToMediaServiceIdentityOutputWithContext(ctx context.Context) MediaServiceIdentityOutput {
	return o
}

func (o MediaServiceIdentityOutput) ToMediaServiceIdentityPtrOutput() MediaServiceIdentityPtrOutput {
	return o.ToMediaServiceIdentityPtrOutputWithContext(context.Background())
}

func (o MediaServiceIdentityOutput) ToMediaServiceIdentityPtrOutputWithContext(ctx context.Context) MediaServiceIdentityPtrOutput {
	return o.ApplyT(func(v MediaServiceIdentity) *MediaServiceIdentity {
		return &v
	}).(MediaServiceIdentityPtrOutput)
}

// The identity type.
func (o MediaServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MediaServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type MediaServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (MediaServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaServiceIdentity)(nil)).Elem()
}

func (o MediaServiceIdentityPtrOutput) ToMediaServiceIdentityPtrOutput() MediaServiceIdentityPtrOutput {
	return o
}

func (o MediaServiceIdentityPtrOutput) ToMediaServiceIdentityPtrOutputWithContext(ctx context.Context) MediaServiceIdentityPtrOutput {
	return o
}

func (o MediaServiceIdentityPtrOutput) Elem() MediaServiceIdentityOutput {
	return o.ApplyT(func(v *MediaServiceIdentity) MediaServiceIdentity { return *v }).(MediaServiceIdentityOutput)
}

// The identity type.
func (o MediaServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type MediaServiceIdentityResponse struct {
	// The Principal ID of the identity.
	PrincipalId string `pulumi:"principalId"`
	// The Tenant ID of the identity.
	TenantId string `pulumi:"tenantId"`
	// The identity type.
	Type string `pulumi:"type"`
}

// MediaServiceIdentityResponseInput is an input type that accepts MediaServiceIdentityResponseArgs and MediaServiceIdentityResponseOutput values.
// You can construct a concrete instance of `MediaServiceIdentityResponseInput` via:
//
//          MediaServiceIdentityResponseArgs{...}
type MediaServiceIdentityResponseInput interface {
	pulumi.Input

	ToMediaServiceIdentityResponseOutput() MediaServiceIdentityResponseOutput
	ToMediaServiceIdentityResponseOutputWithContext(context.Context) MediaServiceIdentityResponseOutput
}

type MediaServiceIdentityResponseArgs struct {
	// The Principal ID of the identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The Tenant ID of the identity.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The identity type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MediaServiceIdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaServiceIdentityResponse)(nil)).Elem()
}

func (i MediaServiceIdentityResponseArgs) ToMediaServiceIdentityResponseOutput() MediaServiceIdentityResponseOutput {
	return i.ToMediaServiceIdentityResponseOutputWithContext(context.Background())
}

func (i MediaServiceIdentityResponseArgs) ToMediaServiceIdentityResponseOutputWithContext(ctx context.Context) MediaServiceIdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaServiceIdentityResponseOutput)
}

func (i MediaServiceIdentityResponseArgs) ToMediaServiceIdentityResponsePtrOutput() MediaServiceIdentityResponsePtrOutput {
	return i.ToMediaServiceIdentityResponsePtrOutputWithContext(context.Background())
}

func (i MediaServiceIdentityResponseArgs) ToMediaServiceIdentityResponsePtrOutputWithContext(ctx context.Context) MediaServiceIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaServiceIdentityResponseOutput).ToMediaServiceIdentityResponsePtrOutputWithContext(ctx)
}

// MediaServiceIdentityResponsePtrInput is an input type that accepts MediaServiceIdentityResponseArgs, MediaServiceIdentityResponsePtr and MediaServiceIdentityResponsePtrOutput values.
// You can construct a concrete instance of `MediaServiceIdentityResponsePtrInput` via:
//
//          MediaServiceIdentityResponseArgs{...}
//
//  or:
//
//          nil
type MediaServiceIdentityResponsePtrInput interface {
	pulumi.Input

	ToMediaServiceIdentityResponsePtrOutput() MediaServiceIdentityResponsePtrOutput
	ToMediaServiceIdentityResponsePtrOutputWithContext(context.Context) MediaServiceIdentityResponsePtrOutput
}

type mediaServiceIdentityResponsePtrType MediaServiceIdentityResponseArgs

func MediaServiceIdentityResponsePtr(v *MediaServiceIdentityResponseArgs) MediaServiceIdentityResponsePtrInput {
	return (*mediaServiceIdentityResponsePtrType)(v)
}

func (*mediaServiceIdentityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaServiceIdentityResponse)(nil)).Elem()
}

func (i *mediaServiceIdentityResponsePtrType) ToMediaServiceIdentityResponsePtrOutput() MediaServiceIdentityResponsePtrOutput {
	return i.ToMediaServiceIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *mediaServiceIdentityResponsePtrType) ToMediaServiceIdentityResponsePtrOutputWithContext(ctx context.Context) MediaServiceIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaServiceIdentityResponsePtrOutput)
}

type MediaServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (MediaServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaServiceIdentityResponse)(nil)).Elem()
}

func (o MediaServiceIdentityResponseOutput) ToMediaServiceIdentityResponseOutput() MediaServiceIdentityResponseOutput {
	return o
}

func (o MediaServiceIdentityResponseOutput) ToMediaServiceIdentityResponseOutputWithContext(ctx context.Context) MediaServiceIdentityResponseOutput {
	return o
}

func (o MediaServiceIdentityResponseOutput) ToMediaServiceIdentityResponsePtrOutput() MediaServiceIdentityResponsePtrOutput {
	return o.ToMediaServiceIdentityResponsePtrOutputWithContext(context.Background())
}

func (o MediaServiceIdentityResponseOutput) ToMediaServiceIdentityResponsePtrOutputWithContext(ctx context.Context) MediaServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v MediaServiceIdentityResponse) *MediaServiceIdentityResponse {
		return &v
	}).(MediaServiceIdentityResponsePtrOutput)
}

// The Principal ID of the identity.
func (o MediaServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v MediaServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The Tenant ID of the identity.
func (o MediaServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v MediaServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type.
func (o MediaServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MediaServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

type MediaServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (MediaServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaServiceIdentityResponse)(nil)).Elem()
}

func (o MediaServiceIdentityResponsePtrOutput) ToMediaServiceIdentityResponsePtrOutput() MediaServiceIdentityResponsePtrOutput {
	return o
}

func (o MediaServiceIdentityResponsePtrOutput) ToMediaServiceIdentityResponsePtrOutputWithContext(ctx context.Context) MediaServiceIdentityResponsePtrOutput {
	return o
}

func (o MediaServiceIdentityResponsePtrOutput) Elem() MediaServiceIdentityResponseOutput {
	return o.ApplyT(func(v *MediaServiceIdentityResponse) MediaServiceIdentityResponse { return *v }).(MediaServiceIdentityResponseOutput)
}

// The Principal ID of the identity.
func (o MediaServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID of the identity.
func (o MediaServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type.
func (o MediaServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes the properties for producing a collection of GOP aligned multi-bitrate files. The default behavior is to produce one output file for each video layer which is muxed together with all the audios. The exact output files produced can be controlled by specifying the outputFiles collection.
type MultiBitrateFormat struct {
	// The pattern of the file names for the generated output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {Bitrate} - The audio/video bitrate. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. Any unsubstituted macros will be collapsed and removed from the filename.
	FilenamePattern string `pulumi:"filenamePattern"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The list of output files to produce.  Each entry in the list is a set of audio and video layer labels to be muxed together .
	OutputFiles []OutputFile `pulumi:"outputFiles"`
}

// MultiBitrateFormatInput is an input type that accepts MultiBitrateFormatArgs and MultiBitrateFormatOutput values.
// You can construct a concrete instance of `MultiBitrateFormatInput` via:
//
//          MultiBitrateFormatArgs{...}
type MultiBitrateFormatInput interface {
	pulumi.Input

	ToMultiBitrateFormatOutput() MultiBitrateFormatOutput
	ToMultiBitrateFormatOutputWithContext(context.Context) MultiBitrateFormatOutput
}

// Describes the properties for producing a collection of GOP aligned multi-bitrate files. The default behavior is to produce one output file for each video layer which is muxed together with all the audios. The exact output files produced can be controlled by specifying the outputFiles collection.
type MultiBitrateFormatArgs struct {
	// The pattern of the file names for the generated output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {Bitrate} - The audio/video bitrate. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. Any unsubstituted macros will be collapsed and removed from the filename.
	FilenamePattern pulumi.StringInput `pulumi:"filenamePattern"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The list of output files to produce.  Each entry in the list is a set of audio and video layer labels to be muxed together .
	OutputFiles OutputFileArrayInput `pulumi:"outputFiles"`
}

func (MultiBitrateFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiBitrateFormat)(nil)).Elem()
}

func (i MultiBitrateFormatArgs) ToMultiBitrateFormatOutput() MultiBitrateFormatOutput {
	return i.ToMultiBitrateFormatOutputWithContext(context.Background())
}

func (i MultiBitrateFormatArgs) ToMultiBitrateFormatOutputWithContext(ctx context.Context) MultiBitrateFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiBitrateFormatOutput)
}

// Describes the properties for producing a collection of GOP aligned multi-bitrate files. The default behavior is to produce one output file for each video layer which is muxed together with all the audios. The exact output files produced can be controlled by specifying the outputFiles collection.
type MultiBitrateFormatOutput struct{ *pulumi.OutputState }

func (MultiBitrateFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiBitrateFormat)(nil)).Elem()
}

func (o MultiBitrateFormatOutput) ToMultiBitrateFormatOutput() MultiBitrateFormatOutput {
	return o
}

func (o MultiBitrateFormatOutput) ToMultiBitrateFormatOutputWithContext(ctx context.Context) MultiBitrateFormatOutput {
	return o
}

// The pattern of the file names for the generated output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {Bitrate} - The audio/video bitrate. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. Any unsubstituted macros will be collapsed and removed from the filename.
func (o MultiBitrateFormatOutput) FilenamePattern() pulumi.StringOutput {
	return o.ApplyT(func(v MultiBitrateFormat) string { return v.FilenamePattern }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o MultiBitrateFormatOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v MultiBitrateFormat) string { return v.OdataType }).(pulumi.StringOutput)
}

// The list of output files to produce.  Each entry in the list is a set of audio and video layer labels to be muxed together .
func (o MultiBitrateFormatOutput) OutputFiles() OutputFileArrayOutput {
	return o.ApplyT(func(v MultiBitrateFormat) []OutputFile { return v.OutputFiles }).(OutputFileArrayOutput)
}

// Describes the properties for producing a collection of GOP aligned multi-bitrate files. The default behavior is to produce one output file for each video layer which is muxed together with all the audios. The exact output files produced can be controlled by specifying the outputFiles collection.
type MultiBitrateFormatResponse struct {
	// The pattern of the file names for the generated output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {Bitrate} - The audio/video bitrate. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. Any unsubstituted macros will be collapsed and removed from the filename.
	FilenamePattern string `pulumi:"filenamePattern"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The list of output files to produce.  Each entry in the list is a set of audio and video layer labels to be muxed together .
	OutputFiles []OutputFileResponse `pulumi:"outputFiles"`
}

// MultiBitrateFormatResponseInput is an input type that accepts MultiBitrateFormatResponseArgs and MultiBitrateFormatResponseOutput values.
// You can construct a concrete instance of `MultiBitrateFormatResponseInput` via:
//
//          MultiBitrateFormatResponseArgs{...}
type MultiBitrateFormatResponseInput interface {
	pulumi.Input

	ToMultiBitrateFormatResponseOutput() MultiBitrateFormatResponseOutput
	ToMultiBitrateFormatResponseOutputWithContext(context.Context) MultiBitrateFormatResponseOutput
}

// Describes the properties for producing a collection of GOP aligned multi-bitrate files. The default behavior is to produce one output file for each video layer which is muxed together with all the audios. The exact output files produced can be controlled by specifying the outputFiles collection.
type MultiBitrateFormatResponseArgs struct {
	// The pattern of the file names for the generated output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {Bitrate} - The audio/video bitrate. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. Any unsubstituted macros will be collapsed and removed from the filename.
	FilenamePattern pulumi.StringInput `pulumi:"filenamePattern"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The list of output files to produce.  Each entry in the list is a set of audio and video layer labels to be muxed together .
	OutputFiles OutputFileResponseArrayInput `pulumi:"outputFiles"`
}

func (MultiBitrateFormatResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiBitrateFormatResponse)(nil)).Elem()
}

func (i MultiBitrateFormatResponseArgs) ToMultiBitrateFormatResponseOutput() MultiBitrateFormatResponseOutput {
	return i.ToMultiBitrateFormatResponseOutputWithContext(context.Background())
}

func (i MultiBitrateFormatResponseArgs) ToMultiBitrateFormatResponseOutputWithContext(ctx context.Context) MultiBitrateFormatResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiBitrateFormatResponseOutput)
}

// Describes the properties for producing a collection of GOP aligned multi-bitrate files. The default behavior is to produce one output file for each video layer which is muxed together with all the audios. The exact output files produced can be controlled by specifying the outputFiles collection.
type MultiBitrateFormatResponseOutput struct{ *pulumi.OutputState }

func (MultiBitrateFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiBitrateFormatResponse)(nil)).Elem()
}

func (o MultiBitrateFormatResponseOutput) ToMultiBitrateFormatResponseOutput() MultiBitrateFormatResponseOutput {
	return o
}

func (o MultiBitrateFormatResponseOutput) ToMultiBitrateFormatResponseOutputWithContext(ctx context.Context) MultiBitrateFormatResponseOutput {
	return o
}

// The pattern of the file names for the generated output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {Bitrate} - The audio/video bitrate. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. Any unsubstituted macros will be collapsed and removed from the filename.
func (o MultiBitrateFormatResponseOutput) FilenamePattern() pulumi.StringOutput {
	return o.ApplyT(func(v MultiBitrateFormatResponse) string { return v.FilenamePattern }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o MultiBitrateFormatResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v MultiBitrateFormatResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// The list of output files to produce.  Each entry in the list is a set of audio and video layer labels to be muxed together .
func (o MultiBitrateFormatResponseOutput) OutputFiles() OutputFileResponseArrayOutput {
	return o.ApplyT(func(v MultiBitrateFormatResponse) []OutputFileResponse { return v.OutputFiles }).(OutputFileResponseArrayOutput)
}

// Class for NoEncryption scheme
type NoEncryption struct {
	// Representing supported protocols
	EnabledProtocols *EnabledProtocols `pulumi:"enabledProtocols"`
}

// NoEncryptionInput is an input type that accepts NoEncryptionArgs and NoEncryptionOutput values.
// You can construct a concrete instance of `NoEncryptionInput` via:
//
//          NoEncryptionArgs{...}
type NoEncryptionInput interface {
	pulumi.Input

	ToNoEncryptionOutput() NoEncryptionOutput
	ToNoEncryptionOutputWithContext(context.Context) NoEncryptionOutput
}

// Class for NoEncryption scheme
type NoEncryptionArgs struct {
	// Representing supported protocols
	EnabledProtocols EnabledProtocolsPtrInput `pulumi:"enabledProtocols"`
}

func (NoEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoEncryption)(nil)).Elem()
}

func (i NoEncryptionArgs) ToNoEncryptionOutput() NoEncryptionOutput {
	return i.ToNoEncryptionOutputWithContext(context.Background())
}

func (i NoEncryptionArgs) ToNoEncryptionOutputWithContext(ctx context.Context) NoEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoEncryptionOutput)
}

func (i NoEncryptionArgs) ToNoEncryptionPtrOutput() NoEncryptionPtrOutput {
	return i.ToNoEncryptionPtrOutputWithContext(context.Background())
}

func (i NoEncryptionArgs) ToNoEncryptionPtrOutputWithContext(ctx context.Context) NoEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoEncryptionOutput).ToNoEncryptionPtrOutputWithContext(ctx)
}

// NoEncryptionPtrInput is an input type that accepts NoEncryptionArgs, NoEncryptionPtr and NoEncryptionPtrOutput values.
// You can construct a concrete instance of `NoEncryptionPtrInput` via:
//
//          NoEncryptionArgs{...}
//
//  or:
//
//          nil
type NoEncryptionPtrInput interface {
	pulumi.Input

	ToNoEncryptionPtrOutput() NoEncryptionPtrOutput
	ToNoEncryptionPtrOutputWithContext(context.Context) NoEncryptionPtrOutput
}

type noEncryptionPtrType NoEncryptionArgs

func NoEncryptionPtr(v *NoEncryptionArgs) NoEncryptionPtrInput {
	return (*noEncryptionPtrType)(v)
}

func (*noEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NoEncryption)(nil)).Elem()
}

func (i *noEncryptionPtrType) ToNoEncryptionPtrOutput() NoEncryptionPtrOutput {
	return i.ToNoEncryptionPtrOutputWithContext(context.Background())
}

func (i *noEncryptionPtrType) ToNoEncryptionPtrOutputWithContext(ctx context.Context) NoEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoEncryptionPtrOutput)
}

// Class for NoEncryption scheme
type NoEncryptionOutput struct{ *pulumi.OutputState }

func (NoEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoEncryption)(nil)).Elem()
}

func (o NoEncryptionOutput) ToNoEncryptionOutput() NoEncryptionOutput {
	return o
}

func (o NoEncryptionOutput) ToNoEncryptionOutputWithContext(ctx context.Context) NoEncryptionOutput {
	return o
}

func (o NoEncryptionOutput) ToNoEncryptionPtrOutput() NoEncryptionPtrOutput {
	return o.ToNoEncryptionPtrOutputWithContext(context.Background())
}

func (o NoEncryptionOutput) ToNoEncryptionPtrOutputWithContext(ctx context.Context) NoEncryptionPtrOutput {
	return o.ApplyT(func(v NoEncryption) *NoEncryption {
		return &v
	}).(NoEncryptionPtrOutput)
}

// Representing supported protocols
func (o NoEncryptionOutput) EnabledProtocols() EnabledProtocolsPtrOutput {
	return o.ApplyT(func(v NoEncryption) *EnabledProtocols { return v.EnabledProtocols }).(EnabledProtocolsPtrOutput)
}

type NoEncryptionPtrOutput struct{ *pulumi.OutputState }

func (NoEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NoEncryption)(nil)).Elem()
}

func (o NoEncryptionPtrOutput) ToNoEncryptionPtrOutput() NoEncryptionPtrOutput {
	return o
}

func (o NoEncryptionPtrOutput) ToNoEncryptionPtrOutputWithContext(ctx context.Context) NoEncryptionPtrOutput {
	return o
}

func (o NoEncryptionPtrOutput) Elem() NoEncryptionOutput {
	return o.ApplyT(func(v *NoEncryption) NoEncryption { return *v }).(NoEncryptionOutput)
}

// Representing supported protocols
func (o NoEncryptionPtrOutput) EnabledProtocols() EnabledProtocolsPtrOutput {
	return o.ApplyT(func(v *NoEncryption) *EnabledProtocols {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(EnabledProtocolsPtrOutput)
}

// Class for NoEncryption scheme
type NoEncryptionResponse struct {
	// Representing supported protocols
	EnabledProtocols *EnabledProtocolsResponse `pulumi:"enabledProtocols"`
}

// NoEncryptionResponseInput is an input type that accepts NoEncryptionResponseArgs and NoEncryptionResponseOutput values.
// You can construct a concrete instance of `NoEncryptionResponseInput` via:
//
//          NoEncryptionResponseArgs{...}
type NoEncryptionResponseInput interface {
	pulumi.Input

	ToNoEncryptionResponseOutput() NoEncryptionResponseOutput
	ToNoEncryptionResponseOutputWithContext(context.Context) NoEncryptionResponseOutput
}

// Class for NoEncryption scheme
type NoEncryptionResponseArgs struct {
	// Representing supported protocols
	EnabledProtocols EnabledProtocolsResponsePtrInput `pulumi:"enabledProtocols"`
}

func (NoEncryptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoEncryptionResponse)(nil)).Elem()
}

func (i NoEncryptionResponseArgs) ToNoEncryptionResponseOutput() NoEncryptionResponseOutput {
	return i.ToNoEncryptionResponseOutputWithContext(context.Background())
}

func (i NoEncryptionResponseArgs) ToNoEncryptionResponseOutputWithContext(ctx context.Context) NoEncryptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoEncryptionResponseOutput)
}

func (i NoEncryptionResponseArgs) ToNoEncryptionResponsePtrOutput() NoEncryptionResponsePtrOutput {
	return i.ToNoEncryptionResponsePtrOutputWithContext(context.Background())
}

func (i NoEncryptionResponseArgs) ToNoEncryptionResponsePtrOutputWithContext(ctx context.Context) NoEncryptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoEncryptionResponseOutput).ToNoEncryptionResponsePtrOutputWithContext(ctx)
}

// NoEncryptionResponsePtrInput is an input type that accepts NoEncryptionResponseArgs, NoEncryptionResponsePtr and NoEncryptionResponsePtrOutput values.
// You can construct a concrete instance of `NoEncryptionResponsePtrInput` via:
//
//          NoEncryptionResponseArgs{...}
//
//  or:
//
//          nil
type NoEncryptionResponsePtrInput interface {
	pulumi.Input

	ToNoEncryptionResponsePtrOutput() NoEncryptionResponsePtrOutput
	ToNoEncryptionResponsePtrOutputWithContext(context.Context) NoEncryptionResponsePtrOutput
}

type noEncryptionResponsePtrType NoEncryptionResponseArgs

func NoEncryptionResponsePtr(v *NoEncryptionResponseArgs) NoEncryptionResponsePtrInput {
	return (*noEncryptionResponsePtrType)(v)
}

func (*noEncryptionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NoEncryptionResponse)(nil)).Elem()
}

func (i *noEncryptionResponsePtrType) ToNoEncryptionResponsePtrOutput() NoEncryptionResponsePtrOutput {
	return i.ToNoEncryptionResponsePtrOutputWithContext(context.Background())
}

func (i *noEncryptionResponsePtrType) ToNoEncryptionResponsePtrOutputWithContext(ctx context.Context) NoEncryptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoEncryptionResponsePtrOutput)
}

// Class for NoEncryption scheme
type NoEncryptionResponseOutput struct{ *pulumi.OutputState }

func (NoEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoEncryptionResponse)(nil)).Elem()
}

func (o NoEncryptionResponseOutput) ToNoEncryptionResponseOutput() NoEncryptionResponseOutput {
	return o
}

func (o NoEncryptionResponseOutput) ToNoEncryptionResponseOutputWithContext(ctx context.Context) NoEncryptionResponseOutput {
	return o
}

func (o NoEncryptionResponseOutput) ToNoEncryptionResponsePtrOutput() NoEncryptionResponsePtrOutput {
	return o.ToNoEncryptionResponsePtrOutputWithContext(context.Background())
}

func (o NoEncryptionResponseOutput) ToNoEncryptionResponsePtrOutputWithContext(ctx context.Context) NoEncryptionResponsePtrOutput {
	return o.ApplyT(func(v NoEncryptionResponse) *NoEncryptionResponse {
		return &v
	}).(NoEncryptionResponsePtrOutput)
}

// Representing supported protocols
func (o NoEncryptionResponseOutput) EnabledProtocols() EnabledProtocolsResponsePtrOutput {
	return o.ApplyT(func(v NoEncryptionResponse) *EnabledProtocolsResponse { return v.EnabledProtocols }).(EnabledProtocolsResponsePtrOutput)
}

type NoEncryptionResponsePtrOutput struct{ *pulumi.OutputState }

func (NoEncryptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NoEncryptionResponse)(nil)).Elem()
}

func (o NoEncryptionResponsePtrOutput) ToNoEncryptionResponsePtrOutput() NoEncryptionResponsePtrOutput {
	return o
}

func (o NoEncryptionResponsePtrOutput) ToNoEncryptionResponsePtrOutputWithContext(ctx context.Context) NoEncryptionResponsePtrOutput {
	return o
}

func (o NoEncryptionResponsePtrOutput) Elem() NoEncryptionResponseOutput {
	return o.ApplyT(func(v *NoEncryptionResponse) NoEncryptionResponse { return *v }).(NoEncryptionResponseOutput)
}

// Representing supported protocols
func (o NoEncryptionResponsePtrOutput) EnabledProtocols() EnabledProtocolsResponsePtrOutput {
	return o.ApplyT(func(v *NoEncryptionResponse) *EnabledProtocolsResponse {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(EnabledProtocolsResponsePtrOutput)
}

// Represents an output file produced.
type OutputFile struct {
	// The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels v1 and v2, and one audio layer with label a1, then an array like '[v1, a1]' tells the encoder to produce an output file with the video track represented by v1 and the audio track represented by a1.
	Labels []string `pulumi:"labels"`
}

// OutputFileInput is an input type that accepts OutputFileArgs and OutputFileOutput values.
// You can construct a concrete instance of `OutputFileInput` via:
//
//          OutputFileArgs{...}
type OutputFileInput interface {
	pulumi.Input

	ToOutputFileOutput() OutputFileOutput
	ToOutputFileOutputWithContext(context.Context) OutputFileOutput
}

// Represents an output file produced.
type OutputFileArgs struct {
	// The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels v1 and v2, and one audio layer with label a1, then an array like '[v1, a1]' tells the encoder to produce an output file with the video track represented by v1 and the audio track represented by a1.
	Labels pulumi.StringArrayInput `pulumi:"labels"`
}

func (OutputFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputFile)(nil)).Elem()
}

func (i OutputFileArgs) ToOutputFileOutput() OutputFileOutput {
	return i.ToOutputFileOutputWithContext(context.Background())
}

func (i OutputFileArgs) ToOutputFileOutputWithContext(ctx context.Context) OutputFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputFileOutput)
}

// OutputFileArrayInput is an input type that accepts OutputFileArray and OutputFileArrayOutput values.
// You can construct a concrete instance of `OutputFileArrayInput` via:
//
//          OutputFileArray{ OutputFileArgs{...} }
type OutputFileArrayInput interface {
	pulumi.Input

	ToOutputFileArrayOutput() OutputFileArrayOutput
	ToOutputFileArrayOutputWithContext(context.Context) OutputFileArrayOutput
}

type OutputFileArray []OutputFileInput

func (OutputFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutputFile)(nil)).Elem()
}

func (i OutputFileArray) ToOutputFileArrayOutput() OutputFileArrayOutput {
	return i.ToOutputFileArrayOutputWithContext(context.Background())
}

func (i OutputFileArray) ToOutputFileArrayOutputWithContext(ctx context.Context) OutputFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputFileArrayOutput)
}

// Represents an output file produced.
type OutputFileOutput struct{ *pulumi.OutputState }

func (OutputFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputFile)(nil)).Elem()
}

func (o OutputFileOutput) ToOutputFileOutput() OutputFileOutput {
	return o
}

func (o OutputFileOutput) ToOutputFileOutputWithContext(ctx context.Context) OutputFileOutput {
	return o
}

// The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels v1 and v2, and one audio layer with label a1, then an array like '[v1, a1]' tells the encoder to produce an output file with the video track represented by v1 and the audio track represented by a1.
func (o OutputFileOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OutputFile) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

type OutputFileArrayOutput struct{ *pulumi.OutputState }

func (OutputFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutputFile)(nil)).Elem()
}

func (o OutputFileArrayOutput) ToOutputFileArrayOutput() OutputFileArrayOutput {
	return o
}

func (o OutputFileArrayOutput) ToOutputFileArrayOutputWithContext(ctx context.Context) OutputFileArrayOutput {
	return o
}

func (o OutputFileArrayOutput) Index(i pulumi.IntInput) OutputFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OutputFile {
		return vs[0].([]OutputFile)[vs[1].(int)]
	}).(OutputFileOutput)
}

// Represents an output file produced.
type OutputFileResponse struct {
	// The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels v1 and v2, and one audio layer with label a1, then an array like '[v1, a1]' tells the encoder to produce an output file with the video track represented by v1 and the audio track represented by a1.
	Labels []string `pulumi:"labels"`
}

// OutputFileResponseInput is an input type that accepts OutputFileResponseArgs and OutputFileResponseOutput values.
// You can construct a concrete instance of `OutputFileResponseInput` via:
//
//          OutputFileResponseArgs{...}
type OutputFileResponseInput interface {
	pulumi.Input

	ToOutputFileResponseOutput() OutputFileResponseOutput
	ToOutputFileResponseOutputWithContext(context.Context) OutputFileResponseOutput
}

// Represents an output file produced.
type OutputFileResponseArgs struct {
	// The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels v1 and v2, and one audio layer with label a1, then an array like '[v1, a1]' tells the encoder to produce an output file with the video track represented by v1 and the audio track represented by a1.
	Labels pulumi.StringArrayInput `pulumi:"labels"`
}

func (OutputFileResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputFileResponse)(nil)).Elem()
}

func (i OutputFileResponseArgs) ToOutputFileResponseOutput() OutputFileResponseOutput {
	return i.ToOutputFileResponseOutputWithContext(context.Background())
}

func (i OutputFileResponseArgs) ToOutputFileResponseOutputWithContext(ctx context.Context) OutputFileResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputFileResponseOutput)
}

// OutputFileResponseArrayInput is an input type that accepts OutputFileResponseArray and OutputFileResponseArrayOutput values.
// You can construct a concrete instance of `OutputFileResponseArrayInput` via:
//
//          OutputFileResponseArray{ OutputFileResponseArgs{...} }
type OutputFileResponseArrayInput interface {
	pulumi.Input

	ToOutputFileResponseArrayOutput() OutputFileResponseArrayOutput
	ToOutputFileResponseArrayOutputWithContext(context.Context) OutputFileResponseArrayOutput
}

type OutputFileResponseArray []OutputFileResponseInput

func (OutputFileResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutputFileResponse)(nil)).Elem()
}

func (i OutputFileResponseArray) ToOutputFileResponseArrayOutput() OutputFileResponseArrayOutput {
	return i.ToOutputFileResponseArrayOutputWithContext(context.Background())
}

func (i OutputFileResponseArray) ToOutputFileResponseArrayOutputWithContext(ctx context.Context) OutputFileResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputFileResponseArrayOutput)
}

// Represents an output file produced.
type OutputFileResponseOutput struct{ *pulumi.OutputState }

func (OutputFileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputFileResponse)(nil)).Elem()
}

func (o OutputFileResponseOutput) ToOutputFileResponseOutput() OutputFileResponseOutput {
	return o
}

func (o OutputFileResponseOutput) ToOutputFileResponseOutputWithContext(ctx context.Context) OutputFileResponseOutput {
	return o
}

// The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels v1 and v2, and one audio layer with label a1, then an array like '[v1, a1]' tells the encoder to produce an output file with the video track represented by v1 and the audio track represented by a1.
func (o OutputFileResponseOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OutputFileResponse) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

type OutputFileResponseArrayOutput struct{ *pulumi.OutputState }

func (OutputFileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutputFileResponse)(nil)).Elem()
}

func (o OutputFileResponseArrayOutput) ToOutputFileResponseArrayOutput() OutputFileResponseArrayOutput {
	return o
}

func (o OutputFileResponseArrayOutput) ToOutputFileResponseArrayOutputWithContext(ctx context.Context) OutputFileResponseArrayOutput {
	return o
}

func (o OutputFileResponseArrayOutput) Index(i pulumi.IntInput) OutputFileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OutputFileResponse {
		return vs[0].([]OutputFileResponse)[vs[1].(int)]
	}).(OutputFileResponseOutput)
}

// The presentation time range, this is asset related and not recommended for Account Filter.
type PresentationTimeRange struct {
	// The absolute end time boundary.
	EndTimestamp *int `pulumi:"endTimestamp"`
	// The indicator of forcing existing of end time stamp.
	ForceEndTimestamp *bool `pulumi:"forceEndTimestamp"`
	// The relative to end right edge.
	LiveBackoffDuration *int `pulumi:"liveBackoffDuration"`
	// The relative to end sliding window.
	PresentationWindowDuration *int `pulumi:"presentationWindowDuration"`
	// The absolute start time boundary.
	StartTimestamp *int `pulumi:"startTimestamp"`
	// The time scale of time stamps.
	Timescale *int `pulumi:"timescale"`
}

// PresentationTimeRangeInput is an input type that accepts PresentationTimeRangeArgs and PresentationTimeRangeOutput values.
// You can construct a concrete instance of `PresentationTimeRangeInput` via:
//
//          PresentationTimeRangeArgs{...}
type PresentationTimeRangeInput interface {
	pulumi.Input

	ToPresentationTimeRangeOutput() PresentationTimeRangeOutput
	ToPresentationTimeRangeOutputWithContext(context.Context) PresentationTimeRangeOutput
}

// The presentation time range, this is asset related and not recommended for Account Filter.
type PresentationTimeRangeArgs struct {
	// The absolute end time boundary.
	EndTimestamp pulumi.IntPtrInput `pulumi:"endTimestamp"`
	// The indicator of forcing existing of end time stamp.
	ForceEndTimestamp pulumi.BoolPtrInput `pulumi:"forceEndTimestamp"`
	// The relative to end right edge.
	LiveBackoffDuration pulumi.IntPtrInput `pulumi:"liveBackoffDuration"`
	// The relative to end sliding window.
	PresentationWindowDuration pulumi.IntPtrInput `pulumi:"presentationWindowDuration"`
	// The absolute start time boundary.
	StartTimestamp pulumi.IntPtrInput `pulumi:"startTimestamp"`
	// The time scale of time stamps.
	Timescale pulumi.IntPtrInput `pulumi:"timescale"`
}

func (PresentationTimeRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresentationTimeRange)(nil)).Elem()
}

func (i PresentationTimeRangeArgs) ToPresentationTimeRangeOutput() PresentationTimeRangeOutput {
	return i.ToPresentationTimeRangeOutputWithContext(context.Background())
}

func (i PresentationTimeRangeArgs) ToPresentationTimeRangeOutputWithContext(ctx context.Context) PresentationTimeRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresentationTimeRangeOutput)
}

func (i PresentationTimeRangeArgs) ToPresentationTimeRangePtrOutput() PresentationTimeRangePtrOutput {
	return i.ToPresentationTimeRangePtrOutputWithContext(context.Background())
}

func (i PresentationTimeRangeArgs) ToPresentationTimeRangePtrOutputWithContext(ctx context.Context) PresentationTimeRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresentationTimeRangeOutput).ToPresentationTimeRangePtrOutputWithContext(ctx)
}

// PresentationTimeRangePtrInput is an input type that accepts PresentationTimeRangeArgs, PresentationTimeRangePtr and PresentationTimeRangePtrOutput values.
// You can construct a concrete instance of `PresentationTimeRangePtrInput` via:
//
//          PresentationTimeRangeArgs{...}
//
//  or:
//
//          nil
type PresentationTimeRangePtrInput interface {
	pulumi.Input

	ToPresentationTimeRangePtrOutput() PresentationTimeRangePtrOutput
	ToPresentationTimeRangePtrOutputWithContext(context.Context) PresentationTimeRangePtrOutput
}

type presentationTimeRangePtrType PresentationTimeRangeArgs

func PresentationTimeRangePtr(v *PresentationTimeRangeArgs) PresentationTimeRangePtrInput {
	return (*presentationTimeRangePtrType)(v)
}

func (*presentationTimeRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PresentationTimeRange)(nil)).Elem()
}

func (i *presentationTimeRangePtrType) ToPresentationTimeRangePtrOutput() PresentationTimeRangePtrOutput {
	return i.ToPresentationTimeRangePtrOutputWithContext(context.Background())
}

func (i *presentationTimeRangePtrType) ToPresentationTimeRangePtrOutputWithContext(ctx context.Context) PresentationTimeRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresentationTimeRangePtrOutput)
}

// The presentation time range, this is asset related and not recommended for Account Filter.
type PresentationTimeRangeOutput struct{ *pulumi.OutputState }

func (PresentationTimeRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresentationTimeRange)(nil)).Elem()
}

func (o PresentationTimeRangeOutput) ToPresentationTimeRangeOutput() PresentationTimeRangeOutput {
	return o
}

func (o PresentationTimeRangeOutput) ToPresentationTimeRangeOutputWithContext(ctx context.Context) PresentationTimeRangeOutput {
	return o
}

func (o PresentationTimeRangeOutput) ToPresentationTimeRangePtrOutput() PresentationTimeRangePtrOutput {
	return o.ToPresentationTimeRangePtrOutputWithContext(context.Background())
}

func (o PresentationTimeRangeOutput) ToPresentationTimeRangePtrOutputWithContext(ctx context.Context) PresentationTimeRangePtrOutput {
	return o.ApplyT(func(v PresentationTimeRange) *PresentationTimeRange {
		return &v
	}).(PresentationTimeRangePtrOutput)
}

// The absolute end time boundary.
func (o PresentationTimeRangeOutput) EndTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRange) *int { return v.EndTimestamp }).(pulumi.IntPtrOutput)
}

// The indicator of forcing existing of end time stamp.
func (o PresentationTimeRangeOutput) ForceEndTimestamp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PresentationTimeRange) *bool { return v.ForceEndTimestamp }).(pulumi.BoolPtrOutput)
}

// The relative to end right edge.
func (o PresentationTimeRangeOutput) LiveBackoffDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRange) *int { return v.LiveBackoffDuration }).(pulumi.IntPtrOutput)
}

// The relative to end sliding window.
func (o PresentationTimeRangeOutput) PresentationWindowDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRange) *int { return v.PresentationWindowDuration }).(pulumi.IntPtrOutput)
}

// The absolute start time boundary.
func (o PresentationTimeRangeOutput) StartTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRange) *int { return v.StartTimestamp }).(pulumi.IntPtrOutput)
}

// The time scale of time stamps.
func (o PresentationTimeRangeOutput) Timescale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRange) *int { return v.Timescale }).(pulumi.IntPtrOutput)
}

type PresentationTimeRangePtrOutput struct{ *pulumi.OutputState }

func (PresentationTimeRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PresentationTimeRange)(nil)).Elem()
}

func (o PresentationTimeRangePtrOutput) ToPresentationTimeRangePtrOutput() PresentationTimeRangePtrOutput {
	return o
}

func (o PresentationTimeRangePtrOutput) ToPresentationTimeRangePtrOutputWithContext(ctx context.Context) PresentationTimeRangePtrOutput {
	return o
}

func (o PresentationTimeRangePtrOutput) Elem() PresentationTimeRangeOutput {
	return o.ApplyT(func(v *PresentationTimeRange) PresentationTimeRange { return *v }).(PresentationTimeRangeOutput)
}

// The absolute end time boundary.
func (o PresentationTimeRangePtrOutput) EndTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return v.EndTimestamp
	}).(pulumi.IntPtrOutput)
}

// The indicator of forcing existing of end time stamp.
func (o PresentationTimeRangePtrOutput) ForceEndTimestamp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRange) *bool {
		if v == nil {
			return nil
		}
		return v.ForceEndTimestamp
	}).(pulumi.BoolPtrOutput)
}

// The relative to end right edge.
func (o PresentationTimeRangePtrOutput) LiveBackoffDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return v.LiveBackoffDuration
	}).(pulumi.IntPtrOutput)
}

// The relative to end sliding window.
func (o PresentationTimeRangePtrOutput) PresentationWindowDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return v.PresentationWindowDuration
	}).(pulumi.IntPtrOutput)
}

// The absolute start time boundary.
func (o PresentationTimeRangePtrOutput) StartTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return v.StartTimestamp
	}).(pulumi.IntPtrOutput)
}

// The time scale of time stamps.
func (o PresentationTimeRangePtrOutput) Timescale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return v.Timescale
	}).(pulumi.IntPtrOutput)
}

// The presentation time range, this is asset related and not recommended for Account Filter.
type PresentationTimeRangeResponse struct {
	// The absolute end time boundary.
	EndTimestamp *int `pulumi:"endTimestamp"`
	// The indicator of forcing existing of end time stamp.
	ForceEndTimestamp *bool `pulumi:"forceEndTimestamp"`
	// The relative to end right edge.
	LiveBackoffDuration *int `pulumi:"liveBackoffDuration"`
	// The relative to end sliding window.
	PresentationWindowDuration *int `pulumi:"presentationWindowDuration"`
	// The absolute start time boundary.
	StartTimestamp *int `pulumi:"startTimestamp"`
	// The time scale of time stamps.
	Timescale *int `pulumi:"timescale"`
}

// PresentationTimeRangeResponseInput is an input type that accepts PresentationTimeRangeResponseArgs and PresentationTimeRangeResponseOutput values.
// You can construct a concrete instance of `PresentationTimeRangeResponseInput` via:
//
//          PresentationTimeRangeResponseArgs{...}
type PresentationTimeRangeResponseInput interface {
	pulumi.Input

	ToPresentationTimeRangeResponseOutput() PresentationTimeRangeResponseOutput
	ToPresentationTimeRangeResponseOutputWithContext(context.Context) PresentationTimeRangeResponseOutput
}

// The presentation time range, this is asset related and not recommended for Account Filter.
type PresentationTimeRangeResponseArgs struct {
	// The absolute end time boundary.
	EndTimestamp pulumi.IntPtrInput `pulumi:"endTimestamp"`
	// The indicator of forcing existing of end time stamp.
	ForceEndTimestamp pulumi.BoolPtrInput `pulumi:"forceEndTimestamp"`
	// The relative to end right edge.
	LiveBackoffDuration pulumi.IntPtrInput `pulumi:"liveBackoffDuration"`
	// The relative to end sliding window.
	PresentationWindowDuration pulumi.IntPtrInput `pulumi:"presentationWindowDuration"`
	// The absolute start time boundary.
	StartTimestamp pulumi.IntPtrInput `pulumi:"startTimestamp"`
	// The time scale of time stamps.
	Timescale pulumi.IntPtrInput `pulumi:"timescale"`
}

func (PresentationTimeRangeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresentationTimeRangeResponse)(nil)).Elem()
}

func (i PresentationTimeRangeResponseArgs) ToPresentationTimeRangeResponseOutput() PresentationTimeRangeResponseOutput {
	return i.ToPresentationTimeRangeResponseOutputWithContext(context.Background())
}

func (i PresentationTimeRangeResponseArgs) ToPresentationTimeRangeResponseOutputWithContext(ctx context.Context) PresentationTimeRangeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresentationTimeRangeResponseOutput)
}

func (i PresentationTimeRangeResponseArgs) ToPresentationTimeRangeResponsePtrOutput() PresentationTimeRangeResponsePtrOutput {
	return i.ToPresentationTimeRangeResponsePtrOutputWithContext(context.Background())
}

func (i PresentationTimeRangeResponseArgs) ToPresentationTimeRangeResponsePtrOutputWithContext(ctx context.Context) PresentationTimeRangeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresentationTimeRangeResponseOutput).ToPresentationTimeRangeResponsePtrOutputWithContext(ctx)
}

// PresentationTimeRangeResponsePtrInput is an input type that accepts PresentationTimeRangeResponseArgs, PresentationTimeRangeResponsePtr and PresentationTimeRangeResponsePtrOutput values.
// You can construct a concrete instance of `PresentationTimeRangeResponsePtrInput` via:
//
//          PresentationTimeRangeResponseArgs{...}
//
//  or:
//
//          nil
type PresentationTimeRangeResponsePtrInput interface {
	pulumi.Input

	ToPresentationTimeRangeResponsePtrOutput() PresentationTimeRangeResponsePtrOutput
	ToPresentationTimeRangeResponsePtrOutputWithContext(context.Context) PresentationTimeRangeResponsePtrOutput
}

type presentationTimeRangeResponsePtrType PresentationTimeRangeResponseArgs

func PresentationTimeRangeResponsePtr(v *PresentationTimeRangeResponseArgs) PresentationTimeRangeResponsePtrInput {
	return (*presentationTimeRangeResponsePtrType)(v)
}

func (*presentationTimeRangeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PresentationTimeRangeResponse)(nil)).Elem()
}

func (i *presentationTimeRangeResponsePtrType) ToPresentationTimeRangeResponsePtrOutput() PresentationTimeRangeResponsePtrOutput {
	return i.ToPresentationTimeRangeResponsePtrOutputWithContext(context.Background())
}

func (i *presentationTimeRangeResponsePtrType) ToPresentationTimeRangeResponsePtrOutputWithContext(ctx context.Context) PresentationTimeRangeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresentationTimeRangeResponsePtrOutput)
}

// The presentation time range, this is asset related and not recommended for Account Filter.
type PresentationTimeRangeResponseOutput struct{ *pulumi.OutputState }

func (PresentationTimeRangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresentationTimeRangeResponse)(nil)).Elem()
}

func (o PresentationTimeRangeResponseOutput) ToPresentationTimeRangeResponseOutput() PresentationTimeRangeResponseOutput {
	return o
}

func (o PresentationTimeRangeResponseOutput) ToPresentationTimeRangeResponseOutputWithContext(ctx context.Context) PresentationTimeRangeResponseOutput {
	return o
}

func (o PresentationTimeRangeResponseOutput) ToPresentationTimeRangeResponsePtrOutput() PresentationTimeRangeResponsePtrOutput {
	return o.ToPresentationTimeRangeResponsePtrOutputWithContext(context.Background())
}

func (o PresentationTimeRangeResponseOutput) ToPresentationTimeRangeResponsePtrOutputWithContext(ctx context.Context) PresentationTimeRangeResponsePtrOutput {
	return o.ApplyT(func(v PresentationTimeRangeResponse) *PresentationTimeRangeResponse {
		return &v
	}).(PresentationTimeRangeResponsePtrOutput)
}

// The absolute end time boundary.
func (o PresentationTimeRangeResponseOutput) EndTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRangeResponse) *int { return v.EndTimestamp }).(pulumi.IntPtrOutput)
}

// The indicator of forcing existing of end time stamp.
func (o PresentationTimeRangeResponseOutput) ForceEndTimestamp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PresentationTimeRangeResponse) *bool { return v.ForceEndTimestamp }).(pulumi.BoolPtrOutput)
}

// The relative to end right edge.
func (o PresentationTimeRangeResponseOutput) LiveBackoffDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRangeResponse) *int { return v.LiveBackoffDuration }).(pulumi.IntPtrOutput)
}

// The relative to end sliding window.
func (o PresentationTimeRangeResponseOutput) PresentationWindowDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRangeResponse) *int { return v.PresentationWindowDuration }).(pulumi.IntPtrOutput)
}

// The absolute start time boundary.
func (o PresentationTimeRangeResponseOutput) StartTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRangeResponse) *int { return v.StartTimestamp }).(pulumi.IntPtrOutput)
}

// The time scale of time stamps.
func (o PresentationTimeRangeResponseOutput) Timescale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRangeResponse) *int { return v.Timescale }).(pulumi.IntPtrOutput)
}

type PresentationTimeRangeResponsePtrOutput struct{ *pulumi.OutputState }

func (PresentationTimeRangeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PresentationTimeRangeResponse)(nil)).Elem()
}

func (o PresentationTimeRangeResponsePtrOutput) ToPresentationTimeRangeResponsePtrOutput() PresentationTimeRangeResponsePtrOutput {
	return o
}

func (o PresentationTimeRangeResponsePtrOutput) ToPresentationTimeRangeResponsePtrOutputWithContext(ctx context.Context) PresentationTimeRangeResponsePtrOutput {
	return o
}

func (o PresentationTimeRangeResponsePtrOutput) Elem() PresentationTimeRangeResponseOutput {
	return o.ApplyT(func(v *PresentationTimeRangeResponse) PresentationTimeRangeResponse { return *v }).(PresentationTimeRangeResponseOutput)
}

// The absolute end time boundary.
func (o PresentationTimeRangeResponsePtrOutput) EndTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRangeResponse) *int {
		if v == nil {
			return nil
		}
		return v.EndTimestamp
	}).(pulumi.IntPtrOutput)
}

// The indicator of forcing existing of end time stamp.
func (o PresentationTimeRangeResponsePtrOutput) ForceEndTimestamp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRangeResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ForceEndTimestamp
	}).(pulumi.BoolPtrOutput)
}

// The relative to end right edge.
func (o PresentationTimeRangeResponsePtrOutput) LiveBackoffDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRangeResponse) *int {
		if v == nil {
			return nil
		}
		return v.LiveBackoffDuration
	}).(pulumi.IntPtrOutput)
}

// The relative to end sliding window.
func (o PresentationTimeRangeResponsePtrOutput) PresentationWindowDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRangeResponse) *int {
		if v == nil {
			return nil
		}
		return v.PresentationWindowDuration
	}).(pulumi.IntPtrOutput)
}

// The absolute start time boundary.
func (o PresentationTimeRangeResponsePtrOutput) StartTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRangeResponse) *int {
		if v == nil {
			return nil
		}
		return v.StartTimestamp
	}).(pulumi.IntPtrOutput)
}

// The time scale of time stamps.
func (o PresentationTimeRangeResponsePtrOutput) Timescale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRangeResponse) *int {
		if v == nil {
			return nil
		}
		return v.Timescale
	}).(pulumi.IntPtrOutput)
}

// The Private Endpoint resource.
type PrivateEndpointResponse struct {
	// The ARM identifier for Private Endpoint
	Id string `pulumi:"id"`
}

// PrivateEndpointResponseInput is an input type that accepts PrivateEndpointResponseArgs and PrivateEndpointResponseOutput values.
// You can construct a concrete instance of `PrivateEndpointResponseInput` via:
//
//          PrivateEndpointResponseArgs{...}
type PrivateEndpointResponseInput interface {
	pulumi.Input

	ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput
	ToPrivateEndpointResponseOutputWithContext(context.Context) PrivateEndpointResponseOutput
}

// The Private Endpoint resource.
type PrivateEndpointResponseArgs struct {
	// The ARM identifier for Private Endpoint
	Id pulumi.StringInput `pulumi:"id"`
}

func (PrivateEndpointResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return i.ToPrivateEndpointResponseOutputWithContext(context.Background())
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResponseOutput)
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return i.ToPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResponseOutput).ToPrivateEndpointResponsePtrOutputWithContext(ctx)
}

// PrivateEndpointResponsePtrInput is an input type that accepts PrivateEndpointResponseArgs, PrivateEndpointResponsePtr and PrivateEndpointResponsePtrOutput values.
// You can construct a concrete instance of `PrivateEndpointResponsePtrInput` via:
//
//          PrivateEndpointResponseArgs{...}
//
//  or:
//
//          nil
type PrivateEndpointResponsePtrInput interface {
	pulumi.Input

	ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput
	ToPrivateEndpointResponsePtrOutputWithContext(context.Context) PrivateEndpointResponsePtrOutput
}

type privateEndpointResponsePtrType PrivateEndpointResponseArgs

func PrivateEndpointResponsePtr(v *PrivateEndpointResponseArgs) PrivateEndpointResponsePtrInput {
	return (*privateEndpointResponsePtrType)(v)
}

func (*privateEndpointResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (i *privateEndpointResponsePtrType) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return i.ToPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (i *privateEndpointResponsePtrType) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResponsePtrOutput)
}

// The Private Endpoint resource.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o.ToPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) *PrivateEndpointResponse {
		return &v
	}).(PrivateEndpointResponsePtrOutput)
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) string { return v.Id }).(pulumi.StringOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse { return *v }).(PrivateEndpointResponseOutput)
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateInput is an input type that accepts PrivateLinkServiceConnectionStateArgs and PrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateInput` via:
//
//          PrivateLinkServiceConnectionStateArgs{...}
type PrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput
	ToPrivateLinkServiceConnectionStateOutputWithContext(context.Context) PrivateLinkServiceConnectionStateOutput
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateArgs struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return i.ToPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput)
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return i.ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput).ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx)
}

// PrivateLinkServiceConnectionStatePtrInput is an input type that accepts PrivateLinkServiceConnectionStateArgs, PrivateLinkServiceConnectionStatePtr and PrivateLinkServiceConnectionStatePtrOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStatePtrInput` via:
//
//          PrivateLinkServiceConnectionStateArgs{...}
//
//  or:
//
//          nil
type PrivateLinkServiceConnectionStatePtrInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput
	ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Context) PrivateLinkServiceConnectionStatePtrOutput
}

type privateLinkServiceConnectionStatePtrType PrivateLinkServiceConnectionStateArgs

func PrivateLinkServiceConnectionStatePtr(v *PrivateLinkServiceConnectionStateArgs) PrivateLinkServiceConnectionStatePtrInput {
	return (*privateLinkServiceConnectionStatePtrType)(v)
}

func (*privateLinkServiceConnectionStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i *privateLinkServiceConnectionStatePtrType) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return i.ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (i *privateLinkServiceConnectionStatePtrType) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStatePtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return o.ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *PrivateLinkServiceConnectionState {
		return &v
	}).(PrivateLinkServiceConnectionStatePtrOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkServiceConnectionStatePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStatePtrOutput) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStatePtrOutput) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStatePtrOutput) Elem() PrivateLinkServiceConnectionStateOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) PrivateLinkServiceConnectionState { return *v }).(PrivateLinkServiceConnectionStateOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStatePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStatePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStatePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponse struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateResponseInput is an input type that accepts PrivateLinkServiceConnectionStateResponseArgs and PrivateLinkServiceConnectionStateResponseOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateResponseInput` via:
//
//          PrivateLinkServiceConnectionStateResponseArgs{...}
type PrivateLinkServiceConnectionStateResponseInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput
	ToPrivateLinkServiceConnectionStateResponseOutputWithContext(context.Context) PrivateLinkServiceConnectionStateResponseOutput
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponseArgs struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return i.ToPrivateLinkServiceConnectionStateResponseOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateResponseOutput)
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return i.ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateResponseOutput).ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx)
}

// PrivateLinkServiceConnectionStateResponsePtrInput is an input type that accepts PrivateLinkServiceConnectionStateResponseArgs, PrivateLinkServiceConnectionStateResponsePtr and PrivateLinkServiceConnectionStateResponsePtrOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateResponsePtrInput` via:
//
//          PrivateLinkServiceConnectionStateResponseArgs{...}
//
//  or:
//
//          nil
type PrivateLinkServiceConnectionStateResponsePtrInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput
	ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput
}

type privateLinkServiceConnectionStateResponsePtrType PrivateLinkServiceConnectionStateResponseArgs

func PrivateLinkServiceConnectionStateResponsePtr(v *PrivateLinkServiceConnectionStateResponseArgs) PrivateLinkServiceConnectionStateResponsePtrInput {
	return (*privateLinkServiceConnectionStateResponsePtrType)(v)
}

func (*privateLinkServiceConnectionStateResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (i *privateLinkServiceConnectionStateResponsePtrType) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return i.ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Background())
}

func (i *privateLinkServiceConnectionStateResponsePtrType) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateResponsePtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Background())
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *PrivateLinkServiceConnectionStateResponse {
		return &v
	}).(PrivateLinkServiceConnectionStateResponsePtrOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkServiceConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Elem() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) PrivateLinkServiceConnectionStateResponse {
		return *v
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Describes the properties of a rectangular window applied to the input media before processing it.
type Rectangle struct {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	Height *string `pulumi:"height"`
	// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	Left *string `pulumi:"left"`
	// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	Top *string `pulumi:"top"`
	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	Width *string `pulumi:"width"`
}

// RectangleInput is an input type that accepts RectangleArgs and RectangleOutput values.
// You can construct a concrete instance of `RectangleInput` via:
//
//          RectangleArgs{...}
type RectangleInput interface {
	pulumi.Input

	ToRectangleOutput() RectangleOutput
	ToRectangleOutputWithContext(context.Context) RectangleOutput
}

// Describes the properties of a rectangular window applied to the input media before processing it.
type RectangleArgs struct {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	Height pulumi.StringPtrInput `pulumi:"height"`
	// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	Left pulumi.StringPtrInput `pulumi:"left"`
	// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	Top pulumi.StringPtrInput `pulumi:"top"`
	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (RectangleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Rectangle)(nil)).Elem()
}

func (i RectangleArgs) ToRectangleOutput() RectangleOutput {
	return i.ToRectangleOutputWithContext(context.Background())
}

func (i RectangleArgs) ToRectangleOutputWithContext(ctx context.Context) RectangleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RectangleOutput)
}

func (i RectangleArgs) ToRectanglePtrOutput() RectanglePtrOutput {
	return i.ToRectanglePtrOutputWithContext(context.Background())
}

func (i RectangleArgs) ToRectanglePtrOutputWithContext(ctx context.Context) RectanglePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RectangleOutput).ToRectanglePtrOutputWithContext(ctx)
}

// RectanglePtrInput is an input type that accepts RectangleArgs, RectanglePtr and RectanglePtrOutput values.
// You can construct a concrete instance of `RectanglePtrInput` via:
//
//          RectangleArgs{...}
//
//  or:
//
//          nil
type RectanglePtrInput interface {
	pulumi.Input

	ToRectanglePtrOutput() RectanglePtrOutput
	ToRectanglePtrOutputWithContext(context.Context) RectanglePtrOutput
}

type rectanglePtrType RectangleArgs

func RectanglePtr(v *RectangleArgs) RectanglePtrInput {
	return (*rectanglePtrType)(v)
}

func (*rectanglePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Rectangle)(nil)).Elem()
}

func (i *rectanglePtrType) ToRectanglePtrOutput() RectanglePtrOutput {
	return i.ToRectanglePtrOutputWithContext(context.Background())
}

func (i *rectanglePtrType) ToRectanglePtrOutputWithContext(ctx context.Context) RectanglePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RectanglePtrOutput)
}

// Describes the properties of a rectangular window applied to the input media before processing it.
type RectangleOutput struct{ *pulumi.OutputState }

func (RectangleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Rectangle)(nil)).Elem()
}

func (o RectangleOutput) ToRectangleOutput() RectangleOutput {
	return o
}

func (o RectangleOutput) ToRectangleOutputWithContext(ctx context.Context) RectangleOutput {
	return o
}

func (o RectangleOutput) ToRectanglePtrOutput() RectanglePtrOutput {
	return o.ToRectanglePtrOutputWithContext(context.Background())
}

func (o RectangleOutput) ToRectanglePtrOutputWithContext(ctx context.Context) RectanglePtrOutput {
	return o.ApplyT(func(v Rectangle) *Rectangle {
		return &v
	}).(RectanglePtrOutput)
}

// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
func (o RectangleOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Rectangle) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
func (o RectangleOutput) Left() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Rectangle) *string { return v.Left }).(pulumi.StringPtrOutput)
}

// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
func (o RectangleOutput) Top() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Rectangle) *string { return v.Top }).(pulumi.StringPtrOutput)
}

// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
func (o RectangleOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Rectangle) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type RectanglePtrOutput struct{ *pulumi.OutputState }

func (RectanglePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rectangle)(nil)).Elem()
}

func (o RectanglePtrOutput) ToRectanglePtrOutput() RectanglePtrOutput {
	return o
}

func (o RectanglePtrOutput) ToRectanglePtrOutputWithContext(ctx context.Context) RectanglePtrOutput {
	return o
}

func (o RectanglePtrOutput) Elem() RectangleOutput {
	return o.ApplyT(func(v *Rectangle) Rectangle { return *v }).(RectangleOutput)
}

// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
func (o RectanglePtrOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rectangle) *string {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.StringPtrOutput)
}

// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
func (o RectanglePtrOutput) Left() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rectangle) *string {
		if v == nil {
			return nil
		}
		return v.Left
	}).(pulumi.StringPtrOutput)
}

// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
func (o RectanglePtrOutput) Top() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rectangle) *string {
		if v == nil {
			return nil
		}
		return v.Top
	}).(pulumi.StringPtrOutput)
}

// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
func (o RectanglePtrOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rectangle) *string {
		if v == nil {
			return nil
		}
		return v.Width
	}).(pulumi.StringPtrOutput)
}

// Describes the properties of a rectangular window applied to the input media before processing it.
type RectangleResponse struct {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	Height *string `pulumi:"height"`
	// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	Left *string `pulumi:"left"`
	// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	Top *string `pulumi:"top"`
	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	Width *string `pulumi:"width"`
}

// RectangleResponseInput is an input type that accepts RectangleResponseArgs and RectangleResponseOutput values.
// You can construct a concrete instance of `RectangleResponseInput` via:
//
//          RectangleResponseArgs{...}
type RectangleResponseInput interface {
	pulumi.Input

	ToRectangleResponseOutput() RectangleResponseOutput
	ToRectangleResponseOutputWithContext(context.Context) RectangleResponseOutput
}

// Describes the properties of a rectangular window applied to the input media before processing it.
type RectangleResponseArgs struct {
	// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	Height pulumi.StringPtrInput `pulumi:"height"`
	// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	Left pulumi.StringPtrInput `pulumi:"left"`
	// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	Top pulumi.StringPtrInput `pulumi:"top"`
	// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (RectangleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RectangleResponse)(nil)).Elem()
}

func (i RectangleResponseArgs) ToRectangleResponseOutput() RectangleResponseOutput {
	return i.ToRectangleResponseOutputWithContext(context.Background())
}

func (i RectangleResponseArgs) ToRectangleResponseOutputWithContext(ctx context.Context) RectangleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RectangleResponseOutput)
}

func (i RectangleResponseArgs) ToRectangleResponsePtrOutput() RectangleResponsePtrOutput {
	return i.ToRectangleResponsePtrOutputWithContext(context.Background())
}

func (i RectangleResponseArgs) ToRectangleResponsePtrOutputWithContext(ctx context.Context) RectangleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RectangleResponseOutput).ToRectangleResponsePtrOutputWithContext(ctx)
}

// RectangleResponsePtrInput is an input type that accepts RectangleResponseArgs, RectangleResponsePtr and RectangleResponsePtrOutput values.
// You can construct a concrete instance of `RectangleResponsePtrInput` via:
//
//          RectangleResponseArgs{...}
//
//  or:
//
//          nil
type RectangleResponsePtrInput interface {
	pulumi.Input

	ToRectangleResponsePtrOutput() RectangleResponsePtrOutput
	ToRectangleResponsePtrOutputWithContext(context.Context) RectangleResponsePtrOutput
}

type rectangleResponsePtrType RectangleResponseArgs

func RectangleResponsePtr(v *RectangleResponseArgs) RectangleResponsePtrInput {
	return (*rectangleResponsePtrType)(v)
}

func (*rectangleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RectangleResponse)(nil)).Elem()
}

func (i *rectangleResponsePtrType) ToRectangleResponsePtrOutput() RectangleResponsePtrOutput {
	return i.ToRectangleResponsePtrOutputWithContext(context.Background())
}

func (i *rectangleResponsePtrType) ToRectangleResponsePtrOutputWithContext(ctx context.Context) RectangleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RectangleResponsePtrOutput)
}

// Describes the properties of a rectangular window applied to the input media before processing it.
type RectangleResponseOutput struct{ *pulumi.OutputState }

func (RectangleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RectangleResponse)(nil)).Elem()
}

func (o RectangleResponseOutput) ToRectangleResponseOutput() RectangleResponseOutput {
	return o
}

func (o RectangleResponseOutput) ToRectangleResponseOutputWithContext(ctx context.Context) RectangleResponseOutput {
	return o
}

func (o RectangleResponseOutput) ToRectangleResponsePtrOutput() RectangleResponsePtrOutput {
	return o.ToRectangleResponsePtrOutputWithContext(context.Background())
}

func (o RectangleResponseOutput) ToRectangleResponsePtrOutputWithContext(ctx context.Context) RectangleResponsePtrOutput {
	return o.ApplyT(func(v RectangleResponse) *RectangleResponse {
		return &v
	}).(RectangleResponsePtrOutput)
}

// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
func (o RectangleResponseOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RectangleResponse) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
func (o RectangleResponseOutput) Left() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RectangleResponse) *string { return v.Left }).(pulumi.StringPtrOutput)
}

// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
func (o RectangleResponseOutput) Top() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RectangleResponse) *string { return v.Top }).(pulumi.StringPtrOutput)
}

// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
func (o RectangleResponseOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RectangleResponse) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type RectangleResponsePtrOutput struct{ *pulumi.OutputState }

func (RectangleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RectangleResponse)(nil)).Elem()
}

func (o RectangleResponsePtrOutput) ToRectangleResponsePtrOutput() RectangleResponsePtrOutput {
	return o
}

func (o RectangleResponsePtrOutput) ToRectangleResponsePtrOutputWithContext(ctx context.Context) RectangleResponsePtrOutput {
	return o
}

func (o RectangleResponsePtrOutput) Elem() RectangleResponseOutput {
	return o.ApplyT(func(v *RectangleResponse) RectangleResponse { return *v }).(RectangleResponseOutput)
}

// The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
func (o RectangleResponsePtrOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RectangleResponse) *string {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.StringPtrOutput)
}

// The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
func (o RectangleResponsePtrOutput) Left() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RectangleResponse) *string {
		if v == nil {
			return nil
		}
		return v.Left
	}).(pulumi.StringPtrOutput)
}

// The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
func (o RectangleResponsePtrOutput) Top() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RectangleResponse) *string {
		if v == nil {
			return nil
		}
		return v.Top
	}).(pulumi.StringPtrOutput)
}

// The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%).
func (o RectangleResponsePtrOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RectangleResponse) *string {
		if v == nil {
			return nil
		}
		return v.Width
	}).(pulumi.StringPtrOutput)
}

// Describes all the settings to be used when encoding the input video with the Standard Encoder.
type StandardEncoderPreset struct {
	// The list of codecs to be used when encoding the input video.
	Codecs []interface{} `pulumi:"codecs"`
	// One or more filtering operations that are applied to the input media before encoding.
	Filters *Filters `pulumi:"filters"`
	// The list of outputs to be produced by the encoder.
	Formats []interface{} `pulumi:"formats"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// StandardEncoderPresetInput is an input type that accepts StandardEncoderPresetArgs and StandardEncoderPresetOutput values.
// You can construct a concrete instance of `StandardEncoderPresetInput` via:
//
//          StandardEncoderPresetArgs{...}
type StandardEncoderPresetInput interface {
	pulumi.Input

	ToStandardEncoderPresetOutput() StandardEncoderPresetOutput
	ToStandardEncoderPresetOutputWithContext(context.Context) StandardEncoderPresetOutput
}

// Describes all the settings to be used when encoding the input video with the Standard Encoder.
type StandardEncoderPresetArgs struct {
	// The list of codecs to be used when encoding the input video.
	Codecs pulumi.ArrayInput `pulumi:"codecs"`
	// One or more filtering operations that are applied to the input media before encoding.
	Filters FiltersPtrInput `pulumi:"filters"`
	// The list of outputs to be produced by the encoder.
	Formats pulumi.ArrayInput `pulumi:"formats"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (StandardEncoderPresetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardEncoderPreset)(nil)).Elem()
}

func (i StandardEncoderPresetArgs) ToStandardEncoderPresetOutput() StandardEncoderPresetOutput {
	return i.ToStandardEncoderPresetOutputWithContext(context.Background())
}

func (i StandardEncoderPresetArgs) ToStandardEncoderPresetOutputWithContext(ctx context.Context) StandardEncoderPresetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardEncoderPresetOutput)
}

// Describes all the settings to be used when encoding the input video with the Standard Encoder.
type StandardEncoderPresetOutput struct{ *pulumi.OutputState }

func (StandardEncoderPresetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardEncoderPreset)(nil)).Elem()
}

func (o StandardEncoderPresetOutput) ToStandardEncoderPresetOutput() StandardEncoderPresetOutput {
	return o
}

func (o StandardEncoderPresetOutput) ToStandardEncoderPresetOutputWithContext(ctx context.Context) StandardEncoderPresetOutput {
	return o
}

// The list of codecs to be used when encoding the input video.
func (o StandardEncoderPresetOutput) Codecs() pulumi.ArrayOutput {
	return o.ApplyT(func(v StandardEncoderPreset) []interface{} { return v.Codecs }).(pulumi.ArrayOutput)
}

// One or more filtering operations that are applied to the input media before encoding.
func (o StandardEncoderPresetOutput) Filters() FiltersPtrOutput {
	return o.ApplyT(func(v StandardEncoderPreset) *Filters { return v.Filters }).(FiltersPtrOutput)
}

// The list of outputs to be produced by the encoder.
func (o StandardEncoderPresetOutput) Formats() pulumi.ArrayOutput {
	return o.ApplyT(func(v StandardEncoderPreset) []interface{} { return v.Formats }).(pulumi.ArrayOutput)
}

// The discriminator for derived types.
func (o StandardEncoderPresetOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v StandardEncoderPreset) string { return v.OdataType }).(pulumi.StringOutput)
}

// Describes all the settings to be used when encoding the input video with the Standard Encoder.
type StandardEncoderPresetResponse struct {
	// The list of codecs to be used when encoding the input video.
	Codecs []interface{} `pulumi:"codecs"`
	// One or more filtering operations that are applied to the input media before encoding.
	Filters *FiltersResponse `pulumi:"filters"`
	// The list of outputs to be produced by the encoder.
	Formats []interface{} `pulumi:"formats"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// StandardEncoderPresetResponseInput is an input type that accepts StandardEncoderPresetResponseArgs and StandardEncoderPresetResponseOutput values.
// You can construct a concrete instance of `StandardEncoderPresetResponseInput` via:
//
//          StandardEncoderPresetResponseArgs{...}
type StandardEncoderPresetResponseInput interface {
	pulumi.Input

	ToStandardEncoderPresetResponseOutput() StandardEncoderPresetResponseOutput
	ToStandardEncoderPresetResponseOutputWithContext(context.Context) StandardEncoderPresetResponseOutput
}

// Describes all the settings to be used when encoding the input video with the Standard Encoder.
type StandardEncoderPresetResponseArgs struct {
	// The list of codecs to be used when encoding the input video.
	Codecs pulumi.ArrayInput `pulumi:"codecs"`
	// One or more filtering operations that are applied to the input media before encoding.
	Filters FiltersResponsePtrInput `pulumi:"filters"`
	// The list of outputs to be produced by the encoder.
	Formats pulumi.ArrayInput `pulumi:"formats"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (StandardEncoderPresetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardEncoderPresetResponse)(nil)).Elem()
}

func (i StandardEncoderPresetResponseArgs) ToStandardEncoderPresetResponseOutput() StandardEncoderPresetResponseOutput {
	return i.ToStandardEncoderPresetResponseOutputWithContext(context.Background())
}

func (i StandardEncoderPresetResponseArgs) ToStandardEncoderPresetResponseOutputWithContext(ctx context.Context) StandardEncoderPresetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardEncoderPresetResponseOutput)
}

// Describes all the settings to be used when encoding the input video with the Standard Encoder.
type StandardEncoderPresetResponseOutput struct{ *pulumi.OutputState }

func (StandardEncoderPresetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardEncoderPresetResponse)(nil)).Elem()
}

func (o StandardEncoderPresetResponseOutput) ToStandardEncoderPresetResponseOutput() StandardEncoderPresetResponseOutput {
	return o
}

func (o StandardEncoderPresetResponseOutput) ToStandardEncoderPresetResponseOutputWithContext(ctx context.Context) StandardEncoderPresetResponseOutput {
	return o
}

// The list of codecs to be used when encoding the input video.
func (o StandardEncoderPresetResponseOutput) Codecs() pulumi.ArrayOutput {
	return o.ApplyT(func(v StandardEncoderPresetResponse) []interface{} { return v.Codecs }).(pulumi.ArrayOutput)
}

// One or more filtering operations that are applied to the input media before encoding.
func (o StandardEncoderPresetResponseOutput) Filters() FiltersResponsePtrOutput {
	return o.ApplyT(func(v StandardEncoderPresetResponse) *FiltersResponse { return v.Filters }).(FiltersResponsePtrOutput)
}

// The list of outputs to be produced by the encoder.
func (o StandardEncoderPresetResponseOutput) Formats() pulumi.ArrayOutput {
	return o.ApplyT(func(v StandardEncoderPresetResponse) []interface{} { return v.Formats }).(pulumi.ArrayOutput)
}

// The discriminator for derived types.
func (o StandardEncoderPresetResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v StandardEncoderPresetResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// The storage account details.
type StorageAccount struct {
	// The ID of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts.
	Id *string `pulumi:"id"`
	// The type of the storage account.
	Type string `pulumi:"type"`
}

// StorageAccountInput is an input type that accepts StorageAccountArgs and StorageAccountOutput values.
// You can construct a concrete instance of `StorageAccountInput` via:
//
//          StorageAccountArgs{...}
type StorageAccountInput interface {
	pulumi.Input

	ToStorageAccountOutput() StorageAccountOutput
	ToStorageAccountOutputWithContext(context.Context) StorageAccountOutput
}

// The storage account details.
type StorageAccountArgs struct {
	// The ID of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of the storage account.
	Type pulumi.StringInput `pulumi:"type"`
}

func (StorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccount)(nil)).Elem()
}

func (i StorageAccountArgs) ToStorageAccountOutput() StorageAccountOutput {
	return i.ToStorageAccountOutputWithContext(context.Background())
}

func (i StorageAccountArgs) ToStorageAccountOutputWithContext(ctx context.Context) StorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountOutput)
}

// StorageAccountArrayInput is an input type that accepts StorageAccountArray and StorageAccountArrayOutput values.
// You can construct a concrete instance of `StorageAccountArrayInput` via:
//
//          StorageAccountArray{ StorageAccountArgs{...} }
type StorageAccountArrayInput interface {
	pulumi.Input

	ToStorageAccountArrayOutput() StorageAccountArrayOutput
	ToStorageAccountArrayOutputWithContext(context.Context) StorageAccountArrayOutput
}

type StorageAccountArray []StorageAccountInput

func (StorageAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccount)(nil)).Elem()
}

func (i StorageAccountArray) ToStorageAccountArrayOutput() StorageAccountArrayOutput {
	return i.ToStorageAccountArrayOutputWithContext(context.Background())
}

func (i StorageAccountArray) ToStorageAccountArrayOutputWithContext(ctx context.Context) StorageAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountArrayOutput)
}

// The storage account details.
type StorageAccountOutput struct{ *pulumi.OutputState }

func (StorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccount)(nil)).Elem()
}

func (o StorageAccountOutput) ToStorageAccountOutput() StorageAccountOutput {
	return o
}

func (o StorageAccountOutput) ToStorageAccountOutputWithContext(ctx context.Context) StorageAccountOutput {
	return o
}

// The ID of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts.
func (o StorageAccountOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccount) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of the storage account.
func (o StorageAccountOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StorageAccount) string { return v.Type }).(pulumi.StringOutput)
}

type StorageAccountArrayOutput struct{ *pulumi.OutputState }

func (StorageAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccount)(nil)).Elem()
}

func (o StorageAccountArrayOutput) ToStorageAccountArrayOutput() StorageAccountArrayOutput {
	return o
}

func (o StorageAccountArrayOutput) ToStorageAccountArrayOutputWithContext(ctx context.Context) StorageAccountArrayOutput {
	return o
}

func (o StorageAccountArrayOutput) Index(i pulumi.IntInput) StorageAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageAccount {
		return vs[0].([]StorageAccount)[vs[1].(int)]
	}).(StorageAccountOutput)
}

// The storage account details.
type StorageAccountResponse struct {
	// The ID of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts.
	Id *string `pulumi:"id"`
	// The type of the storage account.
	Type string `pulumi:"type"`
}

// StorageAccountResponseInput is an input type that accepts StorageAccountResponseArgs and StorageAccountResponseOutput values.
// You can construct a concrete instance of `StorageAccountResponseInput` via:
//
//          StorageAccountResponseArgs{...}
type StorageAccountResponseInput interface {
	pulumi.Input

	ToStorageAccountResponseOutput() StorageAccountResponseOutput
	ToStorageAccountResponseOutputWithContext(context.Context) StorageAccountResponseOutput
}

// The storage account details.
type StorageAccountResponseArgs struct {
	// The ID of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of the storage account.
	Type pulumi.StringInput `pulumi:"type"`
}

func (StorageAccountResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountResponse)(nil)).Elem()
}

func (i StorageAccountResponseArgs) ToStorageAccountResponseOutput() StorageAccountResponseOutput {
	return i.ToStorageAccountResponseOutputWithContext(context.Background())
}

func (i StorageAccountResponseArgs) ToStorageAccountResponseOutputWithContext(ctx context.Context) StorageAccountResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountResponseOutput)
}

// StorageAccountResponseArrayInput is an input type that accepts StorageAccountResponseArray and StorageAccountResponseArrayOutput values.
// You can construct a concrete instance of `StorageAccountResponseArrayInput` via:
//
//          StorageAccountResponseArray{ StorageAccountResponseArgs{...} }
type StorageAccountResponseArrayInput interface {
	pulumi.Input

	ToStorageAccountResponseArrayOutput() StorageAccountResponseArrayOutput
	ToStorageAccountResponseArrayOutputWithContext(context.Context) StorageAccountResponseArrayOutput
}

type StorageAccountResponseArray []StorageAccountResponseInput

func (StorageAccountResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccountResponse)(nil)).Elem()
}

func (i StorageAccountResponseArray) ToStorageAccountResponseArrayOutput() StorageAccountResponseArrayOutput {
	return i.ToStorageAccountResponseArrayOutputWithContext(context.Background())
}

func (i StorageAccountResponseArray) ToStorageAccountResponseArrayOutputWithContext(ctx context.Context) StorageAccountResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountResponseArrayOutput)
}

// The storage account details.
type StorageAccountResponseOutput struct{ *pulumi.OutputState }

func (StorageAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountResponse)(nil)).Elem()
}

func (o StorageAccountResponseOutput) ToStorageAccountResponseOutput() StorageAccountResponseOutput {
	return o
}

func (o StorageAccountResponseOutput) ToStorageAccountResponseOutputWithContext(ctx context.Context) StorageAccountResponseOutput {
	return o
}

// The ID of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts.
func (o StorageAccountResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccountResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of the storage account.
func (o StorageAccountResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StorageAccountResponse) string { return v.Type }).(pulumi.StringOutput)
}

type StorageAccountResponseArrayOutput struct{ *pulumi.OutputState }

func (StorageAccountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccountResponse)(nil)).Elem()
}

func (o StorageAccountResponseArrayOutput) ToStorageAccountResponseArrayOutput() StorageAccountResponseArrayOutput {
	return o
}

func (o StorageAccountResponseArrayOutput) ToStorageAccountResponseArrayOutputWithContext(ctx context.Context) StorageAccountResponseArrayOutput {
	return o
}

func (o StorageAccountResponseArrayOutput) Index(i pulumi.IntInput) StorageAccountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageAccountResponse {
		return vs[0].([]StorageAccountResponse)[vs[1].(int)]
	}).(StorageAccountResponseOutput)
}

// Streaming endpoint access control definition.
type StreamingEndpointAccessControl struct {
	// The access control of Akamai
	Akamai *AkamaiAccessControl `pulumi:"akamai"`
	// The IP access control of the streaming endpoint.
	Ip *IPAccessControl `pulumi:"ip"`
}

// StreamingEndpointAccessControlInput is an input type that accepts StreamingEndpointAccessControlArgs and StreamingEndpointAccessControlOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlInput` via:
//
//          StreamingEndpointAccessControlArgs{...}
type StreamingEndpointAccessControlInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlOutput() StreamingEndpointAccessControlOutput
	ToStreamingEndpointAccessControlOutputWithContext(context.Context) StreamingEndpointAccessControlOutput
}

// Streaming endpoint access control definition.
type StreamingEndpointAccessControlArgs struct {
	// The access control of Akamai
	Akamai AkamaiAccessControlPtrInput `pulumi:"akamai"`
	// The IP access control of the streaming endpoint.
	Ip IPAccessControlPtrInput `pulumi:"ip"`
}

func (StreamingEndpointAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControl)(nil)).Elem()
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlOutput() StreamingEndpointAccessControlOutput {
	return i.ToStreamingEndpointAccessControlOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlOutputWithContext(ctx context.Context) StreamingEndpointAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlOutput)
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return i.ToStreamingEndpointAccessControlPtrOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlOutput).ToStreamingEndpointAccessControlPtrOutputWithContext(ctx)
}

// StreamingEndpointAccessControlPtrInput is an input type that accepts StreamingEndpointAccessControlArgs, StreamingEndpointAccessControlPtr and StreamingEndpointAccessControlPtrOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlPtrInput` via:
//
//          StreamingEndpointAccessControlArgs{...}
//
//  or:
//
//          nil
type StreamingEndpointAccessControlPtrInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput
	ToStreamingEndpointAccessControlPtrOutputWithContext(context.Context) StreamingEndpointAccessControlPtrOutput
}

type streamingEndpointAccessControlPtrType StreamingEndpointAccessControlArgs

func StreamingEndpointAccessControlPtr(v *StreamingEndpointAccessControlArgs) StreamingEndpointAccessControlPtrInput {
	return (*streamingEndpointAccessControlPtrType)(v)
}

func (*streamingEndpointAccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointAccessControl)(nil)).Elem()
}

func (i *streamingEndpointAccessControlPtrType) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return i.ToStreamingEndpointAccessControlPtrOutputWithContext(context.Background())
}

func (i *streamingEndpointAccessControlPtrType) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlPtrOutput)
}

// Streaming endpoint access control definition.
type StreamingEndpointAccessControlOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControl)(nil)).Elem()
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlOutput() StreamingEndpointAccessControlOutput {
	return o
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlOutputWithContext(ctx context.Context) StreamingEndpointAccessControlOutput {
	return o
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return o.ToStreamingEndpointAccessControlPtrOutputWithContext(context.Background())
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControl) *StreamingEndpointAccessControl {
		return &v
	}).(StreamingEndpointAccessControlPtrOutput)
}

// The access control of Akamai
func (o StreamingEndpointAccessControlOutput) Akamai() AkamaiAccessControlPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControl) *AkamaiAccessControl { return v.Akamai }).(AkamaiAccessControlPtrOutput)
}

// The IP access control of the streaming endpoint.
func (o StreamingEndpointAccessControlOutput) Ip() IPAccessControlPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControl) *IPAccessControl { return v.Ip }).(IPAccessControlPtrOutput)
}

type StreamingEndpointAccessControlPtrOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointAccessControl)(nil)).Elem()
}

func (o StreamingEndpointAccessControlPtrOutput) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return o
}

func (o StreamingEndpointAccessControlPtrOutput) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return o
}

func (o StreamingEndpointAccessControlPtrOutput) Elem() StreamingEndpointAccessControlOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControl) StreamingEndpointAccessControl { return *v }).(StreamingEndpointAccessControlOutput)
}

// The access control of Akamai
func (o StreamingEndpointAccessControlPtrOutput) Akamai() AkamaiAccessControlPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControl) *AkamaiAccessControl {
		if v == nil {
			return nil
		}
		return v.Akamai
	}).(AkamaiAccessControlPtrOutput)
}

// The IP access control of the streaming endpoint.
func (o StreamingEndpointAccessControlPtrOutput) Ip() IPAccessControlPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControl) *IPAccessControl {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(IPAccessControlPtrOutput)
}

// Streaming endpoint access control definition.
type StreamingEndpointAccessControlResponse struct {
	// The access control of Akamai
	Akamai *AkamaiAccessControlResponse `pulumi:"akamai"`
	// The IP access control of the streaming endpoint.
	Ip *IPAccessControlResponse `pulumi:"ip"`
}

// StreamingEndpointAccessControlResponseInput is an input type that accepts StreamingEndpointAccessControlResponseArgs and StreamingEndpointAccessControlResponseOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlResponseInput` via:
//
//          StreamingEndpointAccessControlResponseArgs{...}
type StreamingEndpointAccessControlResponseInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlResponseOutput() StreamingEndpointAccessControlResponseOutput
	ToStreamingEndpointAccessControlResponseOutputWithContext(context.Context) StreamingEndpointAccessControlResponseOutput
}

// Streaming endpoint access control definition.
type StreamingEndpointAccessControlResponseArgs struct {
	// The access control of Akamai
	Akamai AkamaiAccessControlResponsePtrInput `pulumi:"akamai"`
	// The IP access control of the streaming endpoint.
	Ip IPAccessControlResponsePtrInput `pulumi:"ip"`
}

func (StreamingEndpointAccessControlResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControlResponse)(nil)).Elem()
}

func (i StreamingEndpointAccessControlResponseArgs) ToStreamingEndpointAccessControlResponseOutput() StreamingEndpointAccessControlResponseOutput {
	return i.ToStreamingEndpointAccessControlResponseOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlResponseArgs) ToStreamingEndpointAccessControlResponseOutputWithContext(ctx context.Context) StreamingEndpointAccessControlResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlResponseOutput)
}

func (i StreamingEndpointAccessControlResponseArgs) ToStreamingEndpointAccessControlResponsePtrOutput() StreamingEndpointAccessControlResponsePtrOutput {
	return i.ToStreamingEndpointAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlResponseArgs) ToStreamingEndpointAccessControlResponsePtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlResponseOutput).ToStreamingEndpointAccessControlResponsePtrOutputWithContext(ctx)
}

// StreamingEndpointAccessControlResponsePtrInput is an input type that accepts StreamingEndpointAccessControlResponseArgs, StreamingEndpointAccessControlResponsePtr and StreamingEndpointAccessControlResponsePtrOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlResponsePtrInput` via:
//
//          StreamingEndpointAccessControlResponseArgs{...}
//
//  or:
//
//          nil
type StreamingEndpointAccessControlResponsePtrInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlResponsePtrOutput() StreamingEndpointAccessControlResponsePtrOutput
	ToStreamingEndpointAccessControlResponsePtrOutputWithContext(context.Context) StreamingEndpointAccessControlResponsePtrOutput
}

type streamingEndpointAccessControlResponsePtrType StreamingEndpointAccessControlResponseArgs

func StreamingEndpointAccessControlResponsePtr(v *StreamingEndpointAccessControlResponseArgs) StreamingEndpointAccessControlResponsePtrInput {
	return (*streamingEndpointAccessControlResponsePtrType)(v)
}

func (*streamingEndpointAccessControlResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointAccessControlResponse)(nil)).Elem()
}

func (i *streamingEndpointAccessControlResponsePtrType) ToStreamingEndpointAccessControlResponsePtrOutput() StreamingEndpointAccessControlResponsePtrOutput {
	return i.ToStreamingEndpointAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i *streamingEndpointAccessControlResponsePtrType) ToStreamingEndpointAccessControlResponsePtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlResponsePtrOutput)
}

// Streaming endpoint access control definition.
type StreamingEndpointAccessControlResponseOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControlResponse)(nil)).Elem()
}

func (o StreamingEndpointAccessControlResponseOutput) ToStreamingEndpointAccessControlResponseOutput() StreamingEndpointAccessControlResponseOutput {
	return o
}

func (o StreamingEndpointAccessControlResponseOutput) ToStreamingEndpointAccessControlResponseOutputWithContext(ctx context.Context) StreamingEndpointAccessControlResponseOutput {
	return o
}

func (o StreamingEndpointAccessControlResponseOutput) ToStreamingEndpointAccessControlResponsePtrOutput() StreamingEndpointAccessControlResponsePtrOutput {
	return o.ToStreamingEndpointAccessControlResponsePtrOutputWithContext(context.Background())
}

func (o StreamingEndpointAccessControlResponseOutput) ToStreamingEndpointAccessControlResponsePtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlResponsePtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlResponse) *StreamingEndpointAccessControlResponse {
		return &v
	}).(StreamingEndpointAccessControlResponsePtrOutput)
}

// The access control of Akamai
func (o StreamingEndpointAccessControlResponseOutput) Akamai() AkamaiAccessControlResponsePtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlResponse) *AkamaiAccessControlResponse { return v.Akamai }).(AkamaiAccessControlResponsePtrOutput)
}

// The IP access control of the streaming endpoint.
func (o StreamingEndpointAccessControlResponseOutput) Ip() IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlResponse) *IPAccessControlResponse { return v.Ip }).(IPAccessControlResponsePtrOutput)
}

type StreamingEndpointAccessControlResponsePtrOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointAccessControlResponse)(nil)).Elem()
}

func (o StreamingEndpointAccessControlResponsePtrOutput) ToStreamingEndpointAccessControlResponsePtrOutput() StreamingEndpointAccessControlResponsePtrOutput {
	return o
}

func (o StreamingEndpointAccessControlResponsePtrOutput) ToStreamingEndpointAccessControlResponsePtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlResponsePtrOutput {
	return o
}

func (o StreamingEndpointAccessControlResponsePtrOutput) Elem() StreamingEndpointAccessControlResponseOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControlResponse) StreamingEndpointAccessControlResponse { return *v }).(StreamingEndpointAccessControlResponseOutput)
}

// The access control of Akamai
func (o StreamingEndpointAccessControlResponsePtrOutput) Akamai() AkamaiAccessControlResponsePtrOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControlResponse) *AkamaiAccessControlResponse {
		if v == nil {
			return nil
		}
		return v.Akamai
	}).(AkamaiAccessControlResponsePtrOutput)
}

// The IP access control of the streaming endpoint.
func (o StreamingEndpointAccessControlResponsePtrOutput) Ip() IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControlResponse) *IPAccessControlResponse {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(IPAccessControlResponsePtrOutput)
}

// Class for content key in Streaming Locator
type StreamingLocatorContentKey struct {
	// ID of Content Key
	Id string `pulumi:"id"`
	// Label of Content Key as specified in the Streaming Policy
	LabelReferenceInStreamingPolicy *string `pulumi:"labelReferenceInStreamingPolicy"`
	// Value of Content Key
	Value *string `pulumi:"value"`
}

// StreamingLocatorContentKeyInput is an input type that accepts StreamingLocatorContentKeyArgs and StreamingLocatorContentKeyOutput values.
// You can construct a concrete instance of `StreamingLocatorContentKeyInput` via:
//
//          StreamingLocatorContentKeyArgs{...}
type StreamingLocatorContentKeyInput interface {
	pulumi.Input

	ToStreamingLocatorContentKeyOutput() StreamingLocatorContentKeyOutput
	ToStreamingLocatorContentKeyOutputWithContext(context.Context) StreamingLocatorContentKeyOutput
}

// Class for content key in Streaming Locator
type StreamingLocatorContentKeyArgs struct {
	// ID of Content Key
	Id pulumi.StringInput `pulumi:"id"`
	// Label of Content Key as specified in the Streaming Policy
	LabelReferenceInStreamingPolicy pulumi.StringPtrInput `pulumi:"labelReferenceInStreamingPolicy"`
	// Value of Content Key
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (StreamingLocatorContentKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingLocatorContentKey)(nil)).Elem()
}

func (i StreamingLocatorContentKeyArgs) ToStreamingLocatorContentKeyOutput() StreamingLocatorContentKeyOutput {
	return i.ToStreamingLocatorContentKeyOutputWithContext(context.Background())
}

func (i StreamingLocatorContentKeyArgs) ToStreamingLocatorContentKeyOutputWithContext(ctx context.Context) StreamingLocatorContentKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingLocatorContentKeyOutput)
}

// StreamingLocatorContentKeyArrayInput is an input type that accepts StreamingLocatorContentKeyArray and StreamingLocatorContentKeyArrayOutput values.
// You can construct a concrete instance of `StreamingLocatorContentKeyArrayInput` via:
//
//          StreamingLocatorContentKeyArray{ StreamingLocatorContentKeyArgs{...} }
type StreamingLocatorContentKeyArrayInput interface {
	pulumi.Input

	ToStreamingLocatorContentKeyArrayOutput() StreamingLocatorContentKeyArrayOutput
	ToStreamingLocatorContentKeyArrayOutputWithContext(context.Context) StreamingLocatorContentKeyArrayOutput
}

type StreamingLocatorContentKeyArray []StreamingLocatorContentKeyInput

func (StreamingLocatorContentKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingLocatorContentKey)(nil)).Elem()
}

func (i StreamingLocatorContentKeyArray) ToStreamingLocatorContentKeyArrayOutput() StreamingLocatorContentKeyArrayOutput {
	return i.ToStreamingLocatorContentKeyArrayOutputWithContext(context.Background())
}

func (i StreamingLocatorContentKeyArray) ToStreamingLocatorContentKeyArrayOutputWithContext(ctx context.Context) StreamingLocatorContentKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingLocatorContentKeyArrayOutput)
}

// Class for content key in Streaming Locator
type StreamingLocatorContentKeyOutput struct{ *pulumi.OutputState }

func (StreamingLocatorContentKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingLocatorContentKey)(nil)).Elem()
}

func (o StreamingLocatorContentKeyOutput) ToStreamingLocatorContentKeyOutput() StreamingLocatorContentKeyOutput {
	return o
}

func (o StreamingLocatorContentKeyOutput) ToStreamingLocatorContentKeyOutputWithContext(ctx context.Context) StreamingLocatorContentKeyOutput {
	return o
}

// ID of Content Key
func (o StreamingLocatorContentKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingLocatorContentKey) string { return v.Id }).(pulumi.StringOutput)
}

// Label of Content Key as specified in the Streaming Policy
func (o StreamingLocatorContentKeyOutput) LabelReferenceInStreamingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorContentKey) *string { return v.LabelReferenceInStreamingPolicy }).(pulumi.StringPtrOutput)
}

// Value of Content Key
func (o StreamingLocatorContentKeyOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorContentKey) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type StreamingLocatorContentKeyArrayOutput struct{ *pulumi.OutputState }

func (StreamingLocatorContentKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingLocatorContentKey)(nil)).Elem()
}

func (o StreamingLocatorContentKeyArrayOutput) ToStreamingLocatorContentKeyArrayOutput() StreamingLocatorContentKeyArrayOutput {
	return o
}

func (o StreamingLocatorContentKeyArrayOutput) ToStreamingLocatorContentKeyArrayOutputWithContext(ctx context.Context) StreamingLocatorContentKeyArrayOutput {
	return o
}

func (o StreamingLocatorContentKeyArrayOutput) Index(i pulumi.IntInput) StreamingLocatorContentKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingLocatorContentKey {
		return vs[0].([]StreamingLocatorContentKey)[vs[1].(int)]
	}).(StreamingLocatorContentKeyOutput)
}

// Class for content key in Streaming Locator
type StreamingLocatorContentKeyResponse struct {
	// ID of Content Key
	Id string `pulumi:"id"`
	// Label of Content Key as specified in the Streaming Policy
	LabelReferenceInStreamingPolicy *string `pulumi:"labelReferenceInStreamingPolicy"`
	// ContentKeyPolicy used by Content Key
	PolicyName string `pulumi:"policyName"`
	// Tracks which use this Content Key
	Tracks []TrackSelectionResponse `pulumi:"tracks"`
	// Encryption type of Content Key
	Type string `pulumi:"type"`
	// Value of Content Key
	Value *string `pulumi:"value"`
}

// StreamingLocatorContentKeyResponseInput is an input type that accepts StreamingLocatorContentKeyResponseArgs and StreamingLocatorContentKeyResponseOutput values.
// You can construct a concrete instance of `StreamingLocatorContentKeyResponseInput` via:
//
//          StreamingLocatorContentKeyResponseArgs{...}
type StreamingLocatorContentKeyResponseInput interface {
	pulumi.Input

	ToStreamingLocatorContentKeyResponseOutput() StreamingLocatorContentKeyResponseOutput
	ToStreamingLocatorContentKeyResponseOutputWithContext(context.Context) StreamingLocatorContentKeyResponseOutput
}

// Class for content key in Streaming Locator
type StreamingLocatorContentKeyResponseArgs struct {
	// ID of Content Key
	Id pulumi.StringInput `pulumi:"id"`
	// Label of Content Key as specified in the Streaming Policy
	LabelReferenceInStreamingPolicy pulumi.StringPtrInput `pulumi:"labelReferenceInStreamingPolicy"`
	// ContentKeyPolicy used by Content Key
	PolicyName pulumi.StringInput `pulumi:"policyName"`
	// Tracks which use this Content Key
	Tracks TrackSelectionResponseArrayInput `pulumi:"tracks"`
	// Encryption type of Content Key
	Type pulumi.StringInput `pulumi:"type"`
	// Value of Content Key
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (StreamingLocatorContentKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingLocatorContentKeyResponse)(nil)).Elem()
}

func (i StreamingLocatorContentKeyResponseArgs) ToStreamingLocatorContentKeyResponseOutput() StreamingLocatorContentKeyResponseOutput {
	return i.ToStreamingLocatorContentKeyResponseOutputWithContext(context.Background())
}

func (i StreamingLocatorContentKeyResponseArgs) ToStreamingLocatorContentKeyResponseOutputWithContext(ctx context.Context) StreamingLocatorContentKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingLocatorContentKeyResponseOutput)
}

// StreamingLocatorContentKeyResponseArrayInput is an input type that accepts StreamingLocatorContentKeyResponseArray and StreamingLocatorContentKeyResponseArrayOutput values.
// You can construct a concrete instance of `StreamingLocatorContentKeyResponseArrayInput` via:
//
//          StreamingLocatorContentKeyResponseArray{ StreamingLocatorContentKeyResponseArgs{...} }
type StreamingLocatorContentKeyResponseArrayInput interface {
	pulumi.Input

	ToStreamingLocatorContentKeyResponseArrayOutput() StreamingLocatorContentKeyResponseArrayOutput
	ToStreamingLocatorContentKeyResponseArrayOutputWithContext(context.Context) StreamingLocatorContentKeyResponseArrayOutput
}

type StreamingLocatorContentKeyResponseArray []StreamingLocatorContentKeyResponseInput

func (StreamingLocatorContentKeyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingLocatorContentKeyResponse)(nil)).Elem()
}

func (i StreamingLocatorContentKeyResponseArray) ToStreamingLocatorContentKeyResponseArrayOutput() StreamingLocatorContentKeyResponseArrayOutput {
	return i.ToStreamingLocatorContentKeyResponseArrayOutputWithContext(context.Background())
}

func (i StreamingLocatorContentKeyResponseArray) ToStreamingLocatorContentKeyResponseArrayOutputWithContext(ctx context.Context) StreamingLocatorContentKeyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingLocatorContentKeyResponseArrayOutput)
}

// Class for content key in Streaming Locator
type StreamingLocatorContentKeyResponseOutput struct{ *pulumi.OutputState }

func (StreamingLocatorContentKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingLocatorContentKeyResponse)(nil)).Elem()
}

func (o StreamingLocatorContentKeyResponseOutput) ToStreamingLocatorContentKeyResponseOutput() StreamingLocatorContentKeyResponseOutput {
	return o
}

func (o StreamingLocatorContentKeyResponseOutput) ToStreamingLocatorContentKeyResponseOutputWithContext(ctx context.Context) StreamingLocatorContentKeyResponseOutput {
	return o
}

// ID of Content Key
func (o StreamingLocatorContentKeyResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingLocatorContentKeyResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Label of Content Key as specified in the Streaming Policy
func (o StreamingLocatorContentKeyResponseOutput) LabelReferenceInStreamingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorContentKeyResponse) *string { return v.LabelReferenceInStreamingPolicy }).(pulumi.StringPtrOutput)
}

// ContentKeyPolicy used by Content Key
func (o StreamingLocatorContentKeyResponseOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingLocatorContentKeyResponse) string { return v.PolicyName }).(pulumi.StringOutput)
}

// Tracks which use this Content Key
func (o StreamingLocatorContentKeyResponseOutput) Tracks() TrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v StreamingLocatorContentKeyResponse) []TrackSelectionResponse { return v.Tracks }).(TrackSelectionResponseArrayOutput)
}

// Encryption type of Content Key
func (o StreamingLocatorContentKeyResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingLocatorContentKeyResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Value of Content Key
func (o StreamingLocatorContentKeyResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorContentKeyResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type StreamingLocatorContentKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (StreamingLocatorContentKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingLocatorContentKeyResponse)(nil)).Elem()
}

func (o StreamingLocatorContentKeyResponseArrayOutput) ToStreamingLocatorContentKeyResponseArrayOutput() StreamingLocatorContentKeyResponseArrayOutput {
	return o
}

func (o StreamingLocatorContentKeyResponseArrayOutput) ToStreamingLocatorContentKeyResponseArrayOutputWithContext(ctx context.Context) StreamingLocatorContentKeyResponseArrayOutput {
	return o
}

func (o StreamingLocatorContentKeyResponseArrayOutput) Index(i pulumi.IntInput) StreamingLocatorContentKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingLocatorContentKeyResponse {
		return vs[0].([]StreamingLocatorContentKeyResponse)[vs[1].(int)]
	}).(StreamingLocatorContentKeyResponseOutput)
}

// Class of paths for streaming
type StreamingPathResponse struct {
	// Encryption scheme
	EncryptionScheme string `pulumi:"encryptionScheme"`
	// Streaming paths for each protocol and encryptionScheme pair
	Paths []string `pulumi:"paths"`
	// Streaming protocol
	StreamingProtocol string `pulumi:"streamingProtocol"`
}

// StreamingPathResponseInput is an input type that accepts StreamingPathResponseArgs and StreamingPathResponseOutput values.
// You can construct a concrete instance of `StreamingPathResponseInput` via:
//
//          StreamingPathResponseArgs{...}
type StreamingPathResponseInput interface {
	pulumi.Input

	ToStreamingPathResponseOutput() StreamingPathResponseOutput
	ToStreamingPathResponseOutputWithContext(context.Context) StreamingPathResponseOutput
}

// Class of paths for streaming
type StreamingPathResponseArgs struct {
	// Encryption scheme
	EncryptionScheme pulumi.StringInput `pulumi:"encryptionScheme"`
	// Streaming paths for each protocol and encryptionScheme pair
	Paths pulumi.StringArrayInput `pulumi:"paths"`
	// Streaming protocol
	StreamingProtocol pulumi.StringInput `pulumi:"streamingProtocol"`
}

func (StreamingPathResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPathResponse)(nil)).Elem()
}

func (i StreamingPathResponseArgs) ToStreamingPathResponseOutput() StreamingPathResponseOutput {
	return i.ToStreamingPathResponseOutputWithContext(context.Background())
}

func (i StreamingPathResponseArgs) ToStreamingPathResponseOutputWithContext(ctx context.Context) StreamingPathResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPathResponseOutput)
}

// StreamingPathResponseArrayInput is an input type that accepts StreamingPathResponseArray and StreamingPathResponseArrayOutput values.
// You can construct a concrete instance of `StreamingPathResponseArrayInput` via:
//
//          StreamingPathResponseArray{ StreamingPathResponseArgs{...} }
type StreamingPathResponseArrayInput interface {
	pulumi.Input

	ToStreamingPathResponseArrayOutput() StreamingPathResponseArrayOutput
	ToStreamingPathResponseArrayOutputWithContext(context.Context) StreamingPathResponseArrayOutput
}

type StreamingPathResponseArray []StreamingPathResponseInput

func (StreamingPathResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPathResponse)(nil)).Elem()
}

func (i StreamingPathResponseArray) ToStreamingPathResponseArrayOutput() StreamingPathResponseArrayOutput {
	return i.ToStreamingPathResponseArrayOutputWithContext(context.Background())
}

func (i StreamingPathResponseArray) ToStreamingPathResponseArrayOutputWithContext(ctx context.Context) StreamingPathResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPathResponseArrayOutput)
}

// Class of paths for streaming
type StreamingPathResponseOutput struct{ *pulumi.OutputState }

func (StreamingPathResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPathResponse)(nil)).Elem()
}

func (o StreamingPathResponseOutput) ToStreamingPathResponseOutput() StreamingPathResponseOutput {
	return o
}

func (o StreamingPathResponseOutput) ToStreamingPathResponseOutputWithContext(ctx context.Context) StreamingPathResponseOutput {
	return o
}

// Encryption scheme
func (o StreamingPathResponseOutput) EncryptionScheme() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingPathResponse) string { return v.EncryptionScheme }).(pulumi.StringOutput)
}

// Streaming paths for each protocol and encryptionScheme pair
func (o StreamingPathResponseOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StreamingPathResponse) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

// Streaming protocol
func (o StreamingPathResponseOutput) StreamingProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingPathResponse) string { return v.StreamingProtocol }).(pulumi.StringOutput)
}

type StreamingPathResponseArrayOutput struct{ *pulumi.OutputState }

func (StreamingPathResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPathResponse)(nil)).Elem()
}

func (o StreamingPathResponseArrayOutput) ToStreamingPathResponseArrayOutput() StreamingPathResponseArrayOutput {
	return o
}

func (o StreamingPathResponseArrayOutput) ToStreamingPathResponseArrayOutputWithContext(ctx context.Context) StreamingPathResponseArrayOutput {
	return o
}

func (o StreamingPathResponseArrayOutput) Index(i pulumi.IntInput) StreamingPathResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingPathResponse {
		return vs[0].([]StreamingPathResponse)[vs[1].(int)]
	}).(StreamingPathResponseOutput)
}

// Class to specify properties of content key
type StreamingPolicyContentKey struct {
	// Label can be used to specify Content Key when creating a Streaming Locator
	Label *string `pulumi:"label"`
	// Policy used by Content Key
	PolicyName *string `pulumi:"policyName"`
	// Tracks which use this content key
	Tracks []TrackSelection `pulumi:"tracks"`
}

// StreamingPolicyContentKeyInput is an input type that accepts StreamingPolicyContentKeyArgs and StreamingPolicyContentKeyOutput values.
// You can construct a concrete instance of `StreamingPolicyContentKeyInput` via:
//
//          StreamingPolicyContentKeyArgs{...}
type StreamingPolicyContentKeyInput interface {
	pulumi.Input

	ToStreamingPolicyContentKeyOutput() StreamingPolicyContentKeyOutput
	ToStreamingPolicyContentKeyOutputWithContext(context.Context) StreamingPolicyContentKeyOutput
}

// Class to specify properties of content key
type StreamingPolicyContentKeyArgs struct {
	// Label can be used to specify Content Key when creating a Streaming Locator
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Policy used by Content Key
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
	// Tracks which use this content key
	Tracks TrackSelectionArrayInput `pulumi:"tracks"`
}

func (StreamingPolicyContentKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyContentKey)(nil)).Elem()
}

func (i StreamingPolicyContentKeyArgs) ToStreamingPolicyContentKeyOutput() StreamingPolicyContentKeyOutput {
	return i.ToStreamingPolicyContentKeyOutputWithContext(context.Background())
}

func (i StreamingPolicyContentKeyArgs) ToStreamingPolicyContentKeyOutputWithContext(ctx context.Context) StreamingPolicyContentKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeyOutput)
}

// StreamingPolicyContentKeyArrayInput is an input type that accepts StreamingPolicyContentKeyArray and StreamingPolicyContentKeyArrayOutput values.
// You can construct a concrete instance of `StreamingPolicyContentKeyArrayInput` via:
//
//          StreamingPolicyContentKeyArray{ StreamingPolicyContentKeyArgs{...} }
type StreamingPolicyContentKeyArrayInput interface {
	pulumi.Input

	ToStreamingPolicyContentKeyArrayOutput() StreamingPolicyContentKeyArrayOutput
	ToStreamingPolicyContentKeyArrayOutputWithContext(context.Context) StreamingPolicyContentKeyArrayOutput
}

type StreamingPolicyContentKeyArray []StreamingPolicyContentKeyInput

func (StreamingPolicyContentKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPolicyContentKey)(nil)).Elem()
}

func (i StreamingPolicyContentKeyArray) ToStreamingPolicyContentKeyArrayOutput() StreamingPolicyContentKeyArrayOutput {
	return i.ToStreamingPolicyContentKeyArrayOutputWithContext(context.Background())
}

func (i StreamingPolicyContentKeyArray) ToStreamingPolicyContentKeyArrayOutputWithContext(ctx context.Context) StreamingPolicyContentKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeyArrayOutput)
}

// Class to specify properties of content key
type StreamingPolicyContentKeyOutput struct{ *pulumi.OutputState }

func (StreamingPolicyContentKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyContentKey)(nil)).Elem()
}

func (o StreamingPolicyContentKeyOutput) ToStreamingPolicyContentKeyOutput() StreamingPolicyContentKeyOutput {
	return o
}

func (o StreamingPolicyContentKeyOutput) ToStreamingPolicyContentKeyOutputWithContext(ctx context.Context) StreamingPolicyContentKeyOutput {
	return o
}

// Label can be used to specify Content Key when creating a Streaming Locator
func (o StreamingPolicyContentKeyOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyContentKey) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Policy used by Content Key
func (o StreamingPolicyContentKeyOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyContentKey) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

// Tracks which use this content key
func (o StreamingPolicyContentKeyOutput) Tracks() TrackSelectionArrayOutput {
	return o.ApplyT(func(v StreamingPolicyContentKey) []TrackSelection { return v.Tracks }).(TrackSelectionArrayOutput)
}

type StreamingPolicyContentKeyArrayOutput struct{ *pulumi.OutputState }

func (StreamingPolicyContentKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPolicyContentKey)(nil)).Elem()
}

func (o StreamingPolicyContentKeyArrayOutput) ToStreamingPolicyContentKeyArrayOutput() StreamingPolicyContentKeyArrayOutput {
	return o
}

func (o StreamingPolicyContentKeyArrayOutput) ToStreamingPolicyContentKeyArrayOutputWithContext(ctx context.Context) StreamingPolicyContentKeyArrayOutput {
	return o
}

func (o StreamingPolicyContentKeyArrayOutput) Index(i pulumi.IntInput) StreamingPolicyContentKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingPolicyContentKey {
		return vs[0].([]StreamingPolicyContentKey)[vs[1].(int)]
	}).(StreamingPolicyContentKeyOutput)
}

// Class to specify properties of content key
type StreamingPolicyContentKeyResponse struct {
	// Label can be used to specify Content Key when creating a Streaming Locator
	Label *string `pulumi:"label"`
	// Policy used by Content Key
	PolicyName *string `pulumi:"policyName"`
	// Tracks which use this content key
	Tracks []TrackSelectionResponse `pulumi:"tracks"`
}

// StreamingPolicyContentKeyResponseInput is an input type that accepts StreamingPolicyContentKeyResponseArgs and StreamingPolicyContentKeyResponseOutput values.
// You can construct a concrete instance of `StreamingPolicyContentKeyResponseInput` via:
//
//          StreamingPolicyContentKeyResponseArgs{...}
type StreamingPolicyContentKeyResponseInput interface {
	pulumi.Input

	ToStreamingPolicyContentKeyResponseOutput() StreamingPolicyContentKeyResponseOutput
	ToStreamingPolicyContentKeyResponseOutputWithContext(context.Context) StreamingPolicyContentKeyResponseOutput
}

// Class to specify properties of content key
type StreamingPolicyContentKeyResponseArgs struct {
	// Label can be used to specify Content Key when creating a Streaming Locator
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Policy used by Content Key
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
	// Tracks which use this content key
	Tracks TrackSelectionResponseArrayInput `pulumi:"tracks"`
}

func (StreamingPolicyContentKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyContentKeyResponse)(nil)).Elem()
}

func (i StreamingPolicyContentKeyResponseArgs) ToStreamingPolicyContentKeyResponseOutput() StreamingPolicyContentKeyResponseOutput {
	return i.ToStreamingPolicyContentKeyResponseOutputWithContext(context.Background())
}

func (i StreamingPolicyContentKeyResponseArgs) ToStreamingPolicyContentKeyResponseOutputWithContext(ctx context.Context) StreamingPolicyContentKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeyResponseOutput)
}

// StreamingPolicyContentKeyResponseArrayInput is an input type that accepts StreamingPolicyContentKeyResponseArray and StreamingPolicyContentKeyResponseArrayOutput values.
// You can construct a concrete instance of `StreamingPolicyContentKeyResponseArrayInput` via:
//
//          StreamingPolicyContentKeyResponseArray{ StreamingPolicyContentKeyResponseArgs{...} }
type StreamingPolicyContentKeyResponseArrayInput interface {
	pulumi.Input

	ToStreamingPolicyContentKeyResponseArrayOutput() StreamingPolicyContentKeyResponseArrayOutput
	ToStreamingPolicyContentKeyResponseArrayOutputWithContext(context.Context) StreamingPolicyContentKeyResponseArrayOutput
}

type StreamingPolicyContentKeyResponseArray []StreamingPolicyContentKeyResponseInput

func (StreamingPolicyContentKeyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPolicyContentKeyResponse)(nil)).Elem()
}

func (i StreamingPolicyContentKeyResponseArray) ToStreamingPolicyContentKeyResponseArrayOutput() StreamingPolicyContentKeyResponseArrayOutput {
	return i.ToStreamingPolicyContentKeyResponseArrayOutputWithContext(context.Background())
}

func (i StreamingPolicyContentKeyResponseArray) ToStreamingPolicyContentKeyResponseArrayOutputWithContext(ctx context.Context) StreamingPolicyContentKeyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeyResponseArrayOutput)
}

// Class to specify properties of content key
type StreamingPolicyContentKeyResponseOutput struct{ *pulumi.OutputState }

func (StreamingPolicyContentKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyContentKeyResponse)(nil)).Elem()
}

func (o StreamingPolicyContentKeyResponseOutput) ToStreamingPolicyContentKeyResponseOutput() StreamingPolicyContentKeyResponseOutput {
	return o
}

func (o StreamingPolicyContentKeyResponseOutput) ToStreamingPolicyContentKeyResponseOutputWithContext(ctx context.Context) StreamingPolicyContentKeyResponseOutput {
	return o
}

// Label can be used to specify Content Key when creating a Streaming Locator
func (o StreamingPolicyContentKeyResponseOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyContentKeyResponse) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Policy used by Content Key
func (o StreamingPolicyContentKeyResponseOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyContentKeyResponse) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

// Tracks which use this content key
func (o StreamingPolicyContentKeyResponseOutput) Tracks() TrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v StreamingPolicyContentKeyResponse) []TrackSelectionResponse { return v.Tracks }).(TrackSelectionResponseArrayOutput)
}

type StreamingPolicyContentKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (StreamingPolicyContentKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPolicyContentKeyResponse)(nil)).Elem()
}

func (o StreamingPolicyContentKeyResponseArrayOutput) ToStreamingPolicyContentKeyResponseArrayOutput() StreamingPolicyContentKeyResponseArrayOutput {
	return o
}

func (o StreamingPolicyContentKeyResponseArrayOutput) ToStreamingPolicyContentKeyResponseArrayOutputWithContext(ctx context.Context) StreamingPolicyContentKeyResponseArrayOutput {
	return o
}

func (o StreamingPolicyContentKeyResponseArrayOutput) Index(i pulumi.IntInput) StreamingPolicyContentKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingPolicyContentKeyResponse {
		return vs[0].([]StreamingPolicyContentKeyResponse)[vs[1].(int)]
	}).(StreamingPolicyContentKeyResponseOutput)
}

// Class to specify properties of all content keys in Streaming Policy
type StreamingPolicyContentKeys struct {
	// Default content key for an encryption scheme
	DefaultKey *DefaultKey `pulumi:"defaultKey"`
	// Representing tracks needs separate content key
	KeyToTrackMappings []StreamingPolicyContentKey `pulumi:"keyToTrackMappings"`
}

// StreamingPolicyContentKeysInput is an input type that accepts StreamingPolicyContentKeysArgs and StreamingPolicyContentKeysOutput values.
// You can construct a concrete instance of `StreamingPolicyContentKeysInput` via:
//
//          StreamingPolicyContentKeysArgs{...}
type StreamingPolicyContentKeysInput interface {
	pulumi.Input

	ToStreamingPolicyContentKeysOutput() StreamingPolicyContentKeysOutput
	ToStreamingPolicyContentKeysOutputWithContext(context.Context) StreamingPolicyContentKeysOutput
}

// Class to specify properties of all content keys in Streaming Policy
type StreamingPolicyContentKeysArgs struct {
	// Default content key for an encryption scheme
	DefaultKey DefaultKeyPtrInput `pulumi:"defaultKey"`
	// Representing tracks needs separate content key
	KeyToTrackMappings StreamingPolicyContentKeyArrayInput `pulumi:"keyToTrackMappings"`
}

func (StreamingPolicyContentKeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyContentKeys)(nil)).Elem()
}

func (i StreamingPolicyContentKeysArgs) ToStreamingPolicyContentKeysOutput() StreamingPolicyContentKeysOutput {
	return i.ToStreamingPolicyContentKeysOutputWithContext(context.Background())
}

func (i StreamingPolicyContentKeysArgs) ToStreamingPolicyContentKeysOutputWithContext(ctx context.Context) StreamingPolicyContentKeysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeysOutput)
}

func (i StreamingPolicyContentKeysArgs) ToStreamingPolicyContentKeysPtrOutput() StreamingPolicyContentKeysPtrOutput {
	return i.ToStreamingPolicyContentKeysPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyContentKeysArgs) ToStreamingPolicyContentKeysPtrOutputWithContext(ctx context.Context) StreamingPolicyContentKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeysOutput).ToStreamingPolicyContentKeysPtrOutputWithContext(ctx)
}

// StreamingPolicyContentKeysPtrInput is an input type that accepts StreamingPolicyContentKeysArgs, StreamingPolicyContentKeysPtr and StreamingPolicyContentKeysPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyContentKeysPtrInput` via:
//
//          StreamingPolicyContentKeysArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyContentKeysPtrInput interface {
	pulumi.Input

	ToStreamingPolicyContentKeysPtrOutput() StreamingPolicyContentKeysPtrOutput
	ToStreamingPolicyContentKeysPtrOutputWithContext(context.Context) StreamingPolicyContentKeysPtrOutput
}

type streamingPolicyContentKeysPtrType StreamingPolicyContentKeysArgs

func StreamingPolicyContentKeysPtr(v *StreamingPolicyContentKeysArgs) StreamingPolicyContentKeysPtrInput {
	return (*streamingPolicyContentKeysPtrType)(v)
}

func (*streamingPolicyContentKeysPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyContentKeys)(nil)).Elem()
}

func (i *streamingPolicyContentKeysPtrType) ToStreamingPolicyContentKeysPtrOutput() StreamingPolicyContentKeysPtrOutput {
	return i.ToStreamingPolicyContentKeysPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyContentKeysPtrType) ToStreamingPolicyContentKeysPtrOutputWithContext(ctx context.Context) StreamingPolicyContentKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeysPtrOutput)
}

// Class to specify properties of all content keys in Streaming Policy
type StreamingPolicyContentKeysOutput struct{ *pulumi.OutputState }

func (StreamingPolicyContentKeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyContentKeys)(nil)).Elem()
}

func (o StreamingPolicyContentKeysOutput) ToStreamingPolicyContentKeysOutput() StreamingPolicyContentKeysOutput {
	return o
}

func (o StreamingPolicyContentKeysOutput) ToStreamingPolicyContentKeysOutputWithContext(ctx context.Context) StreamingPolicyContentKeysOutput {
	return o
}

func (o StreamingPolicyContentKeysOutput) ToStreamingPolicyContentKeysPtrOutput() StreamingPolicyContentKeysPtrOutput {
	return o.ToStreamingPolicyContentKeysPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyContentKeysOutput) ToStreamingPolicyContentKeysPtrOutputWithContext(ctx context.Context) StreamingPolicyContentKeysPtrOutput {
	return o.ApplyT(func(v StreamingPolicyContentKeys) *StreamingPolicyContentKeys {
		return &v
	}).(StreamingPolicyContentKeysPtrOutput)
}

// Default content key for an encryption scheme
func (o StreamingPolicyContentKeysOutput) DefaultKey() DefaultKeyPtrOutput {
	return o.ApplyT(func(v StreamingPolicyContentKeys) *DefaultKey { return v.DefaultKey }).(DefaultKeyPtrOutput)
}

// Representing tracks needs separate content key
func (o StreamingPolicyContentKeysOutput) KeyToTrackMappings() StreamingPolicyContentKeyArrayOutput {
	return o.ApplyT(func(v StreamingPolicyContentKeys) []StreamingPolicyContentKey { return v.KeyToTrackMappings }).(StreamingPolicyContentKeyArrayOutput)
}

type StreamingPolicyContentKeysPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyContentKeysPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyContentKeys)(nil)).Elem()
}

func (o StreamingPolicyContentKeysPtrOutput) ToStreamingPolicyContentKeysPtrOutput() StreamingPolicyContentKeysPtrOutput {
	return o
}

func (o StreamingPolicyContentKeysPtrOutput) ToStreamingPolicyContentKeysPtrOutputWithContext(ctx context.Context) StreamingPolicyContentKeysPtrOutput {
	return o
}

func (o StreamingPolicyContentKeysPtrOutput) Elem() StreamingPolicyContentKeysOutput {
	return o.ApplyT(func(v *StreamingPolicyContentKeys) StreamingPolicyContentKeys { return *v }).(StreamingPolicyContentKeysOutput)
}

// Default content key for an encryption scheme
func (o StreamingPolicyContentKeysPtrOutput) DefaultKey() DefaultKeyPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyContentKeys) *DefaultKey {
		if v == nil {
			return nil
		}
		return v.DefaultKey
	}).(DefaultKeyPtrOutput)
}

// Representing tracks needs separate content key
func (o StreamingPolicyContentKeysPtrOutput) KeyToTrackMappings() StreamingPolicyContentKeyArrayOutput {
	return o.ApplyT(func(v *StreamingPolicyContentKeys) []StreamingPolicyContentKey {
		if v == nil {
			return nil
		}
		return v.KeyToTrackMappings
	}).(StreamingPolicyContentKeyArrayOutput)
}

// Class to specify properties of all content keys in Streaming Policy
type StreamingPolicyContentKeysResponse struct {
	// Default content key for an encryption scheme
	DefaultKey *DefaultKeyResponse `pulumi:"defaultKey"`
	// Representing tracks needs separate content key
	KeyToTrackMappings []StreamingPolicyContentKeyResponse `pulumi:"keyToTrackMappings"`
}

// StreamingPolicyContentKeysResponseInput is an input type that accepts StreamingPolicyContentKeysResponseArgs and StreamingPolicyContentKeysResponseOutput values.
// You can construct a concrete instance of `StreamingPolicyContentKeysResponseInput` via:
//
//          StreamingPolicyContentKeysResponseArgs{...}
type StreamingPolicyContentKeysResponseInput interface {
	pulumi.Input

	ToStreamingPolicyContentKeysResponseOutput() StreamingPolicyContentKeysResponseOutput
	ToStreamingPolicyContentKeysResponseOutputWithContext(context.Context) StreamingPolicyContentKeysResponseOutput
}

// Class to specify properties of all content keys in Streaming Policy
type StreamingPolicyContentKeysResponseArgs struct {
	// Default content key for an encryption scheme
	DefaultKey DefaultKeyResponsePtrInput `pulumi:"defaultKey"`
	// Representing tracks needs separate content key
	KeyToTrackMappings StreamingPolicyContentKeyResponseArrayInput `pulumi:"keyToTrackMappings"`
}

func (StreamingPolicyContentKeysResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyContentKeysResponse)(nil)).Elem()
}

func (i StreamingPolicyContentKeysResponseArgs) ToStreamingPolicyContentKeysResponseOutput() StreamingPolicyContentKeysResponseOutput {
	return i.ToStreamingPolicyContentKeysResponseOutputWithContext(context.Background())
}

func (i StreamingPolicyContentKeysResponseArgs) ToStreamingPolicyContentKeysResponseOutputWithContext(ctx context.Context) StreamingPolicyContentKeysResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeysResponseOutput)
}

func (i StreamingPolicyContentKeysResponseArgs) ToStreamingPolicyContentKeysResponsePtrOutput() StreamingPolicyContentKeysResponsePtrOutput {
	return i.ToStreamingPolicyContentKeysResponsePtrOutputWithContext(context.Background())
}

func (i StreamingPolicyContentKeysResponseArgs) ToStreamingPolicyContentKeysResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyContentKeysResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeysResponseOutput).ToStreamingPolicyContentKeysResponsePtrOutputWithContext(ctx)
}

// StreamingPolicyContentKeysResponsePtrInput is an input type that accepts StreamingPolicyContentKeysResponseArgs, StreamingPolicyContentKeysResponsePtr and StreamingPolicyContentKeysResponsePtrOutput values.
// You can construct a concrete instance of `StreamingPolicyContentKeysResponsePtrInput` via:
//
//          StreamingPolicyContentKeysResponseArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyContentKeysResponsePtrInput interface {
	pulumi.Input

	ToStreamingPolicyContentKeysResponsePtrOutput() StreamingPolicyContentKeysResponsePtrOutput
	ToStreamingPolicyContentKeysResponsePtrOutputWithContext(context.Context) StreamingPolicyContentKeysResponsePtrOutput
}

type streamingPolicyContentKeysResponsePtrType StreamingPolicyContentKeysResponseArgs

func StreamingPolicyContentKeysResponsePtr(v *StreamingPolicyContentKeysResponseArgs) StreamingPolicyContentKeysResponsePtrInput {
	return (*streamingPolicyContentKeysResponsePtrType)(v)
}

func (*streamingPolicyContentKeysResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyContentKeysResponse)(nil)).Elem()
}

func (i *streamingPolicyContentKeysResponsePtrType) ToStreamingPolicyContentKeysResponsePtrOutput() StreamingPolicyContentKeysResponsePtrOutput {
	return i.ToStreamingPolicyContentKeysResponsePtrOutputWithContext(context.Background())
}

func (i *streamingPolicyContentKeysResponsePtrType) ToStreamingPolicyContentKeysResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyContentKeysResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeysResponsePtrOutput)
}

// Class to specify properties of all content keys in Streaming Policy
type StreamingPolicyContentKeysResponseOutput struct{ *pulumi.OutputState }

func (StreamingPolicyContentKeysResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyContentKeysResponse)(nil)).Elem()
}

func (o StreamingPolicyContentKeysResponseOutput) ToStreamingPolicyContentKeysResponseOutput() StreamingPolicyContentKeysResponseOutput {
	return o
}

func (o StreamingPolicyContentKeysResponseOutput) ToStreamingPolicyContentKeysResponseOutputWithContext(ctx context.Context) StreamingPolicyContentKeysResponseOutput {
	return o
}

func (o StreamingPolicyContentKeysResponseOutput) ToStreamingPolicyContentKeysResponsePtrOutput() StreamingPolicyContentKeysResponsePtrOutput {
	return o.ToStreamingPolicyContentKeysResponsePtrOutputWithContext(context.Background())
}

func (o StreamingPolicyContentKeysResponseOutput) ToStreamingPolicyContentKeysResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyContentKeysResponsePtrOutput {
	return o.ApplyT(func(v StreamingPolicyContentKeysResponse) *StreamingPolicyContentKeysResponse {
		return &v
	}).(StreamingPolicyContentKeysResponsePtrOutput)
}

// Default content key for an encryption scheme
func (o StreamingPolicyContentKeysResponseOutput) DefaultKey() DefaultKeyResponsePtrOutput {
	return o.ApplyT(func(v StreamingPolicyContentKeysResponse) *DefaultKeyResponse { return v.DefaultKey }).(DefaultKeyResponsePtrOutput)
}

// Representing tracks needs separate content key
func (o StreamingPolicyContentKeysResponseOutput) KeyToTrackMappings() StreamingPolicyContentKeyResponseArrayOutput {
	return o.ApplyT(func(v StreamingPolicyContentKeysResponse) []StreamingPolicyContentKeyResponse {
		return v.KeyToTrackMappings
	}).(StreamingPolicyContentKeyResponseArrayOutput)
}

type StreamingPolicyContentKeysResponsePtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyContentKeysResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyContentKeysResponse)(nil)).Elem()
}

func (o StreamingPolicyContentKeysResponsePtrOutput) ToStreamingPolicyContentKeysResponsePtrOutput() StreamingPolicyContentKeysResponsePtrOutput {
	return o
}

func (o StreamingPolicyContentKeysResponsePtrOutput) ToStreamingPolicyContentKeysResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyContentKeysResponsePtrOutput {
	return o
}

func (o StreamingPolicyContentKeysResponsePtrOutput) Elem() StreamingPolicyContentKeysResponseOutput {
	return o.ApplyT(func(v *StreamingPolicyContentKeysResponse) StreamingPolicyContentKeysResponse { return *v }).(StreamingPolicyContentKeysResponseOutput)
}

// Default content key for an encryption scheme
func (o StreamingPolicyContentKeysResponsePtrOutput) DefaultKey() DefaultKeyResponsePtrOutput {
	return o.ApplyT(func(v *StreamingPolicyContentKeysResponse) *DefaultKeyResponse {
		if v == nil {
			return nil
		}
		return v.DefaultKey
	}).(DefaultKeyResponsePtrOutput)
}

// Representing tracks needs separate content key
func (o StreamingPolicyContentKeysResponsePtrOutput) KeyToTrackMappings() StreamingPolicyContentKeyResponseArrayOutput {
	return o.ApplyT(func(v *StreamingPolicyContentKeysResponse) []StreamingPolicyContentKeyResponse {
		if v == nil {
			return nil
		}
		return v.KeyToTrackMappings
	}).(StreamingPolicyContentKeyResponseArrayOutput)
}

// Class to specify configurations of FairPlay in Streaming Policy
type StreamingPolicyFairPlayConfiguration struct {
	// All license to be persistent or not
	AllowPersistentLicense bool `pulumi:"allowPersistentLicense"`
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate *string `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

// StreamingPolicyFairPlayConfigurationInput is an input type that accepts StreamingPolicyFairPlayConfigurationArgs and StreamingPolicyFairPlayConfigurationOutput values.
// You can construct a concrete instance of `StreamingPolicyFairPlayConfigurationInput` via:
//
//          StreamingPolicyFairPlayConfigurationArgs{...}
type StreamingPolicyFairPlayConfigurationInput interface {
	pulumi.Input

	ToStreamingPolicyFairPlayConfigurationOutput() StreamingPolicyFairPlayConfigurationOutput
	ToStreamingPolicyFairPlayConfigurationOutputWithContext(context.Context) StreamingPolicyFairPlayConfigurationOutput
}

// Class to specify configurations of FairPlay in Streaming Policy
type StreamingPolicyFairPlayConfigurationArgs struct {
	// All license to be persistent or not
	AllowPersistentLicense pulumi.BoolInput `pulumi:"allowPersistentLicense"`
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

func (StreamingPolicyFairPlayConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyFairPlayConfiguration)(nil)).Elem()
}

func (i StreamingPolicyFairPlayConfigurationArgs) ToStreamingPolicyFairPlayConfigurationOutput() StreamingPolicyFairPlayConfigurationOutput {
	return i.ToStreamingPolicyFairPlayConfigurationOutputWithContext(context.Background())
}

func (i StreamingPolicyFairPlayConfigurationArgs) ToStreamingPolicyFairPlayConfigurationOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyFairPlayConfigurationOutput)
}

func (i StreamingPolicyFairPlayConfigurationArgs) ToStreamingPolicyFairPlayConfigurationPtrOutput() StreamingPolicyFairPlayConfigurationPtrOutput {
	return i.ToStreamingPolicyFairPlayConfigurationPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyFairPlayConfigurationArgs) ToStreamingPolicyFairPlayConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyFairPlayConfigurationOutput).ToStreamingPolicyFairPlayConfigurationPtrOutputWithContext(ctx)
}

// StreamingPolicyFairPlayConfigurationPtrInput is an input type that accepts StreamingPolicyFairPlayConfigurationArgs, StreamingPolicyFairPlayConfigurationPtr and StreamingPolicyFairPlayConfigurationPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyFairPlayConfigurationPtrInput` via:
//
//          StreamingPolicyFairPlayConfigurationArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyFairPlayConfigurationPtrInput interface {
	pulumi.Input

	ToStreamingPolicyFairPlayConfigurationPtrOutput() StreamingPolicyFairPlayConfigurationPtrOutput
	ToStreamingPolicyFairPlayConfigurationPtrOutputWithContext(context.Context) StreamingPolicyFairPlayConfigurationPtrOutput
}

type streamingPolicyFairPlayConfigurationPtrType StreamingPolicyFairPlayConfigurationArgs

func StreamingPolicyFairPlayConfigurationPtr(v *StreamingPolicyFairPlayConfigurationArgs) StreamingPolicyFairPlayConfigurationPtrInput {
	return (*streamingPolicyFairPlayConfigurationPtrType)(v)
}

func (*streamingPolicyFairPlayConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyFairPlayConfiguration)(nil)).Elem()
}

func (i *streamingPolicyFairPlayConfigurationPtrType) ToStreamingPolicyFairPlayConfigurationPtrOutput() StreamingPolicyFairPlayConfigurationPtrOutput {
	return i.ToStreamingPolicyFairPlayConfigurationPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyFairPlayConfigurationPtrType) ToStreamingPolicyFairPlayConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyFairPlayConfigurationPtrOutput)
}

// Class to specify configurations of FairPlay in Streaming Policy
type StreamingPolicyFairPlayConfigurationOutput struct{ *pulumi.OutputState }

func (StreamingPolicyFairPlayConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyFairPlayConfiguration)(nil)).Elem()
}

func (o StreamingPolicyFairPlayConfigurationOutput) ToStreamingPolicyFairPlayConfigurationOutput() StreamingPolicyFairPlayConfigurationOutput {
	return o
}

func (o StreamingPolicyFairPlayConfigurationOutput) ToStreamingPolicyFairPlayConfigurationOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationOutput {
	return o
}

func (o StreamingPolicyFairPlayConfigurationOutput) ToStreamingPolicyFairPlayConfigurationPtrOutput() StreamingPolicyFairPlayConfigurationPtrOutput {
	return o.ToStreamingPolicyFairPlayConfigurationPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyFairPlayConfigurationOutput) ToStreamingPolicyFairPlayConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationPtrOutput {
	return o.ApplyT(func(v StreamingPolicyFairPlayConfiguration) *StreamingPolicyFairPlayConfiguration {
		return &v
	}).(StreamingPolicyFairPlayConfigurationPtrOutput)
}

// All license to be persistent or not
func (o StreamingPolicyFairPlayConfigurationOutput) AllowPersistentLicense() pulumi.BoolOutput {
	return o.ApplyT(func(v StreamingPolicyFairPlayConfiguration) bool { return v.AllowPersistentLicense }).(pulumi.BoolOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyFairPlayConfigurationOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyFairPlayConfiguration) *string { return v.CustomLicenseAcquisitionUrlTemplate }).(pulumi.StringPtrOutput)
}

type StreamingPolicyFairPlayConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyFairPlayConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyFairPlayConfiguration)(nil)).Elem()
}

func (o StreamingPolicyFairPlayConfigurationPtrOutput) ToStreamingPolicyFairPlayConfigurationPtrOutput() StreamingPolicyFairPlayConfigurationPtrOutput {
	return o
}

func (o StreamingPolicyFairPlayConfigurationPtrOutput) ToStreamingPolicyFairPlayConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationPtrOutput {
	return o
}

func (o StreamingPolicyFairPlayConfigurationPtrOutput) Elem() StreamingPolicyFairPlayConfigurationOutput {
	return o.ApplyT(func(v *StreamingPolicyFairPlayConfiguration) StreamingPolicyFairPlayConfiguration { return *v }).(StreamingPolicyFairPlayConfigurationOutput)
}

// All license to be persistent or not
func (o StreamingPolicyFairPlayConfigurationPtrOutput) AllowPersistentLicense() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyFairPlayConfiguration) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowPersistentLicense
	}).(pulumi.BoolPtrOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyFairPlayConfigurationPtrOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyFairPlayConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// Class to specify configurations of FairPlay in Streaming Policy
type StreamingPolicyFairPlayConfigurationResponse struct {
	// All license to be persistent or not
	AllowPersistentLicense bool `pulumi:"allowPersistentLicense"`
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate *string `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

// StreamingPolicyFairPlayConfigurationResponseInput is an input type that accepts StreamingPolicyFairPlayConfigurationResponseArgs and StreamingPolicyFairPlayConfigurationResponseOutput values.
// You can construct a concrete instance of `StreamingPolicyFairPlayConfigurationResponseInput` via:
//
//          StreamingPolicyFairPlayConfigurationResponseArgs{...}
type StreamingPolicyFairPlayConfigurationResponseInput interface {
	pulumi.Input

	ToStreamingPolicyFairPlayConfigurationResponseOutput() StreamingPolicyFairPlayConfigurationResponseOutput
	ToStreamingPolicyFairPlayConfigurationResponseOutputWithContext(context.Context) StreamingPolicyFairPlayConfigurationResponseOutput
}

// Class to specify configurations of FairPlay in Streaming Policy
type StreamingPolicyFairPlayConfigurationResponseArgs struct {
	// All license to be persistent or not
	AllowPersistentLicense pulumi.BoolInput `pulumi:"allowPersistentLicense"`
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

func (StreamingPolicyFairPlayConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyFairPlayConfigurationResponse)(nil)).Elem()
}

func (i StreamingPolicyFairPlayConfigurationResponseArgs) ToStreamingPolicyFairPlayConfigurationResponseOutput() StreamingPolicyFairPlayConfigurationResponseOutput {
	return i.ToStreamingPolicyFairPlayConfigurationResponseOutputWithContext(context.Background())
}

func (i StreamingPolicyFairPlayConfigurationResponseArgs) ToStreamingPolicyFairPlayConfigurationResponseOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyFairPlayConfigurationResponseOutput)
}

func (i StreamingPolicyFairPlayConfigurationResponseArgs) ToStreamingPolicyFairPlayConfigurationResponsePtrOutput() StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return i.ToStreamingPolicyFairPlayConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i StreamingPolicyFairPlayConfigurationResponseArgs) ToStreamingPolicyFairPlayConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyFairPlayConfigurationResponseOutput).ToStreamingPolicyFairPlayConfigurationResponsePtrOutputWithContext(ctx)
}

// StreamingPolicyFairPlayConfigurationResponsePtrInput is an input type that accepts StreamingPolicyFairPlayConfigurationResponseArgs, StreamingPolicyFairPlayConfigurationResponsePtr and StreamingPolicyFairPlayConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `StreamingPolicyFairPlayConfigurationResponsePtrInput` via:
//
//          StreamingPolicyFairPlayConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyFairPlayConfigurationResponsePtrInput interface {
	pulumi.Input

	ToStreamingPolicyFairPlayConfigurationResponsePtrOutput() StreamingPolicyFairPlayConfigurationResponsePtrOutput
	ToStreamingPolicyFairPlayConfigurationResponsePtrOutputWithContext(context.Context) StreamingPolicyFairPlayConfigurationResponsePtrOutput
}

type streamingPolicyFairPlayConfigurationResponsePtrType StreamingPolicyFairPlayConfigurationResponseArgs

func StreamingPolicyFairPlayConfigurationResponsePtr(v *StreamingPolicyFairPlayConfigurationResponseArgs) StreamingPolicyFairPlayConfigurationResponsePtrInput {
	return (*streamingPolicyFairPlayConfigurationResponsePtrType)(v)
}

func (*streamingPolicyFairPlayConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyFairPlayConfigurationResponse)(nil)).Elem()
}

func (i *streamingPolicyFairPlayConfigurationResponsePtrType) ToStreamingPolicyFairPlayConfigurationResponsePtrOutput() StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return i.ToStreamingPolicyFairPlayConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *streamingPolicyFairPlayConfigurationResponsePtrType) ToStreamingPolicyFairPlayConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyFairPlayConfigurationResponsePtrOutput)
}

// Class to specify configurations of FairPlay in Streaming Policy
type StreamingPolicyFairPlayConfigurationResponseOutput struct{ *pulumi.OutputState }

func (StreamingPolicyFairPlayConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyFairPlayConfigurationResponse)(nil)).Elem()
}

func (o StreamingPolicyFairPlayConfigurationResponseOutput) ToStreamingPolicyFairPlayConfigurationResponseOutput() StreamingPolicyFairPlayConfigurationResponseOutput {
	return o
}

func (o StreamingPolicyFairPlayConfigurationResponseOutput) ToStreamingPolicyFairPlayConfigurationResponseOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationResponseOutput {
	return o
}

func (o StreamingPolicyFairPlayConfigurationResponseOutput) ToStreamingPolicyFairPlayConfigurationResponsePtrOutput() StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return o.ToStreamingPolicyFairPlayConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o StreamingPolicyFairPlayConfigurationResponseOutput) ToStreamingPolicyFairPlayConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return o.ApplyT(func(v StreamingPolicyFairPlayConfigurationResponse) *StreamingPolicyFairPlayConfigurationResponse {
		return &v
	}).(StreamingPolicyFairPlayConfigurationResponsePtrOutput)
}

// All license to be persistent or not
func (o StreamingPolicyFairPlayConfigurationResponseOutput) AllowPersistentLicense() pulumi.BoolOutput {
	return o.ApplyT(func(v StreamingPolicyFairPlayConfigurationResponse) bool { return v.AllowPersistentLicense }).(pulumi.BoolOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyFairPlayConfigurationResponseOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyFairPlayConfigurationResponse) *string {
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

type StreamingPolicyFairPlayConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyFairPlayConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyFairPlayConfigurationResponse)(nil)).Elem()
}

func (o StreamingPolicyFairPlayConfigurationResponsePtrOutput) ToStreamingPolicyFairPlayConfigurationResponsePtrOutput() StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return o
}

func (o StreamingPolicyFairPlayConfigurationResponsePtrOutput) ToStreamingPolicyFairPlayConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return o
}

func (o StreamingPolicyFairPlayConfigurationResponsePtrOutput) Elem() StreamingPolicyFairPlayConfigurationResponseOutput {
	return o.ApplyT(func(v *StreamingPolicyFairPlayConfigurationResponse) StreamingPolicyFairPlayConfigurationResponse {
		return *v
	}).(StreamingPolicyFairPlayConfigurationResponseOutput)
}

// All license to be persistent or not
func (o StreamingPolicyFairPlayConfigurationResponsePtrOutput) AllowPersistentLicense() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyFairPlayConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowPersistentLicense
	}).(pulumi.BoolPtrOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyFairPlayConfigurationResponsePtrOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyFairPlayConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// Class to specify configurations of PlayReady in Streaming Policy
type StreamingPolicyPlayReadyConfiguration struct {
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate *string `pulumi:"customLicenseAcquisitionUrlTemplate"`
	// Custom attributes for PlayReady
	PlayReadyCustomAttributes *string `pulumi:"playReadyCustomAttributes"`
}

// StreamingPolicyPlayReadyConfigurationInput is an input type that accepts StreamingPolicyPlayReadyConfigurationArgs and StreamingPolicyPlayReadyConfigurationOutput values.
// You can construct a concrete instance of `StreamingPolicyPlayReadyConfigurationInput` via:
//
//          StreamingPolicyPlayReadyConfigurationArgs{...}
type StreamingPolicyPlayReadyConfigurationInput interface {
	pulumi.Input

	ToStreamingPolicyPlayReadyConfigurationOutput() StreamingPolicyPlayReadyConfigurationOutput
	ToStreamingPolicyPlayReadyConfigurationOutputWithContext(context.Context) StreamingPolicyPlayReadyConfigurationOutput
}

// Class to specify configurations of PlayReady in Streaming Policy
type StreamingPolicyPlayReadyConfigurationArgs struct {
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customLicenseAcquisitionUrlTemplate"`
	// Custom attributes for PlayReady
	PlayReadyCustomAttributes pulumi.StringPtrInput `pulumi:"playReadyCustomAttributes"`
}

func (StreamingPolicyPlayReadyConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyPlayReadyConfiguration)(nil)).Elem()
}

func (i StreamingPolicyPlayReadyConfigurationArgs) ToStreamingPolicyPlayReadyConfigurationOutput() StreamingPolicyPlayReadyConfigurationOutput {
	return i.ToStreamingPolicyPlayReadyConfigurationOutputWithContext(context.Background())
}

func (i StreamingPolicyPlayReadyConfigurationArgs) ToStreamingPolicyPlayReadyConfigurationOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyPlayReadyConfigurationOutput)
}

func (i StreamingPolicyPlayReadyConfigurationArgs) ToStreamingPolicyPlayReadyConfigurationPtrOutput() StreamingPolicyPlayReadyConfigurationPtrOutput {
	return i.ToStreamingPolicyPlayReadyConfigurationPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyPlayReadyConfigurationArgs) ToStreamingPolicyPlayReadyConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyPlayReadyConfigurationOutput).ToStreamingPolicyPlayReadyConfigurationPtrOutputWithContext(ctx)
}

// StreamingPolicyPlayReadyConfigurationPtrInput is an input type that accepts StreamingPolicyPlayReadyConfigurationArgs, StreamingPolicyPlayReadyConfigurationPtr and StreamingPolicyPlayReadyConfigurationPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyPlayReadyConfigurationPtrInput` via:
//
//          StreamingPolicyPlayReadyConfigurationArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyPlayReadyConfigurationPtrInput interface {
	pulumi.Input

	ToStreamingPolicyPlayReadyConfigurationPtrOutput() StreamingPolicyPlayReadyConfigurationPtrOutput
	ToStreamingPolicyPlayReadyConfigurationPtrOutputWithContext(context.Context) StreamingPolicyPlayReadyConfigurationPtrOutput
}

type streamingPolicyPlayReadyConfigurationPtrType StreamingPolicyPlayReadyConfigurationArgs

func StreamingPolicyPlayReadyConfigurationPtr(v *StreamingPolicyPlayReadyConfigurationArgs) StreamingPolicyPlayReadyConfigurationPtrInput {
	return (*streamingPolicyPlayReadyConfigurationPtrType)(v)
}

func (*streamingPolicyPlayReadyConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyPlayReadyConfiguration)(nil)).Elem()
}

func (i *streamingPolicyPlayReadyConfigurationPtrType) ToStreamingPolicyPlayReadyConfigurationPtrOutput() StreamingPolicyPlayReadyConfigurationPtrOutput {
	return i.ToStreamingPolicyPlayReadyConfigurationPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyPlayReadyConfigurationPtrType) ToStreamingPolicyPlayReadyConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyPlayReadyConfigurationPtrOutput)
}

// Class to specify configurations of PlayReady in Streaming Policy
type StreamingPolicyPlayReadyConfigurationOutput struct{ *pulumi.OutputState }

func (StreamingPolicyPlayReadyConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyPlayReadyConfiguration)(nil)).Elem()
}

func (o StreamingPolicyPlayReadyConfigurationOutput) ToStreamingPolicyPlayReadyConfigurationOutput() StreamingPolicyPlayReadyConfigurationOutput {
	return o
}

func (o StreamingPolicyPlayReadyConfigurationOutput) ToStreamingPolicyPlayReadyConfigurationOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationOutput {
	return o
}

func (o StreamingPolicyPlayReadyConfigurationOutput) ToStreamingPolicyPlayReadyConfigurationPtrOutput() StreamingPolicyPlayReadyConfigurationPtrOutput {
	return o.ToStreamingPolicyPlayReadyConfigurationPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyPlayReadyConfigurationOutput) ToStreamingPolicyPlayReadyConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationPtrOutput {
	return o.ApplyT(func(v StreamingPolicyPlayReadyConfiguration) *StreamingPolicyPlayReadyConfiguration {
		return &v
	}).(StreamingPolicyPlayReadyConfigurationPtrOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyPlayReadyConfigurationOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyPlayReadyConfiguration) *string { return v.CustomLicenseAcquisitionUrlTemplate }).(pulumi.StringPtrOutput)
}

// Custom attributes for PlayReady
func (o StreamingPolicyPlayReadyConfigurationOutput) PlayReadyCustomAttributes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyPlayReadyConfiguration) *string { return v.PlayReadyCustomAttributes }).(pulumi.StringPtrOutput)
}

type StreamingPolicyPlayReadyConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyPlayReadyConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyPlayReadyConfiguration)(nil)).Elem()
}

func (o StreamingPolicyPlayReadyConfigurationPtrOutput) ToStreamingPolicyPlayReadyConfigurationPtrOutput() StreamingPolicyPlayReadyConfigurationPtrOutput {
	return o
}

func (o StreamingPolicyPlayReadyConfigurationPtrOutput) ToStreamingPolicyPlayReadyConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationPtrOutput {
	return o
}

func (o StreamingPolicyPlayReadyConfigurationPtrOutput) Elem() StreamingPolicyPlayReadyConfigurationOutput {
	return o.ApplyT(func(v *StreamingPolicyPlayReadyConfiguration) StreamingPolicyPlayReadyConfiguration { return *v }).(StreamingPolicyPlayReadyConfigurationOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyPlayReadyConfigurationPtrOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyPlayReadyConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// Custom attributes for PlayReady
func (o StreamingPolicyPlayReadyConfigurationPtrOutput) PlayReadyCustomAttributes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyPlayReadyConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.PlayReadyCustomAttributes
	}).(pulumi.StringPtrOutput)
}

// Class to specify configurations of PlayReady in Streaming Policy
type StreamingPolicyPlayReadyConfigurationResponse struct {
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate *string `pulumi:"customLicenseAcquisitionUrlTemplate"`
	// Custom attributes for PlayReady
	PlayReadyCustomAttributes *string `pulumi:"playReadyCustomAttributes"`
}

// StreamingPolicyPlayReadyConfigurationResponseInput is an input type that accepts StreamingPolicyPlayReadyConfigurationResponseArgs and StreamingPolicyPlayReadyConfigurationResponseOutput values.
// You can construct a concrete instance of `StreamingPolicyPlayReadyConfigurationResponseInput` via:
//
//          StreamingPolicyPlayReadyConfigurationResponseArgs{...}
type StreamingPolicyPlayReadyConfigurationResponseInput interface {
	pulumi.Input

	ToStreamingPolicyPlayReadyConfigurationResponseOutput() StreamingPolicyPlayReadyConfigurationResponseOutput
	ToStreamingPolicyPlayReadyConfigurationResponseOutputWithContext(context.Context) StreamingPolicyPlayReadyConfigurationResponseOutput
}

// Class to specify configurations of PlayReady in Streaming Policy
type StreamingPolicyPlayReadyConfigurationResponseArgs struct {
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customLicenseAcquisitionUrlTemplate"`
	// Custom attributes for PlayReady
	PlayReadyCustomAttributes pulumi.StringPtrInput `pulumi:"playReadyCustomAttributes"`
}

func (StreamingPolicyPlayReadyConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyPlayReadyConfigurationResponse)(nil)).Elem()
}

func (i StreamingPolicyPlayReadyConfigurationResponseArgs) ToStreamingPolicyPlayReadyConfigurationResponseOutput() StreamingPolicyPlayReadyConfigurationResponseOutput {
	return i.ToStreamingPolicyPlayReadyConfigurationResponseOutputWithContext(context.Background())
}

func (i StreamingPolicyPlayReadyConfigurationResponseArgs) ToStreamingPolicyPlayReadyConfigurationResponseOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyPlayReadyConfigurationResponseOutput)
}

func (i StreamingPolicyPlayReadyConfigurationResponseArgs) ToStreamingPolicyPlayReadyConfigurationResponsePtrOutput() StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return i.ToStreamingPolicyPlayReadyConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i StreamingPolicyPlayReadyConfigurationResponseArgs) ToStreamingPolicyPlayReadyConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyPlayReadyConfigurationResponseOutput).ToStreamingPolicyPlayReadyConfigurationResponsePtrOutputWithContext(ctx)
}

// StreamingPolicyPlayReadyConfigurationResponsePtrInput is an input type that accepts StreamingPolicyPlayReadyConfigurationResponseArgs, StreamingPolicyPlayReadyConfigurationResponsePtr and StreamingPolicyPlayReadyConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `StreamingPolicyPlayReadyConfigurationResponsePtrInput` via:
//
//          StreamingPolicyPlayReadyConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyPlayReadyConfigurationResponsePtrInput interface {
	pulumi.Input

	ToStreamingPolicyPlayReadyConfigurationResponsePtrOutput() StreamingPolicyPlayReadyConfigurationResponsePtrOutput
	ToStreamingPolicyPlayReadyConfigurationResponsePtrOutputWithContext(context.Context) StreamingPolicyPlayReadyConfigurationResponsePtrOutput
}

type streamingPolicyPlayReadyConfigurationResponsePtrType StreamingPolicyPlayReadyConfigurationResponseArgs

func StreamingPolicyPlayReadyConfigurationResponsePtr(v *StreamingPolicyPlayReadyConfigurationResponseArgs) StreamingPolicyPlayReadyConfigurationResponsePtrInput {
	return (*streamingPolicyPlayReadyConfigurationResponsePtrType)(v)
}

func (*streamingPolicyPlayReadyConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyPlayReadyConfigurationResponse)(nil)).Elem()
}

func (i *streamingPolicyPlayReadyConfigurationResponsePtrType) ToStreamingPolicyPlayReadyConfigurationResponsePtrOutput() StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return i.ToStreamingPolicyPlayReadyConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *streamingPolicyPlayReadyConfigurationResponsePtrType) ToStreamingPolicyPlayReadyConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyPlayReadyConfigurationResponsePtrOutput)
}

// Class to specify configurations of PlayReady in Streaming Policy
type StreamingPolicyPlayReadyConfigurationResponseOutput struct{ *pulumi.OutputState }

func (StreamingPolicyPlayReadyConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyPlayReadyConfigurationResponse)(nil)).Elem()
}

func (o StreamingPolicyPlayReadyConfigurationResponseOutput) ToStreamingPolicyPlayReadyConfigurationResponseOutput() StreamingPolicyPlayReadyConfigurationResponseOutput {
	return o
}

func (o StreamingPolicyPlayReadyConfigurationResponseOutput) ToStreamingPolicyPlayReadyConfigurationResponseOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationResponseOutput {
	return o
}

func (o StreamingPolicyPlayReadyConfigurationResponseOutput) ToStreamingPolicyPlayReadyConfigurationResponsePtrOutput() StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return o.ToStreamingPolicyPlayReadyConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o StreamingPolicyPlayReadyConfigurationResponseOutput) ToStreamingPolicyPlayReadyConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return o.ApplyT(func(v StreamingPolicyPlayReadyConfigurationResponse) *StreamingPolicyPlayReadyConfigurationResponse {
		return &v
	}).(StreamingPolicyPlayReadyConfigurationResponsePtrOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyPlayReadyConfigurationResponseOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyPlayReadyConfigurationResponse) *string {
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// Custom attributes for PlayReady
func (o StreamingPolicyPlayReadyConfigurationResponseOutput) PlayReadyCustomAttributes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyPlayReadyConfigurationResponse) *string { return v.PlayReadyCustomAttributes }).(pulumi.StringPtrOutput)
}

type StreamingPolicyPlayReadyConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyPlayReadyConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyPlayReadyConfigurationResponse)(nil)).Elem()
}

func (o StreamingPolicyPlayReadyConfigurationResponsePtrOutput) ToStreamingPolicyPlayReadyConfigurationResponsePtrOutput() StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return o
}

func (o StreamingPolicyPlayReadyConfigurationResponsePtrOutput) ToStreamingPolicyPlayReadyConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return o
}

func (o StreamingPolicyPlayReadyConfigurationResponsePtrOutput) Elem() StreamingPolicyPlayReadyConfigurationResponseOutput {
	return o.ApplyT(func(v *StreamingPolicyPlayReadyConfigurationResponse) StreamingPolicyPlayReadyConfigurationResponse {
		return *v
	}).(StreamingPolicyPlayReadyConfigurationResponseOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyPlayReadyConfigurationResponsePtrOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyPlayReadyConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// Custom attributes for PlayReady
func (o StreamingPolicyPlayReadyConfigurationResponsePtrOutput) PlayReadyCustomAttributes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyPlayReadyConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.PlayReadyCustomAttributes
	}).(pulumi.StringPtrOutput)
}

// Class to specify configurations of Widevine in Streaming Policy
type StreamingPolicyWidevineConfiguration struct {
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate *string `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

// StreamingPolicyWidevineConfigurationInput is an input type that accepts StreamingPolicyWidevineConfigurationArgs and StreamingPolicyWidevineConfigurationOutput values.
// You can construct a concrete instance of `StreamingPolicyWidevineConfigurationInput` via:
//
//          StreamingPolicyWidevineConfigurationArgs{...}
type StreamingPolicyWidevineConfigurationInput interface {
	pulumi.Input

	ToStreamingPolicyWidevineConfigurationOutput() StreamingPolicyWidevineConfigurationOutput
	ToStreamingPolicyWidevineConfigurationOutputWithContext(context.Context) StreamingPolicyWidevineConfigurationOutput
}

// Class to specify configurations of Widevine in Streaming Policy
type StreamingPolicyWidevineConfigurationArgs struct {
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

func (StreamingPolicyWidevineConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyWidevineConfiguration)(nil)).Elem()
}

func (i StreamingPolicyWidevineConfigurationArgs) ToStreamingPolicyWidevineConfigurationOutput() StreamingPolicyWidevineConfigurationOutput {
	return i.ToStreamingPolicyWidevineConfigurationOutputWithContext(context.Background())
}

func (i StreamingPolicyWidevineConfigurationArgs) ToStreamingPolicyWidevineConfigurationOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyWidevineConfigurationOutput)
}

func (i StreamingPolicyWidevineConfigurationArgs) ToStreamingPolicyWidevineConfigurationPtrOutput() StreamingPolicyWidevineConfigurationPtrOutput {
	return i.ToStreamingPolicyWidevineConfigurationPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyWidevineConfigurationArgs) ToStreamingPolicyWidevineConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyWidevineConfigurationOutput).ToStreamingPolicyWidevineConfigurationPtrOutputWithContext(ctx)
}

// StreamingPolicyWidevineConfigurationPtrInput is an input type that accepts StreamingPolicyWidevineConfigurationArgs, StreamingPolicyWidevineConfigurationPtr and StreamingPolicyWidevineConfigurationPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyWidevineConfigurationPtrInput` via:
//
//          StreamingPolicyWidevineConfigurationArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyWidevineConfigurationPtrInput interface {
	pulumi.Input

	ToStreamingPolicyWidevineConfigurationPtrOutput() StreamingPolicyWidevineConfigurationPtrOutput
	ToStreamingPolicyWidevineConfigurationPtrOutputWithContext(context.Context) StreamingPolicyWidevineConfigurationPtrOutput
}

type streamingPolicyWidevineConfigurationPtrType StreamingPolicyWidevineConfigurationArgs

func StreamingPolicyWidevineConfigurationPtr(v *StreamingPolicyWidevineConfigurationArgs) StreamingPolicyWidevineConfigurationPtrInput {
	return (*streamingPolicyWidevineConfigurationPtrType)(v)
}

func (*streamingPolicyWidevineConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyWidevineConfiguration)(nil)).Elem()
}

func (i *streamingPolicyWidevineConfigurationPtrType) ToStreamingPolicyWidevineConfigurationPtrOutput() StreamingPolicyWidevineConfigurationPtrOutput {
	return i.ToStreamingPolicyWidevineConfigurationPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyWidevineConfigurationPtrType) ToStreamingPolicyWidevineConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyWidevineConfigurationPtrOutput)
}

// Class to specify configurations of Widevine in Streaming Policy
type StreamingPolicyWidevineConfigurationOutput struct{ *pulumi.OutputState }

func (StreamingPolicyWidevineConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyWidevineConfiguration)(nil)).Elem()
}

func (o StreamingPolicyWidevineConfigurationOutput) ToStreamingPolicyWidevineConfigurationOutput() StreamingPolicyWidevineConfigurationOutput {
	return o
}

func (o StreamingPolicyWidevineConfigurationOutput) ToStreamingPolicyWidevineConfigurationOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationOutput {
	return o
}

func (o StreamingPolicyWidevineConfigurationOutput) ToStreamingPolicyWidevineConfigurationPtrOutput() StreamingPolicyWidevineConfigurationPtrOutput {
	return o.ToStreamingPolicyWidevineConfigurationPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyWidevineConfigurationOutput) ToStreamingPolicyWidevineConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationPtrOutput {
	return o.ApplyT(func(v StreamingPolicyWidevineConfiguration) *StreamingPolicyWidevineConfiguration {
		return &v
	}).(StreamingPolicyWidevineConfigurationPtrOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyWidevineConfigurationOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyWidevineConfiguration) *string { return v.CustomLicenseAcquisitionUrlTemplate }).(pulumi.StringPtrOutput)
}

type StreamingPolicyWidevineConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyWidevineConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyWidevineConfiguration)(nil)).Elem()
}

func (o StreamingPolicyWidevineConfigurationPtrOutput) ToStreamingPolicyWidevineConfigurationPtrOutput() StreamingPolicyWidevineConfigurationPtrOutput {
	return o
}

func (o StreamingPolicyWidevineConfigurationPtrOutput) ToStreamingPolicyWidevineConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationPtrOutput {
	return o
}

func (o StreamingPolicyWidevineConfigurationPtrOutput) Elem() StreamingPolicyWidevineConfigurationOutput {
	return o.ApplyT(func(v *StreamingPolicyWidevineConfiguration) StreamingPolicyWidevineConfiguration { return *v }).(StreamingPolicyWidevineConfigurationOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyWidevineConfigurationPtrOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyWidevineConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// Class to specify configurations of Widevine in Streaming Policy
type StreamingPolicyWidevineConfigurationResponse struct {
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate *string `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

// StreamingPolicyWidevineConfigurationResponseInput is an input type that accepts StreamingPolicyWidevineConfigurationResponseArgs and StreamingPolicyWidevineConfigurationResponseOutput values.
// You can construct a concrete instance of `StreamingPolicyWidevineConfigurationResponseInput` via:
//
//          StreamingPolicyWidevineConfigurationResponseArgs{...}
type StreamingPolicyWidevineConfigurationResponseInput interface {
	pulumi.Input

	ToStreamingPolicyWidevineConfigurationResponseOutput() StreamingPolicyWidevineConfigurationResponseOutput
	ToStreamingPolicyWidevineConfigurationResponseOutputWithContext(context.Context) StreamingPolicyWidevineConfigurationResponseOutput
}

// Class to specify configurations of Widevine in Streaming Policy
type StreamingPolicyWidevineConfigurationResponseArgs struct {
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

func (StreamingPolicyWidevineConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyWidevineConfigurationResponse)(nil)).Elem()
}

func (i StreamingPolicyWidevineConfigurationResponseArgs) ToStreamingPolicyWidevineConfigurationResponseOutput() StreamingPolicyWidevineConfigurationResponseOutput {
	return i.ToStreamingPolicyWidevineConfigurationResponseOutputWithContext(context.Background())
}

func (i StreamingPolicyWidevineConfigurationResponseArgs) ToStreamingPolicyWidevineConfigurationResponseOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyWidevineConfigurationResponseOutput)
}

func (i StreamingPolicyWidevineConfigurationResponseArgs) ToStreamingPolicyWidevineConfigurationResponsePtrOutput() StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return i.ToStreamingPolicyWidevineConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i StreamingPolicyWidevineConfigurationResponseArgs) ToStreamingPolicyWidevineConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyWidevineConfigurationResponseOutput).ToStreamingPolicyWidevineConfigurationResponsePtrOutputWithContext(ctx)
}

// StreamingPolicyWidevineConfigurationResponsePtrInput is an input type that accepts StreamingPolicyWidevineConfigurationResponseArgs, StreamingPolicyWidevineConfigurationResponsePtr and StreamingPolicyWidevineConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `StreamingPolicyWidevineConfigurationResponsePtrInput` via:
//
//          StreamingPolicyWidevineConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyWidevineConfigurationResponsePtrInput interface {
	pulumi.Input

	ToStreamingPolicyWidevineConfigurationResponsePtrOutput() StreamingPolicyWidevineConfigurationResponsePtrOutput
	ToStreamingPolicyWidevineConfigurationResponsePtrOutputWithContext(context.Context) StreamingPolicyWidevineConfigurationResponsePtrOutput
}

type streamingPolicyWidevineConfigurationResponsePtrType StreamingPolicyWidevineConfigurationResponseArgs

func StreamingPolicyWidevineConfigurationResponsePtr(v *StreamingPolicyWidevineConfigurationResponseArgs) StreamingPolicyWidevineConfigurationResponsePtrInput {
	return (*streamingPolicyWidevineConfigurationResponsePtrType)(v)
}

func (*streamingPolicyWidevineConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyWidevineConfigurationResponse)(nil)).Elem()
}

func (i *streamingPolicyWidevineConfigurationResponsePtrType) ToStreamingPolicyWidevineConfigurationResponsePtrOutput() StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return i.ToStreamingPolicyWidevineConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *streamingPolicyWidevineConfigurationResponsePtrType) ToStreamingPolicyWidevineConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyWidevineConfigurationResponsePtrOutput)
}

// Class to specify configurations of Widevine in Streaming Policy
type StreamingPolicyWidevineConfigurationResponseOutput struct{ *pulumi.OutputState }

func (StreamingPolicyWidevineConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyWidevineConfigurationResponse)(nil)).Elem()
}

func (o StreamingPolicyWidevineConfigurationResponseOutput) ToStreamingPolicyWidevineConfigurationResponseOutput() StreamingPolicyWidevineConfigurationResponseOutput {
	return o
}

func (o StreamingPolicyWidevineConfigurationResponseOutput) ToStreamingPolicyWidevineConfigurationResponseOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationResponseOutput {
	return o
}

func (o StreamingPolicyWidevineConfigurationResponseOutput) ToStreamingPolicyWidevineConfigurationResponsePtrOutput() StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return o.ToStreamingPolicyWidevineConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o StreamingPolicyWidevineConfigurationResponseOutput) ToStreamingPolicyWidevineConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v StreamingPolicyWidevineConfigurationResponse) *StreamingPolicyWidevineConfigurationResponse {
		return &v
	}).(StreamingPolicyWidevineConfigurationResponsePtrOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyWidevineConfigurationResponseOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyWidevineConfigurationResponse) *string {
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

type StreamingPolicyWidevineConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyWidevineConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyWidevineConfigurationResponse)(nil)).Elem()
}

func (o StreamingPolicyWidevineConfigurationResponsePtrOutput) ToStreamingPolicyWidevineConfigurationResponsePtrOutput() StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return o
}

func (o StreamingPolicyWidevineConfigurationResponsePtrOutput) ToStreamingPolicyWidevineConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return o
}

func (o StreamingPolicyWidevineConfigurationResponsePtrOutput) Elem() StreamingPolicyWidevineConfigurationResponseOutput {
	return o.ApplyT(func(v *StreamingPolicyWidevineConfigurationResponse) StreamingPolicyWidevineConfigurationResponse {
		return *v
	}).(StreamingPolicyWidevineConfigurationResponseOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyWidevineConfigurationResponsePtrOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyWidevineConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// Class to specify one track property condition
type TrackPropertyCondition struct {
	// Track property condition operation
	Operation string `pulumi:"operation"`
	// Track property type
	Property string `pulumi:"property"`
	// Track property value
	Value *string `pulumi:"value"`
}

// TrackPropertyConditionInput is an input type that accepts TrackPropertyConditionArgs and TrackPropertyConditionOutput values.
// You can construct a concrete instance of `TrackPropertyConditionInput` via:
//
//          TrackPropertyConditionArgs{...}
type TrackPropertyConditionInput interface {
	pulumi.Input

	ToTrackPropertyConditionOutput() TrackPropertyConditionOutput
	ToTrackPropertyConditionOutputWithContext(context.Context) TrackPropertyConditionOutput
}

// Class to specify one track property condition
type TrackPropertyConditionArgs struct {
	// Track property condition operation
	Operation pulumi.StringInput `pulumi:"operation"`
	// Track property type
	Property pulumi.StringInput `pulumi:"property"`
	// Track property value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TrackPropertyConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackPropertyCondition)(nil)).Elem()
}

func (i TrackPropertyConditionArgs) ToTrackPropertyConditionOutput() TrackPropertyConditionOutput {
	return i.ToTrackPropertyConditionOutputWithContext(context.Background())
}

func (i TrackPropertyConditionArgs) ToTrackPropertyConditionOutputWithContext(ctx context.Context) TrackPropertyConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackPropertyConditionOutput)
}

// TrackPropertyConditionArrayInput is an input type that accepts TrackPropertyConditionArray and TrackPropertyConditionArrayOutput values.
// You can construct a concrete instance of `TrackPropertyConditionArrayInput` via:
//
//          TrackPropertyConditionArray{ TrackPropertyConditionArgs{...} }
type TrackPropertyConditionArrayInput interface {
	pulumi.Input

	ToTrackPropertyConditionArrayOutput() TrackPropertyConditionArrayOutput
	ToTrackPropertyConditionArrayOutputWithContext(context.Context) TrackPropertyConditionArrayOutput
}

type TrackPropertyConditionArray []TrackPropertyConditionInput

func (TrackPropertyConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackPropertyCondition)(nil)).Elem()
}

func (i TrackPropertyConditionArray) ToTrackPropertyConditionArrayOutput() TrackPropertyConditionArrayOutput {
	return i.ToTrackPropertyConditionArrayOutputWithContext(context.Background())
}

func (i TrackPropertyConditionArray) ToTrackPropertyConditionArrayOutputWithContext(ctx context.Context) TrackPropertyConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackPropertyConditionArrayOutput)
}

// Class to specify one track property condition
type TrackPropertyConditionOutput struct{ *pulumi.OutputState }

func (TrackPropertyConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackPropertyCondition)(nil)).Elem()
}

func (o TrackPropertyConditionOutput) ToTrackPropertyConditionOutput() TrackPropertyConditionOutput {
	return o
}

func (o TrackPropertyConditionOutput) ToTrackPropertyConditionOutputWithContext(ctx context.Context) TrackPropertyConditionOutput {
	return o
}

// Track property condition operation
func (o TrackPropertyConditionOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v TrackPropertyCondition) string { return v.Operation }).(pulumi.StringOutput)
}

// Track property type
func (o TrackPropertyConditionOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v TrackPropertyCondition) string { return v.Property }).(pulumi.StringOutput)
}

// Track property value
func (o TrackPropertyConditionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrackPropertyCondition) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TrackPropertyConditionArrayOutput struct{ *pulumi.OutputState }

func (TrackPropertyConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackPropertyCondition)(nil)).Elem()
}

func (o TrackPropertyConditionArrayOutput) ToTrackPropertyConditionArrayOutput() TrackPropertyConditionArrayOutput {
	return o
}

func (o TrackPropertyConditionArrayOutput) ToTrackPropertyConditionArrayOutputWithContext(ctx context.Context) TrackPropertyConditionArrayOutput {
	return o
}

func (o TrackPropertyConditionArrayOutput) Index(i pulumi.IntInput) TrackPropertyConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrackPropertyCondition {
		return vs[0].([]TrackPropertyCondition)[vs[1].(int)]
	}).(TrackPropertyConditionOutput)
}

// Class to specify one track property condition
type TrackPropertyConditionResponse struct {
	// Track property condition operation
	Operation string `pulumi:"operation"`
	// Track property type
	Property string `pulumi:"property"`
	// Track property value
	Value *string `pulumi:"value"`
}

// TrackPropertyConditionResponseInput is an input type that accepts TrackPropertyConditionResponseArgs and TrackPropertyConditionResponseOutput values.
// You can construct a concrete instance of `TrackPropertyConditionResponseInput` via:
//
//          TrackPropertyConditionResponseArgs{...}
type TrackPropertyConditionResponseInput interface {
	pulumi.Input

	ToTrackPropertyConditionResponseOutput() TrackPropertyConditionResponseOutput
	ToTrackPropertyConditionResponseOutputWithContext(context.Context) TrackPropertyConditionResponseOutput
}

// Class to specify one track property condition
type TrackPropertyConditionResponseArgs struct {
	// Track property condition operation
	Operation pulumi.StringInput `pulumi:"operation"`
	// Track property type
	Property pulumi.StringInput `pulumi:"property"`
	// Track property value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TrackPropertyConditionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackPropertyConditionResponse)(nil)).Elem()
}

func (i TrackPropertyConditionResponseArgs) ToTrackPropertyConditionResponseOutput() TrackPropertyConditionResponseOutput {
	return i.ToTrackPropertyConditionResponseOutputWithContext(context.Background())
}

func (i TrackPropertyConditionResponseArgs) ToTrackPropertyConditionResponseOutputWithContext(ctx context.Context) TrackPropertyConditionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackPropertyConditionResponseOutput)
}

// TrackPropertyConditionResponseArrayInput is an input type that accepts TrackPropertyConditionResponseArray and TrackPropertyConditionResponseArrayOutput values.
// You can construct a concrete instance of `TrackPropertyConditionResponseArrayInput` via:
//
//          TrackPropertyConditionResponseArray{ TrackPropertyConditionResponseArgs{...} }
type TrackPropertyConditionResponseArrayInput interface {
	pulumi.Input

	ToTrackPropertyConditionResponseArrayOutput() TrackPropertyConditionResponseArrayOutput
	ToTrackPropertyConditionResponseArrayOutputWithContext(context.Context) TrackPropertyConditionResponseArrayOutput
}

type TrackPropertyConditionResponseArray []TrackPropertyConditionResponseInput

func (TrackPropertyConditionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackPropertyConditionResponse)(nil)).Elem()
}

func (i TrackPropertyConditionResponseArray) ToTrackPropertyConditionResponseArrayOutput() TrackPropertyConditionResponseArrayOutput {
	return i.ToTrackPropertyConditionResponseArrayOutputWithContext(context.Background())
}

func (i TrackPropertyConditionResponseArray) ToTrackPropertyConditionResponseArrayOutputWithContext(ctx context.Context) TrackPropertyConditionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackPropertyConditionResponseArrayOutput)
}

// Class to specify one track property condition
type TrackPropertyConditionResponseOutput struct{ *pulumi.OutputState }

func (TrackPropertyConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackPropertyConditionResponse)(nil)).Elem()
}

func (o TrackPropertyConditionResponseOutput) ToTrackPropertyConditionResponseOutput() TrackPropertyConditionResponseOutput {
	return o
}

func (o TrackPropertyConditionResponseOutput) ToTrackPropertyConditionResponseOutputWithContext(ctx context.Context) TrackPropertyConditionResponseOutput {
	return o
}

// Track property condition operation
func (o TrackPropertyConditionResponseOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v TrackPropertyConditionResponse) string { return v.Operation }).(pulumi.StringOutput)
}

// Track property type
func (o TrackPropertyConditionResponseOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v TrackPropertyConditionResponse) string { return v.Property }).(pulumi.StringOutput)
}

// Track property value
func (o TrackPropertyConditionResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrackPropertyConditionResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TrackPropertyConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (TrackPropertyConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackPropertyConditionResponse)(nil)).Elem()
}

func (o TrackPropertyConditionResponseArrayOutput) ToTrackPropertyConditionResponseArrayOutput() TrackPropertyConditionResponseArrayOutput {
	return o
}

func (o TrackPropertyConditionResponseArrayOutput) ToTrackPropertyConditionResponseArrayOutputWithContext(ctx context.Context) TrackPropertyConditionResponseArrayOutput {
	return o
}

func (o TrackPropertyConditionResponseArrayOutput) Index(i pulumi.IntInput) TrackPropertyConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrackPropertyConditionResponse {
		return vs[0].([]TrackPropertyConditionResponse)[vs[1].(int)]
	}).(TrackPropertyConditionResponseOutput)
}

// Class to select a track
type TrackSelection struct {
	// TrackSelections is a track property condition list which can specify track(s)
	TrackSelections []TrackPropertyCondition `pulumi:"trackSelections"`
}

// TrackSelectionInput is an input type that accepts TrackSelectionArgs and TrackSelectionOutput values.
// You can construct a concrete instance of `TrackSelectionInput` via:
//
//          TrackSelectionArgs{...}
type TrackSelectionInput interface {
	pulumi.Input

	ToTrackSelectionOutput() TrackSelectionOutput
	ToTrackSelectionOutputWithContext(context.Context) TrackSelectionOutput
}

// Class to select a track
type TrackSelectionArgs struct {
	// TrackSelections is a track property condition list which can specify track(s)
	TrackSelections TrackPropertyConditionArrayInput `pulumi:"trackSelections"`
}

func (TrackSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackSelection)(nil)).Elem()
}

func (i TrackSelectionArgs) ToTrackSelectionOutput() TrackSelectionOutput {
	return i.ToTrackSelectionOutputWithContext(context.Background())
}

func (i TrackSelectionArgs) ToTrackSelectionOutputWithContext(ctx context.Context) TrackSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackSelectionOutput)
}

// TrackSelectionArrayInput is an input type that accepts TrackSelectionArray and TrackSelectionArrayOutput values.
// You can construct a concrete instance of `TrackSelectionArrayInput` via:
//
//          TrackSelectionArray{ TrackSelectionArgs{...} }
type TrackSelectionArrayInput interface {
	pulumi.Input

	ToTrackSelectionArrayOutput() TrackSelectionArrayOutput
	ToTrackSelectionArrayOutputWithContext(context.Context) TrackSelectionArrayOutput
}

type TrackSelectionArray []TrackSelectionInput

func (TrackSelectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackSelection)(nil)).Elem()
}

func (i TrackSelectionArray) ToTrackSelectionArrayOutput() TrackSelectionArrayOutput {
	return i.ToTrackSelectionArrayOutputWithContext(context.Background())
}

func (i TrackSelectionArray) ToTrackSelectionArrayOutputWithContext(ctx context.Context) TrackSelectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackSelectionArrayOutput)
}

// Class to select a track
type TrackSelectionOutput struct{ *pulumi.OutputState }

func (TrackSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackSelection)(nil)).Elem()
}

func (o TrackSelectionOutput) ToTrackSelectionOutput() TrackSelectionOutput {
	return o
}

func (o TrackSelectionOutput) ToTrackSelectionOutputWithContext(ctx context.Context) TrackSelectionOutput {
	return o
}

// TrackSelections is a track property condition list which can specify track(s)
func (o TrackSelectionOutput) TrackSelections() TrackPropertyConditionArrayOutput {
	return o.ApplyT(func(v TrackSelection) []TrackPropertyCondition { return v.TrackSelections }).(TrackPropertyConditionArrayOutput)
}

type TrackSelectionArrayOutput struct{ *pulumi.OutputState }

func (TrackSelectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackSelection)(nil)).Elem()
}

func (o TrackSelectionArrayOutput) ToTrackSelectionArrayOutput() TrackSelectionArrayOutput {
	return o
}

func (o TrackSelectionArrayOutput) ToTrackSelectionArrayOutputWithContext(ctx context.Context) TrackSelectionArrayOutput {
	return o
}

func (o TrackSelectionArrayOutput) Index(i pulumi.IntInput) TrackSelectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrackSelection {
		return vs[0].([]TrackSelection)[vs[1].(int)]
	}).(TrackSelectionOutput)
}

// Class to select a track
type TrackSelectionResponse struct {
	// TrackSelections is a track property condition list which can specify track(s)
	TrackSelections []TrackPropertyConditionResponse `pulumi:"trackSelections"`
}

// TrackSelectionResponseInput is an input type that accepts TrackSelectionResponseArgs and TrackSelectionResponseOutput values.
// You can construct a concrete instance of `TrackSelectionResponseInput` via:
//
//          TrackSelectionResponseArgs{...}
type TrackSelectionResponseInput interface {
	pulumi.Input

	ToTrackSelectionResponseOutput() TrackSelectionResponseOutput
	ToTrackSelectionResponseOutputWithContext(context.Context) TrackSelectionResponseOutput
}

// Class to select a track
type TrackSelectionResponseArgs struct {
	// TrackSelections is a track property condition list which can specify track(s)
	TrackSelections TrackPropertyConditionResponseArrayInput `pulumi:"trackSelections"`
}

func (TrackSelectionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackSelectionResponse)(nil)).Elem()
}

func (i TrackSelectionResponseArgs) ToTrackSelectionResponseOutput() TrackSelectionResponseOutput {
	return i.ToTrackSelectionResponseOutputWithContext(context.Background())
}

func (i TrackSelectionResponseArgs) ToTrackSelectionResponseOutputWithContext(ctx context.Context) TrackSelectionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackSelectionResponseOutput)
}

// TrackSelectionResponseArrayInput is an input type that accepts TrackSelectionResponseArray and TrackSelectionResponseArrayOutput values.
// You can construct a concrete instance of `TrackSelectionResponseArrayInput` via:
//
//          TrackSelectionResponseArray{ TrackSelectionResponseArgs{...} }
type TrackSelectionResponseArrayInput interface {
	pulumi.Input

	ToTrackSelectionResponseArrayOutput() TrackSelectionResponseArrayOutput
	ToTrackSelectionResponseArrayOutputWithContext(context.Context) TrackSelectionResponseArrayOutput
}

type TrackSelectionResponseArray []TrackSelectionResponseInput

func (TrackSelectionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackSelectionResponse)(nil)).Elem()
}

func (i TrackSelectionResponseArray) ToTrackSelectionResponseArrayOutput() TrackSelectionResponseArrayOutput {
	return i.ToTrackSelectionResponseArrayOutputWithContext(context.Background())
}

func (i TrackSelectionResponseArray) ToTrackSelectionResponseArrayOutputWithContext(ctx context.Context) TrackSelectionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackSelectionResponseArrayOutput)
}

// Class to select a track
type TrackSelectionResponseOutput struct{ *pulumi.OutputState }

func (TrackSelectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackSelectionResponse)(nil)).Elem()
}

func (o TrackSelectionResponseOutput) ToTrackSelectionResponseOutput() TrackSelectionResponseOutput {
	return o
}

func (o TrackSelectionResponseOutput) ToTrackSelectionResponseOutputWithContext(ctx context.Context) TrackSelectionResponseOutput {
	return o
}

// TrackSelections is a track property condition list which can specify track(s)
func (o TrackSelectionResponseOutput) TrackSelections() TrackPropertyConditionResponseArrayOutput {
	return o.ApplyT(func(v TrackSelectionResponse) []TrackPropertyConditionResponse { return v.TrackSelections }).(TrackPropertyConditionResponseArrayOutput)
}

type TrackSelectionResponseArrayOutput struct{ *pulumi.OutputState }

func (TrackSelectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackSelectionResponse)(nil)).Elem()
}

func (o TrackSelectionResponseArrayOutput) ToTrackSelectionResponseArrayOutput() TrackSelectionResponseArrayOutput {
	return o
}

func (o TrackSelectionResponseArrayOutput) ToTrackSelectionResponseArrayOutputWithContext(ctx context.Context) TrackSelectionResponseArrayOutput {
	return o
}

func (o TrackSelectionResponseArrayOutput) Index(i pulumi.IntInput) TrackSelectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrackSelectionResponse {
		return vs[0].([]TrackSelectionResponse)[vs[1].(int)]
	}).(TrackSelectionResponseOutput)
}

// Describes the properties of a TransformOutput, which are the rules to be applied while generating the desired output.
type TransformOutput struct {
	// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
	OnError *string `pulumi:"onError"`
	// Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the output.
	Preset interface{} `pulumi:"preset"`
	// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
	RelativePriority *string `pulumi:"relativePriority"`
}

// TransformOutputInput is an input type that accepts TransformOutputArgs and TransformOutputOutput values.
// You can construct a concrete instance of `TransformOutputInput` via:
//
//          TransformOutputArgs{...}
type TransformOutputInput interface {
	pulumi.Input

	ToTransformOutputOutput() TransformOutputOutput
	ToTransformOutputOutputWithContext(context.Context) TransformOutputOutput
}

// Describes the properties of a TransformOutput, which are the rules to be applied while generating the desired output.
type TransformOutputArgs struct {
	// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
	OnError pulumi.StringPtrInput `pulumi:"onError"`
	// Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the output.
	Preset pulumi.Input `pulumi:"preset"`
	// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
	RelativePriority pulumi.StringPtrInput `pulumi:"relativePriority"`
}

func (TransformOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutput)(nil)).Elem()
}

func (i TransformOutputArgs) ToTransformOutputOutput() TransformOutputOutput {
	return i.ToTransformOutputOutputWithContext(context.Background())
}

func (i TransformOutputArgs) ToTransformOutputOutputWithContext(ctx context.Context) TransformOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputOutput)
}

// TransformOutputArrayInput is an input type that accepts TransformOutputArray and TransformOutputArrayOutput values.
// You can construct a concrete instance of `TransformOutputArrayInput` via:
//
//          TransformOutputArray{ TransformOutputArgs{...} }
type TransformOutputArrayInput interface {
	pulumi.Input

	ToTransformOutputArrayOutput() TransformOutputArrayOutput
	ToTransformOutputArrayOutputWithContext(context.Context) TransformOutputArrayOutput
}

type TransformOutputArray []TransformOutputInput

func (TransformOutputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutput)(nil)).Elem()
}

func (i TransformOutputArray) ToTransformOutputArrayOutput() TransformOutputArrayOutput {
	return i.ToTransformOutputArrayOutputWithContext(context.Background())
}

func (i TransformOutputArray) ToTransformOutputArrayOutputWithContext(ctx context.Context) TransformOutputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputArrayOutput)
}

// Describes the properties of a TransformOutput, which are the rules to be applied while generating the desired output.
type TransformOutputOutput struct{ *pulumi.OutputState }

func (TransformOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutput)(nil)).Elem()
}

func (o TransformOutputOutput) ToTransformOutputOutput() TransformOutputOutput {
	return o
}

func (o TransformOutputOutput) ToTransformOutputOutputWithContext(ctx context.Context) TransformOutputOutput {
	return o
}

// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
func (o TransformOutputOutput) OnError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutput) *string { return v.OnError }).(pulumi.StringPtrOutput)
}

// Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the output.
func (o TransformOutputOutput) Preset() pulumi.AnyOutput {
	return o.ApplyT(func(v TransformOutput) interface{} { return v.Preset }).(pulumi.AnyOutput)
}

// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
func (o TransformOutputOutput) RelativePriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutput) *string { return v.RelativePriority }).(pulumi.StringPtrOutput)
}

type TransformOutputArrayOutput struct{ *pulumi.OutputState }

func (TransformOutputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutput)(nil)).Elem()
}

func (o TransformOutputArrayOutput) ToTransformOutputArrayOutput() TransformOutputArrayOutput {
	return o
}

func (o TransformOutputArrayOutput) ToTransformOutputArrayOutputWithContext(ctx context.Context) TransformOutputArrayOutput {
	return o
}

func (o TransformOutputArrayOutput) Index(i pulumi.IntInput) TransformOutputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformOutput {
		return vs[0].([]TransformOutput)[vs[1].(int)]
	}).(TransformOutputOutput)
}

// Describes the properties of a TransformOutput, which are the rules to be applied while generating the desired output.
type TransformOutputResponse struct {
	// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
	OnError *string `pulumi:"onError"`
	// Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the output.
	Preset interface{} `pulumi:"preset"`
	// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
	RelativePriority *string `pulumi:"relativePriority"`
}

// TransformOutputResponseInput is an input type that accepts TransformOutputResponseArgs and TransformOutputResponseOutput values.
// You can construct a concrete instance of `TransformOutputResponseInput` via:
//
//          TransformOutputResponseArgs{...}
type TransformOutputResponseInput interface {
	pulumi.Input

	ToTransformOutputResponseOutput() TransformOutputResponseOutput
	ToTransformOutputResponseOutputWithContext(context.Context) TransformOutputResponseOutput
}

// Describes the properties of a TransformOutput, which are the rules to be applied while generating the desired output.
type TransformOutputResponseArgs struct {
	// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
	OnError pulumi.StringPtrInput `pulumi:"onError"`
	// Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the output.
	Preset pulumi.Input `pulumi:"preset"`
	// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
	RelativePriority pulumi.StringPtrInput `pulumi:"relativePriority"`
}

func (TransformOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputResponse)(nil)).Elem()
}

func (i TransformOutputResponseArgs) ToTransformOutputResponseOutput() TransformOutputResponseOutput {
	return i.ToTransformOutputResponseOutputWithContext(context.Background())
}

func (i TransformOutputResponseArgs) ToTransformOutputResponseOutputWithContext(ctx context.Context) TransformOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputResponseOutput)
}

// TransformOutputResponseArrayInput is an input type that accepts TransformOutputResponseArray and TransformOutputResponseArrayOutput values.
// You can construct a concrete instance of `TransformOutputResponseArrayInput` via:
//
//          TransformOutputResponseArray{ TransformOutputResponseArgs{...} }
type TransformOutputResponseArrayInput interface {
	pulumi.Input

	ToTransformOutputResponseArrayOutput() TransformOutputResponseArrayOutput
	ToTransformOutputResponseArrayOutputWithContext(context.Context) TransformOutputResponseArrayOutput
}

type TransformOutputResponseArray []TransformOutputResponseInput

func (TransformOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputResponse)(nil)).Elem()
}

func (i TransformOutputResponseArray) ToTransformOutputResponseArrayOutput() TransformOutputResponseArrayOutput {
	return i.ToTransformOutputResponseArrayOutputWithContext(context.Background())
}

func (i TransformOutputResponseArray) ToTransformOutputResponseArrayOutputWithContext(ctx context.Context) TransformOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputResponseArrayOutput)
}

// Describes the properties of a TransformOutput, which are the rules to be applied while generating the desired output.
type TransformOutputResponseOutput struct{ *pulumi.OutputState }

func (TransformOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputResponse)(nil)).Elem()
}

func (o TransformOutputResponseOutput) ToTransformOutputResponseOutput() TransformOutputResponseOutput {
	return o
}

func (o TransformOutputResponseOutput) ToTransformOutputResponseOutputWithContext(ctx context.Context) TransformOutputResponseOutput {
	return o
}

// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
func (o TransformOutputResponseOutput) OnError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputResponse) *string { return v.OnError }).(pulumi.StringPtrOutput)
}

// Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the output.
func (o TransformOutputResponseOutput) Preset() pulumi.AnyOutput {
	return o.ApplyT(func(v TransformOutputResponse) interface{} { return v.Preset }).(pulumi.AnyOutput)
}

// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
func (o TransformOutputResponseOutput) RelativePriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputResponse) *string { return v.RelativePriority }).(pulumi.StringPtrOutput)
}

type TransformOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (TransformOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputResponse)(nil)).Elem()
}

func (o TransformOutputResponseArrayOutput) ToTransformOutputResponseArrayOutput() TransformOutputResponseArrayOutput {
	return o
}

func (o TransformOutputResponseArrayOutput) ToTransformOutputResponseArrayOutputWithContext(ctx context.Context) TransformOutputResponseArrayOutput {
	return o
}

func (o TransformOutputResponseArrayOutput) Index(i pulumi.IntInput) TransformOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformOutputResponse {
		return vs[0].([]TransformOutputResponse)[vs[1].(int)]
	}).(TransformOutputResponseOutput)
}

// Specifies the clip time as a Utc time position in the media file.  The Utc time can point to a different position depending on whether the media file starts from a timestamp of zero or not.
type UtcClipTime struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The time position on the timeline of the input media based on Utc time.
	Time string `pulumi:"time"`
}

// UtcClipTimeInput is an input type that accepts UtcClipTimeArgs and UtcClipTimeOutput values.
// You can construct a concrete instance of `UtcClipTimeInput` via:
//
//          UtcClipTimeArgs{...}
type UtcClipTimeInput interface {
	pulumi.Input

	ToUtcClipTimeOutput() UtcClipTimeOutput
	ToUtcClipTimeOutputWithContext(context.Context) UtcClipTimeOutput
}

// Specifies the clip time as a Utc time position in the media file.  The Utc time can point to a different position depending on whether the media file starts from a timestamp of zero or not.
type UtcClipTimeArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The time position on the timeline of the input media based on Utc time.
	Time pulumi.StringInput `pulumi:"time"`
}

func (UtcClipTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UtcClipTime)(nil)).Elem()
}

func (i UtcClipTimeArgs) ToUtcClipTimeOutput() UtcClipTimeOutput {
	return i.ToUtcClipTimeOutputWithContext(context.Background())
}

func (i UtcClipTimeArgs) ToUtcClipTimeOutputWithContext(ctx context.Context) UtcClipTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UtcClipTimeOutput)
}

// Specifies the clip time as a Utc time position in the media file.  The Utc time can point to a different position depending on whether the media file starts from a timestamp of zero or not.
type UtcClipTimeOutput struct{ *pulumi.OutputState }

func (UtcClipTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UtcClipTime)(nil)).Elem()
}

func (o UtcClipTimeOutput) ToUtcClipTimeOutput() UtcClipTimeOutput {
	return o
}

func (o UtcClipTimeOutput) ToUtcClipTimeOutputWithContext(ctx context.Context) UtcClipTimeOutput {
	return o
}

// The discriminator for derived types.
func (o UtcClipTimeOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v UtcClipTime) string { return v.OdataType }).(pulumi.StringOutput)
}

// The time position on the timeline of the input media based on Utc time.
func (o UtcClipTimeOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v UtcClipTime) string { return v.Time }).(pulumi.StringOutput)
}

// Specifies the clip time as a Utc time position in the media file.  The Utc time can point to a different position depending on whether the media file starts from a timestamp of zero or not.
type UtcClipTimeResponse struct {
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The time position on the timeline of the input media based on Utc time.
	Time string `pulumi:"time"`
}

// UtcClipTimeResponseInput is an input type that accepts UtcClipTimeResponseArgs and UtcClipTimeResponseOutput values.
// You can construct a concrete instance of `UtcClipTimeResponseInput` via:
//
//          UtcClipTimeResponseArgs{...}
type UtcClipTimeResponseInput interface {
	pulumi.Input

	ToUtcClipTimeResponseOutput() UtcClipTimeResponseOutput
	ToUtcClipTimeResponseOutputWithContext(context.Context) UtcClipTimeResponseOutput
}

// Specifies the clip time as a Utc time position in the media file.  The Utc time can point to a different position depending on whether the media file starts from a timestamp of zero or not.
type UtcClipTimeResponseArgs struct {
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The time position on the timeline of the input media based on Utc time.
	Time pulumi.StringInput `pulumi:"time"`
}

func (UtcClipTimeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UtcClipTimeResponse)(nil)).Elem()
}

func (i UtcClipTimeResponseArgs) ToUtcClipTimeResponseOutput() UtcClipTimeResponseOutput {
	return i.ToUtcClipTimeResponseOutputWithContext(context.Background())
}

func (i UtcClipTimeResponseArgs) ToUtcClipTimeResponseOutputWithContext(ctx context.Context) UtcClipTimeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UtcClipTimeResponseOutput)
}

// Specifies the clip time as a Utc time position in the media file.  The Utc time can point to a different position depending on whether the media file starts from a timestamp of zero or not.
type UtcClipTimeResponseOutput struct{ *pulumi.OutputState }

func (UtcClipTimeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UtcClipTimeResponse)(nil)).Elem()
}

func (o UtcClipTimeResponseOutput) ToUtcClipTimeResponseOutput() UtcClipTimeResponseOutput {
	return o
}

func (o UtcClipTimeResponseOutput) ToUtcClipTimeResponseOutputWithContext(ctx context.Context) UtcClipTimeResponseOutput {
	return o
}

// The discriminator for derived types.
func (o UtcClipTimeResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v UtcClipTimeResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// The time position on the timeline of the input media based on Utc time.
func (o UtcClipTimeResponseOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v UtcClipTimeResponse) string { return v.Time }).(pulumi.StringOutput)
}

// Describes the basic properties for encoding the input video.
type Video struct {
	// The distance between two key frames. The value should be non-zero in the range [0.5, 20] seconds, specified in ISO 8601 format. The default is 2 seconds(PT2S). Note that this setting is ignored if VideoSyncMode.Passthrough is set, where the KeyFrameInterval value will follow the input source setting.
	KeyFrameInterval *string `pulumi:"keyFrameInterval"`
	// An optional label for the codec. The label can be used to control muxing behavior.
	Label *string `pulumi:"label"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
	StretchMode *string `pulumi:"stretchMode"`
	// The Video Sync Mode
	SyncMode *string `pulumi:"syncMode"`
}

// VideoInput is an input type that accepts VideoArgs and VideoOutput values.
// You can construct a concrete instance of `VideoInput` via:
//
//          VideoArgs{...}
type VideoInput interface {
	pulumi.Input

	ToVideoOutput() VideoOutput
	ToVideoOutputWithContext(context.Context) VideoOutput
}

// Describes the basic properties for encoding the input video.
type VideoArgs struct {
	// The distance between two key frames. The value should be non-zero in the range [0.5, 20] seconds, specified in ISO 8601 format. The default is 2 seconds(PT2S). Note that this setting is ignored if VideoSyncMode.Passthrough is set, where the KeyFrameInterval value will follow the input source setting.
	KeyFrameInterval pulumi.StringPtrInput `pulumi:"keyFrameInterval"`
	// An optional label for the codec. The label can be used to control muxing behavior.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
	StretchMode pulumi.StringPtrInput `pulumi:"stretchMode"`
	// The Video Sync Mode
	SyncMode pulumi.StringPtrInput `pulumi:"syncMode"`
}

func (VideoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Video)(nil)).Elem()
}

func (i VideoArgs) ToVideoOutput() VideoOutput {
	return i.ToVideoOutputWithContext(context.Background())
}

func (i VideoArgs) ToVideoOutputWithContext(ctx context.Context) VideoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoOutput)
}

// Describes the basic properties for encoding the input video.
type VideoOutput struct{ *pulumi.OutputState }

func (VideoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Video)(nil)).Elem()
}

func (o VideoOutput) ToVideoOutput() VideoOutput {
	return o
}

func (o VideoOutput) ToVideoOutputWithContext(ctx context.Context) VideoOutput {
	return o
}

// The distance between two key frames. The value should be non-zero in the range [0.5, 20] seconds, specified in ISO 8601 format. The default is 2 seconds(PT2S). Note that this setting is ignored if VideoSyncMode.Passthrough is set, where the KeyFrameInterval value will follow the input source setting.
func (o VideoOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Video) *string { return v.KeyFrameInterval }).(pulumi.StringPtrOutput)
}

// An optional label for the codec. The label can be used to control muxing behavior.
func (o VideoOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Video) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The discriminator for derived types.
func (o VideoOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v Video) string { return v.OdataType }).(pulumi.StringOutput)
}

// The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
func (o VideoOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Video) *string { return v.StretchMode }).(pulumi.StringPtrOutput)
}

// The Video Sync Mode
func (o VideoOutput) SyncMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Video) *string { return v.SyncMode }).(pulumi.StringPtrOutput)
}

// Describes the properties of a video overlay.
type VideoOverlay struct {
	// The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0.
	AudioGainLevel *float64 `pulumi:"audioGainLevel"`
	// An optional rectangular window used to crop the overlay image or video.
	CropRectangle *Rectangle `pulumi:"cropRectangle"`
	// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
	End *string `pulumi:"end"`
	// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
	FadeInDuration *string `pulumi:"fadeInDuration"`
	// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
	FadeOutDuration *string `pulumi:"fadeOutDuration"`
	// The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG or PNG formats, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats.
	InputLabel string `pulumi:"inputLabel"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The opacity of the overlay. This is a value in the range [0 - 1.0]. Default is 1.0 which mean the overlay is opaque.
	Opacity *float64 `pulumi:"opacity"`
	// The location in the input video where the overlay is applied.
	Position *Rectangle `pulumi:"position"`
	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	Start *string `pulumi:"start"`
}

// VideoOverlayInput is an input type that accepts VideoOverlayArgs and VideoOverlayOutput values.
// You can construct a concrete instance of `VideoOverlayInput` via:
//
//          VideoOverlayArgs{...}
type VideoOverlayInput interface {
	pulumi.Input

	ToVideoOverlayOutput() VideoOverlayOutput
	ToVideoOverlayOutputWithContext(context.Context) VideoOverlayOutput
}

// Describes the properties of a video overlay.
type VideoOverlayArgs struct {
	// The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0.
	AudioGainLevel pulumi.Float64PtrInput `pulumi:"audioGainLevel"`
	// An optional rectangular window used to crop the overlay image or video.
	CropRectangle RectanglePtrInput `pulumi:"cropRectangle"`
	// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
	End pulumi.StringPtrInput `pulumi:"end"`
	// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
	FadeInDuration pulumi.StringPtrInput `pulumi:"fadeInDuration"`
	// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
	FadeOutDuration pulumi.StringPtrInput `pulumi:"fadeOutDuration"`
	// The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG or PNG formats, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats.
	InputLabel pulumi.StringInput `pulumi:"inputLabel"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The opacity of the overlay. This is a value in the range [0 - 1.0]. Default is 1.0 which mean the overlay is opaque.
	Opacity pulumi.Float64PtrInput `pulumi:"opacity"`
	// The location in the input video where the overlay is applied.
	Position RectanglePtrInput `pulumi:"position"`
	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	Start pulumi.StringPtrInput `pulumi:"start"`
}

func (VideoOverlayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoOverlay)(nil)).Elem()
}

func (i VideoOverlayArgs) ToVideoOverlayOutput() VideoOverlayOutput {
	return i.ToVideoOverlayOutputWithContext(context.Background())
}

func (i VideoOverlayArgs) ToVideoOverlayOutputWithContext(ctx context.Context) VideoOverlayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoOverlayOutput)
}

// Describes the properties of a video overlay.
type VideoOverlayOutput struct{ *pulumi.OutputState }

func (VideoOverlayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoOverlay)(nil)).Elem()
}

func (o VideoOverlayOutput) ToVideoOverlayOutput() VideoOverlayOutput {
	return o
}

func (o VideoOverlayOutput) ToVideoOverlayOutputWithContext(ctx context.Context) VideoOverlayOutput {
	return o
}

// The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0.
func (o VideoOverlayOutput) AudioGainLevel() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VideoOverlay) *float64 { return v.AudioGainLevel }).(pulumi.Float64PtrOutput)
}

// An optional rectangular window used to crop the overlay image or video.
func (o VideoOverlayOutput) CropRectangle() RectanglePtrOutput {
	return o.ApplyT(func(v VideoOverlay) *Rectangle { return v.CropRectangle }).(RectanglePtrOutput)
}

// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
func (o VideoOverlayOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoOverlay) *string { return v.End }).(pulumi.StringPtrOutput)
}

// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
func (o VideoOverlayOutput) FadeInDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoOverlay) *string { return v.FadeInDuration }).(pulumi.StringPtrOutput)
}

// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
func (o VideoOverlayOutput) FadeOutDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoOverlay) *string { return v.FadeOutDuration }).(pulumi.StringPtrOutput)
}

// The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG or PNG formats, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats.
func (o VideoOverlayOutput) InputLabel() pulumi.StringOutput {
	return o.ApplyT(func(v VideoOverlay) string { return v.InputLabel }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o VideoOverlayOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v VideoOverlay) string { return v.OdataType }).(pulumi.StringOutput)
}

// The opacity of the overlay. This is a value in the range [0 - 1.0]. Default is 1.0 which mean the overlay is opaque.
func (o VideoOverlayOutput) Opacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VideoOverlay) *float64 { return v.Opacity }).(pulumi.Float64PtrOutput)
}

// The location in the input video where the overlay is applied.
func (o VideoOverlayOutput) Position() RectanglePtrOutput {
	return o.ApplyT(func(v VideoOverlay) *Rectangle { return v.Position }).(RectanglePtrOutput)
}

// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
func (o VideoOverlayOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoOverlay) *string { return v.Start }).(pulumi.StringPtrOutput)
}

// Describes the properties of a video overlay.
type VideoOverlayResponse struct {
	// The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0.
	AudioGainLevel *float64 `pulumi:"audioGainLevel"`
	// An optional rectangular window used to crop the overlay image or video.
	CropRectangle *RectangleResponse `pulumi:"cropRectangle"`
	// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
	End *string `pulumi:"end"`
	// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
	FadeInDuration *string `pulumi:"fadeInDuration"`
	// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
	FadeOutDuration *string `pulumi:"fadeOutDuration"`
	// The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG or PNG formats, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats.
	InputLabel string `pulumi:"inputLabel"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The opacity of the overlay. This is a value in the range [0 - 1.0]. Default is 1.0 which mean the overlay is opaque.
	Opacity *float64 `pulumi:"opacity"`
	// The location in the input video where the overlay is applied.
	Position *RectangleResponse `pulumi:"position"`
	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	Start *string `pulumi:"start"`
}

// VideoOverlayResponseInput is an input type that accepts VideoOverlayResponseArgs and VideoOverlayResponseOutput values.
// You can construct a concrete instance of `VideoOverlayResponseInput` via:
//
//          VideoOverlayResponseArgs{...}
type VideoOverlayResponseInput interface {
	pulumi.Input

	ToVideoOverlayResponseOutput() VideoOverlayResponseOutput
	ToVideoOverlayResponseOutputWithContext(context.Context) VideoOverlayResponseOutput
}

// Describes the properties of a video overlay.
type VideoOverlayResponseArgs struct {
	// The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0.
	AudioGainLevel pulumi.Float64PtrInput `pulumi:"audioGainLevel"`
	// An optional rectangular window used to crop the overlay image or video.
	CropRectangle RectangleResponsePtrInput `pulumi:"cropRectangle"`
	// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
	End pulumi.StringPtrInput `pulumi:"end"`
	// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
	FadeInDuration pulumi.StringPtrInput `pulumi:"fadeInDuration"`
	// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
	FadeOutDuration pulumi.StringPtrInput `pulumi:"fadeOutDuration"`
	// The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG or PNG formats, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats.
	InputLabel pulumi.StringInput `pulumi:"inputLabel"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The opacity of the overlay. This is a value in the range [0 - 1.0]. Default is 1.0 which mean the overlay is opaque.
	Opacity pulumi.Float64PtrInput `pulumi:"opacity"`
	// The location in the input video where the overlay is applied.
	Position RectangleResponsePtrInput `pulumi:"position"`
	// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
	Start pulumi.StringPtrInput `pulumi:"start"`
}

func (VideoOverlayResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoOverlayResponse)(nil)).Elem()
}

func (i VideoOverlayResponseArgs) ToVideoOverlayResponseOutput() VideoOverlayResponseOutput {
	return i.ToVideoOverlayResponseOutputWithContext(context.Background())
}

func (i VideoOverlayResponseArgs) ToVideoOverlayResponseOutputWithContext(ctx context.Context) VideoOverlayResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoOverlayResponseOutput)
}

// Describes the properties of a video overlay.
type VideoOverlayResponseOutput struct{ *pulumi.OutputState }

func (VideoOverlayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoOverlayResponse)(nil)).Elem()
}

func (o VideoOverlayResponseOutput) ToVideoOverlayResponseOutput() VideoOverlayResponseOutput {
	return o
}

func (o VideoOverlayResponseOutput) ToVideoOverlayResponseOutputWithContext(ctx context.Context) VideoOverlayResponseOutput {
	return o
}

// The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0.
func (o VideoOverlayResponseOutput) AudioGainLevel() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VideoOverlayResponse) *float64 { return v.AudioGainLevel }).(pulumi.Float64PtrOutput)
}

// An optional rectangular window used to crop the overlay image or video.
func (o VideoOverlayResponseOutput) CropRectangle() RectangleResponsePtrOutput {
	return o.ApplyT(func(v VideoOverlayResponse) *RectangleResponse { return v.CropRectangle }).(RectangleResponsePtrOutput)
}

// The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
func (o VideoOverlayResponseOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoOverlayResponse) *string { return v.End }).(pulumi.StringPtrOutput)
}

// The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
func (o VideoOverlayResponseOutput) FadeInDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoOverlayResponse) *string { return v.FadeInDuration }).(pulumi.StringPtrOutput)
}

// The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
func (o VideoOverlayResponseOutput) FadeOutDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoOverlayResponse) *string { return v.FadeOutDuration }).(pulumi.StringPtrOutput)
}

// The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG or PNG formats, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats.
func (o VideoOverlayResponseOutput) InputLabel() pulumi.StringOutput {
	return o.ApplyT(func(v VideoOverlayResponse) string { return v.InputLabel }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o VideoOverlayResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v VideoOverlayResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// The opacity of the overlay. This is a value in the range [0 - 1.0]. Default is 1.0 which mean the overlay is opaque.
func (o VideoOverlayResponseOutput) Opacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VideoOverlayResponse) *float64 { return v.Opacity }).(pulumi.Float64PtrOutput)
}

// The location in the input video where the overlay is applied.
func (o VideoOverlayResponseOutput) Position() RectangleResponsePtrOutput {
	return o.ApplyT(func(v VideoOverlayResponse) *RectangleResponse { return v.Position }).(RectangleResponsePtrOutput)
}

// The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
func (o VideoOverlayResponseOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoOverlayResponse) *string { return v.Start }).(pulumi.StringPtrOutput)
}

// Describes the basic properties for encoding the input video.
type VideoResponse struct {
	// The distance between two key frames. The value should be non-zero in the range [0.5, 20] seconds, specified in ISO 8601 format. The default is 2 seconds(PT2S). Note that this setting is ignored if VideoSyncMode.Passthrough is set, where the KeyFrameInterval value will follow the input source setting.
	KeyFrameInterval *string `pulumi:"keyFrameInterval"`
	// An optional label for the codec. The label can be used to control muxing behavior.
	Label *string `pulumi:"label"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
	// The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
	StretchMode *string `pulumi:"stretchMode"`
	// The Video Sync Mode
	SyncMode *string `pulumi:"syncMode"`
}

// VideoResponseInput is an input type that accepts VideoResponseArgs and VideoResponseOutput values.
// You can construct a concrete instance of `VideoResponseInput` via:
//
//          VideoResponseArgs{...}
type VideoResponseInput interface {
	pulumi.Input

	ToVideoResponseOutput() VideoResponseOutput
	ToVideoResponseOutputWithContext(context.Context) VideoResponseOutput
}

// Describes the basic properties for encoding the input video.
type VideoResponseArgs struct {
	// The distance between two key frames. The value should be non-zero in the range [0.5, 20] seconds, specified in ISO 8601 format. The default is 2 seconds(PT2S). Note that this setting is ignored if VideoSyncMode.Passthrough is set, where the KeyFrameInterval value will follow the input source setting.
	KeyFrameInterval pulumi.StringPtrInput `pulumi:"keyFrameInterval"`
	// An optional label for the codec. The label can be used to control muxing behavior.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
	StretchMode pulumi.StringPtrInput `pulumi:"stretchMode"`
	// The Video Sync Mode
	SyncMode pulumi.StringPtrInput `pulumi:"syncMode"`
}

func (VideoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoResponse)(nil)).Elem()
}

func (i VideoResponseArgs) ToVideoResponseOutput() VideoResponseOutput {
	return i.ToVideoResponseOutputWithContext(context.Background())
}

func (i VideoResponseArgs) ToVideoResponseOutputWithContext(ctx context.Context) VideoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoResponseOutput)
}

// Describes the basic properties for encoding the input video.
type VideoResponseOutput struct{ *pulumi.OutputState }

func (VideoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoResponse)(nil)).Elem()
}

func (o VideoResponseOutput) ToVideoResponseOutput() VideoResponseOutput {
	return o
}

func (o VideoResponseOutput) ToVideoResponseOutputWithContext(ctx context.Context) VideoResponseOutput {
	return o
}

// The distance between two key frames. The value should be non-zero in the range [0.5, 20] seconds, specified in ISO 8601 format. The default is 2 seconds(PT2S). Note that this setting is ignored if VideoSyncMode.Passthrough is set, where the KeyFrameInterval value will follow the input source setting.
func (o VideoResponseOutput) KeyFrameInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoResponse) *string { return v.KeyFrameInterval }).(pulumi.StringPtrOutput)
}

// An optional label for the codec. The label can be used to control muxing behavior.
func (o VideoResponseOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoResponse) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The discriminator for derived types.
func (o VideoResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v VideoResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
func (o VideoResponseOutput) StretchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoResponse) *string { return v.StretchMode }).(pulumi.StringPtrOutput)
}

// The Video Sync Mode
func (o VideoResponseOutput) SyncMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoResponse) *string { return v.SyncMode }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AbsoluteClipTimeOutput{})
	pulumi.RegisterOutputType(AbsoluteClipTimeResponseOutput{})
	pulumi.RegisterOutputType(AccountEncryptionOutput{})
	pulumi.RegisterOutputType(AccountEncryptionPtrOutput{})
	pulumi.RegisterOutputType(AccountEncryptionResponseOutput{})
	pulumi.RegisterOutputType(AccountEncryptionResponsePtrOutput{})
	pulumi.RegisterOutputType(AkamaiAccessControlOutput{})
	pulumi.RegisterOutputType(AkamaiAccessControlPtrOutput{})
	pulumi.RegisterOutputType(AkamaiAccessControlResponseOutput{})
	pulumi.RegisterOutputType(AkamaiAccessControlResponsePtrOutput{})
	pulumi.RegisterOutputType(AkamaiSignatureHeaderAuthenticationKeyOutput{})
	pulumi.RegisterOutputType(AkamaiSignatureHeaderAuthenticationKeyArrayOutput{})
	pulumi.RegisterOutputType(AkamaiSignatureHeaderAuthenticationKeyResponseOutput{})
	pulumi.RegisterOutputType(AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(AssetFileEncryptionMetadataResponseOutput{})
	pulumi.RegisterOutputType(AssetFileEncryptionMetadataResponseArrayOutput{})
	pulumi.RegisterOutputType(AssetStreamingLocatorResponseOutput{})
	pulumi.RegisterOutputType(AssetStreamingLocatorResponseArrayOutput{})
	pulumi.RegisterOutputType(AudioOutput{})
	pulumi.RegisterOutputType(AudioAnalyzerPresetOutput{})
	pulumi.RegisterOutputType(AudioAnalyzerPresetResponseOutput{})
	pulumi.RegisterOutputType(AudioOverlayOutput{})
	pulumi.RegisterOutputType(AudioOverlayResponseOutput{})
	pulumi.RegisterOutputType(AudioResponseOutput{})
	pulumi.RegisterOutputType(BuiltInStandardEncoderPresetOutput{})
	pulumi.RegisterOutputType(BuiltInStandardEncoderPresetResponseOutput{})
	pulumi.RegisterOutputType(CbcsDrmConfigurationOutput{})
	pulumi.RegisterOutputType(CbcsDrmConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CbcsDrmConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CbcsDrmConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(CencDrmConfigurationOutput{})
	pulumi.RegisterOutputType(CencDrmConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CencDrmConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CencDrmConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(CommonEncryptionCbcsOutput{})
	pulumi.RegisterOutputType(CommonEncryptionCbcsPtrOutput{})
	pulumi.RegisterOutputType(CommonEncryptionCbcsResponseOutput{})
	pulumi.RegisterOutputType(CommonEncryptionCbcsResponsePtrOutput{})
	pulumi.RegisterOutputType(CommonEncryptionCencOutput{})
	pulumi.RegisterOutputType(CommonEncryptionCencPtrOutput{})
	pulumi.RegisterOutputType(CommonEncryptionCencResponseOutput{})
	pulumi.RegisterOutputType(CommonEncryptionCencResponsePtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyClearKeyConfigurationOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyClearKeyConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyFairPlayConfigurationOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyFairPlayConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyFairPlayOfflineRentalConfigurationOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyFairPlayOfflineRentalConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyFairPlayOfflineRentalConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyFairPlayOfflineRentalConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyOpenRestrictionOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyOpenRestrictionResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyOptionOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyOptionArrayOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyOptionResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyOptionResponseArrayOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyConfigurationOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeaderResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifierResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionPtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionResponsePtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyLicenseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyLicenseArrayOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyLicenseResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyLicenseResponseArrayOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyPlayRightOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyPlayRightPtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyPlayRightResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPlayReadyPlayRightResponsePtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyRsaTokenKeyOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyRsaTokenKeyResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicySymmetricTokenKeyOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicySymmetricTokenKeyResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyTokenClaimOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyTokenClaimArrayOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyTokenClaimResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyTokenClaimResponseArrayOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyTokenRestrictionOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyTokenRestrictionResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyUnknownConfigurationOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyUnknownConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyUnknownRestrictionOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyUnknownRestrictionResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyWidevineConfigurationOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyWidevineConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyX509CertificateTokenKeyOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyX509CertificateTokenKeyResponseOutput{})
	pulumi.RegisterOutputType(CopyAudioOutput{})
	pulumi.RegisterOutputType(CopyAudioResponseOutput{})
	pulumi.RegisterOutputType(CopyVideoOutput{})
	pulumi.RegisterOutputType(CopyVideoResponseOutput{})
	pulumi.RegisterOutputType(CrossSiteAccessPoliciesOutput{})
	pulumi.RegisterOutputType(CrossSiteAccessPoliciesPtrOutput{})
	pulumi.RegisterOutputType(CrossSiteAccessPoliciesResponseOutput{})
	pulumi.RegisterOutputType(CrossSiteAccessPoliciesResponsePtrOutput{})
	pulumi.RegisterOutputType(DefaultKeyOutput{})
	pulumi.RegisterOutputType(DefaultKeyPtrOutput{})
	pulumi.RegisterOutputType(DefaultKeyResponseOutput{})
	pulumi.RegisterOutputType(DefaultKeyResponsePtrOutput{})
	pulumi.RegisterOutputType(DeinterlaceOutput{})
	pulumi.RegisterOutputType(DeinterlacePtrOutput{})
	pulumi.RegisterOutputType(DeinterlaceResponseOutput{})
	pulumi.RegisterOutputType(DeinterlaceResponsePtrOutput{})
	pulumi.RegisterOutputType(EdgeUsageDataCollectionPolicyResponseOutput{})
	pulumi.RegisterOutputType(EdgeUsageDataEventHubResponseOutput{})
	pulumi.RegisterOutputType(EdgeUsageDataEventHubResponsePtrOutput{})
	pulumi.RegisterOutputType(EnabledProtocolsOutput{})
	pulumi.RegisterOutputType(EnabledProtocolsPtrOutput{})
	pulumi.RegisterOutputType(EnabledProtocolsResponseOutput{})
	pulumi.RegisterOutputType(EnabledProtocolsResponsePtrOutput{})
	pulumi.RegisterOutputType(EnvelopeEncryptionOutput{})
	pulumi.RegisterOutputType(EnvelopeEncryptionPtrOutput{})
	pulumi.RegisterOutputType(EnvelopeEncryptionResponseOutput{})
	pulumi.RegisterOutputType(EnvelopeEncryptionResponsePtrOutput{})
	pulumi.RegisterOutputType(FaceDetectorPresetOutput{})
	pulumi.RegisterOutputType(FaceDetectorPresetResponseOutput{})
	pulumi.RegisterOutputType(FilterTrackPropertyConditionOutput{})
	pulumi.RegisterOutputType(FilterTrackPropertyConditionArrayOutput{})
	pulumi.RegisterOutputType(FilterTrackPropertyConditionResponseOutput{})
	pulumi.RegisterOutputType(FilterTrackPropertyConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(FilterTrackSelectionOutput{})
	pulumi.RegisterOutputType(FilterTrackSelectionArrayOutput{})
	pulumi.RegisterOutputType(FilterTrackSelectionResponseOutput{})
	pulumi.RegisterOutputType(FilterTrackSelectionResponseArrayOutput{})
	pulumi.RegisterOutputType(FiltersOutput{})
	pulumi.RegisterOutputType(FiltersPtrOutput{})
	pulumi.RegisterOutputType(FiltersResponseOutput{})
	pulumi.RegisterOutputType(FiltersResponsePtrOutput{})
	pulumi.RegisterOutputType(FirstQualityOutput{})
	pulumi.RegisterOutputType(FirstQualityPtrOutput{})
	pulumi.RegisterOutputType(FirstQualityResponseOutput{})
	pulumi.RegisterOutputType(FirstQualityResponsePtrOutput{})
	pulumi.RegisterOutputType(HlsOutput{})
	pulumi.RegisterOutputType(HlsPtrOutput{})
	pulumi.RegisterOutputType(HlsResponseOutput{})
	pulumi.RegisterOutputType(HlsResponsePtrOutput{})
	pulumi.RegisterOutputType(IPAccessControlOutput{})
	pulumi.RegisterOutputType(IPAccessControlPtrOutput{})
	pulumi.RegisterOutputType(IPAccessControlResponseOutput{})
	pulumi.RegisterOutputType(IPAccessControlResponsePtrOutput{})
	pulumi.RegisterOutputType(IPRangeOutput{})
	pulumi.RegisterOutputType(IPRangeArrayOutput{})
	pulumi.RegisterOutputType(IPRangeResponseOutput{})
	pulumi.RegisterOutputType(IPRangeResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageFormatOutput{})
	pulumi.RegisterOutputType(ImageFormatResponseOutput{})
	pulumi.RegisterOutputType(JobErrorDetailResponseOutput{})
	pulumi.RegisterOutputType(JobErrorDetailResponseArrayOutput{})
	pulumi.RegisterOutputType(JobErrorResponseOutput{})
	pulumi.RegisterOutputType(JobInputClipOutput{})
	pulumi.RegisterOutputType(JobInputClipResponseOutput{})
	pulumi.RegisterOutputType(JobInputsOutput{})
	pulumi.RegisterOutputType(JobInputsResponseOutput{})
	pulumi.RegisterOutputType(JobOutputAssetOutput{})
	pulumi.RegisterOutputType(JobOutputAssetArrayOutput{})
	pulumi.RegisterOutputType(JobOutputAssetResponseOutput{})
	pulumi.RegisterOutputType(JobOutputAssetResponseArrayOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventEncodingOutput{})
	pulumi.RegisterOutputType(LiveEventEncodingPtrOutput{})
	pulumi.RegisterOutputType(LiveEventEncodingResponseOutput{})
	pulumi.RegisterOutputType(LiveEventEncodingResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventEndpointOutput{})
	pulumi.RegisterOutputType(LiveEventEndpointArrayOutput{})
	pulumi.RegisterOutputType(LiveEventEndpointResponseOutput{})
	pulumi.RegisterOutputType(LiveEventEndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(LiveEventInputOutput{})
	pulumi.RegisterOutputType(LiveEventInputPtrOutput{})
	pulumi.RegisterOutputType(LiveEventInputAccessControlOutput{})
	pulumi.RegisterOutputType(LiveEventInputAccessControlPtrOutput{})
	pulumi.RegisterOutputType(LiveEventInputAccessControlResponseOutput{})
	pulumi.RegisterOutputType(LiveEventInputAccessControlResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventInputResponseOutput{})
	pulumi.RegisterOutputType(LiveEventInputResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventInputTrackSelectionOutput{})
	pulumi.RegisterOutputType(LiveEventInputTrackSelectionArrayOutput{})
	pulumi.RegisterOutputType(LiveEventInputTrackSelectionResponseOutput{})
	pulumi.RegisterOutputType(LiveEventInputTrackSelectionResponseArrayOutput{})
	pulumi.RegisterOutputType(LiveEventOutputTranscriptionTrackOutput{})
	pulumi.RegisterOutputType(LiveEventOutputTranscriptionTrackPtrOutput{})
	pulumi.RegisterOutputType(LiveEventOutputTranscriptionTrackResponseOutput{})
	pulumi.RegisterOutputType(LiveEventOutputTranscriptionTrackResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewPtrOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewAccessControlOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewAccessControlPtrOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewAccessControlResponseOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewAccessControlResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewResponseOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventTranscriptionOutput{})
	pulumi.RegisterOutputType(LiveEventTranscriptionArrayOutput{})
	pulumi.RegisterOutputType(LiveEventTranscriptionResponseOutput{})
	pulumi.RegisterOutputType(LiveEventTranscriptionResponseArrayOutput{})
	pulumi.RegisterOutputType(MediaServiceIdentityOutput{})
	pulumi.RegisterOutputType(MediaServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(MediaServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(MediaServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(MultiBitrateFormatOutput{})
	pulumi.RegisterOutputType(MultiBitrateFormatResponseOutput{})
	pulumi.RegisterOutputType(NoEncryptionOutput{})
	pulumi.RegisterOutputType(NoEncryptionPtrOutput{})
	pulumi.RegisterOutputType(NoEncryptionResponseOutput{})
	pulumi.RegisterOutputType(NoEncryptionResponsePtrOutput{})
	pulumi.RegisterOutputType(OutputFileOutput{})
	pulumi.RegisterOutputType(OutputFileArrayOutput{})
	pulumi.RegisterOutputType(OutputFileResponseOutput{})
	pulumi.RegisterOutputType(OutputFileResponseArrayOutput{})
	pulumi.RegisterOutputType(PresentationTimeRangeOutput{})
	pulumi.RegisterOutputType(PresentationTimeRangePtrOutput{})
	pulumi.RegisterOutputType(PresentationTimeRangeResponseOutput{})
	pulumi.RegisterOutputType(PresentationTimeRangeResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStatePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(RectangleOutput{})
	pulumi.RegisterOutputType(RectanglePtrOutput{})
	pulumi.RegisterOutputType(RectangleResponseOutput{})
	pulumi.RegisterOutputType(RectangleResponsePtrOutput{})
	pulumi.RegisterOutputType(StandardEncoderPresetOutput{})
	pulumi.RegisterOutputType(StandardEncoderPresetResponseOutput{})
	pulumi.RegisterOutputType(StorageAccountOutput{})
	pulumi.RegisterOutputType(StorageAccountArrayOutput{})
	pulumi.RegisterOutputType(StorageAccountResponseOutput{})
	pulumi.RegisterOutputType(StorageAccountResponseArrayOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlPtrOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlResponseOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlResponsePtrOutput{})
	pulumi.RegisterOutputType(StreamingLocatorContentKeyOutput{})
	pulumi.RegisterOutputType(StreamingLocatorContentKeyArrayOutput{})
	pulumi.RegisterOutputType(StreamingLocatorContentKeyResponseOutput{})
	pulumi.RegisterOutputType(StreamingLocatorContentKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(StreamingPathResponseOutput{})
	pulumi.RegisterOutputType(StreamingPathResponseArrayOutput{})
	pulumi.RegisterOutputType(StreamingPolicyContentKeyOutput{})
	pulumi.RegisterOutputType(StreamingPolicyContentKeyArrayOutput{})
	pulumi.RegisterOutputType(StreamingPolicyContentKeyResponseOutput{})
	pulumi.RegisterOutputType(StreamingPolicyContentKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(StreamingPolicyContentKeysOutput{})
	pulumi.RegisterOutputType(StreamingPolicyContentKeysPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyContentKeysResponseOutput{})
	pulumi.RegisterOutputType(StreamingPolicyContentKeysResponsePtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyFairPlayConfigurationOutput{})
	pulumi.RegisterOutputType(StreamingPolicyFairPlayConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyFairPlayConfigurationResponseOutput{})
	pulumi.RegisterOutputType(StreamingPolicyFairPlayConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyPlayReadyConfigurationOutput{})
	pulumi.RegisterOutputType(StreamingPolicyPlayReadyConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyPlayReadyConfigurationResponseOutput{})
	pulumi.RegisterOutputType(StreamingPolicyPlayReadyConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyWidevineConfigurationOutput{})
	pulumi.RegisterOutputType(StreamingPolicyWidevineConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyWidevineConfigurationResponseOutput{})
	pulumi.RegisterOutputType(StreamingPolicyWidevineConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(TrackPropertyConditionOutput{})
	pulumi.RegisterOutputType(TrackPropertyConditionArrayOutput{})
	pulumi.RegisterOutputType(TrackPropertyConditionResponseOutput{})
	pulumi.RegisterOutputType(TrackPropertyConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(TrackSelectionOutput{})
	pulumi.RegisterOutputType(TrackSelectionArrayOutput{})
	pulumi.RegisterOutputType(TrackSelectionResponseOutput{})
	pulumi.RegisterOutputType(TrackSelectionResponseArrayOutput{})
	pulumi.RegisterOutputType(TransformOutputOutput{})
	pulumi.RegisterOutputType(TransformOutputArrayOutput{})
	pulumi.RegisterOutputType(TransformOutputResponseOutput{})
	pulumi.RegisterOutputType(TransformOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(UtcClipTimeOutput{})
	pulumi.RegisterOutputType(UtcClipTimeResponseOutput{})
	pulumi.RegisterOutputType(VideoOutput{})
	pulumi.RegisterOutputType(VideoOverlayOutput{})
	pulumi.RegisterOutputType(VideoOverlayResponseOutput{})
	pulumi.RegisterOutputType(VideoResponseOutput{})
}
